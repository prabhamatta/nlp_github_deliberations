3258	Dont talk about it, just merge it ^^. NO other change than removal of spaces.
3252	Adds three new languages: - de_AT: German (Austria) - gl: Galician - sl_SI: Slovenian (Slovenia) Updates many others. Thanks to the translators contributing on Transifex!
3251	spellcheck.
3248	This is more consistent with other places in the GUI. ![overviewalignright](https://f.cloud.github.com/assets/126646/1539303/35e0bb78-4d06-11e3-8cad-d6eeff582cf8.png)
3247	- example: if util.h includes stdint.h, remove it from util.cpp, as util.h is the first header included in util.cpp
3246	Rebased (and pulltester-fixed) version of #3184
3244	Change mingw build to use C99 printf statements. Otherwise, format specifiers such as PRId64 will not work on XP or earlier (see This bug was introduced with 51ed9ec9. Continued from #3237 (Silence inttypes.h compiler warnings on Windows) and #3236 (massive compiler warning spam). This also adds strprintf() testcases so that hopefully this problem will be caught by the pulltester next time.
3241	Fixes ancient issue #1460.
3240	Rebased version of #2901
3238	- harmonize function with GUIUtil::getOpenFileName() - also make PNG Image singular (grammar)
3237	- the warnings are related to MinGWs inttypes.h (observed with MinGW based on GCC version 4.8.1 (rev5, Built by MinGW-W64 project) and likely other version also suffer from this) - fixes #3236
3235	
3233	Lets merge the non-controversial commits of #3147, at least if it passes the pulltester now.
3232	Add note about building on Ubuntu 13.10 (issue #3219). Also mention `autoconf` as required package.
3231	Updates some documentation, sparked from issue #3230. I cannot test the build instructions myself, but assume they will work (what is there now doesnt work regardless). The command find . -path */.git* -prune -o -type f -exec grep makefile\\. {} \; -print shows only 2 more files that reference the old makefile.* files: cd src; $(MAKE) -f makefile.unix bitcoind cd src; $(MAKE) -f makefile.unix clean cd src; $(MAKE) -f makefile.unix test_bitcoin ./contrib/debian/rules src/makefile.osx (Expat). ./contrib/debian/changelog
3223	* Add a few more basic script/tx test-cases (bitcoinj broke :( ) * Skip comparison tool on win32 since Wine breaks it
3222	- rework window title to not include Bitcoin - in front, as no other dialog does this - favor a connect() call over an own function for clearing the traffic graph - write monospace lowercase (seems to be correct after some web search) and add a comment that we should avoid / remove fixed font sizes
3215	This adds a simple "Open URI..." option to the menu which allows manually opening URIs and payment requests from files on disk. ![openurl1](https://f.cloud.github.com/assets/126646/1482933/a436f73c-46ed-11e3-9a17-c05f9d03c62c.png) ![openurl2](https://f.cloud.github.com/assets/126646/1482934/a448fe5a-46ed-11e3-8086-eda85889fec3.png) Some behind-the-scenes code changes: - Always route received URIs (even those drag/dropped) through PaymentServer; this means that bitcoin: URIs that refer to payment requests can be used - Add getOpenFileName function to GUIUtil analogous to getSaveFileName Addresses #3202.
3211	Fixes issue #3200. I do not know much about autotools nor automake, I would highly recommend review by a more knowledgeable person in the area. Has been merged into #2767 and subsequenty caused it to pass the BitcoinPullTester.
3209	Could you check the ``AskPassphraseDialog::event()`` code, it looks like we nearly duplicated ``AskPassphraseDialog::eventFilter()``. Perhaps its save to remove it, Im not sure.
3208	- this change extends our working drag and drop feature for bitcoin: URIs by adding support for payment request URIs (payment request files should be easy to do in another pull also) - removes code from BitcoinGUI and lets PaymentServer handle it - makes eventFilter() in PaymentServer protected Intended as a first step for #3202.
3206	
3205	
3204	
3199	This pull request should have no functional effects. * The first commit removes the CBlockIndex dependency of CCoinsView, making it reason in terms of block hashes (which it was doing under the hood anyway). * The second commit moves most CCoins/CCoinsView related logic to coins.{h,cpp}, and the rest to txmempool.{h,cpp}. This removes the need for the LookupFromTip loophole, as txmempool is just built on top of coins.
3198	This is supposed to fix #2806 (compilation problems on OSX 10.9: ``` ... CXX rpcdump.o In file included from rpcdump.cpp:5: In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/iostream:38: In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/ios:216: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/__locale:144:29: error: cannot initialize a parameter of type std::__1::locale::facet * with an lvalue of type const boost::date_time::time_input_facet<boost::posix_time::ptime, char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > > * __install_ctor(__other, __f, __f ? __f->id.__get() : 0); ^~~ rpcdump.cpp:31:23: note: in instantiation of function template specialization std::__1::locale::locale<const boost::date_time::time_input_facet<boost::posix_time::ptime, char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > > > requested here const std::locale loc(std::locale::classic(), &facet); ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/__locale:96:46: note: passing argument to parameter here void __install_ctor(const locale&, facet*, long); ^ 1 error generated. make[3]: *** [rpcdump.o] Error 1 make[2]: *** [all-recursive] Error 1 make[1]: *** [all] Error 2 make: *** [all-recursive] Error 1 ```)
3197	Closes #839
3196	No more specific handling of GUI in bitcoin core. Replace the last usage of fHaveGUI with a fForceServer parameter on AppInit2.
3193	Unless a .gitignore pattern is anchored, itll match in any directory, not juts at the top level. Simplify .gitignore accordingly.
3192	This check is unnecessary since the size of a transaction is no less than 60. It also seems a little inconsistent since MAX_BLOCK_SIZE is used for both length of the serialized block and for the number of transactions in a block. If there are MAX_BLOCK_SIZE transactions, the serialized size check will fail.
3191	sha256sum verification of source tarballs during gitian build. This follows the earlier example in boost-win32.yml. This does not change anything about the gitian outputs. **Test Plan** * Search for multiple copies of the tarball and download them from multiple distros. Confirm that they match the sha256sums in this commit.
3189	- add new processSendCoinsReturn() function, which parses the status of WalletModel::SendCoinsReturn and generates a pair consisting of a message and message flags - result is we only need one emit message() call - this change ensures that the GUI is shown for warnings/errors in sendcoinsdialog, because of message() taking care of that for modal messages - changes 2 warning message into error messages and removed "Error:" in front of the actual error message string
3188	Its IMHO much easier to work with debug.log, if timestamps are shown, which I think also mentioned some days ago.
3187	- remove explicit init of netManager as this is done in the constructor anyway - move initNetManager() call to uiReady(), which removes an assert() and allows us to use message() in initNetManager() (currently unused but could be necessary because of proxy related messages) - make initNetManager() private - update paymentservertests.cpp
3185	Send "reject" messages to peers if their transactions or blocks are rejected. See and the discussion on the bitcoin-development mailing list. Tested by running three -regtest -debug=net -printtoconsole nodes, one of which was running with -fuzzmessagestest=11 to generate garbled blocks/transactions, and verified that reject messages were sent and reported correctly as new blocks were generated and transactions sent between them.
3184	Some expanded docs for the rpc commands...comments? terrible? Based on the proposal, update the help message of rpc methods - strings arguments are in double quotes rather than square brackets - numeric arguments have no quotes (and no default value) - optional parameters are surrounded by round brackets - json arguments are strings but dont use double quotes Added 3 sections for the details - Arguments: lists each argument, its type, required or not, a default, and a description - Result: The method result, with json format if applicable, type, and a description - Examples: examples calls using bitcoin-cli and curl for json rpc call Problems - maybe this is too verbose - lines might be too long - description are not good or complete - examples may be too much
3180	Currently there is a 100ms sleep in the message processing thread that adds delay to processing messages. This patch skips the sleep when there is additional work to do. Additionally ProcessMessages & ProcessGetData are modified such that their maximum run time is reduced; this improves the average latency peers see when there is high load. (This has a significant impact on high latency networks during initial block synchronization).
3179	- it can happen, that PaymentServer::ipcSendCommandLine() is unable to detect the correct network, for example when a bitcoin: URI contains an invalid address or when a payment request can be read - in this case try to send the request to a mainnet local pr server, if this fails use a testnet local pr server
3177	- replaces pwalletMain->IsLocked() checks, which mostly did not even throw an error - in keypoolrefill init kpSize to 0 as we have the logic to determine max kpSize in pwalletMain->TopUpKeyPool() anyway
3176	- add a check for CKey::size() of a and b (size can be 0 or 32) - change the fixed value in memcmp() to use a.size() instead - fixes #3090
3175	Dont merge this till pull-tester comes back
3174	
3173	I needed this to test the new "reject" p2p message, but it should be generally useful for fuzz-testing network message handling code. Note: youll quickly trigger the DoS-and-ban code if you connect to random peers, this is most useful in a two-nodes-on-your-development-machine testnet-in-a-box or -regtest setup.
3169	- directly connect to message() signal from wallet model in the main GUI to reduce complexity of the slot/signal handling for message()
3165	
3164	One minor tweak to make the block downloading a bit more aggressively send getdatas and qa/ script tweaks. If I did things right pull-tester should come back with an all-good after having run the latest BitcoindComparisonTool.
3163	Instead of explicitly testing for the presence of any output, and dealing with this case specially, just interpret it as an empty CCoins. The case previously caught using the HaveCoins check, is now handled by the generic outs != outsBlock test. This fixes #3156 and replaces #3143.
3162	This seems to cause problems on recent clang, and looks totally redundant and unused. The const_iterator version is identical to the vector::const_iterator one (which is a typedef thereof). Marking it private (instead of removing) compiles fine, so this version is effectively unused even.
3161	- directly connect to message() signals from wallet model in the main GUI to reduce complexity of the slot/signal handling for message()
3160	Related to #3157 and #3159 (same changes for addressbookpage and transactionview). Goal: Harmonize user experience for export of addresses, transactions and backup of the wallet! ![wallet](https://f.cloud.github.com/assets/1419649/1414039/4b926b92-3e65-11e3-8c5f-65c727020c5b.png)
3159	Related to #3157 and #3160 (same changes for addressbookpage and walletview). Goal: Harmonize user experience for export of addresses, transactions and backup of the wallet! ![export_tx](https://f.cloud.github.com/assets/1419649/1414017/64e2b766-3e63-11e3-938d-028db94dbc2c.png)
3158	Important for #3157, #3159 and #3160.
3155	INIT_PROTO_VERSION is the initial version, after a succesful version/verack it is increased to a negotiated version. MIN_PEER_PROTO_VERSION could be a different value to disconnect from peers older than a specified version. This commit alone does not change any behavior. It stresses the difference between the initial and minimum version, the latter of which can be set to enforce a minimum version in a later policy discussion.
3154	I want to get these cleanups into master now to save work on merge conflicts later. This mostly just moves mempool-related code from main.cpp to txmempool.{cpp,h} There are a few small refactors: + nTransactionsUpdated moved from a global var to a mempool private var (with accessor functions) + Made all the CTxMemPool methods thread safe (they take the mempool.cs lock) + Folded mempool.exists() into mempool.lookup() to avoid possible multithreading bugs and simplify calling code + Found and fixed a potential bug in main.cpp where mempool.mapNextTx was accessed without holding the mempool.cs lock
3153	Bug-fix cherry-picked from the smart fee work: Changes the response to the mempool command so that if the memory pool has more than MAX_INV_SZ transactions (50,000) it will respond with multiple inv messages.
3152	Existing government backdoors are all secret and highly inefficient. Add a "front door", making access easier -- and open and transparent too.
3151	this continues the work in #3144, does this look sane? Use proper signals everywhere. Removes the need to store a pointer to the BitcoinGUI object in the walletview. Also removes the interdependence between setWalletModel / setBitcoinGUI. Warning: not everything is tested yet
3150	- remove 2 unneeded windowTitle attributes, which bloat our translations - cleanup some unneeded .cpp/.h includes and class usages - use a more generic string for clearing sendcoinsdialog and requestpaymentdialog - edit 2 strings in BitcoinGUI and replace "edit" with "show" as this seems more clear in the context where it is used
3149	- remove an obsolete connection to a signMessage() signal
3148	- changes some strings that were forgotton or made no sense in the conext they are used - remove an orphan file from the qt project file - revert a small change in signverifymessagedialog.ui - guard #include "bitcoin-config.h" with #if defined(HAVE_CONFIG_H) - remove windowTitle from addressbookpage.ui
3146	
3145	- this shows insecure (unsecured) payment requests in a new yellowish colored UI (based on the secure payment request UI) instead of our normal payment UI - allows us to receive paymentACK messages for insecure payment requests - allows us to handle expirations for insecure payment request - changed walletmodel, so that all types of payment requests dont touch the addressbook This is an attempt to make payment requests much more usable via our GUI and already addresses some of the problems mentioned in #2936. Im unsure, if #3095 also belongs here? This is considered a preview and open for feedback and bug reports! New insecure pr UI: ![insecure pr UI](https://f.cloud.github.com/assets/1419649/1416328/287d82c8-3f4a-11e3-9c7b-c9d984d2e5cb.png) ![insecure pr sendcoins UI](https://f.cloud.github.com/assets/1419649/1399683/2b7f1028-3cba-11e3-93fd-cf2d28676b3c.png) Todo: - re-add delete button for payment entries in sendcoinsdialog
3144	- this allows us to use emit message() over MessageBox:: or gui->message() calls in sendcoinsdialog and walletview - move main handlePaymentRequest() functionality back to BitcoinGUI - move a showNormalIfMinimized() before gotoSendCoinsPage()
3143	Previously DisconnectBlock() would fail when undoing such transactions because it assumed all transactions will add at least one output to the UTXO set. Be warned that I havent tested this very well; I may be missing something.
3139	- as we have main.h included in transactiondesc.cpp, we now also use COINBASE_MATURITY + 1 for the descriptive string - fixes #3131
3138	Space saving in /doc README.
3137	- fix crash with walletpassphrase by checking if RPC server is running and give a friendly error message how to fix this (fixes #3100) - add 3 new RPCErrorCodes RPC_SERVER_NOT_STARTED, RPC_NODE_ALREADY_ADDED and RCP_NODE_NOT_ADDED (I checked the source to not use a number already in use for RPC_SERVER_NOT_STARTED) - use the new codes where needed / missing - add missing use of RPC_INVALID_PARAMETER
3135	I observerd this while working on improving payment request UI, if a message() is emited and main window is minimized or in tray, the modal error messages are not shown on top. This fixes the problem and also corrects small style stuff.
3134	Continuation of #3133. Add just-in-case sanity test for JSON spirit parsing and AmountFromValue. Also update rpc_format_monetary_values test to use ValueFromAmount, so that ValueFromAmount is also tested.
3133	Tests for issue #3126. This problem pops up after upgrading json-spirit. Ive checked that this tests fails with 2227389 and succeeds without it.
3130	- add new slot handlePaymentACK() to paymentserver, which handles paymentACK messages (currently we just display them) - make paymentACK message a modal information dialog - change some QObject::tr() to just tr() - clarify the processPaymentRequest() error, when IsDust() - small string change to prevent a tripple + usage with QString
3129	This sneaked in via ^^.
3128	Also fix decoderawtransaction to not show reqSigs or addresses for null and nulldata txouts. (Previous version also left reqSigs uninitialized mistakenly)
3127	The changes broke amounts in listtransactions, and other places. See issue #3126 Verified that this simple git revert of the two json-spirit commits fixes the issue.
3125	
3124	
3123	Prettify some /Contrib READMEs Remove Dead Readme-Qt Links. #3092 SYN
3121	Original fix:
3119	This should close Issue #3107. Searched through the repo, and found all except one had been committed to in the past year, which should probably warrant a year bump.
3117	Print out every mutex lock/unlock if compiled -DDEBUGLOCKORDER only if -debug=lock is set.
3115	This pull request converts the custom callback handling (from main to wallet) to using boost::signals2, which allow concurrent modification/execution, and are thread-safe. To implement callbacks, a new CWalletInterface is defined in main, and implemented by wallet. As a result, together with a few more changes, we can break the dependency from init (and indirectly, from main) on wallet. Two functional cleanups were included as well, namely removing the behaviour where transactions "fFromMe" were always trickled (we shouldnt treat our own transactions differently, privacy leak) and removing the (apparently since-long broken) PrintWallets functionality. Closes #2965.
3114	Instead of relying on cs_main (defined in a different module) to prevent concurrent access to it. Depends on #2840.
3109	There were too many levels of indirection here, and the functionality of walletframe and walletstack can easily be merged. This commit merges the two which cuts a lot of lines of boilerplate code.
3108	- rename reportError() into message() to be in line with our default message() signal/slot naming (and can be used for all types of messages) - rename some QStrings to not collide with message() function - add a missing message for malformed URIs that IS also used in BitcoinGUI - fix / extend some comments and misc style fixes
3106	
3104	- this extends the accepted ciphersuites with TLSv1.2 ones - also removes !AH, as I could not find documentation on it and the change did not result in a changed ciphersuite list (checked via openssl ciphers -v) - closes #3096 (which also contains more details)
3103	Adds an appbundle target that creates a top-level Bitcoin-Qt.app/ Modifies the deploy target so that it leaves behind Bitcoin-Qt.app; make clean will remove it. This is very useful in combination with for testing payment request handling (I compile a source-tree Bitcoin-Qt.app/ and then use RCDefaultApp so that it is used to handle bitcoin: URIs).
3102	- if BitcoinGUI::dropEvent() contains valid URIs ensure sendcoins is shown to draw users attention to it - misc small style fixes in the same file
3101	- makes the code for updating a label reusable - no functional changes
3099	This is a work in progress to improve the workflow for receive coins and fix #2429. New receive tab: ![example1](https://f.cloud.github.com/assets/126646/1342888/e2ed7e8a-366a-11e3-9392-ddb8a39f0832.png) After clicking "Request payment" a new receiving address is created (except when "Reuse ..." is checked, in which case the user can select an existing one). Then the following window is shown: ![newreq](https://f.cloud.github.com/assets/126646/1360439/c9ac093c-37f5-11e3-972e-81ddc0b1102d.png) When compiling without QR codes, the dialog is the same apart from the QR code at the top. Im thinking of putting address/amount/label/message in a single text area to make it easier to copy/paste the entire payment request to the recipient (for example into a mail), but this is the general idea. Ive also simplified the interface by removing the "addresses" tab and instead moved command for getting a list of used receiving and sending addresses to menu ![menu](https://f.cloud.github.com/assets/126646/1342923/88fbd0b0-366b-11e3-9575-b1b53f7a403b.png) Any testing is welcome. Known currently broken: - Sign/verify message from address list
3098	Found out what everything did, and finished the /Contrib Index. Standardized the READMEs, and converted existing ones to Markdown. Renamed /Misc to /Linearize since it was the only script in there.
3097	#3092 removed readme-qt.md, but it was still listed in the index for the /doc README.
3094	- use it for secure payment-requests (this change allows a copy&paste of the amount and looks a little nicer than just a disabled GUI element)
3093	
3092	Now that autotools is used as a build system there is nothing special about building the GUI anymore. People were getting confused about the lack of any real build instructions in readme-qt.md. Merge the salvageable parts into build-unix.md.
3091	
3089	Seems like there are a lot of advertised testnet HS nodes that dont actually work. Lack of the testnet port on the example HS config might be one reason.
3087	As block index entries have a flag for marking invalid blocks, the best invalid work information can be derived from there. In addition, remove the global from main.h. Depends on #3077.
3086	
3085	See Bitcoin Pull #2902 for more info on the documentation cleanup. Added an index to the /contrib folder to make it a little bit more readable. Will squash when commit is satisfactory.
3084	
3083	This moves the chain-related logic in CBlockLocator to CChain (CBlockLocator is a P2P data structure, its implementation shouldnt depend on validation engine globals), and then moves CBlockLocator itself from main.h to core.h. This means construction of CBlockLocator objects now happens in O(log nHeight) instead of O(nHeight), as it can use CChains height-based index. Depends on #3077.
3082	Rework of #3072. This just adds the new executable. I gave up on the code movements to remove the dependency on leveldb/BDB as things are just too entangled, see #3072 for details. Hopefully this will also make the pull tester happier. And this is easier to review, too. This adds an executable `bitcoin-rpc` that only serves as a Bitcoin RPC client. The commit does not remove RPC functionality from the `bitcoind` yet, this functionality should be deprecated but is left for a later version to give users some time to switch.
3081	- I observed a massive amount of redefinition warnings after #3071, which are silenced by this patch - uses the same style as we do in other places, where we define ``_WIN32_WINNT``
3080	sendcoinsentry: small clear() and setValue() changes - clear(): clear all UI elements (for secure and insecure payments) - setValue(): only modify UI elements, which need to be set (for secure or insecure payments) sendcoinsdialog: display real failed address string - display the real string (faulty address), which causes the valid address check to fail, instead of a stringified "nonsense" CBitcoinAddress paymentserver: use own HTML-esc / add new header const - make processPaymentRequest() use our own HTML-escaping function from GUIUtil - make string "application/bitcoin-payment" a constant (below similar constant strings in the .cpp file)
3078	Re-organize the pull-tester scripts a bit. And disables running the blockchain tester, it is not working properly on the pull-tester machine for reasons I cannot explain (fails to start).
3077	This removes several globals (pindexBest, pindexGenesisBlock, hashBestChain, nBestHeight, nBestChainWork, vBlockIndexByHeight), and replaces them by chainBlocks, an instance of a new CChain class. CChain actually only wraps what was previously stored in vBlockIndexByHeight - all other variables are redundant and can be computed from that one. This is a preparation for a second iteration of headersfirst which Im implementing, which will add a second instance of CChain (chainHeaders) in addition to chainActive. This pull request shouldnt change any functionality. Since pindexGenesisBlock, hashBestBlock and nBestChainWork are now computed when needed rather than stored, there are potential edge cases in which no genesis block exists yet, and chainActive.Tip() returns NULL. I have tested synchronizing from network and reindexing.
3076	class template base_uint had its own private lookup table. This is saving 256 bytes per instantiation. The result is not spectacular as bitcoin-qt has only shrinked of about 1Kb but it is still valid improvement. Also, I have replaced a for loop with a memset() call. A unit_test has been added to check the change. Signed-off-by: Olivier Langlois <olivier@olivierlanglois.net>
3074	This equalizes the behavior between the GUI and bitcoind and removes the last usage of fHaveGui (the other is removed in #3072). The commit doesnt completely remove default key functionality but removes the code that sets a new default key after a transaction when it received coins. Completely removing default key functionality is not that easy because it is used as stopgap in a few places - (in `CWallet::LoadWallet`) to determine whether this is the first run with this wallet. - (in `CReserveKey::GetReservedKey`) to return something when the keys are exhausted and keypool should be topped up However these stopgaps are not affected by this change. There will still be an initial default key, it will just never change.
3073	This pull may be slightly controversial, but I dare say that `GetDataDir()` is never used on any performance critical paths (and if it is, it is a bug). Its not that heavy in the first place. This change simplifies the code (no more ClearDatadirCache) and removes any `pathCached`/`csPathCached` destruction order problems (if they are still around).
3072	This adds an executable `bitcoin-rpc` that only serves as a Bitcoin RPC client. The commit does not remove RPC functionality from the `bitcoind` yet, this functionality should be deprecated but is left for a later version to give users some time to switch. To try to remove RPC client dependency on BDB and leveldb I - Moved HelpMessage from `init.cpp` to `util.cpp` - Split `bitcoinrpc.cpp` into `rpcprotocol.cpp`, `rpcclient.cpp` and `rpcserver.cpp` Still this was not successful. It turns out that `util.cpp`, through `Params().DataDir()` in `GetDataDir(fNetSpecific=true)` depends on the block chain parameters, and that way pulls in all the core files (`core.cpp`, `blockchain.cpp`) including the ones that need leveldb and BDB. Splitting `util.cpp` would be possible (as the RPC client only needs the un-specific data dir to get at the configuration file) although somewhat more thinking is required. This would result in many more changes so lets leave it for later. **Note:** This leaves the only usage of `fHaveGUI` left in wallet.cpp: which deals with the default key which we want to remove. After this, the variable can be removed from the core. This is outside the scope of this pull though.
3071	Create an allocators.cpp, and move all of the #ifdef WIN32 code and the #include of windows.h into it. Two motives for this cleanup: 1. Im getting a weird error in windows.h in my smartfee branch. 2. allocators.h is included (indirectly) just about everywhere, so this should speed up Windows compiles quite a lot.
3069	- fixes #3006 by preventing addressbook changes when using secure payment-requests
3068	
3067	- re-work -debug help message text - make -debug log every debugging information again (even all categories) - remove unneeded fDebug checks in front of LogPrint()/qDebug(), as that check is done in LogPrintf() when category is != NULL (true for all LogPrint() calls - remove fDebug ONLY in code which is NOT performance-critical - harmonize addrman category name - deprecate -debugnet usage, should be used via -debug=net and remove the corresponding global
3066	
3065	1. build dependence requirement of libboost-test-dev should be added to readme-qt.md 2. -fPIC flag should be add to leveldb Makefile
3064	- I introduced the problem and fixed it with better readable code
3061	3 possible cases for n: > 0, < 0 and == 0 Skip everything if == 0 reserve string memory for every valid Money values Add sign first to avoid memory copy that inserting it at the end incur. Remove a superfluous counter: nTrim Eliminate 2 logical expression evaluations. Signed-off-by: Olivier Langlois <olivier@olivierlanglois.net>
3060	Im working on re-enabling pull-tester do mingw builds this afternoon. No need to ACK this, Ill pull it when it works.
3059	- fixes #3037 by adding missing join_all() call and brings bitcoind shutdown code in line with Bitcoin-Qt shutdown code - added a comment for the if (!fRet) case
3057	
3056	- when closing the client with an open debug window, that window could become stuck/unsuable (it was still shown wherea the main window was hidden already) - fix this by hiding the debug window, when quitting the the client
3055	desktop environment will find them because they are in standard paths
3054	Basically that means to prefer prefix increment over postfix ones As the latter produce temporary objects. Signed-off-by: Olivier Langlois <olivier@olivierlanglois.net>
3053	Hurricane Electric uses block 2001:470::, not 2011:470::
3051	- helps recognizing that the resource file belongs to bitcoind.exe
3050	
3048	I often see how many and which outputs are unspent (and try to guess which inputs will be used in next payment, and so on). This can be done by command "listunspent" but now its a little bit unpractical. Outputs are not sorted by any key and when outputs count is more than 10, its badly readable. This patch sorts outputs by amount, ascending. **Pros:** - better readability of outputs **Cons:** - complexity of printing is n*log(n) instead of n (where n is number of outputs) - maybe question why to sort by amount and no by any other key (but I think that better any sort than no sort) For me, this is very useful. If you find it useful too, Ill be glad when it will be pulled to master.
3047	- prevents unneeded log messages, which could make users think something bad was happening
3046	This ensures the allocator is ready no matter when its needed (as some STL implementations allocate in constructors -- i.e., MSVCs STL in debug builds).
3045	Quick merge :)?
3043	The final revision of PR 3029 incorporated a review suggestion of replacing i686-w64-mingw32 with $HOST. But we forgot that $HOST is not expanded when within single quotes so it actually broke qt-win32.yml build. Neither myself nor the reviewers caught this error. I take responsibility for this mistake. This commit is the minimal necessary to restore the qt win32 build, similar to how it worked previously. I have personally tested rebuilding the entire stack from scratch and the result has a working deterministic bitcoin*.exe. cfields has major cleanups for all gitian recipes coming soon, so please resist the urge to bikeshed this PR with more improvements as it is highly likely to be discarded in the coming rewrite.
3042	Credit: sipa, cfields, Luke-Jr and michagogo contributed to this fix. Removing wine as a win32 build dep is beneficial to fixing Gitian LXC, which would enable many more people to join in the gitian.sigs process by being able to build with a linux VM instead of a virt capable host.
3041	Simplifies gitian win32 build by removing the wine build-time dependency. Patch by with cleanup and testing by wtogami. Resulting binaries seem to operate just fine. Getting rid of wine makes it much easier to use gitan LXC. After gitian LXC is fixed, it will be possible to do deterministic gitian builds wthin Linux VMs, making the process more accessible to a greater number of people.
3040	- remove an unneeded debug message in walletframe
3039	- make BitcoinGUI::showPaymentACK() use a reference for msg and use our own GUIUtil::HtmlEscape() function - ensure QTimer usage in clientmodel is the same as in walletmodel - remove an unneeded debug message in walletframe - flag some parameters as unused in DebugMessageHandler() - small code formatting changes
3038	- could be helpful when debugging shutdown related problems
3035	The introduction of Autotools has rendered these patches obsolete.
3034	The current link is redirecting to
3032	Hi. I wonder if you would be able to add this localisation to the Bitcoin application. Please get back to me if any further information is needed. Thank you.
3031	- moves 2 global variables from main.cpp/h to miner.cpp/h - also removes 2 unneded includes in miner.cpp, that come from miner.h already
3029	mingw upgrade allows more hardening, compiler bug fixes and possibily win64 later. Rename deps .zip files to be more consistent in revision format. Remove "msvc" compat triplet name. LDFLAGS -static-libgcc -static-libstdc++ Upgrade win32 gitian to boost-1.54.0. Workaround 1.54.0 build bug, upstream #9156 Workaround 1.51.0+ human bug, upstream #7262 Upstream 1.51.0 fixed a multiple reference bug that is problematic in 1.50.0. The cross-compile patch is by the Fedora package developer and shipped in Fedora. Please also note the sha256sum -c thing in boost-win32.yml. devrandom agreed it is a good approach to better ensure the integrity of inputs, at least prior to gitian itself gaining the ability to track and enforce particular input hashes. If folks have no objections to this sha256sum -c approach, I would like to do a different pull request that does it for all inputs. All unit tests pass.
3028	This commit adds a step, which is to git checkout the version to be built. This ensures that the gitian-descriptors for said version will be the correct ones. In addition, it updates the links for several dependencies, where the previously existing links were dead.
3027	Rewrite of sendcoinsentry.ui for payment protocol introduced a little design error on KDE 4, Qt 4 here. Adding a stretch in sendcoinsdialog fixes the problem for me. I also tried layoutRowStretch in sendcoinsentry directly, but this does not work. Did not look at payment protocol.
3026	As its possible that the on-disk UTXO set now has unspendable outputs, the startup consistency check may fail (reported by runeks on IRC).
3024	See for complete design; executive summary: This removes use of hard-coded fee constants for non-miners. Instead, fees are estimated based on transactions that recently left the memory pool because they were accepted into a block. Pull-requesting this to get code review; Ill be working on a test plan next. suggested the estimate would be better if we looked at transactions that languished in the memory pool, instead; I think that would best be accomplished by implementing a memory-limited memory pool, and keeping track of priority/fee for transactions that get evicted from the pool because it was full. In any case, we will probably get a better estimate of miners behavior by looking at both transactions that are accepted into blocks AND transactions that dont.
3023	Something seems to be wrong with the previous pull request (#2818), so Im recreating -- see there for message and discussion.
3021	- a recent pull changed xgettext to gettext, this is reverted here I had problems using the script with just gettext (on Windows), so I reverted back to xgettext.
3020	
3019	Fixes #3013.
3017	Result: ``` ==1519== LEAK SUMMARY: ==1519== definitely lost: 0 bytes in 0 blocks ==1519== indirectly lost: 0 bytes in 0 blocks ==1519== possibly lost: 0 bytes in 0 blocks ==1519== still reachable: 2,360 bytes in 14 blocks ==1519== suppressed: 0 bytes in 0 blocks ```
3016	As we dont have any releases enforcing this yet, and no others that have picked it up, we can change this without harm. It has the advantage of on average decreasing signatures by 0.5 byte, and avoiding DER padding problems.
3015	Requested in This fleshed out a few build problems that were fixed up here as well. Note that icons are currently missing.
3014	A few gitian fixes after recent configure changes. Fixes win32 runtime.
3011	This supercedes #2988 (-O2 -g is now default, plus other flags) and bits of #2986
3009	I finally got fed up enough with our lousy logging to do something about it. So: I replaced all instances of printf() in our code with either LogPrint or LogPrintf. LogPrintf("foo\n"); is a straight replacement for printf/OutputDebugStringf("foo\n"). It writes printf-formatted arguments to debug.log (or console if -printtoconsole). Use it for messages that should always go into debug.log (errors, startup info, etc). LogPrint("category", ...); is new-- it only logs if you pass a -debug=category flag. Run with multiple -debug= arguments to log more than one category (e.g. bitcoind -debug=net -debug=mempool ). I defined the following categories: net mempool rpc alert db addr addrman coindb rand If yall like this, feel free to add more categories, rename/combine these, etc.
3008	This is part of my quest to eliminate hard-coded fees from the reference implementation. The first: Remove the rule that all outputs of free transactions must be greater than 0.01 XBT. Dust spam is now taken care of by making dusty outputs non-standard. I did not change the coin selection algorithm, it will still try to avoid creating outputs less than 0.01 XBT. That could be changed/simplified a release after this rolls out to miners/relay nodes (before then, there is too much risk your free transactions would never confirm). The second: Changes the maximum size of a free transaction that will be created from 10,000 bytes to 1,000 bytes. The idea behind this change is to make the free transaction area available to a greater number of people; with the default 27K-per-block, just three very-large very-high-priority transactions could fill the space. I did not change the relay policy for free transactions (yet); you can still send a 26,000 byte zero-fee transaction and it will be relayed and might be mined. This just stops somebody moving a lot of old coins from accidentally monopolizing the free transaction area when they would almost certainly be perfectly happy to pay the fee.
3001	libleveldb.a and libmemenv.a should be able to build in parallel, but in practice calling the leveldb makefile ends up rewriting build_config.mk. If one target tries to build while the other is halfway through writing the .mk, the make ends up in an undefined state. Fix that by making one depend on the other. This also reorders the variables to be passed by param rather than via the environment, and combines the targets into a single rule to avoid needless duplication.
3000	As wed previously learned, OSXs fsync is a data eating lie. Since 0.8.4 were still getting some reports of disk corruption on OSX but now all of it looks like the block files have gotten out of sync with the database. It turns out that we were still using fsync() on the block files, so this isnt surprising.
2999	
2996	Addresses #2992. This creates a make translate target with the same functionality as before.
2995	- ensure message boxes are shown in center of our main window, not centered on the users desktop - always prefer user supplied titles for message boxes over the functions defaults (fixes a bug, where transaction info messages did not contain information, if it was incoming or outgoing)
2994	- ensure that user-defined address labels are shown in the sendcoins dialog, when using bitcoin: URIs or insecure payments (no changes to the secure payments UI) - favors supplied labels over user-defined ones from addressbook
2991	- remove some unneeded translatable strings from sendcoinsentry.ui file and rename some elements for better readability - optimize string prorcessing in SendCoinsDialog::on_sendButton_clicked() - make all UI labels for secure payments plain text and move the settings to sendcoinsentry.ui file - remove unneeded button and default button definiton from warning message boxes - remove fixed font-size when sending coins to an address with label and use monospace font for addresses
2989	This is a nop, it just drops dead code. Version is now set in configure.ac which makes replacements in other files as necessary.
2988	This is cfields preferred stopgap until we sort out how we want debug vs release setup.
2987	- CreateTransaction will detect/report if txFee added was required or is voluntary - Qt: different terms in send coins dialog
2986	Only behaviour change should be building with -O1 for debug builds (currently default).
2985	This is the first in a line of PRs to address some of the concerns laid out in #2979. Rather than adding more trickery to deduce where test data should be found, I believe that this is the more reliable solution. This uses the same mechanism as QT to include their assets in the resulting binary rather than reading it from the disk at runtime. Untested as-yet on OSX, but I believe it should work fine there. Copied from the main commit: Advantages: - Tests become distributable. - Cross-compile friendly. Build on one machine and execute in an arbitrary location on another. - Easier testing for backports. Users can verify that tests pass without having to track down corresponding test data. - More trustworthy test results and easier quality assurance as tests make fewer assumptions about their environment. - Tests could theoretically run at client/daemon startup and exit on failure. Disadvantages: - Required hexdump build-dependency. This is a standard bsd tool that should be usable everywhere. It is likely already installed on all build-machines. - Tests can no longer be fudged after build by altering test-data.
2982	This also makes negative transaction versions non-standard. This avoids an issue triggered in block 256818 where transactions with negative version numbers were incorrectly serialized into the UTXO set. On restart nodes detect the inconsistency and refuse to start so long as a block with these transactions is inside the self-consistency check window, logging "coin database inconsistencies found". The software recommends reindexing, but reindexing does not correct the problem. This should be fixed by changing the chainstate serialization, but working around it seems harmless for now because the version is not used by any network rule currently. A patch free workaround is to start with -checklevel=2 which skips the consistency checks, but the IsStandard change is important for miners in order to protect unpatched nodes.
2981	Ive seen users confused multiple times thinking they should be using -tor to set their tor proxy and then finding in horror that they were still connecting to the IPv4 internet. Even Jeff guesses wrong about what the knob does, so I think we should rename it. This leaves the old knob working, we can pull it out completely in a later release.
2980	Silence useless warning in src/json/json_spirit_writer_template.h to make important warnings easier to see. warning: typedef Char_type locally defined but not used [-Wunused-local-typedefs]
2979	
2978	
2977	Add protobuf 2.5.0 download for inputs. Seems to be missing. Edit: also fixed Qt gitian build and updated process for that
2976	Show the transaction vout index in transactions details dialog (in the same format as when copying it). Alternative to #2970. - Adds an vout parameter to TransactionDesc::toHTML, this will also make it possible to show specific subtransaction details in the details window.
2973	- removes all usages of PrintDebugStringF from Qt code - ensure same format for all debug.log messages "functionname() : Message"
2970	When using the context menu to copy a transaction ID, the subtransaction index is added for no apparent reason. We dont show the subtransaction index in the details window, so I see no reason why a user would want it appended to their transaction ID from the context menu.
2969	Signed-off-by: Soroush Rabiei <soroush.rabiei@gmail.com>
2968	This is a cheap hack to address the warnings people get during initial download, feel free to discard in favor of something more reasonable.
2967	
2963	- prepend "Bitcoin-Qt" in front of debug.log entries, which come from Qt - move DebugMessageHandler installation upwards to the event handler installation, which fits much better
2961	- rename URL into URI in paymentserver where correct - add some missing Qt-coding-stuff in paymentserver - change QSpinBox to QLineEdit as base for BitcoinAmountField in .ui files (as this is the result when converting the BAF back into base) - remove some c_str() and replace with QString::fromStdString() - remove several new-lines - remove unneeded spaces - indentation fixes
2959	
2958	Ive rebased pull request #2651 to payment request. This was a bit tricky as they affect the same code. Ive tried it a bit and it appears to work, but havent tested the interaction with payment request yet. can you please review/test this?
2957	
2956	Title says it all -- this is because of a confusion in #bitcoin-dev by a user who didnt realize at first that these addresses werent his.
2955	This is why we created this function. Avoids some #ifdef.
2952	Build a cache of already processed transactions is sufficient to fix this.CWalletTx::IsConfirmed displays exceptionally poor performance when there are multiple unconfirmed transactions where IsFromMe() is true. A cache of already processed transactions is sufficient to largely fix this. This is still optimized for the common case where most dependent transactions are not IsFromMe() As part of this change the logic has been simplified. Simple benchmark results: generate 200 blocks with regtest, create 300 transactions using standard sendtoaddress rpc and a new address for each transaction 95 seconds for the IsConfirmed this is replacing... well it still hasnt finished running at transactions 216 1414 seconds and getting worse ![isconfirmed](https://f.cloud.github.com/assets/620611/1052946/a100588e-10e6-11e3-8e2c-4985e4b04dbb.png) after transaction 175 the time per transaction grows exponentially 1.25 * e ^ (0.107 * x)
2951	Correctly use the purpose of addresses that are added after the start of the client. Addresses with purpose "refund" should not be visible in the GUI address list. This is handled correctly after this commit.
2950	Calculates a hash to accelerate key import. Enables skipping EC_KEY_check_key when a hash is present. Benchmarks show 0.15ms per key vs 1.5ms per key. An order of magnitude improvement.
2949	There have been several incidents where mainnet experimentation with raw transactions resulted in insane fees. This is hard to prevent in the raw transaction api because the inputs may not be known. Since sending doesnt work if the inputs arent known, we can catch it there. This rejects fees > than 10000 * nMinRelayTxFee or 1 BTC with the defaults and can be overridden with a bool at the rpc.
2948	Lacking access to change addresses was a bit of a hole in the raw transaction functionality, Ive found. It was named "getraw..." to emphasize this is not for normal use. The current definition of a change address, AFAICS: in the wallet, but not address book.
2947	Were not seeing large reorgs that would justify waiting a large amount past the rule required maturity, and the extra three hours is just a nuisance. Take one more block to at least give the 100th block time to propagate.
2946	- to be consistent and for better readability move all remaining SLOT()/SIGNAL() connections from .ui files into the .cpp files
2945	This changes the priority calculation to not include the size of per-txin data including up to 109 bytes of scriptsig so that transactions which sweep up extra UTXO dont lose priority relative to ones that dont. Id toyed with some other variations, but it seems like any formulation which results in an incentive stronger than making them not count will sometimes create incentives to add extra outputs so that you have extra inputs to consume later. The maximum credit is limited so that users dont lose the disincentive to stuff random data in their transactions, the limit of 109 is based on the size of a P2SH redemption with a compressed public key. This shouldnt need a staged deployment because the priority is not used as a relay criteria, only a mining criteria.
2944	Suggestion from BitPay: set an Accept: HTTP header when fetching payment requests / payment ACKs.
2943	Continuation of Changes since Round 2: Rebased on current master Big cleanups Added protoc/libprotobuf support Added win32 installer make target Added Gitian descriptors I could use some help with the following items: - Documenting windows/osx/mingw build. They should all be working, but I dont currently have a windows/osx environment for testing. Documentation is a rather large job for this merge, as it requires a pretty extensive overhaul. For the most part, the build docs can be thrown away and replaced by a single procedure, with the exception of platform-specific dependencies setup. There is no longer any need for a distinction between gui/non-gui build procedures. - Edit: Gitian issues fixed. Ive briefly updated the documentation for unix. Sadly, my macbook busted last weekend (should be fixed in ~1wk), So I was not able to add the osx dmg build target as I had intended, nor the documentation for building on osx. Is anyone willing to help me out with the above? -- Here is the final go at an Autotools build system replacement. It is meant to be a drop-in replacement for the current system(s), providing the same features with no net changes. It can also live side-by-side with the old system while sharing the same build-related variables in order to facilitate a smooth transition. I hope the benefits are obvious enough: A single/shared build procedure, portability, ease of packaging, ease for downstreams, ease for repository maintainers, cross-compilation, etc. I dont vouch for Autotools in any way, in fact, this configure.am is downright ugly (mainly just because of mingw though), but its portable and well-established. This does away with the need for qmake, as the Makefile is capable of generating everything it needs in a portable way. Building from CLI: For Linux, assuming the dependencies have been met, the build procedure looks like this: ``` ./autogen.sh ./configure make ``` Same for OS X, but the pkg-config path needs to be hooked up from macports first: ``` echo "/opt/local/share/aclocal" | sudo tee -a /usr/share/aclocal/dirlist ``` For mingw its the same, but you will need to provide lots of paths in the form of: ``` ./autogen.sh export STAGING=/path/to/extracted/libs ./configure CPPFLAGS=-I$STAGING LDFLAGS=-L$STAGING --prefix=$STAGING --host=i586-mingw32msvc --with-qt-bindir=$STAGING/host/bin --with-qt-plugindir=$STAGING/plugins --with-qt-incdir=$STAGING --with-boost=$STAGING --with-protoc-bindir=$STAGING/host/bin make ``` In addition, there are helpers for qt and boost to help with finding some locations. Use ./configure --help to see the available options. Native windows built is untested, as I dont have a windows environment at my disposal. make check will run the unit tests and print the results. Ive done my best to avoid adding any new behavior or features, and I would much prefer to aim for feature-parity before making any improvements.
2940	- it belongs to parameter-to-internal flags step, not parameter interactions phase
2939	- this also leads to soft-setting -upnp=0 when using Tor, which fixes #2927
2938	Seems it was forgotten about when IsPushOnly() and the unittests were written. A particular oddity is that OP_RESERVED doesnt count towards the >201 opcode limit unlike every other named opcode.
2937	New RPC "ping" command to request ping. Implemented "pong" message handler. New "pingtime" field in getpeerinfo, to provide results to user.
2935	Fixes #2934.
2933	
2932	- this allows to remove some URI related double processing of passed command-line arguments for Bitcoin-Qt and bitcoind by collecting a vector of URIs in ParseParameters() - rename ipcSendCommandLine() to ipcSendUris() to reflect we do not send the whole command-line, but just pre-filtered URIs - also just install an OSX-specific event filter in paymentserver on Mac - fCommandLine is also no longer a global in util, but a local variable in bitcoind.cpp
2931	
2930	- extend PaymentServer with setOptionsModel() and rework initNetManager() to make use of that - fix all other places in the code to use display unit from options and no hard-coded unit
2929	This simple patch gives user visibility to see the contents of the existing CNode::addrLocal member. No existing behavior is changed, this is read-only. If addrLocal is invalid (not filled in yet), the field will not be included in the output.
2928	Assuming no bugs, this pull request should present **zero behavior changes**. It presents equivalent transformations that eliminate a needless getblocktemplate dependency. Fixing this dependency is a blocker for no-wallet mode #2901 which will be rebased on top of this pull. Tests fine, hopefully quick to review and ACK.
2926	
2924	This change adds a Network Traffic tab to the debug window, containing total bytes in/out labels (formatted as KB, MB, GB) and a graph that shows sampled bytes per second in and out. The total time period covered by the graph is adjustable with a slider. ![snapshot2](https://f.cloud.github.com/assets/214252/1010300/24a85c1c-0b48-11e3-92c6-0ca5c0dffd3a.png)
2923	This exposes CNode::addrLocal to the user, formatted as a string, just like the existing "addr" field. I named it "peerlocal" instead of "addrlocal" to avoid breaking scripts that grep on the word "addr". Interestingly, the addrLocal structure isnt filled in properly in all cases (I have seen IPv6 nodes connect to my bitcoind but addrLocal contains only my IPv4 address), but at least this gives it exposure to aid in fixing this deeper bug that lies elsewhere in bitcoind.
2922	- update translation master files - include current translations from Transifex - add several new languages - fix a bug in bitcoin.qrc, which prevents some languages from beeing used (wrong file extension .ts instead of .qm was used)
2921	By the defer calculating sorted values we gaining speed on multiply numbers insert. google translate: using a deferred calculation, weve increased the speed of insertion of several numbers in succession
2920	Time of comparison proportional length of shorter argument. Less operations on cycle. (Removing weight % operation). google translate: The comparison is proportional to the shortest argument. Removed an expensive operation "modulo" of the cycle.
2919	This resulted in just passing all transactions to filtered wallets which worked surprisingly well, except where it didnt.
2918	Combined #2917 (removed internal miner and GBT wallet dependencies) with #2901 (no wallet)
2917	Built on top of #2905 (getwork removal), intended to complement #2901 (walletless node).
2916	
2915	Useful as a source of test vectors to anyone re-implementing bloom filters. For instance:
2914	This reduces a peers ability to attack network resources by using a full bloom filter, but without reducing the usability of bloom filters. It sets a default match everything filter for peers and it generalizes a prior optimization to cover more cases.
2913	Timestamps on the surrounding blocks are well-behaved, and block 250k is a nice, boring block.
2911	
2908	This pull-request is now moot, and fork I did it in no longer exists. Anyone who has the necessary privileges: please delete it.
2907	This pull switches the src/leveldb/ directory to the code in the current bitcoin/leveldb repository (branch bitcoin-fork, using git-subtree), with a cleaned-up history. This removes some Ripple-specific changes that made it into our repository earlier.
2905	Use getblocktemplate instead.
2904	With an encrypted wallet the GUI was prompting for a passphrase every time the user requested a new address. This is unnecessary, increases the exposure to keyboard sniffers, and discourages using fresh addresses for every transaction. Instead only prompt for a passphrase when the keypool runs out, also call the new address function with the flag that prevents reuse.
2903	Specifically, the fact that the command relates to wallet transactions.
2902	Clickable links in main README Added some notes and mac instructions to /doc README Added Bitcoin API commands for quick developer reference.
2901	Goal: As one goal is to eventually separate wallet/GUI from public blockchain engine, it is useful to explore what such an engine would look like. As such, disablewallet=1 will enforce pwalletMain==NULL, or "no-wallet mode." Many RPCs are disabled. getblocktemplate does continue to work, permitting no-wallet mining.
2899	Left behind after the change to Markdown.
2898	Seems like they got left behind when everything was changed to markdown.
2897	Seems like some of the old files got left behind when they were change to markdown.
2892	
2891	I used this code when debugging the OSX corruption issue. It just cleans up our leveldb error-detecting code a little bit.
2890	block.BuildMerkleTree(); is called twice for no reason. Just a few lines above its called the first time. We dont need to check for empty container here before the block.vMerkleTree.back() call, because block.vMerkleTree can not be empty at this point, because block.vtx.empty() has been checked before.
2888	This call is useful to mining pools and miners. It lets you get the estimated network hashrate at the current block (or any previous block) with a specified number of blocks to use to calculate the estimate.
2886	Fixes issue#2838; this is a tweaked version of pull#2845 that should not leak the length of the password and is more generic, in case we run into other situations where we need timing-attack-resistant comparisons.
2885	Replaces the validation check for "amount == 0" with an isDust check, so very small output amounts are caught before the wallet is unlocked, a transaction is created, etc.
2884	The length of vectors, maps, sets, etc are serialized using Write/ReadCompactSize -- which, unfortunately, do not use a unique encoding. So deserializing and then re-serializing a transaction (for example) can give you different bits than you started with. That doesnt cause any problems that we are aware of, but it is exactly the type of subtle mismatch that can lead to exploits. With this pull, reading a non-canonical CompactSize throws an exception, which means nodes will ignore tx or block or other messages that are not properly encoded. Please check my logic... but this change is safe with respect to causing a network split. Old clients that receive non-canonically-encoded transactions or blocks deserialize them into CTransaction/CBlock structures in memory, and then re-serialize them before relaying them to peers. And please check my logic with respect to causing a blockchain split: there are no CompactSize fields in the block header, so the block hash is always canonical. The merkle root in the block header is computed on a vector&lt;CTransaction&gt;, so any non-canonical encoding of the transactions in tx or block messages is erased as they are read into memory by old clients, and does not affect the block hash. And, as noted above, old clients re-serialize (with canonical encoding) tx and block messages before relaying to peers.
2883	
2882	
2881	- to match all other translatable strings in init.cpp and to simplify translations via Transifex
2880	Demonstrates the difference between OP_EQUAL and OP_NUMEQUAL.
2879	
2877	Compiling and running the Qt unit tests wasnt convenient, because youd have to make clean if you were switching between compiling bitcoin-qt and bitcoin-qt_test, because they both compiled the same sources with different #defines into the build/ directory. This pull makes the Qt unit test build directory build_test, so the two different builds dont interact with each other.
2876	This is a potential fix for the bug that causes several miner nodes to crash a few days ago. The problem: when a block is disconnected, the transactions in it are attempted to be moved to the mempool; if some of these are non-standard, this will fail. If there were transactions in the mempool already that depended one or more of those, they become orphan transactions - which breaks the mempools consistency assumption. In addition, this pull request adds a CTxMempool::check() method which runs an extensive consistency check on the mempool, and is called from several places when -checkmempool is passed (a non-documented flag).
2875	- Now you can instantly remove a specified private key - No need to rescan for wallet transaction in case you use "importprivkey", just enter: importprivkey <bitcoinprivkey> [label] false and you would have your wallet ready again in 1 second - If wallet is encrypted, it would be necessary to use walletpassphrase in advance (as its same rule for importprivkey) - If watch-only pulls get merged, it would hopefully help to add sweep private key functionality (like Armory Bitcoin client)
2874	Should help to stop "correct horse" type tx. as say, it may be not a bug. Ill cancel the request if more core devs reject me...
2873	I figured we needed a convenient address export mechanism that doesnt require decrypting the wallet or knowing any private keys.
2872	WalletView: - add new signal showNormalIfMinimized() - emit the new signal in handleURI() to fix a bug, preventing the main window to show up when using bitcoin: URIs WalletStack: - connect the showNormalIfMinimized() signal from WalletView with the showNormalIfMinimized() slot in BitcoinGUI - rework setCurrentWallet() to return a bool - add check for valid walletModel in addWallet() - add missing gui attribute initialisation in constructor WalletFrame: - remove unused or unneded class attributes gui and clientModel - add a check for valid clientModel in setClientModel() General: - small code formatting changes
2871	Orphan transactions were stored as a CDataStream pointer; this changes the mapOrphanTransactions data structures to store orphans as a CTransaction. This also fixes CVE-2013-4627 by always re-serializing transactions before relaying them. And I cleaned up the "tx" message-handling code a little (it was re-using inv and tx variables, which is error-prone and confusing). Tested by running against the main network with max orphans set to eleven, to exercise the add/remove/map overflow code.
2868	After these changes, all code in main.cpp is associated with maintenance of the public blockchain, with one notable exception: * callbacks such as EraseFromWallets(), SyncWithWallets(), PrintWallets(), ResendWalletTransactions() which call out from the public blockchain engine into the wallet code This change builds upon, and therefore includes and requires, req #2867.
2867	Mostly code movement, with a few bug fixes in a separate commit.
2866	Replace the loop macro with while (true). The #define caused problems for Qt.
2865	- seems the code tags in the original string cause errors, when using the Transifex site for translation
2864	This patch enables one to configure a whitelist of RPC commands that can be called for each allowed client IP. Lets look at the motivating use case for this feature. Consider a website that accepts bitcoin payments using the bitcoind API directly. The webserver and bitcoind are on separate servers. It is desirable that the webserver be able to call getnewaddress() and gettransaction (or listtransactions). It is highly undesirable (security risk) that the webserver be able to call any of the send* commands or stop command, or probably others, especially because the public-facing webserver is the most likely target to be attacked and possibly compromised. At this point, lets not get distracted with a discussion about using hot wallets vs cold storage vs 3rd party API. Instead suffice to say that the website has a need to do this, but desires to be as secure about it as possible. It is also possible to envision more complex scenarios with various client IPs, each with differering requirements / permissions, or all the same, as in a pool of frontend webservers. Okay, so -rpcipcmds to the rescue. Now the site administrator can configure bitcoind to only allow desired RPC calls from the webserver IP. Any other command results in "Method not allowed for client IP." json-rpc error. ./bitcoind --help | grep rpcip -rpcipcmds=<ip>,<cmd> Allow only specific commands from specified IP address. <ip>,<cmd1>,<cmd2>,<cmd3>... Example bitcoin.conf usage: rpcallowip=192.168.2.200 rpcipcmds=192.168.2.200,getnewaddress rpcipcmds=127.0.0.1,getnewaddress,sendtoaddress,getinfo,stop,help Implementation Notes: 1) If an IP is allowed with rpcallowip but does not have an rpcipcmds entry then all commands can be used. 2) WildCards in IP are accepted. 3) Works with single command invocation and also batch invocation. 4) For batch invocation, all commands are checked before any command is called. So all or nothing. 5) Some might find the syntax a little funky. I considered using &lt;ip&gt;:&lt;cmd&gt; format, one per line, but rejected it because it requires specifying the same IP over and over. The CSV format enables &lt;ip&gt;,&lt;cmd&gt;,&lt;cmd&gt;,&lt;cmd&gt;... per line and is easy to read/grok and to parse. So that was my thought process. 6) This is my first bitcoind modification effort, and my first ever github pull request. Also, I am not a networking expert, and my C++ is very rusty. It is likely something could have been done better, code or pull request does not meet standards, etc. If so, my apologies in advance. The patch meets my needs so far, and I felt I should contribute it in case it can benefit others. Feel free to re-work, re-write etc as necessary. 7) -rpcipcmds is kind of hard to read. I originally called it rpcallowipmethods. But that didnt format nicely with the other commands in the help. This does. Testing: * Has been briefly tested with both single and batch invocation from localhost as well as a remote IP. Tested with IPv4 addresses only. * I did not create a unit test for it. Maybe could test with localhost.... remote IP seems hard.
2863	
2857	- remove an unneded include for mswsock.h as we use winsock2.h anyway - move typedef u_int SOCKET; into the #ifndef WIN32 part - remove typedef int socklen_t; as this is defined in ws2tcpip.h I hope pulltester is happy with this :).
2856	- remove an unneeded windows.h include (comes from allocators.h, which is included in crypter.h)
2855	
2852	Returns nChainWork from the block index, the total work done by all blocks since the genesis block. Worth exposing for pedagogical reasons at the very least. Anyone who tries to bikeshed either the name or the format the value is returned in will regret it - Im warning you.
2851	See
2850	- it was possible to trigger an infinite loop in FreespaceChecker::check() by simply removing the drive letter on Windows (which leads to an infinite loop in the FreespaceChecker thread) - this was caused by not checking if we make progress with parentDir.parent_path()
2849	IF ELSE ELSE ENDIF is a valid construct; execution or non-execution inverts on each ELSE encountered.
2848	
2847	- move all QApplication includes to top of included Qt headers - undef our loop macro where it would cause compilation errors otherwise
2845	As per #2838 . Eliminates the possibility of timing attacks by changing the way the two passwords are compared. It iterates through each char in the strings, and if the two chars it is comparing arent the same, then it adds 1 to nReturn and the function, once its done comparing all the chars, will return false. Previously, the function would return false on the first char that didnt match, allowing a possible attacker to run a timing attack. See for reference.
2842	
2840	SendMessages() tries to acquire a cs_main lock now, but this isnt nessecary for much of its functionality. Move those parts out of the if condition.
2837	- move SelectParamsFromCommandLine() from init.cpp to bitcoin.cpp to allow to use TestNet() for Bitcoin-Qt instead of GetBoolArg("-testnet", false) - change order in bitcoind.cpp to match bitcoin.cpp functionality - hamonize error message strings for missing datadir and failing SelectParamsFromCommandLine() in bitcoin.cpp and bitcoind.cpp - use TestNet() call in splashscreen.cpp
2836	See also: (There might still be room for a small improvement in building speed here using --build-type=minimal )
2835	Using -mt-1_52 instead of -mt-s-1_52 as it can be compiled with the --build-type=minimal boost option saving space and time.
2832	
2830	Some currently missing features like decoding a script and adding a specific P2SH redeemScript to the wallet.
2829	This does not add actual deterministic wallet functionality yet, only an implementation of BIP32 derivation and its test vectors. Im usually not in favor of adding code that isnt used yet, but in this case it may be useful to give a "reference implementation" exposure.
2828	Using a shared lock for wallet registration functions since only functions that modify the setpwalletRegistered container structure itself (and not the contents) need exclusive access.
2827	- move the code for saving and restoring window positions from BitcoinGUI to GUIUtil, make it more generic and also use it for saving/restoring debug window positions We also could allow this for all other dialogs, if we want, but that is currently not the goal of this pull.
2826	- fixes src\net.cpp:1601: Error:invalid conversion from void* to const char* [-fpermissive] in a setsockopt() call on Win32 that was found by using MinGW 4.8.1 compiler suite See to verify that Win32 needs a ``const char *``.
2825	The key refactor changed the way unencrypted private keys with compressed public key are stored in the wallet. Apparently older versions relied on this to verify the correctness of stored keys. Note that earlier pre-release versions do risk creating wallets that can not be opened by 0.8.3 and earlier.
2824	I have found this usefull when I have to import keys with pywallet for example.
2823	Not sure how this got onto the bitcoin github and Im not sure how to delete this... sorry!
2820	Removes readme-qt.rst in favour of readme-qt.md Update build-***.md to point to the new readme file
2818	Ive been gitian-building lately, and from conversation in #bitcoin-dev on freenode it sounded like people doing that should be listed here. I understand if Im not well-known enough to be included. If you dont want to include this, thats fine with me. In addition, if youd like more verification or confirmation of who I am, Im willing to provide information about my identity to the core dev team upon request. As I realize Im not as well-known as the other users on the list, Ive weighted myself lower as well.
2817	This is a recreation of on a separate branch rather than master.
2816	I was involved in Gitian verification of 0.8.2 and 0.8.3. I frequently do gitian builds for Litecoin, and I am thinking about designing a better procedure for getting a lot more people involved in regular gitian verification. Meanwhile here is my key to be able to participate in the existing release procedure. I ported Gitian to Fedora and it has been working perfectly. My GPG key is signed by my old GPG key which is fairly well connected in the FOSS world.
2815	
2814	Calculates total uncommitted fees and transaction size required to include the transaction in a block for all transactions in the mempool. Cost is O(1) for mempool.accept() and limited to O(n) when a new block changes what transactions are in the mempool, either due to them being mined, conflicts, or reinstated by a re-org. I havent changed the mining code, and dont keep track of sigops yet. This isnt useful without mining code and mempool expiration so its not ready to be actually pulled yet. (mainly I want to see what the pulltester thinks) Note that this is a safe implementation, not a 100% accurate one, for reasons mentioned in CMemPoolTx::calcPrioritySums() In addition the memoized approach cant directly handle the case where a transaction with a lot of outputs is made worthwhile to mine because of multiple children.
2812	This information is available via roundabout methods*, but not directly. * gettxoutsetinfo or getblockcount->getblockhash
2809	
2808	Otherwise, git will happily seek to find a git directory at higher levels.
2807	- updates bitcoin_ja.ts
2805	Changes since Round 1: - Rebased on current master - Moved configure to root srcdir, and added a Makefile there - Split into several Makefile.ams with recursive build [1] - Work towards building correctly under gitian - Fixed/verified several build scenarios - Fixed up make dist to work as a viable end-result packaging mechanism [2] 1. Personally I believe that splitting up the build is a major regression from RFC1. This was done by request here. Most projects end up spending lots of time moving in the opposite direction, as a recursive build tends to be slower, more complicated, and more-error prone. That proves to be the case here as well, but Ive attempted to handle it as gracefully as possible. 2. make dist can be used to produce a bootstrapped tarball with git information included, intended for distribution as an official source release. This is the equivalent of taking a fresh git clone, running ./autogen.sh, and taring up the result. This is the common procedure for autotools projects. At this point I consider it to be merge-ready, with the exception of verification of gitian descriptors and documentation. Presumably removal of the old makefile.* would coincide with updated documentation. Several things can be improved and cleaned up after merge (dealing with versioning, for example), but Ive tried to ignore these things as much as possible for the sake of a quick merge. Edit: Removed crazy markup that looked like yelling -- sorry. -- Here is the second go at an Autotools build system replacement. It is meant to be a drop-in replacement for the current system(s), providing the same features with no net changes. It can also live side-by-side with the old system while sharing the same build-related variables in order to facilitate a smooth transition. I hope the benefits are obvious enough: A single/shared build procedure, portability, ease of packaging, ease for downstreams, ease for repository maintainers, cross-compilation, etc. I dont vouch for Autotools in any way, in fact, this configure.am is downright ugly (mainly just because of mingw though), but its portable and well-established. Ive opted not to write the documentation yet, because I would like to see what comments/concerns come out of the first round of review before committing to anything. This does away with the need for qmake, as the Makefile is capable of generating everything it needs in a portable way. Qt-creator can be used with the Autotools plugin, and is working nicely. For those who wish to use it this way, install the Autotools plugin from the about menu, then open Makefile.am as a project. It handles the build procedure, so there is no need to mess with the command-line procedures listed below. Building from CLI: For Linux, assuming the dependencies have been met, the build procedure looks like this: ``` ./autogen.sh ./configure make ``` Same for OS X, but the pkg-config path needs to be hooked up from macports first: ``` echo "/opt/local/share/aclocal" | sudo tee -a /usr/share/aclocal/dirlist ``` For mingw its the same, but you will need to provide lots of paths in the form of: ``` ./autogen.sh CPPFLAGS="-I/path/to/include -I/path/to/other/include" LDFLAGS="-L/path/to/libs -L/path/to/other/libs" ./configure make ``` In addition, there are helpers for qt and boost to help with finding some locations. Use ./configure --help to see the available options. Native windows built is untested, as I dont have a windows environment at my disposal. Gitian should be working for win32 builds. Ive guessed at Linux but have not yet verified. make check will run the unit tests and print the results. Ive done my best to avoid adding any new behavior or features, and I would much prefer to aim for feature-parity before making any improvements. TODO: - Verify gitian descriptors. - Add documentation
2804	As git provides a way to export a tarball given a commit, its very easy to add the creation of source releases, IMHO. We very much like people to build from git tags, but apparently this is hard or at least inconvenient for some infrastructure out there. I hope the overhead is minimal enough for those doing the release... This also disables the use of git-describe in exported source archives, as it results in a spurious error otherwise. I hope this closes #2476.
2803	How did this ever work?
2802	Changes: * Maintain a salt to perturbate the address index (protection against collisions). * Add support for address index entries in the block index, and maintain those if -addrindex is specified. It indexes the use of every >8-byte data push in output script or consumed script - or in case of no such push, the entire script. * Add a searchrawtransactions RPC call, which can look up raw transactions by address. I both hate and love this patch. I hate making it easy to build infrastructure that relies on a fully-indexed blockchain (which shouldnt be necessary), as it may remove the incentive to build more scalable solutions. On the other hand, in cases where the alternative is relying on a trusted third party, this approach is certainly preferable, and would allow an RPC-based blockexplorer, for example. A full -txindex=1 -addrindex=1 index is about 2.7 GiB now.
2801	Two fixes: clicking on bitcoin: URI links wasnt working for me on Ubuntu 12.04, I think it was broken for anybody with a Gnome-based window manager. And I added a README to contrib/debian, documenting how to manually install the .desktop file for people who compile themselves but still want to be able to click on bitcoin: links.
2799	Usage: $bitcoind -memtxnotify="/tmp/memtxnotify.sh %s" ``cat /tmp/memtxnotify.sh``: #!/bin/bash F=/tmp/mempool_transaction_log D=`date +"%Y-%m-%d %H:%M:%S"` echo ${D} - ${1} >> ${F} ``tailf /tmp/mempool_transaction_log``: 2013-06-27 01:38:44 - c5c4a2bf7a44c9c4b39ae22042da6b86cbcada35f7b2fff864d9a114c65d9b94 2013-06-27 01:38:45 - 6cc77917dfc90c518ad5aa188967ba6d04becca4f5d6f633b4afe754d8b3e21d 2013-06-27 01:38:46 - 1fbea7b1773a9efc9f3b06e90773d159083218e256d1d9edf11669048e1f8088 2013-06-27 01:38:49 - 99321b4748cac1f7612b9546eba01bf5fe28e8617aa3fa23487eb122759076a8 2013-06-27 01:38:50 - 1bb1b3881d18cd674e5023a67b6c0757a587d45eb6973454852f7e295efacf92 2013-06-27 01:39:01 - 64e3fee386ca632e97a0ce55ea58711bb73054cc0c4e6cd41fe9f6fbfbcf262b 2013-06-27 01:39:02 - 84152de18356948583917ed2a36644cfff08c0df65b8f7add4e60efe8c1a1580 2013-06-27 01:39:02 - 45fd501203fc4bd6f5df99ab054a8080fcd2b9acaafb05d9007a8db1b715cdea 2013-06-27 01:39:03 - 659058f7f41e6315a780c48dc8d0d31c697c4b3b14d64de947c6a49ee33954a1 2013-06-27 01:39:04 - 7ac0c0ea12171ee782d98a7d545573e1659d72864ac8dc7a85ce02e35544d896 2013-06-27 01:39:11 - 5817219e8cc418c366e402a89d70dd8878455258c28b3782be8544fe78f1ff72 2013-06-27 01:39:12 - ad03c04b56438655339a65c2f9e20106f9e7c1a991c66d8fbc933a275a84fdd1
2798	The process outlined in the current release-process.md uses pushd and popd, to dip into and return from directories. It starts in the directory that contains the gitian-builder, gitian.sigs, and bitcoin directories. It then changes directory to the gitian-builder directory, builds, puts the signature into gitian.sigs, and the build outputs zipped up in the gitian-builder directory. Then, it repackages the builds into stand-alone files, still within gitian-builder. Once thats done, the time comes to commit the signatures and then, once enough people have signed, to repackage the gitian zips. At this point, the document appears to assume youre already back in the initial directory, the one with the gitian zips (which are actually in gitian-builder), gitian.sigs and bitcoin directories. This edit addresses these issues, by putting the gitian zips in that top directory, and using that directory as the base camp, so to speak, from which the various directories are dipped into and returned from throughout the process.
2797	Motivation: There already exists a method for dumping private keys in wallet by address. In order to construct multisig addresses the full public keys are needed but the private keys are not. So it is useful to have a way of exporting full public keys from a wallet.
2796	This avoids spurious errors with the old tests but still tests enough that if the rng is replaced with a totally broken one it should still fail.
2795	Log when a shutdown has occurred because of an aborted database rebuild.
2794	Were currently on 1.9 Most of the bugs are not consequential. One of them fixes file descriptor exhaustion which I think we already worked around with our own settings overrides. Another fixes an issue where calling CompactRange() manually could result in data being undeleted, which would obviously be a critical security issue if we ever did that. So better to upgrade than accidentally introduce a hole in future by having someone add a CompactRange() call.
2793	- updates bitcoinstrings.cpp and bitcoin_en.ts so new translations can be made on Transifex
2792	Code move only - no semantics changes.
2791	Automatically prune outputs (at creation) which are provably unspendable.
2789	
2788	- move SelectParamsFromCommandLine() from init.cpp to bitcoin.cpp to allow to use TestNet() for Bitcoin-Qt instead of GetBoolArg("-testnet", false) Does this still work for bitcoind, whose check resides in bitcoind.cpp AFAIK?
2787	- add missing chainparams.o to some makefiles - remove a double-include of chainparams.h in init.cpp
2786	Noticed by Diapolo.
2783	In case no database exists yet, and -txindex(=1) is passed, we currently first check whether fTxIndex differs from -txindex (and ask the user to reindex in that case), and only afterwards initialize the database. By swapping these around (the initialization is a no-op in case the database already exists), we allow it to be born in txindex mode, without warning. That also means we dont need to check -reindex anymore, as the wiping/reinit of the databases happens before checking. Closes #2782. Tested all 8 combinations of the database already existing or not, -reindex passed or not, -txindex set or not.
2781	Refactor keytime: * Key metadata is kept in a CWallet::mapKeyMetadata (std::map< CKeyID, CKeyMetadata>). * When generating a new key, time is put in that map, and new key is written. * AddKeyPubKey and AddCryptedKey do not take a creation time argument, but instead pull it from that map, if it exists there. Bugfix: * AddKeyPubKey and AddCryptedKey in CWallet didnt override the CKeyStore definition anymore. This is fixed, as they no longed need the nCreationTime argument now. Also a few related other changes: * Metadata can be overwritten. * Only GenerateNewKey calls GetTime(), as its the only place where we know for sure a key was not constructed earlier. * When the nTimeFirstKey is known to be inaccurate, it is set to the value 1 (instead of 0, which would mean unknown). * Use CPubKey instead of std::vector< unsigned char> where possible. Fixes #2779 and #2780
2778	Should be useful when trying to detect online corruption.
2776	Users are now permitted to increase the keypool size at runtime. Ideally they will update their config and restart, but that is not always feasible. This enables the admin to login, refill the keypool to handle heavy traffic needs immediately, without downtime. However, the keypool target size returns to its configuration-specified value at restart, as expected.
2775	Polish translation fixes
2771	Continuing the work I did in 2341e9b. Trying to make the docs actually readable, and then try to improve upon them. Everything is now in markdown.
2769	This breaks the mempool, causes an assert(false) in -debug mode and can cause SEGFAULT in non-debug mode
2768	Recent changes to the osx makefile means that the patch no longer applies cleanly. This pull updates the patch by adding the missing line.
2767	... of avoiding unnecessary header includes. Additionally alphabetizes and groups includes and forward declarations. Note: there are a large amount of changes that have been rebased onto the most recent master. I did my best to ensure that no code was functionally changed; however, a code review of all my changes would be advised. ### Theory By using [forward declarations](http://en.wikipedia.org/wiki/Forward_declaration), compilation speed can be increased in both incremental and full builds. Forward declarations suffice over having the full declaration in cases where the type that is being forward declared is only used as a reference or being pointed to, and the usage is not an [lvalue](http://en.wikipedia.org/wiki/Value_%28computer_science%29). By making these modifications, the total number of header files needed to compile any .cpp file is reduced. Fewer header files being included reduces the total amount of code that needs to be compiled for each .cpp file. ### Quantitative Results How much time does this actually account for? For bitcoind: ![Bitcoind Results](http://i.imgur.com/KNDcgBS.png) [This](https://docs.google.com/spreadsheet/ccc?key=0AnpjY4_hVstbdHllazg4MG80V1UtUTVqM0hfTUE3bEE&usp=sharing) spreadsheet shows detailed results for each of the different builds (note that there are multiple sheets in the spreadsheet), along with the interesting stats and graph for each. This data was generated automatically via the scripts [here](https://gist.github.com/brandondahler/5771108). ### Method * Go through each file, group each #include by type (see Order) and sort alphabetically * Using [doxygen](http://www.stack.nl/~dimitri/doxygen/) with the [graphviz dots](http://www.graphviz.org/) extension * Go through each header, comment each #include individually and all headers that indirectly include the commented one * See if it can build with the #include commented, analyze errors to understand if they can actually be solved with forward declares * Remove, keep, or add a direct header to the required type, as needed. ### Order Most Generic // License text as first // lines #if defined(HAVE_CONFIG_H) #include "bitcoin-config.h" #endif #include "matching_file.h" #include "local_file1.h" #include "local_file2.h" #include "file_in_other_dir1.h" #include "file_in_other_dir2.h" #include <system1.h> #include <system2.h> #ifdef SOMETHING1 #include <system3.h> #endif #include "json/a_file.h" #include <library1.h> #include <library2.h> #ifdef SOMETHING2 #include <library3.h> #endif class ForwardDeclare1; class ForwardDeclare2; namespace SomeNamespace { class ForwardDeclare3; } ... Example1 - No matching file, no file_in_other_dir, no ifdefs // License text as first // lines #include "local_file1.h" #include "local_file2.h" #include <system1.h> #include <system2.h> #include "json/a_file.h" #include <library1.h> #include <library2.h> class ForwardDeclare1; class ForwardDeclare2; ...
2766	See commits for explanation. Busted boost release, this works around it. This affected fedora 18, and probably Ubuntu Quantal as well.
2765	This commit allows to build the leveldb on Debian GNU/kFreeBSD port. See for the info about the port
2763	bitcoind parses but does not send tx relay flag in the version message, see I believe the correct value to send is true, since bitcoind does not expect filter sets and wants to receive inv right after start.
2760	such a comment should not contain false information
2759	spits out annoying compiler warnings all over the place
2758	This pull request is the completion of #2154. The original intention was to also move CBlock into core.h but was postponed in the interest of merging what had already been done.
2756	
2754	One-line change. Fixes #2752.
2750	The conversion to configurable size for high priority transactions did not include fee calculations. It seems like it should. Consolidates another magic number.
2749	Does what it says on the tin... ![totalbalance](https://f.cloud.github.com/assets/126646/622898/621b88e4-cf52-11e2-9d56-07a97fbada93.png)
2748	Here is the first go at an Autotools build system replacement. It is meant to be a drop-in replacement for the current system(s), providing the same features with no net changes. It can also live side-by-side with the old system while sharing the same build-related variables in order to facilitate a smooth transition. I hope the benefits are obvious enough: A single/shared build procedure, portability, ease of packaging, ease for downstreams, ease for repository maintainers, cross-compilation, etc. I dont vouch for Autotools in any way, in fact, this configure.am is downright ugly (mainly just because of mingw though), but its portable and well-established. Ive opted not to write the documentation yet, because I would like to see what comments/concerns come out of the first round of review before committing to anything. This does away with the need for qmake, as the Makefile is capable of generating everything it needs in a portable way. Qt-creator can be used with the Autotools plugin, and is working nicely. For those who wish to use it this way, install the Autotools plugin from the about menu, then open Makefile.am as a project. It handles the build procedure, so there is no need to mess with the command-line procedures listed below. Building from CLI: For Linux, assuming the dependencies have been met, the build procedure looks like this: ``` ./autogen.sh ./configure make ``` Same for OS X, but the pkg-config path needs to be hooked up from macports first: ``` echo "/opt/local/share/aclocal" | sudo tee -a /usr/share/aclocal/dirlist ``` For mingw its the same, but you will need to provide lots of paths in the form of: ``` ./autogen.sh CPPFLAGS="-I/path/to/include -I/path/to/other/include" LDFLAGS="-L/path/to/libs -L/path/to/other/libs" ./configure make ``` In addition, there are helpers for qt and boost to help with finding some locations. Use ./configure --help to see the available options. Native windows built is untested, as I dont have a windows environment at my disposal. I have verified that linux builds are deterministic insofar as a fresh git clone will build bit-exact binaries to match another clean checkout on the same machine. To my knowledge, that means that gitian shouldnt have any trouble making the switch (after the descriptors are updated to use autotools). make check will run the unit tests and print the results. Ive done my best to avoid adding any new behavior or features, and I would much prefer to aim for feature-parity before making any improvements. TODO: - Update gitian descriptors. - Add documentation to reflect comments here - Cosmetics
2747	It seems people keep wanting/needing this functionality. Works like getrawtransaction, but defaults to 1 (unlike getrawtransaction) for backward compatibility.
2746	- add new bitcoind.cpp to OTHER_FILES to be able to see it in the Qt Creator IDE - remove a Mac-only header from the general HEADERS, as it is already in macx:HEADERS
2743	Update CTransaction::IsStandard() to return a string describing the reason a transaction is considered non-standard. Add that string to the TX-is-nonstd error message.
2741	Fixes a regression from Crash probably introduced by 4d17a1b0. Initialize the window to NULL and verify it before use. Triggered in this case by running ./bitcoin-qt from a shell, and clicking on the icon before the window comes up.
2740	
2738	Add new standard transaction type, that permits small amount of data to be attached to a transaction, in the form of an additional TxOut that is provably prunable.
2735	The document will need to be edited slightly for Bitcoin specifics, but its a starting point!
2733	Extremely large wallets take a very long time to load. After some testing I found that most of the time was spent in EC_KEY_check_key The fix this I have merged two of the checks into using a single CECKey instance, replaced EC_KEY_check_key with a faster operation (thanks to sipa for helping me there), and appended a hash of the private key to "key" entries. On my system loading one private key took approximately 1500 usec. CKey::Load reduced this to 900 usec replacing EC_KEY_check_key reduced this to 500 usec checking just the hash reduced this to 40 usec
2731	- harmonize BitcoinGUI::setClientModel() and RPCConsole::setClientModel() - now RPCConsole::setClientModel() also includes a direct call to setNumBlocks()
2730	
2728	This commit adds a Linux script that uses tc and iptables to limit outgoing bandwidth to Bitcoin nodes. All tcp connections with a source or destination port of 8333 are limited to the chosen rate. It does not alter the incoming bandwidth. Additionally, outgoing bandwidth to a host on a local LAN (192.168.x.x) is not limited.
2727	
2722	Adding this flag to the file Info.plist fixes the font appearance on Retina displays. Icons appear still blurry but thats not so disruptive as blurry text. Having sharp text adds so much to the user experience on MacOS, please consider this fix.
2721	This commit squashes all the changes in the Qt5 branch relative to master. Backward compatibility with Qt4 is retained. Original authors: - Philip Kaufmann - Jonas Schnelli
2718	A few fixes to the danish translation, but the translation is still far from perfect.
2716	This commit decouples the pMiningKey initialization and shutdown from the RPC threads. `getwork` and `getblocktemplate` rely on pMiningKey, and can also be ran from the debug window in the UI even when the RPC server is not running. Solves issue #2706.
2713	
2705	When my system crashes, the peers.dat file often ends up zero-sized. When this happens, vector vchData.resize(dataSize) is handed a negative dataSize. It takes it as an unsigned int and attempts to resize it to 18 hexillion bytes, crashing with a std::bad_alloc, which is presented as "bitcoin in Runaway exception" This pull simply adds a if ( dataSize < 0 ) dataSize = 0; check before running resize(). Another option would be to make the resize() call itself conditional on dataSize being positive.
2703	You could end up with a negative balance by moving funds you dont have from one account to another using "move". This now check [minconf] and the balance.
2702	Performs the following: - Brings the LevelDB code base up to 1.12.0 - Incorporates an upstream deadlock fix for Windows condition variables - Incorporates upstream fix #178: cannot resize a level 0 compaction set - Limits the rate of compaction to prevent runaway resource usage Heres the upstream issue regarding the deadlock: And the compaction issue: This is the commitlog of the subtree:
2700	This is the beginning of an autotools build-system refactor. My first step is to be able to create a common static lib for the binaries (console/qt/test) to link against, meaning that each of those will need its own entry-point object file. This series gets rid of the QT_GUI define in favor of letting the build-system link in the proper startup file, and a global var to determine how the binary was started. Ive tried to match this projects formatting and general practices.
2697	I noticed that release-process.md refers in most places specifically to version 0.8.0, and in one place specifically to 0.5.1. This pull request fixes that.
2696	When compiling on util.h FreeBSD, the build fails with "va_list not declared." Including stdarg.h corrects this error and allows the build to succeed.
2695	When compiling on FreeBSD, the calculation here returns an unsigned int. This causes a compile-time error with std::min, which cannot compare signed with unsigned integers. This pull inserts an explicit cast, treating the calculated value as signed, keeping the compiler happy.
2693	As suggested in req #2048.
2688	This is better memory management of the mining CReserveKey, anyway. Fixes issue#2687
2683	- integrates current translations from Transifex Standard translations pull, will update on a regular base.
2682	Write bestblock records in wallets: * Every 20160 blocks synced, no matter what (before: none during IBD) * Every 144 blocks after IBD (before: for every block, slow) * When creating a new wallet (new) * At shutdown (new) This should result in far fewer spurious rescans. To correct all previously missed rescans, we should probably also once change the bestblock record name (suggested by gmaxwell), to force a single rescan once for every wallet. As this is likely to be annoying for almost all, and most that have missed funds in the past have already done a full rescan already, this is perhaps controversial and not included in this pullreq. Should close #2676 (but I havent tested that).
2681	gitian build of contrib/gitian-descriptors/deps-win32.yml fails with the following and gets stuck. This patch adds psmisc which contains killall. The build is allowed to complete when these processes are dead. adding: miniupnpc/upnpcommands.h (deflated 76%) adding: miniupnpc/upnperrors.h (deflated 38%) adding: miniupnpc/upnpreplyparse.h (deflated 58%) + killall wineserver services.exe explorer.exe winedevice.exe bash: line 59: killall: command not found
2680	Add link to Github for Mac Update link to HomeBrew
2679	trivial change to the GUI: cannot send over 21000000btc as proposed in #2401 Using magic number doesnt seem right. Could we factor this out, together with ? And what about BitcoinUnits::parse() as well ?
2678	More to come...when I get around to them
2677	Remove some unnecessary copying and coins view cache layers in CreateNewBlock. This results in a >10x speedup for GBT for me, with a large mempool (poolsz >5000).
2672	- this directly sets up all GUI elements that have testnet special-casing without first setting up main net stuff and chaning afterwards (titles, icons etc.) - also fixes 2 wrong icons shown during testnet usage on our toolbar Can you take a look if testnet icon is still shown imediately on Mac?
2671	See Subject.
2670	This adds an introduction screen that is shown when the client is first started in which the user can choose a data directory. It is also possible to force the intro screen to appear using command line argument `-choosedatadir`. The data directory is remembered in the QSettings. The user is warned that the client will download and store 10Gb of data. The intro screen shows how much space is available on the device that contains the chosen directory and warns if this is less than the 10Gb. To make it possible to translate the introduction dialog, the initialization sequence is changed so that translations are loaded before the data directory. This has the by-effect that it is no longer possible to specify a language in bitcoin.conf inside the data directory. Please help testing!
2669	Adds -v and --version options to bitcoind (or Bitcoin-Qt) executable in order to print the version number and exit. Currently the version can be discovered via -?, but that option gives a long usage message which isnt relevant if all you want to know is the version. (I can see sysadmins using this in scripts for leveling/upgrading bitcoind across multiple servers).
2666	Since Github is used for staging I thought it would be nice to make some of the docs a little bit more readable. If people are happy with the markdown docs, Ill continue to make improvements.
2665	
2663	*_t types are not defined. Swap for unsigned int and unsigned char etc.
2661	
2660	This (nearly) doesnt change fee rules at all: * To make it into the fee transaction area, the dPriority comparison changed from < to <= * We now just ignore transactions > MAX_BLOCK_SIZE/4 instead of doing some calculations to require increasingly large fees as size increases. Note that fee rules need completely redone anyway, but since I need to be able to read this crap, I figured Id fix it for anyone else...
2658	Tested with BitcoindComparisonTool (which generates a large fork) and -alertnotify script successfully notified me and I get the relevant warnings in getinfo Youll get the usually cryptic error: "errors" : "Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade." and alertnotify will be called with Warning: Large-work fork detected. You may need to upgrade, or other nodes may need to upgrade.
2657	
2655	Its possible that OpenSSL might not be not linked correctly after installation via Brew, and if this hasnt been remedied with "brew force" then you could unknowingly be building with OSXs outdated OpenSSL.
2652	This needs to be pulled before tagging 0.8.2 final release.
2651	People companying about txfees are not shown in the first question (#1715, #1714) if funds should be sent. This pull will calculate and include the txfee in the sendcoins question messagebox.
2650	Package managers like Matt Caraldo (https://launchpad.net/~bitcoin/+archive/bitcoin) should now include the new png icons in their bitcoin linux .deb files. The current xpm file bitcoin80.xpm (80x80px) was deleted because it contains a non-stamdard size. Ive testes with png files and did figure out the png files as icons will resize proper while xpm files will end up in non-resizing menu items which then can result in gfx bugs like reported with #2543. I recommend to use png files as pixmaps in upcoming linux software packages. - new xpm resources for different linux window managers - new png files for autoresizing on different linux window managers - favicon with new logo - window .ico with new logo
2649	- integrates current translations from Transifex - new translation: af_ZA Please merge right BEFORE the next 0.8.2 release (next RC or final), Ill keep this updated.
2648	- adds a reindex dialog for Bitcoin-Qt to change -txindex without the need to supply -reindex - now also does a -reindex, when removing the -txindex switch
2647	It seems to be controversial, but one could consider "bitcent" more useful/usual then mBTC.
2645	Instead of building a full copy of a CTransaction being signed, and then modifying bits and pieces until its fits the form necessary for computing the signature hash, use a wrapper serializer that only serializes the necessary bits on-the-fly. This makes it easier to see which data is actually being hashed, reduces load on the heap, and also marginally improves performances (around 3-4us/sigcheck here). The performance improvements are much larger for large transactions, though. The old implementation of SignatureHash is moved to a unit tests, to test whether the old and new algorithm result in the same value for randomly-constructed transactions.
2644	Remove the pnext pointer in CBlockIndex, and replace it with a vBlockIndexByHeight vector (no effect on memory usage). pnext can now be replaced by vBlockIndexByHeight[nHeight+1], but FindBlockByHeight becomes constant-time. This also means the entire mapBlockIndex structure and the block index entries in it become purely blocktree-related data, and independent from the currently active chain, potentially allowing them to be protected by separate mutexes in the future.
2642	At startup, check that the expected genesis is loaded. This should prevent cases where accidentally a datadir from the wrong network is loaded (testnet vs mainnet, e.g.). This should at least partially #2547, by giving a clearer and sooner error message.
2638	Modified the build instructions to better separate MacPorts and HomeBrew and to build Qt4 on each. Also, some general reStructuredText cleanup.
2636	QT Creator does not run on 32 bit OS X (eg Snow Leopard). QT4 needs to be ported.
2635	Compiling on my OSX 10.6 build machine, I get: Undefined symbols: "boost::chrono::steady_clock::now()", referenced from: boost::cv_status boost::condition_variable::wait_for<long long, boost::ratio<1ll, 1000000000ll> >(boost::unique_lock<boost::mutex>&, boost::chrono::duration<long long, boost::ratio<1ll, 1000000000ll> > const&)in bitcoinrpc.o Linking against the boost_chrono fixes the issue. Windows builds already link against boost_chrono; Linux doesnt, but compiles (on pull-tester / gitian, at least).
2633	This adds -DBOOST_CHRONO_HEADER_ONLY to the makefiles, to fix a compiler error I ran across doing pre-0.8.2 builds in my OSX 10.6 build environment (and that I saw reported by other people).
2632	Matt Corallos bitcoind/bitcoinj comparison tool relies on a patch that sets difficulty to zero, thus ensuring blocks can be found instantly without any delay. It also drops the subsidy halving interval so that can be tested and makes a few other tweaks. This series of patches creates a new CChainParams abstraction that hides various things that vary between main, test and regression test networks. It then adds a regtest mode triggered by the -regtest flag that disables external connections and uses the "insta-block" rule set. Also, the miner thread will shut down once it finds a block, meaning you can generate a single block from the command line on demand by running ./bitcoind -regtest setgenerate true This change is incomplete - some things like DNS seeds, checkpoints and difficulty transition formulas arent refactored out yet. However I wanted to get feedback on the approach before continuing, and the current code is useful even though theres still more refactoring to go. Signed off by: Matt Corallo
2630	- integrates current translations from Transifex Ill keep this updated until 0.8.2 is released. Please merge right BEFORE 0.8.2 will be released into RC-phase (as it feels this is happening rather soon now).
2629	A `base_uint` used to be made of an array of `unsigned int`s. This works fine on most platforms, but might not work on certain present or future platforms. The code breaks if an `unsigned int` is 16 or 64 bits, so it might pay to be specific. Also changed "u" to "you" in the comment text.
2625	New method in bitcoinrpc: RunLater, that uses a map of deadline timers to run a function later. Behavior of walletpassphrase is changed; before, calling walletpassphrase again before the lock timeout passed would result in: Error: Wallet is already unlocked. You would have to call lockwallet before walletpassphrase. Now: the last walletpassphrase with correct password wins, and overrides any previous timeout. Fixes issue# 1961 which was caused by spawning too many threads. Test plan: Start with encrypted wallet, password foo NOTE: python -c import time; print("%d"%time.time()) ... will tell you current unix timestamp. Try: walletpassphrase foo 600 getinfo EXPECT: unlocked_until is about 10 minutes in the future walletpassphrase foo 1 sleep 2 sendtoaddress mun74Bvba3B1PF2YkrF4NsgcJwHXXh12LF 11 EXPECT: Error: Please enter the wallet passphrase with walletpassphrase first. walletpassphrase foo 600 walletpassphrase foo 0 getinfo EXPECT: wallet is locked (unlocked_until is 0) walletpassphrase foo 10 walletpassphrase foo 600 getinfo EXPECT: wallet is unlocked until 10 minutes in future walletpassphrase foo 60 walletpassphrase bar 600 EXPECT: Error, incorrect passphrase getinfo EXPECT: wallet still scheduled to lock 60 seconds from first (successful) walletpassphrase
2624	-Changed version numbers to match what is quoted in src/makefile.mingw -Removed reference to jam 3.1.18 because we are making "bjam.exe" with "bootstrap.bat mingw" command
2623	- updates bitcoin_en.ts and bitcoinstrings.cpp - integrates current translations from Transifex
2622	Updated some broken links in the instructions
2621	...eadability.
2619	Hiding commands in the output of `help` based on users current configuration (the wallet is encrypted or not) can be confusing. It doesnt seem to make sense to hide basic documentation from the user in this way.
2618	This pull request are easy to audit changes, other clean up & makefile modification (remove unsupported -Wl,-z,relro in LDHARDENING, add/mod libs) are still required. on my build env, I have to explicitly specify std::map for every map, and disable literals in c++11, see which can be done via this batch hack: ``` sed -i "s/map</std::map</g" *.cpp *.h sed -i "s/std::std::map</std::map</g" *.cpp *.h sed -i "s/multistd::map</multimap</g" *.cpp *.h sed -i "s/limitedstd::map</limitedmap</g" *.cpp *.h sed -i "s/\"PRI/\" PRI/g" *.cpp *.h ``` then the code will work with either CXXFLAGS=-std=c++11 or unmodified CXXFLAGS(no c++11 enabled). the remaining patch for makefile.unix:
2617	- updates bitcoin_en.ts and bitcoinstrings.cpp - removes bitcoin_se.ts - adds bitcoin_ar.ts - integrates current translations from Transifex
2616	Ive recreated a branch representing the original LevelDB from which Bitcoin based its copy (it was version 1.7.0 from October 2012), and reapplied the commits from Bitcoin using cherry-pick. It stands in its own repository now so that anyone can use LevelDB with the fixes that Bitcoin applies. It has a reconstituted commit log so that it is a "true" fork from the original Google repository, and that regular Git commands will work. This pull request removes the detached leveldb sources from the Bitcoin repository and adds them back using "git-subtree", which retains the commit log for the entire LevelDB branch from which Bitcoin started its fork. Using this method it will be possible to both submit Bitcoins LevelDB changes back to the upstream (which resides on Google code) and cherry-pick or merge newer branches from LevelDB back into the Bitcoin code base. All of this was done using the git-subtree command (instead of git-submodule which I hate). The repository containing Bitcoins version of LevelDB is located here, in the branch bitcoin-fork Now, anyone can use LevelDB and benefit from the changes that Bitcoin provided. Hopefully, this will make it easier for Bitcoin developers to merge improvements and fixes from the upstream LevelDB back into Bitcoin.
2615	...e notifications - if 10.8, use user notification center, if <10.8, use growl why: - Growl is since 2.0 no longer free available (needs to be purchased for ~2$) and i think bitcoin should have at least a 2nd way for users who want to use free software or a free alternative (notification center is includes in 10.8+)
2614	A green testnet splashscreen with a normal, orange dock icon looks strange and can confuse users.
2613	- Launch-At-Startup implementation for mac - Remove "Window" tab in settings
2610	So we stop getting pull requests (like #2604) fixing problems with disabled Script opcodes. A hard fork would be required to re-enable these, and if we ever did that wed require extensive review and testing. I double-checked to make sure the script_invalid.json unit tests make sure that the disabled opcodes are handled properly (script invalid even if the disabled opcodes are in the unexecuted branch of an OP_IF); they do.
2609	
2608	should fix #2605, retest please.
2607	When debugging another issue, I found a hang-during-startup race condition due to LoadWallet calling SetMinVersion (via LoadCryptedKey). Writing to the file that youre in the process of reading is a bad idea.
2606	Bitcoin-Qt could core dump if application initialization failed in certain ways. I double-fixed this: 1) qt/bitcoin.cpp now shuts down core threads cleanly if AppInit2 returns false 2) init.cpp now exits before StartNode() if strErrors is set (no reason to StartNode if were just going to exit immediately anyway). Tested by triggering all of the various ways AppInit2 can fail, either by passing bogus command-line arguments or just recompiling tweaked code to simulate failure. This is a partial fix for #2480
2604	In C/C++, signed integer overflow is undefined behavior, and some compilers (such as gcc) will optimize away checks like the one that was present in EvalScript; specifically: int nBegin = ...; int nEnd = nBegin + size; if (nBegin < 0 || nEnd < nBegin) will get compiled into: if (nBegin < 0 || size < 0) This patch changes the overflow check to avoid relying on the behavior of signed integer overflow, by checking for size > INT_MAX - nBegin (and computing nEnd after the check).
2603	It is possible to have a wallet.dat file without any bestblock record at all (if created offline, for example), which - when loaded into a client with a up-to-date chain - does no rescan and shows no transactions. Also make sure to write the current best block after a rescan, so it isnt necessary twice.
2602	* Bugfix: output the correct best block hash (during IBD, it can differ from the actual current best block) * Add height to output * Add hash_serialized, which is a hash of the entire UTXO state. Can be useful to compare two nodes. * Add total_amount, the sum of all UTXOs values.
2601	Previously, JSON-RPC clients accessed URI "/", and the JSON-RPC server did not care about the URI at all, and would accept any URI as valid. Change the JSON-RPC server to require URI "/" for all current accesses. This changes enables the addition of future interfaces at different URIs, such as pull request #1982 which demonstrates HTTP REST wallet download. Or, a future, breaking change in JSON-RPC interface could be introduced by serving JSON-RPC calls from new URI "/v2/".
2600	This pull request changes a few things in key.h/key.cpp * CKey is no longer a kitchen-sink for "anything ECDSA related", but just an object representing a private key. * Operations that dont use a private key are moved to CPubKey (which is now a fully-featured object representing a public key). * All actual OpenSSL-interaction code is moved to an internal class in key.cpp. * Representation-wise, CKey now funcions as CSecret (which is gone) with an fCompressed built-in (so no keeping separate booleans necessary anymore). * CKey and CPubKey simply encapsulate static byte arrays, and can be created/moved/copied cheaply. * Practical upshot: no need to move key/pubkey data from/to CKey anymore before doing something useful with it. The reason for writing this is preparing the code to more easily change ECDSA implementation (such as maybe my secp256k1 library at some point), but it seemed useful enough to try to get reviewed and perhaps merged independently of that.
2599	Instead of killing a connection when the receive buffer overflows, just temporarily halt receiving before that happens. Also, no matter what, always allow at least one full message in the receive buffer (otherwise blocks larger than the configured buffer size would pause indefinitely). Fixes #2597.
2598	- add a check that requested Winsock version is available - update some strings - remove -gen=0 from help-message as this is default
2596	This pull adds ScanForDoubleSpends to check incoming transactions for double spends of wallet transactions. Flagged wallet transactions give the following warnings: 1) in RPC the transaction gets the "doublespend" property 2) todo later: Qt should highlight it as a possible fraud attempt 3) confirmations is held at 0 for 200 blocks to keep it from being spent The 200 block hold is a protection against double spends during forks. The client is normally oblivious to double spends in other forks because it only looks at the fork its on. ScanForDoubleSpends can compensate for that weakness because it can detect double spends from other forks and put at-risk transactions on hold.
2595	This is a very minor bug: we tried to send out a "version" message in CNodes constructor, which meant also for pnodeLocalHost, causing a "socket send error 9" under Linux or "socket send error 10038" in Windows. Fixes #2587
2592	These commands dump/import (all) wallet keys in a human-readable format that is intended to be compatible with Bitcoin Wallet for Android and Multibit. It infers safe lower bounds on the birth time of keys based on wallet transactions, and only rescans the relevant part of the chain after importing. It supports keypool/change/unlabelled/labelled addresses, and restores those correctly. When inferring birth times, it takes crediting into account via pay-to-pubkey, pay-to-pubkeyhash, multisig (even when not all keys are available) and P2SH. P2SH scripts in the wallet are not yet dumped to the file. Ill need to talk to the other client authors about that first. I think we should encourage entire-wallet export/import above fiddling with individual keys, so something like this makes that easier and more transparent. Note: this is intended for 0.9 or later.
2590	At current if your .bitcoin directory is a symlink (which is becoming more likely as the size of the blockchain increases) then bitcoind will fail to start. This is because fs::create_directory() fails if it is called on a symlink. This patch resolves the symlink and stores it in the path cache prior to creating the directory, ensuring that operations are always carried out against the correct location and work as expected. SIDE-EFFECT: Because the fully resolved path is stored in the path cache any error messages that are returned which include the path now show the canonical (i.e. resolved) path. I think that this makes more sense for users and developers, however if this is not desired it would be possible (albeit somewhat more expensive) to only use the canonical path for the create_directory() call and leave the path unresolved elsewhere.
2589	This pull request bundles a few commits with changes that I wrote to discover and fix problem with LevelDB I/O errors after the maximum number of open files was reduced to 64. The first one improves an error message, the second makes sure closing files succeeds, and the third fixes the actual issues (table files being opened by different threads simultaneously).
2588	- explicitly set the default of all GetBoolArg() calls - rework getarg_test.cpp and util_tests.cpp to cover this change - some indentation fixes
2586	WSAStartup should be called before using any other socket functions. BindListenPort is not called if not listening, thus move it to init. Closes #2585.
2584	Squashed version of #2528
2583	Using ! on a non-zero value will always return 0, so the statement is currently ineffective. If this is not what is meant, the respective code in ConnectSocketDirectly to set the socket back to blocking should be removed entirely, as it currently behaves differently for windows and linux. Also remove some duplicate and superfluous code in other places.
2582	This value gets stale really quickly, do not hardcode it into a message. Completely remove it for now. Later on, a mechanism will be added to determine fees based on the mempool. Closes #2576
2580	As the actual error message currently gets lost.
2579	The method listtransactionsofblock lists all transactions (from the wallet) which are in block with blockhash <hash> It can be used this way: (pseudo-code) ``` ScanTransactions() { Database.TransactionBegin() long lastBlock = BitcoinRPC.getLastBlockNr() long lastScannedBlock = Database.getLastScannedBlock() while (lastBlock - lastScannedBlock > targetConfirms) { lastScannedBlock++; string hash = BitcoinRPC.getHashOfBlock(lastScannedBlock) list<Transaction> list = BitcoinRPC.getTransactionsOfBlock(hash) for (Transaction t : list) { // do something // at this point, you can absolutely be sure to see only transactions // with <targetconfirms> confirms. // and you only have to scan each block exactly once } } Database.saveLastScannedBlock() Database.TransactionCommit() } ``` This is an easy example how payments can reliably be received. Explained here:
2578	deleted because of mistakes done in the push process
2577	This is a quick, safe fix for transaction fee handling. A riskier, more complicated fix still needs to happen, but will take more time to code/test/etc. Two motivations for this pull: First, to discourage people from bloating users wallets and the UTXO set with tiny outputs. This pull defines uneconomic dust as 54.3 uBTC (5430 satoshis, about $0.007 at current prices), and treats any transaction with outputs less than 5430 satoshis as non-standard (wont be relayed, wont be mined). 5430 satoshis is derived from the cost (in fees) to spend a TxOut/TxIn. See for proportion of recent outputs this will (eventually) affect. Second, we have no idea what will happen to Bitcoin prices or transaction volume / competition for space in blocks. So this patch lets users and miners specify the minimum transaction fees at startup, using the -mintxfee / -mintxrelayfee options (which Im intentionally leaving undocumented for now). The dust/nonstandard test is based on the -mintxrelayfee. Qt and RPC both now tell the user why CreateTransaction fails, if it fails; Qt error reporting is a little wonky (try to send one satoshi, and you get two modal dialog boxes, one after the other; I dont care enough to try to fix that). Note: I spent several hours trying, and failing, to create unit tests for this patch; CWallet::fFileBacked is ignored by several of the wallet routines used by CWallet::CreateNewTransaction. In the end, I decided thatrefactoring CWallet to support unit testing would be much more extensive and riskier than these changes.
2573	Once youve compiled Bitcoin-Qt on osx, git shows the files inside the Bitcoin-Qt.app/Contents/ dir, info.plist, PkgInfo, etc. Adding Bitcoin-Qt.app to .gitignore will prevent this.
2572	solve issue #2529
2569	Closes #2408.
2568	As the default can be too low, especially on OSX.
2566	This solves the issue where no default key can be added after -salvagewallet.
2564	- make "&Export" translatable - fix some includes - small formatting changes
2563	- new language "se" - update bitcoin.qrc and bitcoin_en.ts - fetch current translations from Transifex
2559	Added a missing manpage and corrected some minus signs that were used as hyphens.
2558	* After clean shutdown, delete the database/ subdir. This means upgrading/changing the BDB dir wont kill you anymore because of incompatible logs. * In case opening the database environment fails, move database/ to database.$TIMESTAMP.bak, and try again. * Do not advise the user to nuke his datadir anymore - theres no point in doing so (closes #2488). * Drop double opening of the environment (includes #2333).
2557	I dont notice any significant IBD performance degradation using this.
2556	
2554	Similar to the osx-makefile patch, when applied this patch file will update the include paths for users who have installed dependencies using HomeBrew.
2553	- removes our NewThread() function an replaces these calls with boost::thread with our TraceThread template - make ThreadCleanWalletPassphrase() use an int64 as parameter - remove ExitThread() function - fix THREAD_PRIORITY_ABOVE_NORMAL for non Windows OSes
2552	
2546	Its possible that once Brew has installed OpenSSL it wont be used when compiling. This means that the version bundled with OSX will be used, which is currently 0.9.8.r This adds a note to the build instructions to help users check that the are using the correct version, and if not, how to fix the problem.
2541	As soon as we have multiple CWallet objects, this bug would cause them to interfere with each other rebroadcasting.
2540	
2539	Add support for the Payment Protocol ( ) to Bitcoin-Qt. Web page where you can create test PaymentRequests, signed with either the bitcoincore.org website SSL certificate or a gavinandresen@gmail.com StartSSL email certificate: Source code for that website is available at: Test plan: This adds a dependency to the Bitcoin-Qt build: you need the protocol buffer compiler and library (see doc/readme-qt.rst)
2538	- include QApplictaion at the top-most position to make it compile again via Qt Creator on Windows with Qt5
2537	On black toolbars, the new icon doesnt look very well. Now the toolbar icon has again a transparent "B" for better style on toolbars. Does not affect the mac client. on ubuntu it then will look like... ![Bildschirmfoto 2013-04-17 um 11 06 27](https://f.cloud.github.com/assets/178464/390377/58a1b70c-a73e-11e2-9439-47dc08d0431e.png) ![Bildschirmfoto 2013-04-17 um 11 06 15](https://f.cloud.github.com/assets/178464/390378/58a51a46-a73e-11e2-9b71-813cd1c0e176.png)
2536	The tri-state nature of USE_UPNP isnt immediately obvious, so paste the explanation from doc/build-unix.txt as a comment in the makefile.
2535	Some versions of make dont interpret - as zero, so set it explicitly. It may be locale-dependent, but a literal 0 should always work.
2532	...ons (Info.plist) Due a bug in QT (https://bugreports.qt-project.org/browse/QTBUG-21267), the mac binary of the last release contains bulk meta informations. The url-handler (bitcoin://) is also not working in current release Should be fixed with this commit. see #2506
2530	- this solution works stable on mac and ensures that the window gets reopened when the user clicks the dock icon . - tested on 10.8 with Qt4.8.4 and Qt5.0.1
2528	
2527	Made it point to 0.8.1
2526	See commits for further details, only small changes!
2525	This allows the bool* type to be passed between threads. Should solve issue #2402.
2524	why: - the current splash-screen has no referring to official images on - - the current splash screen only exists in a low res jpg - current splash screen looks dark and "hackish" - new splash screen should generate positive, "trust-emotions". - new splash screen gives the user infos about the running client. - new splash screen can handle long messages (in a lot of - languages the text is cropped in current release) - new size (x2) 400x312 - contains textual information about the client - textinfos are dynamicly written to the pixmap when -testnet is switch on, the splashscreen will show the bitcoin logo in testnet-color (as well as a text [testnet]) example:
2520	This will make the mempool require strictly DER-encoded signatures, and restrict public keys to being either compressed or uncompressed (so no "hybrid" ones). See the discussion here:
2519	
2516	Tested: wrote a program that replaces a non-final tx and checked it against a bitcoind with this patch, replacement was successful.
2515	Having the export button at the top was confusing people into thinking the entire wallet was exported. This commit moves the export button to the address book, receiving addresses and transaction tabs separately.
2514	
2513	GUI cant connect to RPC. Showing this option in the help confuses people, so remove it.
2508	
2503	- move COPYRIGHT_YEAR to clientversion.h -- this allows usage of that information also in other places (e.g. splash screen) - use the new COPYRIGHT_YEAR macro in bitcoin-qt.rc -- this reduces the places, where we need to change the year further - fix bitcoin-qt.rc not showing up in Qt Creator Intended for #2495 mainly, but allows further usage cases.
2502	Can you verify if this is needed, at least it seems to be missing as we have THIS in the current code:
2501	- updates ClientModel::getBlockSource() to return all available states and sorts enum BlockSource in order of usage cases (none default, then reindex, import and network) - updates BitcoinGUI::setNumBlocks() to better use getBlockSource() and also adds a message, when we have NO block source available
2498	- continue the mac behavior of clearing button icons (because its unusual on mac apps) - fix: new button variable names, new buttons (verifyMessage, signMessage) Signed-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>
2497	- redefined the green color - created new toolbar icons - updated the assets-attribution.txt Signed-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>
2495	why: - the current splash-screen has no referring to official images on - the current splash screen only exists in a low res jpg - current splash screen looks dark and "hackish" - new splash screen should generate positive, "trust-emotions". - new splash screen gives the user infos about the running client. - new splash screen can handle long messages (in a lot of languages the text is cropped in current release) - example: - new size (x2) 400x312 - contains textual information about the client - textinfos are dynamicly written to the image - when -testnet is switch on, the splashscreen will show the bitcoin logo in testnet-color (as well as a text [testnet])
2494	- redefined the green color - created new toolbar icons - updated the assets-attribution.txt
2493	On FreeBSD, I was unable to build any version since the MicroSleep() change (commit 1b43bf0d), which created a dependency on boost_chrono for boost versions above 1.50. This dependency had never been added to either makefile.unix or bitcoin-qt.pro. This pullreq adds the required -lboost_chrono to both files.
2492	- dont display "Bitcoin - " when no title was supplied but just "Bitcoin"
2491	
2490	- change the word "processors" to "threads" in the setgenerate help message We always use the term thread(s), so I would suggest to do this here also.
2487	- updates for bitcoinstrings.cpp and bitcoin_en.ts - changes help text for -rpcthreads to match -par - fix a small glitch with -par to be "-par=<n>"
2483	- also change the word processors to threads in the setgenerate help message
2482	- added languages in bitcoin.qrc: bs, ca, cy, eo, gu_IN, hi_IN, ja, la, lv_LV and th_TH (some translations files were already in src/qt/locale but not added in the .qrc file I didnt use any translation limits, everything was added! It seems does not work for me, as ``ls src/qt/locale/*ts|xargs -n1 basename|sed s/\(bitcoin_\(.*\)\).ts/<file alias="\2">locale/\1.qm<\/file>/`` gives me an error in the MinGW shell :-(.
2481	send encryptWallet/backupWallet/changePassphrase directly to walletFrame
2479	This is a first-pass change to begin resolving issues and #273, #1958, #2412. I doubt this change completely ready, I intend on using this request for feedback on the current implementation of code and usage. ____ ## Basic Allow users to set bandwidth limits on overall egress and/or command-specific egress bandwdith. Overall egress bandwidth and command-specific egress bandwidth counts are saved to disk (currently every packet queued), to allow counts to be saved across runnings of the bitcoin node. A simplified cron-expression is used to determine when to reset all bandwidth counts. The cron-expression will cause start and reset times to "snap" to the closest values above and below the current time. This allows exact control over when the bandwidth usage is reset via the expression, instead of relying on the time the program was last started or other arbitrary limitations. ____ ## Configuration options For command-line (prepend -) or configuration file: * bandwidthsentmax - Overall egress bandwidth limit * bandwidthsentmax_[command] - Command-specific bandwidth limit * bandwidthresettimes - Cron-expression used to reset bandwidth counts ____ ## Formats * Bandwidth - As regular expression /[0-9]+[BbKkMmGgTtPp]?[Bb]?/ - Valid for any values 0 - 18,446,744,073,709,551,616 bytes (16,384 Peta-bytes) * Cron - See [wiki](http://en.wikipedia.org/wiki/Cron#CRON_expression) for full cron expressions. Numerical representations allowed only. Special characters implemented: asterisk (*), slash (/) (with caveats), comma (,), and hyphen (-). Slash requires the end value be landed upon (which means */4 requires the possible range be divisible by 4). ____ ## Sample configuration Bitcoin.conf ```` # minutes hours dayOfMonth Month dayOfWeek # Resets each month # 0 0 1 * * # # Reset every sunday # * * * * 0 # Resets each minute # * * * * * # # Resets every 5 minutes # */5 * * * * bandwidthresettimes=0 0 0 * * # Only allow 2 GByte of sent data bandwidthsentmax=2G # Only send out 1 GByte of sent "block" commands bandwidthsentmax_block=1G ```` ____ ## Files this change-set: ### New #### bandwidthman.h and bandwdithman.cpp * New class to handle bandwidth management as needed, will serve a larger purpose as bandwidth management features are expanded. * Public functions * LoadConfiguration() - Uses mapArgs to read reset time cron expression, uses mapArgs to read overall bandwidth cap and specific command bandwidth caps. * TestScheduling(string strCronLine, struct tm tmTestTime) - Parses a given cron expression and uses a specific time to calculate start time and reset time. Used only by the unit tester. * AllowSendCommand(string strCommand, int nSize) - Determines if strCommand should be sent, given the command is nSize. #### tests/bandwidthman_tests.cpp * Contains unit tests for the calculation of start times and reset times used by the CBandwidthMan class. ### Changed #### db.h * Rename CAddrDB to CDatDB and make abstract, generalize specific functions to globally applicable functions, consider the general format used by CAddrDB as being a ".dat" file. * Create templated wrapper for new CDatDB named CSerialDatDB. Extends CDatDB and allows for any serializable type to be used as the template type. * Create CAddrDB by making it an alias of CSerialDatDB<CAddrMan>, construct the CSerialDatDB with the static filename of "peers.dat" (as previously hard-coded). * Create CBandwidthDB by making it an alias of CSerialDatDB<CBandwidthMan>, construct CSerialDatDB with the static filename of "bandwidth.dat". Note: All changes to CAddrDB result in no usability changes. #### db.cpp * Change CAddrDB functions to CDatDB functions. * Modify write process to prepend message start and append hash due to change in serialization time of payload data (new lines 488-494). #### init.cpp * Insert new step 11: Load bandwidth manager. * Renumber old steps 11 and 12 to 12 and 13 respectively. #### makefile.* * Add objs/bandwidthman.o as new object #### net.h * Export instance of bandwidth manager. * Modify EndMessage to require the message name upon invocation and return success or failure to send message. * EndMessage will return false if it is not allowed to send the message as determined by the bandwidth manager. * If bandwidth manager does not allow the message to be sent, abort message. * Modify all push messages to return success or failure, determined by EndMessage call. * Success/failure result is not currently used but planned for use later. #### net.cpp * Add new global instance of CBandwidthMan. ____ ## Extra data While researching how to approach the problem, I collected command-specific egress data off of an unrestricted node that was on the latest block. [This spreadsheet](https://docs.google.com/spreadsheet/ccc?key=0AnpjY4_hVstbdHpqeVRXeFZDM1lydmdYdndaWGlLZXc&usp=sharing) shows the count and total bandwidth of each of the commands. I do not remember when or how long it took to collect this data, but I believe it was over a few hours with no local usage of the computer. The branch at [brandondahler/bitcoin branch bandwidth-test](https://github.com/brandondahler/bitcoin/tree/bandwidth-test) can produce a text file that can aid in plugging in your own data into this spreadsheet.
2478	It has bothered me for a while that you cant just use hashes from debug.log in query commands that require a full hash.
2477	According to pull 2444 (https://github.com/bitcoin/bitcoin/pull/2444): - new windows and linux icons. - doxygen-icon should also be fine. The windows icon contains multiple resolutions up to 256px. Is someone capable of doing a Vista and W8 test? Who takes care of the linux test?
2474	In preparation for 0.8.2
2470	- this allows us to use the progressbar and the label independently (if needed) and still prevents setStatusTip() to use them, if one of the 2 is active
2469	- this allows our progressbarlabel to correctly update, when we finish a reindex or import, but do not get new blocks from other sources Fixes orphan label messages for me, which I find rather ugly ;).
2465	remove proprietary psd file mentioning from assets-sttribution.txt Sorry for the "slip on the pen".
2464	- expand the description for updating the translations - sort the paths/files, which need to have the version number updated, in alphabetical order - use a more current version number in git tag and git shortlog
2461	This introduces the concept of the sync node, which is the one we asked for missing blocks. In case the sync node goes away, a new one will be selected. For now, the heuristic is very simple, but it can easily be extended later to add better policies.
2460	- add the Genesis blocks time for the testnet in ClientModel::getLastBlockDate() See
2459	- instead of parsing the project file by using $$_PRO_FILE_ just use $$TRANSLATIONS, which contains a list of all needed files, to build our *.qm translation files With the local build I had some weird problems with $$_PRO_FILE_, which I solved by using $$TRANSLATIONS directly. If everything is working with our official build it would be nice to update to this :).
2457	- re-work included headers and used functions to be fully Qt5 compliant, while maintaining Qt4 compatibility - also includes some small GUI layout changes (remove hard-coded column sizes) Below is a screen with the Qt5 Fusion style :). ![Qt5 Fusion](https://f.cloud.github.com/assets/1419649/340904/d30a46a0-9d5f-11e2-9377-a5976621372e.png)
2456	Sorry, but I found some ugly things style-wise after merging the thread/shutdown pull ;).
2455	
2454	Without this, we get -O0 and no -D_FORTIFY_SOURCE...
2453	As these were not updated when backporting the 225430 checkpoint into head. Additionally, also report verification progress in debug.log, and tweak the sigcheck-verification-speed-factor a bit.
2452	- adds 6 methods in BitcoinGUI to access some actions needed by the new WalletView class - updates WalletView class to use these instead of trying to duplicate these - cleanup walletview.h and remove all unneeded stuff - this fixes problems with tabs toolbar (#2451) and export broken (#2436) - more details in #2447
2450	Another small bug that was introduced by #2220.
2449	Just a move, as that document should reside in the doc folder :).
2448	
2446	- also includes a small change to a string in bitcoinrpc.cpp, which is not on Transifex anyway, so is safe to merge
2444	check why/preview: If pull is accepted, windows, etc. icons will follow. - according to official bitcoin logo - no chopped shadow - retina-screen support info: the psd (Adobe Photoshop) file (bitcoin.psd) is for further changes (contains unrendered effects)
2443	- use labelExplanation for sending and receiving tab and move the string from the ui-file to the source - ensure that the table holding the label and address is resized so that the address column fits the address and the label column is stretched to fit the window size - rename some stuff for much easier readbility in the code (I find it hard to get the meaning of stuff like labels or buttons)
2442	- add missing initalisation for clientModel - remove unneded RPCExecutor::start() code
2441	- as QClipboard::Selection isnt available on Windows ensure that the correct mode is called, but sill allow selection for e.g. X11 - start conversion from QCoreApplication::instance() to qApp in guiutil.cpp (I intend to harmonize this all over the source with my Qt5 compatibility pull) Fixes #2438
2440	- fix debug window, by re-adding rpcConsole->setClientModel(clientModel); in BitcoinGUI::setClientModel(), which was removed by #2220
2437	- the send coins context menu entry was not working anymore, because a non current version of #2220 was merged onto current master - also removes some unneeded spaces and adds a comment to WalletModel::getNumTransactions()
2433	It was needlessly confusing people, as it doesnt necessarily match the number of transactions in the transaction list. There is discussion and code in #2177 to add this to the debug window. Im not sure about that, but I am sure that it needs to go from the overview page.
2432	Now that bitcoinrpc 0.3 is out (https://pypi.python.org/pypi/bitcoin-python/0.3), I am suggesting versions of the contrib python scripts (wallettools and spendfrom), which are using this new version. IMPORTANT: these will not work with bitcoinrpc V0.2.
2431	The internal miner is closely bound to the wallet engine, not the blockchain engine. This small cleanup was cherry-picked from #2154 because it is useful beyond the obvious merits: it gets closer to my goal of fork()ing away the blockchain engine. Note that this commit places GenerateBitcoins() after RPC server start, unlike #2154 which employs a stub thread.
2430	boost::filesystem::create_directory() defaults to allow all users full access to the Bitcoin DataDir. This directory should only be accessible to the owner to limit unauthorized access. A future version can use boost::filesystem::permissions() (v1.49+) instead of dealing with the lower level chmod directly.
2428	Words in English language are more short than in other langs usually. Tabs dont fits in line in Spanish/German/Russian when they has two words. Wallet has limited functionality. It can send & receive coins. So we can safely rename "Send coins" to "Send" and "Receive coins" to "Receive". Address book is just user contacts. This change is affects a translations. Ported from Freicoin
2424	On non-us keyboards you can obtain lower case characters even pressing the SHIFT, this caused false positives (issue #1855).
2423	Based on #2409 (though I dont think it needs it). Just puts a limit on how large mapAlreadyAskedFor can grow.
2422	-dbcache was originally used to set the maximum buffer size in the BDB environment, and was later changed to set the chainstate cache and leveldb caches. No need to use it for BDB now that only the wallet remains there. This should reduce memory allocation (but not necessarily memory usage) a bit, especially when -dbcache is set high.
2421	This optional parameter is used to specify the block which is used to look up the raw transaction. (https://github.com/bitcoin/bitcoin/issues/2077) ![Pantallazo](https://f.cloud.github.com/assets/155036/316346/a28a2b3c-9812-11e2-81a5-c9f788280e7b.png)
2420	Clean up all known global datastructures at shutdown. This should make leak detection much easier. Typical valgrind output after this: ==5897== definitely lost: 0 bytes in 0 blocks ==5897== indirectly lost: 0 bytes in 0 blocks ==5897== possibly lost: 1,903 bytes in 9 blocks ==5897== still reachable: 194,073 bytes in 2,929 blocks (almost all of the reachable stuff is RPC/asio/boostthreads)
2419	It seems there were two mechanisms for assessing whether a CNode was still in use: a refcount and a release timestamp. The latter seems to have been there for a long time, as a safety mechanism. However, this timer also keeps CNode objects alive for far longer than necessary after disconnects, potentially opening up a DoS window. This commit removes the timestamp-based mechanism, and replaces it with an assert(nRefCount >= 0), to verify that the refcounting is indeed correctly working.
2418	Every block index entry currently requires a separately-allocated CBigNum. By replacing them with uint256, its just 32 bytes extra in CBlockIndex itself. This should save us a few megabytes in RAM (around 32 bytes per block), and less allocation overhead.
2415	Using a publisher socket to publish three things when they are happening in the Bitcoin client: 1) New transactions 2) New blocks 3) New ipaddresses This way there are no need to ask the bitcoin client if something new has happen. You will be notified! To compile: make -f makefile.unix USE_ZMQ=1 To run: bitcoind -zmqpubbind="ipc://.bitcoin.pub" A Python client that will print all the information: [CODE] import zmq def main(): context = zmq.Context() socket = context.socket(zmq.SUB) socket.setsockopt(zmq.SUBSCRIBE, "") socket.connect("ipc://.bitcoin.pub") while True: msg = socket.recv() print "%s" % (msg[8:]) if __name__ == __main__: main() [/CODE] For more commandline options, see bitcoind --help.
2414	- Update Boost from 1.50 to 1.53 -- removes the need to build the Chrono lib - Update OpenSSL from 1.0.1c to 1.0.1e -- fixes for CVE-2013-0169, CVE-2012-2686 and CVE-2013-0166 - Update Qt from 4.8.3 to 4.8.4 - Update libqrencode from 3.2.0 to 3.4.2 -- Memory leak bug has been fixed and others Dont merge this yet, this is just to see what pull tester is doing with it :). Replaces #2108
2411	
2410	In my tests corrupted wallets would often result in BDB dropping an error just due to duplicate records being found, which appears harmless.
2409	This pull request contains: * The commits from #2016 and #2017 * Fixes and memory improvements for those * A change from per-connection to per-message send buffers * A change to break processing of getdata into several stages, when the send buffer fills up This should improve network latency and memory usage.
2406	Building bitcoin as root can cause /dev/null to be removed on some systems (e.g. FreeBSD 8.3-RELEASE-p3 and gcc version 4.2.2). This pull request fixes the issue. A patch has also been sent upstream, see
2403	Current relay behavior is widely deployed. Supplying a higher minfee than mining and relaying just irritates users without anti-spam gain.
2396	
2393	Trivial changes, ported from Freicoin
2387	I want to keep us up to date, so another translations update after the recent merges.
2386	- this should prevent GUI issues on Mac that were observed before (disappearing GUI - see #1522) - the patch ensures, that createTrayIconMenu() is always called on Mac to process and use our MacDockIconHandler
2385	This gives people running bitcoind a way of getting alerts in a timely manner, instead of needing to poll with "getinfo" and parse the "errors" array. Example usage in a bitcoin.conf: alertnotify=echo %s | mail -s "URGENT: bitcoind alert" admin@service.com The command string is passed to the shell, with %s replaced by the alert message enclosed in single quotes.
2384	Now that the wallet is the only thing in BDB any DB open errors must be from the wallet itself-- so deleting everything else will not likely help.
2383	This patch adds a new "Advanced" pane to the options box where the dust limit for accepted transactions can be set, and where a filter on output addresses can be specified. CTxMemPool::accept() will drop any transaction with outputs below the dust limit, or with an output address corresponding to an address specified in the filter. ![screenshot](https://f.cloud.github.com/assets/420734/273459/ef1212e4-9024-11e2-957a-31f3f8996172.png)
2382	IMHO the copyright displayed in the bitcoin-qt.exe properties should be updated to 2013 ;).
2378	Ill create a Transifex pull afterwards, perhaps we have a little more time to let the translators catch up before the 0.8.1 release!?
2376	IMHO, this is no Linux specific switch.
2373	I intend these three commits, applied on top of the v0.8.0 tag, to be the 0.8.1 release. The plan is: + A new checkblock rule, in effect until 15 May, that ensure only blocks compatible with old releases are accepted into the main chain (only blocks that touch 4,500 or fewer distinct txids are allowed). + A limit of 500k to blocks created, also in effect until 15 May. Alerts will be sent to pre-0.8 releases over the next two months, telling people to either upgrade or create a DB_CONFIG file so they can handle large blocks. After May 15th, blocks up to 1MB large will be allowed again. Tested by syncing the entire main chain and the testnet chains. A unit test is included, but it only runs if you download the 900K forking block (see the comment in src/test/checkblock_tests.cpp ).
2366	As discussed on the #bitcoin-dev IRC channel, enforcing unique addresses in sendmany is useful because it may prevent the user from accidentally paying somebody twice. If you really want to, it should be possible to include the same address multiple times using the rawtransaction commands, though.
2364	More or less copied code from the -blocknotify and -walletnotify, but for all accepted transactions. Is there a good reason not to implement this? As far as i can tell any DOS attack will be limited by the rate limiting of free transactions and even then process spawn limits can be set on any unix system. As long as the script does something simple, such as adding the txid to a queue, then there will be little chance of the number of spawned processess building up. This is very useful to people who would otherwise have to rely on constant polling or centralised services such as blockchain.info websockets.
2361	This just changes the font size of the word "Wallet" from 11 to 13 points.
2357	The shutdown code has bothered me for a long time, with fShutdown and vnThreadsRunning and a bunch of ad-hoc Sleeps(). Reports of shutdown-on-exit bugs in 0.8 prompted me to clean it all up. This pull reworks the way we keep track of threads, using boost::thread_groups or boost::thread pointers. Instead of polling for a global fShutdown flag, threads now just MilliSleep(), wait on boost mutexes, or periodically call boost::this_thread::interruption_point(), and are interrupted using boosts thread interruption mechanisms. All of the cleanup removes 400 lines of code, and, I hope, makes the code easier to follow. Tested on OSX extensively, and compiled/tested lightly on Windows XP.
2352	![unnamed](https://f.cloud.github.com/assets/901234/241234/832f0602-899b-11e2-8c69-21d30ee3dc8f.png)
2351	Keeps the UTXO set from being bloated by the creation of outputs that will never be spent because doing so would cost more in fees than they are worth. Includes changes to the UI to ensure the user cant create such outputs, as well as the transaction creation code to round off change if the change txout would itself be unspendable.
2350	Bitcoin-qt has annoyed me and others for some time because the "Copy Address" button only copies to the clipboard that you have to use the cut and paste keystrokes. It does not, until now, copies to the old-fashioned X11 clipboard that you can just select something and paste using the middle button. That complicates doing things like pasting a command line into arbitrary windows (particularly xterm). This very simple change fixes that oversight.
2349	Giving negative values to the -par parameter causes bitcoin to run with 1 verification thread. It can be useful to tell bitcoin to use all existing CPUs but leave e.g. 1 of them free for another tasks; this patch allows that by specifying -par=-1.
2348	This is a real simple change to make the comments match the property names of `CRPCCommand` Here is the diff, ignoring the whitespace:
2343	
2338	This allows full nodes to use bloom filters as an optimization when downloading blocks (dont double-relay txn) as long as we have a sufficiently large mempool.
2337	
2336	Test every invalid op code, and add an explicit test for Gavins proposed format for provably unspendable/always prunable transactions using the 0xFF invalid opcode. Specifically any scriptPubKey of the following form: 0xFF {zero or more ops} Because the scriptSig and scriptPubKey are processed separately one cant even use IF/ENDIF trickery to defeat this. I also like how it says "INVALID" quite clearly as the first opcode. Ive tried this out on testnet with no issues. Unless anyone has a reason why this standard is a bad idea Im also going to raise the issue with P2Pool; currently they are the main producer of non-prunable txouts that could be made prunable this way. No code to actually do anything with this standard is included in this patch; that can be done later.
2335	s/linux/unix/
2333	- remove code from step 7, which we already have in step 5 of init
2332	- harmonize the database related init messages - as we have a thread for importing blocks, that init message is obsolete
2331	First translated phrase in this patch, "Double-click to edit address or label" is text of tooltip of table with my addresses.
2325	
2315	In case any step in the loading of block databases fails, suggest to start a reindex.
2314	No one is maintaining ready-to-go windows dependencies, and the current ones are ancient, so the current windows build instructions dont make sense. If someone feels like writing complete build instructions including dependencies, please do.
2312	This fixes test_bitcoin failures on openbsd reported by dhill on IRC. On some systems rand() is a simple LCG over 2^31 and so it produces an even-odd sequence. ApproximateBestSubset was only using the least significant bit and so every run of the iterative solver would be the same for some inputs, resulting in some pretty dumb decisions. Using something other than the least significant bit would paper over the issue but who knows what other way a systems rand() might get us here. Instead we use an internal RNG with a period of something like 2^60 which is well behaved. This also makes it possible to make the selection deterministic for the tests, if we wanted to implement that.
2311	Fixes issue#2288. Includes cleanups from Lukes pull 2243. Tested on OSX, Linux, and cross-compiling in gitian. "We" should refactor all of the common makefile code into a makefile.common, and include it from the other makefiles. There is an odd mix of CFLAGS / CXXFLAGS / xCXXFLAGS in our makefiles.
2310	Improvement upon #2294.
2309	Improvement upon #2294.
2308	This command doesnt touch the blockchain and might be necessary to rescue money from a borked client.
2299	Switch to using Qts QLocalServer/QLocalSocket to handle bitcoin payment links (bitcoin:... URIs) Reason for switch: the boost::interprocess mechanism seemed flaky, and doesnt mesh as well with "The Qt Way". The new code is shorter and, I think, clearer. I made a couple of extraneous changes (alphabetized some long lists of #includes to make it easier for me to see what new includes I needed to add). I also added OSX support. Submitting now for early review, should not be pulled until after 0.8. Test plan: On all supported platforms: Click on a link when Bitcoin-Qt is not running. Click on a link when Bitcoin-Qt is already running. Un-gracefully shutdown (kill) Bitcoin-Qt (so local socket file is left behind), then re-run.
2297	
2295	It tries to detect the version of the client last used on the datadir, and only removes files that are not in use by that version or any later versions.
2294	This is less confusing to most people, and doesnt rely on estimates of the total number of blocks received from other nodes. Like in the Android app, in the progress bar label now shows the time that the node is behind instead of the number of blocks left.
2291	My old patch for coin control converted to a pull. - Added ability to filter empty groups and empty address from listaddressgroupings output. - Output an object thats easier to work with than an array of different types.
2289	(from debian patches) Image.constBits was introduced in Qt 4.7. Should be ok here to use QImage.bits which allows linking against the Qt in Squeeze.
2286	std::vector.data() is a C++11 feature that makes my OSX build machine unhappy. Somebody who mines with getblocktemplate, please help test. Fixes #2285
2283	
2282	Add the bitcoin address and account to the listunspent output. Makes manual use easier since the user doesnt have to look up the tx to get the address.
2281	The redeemScript functionality broke plain offline signing, this change makes it only look for that parameter when signing a p2sh input. Shorter version of Tested by creating two chained, not-broadcast raw transactions, verifying that not providing redeemScript for the second fails without this change, succeeds with this change.
2279	Hopefully a better solution for #2254 than #2277.
2277	This fixes Matts block-checker-tester for me.
2275	Three commits: a straight refactor, a new unit test, then an optimization. This makes OP_CHECKMULTISIG more efficient, only recomputing the transaction signature hash once-per-different-SIGHASH-used-by-its-signatures. Insignificant for small transactions, but could be as much as a 2x speedup for very large transactions spending 1-of-3 multisig inputs. Thanks to Sergio Demian Lerner for warning that an attacker might try to mount a CPU exhaustion attack using OP_CHECKMULTISIG. This fix is low priority (post-0.8.0) because transaction fees are high enough to make a CPU exhaustion attack based on this economically irrational.
2273	Extremely large transactions with lots of inputs can cost the network almost as much to process as they cost the sender in fees. We would never create transactions larger than 100K big; this change makes transactions larger than 100K non-standard, so they are not relayed/mined by default. This is most important for miners that might create blocks larger than 250K big, who could be vulnerable to a make-your-blocks-so-expensive-to-verify-they-get-orphaned attack.
2272	Two changes: Use IsConfirmed() instead of IsFinal(), so getbalance "*" 0 uses the same is this output spendable criteria as getbalance. Fixes issue #172. And a tiny refactor to CWallet::GetBalance() (redundant call to IsFinal -- IsConfirmed calls IsFinal).
2266	Leaving copyrights by others (e.g. Satoshi, The LevelDB Authors) alone.
2264	The redeemScript functionality broke plain offline signing, this change makes it only look for that parameter when signing a p2sh input.
2262	Version numbers changed from 0.7.99 to 0.8.0 Set CLIENT_VERSION_IS_RELEASE to remove pre-release warning Updated copyright in COPYING and doc/READMEs to 2013 Updated doc/release-notes.txt
2260	
2259	Calling ResendWalletTransactions when reindexing or importing spams other nodes with our old transactions, because they become unconfirmed.
2258	- this change allows us to keep the translation without the need to re-translate any string, when we update the copyright year - copyright symbol is changed to HTML to ensure we get no encoding issues and its removed from the translation string so translators dont break it by mistake This is related to #2251.
2257	The current default URL doesnt seem to exist. Unsure wether this should be updated to point to 0.7.2 now or wether just to wait untill 0.8.0 is out and point there? Commit also fixes a minor typo in the macdeploy notes.txt
2255	Calling ResendWalletTransactions during a reindex spams other nodes with our old transactions, because they become unconfirmed.
2253	Enable ConnectBestBlock to properly report back validation problems, and ensure orphan processing (when their parents are found) cannot be used to counter-DDoS the node providing the parent Also fix a minor typo
2252	Im doing some pull-tester upgrades/bug fixes/etc/etc over the next day or two, so Ill be using this to avoid testing on real pulls... DONT PULL THIS (obviously.....), Ill close it when Im done.
2251	* add 2013 where there was only 2012 Notable omissions from updates: * contrib/bitcoind.bash-completion -- no copyright by The Bitcoin developers * contrib/testgen/gen_base58_test_vectors.py -- no copyright by The Bitcoin developers * src/addrman.cpp -- no copyright by The Bitcoin developers * src/addrman.h -- no copyright by The Bitcoin developers * src/leveldb/* -- I figure this can be updated by pulling in upstream code Fixes #2217.
2250	* updated references to files which have since been moved * added reference to licensing * added brief summary in case a non-technical user happens upon repo first * miscellaneous Markdown-isms to make the doc more attractive * remove unused symlink README -> README.md I double-checked the makefiles and whatnot to ensure that the README symlink is not being referenced. It is not. Rather, `doc/README` and `doc/README_windows.txt` are copied for distribution. This is a integration of my original work from #2102 and commit bitcoin/bitcoin@b67b9e70.
2249	Split off InitBlockIndex from LoadBlockIndex, and call it again after finishing reindexing. This makes sure -reindex on an empty datadir still ends up with a sane database. Also, protecting the initialization with a try-catch block.
2248	Fixes issue #2239 -- return the main network genesis block time if pindexBest has not yet been set.
2247	Version numbers changed from 0.7.99 to 0.8.0 Set CLIENT_VERSION_IS_RELEASE to remove pre-release warning Updated copyright in COPYING and doc/READMEs to 2013 Updated doc/release-notes.txt
2246	I would have sworn I fixed this back in December... Tested by running on -testnet and sending several transactions and verifying that the change output is random. Testnet txids: f1c1db77e27c8d7a87cf27811daa18d4368fff0d02a8cbb1b7c615db48406459 2acb8b8899d8e4e16bd494d036bd27d5d6db78eee444993a36c4dc4d8c9a7a39 b9f7167522fe3cc2f07f137265589bf680fbaf4c9b3933f5ca7c511a83239932 94a98ad05e08c93758c861379da41617e8c5871d9052711c0a3efa87568b0266 72995c49c430ece98aeb9339ed106975c3fa5f1978890d89b38e51158531b6cb
2245	Mostly arbitrarily chosen because eleven is my favorite number.
2244	
2243	* Bugfix: LevelDB: Use "xCXXFLAGS" variable to avoid user-defined CXXFLAGS from clobbering necessary compiler options
2242	- check for existance of /blocks/ dir and verify if it is non-empty, disable -reindex, if these checks fail - print "Reindexing aborted" to log, if OpenBlockFile() in ThreadImport() fails Intended to fix #2239
2241	**Status**: Tests succeed, looks complete. This is based on top of #2243 (LevelDB build bugfixes). This is necessary for proper downstream distro packaging, and useful for people who have LevelDB installed for other reasons anyway. Undocumented to infer an unsupported status, but I could add a brief blurb if thats desirable. Only implemented for Linux (ie, not makefile.<not-unix>) for now - I assume OSX and Windows wont be packaging LevelDB/Bitcoin themselves anytime soon. Note that this does NOT remove the copied leveldb from the code, and will still build with that by default. **To test with system LevelDB:** 1) Optional: Delete or move src/leveldb so any attempt to use it errors explicitly 2) Install LevelDB on your system as a shared library 3) qmake bitcoin-qt.pro USE_SYSTEM_LEVELDB=1 && make 4) cd src 5) make -f makefile.unix USE_SYSTEM_LEVELDB=1 bitcoind 6) make -f makefile.unix USE_SYSTEM_LEVELDB=1 test_bitcoin Step 6 (test_bitcoin) will fail if your system LevelDB does not support memenv. This is expected behaviour. **To test included LevelDB still works:** 1) Restore src/leveldb 2) Remove system LevelDB library/package 3) qmake bitcoin-qt.pro && make 4) cd src 5) make -f makefile.unix bitcoind 6) make -f makefile.unix test_bitcoin **SIDE EFFECT:** Bitcoin-Qt and bitcoind no longer include the LevelDB memenv module (only test_bitcoin uses it) - saves 423 KB
2237	As discussed on the dev mailing list. Both IRC and the DNS seed are enabled by default for testnet; mainnet is unchanged.
2236	
2235	The struct versus class CDiskBlockPos warning is really annoying.
2234	600 seed nodes from DNS seeder. Tested by removing peers.dat, then running -dnsseed=0 and making sure I could still connect.
2231	* Rename database directories (blocks/index/ and chainstate/) * Remove support for pre-checksum undo files
2229	Implement native versions of AllocateFileRange() for: * Linux: posix_fallocate() * Mac OSX: fcntl(..., F_PREALLOCATE, ...) * Windows: SetEndOfFile() This should prevent the double-writing fallback that is used currently.
2226	- a reindex is not considered to be also an import anymore (we already seperate these 2 states in the GUI and I think it makes sense in the core, too)
2224	The goal of this pull request is improving how errors during block and transaction validation are propagated, displayed and handled. It introduces CValidationState, which stores metadata about a block or transaction validation being performed. It is used to distinguish validation errors (failure to meet network rules, for example) with runtime errors (like out of disk space), as formerly these could be confused, leading to blocks being marked invalid because the disk space ran out. Additionally, CValidationState also takes over the role of tracking DoS levels (so it doesnt need to be stored inside transactions or blocks...). Additionally, some extra checks are introduced, excessive coinbase values are made a DoSable offence, disk space is checked before trying to flush the coin case, and read/write errors cause a fatal error (reported to stdout/GUI, followed by shutdown).
2223	At least one service that accepted zero-confirmation transactions was vulnerable because an attacker could send a transaction with a lock time far in the future, and then have plenty of time in which to get a double-spend mined (perhaps from a miner who wasnt on the network when the first transaction was broadcast). That is a variation on the "Finney attack". We still dont recommend anybody accept 0-confirmation transactions as final payment for anything. This change keeps non-final transactions from appearing in the wallet, and, assuming most of the network accepts this change, will eventually prevent them from being relayed until they are final.
2222	Closes #2205.
2221	* Pass txids to CCoinsView functions by reference instead of by value * Add a method to swap CCoins, and use it in some places to avoid an allocating copy + destruct. * Optimize CCoinsViewCache::FetchCoins to do only a single search through the backing map. These changes (mostly the last one) increases raw block connection speed by 12% for me (rebuild of coins/ to block 210000 with -dbcache=900 takes 6m55 instead of 7m48).
2220	This commit is a minimal restructuring necessary to support multiple wallets in the UI going forward. Please read for details.
2219	- this change is active for sendcoinsentry and signverifymessagedialog - it disables the addressbook button, when an entered address is a valid Bitcoin address (it gets re-enabled when that case changes) Partly related to #2218.
2215	- allows to directly select an address from the addressbook, chose "send coins" from the context menu, which sends you to sendcoins tab and fills in the selected address Fixes: #2176 and #861
2213	- fetch current translations from Transifex - update bitcoinstrings.cpp and bitcoin_en.ts This should make it in before the RC phase IMHO. I included 4 new language files, which were created on Transifex, but did NOT add them into the bitcoin.qrc, as nothing got translated yet.
2211	This fixes qmake-breakage in case the build-system has other --param options pre-defined in its CFLAGS.
2210	This pull is currently here to see how pull-tester is handling it. To really be sure I didnt break something, this pull should be sent through a Gitian build. I tried to harmonize the layout / style in all changed files. The QApplication moved to top in bitcoin.cpp and bitcoingui.cpp is related to Qt5 compatibility, I need to see if this is working correctly before I start doing my Qt5 compatibility pull. I know this has the potential to make you angry (:-P)or at least may steal some of your time, but in the end it should be well worth it. I even think removed includes could speed up compilation time a little :). - try to enforce the same style to all Qt related files - remove unneeded includes from the files - add missing Q_OBJECT, QT_BEGIN_NAMESPACE / QT_END_NAMESPACE - prepares for a pull-req to include Qt5 compatibility
2209	Right now in the current master these hooks arent really being used - a single wallet is registered at startup in init.cpp and is unregistered at shutdown, also in init.cpp. But in order to support dynamic loading and unloading of transaction listeners, it is necessary to lock these functions. It is also convenient to have an UnregisterAllWallets() function and to call that upon shutdown instead of just calling it on the single main wallet that master currently has.
2208	Right now in the current master these hooks arent really being used - a single wallet is registered at startup in init.cpp and is unregistered at shutdown, also in init.cpp. But in order to support dynamic loading and unloading of transaction listeners, it is necessary to lock these functions. It is also convenient to have an UnregisterAllWallets() function and to call that upon shutdown instead of just calling it on the single main wallet that master currently has.
2207	Applied 2 upstream commits to update our code to leveldb 1.9
2199	This is just a suggestion to assist in re-thinking our current thread priorities and assists (IMHO) in easily setting priorities for threads during the creation time of the thread. I chose to change some default thread priorities, which should also be considered to be part of a discussion. Im currently using that code and can verify the internal miner did quite happily find new blocks ;). That pull could be extended to give users the ability to set the default thread prio via command-line or GUI option. - removes SetThreadPriority() and integrates that into NewThread() with a default of THREAD_PRIORITY_NORMAL - removes special-casing (priority switching) for internal Bitcoin miner - uses a new default for the following threads: ThreadScriptCheck (below normal - because normal prio threads on every CPU core could slowdown UX), ThreadImport (above normal - to speed it up a little) and ThreadBitcoinMiner (below normal - to compensate the removed special casing) - removes thread priority code for non-Windows OSes, so these will just get a no-op
2198	This is a tweaked version of pull request #2106 that will cross-compile on Lucid, so it is (I hope!) compatible with the pull-tester and our old gitian-building environment. * Upgrade to LevelDB 1.7 * Switch to a native Windows LevelDB port (not anymore via Boost) Ive been testing this versus the boost-based, old-leveldb code in git HEAD.
2195	Basic dependency detection and assistance to user in installing missing dependencies. Automatic switch for USE_UPNP in makefile.
2194	- just replaces a character in a comment, which I had problems with when opening the file in Qt Creator IDE
2193	- add check to verify if an URI is valid
2192	It is sent if any data that isnt in the relayable set is requested.
2190	The special case for the genesis block (it is not connected in the normal way, resulting in its coinbase being unspendable by definition) was not always enforced. When reconstructing the coins/ directory, it was connected normally. Beside being incorrect, since #2145, this resulted in a segfault at startup. This generalizes and simplifies the code for dealing with the special case, by moving it to ConnectBlock itself.
2188	This actually simplifies some SPV code, as they can keep track of a filtered block and its txn before accepting both in one step. The previous argument was that SPV nodes should handle the txn the same as any other free txn and then mark them as connected to a block when they get the filtered block itself. However, it now appears that SPV nodes will need to put in more effort to verify loose txn than they would to verify txn in blocks, thus making it more approriate to send the txn after the filtered block.
2187	Moved calls to SyncWithWallets out of the "tx" section of ProcessMessage to CTxMemPool::accept() to make sure all wallets are aware of all transactions accepted, including transactions sent from other wallets.
2186	- remove an unneeded MODAL flag, as MSG_ERROR sets MODAL - re-order an if-clause in main to have bool checks before a function call - fix some log messages that used wrong function names - make a log message use a correct ellipsis - remove some unneded spaces, brackets and line-breaks - fix style for adding files in the Qt project
2184	Added ability to load/unload multiple wallets dynamically in bitcoin-qt
2182	Fixes issue #2178 : attacker could penny-flood with invalid-signature transactions to deduce which addresses belonged to your node. Im committing this early for code review; I still need to write up a test plan. Executive summary of fix: check all transactions received from the network for penny-flood rate-limiting before adding to the memory pool. But do NOT ratelimit transactions added to the memory pool: - because of blockchain reorgs - stored in the wallet and added at startup - sent from the GUI or one of the send* RPC commands (CWallet::CommitTransaction) The limit-free-transactions code really should be a method on CNode, with counters per-peer. But that is a bigger change for another day.
2181	Based on current master as of 2013-01-14 and should be merged ASAP. Will update the language files later this week, so that master contains recent translations for all supported languages.
2179	It took quite a lot longer than I expected, but I can now produce code-signed .app bundles. The long and twisty path was: + Get a code signing certificate, owned by Bitcoin Foundation, Inc. (...several boring subtasks involved...) + Upgrade my development machine to OSX 10.8 (code signing not working properly on OSX 10.6) + Fix macdeployqtplus so it works on 10.8 (python appscript package not being maintained any more, switch to osascript) Ill create a code-signed 0.7.2 .app and will recruit some 10.8 users with gatekeeper turned on to test.
2177	- Bitcoin-Qt: remove num transactions from overviewpage - Bitcoin-Qt: add wallet category and num unique tx IDs in dbg window -- this adds a new Wallet category to the debug window and implements a label which contains the current unique transaction ID count from the wallet (wallet model access is added to RPCConsole class) -- layout was converted from table to form and a spacer removed -- I also added an initialisation of the model variables in RPCConsole class, these were missing before I had the idea because of issue #2175 and it also seems nice to be able to access walletmodel from RPCConsole for further additions to the debug window.
2174	Having taken me a while (i.e. more than the couple seconds it should take) to painstakingly decipher all the synchronization macros, I decided to add some comments to sync.h explaining in simple terms what the macros really translate to once you remove all the excess nonfunctional debug code. I welcome all of you who have more experience with the code to chime in and point out where Im going wrong, what to add, and how it can be improved. I fully support using debugging frameworks - but lets at least clean this up so that its both easy for a human to read AND easy to set up debugging options - for people who havent necessarily been dealing with this stuff daily for months.
2172	- it was bad, that quite some messages were just talking about a database, I think a user should know, if we are talking about wallet db or block/coin db - also adds a new init message for "Verifying block database integrity..."
2171	- this pull adds an InitMessage() function to noui.cpp, which outputs init messages to debug.log (this allows to remove some printf() calls from init.cpp) - change InitMessage() in bitcoin.cpp to also write init messages to debug.log to ensure nothting is missing in the log because of the removal of printf() calls in init.cpp
2169	- removes some obsolete comments about CTransaction::FetchInputs(), a space and a few new-lines
2168	By specifying -txindex when initializing the database, a txid-to-diskpos index is maintained in the blktree database. This database is used to help answering getrawtransaction() RPC queries, when enabled. Changing the -txindex value requires a -reindex; the client will abort at startup if the database and the specified -txindex mismatch.
2167	- this flag allows bitcoin-qt.exe / bitcoind.exe (32-bit application) to handle addresses larger than 2GB (up to 3GB on x86 Windows and up to 4GB on x64 Windows)
2166	IMHO there is no need for a copy here and as I was the one who did it, I wanted to change it also ;).
2165	- dont show QR Code context menu, when USE_QRCODE=1 was not specified when compiling the client - re-work on_showQRCode_clicked() for better readability and remove an unneeded duplicate check - re-work on_signMessage_clicked() and on_verifyMessage_clicked() to match foreach in on_showQRCode_clicked(), which seems more robust / cleaner - re-order context menu stuff to match real context menu layout - add comments for all private slots in the class
2163	Our main README was woefully out of date.
2162	Should be both useful and also a pretty good demonstration of using the raw transactions API. Test plan: ... reportedly run successfully:
2161	Client (SPV) mode never got implemented entirely, and whatever part was already working, is likely not been tested (or even executed at all) for the past two years. This removes it entirely. If we want an SPV implementation, I think we should first get the block chain data structures to be encapsulated in a class implementing a standard interface, and then writing an alternate implementation with SPV semantics.
2160	Provides a method to get the network adjusted time from the RPC interface.
2159	Previously when a transaction was set to lock at a specific block the calculation was reversed, returning a negative number. This broke the UI and caused it to display %n in place of the actual number. In addition the previous calculation would display "Open for 0 blocks" when the block height was such that the next block created would finalize the transaction. Inserted the word "more" and changed the calculation so that the last message would be "Open for 1 more block" to better match user expectations. If you dont feel invalidating the translations is worth it, let me know and Ill back that part of the change out.
2157	- add qSort() for cachedAddressTable, as qLowerBound() and qUpperBound() require the list to be in ascending order (see - add a new check in AddressTableModel::setData() to just return, when no changes were made to a label or an address (prevents entry duplication issue) - remove "rec->label = value.toString();" from AddressTableModel::setData() as the label gets updated by AddressTablePriv::updateEntry() anyway (seems added this line via - add another new check in AddressTableModel::setData() to just return, if a duplicate address was found (prevents address overwrite) - add a new check to EditAddressDialog::setModel() to prevent setting an invalid model - re-work the switch-case statement in AddressTableModel::accept() to always break (as return gets called anyway) and order the list to match the enum definition - make accept() in editaddressdialog.h a public slot, which it should be - misc small coding style changes Intended to fix: #2137 and #1839.
2156	Displays e.g. ``0.05604678 BTC`` instead of just ``0.05604678`` (uses the unit selected in the settings dialog).
2155	This is a python geeks coin control. Should be both useful and also a good demonstration of using the raw transactions API.
2154	I realize this introduction is a bit long, so if you dont feel like reading skip to the bullet points below under "strategy". The codebase as it exists right now has a number of unnecessary dependencies which makes code modularization much more difficult. In particular, the satoshi client was built to handle all bitcoin-related tasks, but its value as a "reference implementation" lies primarily in doing verification and acting as a relay agent as these are the most essential tasks that participating nodes must perform to keeping the network in operation. Things like wallets, historical databases, mining, and notification agents could be written as entirely separate third-party applications without risk to the networks fundamental integrity. The basic architecture of a bitcoin node is as follows: At the core there exist fundamental bitcoin message structures, along with the code necessary for serialization/deserialization. These structures belong in their own source files with minimal dependencies so they can be reused for applications that neednt perform verification and relay - for instance, filtering and notification agents. Unfortunately, these core structures currently reside for the most part in main.h/main.cpp, one of the central problems this pull request attempts to fix. On top of these core structures sits a network component that manages sockets, does peer discovery, and handles queueing and dispatching of messages. This component is clearly dependent on the core message structures but does not depend on the specific logic used to verify blocks and transactions nor to identify misbehaving peers nor sign transactions nor maintain a block chain database. Then we have a scripting engine, signature verification component, and a signing component. Historical database applications do not need signature verification/signing functionality at all. Filtering messages and sending alerts generally does not even require a scripting engine and does fine with basic pattern matching. The most critical high-level operations needed by a verification/relay node such as the satoshi client are transaction verification; block chain and memory pool management; and detection/management of misbehaving peers. These things are currently primarily implemented in main.h/main.cpp. These are indeed the main operations of the satoshi client - but the core low-level structures should not depend at all on this logic. Then theres the UI, but lets leave that aside for a moment. Finally theres init.h/init.cpp, which sets up the particular environment in which the satoshi client runs. <b>This branch takes the following strategy:</b> - Remove source file dependencies on main.h and init.h by only including necessary headers wherever possible. - If source files depend on definitions in main or init, either move the dependent portions into main/init or move the depended-upon portions into separate files. - If the dependent source files use global variables or functions that clearly belong in either main or init, copy the value over to a class member or a variable with file scope in the dependent source or expose a registration function to set a callback. - If moving a core class out of main is impossible because its methods depend on variables or functions defined in main, isolate the methods that depend on main and either move them to another class that *does* belong in main or convert them into regular functions in main. It is important that all modifications made in this branch are easy to review and to test. This branch does not encourage rewriting things from scratch - only moving them and rearranging them in easily identifiable chunks. Furthermore, the focus of the branch is not so much on coding style and style consistency - but on isolation of functional units and elimination of unnecessary dependencies.
2153	
2152	Someone on IRC was confused as to how to build HEAD Two problems: 1. I didnt change the Mac or Windows instructions. Also gentoo I just guessed at - someone needs to double check it. 2. leveldb is only available in Ubuntu > precise (12.04) and probably something similar for Debian. (their package server is down or Id check)
2151	This adds a suggestion from issue #2144, so that the signature is prepended by a label.
2150	- extends the translation process a little in terms of usability on Windows - Im now able to create bitcoinstrings.cpp straight from master without the need to edit or copy that Python script ;)
2149	* Report "value" in BTC, rather than "amount" in satoshis * Use ScriptPubKeyToJSON to report script data
2148	- some users reported it as weird, that the estimated block count could be lower than our own nodes block number (which is indeed bad) - this pull adds a new default behaviour, which displays our own block number as estimated block number, if own >= est. block count - the pull raises space for nodes block counts in cPeerBlockCounts to 8 to be more accurate - also removes a reduntant setNumBlocks() call in RPCConsole and moves initialisation of numBlocksAtStartup in ClientModel, where it belongs
2147	- this prevents an interference with the IPC message queue (which is used for URI processing) when running a testnet and mainnet instance in parallel - to check for testnet, I had to raise the ParseParameters() call in main() to the topmost position
2145	-checklevel gets a new meaning: 0: verify blocks can be read from disk (like before) 1: verify (contextless) block validity (like before) 2: verify undo data can be read and matches checksums 3: verify coin database is consistent with the last few blocks (close to level 6 before) 4: verify all validity rules of the last few blocks (including signature checks) Level 3 is the new default, as its reasonably fast. As levels 3 and 4 are implemented using an in-memory rollback of the database, they are limited to as many blocks as possible without exceeding the limits set by -dbcache. The default of -dbcache=25 allows for some 150-200 blocks to be rolled back. In case an error is found, the application quits with a message instructing the user to restart with -reindex. Better instructions, and automatic recovery (when possible) or automatic reindexing are left as future work. In addition, this also changes the on-disk format of undo data (adding a checksum), as the correctness of the coindb checks depends on having intact undo data.
2143	- ensure we use strCaption for printf and fprintf, as before it could happen to have an error message in the debug.log, which had no "Error" (or whatever) in front - ensure ThreadSafeMessageBox() uses the same code (when guiref == NULL) as noui_ThreadSafeMessageBox()
2142	There was a bunch of shed-painting about this before the 0.7.1 release, and I promised to tidy up the code, so: Initialize the OutputDebugStringF mutex and file pointer using boost::call_once, to be thread-safe. Make the return value of OutputDebugStringF really be the number of characters written (*printf() semantics). Declare the fReopenDebugLog flag volatile, since it is changed from a signal handler. And dont declare OutputDebugStringF() as inline.
2141	Updates translations base files to current master.
2133	- -checkpoints is now much more understandable and should be way easier to translate - -loadblock uses the same format (blk000??.dat) as -reindex
2131	To fix a minor malleability found by Sergio Lerner (reported here: The problem is that if (R,S) is a valid ECDSA signature for a given message and public key, (R,-S) is also valid. Modulo N (the order of the secp256k1 curve), this means that both (R,S) and (R,N-S) are valid. Given that N is odd, S and N-S have a different lowest bit. We solve the problem by forcing signatures to have an even S, excluding one of the alternatives. This pull request just changes the signing code to always produce even S values, and adds a verification mode to check it. This code is not enabled anywhere yet. Existing tests in key_tests.cpp verify that the produced signatures are still valid.
2130	hopefully a proper rebasing of The goal here is to work toward a clean interface to the wallet object. For now this involves moving code out of rpc*.cpp which deals with wallet internals and making that code into methods on the CWallet object.
2129	If the user was really after the fastest possible confirmation times they would be manually setting a fee. In cases where the wallet builds a transaction with a priority that is too low to qualify as free until the next block, go ahead without a fee. Confirmation frequently takes multiple blocks even when a minimum fee is provided.
2128	I have taken the time to try and make the windows installer a bit more sold, as it didnt work well with my windows system (where I run as a low-privileged user, and manually approve any escalation of privileges). The main changes involve changing from the local user settings to the local system, and requiring admin privileges to install. (of course any user will be able to run Bitcoin without being an admin still). Of-course this will need more testing.
2126	Adds some useful debug info to help keep track of getblock requests. Only shows request if actually carried out (previously showed request even if it wasnt done).
2125	This is to help with nodes becoming unresponsive in the eyes of other nodes. Also, in combination with my other pulls, this helps to reduce the number of duplicate blocks received.
2123	Yesterday LLVM 3.2 was released, as well as a corresponding version of the clang compiler and static analyzer. I ran the static analyzer over the bitcoin code and picked up a couple of assignments to variables that are never read. These two patches remove those assigments.
2121	========================================================== A major issue many have faced in using bitcoind to build applications is the lack of RPC support for tracking transactions and balances without having to know and keep associated private keys in the wallet. Oftentimes one might want to watch other peoples transactions or to keep signing nodes behind tighter security while using separate relay nodes to service all nonsigning, non-key-generating application functionality such as sending payment and confirmation alerts. In order to achieve these objectives, I have had to build a bunch of custom software - much of which duplicates functionality that is already present in the Satoshi Client. This pull request is an attempt at addressing some of these concerns without having to fundamentally restructure the client architecture. (Thanks, sipa!) The proposal is to add another kind of object to the wallet database - a bitcoin address sans private key - which the client treats as if it were any other wallet adddress except for when it comes to signing and privkey export operations. This means RPC calls such as getreceivedbyaddress and listtransactions can be used on arbitrary bitcoin addresses. Ive added an RPC call: importaddress <bitcoinaddress> [label] [rescan=true] The address is added as a new type of serialized object in wallet.dat and loads into the key maps of the CKeyStore instances with the key set to the CKeyID and the secret set to an empty vector. Please test it out and let me know what you think. Cheers, -Eric Lombrozo
2120	Found by Hal Finney (thanks Hal!): change outputs were never inserted as the last output, so were not randomized at all for single-output transactions (they were always the first output). Fixes issue #2107
2117	The proposal is to add another kind of object to the wallet database - a bitcoin address sans private key - which the client treats as if it were any other wallet adddress except for when it comes to signing and privkey export operations. This means RPC calls such as getreceivedbyaddress and listtransactions can be used on arbitrary bitcoin addresses. Ive added an RPC call: importaddress <bitcoinaddress> [label] [rescan=true] The address is added as a new type of serialized object in wallet.dat and loads into the key maps of the CKeyStore instances with the key set to the CKeyID and the secret set to an empty vector.
2116	
2115	Having the fee data for every transaction returned by "getblocktemplate" was broken by the ultraprune commit (450cbb09). It made it so transactions that depend on other transactions in the block-to-be dont have fee data.
2114	0 and 128 were previously accepted as standard hash type. Note that this function is not active in the current verification code.
2113	Reason: to prevent pulling in all of utils dependencies in a derived program (tool to generate bip32 test vectors).
2112	Break one long comment down into 3 lines so its readable.
2110	
2109	- currently we sometimes use "windows" or "win32", but as per windows seems to be not officially supported (only win32 is mentioned there)
2108	For changes im Qt 4.8.4 see:
2106	Several upgrades, each necessary to fix problem with the previous one. They could be separated, but at least this combination builds and works. It certainly needs a lot of testing, but I want to give it some exposure: * Upgrade to LevelDB 1.7 * Switch to a native Windows LevelDB port (not anymore via Boost) * Switch to MinGW-w64 (32-bit mode) for Windows builds, as the new Windows port required a more recent GCC/environment than provided by MinGW32. * Switch to a 32-bit Precise image for Windows builds (which provides MinGW-w64 with GCC 4.6.3). * Switch to Boost 1.52, as Boost 1.50s thread library doesnt build on MinGW-w64.
2104	See [Issue #1149](https://github.com/bitcoin/bitcoin/issues/1149) Example ouput: [ { "address" : "1...", "account" : "", "amount" : 0.1, "confirmations" : 9000, "txids" : [ "5b68f4799e90e5d04f0c67fa9a2971e0964ced225a31f548e3ede8f4a0fc5836", "e132bb64a1a61c2d34163261d9c5bc2b166dc3a476e922dc1bd2d02a325b086b" ] } ]
2103	It kind of helps to see directly the % complete without pointing the right bottom corner
2102	* updated references to files which have since been moved * added reference to licensing * added brief summary in case a non-technical user happens upon repo first * miscellaneous Markdown-isms to make the doc more attractive * remove unused symlink README -> README.md I double-checked the makefiles and whatnot to ensure that the README symlink is not being referenced. It is not. Rather, `doc/README` and `doc/README_windows.txt` are copied for distribution.
2101	It kind of helps to see directly the % complete without pointing the right bottom corner
2100	1) Create COIN_DUST constant, to represent the dust spam limit used. 2) Decrease COIN_DUST to 0.001 BTC Rationale: With the increase in bitcoin value (US$13.67 as of this writing), it seems reasonable to reduce the value level of which we consider "dust spam." 3) Update TX miner and relay fee defaults to 0.001 / 0.0005 BTC respectively Rationale: Reflects growth of dust spam in unspent transaction output dataset.
2099	This uses boost::filesystem::create_hard_link to hard-link the pre-0.8 blkNNNN.dat files to blocks/blkNNNNN-1.dat A hard link is the semantics we want: a copy would use twice the disk space, and a move would mean you have to re-download blocks if you switch back to 0.7. The hard link failing is a soft error-- in that case, you just re-download the blocks. According to my research, this should work on Windows, unless youre running a FAT32 filesystem.
2098	- add AllocateFileRangeWin(), which is used to pre-allocate block/undo files as a single contignous chunk on disk, so these files are not fragmented (current master has 95 - 409 fragments for such files, this patch reduces all those to 1 fragment) - add GetBlockFile() and GetUndoFile() helper functions, which are a wrapper for GetDiskFile(), which caches the last used file (separate cache for the last block and undo file) I guess the helper functions could be used in other places of the code as well. I have another pull in the pipe, which makes CAutoFile based on an std::fstream and I use these helper functions there, too. Todo: - perhaps there is no need for another function name even, so AllocateFileRangeWin() could be changed to AllocateFileRange() - as I didnt know how big undo files can grow (no MAX_UNDOFILE_SIZE from ^^), I used the same size for them, as for the block files (MAX_BLOCKFILE_SIZE)
2097	
2096	Should fix #2092
2095	When compiled with `USE_UPNP=-`, in "Options/Network" tab the "Map port using UPNP" checkbox is set up and disabled, which creates the impression that UPnP is always on. This patch makes `OptionModel` to always return `false` if UPnP is disabled, which solves this checkbox problem and, IMHO, is much more intuitive behaviour overall. Please review.
2094	When compiled with "`USE_UPNP=-`", in "Options/Network" tab the "Map port using UPNP" checkbox is set up and disabled, which creates the impression that UPNP is always on. This patch makes OptionModel to always return `false` is UPNP is disabled, which solves this checkbox problem and, IMHO, is much more intuitive behaviour overall.
2089	- current code, when set e.g. -onlynet="IPv6", only prevents outgoing connections to peers via the blocked networks (in this example IPv4/ Tor) - this patch extends the behaviour to inbound connections, so when e.g. -onlynet="IPv6", dont allow incoming IPv4/Tor connections from peers
2087	Adds a new checkpoint at block 210,000.
2080	I use a lot of vanity addresses and I dont need to rescan the chain when importing. I like the ability to optionally request not to do a rescan. Attached is a working example of this.
2076	
2075	Looking more sensible now without the JSON dependencies.
2074	Nothing large, this fixes two minor inconveniences. See the commit messages for more information.
2073	With MinGW we use .a not .lib
2071	more RPC abstraction/encapsulation work
2070	more RPC abstraction/encapsulation work
2069	start of abstraction/encapsulation fixes in the RPC interface
2068	call CheckDiskSpace() before pre-allocating space - even if we are allowed to fail pre-allocating, its better to check for sufficient space before calling AllocateFileRange() and if we are out of disk space return with error() - the above change allows us to remove the CheckDiskSpace() check in CBlock::AcceptBlock()
2066	rework ThreadSafeAskFee() / askFee() functions - remove unused parameter from ThreadSafeAskFee(), which also results in the removal of an orphan translation-string remove unneeded flag from MSG_INFORMATION and fix an indentation
2065	- as we (can) supply the CClientUIInterface::MODAL flag via the style parameter, we dont need a separate bool for checking the modality As requested :), should be much better now. This needs to get in before #2045, because I need to rebase that pull after this one gets in!
2064	IPv6 support is now enabled by default, thus documentation should tell you how to disable it. Similarly the build-osx use of the flag can be removed.
2063	- add a default-constructor, which simply calls SetNull() and a constructor to directly pass nFile and nPos - change code to use that new constructors
2062	When the blocks/ and blktree/ databases exist, but the coins/ database doesnt, reconstruct it automatically at startup. More generally, if the block database has more recent blocks than the coins database, they are automatically constructed at startup. This already worked, but not when the coins database was missing entirely. This pullreq should fix that. This provides a very nice way for benchmarking the block validation logic, as this reconstruction happens before the actual node is started, and doesnt require writing to block files.
2061	The first commit is a rebased version of Hals feb 2011 patch. The second commit improves the code a bit (precalculate constants, and use BN_CTX_get for temporary values). This reduces reindexing time for the first 210k blocks (script checks enabled everywhere, 4 verification threads, -dbcache=900) from 1h14m to 1h1m on my system.
2060	* During block verification (when parallelism is requested), script check actions are stored instead of being executed immediately. * After every processed transactions, its signature actions are pushed to a CScriptCheckQueue, which maintains a queue and some synchronization mechanism. * Two or more threads (if enabled) process elements from this queue, and, and signal the waiting block verification code when they are done. As cs_main is held the entire time, and all verification must be finished before the block continues processing, this does not reach the best possible performance. It is a less drastic change than some more advanced mechanisms (like doing verification out-of-band entirely, and rolling back blocks when a failure is detected). This feature is enabled though the -par=N flag. Depends on #2058 and #2059.
2059	Depends on #2058.
2058	In case a reorganisation fails, the internal state could become inconsistent (memory only). Previously, a cache per block connect or disconnect action was used, so blocks could not be applied in a partial way. Extend this to a cache for the entire reorganisation, making it atomic entirely. This also simplifies the code a bit. I havent seen any reports of problems because of this, but it should be fixed.
2057	- dont call FileCommit() and fclose() if no valid FILE pointer was returned by OpenBlockFile()
2056	Implements the suggestions listed in #2052: * Only move disconnected transactions to the mempool after the last checkpoint * Always very scripts of transactions that do
2055	added build instructions for Ubuntu >= 12.04
2050	Does what it says on the tin. Has full validation of private key before trying to import. Includes logic to request passphrase if wallet is locked. Include progress bar when scanning transactions as can take a few mins. Motivation was to make it easier for people to import vanity addresses. I wrote bitcoinvanity.appspot.com and so want to make importing key easier for users. 1st attempt at QT programming so could be improved I expect.
2049	Apparently, test_bitcoin has been silently corrupting $DATADIR/blocks/blk00000.dat and rev00000.dat since ultraprune was merged...
2048	
2046	- this allows to setup the trayicon before we have and want a trayicon menu - should be of great use, when we remove that splash screen - fixes a small bug with the toggleHideAction icon, which is not only used with trayicon but also with the Mac dock
2045	- use it for displaying URI parsing warnings - use it for displaying error and information in backup wallet function (the information display is new and the error was a warning before) - cleanup BitcoinGUI::incomingTransaction() -- use message() + the information icon from message -- comment out an unused parameter in the function definition and declaration -- move all pre-checks at the beginning of the function There is this comment in qmessagebox.h (``// the following functions are obsolete``) that lists the static QMessageBox functions (warning, information and so on) as obsolete, so I think we should talk about replacing them over the next months.
2044	Intended to at least mitigate the issue from #2035.
2042	OpenDiskFile was always opening files in "rb+" mode (read-write binary), and if that failed and fReadOnly was false, trying to truncate the file. Truncate would always fail (AFAIK) unless a race condition set the file read-write between the two attempts. This changes it to actually honour fReadOnly. The truncate race is not fixed, and cannot easily be fixed (fopen lacks a "open read-write, random access, but dont truncate" mode). If we want to actually try truncating in !fReadOnly mode, Im pretty sure we need to unlink first. This bug was introduced as part of ultraprune, so does not affect any released versions.
2037	-printpriority is currently ignored without -debug, so I dont see any harm to this.
2033	When a transaction A is in the memory pool, while a transaction B (which shares an input with A) gets accepted into a block, A was kept forever in the memory pool. This problem exists in probably all versions of Bitcoin ever. On v0.7.1, it can be demonstrating by mining with 7e15b68ae applied. Every few hours, it seems such a transactions that conflicts with the memory pool gets mined (successful double spends?). Fixing this results in less transactions in the memory pool, and faster construction of new blocks. This should apply cleanly on v0.7.0, v0.7.1 and HEAD.
2032	This fixes the duplicate shortcut usage in sign(alt+s)/verify(alt+v) message dialog. Bug described in issue:
2031	From a question raised by as he re-reviewed the p2sh code.
2030	Pursuant to a "discussion" here: The patch does three things: 1. Copies Qt frameworks from a well-known location. 2, On my installation "phonon" plugin is called "phonon_backend". Make sure phonon_backend is ignored. 3. env. variable QTDIR is used to find the plugins directory. On my installation the dir is "/Developer/Application/Qt". I decided that instead of hard-coding this path, setting QTDIR before running the script is a more flexible solution.
2026	I reformatted the entire document to look pretty in both standard text and Markdown. This should make it a lot easier to read. Also, I incorporated my OS X 10.8 build instructions with Homebrew as the package manager. I originally posted them on the Bitcoin Stackexchange in the question [Trouble compiling bitcoind on OSX with homebrew](http://bitcoin.stackexchange.com/questions/3672/trouble-compiling-bitcoind-on-osx-with-homebrew/5253#5253). Ive used these instructions twice now, so Im fairly certain theyll work. I do recognize that I need to find a way to get the Makefile to look at Homebrews Cellar without needing to be patched. WIP on my branch entitled [feature/osx10.8-bitcoind-compilation](https://github.com/colindean/bitcoin/tree/feature/osx10.8-bitcoind-compilation).
2024	- can be triggerd by just adding -proxy=crashme with 0.7.1 - crash occured, when AppInit2() was left with return false; after the first call to bitdb.open() (Step 6 in init) - this is caused by GetDataDir() or .string() in CDBEnv::EnvShutdown() called via the bitdb global destructor More details in #2025, as Im not sure this fixes the underlying issue or just that single appearance of the bug.
2023	There have been some minor string changes
2022	- I introduced the wrong format macro with my former patch (#2018), this needs to be signed not unsigned (thanks Luke-Jr)
2019	This updates both translation relevant files to current master strings. Got the script working: - install Python 2.7 for Windows - mingw-get install msys-gettext - edit \share\qt\extract_strings_qt.py to use "#!/d/Python27/python" instead of "#!/usr/bin/python"
2018	- fixes 2 warnings I observed while compiling on Windows with MinGW
2017	* "optimistic write": Push each message to kernel socket buffer immediately * If there is write data at select time, that implies send() blocked during optimistic write. Drain write queue, before receiving any more messages. This avoids needlessly queueing received data, if the remote peer is not themselves receiving data. Result: write buffer (and thus memory usage) is kept small, DoS potential is slightly lower, and TCP flow control signalling is properly utilized. The kernel will queue data into the socket buffer, then signal the remote peer to stop sending data, until we resume reading again.
2016	Replaces CNode::vRecv buffer with a vector of CNetMessages. This simplifies ProcessMessages() and eliminates several redundant data copies. Overview: * socket thread now parses incoming message datastream into header/data components, as encapsulated by CNetMessage * socket thread adds each CNetMessage to a vector inside CNode * message thread (ProcessMessages) iterates through CNodes CNetMessage vector Message parsing is made more strict: * Socket is disconnected, if message larger than MAX_SIZE or if CMessageHeader deserialization fails (latter is impossible?). Previously, code would simply eat garbage data all day long. * Socket is disconnected, if we fail to find pchMessageStart. We do not search through garbage, to find pchMessageStart. Each message must begin precisely after the last message ends. ProcessMessages() always processes a complete message, and is more efficient: * buffer is always precisely sized, using CDataStream::resize(), rather than progressively sized in 64k chunks. More efficient for large messages like "block". * whole-buffer memory copy eliminated (vRecv -> vMsg) * other buffer-shifting memory copies eliminated (vRecv.insert, vRecv.erase)
2014	
2013	Cleaner and removes the need for the application-specific flags in serialize.h. No semantic changes.
2012	
2011	- remove obsolete functions, variables, definitions and such - cleanup layout (no need to keep that many ugly empty lines IMHO) I searched trough the source to see where functions are used and removed all that were not used anywhere anymore. Tried a compilation afterwards and the client still works fine :). Needs a careful review from a core dev.
2010	- its good practise to use unsigned int for enum flags, so change this one, as I introduced this for Bind()
2009	It seemed to create two CWalletDB objects that both grab the database lock. (note: based on v0.7.1)
2008	These flags select features to be enabled/disabled during script evaluation/checking, instead of several booleans passed along. Currently these flags are defined: * SCRIPT_VERIFY_P2SH: enable BIP16-style subscript evaluation * SCRIPT_VERIFY_STRICTENC: enforce strict adherence to pubkey/sig encoding standards. No semantic changes.
2006	Other operating systems, like FreeBSD, have their own make programs, with different syntax. These install GNU make as gmake, and relay on the $(MAKE) macro to specify the right program. The src/makefile.* files hard code make command line for leveldb, causing FreeBSD to use the wrong make command. This pull edits this command to use the $(MAKE) macro, so the right make command is used.
2005	- remove an unwanted ";" at the end of the ~CCoinsView() destructor - in FindBlockPos() and FindUndoPos() only call fclose(), if file is open - fix an error string in the CBlockUndo class
2004	o Remove unused Leave and GetLock functions o Make Enter and TryEnter private. o Simplify Enter and TryEnter. boost::unique_lock doesnt really know whether the mutex it wraps is locked or not when the defer_lock option is used. The boost::recursive_mutex does not expose this information, so unique_lock only infers this knowledge. When taking the lock is defered, it (randomly) assumes that the lock is not taken. boost::unique_lock has the following definition: unique_lock(Mutex& m_,defer_lock_t): m(&m_),is_locked(false) {} bool owns_lock() const { return is_locked; } Thus it is a mistake to check owns_lock() in Enter and TryEnter - they will always return false.
2003	This pull request includes needed changes to get started using locking annotations. threadsafety.h - the set of macros. sync.h - a mixin that adds annotations to the basic locks. net.h - I added annotations to functions where the set of held locks before and after the function is called is not the same. Reviewers: Please look carefully at the TODOs in net.h. The pre/postconditions of those functions are entirely unclear. The set of held locks depend on the value of nHeaderStart ! nHeaderStart is also involved in both != -1 and < 0 tests.
2002	
2000	It was looking really weird to read this in the source: <pre> } } </pre> At first I thought it must be a merge-problem ;). Im sorry that the diff on Github is looking THAT ugly, there are NO code-changes in, just indentation changes.
1997	- remove pathEnv from CDBEnv, as this attribute is not needed - change path parameter in ::Open() to a reference - make nDbCache variable an unsigned integer - remove a missplaced ";" behin ::IsMock()
1995	A while back I started looking at bitcoin, and I was disappointed with the code quality wrt locking. I tried to fix the code to be clang -Wthread-safety clean, but I dont know the code enough to understand some of the entanglements that are currently present. Ive added lots of annotations that specifies the locking requirements on functions and data. This might seem a little overzealous, but I believe that this is necessary to "get back on track" and make the locking strategy clear and consistent. Even with this patch there are lots of locking issues left - probably benign like things happening during startup and shutdown. There are also false positives from me not getting clang to grok TRY_LOCK correctly. Below is a long note I wrote while looking through the source code a while back. Maybe you guys agree or maybe not - at least it explains the whats and the whys. --- For an object that is accessed by multiple threads we have, for every field: - It is const, constant after initialization, or guarded by a mutex. - Re-using an object is a *bad idea*. It should never be done. If we do, we are mutating the constant-after-initialization fields. This leads to exessive locking and overcomplicated code. It is a lot simpler to discard the object and re-create it. This works, because the object is owned by some other object, and in that other object, it is a "guarded by mutex" field. Thus by re-creating the object, we lift the responsibility for locking into the parent. - A result of the above is that "constructors" must be separate from other functions in the class. Constructors that are not strictly C++ constructors, such as deserializing should be static functions if possible. This makes it impossible for them to to be used to mutate constant-after-initialization fields. - Locks should not be exported outside of a class. Java did this mistake and it is considered an anti-pattern. - Locks should never serialize code, they should protect data from being accessed while invariants on that data are broken. - Locks should be textually close to the fields. Given a lock, it should be easy to understand what it guards, and given a field, it should be easy to see which locks guard that field. Thus, locks should be private members of a class. A good way to obfuscate this is to put a lock in a parent class, as done in keystore.h where CKeyStore. It is hard to know what that lock guards. It is a lot cleaner to duplicate that lock in the data section of the subclasses. - Recursive locks should never be used. They lead to bugs, and are *only* necessary in order to write sloppy code. If some functionality is both a transaction that ensures that the invariants of the data are obeyed, and part of larger transactions, then it is much clearer to separate these conserns into two functions: void DoFoo() { LOCK(cs); DoFooUnlocked(); } void DoFooUnlocked() { ... } - Using locks to protect simple setters and getters is often buggy and/or complex. In most cases, mutating some state is part of a larger transaction, so the setter is often protected by some other lock external to the class. In these cases, re-building a new object is usually the best approach, but otherwise, explicitly marking setters as SetFooUnlocked() and not lock is clearer. It makes it explicit that you cant just mutate randomly without doing some external locking. - Do not hold locks over callbacks out of an object. This means that objects should *signal* some state change, and not guarantee which state the object is in when a callback happens. Sometimes, it makes sense to break this, but then the callback will have to be treated like a signal handler, or irq handler - i.e. it can only do simple things and not call out to other random code. - Every time you call TRY_LOCK, a kitten dies. The reason why this is bad is that it makes reasoning, and testing the code incredibly hard. TRY_LOCK is basically this: if (rand() % 1) { DoA(); } else { DoB(); } It is simply unnecessary randomness. The TRY_LOCK macro should be removed, it kills kittens. If something like TRY_LOCK is truly needed, then at least it should be abstracted out of the actual functions, so that the functions themselves are testable. Thus in the above case, DoA() would be a separate, testable, function. In some really large systems (millions of large tps), sharding work queues by lock is a reasonable design to reduce resource usage by threads (so you do cs_someLock.DoWorkNowOrWhenUnlocked(&DoA), and it is more efficient than TRY_LOCK, but for bitcoin - this is just overkill. - Having lots of semantically different locks in a class is not ideal. For example CNode has 4 locks. This means that there are 4 sets of invariants that can be established independently of each other in this class. To put it another way, when you call a function on this object, it should work on a subset of the state, or it should hold all 4 locks. This suggests that either the class is a composite of multiple objects, and should be broken up, or the number of locks should be reduced. - We cannot compose multiple critical sections which all take a lock into a large critical section. After we have released locks, all checks that we have done are invalidated. Most of CWallet is just plain wrong and based on this false assumption. Locking is done in CCryptoKeyStore instead of in CWallet. See above "Locks should be textually close to the fields" for a reason why people confuse themselves. - There is a lot of convoluted code like this: bool result; { LOCK(cs_KeyStore); result = (mapKeys.count(address) > 0); } return result; which is equivalent to this: LOCK(cs_KeyStore); return (mapKeys.count(address) > 0); The destructor is guaranteed to run after the expression is evaluated. There is no need to over-engineer. Similarly, there is a lot of code like this: void SomeFunction(...) { something(); { LOCK(cs_something); ... } } or this: void SomeFunction(...) { { LOCK(cs_something); .. rest of function ... } return false; } There is no point in all the excessive blocks. What are they for?
1993	- ensure header inclusion guard is named after the header file - add missing comments at the end of some inclusion guards - add a small Qt5 compatibility fix in macdockiconhandler.h
1992	As memset() can be optimized out by a compiler it should not be used in privacy/security relevant code parts. OpenSSL provides the safe OPENSSL_cleanse() function in crypto.h, which perfectly does the job of clean and overwrite data. For details see: - change memset() to OPENSSL_cleanse() where appropriate - change a hard-coded number from netbase.cpp into a sizeof() There are still some more memset() calls in the code, perhaps a dev should take a look if I missed any, that is related to this pull!
1991	Add the fixwalletdates RPC When the client has been off for a while and gets restarted, new transactions are received via blockchain updates and get tagged with the current time, which bear little to no correlation with the time at which the TX was broadcast by the sender. As a substitute, the "fixwalletdates" RPC re-tags all wallet transactions with the timestamp of the block they are included in (if any). One minor downside of calling this RPC is that TX that were actually received via broadcast will see their "broadcast date" be replaced by the time they got included in a block. In practice, Ive found this not to be a problem. In fact, seeing all TXs tagged with the time at which they get included in the blockchain makes more sense : in a way, its the time the TX became valid, and if we have to pick one canonically representative time for a TX, first block inclusion time is better than first broadcast time.
1990	After the leveldb import, src/makefile.unix has the make command for leveldb hard coded. When a build is run on FreeBSD, it uses the system make, which uses different syntaxes. Using the macro $(MAKE) will cause it to run gmake, and the build will work.
1989	- if we are not connected and if we are downloading the block-chain dont start the mining threads - this pull makes the setgenerate-call explicit, which I found out to be a good thing as we dont have 4 idle threads when not needed and it prevents mining under erroneous conditions (which I was able to trigger sometimes before this patch and which lead to orphan blocks) - the internal miner is only used for testnet anyway these days, but I love it for that scenario
1988	- fix ThreadSafeMessageBox always displays error icon - allow to specify MSG_ERROR / MSG_WARNING or MSG_INFORMATION without a custom caption / title - allow to specify CClientUIInterface::ICON_ERROR / ICON_WARNING and ICON_INFORMATION (which is default) as message box icon - remove CClientUIInterface::OK from ThreadSafeMessageBox-calls, as the OK button will be set as default, if none is specified - prepend "Bitcoin - " to used captions - rename BitcoinGUI::error() -> BitcoinGUI::message() and add function documentation - change all style parameters and enum flags to unsigned - update code to use that new API - update Client- and WalletModel to use new BitcoinGUI::message() and rename the classes error() method into message() - include the possibility to supply the wanted icon for messages from Client- and WalletModel via "style" parameter
1987	Added security measure.
1986	Although in theory RPC API access should be locked down, there are occasions where cleartext passwords have been used anyway. HTTP Basic authentication remains, but a new default "Bitcoin" HTTP Authorization header is used. HTTP Digest authentication was considered initially, but that may require additional HTTP round-trips. The standard HMAC-SHA256 algorithm pair was chosen instead, with some additional stirring factors (random nonce, time). The HTTP server will accept Basic or Bitcoin authentication now. The HTTP client will attempt Bitcoin authentication, and fall back to Basic if that fails.
1984	merged 2 windows:LIBS lines so they happen when they need to (#976) added -loleaut32 to fix VariantClear moved -lws2_32 and others to existing windows:LIBS line
1983	Updates 4 odd RPC commands to match other RPC commands which tend to follow a <VERB><OBJECT> naming scheme. The old names still work as aliases of the new names, but dont show up in the help lists. See:
1982	See individual commits. This provides a slightly different, not-JSON-RPC API endpoint, which makes this HTTP request usable via "wget" and similar utilities. The content returned and format thereof is certainly open to discussion. My main goals were * fix HTTP request line parsing bugs * tighten HTTP request line validation, including "/" URI (our default JSON-RPC endpoint) * permit dump of crypted keys, without decrypting them * demonstrate a not-JSON-RPC API download endpoint
1981	Tweaks for LevelDBs caches.
1980	
1979	
1978	As the only BDB database left is the wallet, and it is always detached. This also removes the IsChainFile() predicate and related chainfile-specific logic.
1977	- as the redefiniton of printf happens in util.h, which is included in bitcoinrpc.cpp, we dont need another redefinition
1976	filesystem.hpp and thread.hpp are included in util.h, which is included in util.cpp
1974	Exactly like -blocknotify, except that it gives the TxID of transactions that hit the wallet. Note that this is NOT a payment notification. It will trigger on outgoing transactions too, and can trigger multiple times on the same transaction.
1973	No functional changes.
1972	
1971	The original test (checking whether the transaction occurs in the txindex) is not usable anymore, as it will miss anything already fully spent. However, as merkle transactions (and by extension, wallet transactions) track which block they were last seen being included in, we can use that to determine the need for rebroadcasting.
1970	makefile.unix uses xCFLAGS, xCXXFLAGS and xLDFLAGS internally to avoid being clobbered by users CFLAGS / CXXFLAGS / LDFLAGS variables. This change does the same for src/leveldb/Makefile.
1967	
1966	Use && and fix linux-mingw, please wait for pull-tester output here. Also upgrade to qt 4.8.3 because 4.8.2 isnt on the version archive anymore (dont see any mentions as to why, but we might as well upgrade so that everyone can build).
1963	When interrupted early at startup, it was possible to have the shutdown code try to write NULL as the new best block.
1962	The first commit adds CBufferedFile, which works like CAutoFile, but buffers the data in memory, so it is rewindable, and supports fast scanning inside the buffer. The second commits switches LoadExternalBlocksFromFile to use CBufferedFile, simplifying it, and removing all fseek()s.
1959	- instead of "return false;" use "return QDialog::eventFilter(object, event);" to harmonize this event filter with our default behaviour - remove orphan spaces found while editting the files
1957	These calls can be used to generate and check signatures for arbitrary (potentially binary) files, much like signmessage / verifymessage. The client should hash the file locally then send a uint256 in hex form as the 2rd parameter to signfile and the 3rd parameter to verifyfile. The other option would have been for the client to hash the file locally and send it to the server using the signmessage / verifymessage calls, but then the server would be signing a hash of a hash. Im new to the bitcoin code, so if theres a better way of doing this, let me know. The functionality has been verified by one other person on IRC but it still could be wrong.
1956	Implements #1948 - Add macro `CLIENT_VERSION_IS_RELEASE` to clientversion.h - When running a prerelease (the above macro is `false`): - In UI, show an orange warning bar at the top of the overview page. This will be used for other warnings (and alerts) as well, instead of the status bar. - For `bitcoind`, show the warning in the "errors" field in `getinfo` response. This does not disable any functionality. Acting on the warning (or not) is the user or developer their own responsibility.
1955	This looks like it was just a munged merge when ultraprune was committed.
1954	- if -datadir= is no directory dont return an empty path, but instead create / use the default data dir - check for existance of the final datadir, before trying to create it This should fix #1950.
1953	CreateNewBlock was reading pindexBest at the start before taking the lock so it was possible to have the the block content not match the prevheader and this can also trigger a newly added assert in ConnectBlock. I noticed this during a code review after twobitcoins reported that ab91bf39 (BIP30 for all blocks) could cause a null dereference on a modified node that mined during the IBD, or on testnet when it reached heights 91842 and 91880 due to CreateNewBlock calling ConnectBlock with pindex->phashBlock NULL.
1952	Both `pcointTip` and `pblocktree` can be null, but since `CBlockTree::Flush` is empty the call is optimized away and so the second check is not strictly necessary...
1949	Thanks to PullTester and for spotting some of these.
1947	
1945	See
1943	Flushes the blktree/ and coins/ databases, and reindexes the block chain files, as if their contents was loaded via -loadblock. Based on earlier work by Jeff Garzik. This is a step towards automatic upgrade of pre-ultraprune databases as well.
1942	Was included twice, and is only needed once :).
1941	- remove uiInterface.InitMessage() calls from ThreadImport(), as Qt doesnt like them getting called out of its main thread and because the thread will continue to run after the GUI was loaded This fixes a crash I discovered, while compiling Bitcoin-Qt the first time after Ultraprune was merged to master.
1940	With a change of libs, and specifying NATIVE_WINDOWS as TARGET_OS it should compile libleveldb.a and libmemenv.a just fine, it did for me and Diapolo when testing.
1939	This seems to be recently-introduced bug in ultraprune. can you check whether this fixes the zero-balance issue? You may need to restore from a backup.
1938	
1937	
1936	This reduces copying of data being serialized.
1935	This script downloads the SHA256SUMS.asc file from SourceForge for a given release (version can be specified on the command line), which contains Gavins signature of the hashes of the Bitcoin binaries. It verifies that the signature is valid, downloads the files specified in the signature file, and checks that the hashes of these files match with those signed by Gavin.
1934	
1933	
1932	- "ThreadIRCSeed started" was not displayed, even if the thread ran (although only for a short time as the "do we want this thread?"-checks happen IN ThreadIRCSeed2()) - the patch ensures we always get that message - add a "ThreadIRCSeed trying to connect..." message - add missing "ThreadDumpAddress started" message
1931	This replaces the spinner and connection icon with freer licensed ones. Ive slightly improved on #811: - Inactive bars in the connection icon are now visible. This better matches the current icon and prevents a nondescript "dot" in the status bar for 1 connection. - Remove commit xanatos@de6a850c84934ae5a1aff24e213c9abe7c2b9979 which was erroneously included
811	If Im reading this (https://github.com/bitcoin/bitcoin/blob/master/doc/assets-attribution.txt) correctly, you are including some GPL icons in the Bitcoin. This would make the whole program GPL. (http://stackoverflow.com/a/47994/613130) unless there are special licensing (unless you have special permissions from the author, but then you should write it). Icon: src/qt/res/icons/connect*.png Icon Pack: Human-O2 Designer: schollidesign License: GNU/GPL Site: Icon: scripts/img/reload.xcf (modified),src/qt/res/movies/update_spinner.mng Icon Pack: Kids Designer: Everaldo (Everaldo Coelho) License: GNU/GPL Site:
1926	Sizeof() returned the size of a pointer instead of the size of the buffer. Fixes issue #1924.
1925	- Bitcoin-Qt: add new GCC compiler hardening options - Bitcoin-Qt: remove unneeded "--param ssp-buffer-size=1" flag
1923	- add setStatusTip() in addition to setTooltip() where it makes sense - add only setStatusTip() if GUI element is only used in main- or tray menu - add an event filter on our BitcoinGUI object to prevent garbelled text on the status bar, which happens when we use it for e.g. displaying block-sync state and then a QEvent::StatusTip wants to write own text to it - remove a double translation of "Bitcoin client" This solves #1079.
1922	- Bitcoin-Qt: intregrate current translations from Transifex - Bitcoin-Qt: update english translation master file
1921	Never store the result of c_str()! Luckily, this only affected logging, though it could crash or leak sensitive data to the log in rare cases.
1918	to query remote node mempool contents. This supercedes pull #1833, which was fat-finger merged, and then resultant damage undone. See #1833 for relevant comments on this pull request.
1917	Before, opening a -datadir that was created with a new version of Berkeley DB would result in an un-caught DB_RUNRECOVERY exception. After these changes, the error is caught and the user is told that there is a problem and is told how to try to recover from it.
1916	This avoids the case where you read the address data, before noticing it is the wrong network.
1915	- I missed that one in my former pull
1914	- this extends the persistent tray icon until shutdown is complete, to ensure users wait before trying to restart the client
1913	I2P apparently needs 256 bits to store a fully routable address. Garlicat requires a centralized lookup service to map the 80-bit addresses to fully routable ones (as far as I understood), so thats not really usable in our situation. To support I2P routing and peer exchange for it, another solution is needed. This will most likely imply a network protocol change, and extension of the addr message. Remove it for now, until we can support it completely.
1911	- also includes the required bitcoinstrings.cpp update
1910	- Wiki says "block chain" is correct ;) - remove some unneeded spaces I found in the source, while fixing the spelling
1909	Fixes #1832
1908	I performed some code archeology to retroactively name and document the JSONRPC error codes. This pull has no code changes. Feel free to suggest other names for the errors. ```C++ // Bitcoin RPC error codes enum RPCErrorCode { // Standard JSON-RPC 2.0 errors RPC_INVALID_REQUEST = -32600, RPC_METHOD_NOT_FOUND = -32601, RPC_INVALID_PARAMS = -32602, RPC_INTERNAL_ERROR = -32603, RPC_PARSE_ERROR = -32700, // General application defined errors RPC_MISC_ERROR = -1, // std::exception thrown in command handling RPC_FORBIDDEN_BY_SAFE_MODE = -2, // Server is in safe mode, and command is not allowed in safe mode RPC_TYPE_ERROR = -3, // Unexpected type was passed as parameter RPC_INVALID_ADDRESS_OR_KEY = -5, // Invalid address or key RPC_OUT_OF_MEMORY = -7, // Ran out of memory during operation RPC_INVALID_PARAMETER = -8, // Invalid, missing or duplicate parameter RPC_DATABASE_ERROR = -20, // Database error RPC_DESERIALIZATION_ERROR = -22, // Error parsing or validating structure in raw format // P2P client errors RPC_CLIENT_NOT_CONNECTED = -9, // Bitcoin is not connected RPC_CLIENT_IN_INITIAL_DOWNLOAD = -10, // Still downloading initial blocks // Wallet errors RPC_WALLET_ERROR = -4, // Unspecified problem with wallet (key not found etc.) RPC_WALLET_INSUFFICIENT_FUNDS = -6, // Not enough funds in wallet or account RPC_WALLET_INVALID_ACCOUNT_NAME = -11, // Invalid account name RPC_WALLET_KEYPOOL_RAN_OUT = -12, // Keypool ran out, call keypoolrefill first RPC_WALLET_UNLOCK_NEEDED = -13, // Enter the wallet passphrase with walletpassphrase first RPC_WALLET_PASSPHRASE_INCORRECT = -14, // The wallet passphrase entered was incorrect RPC_WALLET_WRONG_ENC_STATE = -15, // Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.) RPC_WALLET_ENCRYPTION_FAILED = -16, // Failed to encrypt the wallet RPC_WALLET_ALREADY_UNLOCKED = -17, // Wallet is already unlocked }; ``` This pull reveals some inconsistencies in the error codes thrown, for example, `-3` is sometimes used for "Invalid bitcoin address" sometimes i.s.o `-5`, but as to not change the interface I decided against addressing this. This can be left for a later pull (or never, and just documented as part of the API). Ive also added constants for the HTTP status codes.
1907	Also clarify translation process that the package `gettext` is needed to run string extractor.
1906	As the list of options is getting very long, theres a large chance it doesnt fit on the terminal at once. Sending the output to stdout allows fun stuff such as `bitcoin --help | less`, and more easy piping to files (yes, technically its also possible with stderr, but less convenient). Looking at other tools such as bash, gcc, they all send their help text to stdout.
1905	For the GUI version... As stderr and stdout point to the bit bucket in Windows for windowed applications, users get no error message.
1904	This command is a leftover from send-to-IP transactions, which have been removed a long time ago. Removes the last remaining GetBoolArg("-allowreceivebyip").
1901	Dont use hand-rolled string manipulation routine with a fixed buffer in the bitcoin core, instead make use of c++ strings and boost high-level string algorithms.
1900	- is more consistent and saves quite some lines of code
1899	- dont rely on the QSettings for cases ProxyUse and ProxySocksVersion and query the real values via the GetProxy() call - add a missing "succesful =" for case ProxyUse in ::setData() This is based on #1859!
1895	Corrupt wallets used to cause a DB_RUNRECOVERY uncaught exception and a crash. This commit does three things: 1) Runs a BDB verify early in the startup process, and if there is a low-level problem with the database: + Moves the bad wallet.dat to wallet.timestamp.bak + Runs a salvage operation to get key/value pairs, and writes them to a new wallet.dat + Continues with startup. 2) Much more tolerant of serialization errors. All errors in deserialization are tolerated EXCEPT for errors related to reading keypairs or master key records-- those are reported and then shut down, so the user can get help (or recover from a backup). 3) Adds a new -salvagewallet option, which: + Moves the wallet.dat to wallet.timestamp.bak + extracts ONLY keypairs and master keys into a new wallet.dat + soft-sets -rescan, to recreate transaction history This was tested by randomly corrupting testnet wallets using a little python script I wrote (https://gist.github.com/3812689)
1893	Simply change the RPC response to indicate that a new backup is needed after encrypting the wallet. The RPC counterpart to pull #1890.
1892	Fixes all format warnings and re-enables the warning messages. replaces #1885
1891	- remove the "%" character from format characters for (s)size_t and ptrdiff_t and harmonize them with the ones for int64 and uint64
1890	
1889	This patch lets a user have multiple wallets within his data directory by selecting a wallet using `-wallet=filename`. It also allows accessing wallets outside the data directory. In that case, the database environment is still stored in the data directory so both wallet file and data directory must be kept in sync (e.g. when storing the wallet within an encrypted container). Ive been using this patch for a few months now without any troubles and its proved to be pretty useful.
1888	As it says on the tin
1886	- fix for #1877 - fix was reported to work via
1885	#1807 revealed some things that need fixing and I tried to do this. This pull currently does not re-enaable the -Wformat warnings, as I was not sure, if I perhaps missed some warnings.
1883	We currently have better measures to deal with stack overflow problems (-fstack-protector, ASLR, non-executable stack, ...) than this hack. Furthermore, GCC optimizes the loop away through tail call optimization...
1881	There are two equal ifs, one inside another. If the first one is true, then the second one is true. As the code was before, toHTML added empty elements to mapValue to check for their existance. Now first it check for their existance and then for their non-emptiness. This is the second try... The first time git ate my homework :-)
1880	Originally written for the ultraprune+leveldb demo at the London 2012 conference.
1879	As we dont use the file metadata anyway.
1878	There are two equal ifs, one inside another. If the first one is true, then the second one is true. Ill add that I dont think its a good idea to use the [] operator for checking the existance of items in a map in the context of a method that should only "show" the wtx (the map::[] operator adds a new item if it isnt found). I think the method should work with a const CWalletTx &wtx.
1876	Makes diagnostics possible, reverse-header-sync a lot easier, and other uses. Will BIP-ify if people like this. NOTE: The CBestChain class was copied from COutPoint, if anyone was curious about the origin of that code.
1875	Trying to compile with clang under Mac OS X 10.8 (XCode 4.5) results in the error: `assigning to objc_object * from incompatible type DockIconClickEventHandler *` clang seems to be much more picky than gcc about the type a variable it assigns an Objective-C instance to, and a simple `class objc_object` doesnt cut it.
1872	This avoids a potential crash when trying to read the scrippubkeys on transactions where the first input IsMine but some of the rest are not when running listaddressgroupings.
1871	Was searching through the code for places that read from the wallet after startup (since most wallet items are read at startup in LoadWallet)
1870	Hopefully this is done in a database-independent manner, with minimal interference to the upcoming ultraprune.
1869	This patch removes the disabled opcodes and the one dependent utility function that is orphaned. Interestingly there appears to be a slight difference in behavior between explicitly disabled opcodes and reserved/unused opcodes. Previously VerifyScript() would fail any script containing a disabled opcode as soon as it is encountered, whereas reserved/unused opcodes would fail when they are executed. This is a subtle difference, but detectable. Take the following script from the invalid-script unit tests: 0 IF INVERT ELSE 1 ENDIF This previously failed even though the INVERT is never executed. But now that the disabled opcodes are removed entirely, INVERT becomes 0x83 and is treated like any other unused opcode, meaning that script now passes validation. To fail, the IF-branch of the conditional would have to be taken: 1 IF 0x83 ELSE 1 ENDIF The last commit of this pull request simply switches the branch taken in this and other unit tests such that the opcode is executed and fails. However the construction of the unit test clearly indicates that failure even if the opcode is not executed was the desired result. A decision still needs to be made as to whether this behavior should be extended to all reserved/unused opcodes.
1868	Due to a bug in the implementation of MakeSameSize(), using OP_AND, OP_OR, or OP_XOR with signed values of unequal size will result in the sign-bit becoming part of the smaller integer, with nonsensical results. This patch documents the unexpected behavior and provides the basis of a solution should decision be made to fix the bug in the future.
1867	so its easier to see what address the unspent outputs belong to
1864	AFAIK the BitcoinPullTester was using Qt 4.8.2 for weeks now without any problems. As there were many fixes since Qt 4.7.4 this should be a valuable change and perhaps fix some of the GUI problems we see on Windows. Im not sure how or where I can change the used Qt version for our Linux / Mac builds though and any input is welcome :)!
1863	This creates a new serialized structure CKeyMetadata, and stores it alongside each newly created key. This data is used to calculate a whole-wallet birthday. Wallet rescan is optimized using this information, to skip reading and scanning blocks earlier than the wallet birthday.
1862	Fix: when testnet=1 specified, change default RPC port to 18332
1861	This is a memory-only filter, which must be applied at bitcoind startup. It might be nice to store this in the wallet, but to judge interest and review the interface, this is a useful first step.
1860	Not sure whether we want CAddress() to continue defaulting to non-zero, so the behavior of the current code was retained. Warrants a BIP, presumably.
1859	- fix #1560 by properly locking proxy related data-structures - introduce GetProxyPair() and GetNameProxyPair() to be able to use a thread-safe local copy from proxyInfo and nameproxyInfo - rename GetNameProxy() into HaveNameProxy() to be more clear
1857	
1856	This patch currently excludes our Windows executable! - change to use -fstack-protector-all - the minimum size of buffers (i.e. arrays) that will receive stack smashing protection was changed to 1 byte (GCC default: 8) - warn about functions that will not be protected against stack smashing by adding -Wstack-protector See #1674 for full discussion on the Windows issue! This should be safe to merge, but we can wait until the pull tester did its job!
1854	- a shortcut on "receive coins" was used twice
1853	Update #include <QtGui/QWidget> to #include <QWidget>
1852	Now that Qt resides at qt-project.org we should update old qt links to point there.
1851	Use OpenSSL 1.0.1c Bump deps to 0.0.5 Small docs corrections
1850	Bugfix: Avoid trying to parse outputs that arent relevant to CWalletTx::GetAmounts * This fixes a warning when an output we arent concerned with cant be parsed. Bugfix: Supress "address" key in transaction details, when the destination isnt recognized * Previously, it would pass corrupt/random through base58. Fixes #779 and #1848.
1847	There was a report of a mysterious crash on OSX 10.7 that may or may not be caused by this. In any case, Bitcoin-Qt is multi-threaded, so compiling with -pthread is the right thing to do.
1845	Fix for #1843
1844	- replace Q_WS_MAC (not supported anymore in Qt5) with Q_OS_MAC (supported in Qt4/5) There is for sure more work to be done, but this easy patch doesnt even hurt our current code! For more details see:
1837	I noticed that 0.7.0 for OSX is compiled with 1.0.1c, so I thought it might be an idea to update the makefiles, readme etc. Im assuming that theres no reason that unix and windows builds cannot use 1.0.1b.
1836	Adds a stopdetach <detach> RPC command. <detach> defaults to true. Works just like stop, but overrides the commandline/config file -detachdb option. Useful for upgrading, for example. Lets you use fast stops usually, but force a detach when needed. Also, allows you to do a fast stop in a system normally configured to detach.
1835	If we appear stuck and a new peer has blocks for us, ask for them. NOTE: This triggers during the "version" message, and so, does not help cases where there is no connection turn-over. However, this seems a very simple way to address stuck network sync under reverse-header-sync or something more fancy appears. Builds on top of bug fix submitted in #1834.
1834	If the remote node has a shorter chain, do not waste our special getblocks request on them.
1833	to query remote node mempool contents. NOTE: It is expected behavior that this will pump up the orphan pool initially, before dependencies resolve themselves.
1830	- remove some unneeded stuff in sendcoinsentry.ui - harmonize some "Error:"-messages
1829	
1828	The base58 codec uses full length bignum operations for each digit and `strchr(pszBase58, *p)` to find the value of each base58 digit. Ive cleaned up the implementation by: * using bignum operations with word-sized operands * using a pre-computed decoding table * adding comments * getting rid of useless copy operations As with my other recent pull-requests I think Ive made the source easier to understand and the speedup is just a side benefit. However, I could not restrain myself and added a last commit which is a much faster version, converting 5 or 10 digits at a time (depending on `sizeof(BN_ULONG)`). Esulting in an overall speedup of over 10 times. If your prime interest is in simple code, please pull all but the last commit. If you dont mind a bit longer, but much faster code, pull the whole branch.
1825	`CBigNum::SetCompact()` and `CBigNum::GetCompact()` -------------------- Because my previous pull-request which changed the semantics of `SetCompact()` and `GetCompact()` in an effectively backwards-compatible way was met with understandable skepticism Ive prepared this branch, which provides a bit for bit compatible re-implementation and unit tests. Please, pull at least the first commit of either of the branches. They only contain unit-tests making sure the semantic of `GetCompact()` and `SetCompact()` is not changed unintentionally. If you agree that the semantics should not be changed, you should still pull the second commit of this branch if you agree that my re-implementation is easier to understand, more efficient, or both.
1823	The problem =========== `SetCompact` as currently implemented interprets the compact number `0x01810000` as `-1` instead of `0x81`, because it is implemented using `BN_mpi2bn`, which interprets the highest bit in the first byte of its input as sign and this is not compensated for. Currently this is not a problem as none of the bitcoin-implementations Ive looked at generate compact numbers with the `0x00800000` bit set. Many contain a matching bug in their compact encoding routines. Satoshi: * `CBigNum.GetCompact(0x81)` => `0x02008100` * `CBigNum.SetCompact(0x01810000)` => `-1` Defensive encoding. Decoding results in negative number with highest bit stripped. bitcoinj: * No compact encoding. * `Utils.decodeCompactBits(0x01810000)` => `-1` Decoding will lead to `Block::getDifficultyTargetAsInteger()` throwing a `VerificationException`. bitcoinjs: * `encodeDiffBits(0x80)` => `0x02008000` * `decodeDiffBits(0x01810000)` => `0x81` (OK) Defensive encoding and correct decoding libbitcoin: * `big_number::compact(0x80)` => `0x02008000` * `big_number::set_compact(0x01810000)` => `-1` Defensive encoding. Decoding results in block_work() returning 0 and validate_block::check_proof_of_work returning false. This branch =========== The first commit adds several test cases for `GetCompact()` and `SetCompact()`, including one showcasing the erroneous decoding. The second commit reimplements `GetCompact()` and `SetCompact()` using shifts instead of going through the MPI-representation. `GetCompact()` now is careful not to generate compact numbers with the `0x00800000` bit set (`GetCompact(0xff)` yields `0x0200ff00` instead of `0x01ff0000`). It results in identical compact numbers for positive inputs as the old code. `SetCompact` now interprets the compact number `0x01810000` as `0x81` instead of `-1`.
1822	Instead, fall back to IPv4 listening.
1821	This is the brute-force fix for issue #1819, removing the new feature that is causing problems for some people.
1818	If signrawtransaction is signing a P2SH scriptPubKey, it needs to know the Script that hashes to the P2SH address. That isnt a problem for transactions that are in the wallet, but if youre giving the private keys to signrawtransaction then it doesnt look in the wallet, and there needed to be some way to provide the redemption Script. This pull request makes three functional changes: + Adds "redeemScript" to listunspent output, when listing a p2sh/multisig output + Adds "redeemScript" to signrawtransactions second argument (list of previous transaction outputs) + Adds a new RPC command, "createmultisig" that is just like "addmultisigaddress" but instead of adding the multisig address/redeemScript to the wallet, returns them in a JSON object. It also includes new unit tests for the raw transaction API argument checking code (and refactors some argument checking to remove some code duplication).
1815	OpenBSD is failing some tests related to wallet coin selection AND SHOULD NOT UNDER ANY CIRCUMSTANCES BE USED AS THE OS ON ANY INSTANCES HANDLING A WALLET YET. The *.d cleanup in the clean target is needed for instances when you try and link against a bad db version (<4.8) but they shouldnt exist under "normal" circumstances. Should still clean them up. The swap of the bdb and boost include search paths is intentional. The openbsd port/package for db4 is stuck at 4.6 for right now and exists in /usr/local. Boost also exists in /usr/local so if its specified first you cant get the linker to find the correct bdb. Getting the unit tests working on OpenBSD requires patching the boost 1.42 port before building as the provided one will not work with any unit tests whatsoever. Ill write up build instructions for both platforms for a different pull request. Ive tested that this builds on both OpenBSD 5.1 and FreeBSD 9.0-RELEASE-p4. (AKA, current stable versions as of this writing.) Ive also tested that it does not break builds on debian wheezy. Edit: FreeBSD build example: BOOST_INCLUDE_PATH=/usr/local/include \ BOOST_LIB_PATH=/usr/local/lib \ BDB_INCLUDE_PATH=/usr/local/include/db48 \ BDB_LIB_PATH=/usr/local/lib/db48 \ gmake -f makefile.unix -j8 USE_UPNP= bitcoind test_bitcoin OpenBSD build example: BOOST_INCLUDE_PATH=/usr/local/include \ BOOST_LIB_PATH=/usr/local/lib \ BDB_INCLUDE_PATH=/opt/OpenBSD/5.1/amd64/db4-4.8.30/include \ BDB_LIB_PATH=/opt/OpenBSD/5.1/amd64/db4-4.8.30/lib \ BOOST_LIB_SUFFIX=-mt \ gmake -f makefile.unix -j8 USE_UPNP= bitcoind test_bitcoin See this pastebin for details on the failing unit tests on OpenBSD:
1814	Matt pointed out some time ago that there existed a minor DOS attack where a node in its initial block download could be wedged by an overwrite attack in a fork created between checkpoints before a time where BIP30 was enforced. Now that the BIP30 timestamp is irreversibly past the check can be more aggressive and apply to all blocks except the two historic violations.
1813	
1812	
1811	I found it really helpful when debugging stuff to not need to delete the debug.log everytime I re-start the client. - changes ShrinkDebugFile() function to use nice MiB and KiB boundaries
1810	- Paging using PageUp / PageDown now works when entry widget has focus - Typing or pasting while the messages widget has focus auto-selects entry widget
1809	This change is longer than preferred, because mTemplates is a map, and as such, the notion of "variant of TX_PUBKEYHASH" is poorly supported. TX_PUBKEYHASH_*DATA was added, but is largely to quiet compiler warnings, because it is mapped to TX_PUBKEYHASH everywhere, including Solver()s transaction-type return value. Intended to enable use cases such as Mike Hearns distributed bond markets:
1808	Were in a wholly different world now, C++-compiler-wise. Current std::stringstream implementations dont have the stated problem anymore, and are just as fast as CDataStream. The #ifdefd block does not even compile anymore; CDataStream constructor changed, and missing some std::. Also timing in whole seconds is also way too granular to say anything sensible in such microbenchmarks. Just remove it, it can always be found again in git history.
1807	This finds about ~150 potential problems with wrong format characters on a 64 bit build (-Wformat). Most mistakes seem to have to do with using `%d` for `size_t` / `ssize_t`. When memory addresses are 32-bit this is no problem, however on 64-bit architectures this is wrong. See also . Other warnings have to do with pointers, where %x is used instead of %p. I dont feel like fixing all the warnings right now, but it is a useful diagnostic nevertheless as it may reveal hidden bugs. This pull does add macros akin to `PRI64x` to help with this, and represent format characters for these types for MSVC and GCC: - `PRIszx`: hex - `PRIszu`: unsigned (size_t) - `PRIszd`: signed (ssize_t)
1804	Checks are applied to: getwork RPC submission, internal miner submission, and submitblock RPC submission. Arguably pointless for the first two, as getwork miners cannot change that field, but it is a sanity check even in those cases.
1803	[21:48:14] &lt;md2k7&gt; feel free to make it MIT if you like Just to reduce the number of distinct licenses required...
1802	
1800	Thanks for finding these bugs!
1799	
1798	The wrong address is added to the collection. As was written a second copy of address1 was added (and so address2 was useless).
1796	Over the releases, numerous translations have been lost due to fixes in English grammar and spelling. Additionally, ampersands/hotkeys seem to keep getting escaped. These commits correct some of these issues, but I only got about 20% through the full recovery of old translations so far. This process is very time consuming, and I want to verify it will be accepted upstream before I spend any more time on it. Im aware of Transifex, but I am automating a significant amount of the restoration process (for the most part, my time/effort is just checking the scripts work for correctness). Hope these ts files can be imported to it...
1795	Filter tx invs and add MSG_FILTERED_BLOCK to provide blocks as header+vector<merkle block> (not including tx itself)
1794	
1793	- I checked every occurance of strprintf() in the code and used %u, where unsigned vars are used - the change to GetByte() was made, as ip is an unsigned char As our strprintf() gives not the same kind of compiler-warnings we see with printf(), I checked all direct usage of strprintf() for correct format characters.
1792	
1791	Equivalent code. (false == 0 == DB_LOAD_OK).Fixes #1706.
1789	
1788	
1787	Wanted to eliminate a silly thread that does nothing but waste system resources as a poor mans cron. boost.asio also has deadline_timer, which is worth investigating.
1786	The most portable invocation for the zero-fds case, a widely used portable hack for sleeping, generally involves passing NULL arguments when the fd sets are unused. This form is used here. Intended to supercede #1772.
1785	From a code review: catch potential DataStream deserialization exceptions.
1784	I think that implicitly converting 3 (the number) to uint256, doing an & between two uint256 and finally comparing the result to an uint64 (the 0) is a little overkill if all you want is to check 2 bits of an uint256. I have to say the truth, Im not sure if now we would be comparing the "same" 2 bits or the 2 bits from the other side of the uint256 (looking at operator= and Get64 I would say the same), but considering what this code wants to obtain, it shouldnt be a problem. (Im not even sure if this code will be faster, but I do think that all those implicit conversions are b.a.d.). We could even do a (*hashrand.begin() & 3) but that would be quite unreadable.
1782	Im assuming this is meant to be "real number", however correct me if Im wrong.
1781	- add -proxy6 to specify a SOCKS5 proxy for reaching IPv6 peers - enhance control flow for proxy init code - new init order Tor -> IPv6 -> Base proxy - remove redundant .IsValid() checks - dont set Tor proxy, when IsLimited(NET_TOR) - dont allow SOCKS versions != 4 or != 5 - disable the usage of -proxy for Tor and IPv6, when SOCKS4 is used - update parameter help messages to reflect changes and tweak them to be more clear
1780	Change Copyright (c) 2010 to Copyright (c) 2009-2010 in some files.
1779	The vector isnt referenced in the small code block its declared. I dont see any "useful" side effect in its declaration.
1778	I had a talk with yesterday about this on IRC, this is the patch for our discussion. - this allows the client to listen on via -bind specified addresses (e.g. 127.0.0.1), even when a network (IPv4 in that case) was blocked via e.g -onlynet="Tor" - introduce enum BindFlags to avoid passing multiple bools to Bind() - make -bind help text clear we ALWAYS listen on the specified address - remove an unused variable - usage case: specify -bind=127.0.0.1 -onlynet="Tor" to allow incoming connections to a Tor hidden service, but still dont allow other IPv4 nodes to connect / get connected
1777	%d can return up to 11 characters (12 with \0). Move away from fixed buffer completely and use our own safe function strprintf. Im reasonably sure that this cannot be exploited due to earlier checks, but it does make me feel a tad uneasy.
1774	OrderedTxItems returns a multimap of pointers, but needs a place to store the actual CAccountingEntries it points to. It had been using a stack item, which was clobbered as soon as it returned, resulting in undefined behaviour. This fixes at least bug #1768.
1772	- when there is no network connection or a failing / non-existent proxy passed to the client the debug.log was spamed with socket 10022 errors - this is fixed by adding a check for hSocketMax != 0 - merged a WSAGetLastError() into the related printf()
1771	
1770	Oops. Should now mimic bash quoting and escaping (see exactly, leaving out argument expansion and obscure syntax like $.
1769	- add -proxy6 to specify a SOCKS5 proxy for reaching IPv6 peers - add init message for network initialisation - enhance control flow for proxy init code - update parameter help messages to reflect that change and tweak them to be more clear
1767	- current code does not clear history, when using the clear button, this is added - remove an unused variable
1764	Using a byte-for-byte comparison excludes valid nHeight encodings. Replace with standard script method for decoding integer values on the script stack.
1762	* This sets a clickable hyperlink for the transaction ID text on the transaction detail window. * The links points to * This is very handy because avoid copying the transaction id, opening the browser, going to blockexplorer and pasting the transaction id. * When sending money to someone sometimes is useful to give them the link to the corresponding blockexplorer transaction id. Is also useful to easily check advanced details of the transaction.
1761	
1760	- add ConnectionTest() to netbase.h to do a connection-test for a present -proxy address on client init and warn on failure This is informing users about a failure to connect to a supplied proxy, current timeout is 1sec, which we can discuss. Fixes: #763
1758	As boost was no longer helpful I had to implement the command line splitting myself. Should fix issue #1750, but does need some testing.
1757	
1756	
1755	how to build on ubuntu 12.04
1754	Last-minute translatable strings update
1752	- this is already active for bitcoin-qt.exe As no one responded in the IRC chan Ill open this as pull. Im not sure if that pull needs further modifications to the makefiles, so please be gentle :).
1751	They are unneeded as jsonspirit is always used as template library, the other makefiles dont include them either.
1749	
1748	Thanks to for noticing.
1745	Dont force IRC off if not listening, do force it off if IPv4 is off. Previously Bitcoin would refuse to use IRC if it was either not accepting inbound connections or not making outbound. Instead this changes it to not use IRC only if its not doing either or if IPv4 is off completely. If Bitcoin is not listening this will use the default random nicks rather than the IP based ones. Also, Dont retry a failing IRC nickname forever. If our IRC nick is in use (because some other node thinks it has the same address we think we have) dont fruitlessly try to reconnect using that name forever. After three tries, give up and use a random nick. Either well learn a new local address from IRC and switch to that, or it was right and the other guy is advertising for us. This avoids a pessimal case where a second testnet node behind a nat is unable to get any peers because he cant get on IRC.
1744	Two commits; the first just refactors most of the alert-handling code into alert.cpp/alert.h The second gives testnet its own alert key, which is the right thing to do because if it shares the main networks key somebody could take testnet test alerts and rebroadcast them on the main network.
1743	It should be pprev, because the next one is pnext, and its printing the memory address of the CBlockIndex (so pSomething).
1742	Only enabled inside tests for now. Unit tests are included, but rather minimal for now. Ive done more tests, though. The custom is-standard check for signatures and the OpenSSL-based test agree for every transaction in the blockchain up to block 195000, included for simple randomly fuzzed versions of every blockchain transaction.
1741	As requested by in #1736
1740	Partly replaces #1736
1739	Partly replaces #1736
1738	Im not sure why this wasnt done before. - Removes typedef of pthread_t on Windows, which fixes a native compile issue on mingw (@diapolo :-)
1736	Add I2P to -onlynet docs and make all release notes present tense
1735	After the first time the if is true, its quite useless to check the other nOffset of vSorted.
1733	
1732	
1731	I forgot to paint the bike shed...
1730	
1729	These commits: 1) prevents a possible DoS (make nodes waste CPU time checking alert signatures) attack (thanks to Sergio Lerner for finding/reporting) 2) implements theymos suggestion of a non-overrideable alert message, to be used only in case the alert key is compromised. Both thoroughly tested by me in a testnet-in-a-box environment: Verified that nodes are disconnected/banned if they send too many invalid alerts. Verified that the alert system still works properly when sent valid alerts. Verified that nId=max alerts are ignored unless they match hard-coded values. Verified that nId=max alerts work properly if they do match.
1728	Around line 167 there is already a LOCK(bitdb.cs_db) that covers everything. Re-locking is useless.
1726	Keeps the "windows", "windowsxp", "windowsvista" styles. Reduces the size of a static bitcoin-qt.exe by ~400 kB.
1724	Last-minute translation updates for 0.7rc1
1723	Some qt styles have a problem with displaying the block progress, as text on a segmented progress bar is terrible to read. This mostly affects older Windows, and some Linux distributions (which also use the windows/windowsxp theme). Add a custom stylesheet as workaround, but only when one of those renderers is active, otherwise leave the theme alone (issue #1071). Before: ![](http://i47.tinypic.com/156e0p4.png) After: ![](http://i48.tinypic.com/2cwubf9.png) can you test this on Windows 7 and see whether it stays as it is?
1720	- add a new label, which can be updated independently from the whole license information stuff - the benefit is, we dont need to re-translate that whole wall of text every year the copyright info changes - update to the same copyright string we use in the source and in the bitcoin-qt.exe meta-data information - removes an obsolete entry from the ui-file
1718	Closes #1711.
1717	- before, we used to show them in GUI when depth >= 2, which could lead to confusion of users, as the RPC behaviour already showed the Tx Related to #1712.
1716	- The patch created in boost-win32.yml was not indented as gitian requires it to be - no longer applicable with this next change: - Move the boost::interprocess workaround to Bitcoin-Qt sources, so it works even with native builds (note that Boost 1.50+ do not have the bug). - Adjust the paths gitian-win32.yml looks for Boost to reflect new 1.49 version dependency.
1713	It looks somewhat better to not have a missing icon. Uses the built-in icon that is also used in the dialog box itself, so doesnt cost any extra space.
1710	We had code to check for P2SH violations specifically, in order to not cause DoS triggers from them during the transition period. This is no longer necessary. It also improves performance for detecting invalid scripts a bit.
1709	One added space + one removed space.
1708	nIndex is int64, nKeys is int64, it would be useless to have i an int.
1707	nLoadWalletRet is already equal to DB_NEED_REWRITE (we are in an if)
1706	Equivalent code. (false == 0 ==DB_LOAD_OK)
1705	- re-order Qt Actions and connect() calls to match the real GUI layout, which makes things easier to read and understand - remove FIRST_CLASS_MESSAGING from the client - remove signMessageAction and verifyMessageAction from tabGroup as we didnt use this anyway (as tooltips are not displayed in the menu remove these too)
1701	Pull most recent translations from transifex for 0.7.0rc1. No new translations have been added, but many have been updated.
1700	... so that they can be found and edited easier in Qt creator
1699	Ive investigated issue #1462 and in my experiments, the memory allocation pattern with a many transient objects almost guarantees that after the initialization of bitcoin **only one** of the pages is actually locked. This means that most of the keying material can end up in swap. I considered two ways to address this: 1) A special memory pool (using boost::pool) of locked pages 2) Keep track of which pages are locked with a lock count I first tried (1), but it ended up non-optimal. boost::pool is very wasteful with tiny objects (in this case, char), as the minimum chunk size seems to be the pointer size, resulting in a blow-up of 8 on 64 bit architectures. As locked pages are a limited resource, this should be avoided. So I went with the second alternative. This solution is also easier to test than a full-blown custom memory pool. Ive added an autotester.
1698	Replace the checkpoint at 185,333 with block 193,000. (edited, was 195,000)
1695	In -loadblock mode, ProcessBlock() is called without node to retrieve parents from, if needed. In this case, prefer to not store orphans as all, as they would just linger in RAM.
1694	Fix two potential infinite loops in the connection logic: * With -noconnect, the -connect code was trigger, but looped infinitely through the empty list of nodes * Given restrictions on which networks to connect to, if no such nodes exist in addrman, the code would loop infinitely through the addresses being fetched. Break this loop after 100 iterations. Closes #1664.
1693	Move implementation code out of bitcoinrpc.cpp to new modules.
1692	- this function converts an unsigned block-file number into a std::string containing the full path to the file - make OpenBlockFile() use GetBlockFile() Can be usefull for Ultraprune work, when we have many more block-files.
1691	Rather than having a dual-mode RPC call, create two RPC calls. Luke-Jr already updated BIP 22 to reflect this. getblocktemplate mode=template works as before. New RPC submitblock takes a <hex-data> parameter, a raw serialized block to be decoded and submitted. At Luke-Jrs request, submitblock ignores an optional second parameter, if present (an Object for future options). Tertiary RPC cleanup commits are also included.
1690	Allows the user to pass null as the second or third parameter to signrawtransaction, in case you need to (for example) fetch private keys from the wallet but want to specify the hash type. (As discussed with in IRC while testing the signrawtransaction ... SINGLE fix)
1689	This fixes issue #1688
1687	This does two things: 1) Now does not output to debug.log if -printtodebugger flag is passed 2) Unit tests set -printtodebugger so only test results are output to stdout Note that -printtodebugger only actually prints to the debugger on Windows.
1686	
1685	- a click on "Reset Options" sets all options to the default values by removing all stored settings (QSettings), loading the defaults and saving them as the new settings - before the reset is executed the user is presented a confirmation dialog - special casing was needed for StartAtStartup
1684	As discussed on IRC. Intended to make using an external blockchain download solution just a bit easier.
1683	This extends #1607, which got recently merged, with version information for bitcoin-qt.exe (no additional files need to be modified by hand). - add version information to bitcoin-qt.rc, which is displayed on Windows, when looking in the executable properties and selecting "Details" - introduce a new clientversion.h (used in bitcoin-qt.rc to generate version information), which takes only the version defines from version.h and is included in it (to allow usage with the windres rc-file compiler) - move #define STRINGIFY(s) #s into clientversion.h as that is used in bitcoin-qt.rc and rename to DO_STRINGIZE(X) - add #define STRINGIZE(X) DO_STRINGIZE(X), which is needed to convert the version defines into a version string in the rc-file - this ensures we only need to update 1 file and have bitcoin-qt.exe version information - for RC-file documentation see: ![bitcoin-qt.exe details](http://i45.tinypic.com/2qn63hw.png)
1681	
1680	This was missing and formerly the displayed message during -loadblock was just "Loading wallet...", which was a little missleading IMHO.
1679	
1678	
1677	This is a rewrite of the block storage and validation engine. Instead of blkindex.dat (a database with block tree data, and all transactions and their spendings in the active chain), it uses chain.dat (only block tree data) and coins.dat (pruned txout set). These two databases together are significantly smaller than blkindex.dat (<200 MiB), and only coins.dat is actively needed during block validation, speeding it up significantly (15 minutes for importing 185000 blocks from a local disk file). Blocks are still stored in blk????.dat files, in the same file format, but smaller files (up to 128 MiB). To prevent excessive fragmentation, they are allocated in chunks of 16 MiB, and some statistics are kept about them. To assist with reorganisation, undo files are created (rev????.dat), which contain the data necessary to undo block connections. Block pruning itself is not yet implemented, but this makes it trivial to do so; all that is required is deleting old block and undo files when certain thresholds are reached. Also note that this block pruning mechanism is different from the transaction pruning mechanism described by Satoshi. This one does not prevent a node from acting as a full node. All commits result in a functional code tree, with succeeding unit tests. The first few add some extra classes, without changing actual semantics. "One file per block" and "Multiple blocks per file" form a refactor of the block storage mechanism, with related database changes. "Do not store hashNext on disk" only introduces a forward-incompatible change that simplifies the database layout. "Ultraprune" itself contains the switch from txindex.dat to coins.dat as validation data, and contains the majority of the changes. What follows are optimizations and other some improvements, that do not effect compatibility. There are a few TODOs left (see comment below), but Id like to give the code some exposure already.
1673	- for extra security on Windows: enable ASLR and DEP via GCC linker flags GCC linker flag description: --dynamicbase The image base address may be relocated using address space layout randomization (ASLR). This feature was introduced with MS Windows Vista for i386 PE targets. --nxcompat The image is compatible with the Data Execution Prevention. This feature was introduced with MS Windows XP SP2 for i386 PE targets. Tor project is also using this. Even if we dont want this for 0.7 it should be tested and talked about for a near release IMHO.
1672	This applies on top of the coincontrol listaddressgroupings patch and makes finding eligible outputs from the groups returned by listaddressgroupings possible.
1671	Synthesis of #936, #1431, #1526, #1549, #1355, #1409, #1393, #1583, and #1647
1670	This is a rebase and cleanup of #1426 Note that while these bits are less significant numerically, they are more useful because they are likely to be unique (whereas the most significant bits will generally be zero)
1661	This is the last time for 0.7.0. We should avoid message changes until the release. Translators can use the remaining time to update their languages on Transifex. The other languages need to be merged from Transifex shortly before release.
1660	
1658	
1655	Signrawtransaction rpc was crashing when some inputs were unknown, and even with that fixed was failing to handle all the known inputs if there were unknown inputs in front of them. This commit instead attempts to fetch inputs one at a time.
1652	This statistic is only reported when a new block appends onto the strongest chain. Tested by comparing bitcoind new-block results with pynode, which performs a similar calculation.
1651	They are largely useless, but they do double-check a few things that could be useful for new implementations. (and quite a few of them are duplicated, but I dont feel like looking into which ones). Now with data-driven transaction tests which consist of a list of inputs, and a serialized transaction. Again, the data-driven transaction tests are more targeted at alternative implementations than the reference client. Also pulled in a commit to make test_bitcoin useful when it fails (otherwise you have no idea why it failed, it just says failed and you have to scroll back through a ton of crap to find it).
1650	
1649	- add enableApplyButton() and disableApplyButton() to optionsdialog.{h/cpp} - they are used to ensure the Ok button does not get disabled, when Apply needs to be disabled (standard UX should allow Ok always to dismiss the dialog and only disable it, when we have a faulty proxy IP) - disable Apply after initially loading the settings, as nothing new needs to be saved - remove orphan settings from optionsdialog.ui that are default anyway
1648	This is a rework of #1128: - Transactions from or to me are given a priority boost in my own mining - Transactions *from* me are always accepted to my memory pool - Transactions to me are accepted to my memory pool regardless of fees paid
1646	
1645	**Status: Deferred until handling stuck transactions is implemented** If a transaction sent requires a fee greater than (new) maxtxfee option, aborts with an error. If started with undocumented unsupported -nosafefees option, allows JSON-RPC to set a "forcetxfee" to override the error and send anyway (with maxtxfee amount of fees only).
1644	No new languages and no ones removed, though we need to mobilize people to further help translating the non 100% languages!
1642	
1641	Add mempool P2P command, and extend getdata behavior to permit downloading of mempool transactions from the remote peer.
1639	- this adds an option under the Display tab, to enable a relative progress bar display (per popular demand) - it takes a "remaining blocks at startup" value as maximum (which is dynamic, when there are new blocks while downloading the chain) - the bars value is computed by subtracting the above value from the current remaining block count of the node converted to a positive number - update some comments - remove some orphan settings from the optionsdialog.ui file ![relative progress bar option](http://i49.tinypic.com/2mzzggx.png)
1636	- ensure warnings always start with "Warning:" and that the first character after ":" is written uppercase - ensure the first sentence in warnings ends with an "!" - remove unneeded spaces from Warning-strings - add missing Warning-string translation - remove a "\n" and replace with untranslatable ``<br><br>``
1635	- place "-?" option at first - re-work description and "\n" usage for Gavins new block creation options to better match current description syntax - ensure no "\n" is in translated strings, which is better for Transifex
1634	The new bytes are based on "11" to appeal to Gavins 11 fetish. This breaks existing testnet3 nodes as the blockchain files are versioned too.
1633	If running on the testnet, this disconnects and bans any peers that are running PROTOCOL_VERSION 60000 or earlier. This cuts way down on the number of peers that try to send you a testnet1 or 2 block chain. If PROCOTOL_VERSION is bumped before the 0.7 release, TESTNET3_VERSION should be increased to match.
1632	Just tired of seeing a bunch of tiny commits that fix one or two spelling/grammar errors, but leave many more of the same. I went over the entire git repository with a spell checker by hand and fixed a bunch (hopefully all) of spelling errors, then checkout out each instance of "s" to correct the grammar violations. Hopefully this will save time overall :)
1631	- No core strings changed since last time, so no update to bitcoinstrings.cpp - Re-add line numbers in .ts file as this is marginally easier for translators (see #1227)
1630	recepient -> recipient
1628	
1624	Seems I was wrong with my initial naming ;).
1623	From the documentation: <pre> TARGET This specifies the name of the target file. For example: TEMPLATE = app TARGET = myapp SOURCES = main.cpp The project file above would produce an executable named myapp on unix and myapp.exe on windows. </pre> I checked the makefile, no changes, but TARGET should not be empty IMHO.
1622	
1621	Deal with this mess once and for all...
1620	- This helps user to not think the client is called "Bitcoin"
1619	This patch set imports the Google LevelDB 1.5 database, refactors the transaction database code a little and then lets you pick between LevelDB or BDB via a build flag (qmake USE_LEVELDB=- to go back). On test machines, LevelDB seems to be significantly faster than BDB due to the fact that the bulk of the IO work is handled by a separate thread. The main thread just appends data to the end of a log file when writing, and the IO thread then turns logs into sorted tables and compacts them together. When indexing the block chain Bitcoin appears to be CPU bound on Windows and Linux machines, even during migration when signature checking is disabled. On my SSD based MacBook Pro the performance isnt as good and it still seems to be IO bottlenecked, which is the opposite of what Id expect. This code instructs LevelDB to use a 10-bit bloom filter per block. This expands the size of the database quite a bit, but allows a reduction in disk seeks. I havent tested different bloom filter sizes to see what works better. It is an area for future work. LevelDB is statically included because: - Upstream is not widely packaged and the build system does not support "make install", so its annoying to link against - We need custom patches to make it work on Windows. - Its important that all Bitcoin users are running on a db engine tested by us. We dont want some fraction of the network nodes to be "upgraded" but still running on BDB just because of who built their binaries.
1617	- be clear we dont "Show/Hide Bitcoins", but just the client window - remove the tooltip for toggleHideAction as this is not shown anyway
1616	Changes only comments.
1615	
1614	- this enables DEP on all Windows version which support the SetProcessDEPPolicy() call in Kernel32.dll - use a dynamic approach via GetProcAddress() to not rely on headers or compiler libs - this is the same way the Tor-project does it See for a detailed explanation of DEP! It is possible to enable this directly when linking, but this needs much more testing than this small patch :). I consider it a valuable 0.7 security feature on Windows. To verify if DEP is enabled for bitcoin-qt.exe you can use Sysinternals ProcessExplorer: ![verify DEP state](http://i48.tinypic.com/r8tesl.png)
1612	- If the height is in the first half, start at the genesis block and go up, rather than at the top - Cache the last lookup and use it as a reference point if its close to the next request, to make linear lookups always fast
1611	This replaces #1543, which needs a rebase and if this gets merged #1543 can be closed. Fixes #1062
1610	Trivial update, noticed it when I was browsing the code.
1609	No code changes. Fixed typos, updated/added a few links.
1608	Update the comment in GetBlockValue() to better reflect the uncertainty about the time interval between subsidy reductions
1607	- extend bitcoin-qt.rc to include meta information, which is displayed on Windows, when looking in the executable properties and selecting "Details" - does currently NOT include version information, this is scheduled for later releases - for RC-file documentation see: ![bitcoin-qt.exe meta information](http://i46.tinypic.com/znk095.png)
1606	I wanted this to create a transaction on testnet that exercised all of the SIGHASH_ modes (see txid 8ccc87b72d766ab3128f03176bb1c98293f2d1f85ebfaf07b82cc81ea6891fa9 on testnet3) It adds a fourth optional string argument to signrawtransaction, which can be ALL / NONE / SINGLE / ALL|ANYONECANPAY / etc. It just converts the string to one of the enum SIGHASH_ constants and then uses that signing mode when signing. I created that testnet transaction by: + I manually created a raw transaction with six inputs and 7 outputs + I extracted the private keys (using dumpprivkey) corresponding to the six inputs + I called signrawtransaction six times to sign each of the six inputs separately, passing in just one of the private keys and using a different SIGHASH_ mode each time. + I called sendrawtransaction to broadcast the completed transaction.
1605	Makes more sense to users, fixes #1601
1604	
1598	
1597	...on any platform using Oracle VirtualBox. A minimum number of host dependencies are required. The gitian build process produces deterministic builds and living documentation of the build process. However gitian only runs within a Linux host environment, and has proven somewhat tricky to setup and maintain. The purpose of this pull-request is to provide a platform-independent set of scripts for creating a gitian build environment and launching builds for all platforms using Oracle VirtualBox, Vagrant (for recording configurations of VirtualBox; see and gitian LXC containers. See contrib/vagrant/README.md for details.
1596	1.0.0d -> 1.0.1b
1595	
1594	- re-work code parts that check if we have a Statusbar warning - use same variable names in the header
1593	- add a comment
1592	- this helps user to not think our Client is called "Bitcoin Wallet" - change "About Bitcoin-Qt" to "About Bitcoin" - change "Bitcoin debug window" to "Bitcoin - Debug window" - change "Client" in debug Window to "Bitcoin Core"
1591	This will display the languages in the selection as "native language - native country (locale name)", when using Qt >= 4.8 and as such fixes #1509.
1590	Modify CreateNewBlock so that instead of processing all transactions in priority order, process the first 27K of transactions in priority order and then process the rest in fee-per-kilobyte order. This is the first, minimal step towards better a better fee-handling system for both miners and end-users; this patch should be easy to backport to the old versions of Bitcoin, and accomplishes the most important goal-- allow users to "buy their way in" to blocks using transaction fees. Four params give miners control over the transaction selection process: -blockmaxsize : maximum size of blocks created (default: 250000) -blockprioritysize : how much of the block to set aside for high-priority-maybe-free transactions (default: 27000) -blockminsize : minimum size of blocks created (default: 0) -mintxfee : transactions that pay below this many bitcoins-per-kilobyte are considered "free" (default: 0.0005) Discussion thread in the Mining forums:
1589	- fixes #1560 Ive never worked with a LOCK() before ... so please help me learning this concept :).
1587	
1586	DRAFT status, please help test! Trying to coordinate testing on IRC, possibly using NTP and
1585	
1584	- add part for handling of plurals - update Transifex links - small misc changes I based this on your additions from #1582.
1582	Add more detailed instructions on how to update translation files after a strings change.
1581	This should also be mentioned in the translation process, that we have to add these via the Qt Linguist app and mark them as translated there.
1580	Another base translation strings update, there have been some new strings for tor support etc
1577	Details: Uses a src/checkpoint_def.cpp file to store a static array of checkpoints. That file is easily generate-able using -saveblockcheckpointfile and gitian builds require the file as an input.
1575	Fixes #1452. Until we can make the logic water-tight *and* are notified in every case the balance might have changed (either due to blocks maturing, or outputs spent), remove the premature optimization and simply recompute the balance every half a second when the number of blocks changed. Shouldnt make any impact on performance in practice.
1574	- as the "||" operator is not known to qmake use "|" instead, which ensures the code in brackets does never get executed on Windows
1572	- cleanup optionsmodel before adding new proxy options - place SOCKS version stuff below proxy port (IP, Port, SOCKS version) - simplyfy some parts of the code (e.g. dont check IP and port, as this is done in optionsdialog anyway, remove unneeded {} in switch/case) - small comsetic changed in the header for better readability This is what I intend to do with the proxy options (not included here): ![planned proxy options](http://i45.tinypic.com/5a5ef9.png)
1571	This pull is intended to prepare the optionsdialog for further changes to the proxy options and includes a few changes that would bloat a proxy options pull. - remove duplicate includes, that are already present in ui_optionsdialog.h - change QIntValidator to not allow 0 as port-number - re-order some function calls to match the Ui element order, for better readbility and to prepare for the addition of further IPv6 and Tor proxy options - restat warning for the language selection is only shown, when the language was changed (not on simply activating the Ui element) - modify proxy warning message "This setting..." into "Proxy settings..." - split check for object == ui->proxyIp into seperate if-clause - unify used format for comments in the code - introduce handleProxyIpValid() function, which handles UI elements and the save button states for valid/invalid proxy IPs This is what I intend to do with the proxy options (not included here): ![planned proxy options](http://i45.tinypic.com/5a5ef9.png)
1569	- add signals signMessage() and verifyMessage() in addressbookpage.cpp - connect to them in bitcoingui.cpp to switch to the corresponding tab in the Sign/Verify Message dialog - make gotoSignMessageTab() and gotoVerifyMessageTab() private slots
1567	SerializeHash used to create a memory-backed CDataStream, serialize the object (almost always a CTransaction) to it, and then feed it to SHA256. As most of the time is actually spent in allocating/deallocating the buffer, it is better to do the SHA256 in-place. That is what CHashWriter does. On my system, in ultraprune running on a tmpfs-backed datadir, this alone reduces total CPU time spent during import of 185k blocks by 4-5%.
1566	
1565	This fixes compatibility with opensshs socks5 proxy and tors .2.3.x branch.
1564	- add IMPLEMENT_RANDOMIZE_STACK for ipcThread() - log / print boost interprocess exceptions - use MAX_URI_LENGTH in guiconstants.h (also used in qrcodedialog.cpp) - remove unneeded includes and ipcShutdown() from qtipcserver.cpp - fix a small mem-leak by deleting mq before re-using it - make ipcThread() and ipcThread2() static functions - add some more comments This is intended to improve some parts of our current IPC code, mostly security wise, it does not change the URI handling behaviour. I compiled this on Windows and made some tests with Bitcoin-Qt, everything okay.
1563	- add -s flag as we also use a static build in makefile.mingw As we now use Boost 1.49 on Windows I think this should be updated as well.
1562	Please dont close this, it gives an example for jenkins to test that (obviously) doesnt build. Ill close it in a day or two when jenkins is working.
1559	when these are non-zero. Fixed a minor mem leak. Relates to #837 and #1475.
1557	This is based on #1514 and adds fixes to bitcoin-qt.pro to build with clang+lto without editing makefiles. After this, you can use: qmake bitcoin-qt.pro USE_CLANG=1 USE_LTO=1 && make or make -f makefile.unix CXX=clang++ LDFLAGS="-use-gold-plugin" CXXFLAGS=-emit-llvm Building bitcoind requires ld-gold, however bitcoin-qt does not. Motivation here is a speedup: clang-lto: " block index 6523ms" gcc-lto: " block index 8497ms" That said, \<gmaxwell\> Seriously, every time Ive seen a major speedup with clang it was miscompiling the code. Still its interesting that there is a speedup that large, and making it easier to compile using clang is not bad.
1555	(aside from some boost::thread ones on win32) Fixes: src/net.h: In member function void CNode::EndMessage(): src/net.h:374: warning: invalid access to non-static data member CMessageHeader::nMessageSize of NULL object src/net.h:374: warning: (perhaps the offsetof macro was used incorrectly) src/net.h:380: warning: invalid access to non-static data member CMessageHeader::nChecksum of NULL object src/net.h:380: warning: (perhaps the offsetof macro was used incorrectly) src/net.h:381: warning: invalid access to non-static data member CMessageHeader::nChecksum of NULL object src/net.h:381: warning: (perhaps the offsetof macro was used incorrectly) Or, put better by clang++: src/net.h:377:46: warning: offset of on non-POD type CMessageHeader [-Winvalid-offsetof]
1554	Pull request #1486 contains a bunch of BlueMatt commits in a stack. Pulled out this one out of the stack, and rebased it on top of current HEAD.
1553	Look for -MD at This just explicitly sets the output of -MMD using -MF to the default of where the output would otherwise have gone.
1552	- remove "#include <QString>" as this is included in the header - add some missing plural forms that can be translated - change "yours" into "own address", which is easier to understand and translate in that context - cleanup translatable strings to not include HTML or unneeded chars (e.g. ":") - resize TransactionDescDialog a little (remove unwanted line-breaks with non english translations)
1551	This adds SHARED_LOCK, TRY_SHARED_LOCK, and UPGRADE_LOCK to complement LOCK and TRY_LOCK. It implements the many-readers, single-writer model where any thread holding a LOCK excludes other threads from a SHARED_LOCK, but many threads can hold a SHARED_LOCK. Only one thread can hold a UPGRADE_LOCK, it can be held while others hold a SHARED_LOCK, but it cannot be held while another thread holds a LOCK. This should create tons of low-hanging fruit for optimization, even though it doesnt do any itself.
1549	Useful Changes: * Moves the DNS lookup of -addnode nodes into the repeated loop, allowing -addnode to follow DNS changes. * Try more than the first address for a DNS -addnode. Two new RPC commands: * addnode <node>. Adds <node> the same as if -addnode were used. Note that it can take up to two minutes before the addnode thread runs again and connects to the new node. * getaddednodeinfo [node]. Gets the list of added nodes including whether they are connected and to which node they are connected. Or gets the list of connections to [node] given [node] is specified in the same way as with -addnode/addnode. eg: getaddednodeinfo dnsseed.bluematt.me [ { "addednode" : "dnsseed.bluematt.me", "connectedto" : [ "95.154.99.150:8333", "80.221.217.69:8333" ] } ] or getaddednodeinfo [ { "addednode" : "10.232.4.10", "connectedto" : [ "10.232.4.10:8333" ] }, { "addednode" : "dnsseed.bluematt.me", "connectedto" : [ "95.154.99.150:8333", "80.221.217.69:8333" ] } ]
1548	In the most obvious way possible.
1546	Bitcoin will not make an outbound connection to a network group (/16 for IPv4) that it is already connected to. This means that if an attacker wants good odds of capturing all a nodes outbound connections he must have hosts on a a large number of distinct groups. Previously both inbound and outbound connections were used to feed this exclusion. The use of inbound connections, which can be controlled by the attacker, actually has the potential of making sibyl attacks _easier_: An attacker can start up hosts in groups which house many honest nodes and make outbound connections to the victim to exclude big swaths of honest nodes. Because the attacker chooses to make the outbound connection he can always beat out honest nodes for the consumption of inbound slots. At _best_ the old behavior increases attacker costs by a single group (e.g. one distinct group to use to fill up all your inbound slots), but at worst it allows the attacker to select whole networks you wont connect to. This commit makes the nodes use only outbound links to exclude network groups for outbound connections. Fancier things could be done, like weaker exclusion for inbound groups... but simplicity is good and I dont believe more complexity is currently needed.
1545	* fix #1544 * Change send buffer default to 1M, as the send buffer is more often maxed now.
1543	The buttons at the bottom of the window are too small for the text they contain if the French locale is used, as discussed on issue #1062. This resizing seems to fix the problem, a screenshot showing the result follows: ![Desktop screenshot with the main and re-sized windows](http://ompldr.org/vZWtldQ/desktop_with_bitcoin.gif)
1542	I consider this a proposal to fix #1064 to not have the bad resize quality, when resizing the current splash screen image. I know we want to get rid of the splash screen in the future, but perhaps this is worth a quick discussion. I was not too sure about the license stuff, so perhaps you guys can help me out there :).
1540	
1539	"its state" should be "its state". No other changes.
1538	The first commit maintains a per-node byte count, returned as "recvbytes" and "sendbytes". The second commit maintains per-node, per-msg counters, returned as "recvmsgs" and "sendmsgs" objects. Example output:
1537	
1536	This code helps with reducing dust spam. The original code will make the transaction fee become the minimum fee if any output is less than a cent. This makes it costly to send dust spam, but theres an edge case. The attacker can send a transaction with 1000 outputs of one satoshi each. The transaction size is huge but the fee is only the base fee. This fix will increase the fee by the base fee amount for each output thats less than a cent.
1533	This is a change that will make it much easier to maintain alternative chains for which nValue is not a constant. Initially this will be used to implement some of the models found in Appendix B of the document below. Allowing this will enable tracking of more complexly defined financial assets.
1532	
1531	This pull request adds getpeerinfo, initially returning low-hanging fruit available inside each CNode. Once this initial form is OKd, additional commits will add per-message statistics similar to those seen in now-closed req #1510. Example output: ``` [ { "addr" : "64.27.57.122:8333", "services" : "1", "last_send" : "1340943593", "last_send_empty" : "1340943593", "last_recv" : "1340943593", "time_conn" : "1340943569", "version" : 60001, "subver" : "/Satoshi:0.6.3/", "inbound" : false, "time_release" : "0", "start_height" : 186712, "banscore" : 0 }, { "addr" : "178.152.104.61:8333", "services" : "1", "last_send" : "1340943593", "last_send_empty" : "1340943593", "last_recv" : "1340943592", "time_conn" : "1340943591", "version" : 40000, "subver" : "", "inbound" : false, "time_release" : "0", "start_height" : 186712, "banscore" : 0 } ] ```
1530	Fix a couple typos
1529	Segfault(s), build errors, and a locking issue.
1526	This builds on #1525 (the framework for smoothly rolling out new chain/transaction rules), defining "nVersion=2" blocks that include the block height as the first bytes of their coinbase. Putting the height in the coinbase is desired for at least two reasons: 1. It guarantees that every subsequent block and transaction hash is unique. 2. It can be used to better reason about plausible difficulty for not-yet-connected blocks. The format of the height is "serialized CScript" -- first byte is number of bytes in the number (will be 0x03 on main net for the next 300 or so years), following bytes are little-endian representation of the number. Only blocks with nVersion=2 are expected to have the height as the first bytes, and the "must have the height in the coinbase" rule is only enforced if nVersion=2 blocks are a super-majority (75% of last 1,000 blocks on main network) of the blocks immediate ancestors. This pull also contains a rule to REJECT nVersion=1 blocks once 95% of hashing power is producing nVersion=2 blocks. That means the last 5% of hashing power who refuse to upgrade will get orphaned. All of this wont affect users/merchants at all, they will happily accept nVersion=1 or nVersion=2 blocks. I tested this with a testnet-in-a-box setup, creating a 100-block-long nVersion=2 chain and then making sure that: 1. nVersion=1 blocks were accepted 2. nVersion=2 blocks that included the wrong block height were rejected (I hacked a bitcoind to test that).
1525	These are planning-ahead changes to make future upgrades smoother. See for full reasoning. The two changes in this pull are: 1. Treat transactions with a version number greater than 1 as non-standard (dont mine or relay them). 2. Warn the user (via the existing Qt/RPC GetWarnings() mechanism) if the blocks in the blockchain are a new version that this bitcoin doesnt understand.
1523	My last pull request was incomplete, so Ive reopened this one with, hopefully, all the necessary changes.
1520	That patch has been broken for a long, long time (forever?) and doesnt make sense.
1519	![new language selection](http://i50.tinypic.com/27x4j8g.jpg) The language and country names are displayed always in english, which seems to be a Qt limitation. Fixes: #1509
1518	![updated QRCodeDialog](http://i50.tinypic.com/2l8vggy.jpg) - remove unused #include <QDebug> and lblBTC label - update Bitcoin input field to a BitcoinAmountField to allow Bitcoin unit selection - use BitcoinUnits::format for the resulting amount parameter in the generated URI (always use BTC as per BIP21) - move MAX_URI_LENGTH and EXPORT_IMAGE_SIZE to guiconstants.h - add OptionsModel in AddressBookPage and use it in on_showQRCode_clicked() to pass it to QRCodeDialog - add OptionsModel in QRCodeDialog to enable display unit updates - add updateDisplayUnit() slot to be able to imediately update currently set bitcoin unit - make all labels in the UI-file plain text - resize dialog to match for an updated layout (fields are now stacked and new field) - remove unused parameters from private slots - only enable save button, when QR Code was generated - show message when entered amound is invalid - add read-only QPlainTextEdit field to output generated URI Fixes: #1506
1517	
1516	- add noui.cpp to SOURCES (to see / edit the file) - remove -silent when doing lrelease (to see possible warnings / errors) - re-word a comment and remove a space
1515	These thread names are visible in gdb when using info threads. Additionally both top and ps show these names *unless* told to display the command-line instead of task name.
1514	Passing linker-arguments when only compiling will cause warnings with Clang. This change fixes those. Specifically this addresses warnings like these: clang: warning: -Wl,-z,relro: linker input unused when -c is present clang: warning: -Wl,-z,now: linker input unused when -c is present clang: warning: argument unused during compilation: -pie
1512	This enables bundling multiple JSON-RPC requests within a single HTTP request, inside a JSON array. The response is a JSON array, containing one JSON-RPC response per input request. Specification: Testing notes: I have done a quick "it works" batch test with curl, as well as the usual RPC testing to make sure nothing broke. More elaborate testing is welcome.
1511	Output one message per getdata, not one message per inv entry.
1510	The returned data is 1. Per-message arrays. Index 0 is total number of $ThisType messages received since program start (or uint64 counter wrap). Index 1 is total byte count since program start (or uint64 counter wrap). They are returned as strings due to unfortunate JSON implementations in the field that do not handle unquoted uint64 numbers correctly. 2. Peer information. Returns number of inbound, outbound and total peers. Total peer count is equivalent to RPC getconnectioncount.
1508	The OptionsModel::data that set it has changed. Now its ```C++ case ProxyPort: { CService addrProxy; if (GetProxy(NET_IPV4, addrProxy)) return QVariant(addrProxy.GetPort()); else return 9050; } ``` GetPort() returns an unsigned short, that is upcasted by the QVariant (that doesnt directly support shorts)
1503	Bip16 and Bip30 had early activation dates for testnet, but with the reset they might as well use the same dates as the main network.
1502	This should enable remote services to have a full view of the network, either via getinfo/getblock or via this RPC call, getrawmempool.
1501	
1500	sizeof(const char*) == 4 or 8 (on "sane" processor architectures) :-), sizeof(const char[]) is what you want. As written the first substring was "04" and the second was "88c2" (on 32 bits architectures) And I have changed the +2 in +1 so that the comment is right.
1498	This pull request adds support for a [CJDNS](http://cjdns.info/) network type modeled after the existing support for tor and i2p networks. Using "-onlynet=cjdns" and relevant -externalip, -bind and -addnode, allows running a bitcoind that communicates over cjdns only. A cjdns/ip4 bridging node is running on fca5:372b:57be:78aa:e490:6b0f:da2a:c882 and can be used for testing. An example command for running a node that communicates over cjdns: ./bitcoind -onlynet=cjdns -addnode=fca5:372b:57be:78aa:e490:6b0f:da2a:c882 -bind=fc46:96cb:122a:4eff:fa50:24c4:2436:e564 -externalip=fc46:96cb:122a:4eff:fa50:24c4:2436:e564 The bind and externalip switches should be changed to your own cjdns address of course.
1497	Since the minimum signed integer cannot be represented as positive so long as its type is signed, and its not well-defined what happens if you make it unsigned before negating it, we instead increment the negative integer by 1, convert it, then increment the (now positive) unsigned integer by 1 to compensate recently introduced this potential-bug in #1298, so Id appreciate if he could comment (did not get a response on IRC)
1496	I dont have a C++ environment to test it, but Im quite sure it should be ==.
1495	- add EC_KEY_free() in CKey::Reset() when pkey != NULL - init pkey with NULL in CKey constructor Fix for #1474
1494	As an alternative to req #1493, this set of commits pushes the lock down into each RPC function itself. From there, locking may be improved on a case-by-case basis.
1493	Use with stop and help RPCs. This provides a facility to individually evaluate the locking for an RPC, and potentially make it more parallel.
1490	
1489	This [re]moves a lock and a direct mempool.mapTx access, by copying the TX memory pool contents into a temporary vector, for use when building a new block inside CreateNewBlock(). In addition to holding CTxMemPool::cs for a shorter amount of time, this makes it easier to parallelize CreateNewBlock() -- something already done in widely circulating miner-pool patches. The cost: memcopying the TX memory pool at each CreateNewBlock() invocation (each getwork / getmemorypool new-work request).
1488	It seems it wasnt ever used since 0.1.5.
1487	Added Headers to HTTPReply() Access-Control-Allow-Origin: Access-Control-Allow-Headers: Specify the origin with new command line option -rpcorigin defaults to localhost only. These headers are needed for make RPC requests from a browser. More info: Use cases are apps such as and a feature I would like to implement for
1486	Based on #1233 and #1405 (mostly just because I happened to be on that branch when I started and didnt feel like rebasing)... KCacheGrind screenshot of partial block downloads via -loadblock of just the block commit thread (the bottleneck) on tmpfs (note the highlighting of calls to SHA256): Before: After: (note that the single GetHash() on the block being committed goes from being 2.53% of the total cpu cycles to 5.2% of the total cpu cycles, calls to libcrypto.so.1.0.0 goes from 45.31% of cpu cycles to 14.52% and the total % of the commit block thread goes from 65.69% to 42.65%)
1485	As written if you make a new_size(10) the mruset will be reduced to up to 9 elements (the while will exit when !(queue.size() >= 10) so (queue.size() < 10). This "feature" of reducing the mruset length isnt used, so the impact on the program should be zero.
1484	These are confirmed working by numerous testers now on 10.5, 10.6, and 10.7, including being part of 0.5.6rc2 testing.
1483	This is kind of an addition to #1434 and fixes #1482.
1481	
1480	
1479	This harmonizes ``CWallet::GetImmatureBalance()`` with ``CWallet::GetBalance()`` and ``CWallet::GetUnconfirmedBalance()``.
1478	...a SIGNAL, when they changed
1477	The code which soft disabled address discovery/upnp when not listening was instead disabling it when listening.
1475	As no one responds in #1432, I decided to create a pull for further discussion! - add GetImmatureCredit() function in CWalletTx - include clientModel in overviewpage and sendcoinsdialog - rename model to walletModel in overviewpage and sendcoinsdialog - update displayed balances when numBlocksChanged() SIGNAL occurs (as an immature balance matures via new blocks and not new Tx) on overviewpage and sendcoinsdialog - optimize handling of cached balances in walletmodell
1471	This lists the capabilities of the remote node, in the form of a vector<string> list of commands advertised by remote node.
1470	This adds the "mempool" P2P command, which returns the first 50,000 entries in the TX memory pool (CInv vectors are capped at 50,000 already). SPV clients and other nodes may use this command following a block sync-up, to ensure they have the latest snapshot of the collective network.
1469	This pull merges the currently seperate dialogs for signing and verifying a message into a single tabbed dialog. (new) Features: - add UI-feedback via QValidatedLineEdit - copy button for generated signature was moved to the signature output field - add an addressbook button to verify message tab - input fields are now evenly ordered for sign and verify tabs - update FIRST_CLASS_MESSAGING support to ensure a good UX - add a button and context menu entry in addressbook for verify message (to be consistent with sign message) - focus is now only set/changed, when clearing input fields or adding an address via addressbook - re-work / update some strings - ensure model gets initialized in the SignVerifyMessageDialog constructor - add checks for a valid model to both addressbook buttons - remove unneeded includes for Qt GUI elements that are listed in ui_signverifymessagedialog.h anyway Todo: - generalize some functions, as some use nearly identical code for sign / verify See: ![tabbed sign- / verifymessage window](http://i47.tinypic.com/2qlzfb8.jpg)
1465	
1464	![SSL version in debug window](http://i50.tinypic.com/23j4qye.jpg)
1463	Former code sent 0 as nonce, which was serialized as 32-bit. Fixes #1455.
1461	On Linux/Mac the command-line options were printed to stderr when the button was pressed in the debug window, resulting in confusion. This is fixed in this commit by adding a separate method.
1459	The current order of menu options in the tray menu doesnt really match expected usage patterns, this commit changes it to more logical order. - Toggle show/hide first (unchanged) - Then, send/receive coins actions, which are the critical functionality of bitcoin - Then, sign/verify message - Then finally the options, and closing with the debug window
1458	Prior to this change, each TX typically generated 3+ debug messages, askfor tx 8644cc97480ba1537214 0 sending getdata: tx 8644cc97480ba1537214 askfor tx 8644cc97480ba1537214 1339640761000000 askfor tx 8644cc97480ba1537214 1339640881000000 CTxMemPool::accept() : accepted 8644cc9748 (poolsz 6857) After this change, there is only one message for each valid TX received CTxMemPool::accept() : accepted 22a73c5d8c (poolsz 42) and two messages for each orphan tx received ERROR: FetchInputs() : 673dc195aa mempool Tx prev not found 1e439346fc stored orphan tx 673dc195aa (mapsz 19) The -tracenet option, or its superset -debug, will restore the full debug output.
1456	Implement listunspent / getrawtx / createrawtx / signrawtx, to support creation and signing-on-multiple-device multisignature transactions. See for the test plan. See for the API design.
1453	Via gitian-downloader. Expects gitian-updater.exe to be available at $INSTDIR/gitian-updater/gitian-updater.exe and gpg2.exe at $INSTDIR/gitian-updater/GnuPG/gpg2.exe. Moves bitcoin to $INSTDIR/Bitcoin ie C:\Program Files\Bitcoin\Bitcoin\bitcoin-qt.exe gitian-updater.exe is distributed in binary form, built via cx_Freeze, meaning it depends on the security of python binaries from , cx_Freeze binaries from and pyyaml from . gpg2.exe is in binary form from . Also depends on
1451	- set autoDefault to false for the buttons that do not need this
1449	This is necessary as any strings have changed since last time. Also the python script used to extract bitcoinstrings.cpp, extract_strings_qt.py now sorts the strings before generating the output file. This results in more deterministic output and thus smaller diffs.
1448	- remove translation for fr_FR, which was removed on TX
1446	
1445	On Windows they are somehow shimmering, if they are autoDefault, which is not needed here.
1444	The option to open the debug logfile from the debug window was implemented only for windows. By using `QDesktopServices::openUrl` it now works on any platform.
1443	This contributed to an accidental send (#1384), and has no clear advantage, better to disable it.
1441	
1440	...not confuse users, which could see it before we init with the real wallet balance This was mentioned in IRC today, so lets just change it :).
1439	This pull is based on a discussion with and - introduce a new StartShutdown() function, which starts a thread with Shutdown() if no GUI is used and calls uiInterface.QueueShutdown() if a GUI is used - all direct uiInterface.QueueShutdown() calls are replaced with StartShutdown() - this ensures a clean GUI shutdown, even when catching a SIGTERM and allows the BitcoinGUI destructor to get called (which fixes a tray-icon issue and keeps the tray-icon until Bitcoin-Qt exits) The current implementation (current master branch) sometimes crashes Bitcoin-Qt (bad) and doesnt allow GUI object destructors do their work as we call exit() in Shutdown(), which leads to an unremoved tray-icon (as visible bug). Im sure we could remove some ``#include "ui_interface.h"`` in the modified files, but I was not really sure about that, so input is welcome. Fixes: #1182
1437	This is a redo of #986, but is based on Boost 1.49 which fixed the underlying issue (mostly). It also reverts 7b90edb5a6 to re-enable URI handling itself.
1435	
1434	- add the slot updateDisplayUnit() to overviewpage, sendcoinsdialog, sendcoinsentry and connect it to displayUnitChanged() - this ensures all fields in the GUI, who use a display unit are imediately updated, when the user changes this setting in the optionsdialog - ensure used fields init with the current set display unit This addresses / fixes #781 and #927.
1433	This needs a review and compilation test from a dev, but I want to ensure there is time to discuss it early! ![tabbed options page](http://i48.tinypic.com/2iw3yfb.jpg) - re-work optionsdialog to a tabbed UI based on an ui-file / extend network options with a SOCKS version selection - changing "Unit to show amounts in:" now also updates the unit used in the transaction fee box - string updates - link Apply button and OK button when enabling or disabling them (how good is a disabled Apply button, if OK saves too ^^) - use LookupNumeric() from netbase to verify proxy address (via an EventFilter) - allows IPv6 and fixes #821 - change proxy address field to QValidatedLineEdit and add visual feedback - add a status label used for displaying a message for invalid proxy addresses benefits: - much easier to expand, because it uses an UI-file, which can be edited via Qt Designer - IPv6 support for proxy address - SOCKS version selection The changes to optionsdialog.cpp/.h may look weird, but I designed it from scratch and only replace the current files, to keep the naming.
1431	
1429	This is based on #1408 and gives a preview of the goal of the rebase as a whole. It provides a CBlockStore class to store the block chain and allows CHub to call it and returns data to CHub. If it gets merged, CTxMemPool will be adapted to call CBlockStore functions to get info on previous transactions, and a CAlertStorage class will be added. I would prefer to not do callbacks from CBlockStore, but I found that cleaner than returning a list of blocks committed (as each call to EmitBlock can commit any number of blocks) through many of the block acceptance functions and back to CHub::EmitBlock, buf if that design is preferred, its not hard to do that. In general, though CBlockStore effectively turns several CHub functions into NOOPs, I prefer using a CHub as a convenience class so that CWallet/P2P client dont have to know something about CBlockStore and CTxMemPool and CAlertStore, but only needs to know one API. It also removes the need to duplicate much of the code to deal with callback threads in the storage classes. Obviously this does little actual abstraction, but just creates the class and moves functions from CBlock, if it gets merged, things like mapBlockIndex will get moved into CBlockStore.
1427	
1426	On Mon Aug 16 20:55:54 2010, Satoshi modified the client to display 20 bytes of the block hash (up from 16 bytes). This pull request increases the number of significant bytes by 5, and reduces the number of insignificant bytes (almost always zeros) by 10, resulting in saved space in debug.log and improved uniqueness of block hashes.
1424	Didnt compile.
1422	
1421	
1420	- to extend the functionality, but keep a simpler toggleHidden() for use in SLOT() macro As toggleHidden() has some functionality in, that is good for showNormalIfMinimized() I moved the code to it. I was not able to completely remove toggleHidden(), as SLOT(showNormalIfMinimized(true)) is not allowed. If someone knows how to use showNormalIfMinimized(true) in SLOT I can update this.
1418	This small glitch was introduced with #1389 and gets fixed with this pull. The options page needs a rework and it would be nice, if could open a small issue on Github, which explains what needs to be added there.
1417	When using Bitcoin-Qt dont call exit() in Shutdown(), to allow a clean exit for Bitcoin-Qt - this ensures the removal of the tray-icon (in BitcoinGUI destructor) after the core is shutdown. On Windows the tray-icon was still visible after a shutdown, which could lead to many orphan icons in the tray that only disappeared after hovering them with the mouse. This is now fixed.
1416	AvailableCoins() makes a vector of available outputs which is then passed to SelectCoinsMinConf(). This allows unit tests to test the coin selection algorithm without having the whole blockchain available. This is an updated (with changes made in #1017, but not Coin Control itself) and rebased form of #905.
1415	The text file is wrong on how to build without UPNP support, as shown below: $qmake USE_UPNP= Project MESSAGE: Building with UPNP support $ qmake USE_UPNP=- Project MESSAGE: Building without UPNP support
1413	
1412	- change "must wait" into "must mature" to take the new immature label into consideration - change "will be available in %n more blocks" into "matures in %n more block(s)" - remove ugly spaces from string
1411	* Updates package description to note that blockchain now takes 2+ GB instead of 150+ MB. * Stop creating DB_CONFIG with DB_LOG_AUTO_REMOVE as that is set in Bitcoin itself now. * Update changelog with 0.6.2 and the current updates.
1409	- Show address receiving the generation, and include it in the correct "account" - Multiple entries in listtransactions output if the coinbase has multiple outputs to us Goal: dont make service providers have to jump through near-impossible hoops to handle receiving generated payments/deposits (right now, only MtGox actually handles them correctly); this also makes things nicer for miners who receive to their own wallets (eg, they can tell which pool it came from)
1408	Due to several changes in master that would require rethinking decisions made in the second revision of CBlockStore (#771) and thus very large code changes to rebase, I decided it was better to redo and manually rebase and re-commit the parts that remain relevant, also decreasing the total size of the changes to just those required to get CHub working on master. Some of the more disturbing changes can be added later after merge. This is early in the process, but I thought Id get it in the queue and let people review the commits as they come in and give feedback, if they wish.
1406	was referencing wx fixed to the format of the other arg error reports
1405	I did this to see how much it would actually prune, but, as it pruned just over half of the CTxIndexs in blkindex.dat, I thought Id pull request it. It only prunes up to the latest checkpoint as there is no undoing pruning, so chain reorgs cant undo transactions that have CTxIns that were pruned. Note that the pruning process with -prune takes a _lot_ of time with -prune (an order of magnitude greater than loading chain on my tmpfs-backed system) and eats around 400MB of memory to load the needed information into memory. -autoprune is much less resource-intensive, but the checkpoint has to exist before the given block is downloaded, so users upgrading will not be effected unless they use -prune once. You can also run IBD with -autoprune to prune at each checkpoint.
1404	Tested so far by me, but more testing still to be done, as I know there are bugs with the re-asking code. Is it too early to open a pull request when I know its still needing more testing...?
1403	Executed ``lupdate -no-obsolete C:\Users\Diapolo\bitcoin\bitcoin-qt.pro`` on current Git master branch.
1399	Implement the following rules: * Interpret [X]:Y as host=X port=Y, if Y is an integer * Interpret X:Y as host=X port=Y, if Y is an integer and X contains no colon * Interpret X:Y as host=X:Y port=default otherwise
1398	If someone wants to shoot themselves in the foot by linking to 5.0 or whatever, make them clear BDB_LIB_SUFFIX manually.
1396	Useful for developers who need to refer to futher back in debug.log history, but who dont want to enable the -debug option and all the verbosity that comes with that.
1395	...e block in the chain. doh.... Im half aslweep still...
1394	corrected 1.0.1b to 1.0.1d
1393	**Status: Tested and seems to work** 1. Guarantee listtransactions order consistency by storing a position for each entry 2. Add "blocktime" and (for wallet transactions) "timereceived" to transaction Objects 3. Implement "smart" times according to the following logic: - If sending a transaction, assign its timestamp to the current time. - If receiving a transaction outside a block, assign its timestamp to the current time. - If receiving a block with a future timestamp, assign all its (not already known) transactions timestamps to the current time. - If receiving a block with a past timestamp, before the most recent known transaction (that we care about), assign all its (not already known) transactions timestamps to the same timestamp as that most-recent-known transaction. - If receiving a block with a past timestamp, but after the most recent known transaction, assign all its (not already known) transactions timestamps to the block time. This supercedes #1159. Discussion:
1392	Changes: + New genesis block + Checkpoint at block 546 + Blocks <546 contain lots of interesting test cases (blockchain uploaded to ) + testnet IRC channel for bootstrapping changed to #bitcoinTEST3 + testnet database subdirectory changed to testnet3/ Ill try to keep a couple of listening nodes running to serve up the new blockchain, and will switch over the testnet faucet when this is pulled.
1389	Rework network config settings according to the specification in The network base does no longer call GetArg directly. Instead, everything happens through a few globals and the SetProxy/SetNameProxy methods. These are called in init.cpp:AppInit2, and in Bitcoin-Qts optionsmodel.cpp.
1388	- add a variable re-use instead of double-calling vNodes.size() Put simple bool checks before function calls.
1387	
1386	These RPCs manipulate a set of named lists, each of which matches zero or more bitcoin addresses. If a match is found in the TX memory pool, the command specified by arg -filtertx (or -filter, if missing) is executed. If a match is found in a newly [re-]accepted block (SetBestChain), the command specified by arg -filterblock (or -filter, if missing) is executed. The following command string substituations are performed, before the notification command is executed: %t "tx" or "block" %h hex string of 256-bit block hash or tx hash
1383	This RPC assumes that you Know What You Are Doing. It will * reject any TX that fails validation, rather than adding to mapOrphanTransactions * not detect or process dependent orphans This should not present a problem to anybody who is creating well formed transactions with connect-able inputs.
1382	...eer thats lagging behind. This ideally shouldnt happen, but it can and does sometimes, so this code caters for that. This code also becomes more important if the block download algorithm is changed in future (e.g. pull #1326, which is still in development), e.g. if and retries are sent to other peers when peers seem unresponsive, only to become responsive again later, by which time they are sending duplicate blocks. Obviously the unresponsive peers could be disconnected when deemed unresponsive, but my tests have shown its more efficient to give them a chance to become responsive again, (even though it does increase the chances of them sending duplicate blocks), and disconnecting them at that point. Future patches could identify the duplicate blocks before they are downloaded, by the block size (looking up against blocks recently downloaded and against blocks requested from the peer sending the block). Ideally theyd be identified by something more specific than the block size, but currently block headers communicate only the size.
1381	Any problems seen during deserialization will throw an uncaught exception, crashing the entire bitcoin process. Properly return an error instead, so that we may at least log the error and gracefully shutdown other portions of the app.
1380	More than doubles the speed of verifying already-cached signatures that use compressed pubkeys: Before: ~200 microseconds After: ~80 microseconds (no caching at all: ~3,300 microseconds per signature) Thanks to for suggesting
1379	Dock icon on macosx already has show/hide functionality. This results in erratic behavior. Fixes #1327.
1378	
1377	This change adds timing information for ProcessBlock and AcceptBlock, using the currently existing "ACCEPTED" line, but with timing infomation added. Also, as a nicety, once the block chain has caught up, some an additional line is shown providing feedback on what bitcoind is doing (i.e. when validating a block).
1376	This pull request is a subset of pull #1311. This change adds the command line option "-logtxpeer", which when chosen, will cause the peer to be reported for every transaction received, including invalid transactions. As this is useful only for debugging, and not needed for general use of bitcoin, the option is not displayed in the syntax output, but only found when browsing the code.
1375	I originally raised pull #1311 with this, but that was too big and contained too many changes. Pull #1338 followed, but still had some changes which were contentious. This pull contains just the addition of displaying the peer of DoS(100) transactions, and pull #1338 has had that part removed.
1374	Update the License Headers to refer to the file COPYING instead of license.txt
1372	Attempts to resolve #1371
1370	- make ClientModel::formatClientStartupTime() return a QString Note: Logged time in debug.log differs by a few seconds from the one displayed in the Debug window because of different initialisation times.
1369	This reorders AppInit2 into 10 sections: 1) basic setup (OS stuff, signal handlers) 2) parameter interactions (softset) 3) interpreting options without side effects (just setting internal variables) 4) application initialization (datadir lock, daemonize, pidfile, log file) 5) network initialization (network params, proxy, binding) 6) load blockchain 7) load wallet 8) import blocks (-loadblock=) 9) load peers 10) start node/rpc threads 11) finished This means invalid configurations will be detected as soon as possible (in particular, before loading the block chain).
1368	- change verifymessagepage behaviour to match RPC-call "verifymessage" (input address, signature and message) - remove "copy to clipboard" button as that is unneeded now - re-positioned the status label - display (error / info) messages in status label (remove message boxes) - resize window to make signature fully readable - change signature font to BC-address font (like in messagepage) - remove checkAddress() and place code directly in on_verifyMessage_clicked() - add visual feedback to LineEdits - remove AddressTableModel references - add addr.GetKeyID(keyID) check This addresses #1356.
1367	Satoshis commits fdbf76d4f49c220e2ed4412a3d8d8cd6efd74826 and c8ad9b8375f5308bb46a124f096a80926ea42fba (SVN import) removed the DB_PRIVATE flag from the environment. In part, this enables processes other than bitcoind to examine the active database environment. However, this incurs a slight performance penalty versus working entirely within application memory (DB_PRIVATE). Because bitcointools and other direct-BDB-accessing tools are not used by the vast majority of users, prefer to default with DB_PRIVATE with the option of disabling it if needed via -privdb=0.
1366	Uses `bitcoind --help` to determine available options and `bitcoind help` to determine available commands. Currently placed in contrib/debian/bitcoind.bash-completion, so it can be picked up automatically by the Debian package building process.
1365	
1364	- move class HelpMessageBox to guiutil.cpp/.h - add button to show Bitcoin options (in RPC Console -> Information) - resize Debug window a little to allow for a non-breaking display of the welcome message with non-english translation - use 50 nonbreaking spaces (up from 40) on Windows to widen the HelpMessage Box for better readability
1363	Gavin suggested to remove strncasecmp() + strnicmp() usage instead of fixing strnicmp() to _strnicmp() and this is what this pull does. - remove strncasecmp() + strnicmp() calls and replace that code via boost::algorithm::istarts_with() - do not call ipcInit() on Mac and Windows as this is unneeded currently
1362	
1360	* This is safer than DB_TXN_NOSYNC, and does not appear to impact performance. * Applying this to the dbenv is necessary to avoid many fdatasync(2) calls on db 5.x * We carefully and thoroughly flush databases upon shutdown and other important events already.
1359	Superceding #1017 since isnt rebasing it anymore. Also sanitized JSON-RPC changes and did some other cleanup. (#1416 has the coin selection refactoring)
1358	
1357	This introduces internal types: * CPubKey: encapsulated a public key * CKeyID: reference (hash160) of a key * CScriptID: reference (hash160) of a script * CTxDestination: a boost::variant of the former two CBitcoinAddress is retrofitted to be a Base58 encoding of a CTxDestination. This allows all internal code to only use the internal types, and only have RPC and GUI depend on the base58 code. Furthermore, the header dependencies are a lot saner now. base58.h is at the top (right below rpc and gui) instead of at the bottom. For the rest: wallet -> script -> keystore -> key. Only keystore still requires a forward declaration of CScript. Solving that would require splitting script into two layers.
1355	Built on top of #936, this adds support for getblocktemplate longpolling to bitcoind.
1354	I originally created a pull to replace the "COPYING" in crypter.cpp and crypter.h, but it turned out that COPYING was actually the correct file.
1353	- add a missing comment in rpcconsole.h
1352	- add GetClientStartupTime() to util.cpp/.h, which returns a static const int64 from util.cpp - change indentation in getininfo() function, to match all lines (better readability) - remove some spaces in comments Perhaps it makes sense to place it somewhere else in the getinfo, but I didnt want to break things that perhaps rely on the current ordering.
1351	This does things better than the first commit, which had a bug and placed ``define strncasecmp _strnicmp`` in an ``#ifndef WIN32`` in init.cpp. Sorry for this.
1350	RPC getblockcount should be used instead.
1349	These 6 commits: 1. Implement an ECDSA signature cache, which should cut the amount of CPU time spent verifying signatures in half (because transaction signatures are verified before going into the memory pool and then again when the block is accepted). Please review that commit very carefully, since it is the very heart of transaction security. 2. Implement several "belt and suspenders" changes to prevent possible denial-of-service attacks involving sending orphan transactions (suggested by Sergio Demian Lerner) or transactions with lots of inputs. Tested by: - writing new unit tests, and stepping through the code in the debugger while running the new tests - running the new code under valgrind for more than 24 hours on the main network
1348	
1347	Without this change, mappings will be created even after AlreadyHave equals true, and will never be erased. A small fix, probably would never have caused a problem, other than filling unbounded and potentially using up more memory than needed. Might be quite significant is bitcoind is left running for a long period of time.
1346	Fix some layout weirdness introduced in #1314. Also, change "(out of sync)" to only red, instead of red and bold, which a bit more subtle for a warning.
1345	- the #ifdef WIN32 parts were moved to the top of the files as this is a place everyone looks from time to time - add missing "#define strncasecmp _strnicmp" in init.cpp - removes an unintentional add line break added by sipa ^^ (https://github.com/bitcoin/bitcoin/commit/ac7c7ab99aeee4aeea333d720c5a211a443a366d#L0R126) See for reference on _strnicmp.
1344	Will show a human readable time that the getdata will be triggered. Easier to follow. Might even be better to show this when debugging also...?
1343	subject says it all really...
1342	Change to a positive number, to indicate a past event, and save a few bytes in debug.log!
1341	Also, reduces confusion when combined with future pull requests. This is a small change, and possibly seems petty, but its useful for two reasons: 1) Principle of least surprise. Waiting can end (and does in the code), but Already Asked for requires a past event thats happened to unhappen. This is confusing. 2) Later code (which I am hoping gets pulled when finished, such as #1326) uses variables that make sense, and makes the code simpler to understand when used with this renamed mapping. 3) probably other reasons....
1340	Report how long DBFlush() takes. Tested for over 6 weeks.
1339	IRC got who! IRC got who! IRC got who! yes yes.. we know... shushed.
1338	This is a subset of pull #1311, but just the part that adds more info on txs which have issues with them. For really naughty txs, that DoS(100) it also reveals the peer that sent it, otherwise peer information is not revealed. (although there will be a pull request coming shortly providing a command line flag should peer information for all txs be desired). Also, free transactions are identifies in the output. Not particularly useful, but these may become a rare thing in the not too distant future.. maybe, maybe not. Apologies for the txnode variable. The only other way was to change all the functions to allow it to be passed. I think this is the neatest and least intrusive way, and cant see any harm in it, but please correct me if Im wrong here.
1337	This pull is a subset of pull #1311, which many said was too big, and did too many things. It wasnt easy to break it up into smaller pieces as so many are interdependent. Anyway, here goes. Comments welcome. This pull adds a command line argument "-quietinitial", which is intended to make the "traffic" in debug.log less so that the block download progress can be more easily seen. Its off by default, and without using it, things look the same as usual. I realise that some of what this does can be achieved with 3rd party log file filterers, but some of it cant, and its mostly developers that use such 3rd party tools, and Id like to help enable bitcoin to be useful to less technical people too. This sub-pull, IMHO, isnt as useful unless combined with some of the other pull requests Ive raised (and am still raising, due to hacking #1311 into smaller pieces). I suspect the others will need rebasing depending on what order the pulls are effected. ho hum..! Heh... #1337 is a cool pull number :) Not sure this one deserves such a number though! Anyway, comments welcomed - I need to get a better idea of what makes a good pull or not.
1336	Does what it says on the tin
1335	Im not sure how come Im the only person who seems to need this line, but Im currently unable to submit pulls without this entry, so rather than have it in every pull request, heres a separate one to hit the nail on the head. If theres a way to untrack the build directory without adding it to .gitignore, please NACK this and let me know! Thanks!
1334	Less misleading... This pull is a subset of #1311
1333	genbuild.sh will not run when used on filesystems without the execute flag for files. This is the only thing so far which causes make to fail in this situation, so an easy fix to restore functionality.
1332	Win32 specific patch.
1331	Trivial one character typo fix in documentation.
1330	Update header licenses in crypter.cpp and crypter.h
1329	- Fixes issues with copy/pasting from web or html emails (#1325)
1328	This patch fixes compilation on Mac OS X since the CSemaphore on Mac OS X uses the Sleep() function in the sync.h file.
1326	Builds upon pull #1271, which fixes Issue #1234. This allows multiple peers to provide blocks, not just one. Up to 8 peers can provide blocks in parallel, thereby increasing block download speed by up to 8. Submitted for comments. I think ideally Ill add some more code to cater for stuck downloads, so it can give up and move onto another peer. Currently, itll only move onto another peer if the selected peer disconnects. It a peer took a long time to disconnect, then all blocks downloaded would be orphans until the missing block was eventually downloaded. Also, the "8" concurrent downloads is hard-coded, would people prefer this to be a configurable command-line option?
1324	Fixes translating HelpMessageBox strings. Fixes #1322
1323	- allow translation of "options" used in the --help message - split translation of RPC console welcome message and remove the need to take care of HTML-br - remove some spaces in strings - misc other small stuff related to translations I know no one loves these pulls, but e.g. unneeded spaces are really ugly on Transifex and can irritate translators as can HTML-code. Guess most of my work on translations is done very soon!
1322	... HelpMessageBox class, as tr() does not work that early in the code I was wondering, why for example the translation for "Usage:" did not work, althoug it was in the (in my example) de language file. I found out that using the _() function does its job and so I added 2 new functions in init.cpp to be able to get the strings translated and the translations used. This needs an additional bitcoinstrings.cpp update!
1321	Like #1318 but also update strings from core
1319	This pully is only intended to add the new languages into the system and not to update ALL translations. Please announce or tell me intended release dates for new official client versions, so I can pull translation updates!
1318	Trying to keep up the short intervals as there are still many changes!
1316	see $subject
1315	Immediately issue a "getblocks", instead of a "getdata" (which will trigger the relevant "inv" to be sent anyway), and only do so when the previous set of invs led us into a known and attached part of the block tree. This patch has been tested on a (constructed) blockchain that was effectively stuck.
1314	- cleanup overviewpage XML ui-file - addresses: #1236
1311	This change improves debug.log output in the following ways:- It reduces some duplicate output, and no longer needed output (which was originally added for testing). It reduces the verbosity of output during initial block download, so rather than showing every block requested, it summarises. Once caught up, the previously level of verbosity is restored. Information about the nodes connected are shown, and additional information about errors (particularly rejected transactions) are shown, with the offending peer alongside. Recent changes which add many lines, such as address handling have been kept in as this code is still relatively new - I was tempted to comment out various lines such as the "tried...", etc. Timestamps is now enabled by default. -nologtimestamps or logtimestamps=0 will disable this. Also, renamed AlreadyAskedFor to AlreadyWaitingFor (makes more sense, as can cease waiting, but cannot stop having done a past thing.)
1308	- move placeholderTexts from XML to source to avoid a problem with Qt < 4.7 - add eventFilter for address field to select text when clicking in - add Clear All button - rework strings - use QPushButtons instead of QDialogButtonBox - use same layout as in messagepage.h for verifymessagedialog.h It would be nice to discuss the strings once more, before we update the translation master file to not again get strings translated, that are not "final". I really love that GUI feature and want to thank sje397 for his great work, which I only try to improve a little :).
1307	I observed this today and thought why does the debug.log open twice. It seems that my naming with on_openDebugLogfileButton_clicked() is somehow internally used by Qt. So we had a connect() which uses on_openDebugLogfileButton_clicked() on clicked() and the internal stuff, which resulted in that strange behaviour. After renaming the function to on_openDebugLogfileBtn_clicked() the debug.log opens only once, as intended. I stumpled upon this as on_lineEdit_returnPressed() is used in no connect and only the function declaration and definition exists.
1306	This is an option I use regularly, as I find that sometimes things work more reliably through tor, and at other times directly. This option allows my peers to use both, thereby improving overall connectivity.
1305	Useful for debugging bitcoin dealing with signals and exiting. Adds a line to debug.log when signal received.
1304	Adds the block timestamp to the debug.log output. Can be useful when catching up and viewing the progress in debug.log to see how far behind on the blockchain the node is. Can also be interesting to see the duration between blocks, and sometimes even seeing the odd block that has timestamps earlier than previous blocks - which could indicate whether the network is attempting to be manipulated. This pull is a subset of pull #1311
1303	1) block hash -> CBlockIndex becomes "blkhash.dat", DB_HASH 2) tx hash -> CTxIndex becomes "txhash.dat", DB_HASH 3) remainder is renamed to CMetaDB, "blkmeta.dat" OBSOLETES: #1282
1302	- Use strprintf or vstrprintf instead of snprintf
1301	Ensures that the command and reply is visible. My take on #1297, but scrolls to the end after the user executed a command instead of when something is appended, which is more natural to me and prevents annoyances without having to special-case message types. (By setting the scrollbar to the end, this re-enables auto-scrolling in the widget itself)
1300	If Reorganize() fails, then its caller, CBlock::SetBestChain(), will call TxnAbort(). Redundant TxnAbort() calls are harmless. The second will return an error return value, with no other side effects. TxnAbort() return values are generally never checked. The impact is nil.
1299	
1298	This pull request has fixes to prevent bit shifting signed integers to the left, onto and past the sign bit. While this currently does not cause problems, it is undefined behavior in C++11 and could cause problems in the future (i.e. so-called time bombs). Bitcoin in particular should be extra careful about these problems.
1297	
1296	- remove 2 ugly spacess from a message string
1295	Checking TxnCommit() return value is obviously needed. Checking TxnBegin() return value is important too; failing to start a transaction could occur for any number of reasons.
1293	Cleans up and organizes several scattered functions and variables related to the BDB env. Class CDBInit() existed to provide a guaranteed-via-C++-destructor cleanup of the db environment. A formal CDBEnv class provides all of this inside a single wrapper. NOTES: 1) Other db.cpp-related operations might be candidates for CDBEnv inclusion. This current commit was chosen as a good starting point, only encapsulating clearly-dbenv-related items. 2) Further wrappers may easily encapsulate remaining direct bitdb.dbenv accesses, though it hardly seems worth it. 3) CDBEnv is a starting point for easy cross-database transactions. BDB supports this, but bitcoin codebase hardcodes txn<->database association into CDB.
1292	Luke noticed there was a boost/thread/* set of synchronisation primitives, separate from those in boost/interprocess/sync/*. Given that they do not need to cope with locks being in shared memory, they are different and simpler on some systems. This commit replaces all sync.{h,cpp} infrastructure by systems provided by boost/thread/*. So far, it seems to work well on Linux, OSX and BSD (the latter two required a workaround before, as the interprocess semaphores and condition variables used spinlocks - it seems the thread ones dont).
1291	
1289	...date strings to use "Qt" (and not qt or QT) - update initialisation of notificator to use qApp->applicationName() instead of a static string See #1276 for informations!
1288	
1287	Closes #1280.
1286	I originally intended to just not implement IPv6 (and other networks) at all for IRC, but its trivial and probably useful for testnet.
1285	* Add InitError() and InitWarning() functions to init.cpp * Make all error reporting happen through those * Add and improve argument checks + error messages
1284	- Solves #1278, attempts to address #1049 - Removes \ts from help message that are removed afterwards anyway - Moves UI-specific command-line options help to UI code - Moves `-detachdb` help entry out of `#ifdef USE_UPNP`
1283	As it says on the tin. Seems there is a mysterious issue on Qt 4.6.2.
1282	blkindex.dat stores all kinds of data, and as such, each key is overloaded to form a namespace. All keys beginning with "blockindex" form the hash->CBlockIndex data that is loaded into mapBlockIndex. This change moves mapBlockIndex data to its own database, custom tailored for the sort of data we wish to store: - BDB type changed from btree to hash - key is uint256 hash, with no prefixes Usage is cleaner, and uses slightly less CPU and disk space than the previous solution. COMPATIBILITY STATUS: A new block chain must be downloaded, or at least reindexed. As such, may want to delay this change, if other major database changes are planned. MERGE STATUS: Ready for review and comment, but not ready for immediate upstreaming.
1281	Even with the GetDataDir() cached system, a function call is overkill for the vast majority of uses in the code. The values are static once the program is initialized, so initialize pathDataDir once. GetDataDir() is renamed to GetPrepDataDir() to better indicate that it has side effects. Curious to see whether people think this is worth merging or not. I think it cleans up the code, and is ever so slightly more CPU efficient for most use cases.
1277	
1275	...such is a silly translation less to do :)
1274	- set minimum size for height allowed by Qt Creator
1272	
1271	Fixes Issue #1234 - re-issues getblocks to the next suitable peer when the previously selected one disappears. edit@laanwj: clarified title, was "issue1234"
1270	Currently, when a transaction item is clicked on the overview page it jumps to the history page. This pull request extends this behavior to focus and select the clicked transaction.
1269	Convert RPC console to QTextEdit instead of QTableView * This allows copy/pasting whole or partial messages * Handle output more consistently in console * No more scrollbars-in-scrollbars: by setting per-pixel scrolling on the table, cells can have any height * Decorations for "request" and "reply" are changed to the txin and txout icons instead of colored squares
1268	...hout an ugly line-break
1267	
1266	
1265	- Generate *.qm only when needed (when underlying ts changed, and when qmake is run), this avoids a long qrc compile and link step every time - Generate build.h every time, but only trigger link when it changed (like makefile.unix)
1264	
1263	- add the client startup time to the debug window - rename Version label to Client, which is better suiting now - add IBeamCursor for selectable text on the information page - make ">" sign on RPC page untranslatable - re-order XML-file tags to match real GUI element order I know the .ui looks messed up in the diff, but please try it or load a copy in the Qt designer and youll see its fine (if I have no other bugs in ^^)
1262	- ensure that no double timestamps show up in the debug.log, by removing manual timestamps from the source (now only -logtimestamps parameter adds timestamps to debug.log)
1261	Support CSV export of address book / transaction if there are labels with " in them. Solves a TODO:.
1260	(depends on #1252) I think the various wrappers and utility code around synchronization mechanisms warrant a separate source file.
1259	- change global setWindowIcon() calls to qApp->setWindowIcon() as all parent windows will then use this set icon
1258	...instead of 0, which can not ever be true
1257	- fix for: guiutil.h: In constructor GUIUtil::ToolTipToRichTextFilter::ToolTipToRichTextFilter(int, QObject*): guiutil.h:90: warning: GUIUtil::ToolTipToRichTextFilter::size_threshold will be initialized after [-Wreorder] guiutil.cpp:252: warning: base QObject [-Wreorder] guiutil.cpp:251: warning: when initialized here [-Wreorder] - make constructor for ToolTipToRichTextFilter explicit
1255	The preprocessor magic in version.cpp require CLIENT_VERSION_* to be macros, as they are stringified into CLIENT_DESC when no git-describe output is available.
1254	Previously, a single TX would trigger two log lines in quick succession, addUnchecked(): size 152 CTxMemPool::accept() : accepted c4cfdd48b7 After this change, only one log line is used: CTxMemPool::accept() : accepted 98885e65db (poolsz 26)
1252	* Use semaphores instead of condition variables for limiting outgoing connections * Cleanup handling of outgoing connections * Use polling implementation of semaphores on OSX, as boosts semaphores seem to spinlock.
1251	...derText to the XML file (after this all parts in the code that use setPlaceholderText have this comment
1250	- rename "Start Bitcoin on window system startup" to "Start Bitcoin on system login" and move it to Main - hide "Window" Options on Mac as there are currently none available - remove an unused variable (BitcoinAmountField from NetworkingOptions) - add Alt-Shortcuts where they were missing - allow translation of "default" used in language selection This is partly based on a discussion in #1248, which can be closed after this gets accepted!
1247	This adds code to open (display) the debug.log on Windows with the associated application and adds an entry under help in the main menu. I used #ifdef WIN32 to make this active for Windows only! addresses #1244
1246	CreateNewBlock: Check that the produced CBlock is acceptable (except for proof-of-work and merkletree, since those need to be provided later) This throws an exception from CreateNewBlock otherwise, which is not safe without #1245!
1245	Without this, the following bugs are possible: 1) NULL pointer dereference - CreateNewBlock returns NULL (out of memory); pblock is left NULL and JSON error thrown - Next call sees pindexPrev/nTransactionsUpdatedLast/nStart up to date, so skips over making a new one - This next call then tries to update the time on the "current" pblock (NULL) 2) Deleted object dereference - CreateNewBlock throws an exception (not sure if this is possible right now); pblock is left with a pointer to a deleted CBlock - Next call sees pindexPrev/nTransactionsUpdatedLast/nStart up to date, so skips over making a new one - This next call then tried to update the time on the current pblock (which is deleted) - Consequences of this memory corruption are undefined!
1243	Fixes #1241
1240	- Transaction fees for children might help the parent transaction get confirmed - Transaction fees can boost the priority of transactions included
1239	- show testnet icon for tray-menu option Show/Hide - set tooltip for trayicon to match non-testnet text (just [testnet] added) "Bitcoin client [testnet]" - remove obsolete title_testnet variable
1238	- add Debug window to tray-menu - switch sendCoinsAction and receiveCoinsAction in tray to match button ordering in the client window A nice thing would be some kind of icon / symbol for the Debug window, but Im not able to do this graphic-wise.
1237	
1235	I would like to do this now regularly, to make our translations faster and better! That file is generated via: "lupdate -no-obsolete bitcoin\bitcoin-qt.pro"
1233	This is based on cblockstore and commits blocks in a separate thread from downloading/initial checking (in CheckBlock). It offers a nice performance gain over cblockstore alone. * pfrom->Misbehaving is now called in a callback instead of after EmitBlock as nDoS is not known until the block is committed. This could give us a bit more work to do from a bad nodes blocks, but should be pretty safe as the buffer is limited to 20 blocks by default (-blockbuffersize). * A setBlocksSeen is added which holds a set of blocks which have passed basic DOS checks (CheckBlock and the minwork computations), ie is the list of orphans + accepted blocks. This allows us to avoid cs_main locking when doing the duplicate detection in the initial checking * FinishEmitBlock callbacks are done in series and, therefore, CBlockStore had to be changed to allow for InOrder callback threads. Though FinishEmitBlock callbacks could be called out of order, this would result in a significant number of "orphan" blocks being committed before being merged into the main block tree, which is pretty ugly and inefficiency. * GetLastCheckpoint now returns a cached value instead of scanning mapBlockIndex each time. This is primarily to avoid a cs_main lock in the initial checking, but is also a micro-optimization.
1232	Cant lock twice.
1230	* Use -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameters * Remove xCXXFLAGS usage in makefile.unix * Fix several recent and older sign-compare warnings
1226	Extracted this from another unloved pull, to get this merged :).
1225	See for the discussion about this!
1221	See: This wont break any translations, as we had a correct and an ugly translations in for quite some time. This is a cosmetic fix that breaks nothing!
1220	The options dialog crammed too many items into the main page. This pull request organizes the options into four pages which are clearly different categories: Main, Network, Window and Display. It also adds an option to change the language.
1219	
1216	Fedora build instructions, as required at
1215	- Add all actions that can be triggered with buttons to the context menu - Hide delete action from context menu for receiving tab - "Copy Address" instead of the vague, longwinded "Copy to Clipboard"
1214	
1212	- remove ability to translate "0 BTC" and "123.456 BTC" as this is only used as preview in the Qt Designer anyway - set mouse cursor to IBeam for selectable labels
1211	- use it in context / main menus, but not on buttons - update some strings to be clearer / more informative
1209	Prevents it from seeming to hang during shutdown if shutdown is triggered while the window is open.
1208	...s used when there are MAX_OUTBOUND_CONNECTIONS connections. Also MAX_OUTBOUND_CONNECTIONS is no longer static. This had to be done so that it could be made extern for reading in bitcoingui.cpp, though this hopefully will not hurt anything else.
1207	A function returned the element to remove from a bucket, instead of its position in that bucket. This function was only called when a tried bucket overflowed, which only happens after many outgoing connections have been made. Closes: #1065, #1156
1206	- change dialog title to "Passphrase Dialog as thats better for distinction on Transifex - remove style-sheet for bold font and use default Qt Designer option for bold - remove capsLabel default text -> results in removal of a clear() in the source I tried to move the string, which is displayed when Caps Lock is active into the .ui file and use setVisible(true / false), but that resulted in layout jumping / small layout movements, which were rather ugly!
1205	Gets rid of `MainFrameRepaint` in favor of specific update functions that tell the UI exactly what changed. - This improves the efficiency of various handlers (no unnecessary balance recalculations). - Also fixes the problem with mined transactions not showing up until restart. - As this finally makes it possible for the UI to know when a new alert arrived, it can be shown as OS notification. - New addresses are selected again in address book (was a regression in 0.6.1) The following notifications were added: - `NotifyBlocksChanged`: Block chain changed - `NotifyKeyStoreStatusChanged`: Wallet status (encrypted, locked) changed. - `NotifyAddressBookChanged`: Address book entry changed. - `NotifyTransactionChanged`: Wallet transaction added, removed or updated. - `NotifyNumConnectionsChanged`: Number of connections changed. - `NotifyAlertChanged`: New, updated or cancelled alert. These notifications could also be useful for RPC clients. However, currently, they are ignored in bitcoind. Also brings back polling with timer for numBlocks in ClientModel. This value updates so frequently during initial download that the number of signals clogs the UI thread and causes heavy CPU usage. And after initial block download, the value changes so rarely that a delay of half a second until the UI updates is unnoticable. **Second commit converts UI interface to boost::signals**: - Core no longer links to any UI functions directly, but the UI subscribes to notifications through boost::signals. - Signals now go directly from the core to WalletModel/ClientModel. - WalletModel subscribes to signals on CWallet: Prepares for multi-wallet support, by no longer assuming an implicit global wallet. - Gets rid of noui.cpp, the few lines that were left are merged into init.cpp - Rename wxXXX message flags to MF_XXX, to make them UI indifferent. - ThreadSafeMessageBox converted to void, no longer returns the value `4` which was never used
1204	- set focus to address field on opening messagepage or "Clear All" - consolidate BitcoinGUI::gotoMessagePage() functions into a single one - rename window title to "Sign Message Dialog" If you directly open the message page via clicking Sign Message and passing an address, the focus is in the message input field, as intended. If you simply open the message page via menu, focus is set to the address field.
1203	As this makes things easier on transifex, as currently we have 2x only "Dialog" to translate there. - changed window size to the minimum values Qt Creator allows me to set
1202	- add an Alt-Shortcut to "Clear &all"
1201	+ removed an an unused XML-tag
1200	also, move it to rec/icons instead of res/images
1199	This is the behavior I expect (but miss) every time I use this functionality.
1198	CAddrMan is the new address storage manager, and it already knows how to read/write its own serialized data. Therefore, we may treat it like the block file and implement WriteToDisk() and ReadFromDisk() similarly. This eliminates the need for the BDB-managed addr.dat, replacing it with "peers.dat" containing nothing but a flat file storing addrman data (and a header and checksum).
1197	
1196	Pull request #948 introduced a fix for nodes stuck on a long side branch of the main chain. The fix was non-functional however, as the additional getdata request was created in a first step of processing, but dropped in a second step as it was considered redundant. This commits fixes it by sending the request directly.
1194	This is much easier to dont set it in the code, but use the Qt Designer (XML).
1193	This is a matter of taste, but IMO this looks less cluttered and more modern. Before ![Before](http://i50.tinypic.com/2eckyl4.png) After ![After](http://i48.tinypic.com/2r761le.png) Also: - Add all actions that can be triggered with buttons to the context menu - Hide delete action from context menu for receiving tab - Move attributes that can be set in .ui file - Shorten "Copy to Clipboard" on button to simply "Copy Address". Shorter and more clear.
1189	Tested on testnet and works as expected (fixes #952), if I send coins and update or set a label for an address it gets updated in the address list, which it did not before.
1188	
1187	We already require XP, this just fixes Mingw64 build.
1180	These commits should clean up the last of the signed comparison warnings. Id say we can turn on -Wall now.
1179	
1178	...as this is the logical place for them. can you test whether this still builds on windows? Im not sure what includes are needed for CoCreateInstance / GetModuleFileName.
1177	SecureString was moved to allocators.h in commit 6cb6d623479c5dd42d91de7a4d391078d0800e54
1176	
1175	This is not intended to fix a bug, but code is a little smoother and easier to understand for devs working with that part of the code.
1174	(extends #1141 (proxy improvements) and #1021 (ipv6 support) Adds support for running as and connecting to Tor hidden services. *.onion addresses are mapped into the IPv6 range in the same way as OnionCat does. See doc/Tor.txt for more information.
1173	
1172	
1171	
1170	This commit changes no code, and makes no other cleanups than removing the trailing whitespace from source code and comment lines. Script used:
1166	This needs a review from as I simply tried to figure out what I needed to add via some copy & paste from the source and trial and error. I hope Im on track tough. This addresses #943!
1163	Too much work was being done on a simple MainFrameRepaint signal. Fixes #1154.
1160	
1159	Instead of rescan time.
1152	
1151	This is more consistent with the rest of the labeling seen by the user when accessing the rpc commands.
1150	NOPCH was "no precompiled headers" ... I think. None of our source files pay attention to that flag, and as far as I can tell it isnt a magic compiler flag for gcc.
1146	Its also needed to compile bitcoin under BSD systems without editing makefile and add -DBSD to CXXFLAGS. Under linux it still compiles without any changes
1142	After this commit, "-Wall" only produces two warnings on my platform. This was sent under a separate cover because it deserves additional review. It changes (slightly) the usage of some serialized objects in a hopefully-superficial way.
1141	* SOCKS5 support. * Support connecting by passing hostnames to SOCKS5 proxy. * Retrofit -connect, -addnode and -dnsseed to use this mechanism is -proxydns is specified.
1140	This really quiets down -Wall. We are down to 3 key signed/unsigned warnings in main.h, and 2-3 other misc. warnings overall.
1139	...as it was missleading
1136	- cleanup some unnecessary spaces - updated a comment - fix a compiler warning because of missing {} (https://github.com/bitcoin/bitcoin/pull/1136/files#L5R1588 and following lines) - remove typedef FILE element_type; from serialize.h as this is used nowhere
1135	Postincrement (var++) requires making a temporary copy of var in C++.
1134	- add some comments / expand some comments - move MyGetSpecialFolderPath() to another #ifdef WIN32 place, rename to GetSpecialFolderPath(), make fCreate default to true (could perhaps be removed and set to always true in the function) and remove fallbacks for SHGetSpecialFolderPathA() (I added an error message instead - this had been suggested in a former pull-request) - remove namespace fs = boost::filesystem; where fs was only used once to shorten the code
1133	Fixes #1125.
1131	Pull request #562 was rejected because it introduced a new ToHex function with a different, potentially less safe interface. This pull request gives most of the speed-up (~30x on my CPU) of his patch but rolls it into the current HexStr function. See the following benchmark results (made using Testing HexStrOld (1000000 iterations) -> 14120.0 ms Testing HexStrNew (1000000 iterations) -> 470.0 ms Testing ToHex (1000000 iterations) -> 100.0 ms It also adds two tests for HexStr: testing HexStr for the empty string and the function that takes a std::vector.
1129	- Easier for debugging (what opcode was 0x... again?) - Clarifies that the opcodes are set in stone in the protocol, and signals that it is impossible to insert opcodes in between. Ive checked that the old and new representation are exactly the same, see for testcase. This needs careful scrutiny though. Edit: also added commit to change type of CMerkleTx::fMerkleVerified (and other in-memory-only flags) from char to bool. It is always (only 3 occurences) used as bool, so this is better. Edit.2: also removed some GUI hints in the bitcoin core, which were remnants from Wx.
1128	Not sure why I didnt submit this a long time ago, but it seems like obvious behaviour...
1126	memset needs cstring and sprintf needs cstdio
1124	
1122	This pull request contains two fixes: - Fix test failures on Linux on ARM, which is a platform where "char" is unsigned ("char" is signed on x86). This causes IsHex() to erroneously return true, and Debian doesnt automatically move new versions of bitcoin to its testing distribution, due to the build failures on arm. - Fix a bug where the statically-defined phexdigits is missing an entry, because theres a newline with no comma between "-1" and "-1". Cheers, - Dwayne
1121	I created a little format for storing scriptSigs/scriptPubKeys, so it is easy to exercise the Script opcodes. This is part of a bigger scheme to launch a new testnet, with blocks before a first checkpoint that are full of transactions with interesting Script test cases; Ill be working next on a hacked bitcoind that knows how to take these test cases and turn them into transactions.
1119	Add an option -detachdb (and entry in OptionDialog), without which no lsn_reset is called on addr.dat and blkindex.dat. That means these files cannot be moved to a new environment, but shutdown can be significantly faster. The wallet file is always lsn_reseted. -detachdb corresponds to the old behaviour, though it is off by default now to speed up shutdowns.
1118	
1117	Conflict: * cs_main in ProcessMessages() (before calling ProcessMessages) * cs_vSend in CNode::BeginMessage versus: * cs_vSend in ThreadMessageHandler2 (before calling SendMessages) * cs_main in SendMessages Even though cs_vSend is a try_lock, if it succeeds simultaneously with the locking of cs_main in ProcessMessages(), it could cause a deadlock.
1115	As it says on the tin
1114	Since auto-remove-db-logs was enabled, each time a CTxDB was closed outside of the initial download window, it causes a checkpoint + log cleanup. This is overkill, so reduce the sync frequency to once per minute at most.
1113	* Use >= for BIP0031 version * Bugfix: nonce is optional in ping messages * Dont request a pong that we ignore
1112	This pull request removes the dependency of serialize.h on PROTOCOL_VERSION, and makes this parameter required instead of implicit. This is much saner in my opinion, as it makes the places where changing a version number can have an influence obvious. This builds upon #1109, but since it may be more controversial, its a separate pull request.
1109	Removes the file headers.h, and all places where it was included. Some code movement was necessary to prevent strange dependencies, but there should be no semantic changes. Tested on Ubuntu and gitian.
1108	Addresses issue #1105. Does not solve things completely, but one big code movement (walletdb) appeared to magically solve many include dependency problems. 1) Move defs and code to walletdb.{h,cpp} respectively. This solves a key circular dependency plaguing include file cleanups, namely that db.h inclusion no longer sucks in CWalletTx etc. 2) Reduce headers.h usage in most modules.
1106	Sign comparison warnings are the largest class of warnings remaining. These commits fix many of the warnings -- which were indeed valid. The commits were broken up to make reviewing easier.
1104	This pull request enables most compilation warnings (of -Wall -Wextra) and fixes them. I compiled bitcoin-qt with g++ and clang to have as much warning coverage as possible. Warning flags in bitcoin-qt and bitcoind build have been equalized. `char-subscripts` warnings were especially dangerous, as char can be negative, resulting in accesses outside the array and thus potential information leakage. Fixed this by adding (unsigned char). Ive left these warnings alone: * `invalid-offsetof`: Looked this up, and found We use none of the special C++ multi-inheritance and dynamic casting so using `offsetof` should be safe. * `sign-compare`: Theres just too darn many of em. These could be worth checking later, as wrong signed-unsigned comparisons can result in nasty bugs. * `unused-parameter`: Also way too many instances. And ignoring a parameter is no problem, usually. I have carefully seperated this into commits for each separate warning class to make review easy.
1103	This is an alternate version of pull request #1102, which uses function pointers ("ugly" and less extensible from C++ standpoint, but perhaps cleaner from bitcoins perspective).
1102	This makes RPC a bit more object-oriented. All RPC commands now derive from a common base class, CRPCCommand.
1101	This is a cleaned up version of JoelKatz work, originally found in pull request #568. A few minor didnt-check-error-return bugs were fixed. All other changes were comment- or coding style-related changes unrelated to behavior. Should be upstream-ready at this point. Is in use at a few pools and other places.
1100	Without this, any error will segfault Bitcoin-Qt
1097	This is more clear to users than when the program simply disappears (usually during initialization). It still logs the message to the console and debug log as well.
1096	As it says on the tin.
1095	As mentioned on IRC, the mempool code always seemed inside-out to me. This set of commits updates main.{h,cpp} code to create a new CTxMemPool class. This is essentially just code movement and renaming. No behavior changes should occur [that have not already been submitted separately as independent pull requests].
1094	Access to mapTransactions[] must be guarded by cs_mapTransactions lock. Also, reformat long lines to make the switch statement more readable.
1093	Open database once per "tx" message, rather than multiple times, in the case of orphan transaction presence. As a side effect, a now-unused CTransaction::AcceptToMemoryPool() variant is removed.
1092	Fixes #1080.
1091	As there were a few readability issues with certain OS themes and our self-defined progressbar style, this reverts the bar to OS defaults. Fixes #1071.
1090	Allow Qt to word-wrap tooltips, should fix #1063. Qt can only word-wrap rich text messages. Implemented without having to touch any translation: by listening for QEvent::ToolTipChange events, then rewriting the tooltips to prefix `<qt/>` and convert to rich text if it is not yet rich text.
1089	- Update translations for bitcoin core - Move scripts/qt to share/qt, to clean up toplevel directories - Update english ts file which is used to source messages for Transifex - In extract_strings_qt.py use a glob *.h *.cpp, this is safe now that the Wx UI files are removed This will not break any current translations, but will allow new messages to be translated.
1088	Line breaks for long tool tips, a forgotten keyboard shortcut and a tool tip added to src/qt/optionsdialog.cpp
1087	
1084	I just accidentally ran: bitcoind importprivkey 1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF passing an address instead of a private key, and it didnt complain. I ended up with a new key in my wallet with a potentially publicly known private key. This pull request adds a call of IsValid() to CBitcoinSecrets SetString() function to ensure that the private key at least has the correct version. I also added unit tests that make sure CBitcoinSecret::SetString() fails when passed a Bitcoin address, and succeeds when passed compressed or regular private keys.
1083	*what it says on the tin* "Fixes" #1067
1081	Add a pong message that is sent in reply to a ping. It echoes back a nonce field that is now added to the ping message. Send a nonce of zero in ping messages. Original author: Mike Hearn Google Modified Mikes change to introduce a mild form of protocol documentation in version.h.
1078	- fix for: - QR dialog window title is now only the BC address, because "label << address >>" was too large for the titlebar anyway - removed a dead line with debug code - coding style polish - moved declaration of QRCodeDialog *d; into the foreach {}
1077	Sorry for the mess w.r.t. this build.h issue. I did a full gitian build and normal builds to make sure it worked, but apparently other environments existed as well (see #1076). This pull request contains a few extra changes to fix all issues Im currently aware of. For Qt builds, the build.h file is moved to build/build.h. For regular builds, it is moved to obj/build.h. This allows the Qt build to be done in a different directory than the source, and without interfering with other builds.
1075	This pull request adds a debug window to the UI (can be opened through Help Debug window). This includes: * Various information (version, number of blocks, number of connections etc) * Console for RPC commands (local, not really RPC, also works when not running with -server)
1072	Where possible, use boost::filesystem::path instead of std::string or char* for filenames. This avoids a lot of manual string tinkering, in favor of path::operator/. GetDataDir is also reworked significantly, it now only keeps two cached directory names (the network-specific data dir, and the root data dir), which are decided through a parameter instead of pre-initialized global variables. Finally, remove the "upgrade from 0.1.5" case where a debug.log in the current directory has to be removed.
1070	to contrib/debian/bitcoin-qt.desktop They basically mean "Bitcoin, virtual P2P cryptocurrency".
1068	
1066	Removed GetSpecialFolderPath() fallbacks (as requested), removed several unneeded spaces, renamed MyGetSpecialFolderPath() -> GetSpecialFolderPath() as the first one sounds not very pro ^^, make sure all char arrays in util.cpp get initialized to 0 and use sizeof(CharArray) instead of MAX_LEN, renamed Windows Autostart shortcut to "Bitcoin-Qt.lnk".
1054	All client version information is moved to version.cpp, which optionally (-DHAVE_BUILD_INFO) includes build.h. build.h is automatically generated on supporting platforms via contrib/genbuild.sh, using git describe. The git export-subst attribute is used to put the commit id statically in version.cpp inside generated archives, and this value is used if no build.h is present. The gitian descriptors are modified to use git archive instead of a copy, to create the src/ directory in the output. This way, src/src/version.cpp will contain the static commit id.
1052	Remove CRITICAL_BLOCK and TRY_CRITICAL_BLOCK, and replace them with LOCK, TRY_LOCK and IS_LOCKED. These are macros that define a local CCriticalBlock variable (a boost::interprocess::scoped_lock wrapper), which is much more C++ than the if and/or for constructions in macros. Ive intentionally not touched formattng/indentation where possible, in order not to break other patches. There are several cases where simplications are possible now, though.
1051	...message with" Closes #1050
1047	This is mainly so I dont forget where the ISC license comes from.
1046	Fixes issue #875
1045	Simplification/improvement of #1010.
1043	Compiles just fine on Windows ... you should try a compilation on Linux / Max and if it works accept this, otherwise close this one. For reference:
1042	This removes all uses of the USE_SSL preprocessor #define. It used to be necessary because Satoshi and I couldnt figure out how to get OpenSSLs libssl to compile on Windows properly (so we were linking against only libcrypto). That issue is long gone, so lets simplify the code and get rid of USE_SSL.
1041	This fixes issue #322 and issue #323 .
1039	Issue #955 was discovered to be caused by users entering an *incorrect* password that accidentally (with a chance of 1/255) resulted in valid AES-CBC padding, which causes a decrypted secret of 45-47 bytes, causing a failed CKey::SetSecret call. In the normal case, a bad password causes an incorrect padding which is detected by the decrypt function. As the return code is not checked, the previously (incorrectly) decrypted 32 bytes are used anyway, leading to a succesful CKey::SetSecret call. So in summary: we didnt know we were padding by default, and hence forgot to check for the case of a failed padding, which apparently resulted in something of the expected size.
1038	Commits speak for themself ;).
1037	Mining support is done, and network relay support for multisig transactions seems well on its way, so Id like to enable the addmultisigaddress JSON-RPC call on the main network so people can start experimenting/prototyping.
1036	Removes dead code.
1035	Fixes #308
1033	See the commit messages for more details.
1032	This one fixes #945 by removing the HTML code around "Wallet" (displayed on overview page) and use the corresponding Qt designer tags for the font settings. Hint: Manual retranslation of the word Wallet or early push to a fresh en master file to get it re-translated!
1030	As suggested by sipa in #753, show how many blocks still need syncing, rather than always just showing "99%" if the blockchain was recently synced.
1029	Even though I am still having trouble getting bitcoin to work on NetBSD, I have been able to build it thanks to this additional Makefile (therefore called "makefile.netbsd"). I believe it has enough differences to "makefile.unix" to justify a duplicate (no libdl, packages in /usr/pkg by default, libdb_cxx is called libdb4_cxx...) but let me know if youd prefer to adapt "makefile.unix" with conditional building instead. Cheers, -- khorben
1026	It was too hyperactive. I mean that right now when the block gap goes over an hour it starts showing synchronizing. Increasing that to 90 minutes or so would make it only happen about 6.4 times per year
1025	I added a % left value to the tooltip, the progressbar text is now displayed in its middle centered and uses real block values instead of only a % value ("x of y blocks (z %)"). The progressbar is hidden, if there is no network connection and gets hidden, if the connection is lost. Edit: Removed the dynamic component of the idea ;).
1023	What I try to achieve here: - harden the URI handling / IPC server (i.e. buffer length checks use of IMPLEMENT_RANDOMIZE_STACK for the ipcThread) - log and handle boost interprocess exceptions where possible - make URI handling more usable / robust on Windows (and not worse on other platforms - needs tests on Linux OSes) What I achieved (running and verified on Windows): - its possible to start the client via URI click, if no message_queue file exists - if one exists the clicked URI is sent to the queue file, but doesnt start the client (call to try_send() in bitcoin.cpp succeeds and we exit there - currently no check if the client is running - ideas are welcome), the URI is processed after manually starting the client and is not lost - on Windows its now possible to use 2 client instances in parallel and the first started one receives clicked URIs, if I close one of the instances the one left will process URIs - URI length is limited to 255 chars as message queue message size is 256 chars max. What I could not achieve: - handle some special cases i.e. a BitcoinURI file gets created by a user and is placed in the boost_interprocess folder -> results in the GUI freeze bug, as the file permissions differ from what boost would set, when creating the mq file -> that causes a boost deadlock (https://svn.boost.org/trac/boost/ticket/6745) Some details: The message queue is not removed anymore when closing the client, as this causes massive handling problems on Windows with 2 instances and my former approach of stale mq detection. First try is always to open the mq file for a re-use. If this fails a new mq is created. This needs boost 1.49 with a small edit in boost/interprocess/detail/tmp_dir_helpers.hpp see: There is currently no need for any hard monkey-patches like #986.
1022	This one adresses #1020: - hide Delete button on ReceivingTab / show Sign message button here - hide Sign message button on SendingTab / show Delete button here - changed hide() into setVisible(false) to be the same all over addressbookpage.cpp
1021	This will make bitcoin relay valid routable IPv6 addresses, and when USE_IPV6 is enabled, listen on IPv6 interfaces and attempt connections to IPv6 addresses.
1019	This is a grab-bag of commits designed to streamline the UICore interface. It contains various small improvements as well as code cleanups: Improvements: - Allow other threads to queue shutdown in UI thread (functionality in case of bitcoind is unchanged). RPC stop and encryptwallet will now work with UI, and this also fixes segfault part of #999. - update UI only when needed, instead of polling with a timer (core notifies UI using AddressBookRepaint / MainFrameRepaint functions) - This fixes the issue with address created using RPC getnewaddress not appearing in UI address book - use a messagebox to display the error when -server is provided without providing rpcpassword, this doesnt get lost like a message to the console (functionality in case of bitcoind is unchanged) - allow threads to request a modal dialog box for fatal errors, so that they can wait with shutting down until the user clicked OK (disk space error, etc) Code cleanups: - move QT_PLUGINS stuff to qt main file, where it belongs - move dummy translation function _ to qtui.h/noui.h instead of util.h - remove dependency for SecureString on serialize.h and util.h (and the rest of the knot of .h files) by moving allocators to new include file allocators.h - remove broken and/or unnecessary functions from qtui.h/noui.h, clarify names, and leave only one MessageBox function that can be used both from AppInit2 and other threads In principle, these commits are fairly independent and could be separate pull requests if necessary.
1018	
1017	Ive updated coderrrs coincontrol patch #415 so it merges cleanly against v0.6.0, and also updated the coin selection refactor and change reduction changes and unit tests from patch #898. They touch overlapping code, so Ive merged them both here. has just the coincontrol patch, without the other coin selection changes. Ive improved the coincontrol patch, as follows: * its much faster than coderrrs patch - what used to take over a minute now takes a fraction of a second * its reformatted to use 4-space indents like the other bitcoin code * instead of showing the balance twice for each address, one with 0.0005 taken off, it now shows the total balance of each group * the groups are sorted so the most valuable group is shown first * the clear all button on the send coins tab clears the send from input too
1016	
1014	Fixed compiler warning / hint "commas at the end of enumerator lists are a C++0x-specific feature". Guess the commas were there by mistake, so I removed them and it still compiles fine :).
1010	The normal checkpointing during the block chain download is reduced to every five minutes only, but forced every 200000 updated transactions.
1009	This time itll stick.
1008	This changes the load addr.dat logic so old addr entries are left as-is. Why: because we saw at least one (and probably 2 or 3) hang-at-startup bugs in rc5 when erasing the old entries. The result will be larger than necessary addr.dat files for people who upgrade from old releases; I can live with that for this release. The workaround is to just delete addr.dat and let dns or built-in seeding to give you a fresh set of peers.
1007	This is an alternative to pull #1004 , to fix part of bug #999 Tested by doing a complete blockchain download and observing the number of log files every 2 minutes (see -- maximum of 5 were created). Removing log files before shutdown does make catastrophic database recovery impossible, however catastrophic recovery is only possible if you have ALL of the log files available (all since the creation of the database), so the only situation in which that is an issue would be a brand-new user running Bitcoin for the first time and then suffering a disk-corrupting failure before they shutdown.
1006	Again, small glitch -> small fix.
1004	When set, -dbtrimlogs will delete old unused database log files every 5000 blocks. Otherwise several GB of logs build up while downloading the (1GB) blockchain, and are only deleted when the client exits. Fixes part of the bug #999. The QT client still sometimes crashes when it runs out of disk space.
1003	The database log size recently increased from 10MB to 100MB, but CheckDiskSpace() is still only checking for 15MB free before warning. That needs to be increased "because database could create another 100MB log file at any time".
1002	- validate bitcoin address in the URI before switching to sendCoinsPage and pasting into the form, when a bitcoin: link is clicked - validate bitcoin address in the URI before switching to sendCoinsPage and pasting into the form, when a bitcoin: link is dropped on the Bitcoin-Qt window (Drag&Drop feature) - show a tray-notification if an URI could not be parsed to alert the user
998	Small glitch, small fix ... it removes a blank line in in the transactions list tooltip, if the mined Coins are matured.
996	- translations were pulled via tx pull -a - bitcoin_he.ts is new and was added into bitcoin.qrc
995	I merge all file changes by hand from master into my own play-ground and thats why I stumple upon such small things ;).
994	Fixes #982.
992	Tested using a WinXPsp3 virtual machine: + Installed bitcoin-0.4.5rc1-win32 + Installed bitcoin-0.6.0rc4 on top, ran bitcoin-qt + Uninstalled bitcoin-0.6.0rc4 RESULT: bitcoin.exe left in C:\Program Files\Bitcoin This pull will clean that up. HOWEVER: RESULT: locale\ folder left in C:\Program Files\Bitcoin Is Qt writing that folder at first startup? I dont see it mentioned in the setup.nsi; should the uninstaller explicitly remove it?
991	I dont think bitcoin: URI handling on Windows has had nearly enough testing, so this disables it for the 0.6 release. Im all for re-enabling it for a 0.6.1 and/or 0.7, but only we take a step back and do two things: 1. Can we get an IPC solution that doesnt require monkey-patching boost::interprocess ? 2. Im nervous that attackers might be able to craft bitcoin: URIs that Do Bad Things. I would suggest that we disable Linux bitcoin: URI handling until that is fixed, but I consider bitcoin: URI handling on Linux experimental anyway because users have to know how to manually enable it.
990	Added/modified comments above class definitions to be compatible with doxygen. No code changes.
989	This feature was requested and paid for by p2pool miner "DeathAndTaxes": Ive asked non-developers to express support on that thread.
988	Simple fix, currently the Window is not shown, if a user opens a bitcoin: link in the browser. This one brings the window to front, if its minimized or not active.
987	
986	This fixes #981 and should fix #956 I havent tested 956 after this patch, but it does fix #981 and afaict, they are actually the same underlying issue. It would be nice to have someone do more digging and find out what is actually going on in the win32 api calls boost is making and find the real issue, but this fixes the problem. Also, someone should file a boost bugreport.
985	Talk about old code, the installer set the uri handler to the old wx- bitcoin.exe
984	This speeds up initial connections with an old/large addr.dat a lot.
983	
980	Okay, so my former assumption boost 1.47 would fix #956 was wrong and boost 1.49 did not fix it either. It turns out, that I could recreate the error condition by running Bitcoin-Qt and simply switch of my PC. So there were the 2 orphan files from boost interprocess that cause the problem. I found out, that no interprocess_exception was thrown, not in qtipcserver.cpp and not in bitcoin.cpp. Next step was to look through the code and the "create_or_open" option in the message_queue constructor got my attention. I changed this to create_only and voila there was an exception I could work with. It sais "file already exists", which makes sens as there are those orphan files left. In the end I introduced a new ipcRecover() function, which is called after catching interprocess::already_exists_error. This function works with the path were the stale message queue file "BitcoinURL" resides and checks if the file is there and tries to remove it. If that succeeds the function returns true and ipcInit() is called again. If this fails an error is written to the debug.log. Test case with 1.47 boost libs: - kill running Bitcoin-Qt instance by switching PC of - check for stale files, which are there - starting the client again with the fix disabled in the code - no exception, no log entries and a frozen GUI - starting the client again with fix enabled results in a not frozen GUI and normal client operation Log: ipcInit - boost interprocess exception #9: File exists. ipcRecover - old message queue found, trying to remove C:\ProgramData\boost_interprocess\BitcoinURL ...success I know there are many commits in here, so I would suggest to first only look at the diff and if you are interested in the history of the fix take a look at the commits itself. As I only run Windows the Linux / Mac devs should test this code, during our discussion.
979	This is to assist in troubleshooting #978, but probably a good idea in general.
976	The commit assumes we update the used Boost libs for Windows to version 1.49 to switch to the latest release. If we switch over to 1.49 on Windows, we need to add oleaut32 lib in bitcoin-qt.pro, to avoid the compilation error "undefined reference to _imp__VariantClear@4", because VariantClear() is used in the boost::interprocess code. In the end we would also need to update the qtgui_deps_1.zip with the 1.49 boost libs for Windows and the 1.49 pre-compiled header files.
975	When a 0.6 wallet with compressed pubkeys is created, it writes a minversion record to prevent older clients from reading it. If the 0.5 loading it sees a key record before seeing the minversion record however, it will fail with DB_CORRUPT instead of DB_TOO_NEW. This is more needed in backports than in mainline for now, but its code improvement in any case.
974	Do not automatically change the wallet format unless the user takes an explicit action that implies an upgrade (encrypting, for now), or uses -walletupgrade. -walletupgrade optionally takes an integer argument: the client version up to which upgrading is allowed. Without an argument, it is upgraded to latest supported version. If an argument to -walletupgrade is provided at the time the wallet is created, the new wallet will initially not use features beyond that version. Third, the current wallet version number is reported in getinfo.
973	Also decrease default send/receive buffer sizes from 10 to 5 mb as this patch makes it easy for a node to fill both instead of only send. The largest advantage is not having to read from disk or serialize blocks on getblocks requests.
972	-checkblocks now takes a numeric argument: the number of blocks that must be verified at the end of the chain. Default is 2500, and 0 means all blocks. -checklevel specifies how thorough the verification must be: 0: only check whether the block exists on disk 1: verify block validity (default) 2: verify transaction index validity 3: check transaction hashes 4: check whether spent txouts were spent within the main chain 5: check whether all prevouts are marked spent 6: check whether spent txouts were spent by a valid transaction that consume them
971	This commit fixes the filesystem paths to be Windows-style on Windows. Currently this was added for the database directory, the database log, the dst and src path in the backup wallet operation, server.cert, server.pem, bitcoin.conf and bitcoind.pid. Example from the debug.log: old: dbenv.open strLogDir=D:\Bitcoin\Wallet/database strErrorFile=D:\Bitcoin\Wallet/db.log new: dbenv.open LogDir=D:\Bitcoin\Wallet\database ErrorFile=D:\Bitcoin\Wallet\db.log Tested on my Win7 machine and works.
970	Now that the BIP16 switchover is locked-in, I think it is best to remove the command-line arguments that were only needed during the transition period.
969	As these are equivalent functions, this cleans up the source a bit. Also remove PrintConsole() as this was the only use.
968	As it was a little hard for me to figure out the needed steps (although tcatm helped me a lot), I updated the translation process documentation to be more clear for "novice" and Windows users.
967	
966	
965	Hi bitcoin team, I have just made this trivial change on my system (NetBSD/amd64 6.0_BETA) so that compilation warnings are more relevant. Without it, each file compiled triggers this message: ```cc1plus: warning: -Wformat-security ignored without -Wformat``` FWIW, "gcc --version" returns: ```gcc (NetBSD nb2 20110806) 4.5.3``` Cheers, -- khorben
964	I did a full block load (from a local file, using the loadblocks patch) on my laptop with these settings in 33 minutes.
962	old behaviour: - if -maxconnections is 0 or negative, no connection to the network was established at all - the maximum number of connections was in range 0 to 8 (125 was unused) new behavior: - if -maxconnections is 0 or negative, MIN_OUTBOUND_CONNECTIONS will be used to ensure connectivity - if -maxconnections is unset Gavins intended default of 125 is used - if -maxconnections is > MAX_OUTBOUND_CONNECTIONS, MAX_OUTBOUND_CONNECTIONS is used Perhaps the value of MAX_OUTBOUND_CONNECTIONS and MIN_OUTBOUND_CONNECTIONS should be refined further. I tested the changes on Windows and can confirm they work. Oh and I think this "bug" or lets say strange behaviour was introduced by Gavins commit to set defaults to 125. I was so sure, that I saw more than 8 connections before 0.6, but no one seems to have noticed?
961	Ive had it with this "feature". Ive had a lot of patience with it but... see pull requests #941, #826, #853, #795, #855 and issues #620, #692, #788... It appears impossible to implement this functionality in Qt without breaking in some OS, or some combination, or breaking something else. And I wasted too much time on it. Ive tried four different implementations at least. If someone has a perfect implementation that works on all OSes *and feels like testing it extensively* then be my guest and submit a new implementation as pull request. Please use "Close to tray" instead.
960	Simple fix.
959	As the Loading of the Block Index can take several minutes, its possible the user might want to exit the process during this, and so far the only way was with a kill -9. This small change allows the Block Index Loading to watch out for a requested exit, and abort during the process. Its been tested on my computer so far. Without this change: the bitcoin-qt process is unkillable (without a kill -9) during the initial Loading of the Block Index. This goes against standards for processes, which should try to exit cleanly as soon as a kill signal is sent.
954	source file update: I used "lupdate -no-obsolete C:\Users\%USERNAME%\bitcoin\bitcoin-qt.pro", which uses the path to my local repo, to update the source file. I checked it and it now contains formerly missing strings + has the correct line references to the source code files. There are only 2 strings which fall back to state unfinished, as they were updated in the source code files. These will need a re-translation. 8 new strings are in (i.E. Backup Wallet), which then need a Transifex translation. Like you said, I only attached the bitcoin_en.ts in the commit. remove cs_CZ: See issue the bitcoin_cs_CZ.ts is completely untranslated and conflicts with the translated one bitcoin_cs.ts. So I removed the reference from bitcoin.qrc and deleted bitcoin_cs_CZ.ts.
953	After using 0.6 RC4 and seeing the translations directly in the GUI I made some further changes to polish the german translation. I hope this gets merged before the final 0.6 release :). This commit is based on the current german Transifex translation. I always work directly with Transifex, download the language file and push it to my repo.
951	Previously getheaders would return any number of headers up to 2000 + the distance the locator parameter was back (which is up to ~ the number of items in the locator ^ 2). The only client I was able to find which actually handles the headers message is BitcoinJ, and it clearly expects no more than 2000 headers See: Additionally, the wiki clearly states that getheaders will only ever return 2000 headers:
950	Wallet keys are 32 bytes, exactly two AES blocks. Using padded encryption makes attacking somewhat easier, as the attacker can check whether the padding is correct after decrypting using an attempted passphrase, rather than needing to do an EC multiplication to check whether the private and public keys match.
949	I spent some time today trying to get Bitcoin to compile with MSVC2010. Eventually got it to work nicely. Ill publish the solution and build files this week. However there were quite some surprises: - Define `WIN32_LEAN_AND_MEAN` in serialize.h to prevent winsock compile errors. - CService::SetPort, was mysterious unresolved external. Turned out to be a macro issue, windows defines SetPort - strprintf problem: - works in g++, but in MSVC causes horrible crashes. - `NOMINMAX` needs to be defined before include of windows.h to prevent windows from defining min and max macros, and std::min and std::max from causing compile errors - `pid_t` needs to be defined for compatibility All these are fixed in this patch. The changes are trivial. This still builds in Linux, however I still need to test whether this doesnt break the gitian cross-compile.
948	In cases of very large reorganisations (hundreds of blocks), a situation may appear where an inv is sent as response to a getblocks, but the last block mentioned in the inv is already known to the receiver node. However, the supplying node uses a request for this last block as a trigger to send the rest of the inv blocks. If it never comes, the block chain download is stuck. This pull request makes the receiver node always request the last inved block, even if it is already known, to prevent this problem.
947	Currently, if a node is banned for misbehaviour the receive buffer, vRecv, is not cleared and ProcessMessages continues to process any further messages already received from the node. Thus, if a node spams hundreds of messages and does not wait for a response, all the messages get processed, even if the node is banned after just a couple. This patch clears the receive buffer when the socket is closed. Perhaps it should be done in Misbehaving() instead? But it seems logical that we never want to process messages from a disconnected node since we cant reply to them anyway. EDIT: Two things I forgot to mention: Firstly, I found this problem in litecoin, which is being actively attacked by spammers. I dont know for sure if bitcoin has this problem. Secondly, this wont do much alone, because there is very little code to actually ban bad nodes. I am experimenting with detecting bad behaviour - ie adding banning code, and thats how I noticed this.
946	It could just as well be on either part of the gitian build, but to safely put it on the Qt side would require bumping the filename, and every gitian user rebuilding it. v0.5.3.1 put it on the Bitcoin side, and this is easier to work with and keep safe, so Im moving it.
942	Would be nice to get this integrated before the RC4 release gets compiled, as I fixed a typo and made some small changes to the german translation.
941	The current "minimize to tray" implementation has problems on Windows. It converts the window to a tool window, but when it is brought back it is not converted back to a normal window, causing strange behavior (such as an ugly title bar), as tool windows dont get a ChangeEvent on unminimization. This implements the eventual suggestion from the Qt forums . Ive tested it on Ubuntu and Windows (XP) and it works there. Can someone test it on KDE please? If we dont manage to get it right this time Im going to remove the "minimize to tray" functionality completely (but not "Minimize on close" of course, because that works fine...). Or maybe keep it only on Windows.
938	This resolves #820 and #640.
936	Replacement for getmemorypool compatible with new BIP 22 specification.
934	
932	It echoes back a nonce field that is now added to the ping message.
931	
930	Sometimes a new block arrives in a new chain that was already the best valid one, but wasnt marked that way. This happens for example when network rules change to recover after a fork. In this case, it is not necessary to do the entire reorganisation inside a single db commit. These can become huge, and exceed the objects/lockers limits in bdb. This patch limits the blocks the actual reorganisation is applied to, and adds the next blocks afterwards in separate db transactions. Mostly-closes #925.
929	Only available on dropdowns when a Tonal-compatible font is installed
928	This fixes the issue of send coins dialog initially having BTC selected as the unit to be sent even when, for example, mBTC is chosen as the default unit.
926	
918	Hello, there was a small typo in src/net.cpp. So I fixed it :)
917	This pull request is intended to facilitate bitcoind log rotation. When the daemon receives a HUP signal, it reopens the debug.log file so the previous one can be rotated. Ive tried to describe the technical motivation in each of the three commit messages. It uses flockfile and funlockfile to avoid thread contention issues. As best I can tell, those functions are available on most platforms, but I have only compiled on OS X. I have a test script which sends SIGHUP to the bitcoind process every 100 ms. Ive been running with that test script and this patch for the last few days and havent had any problems. In my tests, it behaves well during startup and shutdown too. Each rotated log contains the content I expect. Suggestions for improvement welcome.
915	Introduce the following network rule for blocks after march 15, 2012: * a block is not valid if it contains a transaction whose hash already exists in the block chain, unless all that transactions outputs were already spent before said block. Warning: this is effectively a network rule change, with potential risk for forking the block chain. Leaving this unfixed carries the same risk however, for attackers that can cause a reorganisation in part of the network. Thanks to Russell OConnor and Ben Reeves.
914	Prevent dns leakage and disable seeding/listening with -connect
912	
911	This prevents mapOrphanTransactions from growing without bound. It should eventually be combined with DoS code to disconnect and ban peers that send "too many" orphans, but we need to think a little harder about how to figure out how many is too many.
910	
907	This prevents unbounded memory usage when a attacker spams a node with "inv" messages.
906	Being able to sign a message without the ability to verify signed messages is a little lopsided :)
905	AvailableCoins() makes a vector of available outputs which is then passed to SelectCoinsMinConf(). This allows unit tests to test the coin selection algorithm without having the whole blockchain available. This change was suggested in the comments of pull #898.
904	This is a version of #890 rebased on top of #899, plus an extra fix for storing the proxy port in the settings as well.
902	Removes potential buffer overflow in win32 code as reported in #901. Also simplify the `MyGetSpecialFolderPath` function, as SHGetSpecialFolderPath is always included in Windows XP, the minimum version supported by bitcoin: Warning: Untested
900	Fixes #860
899	Before 0.6 addrProxy was a CAddress, but netbase changed it to CService. Retain compatibility by wrapping/unwrapping with a CAddress when saving or loading. This commit retains compatibility with 0.6.0rc1 (which wrote the setting as a CService) by trying to parse twice. Fixes #814
898	If we have three 50BTC outputs and try to spend 100BTC, we should use only two of the outputs. Previously we were using all three. Similarly if we have outputs of 50, 50, and 0.01 and want to spend 100BTC, we shouldnt include the 0.01 in the transaction. shows a transaction where MtGox was trying to consolidate ten 50k outputs into a single 500k output. The wallet had at least 11 50k outputs in it. Because of this code in wallet.cpp: if (nTotalLower >= nTargetValue + CENT) nTargetValue += CENT; the target value was increased from 500k to 500k plus a cent, which couldnt be found using just ten 50k outputs, and so an eleventh 50k output became involved, to avoid sub-cent change. There was no need for any change at all. (I notice the 50k change hasnt yet been redeemed. I hope it isnt lost!) These transactions show other common cases where extra 0.01 coins are tacked on to both sides of transactions for no good reason: (Sorry for the repeat pull request. I still dont know how to work github properly...)
897	Fixes #874.
896	Doing so would allow an attack on old nodes, which would relay a standard transaction spending a BIP16 output in an invalid way, until reaching a new node, which will disconnect their peer. Reported by makomk on IRC.
895	There has been some interest in this functionality.
894	Fix #880. Run with -nosplash or -splash=0 to disable splash screen. Also, dont show splash screen when -min is specified on the command line. Note that the splash screen is shown before the bitcoin.conf file is read, so putting splash=0 in bitcoin.conf has no effect. Putting min=1 in bitcoin.conf will cause the window to be minimised, but the splash screen will still show.
893	Fix #880. Note that the splash screen is shown before the bitcoin.conf file is read, so putting splash=0 in bitcoin.conf has no effect. Run with -nosplash or -splash=0 to disable splash screen.
892	If we have three 50BTC outputs and try to spend 100BTC, we should use only two of the outputs. Previously we were using all three. Similarly if we have outputs of 50, 50, and 0.01 and want to spend 100BTC, we shouldnt include the 0.01 in the transaction. shows a transaction where MtGox was trying to consolidate ten 50k outputs into a single 500k output. The wallet had at least 11 50k outputs in it. Because of this code in wallet.cpp: if (nTotalLower >= nTargetValue + CENT) nTargetValue += CENT; the target value was increased from 500k to 500k plus a cent, which couldnt be found using just ten 50k outputs, and so an eleventh 50k output became involved, to avoid sub-cent change. There was no need for any change at all. (I notice the 50k change hasnt yet been redeemed. I hope it isnt lost!) These transactions show other common cases where extra 0.01 coins are tacked on to both sides of transactions for no good reason:
891	Completed czech translation + changed locale code from cs_CZ to more common (and previously used) cs.
890	The main motivation for this was a lot of frustration because command-line, bitcoin.conf, and wallet.dat settings were interacting in ill-defined ways. Now GUI settings are stored in QT settings files; see ... for details on where. Testnet and main network have their own separate files (thanks The first time you run with this patch settings from your wallet.dat will be read and moved over to the new settings file (and the settings erased from wallet.dat). From then on, settings in the wallet.dat are ignored-- so if youre using --datadir and multiple wallets, dont expect the setting to be read/erased from the other wallets. The proxy setting is behaving badly (e.g. 127.0.0.1 is turned into an IP6-looking address), but Im 90% sure that is a pre-existing bug based on other reports of weird strings in the proxy setting with the 0.6 release. Ill file an issue about that.
887	Other gitian upgrades may not make 0.6. :(
886	Add block "confirmations" to getblock, mainly for identifying orphans **** Second parameter to JSON-RPC getblock/gettransaction: decompositions This is an Object specifying how to decompose specific elements. Currently supported: * "tx": "no", "hash", "hex", "obj" * "script": "no", "hex", "asm", "obj" **** Note that this depends on pulls #841 (sipa/getalltransactions) and #885 (luke-jr/getblock_cleanup), so the diff includes those until they are merged.
885	- Add "size" and "bits" - Rename "blockcount" to "height" (and make it 1-based) - Rename "hashprevious" and "hashnext" to "previousblockhash" and "nextblockhash" (respectively)
884	Simplified form of #715
883	It scans through the file for valid block signatures, and processes them one by one.
882	As testnet has neither DNS seeds or built-in seed addresses to bootstrap from.
878	
876	
873	Now the entire network upgraded to (initial) protocol version 209, certain simplifications in the source code are possible.
872	As requested in #518.
871	
870	
869	Also moved RecvLine to net.cpp.
868	
867	Hide tray icon in destructor, as the deletion (which automatically happens as it is a child object of BitcoinGUI) will let it linger until quit, at least on Ubuntu. This is annoying as the icon and menu will still be there for a few seconds (ignoring command), so that it seems the quit did not work properly.
865	Fixes a memory leak.
864	Fixes #856
863	When OpenSSLs BN_bn2mpi is passed a buffer of size 4, valgrind reports reading/writing one byte past it. I am unable to find evidence of this behaviour in BN_bn2mpis source code, so it may be a spurious warning. However, this change is harmless, as only the bignum with value 0 results in an mpi serialization of size 4.
862	
859	Allows overriding the GUI language from the command line.
858	(title says it all)
857	(title says it all)
855	Toggle main window hide on tray icon click - converted openBictoinAction to toggleHideAction - put GUIUtil functions into a namespace instead of a class - put window-related functions together in optionsdialog Reasoning: - toggle is more typical behaviour - its more functional - better UX The typical issue with toggling visibility is that when a window is obscured by other windows but in the shown state, hiding it isnt what you want. Ive added an isObscured function to GUIUtil that checks several pixels in the window to see if they are visible on the desktop so that an obscured but shown window can be raised.
854	* Shorten code in qtipcserver.cpp * Handle bitcoin:// URLs in GUIUtil::parseBitcoinURL(QString) * Add testcase for bitcoin:// URL
853	After suggestion by The dummy window gives trouble on KDE. Changing the main window to a tool window also hides it from the taskbar, and seems to work at least on KDE and GNOME/Ubuntu. Whether it works as expected on Windows and Mac is unknown. Testing welcome...
852	In a different pull request which I accidentally closed, Gavin wrote: > I think a separate method called from ParseParameters and ReadConfigFile is the better way to go. So thats what Ive done here.
849	This is just a refactor on main-net (new UpdateTime() method to avoid duplication of GetMedianTimePast() math). On testnet it fixes miners getting invalid blocks if they mine across the 20-minute "switch to minimum difficulty" rule that is new with 0.6.
847	I copied this whole block out of ParseParameters() and changed the variable names. Perhaps its better to move this code into a new function and call it from both places. Or we could just process all the "-no" parameters at once, after bitcoin.conf has been processed. The "--" -> "-" processing needs to stay where it is, however, so that --datadir= can be used to locate bitcoin.conf.
844	* do not let vnThreadsRunning[1] go negative * do not perform locking operations while vnThreadsRunning[1] is decreased * check vnThreadsRunning[1] at exit
843	
842	
841	Works for wallet transactions, memory-pool transaction and block chain transactions. Available for all: * txid * version * locktime * size * coinbase/inputs/outputs * confirmations Available only for wallet transactions: * amount * fee * details * blockindex Available for wallet transactions and block chain transactions: * blockhash * time
838	Fix default suffixes in save dialog in GNOME and make it more clear that PNG is used (solves #833)
837	This adds a field labelled Immature in the overview section under the unconfirmed field, which shows mined income that has not yet matured (which is currently not displayed anywhere, even though the transactions exist in the transaction list). To do that I added a GetImmatureBalance method to the wallet, and connected that through to the GUI as per the GetBalance and GetUnconfirmedBalance methods. I did a small no-op change to make the code in adjacent functions a little more readable (imo); it was a change I had made in my repo earlier...but I thought it wouldnt hurt so left it in. Immature balance comes from mined income that is at least two blocks deep in the chain (same logic as displayed transactions). My reasoning is: - as a miner, its a critical stat I want to see - as a miner, and taking into account the label immature, the uncertainty is pretty clearly implied - those numbers are already displayed in the transaction list - this makes the overview numbers add up to whats in the transaction list - its not displayed if the immature balance is 0, so wont bother non-miners
834	- icon from the LGPL Nuvola set (like the tick) - - include boost/version.hpp in db.cpp so that the overwrite version of copy can be used - catch exceptions in BackupWallet (e.g. filesystem_error thrown when trying to overwrite without the overwrite flag set) - include db.h in walletmodel.cpp for BackupWallet function
831	...only if greater than zero.
829	In preparation of IPv6 support: keep a map of potential local addresses instead of a single addrLocalHost, and use addrMe in incoming "version" messages to vote for them.
828	Fixes some possible race conditions in ThreadCleanWalletPassphrase().
827	This is broken in 0.6.0rc1: encrypting a wallet with compressed pubkeys in it will fail after reloading.
826	Ive reworked #795: - Now works in unity (on Ubuntu Ocelot) - The other tray menu options also re-show the window in the correct way - Delete dummy widget in destructor - Commit message fixed
825	
823	In preparation of IPv6 support: prevent double connections to the same node. Not urgent.
818	Enable accessible widgets Qt module on win32 (when static linking), so that people with screen readers such as NVDA can make sense of it.
817	This fixes a potential bug where some NATs may replace the nodes interal IP with its external IP in version messages, causing incorrect checksums when version messages begin being checksummed on February 14, 2012.
816	Februari 15th, the protocol changes and version and verack messages get a checksum. However, some NAT routers change the IP address inside packets payloads, causing the version messages checksum to become invalid. This commit disables the checksum check, so clients behind such routers can continue to connect after februari 15th.
813	Fixes bug #794.
808	Can someone confirm the determinism? ab069992eaf3bde0e6580e00b19935c91438f57b657160b93643152511421cd2 gitian-inputs/bitcoin-deps-0.0.2.tbz2
807	
806	Introduce an enum threadId, and use symbolic indices when accessing vnThreadsRunning. Syntactic changes + bugfix
805	This allows for rebuilding Bitcoin without compiling the deps every time. Also includes fix for #802 (libpng security vuln)
804	This is a variation on pull #755 I made the option -bip16, defaults to 1 (true). I also moved the logic for setting the switchover time into init.cpp, and set the current-anticpated-switchover-time to March 1 for main network (left it at Feb 15 for test network). I also changed the SoftSetArg(...bool) methods name; during testing I was getting bitten by C++s annoying habit of converting char* to bool instead of string.
803	I decided Id typed "./bitcoind --nolisten" enough times to make command-line parsing work the way I think it should. Changes are: + Unit tests for the GetArg() methods + --foo=... is automatically interpreted as -foo=... (so you can use double-dashes if you like for all args) + Boolean arguments can be specified as either -foo (true) or -nofoo (false). + Internally, all boolean args are looked up using the positive form and default value (e.g. GetBoolArg("-dnsseed", true)) + Tweaked the --help text + Default for -irc to bootstrap via IRC channel was changed from true to false
801	* fixes issue #742 * new translations: cs_CZ fa fi fr_FR hr pl ro_RO sv tr It would be great if someone could review this patch.
800	When a transaction has multiple outputs that go to the wallet, list these as multiple transactions in the UI. This is also applied to generated (coinbase) transactions. Also makes the code shorter and easier to understand. This does need some testing.
799	Help users avoid insecure configurations a bit by recommending a secure RPC password and increasing the incorrect password delay. This may open up a RPC DOS for users with exposed RPC ports and short passwords. Since users shouldnt have exposed RPC ports OR short passwords, the DOS risk is preferable to the compromise risk. Also logs the client IP address for incorrect attempts. With this patch running bitcoind when there is no configuration file now results in: [gmaxwell@helmholtz src]$ ./bitcoind Error: To use bitcoind, you must set a rpcpassword in the configuration file: /home/gmaxwell/.bitcoin/bitcoin.conf It is recommended you use the following random password: rpcuser=bitcoinrpc rpcpassword=HXt6c9zmw6jqW4jvh3pcHTGb7owrmNLUtaSVGvoT2Sho (you do not need to remember this password) If the file does not exist, create it with owner-readable-only file permissions. Previously it just advised rpcpassword= which probably gets filled in with insecure normal password like values. I think ideally bitcoin would just autocreate the file with a random authentication string like this but I thought this change was more minimal. Thoughts?
798	Help users avoid insecure configurations a bit by recommending a secure RPC password and increasing the incorrect password delay. This may open up a RPC DOS for users with exposed RPC ports and short passwords. Since users shouldnt have exposed RPC ports OR short passwords, the DOS risk is preferable to the compromise risk. Also logs the client IP address for incorrect attempts. With this patch running bitcoind when there is no configuration file now results in: [gmaxwell@helmholtz src]$ ./bitcoind Error: To use bitcoind, you must set a rpcpassword in the configuration file: /home/gmaxwell/.bitcoin/bitcoin.conf It is recommended you use the following random password: rpcuser=bitcoinrpc rpcpassword=HXt6c9zmw6jqW4jvh3pcHTGb7owrmNLUtaSVGvoT2Sho (you do not need to remember this password) If the file does not exist, create it with owner-readable-only file permissions. Previously it just advised rpcpassword=<password> which probably gets filled in with insecure normal password like values. I think ideally bitcoin would just autocreate the file with a random authentication string like this but I thought this change was more minimal. Thoughts?
795	The "Minimize to the tray instead of the taskbar" option in Options should now work correctly.
792	This also avoids flushing setAddrKnown until 24 hours has passed, and avoids contacting the external IP services when not listening. Advertising non-listening nodes is just addr message spam. It doesnt help the network, in fact it hurts the network, and it also hurts users privacy. Advertising far out of sync nodes doesnt help the network they cant even forward (most) transactions and wastes nodes outbound slots.
790	Needs tested by someone who has a UPnP router.
787	Design goals: * Only keep a limited number of addresses around, so that addr.dat does not grow without bound. * Keep the address tables in-memory, and occasionally write the table to addr.dat. * Make sure no (localized) attacker can fill the entire table with his nodes/addresses. See comments in addrman.h for more detailed information.
786	See #782: is right in saying that not everything is checked, as GetPubKey() returns the public key embedded in the PrivKey structure, and does not force recalculation. CKey::IsValid() performs this check now.
782	Reported by onlineproof on IRC: Bitcoin does not verify whether private keys and public keys correspond, when loading a wallet.
780	Please do not close until merged or BIP 17 is Rejected.
778	Use GetPubKey() instead of GetKey() when looking up public keys by in-the-wallet-bitcoin-address, so addmultisigaddress works correctly with encrypted, locked wallets.
777	
775	Wrote this while I was testing CBlockStore, thought I might as well pull request it so that others can use it to test whatever.
774	Correct comment for why the check is unnecessary for coinbases Move testnet check out, to AcceptToMemoryPool where everything else checks it
773	This also removes an un-needed sigops-per-byte check when accepting transactions to the memory pool (un-needed assuming only standard transactions are being accepted). And it only counts P2SH sigops after the switchover date.
771	From the commitmsg: "Change Bitcoins flow to use a CBlockStore class which net/wallets send/recieve blocks to/from. This commit is designed to not change any bitcoin functionality or operation. Largest changes: * ProcessMessage(s)/SendMessages moved to protocol.cpp * Many globals removed from main.h and abstracted to CBlockStore * Calls to CWallet::AddToWalletIfInvolvingMe no longer block Block verification, resulting in a small, but measureable block verification speed increase. There is still a lot of abstraction to go, but this is a step in the right direction." **This commit is not intended to be merged for 0.6, its targeted for for 0.7.** I just wanted to post it to start getting eyeballs on it as early as possible. ~~In addition, there is a nasty performance bug somewhere that is causing an almost 25% slowdown in block download when downloading a lot of blocks (when downloading from a local tmpfs node to another local tmpfs node, but it is often quicker for smaller sets, say < 5000 blocks). Ive looked at it in valgrind and gprofile and tried changing some possible culprits and havent had any luck tracking it down. _If anyone tracks it down, Ill owe you big time._~~ **Additionally, please mind the removal of cs_main around stuff thats not in main.cpp (esp rpc) and tell me Im wrong to do that.**
770	* My patch for miniupnpc has made it into the latest MacPorts release: * Documentation has been changed appropriately * New pure-Python macdeployqt; leverages all problems with the stock macdeployqt Additional note: All has been tested and works for me.
769	This tightens up the IsStandard() rules so transactions that put extra data in their scriptSigs are considered non-standard.
768	
766	...nfo" This reverts commit 340f0876eabcabefa77588585f7c8f29954dcb48. The data provided by that commit are useless and there is no reason to make the code that much worse by adding yet more globals in a poorly-written way for that info.
765	All previous versions of bitcoin could store some types of invalid transactions in the orphan-transaction list.
764	
762	- Revert to global progress indication (see #753) - fix the Qt GUI build (port IP validation in options to network refactoring)
759	Adds coinbaseflags, mintime, and curtime to output of getmemorypool. Since users of getmemorypool generate coinbase transactions themselves, they need bitcoind to indicate what should be included in the coinbase data. Mintime and curtime are useful for generating work by changing the timestamp. Without them, P2Pool can only increment the timestamp. With the knowledge of the minimum allowable timestamp, work can be generated symmetrically around the current timestamp, reducing future bias. Generation (without using getmemorypool) tested on testnet:
758	Nothing special, Clear All now has a tooltip just like the rest of GUI and About dialog now has the correct year.
757	Sorry if you find this patch ridiculous. Ill contribute something more substantial when I get more comfortable with the whole process.
755	Please dont force people to vote for things they might not want (and shouldnt).
752	
750	These should never have been there, bitcoin isnt anonymous without a ton of work that virtually no users will ever be willing and capable of doing.
748	This implements BIP 16, the replacement for pay-to-script hash. Tested mostly on testnet-in-a-box, but I did spend time today generating transactions on the testnet as a final sanity test: Testnet block 43561 has 3 Pay-to-script-hash transactions and the /P2SH/ string in its coinbase: The next block has a transaction that spends one of them: Ill be producing/testing backports for miners running old software in the next few days.
746	Make the edit field in transaction description read-only
743	This re-implements pull#714, using system() (which does work on Windows) and boost::thread(). Help text is: -blocknotify=&lt;cmd&gt; Execute command when the best block changes (%s in cmd is replaced by block hash) Example usage (this is how I tested): ./bitcoind -blocknotify="./bitcoind getblock %s >> /tmp/blocks.txt"
741	Fix "adress" typo in send coins dialog, also update all translations.
740	I hereby certify that I have greped for ever use of CDataStream and find no case where secure_allocator is necessary. Note that this fix increases blockchain download by gmaxwells estimate of some "1000x faster"
738	Makes three critical blocks for cs_mapAddresses smaller, and moves writing to the database out of them. This should also improve the concurrency of the code. Closes #737
735	This introduces CNetAddr and CService, respectively wrapping an (IPv6) address and an IP+port combination. This functionality used to be part of CAddress, which also contains network flags and connection attempt information. These extra fields are however not always necessary. These classes, along with logic for creating connections and doing name lookups, are moved to netbase.{h,cpp}, which does not depend on headers.h. Furthermore, CNetAddr is completely IPv6-ready, though IPv6 functionality is not yet enabled for the application itself.
733	
731	Not all txes with "from"/"to" field are necessarily IP txes. Check for valid bitcoin address first, if not available, fall back to those user-specified fields. - Also, prepare for OP_EVAL by calling all transactions without bitcoin address "SendToOther"/"RecvFromOther" (IP txes are so rare they can be put together with funky OP_EVAL scripts)
730	See #729
728	
727	This is designed to work nicely with gettransaction and new blockhash/blockindex information returned in listtransactions; it is modified from the getblock that was in my monitorreceived patch. getblockhash &lt;index&gt; Returns hash of block in best-block-chain at &lt;index&gt;. e.g. getblockhash 0 returns 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f (genesis block hash) getblock &lt;hash&gt; Returns details of a block with given block-hash. e.g. ./bitcoind getblock $(./bitcoind getblockhash 0) returns the genesis block: { "hash" : "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f", "blockcount" : 0, "version" : 1, "merkleroot" : "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b", "time" : 1231006505, "nonce" : 2083236893, "difficulty" : 1.00000000, "tx" : [ "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b" ], "hashnext" : "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048" }
726	This moves all of the "if running over Tor" logic to one place (in init.cpp). It also fixes issues where settings made in the GUI (like fUseProxy) and stored in the wallet could not be over-ridden in the bitcoin.conf file or command-line, by moving command-line-flag-setting code to after the wallet has been loaded. That also meant moving the "bind to listen port" to after the wallet was loaded, but that should be OK 99.99% of the time because the lock file is still checked early to protect against accidentally running bitcoin twice.
723	
721	This supercedes the first half of pull #556 (the second half was already merged in pull #695), moving the new information (along with other mining-related information) to a new getmininginfo JSON-RPC method (as requested by Gavin). The old information is still in getinfo for compatibility, but is noted as deprecated.
720	
719	This enables miners to manipulate their coinbases. Documented on the [wiki](https://en.bitcoin.it/wiki/Coinbaser). At least Eligius (400 GH/s) and Eclipse (235 GH/s) are already using it, and slush (1.3 TH/s) intends to. Accepted by Gavin for merging in the 0.6 window December 02, 2011.
717	
716	Several miscellaneous code cleanups: + Removed all mention of BORLAND_C : we dont (and never have, as far as I know) support that compiler. + All modern C++ compilers support long long for 64-bit integers, so removed the windows #ifdefs + Replaced all occurrences of INT_MAX/etc with the typesafe std::numeric_limits<> methods + Replaced a constant 10,000-byte buffer with a properly ECDSA_sizeed vector (and removed a memcpy)
715	... by sending the correct codebase name of Satoshi and, if PUBLIC_CLIENT_NAME is defined, the front-end name after that
714	This supercedes pull request #555 in a more flexible manner, including Windows support. To get the same behaviour as: -blknotifypidfile=/path/to/some.pid Now you do: -blocknotify=kill -USR1 $(</path/to/some.pid)" You can also use this with multiple pidfiles on the command line, or with cURL to issue a web request.
712	Raise the connection limit by 10 for local P2P connections, preventing P2Pool and testing efforts from being affected by the global connection limit.
709	Add sipa and my DNS seeds
708	GitHub fail. It screwed up the pull req while merging updates from master... sigh
707	This replaces VERSION with PROTOCOL_VERSION (defined in serialize.h) and CLIENT_VERSION (defined in main.h). I also define CLIENT_NAME as either "bitcoind" or "bitcoin-qt" in main.h. The getinfo() RPC command returns CLIENT_VERSION as "version" (same as before) and PROTOCOL_VERSION as "protocolversion" (new). CLIENT_VERSION is recorded in the wallet.dat as "version". And PROTOCOL_VERSION is used for all the network serialization stuff. There is a TODO here related to the CAlert feature, but doing it will require more thought/work. And Ive got another change to CAlert (give testnet its own alert keypair) thatll be a good time to change it. I decided against new command-line arguments / bitcoin.conf options to make it really easy to override the CLIENT_NAME or CLIENT_VERSION reported to peers; those would be easy-to-add-later features.
706	
705	This merges (including conflict resolution) various pulls ACKd for 0.6: * #677: API: GetMinFee modes * #569: Coinbaser * #669: Multisignature and OP_EVAL support * #629: QR Code generation via libqrencode * #582: Bitcoin-Qt signmessage GUI
704	
700	May not be the best way to do it, but its simple and it works.
699	Most Qt programs do this, and it can be useful to find out what version of Qt was built against for bug reports.
698	Trivial fix for passphrase dialog. - Enable wordwrap for long message in passphrase dialog - Remove explicit resizing from constructor to prevent potential hang/disappearance of window
697	This should fix once translations are updated to reflect this change.
695	This is only the second part of "txinfo", which is ACKd.
694	
693	- In a previous patch, show() was added to all the page switcher functions. As the constructor calls showOverviewPage(), this means the window is shown in the constructor. - This change prevents this by connecting show() to the signal instead. Overall functionality remains the same.
691	If the "minimize to tray"-option is in effect, and the Qt GUI is started with the "-min" option, the main window will not be recoverable from the tray icon by double clicking it. This is only the case if the main window is minimized to the tray in the start-up phase (by running window.showMinimized() in qt/bitcoin.cpp:main()). After the main window has been shown for the first time (in a minimized state), minimizing to the tray works again. This relates to pull request #679.
690	To be able to not show the splash screen when the "-min" option is specified on the command line, we need to parse the command line options in Qts main() function, before AppInit2(). This is also useful if we want to be able to override system language settings using a command line option (#678).
687	Someone (me) forgot to enable RPCSSL in gitian builds...
686	Allow mining of min-difficulty blocks if 20 minutes have gone by without mining a regular-difficulty block. Normal rules apply every 2016 blocks, though, so there may be a very-slow-to-confirm block at the difficulty-adjustment blocks (once per month, assuming testnet is in its normal "difficulty too high for number of people mining it" state). This will almost certainly cause a testnet blockchain split after Jan 15. Ill update the Testnet Faucet, Ill ask theymos if he can update the testnet block explorer bitcoind. (date slipped from Jan 1 to Feb 15)
685	bitcoin/src/qt/locale/bitcoin_zh_CN.ts
683	Implements issue #657, and part 1 of issue #648 * TransactionView: Copy amount to clipboard * AddressTablePage: Copy label, address to clipboard, edit * Also, unify similar code related to copying table fields to clipboard
682	
679	The -min command line option, according to the help text, is supposed to start bitcoin minimized. This pull request implements this functionality again. See issue #671.
677	This replaces the fForRelay flag in the GetMinFee function with an enum mode parameter (GMF_{BLOCK,RELAY,SEND}), to allow more fine-tuned fee rules. The end goal is an API for allowing users to customize their fee schedules.
676	This change is useful for programs that might send payments to pubkeys, such as P2Pool. Currently, the only way to do this is to require the user to enable IP transactions and then use the "checkorder" bitcoin P2P command. However, checkorder may be removed and using it is very clumsy. Background: Using public keys wherever they can be used is good for the bitcoin network. The total size of a txout and claim txin is smaller when using them, as the pubkey hash is never included and there are several less opcodes.
673	Storing fewer time samples makes a nodes time offset more accurate following system clock adjustments, uses less memory and avoids a possible memory exhaustion attack. The only part of this patch Im not entirely pleased with is the choice of 200 as the limit. In my tests, thats roughly two hours of network activity. I chose two hours because it seemed about right, but have no rational basis for the decision.
670	Caches rpc username and password in static vars, to avoid the overhead of a lookup into mapArgs. Mining pools that handle a lot of getwork calls like this. Note: I also did a quick benchmark of using a boost::unordered_map for mapArgs instead of a std::map, but unordered_map was slightly slower.
669	This implements BIPS 11, 12, and 13 : * OP_CHECKMULTISIG transactions supported, for up to 3 public keys, as standard transactions * OP_EVAL (same opcode as OP_NOP1) as a new opcode * New OP_EVAL-based standard transaction type and Bitcoin address * Blocks mined with this patch will have the string "OP_EVAL" in the coinbase scriptSig, so we can tell when a majority of miners support it. * New RPC command to add a multisignature-required address to the wallet: addmultisigaddress &lt;nrequired&gt; &lt;["key1",...]&gt; &#91;account&#93; (enabled only for use on the -testnet for now) * The validateaddress RPC command shows the full public key of addresses in your wallet * Internal changes so if you own all the private keys of a multisignature transaction, then you are able to spend the transaction (and the amount shows up in your balance, and the transaction is listed in listtransactions output) There is still a lot of work to be done to get multi-device transaction authorization or multi-party escrow; in particular, this pull doesnt include any support for gathering transaction signatures from multiple places or showing the user transactions that they are involved in but cant spend without getting more signatures from other devices/people. It just implements the lowest-level support, along with the bare minimum needed to test to make sure the lowest-level stuff is working properly. To test / play with: 1. Run bitcoind -daemon -testnet 2. Get public keys from 2 or 3 new bitcoin addresses-- e.g. run this twice: ./bitcoind -testnet validateaddress $(./bitcoind getnewaddress) 3. Generate a new multisignature address using the public keys from validateaddress-- ./bitcoind addmultisigaddress 2 ["...public_key_1...","...public_key_2..."] 4. Send funds to that address -- ./bitcoind sendtoaddress ...result of addmultisigaddress... 11.11 Step (4) can be done from another ./bitcoind, either on another machine or same machine, different -datadir, as long as it is running this patch. The coins should show up in the wallet, be listed in listransactions, and you should be able to spend them as if they were single-signature transactions. Step (2) could be done on two or three different machines, but without more work youll have no way to spend coins sent to the resulting multisignature address.
667	* Make home icon blue and flip light gradient direction * Make address book blue
666	This finishes a TODO comment: // TODO: mlock memory / munlock on return so they will not be swapped out, really need "mlockedstring" wrapper class to do this safely SecureString is identical to std::string except with secure_allocator substituting for std::allocator. This makes casting between them impossible, so converting between the two at API boundaries requires calling ::c_str() for now. The lack of implicit casting between the two was a big advantage in making this patch thorough, since the build would break if not all the prototypes were updated. So it should also be a feature in making sure implicit casts (meaning gratuitous copies into non-locked memory) arent accidentally introduced in the future. Passphrases are now only copied from non-locked memory in askpassphrasedialog.cpp (from Qts QLineEdit / QString) and in bitcoinrpc.cpp (from whatever library is providing Array; I couldnt tell).
663	See issue #659
662	
655	
654	Prevents bitcoin from blocking startup due to a slow dns resolver, or a broken dnsseed.
653	
652	
649	This patch enables compressed pubkeys when -compressedpubkeys is passed. These are 33 bytes instead of 65, and require only marginally more CPU power when verifying. Compressed pubkeys have a different corresponding address, so it is determined at generation. When -compressedpubkeys is given, all newly generated addresses will use a compressed key, while older/other addresses keep using normal keys. Unpatched clients will relay and verify these transactions. Tested on testnet with both normal and encrypted wallets, using compressed and non-compressed keys. Initial idea and tests for this patch were done by roconnor.
646	
636	Testing Bitcoin-Qt on my mac, I got a crash when running 0.5rc4 on a previously-encrypted wallet, after clicking the "you must restart" dialog box OK button. This catches the exception that is causing the problem (DbEnv::close(0) is upset about an invalid parameter), but Im still concerned that I havent found the root cause-- I still dont know WHY the exception is thrown.
635	Unencrypted private keys could remain in the wallet.dat file (and other berkely db database files) after wallet encryption. This pull request does several things to fix the problem: 1) Completely rewrites the wallet.dat file upon encryption. 2) Removes all keys from the keypool so they will not be used for new transactions (they are encrypted and stored in the new wallet, in case any bitcoins are sent to them). 3) Modifies the database code so temporary database files are cleaned up when bitcoin shuts down 4) Successful encryption of the wallet is now followed by a shutdown, so old unencrypted private keys that might have been in the databases caches will not be written to the new, encrypted wallet file.
634	Invoke doxygen from project root using: doxygen doc/Doxyfile Im going to generate these daily from -master and upload them to Let this be the first step toward better developer documentation :)
633	This leads to the bitcoin core being shut down while the UI is accessing it, and generally results in a segmentation fault or crash. In case it is desirable to make it possible to shutdown the GUI from its RPC server, well need to implement a signal for it. For the mean time, this is a safe stopgap. Reproducing the bug: bitcoin-qt -testnet -server -datadir=&lt;new directory> Output: Warning: To use the "-server" option, you must set rpcpassword=<password> in the configuration file: /tmp/test/testnet/bitcoin.conf If the file does not exist, create it with owner-readable-only file permissions. Segmentation fault Also changes the Warning to an Error (as it is kind of fatal, terminating the rpc thread).
632	This RPC is exactly identical to getblockcount. This duplication dates back to commit 22f721dbf23cf5ce9e3ded9bcfb65a3894cc0f8c when Satoshi created the RPC interface. Theres no need to have both, so we standardize on "count" which matches the naming convention in getconnectioncount.
631	This solves a lot of the copyright issues with LGPLd Nuvola icons, but not all yet (a couple of them look hard to find replacements for, especially the animation).
629	Added QR Code generation button to address book page, a dialog to display the result including fields for label, message, and request amount (the latter visible only for personal addresses). Images can be saved to disk. Codes use the bitcoin URI scheme described here: Enabled via qmake option USE_QRC.
619	Handle null models gracefully in the views; this prevents segmentation faults such as issue #595 and #615 from happening.
618	See issue #615 for discussion. Fixes the segmentation fault and pre-fills the new address in the add address dialog.
617	This patch documents the translation process using transifex.
611	Added a few extra source code comments.
609	Add translation of zh_TW locale. Unfortunately it will not be picked up by Mac OS X 10.6 due to QTBUG-9925, should work fine in other platform.
608	Re- pull requesting this as laanwj closed the previous one before discussion was complete. See #600 for previous discussion.
607	Update bitcoin-qt.pro to (optionally) static link. Update gitian linux build to static link everything except qt (and force users to have the qt libs on their system)
606	The source code uses code like: text = tr("%n hour(s) ago","",secs/(60*60)); to produce nice looking plurals in any language we translate to, but we dont have an English translation, and so the user sees "1 hour(s) ago". This commit adds an English translation which defines the correct plural strings for the 6 strings that need them: ./src/qt/transactiontablemodel.cpp: status = tr("Open for %n block(s)","",wtx->status.open_for); ./src/qt/bitcoingui.cpp: labelConnectionsIcon->setToolTip(tr("%n active connection(s) to Bitcoin network", "", count)); ./src/qt/bitcoingui.cpp: text = tr("%n second(s) ago","",secs); ./src/qt/bitcoingui.cpp: text = tr("%n minute(s) ago","",secs/60); ./src/qt/bitcoingui.cpp: text = tr("%n hour(s) ago","",secs/(60*60)); ./src/qt/bitcoingui.cpp: text = tr("%n day(s) ago","",secs/(60*60*24)); says: "To obtain a more natural English text, you need to load an English translation."
604	It took a lot of testing and experimentation, but these changes make the qt-win32 gitian build deterministic, and stop the build from randomly hanging on qmake in a loop due to time conflicts. They also shorten the build time and reduce library size by disabling more qt features such as OpenGL that we dont use. Hopefully, this is reproducible on other computers as well. The output hashes are: 7996f302a7ea07a7c3728c857ca0ed783dd96fc49898cf149432787b93016ce6 qt-win32-4.7.4-gitian.zip dbdda19724304cb7006c6bcfe851a4b91f9939f9f282eec24d6768f8070126e7 qt-res.yml
603	I noticed that mac builds created with this script still has /opt/local/lib/db48/libdb_cxx-4.8.dylib hardcoded. This fix should fix the problem. And it doesnt look like we are using libqt.3.dylib. I assume this was copy pasted from somewhere and it was just never fixed.
602	Instead of using an ugly loop hack that swallows break and continue, I have replaced it with a simple if statement. Please comment and/or apply!
600	I know jgarzik didnt want this, but IMHO it belongs in the repo instead of (insert name of third party here)s repo. If the ubuntu/ubuntu ppa is to be linked on bitcoin.org (which I very much believe it should be), I would say its much better to have a debian folder in bitcoins src, even if it just sits there and only one or two third-partys update it via pull requests instead of the core team keeping it up-to-date. Note that this is essentially how the gitian scripts have been done for the past many releases, also just because a debian/ folder is here, doesnt mean any core devs have to deal with releases or the bitcoin/bitcoin ppa, it just makes the build process a bit more transparent and a bit more public. Anyway, its open for discussion.
598	See issue #587 Removes -fstack-protector in Windows to make executable work, and makes bitcoin-qt build deterministic The SHA of bitcoin-qt.exe after gitian build is: `4095613a82116949b72a30cee579ded07236d382acc7db6da91b96b9f9e2abf6`
593	This adds support for opening bitcoin-qt to handle a URL instead of just drag-and-drop URL support (which has been available in bitcoin-qt since before merge). Again it does not support OSX as you have to add OSX-specific URL handling and I dont have access to any OSX boxes to code that. This does add hooks to add Bitcoin as the default bitcoin: opener for Win32 in the nsis installer, also the bitcoin-qt packages in the bitcoin/bitcoin ppa on launchpad install gnome hooks for the same. Details: If bitcoin is already running, the launch of the second process will use boost/interprocess/ipc/message_queue to send the URL to the running process which will handle it. Otherwise the new process will launch to the send coins window. Because of this, if bitcoin crashes, links will have to be clicked 3 times before bitcoin will open.
592	As requested in
591	Improve translation look-up logic. This properly handles cases where a translation is available for the language but not for the specific territory (ie, "es_AR" now falls back on "es" not the default "en_US"). - use wildcard for TRANSLATIONS in bitcoin-qt.pro to automatically build all translations present in src/qt/locale (thanks - first load translations/&lt;language>.qm, then translations/&lt;language>_&lt;TERRITORY>.qm, so that territory-specific translations take precedence, but the fallback is on the base language if no territory-specific translation exists
590	Ive again updated the German translation, this time of the Qt version.
587	This updates gitian descriptors and adds a few workarounds. Note: THIS DOES NOT WORK, the resulting bitcoin-qt.exe is broken, Im just pull-requesting this to notify people and let others have a look at the result and attempt to fix the issue.
586	Added a workaround for an Ubuntu bug which causes -fstack-protector-all to be disregarded. this causes some functions not to be protected and leads to a warning: "warning: not protecting function: no buffer at least 8 bytes long" The bug which this is working around:
584	(32bit dependencies through MacPorts)
583	* qmake build system * USE_UPNP with same default as makefile-based build system (default to link to libupnp and enable it. allow overriding with USE_UPNP=0, USE_UPNP=1) * Fix USE_SSL * Improved mac experience by ( ) (growl notification etc) * Remove useless options from "file" menu * Allow switching between tabs with alt-1..5
582	
579	Sorry about that, hope i didnt miss something else :)
578	
577	
576	Add support to makefile.unix for the same parameters used by bitcoin-qt.pro, dynamic linking unless STATIC=1 is passed
575	strip bitcoin -> strip bitcoind. Segregate generic dependency information from Ubuntu/Debian distribution-specific dependency build information. Add tested Gentoo distribution-specific build information.
574	Introduces three new RPC calls: * dumpprivkey: retrieve the private key corresponding to an address * importprivkey: add a private key to your wallet * removeprivkey: delete a private key from your wallet
573	Bugfix: "bits" should be a hex-string, not a number (that just doesnt make sense) (suggest waiting for ACK from original getmemorypool author)
572	Hi, I was writing a script for automated cross-build (Linux -> win64) for bitcoin (https://github.com/delirium---/bqt-autobuild) and met some issues with building the client. One is solved in attached commit DWORD and DWORD_PTR have same size of 32bit systems but different on 64bit.
570	Disables automatically adding "minimum" fees for JSON-RPC methods-- instead, it returns an error or, iff the user sets the new second parameter "force" to the settxfee JSON-RPC call, sends the transaction with the user-specified fee. This second parameter to settxfee is only enabled if bitcoind is started with the undocumented -nosafefees option. Currently 4/6 support this change:
569	Allow customizing what addresses are paid by generation, with failover to the standard "50 BTC to me" behaviour; also adds the "setworkaux" JSON-RPC call to add arbitrary data to the coinbase, which can be used to implement merged-mining (has safeguards against creating invalid coinbases) The internal code changes for "setworkaux" can also be used to put "feature flags" in coinbases, to enable upgrades (like OP_EVAL) when X% of the last Y blocks advertise support (after which, they should stop advertising the flag to make room for future content). Eligius has tested this changeset quite a bit under the 0.3.23 codebase. The "setauxwork" JSON-RPC method has support for addition:
568	This is a combination of my older multithreaded patch and parts of JoelKatzs 4diff patch. My original patch was required to get Eligius started and had testing from early 2011 until a few months ago when I merged it with JoelKatzs code (which fixed SSL JSON-RPC and added keepalive support). Since then, the combination has had plenty of testing on Eligius with the 0.3.24 codebase.
567	
566	Use Cs const char* for status strings rather than C++s std::string, which is slower
565	Detect typical getwork calls and accelerate them. Bypass the JSON request parser, and the JSON reply builder. This is split out of JoelKatzs 4diff patch. It needs testing.
564	From JoelKatzs 4diff. Is this safe?
563	From JoelKatzs 4diff.
562	Part of JoelKatzs 4diff patch.
561	Straightforward optimization
560	Stash the RPC user and password in a global string so we dont have to fetch them from the map on every RPC request.
559	Adds a -acceptnonstdtxn option to allow miners to easily accept "non-standard" transactions We probably want to amend this with a block for OP_NOP*?
558	Report errors creating ThreadSocketHandler thread just like the rest
557	Disables automatically adding "minimum" fees for JSON-RPC methods-- instead, it returns an error or, iff the user sets the new second parameter "force" to the settxfee JSON-RPC call, sends the transaction with the user-specified fee. This only affects JSON-RPC users, who should be assumed to understand the risk of sending with insufficient fees.
556	Adds "pooledtx" (number of transactions in memory pool), "currentblocktx" (number of txns in the last block created), and "currentblocksize" to the output of the JSON-RPC getinfo method. Adds "block_hash" and "block_index" to transactions shown by listtransactions and similar JSON-RPC methods. Been using this since 0.3.21 without issues.
555	-blknotifypidfile option to send SIGUSR1 to a PID when theres a new best block Used by basically every pool now, it just sends SIGUSR1 to a poolserver.
554	Most distros dont have static libraries installed per default, while shared libraries are ubiquitous.
553	This syntax has had plenty of time wasted arguing over whether it should be tolerated syntax; please dont bother wasting more time on that discussion. I cant force anyone to merge it, but I can at least make it easy for those who decide to tolerate it. Please keep in mind that it doesnt hurt the BTC-only URIs at all, and if nobody ends up using it for other units, it can always be removed later. Best case scenario: people use it and bitcoin-qt works correctly Worst case scenario: people dont use it, and it can be removed For 5 cBTC, use: amount=5x6 For 5 mBTC, use: amount=5x5 For 5 BTC, use: amount=5x2 For 5 Satoshis, use: amount=5x0
552	A faster Base58 parser with tolerance for typos: Zero and uppercase o are treated as a lowercase o; lowercase L, pipe, and exclamation point are treated as a one.
551	This replaces the fForRelay flag in the GetMinFee function with an enum mode parameter (GMF_{BLOCK,RELAY,SEND}), to allow more fine-tuned fee rules. The end goal is an API for allowing users to customize their fee schedules.
550	Allow customizing what addresses are paid by generation, with failover to the standard "50 BTC to me" behaviour; also adds the "setworkaux" JSON-RPC call to add arbitrary data to the coinbase, which can be used to implement merged-mining (has safeguards against creating invalid coinbases) The internal code changes for "setworkaux" can also be used to put "feature flags" in coinbases, to enable upgrades (like OP_EVAL) when X% of the last Y blocks advertise support (after which, they should stop advertising the flag to make room for future content). Eligius has tested this changeset quite a bit under the 0.3.23 codebase.
549	Added walletchangepass.py and walletunlock.py to contrib/wallettools. These are two simple python scripts which send the appropriate RPC commands to unlock a wallet and change a wallet password. They are intended to prevent users from having to enter their password as a command-line argument which could then be stored in the console buffer/history in plaintext. Both tools rely on bitcoin/bitcoind running with server=1 and an rpcuser and rpcpassword set in bitcoin.conf. They can be easily modified for non-standard ports. walletunlock.py unlocks the wallet for 60 seconds by default, changeable in code, and both modules rely upon python-json-rpc (http://json-rpc.org/wiki/python-json-rpc) Signed-off-by: David Perry <enmaku@gmail.com>
547	
545	Reading ```addr.txt``` is an unexpected side effect of LoadAddresses(). This feature is likely not used by anyone as its not documented anywhere.
543	ParseMoney checks for a maximum number of digits before the dot, returning invalid if that is exceeded, supposedly guarding against overflow. However, this amount is set far too lenient (14) making it possible to overflow from positive into negative integer values: 10 9999999999.99999999 -> 9999999999999999999 11 99999999999.99999999 -> -8446744073709551617 ... This commit sets the maximum number of digits before the dot to 10, the maximum safe value. It also adds unit tests for various functions in util.cpp/util.h and base58.
542	* USE_SSL=1 to support RPC SSL * BDB_LIB_SUFFIX= to link against specific BDB version * Fix typo * Start lrelease during qmake phase to prevent errors/warnings
541	This adds initial support for three new types of transactions: (a and b) (a or b) (a and b) or c ... where a/b/c are keys. These new transaction types will enable better wallet security and backup in future versions of bitcoin. Ive taken a conservative approach with this initial pull; the new transaction types will be relayed and included in blocks, but are ignored by the wallet code, so will not affect the balance and will never be considered available to spend. Im going to start a discussion on bitcoin-dev to do a bit of a brain-dump on what NOT to do with multi-signature transactions (there are several potential attacks that well need to be careful to avoid). Ill be creating a multisig_testing branch in the gavinandresen github fork that WILL add multisig transactions to the balance, will have a new RPC call to create multisig transactions, and will be able to spend the multisig transactions; that will be for testing this PULL only for now.
539	Some important (and less important) updates for the Qt UI Core: * use median filter (`CMedianFilter`) for peer-reported reported number of blocks * this fixes problem that one misconfigured or malicious node can mess up progress bar * implementation in `src/util.h` * testcase in `src/test/util_tests.cpp` UI: * Translation handling * Include translations as resource, so that they are included in the executable. This saves a lot of hassle on installation (less files to worry about), and is similar to how other Qt applications do it * In resources, use `nl_NL` format instead of `nl`, so that the correct translation is chosen based on system locale automatically * Improve send coins screen * Add balance to remind users how much they can send * No longer clear input when switching tabs; this is non-intuitive and can cause loss of work. Instead, add a "clear input" button. Build system (qmake): * Add `BOOST_LIB_SUFFIX` option to make it possible for distribution install scripts (such as Gentoo) to pass in alternative boost library version names without resorting to sed hacks * Factor out windows/mac specific include, lib paths so that they can be overridden (overall result is still the same) * Dependency library locations can be customized with `BOOST_INCLUDE_PATH`, `BOOST_LIB_PATH`, `BDB_INCLUDE_PATH`, `BDB_LIB_PATH`, `OPENSSL_INCLUDE_PATH` and `OPENSSL_LIB_PATH` respectively * Build translations (.qm) automatically in make, no need to run lrelease separately anymore Minor: * Add `Q_OBJECT` everywhere it should be according to Qt rules (removes warnings when lupdate parses sources) * Use `USE_DBUS` define instead of `QT_DBUS` to switch Linux notification mode, to prevent conflicts in some Qt versions * Update `OTHER_FILES` section in Qt creator so that all documentation is shown, now that both projects have been fully merged
538	This adds ```(DEPRECATED)``` to both ```midstate``` and ```hash1``` in ```help getwork```-RPC. The idea is to remove both fields "soon". ```hash1``` is a buffer the miner should use to insert the hash between both ```SHA256()``` calls. It contains some bytes for padding. These are standardized in the SHA256 spec and all the popular miners have them hardcoded for performance reasons so there is no need to provide it with every getwork. ```midstate``` contains the internal SHA256 state after hashing the first half of the blockheader. This can be easily done in miners as they are already doing lots of SHA256 iterations and have probably faster algorithms than bitcoind. Deprecating these fields will allow for cleaner code in ```main.cpp /BitcoinMiner``` (i.e. only build blockheader without any hashing or formatting of buffers) and will make it easier to remove cryptopp from the source tree.
537	This removes support for labels (the same functionality is available using the account system). RPCs removed: * ```setlabel``` * ```getlabel``` * ```getaddressesbylabel``` * ```getamountreceived``` * ```getallreceived``` * ```getreceivedbylabel``` * ```listreceivedbylabel``` Responses changed: * ```ListReceived``` will not include the key ```label``` anymore
536	
535	* removes cryptopp dependency in BitcoinMiner() and replace it with OpenSSL * add simple unittest for SHA256Transform() This has only been tested on Linux so it would be great if someone can try this on win/osx.
534	The attack this prevents: Generate valid low-difficulty blocks (maybe built on top of an early part of the block chain) and send them to a bitcoin node. Before this patch the bitcoin client could store an arbitrary number of them in memory or on disk, in case they later became part of the main chain. Two checks are added: 1) Blocks before the last blockchain lock-in are rejected, and the peer sending these obviously-not-part-of-the-main-chain blocks it will be disconnected and banned. 2) Blocks must have a plausible proof-of-work. It is impossible for a difficulty 1.0 block to follow a difficulty 1-million block (it would take at least 19 months for difficulty to drop from 1-million to 1). Blocks with too-low proof-of-work are ignored, and peers relaying them are disconnected/banned. Requiring plausible proof-of-work for orphan blocks or alternate chains foils this attack (you would have to be able to generate valid blocks near current difficulty).
533	Sorry I am resubmitting this, had an issue deleting a branch. I have updated the commit to mention Jeffs recommendation for warnings. Is the old pull
532	
530	Some German text corrections. I would propose to phrase all messages as so it never disrespects the user. Meaning not saying: "Do you really want to do this?" but more informative: "You are going to do this."
528	
527	
526	
525	
524	This is a reworked version of #183 Adds two RPC commands: * signmessage [address] [message]: create a base64-encoded signature string * verifymessage [address] [signature] [message]: verify whether a signature string is valid The signature string contains both the ECDSA pubkey and signature, to allow address-based verification. Verifymessage simply returns true or false. This pull request also contains a full inline base64 encoded and decoder, replacing the openssl-based code. The decoder is based on JoelKatz base64 decoder from #430.
523	These timers will help to cut down on the abandoned issues / pull requests. Labels will be added so that these can easily be searched in the issue tracker.
522	One small fix from #385 that wasnt merged yet.
521	This pull requests merges in the Qt GUI ( ). This introduces a qmake-based build system completely orthogonal to the current build system and UI code. All qt-related source files and resources are added under src/qt: 135 of the 154 "Files Changed" are additions. Changes to core code have been kept to a minimum and are generally guarded by #ifdef or clearly UI-specific. Outline of changes to core: * Add InitMessage calls to initialization sequence, for splash screen. These do nothing on Qt or GUI-less builds * #ifdefs for QT GUI specific changes: there is no default or preferred receiving address, and no visible addresses are generated without the users intervention * Keep track of maximum block count of peers (GetNumBlocksOfPeers), for visual indication of progress * Translation functions and printf take std::string instead of char*, to allow _ to safely redirect to Qt translation service * Add GetUnconfirmedBalance() call to CWallet, to be able to show non-confirmed balance in home screen * rpc.(cpp|h) renamed to bitcoinrpc.(cpp|h) to satisfy qmake build system on Windows Discussion on forum: and
520	This patch wraps three debug messages (```sending```, ```received``` and ```got inventory```) in ```if (fDebug) {...}```. I analyzed ```debug.log``` on a few long-running bitcoin nodes and noticed > 80% of debug.log is composed of those three messages. Thus this patch should greatly reduce debug.log size and disk I/O. * ```sending``` is triggered whenever a low-level message is sent (i.e. ```sending: inv (37 bytes)```). * ```received``` is triggered whenever a message is received (i.e. ```received: inv (37 bytes)```). * ```got inventory``` is triggered when an ``inv```-message is received.
519	Updated based on original strings from #512.
517	The big idea: if a peer is sending you obviously wrong information, punish it by maybe dropping your connection to it, and ban its IP address so it cannot immediately re-connect. The probability of dropping the connection, and the length of the ban, depend on how wrong, and how potentially wasteful/damaging, the peer is. So sending an extra version message is a minor transgression that is usually tolerated, sending an more than MAX_BLOCK_SIZE block is a major transgression. Detailed how-it-works, using "I got a version message I wasnt expecting" as the specific example: Getting a version message from a peer increases that peers misbehaving score by 10, and (assuming that is the peers first bad behavior) gives it a 10% of being disconnected. If it is disconnected, then that peers IP address is banned from connecting for a couple of hours. If it is not disconnected, then nothing happens unless the peer misbehaves again; if it does, then its chances of being disconnected go up, and the length of time it will be banned increases. Misbehavior/ban information is stored only in memory, and information about misbehaving peers is never broadcast. Also, peers that are disconnected/banned are just dropped, there is no warning or reason sent. I think this will eliminate a lot of potential denial-of-service attacks, and could be a good framework for responding to other potential attacks. "We" should still look through the code and limit the potential size of any data structures that an attacker might target (transaction pool, orphan block pool); the DoSprevention changes are meant to make it harder for an attacker to stay connected long enough to pull off an attack. The danger is that I got something wrong; what if an attacker can leverage the DoSprevention code to split or shatter the network? Heres my thinking on that, please help check my work: + Im relying on TCP to prevent IP address spoofing (otherwise an attacker could force you to disconnect from your peers by pretending to be them and sending you a bad block). + Peers are only penalized for sending messages that wont, and shouldnt, get relayed. So an attacker shouldnt be able to poison the network with a bad message that is propogated and then causes everybody to disconnect from everybody else. + I specifically do not punish peers for relaying what look like double-spend transactions. If I did, then an attacker could try to segment the network into two pieces by broadcasting a series of double-spends from two halves of the network, and waiting until the nodes "in the middle" disconnected/banned across the seam. So: please let me know if or how Im being an idiot. Im still thinking about the best way of testing this; at the very least, running a node for several days with this patch applied should result in a minimal number of "disconnected %s for misbheavior" messages in debug.log.
516	This adds a 32x32 16-bit icon to the bitcoin.ico file. Though this realistically probably looks worse than the 32-bit 32x32 being displayed on a 16-bit monitor, it makes the nsis setup exe deterministic in gitian output (go figure) which makes the slight visual loss for users of very old monitors/computers worth it.
513	Ive been running bitcoin gui with these changes for a few days with no obvious effects and they are very common.
512	New wallet encryption + small fixes
511	This time with the binary .mo file removed.
510	In order to stay in line with the current wishes of the community as seen on the bitcointalk forums I request that this be merged ASAP!
509	wxWidgets needs to be at least version 2.9.1 because wallet crypto uses ToStdString() which is not in 2.9.0
508	Apparently I cant test right nor code right... Thanks to makomk for finding the bugs here and devrandom for passing them along (see
506	Even though it no longer triggers RPC safe mode there is some concern that it could still be misused. Signed-off-by: David Perry <enmaku@gmail.com>
505	Fix from luke-jr, I reviewed the code but have not tested. Rough sketch of a test plan: + Run clean testnet-in-a-box bitcoind, with -keypool=1 + Encrypt the wallet + Run bitcoind getnewaddress until it tell you keypool is exhausted + Generate a couple of blocks via internal miner -- verify: coinbase transactions have unique txids even though they pay-to default key + Generate a couple of blocks via getwork RPC call -- verify: coinbase transactions have unique txids
504	New wallet encryption + small fixes
503	
501	Translated including the new wallet encrypt options
500	Thanks to Pieter for the detective work finding this. Bug was a deadlock when the process-messages-thread and the IRC thread were adding peer addresses at the same time. I inspected the code for any other cases where starting a database transaction might trigger this type of bug, and all other cases are OK. Ill keep thinking about how to get the DEBUG_LOCKORDER code to detect this in the future. Tested by running bitcoind, letting it connect and startup (and join an IRC channel), then shutting it down repeatedly (10 times in a row) and observing no deadlocks.
499	
498	
497	Romanian translation with the new wallet encrypt options included
496	I have tested this with Ubuntu 11.04 and it repairs the wx build bug: Thanks luke-jr!
495	Updated this from
492	This change skips ECDSA signature verification for transactions during the initial block-chain download, which makes downloading the block chain much faster. "Initial block chain download" is all blocks up to 120 blocks before the last blockchain lock-in point. Reasoning for why this is safe: If an attacker tries to feed a client bad transactions during the initial block-chain download (transactions with invalid signatures), then they change the merkle tree, and at the first blockchain lock-in the bad chain will be rejected. Transactions are still checked for orphan blocks that come in during initial block-chain-download (ConnectInputs will be called with fBlock=FALSE) and for mined blocks (ConnectInputs called with fMiner=TRUE).
491	Patch from ArtForz, who discovered the problem. The problem was chaining large transactions (transactions with lots of ins and outs) would make the berkeley db transaction log get very big, as the dependencies (TxIns) of a transaction might be re-written multiple times. With this fix, each each transaction referred to by TxIns is written once.
490	My bad...
488	
487	
486	
484	Nodes culled from MagicalTuxs database of bitcoin nodes, by version and longevity, and tested for connectivity.
480	I collapsed several wallet mutexes into two: one for the keystore, and one for the wallet. That fixes many potential deadlocks due to wallet code acquiring the various locks in different orders. And I fixed several other potential deadlocks by requiring that code that needs both the cs_main and cs_wallet mutexes acquire them in that order. One somewhat scary semantic change: Transaction times reported by in the rpc interface and in the GUI are now always the time the transaction was received by this node (and not the average-time-of-the-last-n-blocks-that-the-transaction-ended-up-in). Having transaction times change as they were confirmed was a mistake, in my humble opinion, but the main reason I changed this behavior was so that CWallet::GetTxTime() doesnt require the cs_main lock. Id like to further compartmentalize locking, but thats a task for another day...
476	Added RPC call getmemorypool to get list of transactions that would be included in a generated block. This is useful for any program that wants to create its own generation transaction while mining. P2Pool recently generated its first block, and this patch would let it include transactions.
475	Added/changed to more common option names (as in popular internet banking systems), also some minor bug fixing (in the about dialog and so on).
474	I hope this time it will be OK. :-)
472	
470	Updated checkpoints up to 140700, making a small commit to help. I could do a checkpoint every 2,100 if that is ok.
468	Here are some improvements for displaying a users transactions (say on a website). 1) it is useful to be able to show the transactions from "newest to oldest" rather then "oldest to newest" 2) by making the call return nothing if the from parameter is greater then the total number of transactions we can implement crude pagination (in lieu of a gettransactioncount api call)
467	Logic running with -keypool=0 was wrong (empty keys were being returned). Fixes #445 sipa, Matt: can you sanity check this? I did some quick testing with/without wallet encryption, running with -keypool=0. Logic is: GetOrReuseKey method should never return empty key. And GetAccountAddress should always complain if GetOrReuseKey has to reuse (== return the default key).
466	Considering that CPU mining is hardly worth the time anymore, especially when solo mining, the internal CPU miner has become next to worthless. As such, remove it to reduce the amount of code that can contain bugs. If you still want to solo mine using your CPU you can use the RPC "getwork" interface with Jeff Garziks RPC CPU miner: Signed-off-by: Giel van Schijndel <me@mortis.eu>
464	Upgrade dependancies and tweak build process. * Upgrade to use miniupnpc 1.6: At least one user has commented that newer releases are more compatible with their (and apparently common) routers. * Upgrade to wxWidgets 2.9.2: No longer need to patch it ourselves for new distros * Upgrade to Bost 1.47 for Win32 Builds Boost has gotten really out of date here because previous releases didnt build (because no one bothered to research why, probably me though I cant claim to remember).
463	A couple incorrect error messages in rpc.cpp and a chunk of text in doc/README. Not sure if anyone wants that much text, but whoever pulls can feel free to edit/amend/strip out what you dont want.
462	General code cleanup in preparation of some much needed improvements to the networking code.
461	Use "#if USE_UPNP" instead of "#ifdef USE_UPNP" to work properly with the makefiles Additionally, dont try to link with libminiupnc when USE_UPNP=0. Signed-off-by: Giel van Schijndel <me@mortis.eu>
460	db.cpp has a number of uses of make_tuple and has using namespace std and using namespace boost. Without qualifying make_tuple, std::make_tuple is preferred, which is incorrect. This patch qualifies make_tuple.
459	Regarding main.cpp has: "char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };" Per discussion on the thread linked, leaving the signedness of pchMessageStart is unsafe for values > 0x80. This patch specifies unsigned char in main.cpp and net.h.
458	To a variation on: // Copyright (c) 2009-2010 Satoshi Nakamoto // Copyright (c) 2011 The Bitcoin developers This bugged my OCD... All files had been changed (even if it was simply a #ifndef BITCOIN_*_H...)
457	The commits in this pull request modify the RPC-connection handling code in such a way that listening for and accepting of incoming connections is performed asynchronous (reading/writing is still synchronous). This allows for listening on multiple sockets at once, which I use in one of the other commits to implement dual IPv4/IPv6 support.
456	ui.cpp: boost::filesystem3::path native_file_string() deprecated (and unavailable by default) Fix is trivial, since only native_file_string().c_str() is used, and boost::filesystem3::path.c_str() does *exactly* the same thing (according to
454	Got tired of telling pool ops to not use hub mode and use -addnode and adding a little asterisk that it would be nice if addnode kept the node connected as a "Bitcoin backbone" should do, so I hacked an implementation together.
452	RPC server will now accept and parse /api/v%d URLs. Any version other than one (/api/v1) will be rejected with 404 not found. URLs outside /api/v%d are ignored by this processing. Code heavily inspired by one of cdhowies commits from which I then pared down quite a bit, and changed the URL portion thereof. Credit for the base changes goes to cdhowie (from which I pared down and changed the code). The API versioning logic, as I understand it from the satoshi days, was that we should simply change the API as needed, because bitcoin is not yet version 1.0. HOWEVER, the logic continued, we should not simply make breaking changes to RPC API willy nilly, simply because we can. The value of the change must outweight the pain of the change, in other words. Thus, adding new RPC calls was never a problem, but _changing_ RPC calls was avoided. I like cdhowies approach sufficiently to think that there would be value in supporting "/api/v1" URL, to prepare for future versioning. Understand, this is NOT a blanket endorsement of pull request #431 with all its changes. This is only designed to add some future proofing in a manner inspired by pull #431.
451	Also Make it clear that setting proxy requires restart to fully apply.
448	Avoid references to addresses using strings, and use CBitcoinAddress as much as possible. Also added some validity checks on addresses entered using RPC. Closes #447
446	Makes Bitcoin identify itself as "Bitcoin + version number" instead of the nondescript "libminiupnpc" when forwarding a port via UPnP. A lot of home routers show this information in their web interface, e.g. DD-WRT:
443	These should be invalid.
442	I got tired of test_bitcoin not building, so I touched up #363. Also added a transaction test which tests derserialization and duplicate txins.
439	This patch does two bug fixing things and has two documentation corrections: bug fix 1) It allows 32bit builds to write to debug.log past 2GB. I need someone to test this on *bsd and win32. bug fix 2) Change GetFilesize to use stat() instead of fseek() to prevent an integer overflow that would prevent >2GB debug.logs from getting trimmed on most (any?) platforms. This function is only currently called by ShrinkDebugFile which has been updated to pass a string instead of a FILE*. documentation update) Add -logtimestamps and -printtoconsole to -? output. This can be tested with: dd if=/dev/zero of=debug.log bs=$((1024 * 1024)) count=2048; tail -f debug.log & bitcoind -daemon; If logs get appended to where debug.log continues past 2GB it is working. Must be tested on a 32bit build. debug.log should also no longer be truncated on startup as that should be left to the user. This can be tested by restarting bitcoind after the fact and ensuring it is not truncated. The additional help output is pretty straight forward to test: is it there? :)
438	Add makefile.unix definitions (tested on glibc, not sure if *bsd libc support these options) to allow debug.log to grow past 2GB on 32bit builds. I ran into this problem when I noticed that debug.log stops updating at 2GB on my 32bit host. This will also make it so that the block chain can grow past 2GB on 32bit builds. We may need some further options for *bsds libc but I dont have available test installs at the moment.
437	I assume these should be commented deprecated because this is commented deprecated
436	
435	ExtractAddress was called with the keystore as argument in RPC and UI, limiting results to own keys. This caused empty "address" fields.
434	trivial fix for function that must return a success value but doesnt
431	This is a two-patch patch against 0.3.24 (since master has a lot of churn in rpc.cpp and I dont want to do all the work merging until I know that this patch has community support). The first commit adds RPC versioning support. As things need to be changed, older clients still need to be supported in some way. This has been done by taking a numeric token from the URL and using that to determine the version. So if the API is accessed at `http://localhost:8332/` then it will use version 0. If `http://localhost:8332/bitcoin.v1` then it will use version 1. And of course, `http://localhost:8332/bitcoin.v2` would be version 2. For the purposes of versioning, I am declaring versions 0 and 1 identical, to avoid confusion. The second commit does two things: 1. Instead of requiring a JSON number, BTC amounts may now be sent as strings. 2. If the service is accessed using version 2 or higher, BTC amounts will be returned as strings instead of numbers. This is an important change, because not all JSON libraries store numbers in a format with 16 decimal digits of precision. Ive tested, and when I set bitcoinds paytxfee setting to 10000000.00000001, Python is unable to handle this many significant digits; it represents the number as 10000000.000000009. While not off by much, it does seem to indicate that representing amounts as pure numbers in JSON data may cause some clients to have accuracy issues. By taking the amounts directly from int64s to strings, the client is free to convert the values to whatever high-precision format it wants (like the `Decimal` type in Python). However, while many languages will convert strings to numbers automatically, many will not, so this change wont be backwards-compatible; hence the new API versioning feature. Here are the effects of this branch, using Python: >>> bitcoindv0 = jsonrpclib.Server("http://chris:testing@localhost:8332/") >>> bitcoindv1 = jsonrpclib.Server("http://chris:testing@localhost:8332/bitcoin.v1") >>> bitcoindv2 = jsonrpclib.Server("http://chris:testing@localhost:8332/bitcoin.v2") >>> bitcoindv0.getinfo()[ubalance]; 0.10000000000000001 >>> bitcoindv1.getinfo()[ubalance]; 0.10000000000000001 >>> bitcoindv2.getinfo()[ubalance]; u0.10000000
430	These are the same changes as my previous pull request. They have been broken down into individual commits by function, with a useful commit message. They optimize profile outliers under a specific test load that represents the load the software sees when its used for pooled mining, that is, when it gets hundreds of RPC requests (mostly getwork) per second.
428	This is a re-issuing of #264, which was lost when merging #334.
427	This commit introduces IPv6 support (selectable at compile time), General changes (even when IPv6 support is not compiled in): * Valid, routable IPv6 addresses are stored and forwarded * Name lookups are done using the general getaddrinfo() call * The detection system for the local address is improved. (addresses are classified according to their reachability, and the most reachable local address encountered is used). * The rule that no two connections to addresses within the same /16 should be attempted, was generalized by defining address groups: * IPv4 addresses are grouped in /16 blocks * IPv6 addresses are grouped in /32 blocks * Tunneled IPv6 addresses use the encapsulated IPv4 address (teredo, 6to4, SIIT, well-known prefix) * Hostnames can be given using the "[host]:port" format. * Support for the "checkorder" message was removed (obsolete, and not worth porting) Behaviour changes when IPv6 support is enabled: * DNS lookups also return IPv6 matches * The listening socket is bound to the IPv6 ANY address (::/128) instead of the IPv4 ANY address (0.0.0.0) * Connections to non-IPv4 addresses are attempted, using IPv6 sockets (connections to IPv4 addresses still use IPv4 sockets) * A local IPv6 address is used instead of an IPv4 one if no routable IPv4 address is available. In this case, it is not advertized through IRC (obsolete). For internal changes, see the commit message. Possible future improvements: * Some pruning/ageing of addr.dat * Cmdline/config options to modify IPv6 behaviour (eg. IPv6-only connection slots, preference for IPv6 connections, ...) * Intelligent choice of nodes to download initial chain from (avoid Teredo tunnels eg.)
426	These are a subset of my bitcoin-4diff patches have been well-tested against the latest release version. Cache the RPC user and password in strRPCUser/strRPCPass so that they dont need to be extracted on each RPC call. Fix a memory leak in the pthreads version of CreateThread.
423	Previously, mapAlreadyAskedFor was read from, but never added to. The original intent was to use mapAlreadyAskedFor to keep track of the time an item was requested and "Each retry is 2 minutes after the last". This implements that intent.
422	This is another dynamic DNSSeed, running the same software as dnsseed.bluematt.me.
421	adds an option to force resending wallet transactions immediately upon startup
420	Added a new argument to getnewaddress - rawpubkey - that makes it return an object with both the address and the pubkey in hexadecimal form. This is useful for programs that interact with the bitcoin network at a lower level (namely, handling public key data) such as p2pool.
395	Open Bitcoin and Send Bitcoin are somehow translated to the same thing, see:
419	I fixed some errors in the translation and added the translation for the wallet encryption feature.
418	Yet another MSVC makefile update.
417	As has been requested by a few people, here is a patch that shows the address coins were generated to in transaction dumps (listtransaction, etc).
415	This patch allows you to: - see all addresses, including change - see which addresses are linked together (does recursive expansion of address linkages) - select which address(es) to send from, rather than letting the client to chose for you Full details and video here:
414	
413	Wired got crossed and non-rebased stuff was merged.
412	Im resurrecting this pull-request by patvarilly, which is very important I think. (OSX users seems even more affected, see Issue #258) The original pull/388 is not available anymore for unknown reasons (404). The first commit already had two ACKs. I added a similar change for DNS seeding.
411	
410	
409	
406	Two more warning fixes (one of which got lost in the rebase for pull request #399).
405	This was a bug, as it was changed unintentionally. Im not sure its such a bad idea though, as autogenerated addresses seem to clutter the address book for many. Maybe a "add current default address to wallet" button would be more useful than auto-adding?
404	Missed a space.
403	Three commits: * The first one gets rid of the global mapPubKeys, by indexing keys by address instead of by pubkey. This brings a consistent interface to CKeyStore, and testing for ownership of a key becomes a call to CKeyStore::HaveKey(), instead of doing a lookup in mapPubKeys. * The second one introduces the class CBitcoinAddress - represented by its raw data bytes (20 bytes containing the Hash160 of the pubkey), but convertible to string representation. In most places in the code, the use of a strAddress or hash160 as address identifier is replaced with CBitcoinAddress. (CAddress already existed, so I needed another name) * The third one splits code not specifically related to addresses into a common CBase58Data
402	Fixes #397. Thanks to for providing a high resolution image.
401	Fixes #397. Thanks to for providing me a high resolution image.
399	Fixes several (classes of) warnings to allow compiling with -Wall and being less overwhelmed.
396	This replaces the default and dated-looking image in the NSIS installer with the logo from bitcoin.org. It also sets the default compression to LZMA (vs current zlib), which nearly halves the size of the installer.
394	Im pull-requesting this so that people know this stuff exists. Consider it as low priority, and If theres some interest in it, I might keep this up to date for some time. Pluses: - Command line and configuration files are fully parsed before being taken into account, errors are reported (including misspelled or unknown parameters). - A nice interface is provided to access options & configuration from source code (cf. option.h). - Single definition of options and default values, which have been moved to the top of .cpp files. - Checks for integer overflows in configuration values. - New rpc command "reloadconfig" to dynamically update configuration parameters (Issue #309). Command line parameters will not be overridden. Notice that many core parameters are used only during startup. - Option -conf is now enough to configure everything (Issue #140). - A way to force listing of hidden options (-help=allopts) and access to help messages is possible even if bitcoin is already running. - Fix erroneous error message with respect to the path of the configuration file when using -testnet (Issue #241). - Removed \n and other data from translatable strings (Issue #313). - Using boost to deal with most filesystem paths. - Slightly faster access to configuration values (no map lookups). Minuses: - Access to configuration values are a bit less recognizable in source code. - Relies a little deeper on boost (but without added dependencies). - Uses some hacks around boost::program_options to recover original bitcoin command line style. Notes: - This has been tested a little bit on unix (linux), needs to be tested on other arches (Windows).
392	Minor patch to factor out another magic number
389	Function should return true in case of success, currently returns nothing. This trivial patch fixes that.
385	Fixed 2 Resource Leaks
384	Stupid, stupid me...there is exactly 0 way to convince make to execute a conditional based on a target-specific variable. makefile UPnP was reverted to always off-by-default, but bitcoin-gui has it enabled by default when built via gitian.
383	Changing the default address from the GUI did not update vchDefaultKey.
381	As an alternate to #378.
380	This adds the relevent patches which are applied to wx, and updates for cross compiling.
379	Using the comma as thousands separator causes problems for parts of the world where comma == decimal point. Germans sending 0,001 bitcoins are unpleasantly surprised when that results in 1 BTC getting sent.
378	The motivation here is that if a wallet is encrypted, old versions should simply fail to load the wallet. Additionally, if a wallet gets corrupted, the client should always fail to load the wallet to give the user a chance for manual recovery. This needs to go into 0.3.24, so that users who downgrade dont mess up their wallet by adding unencrypted keys to an encrypted wallet, making all versions unable to use the wallet.
376	v0.3.24rc1
374	
373	As I mentioned in the comments, my last Visual C++ makefile pull request wont work with the latest source tree. Sorry about that, here is a fix.
372	This is a bit of an ugly hack, but its the only way to do it.
371	The makefile for Visual C++ was outdated and broken. I updated it to support UPnP, use the new location of the resource files, and a couple other minor things that prevented it from building.
369	Introduce SendBufferSize() and ReceiveBufferSize(), and limit the blocks sent as response to the "getblocks" message to half of the active send buffer size.
368	As we have no testnet dnsseeds.
367	This seed will pull a random set of 20 nodes from the network which are tested to be online instead of a static list.
366	This pull adds 2 new command line arguments, -ircport and -irchost. This allows the internal hostname and port to be overridden. This is for the benefit of users who cant connect to standard IRC ports due to ISP restrictions.
364	When miniupnpc isnt installed, building fails due to wrong check in makefile.unix.
363	I made some changes in anticipation of unit tests for scripts and OP_CHECKSIG, etc. Feedback is welcome.
362	Fixes issue 340:
361	This time commits are squashed.
360	For a pull after new wallet crypto.
358	This is a rebased series of patches from pull request #335 1) Fix the synchronization of sending addresses between a CWallet and its associated CWalletDB (this was reported independently in Issue #350). 2) Add a check for validity of sending addresses (Issue #328). 3) Avoid propagation of unnecessary updates to CWalletDB. 4) Fix the behavior of setaccount on sending addresses that are already listed in the Address Book. (Issue #329). 5) Add wallet methods GetDefaultAddress and SetDefaultAddress (contributed by laanwj in Issue #350).
357	doc/release-process.txt: This adds some reminders to release-process.txt to bump build numbers in the code and the new OSX app bundle. contrib/Bitcoin.app: Adds the OSX App Bundle itself. (Originally from Laszlo Hanyecz <solar@heliacal.net> waiting on email response the list is cced on to confirm licensing semantics.) doc/build-osx.txt: Fixes line wrapping to be consistent. Fixes hard tabs to be spaces. Fixes checkout instructions to actually give the correct location on github instead of old SVN repo. Changes path ~/bitcoin/trunk to ~/bitcoin/bitcoin/src to be in-line with current source layout. Changes instructions for putting the resultant binary into the App Bundle. Adds notes on openssl/bdb/miniupnpc/wx builds about system versions and macports versions.
356	make -f makefile.{unix,osx,mingw} test_bitcoin to compile dumb, do-almost-nothing placeholder unit tests.
355	When a process is polling bitcoind for new transactions, the existing RPC command listtransactions is not adequate. In particular, since theres no way for listtransactions to report all transaction AFTER a certain point in time, the polling process will necessarily have to grab more and more transactions and sort through them, or risk missing transactions if it uses a limit thats too small. This new command listtransactionsaftertime solves the issue. In particular, you use listtransactionsaftertime to get all transactions after a particular time (as timestamped on all transactions). A typical polling process can then grab all transactions after the last seen transaction time and be guaranteed a complete transaction log.
354	These commits introduce CWallet::CreateExactTransaction() function that works like CWallet::CreateTransaction(), but takes explicit list of prev_out transactions for sourcing the new transaction and fixed value of transaction fee. Furthermore, new RPC call sendexact is introduced; it works like sendmany, but takes explicit list of transactions to use as coin sources, and explicit value of transaction fee. All outputs of the listed transactions that the account can claim are used to source coins; the output of the new transaction must be exactly the same amount, the user is responsible for dealing with any change. The user is also responsible for setting the transaction fee to such a value that other nodes will relay the transaction. The point is to provide a low-level interface for making transactions without all the auto-guessing implicitly done by the client. My primary motivation is that I am a control freak and I want to have precise control over the addresses used as "sources" of my transactions. There are other applications too - even if more specific interfaces might be more suited to them, this interface makes them possible at all as the lowest common denominator. E.g. people who wish to be sure no transaction fees will be paid for their transaction can use this interface. Or people wishing to try out different coin selection algorithms (or when coin selection makes sense at the moment of transaction setup, e.g. in case of anonymizers). Q: Why use explicit transactions instead of addresses? A: In reality, you do not quite transfer money "from" an address. Address is just a token that proves you are authorized to claim a particular amount of bitcoins listed as one of outputs of some transaction. Specific use-cases might be simplified, but you would still be in hands of a fixed coin selection algorithm. You can use (somewhat laborously) listtransactions or external service to discover transactions that send money to a given address. Q: Why use account instead of explicit addresses? A: First, it is more consistent with the other "send" interfaces and the wallet organization. Second, I believe account is the right abstraction - as mentioned, address is just a token for claiming some bitcoins, but different kind of claim proofs might be used (e.g. the now-deprecated "send to IP address", or it could be possible to also specify password-protected coins). In the future, you could associate further methods of authentication with accounts, but addresses are limited. If you require a specific set of addresses to be used, you can set up an ad-hoc account. Q: What does that bit about "change" mean? A: If transaction input claims some output of a previous transaction, it must claim all the coins in the output. If you need to transfer smaller amount than that, you must specify what to do with the remaining amount (change). The built-in coin selection algorithm either sends them to a new address (for better anonymity) or returns them to the source address. Here, you are responsible for manually specifying the destiny of your remaining amount. Q: Can I be finally sure I pay only the TX fee I specify? A: Yes, the TX fee you specify is final. However, please note that if the new transaction is large (i.e. has many inputs and outputs) or transfers too small amount and you do not offer any TX fee, it may not be accepted by any other nodes. Note that this is more serious than not being included in a block - you could just wait longer for a benevolent miner. In these circumstances, your transaction is not likely to even *reach* a mining node because the P2P network will not relay it. (If you like the feature, you can send donations to 19VF444umGxX76DZwPuWVMHpv7i84DHM1D.)
352	This commit adds support for ckeys, or enCrypted private keys, to the wallet. See commit message for a more detailed description.
350	Fix update of internal data structure (mapAddressBook) after changes to the address book, and add convenience methods EraseAddressBookName, GetDefaultAddress, SetDefaultAddress to be used from UI. The problem was introduced in the new CWallet class; mapAddress book used to be updated in db.cpp. It now makes more sense to do the update directly in CWallet.
349	To delete the signature from scriptSig, OP_CHECKSIG constructs a new CScript object from the signature found on the stack and then looks for an exact copy of this object in scriptSig. However, if the original signature was pushed using OP_PUSHDATA and the signature is short enough to be pushed using one of the 1-75 opcodes, the two objects will not match and the signature verification will fail even though the values are the same. This patch fixes this by comparing the data-pushing opcodes payload only (excluding the opcode itself). Ive tested this with valid testnet transactions, which are verified correctly. As this is my first bitcoin patch and it touches a rather sensitive part of the code, please review/test it for yourselves as well!
347	The initialization of the default key used keyUser instead of vchDefaultKey. keyUser is now complete removed.
345	
343	In order to be a proper HTTP implementation clients that arent allowed to connect to the RPC server (using -rpcallowip), should receive a proper HTTP response. So instead of closing the connection on them send a 403 Forbidden status. Signed-off-by: Giel van Schijndel <me@mortis.eu>
342	This addresses issue 337. When you specify a -datadir that does not exist, bitcoin now complains and shuts down gracefully.
341	Inline comment about VirtualLock() and general idea come from Matt Corallos [encprivkeys branch](/bitcoin/bitcoin/pull/232). By adding it to the custom allocator like this though, its done for us on all CPrivKey objects automagically.
335	Add a check for validity of sending addresses (Issue #328). Fix the behaviour of setaccount on sending addresses that are already listed in the Address Book. (Issue #329). This also fixes the syncrhonization of sending addresses between a CWallet and its associated CWalletDB, and avoids unnecessary CWalletDB updates. This is my first commit. It is quite small, but please review it in details before the pull. Thanks.
334	Some problems found by ius: * compiler complains with no return after critical section block * CKeyStore::GetPrivKey(key) was undefined for unknown key * missing return statement in GetChange()
332	This fixes a fail to compile with Boost 1.46.1, need to include boost/filesystem.hpp
331	Minor translation update to fix the break of all translations of "-beta" and " beta" in 6f460bace604361d3b2306f3f1e81198301c063a. Also regen all binary mos (not sure how long its been so might as well) and add two translations of "Specify connection timeout (in milliseconds)\n" (more are needed).
327	For my Qt GUI, I display a progress bar on first start to keep track of how far the initial block chain download is. This needs a conservative estimate of the total blocks in the chain. Currently, one such estimate is hardcoded into IsInitialBlockDownload as a magic number. This patch moves the magic number to a constant, and adds a function GetTotalBlocksEstimate() to retrieve the value (always 0 for testnet). According to the forum topic it would be possible to compute a real estimate based on version messages; this same interface could later be extended to return this.
326	.Now that IRC is partitioned we wont actually see most nodes coming and going, so excluding these nodes greatly increases the amount of clique formation. This was bad even before the channel split because the /who output was limited, so wed end to stop connecting to long running stable nodes.
324	Given a transaction hash, getrawtransaction returns that transaction and some metadata. Example: (this is on the testnet) $ ./bitcoind getrawtransaction ba73f8c8701550e50f667c6c02d671afd3f95069ce02938453048e79b0812bba { "tx" : { "version" : 1, "txins" : [ { "previous_output" : { "hash" : "daea922234887459ba985977112454895466a36c167921651111596cc439add4", "index" : 0 }, "script" : "47304402206fdeaabac261ef0e0183892555a7cdc94d23e4a01c1c55509d352215ee1628c302204dae58fa97ecf77cede4d340573f62abe13f1b7d9bc487a8e9230d4e9557fdd50141043338498afdbe933339072d3fe6ed36196b2e868f888df55e1b32ad27e418f3621628941482a816acde7b53d651fc13b3208885c07e6f1c54b4c04a5c5d009d86", "sequence" : 4294967295 } ], "txouts" : [ { "value" : 29462000000, "script2" : "76a9142a5ce61dff67eb864979905d2ca05d000a0586fd88ac" }, { "value" : 500000000, "script2" : "76a9142400224224860152f4211a2b9daa6c45c79d04f388ac" } ], "lock_time" : 0 }, "parent_blocks" : [ "00000000004610ac94e40725653c5ff54588a41e24d284244fcd4efd36f12ee9" ], "txout_claims" : [ [ "9f8aa7191c75c96d1cdf8a9fe78a5b4fa1d772cbe7345c1cabdb3f7c91c71cf7" ], [ ] ] }
319	This implements an initial feature set for "escrow" transactions, as mentioned on various threads on the forum. It allows coins to be controlled by threshold voting among multiple parties.
315	
314	and improved a translation string
312	
311	
310	Sorry that I have messed up dabaopku/bitcoin with repeat commits. Please merge this single commit. Original pull request was #281
304	1/2 known Windows CPU Usage bugs fixed
303	Just comment updates.
300	Use non-blocking connects, and a select() call to wait a predefined time (5s by default, but configurable with -timeout) for either success or failure. This allows much more connections to be tried per time unit. Based on a patch by phantomcircuit.
297	Hello, I have made a really small modification in the build instructions (in order to make copy-paste easier in Debian-like systems). Thanks in advance,
295	Stop assigning all generations to the "" account, even when it is sent to a known accounts address.
294	Avoid creating a new key -every- time you use a reserve key. Instead, create them in bursts. Currently, default is to generate 25 keys (filling keypool up to 100), if keypool size falls below 75.
293	Make LoadWallet() create the KeyPool for empty wallets. Perceived startup time on first start might increase (<5s on my system, could be up to a minute on very slow hosts) as LoadWallet() is called before the UI is displayed. This makes it safe to backup a new wallet.dat used for savings.
292	
291	Please?
290	Fix rfc1918 and rfc3927 compliance for ignoring non-internet-routable hosts. Pretty self explanatory I think. Fixes filtering of 172.16/12 and 169.254/16 which were missing and expands IsRoutable() to be more easily updated later as well as actually be used in ConnectSocket() instead of re-implementing logic that exists in the CAddress class.
289	In 3 commits: Make the fee error/dialog messages much clearer. Update fee policy to be much more customizable. This changes nTransactionFee into nBaseTransactionFee and nPerKBTransactionFee where nBaseTransactionFee is applied to each transaction once and nPerKBTransactionFee is applied per KB to each transaction. Also, fOverrideTransactionFee has been added to allow the ignoring of GetMinFee() when creating transactions. Add setautocommit, reject transaction and committransaction. Here is the help for setautocommit: If <autocommit> is false, the send* functions will return a txid, which must be manually committed instead of being immediately committed. Once a new transaction has been created, you can get information about it by using gettransaction <txid>. It can then be commited or rejected using committransaction <txid> or rejecttransaction <txid> respectively. Forum thread at
288	Introduce a new class, CWallet, to manage wallets, and move all wallet-specific code there. All wallet-related globals are turned into fields of CWallet, and one single global, pwalletMain, is added instead. It consists of two commits: the first one adds the new source files, and moves as much there as possible without actually changing any code. The second commit adds the class definitions, and all other changes. Forum thread is here:
287	Adds a -wallet argument that can be passed to the client to determine the name of the wallet file and where it should be located. It works like this: $ ./bitcoind -It will use [datadir]/wallet.dat as the wallet $./bitcoind -wallet=mywallet -It will use [datadir]/mywallet $./bitcoind -wallet=/tmp -It will use /tmp/wallet.dat $./bitcoind -wallet=/tmp/mywallet -It will use /tmp/mywallet If your wallet is in a directory other than the datadir, bitcoin will create another .lock file in that directory (originally, I tried using the wallet file itself as the lock file, but bdb didnt like opening a locked file). Let me know if you have questions or if Ive missed anything.
285	This change is per discussion at Added ability to estimate the transaction fee for a given transfer amount. Use case concerns transferring BTC out of an "account", and being able to determine if the account has enough BTC to cover transfer + fees. *Accidentally closed previous pull request trying to rebase to one commit.
284	A new Pin class is provided to create secure password dialogs using process separation. IPC is done via libassuan and the assuan daemon user is standard pinentry (portable qt, gtk2 and ncurses implementations are available) Pinentry takes care of memlocking and is the standard for GNUPG. The Pin class is designed to be readable and well reusable in other password entry tasks. This commit adds optional build dependency from libassuan and optional runtime dependency from a pinentry daemon.
283	This change is per discussion at Added ability to estimate the transaction fee for a given transfer amount. Use case concerns transferring BTC out of an "account", and being able to determine if the account has enough BTC to cover transfer + fees.
282	The goal here is to show people how many warnings we have and get someone to look into them. Additionally, this might prevent keep more warnings from popping up with new patches (though thats a bit unlikely).
281	Several accuracy and punctuation improvements. :D
280	Use -frandom-seed to prevent gcc from generating slightly different code on occasion. Also make timestamp forcing more general.
278	Static link openssl and enable RPC-SSL on Win32.
277	Not ideal, icons for send and address book dont show, just the standard bitcoin icon, and balance is still cut off, but the number is readable.
276	For instance any nBits compressed value from 0x1a44b800 thru 0x1a44b9ff will show as difficulty 244139.4816. This patch will more accurately convert the nBits compressed values to the double difficulty. This will display any of the recent difficulty levels slightly differently though. Early difficulties and testnet difficulties are not large enough to trigger this bug. None of the actual targets or compressed targets are changed, only the conversion to the floating point difficulty is changed and afaik it is only ever displayed, never converted back so the patch does not effect the target calculations, binary files, databases nor the binary protocol.
275	
274	There were some mistakes in the German translation, so I fixed them.
270	There were 2 errors, I changed the char % to & in two lines.
269	The ifdef for USE_PNP below evals to "true" because its defined to zero, thereby erroneously enabling UPNP even when its initialized to zero, which is probably not whats desired. Commenting out the variable makes it not try to build UPNP support by default. make USE_PNP=1 reenables it nicely. (I assume the =0 was meant to default it to off?)
268	
267	Transactions created with the new minimal fee policy would not be relayed by the network. Therefore, we separate the minimal fee that is necessary to relay and to create, leaving the creation one at the old amount, for now.
266	Libs should never be statically linked unless there is a clear reason, also, wx2.8 should have been used to begin with, a development release should not be used for release software. This is intended for 0.4.0, so that we can move towards proper bitcoin packaging in distro repos. sipa has expressed some issues with performance that I have so far been unable to reproduce, maybe someone else can?
265	blackymetals #262 with my mo (sorry blackymetal, its a security thing with committing binary files to the repo) and the order fixed so that the commit diff is more readable.
264	With the separation of CENT and MIN_TX_FEE, it is now reasonable to create change outputs between 0.01 and 0.0005, as these are spendable according to the policy, even though they require a fee to be paid. Also, when enough fee was already present, everything can go into a change output, without further increasing the fee.
262	
261	
260	By danube, binary mo compiled by me.
259	By m0ray, binary mo generated by me.
256	When used, purges all transactions from wallet.dat and forces a rescan. Useful for solving problems with invalid transactions stored in wallet.dat (for example, after wallet.dat manipulations). Corrected russian translation.
255	When rescanning, if the scanned transaction is already in the wallet, it is skipped. However, if someone sends a transaction, does not wait for confirmation, switches wallets, waits for a block that contains his original transaction, and switches wallets again, a rescan will leave his wallet transaction (which has no merkle branch, so no confirmations) untouched.
254	Its really an interesting software! Ive translated it to Chinese. Please accept my changes.
253	Remove send to IP transaction support, as it is insecure and would confuse users when used. An IP is a terrible identifier as it does not identify a person or organization. Furthermore, man-in-the-middle attacks are trivial as the internet has no "proof that you have ip XXX" API. In the future address shortening services based on "user@domain" would be useful, but these will likely be based on third party APIs and not on this code. * Removes logic to accept transfers by IP * Removes UI logic to send transfers by IP (CSendingDialog). Entering an IP in the send box will always result in an error. Discussion on forum:
251	Translation by Unreal89, binary mo compiled by me.
250	This reverts commit 69ae372b51cd589a3ac0b1ad09b0ebb90c1b6861 which removes support for building the Mac version of Bitcoin with UPnP support and UPnP disabled by default (which should be the default, according to the community vote and as its the default on all other platforms).
249	
246	Hi guys, first lets say that I really appreciate the job youre doing. So thanks to all of you. And kindly consider the little updates that I am requesting. Its just a whitespace cleaning and some indentations added in the code. Regards,
245	Motivation: Create keys on a secure system using only OpenSSL or similar software. Receive BTC, then when ready to spend them, use importkey in a running client. importkey &lt;file&gt; &lt;account&gt; Reads a PEM-encoded keypair from file and adds it to the wallet. To create a keypair with OpenSSL, use: openssl ecparam -name secp256k1 -out NEW_KEY.pem -genkey Returns the keys bitcoin address. $ bitcoind importkey ~/NEW_KEY.pem TestAcct mt5M3Qa7fXsUV3bK6WtWTZEvXY2M1UPEgv Bug: Id like to safeguard against overwriting a key in the wallet with bogus data. Bug: I dont understand what has to be mutexed. Bug: Should do anything possible to make sure the imported key is valid. Note: I did not implement the corresponding export function, because my use case does not require it. I will be happy to implement it if this will improve the patchs chance of acceptance. Note: To make this convenient, one (I) would write a little script to read one of these PEM files and print a Bitcoin address. All key handling would be possible offline, and certainly in the absence of a block chain, until spend time. For my next trick, expect offline transaction signing and an importtx function. Forum topic:
235	
234	Translation by Anonymous, binary mo generated by me.
232	This commit adds support for ekeys, or encrypted private keys, to the wallet. All keys are stored in memory in their encrypted form and thus the passphrase is required from the user to spend coins, or to create new addresses. Keys are encrypted with AES-256-CBC through OpenSSLs EVP library. The key is calculated via EVP_BytesToKey using AES256 with 1000 rounds. Each RPC command which requires the password in practice has an additional parameter, namely that password. Due to the need to convert the types of other parameters before sending them, users who do not use encryption (via the -nocrypt option) will have to specify a blank string (or any string) as the first parameter, followed by the command they currently use. Whenever keying material (unencrypted private keys, the users password, the wallets AES key) is stored unencrypted in memory, any reasonable attempt is made to mlock/VirtualLock that memory before storing the keying material. This is not true in several (commented) cases where mlock/VirtualLocking the memory is not possible. Although encryption of private keys in memory can be very useful on desktop systems (as some small amount of protection against stupid viruses), on an RPC server, the password is entered fairly insecurely. Thus, the only main advantage encryption has for RPC servers is for RPC servers that do not spend coins, except in rare cases, eg. a webserver of a merchant which only receives payment except for cases of manual intervention. Thanks to jgarzik for the original patch and sipa for all his input.
230	By Blitzboom, binary file generated by me.
229	From kr105, binary compiled by me.
226	This patch set includes the following changes: * Remove unused #includes * Factor out #includes that are only needed in some source files from headers.h * Add dependency tracking to unix, mac, and mingw makefiles via gccs -MMD flag These changes improve bitcoins development environment. Previously changing any header file caused a global recompile. With these changes, only those files that directly depend on a changed header file will require recompilation.
225	To be able to make an external GUI, I am working on modularizing bitcoin into a library. This push request is basic code plumbing, 100% no functional or build system changes. - Put guard statements around header files. - Removed macro foreach: conflicts with Qt4 keyword `foreach`, replaced with BOOST_FOREACH. - Prefix C++ stdlib structures and functions with std:: in headers; "using namespace" in header files is generally frowned upon because it infects other files included after it. These are moved to the implementation files. - Modularity: `base48.h` and most other header files can now be included without the other shebang (useful for linking external GUI to bitcoin core, part of GUI separation). The include files that need each other, now include each other.
224	
223	
222	from mewantsbitcoins
221	Im tired of porting this forward, and I really cant think of a good reason NOT to allow this.
220	Introduces four new RPC calls: * dumpprivkey: retrieve the private key corresponding to an address * importprivkey: add a private key to your wallet * removeprivkey: remove a private key from your wallet * dumpwallet: export the contents of your wallet in various ways * importwallet: import/merge a dumped wallet into your own. The private key format is analoguous to the address format. It is a 51-character base58-encoded string, that includes a version number and a checksum. The wallet format is JSON-based, and includes: * addresses (informational, optional) * private keys * amounts per balance (informational, optional) * blocks where addresses were first used (optional) * ids of transactions in which addresses were credited (optional) * labels (optional) It specifically does not contain: * sender address book * settings * account information * unconfirmed wallet transactions Note that playing around with import/export and moving addresses around between wallets may result in double-spends, which may result in corrupted wallets. See for a solution
218	Separate TX fee logic from CENT constant, and decrease it to 0.0005 BTC.
215	Use case: Customer owes you bitcoins, so you create a payment address associated with an account with a negative balance (the amount they owe), using move ...account... ...other_account... +amount When customer pays, that account balance will go to zero. This doesnt change sends-- you still cant send from an account with a zero or negative balance.
214	This patch set updates bitcoins RPC server to use boost::asios async_read, _write, etc instead of their non-asynchronous versions. The server still exists as a single separate thread, but the async calls should greatly improve performance under high load. The next step in robustifying the RPC server is to create a pool of threads for the RPC server, each of which handle a number of asynchronously reading and writing connections.
213	This fixes the build problem that I described in (NOTE: Theres actually one other un-#if-guarded usage of the variable "fUseUPnP" in this file, but that one doesnt seem to cause build problems, for whatever reason. So I just added #if guards around this usage, to make the change as minimal as possible.)
209	Use callers cwd if path is not fully qualified and connecting to 127.0.0.1.
208	If connecting to rpc server on 127.0.0.1 try and use the callers cwd to write backupwallet output to if it is not fully qualified.
205	Make JSON-RPC HTTP headers case-insensitive, as per RFC 2616.
204	
203	Request the password from the user at startup and store the key in memory for all new key encryption. Each ekey in the wallet is decrypted and the privkey derived and checked against the stored pubkey to ensure the password is correct. Thanks to jgarzik for the original patch and sipa for all his input. Forum thread:
202	This addition adds a build-time option thats linux specific. It drops any capabilities assigned to the process at launch time (if it were launched as root, root loses all special meaning). It also removes all capabilities from the binding set and locks all options related to privilege escalation so that they may not be changed. For these options to work (if built) the binary must be setuid root (horrible) or setcap cap_setpcap+eip bitcoind; (awesome) It only needs this capability so that it can clear the bounding set which it does in main() of bitcoind very first thing. I am not sure where the code needs to go to make it function in bitcoin gui client? For more details make sure you have libcap2-dev installed and: man 7 capabilities man 2 prctl The relevant sections of prctl(2) are: PR_CAPBSET_DROP and PR_SET_SECUREBITS. This patch will make it so that (barring issues in the posix.1e implementation in the kernel itself) any code execution vulnerabilities in the future will be unable to gain escalated privileges through the bitcoind process. Even by exec()ing suid binaries and exploiting known issues with them. Forum thread:
201	This addition adds a build-time option thats linux specific. It drops any capabilities assigned to the process at launch time (if it were launched as root, root loses all special meaning). It also removes all capabilities from the binding set and locks all options related to privilege escalation so that they may not be changed. For these options to work (if built) the binary must be setuid root (horrible) or setcap cap_setpcap+eip bitcoind; (awesome) It only needs this capability so that it can clear the bounding set which it does in main() of bitcoind very first thing. I am not sure where the code needs to go to make it function in bitcoin gui client? For more details make sure you have libcap2-dev install and: man 7 capabilities man 2 prctl The relevant sections of prctl(2) are: PR_CAPBSET_DROP and PR_SET_SECUREBITS. This patch will make it so that (barring issues in the posix11.e implementation in the kernel itself) any code execution vulnerabilities in the future will be unable to gain escalated privileges through the bitcoind process. Even by exec()ing suid binaries and exploiting known issues with them.
199	This commit adds a "listsinceblock" RPC command that will accept a block hash and list all of the wallet transactions that have occurred after that block. If no block is specified, it will list all wallet transactions. The output also includes the block ID of the latest block on the main chain. This is designed to simplify the process of reconciling transactions it bitcoind with another database; you store the most recent block you have seen (the "latest block" result from your last reconcile) and, on the next reconcile pass this block identifier. bitcoind will then tell you about all the transactions you need to process (possibly including transactions you have already processed, if the latest block the last time you reconciled has since been orphaned).
198	monitortx/monitorblocks: POST JSON-RPC to a URL when new wallet transactions or blocks are received. listmonitored: list URLS that will be POSTed to getblock: get information about a block, given depth in main chain.
197	Minor bug where the client crashes after displaying the error I dug up while testing (should never effect users, but worth patching anyway).
196	Hi, My build broke saying: net.cpp:8: fatal error: miniupnpc/miniwget.h: No such file or directory So I fixed it and made a patch. The patch was made and tested against `v0.3.21` on a GNU/Linux, but it should be good to apply on `master` as well. Also, it was not tested with USE_UPNP=1, but I dont see why it should fail. Yours, Amir
195	Changes: * added mapWalletInputs to track wallet txs that use a certain outpoint * added AddWalletTx to update mapWallet and keep mapWalletInputs up-to-date * CWalletTxs can be in a rejected state and optionally "conflicting", in which case they are ignored for balances and coin selection. * rejected txs are stored separately in wallet.dat (as rejtx key, and with an additional rejected field) * new function MarkConflicting() marks a tx conflicting, and all dependent wallet transactions rejected. * a new function SyncWithWallet will do both adding to the block chain and check for conflicts, and is called when connecting blocks, for incoming transactions, and when rescanning * WalletUpdateSpend works now per-transaction, and is not called anymore from script, but from AddToWallet and SyncWithWallet * GUI is updated to show rejected transactions as "rejected" instead of "0/unconfirmed", with credit and debet 0 (like unmatured generations) Re-enabling of transactions after they would stop being conflicting after a block chain reorganisation is not supported yet. The is no RPC call to retrieve information about rejected transactions.
194	The tooltip would only update the balance upon opening the UI, so I have removed such functionality until a solution is found.
193	What the title says.
192	* A new option -dns is introduced that enables name lookups in -connect and -addnode, which is not enabled by default, as it may be considered a security issue. * A NameLookup function is added that supports retrieving one or more addresses based on a host name * CAddress constructors (optionally) support name lookups. * The different places in the source code that did name lookups are refactored to use NameLookup or CAddress instead (dns seeding, irc server lookup, getexternalip, ...).
190	Too features which I thought would be very useful is an easy way to view your balance without opening up the whole application, so I added the balance to the tooltip. I also felt that adding a send coins option was nice, as there is even less reason to open up the whole bitcoin client just to send some coins. Please note that I may not have done the translations (that is, used _()) perfectly regarding the tooltips, so please check that first.
187	
186	This should allow the bitcoin binaries to run on ever so slightly more installs, specifically those who use a different libpng library (many distros use 1.4 which is imcompatible with 1.2) This is unused as bitcoin literally never uses PNGs, anywhere.
184	Code in db.cpp was missing an #ifdef
183	Adds two rpc commands : - signmessage <bitcoinaddress> <message> - verifymessage <pubkey> <sign> <message> It allows to sign a message with the public key of a bitcoin address you own, to be sure of the identity of the sender. Command : ./bitcoind signmessage 1L5zqFahc8Ahu9wtgJqCeJMendvD174xsG "Hi github users :p" Output : { "address" : "1L5zqFahc8Ahu9wtgJqCeJMendvD174xsG", "pubkey" : "04ef6e366cd6b0b8fbf02c0c25ad39fe892b90c597875899fdc9db16941cf43fb8c429e0534cb8b972f5cc9f1a50f36dc3352ffad427f073e1c64a145828a3be6e", "sign" : "3046022100a80b6e0c7c54c54ba943f4e3cde12f5a7dc5313e3f0a15ce868f01683ced64fa0221008b4ad7d3800a11c241dcef7aaf44c8224a7d9f1e54d3e669bf4887036b6d10af" } Command : ./bitcoind verifymessage <above pubkey> <above sign> "Hi github users :p" Output : { "address" : "1L5zqFahc8Ahu9wtgJqCeJMendvD174xsG", "pubkey" : "04ef6e366cd6b0b8fbf02c0c25ad39fe892b90c597875899fdc9db16941cf43fb8c429e0534cb8b972f5cc9f1a50f36dc3352ffad427f073e1c64a145828a3be6e" } Reviews and comments are welcomed, I dont know if all is used as it should. Forum thread : EDIT(alex): Sipas revision references pull 183 -
182	This change supports bitcoin: URIs in bitcoin. It is being resubmitted due to git repo issues on my end (yet again). Sorry about that. Forums thread here:
181	When one single dependency of an unconfirmed transaction is already verified, this does not mean the parent is confirmed. We can skip checking its own dependencies though.
180	This pull request aims at adding autotools for build checks, configure flags for compile time configuration and handling of #define directives inside code and things that will possibily make it better for bitcoin to be packaged inside distributions, as well ported to different architectures. Build of this branch was tested on Debian 6 (also with WX GUI), Apple OSX 10.5 (no WX GUI) and CYGWIN win32 (no UPNP nor WX) **completed** add autotools build system ==================== * commit ref: jaromil@500da9eb20d480c431d610472bfa3af92112aead this pull request follows as third attempt to previous 2: * * and basically consists of a rebase of this branch eliminating all those commits and squashing them in 2 steps. 1st commit moves files around under old build system 2nd commit converts the build system to autotools (while we still leave the old build system in place, optional) the bitcoind code itself was never modified: files were moved around and the header auto-config.h generated by autoconf was added to headers.h code modules have been separated in subdirectories and compiled as static libraries, still using libtool, which is the recommended behaviour when using autotools. interesting configure flags --------------------- * --enable-upnp=0/1 has been added and configure.ac contains templates for adding more compile time choices in future. * --enable-gui has been added also to activate compilation of the included WX GUI. other wx related flags are provided to indicate prefix or static library build. * --enable-debug compiles the binaries with debugging flags, giving all warnings - anyone willing to help should run it at least once :) * --enable-profiling enables support for gprof the GNU profiler (will dump gmon.out files after run) * --with-wxdir=PATH Use uninstalled version of wxWidgets in PATH * --with-wx-prefix=PREFIX Prefix where wxWidgets is installed (optional) * --with-boost and more boost build configuration code re-organization =============== * commit ref: jaromil@84c3fb07b0b8199c7f85c5de280e7100bad0786f directory re-organization (keeps the old build system) there is no internal modification of any file in this commit files are moved into directories according to established standards in sourcecode distribution; these directories contain: * src - Files that are used in constructing the executable binaries * doc - Files in HTML and text format that document usage, quirks of the implementation, and contributor checklists. * locale - Files that contain human language translation of strings used in the program * contrib - Files contributed from distributions or other third party implementing scripts and auxiliary programs
179	This is just a quick fix - probably more graceful error handling is needed. If the lock file cant be accessed, we will abort anyway (with an exception from boost), but at least it wont be a segfault now.
178	Fixes link failure when using the gold linker. Also tested with regular ld and it seems to work fine.
177	adding autotools for build checks, configure flags for compile time configuration and handling of #define directives inside code and things that will possibily make it better for bitcoin to be packaged inside distributions, as well ported to different architectures. this pull request follows my first sloppy attempt here: ive followed suggestions given by jgarzik, thanks for your patience this pull request is a rebase of this branch which eliminates all those commits and squashes them in this. the bitcoind code itself was never modified, just moved around, with two exceptions: 1) 9141f2c renamed cryptopp/config.h to settings.h 2) c929bae code namespace change: (int)VERSION renamed to BITCOIN_VERSION in headers.h so just one filename and one variable name changed, plus one #ifdef inside headers.h code modules have been separated in subdirectories and compiled as static libraries, still using libtool, which is the recommended behaviour when using autotools. a flag --enable-upnp=0/1 has been added and configure.ac contains templates for adding more compile time choices in future. as libbitcoin will be provided in future, ABI versioning is also ready to be adopted via libtool. the test/ directory is imported from gasteves branch for test units. Build of this was tested on Debian 6 (also with WX GUI), Apple OSX 10.5 (without WX GUI) and CYGWIN win32 (without dependencies).
176	Support for bitcoin: URIs in bitcoin
174	This patch allows you to send payments to email address, domain names and url from the bitcoin GUI. Valid examples of inputs : - wikipedia.org - - yourpseudo@bitcoin-contact.org - **Technical explanation** Input url/address is translated to an request sent to the corresponding domain (ip addresses are not translated for backward compatilibty). A valid response is a text formatted in json, containing a bitcoin address with an optional label : ```{ "error" : "", "label" : "Bitcoin Contact", "address" : "1NMxHnpAE38P9HN9pzRSqAFMCv1WcXZC1N" }``` GUI will propose you to add the returned address in your address book. Discussion on forum :
173	This is a single-line change that allows non-standard transactions to get into the transaction memory pool (and, therefore, relayed and written into blocks) on -testnet. Satoshi suggested this to me in an email, and I agree it is a good idea-- we should encourage people to experiment on -testnet with new features, or they will figure out less efficient ways of wedging what they want to do into the existing standard transaction types.
169	OK, lets try this in smaller more informative commits. Heres the first of a sequence of pull requests. This one only adds the ability to send to a named@server It expects back from the server a JSON with an address key or one with "error"/"errcode" in which case it throws an error in RPC. There is an example implementation of the server code in contrib/ns/ which can be installed.
168	As an alternative to we can run the whole process in background mode (excluding the GUI thread). This is recomended by Microsoft for I/O intensive services/daemons (http://msdn.microsoft.com/en-us/library/ms686219%28v=vs.85%29.aspx) especially if run at system startup. Discussion:
165	Fix for #156 and one other small UPnP bug.
164	1. bitcoind -naming-password=hello 2. bitcoind publickey > copy this output to clipboard 3. login to > paste public key and click Update 4. add a new nickname 5. bitcoind updatename myname@109.75.176.109 Now someone else can run: bitcoind send genjix@109.75.176.109 2 Your keypair for altering your nickname is stored in .bitcoin/keypair.rsa Forum post:
163	This should fix #156 by only calling FreeUPNPUrls(urls) when the UPNP_GetValidIGD() value is non-zero.
162	just a start, needs more detections at configure, however works to build the daemon alone for now. more flags should be present on ./configure to select gui build and detect required libraries. libtool is just used to build the internal libcryptopp, but we can ship libbitcoin.so in future. the aim of this fork is mostly that of GNUification for bitcoin codebase and process separation. code will be shared between daemon and client implementations via shared libraries. it might look as a traumatic for now, but well think of the long term... consider no code was changed in this commit, just moved around. win32 and osx builds can be fixed to work using autotools or a parallel cmake build. apologies for not having created a branch, ive pushed on my forks master. if that is a problem i can redo that quickly.
161	Run bitcoin initialization at lower priority (Windows-only for now) This can be useful for people that run bitcoin at system startup. It is enabled by default in GUI mode and can be enabled in daemon mode by using the -nicestart CLI option.
160	add parameter from to listtransactions this allows querying for ranges, i.e. transactions [from, from+count)
159	Add -nicestart option to run initialization at lower priority (Windows-only for now) This can be useful for people that run bitcoin at system startup.
157	See here:
155	Yesterday I was building bitcoind and ran into a few issues when following the build instructions. I fixed it up, so anyone running Mac OS X 10.6 or below should be able to build without an issue. Im considering writing a configure script that checks for the dependencies and signals when a dependency isnt met. I can only test on OS X for now, though.
154	Two changes, in two commits: 1) Make version number->string conversion consistent throughout bitcoin. 2) Major HTTP clients send full version string in User-Agent header. Major HTTP servers send full version string in Server header. Update our RPC code to follow suit.
153	Set time locale to POSIX in rfc1123Time so weekday/months in responses are correct. Rewritten version of a patch from Luke-Jr.
152	Information about the best known chain is added to wallet.dat. If this information does not match the data in blkindex.dat, a rescan is automatically performed at startup, starting from the the last known block. When upgrading from a wallet which does not have this information, no rescan is done automatically.
151	one commit this time, with what should be my username and email so you can blame me
150	
149	When starting the client, ReacceptWalletTransaction didnt skip spent transactions in its loop, and processed all old spent transactions again.
143	SendMoney*() now requires caller to acquire cs_main. GetAccountAddress() now requires caller to acquire cs_main, cs_mapWallet. Ordering is intended to match these two callchains[1]: 1. CRITICAL_BLOCK(cs_main) ProcessMessage(pfrom, strCommand, vMsg) AddToWalletIfMine() AddToWallet(wtx) CRITICAL_BLOCK(cs_mapWallet) 2. CRITICAL_BLOCK(cs_main) ProcessMessage(pfrom, strCommand, vMsg) AddToWalletIfMine() AddToWallet(wtx) CRITICAL_BLOCK(cs_mapWallet) walletdb.WriteName(PubKeyToAddress(vchDefaultKey), "") CRITICAL_BLOCK(cs_mapAddressBook) Spotted by ArtForz. Additional deadlock fixes by Gavin. [1]
142	Hide this capability from GUI users, who are unlikely to understand upon first contact that they will waste electricity for year(s), before possibly generating a single block.
141	While there is no hard consensus on what to do with CPU mining inside bitcoin, in general, I think most people will agree that 4way can go. This implementation (with performance enhancements) lives on in cpuminer. bitcoins 4way was only available on *nix, while cpuminers 4way works on Windows and Linux. I conclude that, if you are really serious about CPU mining, you are more likely to use ufasofts CPU miner, or mine, and so we dont need multiple implementations inside bitcoin.
139	the daemon will log to a pidfile
138	This patch adds immature generated blocks to listtransactions. They are reported just like mature blocks, except the category is immature instead of generate. This functionality is needed by people creating alternative, JSON-RPC-based GUIs, and is useful for impatient miners who currently grep through debug.log or use unofficial patches to see not-yet-mature blocks theyve generated.
137	This patch adds immature generated blocks to listtransactions. They are reported just like mature blocks, except the category is immature instead of generate. This functionality is needed by people creating alternative, JSON-RPC-based GUIs, and is useful for impatient miners who currently grep through debug.log or use unofficial patches to see not-yet-mature blocks theyve generated.
136	Fix RPC deadlocks spotted by ArtForz. Unify order in which locks are acquired.
134	MinGW doesnt support fork(), thus daemonizing should be disabled on Windows
133	Sorry for all the pull request mess the last three times. In any case, this works on all three platforms and includes WXUI switch for UPnP enabling/disabling on the fly. See for discussion.
132	Removes the bitcoin miner from the code (mining thread, RPCs, GUI options).
131	* -daemon is ignored on windows * bitcoind only forks with -daemon set
127	Addresses from the sending tab in wxGUIs addressbook appear in listaccounts. The RPC will happily return that address even though it isnt yours. This is a problem when switching from wxGUI to a RPC UI. Fixed by adding foreach(const PAIRTYPE(string, string)& entry, mapAddressBook) uint160 hash160; if(AddressToHash160(entry.first, hash160) && mapPubKeys.count(hash160)) // This address belongs to me mapAccountBalances[entry.second] = 0; to make sure that mapAccountBalances doesnt contain any addresses that we dont have in our key list. My previous request didnt build. *whoops* Fixed for sure this time.
126	Addresses from the sending tab in wxGUIs addressbook appear in listaccounts. The RPC will happily return that address even though it isnt yours. This is a problem when switching from wxGUI to a RPC UI. Fixed by adding foreach(const PAIRTYPE(string, string)& entry, mapAddressBook) uint160 hash160; if(AddressToHash160(entry.first, hash160) && mapPubKeys.count(hash160)) // This address belongs to me mapAccountBalances[entry.second] = 0; to make sure that mapAccountBalances doesnt contain any addresses that we dont have in our key list.
125	Added new function, OutputLogMessageF, which contains most of the functionality of OutputDebugStringF. OutputLogMessageF has two additional parameters over OutputDebugStringF: an enum indicating the context of the message, and an enum indicating the verbosity level. The existing OutputDebugStringF forwards itself to OutputLogMessageF, passing enum values indicating a log context "Legacy", and verbosity "Debug". Additional functions have been added to support the feature. These functions: - add and parse command-line options -logcontexts and -loglevel to set the logging context and log verbosity (respectively) - change logging context and verbosity programattically Several of the calls to OutputDebugStringF in main.cpp (which are hidden by the macro printf) have been changed to use OutputLogMessageF, to demonstrate how the new logging system works. I have not changed all occurrences (there are still 90 occurrences in main.cpp, and I havent even touched most of the other files). The change has been designed in such a way that migration to the OutputLogMessageF can take place as developers work on various sections of the code. The existing printf calls still work, and can be viewed by using the command line options -loglevel=debug -logcontexts=legacy.
124	Updated dutch translation, by Sven Slootweg, and proof-read by me.
123	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
122	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
121	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
120	Updated Spanish translation for 0.3.21, Issue #39.
118	Updated Spanish translation for 0.3.21, Issue #39.
117	Reason for this change: better mitigation of "penny-flooding." Behavior before this change: If you ran with the -limitfreerelay boolean arg set, bitcoin would stop relaying free transactions if it got more than 150Kbytes of them in any 10-minute period. Behavior after this change: Bitcoin will stop relaying free transactions based on an exponential rate-limiting function, where more transactions in a shorter period of time are more likely to be dropped (and the default average is to allow about 150Kbytes over 10 minutes). -limitfreerelay is changed from a boolean to a KBytes/minute rate; default is 15. Original code from Satoshi-- I added a couple of comments and allowed the rate to be set with the -limitefreerelay option.
116	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
115	See the diff. Its an effectively useless if clause.
114	Finally a seemingly proper patch for UPnP Port Mapping. Note that this one still does not have proper support in the makefiles for anything but UNIX.
113	Finally a seemingly proper patch for UPnP Port Mapping. Note that this one still does not have proper support in the makefiles for anything but UNIX.
112	This allows UPnP mapping via miniupnpc when USE_UPNP is set. miniupnpc must be installed as a system library to compile with it.
111	This implements UPnP Port mapping via miniupnpc.
110	Add timestamps to debug.log when -logtimestamps is set. Follow up to:
109	This change adds DNS (via "-dnsseed") as an alternative method for seeding P2P node addresses.
107	Intelligent run script. Selects correct architecture (64 bit or 32 bit) and runs the right version of Bitcoin. Should be placed in the top level dir during release. Added in argument passing. I closed old pull request, See I think for release you should offer 2 downloads (like Ubuntu does): The default Linux release marked as Bitcoin (Recommended) and the 64 bit version Bitcoin 64 bit. Nice and simple. So feel free to close this pull request as long as dual release packages are agreed upon. Put bitcoin in the top level directory. Hide bitcoind in a subdirectory. The current release layout is very confusing for new users.
106	Need for this is being driven by mining pool operators; it is much more efficient to pay lots of people with one transaction rather than lots of little transactions. Old clients will refuse to relay sendmany transactions, so to ensure timely inclusion in a block mining pool operators should either upgrade together and connect their clients together or wait until a good percentage of the network has had a change to upgrade to the next version of bitcoin.
105	Sorry to resubmit this, I spent some more time testing and messed up my repo. In any case there are no changes from the original. Just gavins portoption and the removal of the 2h penalty for non-standard port clients.
104	Intelligent run script. Selects correct architecture (64 bit or 32 bit) and runs the right version of Bitcoin. Should be placed in the top level dir during release. See
101	Shy client patch from Hal Finney: "On incoming connections, it wont send a version message until it receives one. This can help make port scanning identification harder."
98	Simple solution to just return an error if the address provided is invalid.
97	Always let your own transactions into blocks you create
96	bitcoind will fork again, bitcoin parses -daemon and -server This fixes
95	See
92	This penalty is unnecessary as there is already a limit of one outgoing connection per /16.
91	Add timestamp to each line of debug.log.
90	1. Timestamp each line in debug log, for easier problem tracking. 2. Close and re-open debug log every 2000 lines, to enable log rotation software to replace the log while bitcoin continues uninterrupted operation.
88	CreateBlock requires that very low-priority transactions pay a fee; this teaches CreateTransaction to use the same rules.
85	Patch from luke-jr
83	Just a simple patch to add a .gitignore file so the generated executable files dont show up in git status or accidentally get committed.
82	Hi, This is a response to the [other pull request](https://github.com/bitcoin/bitcoin/pull/52) by ojab. I didnt want to make a new pull request but I couldnt find another way to do it. The last comment by tcatm was "This patch works ... outputs annoying errors (wx-config not found) when building bitcoind. Can you fix that?" I have fixed it in this branch (it no longer tries to include wx at all for any non-GUI files), and updated the readme to say its OK to use wx 2.9.1 now. It now builds bitcoind just fine even if your system has no trace of wxWidgets.
81	I tried to build bitcoin following the instructions in build-unix.txt. I suppose I should have read this line: "The build hasnt been updated to work with wxWidgets 2.9.1 yet." Anyway, the makefile is not very robust in specifically including wx files directly in the INCLUDEPATHS and WXLIBS. I had a bunch of build problems which were all solved by simply using the utility that comes with wx, wx-config. This utility is automatically installed by wxs make install, and will provide the correct command-line arguments for including and linking correctly. I have updated the makefile to use these tools rather than hand-coding the paths. It works for me, but I havent tested it on multiple configurations. If it works for other people (and I figure it will be much more robust in the long run), then it should be merged. My branch also adds .gitignore, which I find useful.
79	This modifies FormatMoney to display full-precision values (with trailing zeroes trimmed correctly-- e.g. 0 is 0.00 but 0.00010000 displays as 0.0001). And ParseMoney allows entry of full-precision values. And JSONs AmountFromValue doesnt round to two places, so you can send/move full-precision values.
74	From/Message fields fool some users into thinking they could include a message with a transaction. This removes the feature from the GUI (but not from the code) and only shows address and amount fields in SendDialog. edit: It also changes the displayed sample address to an invalid one so users dont send coins there.
72	Still todo: set -maxconnections default.
63	As discussed in Issue #5 the protocol version should be differentiated from the client version. It makes live so much easier for alternative implementations.
62	When using Js-remote I had some disconnections, and it was impossible to reconnect. This should fix it.
59	Please pull. :) Hope this gets us one step closer to the .20 release.
57	
56	Ive merged the CMake changes from and Ive tested it on Ubuntu Lucid.
55	Ref .
54	instead, assign the address to "" account
53	New -testnet genesis block, and difficulty adjustment rules.
52	Makes bitcoin buildable with non-debug/shared/etc wxWidgets without makefile changes.
51	I think its important that the "move" command handles subcent transactions without silently rounding amounts at two decimal places. It is common in a lot of cases to handle these small amounts (bitcoin central for example). I want to keep using it as a second security level on bitcoin central, but right now its not possible because the DB-tracked accounts slowly get out of sync with the bitcoin ones, and at some points transaction get rolled back because some bitcoin account does not have enough funds whereas the DB-tracked one has enough credit to complete the transaction. If I try to move 0.001 BTC between two accounts I get a "true" returned even though I should have gotten an "Invalid amount" with the previous round-everything approach since nothing would have changed. With this, rounding is only disabled for the "move" command.
46	Simple code to enable encryption of the database. Uses Berkeley DB built in AES encryption with a password from the new dbpassword option. 1FabZdhzEQJC7qJxb3k1RHVMf5gctB8qbh
43	The code updates database for every seed node every time we make a new outgoing connection. This isnt necessary.
42	The -maxconnections=N command line argument is meant to limit the total number of connections to N. It reserves 8 (or less, if N<8) slots for outgoing connections, and is meant to allow N-8 incoming connections. But the calculation is slightly wrong, and the existing outgoing connections are counted twice. This fixes it.
19	
41	
40	The -rpcssl command line option is a boolean, like -server, -daemon, -testnet, etc. Specifying -rpcssl=1 is the same as just -rpcssl, as for any other boolean flag, so lets show it the same in the help text.
38	Currently, 4way (SSE2) hashing is done (if supported) unless -4way is specified, in which case it isnt, due to a bug in the processing of the -4way command line argument.
37	Add new command line argument "-printtoconsole" to send debugging output to the console instead of to debug.log. The code for this was already in place, but there was no way other than editing the source and rebuilding to turn it on.
36	The --help text wasnt showing the default values for three of the options, as follows: -rpcport (default: 8332) -rpcconnect (default: 127.0.0.1) -keypool (default: 100) Edited the --help text to include the defaults.
35	Its just a typo in the help text.
33	Unset the background color for the statusbar so it will use the system default. If only background color is set explicitly (and not also foreground), users with light-on-dark system themes get unreadable white text on light-grey background. Could also add an explicit foreground color, but I see no reason for the barely noticeable difference in the bg color in the first place. (I tried editing the .fbp file with the wxFormBuilder, but it ended up changing the indentation (so git thinks every line has changed), so i just edited the template and the generated file by hand.)
32	Fixes issue #31
30	See
27	Dumb bug: listaccounts N ignores the N. My only excuse is that this is a hard feature to test, because transactions confirmations just keep happening, at unpredictable times...
24	Adds a "details" array to gettransaction output. e.g. { "amount" : 0.00000000, "fee" : 0.00000000, "confirmations" : 609, "txid" : "b593920033b905c0e7c1d82d5b3e15a114841fa916719e968add3212e07c73a0", "time" : 1294342907, "details" : [ { "account" : "Test2", "address" : "mtQArCTnZHGsPf89jus6khxriYsJbU673P", "category" : "send", "amount" : -11.00000000, "fee" : 0.00000000 }, { "account" : "Test1", "address" : "mtQArCTnZHGsPf89jus6khxriYsJbU673P", "category" : "receive", "amount" : 11.00000000 } ] }
23	Cross Origin Resource Sharing lets servers support cross-origin Javascript. It is supported by the latest browsers (although IE support is... different), and involves sending CORS headers in responses. Adding this enables Javascript code running in a browser to connect with any bitcoin/bitcoind that allows RPC connections from the browsers IP address and has the right rpc username/password.
21	Simple oversight.
10	Three changes to listtransactions: Add address to listtransactions output. "multisends" (non-standard, use one transaction to send to multiple addresses) generate N "category":"send" lines. Bug fix: listtransactions wasnt reporting pay-by-IP-connection receive transactions.
9	From piotr; works for Gavin on Linux and Mac.
