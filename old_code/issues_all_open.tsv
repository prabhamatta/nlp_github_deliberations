3294	open	gavinandresen	Im writing some wallet regression tests using -regtest mode, and need to generate an initial multi-hundred-block chain. Repeatedly calling setgenerate to generate one block is slow and doesnt work properly, because block creation happens asynchronously. This adds two features to setgenerate in -regtest mode: 1) Instead of being interpreted as number of threads to start, the third argument is the number of blocks to generate. 2) setgenerate will not return until the block creation threads have created the requested number of blocks.	https://api.github.com/repos/bitcoin/bitcoin/issues/3294	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3294/comments	2013-11-21T04:24:01Z	None
3293	open	onlyjob	When building from tarball (i.g. not from git source tree or when git is not available) `genbuild.sh` write undefined $TIME to "build/build.h". Even worse, when TIME is set in the environment then its value is written instead of a date. For me this change fixed FTBFS which I got because I had TIME enviroment variable set with format for time(1) utility.	https://api.github.com/repos/bitcoin/bitcoin/issues/3293	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3293/comments	2013-11-21T00:52:51Z	None
3292	open	mikehearn	The home button in the toolbar is huge compared to the rest, and the UI generally looks wrongly fitted together. I suspect Qt needs to be upgraded to a version that supports hi-dpi displays or something like that.	https://api.github.com/repos/bitcoin/bitcoin/issues/3292	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3292/comments	2013-11-20T21:12:34Z	None
3291	open	mikehearn	Compiling git master with MacOS X 10.9 fails with STL link errors. Apparently Apple changed in this release to use their own libc++ instead of libstdc++ and its not compatible. It can be fixed like so: ./configure CXXFLAGS=-stdlib=libstdc++	https://api.github.com/repos/bitcoin/bitcoin/issues/3291	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3291/comments	2013-11-20T21:03:24Z	None
3290	open	kunstmusik	Regarding the "Mac Corruption Bug" as discussed here: I noticed a number of people quoting this kind of error: Assertion failed: (pindexFirst), function GetNextWorkRequired, file ../litecoin/src/main.cpp, line 1149. The relevant code in Bitcoin is in src/main.cpp:1026 (as of commit d980f9b7d687a1e60eecf3691b592d9806a30f4a): // Go back by what we want to be 14 days worth of blocks const CBlockIndex* pindexFirst = pindexLast; for (int i = 0; pindexFirst && i < nInterval-1; i++) pindexFirst = pindexFirst->pprev; assert(pindexFirst); I assume that the error is due to the # of pindexFirst->pprev links being less than nInterval-1. In that scenario, this code would walk pindexFirst all the way back until pprev is NULL. The code then is faulty in that it is overstepping the walking back of pindexFirst by one. Recommended code fix is to change the test as below: // Go back by what we want to be 14 days worth of blocks const CBlockIndex* pindexFirst = pindexLast; for (int i = 0; pindexFirst->pprev && i < nInterval-1; i++) pindexFirst = pindexFirst->pprev; assert(pindexFirst); The check for pindexLast being NULL is done in line 1031, so we are safe to check pindexFirst->pprev.	https://api.github.com/repos/bitcoin/bitcoin/issues/3290	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3290/comments	2013-11-20T18:11:05Z	None
3289	open	Commissar0617	both my desktop, running win8 pro, and my laptop, running win7, throw "cannot read block", or "failed to write block" or "failed to write undo data". this happenes with litecoin-qt as well.... ive tried reindex, and deleting... these are fresh installs as of midnight, last night...	https://api.github.com/repos/bitcoin/bitcoin/issues/3289	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3289/comments	2013-11-20T17:57:30Z	None
3287	open	Diapolo	- this was unused for the label and also makes no sense, so remove it	https://api.github.com/repos/bitcoin/bitcoin/issues/3287	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3287/comments	2013-11-20T15:02:01Z	None
3286	open	Diapolo	- in the address validator a string < address length is considered intermediate - in the validated line edit add an isAcceptable() check on focus out of the field, which kicks in, when a validator is used with the line edit - remove an isAcceptable() check from sendcoinsentry.cpp	https://api.github.com/repos/bitcoin/bitcoin/issues/3286	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3286/comments	2013-11-20T15:00:06Z	None
3285	open	Diapolo	- remove monospace labels from sendcoinsdialog also - use a validated line edit for the change address - ensure we have a valid change address in CoinControlDialog::coinControl->destChange or just CNoDestination() - some small ui file changes	https://api.github.com/repos/bitcoin/bitcoin/issues/3285	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3285/comments	2013-11-20T14:55:09Z	None
3284	open	laanwj	Split bitcoinrpc up into - rpcserver: bitcoind RPC server - rpcclient: bitcoin-cli RPC client - rpcprotocol: shared common HTTP/JSON-RPC protocol code One step towards making bitcoin-cli independent from the rest of the code, and thus a smaller executable that doesnt have to be linked against leveldb. This commit only does code movement, there are no functional changes.	https://api.github.com/repos/bitcoin/bitcoin/issues/3284	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3284/comments	2013-11-20T13:28:09Z	None
3282	open	badger200	During the startup of Bitcoin-qt on Windows, (which is extremely slow, usually taking several minutes to start), the standard taskbar icon for the running program does not display, making it impossible to ALT-TAB back to the Bitcoin programs startup dialog until the several-minute startup process completes. In other words, Bitcoin-qt basically disappears the moment you switch to another window. It should be trivial to toggle a flag on the startup window created to make it show up on the taskbar. I havent programmed Win32 in a while but I know it was basically a checkbox in Visual Studio last time I did it. Test system: Windows XP SP3 32-bit, all updates, Bitcoin-qt 0.8.5, 7200 RPM hard drive, 4GB RAM, Core i5 760 quad core at 4.0GHz	https://api.github.com/repos/bitcoin/bitcoin/issues/3282	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3282/comments	2013-11-20T05:44:55Z	None
3281	open	laanwj	Add "destdata" record type to wallet, as well as accessor functions on CWallet and CWalletDB. This can be used by the UI to store arbitrary data tuples to be associated with a tx destination in the wallet. A destdata tuple in the wallet is of the form (address, key, value) where the key acts to distinguish different types of generic data. The purpose of this is to give the GUI a way to store: - When an address table record was created (for #3207) - The invoice Payment URI associated with a receiving address (for #3207) - Outgoing payment requests (as soon as the GUI for this is ready), so that they can be associated with incoming transaction outputs when paid (transaction details could show this information...) And possibly other data later. Ill add tests when this is deemed a sane change.	https://api.github.com/repos/bitcoin/bitcoin/issues/3281	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3281/comments	2013-11-19T12:52:39Z	None
3279	open	sipa	Now that CValidationState remembers the reasons for rejection, they could be reported in the `sendrawtransaction` error.	https://api.github.com/repos/bitcoin/bitcoin/issues/3279	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3279/comments	2013-11-18T12:22:57Z	None
3277	open	Diapolo	- implement CAutoFile via std::fstream and use it in the code - unify log/error messages for serializing/deserializing exceptions - add debug and benchmark messages for writing/reading block/undo files - remove boost::path member from CAddrDB class - add new helper functions GetBlockFile() and GetUndoFile() If considered usefull, Im open to feedback and comments. Ive been using this for ages with my local build and never had any problems with it. I know that currently there is no "flush to disk" when downloading blocks, but perhaps this can help investigating the Mac corruption problems.	https://api.github.com/repos/bitcoin/bitcoin/issues/3277	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3277/comments	2013-11-18T11:12:20Z	None
3276	open	sipa	Currently, the protocol processing happens mostly in main, while most of its data structures are defined in net. This leads to weird situations where they need to access eachothers locks, and it is unclear what functionality belongs where. This pull request introduces a main-specific CNodeState, which is managed entirely by main, so doesnt require CNodes locks. The intention is to move all processing-related fields in CNode to CNodeState, so ultimately main doesnt need access to CNode anymore, decoupling the two. This is a long way out, and well probably want to separate protocol processing to a different module than block validation, but its what we have now. For now, only node banning is moved to CNodeState. The reason for this is asynchronous processing. When blocks or transactions are processed by background threads, or in any way not directly the result of a single message being processed, we may want to attribute errors still to the original senders DoS score. Going back and forth between main and net for this becomes increasingly ugly, as this can be done perfectly well inside main. The direct motivation for this is an attempt at implementing BIP37-filtered-block-based fetching, and headers-first.	https://api.github.com/repos/bitcoin/bitcoin/issues/3276	4	https://api.github.com/repos/bitcoin/bitcoin/issues/3276/comments	2013-11-18T00:35:55Z	None
3274	open	fryx	libpthread not getting linked, required by librt. is this a librt problem? full config.log at configure:11734: $? = 0 configure:11748: result: yes configure:11886: g++ -o conftest -I/usr/local/BerkeleyDB.4.8/include -L/usr/local/BerkeleyDB.4.8/lib/ -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -fPIE -fno-stack-protector -fstack-protector-all -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -D_FORTIFY_SOURCE=2 -Wl,-z,now conftest.cpp -L/usr/lib -lboost_system-mt -lboost_filesystem-mt -lboost_program_options-mt -lboost_thread-mt -lboost_chrono-mt >&5 /usr/lib/gcc/x86_64-alpine-linux-uclibc/4.7.3/../../../../x86_64-alpine-linux-uclibc/bin/ld: /lib/librt.so.0.9.32: undefined reference to symbol pthread_cancel /usr/lib/gcc/x86_64-alpine-linux-uclibc/4.7.3/../../../../x86_64-alpine-linux-uclibc/bin/ld: note: pthread_cancel is defined in DSO /lib/libpthread.so.0.9.32 so try adding it to the linker command line /lib/libpthread.so.0.9.32: could not read symbols: Invalid operation collect2: error: ld returned 1 exit status configure:11886: $? = 1 configure: failed program was: | /* confdefs.h */ | #define PACKAGE_NAME "Bitcoin" | #define PACKAGE_TARNAME "bitcoin"	https://api.github.com/repos/bitcoin/bitcoin/issues/3274	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3274/comments	2013-11-17T21:20:32Z	None
3273	open	laanwj	Make users accustomed to the other subdivision units (mBTC, muBTC) by showing the total amount in all units in the confirmation dialog. This was recently raised on the mailing list and could be a preparation for switching over the default unit eventually. ![allunits](https://f.cloud.github.com/assets/126646/1558415/c6f324ae-4f8e-11e3-91ac-88e2705c32db.png)	https://api.github.com/repos/bitcoin/bitcoin/issues/3273	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3273/comments	2013-11-17T13:47:44Z	None
3271	open	brandondahler	Convert aoti[64] to fromstr, itostr[64] to tostr. Add CLogStream (logstream.h), wraps ostringstream but preserved type after insertions. Use fstream where possible (when no fsync is required). Change error function to have void return type. Fix functions relying on the false return from error function. Use boost::format for localized string token replacement. Follow up for #3236, #3237, and #3244. This should remove C99 requirements. Replaces *printf functions with C++ equivalents.	https://api.github.com/repos/bitcoin/bitcoin/issues/3271	15	https://api.github.com/repos/bitcoin/bitcoin/issues/3271/comments	2013-11-17T04:34:31Z	None
3270	open	WilhelmGGW	Can someone with the keys to do it, please update the bitcoind (daemon) thats in the Linux Ubuntu repository (12.04 LTS)? It still has version 0.3.24!	https://api.github.com/repos/bitcoin/bitcoin/issues/3270	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3270/comments	2013-11-16T21:42:22Z	None
3269	open	Diapolo	1. Why was there such a strange and different font choosen for displaying BTC and copyable texts in the coin control address selection window? 2. Coin control address selection window doesnt catch up (on the fly) when changing display unit in the options. 3. IMHO there should be an easier way to set mode back to automatic coin selection, whithout the need to leave sendcoins and switch to coin control address selection window and choose unselect there.	https://api.github.com/repos/bitcoin/bitcoin/issues/3269	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3269/comments	2013-11-16T17:05:54Z	None
3266	open	gmaxwell	when you try to send to some place youve already sent, perhaps there should be a polite "Youve already sent X btc to this destination in TXN y on date Z. Do you want to continue?" which should help people avoid some of the incidents theyve had with double paying.	https://api.github.com/repos/bitcoin/bitcoin/issues/3266	5	https://api.github.com/repos/bitcoin/bitcoin/issues/3266/comments	2013-11-16T12:34:56Z	None
3265	open	Diapolo	- prevents the client to handle payment requests that do not match the clients network and shows a warning instead (was mainly a problem with drag&drop payment requests onto the client window)	https://api.github.com/repos/bitcoin/bitcoin/issues/3265	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3265/comments	2013-11-16T00:58:25Z	None
3256	open	imton	Id like to see an option in RPC getrawmempool so it returns the decoded txs instead of the hash only. This is my first try, please dont laugh :) It is my first c++ code ever. As we discussed in IRC, the idea should be to refactor "getrawtransaction" and put it into a utility method so we can reuse that here. I will try to do it, at least for me because I need it. Would love to hear what you think. Thanks, ton.	https://api.github.com/repos/bitcoin/bitcoin/issues/3256	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3256/comments	2013-11-14T19:08:54Z	None
3254	open	Diapolo	- make eventFilter() private and pass events on to QObject::eventFilter() instead of just returning false - re-work paymentservertest.cpp to correctly handle the event test after the above change (rewrite test_main to allow usage of QCoreApplication:: in the tests) - delete socket when we were unable to connect in ipcSendCommandLine() - show a message to the user if we fail to start-up (instead of just a debug.log entry) - misc small comment changes	https://api.github.com/repos/bitcoin/bitcoin/issues/3254	6	https://api.github.com/repos/bitcoin/bitcoin/issues/3254/comments	2013-11-14T18:24:56Z	None
3250	open	laanwj	No need to implement full support for BIP0032, but key generation using the private derivation should be the default. Im sick and tired of worrying about backup up after enough keys have been used (and reading stories about people that lose their coins because of that), and the consensus seems to be against #2841 (noautofillkeypool), so lets do this.	https://api.github.com/repos/bitcoin/bitcoin/issues/3250	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3250/comments	2013-11-14T11:57:17Z	None
3249	open	imton	I think the proper way to report bitcoin is in satoshi units, the smallest unit today. To not break compatibility with current RPC clients, I think of adding this in a opt-in way. There could be a setting called something like "RPC-unit-satoshis" or the like. Id love to hear why this arguments against it. Thanks, ton.	https://api.github.com/repos/bitcoin/bitcoin/issues/3249	5	https://api.github.com/repos/bitcoin/bitcoin/issues/3249/comments	2013-11-14T09:35:38Z	None
3243	open	shahnah	Theres a lot of ProcessBlock() "already have block x" errors being created in my initial sync. Is this due to configuration, network latency, operating system? Is it even something I need to be worried about? Theres not a heap of information around as to what is going on, but from reading the forums, peers shouldnt even be sending me orphan blocks at all during the initial sync (as they know theyre orphans). [Debug.log](https://gist.github.com/shahnah/c3d4b1f2bc34fe89c5ab) - ProcessBlock() error spam "already have block" [Debug.log](https://gist.github.com/shahnah/33d569b71213aae52ea6) - attempt with a later build, many orphan blocks not no particular reason (I assume its related) Im running OSX Mavericks, with a SSD, plenty of memory, and a bitcoind build at the time of commit cd696e64dfe8821fe13d959dd2d1a2ee892f9155.	https://api.github.com/repos/bitcoin/bitcoin/issues/3243	2	https://api.github.com/repos/bitcoin/bitcoin/issues/3243/comments	2013-11-13T09:43:09Z	None
3242	open	luke-jr		https://api.github.com/repos/bitcoin/bitcoin/issues/3242	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3242/comments	2013-11-12T21:02:41Z	None
3239	open	gavinandresen	This is the first half of the smart fee rework. Three commits; the first two are clean-up refactors. The third adds an optional boolean verbose flag to getrawmempool, and reworks the memory pool to store CTxMemPoolEntrys instead of CTransactions. Output of getrawmempool true is an Object, with transaction id keys: ``` "f5f67700586e435a8634f6235783936cb015a11115f2d379fb987e34d21d58bd" : { "size" : 223, "fee" : 0.0050000, "time" : 1384221652, "height" : 269117, "startingpriority" : 0.00000000, "currentpriority" : 313.90134529, "depends" : [ "6fcad339f1a613594e9e9f877772a6c3896493ea7babf286a054421190761efa" ] }, ``` EDITED: store/report timestamp when the transaction entered the pool. Shed-painting on whether this should return an Array of Objects (with "txid" one of the keys) instead of an Object welcome, as are suggestions for key names (e.g. prefer startingpriority or prioritystart).	https://api.github.com/repos/bitcoin/bitcoin/issues/3239	13	https://api.github.com/repos/bitcoin/bitcoin/issues/3239/comments	2013-11-12T01:14:08Z	None
3229	open	luke-jr	As discussed on IRC, this removes the "defaults" miners often use as an excuse to not make mining decisions. getblocktemplate is disabled unless bitcoind is explicitly configured with mining settings.	https://api.github.com/repos/bitcoin/bitcoin/issues/3229	8	https://api.github.com/repos/bitcoin/bitcoin/issues/3229/comments	2013-11-10T23:37:21Z	None
3228	open	gthiruva	Im running MacOS 10.9 (13A598) with the latest Boost, BerkeleyDB, and libqrencode installed via MacPorts. Compilation goes fine. But linking seems to fail due to undefined symbols in util.o and db.o. See full output here: Error output: Undefined symbols for architecture x86_64: "Db::verify(char const*, char const*, std::ostream*, unsigned int)", referenced from: CDBEnv::Verify(std::string, bool (*)(CDBEnv&, std::string)) in db.o CDBEnv::Salvage(std::string, bool, std::vector<std::pair<std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> > >, std::allocator<std::pair<std::vector<unsigned char, std::allocator<unsigned char> >, std::vector<unsigned char, std::allocator<unsigned char> > > > >&) in db.o "boost::program_options::to_internal(std::string const&)", referenced from: boost::program_options::detail::basic_config_file_iterator<char>::getline(std::string&) in util.o "boost::program_options::detail::common_config_file_iterator::common_config_file_iterator(std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, bool)", referenced from: boost::program_options::detail::basic_config_file_iterator<char>::basic_config_file_iterator(std::istream&, std::set<std::string, std::less<std::string>, std::allocator<std::string> > const&, bool) in util.o ld: symbol(s) not found for architecture x86_64 clang: error: linker command failed with exit code 1 (use -v to see invocation) make: *** [Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt] Error 1	https://api.github.com/repos/bitcoin/bitcoin/issues/3228	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3228/comments	2013-11-10T06:03:14Z	None
3227	open	BrogulT	Just installed 0.8.5 Win7/64. Now when I start the client, it goes thru validating/loading and then when the client window opens, it just hangs. The spinning wheel is showing whenever the cursor is over the window, otherwise the computer works normally. I can minimize the client window. TM shows that the client is using one core/thread pretty much full time. I left it overnight and no change. System restart didnt matter. ????	https://api.github.com/repos/bitcoin/bitcoin/issues/3227	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3227/comments	2013-11-09T20:57:05Z	None
3226	open	laanwj	It would be useful to support coinjoin in the client and GUI. This would allow people to combine their transactions with random other people to increase privacy. (See for original proposal) The simplest implementation would be where the users send their input and output information to some meeting point server, and the server creates the transaction and asks people to sign it. The server learns the mapping, but no one else does, and the server still cant steal the coins.. This server would be set in the configuration, and could be a TOR hidden service for extra privacy. Initially this would be a simple (http/https based?) protocol that drops the transaction plus a timeout value and a way to request the current status. Later on, this could be extended with blinding, and/or a solution that does not rely on servers (or relies on P2P network changes, for example with proposal in the RPC and GUI this requires a way to queue transactions with a configurable timeout. The transactions will then either be queued locally, or if one is configured, sent to the meeting point server.	https://api.github.com/repos/bitcoin/bitcoin/issues/3226	20	https://api.github.com/repos/bitcoin/bitcoin/issues/3226/comments	2013-11-09T12:27:51Z	None
3225	open	gmaxwell	For some unknown reason some nodes run by ordinary users are periodically emitting bad empty transactions. The result is peers log ERROR: CTransaction::CheckTransaction() : vin empty ERROR: CTxMemPool::accept() : CheckTransaction failed and eventually ban the node for misbehaving. Phantomcircuit had a theory that it had to do with the default constructor for wtx ending up in the wallet, but its not clear how any of the obvious causes would make them be broadcast.	https://api.github.com/repos/bitcoin/bitcoin/issues/3225	5	https://api.github.com/repos/bitcoin/bitcoin/issues/3225/comments	2013-11-09T01:57:43Z	None
3224	open	super3	Just wanted to raise some discussion. Is it possible that we could transition our [releases to Github](https://github.com/blog/1547-release-your-software). I think it makes sense to consolidate releases here both for convenience and [other reasons](http://www.reddit.com/r/technology/comments/1q6k59/gimp_abandons_sourceforge_due_to_forced_ad_and/). But then again there might be some reasons for continuing to use sourceforge that I might not be aware of.	https://api.github.com/repos/bitcoin/bitcoin/issues/3224	12	https://api.github.com/repos/bitcoin/bitcoin/issues/3224/comments	2013-11-08T23:33:23Z	None
3220	open	sipa	I think we should make getrawtransaction fail entirely if no txindex is enabled, instead of only working on not-fully-spent transactions, with a confusing error message otherwise.	https://api.github.com/repos/bitcoin/bitcoin/issues/3220	8	https://api.github.com/repos/bitcoin/bitcoin/issues/3220/comments	2013-11-07T16:26:21Z	None
3219	open	sipa	As reported by a few people on IRC. Installing libboost-{system,filesystem,chrono,program-options,thread,test}1.54{-dev,.0} manually seems to work.	https://api.github.com/repos/bitcoin/bitcoin/issues/3219	16	https://api.github.com/repos/bitcoin/bitcoin/issues/3219/comments	2013-11-07T16:14:52Z	None
3218	open	ThePiachu	I called listunspent, got a bunch of results for normal addresses in the wallet, but none for the multisignature addresses in my wallet. I searched the results both by the address and the transactionID and I did not find any results.	https://api.github.com/repos/bitcoin/bitcoin/issues/3218	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3218/comments	2013-11-07T07:59:43Z	None
3217	open	ThePiachu	Calling listreceivedbyaddress I receive: { "result": [ { "address": "2NAdAGFnhk5qvFQNiFVMNuK59QzPLvn3zAv", "account": "MultiTest1", "amount": 1.0, "confirmations": 1 } ], "error": null, "id": "1" } Calling getreceivedbyaddress (2NAdAGFnhk5qvFQNiFVMNuK59QzPLvn3zAv), I get { "result": 0.0, "error": null, "id": "1" } Those two functions should return similar results but they dont, at least for multisignature addresses.	https://api.github.com/repos/bitcoin/bitcoin/issues/3217	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3217/comments	2013-11-07T07:50:07Z	None
3214	open	laanwj	Split -datadir option into -walletdir and -blocksdir options. The old option `-datadir` would be kept around and sets both. This makes it possible to store the bitcoin.conf (using -conf) the block chain (using -blocksdir) and the wallet(s) (using -walletdir) all in different places without resorting to symbolic links, junctions and other OS-specific magic (which causes some problems, especially windows junctions). I think -conf should default to bitcoin.conf in the walletdir, though this is open to discussion. bootstrap.dat, debug.log and other non-wallet client data would be stored in the blocksdir. Locks will be needed in both the block chain and wallet directories to make sure they are not shared between running instances of bitcoind/-qt. Anyone agree?	https://api.github.com/repos/bitcoin/bitcoin/issues/3214	7	https://api.github.com/repos/bitcoin/bitcoin/issues/3214/comments	2013-11-06T11:19:32Z	None
3212	open	leo-bogert	By "paper backup" I mean what is commonly associated with it: - To be able to print out the private keys of a wallet, in both human readable and computer readable format - To include the public keys in human readable and computer readable format, so you can quickly check whether the paper still holds value. - To be able to import the backup easily. By "multi" I mean something similar to "encrypted" or "N-factor authentication": - The backup should consist of multiple sheets. It should only be possible to spend the Bitcoins if you have ALL of the sheets. This allows you to keep the backup safe from physical theft by splitting it to different locations. - Ideally, the amount of sheets should be freely configurable. - It can be implemented by having a long password for the wallet which is split into equal-sized parts and each sheet containing only one part. This allows the user to destroy one sheet and instead memorize the password which was on it. Then you effectively have an encrypted paper backup as a bonus feature. By "nested" I mean something to provide plausible deniability: - It would be useful to not disclose the number of sheets on each sheet. Then an attacker cannot quickly tell whether he has all of them, and might quit searching for more. - To prevent the attacker from being able to determine whether he has all sheets, make each sheet represent a complete Bitcoin address, including private key. Fund that address with a decoy amount of Bitcoins. - Put the random seed used to generate the decoy address on each sheet. But also generate a "primary" Bitcoin address whose public/private keys are NOT mentioned on the sheets. - Instead, the primary key is generated by concatenating the random seeds used for generating the decoy addresses of *all* sheets. Put 90% of the money into the primary address. - So ALL of the sheets combined would generate the "actual" address which holds the most amount of coins. But the attacker would stop trying to search more sheets once he has found one, because it DOES hold money. Just not all of it. - This could even be raised to a higher level: For each possible N out of M combinations of the sheets, also generate a decoy primary address which holds a little amount of Bitcoins. If the attacker believes that you had used the nesting feature and harasses you to hand out the remaining sheets, you can plausibly claim having given all of them to him, while you only revealed part of the whole. Even if the nesting is not implemented at first, I think at least the multi-sheet part is absolutely critical. One of the core advantages of Bitcoin surely is that they cannot be physically stolen because you can encrypt them. This is voided with physical paper backup which isnt split into multiple sheets. You might argue that paper backup doesnt have to be implemented in Bitcoin-Qt because Bitcoin-Armory already supports it somehow. I think backup really should be a core feature of the reference Bitcoin client because it is a core advantage of Bitcoin. You cannot backup dollars. You can backup Bitcoins. Please make the reference Bitcoin client more useful for the very paranoid. [Off-topic PS: Im greedy and proud of the nesting idea, make me happy: 14EpAnasbwpeRH55mQZKX8GjZRnY6DCNsQ :) Admins please mail me if donation requests are not allowed, I will remove it then.]	https://api.github.com/repos/bitcoin/bitcoin/issues/3212	2	https://api.github.com/repos/bitcoin/bitcoin/issues/3212/comments	2013-11-06T05:26:28Z	None
3207	open	laanwj	Continuation of work in #3099. Keep a list of requested payments in the Receive tab so that a user can recall previously created receive requests after closing their windows. Currently this list is not stored between bitcoin-qt sessions. This can be implemented later, but it is not clear here it should be stored as I dont think it belongs in the wallet (maybe in QSettings?) at least until it is really associated with a transaction. ![recently_requested](https://f.cloud.github.com/assets/126646/1475793/dc78e68a-4640-11e3-812b-3f39978099c4.png)	https://api.github.com/repos/bitcoin/bitcoin/issues/3207	6	https://api.github.com/repos/bitcoin/bitcoin/issues/3207/comments	2013-11-05T17:38:24Z	None
3203	open	laanwj	To remove the confusion between the Bitcoin network and the reference client implementation that we maintain in this repository, both confusingly named bitcoin, wed like to rebrand the client. This has been discussed a lot before, but the following is the proposal by and I agree: Bitcoin-Qt --> btcore (full name Bitcoin Core) bitcoind --> btcored (full name Bitcoin Core Daemon) bitcoin-cli --> btcore-cli (full name Bitcoin Core CLI Client) Renaming the executables is going to break some scripts, so wed likely want to combine it with the bitcoind CLI deprecation to make sure the migration pain is short and swift instead of drawn out.	https://api.github.com/repos/bitcoin/bitcoin/issues/3203	27	https://api.github.com/repos/bitcoin/bitcoin/issues/3203/comments	2013-11-05T12:54:19Z	None
3201	open	nu11gravity	Put simply: "minority can earn revenue in excess of their contribution" as written in this paper: Surprisingly, the return from keeping your mined block secret for a few minutes outweighs the risk of someone beating you to it (with a big enough pool, such as the ones that already exist). The paper suggests a solution (should take less than 5 minutes): "We propose a simple, backwards-compatible change to the Bitcoin protocol to address this problem and raise the threshold. Specically, when a miner learns of competing branches of the same length, it should propagate all of them, and choose which one to mine on uniformly at random. In the case of two branches of length 1, as discussed in Section 4, this would result in half the nodes (in expectancy) mining on the pools branch and the other half mining on the other branch. This yields Y = 1/2, which in turn yields a threshold of 1/4. Each miner implementing our change decreases the selsh pools ability to increase through control of data propagation. This improvement is independent of the adoption of the change at other miners, therefore it does not require a hard fork. This change to the protocol does not introduce new vulnerabilities to the protocol: Currently, when there are two branches of equal length, the choice of each miner is arbitrary, eectively determined by the network topology and latency. Our change explicitly randomizes this arbitrary choice, and therefore does not introduce new vulnerabilities." (Eyal & Sirer 2013)	https://api.github.com/repos/bitcoin/bitcoin/issues/3201	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3201/comments	2013-11-05T06:01:47Z	None
3195	open	gavinandresen	This is half of an idea from Full idea: Relay blocks as soon as the quick, transaction-independent checks are done (most critically, has-valid-proof-of-work). To avoid any network-splitting potential, that can only be done if relaying blocks with valid proof-of-work but (say) an invalid transaction does NOT trigger a DoS-ban. I think that should be done for the 0.9 release.	https://api.github.com/repos/bitcoin/bitcoin/issues/3195	4	https://api.github.com/repos/bitcoin/bitcoin/issues/3195/comments	2013-11-04T03:31:43Z	None
3194	open	btclove	![btcerror](https://f.cloud.github.com/assets/5842727/1460780/ae717284-446f-11e3-874f-89f317a8a5e2.JPG) Assertion failed! Proagram:...0.8.5-win32\bitcoin-0.8.5-win32\bitcoin-qt.exe File:src/main.cpp Line:1138 Expression:pindexFirst for information onn how your program can cause an assertion failure,see the Visual c++ documentation on asserts ---------------------- my old version is bitcoin-0.3.24-win32 ,bitcoin-0.3.24-win32 is zip package cant uninstall, so ,is download bitcoin-0.8.5-win32 and install it	https://api.github.com/repos/bitcoin/bitcoin/issues/3194	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3194/comments	2013-11-03T09:52:57Z	None
3190	open	TheBlueMatt	debug.log shows this is definitely appearing more than the number of modified nodes (and were setting DoS for nodes doing this). Theory is wallets getting transactions cleared and stored with 0-bytes instead of their value.	https://api.github.com/repos/bitcoin/bitcoin/issues/3190	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3190/comments	2013-11-01T02:07:07Z	None
3182	open	gavinandresen	Reported via email: The only issue Ive come across period, isnt really a problem. But it is confusing to someone downloading Bitcoin-Qt unaware of OS X Mavericks under the surface options. When I first opened it up and set if off downloading the blockchain I thought there was a problem as it was doing it incredibly slow. Much slower than usual. And when I clicked on the battery icon at the top of the screen, theres a new feature in Mavericks which lets you know of "Apps Using Significant Energy". When Chrome was the only app that appeared I realized something was wrong. I had a bit of knowledge about a new feature in Mavericks called App Nap and I had a hunch it was something to do with that. It was. App Nap is a new feature designed for optimizing battery life that puts background/non-visible apps with no audio, video or otherwise relevant to current usage, to sleep. So whenever I was browsing in Chrome, Qt was fully napping. I have since read that theres a full App Nap API for developers to take advantage of to tweak which parts or aspects of an app can or cant be put to sleep, or turn off napping of the app full stop; so devs have control over this feature, but it is enabled by default. Until then, I figured out a simple way to turn off app napping on the users side with any app as well. You can right click any app, click Get Info, and at the top theres a new checkbox named Prevent App Nap. I imagine this is useful to anyone, or yourself, using Qt on Mavericks as doing anything without it seems to completely stop Qt from synchronising with the blockchain.	https://api.github.com/repos/bitcoin/bitcoin/issues/3182	9	https://api.github.com/repos/bitcoin/bitcoin/issues/3182/comments	2013-10-29T04:36:07Z	None
3181	open	dooglus	In gmaxwell wrote about the danger of sending large numbers of Bitcoins in a single transaction: > One bitflip while making a transaction with these fat > txouts and its $10 million in paper value down the drain. Is this a real concern? If a bit gets flipped when broadcasting a transaction, could it cause the transacted coins to become unspendable forever? If so, would it be better if transactions contained a checksum, much like bitcoin addresses do, such that random bitflips are detectable?	https://api.github.com/repos/bitcoin/bitcoin/issues/3181	6	https://api.github.com/repos/bitcoin/bitcoin/issues/3181/comments	2013-10-29T03:00:04Z	None
3178	open	Diapolo	- replaces a pwalletMain->IsLocked() check - in keypoolrefill init kpSize to 0 as we have the logic to determine max kpSize in pwalletMain->TopUpKeyPool() anyway	https://api.github.com/repos/bitcoin/bitcoin/issues/3178	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3178/comments	2013-10-28T12:02:08Z	None
3172	open	gmaxwell	We should be running a testnet node+wallet on a daily build that performs some kind of stupid ping-pong transactions, both open to the general public as well as self ping-ponging once an hour or so. This would give a system level test of the RPC interface, listtransactions, sendmany, keeping up with the chain, signing, etc. It would also give people trying things on testnet something they can transact with, and create some traffic so that fewer blocks are empty.	https://api.github.com/repos/bitcoin/bitcoin/issues/3172	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3172/comments	2013-10-28T05:05:20Z	None
3171	open	gmaxwell	We should have test infrastructure that bootstraps a new node (both on mainnet and on testnet). People (e.g. myself) have been doing this less formally prior to release, but we should be doing it continuously. Should also probably test bootstrapping over tor. Collecting some metrics like time to bootstrap (both to some specified heights as well as to completion) along the way would probably be useful.	https://api.github.com/repos/bitcoin/bitcoin/issues/3171	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3171/comments	2013-10-28T04:55:11Z	None
3170	open	gmaxwell	As noted at (https://github.com/bitcoin/bitcoin/pull/2839#issuecomment-21302247) there should exist test infrastructure that disconnects and reconnects the whole chain (mainnet and testnet). (Would have detected the OP_RETURN disconnection failure bug.)	https://api.github.com/repos/bitcoin/bitcoin/issues/3170	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3170/comments	2013-10-28T04:48:42Z	None
3168	open	imzhuli	key.cpp: 151 void SetSecretBytes(const unsigned char vch[32]) { 152 BIGNUM bn; 153 BN_init(&bn); 154 assert(BN_bin2bn(vch, 32, &bn)); 155 assert(EC_KEY_regenerate_key(pkey, &bn)); 156 BN_clear_free(&bn); 157 }	https://api.github.com/repos/bitcoin/bitcoin/issues/3168	4	https://api.github.com/repos/bitcoin/bitcoin/issues/3168/comments	2013-10-27T16:36:27Z	None
3166	open	gmaxwell	We should be showing sighash flags on signatures in transaction decodes.	https://api.github.com/repos/bitcoin/bitcoin/issues/3166	2	https://api.github.com/repos/bitcoin/bitcoin/issues/3166/comments	2013-10-27T10:30:47Z	None
3157	open	Diapolo	Related to #3159 and #3160 (same changes for transactionview and walletview). Goal: Harmonize user experience for export of addresses, transactions and backup of the wallet! ![export_addr](https://f.cloud.github.com/assets/1419649/1414006/c2433602-3e62-11e3-8743-bbb0f3ad0599.png)	https://api.github.com/repos/bitcoin/bitcoin/issues/3157	5	https://api.github.com/repos/bitcoin/bitcoin/issues/3157/comments	2013-10-26T16:59:20Z	None
3147	open	luke-jr		https://api.github.com/repos/bitcoin/bitcoin/issues/3147	6	https://api.github.com/repos/bitcoin/bitcoin/issues/3147/comments	2013-10-24T22:02:20Z	None
3141	open	Kroese	When searching for transactions, the grid begins to query the database while typing, which is fine. But when using very large wallets, this will freeze the interface so much that it becomes impossible to finish typing. Adding a very small delay would solve this issue, since it would allow me to finish my input before the client freezes. For example, when I try to look up transactions greater than 999 BTC, it will first start searching for all transactions > 9 BTC, and then > 99 BTC, and finally 999 BTC, even though Im typing 999 as fast as I possibly can.	https://api.github.com/repos/bitcoin/bitcoin/issues/3141	2	https://api.github.com/repos/bitcoin/bitcoin/issues/3141/comments	2013-10-24T08:57:29Z	None
3140	open	Kroese	After importing private keys, the client shows the wrong date for past transactions by that key. They will show the import-date instead of the real date they took place.	https://api.github.com/repos/bitcoin/bitcoin/issues/3140	2	https://api.github.com/repos/bitcoin/bitcoin/issues/3140/comments	2013-10-24T07:33:01Z	None
3136	open	Diapolo	Im using -txindex in my normal environment, when using payment requests without the client running, the client is started without any parameters and detects the missing -txindex and asks me ``Do you want to rebuild the block database now?`` answering no here crashes the client. Can you check that part of the code, as most of it was done by you :). Edit: Error is on Win7 x64 and its a BEX (Buffer Overflow Exception).	https://api.github.com/repos/bitcoin/bitcoin/issues/3136	4	https://api.github.com/repos/bitcoin/bitcoin/issues/3136/comments	2013-10-23T13:30:20Z	None
3132	open	stevenroose	Since I pulled a new update, I could not install anymore. Then I tried to do a fresh start as much as possible. Updates all homebrew dependencies, re-cloned the repository, checkout out at the latest stable version and tried to build from scratch. I got the following error, it really looks like the one I got before the fresh start, but Im not certain it is the same: Anyone experience with this?	https://api.github.com/repos/bitcoin/bitcoin/issues/3132	12	https://api.github.com/repos/bitcoin/bitcoin/issues/3132/comments	2013-10-22T23:06:58Z	None
3122	open	super3	Just trying to fork off the discussion from #3082. Seems like the is an interest for an RPC client with "like tab completion, and inline help, and batch processing, and pipelines of queries, etc" My biased vote goes toward building it with Python, because there are plenty of existing libs for that. Would the script in contrib/bitrpc/ be a good start? Other questions involve feature set, and how to manage the executable. Ive leave those for discussion though.	https://api.github.com/repos/bitcoin/bitcoin/issues/3122	8	https://api.github.com/repos/bitcoin/bitcoin/issues/3122/comments	2013-10-21T23:36:09Z	None
3120	open	laanwj	Since merging autotools it is no longer possible to build with Qt5. Or at least it is not automatically detected. Once this is resolved please revert documentation commit 62568f9.	https://api.github.com/repos/bitcoin/bitcoin/issues/3120	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3120/comments	2013-10-21T12:18:01Z	None
3118	open	bitstocoins	this is in reference to this issue here I am able to perfectly recreate the described issue If you start with a wallet that is pre 0.8 Replace the bitcoind in /daemon directory with any .8.0+ bitcoind execute walletpassphrase command this will instantly crash bitcoind Also there is adverse affects when creating a new btc address when using the getnewaddress method. The newly created address/accounts will not be added to the wallet. and any preceding call will fail. getinfo() etc... To fix this issue which is a NON issue simply download the desired bitcoind and simply execute it with the command one time bitcoind.exe -upgradewallet This simple error which is not technically an error cost me a great deal of time energy and effort. The issue 916 is reproducible by running bitcoind with an out of date wallet pre 0.8 since this issue was closed i had to create this post here. Hopefully this will allow the developers to recreate the problem which they could not create before.	https://api.github.com/repos/bitcoin/bitcoin/issues/3118	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3118/comments	2013-10-20T10:45:19Z	None
3113	open	ISibboI	It should be possible to make bitcoind use multiple different wallet files without having to restart, so that public and private eWallet services dont have to put everything into one big bucket. Especially for private eWallets, thatd be useful, because you can easily seperate which coins belong to which person without having to use a DB or something like that.	https://api.github.com/repos/bitcoin/bitcoin/issues/3113	2	https://api.github.com/repos/bitcoin/bitcoin/issues/3113/comments	2013-10-19T13:12:02Z	None
3111	open	BitBargain	Missing two features: 1) ability to configure the bind IP for RPC 2) ability to configure the bind IP when connecting outside (source IP) I assumed bind= was also applied to the RPC port and I assumed that externalip= applied to outgoing connections. Not the case, apparently. Solved both with the firewall, but it would be nice if bitcoind could do this on its own. Thanks.	https://api.github.com/repos/bitcoin/bitcoin/issues/3111	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3111/comments	2013-10-19T05:03:16Z	None
3110	open	Sammey1995	$ python ./linearize.py /home/sammey/.bitcoin/bitcoin.conf Traceback (most recent call last): File "./linearize.py", line 127, in <module> get_blocks(settings) File "./linearize.py", line 79, in get_blocks data = getblock(rpc, settings, height) File "./linearize.py", line 66, in getblock hash = rpc.getblockhash(n) File "./linearize.py", line 63, in getblockhash return self.rpc(getblockhash, [index]) File "./linearize.py", line 43, in rpc resp = self.conn.getresponse() File "/usr/lib/python2.7/httplib.py", line 1045, in getresponse response.begin() File "/usr/lib/python2.7/httplib.py", line 409, in begin version, status, reason = self._read_status() File "/usr/lib/python2.7/httplib.py", line 373, in _read_status raise BadStatusLine(line) I get the same error no matter what my bitcoin.conf settings are...	https://api.github.com/repos/bitcoin/bitcoin/issues/3110	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3110/comments	2013-10-18T18:18:50Z	None
3095	open	jherrerob	According to BIP0070, if I understood it correctly, the outputs with amount set to zero should be valid: "If the sum of outputs.amount is zero, the customer will be asked how much to pay, and the bitcoin client may choose any or all of the Outputs (if there are more than one) for payment" The current implementation raises this error: "Requested payment amount (0.00BTC) too small" This happens either with non signed or signed payment requests. There are some use cases where I believe it would be useful to have zero amount outputs, for example having a donation payment request available for anyone who wants to donate or using it to send valid M-N scripts as a payment method. The signed Payment Request would still allow to verify the identity of the recipient. Be aware that solving this would probably increase the priority of this other bug: Which I have just updated with more information.	https://api.github.com/repos/bitcoin/bitcoin/issues/3095	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3095/comments	2013-10-15T14:02:49Z	None
3088	open	gmaxwell	This patch eliminates the privacy and reliability problematic use of centralized web services for discovering the nodes addresses for advertisement. The Bitcoin protocol already allows your peers to tell you what IP they think you have, but this data isnt trustworthy since they could lie. So the challenge is using it without creating a DOS vector. To accomplish this we adopt an approach similar to the one used by P2Pool: If were announcing and dont have a better address discovered (e.g. via UPNP) or configured we just announce to each peer the address that peer told us. Since peers could already replace, forge, or drop our address messages this cannot create a new vulnerability... but if even one of our peers is giving us a good address well eventually make a useful advertisement.	https://api.github.com/repos/bitcoin/bitcoin/issues/3088	17	https://api.github.com/repos/bitcoin/bitcoin/issues/3088/comments	2013-10-13T22:45:20Z	None
3075	open	Diapolo	Im currently unable to connect to any node via proxy it seems... below is a part of my debug.log. <pre> 2013-10-10 13:07:09 trying connection testnet-seed.bluematt.me lastseen=0.0hrs 2013-10-10 13:07:09 SOCKS5 connecting testnet-seed.bluematt.me 2013-10-10 13:07:09 SOCKS5 connected testnet-seed.bluematt.me 2013-10-10 13:07:09 connected testnet-seed.bluematt.me 2013-10-10 13:07:09 send version message: version 70001, blocks=114551, us=z2pq5jlss2cnxtm2.onion:18333, them=0.0.0.0:0, peer=0.0.0.0:0 2013-10-10 13:07:09 sending: version (102 bytes) 2013-10-10 13:07:09 received: version (100 bytes) 2013-10-10 13:07:09 Added time data, samples 2, offset +4 (+0 minutes) 2013-10-10 13:07:09 sending: verack (0 bytes) 2013-10-10 13:07:09 sending: getaddr (0 bytes) 2013-10-10 13:07:09 receive version message: version 70001, blocks=116368, us=37.221.160.203:57110, them=152.2.31.233:18333, peer=0.0.0.0:0 2013-10-10 13:07:09 received: verack (0 bytes) 2013-10-10 13:07:09 trying connection testnet-seed.bitcoin.petertodd.org lastseen=0.0hrs 2013-10-10 13:07:09 SOCKS5 connecting testnet-seed.bitcoin.petertodd.org 2013-10-10 13:07:17 ERROR: Proxy error: TTL expired 2013-10-10 13:07:17 trying connection testnet-seed.bitcoin.petertodd.org lastseen=0.0hrs 2013-10-10 13:07:17 SOCKS5 connecting testnet-seed.bitcoin.petertodd.org 2013-10-10 13:07:19 sending: addr (31 bytes) 2013-10-10 13:07:24 ERROR: Proxy error: TTL expired 2013-10-10 13:07:25 trying connection testnet-seed.bitcoin.petertodd.org lastseen=0.0hrs 2013-10-10 13:07:25 SOCKS5 connecting testnet-seed.bitcoin.petertodd.org 2013-10-10 13:07:42 received: addr (30003 bytes) 2013-10-10 13:07:42 disconnecting node testnet-seed.bluematt.me 2013-10-10 13:09:31 ERROR: Proxy error: general failure 2013-10-10 13:09:31 Adding fixed seed nodes as DNS doesnt seem to be available. </pre>	https://api.github.com/repos/bitcoin/bitcoin/issues/3075	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3075/comments	2013-10-10T13:24:18Z	None
3070	open	gavinandresen	So I compiled in my master branch, then checked out my smartfee branch and re-compiled, and get: ``` Undefined symbols for architecture x86_64: "CTransaction::nMinRelayTxFee", referenced from: PaymentServer::processPaymentRequest(PaymentRequestPlus&, QList<SendCoinsRecipient>&) in libbitcoinqt.a(libbitcoinqt_a-paymentserver.o) ``` Indeed, CTransaction::nMinRelayTxFee is gone in the smartfee branch. But why didnt the new autotools make figure that out? Workaround is to do a make clean, but dependencies should work properly or well spend a lot of time tracking down bugs that go away if we make clean and then recompile.	https://api.github.com/repos/bitcoin/bitcoin/issues/3070	1	https://api.github.com/repos/bitcoin/bitcoin/issues/3070/comments	2013-10-09T04:43:03Z	None
3063	open	gavinandresen	Ran into this issue on the pull-tester machine cross-compiling for win32, where /usr/bin/moc-qt4 was for QT 4.6, which was used in preference to the moc in the --with-qt-bindir directory. Workaround was to create a moc-qt4 link in the --with-qt-bindir directory.	https://api.github.com/repos/bitcoin/bitcoin/issues/3063	2	https://api.github.com/repos/bitcoin/bitcoin/issues/3063/comments	2013-10-07T06:48:55Z	None
3062	open	mb300sd	I think these should be added to the build-unix file, I had to install them in addition to what was listed. autoconf pkg-config libprotobuf-dev	https://api.github.com/repos/bitcoin/bitcoin/issues/3062	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3062/comments	2013-10-07T04:54:00Z	None
3033	open	lzrloveyou	Win7 64bit --------------------------- Microsoft Visual C++ Runtime Library --------------------------- Assertion failed! Program: G:\\bt\bitcoin-0.8.5-win32\bitcoin-qt.exe File: table/table_builder.cc Line: 97 Expression: r->options.comparator->Compare(key, Slice(r->last_key)) > 0 For information on how your program can cause an assertion failure, see the Visual C++ documentation on asserts (Press Retry to debug the application - JIT must be enabled)	https://api.github.com/repos/bitcoin/bitcoin/issues/3033	4	https://api.github.com/repos/bitcoin/bitcoin/issues/3033/comments	2013-09-26T07:42:34Z	None
3030	open	jonasschnelli	QT Preference Pane: Shouldnt we remove the "Apply" button and just use a "Okay" button? I think it would be more end-user capable then. IMO: Nowadays nobody uses apply without okay.	https://api.github.com/repos/bitcoin/bitcoin/issues/3030	4	https://api.github.com/repos/bitcoin/bitcoin/issues/3030/comments	2013-09-25T07:17:25Z	None
3025	open	sipa	This fixes another malleability problem.	https://api.github.com/repos/bitcoin/bitcoin/issues/3025	14	https://api.github.com/repos/bitcoin/bitcoin/issues/3025/comments	2013-09-23T21:55:31Z	None
3007	open	Diapolo	Just reposting, see	https://api.github.com/repos/bitcoin/bitcoin/issues/3007	0	https://api.github.com/repos/bitcoin/bitcoin/issues/3007/comments	2013-09-17T13:32:07Z	None
3005	open	theuni	Addresses the last (I believe) work-item in Im unsure of the correct fix here, but I hope this can at least get some discussion going. This change at least fixes the problem on the surface. Heres the summary as I see it: Theres a mix of current-proxy-setting and saved-proxy-setting logic. Assuming the proxy is currently enabled: User unchecks the proxy checkbox, hits apply, the dialog checks to see what the new proxy setting should be, GetProxy() returns true because its currently enabled, check remains in the checkbox, user is confused. Logically (to me) it makes sense to be checking the setting rather than the current runtime values, as the setting should reflect what user sees on next restart. But there are plenty of other GetProxy()/SetProxy() calls, so Im inclined not to trust that line of reasoning.	https://api.github.com/repos/bitcoin/bitcoin/issues/3005	3	https://api.github.com/repos/bitcoin/bitcoin/issues/3005/comments	2013-09-17T01:00:23Z	None
3003	open	BugAndNewsReporter	Trying to compile git head on OSX 10.7.5 with ```./configure --without-qt --disable-tests --disable-debug```, it fails with: checking whether the Boost::Chrono library is available... yes checking for exit in -lboost_chrono-mt... yes configure: error: No working boost sleep implementation found I have boost installed with MacPorts: > port installed | grep boost boost (active)	https://api.github.com/repos/bitcoin/bitcoin/issues/3003	23	https://api.github.com/repos/bitcoin/bitcoin/issues/3003/comments	2013-09-16T19:06:39Z	None
3002	open	pentarh	In some reason my wallet accounting broken. I have total 0.1 BTC on wallet and getbalance without params returns correct value. But when I provide account to this api call (i.e. empty account), it returns incorrect values - greater than overall balance or even negative. -rescan and -updatewallet - both didnt help. It show absolutely unreal values in listaccounts balances. [user@localhost ~]$ bin/bitcoind getinfo { "version" : 80500, "protocolversion" : 70001, "walletversion" : 10500, "balance" : 0.10000000, "blocks" : 258337, "timeoffset" : -1, "connections" : 8, "proxy" : "", "difficulty" : 112628548.66634709, "testnet" : false, "keypoololdest" : 1327805721, "keypoolsize" : 101, "paytxfee" : 0.00000000, "errors" : "" } [user@localhost ~]$ bin/bitcoind getbalance 0.10000000 [user@localhost ~]$ bin/bitcoind getbalance -20231.03669102 [user@localhost ~]$ bin/bitcoind listaccounts { "" : -20231.03669102, "acc*" : 0.00000000, "acc*" : 50.00000000, "acc*" : 0.00000000, "acc*" : 7.00000000, "acc*" : 50.00000000, "acc*" : 5905.00000000, } ==RAW HTTP== <--- getbalance[ no params ] POST / HTTP/1.1 User-Agent: bitcoin-json-rpc/v0.8.5-beta Host: 127.0.0.1 Content-Type: application/json Content-Length: 43 Connection: close Accept: application/json Authorization: Basic ************* {"method":"getbalance","params":[],"id":1} ------> HTTP/1.1 200 OK Date: Mon, 16 Sep 2013 15:15:18 +0000 Connection: close Content-Length: 42 Content-Type: application/json Server: bitcoin-json-rpc/v0.8.5-beta {"result":0.10000000,"error":null,"id":1} <--- getbalance[ "" ] POST / HTTP/1.1 User-Agent: bitcoin-json-rpc/v0.8.5-beta Host: 127.0.0.1 Content-Type: application/json Content-Length: 45 Connection: close Accept: application/json Authorization: Basic ***************** {"method":"getbalance","params":[""],"id":1} ------> HTTP/1.1 200 OK Date: Mon, 16 Sep 2013 15:16:15 +0000 Connection: close Content-Length: 47 Content-Type: application/json Server: bitcoin-json-rpc/v0.8.5-beta {"result":-20231.03669102,"error":null,"id":1}	https://api.github.com/repos/bitcoin/bitcoin/issues/3002	10	https://api.github.com/repos/bitcoin/bitcoin/issues/3002/comments	2013-09-16T15:25:52Z	None
2998	open	paulogeyer	these files are located in /usr/pkg/include/db4 samsa% ls /usr/pkg/include/db4 db.h db_185.h db_cxx.h	https://api.github.com/repos/bitcoin/bitcoin/issues/2998	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2998/comments	2013-09-15T13:43:57Z	None
2990	open	kuzetsa	![bitcoin-0 8 5_nagbug](https://f.cloud.github.com/assets/2875851/1138715/02c77de0-1c7c-11e3-83c4-055f97ba78ea.png) Time is set correctly. System time is accurate to within 250ms of several stratum 2 / stratum 3 NTP servers. (Local NY timezone selected under windows control panel, hardware clock is NOT set to UTC because thats not how NT 6.1, 6.0, 5.1, 5.0, 4.0 or any version of windows handles such things) This bug probably also affects other versions of windows as well. Edit renamed to make clear this is not a problem with timezone detection or windows	https://api.github.com/repos/bitcoin/bitcoin/issues/2990	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2990/comments	2013-09-13T13:58:28Z	None
2984	open	Enelar	Once launching Bitcoin for the first time, we get 2-3 days to sync chain blocks. This is not the behavior that the user expects. A user wants to start using the system immediately. Therefore, I propose to use the algorithm of "trust" similar application Multibit, before the chain is obtained, possibly with some restrictions.	https://api.github.com/repos/bitcoin/bitcoin/issues/2984	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2984/comments	2013-09-10T12:16:55Z	None
2983	open	idevk	Im a new user to bitcoin, unfortunately I have not been able to try it. The program does not load at all. These are the messages that show while the program loads 1- Loading block index 2- Verifying blocks 3- Loading wallet 4- Failed to read block I uninstalled 3 times, but still the same error occurs.	https://api.github.com/repos/bitcoin/bitcoin/issues/2983	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2983/comments	2013-09-09T22:17:18Z	None
2975	open	jgarzik	Suggested by gmaxwell.	https://api.github.com/repos/bitcoin/bitcoin/issues/2975	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2975/comments	2013-09-04T17:33:44Z	None
2974	open	Stemby	Hi, please look at this bug report: Thank you! Carlo	https://api.github.com/repos/bitcoin/bitcoin/issues/2974	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2974/comments	2013-09-04T15:39:03Z	None
2971	open	Mezrin	Due to "https://en.bitcoin.it/wiki/Transaction_fees" there are two types of fees. Logic for the mandatory comission is not so clear. Also its difficult to check via existing api will whether the mandatory fee be charged or not. So the command to check will whether the mandatory fee be charged or not will be useful.	https://api.github.com/repos/bitcoin/bitcoin/issues/2971	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2971/comments	2013-09-04T09:47:47Z	None
2966	open	pstratem	vtxPrev was intended to make it possible to broadcast supporting transactions. For various reasons it doesnt actually accomplish this goal while still consuming a sizable amount of space in the wallet. Ive removed most references to vtxPrev and replaced them with procedures that pull transactions from mapWallet. As a side effect this code includes similar performance improvements to CWalletTx::IsConfirmed as	https://api.github.com/repos/bitcoin/bitcoin/issues/2966	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2966/comments	2013-09-01T13:26:41Z	None
2962	open	Diapolo	Seems it is currently not working to use ``addnode <onion> add/etc...``, I had a short talk with who raised, this could currently be broken.	https://api.github.com/repos/bitcoin/bitcoin/issues/2962	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2962/comments	2013-08-30T23:45:34Z	None
2960	open	Mezrin	Currently Bitcoind supports JSON-RPC 1.0 and couple of 2.0 features If you look at existing implementations - 61 of 71 works ONLY with 2.0 version. And in reality there is no Java library that supports 1.0 Moreover - wiki page looks outdated, I think that all libs except 2-3 support only 2.0 version. We need main features from JSON-RPC 2.0 (http://www.simple-is-better.org/rpc/#differences-between-1-0-and-2-0): 1. Transport independence. Bitcoind should not throw 500 error on every exception. Its only for crashed code. For example, there is no Java JSON-RPC lib that provide sufficient support for hadling 500 error. So, if you develop Java service that uses Bitcoind - you are not able to work with custom Bitcoind exceptions. (https://github.com/bitcoin/bitcoin/blob/master/src/bitcoinrpc.h) Otherwise you either have to write from scratch or modify existing library, what generally is not easy. Moreover, nobody except you will support this lib for JSON-RPC 1.0 2. Reduced fields. Some libraries throw an error if the fields "error" and "result" are found together - its true for JSON-RPC 1.0, but wrong for 2.0 3. named parameters Full support of 2.0 is preferable. P.S. In recent days, Im implementing a Java service that uses Bitcoind - guys, this is hell. The current interface is not suitable for real-world applications that deal with money. I dont understand why version 1.0 instead of 2.0 was choosen...	https://api.github.com/repos/bitcoin/bitcoin/issues/2960	10	https://api.github.com/repos/bitcoin/bitcoin/issues/2960/comments	2013-08-30T21:24:46Z	None
2954	open	Diapolo	This is with latest 0.8.4 RC on Win7 x64, I have no idea yet what causes this, but Im sure shutdown with previous versions was faster. This was with proxy enabled, problem seems to be non existant with proxy disabled. Any idea for such a behaviour? Any timeout blocking that thread? Proxy enabled (opencon takes 1 1/2 minutes to interrupt): <pre> 2013-08-30 10:25:25 addcon thread interrupt 2013-08-30 10:25:25 net thread interrupt 2013-08-30 10:25:25 dumpaddr thread stop 2013-08-30 10:25:25 msghand thread interrupt 2013-08-30 10:27:04 opencon thread interrupt 2013-08-30 10:27:04 Flush(false) 2013-08-30 10:27:04 wallet.dat refcount=0 2013-08-30 10:27:04 wallet.dat checkpoint 2013-08-30 10:27:04 wallet.dat detach 2013-08-30 10:27:04 wallet.dat closed 2013-08-30 10:27:04 DBFlush(false) ended 47ms 2013-08-30 10:27:04 StopNode() 2013-08-30 10:27:04 Flushed 14694 addresses to peers.dat 47ms 2013-08-30 10:27:04 Committing 30072 changed transactions to coin database... 2013-08-30 10:27:05 Flush(true) 2013-08-30 10:27:05 wallet.dat refcount=0 2013-08-30 10:27:05 wallet.dat checkpoint 2013-08-30 10:27:05 wallet.dat detach 2013-08-30 10:27:05 wallet.dat closed 2013-08-30 10:27:05 DBFlush(true) ended 16ms </pre> Proxy disabled (opencon immediately interrupted): <per> 2013-08-30 10:31:26 addcon thread interrupt 2013-08-30 10:31:26 dumpaddr thread stop 2013-08-30 10:31:26 net thread interrupt 2013-08-30 10:31:26 msghand thread interrupt 2013-08-30 10:31:29 connection timeout 2013-08-30 10:31:29 opencon thread interrupt 2013-08-30 10:31:29 Flush(false) 2013-08-30 10:31:29 wallet.dat refcount=0 2013-08-30 10:31:29 wallet.dat checkpoint 2013-08-30 10:31:29 wallet.dat detach 2013-08-30 10:31:30 wallet.dat closed 2013-08-30 10:31:30 DBFlush(false) ended 42ms 2013-08-30 10:31:30 StopNode() 2013-08-30 10:31:30 Flushed 14542 addresses to peers.dat 68ms 2013-08-30 10:31:30 Committing 542 changed transactions to coin database... 2013-08-30 10:31:30 Flush(true) 2013-08-30 10:31:30 wallet.dat refcount=0 2013-08-30 10:31:30 wallet.dat checkpoint 2013-08-30 10:31:30 wallet.dat detach 2013-08-30 10:31:30 wallet.dat closed 2013-08-30 10:31:30 DBFlush(true) ended 20ms </pre>	https://api.github.com/repos/bitcoin/bitcoin/issues/2954	11	https://api.github.com/repos/bitcoin/bitcoin/issues/2954/comments	2013-08-30T10:29:12Z	None
2936	open	gavinandresen	I consider these low priority, for two reasons: 1) I think the vast majority of payment requests will be signed and will involve payment to just one merchant. 2) I think the whole "send" GUI needs a redesign; I tried to do the absolute minimum amount of GUI work to demonstrate payment protocol functionality (Im a terrible GUI designer). From michagogo: Binary used: On the unsigned payment request test, even though the address and amount *are* editable, editing them doesnt have any effect -- the address and value entered into the web form are what ends up getting sent regardless of whats entered into those boxes. In the Signed payment request test: I dont know if this is intentional, but if clicking on more CLICK TO PAY links before confirming the first send causes the other payments to be added as outputs to the transaction, with no way to remove individual transactions without using the Clear All button. When sending multiple PaymentACKs, the dialog boxes are modal on top of each other, and out of order. A signed request, even one with multiple outputs, will show up in the Send tab as one entry, while an unsigned request with multiple outputs shows up as one entry per output. Either unsigned requests cannot expire and the request generator just doesnt make that clear, or expiration is ignored in unsigned requests. Im not sure if I like the behavior of "unsigned payment requests add the address to your address book with the contents of the memo field if its not already there"... Id maybe make it a checkbox or something, if not remove it completely -- oh, just realized its because it uses the "Label" field. Seems like a bad idea to me, since payment-protocol addresses are probably not going to be reused...	https://api.github.com/repos/bitcoin/bitcoin/issues/2936	10	https://api.github.com/repos/bitcoin/bitcoin/issues/2936/comments	2013-08-25T00:38:53Z	None
2927	open	63	With the following enabled, UPNP *should not* attempt to open a port at the router for 8333, however in the latest stable the port is uselessly opened. At best its doing nothing productive, at worst its just advertising the existence of a bitcoin client. onlynet=tor tor=127.0.0.1:9050 discover=0 listen=0 Compiling with USE_UPNP=- works as a temporary solution, but is by no means ideal.	https://api.github.com/repos/bitcoin/bitcoin/issues/2927	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2927/comments	2013-08-23T17:12:11Z	None
2910	open	ashleyholman	This is a proposed solution for the "Fingerprint via weak-chain block submission" issue (#2757). Before storing a block, a check is done to see if it is at a height lower than last checkpoint. If so, it is not stored. (By definition, last checkpoint implies we have the whole chain up until last checkpoint, so we do not need to store any new blocks at those heights). A similar check is done before serving a request for a block at a pre-checkpoint height. If its not in the main chain, it could be a fingerprint block. There is no point serving this block to anyone as it is a fork from the checkpointed chain, so the request is dropped. Although fingerprinting would be possible by generating a block higher than last checkpoint, it would be economically prohibitive to do so.	https://api.github.com/repos/bitcoin/bitcoin/issues/2910	17	https://api.github.com/repos/bitcoin/bitcoin/issues/2910/comments	2013-08-19T13:17:59Z	None
2906	open	CodeShark	Makes it possible to test nodes against bitcoind and to test bitcoinds misbehavior detection without having to constantly restart bitcoind.	https://api.github.com/repos/bitcoin/bitcoin/issues/2906	8	https://api.github.com/repos/bitcoin/bitcoin/issues/2906/comments	2013-08-17T20:34:09Z	None
2900	open	petertodd	Lets nodes advertise that they offer bloom filter support explicitly. The protocol version bump allows SPV nodes to assume that NODE_BLOOM is set if NODE_NETWORK is set for pre-70002 nodes. Also adds an undocumented option to turn bloom filter support off and immediately kick peers that attempt to use bloom filters for testing purposes. In addition a number of DoS attacks are made significantly easier by bloom support, so having an option makes it easy to take immediate steps in the event of an attack.	https://api.github.com/repos/bitcoin/bitcoin/issues/2900	47	https://api.github.com/repos/bitcoin/bitcoin/issues/2900/comments	2013-08-15T14:44:08Z	None
2896	open	pshep	Feature request to add a one-time flag to labeled Tx addresses such that the label and address remains in the address list for historical transaction identification, but cant (easily) be selected as an address to send coins to in the send tab. Since addresses are supposed to be used only once, this would avoid: 1. Unintentionally sending BTC to old/unused addresses. 2. Cluttering the address book with addresses which will never be used again by hiding them, leaving just addresses which may be used again (friends, mobile wallets, cold storage, etc.).	https://api.github.com/repos/bitcoin/bitcoin/issues/2896	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2896/comments	2013-08-14T18:50:29Z	None
2893	open	wtogami	[ltc08@box bitcoin]$ src/bitcoind -datadir=~/not/a/valid/path Error: Specified directory does not exist : Error initializing block database. Do you want to rebuild the block database now? Pull Request #2648 added what seems to be an unintended error message to this error condition. Not a big deal, but it would just be confusing to users as the actual error message is printed above the false prompt that actually isnt a prompt.	https://api.github.com/repos/bitcoin/bitcoin/issues/2893	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2893/comments	2013-08-13T11:33:26Z	None
2889	open	ryanxcharles	When retrieving blocks from the blockchain using bitcoind RPC commands, bitcoind will temporarily stop sending responses to RPC commands after many thousands of commands if the commands are sent in quick succession. The issue has something to do with timing, since adding a delay to retrieving blocks will make the problem go away. This node.js code will display the issue (obviously, replace "password" with your bitcoind password): ```javascript var rpc=require(json-rpc2); var bitcoind=rpc.Client.create(8332, "localhost", "bitcoinrpc", "password"); var chain=function(blockhash){ bitcoind.call(getblock,[blockhash],function(err,block){ if (err){ console.log(String(err)); if (String(err)=="Error: Have no response object"){ console.log("Thought so."); } return; } console.log(block.hash, block.height); if (block.nextblockhash){ chain(block.nextblockhash); }; }); }; chain("000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f"); ``` Note that my development machine has an SSD, and so blocks are retrieved quickly by bitcoind - it may be necessary to use an SSD to reproduce the problem. What this code does is to retrieve the genesis block, then get the next block, and the next block, and so on, until it has got all the blocks. Except at around 25,000 or so blocks in (different every time), it will quit when it encounters a "no response object" error. This error has nothing to do with node.js or json-rpc2 - it is a bitcoind error. This can be seen by running bitcoin commands from the command prompt, which result in a "couldnt connect to server" error, e.g.: ``` > bitcoind getblock 00000000722ecede1cc4edd52a7d416bdafd6528f630926b0021b41a6b57ba5d error: couldnt connect to server ``` After a few seconds, bitcoind will begin responding to commads again. It doesnt crash. It just stops responding to commands for a short while. By delaying repeated RPC commands, the above code can be fixed to run without freezing bitcoind (notice the 10ms setTimeout): ```javascript var rpc=require(json-rpc2); var bitcoind=rpc.Client.create(8332, "localhost", "bitcoinrpc", "password"); var chain=function(blockhash){ bitcoind.call(getblock,[blockhash],function(err,block){ if (err){ console.log(String(err)); if (String(err)=="Error: Have no response object"){ console.log("Thought so."); } return; } console.log(block.hash, block.height); if (block.nextblockhash){ setTimeout(function(){ chain(block.nextblockhash); },10); }; }); }; chain("000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f"); ```	https://api.github.com/repos/bitcoin/bitcoin/issues/2889	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2889/comments	2013-08-09T22:57:28Z	None
2887	open	VirtualDestructor	Steps to reproduce: 1. Run Bitcoin-Qt with limited NET_IPV4. (for ex. with the "-onlynet=tor" option). 2. Go to Options-Network. 3. Check the "Connect through SOCKS proxy" checkbox and press Apply. 4. The checkbox becomes unchecked, but the option "fUseProxy" in the qt-settings file (~/.config/Bitcoin/Bitcoin-Qt.conf) now has value "true". 5. Restart Bitcoin-Qt without any limitations (without options). 6. Go to Options-Network. 7. The checkbox is checked (because "fUseProxy=true"). 8. Try to uncheck it, but it becomes checked again after pressing Apply. There is no way to uncheck it now. The same behavior appears under Windows too. I guess the problem caused by this line	https://api.github.com/repos/bitcoin/bitcoin/issues/2887	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2887/comments	2013-08-08T14:42:47Z	None
2862	open	cosmarchy	The right most column under the Receive, Transactions and Addresses sections cannot be resized. I believe this was fixed in the latest version but I dont believe it is??? I am using version 0.8.3 on windows.	https://api.github.com/repos/bitcoin/bitcoin/issues/2862	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2862/comments	2013-07-27T19:44:55Z	None
2861	open	sipa	A rebased and modified version of #2121. Changes: * Support P2SH addresses, so listunspent/signrawtransaction can be used without having all keys for M-of-N multisig. * Add a fRequireSpendable flag to scripts matching routines, so watch-only addresses can be avoided. This is used in SelectCoins (CreateTransaction would fail to sign them anyway). * Different storage format in database, which supports P2SH too.	https://api.github.com/repos/bitcoin/bitcoin/issues/2861	61	https://api.github.com/repos/bitcoin/bitcoin/issues/2861/comments	2013-07-25T23:11:57Z	None
2858	open	ThePiachu	In a few API calls (like "listreceivedbyaccount") we have a parameter "includeempty=false", which I think if a pretty useful flag to have when requesting various lists. This way the amount of data transferred in an API call can be truncated to something meaningful for users that are not interested in empty accounts (which most of them probably wouldnt be) and it would make this API call more consistent with other API calls.	https://api.github.com/repos/bitcoin/bitcoin/issues/2858	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2858/comments	2013-07-24T20:15:06Z	None
2853	open	nixoid	According to API docs this command is expected to return transactions in chronological order. It does not do that. Please check out details here:	https://api.github.com/repos/bitcoin/bitcoin/issues/2853	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2853/comments	2013-07-24T08:14:38Z	None
2846	open	ThePiachu	I ran into issue with listunspent API call. getaddressesbyaccount("account") returns [n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe] - my account has only 1 address. I call getbalance("account", 6), I get a value of 2203.46345285 - I have 2K testnet Bitcoins in that address, that looks like a plenty of transactions to spent. I call listunspent(1, 999999, ["n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe"]) and get [] - nothing. I did not use "move" command, just a lot of non-standard calls for creating new transactions and sending them (createraw, signraw, sendraw). I check BTCLook and see plenty of unspent transactions - . Similarly, calling listtransactions("Holding", 10, 0) returns: [ { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:56, time:1374478540, txid:1941fd5935391114ed63a0ac1bd346b95f97730be8c33c1077b95cea39246006, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478540, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:51, time:1374478542, txid:0785d7b2ffc886deec34b31abdd4e25dff087d188a36384962536258c36096e0, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478542, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:58, time:1374478543, txid:df46e6639cbe58ba6e68edf89b9bd1ea0ebf1736902fe6a844efac6aeabc100f, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478543, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:60, time:1374478544, txid:0446b87eee83469d91b102c0cc39cef71f403a07e20997af0ce28371b3b9356c, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478544, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:44, time:1374478545, txid:6efbbd3fa826d23cece4107b2de6fc16b30792b261a5971974d63ee7ac35bd66, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478545, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:62, time:1374478547, txid:c398670415396795ef8d5a1577268d948d707d680679a70bdf00175f221ed6b3, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478547, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:64, time:1374478548, txid:acd1fb20bffc40e40da52256c53d3093429e5d19cc2682764a31c83818e9ad59, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478548, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:17, time:1374478549, txid:dd0edeaa84267baad818f127836ed8b4892a70f9a5bb99d9479cd4fb062c5a0b, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478549, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, blockhash:000000007ba218fe3bbb3784b8d695cc986e5e466fa7c00f419678f0c9c4fd4e, blockindex:18, time:1374478550, txid:584973a9f5ebb987311323f65786279c64fa000e9fdc371dbbcbc089a77dbb51, blocktime:1374478752, amount:0.09989999, confirmations:92, timereceived:1374478550, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe }, { category:receive, account:Holding, time:1374549589, txid:a8c18f467d960e7304b77bc428e6e06308628c6d3ab777ec425d503561228108, amount:99.99980234, confirmations:0, timereceived:1374549589, address:n1az1tf4FozhBRVG7Ab43e2iLGPPBasXbe } ] This is why I think that there is some bug in listunspent that makes this API call not return proper values.	https://api.github.com/repos/bitcoin/bitcoin/issues/2846	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2846/comments	2013-07-23T03:38:48Z	None
2844	open	jgarzik	The beginnings of a block explorer-style API for bitcoind. Supported API; 1) GET /rest/tx/TX-HASH.{dat | txt | json} Given a transaction hash, Returns a transaction, in binary, hex-encoded binary or JSON formats. 2) GET /rest/block/BLOCK-HASH.{dat | txt | json} Given a block hash, Returns a block, in binary, hex-encoded binary or JSON formats. Select format by appending a ".json" (JSON) or ".txt" (hex-encoded binary serialization) or ".dat" (binary serialization) suffix to the URL. ``` GET /rest/block/BLOCK-HASH.dat GET /rest/tx/TX-HASH.txt GET /rest/tx/TX-HASH.json ``` The HTTP request and response are both handled entirely in-memory, thus making maximum memory usage at least 3MB (1 MB max block, plus hex encoding) per request. This can be easily accessed via command line cURL/wget utilities. The general goal of the HTTP REST interface is to access unauthenticated, public blockchain information. There is no plan to add wallet interfacing/manipulation via this API. For full TX query capability, one must enable the transaction index via "txindex=1" command line / configuration option.	https://api.github.com/repos/bitcoin/bitcoin/issues/2844	29	https://api.github.com/repos/bitcoin/bitcoin/issues/2844/comments	2013-07-22T19:35:03Z	None
2841	open	CodeShark	One of the most annoying things about trying to maintain wallet backups is the fact that every time you unlock a wallet the key pool gets automatically refilled, thus making any existing backups of the wallet keys obsolete. If you call getnewaddress on a locked wallet, no problem - but the moment you unlock it, your wallet backups are out of date...no warning is given to user. Sooner or later that backed up wallet will expire, by which time we better hope the user had the foresight, understanding, discipline, and memory to have made a new backup. As things currently stand, the user must either keep track of when the backed up keypool is exhausted and remember to make a backup before the new keys are used - or must make a backup after every few transactions to be certain the backed up keypool is never exhausted. And lets be honest about it - very few users do either of these things. They are tedious and annoying. I only do them because theyre far less tedious or annoying than attempting to recover lost keys. The user now has the choice to disable automatic refilling of the keypool by adding the following line to bitcoin.conf: noautofillkeypool=1 This effectively disables all automatic key generation, requiring the user to manually run keypoolrefill to replenish the wallet when the key pool runs low or a new wallet is created.The keypoolrefill command has been conveniently exposed in the GUI as well. This ensures that all generated keys can be easily and conveniently backed up in a timely fashion, with confidence that the backup has been made properly and will never expire without warning (at least as far as keys - synchronizing history and account labels are separate issues that this pull request does not address). We probably shouldnt be allowing users to generate new keys without prompting them to make backups (or automatically making the backups for them); certainly not in the GUI and probably not in the RPC either (at least not without requiring an override flag or an additional call). It obviously makes more sense to do backups in batch rather than after every single new transaction; after all, thats exactly the purpose of pregenerating a key pool in the first place. I believe hiding this from users only does them a disservice. Anyone who is smart enough to use Bitcoin-Qt should have no problem understanding how to do this - and anyone who is incapable of doing this probably shouldnt be managing their own bitcoin keys in the first place. EVERYONE should be making proper backups of their signing keys. Exposing a wallet backup function without also giving users control over their keypool is giving them a tool that requires two hands to use properly but tying one of their hands behind their back. This pull request simply makes the keypool feature which already exists properly usable. Having said that, with the expectation that some may disagree with my position, this new behavior is 100% opt-in - if noautofillkeypool is not set in bitcoin.conf (or omitted), the app defaults to its old behavior thus ensuring full backward compatibility. ![alt tag](http://blockhawk.net/screenshots/Bitcoin-Qt.png) View of Bitcoin-Qt interface with keypoolrefill feature exposed. TODO: - General: Automate backups when keypool runs low by, for instance, allowing the user to add one or more autobackupwallet=\<destination\> lines to the config file. The destination field should support protocols like sftp as well as removable media. Will require mechanism to prompt user or return an error if connection cannot be established, removable media is not present, or specified path is not found/invalid. - Bitcoin-Qt: Prompt user to refill pool when key pool is empty, prompt/remind user more aggressively to make backups, check key pool status before attempting operations that require new keys, add indicator to show how many keys are left in pool, add the ability to easily change the pool size from GUI, make it clear when errors are due to an empty key pool and show user proper procedure for refilling it and making a backup. - Bitcoin-Qt: Icon attribution for ![alt tag](https://github.com/CodeShark/bitcoin/diff_blob/6b18ba00d265f544dd457a83fac0c930ae51c66a/src/qt/res/icons/keypair.png?raw=true), taken from	https://api.github.com/repos/bitcoin/bitcoin/issues/2841	10	https://api.github.com/repos/bitcoin/bitcoin/issues/2841/comments	2013-07-21T04:53:19Z	None
2839	open	sipa	This is a rebased version of a patch that mining.bitcoin.cz used during the march 11 2013 hardfork, to be able to continue using 0.8 while still mining the 0.7 chain. The reason for submitting it to mainline is: * When implementing this, I found that there were a few edge-cases in the reorganization handling, which are fixed here. They probably wont ever occur in normal operation, but I prefer the code to be robust. * For emergencies, having a blacklistblock RPC is certainly useful to have in the code, though I prefer not having it in normal releases. Its only enabled when compiling with ENABLE_BLOCK_BLACKLISTING. The RPC code is always compiled, so we can catch refactorings that would break it, though - just the index entry is not present normally.	https://api.github.com/repos/bitcoin/bitcoin/issues/2839	13	https://api.github.com/repos/bitcoin/bitcoin/issues/2839/comments	2013-07-20T11:20:48Z	None
2834	open	luke-jr	Resubmission of #1355, since GitHub closed it on me. I have rebased it and addressed both of concerns: - Shutdown now disconnects all longpoll sessions with an error. - Longpolling now mimicks the behaviour of BitcoinMiner by returning a new template after a minute has passed and there are new transactions. These changes were not exactly trivial, so re-review of the code is probably necessary.	https://api.github.com/repos/bitcoin/bitcoin/issues/2834	8	https://api.github.com/repos/bitcoin/bitcoin/issues/2834/comments	2013-07-17T02:24:08Z	None
2833	open	xerohour	The balance shows that i spent the bitcoins but bitpay never recieved them and it has no confirmations This is the transaction info Status: 0/unconfirmed Date: 7/16/2013 16:38 To: 19PuoW34xFQrbUNv2jc47SgvNhXdwTVE7D Debit: -1.0861 BTC Net amount: -1.0861 BTC Transaction ID: af597cc34afd03f0b6935846d3504fe24058f98f5c390d2aa5ec74f82b87aef4 debug log 94efa62d230b9 (poolsz 1289) CTxMemPool::accept() : accepted 590f4bc5147fa9c3d27761efea9639c520322bacc7f575ac6f473ea77e377b4b (poolsz 1290) UPnP Port Mapping successful. CTxMemPool::accept() : accepted cbe1e06748199a4e644741016f5354a9c3ae9615c8523c2f27b9320f4ac840d1 (poolsz 1291) CTxMemPool::accept() : accepted 5074bd33ae5559253b593fea4a830653b40e50ce6e8c587478983e072b591d1a (poolsz 1292) ERROR: CTxMemPool::accept() : nonstandard transaction type CTxMemPool::accept() : accepted 86ac12f2f340ad1b7a461c2ec4f0dcbd9c3fb2f2686b8f7990e7129076dd1e00 (poolsz 1293) CTxMemPool::accept() : accepted 092443162d8e68777e4c71e4160d54ace4cf47ffc5cb1812f7dc58e94d3329a4 (poolsz 1294) CTxMemPool::accept() : accepted 15c817b6a5a27369f7533e17d74eab1c6023c621b81c25fc0d2cdb04e50ce2d7 (poolsz 1295) Flushed 14517 addresses to peers.dat 30ms	https://api.github.com/repos/bitcoin/bitcoin/issues/2833	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2833/comments	2013-07-16T22:24:39Z	None
2821	open	Krellan	This seems similar to Issue #2570 even though that is closed. Interestingly, it still happens in the bitcoin-qt 0.8.3 client, v0.8.3.0-g40809ae-beta version. This was a clean compile from source, running on Gentoo Linux (64-bit). I compiled this independently of the Gentoo system, so no unusual compiler options or anything like that should have been used. I believe it also happens during a block reorganization. Here is the debug log: ```` sending: addr (31 bytes) sending: inv (37 bytes) received: inv (37 bytes) got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have received: addr (31 bytes) sending: inv (37 bytes) received: inv (37 bytes) got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have received: inv (37 bytes) got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have sending: inv (73 bytes) received: inv (37 bytes) got inventory: block 000000000000001aa6707204b2d1887089a860eceaf8a893a7c2d08dfe6ac525 have sending: getblocks (965 bytes) received: inv (73 bytes) got inventory: tx 53b325cd548867df032b8879a18abd9c1b97638b3a3c380c38cd8546626d36c5 have got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have received: inv (37 bytes) got inventory: tx 53b325cd548867df032b8879a18abd9c1b97638b3a3c380c38cd8546626d36c5 have sending: addr (31 bytes) sending: inv (73 bytes) received: inv (37 bytes) got inventory: block 000000000000000dd0d039cf7c7e006d79a915b0ee76180bb300dc74ed3308a2 new askfor block 000000000000000dd0d039cf7c7e006d79a915b0ee76180bb300dc74ed3308a2 1373479424000000 (18:03:44) received: inv (37 bytes) got inventory: block 000000000000001aa6707204b2d1887089a860eceaf8a893a7c2d08dfe6ac525 have sending: getblocks (965 bytes) received: getblocks (965 bytes) getblocks 194158 to 0000000000000000000000000000000000000000000000000000000000000000 limit 500 getblocks stopping at limit 194657 00000000000000a13f6a1b564b6ef5bc06067da0374e181f4acf7f3c4d9caf37 sending: inv (18003 bytes) received: inv (73 bytes) got inventory: block 000000000000001aa6707204b2d1887089a860eceaf8a893a7c2d08dfe6ac525 have sending: getblocks (965 bytes) got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have received: inv (37 bytes) got inventory: block 000000000000001aa6707204b2d1887089a860eceaf8a893a7c2d08dfe6ac525 have sending: getblocks (965 bytes) received: block (101786 bytes) received block 000000000000000dd0d039cf7c7e006d79a915b0ee76180bb300dc74ed3308a2 REORGANIZE: Disconnect 1 blocks; 000000000000009fd60babdec39b4e49feb4ec17497c0b341e05beb7e692304a.. REORGANIZE: Connect 2 blocks; ..000000000000001aa6707204b2d1887089a860eceaf8a893a7c2d08dfe6ac525 Committing 2146 changed transactions to coin database... ERROR: Non-canonical signature: R value negative ERROR: CScriptCheck() : ac0bed4e30581eecf567e9a96ca7b97e5721532b097250c2eb2a5df2c625ad15 VerifySignature failed ERROR: CTxMemPool::accept() : ConnectInputs failed ac0bed4e30581eecf567e9a96ca7b97e5721532b097250c2eb2a5df2c625ad15 ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: Non-canonical signature: R value negative ERROR: CScriptCheck() : 8a25c7ea809620294d5562026133e3a94f1a3ca429579f9280485e50853b5546 VerifySignature failed ERROR: CTxMemPool::accept() : ConnectInputs failed 8a25c7ea809620294d5562026133e3a94f1a3ca429579f9280485e50853b5546 ERROR: Non-canonical signature: R value negative ERROR: CScriptCheck() : 5d8bbdfa6f215f7b33bfcb9608e5e6dd739cc563daf0fc0c591edfd73a8d17ae VerifySignature failed ERROR: CTxMemPool::accept() : ConnectInputs failed 5d8bbdfa6f215f7b33bfcb9608e5e6dd739cc563daf0fc0c591edfd73a8d17ae ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : inputs already spent ERROR: CTxMemPool::accept() : inputs already spent ERROR: CTxMemPool::accept() : inputs already spent ERROR: CTxMemPool::accept() : inputs already spent ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : inputs already spent ERROR: CTxMemPool::accept() : inputs already spent ERROR: CTxMemPool::accept() : inputs already spent ERROR: CTxMemPool::accept() : inputs already spent ERROR: Non-canonical signature: S value negative ERROR: CScriptCheck() : 3b33366cf854d9046678fffadde8dac3435431a33c217ee1a25826502a3ef569 VerifySignature failed ERROR: CTxMemPool::accept() : ConnectInputs failed 3b33366cf854d9046678fffadde8dac3435431a33c217ee1a25826502a3ef569 CTxMemPool::accept() : accepted cc4668b4f417e12492b384d22e081843da52875ecb072f2c39efc982a9fa9a4e (poolsz 1304) SetBestChain: new best=000000000000001aa6707204b2d1887089a860eceaf8a893a7c2d08dfe6ac525 height=245886 log2_work=70.667529 tx=20513801 date=2013-07-10 17:47:29 progress=0.999999 ProcessBlock: ACCEPTED sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) received: inv (37 bytes) got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have received: inv (37 bytes) got inventory: block 000000000000000dd0d039cf7c7e006d79a915b0ee76180bb300dc74ed3308a2 have sending: getblocks (965 bytes) force request: block 000000000000000dd0d039cf7c7e006d79a915b0ee76180bb300dc74ed3308a2 sending: inv (37 bytes) sending: inv (73 bytes) sending: inv (37 bytes) sending: inv (37 bytes) received: inv (37 bytes) got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have sending getdata: tx 86a417868917ef04aa7762df4e9d8e8e2d289000e269ebd60787a92f1ab50b25 sending: getdata (37 bytes) sending: inv (37 bytes) sending: block (248889 bytes) sending: block (98904 bytes) sending: block (113210 bytes) sending: block (77749 bytes) sending: block (63716 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) received: inv (37 bytes) got inventory: tx 0a740a5544620f9b89bb14abf077f8624835bbb5ee65e45f319f9c3e5f8ee6c8 have sending: inv (37 bytes) received: inv (37 bytes) got inventory: block 000000000000000dd0d039cf7c7e006d79a915b0ee76180bb300dc74ed3308a2 have sending: getblocks (965 bytes) force request: block 000000000000000dd0d039cf7c7e006d79a915b0ee76180bb300dc74ed3308a2 ERROR: mempool transaction missing input bitcoin-qt: src/main.cpp:4251: CBlockTemplate* CreateNewBlock(CReserveKey&): Assertion `"mempool transaction missing input" == 0 failed. ```` After this, I restarted the client again, and it came right back up and running without incident. Josh	https://api.github.com/repos/bitcoin/bitcoin/issues/2821	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2821/comments	2013-07-10T18:40:01Z	None
2819	open	TheBlueMatt	Probably should include doc/ contrib/ etc like the zip/linux tars do too.	https://api.github.com/repos/bitcoin/bitcoin/issues/2819	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2819/comments	2013-07-09T13:54:44Z	None
2811	open	subSTRATA	Hello I have recently noticed one altcoin client is using OpenSSL 1.0.1e 11 Feb 2013 without any issues while version used with Bitcoin is still OpenSSL 1.0.1c 10 May 2012, known to have multiple issues (at least 3 bugs, as explained bellow): Time to upgrade to newer or newest version of OpenSSL, maybe?	https://api.github.com/repos/bitcoin/bitcoin/issues/2811	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2811/comments	2013-07-03T12:38:25Z	None
2800	open	lseror	Process: Bitcoin-Qt [5965] Path: /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Identifier: org.bitcoinfoundation.Bitcoin-Qt Version: 0.8.3 (0.8.3) Code Type: X86 (Native) Parent Process: launchd [156] User ID: 501 Date/Time: 2013-06-27 17:14:11.311 +0200 OS Version: Mac OS X 10.8.3 (12D78) Report Version: 10 Interval Since Last Report: 21098 sec Crashes Since Last Report: 5 Per-App Interval Since Last Report: 408 sec Per-App Crashes Since Last Report: 3 Anonymous UUID: 29BFB7E6-F704-133A-D1CE-AB71516EB936 Crashed Thread: 0 Dispatch queue: com.apple.main-thread Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Application Specific Information: Assertion failed: (pfork != NULL), function SetBestChain, file src/main.cpp, line 1761. Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0 libsystem_kernel.dylib 0x97e26a6a __pthread_kill + 10 1 libsystem_c.dylib 0x960eab2f pthread_kill + 101 2 libsystem_c.dylib 0x961214ec abort + 168 3 libsystem_c.dylib 0x9612fd2b __assert_rtn + 326 4 org.bitcoinfoundation.Bitcoin-Qt 0x000d1d75 SetBestChain(CValidationState&, CBlockIndex*) + 3541 5 org.bitcoinfoundation.Bitcoin-Qt 0x000d3538 ConnectBestBlock(CValidationState&) + 824 6 org.bitcoinfoundation.Bitcoin-Qt 0x00125848 AppInit2(boost::thread_group&) + 22744 7 org.bitcoinfoundation.Bitcoin-Qt 0x00022230 main + 7504 8 org.bitcoinfoundation.Bitcoin-Qt 0x0001f501 start + 53 Thread 1:: Dispatch queue: com.apple.libdispatch-manager 0 libsystem_kernel.dylib 0x97e279ae kevent + 10 1 libdispatch.dylib 0x927cec71 _dispatch_mgr_invoke + 993 2 libdispatch.dylib 0x927ce7a9 _dispatch_mgr_thread + 53 Thread 2:: com.apple.CFSocket.private 0 libsystem_kernel.dylib 0x97e26be6 __select + 10 1 com.apple.CoreFoundation 0x922ef660 __CFSocketManager + 1632 2 libsystem_c.dylib 0x960e95b7 _pthread_start + 344 3 libsystem_c.dylib 0x960d3d4e thread_start + 34 Thread 3: 0 libsystem_kernel.dylib 0x97e26be6 __select + 10 1 QtCore 0x019ffa90 qt_safe_select(int, fd_set*, fd_set*, fd_set*, timeval const*) + 320 2 QtCore 0x01a03dda QEventDispatcherUNIXPrivate::doSelect(QFlags<QEventLoop::ProcessEventsFlag>, timeval*) + 394 3 QtCore 0x01a0426f QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 175 4 QtCore 0x019cd471 QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 65 5 QtCore 0x019cd84a QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 314 6 QtCore 0x018aba45 QThread::exec() + 261 7 QtCore 0x018af0d3 QThread::terminate() + 787 8 libsystem_c.dylib 0x960e95b7 _pthread_start + 344 9 libsystem_c.dylib 0x960d3d4e thread_start + 34 Thread 4: 0 libsystem_kernel.dylib 0x97e268e2 __psynch_cvwait + 10 1 libsystem_c.dylib 0x960ee280 _pthread_cond_wait + 833 2 libsystem_c.dylib 0x96174095 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aed52 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011428d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c3d93 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00ce8845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x960e95b7 _pthread_start + 344 8 libsystem_c.dylib 0x960d3d4e thread_start + 34 Thread 5: 0 libsystem_kernel.dylib 0x97e268e2 __psynch_cvwait + 10 1 libsystem_c.dylib 0x960ee280 _pthread_cond_wait + 833 2 libsystem_c.dylib 0x96174095 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aed52 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011428d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c3d93 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00ce8845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x960e95b7 _pthread_start + 344 8 libsystem_c.dylib 0x960d3d4e thread_start + 34 Thread 6: 0 libsystem_kernel.dylib 0x97e268e2 __psynch_cvwait + 10 1 libsystem_c.dylib 0x960ee280 _pthread_cond_wait + 833 2 libsystem_c.dylib 0x96174095 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aed52 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011428d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c3d93 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00ce8845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x960e95b7 _pthread_start + 344 8 libsystem_c.dylib 0x960d3d4e thread_start + 34 Thread 0 crashed with X86 Thread State (32-bit): eax: 0x00000000 ebx: 0xac6cb13c ecx: 0xbfffe3ec edx: 0x97e26a6a edi: 0xac6d0a28 esi: 0x00000006 ebp: 0xbfffe408 esp: 0xbfffe3ec ss: 0x00000023 efl: 0x00200206 eip: 0x97e26a6a cs: 0x0000000b ds: 0x00000023 es: 0x00000023 fs: 0x00000000 gs: 0x0000000f cr2: 0x02ffe000 Logical CPU: 0 Binary Images: 0x1000 - 0x5f8fff +org.bitcoinfoundation.Bitcoin-Qt (0.8.3 - 0.8.3) <698ACEAA-642B-495C-6E06-5F53520375F1> /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt 0x892000 - 0x897fe7 +libqrencode.3.dylib (5.1) <9627FE72-1198-798B-1841-A64F967F32FB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libqrencode.3.dylib 0x89b000 - 0x8a2ff7 +libminiupnpc.8.dylib (0) <2DBB7FA6-2198-8004-2ECF-F504F2081317> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libminiupnpc.8.dylib 0x8a6000 - 0x8f2fff +libssl.1.0.0.dylib (1) <641EBBF5-C97C-1D6C-EFF0-EB02A7FF7629> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib 0x90c000 - 0xa44fef +libcrypto.1.0.0.dylib (1) <0943ABB0-E2CA-20EC-B52D-E3D5E2340F02> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libcrypto.1.0.0.dylib 0xaad000 - 0xc06fff +libdb_cxx-4.8.dylib (0) <A2028F0C-1E73-00A3-BA80-2DEF2EAC9ECB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libdb_cxx-4.8.dylib 0xc30000 - 0xc33ff3 +libboost_system-mt.dylib (0) <DC2F474D-A848-B1CA-5E46-EAB30E94A639> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_system-mt.dylib 0xc37000 - 0xc4affb +libboost_filesystem-mt.dylib (0) <ED32F1B3-0C00-9EA8-A6E4-B4D69BBB090B> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_filesystem-mt.dylib 0xc55000 - 0xc99ff3 +libboost_program_options-mt.dylib (0) <DAE91877-14DE-370A-9571-A2EC1D7AF3D8> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_program_options-mt.dylib 0xce4000 - 0xcf6ff3 +libboost_thread-mt.dylib (0) <4F1F450A-6305-F698-98AC-E82075E11758> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_thread-mt.dylib 0xd16000 - 0xd1bff3 +libboost_chrono-mt.dylib (0) <7619296E-C4A2-2674-20C7-398C0E5D6C40> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_chrono-mt.dylib 0xd23000 - 0x16b3fe3 +QtGui (4.8.4) <C70071A5-F36B-C018-9BEB-181811A0759F> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtGui.framework/Versions/4/QtGui 0x188a000 - 0x1b39ffb +QtCore (4.8.4) <204CC6C5-048C-4746-D9AD-DF6FA3204CE7> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtCore.framework/Versions/4/QtCore 0x1bab000 - 0x1cd0ff7 +QtNetwork (4.8.4) <E7999879-10BE-D14A-6BBB-9F36A61819C0> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtNetwork.framework/Versions/4/QtNetwork 0x1d0c000 - 0x1d1dfe7 +libz.1.dylib (1.2.7) <04F507FA-B0BF-CD40-DB2E-CBF29500AF19> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libz.1.dylib 0x1d21000 - 0x1d42fe7 +libpng15.15.dylib (30) <2E174E7D-8E8B-9F51-6A39-53D3243C159E> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libpng15.15.dylib 0x1f10000 - 0x1f1dff3 com.apple.Librarian (1.1 - 1) <68F8F983-5F16-3BA5-BDA7-1A5451CC02BB> /System/Library/PrivateFrameworks/Librarian.framework/Versions/A/Librarian 0x1f2b000 - 0x1f2fff3 +libqgif.dylib (0) <88247A6C-7963-6E25-F271-07D15F98CF45> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqgif.dylib 0x1f34000 - 0x1f38fff +libqico.dylib (0) <7AE39AE4-C88A-D835-F6DB-43C38C12D8C9> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqico.dylib 0x1f3d000 - 0x1f41fff +libqjpeg.dylib (0) <0D0902B6-EB00-4DEA-37B8-43EEB3552921> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqjpeg.dylib 0x1f47000 - 0x1f4aff7 +libqmng.dylib (0) <AED7B482-BE3B-C70A-3E5B-7575C58DBCE3> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqmng.dylib 0x1f4f000 - 0x1f51ffb +libqtga.dylib (0) <DF371BC0-F930-689E-9654-D687DE08B059> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtga.dylib 0x2fe2000 - 0x2fe6ffb +libqtiff.dylib (0) <D9486AA9-E3DB-C1BF-A248-E5689EC8B768> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtiff.dylib 0x5b25000 - 0x5be3ff3 ColorSyncDeprecated.dylib (400) <35E3054C-5DF1-30D4-A368-C4FDB0992373> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/Resources/ColorSyncDeprecated.dylib 0x91f9000 - 0x9229fe7 +libjpeg.8.dylib (13) <96B28C90-BE02-5517-87BC-EC348C2EE25C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libjpeg.8.dylib 0x922f000 - 0x927cfe7 +libmng.1.dylib (2) <1A7593E8-6C76-5533-E1BE-51976CB1873C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libmng.1.dylib 0x9291000 - 0x92b9fe7 +liblcms.1.dylib (2.19) <81794FD6-C0FC-79D3-7188-36318A86427A> /Applications/Bitcoin-Qt.app/Contents/Frameworks/liblcms.1.dylib 0x92c3000 - 0x9315fe7 +libtiff.3.dylib (13.7) <27FC7F5B-604D-360A-9D36-7567BEA4D1AD> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libtiff.3.dylib 0xa5ef000 - 0xa62aff3 +libqtaccessiblewidgets.dylib (0) <D256CDF3-59B6-AAC8-D553-A348D30AFD9C> /Applications/Bitcoin-Qt.app/Contents/PlugIns/accessible/libqtaccessiblewidgets.dylib 0x8fe25000 - 0x8fe57e57 dyld (210.2.3) <23DBDBB1-1D21-342C-AC2A-0E55F27E6A1F> /usr/lib/dyld 0x90007000 - 0x90069fff libc++.1.dylib (65.1) <C0CFF9FF-5D52-3EAE-B921-6AE1DA00A135> /usr/lib/libc++.1.dylib 0x9006a000 - 0x9006bffd libunc.dylib (25) <58599CBF-E262-3CEA-AFE1-35560E0177DC> /usr/lib/system/libunc.dylib 0x902c6000 - 0x902d3ff7 com.apple.AppleFSCompression (49 - 1.0) <166AA1F8-E50A-3533-A3B5-8737C5118CC3> /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression 0x902d4000 - 0x902e0ff7 com.apple.NetAuth (4.0 - 4.0) <4983C4B8-9D95-3C4D-897E-07743326487E> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth 0x902e1000 - 0x902e2fff libdnsinfo.dylib (453.19) <3B523729-84A8-3D0B-B58C-3FC185060E67> /usr/lib/system/libdnsinfo.dylib 0x902e3000 - 0x902e4fff liblangid.dylib (116) <E13CC8C5-5034-320A-A210-41A2BDE4F846> /usr/lib/liblangid.dylib 0x9101e000 - 0x91025ff3 com.apple.NetFS (5.0 - 4.0) <1F7041F2-4E97-368C-8F5D-24153D81BBDB> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x9104c000 - 0x91065fff com.apple.Kerberos (2.0 - 1) <9BDE8F4D-DBC3-34D1-852C-898D3655A611> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x910a7000 - 0x910ccff7 com.apple.CoreVideo (1.8 - 99.4) <A26DE896-32E0-3D5E-BA89-02AD23FA96B3> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x91340000 - 0x913a4ff3 libstdc++.6.dylib (56) <F8FA490A-8F3C-3645-ABF5-78926CE9C62C> /usr/lib/libstdc++.6.dylib 0x91739000 - 0x91774fef libGLImage.dylib (8.7.25) <6C0B2148-032A-3911-AB21-2E07606E3D9A> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x91775000 - 0x91778ff7 libcompiler_rt.dylib (30) <CE5DBDB4-0124-3E2B-9105-989DF98DD108> /usr/lib/system/libcompiler_rt.dylib 0x91779000 - 0x91884ff7 libJP2.dylib (849) <B2D0E844-C390-376C-91D9-F3501B5C7A83> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib 0x921b9000 - 0x921bcff7 com.apple.TCC (1.0 - 1) <437D76CD-6437-3B55-BE2C-A53508858256> /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC 0x921bd000 - 0x921f3ffb com.apple.DebugSymbols (98 - 98) <9A9ADA0A-E487-3C8F-9998-286EE04C235A> /System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols 0x921f7000 - 0x92273ff3 com.apple.Metadata (10.7.0 - 707.5) <F2BC2AB4-A87A-3D37-A496-AC21EF3E1244> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x92274000 - 0x9245cffb com.apple.CoreFoundation (6.8 - 744.18) <68AFEE40-0078-347E-9DEE-32CFE0062A10> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x9245d000 - 0x92482ffb com.apple.framework.familycontrols (4.1 - 410) <B1755756-BEA2-3205-ADAA-68FCC32E60BD> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0x92483000 - 0x9252dfff com.apple.LaunchServices (539.7 - 539.7) <AF33EBD3-BC0B-30B5-B7DA-5CCCF12D7EDD> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x9252e000 - 0x9252efff com.apple.ApplicationServices (45 - 45) <677C4ACC-9D12-366F-8A87-B898AC806DD9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x9252f000 - 0x92558fff libxslt.1.dylib (11.3) <0DE17DAA-66FF-3195-AADB-347BEB5E2EFA> /usr/lib/libxslt.1.dylib 0x9255a000 - 0x926a8fff com.apple.CFNetwork (596.3.3 - 596.3.3) <EC7EF37B-B00E-374D-9E8F-E4E22D741059> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x926a9000 - 0x9272eff7 com.apple.SearchKit (1.4.0 - 1.4.0) <454E950F-291C-3E95-8F35-05CA0AD6B327> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x9272f000 - 0x9276eff7 com.apple.bom (12.0 - 192) <0637E52C-D151-37B3-904F-8656B2FD44DD> /System/Library/PrivateFrameworks/Bom.framework/Versions/A/Bom 0x9276f000 - 0x927c6ff3 com.apple.HIServices (1.20 - 417) <561A770B-8523-3D09-A763-11F872779A4C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x927c9000 - 0x927c9fff com.apple.Accelerate (1.8 - Accelerate 1.8) <4EC0548E-3A3F-310D-A366-47B51D5B6398> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x927ca000 - 0x927dcff7 libdispatch.dylib (228.23) <86EF7D45-2D97-3465-A449-95038AE5DABA> /usr/lib/system/libdispatch.dylib 0x927dd000 - 0x92bc0fff com.apple.HIToolbox (2.0 - 626.1) <ECC3F04F-C4B7-35BF-B10E-183B749DAB92> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x92c98000 - 0x92d00fe7 libvDSP.dylib (380.6) <55780308-4DCA-3B10-9703-EAFC3E13A3FA> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x92d01000 - 0x92d02fff libquarantine.dylib (52) <D526310F-DC77-37EA-8F5F-83928EFA3262> /usr/lib/system/libquarantine.dylib 0x9336d000 - 0x9347a057 libobjc.A.dylib (532.2) <FA455371-7395-3D58-A89B-D1520612D1BC> /usr/lib/libobjc.A.dylib 0x934c7000 - 0x934e7ffd com.apple.ChunkingLibrary (2.0 - 133.3) <FA45EAE8-BB10-3AEE-9FDC-C0C3A533FF48> /System/Library/PrivateFrameworks/ChunkingLibrary.framework/Versions/A/ChunkingLibrary 0x9355a000 - 0x93561fff libsystem_dnssd.dylib (379.37) <49A44FB3-559D-3C7E-AA40-23F5A8E612AC> /usr/lib/system/libsystem_dnssd.dylib 0x93562000 - 0x9357ffff libCRFSuite.dylib (33) <C9D72D0C-871A-39A2-8AFB-682D11AE7D0D> /usr/lib/libCRFSuite.dylib 0x938f9000 - 0x93d3bff3 com.apple.CoreGraphics (1.600.0 - 331.0.4) <BC041647-FB5A-3D07-A253-F3D34E25BF6C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics 0x93d94000 - 0x93d9dff9 com.apple.CommonAuth (3.0 - 2.0) <34C4768C-EF8D-3DBA-AFB7-09148C8672DB> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth 0x93d9e000 - 0x93e5cff3 com.apple.ColorSync (4.8.0 - 4.8.0) <EFEDCB37-4F20-3CEC-A185-5D2976E11BAC> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x93e5d000 - 0x93e66ffd com.apple.audio.SoundManager (4.0 - 4.0) <ABC5FE40-B222-36EB-9905-5C8C4BFD8C87> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework/Versions/A/CarbonSound 0x93e67000 - 0x93f74ff3 com.apple.ImageIO.framework (3.2.0 - 849) <B34C2380-51F6-38B1-BB6C-C2E5185D90EF> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x93f75000 - 0x93f77ffd libCVMSPluginSupport.dylib (8.7.25) <C8FC6227-5209-3138-89CD-03CAD11F3EC3> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib 0x93f78000 - 0x940f0ff5 com.apple.QuartzCore (1.8 - 304.2) <FB737C74-C460-32A3-9107-D2112BAE6EBC> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x94137000 - 0x94139fff com.apple.securityhi (4.0 - 55002) <79E3B880-3AB7-3BF3-9CDF-117A45599545> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x9413a000 - 0x94144fff com.apple.speech.recognition.framework (4.1.5 - 4.1.5) <B855E8B4-2EE3-3BFF-8547-98A0F084F9AF> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x94145000 - 0x9414bfff com.apple.print.framework.Print (8.0 - 258) <12AEAD24-6924-3923-9E4A-C5D21231E639> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print 0x9414c000 - 0x941bbffb com.apple.Heimdal (3.0 - 2.0) <964D9952-B0F2-34F6-8265-1823C0D5EAB8> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal 0x941f4000 - 0x9432fff7 libBLAS.dylib (1073.4) <FF74A147-05E1-37C4-BC10-7DEB57FE5326> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x94330000 - 0x943cbfff com.apple.CoreSymbolication (3.0 - 117) <F705A8CD-A04A-3A84-970A-7B04BC05DA97> /System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication 0x943cc000 - 0x943cfffc libpam.2.dylib (20) <FCF74195-A99E-3B07-8E49-688D4A6F1E18> /usr/lib/libpam.2.dylib 0x943d2000 - 0x9442cffb com.apple.AE (645.6 - 645.6) <44556FF7-A869-399A-AEBB-F4E9263D9152> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x9442d000 - 0x9443bff3 libsystem_network.dylib (77.10) <7FBF5A15-97BA-3721-943E-E77F0C40DBE1> /usr/lib/system/libsystem_network.dylib 0x9443c000 - 0x9444cff2 com.apple.LangAnalysis (1.7.0 - 1.7.0) <875363E7-6D02-3229-A9DD-E5A5568A7D61> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x9444d000 - 0x9445bfff com.apple.opengl (1.8.7 - 1.8.7) <0631EC1D-833B-39D2-A907-A9F7617E5504> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x9445c000 - 0x94578ffb com.apple.desktopservices (1.7.3 - 1.7.3) <7157C51D-C695-3C9E-B532-F551E7E55B56> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x945c8000 - 0x94720ffb com.apple.audio.toolbox.AudioToolbox (1.8 - 1.8) <0D36953C-9897-3E9B-8C70-847E90B203A2> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x94721000 - 0x947b9fff com.apple.CoreServices.OSServices (557.6 - 557.6) <E1600639-3EEC-3DF8-BD40-747BB2117988> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x94a2d000 - 0x94a7bff3 com.apple.SystemConfiguration (1.12.2 - 1.12.2) <6E858B9F-337A-314E-88B7-24A274ACE568> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x94a7c000 - 0x94d81ff7 com.apple.CoreServices.CarbonCore (1037.5 - 1037.5) <356AE2DF-ABB0-319C-8B5B-2F33D693889F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x94f2f000 - 0x94f58ff7 libRIP.A.dylib (331.0.4) <FE496AFC-420A-3712-BC79-FC8C63ADB73D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x94f63000 - 0x94f63fff libkeymgr.dylib (25) <D5E93F7F-9315-3AD6-92C7-941F7B54C490> /usr/lib/system/libkeymgr.dylib 0x94fbe000 - 0x94fbffff libDiagnosticMessagesClient.dylib (8) <39B3D25A-148A-3936-B800-0D393A00E64F> /usr/lib/libDiagnosticMessagesClient.dylib 0x94fc0000 - 0x94fecff7 libsystem_info.dylib (406.17) <AA5611DB-A944-3072-B6BE-ACAB08689547> /usr/lib/system/libsystem_info.dylib 0x94fed000 - 0x94fedffd libOpenScriptingUtil.dylib (148.3) <87895E27-88E2-3249-8D0E-B17E76FB00C1> /usr/lib/libOpenScriptingUtil.dylib 0x94fee000 - 0x94ff2ffc libGIF.dylib (849) <2F1DE1C6-4779-35A6-8ED5-BBF8ADD5962A> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x94ff3000 - 0x94fffffe libkxld.dylib (2050.22.13) <ED37AAAA-B1C0-3ADF-A897-3D580A845843> /usr/lib/system/libkxld.dylib 0x952f4000 - 0x95597ff3 com.apple.CoreImage (8.2.4 - 1.0.1) <BA4EE8D7-FE72-3CC3-801F-B69D8A8B426F> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/CoreImage.framework/Versions/A/CoreImage 0x95d35000 - 0x95d4afff com.apple.speech.synthesis.framework (4.1.12 - 4.1.12) <DE68CEB5-4959-3652-83B8-D2B00D3B932D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x95d4b000 - 0x95d67fff libPng.dylib (849) <BF2CB6F5-A2F1-35A4-93F7-ACA6D7F02084> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x95d68000 - 0x95d76ff7 libz.1.dylib (43) <245F1B61-2276-3BBB-9891-99934116D833> /usr/lib/libz.1.dylib 0x95d77000 - 0x95d7effb libunwind.dylib (35.1) <E1E8D8B3-3C78-3AB1-B398-C180DC6DCF05> /usr/lib/system/libunwind.dylib 0x95d7f000 - 0x95e16ff7 com.apple.ink.framework (10.8.2 - 150) <D90FF7BC-6B90-39F1-AC52-670269947C58> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x95e17000 - 0x95e5bff7 libGLU.dylib (8.7.25) <0CC1A4D8-C095-3F2B-B55C-FDEBEA0E9CFE> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x95e5c000 - 0x95f54ff9 libsqlite3.dylib (138.1) <AD7C5914-35F0-37A3-9238-A29D2E26C755> /usr/lib/libsqlite3.dylib 0x95f55000 - 0x95fa4ff6 libTIFF.dylib (849) <229EBA67-A2D3-30B7-8177-3CA5503360EC> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x95fa5000 - 0x95fd8ffb com.apple.GSS (3.0 - 2.0) <9566A96D-C296-3ABD-A12A-E274C81C0B25> /System/Library/Frameworks/GSS.framework/Versions/A/GSS 0x95fd9000 - 0x9601bff7 libcups.2.dylib (327.3) <C7A4A315-FA15-354B-8BC9-BE824C4EFF6D> /usr/lib/libcups.2.dylib 0x96077000 - 0x96095ff3 com.apple.openscripting (1.3.6 - 148.3) <F3422C02-5ACB-343A-987B-A2D58EA2F5A8> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x960c5000 - 0x960c7ffb libRadiance.dylib (849) <EAF7C74F-2A71-3A07-82E1-4FADEAFCF201> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x960c8000 - 0x960c8fff libSystem.B.dylib (169.3) <F479E729-89C7-3B4C-9731-678EB673A861> /usr/lib/libSystem.B.dylib 0x960c9000 - 0x960d2fff com.apple.DiskArbitration (2.5.2 - 2.5.2) <89822A83-B450-3363-8E9C-9B80CB4450B1> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x960d3000 - 0x96190feb libsystem_c.dylib (825.26) <6E35A83F-1A5B-3AF9-8C6D-D7B57B25FB63> /usr/lib/system/libsystem_c.dylib 0x96191000 - 0x961d3ffb com.apple.RemoteViewServices (2.0 - 80.6) <AE962502-4539-3893-A2EB-9D384652AEAC> /System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices 0x961d4000 - 0x96238fff com.apple.datadetectorscore (4.1 - 269.2) <B4D53047-C613-32F8-9E08-0154EA81B487> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore 0x96239000 - 0x96557ff3 com.apple.Foundation (6.8 - 945.16) <C4D95341-B4FF-30AC-815A-A23C019C57A3> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x965f6000 - 0x9666bff7 com.apple.ApplicationServices.ATS (332 - 341.1) <95206704-F9C9-33C4-AF25-FE9890E160B2> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x9666c000 - 0x96682fff com.apple.CFOpenDirectory (10.8 - 151.10) <3640B988-F915-3E0D-897C-CB04C95BA601> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x96683000 - 0x96695fff libbsm.0.dylib (32) <DADD385E-FE53-3458-94FB-E316A6345108> /usr/lib/libbsm.0.dylib 0x96696000 - 0x96696fff com.apple.CoreServices (57 - 57) <956C6C6D-A5DD-314F-9C57-4A61D41F30CE> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x96697000 - 0x9669aff9 libCGXType.A.dylib (331.0.4) <981B13D6-4E8B-3468-92D3-FE436B48C0DA> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x966f7000 - 0x96aafffa libLAPACK.dylib (1073.4) <9A6E5EAD-F2F2-3D5C-B655-2B536DB477F2> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x96b87000 - 0x96ba6ff3 com.apple.Ubiquity (1.2 - 243.15) <E10A2937-D671-3D14-AF8D-BA25E601F458> /System/Library/PrivateFrameworks/Ubiquity.framework/Versions/A/Ubiquity 0x96ba7000 - 0x96baafff com.apple.help (1.3.2 - 42) <AD7EB1F0-A068-3A2C-9D59-38E59CEC0D96> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x96bab000 - 0x96e6bff3 com.apple.security (7.0 - 55179.11) <165A3105-9ADF-329B-93FC-3C8EFAEDDD13> /System/Library/Frameworks/Security.framework/Versions/A/Security 0x96e6c000 - 0x96e99ffe libsystem_m.dylib (3022.6) <9975D9C3-3B71-38E3-AA21-C5C5F9D9C431> /usr/lib/system/libsystem_m.dylib 0x96e9a000 - 0x96f4efff com.apple.coreui (2.0 - 181.1) <C15ABF35-B7F5-34ED-A461-386DAF65D96B> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x96f4f000 - 0x96f53ff7 libmacho.dylib (829) <5280A013-4F74-3F74-BE0C-7F612C49F1DC> /usr/lib/system/libmacho.dylib 0x9700c000 - 0x9701afff libxar.1.dylib (105) <343E4A3B-1D04-34A3-94C2-8C7C9A8F736B> /usr/lib/libxar.1.dylib 0x97072000 - 0x97078fff libGFXShared.dylib (8.7.25) <4268BFAF-4529-3B40-A8B9-66F176AC20CF> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x97088000 - 0x970acfff libJPEG.dylib (849) <CD42C17E-6B13-35BE-B585-9AE69CEA534F> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x970f7000 - 0x971a6ff7 com.apple.CoreText (260.0 - 275.16) <873ADCD9-D361-3753-A220-CDD289196AD8> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText 0x971a7000 - 0x97d63ff7 com.apple.AppKit (6.8 - 1187.37) <6FBB3467-04F9-395F-8EA8-C84347C5BE43> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x97d64000 - 0x97d77ff9 com.apple.MultitouchSupport.framework (235.29 - 235.29) <451701B6-03CE-3F26-9FF0-92D8DA1467EE> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x97d78000 - 0x97d81fff com.apple.CommerceCore (1.0 - 26.1) <8C28115C-6EC1-316D-9237-F4FBCBB778C5> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0x97d82000 - 0x97dcefff libcorecrypto.dylib (106.2) <20EBADBA-D6D6-36F0-AE80-168E9AF13DB6> /usr/lib/system/libcorecrypto.dylib 0x97dcf000 - 0x97e11ff7 libauto.dylib (185.1) <B2B5B639-6778-352A-828D-FD8B64A3E8B3> /usr/lib/libauto.dylib 0x97e12000 - 0x97e2cffc libsystem_kernel.dylib (2050.22.13) <70C520E8-0394-3DFB-823B-FE8C251C169A> /usr/lib/system/libsystem_kernel.dylib 0x97e2d000 - 0x97e5affb com.apple.CoreServicesInternal (154.2 - 154.2) <DCCF604B-1DB8-3F09-8122-545E2E7F466D> /System/Library/PrivateFrameworks/CoreServicesInternal.framework/Versions/A/CoreServicesInternal 0x97e5b000 - 0x97e5bfff com.apple.Carbon (154 - 155) <C0A26E7B-28F1-3C7E-879E-A3CF3ED5111C> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x97e5c000 - 0x97e67fff libcommonCrypto.dylib (60027) <8EE30FA5-AA8D-3FA6-AB0F-05DA8B0425D9> /usr/lib/system/libcommonCrypto.dylib 0x97f79000 - 0x98396fff FaceCoreLight (2.4.1) <571DE3F8-CA8A-3E71-9AF4-F06FFE721CE6> /System/Library/PrivateFrameworks/FaceCoreLight.framework/Versions/A/FaceCoreLight 0x98397000 - 0x98397fff libsystem_blocks.dylib (59) <3A743C5D-CFA5-37D8-80A8-B6795A9DB04F> /usr/lib/system/libsystem_blocks.dylib 0x98398000 - 0x983e0ff5 com.apple.opencl (2.2.18 - 2.2.18) <004A1DE4-49C6-3938-8B54-CD1DC23BDBE5> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x98612000 - 0x9861afff libcopyfile.dylib (89) <4963541B-0254-371B-B29A-B6806888949B> /usr/lib/system/libcopyfile.dylib 0x9861b000 - 0x98625fff libCSync.A.dylib (331.0.4) <71A7B331-C8A2-322C-AFB0-062EE9C3B848> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib 0x98d5f000 - 0x98d76fff com.apple.GenerationalStorage (1.1 - 132.3) <DD0AA3DB-376D-37F3-AC5B-17AC9B9E0A63> /System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage 0x99265000 - 0x99268ffc libCoreVMClient.dylib (32.3) <35B63A60-DF0A-3FB3-ABB8-164B246A43CC> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x99269000 - 0x992e3ff3 com.apple.securityfoundation (6.0 - 55115.4) <8A3DA1FE-1985-3ECB-945A-6B1E853B4BDC> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x992e4000 - 0x992ebfff liblaunch.dylib (442.26.2) <310C99F8-0811-314D-9BB9-D0ED6DFA024B> /usr/lib/system/liblaunch.dylib 0x99379000 - 0x99535ffd libicucore.A.dylib (491.11.2) <59A23F06-16AD-35F8-BA58-D17305232402> /usr/lib/libicucore.A.dylib 0x99536000 - 0x9957bff7 com.apple.NavigationServices (3.7 - 200) <F6531764-6E43-3AF3-ACDD-8A5551EF016A> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework/Versions/A/NavigationServices 0x9957c000 - 0x99705ff7 com.apple.vImage (6.0 - 6.0) <1D1F67FE-4F75-3689-BEF6-4A46C8039E70> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x99717000 - 0x99717ffd com.apple.audio.units.AudioUnit (1.8 - 1.8) <D35BA73D-1E56-3A1D-9F9F-971F3BF8C136> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x99718000 - 0x9972dfff com.apple.ImageCapture (8.0 - 8.0) <B8BD421F-D5A9-3FB4-8E89-AD5CFC0D4030> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x99764000 - 0x99773fff libGL.dylib (8.7.25) <818E3E6B-9B00-3117-8157-9E95CB59A47B> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x997c5000 - 0x997cffff libsystem_notify.dylib (98.5) <7EEE9475-18F8-3099-B0ED-23A3E528ABE0> /usr/lib/system/libsystem_notify.dylib 0x997e8000 - 0x997e9ffd com.apple.TrustEvaluationAgent (2.0 - 23) <E42347C0-2D3C-36A4-9200-757FFA61B388> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x998d0000 - 0x998dcffa com.apple.CrashReporterSupport (10.8.3 - 417) <A4A45B14-8992-3739-82BC-3C5E5C2686F9> /System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport 0x998dd000 - 0x99945ff7 com.apple.framework.IOKit (2.0.1 - 755.22.5) <F9A70D23-1108-3616-9DE3-6C5730CA7AB2> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x99988000 - 0x99989fff libsystem_sandbox.dylib (220.2) <61A79095-1978-3AAA-B0E0-658BC8E5F045> /usr/lib/system/libsystem_sandbox.dylib 0x9998a000 - 0x9998afff com.apple.Accelerate.vecLib (3.8 - vecLib 3.8) <908B8D40-3FB5-3047-B482-3DF95025ECFC> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x999bf000 - 0x999dcfff libxpc.dylib (140.42) <1E419D55-C5C1-33FF-B52E-6C7FFBEA5E1F> /usr/lib/system/libxpc.dylib 0x999dd000 - 0x99a0efff com.apple.DictionaryServices (1.2 - 184.4) <0D5BE86F-F40A-3E39-8569-19FCA5EDF9D3> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x99a0f000 - 0x99c26fff com.apple.CoreData (106.1 - 407.7) <17FD06D6-AD7C-345A-8FA4-1F0FBFF4DAE1> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x99c27000 - 0x99c27fff com.apple.vecLib (3.8 - vecLib 3.8) <83160DD1-5614-3E34-80EB-97041016EF1F> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib 0x99c28000 - 0x99c2afff libdyld.dylib (210.2.3) <05D6FF2A-F09B-309D-95F7-7AF10259C707> /usr/lib/system/libdyld.dylib 0x99c2b000 - 0x99c48ff7 libresolv.9.dylib (51) <B9742A2A-DF15-3F6E-8FCE-778A58214B3A> /usr/lib/libresolv.9.dylib 0x99c49000 - 0x99c6bfff libc++abi.dylib (26) <3AAA8D55-F5F6-362B-BA3C-CCAF0D3C8E27> /usr/lib/libc++abi.dylib 0x99fc1000 - 0x99fc2fff libremovefile.dylib (23.2) <9813B2DB-2374-3AA2-99B6-AA2E9897B249> /usr/lib/system/libremovefile.dylib 0x99fc3000 - 0x99fc7fff com.apple.IOSurface (86.0.4 - 86.0.4) <6431ACB6-561B-314F-9A2A-FAC1578FCC86> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x99fc8000 - 0x9a068ff7 com.apple.QD (3.42 - 285) <1B8307C6-AFA8-312E-BA5B-679070EF2CA1> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x9a069000 - 0x9a152ff7 libxml2.2.dylib (22.3) <015A4FA6-5BB9-3F95-AFB8-B9281E22685B> /usr/lib/libxml2.2.dylib 0x9a153000 - 0x9a251ff7 libFontParser.dylib (84.6) <7D3EB3CC-527E-3A74-816A-59CAFD2260A4> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x9a252000 - 0x9a326ff3 com.apple.backup.framework (1.4.2 - 1.4.2) <0473EB45-E9BF-3C10-B235-A6E2B960A88F> /System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup 0x9a327000 - 0x9a418ffc libiconv.2.dylib (34) <B096A9B7-83A6-31B3-8D2F-87D91910BF4C> /usr/lib/libiconv.2.dylib 0x9a419000 - 0x9a4abffb libvMisc.dylib (380.6) <6DA3A03F-20BE-300D-A664-B50A7B4E4B1A> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x9a4ac000 - 0x9a4faffb libFontRegistry.dylib (100) <3B8350C2-4D8F-38C4-A22E-2F855D7E83D1> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x9a4fb000 - 0x9a561fff com.apple.print.framework.PrintCore (8.3 - 387.2) <0F7665F5-33F0-3661-9BE2-7DD2890E304B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x9a562000 - 0x9a56eff8 libbz2.1.0.dylib (29) <7031A4C0-784A-3EAA-93DF-EA1F26CC9264> /usr/lib/libbz2.1.0.dylib 0x9a56f000 - 0x9a5c6ff7 com.apple.ScalableUserInterface (1.0 - 1) <2B5E454B-BC49-3E85-B54D-1950397C448C> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/ScalableUserInterface.framework/Versions/A/ScalableUserInterface 0x9a5c7000 - 0x9a5cbfff com.apple.CommonPanels (1.2.5 - 94) <6B3E7E53-7708-3DA2-8C50-59C2B4735DE1> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x9a5cc000 - 0x9a62aff7 com.apple.audio.CoreAudio (4.1.1 - 4.1.1) <953DD669-8C6E-387D-AB3F-D8C8965347DF> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x9a632000 - 0x9a636fff com.apple.OpenDirectory (10.8 - 151.10) <A1858D81-086F-3BF5-87E3-9B70409FFDF6> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x9a637000 - 0x9a63bffe libcache.dylib (57) <834FDCA7-FE3B-33CC-A12A-E11E202477EC> /usr/lib/system/libcache.dylib 0x9a667000 - 0x9a671ffe com.apple.bsd.ServiceManagement (2.0 - 2.0) <9732BA61-D6F6-3644-82DA-FF0D6FEEFC69> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement 0x9a672000 - 0x9a696fff com.apple.PerformanceAnalysis (1.16 - 16) <18DE0F9F-1264-394D-AC56-6B2A1771DFBE> /System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis 0x9a697000 - 0x9a6f1fff com.apple.Symbolication (1.3 - 93) <A839CFC2-F870-3652-B353-15A55D88F88D> /System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication 0x9a6f2000 - 0x9a74dfff com.apple.htmlrendering (77 - 1.1.4) <5C0C669F-AE07-3983-B38F-EB829B5CE609> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HTMLRendering.framework/Versions/A/HTMLRendering External Modification Summary: Calls made by other processes targeting this process: task_for_pid: 2 thread_create: 0 thread_set_state: 0 Calls made by this process: task_for_pid: 0 thread_create: 0 thread_set_state: 0 Calls made by all processes on this machine: task_for_pid: 7138 thread_create: 1 thread_set_state: 0 VM Region Summary: ReadOnly portion of Libraries: Total=144.8M resident=71.6M(49%) swapped_out_or_unallocated=73.2M(51%) Writable regions: Total=234.5M written=128.9M(55%) resident=169.4M(72%) swapped_out=0K(0%) unallocated=65.1M(28%) REGION TYPE VIRTUAL =========== ======= ATS (font support) 31.9M CG backing stores 900K CG shared images 192K CoreServices 1668K MALLOC 174.3M MALLOC guard page 48K Memory tag=240 4K Memory tag=242 12K Memory tag=35 7440K Stack 66.6M VM_ALLOCATE 16.1M __DATA 5772K __DATA/__OBJC 116K __IMAGE 528K __LINKEDIT 36.4M __OBJC 1548K __OBJC/__DATA 16K __PAGEZERO 4K __TEXT 108.3M __UNICODE 544K mapped file 157.3M shared memory 308K =========== ======= TOTAL 609.6M Model: iMac11,3, BootROM IM112.0057.B01, 4 processors, Intel Core i5, 2.8 GHz, 12 GB, SMC 1.59f2 Graphics: ATI Radeon HD 5750, ATI Radeon HD 5750, PCIe, 1024 MB Memory Module: BANK 0/DIMM0, 2 GB, DDR3, 1333 MHz, 0x80AD, 0x484D54313235533654465238432D48392020 Memory Module: BANK 1/DIMM0, 2 GB, DDR3, 1333 MHz, 0x80AD, 0x484D54313235533654465238432D48392020 Memory Module: BANK 0/DIMM1, 4 GB, DDR3, 1333 MHz, 0x802C, 0x31364A54463531323634485A2D3147344831 Memory Module: BANK 1/DIMM1, 4 GB, DDR3, 1333 MHz, 0x802C, 0x31364A54463531323634485A2D3147344831 AirPort: spairport_wireless_card_type_airport_extreme (0x168C, 0x8F), Atheros 9280: 4.0.72.0-P2P Bluetooth: Version 4.1.3f3 11349, 2 service, 18 devices, 1 incoming serial ports Network Service: Ethernet, Ethernet, en0 Serial ATA Device: WDC WD1001FALS-40Y6A0, 1 TB Serial ATA Device: OPTIARC DVD RW AD-5680H USB Device: hub_device, 0x0424 (SMSC), 0x2514, 0xfd100000 / 2 USB Device: IR Receiver, apple_vendor_id, 0x8242, 0xfd120000 / 4 USB Device: Built-in iSight, apple_vendor_id, 0x8502, 0xfd110000 / 3 USB Device: hub_device, 0x0424 (SMSC), 0x2514, 0xfa100000 / 2 USB Device: Keyboard Hub, apple_vendor_id, 0x1006, 0xfa140000 / 5 USB Device: Microsoft 3-Button Mouse with IntelliEye(TM), 0x045e (Microsoft Corporation), 0x0040, 0xfa141000 / 7 USB Device: Kensington Expert Mouse, 0x047d (Kensington), 0x1020, 0xfa143000 / 10 USB Device: Apple Keyboard, apple_vendor_id, 0x0221, 0xfa142000 / 9 USB Device: BRCM2046 Hub, 0x0a5c (Broadcom Corp.), 0x4500, 0xfa110000 / 4 USB Device: Bluetooth USB Host Controller, apple_vendor_id, 0x8215, 0xfa111000 / 6	https://api.github.com/repos/bitcoin/bitcoin/issues/2800	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2800/comments	2013-06-27T15:17:22Z	None
2790	open	njbartlett	Dates in the UI are displayed in US-style format (month/day/year), which is confusing for British and other non-US English speakers who expect day/month/year. I expected to be able to change this via the User Interface Language settings, but there is no option for British English (en_GB).	https://api.github.com/repos/bitcoin/bitcoin/issues/2790	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2790/comments	2013-06-24T19:43:21Z	None
2785	open	fanquake	Running 0.8.2-beta on OSX 10.8.4 Opened Qt to a corrupted chainstate, and was told to rebuild. Decided to do it later, so chose abort from the popup. Opened Qt the next day to no corruption message, and its just syncing per normal. This debug snippet below is from the shutdown before corruption, opening the corrupted wallet and choosing to not rebuild and finally opening the wallet and having it load successfully. Added 1 addresses from 173.197.107.3: 683 tried, 13640 new received getdata for: tx a535a410388497f78b4bb77b9c929242d6174b0d26f396cc10212d9dcfafb95e CTxMemPool::accept() : accepted e3406befa1868f30485c44a460586ec374186b3ce07e1c287b6afdbb44a8909f (poolsz 1451) received getdata for: tx e3406befa1868f30485c44a460586ec374186b3ce07e1c287b6afdbb44a8909f received getdata for: tx e3406befa1868f30485c44a460586ec374186b3ce07e1c287b6afdbb44a8909f Flushed 14323 addresses to peers.dat 24ms Added 1 addresses from 173.197.107.3: 683 tried, 13640 new received getdata for: tx 8a7b68238126e3a167f8d4369bc1b5c832147e6b3aa5a291b2af462f2a4b51ff dumpaddr thread stop msghand thread interrupt opencon thread interrupt net thread interrupt addcon thread interrupt Flush(false) DBFlush(false) ended 0ms StopNode() UPNP_DeletePortMapping() returned : 0 upnp thread interrupt Flushed 14322 addresses to peers.dat 25ms Committing 775 changed transactions to coin database... Flush(true) wallet.dat refcount=0 wallet.dat checkpoint wallet.dat detach wallet.dat closed DBFlush(true) ended 67ms Bitcoin version v0.8.2-beta (2013-05-25 08:48:25 -0700) Using OpenSSL version OpenSSL 1.0.1c 10 May 2012 Startup time: 2013-06-22 15:18:30 Default data directory /Users/xxxx/Library/Application Support/Bitcoin Using data directory /Users/xxxx/Library/Application Support/Bitcoin Using at most 125 connections (2560 file descriptors available) Using 8 threads for script verification init message: Verifying wallet... dbenv.open LogDir=/Users/xxxx/Library/Application Support/Bitcoin/database ErrorFile=/Users/xxxx/Library/Application Support/Bitcoin/db.log Bound to [::]:8333 Bound to 0.0.0.0:8333 init message: Loading block index... Opening LevelDB in /Users/xxxx/Library/Application Support/Bitcoin/blocks/index Opened LevelDB successfully Opening LevelDB in /Users/xxxx/Library/Application Support/Bitcoin/chainstate Opened LevelDB successfully LoadBlockIndexDB(): last block file = 67 LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=175, size=28716039, heights=242380...242554, time=2013-06-20...2013-06-21) LoadBlockIndexDB(): transaction index disabled LoadBlockIndexDB(): hashBestChain=00000000000000241476e0d024a206a2e8555a97f0fc0b5ab522d492b5dab34f height=242554 date=2013-06-21 06:54:39 init message: Verifying blocks... Verifying last 288 blocks at level 3 LevelDB read failure: Corruption: block checksum mismatch Flush(false) DBFlush(false) ended 0ms StopNode() Flushed 0 addresses to peers.dat 1ms Committing 8 changed transactions to coin database... Flush(true) DBFlush(true) ended 0ms Bitcoin version v0.8.2-beta (2013-05-25 08:48:25 -0700) Using OpenSSL version OpenSSL 1.0.1c 10 May 2012 Startup time: 2013-06-23 04:32:54 Default data directory /Users/xxxx/Library/Application Support/Bitcoin Using data directory /Users/xxxx/Library/Application Support/Bitcoin Using at most 125 connections (2560 file descriptors available) Using 8 threads for script verification init message: Verifying wallet... dbenv.open LogDir=/Users/xxxx/Library/Application Support/Bitcoin/database ErrorFile=/Users/xxxx/Library/Application Support/Bitcoin/db.log Bound to [::]:8333 Bound to 0.0.0.0:8333 init message: Loading block index... Opening LevelDB in /Users/xxxx/Library/Application Support/Bitcoin/blocks/index Opened LevelDB successfully Opening LevelDB in /Users/xxxx/Library/Application Support/Bitcoin/chainstate Opened LevelDB successfully LoadBlockIndexDB(): last block file = 67 LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=175, size=28716039, heights=242380...242554, time=2013-06-20...2013-06-21) LoadBlockIndexDB(): transaction index disabled LoadBlockIndexDB(): hashBestChain=00000000000000241476e0d024a206a2e8555a97f0fc0b5ab522d492b5dab34f height=242554 date=2013-06-21 06:54:39 init message: Verifying blocks... Verifying last 288 blocks at level 3 No coin database inconsistencies in last 150 blocks (53329 transactions) block index 17768ms init message: Loading wallet... nFileVersion = 80202 wallet 1171ms init message: Loading addresses... Loaded 0 addresses from peers.dat 1ms mapBlockIndex.size() = 242556 nBestHeight = 242554 setKeyPool.size() = 100 mapWallet.size() = 19 mapAddressBook.size() = 24 dnsseed thread start upnp thread start Loading addresses from DNS seeds (could take a while) net thread start addcon thread start opencon thread start msghand thread start dumpaddr thread start Flushed 0 addresses to peers.dat 1ms init message: Done loading	https://api.github.com/repos/bitcoin/bitcoin/issues/2785	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2785/comments	2013-06-23T05:02:16Z	None
2784	open	sipa	Ping automatically every 2 minutes (unconditionally), instead of of after 30 minutes of no sending, for latency measurement and keep-alive. Also, disconnect if no reply arrives within 5 minutes, instead of after 90 minutes of inactivity. This should make detection of stalled connections much faster.	https://api.github.com/repos/bitcoin/bitcoin/issues/2784	17	https://api.github.com/repos/bitcoin/bitcoin/issues/2784/comments	2013-06-22T17:17:37Z	None
2777	open	jgarzik	During a short run (start, network sync, stop) of bitcoind on Linux Ubuntu 13, this was thrown on the console, ``` terminate called after throwing an instance of boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error> > what(): boost::lock_error ``` And this is the last few lines of the debug log, ``` 2013-06-19 15:47:55 trying connection 190.2.27.221:8333 lastseen=4.7hrs 2013-06-19 15:47:55 CTxMemPool::accept() : accepted 254d03e64db83bb0ad17e8435f4c5a7932028305789c30642fafb52f6ca20b2a (poolsz 30) 2013-06-19 15:47:57 received getdata (2 invsz) 2013-06-19 15:47:59 ThreadRPCServer method=stop 2013-06-19 15:47:59 addcon thread interrupt 2013-06-19 15:47:59 dumpaddr thread stop 2013-06-19 15:47:59 msghand thread interrupt 2013-06-19 15:47:59 Flush(false) 2013-06-19 15:47:59 wallet.dat refcount=0 2013-06-19 15:47:59 wallet.dat checkpoint 2013-06-19 15:47:59 wallet.dat detach 2013-06-19 15:47:59 wallet.dat closed 2013-06-19 15:47:59 DBFlush(false) ended 10ms 2013-06-19 15:47:59 StopNode() 2013-06-19 15:47:59 net thread interrupt 2013-06-19 15:47:59 Flushed 14271 addresses to peers.dat 35ms 2013-06-19 15:47:59 Committing 33219 changed transactions to coin database... 2013-06-19 15:48:00 Flush(true) 2013-06-19 15:48:00 wallet.dat refcount=0 2013-06-19 15:48:00 wallet.dat checkpoint 2013-06-19 15:48:00 wallet.dat detach 2013-06-19 15:48:00 wallet.dat closed 2013-06-19 15:48:00 DBFlush(true) ended 7ms 2013-06-19 15:48:00 connection timeout ``` The connection timeout following DBFlush seems unusual.	https://api.github.com/repos/bitcoin/bitcoin/issues/2777	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2777/comments	2013-06-19T15:51:23Z	None
2773	open	Subo1978	after that Pull Request this Problem occours, Reverting it, and all is o.k. disconnecting node 127.0.0.1:36934 ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type accepted connection 127.0.0.1:36935 send version message: version 70001, blocks=242009, us=96.47.226.21:8333, them=0.0.0.0:0, peer=127.0.0.1:36935 receive version message: version 32200, blocks=0, us=127.0.0.1:8333, them=127.0.0.1:36935, peer=127.0.0.1:36935 socket recv error 104 disconnecting node 127.0.0.1:36935 ERROR: CTxMemPool::accept() : nonstandard transaction type accepted connection 127.0.0.1:36936 ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type send version message: version 70001, blocks=242009, us=96.47.226.21:8333, them=0.0.0.0:0, peer=127.0.0.1:36936 receive version message: version 32200, blocks=0, us=127.0.0.1:8333, them=127.0.0.1:36936, peer=127.0.0.1:36936 socket recv error 104 disconnecting node 127.0.0.1:36936 ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type Added 2 addresses from 95.211.41.87: 334 tried, 13996 new ERROR: CTxMemPool::accept() : nonstandard transaction type accepted connection 127.0.0.1:36937 send version message: version 70001, blocks=242009, us=96.47.226.21:8333, them=0.0.0.0:0, peer=127.0.0.1:36937 receive version message: version 32200, blocks=0, us=127.0.0.1:8333, them=127.0.0.1:36937, peer=127.0.0.1:36937 socket recv error 104 disconnecting node 127.0.0.1:36937 ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type ERROR: CTxMemPool::accept() : nonstandard transaction type accepted connection 127.0.0.1:36939 send version message: version 70001, blocks=242009, us=96.47.226.21:8333, them=0.0.0.0:0, peer=127.0.0.1:36939 receive version message: version 32200, blocks=0, us=127.0.0.1:8333, them=127.0.0.1:36939, peer=127.0.0.1:36939 socket recv error 104 disconnecting node 127.0.0.1:36939 probkles a	https://api.github.com/repos/bitcoin/bitcoin/issues/2773	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2773/comments	2013-06-17T14:02:46Z	None
2770	open	toffoo	Ive run bitcoin-qt Mac client on the latest OSX version since 0.3.x thru to 0.7.2 with literally zero problems ever, on essentially this same hardware setup. Since the 0.8 update and switch to LevelDB none of the three Mac client releases have worked stably for me and Ive had to downgrade to 0.7.2 (with the May 15 workaround) to maintain a stable bitcoin wallet. Current setup is: MacBook Pro Retina, OSX 10.8.4, bitcoin-qt 0.8.2 I saw that some of the known corruption issues/bugs were fixed/closed with the 0.8.2 release, so I decided to try the upgrade again. After re-indexing and working fine for hours at time (much better than 0.8.1 at least) upon restart I get "Error opening block database. Do you want to rebuild the block database?" which of course I dont want to do because it takes forever, even on this worlds fastest Mac with SSD drive. This has happened 6 times now, and the interesting line in debug.log is: Verifying last 288 blocks at level 3 LevelDB read failure: Corruption: block checksum mismatch More details here: Downgrading to 0.7.2 again, please help permanently fix this in the next 0.8.x release.	https://api.github.com/repos/bitcoin/bitcoin/issues/2770	64	https://api.github.com/repos/bitcoin/bitcoin/issues/2770/comments	2013-06-15T00:27:14Z	None
2757	open	jgarzik	A node may be fingerprinted by submitting a unique block to that node, in a weak chain, and then later requesting it. Usually the attack involves submitting a low-PoW block at 2009-era height to an active, up-to-date node. Solution: do not serve never-in-the-best-chain blocks, or a similar solution.	https://api.github.com/repos/bitcoin/bitcoin/issues/2757	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2757/comments	2013-06-10T20:14:45Z	None
2751	open	jgarzik	For certain events, it would increase user security to generate a transaction that sweeps funds into new keys. Examples when a sweep would be useful: * When importing a private key, such as a casascius coin or scratch-off. * When encrypting a previously-unencrypted wallet, and some coins remain on the unencrypted keys. This sweep must be optional, in case the user has a reason to *not* generate a transaction at that moment.	https://api.github.com/repos/bitcoin/bitcoin/issues/2751	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2751/comments	2013-06-07T17:31:28Z	None
2745	open	gruez	Assertion failed! Program: C:\Users\grue\bitcoin\bitcoin-qt.exe File: ./db/dbformat.h Line: 96 Expression: internal_key.size() >= 8 For information on how your program can cause an assertion failure, see the Visual C++ documentation on asserts debug.log: debug.log 2:	https://api.github.com/repos/bitcoin/bitcoin/issues/2745	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2745/comments	2013-06-06T00:53:31Z	None
2739	open	jeremysawicki	I have been debugging some RPC-related shutdown hangs in bitcoin-qt on windows. The behavior is worse in 0.8.2, but there were problems before 0.8.2 as well. 1. In ServiceConnection, there is a loop that processes multiple requests from the same connection as long as "Connection: close" is not specified in the request. During application shutdown, nothing stops that processing, so a client can continue to make requests indefinitely using an already established connection. This is new in 0.8.2 -- in 0.8.1 there was a check for fShutdown before processing each request. 2. If an RPC connection is blocked, for example in ReadHTTPRequestLine, shutdown can be delayed indefinitely while waiting for input from the client. That can happen due to a misbehaving client, but it can also happen with a well-behaved client that makes multiple requests on the same connection. After the first request and reply, we will reach ReadHTTPRequestLine and wait until the client has another request to make. This is not new in 0.8.2. For now I have worked around the problems by forcing ServiceConnection to close the connection after the first request in all cases. There is still a possibility of hangs if the client fails to send the first request promptly.	https://api.github.com/repos/bitcoin/bitcoin/issues/2739	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2739/comments	2013-06-05T01:14:53Z	None
2737	open	monohydroxy	It seems to me the Bitcoin-qt Sign Message feature is a little harder to use than it should be. Once all of the fields are filled in, it would be more convenient to output a block of text that contains all of the information that should be pasted in to a message. Also a simple parser that expects this format should be put into the Verify Message side of things. Its worth a note that Armory and MultiBit are working on this feature. It would be nice if they all were compatible. Heres an example (taken from a PGP Signed message): -----BEGIN BITCOIN SIGNED MESSAGE----- Address: 1Bitcoinasdfasdfsadfsadfsadf Because anyone can claim to be me. Theres no validation of the user name or email address when someone posts a comment. While I do try to remove imposters, some may slip through. By signing my comments using this technique, anyone can independently verify that I was the author of the message by validating the signature. -----BEGIN BITCOIN SIGNATURE----- Version: Bitcoin-qt (1.0) iD8DBQFFxqRFCMEe9B/8oqERAqA2AJ91Tx4RziVzY4eR4Ms4MFsKAMqOoQCgg7y6e5AJIRuLUIUikjNWQIW -----END BITCOIN SIGNATURE-----	https://api.github.com/repos/bitcoin/bitcoin/issues/2737	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2737/comments	2013-06-04T18:43:55Z	None
2736	open	pstratem	wtxNew is committed to the wallet before the transactions it depends on If bitcoind is killed after committing wtxNew but before committing the transaction it depends on the transaction could get stuck. Im thinking that should be rearranged such that the transaction wtxNew depends on are commited, wtxNew is committed, and finally the transaction outputs wtxNew uses are marked as spent. This bug should be extremely rare on the main network since very few people are creating transaction which spend outputs that nobody else has heard of. Im not really sure about the proposed solution, criticism needed.	https://api.github.com/repos/bitcoin/bitcoin/issues/2736	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2736/comments	2013-06-04T17:39:48Z	None
2729	open	randy-waterhouse	There doesnt appear to be any mechanism to disconnect from nodes without stopping and starting bitcoind. The "addnode" RPC call has a remove function but this appears to just remove the node from the list of addnodes, without disconnecting from the misbehaving node immediately. It is also a matter of network optimisation as marginal connections with distant nodes can lead to an increase in traffic due to resends, repeated requests, etc. If poor connections can be easily dropped, the good connections can come into majority. Some simple decision code to drop misbehaving nodes (high latency) can be added to a call to disconnect to achieve better network wide connectivity.	https://api.github.com/repos/bitcoin/bitcoin/issues/2729	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2729/comments	2013-06-03T11:42:39Z	None
2726	open	rebroad	2013-05-31 09:28:32 Bitcoin version v0.8.2-beta (2013-05-25 08:48:25 -0700) 2013-05-31 09:28:41 LoadBlockIndexDB(): hashBestChain=000000000000036b0687c15229f7c337265f2154c6ece7a1fde625f97c260ebf height=197884 date=2012-09-08 19:08:11 2013-05-31 11:05:45 SetBestChain: new best=000000000000002f6afc75f359c785e48c294a881ab5ace093ce84146f8c1f0b height=228337 log2_work=69.636427 tx=15075580 date =2013-03-28 03:34:39 progress=0.487031 2013-05-31 11:05:46 InvalidChainFound: invalid block=000000000000002a0bd37c0f44c2f35a75ede3b01f6710c0369a79dfdd4837da height=228338 log2_work=69.636473 date=20 13-03-28 03:38:55	https://api.github.com/repos/bitcoin/bitcoin/issues/2726	42	https://api.github.com/repos/bitcoin/bitcoin/issues/2726/comments	2013-06-02T03:21:08Z	None
2724	open	Suffice	If the would be transfer is larger than the fee, and there is not enough left in the balance to cover for the fee, to request to subtract what more is needed to cover for the fee from the would be transfer. This way if someone wants to transfer their entire balance somewhere else, they can without accounting for the amount that should be left to cover for the fee. (I understand that there are pull requests that make the transfer process more convenient, so what Im suggesting here might already be implemented, but then again, it might not. I at least dont think it is.)	https://api.github.com/repos/bitcoin/bitcoin/issues/2724	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2724/comments	2013-06-01T00:18:02Z	None
2723	open	Suffice	Perhaps show a percentage of a persons total balance that will be used for a transaction at the active input figure. Many have accidentally sent 10x or more of what they meant to send because of some extra digits, or miscalculated denomination. Yet most understand about what percentage of their balance they want to send, and they can then check the percentage to be certain that its not excessive or too little. If someone is to send two or more transactions at once, to adjust the percentages accordingly. OR: Show a cautionary message by the transaction form if the amount exceeds a configurable percentage of balance.	https://api.github.com/repos/bitcoin/bitcoin/issues/2723	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2723/comments	2013-06-01T00:07:14Z	None
2719	open	jafoal	After updating to 8.2 from 8.1 I can no longer start the Bitcoin-qt client. It always "quits unexpectedly". I tried un installing and re installing several times and with a couple of the past versions. When I tried 7.2 I could get the client to launch and the ctransactions all matched, however, I tried looking for the /Application Support/Bitcoin/ folder, and its still missing. It seems like something is preventing the directory from being created during install..? I have my back up wallet.dat file else where and I did trying moving around but nothing seems to work.	https://api.github.com/repos/bitcoin/bitcoin/issues/2719	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2719/comments	2013-05-31T03:27:38Z	None
2717	open	jgarzik	"syncnode" member is only present when its value is true. Ideally, it should always be present, with a value of true or false.	https://api.github.com/repos/bitcoin/bitcoin/issues/2717	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2717/comments	2013-05-30T17:56:26Z	None
2715	open	laanwj	Currently, the GUI shows the time at which the transaction was first seen. If the user had the client closed at the time of receiving a transaction, it will show the transaction as having the date of opening the client instead of (approximately) when it was sent. Showing the date of the block may be more useful in these cases. The smart date is (as I understand it) the earliest time that the transaction was seen, so if it is in a block it will show the date of the block, if it is not yet in a block it shows the first seen time. Id like to change the date column to show the smart date. Any reason to not do this? From the point of the UI code there is little difference, except that the nTimeSmart can change and the nTime is fixed at creation, this may be something to be wary of but is no big issue...	https://api.github.com/repos/bitcoin/bitcoin/issues/2715	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2715/comments	2013-05-30T13:31:08Z	None
2710	open	Suffice	This list can become very clustered with abandoned addresses, and can make finding specific addresses more difficult. Deleting addresses should require the password if the wallet is encrypted. Hiding an address would be preferable, just in case a person receives a transaction to one.	https://api.github.com/repos/bitcoin/bitcoin/issues/2710	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2710/comments	2013-05-29T23:42:41Z	None
2704	open	rdponticelli	Ive seen this error twice at close up, after importing/exporting keys on wallets: bitcoin-qt: /usr/include/boost/thread/pthread/recursive_mutex.hpp:67: void boost::recursive_mutex::lock(): Assertion `!pthread_mutex_lock(&m) failed. Aborted	https://api.github.com/repos/bitcoin/bitcoin/issues/2704	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2704/comments	2013-05-29T01:17:44Z	None
2701	open	wtogami	bitcoin-0.8.2-rc3 gitian x86_64 wallet.dat that reproduces this issue. This was created by kill -9 of previous bitcoin-qt after it hanged during shutdown in Issue #2690. Bitcoin-Qt works properly, but during exit it crashes with this error: receive version message: version 70001, blocks=238242, us=53.15.36.49:49450, them=188.79.149.44:8333, peer=188.79.149.44:8333 Added 1 addresses from 142.4.208.152: 63 tried, 14191 new addcon thread interrupt msghand thread interrupt dumpaddr thread stop net thread interrupt connection timeout opencon thread interrupt Flush(false) wallet.dat refcount=0 wallet.dat checkpoint wallet.dat detach wallet.dat closed DBFlush(false) ended 0ms StopNode() Flushed 14254 addresses to peers.dat 51ms ************************ EXCEPTION: St13runtime_error CDB() : cant open database file wallet.dat, error -30974 bitcoin in Runaway exception	https://api.github.com/repos/bitcoin/bitcoin/issues/2701	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2701/comments	2013-05-27T19:48:47Z	None
2694	open	luke-jr	Pulled this off the wikis hardfork wishlist (since it doesnt require any forking): * Allow insertion of "permanent forwarding directive" transaction, so that a well-known public address with a (suspected or soon-to-be) compromised private key can be replaced for all signing/paying purposes with a new address. (This directive might only be insertable if approved by N-of-M prior declared guardian keys. The directive might involve a one-time fee, after which the old address is null and the new address replaces it in perpetuity, or might include a declared service fee that can be deducted to miners on each future use of the new-key to draw on dead-key outputs.)	https://api.github.com/repos/bitcoin/bitcoin/issues/2694	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2694/comments	2013-05-25T05:28:03Z	None
2692	open	saltmaster	Having recently suffered a fairly minor loss due to wallet corruption, and being a *little* lax with backups (hence the only minor loss), I was wondering if anyone would be inspired to build a simple backup system into the QT client, i.e. whenever a spend transaction is made and a new change address is generated, a copy of the wallet.dat is made named for example wallet.dat.backup, and a copy of any pre-existing wallet.dat.backup is renamed as wallet.dat.old deleting any previous wallet.dat.old file. I know some people may see this as your fault, you should back up properly, but in the real world how many people do this every single time a new keypair is made?	https://api.github.com/repos/bitcoin/bitcoin/issues/2692	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2692/comments	2013-05-24T09:39:31Z	None
2691	open	schildbach	Several times now I realized that bitcoin-qt is missing its menu sometimes. This is on Ubuntu 13.04, but Ive also seen it on 12.10 and perhaps earlier. Its with bitcoin-qt 0.8.2rc2 (compiled myself), but Ive also seen it with 0.8.1 and earlier. If this happens, the rest of the client appears to work without problems.	https://api.github.com/repos/bitcoin/bitcoin/issues/2691	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2691/comments	2013-05-24T09:12:08Z	None
2689	open	gruez	For Windows builds, only the setup executable is signed. On Windows, its customary for publishers to sign both the setup and binaries. I understand signing the executable doesnt increase tamper resistance during download. However, signing the run-time executable provides the following advantages: * any UAC dialog box will show Bitcoin Foundation as the publisher * it allows users who dont use the setup executable to verify the programs authenticity * the executable can later be verified for any tampering (especially when running across USB drives)	https://api.github.com/repos/bitcoin/bitcoin/issues/2689	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2689/comments	2013-05-23T21:41:59Z	None
2673	open	LaserMissle	Using -minrelaytxfee or minrelaytxfee in bitcoin.conf results in: Error: Invalid amount for -minrelaytxfee=<amount>: 0	https://api.github.com/repos/bitcoin/bitcoin/issues/2673	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2673/comments	2013-05-19T22:32:41Z	None
2667	open	themighty1	just use lockunspent with "txid":123 to reproduce	https://api.github.com/repos/bitcoin/bitcoin/issues/2667	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2667/comments	2013-05-18T12:36:14Z	None
2664	open	kerzane	Initialising bitcoind on osx. Starts to load blockchain and crashes after 3573 blocks. error message: Assertion failed: (internal_key.size() >= 8), function ExtractUserKey, file ./db/dbformat.h, line 96. same message as in no message in debug.log	https://api.github.com/repos/bitcoin/bitcoin/issues/2664	17	https://api.github.com/repos/bitcoin/bitcoin/issues/2664/comments	2013-05-17T19:59:44Z	None
2656	open	Dreamsorcerer	Using the bitcoin-qt client on a laptop requires resyncing to the network everytime it is opened. A solution to this is to allow the client to use a remote server. This would allow the use of the bitcoin-qt client on an irregular basis without needing to resync everytime. This would also allow the use of multiple clients, a client on the laptop and another on the phone, with them all connected to the same backend.	https://api.github.com/repos/bitcoin/bitcoin/issues/2656	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2656/comments	2013-05-16T14:10:29Z	None
2653	open	alanast	I have just finished the most frightening and stressful meetings in my life. To avoid boring you with a long story of tears this is it in short: Some nasty person-- **NOT ME**-- used bitcoin to pay for some very nasty business. My home was **INCORRECTLY** displayed as the source of these transactions on blockchain. Because of this law enforcement believe I was guilty and took me and my computers. In result I have been violated in body and mind. It was very hard to say them that the data stored in the blockchain was not valid. This is doing to all the discussion about how reliable and tamper proof it is. I was believed only after finding my computer free of any indication. If my computer is for my interest it would not permit connection to blockchain!!!! Connecting to this treacherous thing does me no benefit! I know others can connect and false claim my address but they should be stopped too and can be when they make those words public. The problem is making of it public because then ignorant people will see and accuse! If you fear shutting down the service you should not because it is bad and causes great harm to people. But if you must protect it then make the blocking only active if the software has made transactions then blockchain can stay connected but only via wallets with no transactions which can easily be seen to have no indication.	https://api.github.com/repos/bitcoin/bitcoin/issues/2653	11	https://api.github.com/repos/bitcoin/bitcoin/issues/2653/comments	2013-05-13T17:14:32Z	None
2646	open	subSTRATA	First run: 1. Old files removed and new archive extracted to Bitcoin install directory. 2. Bitcoin-Qt started and synced to network, then it stucked for a while showing progress meter and acting like some blocks are missing. 3. After a while it returned to normal state, with green check mark showing sync is complete. Debug log reveals not everything is right - an example of errors encountered, there might be more so check log file linked bellow: 2013-05-12 14:32:42 received block 00000000000000a1acafe3cb63099b5cc8b5d81a0bbbf6191f5978ea05c4372c 2013-05-12 14:32:42 Committing 30380 changed transactions to coin database... 2013-05-12 14:32:42 EXCEPTION: St9bad_alloc std::bad_alloc C:\Program Files\Bitcoin\bitcoin-qt.exe in ProcessMessages() 2013-05-12 14:32:42 ProcessMessage(block, 442684 bytes) FAILED ----- 2013-05-12 14:36:03 ERROR: Non-canonical signature: S value excessively padded 2013-05-12 14:36:03 ERROR: CScriptCheck() : c33bbdb11c757e9dc38063367cb460cf47d8934f8d9600c061d989b47ef2aa18 VerifySignature failed 2013-05-12 14:36:03 ERROR: CTxMemPool::accept() : ConnectInputs failed c33bbdb11c757e9dc38063367cb460cf47d8934f8d9600c061d989b47ef2aa18 2013-05-12 14:36:03 Misbehaving: 194.213.5.15:8333 (0 -> 0) ----- 2013-05-12 14:30:03 ERROR: Non-canonical signature: R value excessively padded 2013-05-12 14:30:03 ERROR: CScriptCheck() : e390b43b53d5aa15a6c76020b019eec470567a607d8de08153cd8882067d7a77 VerifySignature failed 2013-05-12 14:30:03 ERROR: CTxMemPool::accept() : ConnectInputs failed e390b43b53d5aa15a6c76020b019eec470567a607d8de08153cd8882067d7a77 2013-05-12 14:30:03 Misbehaving: 77.249.178.204:8333 (10 -> 10) ----- 2013-05-12 14:31:10 ERROR: Non-canonical signature: S value negative 2013-05-12 14:31:10 ERROR: CScriptCheck() : 1958ae3b25018b63683652f9875d1655990b5e99d22753503a00d67d56a019af VerifySignature failed 2013-05-12 14:31:10 ERROR: CTxMemPool::accept() : ConnectInputs failed 1958ae3b25018b63683652f9875d1655990b5e99d22753503a00d67d56a019af 2013-05-12 14:31:10 Misbehaving: 72.48.65.87:8333 (0 -> 0) ----- 2013-05-12 14:33:05 ERROR: Non-canonical signature: R value negative 2013-05-12 14:33:05 ERROR: CScriptCheck() : 6618eea519e01f392c48d004d81ddaea799f36ea25a6b36ed818ef021d16884c VerifySignature failed 2013-05-12 14:33:05 ERROR: CTxMemPool::accept() : ConnectInputs failed 6618eea519e01f392c48d004d81ddaea799f36ea25a6b36ed818ef021d16884c 2013-05-12 14:33:05 Misbehaving: 109.190.65.235:8333 (0 -> 0) Client seemed to be totally ignoring new blocks added to blockchain. I have compared block height with blockchain.info and saw that my client is 7 blocks behind but still showing green check mark. Upon exit, it crashed with error as shown on the linked image: Full debug log for first run: ////////////////////////////////////////////////////////////////////////////////////////////////////////////////// Second run: 1. Bitcoin-Qt started and synced properly, it updated to block height 235,845 2. Everything looked normal until I checked log file. One node was spamming my client with ton of orphan stuff, address adds and spent inputs without ever getting even banscore 10. I find that hillarious. Here is snapshot of spamming, for more check debug log linked bellow: 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) 2013-05-12 14:56:08 ERROR: CTxMemPool::accept() : inputs already spent 2013-05-12 14:56:08 Misbehaving: 85.17.239.32:8333 (0 -> 0) ----- 2013-05-12 15:01:13 Added 1 addresses from 85.17.239.32: 350 tried, 14092 new 2013-05-12 15:01:14 Added 1 addresses from 85.17.239.32: 350 tried, 14092 new 2013-05-12 15:01:15 Added 1 addresses from 85.17.239.32: 350 tried, 14092 new 2013-05-12 15:01:15 Added 1 addresses from 85.17.239.32: 350 tried, 14092 new Bitcoin-Qt again refused to sync with newer block which was shown on blockchain.info but it exited without any error. (note BTC Guild self-owning, sort of :o))) Full debug log for second run: Reverting to 0.8.1 for now. Let me know if you want me to test something specific. P.S. Crashes on my machine are exclussive to Bitcoin. Beside it, I have Litecoin, Terracoin, Freicon, Feathercoin, BitBar, Small Change, YACoin, Bytecoin and PPCoin clients and none of them ever crashed. Machine has 2GB RAM and 8GB fixed swap file. Bitcoin-Qt reverted back to 0.8.1 and started, it was in "attempting to sync" mode for few minutes and then it crashed with error as shown on screenshot bellow. Im occassionaly seeing the same or similar errors for 6+ months now, just with Bitcoin-Qt, and so far none of MS Visual C++ runtime libraries available online fixed the issue. Full debug log, some weird errors inside: On subsequent run Bitcoin-Qt 0.8.1 synced properly and so far everything seems normal except occassional spamming by few nodes. Syncing with newer blocks works perfectly. Ill update this post if something unexpected happens.	https://api.github.com/repos/bitcoin/bitcoin/issues/2646	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2646/comments	2013-05-12T15:35:22Z	None
2639	open	Sjors	Perpaps Im using the wrong syntax for `signrawtransaction`, but otherwise I might have found a bug. For example this unsigned transaction gets decoded successfully (remove the line-breaks): ```bash curl --user USERNAME --data-binary {"id":"t0", "method": "decoderawtransaction", "params": ["0100000002d354be7cd5426bfbe70517b934b8764d17ad7f93e2b8db868211851d4404740f010000001976a91423376070c7b24da64b435c71613053800494ab1c88acffffffffe49a65da5abe3edd6e5157327fe794a7c75befecaaf18fefd3154dbb4527d6d6010000001976a91423376070c7b24da64b435c71613053800494ab1c88acffffffff0240420f00000000001976a914c8a73488183dd49f63a11dea0a3b242ae70942d288ac10ae2201000000001976a91423376070c7b24da64b435c71613053800494ab1c88ac0000000001000000"] } ``` But when I try to sign it, it throws an exception: ```bash curl --user USERNAME --data-binary {"id":"t0", "method": "signrawtransaction", "params": [ "0100000002d354be7cd5426bfbe70517b934b8764d17ad7f93e2b8db868211851d4404740f010000001976a91423376070c7b24da64b435c71613053800494ab1c88acffffffffe49a65da5abe3edd6e5157327fe794a7c75befecaaf18fefd3154dbb4527d6d6010000001976a91423376070c7b24da64b435c71613053800494ab1c88acffffffff0240420f00000000001976a914c8a73488183dd49f63a11dea0a3b242ae70942d288ac10ae2201000000001976a91423376070c7b24da64b435c71613053800494ab1c88ac0000000001000000", [], [] ] } {"result":null,"error":{"code":-22,"message":"TX decode failed"},"id":"t0"} ``` Now there might be something wrong with my transaction, but I would except `signrawtransaction` to at least throw a different error than `decoderawtransaction` if the latter successfully decodes it. Looking at the source code, the decode method does this and throws the "TX decode failed" message if it doesnt work: ```cpp CTransaction tx; try { ssData >> tx; } catch (std::exception &e) { throw JSONRPCError(RPC_DESERIALIZATION_ERROR, "TX decode failed"); ``` The decode method is similar but performs one extra step. My guess is that that is where the error occurs in my case, but I havent tested this. ```cpp vector<CTransaction> txVariants; while (!ssData.empty()) { try { CTransaction tx; ssData >> tx; txVariants.push_back(tx); ```	https://api.github.com/repos/bitcoin/bitcoin/issues/2639	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2639/comments	2013-05-11T11:30:57Z	None
2631	open	kartcl14	Hi, this is my first time running bitcoin, and it ran smoothly for a good hour or two but then it crashed. It then came up with this error and said System Error: Database Corrupted. ![assertion failed](https://f.cloud.github.com/assets/4378391/478190/2ae2238a-b7f4-11e2-9fdd-448bf81106f9.png) Can anyone help? Thanks in advanced	https://api.github.com/repos/bitcoin/bitcoin/issues/2631	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2631/comments	2013-05-08T15:31:47Z	None
2626	open	drak	I think it would be good the the ecosystem if at least the GUI client had client version update checker to notify users when a new version is released. Doesnt have to be a full on auto-update, just an update checker and notify user new version is available. Suggestion is to use the RAW feature of github to host the latest version at github.com/bitcoin.org, something this: which makes use of both SSL and git versioning (which makes it not only difficult to change, but tamper evident).	https://api.github.com/repos/bitcoin/bitcoin/issues/2626	13	https://api.github.com/repos/bitcoin/bitcoin/issues/2626/comments	2013-05-07T15:24:25Z	None
2612	open	Diapolo	- add new options for database cache and script verification threads - add new options for setting separate IPv6 and Tor proxy and show for which networks the base proxy is used currently - add label which displays options that are overridden by command-line parameters - proxy settings are not applied on-the-fly anymore and require a client restart (ApplyProxySettings() was removed and was not working very well anyway) - re-work options reset and require a client shutdown (as it is much easier to do it this way without having to mess with what can be changed on-the-fly and what needs a restart anyway) - options reset now writes default values for every single option - when changing an option which requires a client restart display a 10 second warning message in statusLabel (via a QTimer) - when applying the changes via ok change that to a persistent message, which is displayed even after closing optionsdialog and re-open it, when no client restart was made - remove dialog boxes used when changing language or proxy settings - add setRestartRequired() and isRestartRequired() to OptionsModel and use the set function when updating options to signal OptionsDialog when a restart is needed - resize optionsdialog a little and add some min sizes for certain GUI elements - remove apply button from optionsdialog - save and restore optionsdialog window position - update nTransactionFee in QSettings with a set -paytxfee value when opening optionsdialog (Im not sure about this yet, perhaps revert to not updating QSettings and just display current -paytxfee value in optionsdialog.)	https://api.github.com/repos/bitcoin/bitcoin/issues/2612	33	https://api.github.com/repos/bitcoin/bitcoin/issues/2612/comments	2013-05-03T10:56:50Z	None
2593	open	richardassar	On current master branch. Steps to recreate: 1) run `bitcoind -daemon -debug` 2) create the bitcoin.config file as requested OR 1) copy a bitcoin.conf into ~/.bitcoin ... 3) start bitcoind with above parameters 4) issue an RPC `stop` command Result is: `error: couldnt connect to server` Server killed, no mention of RPC upon inspecting the logs Ive checked down to 33029bcedd982f80f7e380bff586f3ab644decce with no luck. Interestingly this is *not* happening with `-testnet` A checkout of current master will reproduce the bug but can post logs if necessary.	https://api.github.com/repos/bitcoin/bitcoin/issues/2593	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2593/comments	2013-04-30T01:14:25Z	None
2575	open	Diapolo	- rework the proxy handling in init to cover more cases and work more thoroughly - add -proxy6 to allow setting a separate SOCKS5 proxy to reach peers via IPv6 - add a hard-block for -tor to be able to remove compatibility code - rework proxy data-structures to allow recognition of the default proxy (-proxy) to give users the ability to see, which proxy (IPv6 / Tor) is derived from the default proxy and which was explicitly set - remove proxy info from RPC getinfo call - add new getproxyinfo RPC call Most proxy-setup is now done using the new ``ProxyInit()`` function. ``ProxyInit(Network net, const std::string& strArg, int nSocksVersion, bool fIsDefault)`` parameter description: ``net`` = network to setup proxy for (NET_IPV4, NET_IPV6 or NET_TOR) ``strArg`` = command-line argument to get values from (-proxy, -proxy6 or -onion) ``nSocksVersion`` = SOCKS version of the proxy ``fIsDefault`` = is that proxy the default proxy (true) or a separate proxy (false)? ``ProxyInit(Network net, const std::string& strArg, int nSocksVersion, bool fIsDefault)`` does the following: -pre-check, if ``net`` is not limited and -no{proxy/proxy6/tor} was NOT specified --pre-check passed: try to ``SetProxy()`` and return ``false`` on error ---pre-check passed: only for ``net == NET_TOR`` call ``SetReachable();`` ---pre-check passed: return ``true`` --pre-check failed: for default proxy (``fIsDefault == true``) a failed pre-check is okay, return ``true``, otherwise ``false`` default proxy = ``-proxy`` separate IPv6 proxy = ``-proxy6`` separate Tor proxy = ``-onion`` Proxy initialisation flow (happens via ``ProxyInit()``, just the name proxy is special cased in the code): -try to setup default IPv4 proxy --if SOCKS4: ---try to setup separate Tor proxy, on failure disable Tor via ``SetLimited()`` (SOCKS4 = no Tor support) ---try to setup separate IPv6 proxy, on failure disable IPv6 via ``SetLimited()`` (SOCKS4 = no IPv6 support) --if SOCKS5 ---try to setup separate Tor proxy, on failure try to setup Tor proxy via default proxy ---try to setup separate IPv6 proxy, on failure try to setup IPv6 proxy via default proxy ---try to setup default SOCKS5 name proxy Errors initialising default proxy or Tor/IPv6 proxies via default proxy lead to exit!	https://api.github.com/repos/bitcoin/bitcoin/issues/2575	19	https://api.github.com/repos/bitcoin/bitcoin/issues/2575/comments	2013-04-26T08:45:01Z	None
2560	open	APerson241	It would be nice if an estimate of the time remaining for some task were displayed in the bottom status bar along with the progress bar in some way, like a brief popup when the user hovers over or clicks the progress bar.	https://api.github.com/repos/bitcoin/bitcoin/issues/2560	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2560/comments	2013-04-24T01:58:50Z	None
2551	open	laanwj	Once in a while there is someone with a unexplained crash in bitcoin-qt/bitcoind. This seems to happen especially on MacOSX and Windows. Most we can do right now is ask for the debug.log, but most of the time it doesnt help a lot. The OS-specific crashlogs that people send contain raw addresses, or at most function+offset. Id like to improve the diagnosis ability. We cant just ask people "to run it in gdb" anymore. Id like to get as much as possible information without having to ask the user to do anything. Things Ive considered 1) I dont think proposing something such as Google Breakpad would fly here, due to the obvious private key leak risk. It would in principle be possible to build something that just uploads a stack trace and debug.log and not any private key data. That would be very useful instead of asking for people to paste/upload the debug.log and stacktraces. 2) Including the debug information would increase the executable size enormously. However it would be possible to change the Gitian build (and Mac build) to store the debug information before stripping it off; this would allow us to at least resolve stack traces and such with main.o+0x2398 to a a line number at our side.	https://api.github.com/repos/bitcoin/bitcoin/issues/2551	8	https://api.github.com/repos/bitcoin/bitcoin/issues/2551/comments	2013-04-23T06:45:32Z	None
2549	open	CoDCoyote	Add display counters for Accepted, Orphaned, duplicate, error Blocks received. /per session. The [~#### blocks remaining ] status bar could have a ~###mb for estimated megabytes to download...	https://api.github.com/repos/bitcoin/bitcoin/issues/2549	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2549/comments	2013-04-22T13:30:04Z	None
2547	open	cpunks	Bitcoin version 0.8.1-beta Qt version 4.8.3 Screenshot: Background: I have used this Bitcoin client for a while. The configuration was initialized under Windows XP, and later on transferred to a Windows 7 machine. It has worked for several months swithout any notable problems -- with the only exception of it sometimes not including a "mined" transaction into my free balance immediately as it matures (instead it needs to be restarted). Today, about 4 hours after receiving a "mined" transaction, it then crashed telling: > Assertion failed! > File: src/main.cpp > Line: 1127 > Expression: pindexFirst After restarting, it appears to have recovered fully.	https://api.github.com/repos/bitcoin/bitcoin/issues/2547	19	https://api.github.com/repos/bitcoin/bitcoin/issues/2547/comments	2013-04-22T12:23:18Z	None
2545	open	jonasschnelli	Im not sure if its a good idea, but lets see what others think: Could we not store the wallet.dat content in the MacOSX keychain? The keychain then would provide a basic security (secured with the login credentials). Of course we could keep the wallet encryption function (encrypted wallet in encrypted keychain data). In my eye it would provide basic security for normal users. As you noticed, im focusing on mac improvements. Windows 8 should also have a encrypted registry like keychain. What do you think about this? Already discussed? I could provide the MaxOSX implementation. It just could be a keychain string store with a base64 string of wallet.dat. Length is limited to NSString length what then would be 2^32 - 1 (4.2 billion chars). </jonas>	https://api.github.com/repos/bitcoin/bitcoin/issues/2545	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2545/comments	2013-04-22T07:47:47Z	None
2544	open	gurcani	source : using: 0.8.1 (same in 0.7.1) wallet.dat: old wallet created in 0.3.22 never explicitly upgraded. bitcoind accepts to use this wallet without warning, which is what I expect. but then, getaddressesbyaccount "", lists bunch of addresses some of which I have the private keys, BUT SOME OF WHICH I DONT (in fact it lists addresses to which I sent btcs from this wallet in the past). I sent 10 btcs from vircurex to an old bitcointorrentz address which was somehow listed as my own address in my wallet, because of this. I suggest that getaddressesbyaccount actually verify that the wallet contains the private key before listing the address. I cant imagine the other behaviour being desirable. I hope this is useful. unfortunately I cant provide my wallet (and cant produce an empty wallet corrupted the same way), but Ill be happy to verify something if you need me to. just respond to my forum post above or pm me.	https://api.github.com/repos/bitcoin/bitcoin/issues/2544	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2544/comments	2013-04-21T11:07:58Z	None
2542	open	CoDCoyote	After not using the application for a few months I had a backlog of blocks to catch up on and I found that there was a .7 to .8 version update. After updating, my balance went to 0 as it now had about 10+ months of blocks to catch up on and then after a power failure, it was in reindexing blocks mode. It was struggling to catch up, gaining only a few days of blocks for each day of use. I could see in the debug.log that it had up to 7 or 8 already have block errors for each ACCEPTED block. I left it running, reindexing and catching up, and found it had used up most of my 10gb/month ISP limit. (took about 6 hours to reindex) Until I found a suggestion on a forum to set maxconnections=1 now it only has 176 days of blocks to get and it gaining weeks worth of blocks each day of use... This issue is to suggest that the program to not connect while reindexing and limit connections while catching up on blocks more than x weeks ago. To prevent multiple duplicate block transmissions and perhaps a backup of a good index file?	https://api.github.com/repos/bitcoin/bitcoin/issues/2542	8	https://api.github.com/repos/bitcoin/bitcoin/issues/2542/comments	2013-04-20T14:43:48Z	None
2523	open	jmdugan	dumpprivkey gives an incorrect error message when wallet is locked: currently is says: error: {"code":-4,"message":"Private key for address 1someknownaddress... is not known"} even when the private key for that address is known. better: "Wallet is locked, unable examine 1someknownaddress... "	https://api.github.com/repos/bitcoin/bitcoin/issues/2523	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2523/comments	2013-04-14T05:23:43Z	None
2512	open	Michagogo	At the moment, if you want to rebroadcast a transaction, say, to a new node, you need to getrawtransaction, take the output of that, and use it with sendrawtransaction after restarting the client. If you try this without the restart, youll get this: "TX rejected (code -22)" If a transaction is already in the clients memory, it should return a more specific error message, the way "transaction already in block chain (code -5)" is returned for one of those transactions. In addition, there should be a way to force a rebroadcast, whether thats simply making a would-be rebroadcast go through rather than rejecting, or adding a command that will push it through anyway.	https://api.github.com/repos/bitcoin/bitcoin/issues/2512	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2512/comments	2013-04-11T18:54:54Z	None
2511	open	007pig	I have a wallet with many transactions. Its around 200M. and each wallet flushing takes 4 seconds and blocks JSON RPC calls. I think it should be improved.	https://api.github.com/repos/bitcoin/bitcoin/issues/2511	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2511/comments	2013-04-11T18:05:44Z	None
2507	open	jonasschnelli		https://api.github.com/repos/bitcoin/bitcoin/issues/2507	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2507/comments	2013-04-11T08:55:02Z	None
2484	open	dennis97519	After clicking "Overview", the mouse pointer will teleport automatically to the position of "send" button in send coins tab. There is nothing in main tab at that position. Not really a bug, but a bit frustrating when somebody turned on "auto focus to default button" in mouse settings in windows 7. Also is it possible to move the default position of mouse pointer to "Choose address to address book" or "Paste from clipboard" button in the "Send coins" tab? Bitcoin-Qt 0.8.1 beta. Windows 7 Ultimate 64 bit	https://api.github.com/repos/bitcoin/bitcoin/issues/2484	11	https://api.github.com/repos/bitcoin/bitcoin/issues/2484/comments	2013-04-07T15:26:46Z	None
2476	open	rofl0r	on theres no source code tarball which i need to get reproducible results on my build-it-yourself distro (package management system is laid out for source tarballs with checksums, not git checkouts) apparently the linux download has the source included, but also comes with prebuilt binaries (unusable in my case, since i use a different libc). this bloats up the tarball to twice the needed size or more, which affects download time and hd usage. the argument that 18 MB is nothing compared to 7G of blockdata, is not valid for people who just fetch all tarballs in one go (so they have them already in case they need it), but in the end do not use the bitcoin client. the other argument that github provides downloads is also <b>not valid</b>, since 1) they generate tarballs on the fly so the checksum changes whenever it is removed from cache (gz uses a random seed, so every archive produced is unique, even with the same content) 2) github redirects from to making it impossible to download anything with busybox wget program. they did not even reply to my complaints about that. 3) github has no redundancy, when the frontend server(s) is down, everything is down 4) SF.net (which is already used for binary downloads) has at least 20 mirrors in different countries, and provides much better download speeds. additionally it lets the user choose if he wants HTTP or HTTPS downloads. so please in the future release a separate source code tarball and make it available from the default download page. thanks. please also consider using the .xz compressor since its about 40-60% better in compression and only slightly slower in decompression speed than .gz (but 3-4x as fast as bz2) and available on any linux distribution that came out in the last 5 years. even busybox supports it by default.	https://api.github.com/repos/bitcoin/bitcoin/issues/2476	75	https://api.github.com/repos/bitcoin/bitcoin/issues/2476/comments	2013-04-06T18:32:27Z	None
2472	open	shakaran	I can get init my bitcoin-qt in Ubuntu 13.04. It always fails with System error: database corrupted I try to debug with gdb, and here is the backtrace if it helps: $ gdb bitcoin-qt GNU gdb (GDB) 7.5-ubuntu Copyright (C) 2012 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type "show copying" and "show warranty" for details. This GDB was configured as "i686-linux-gnu". For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>... Reading symbols from /usr/bin/bitcoin-qt...(no debugging symbols found)...done. (gdb) run Starting program: /usr/bin/bitcoin-qt [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib/i386-linux-gnu/libthread_db.so.1". [New Thread 0xb38d9b40 (LWP 7066)] [New Thread 0xb2b3db40 (LWP 7068)] [New Thread 0xb21ffb40 (LWP 7069)] [New Thread 0xb19feb40 (LWP 7070)] [New Thread 0xb0dffb40 (LWP 7071)] [New Thread 0xb05feb40 (LWP 7072)] [New Thread 0xafbfdb40 (LWP 7073)] [New Thread 0xaf3fcb40 (LWP 7074)] [New Thread 0xae9ffb40 (LWP 7075)] [New Thread 0xad615b40 (LWP 7076)] [New Thread 0xace14b40 (LWP 7087)] [New Thread 0xa4d1eb40 (LWP 7090)] [Thread 0xa4d1eb40 (LWP 7090) exited] [New Thread 0xa4d1eb40 (LWP 7091)] [New Thread 0xa43ffb40 (LWP 7092)] [New Thread 0xa39feb40 (LWP 7093)] [New Thread 0xa2ffdb40 (LWP 7094)] [New Thread 0xa27fcb40 (LWP 7095)] [Thread 0xa27fcb40 (LWP 7095) exited] [New Thread 0xa1dffb40 (LWP 7096)] [New Thread 0xa27fcb40 (LWP 7097)] [New Thread 0xa15feb40 (LWP 7098)] [New Thread 0xa0dfdb40 (LWP 7099)] [New Thread 0xa05fcb40 (LWP 7100)] [Thread 0xa4d1eb40 (LWP 7091) exited] [Thread 0xb2b3db40 (LWP 7068) exited] [Thread 0xafbfdb40 (LWP 7073) exited] [Thread 0xb0dffb40 (LWP 7071) exited] [Thread 0xaf3fcb40 (LWP 7074) exited] bitcoin-qt: /usr/include/boost/thread/pthread/recursive_mutex.hpp:101: void boost::recursive_mutex::lock(): Assertion `!pthread_mutex_lock(&m) failed. bitcoin-qt: /usr/include/boost/thread/pthread/recursive_mutex.hpp:101: void boost::recursive_mutex::lock(): Assertion `!pthread_mutex_lock(&m) failed. bitcoin-qt: /usr/include/boost/smart_ptr/shared_ptr.hpp:418: boost::shared_ptr<T>::reference boost::shared_ptr<T>::operator*() const [with T = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot0<void, boost::function<void()> >, boost::signals2::mutex> > >; boost::shared_ptr<T>::reference = boost::signals2::detail::grouped_list<int, std::less<int>, boost::shared_ptr<boost::signals2::detail::connection_body<std::pair<boost::signals2::detail::slot_meta_group, boost::optional<int> >, boost::signals2::slot0<void, boost::function<void()> >, boost::signals2::mutex> > >&]: Assertion `px != 0 failed. [Thread 0xae9ffb40 (LWP 7075) exited] [Thread 0xb21ffb40 (LWP 7069) exited] [Thread 0xb19feb40 (LWP 7070) exited] Program received signal SIGABRT, Aborted. [Switching to Thread 0xa1dffb40 (LWP 7096)] 0xb7fdd424 in __kernel_vsyscall () (gdb) thread apply all bt full Thread 23 (Thread 0xa05fcb40 (LWP 7100)): #0 0xb7d866b0 in OPENSSL_cleanse () from /lib/i386-linux-gnu/libcrypto.so.1.0.0 No symbol table info available. #1 0x0814c60b in ?? () No symbol table info available. #2 0x081360c4 in ?? () No symbol table info available. #3 0x0813e2ea in ?? () No symbol table info available. #4 0x0813e50c in ?? () No symbol table info available. #5 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xa4401770) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xa4401770, pn = {pi_ = 0xa4401880}} #6 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #7 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 22 (Thread 0xa0dfdb40 (LWP 7099)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb6aa6646 in munmap () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #2 0xb69e1866 in ?? () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #3 0xb69e1927 in __assert_fail () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #4 0x0811b30e in ?? () No symbol table info available. #5 0x0812ab44 in ?? () No symbol table info available. #6 0x08135f9d in ?? () No symbol table info available. #7 0x08136003 in ?? () No symbol table info available. #8 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xa4401590) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xa4401590, pn = {pi_ = 0xa44016a0}} #9 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #10 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 21 (Thread 0xa15feb40 (LWP 7098)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb7af9c33 in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #2 0xb7b1c62f in boost::condition_variable::timed_wait (this=this@entry=0xa4401440, m=..., wait_until=...) at ./boost/thread/pthread/condition_variable.hpp:74 check_for_interruption = {thread_info = 0xa44013b0, m = 0xa4401440, set = true} timeout = {tv_sec = 1365255272, tv_nsec = 872659000} guard = {m = 0xa15fdffc} cond_res = <optimized out> #3 0xb7b181d8 in boost::this_thread::sleep (st=...) at libs/thread/src/pthread/thread.cpp:331 ---Type <return> to continue, or q <return> to quit--- lk = {m = 0xa4401428, is_locked = false} thread_info = 0xa44013b0 #4 0x0813c930 in ?? () No symbol table info available. #5 0x0813d5f3 in ?? () No symbol table info available. #6 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xa44013b0) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xa44013b0, pn = {pi_ = 0xa44014c0}} #7 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #8 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 20 (Thread 0xa27fcb40 (LWP 7097)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb7af9c33 in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #2 0xb7b1c62f in boost::condition_variable::timed_wait (this=this@entry=0xa4401098, m=..., wait_until=...) at ./boost/thread/pthread/condition_variable.hpp:74 check_for_interruption = {thread_info = 0xa4401008, m = 0xa4401098, set = true} timeout = {tv_sec = 1365255392, tv_nsec = 356320000} guard = {m = 0xa27fc10c} cond_res = <optimized out> #3 0xb7b181d8 in boost::this_thread::sleep (st=...) at libs/thread/src/pthread/thread.cpp:331 lk = {m = 0xa4401080, is_locked = false} thread_info = 0xa4401008 #4 0x0812f5d1 in ?? () No symbol table info available. #5 0x08137da4 in ?? () No symbol table info available. #6 0x08137fe3 in ?? () No symbol table info available. #7 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xa4401008) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xa4401008, pn = {pi_ = 0xa44004e8}} #8 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #9 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 19 (Thread 0xa1dffb40 (LWP 7096)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb69e8b1f in raise () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #2 0xb69ec0b3 in abort () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #3 0xb69e1877 in ?? () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #4 0xb69e1927 in __assert_fail () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #5 0x0813b20e in ?? () No symbol table info available. #6 0x0813bc63 in ?? () No symbol table info available. ---Type <return> to continue, or q <return> to quit--- #7 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xa44011d0) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xa44011d0, pn = {pi_ = 0xa44012e0}} #8 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #9 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 17 (Thread 0xa2ffdb40 (LWP 7094)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb6a9bdcb in poll () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #2 0xb7faac21 in receivedata () from /usr/lib/libminiupnpc.so.8 No symbol table info available. #3 0xb7fa6db2 in upnpDiscover () from /usr/lib/libminiupnpc.so.8 No symbol table info available. #4 0x0813d70c in ?? () No symbol table info available. #5 0x0813e143 in ?? () No symbol table info available. #6 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xa4400e40) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xa4400e40, pn = {pi_ = 0xa44004d0}} #7 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #8 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 16 (Thread 0xa39feb40 (LWP 7093)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb69e8b1f in raise () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #2 0xb69ec0b3 in abort () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #3 0xb69e1877 in ?? () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #4 0xb69e1927 in __assert_fail () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #5 0x081391c4 in ?? () No symbol table info available. #6 0x08139313 in ?? () No symbol table info available. #7 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xa4400c78) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xa4400c78, pn = {pi_ = 0xa44004b8}} #8 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #9 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 15 (Thread 0xa43ffb40 (LWP 7092)): #0 0x0806b4e0 in ?? () No symbol table info available. #1 0x080be337 in ?? () No symbol table info available. ---Type <return> to continue, or q <return> to quit--- #2 0x080be458 in ?? () No symbol table info available. #3 0xa43ff1da in ?? () No symbol table info available. #4 0x00000000 in ?? () No symbol table info available. Thread 12 (Thread 0xace14b40 (LWP 7087)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb7af9c33 in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #2 0xb7b1c62f in boost::condition_variable::timed_wait (this=this@entry=0xfe691f0, m=..., wait_until=...) at ./boost/thread/pthread/condition_variable.hpp:74 check_for_interruption = {thread_info = 0xfe69160, m = 0xfe691f0, set = true} timeout = {tv_sec = 1365255272, tv_nsec = 660778000} guard = {m = 0xace141ec} cond_res = <optimized out> #3 0xb7b181d8 in boost::this_thread::sleep (st=...) at libs/thread/src/pthread/thread.cpp:331 lk = {m = 0xfe691d8, is_locked = false} thread_info = 0xfe69160 #4 0x081556c3 in ?? () No symbol table info available. #5 0xb7b1597c in boost::(anonymous namespace)::thread_proxy (param=0xfe69160) at libs/thread/src/pthread/thread.cpp:121 thread_info = {px = 0xfe69160, pn = {pi_ = 0xe2ea800}} #6 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #7 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 11 (Thread 0xad615b40 (LWP 7076)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb6a73bb6 in nanosleep () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #2 0xb6aa3d5d in usleep () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #3 0xb7f8c02b in ?? () from /usr/lib/i386-linux-gnu/libleveldb.so.1 No symbol table info available. #4 0xb7f6c911 in leveldb::DBImpl::BackgroundCall() () from /usr/lib/i386-linux-gnu/libleveldb.so.1 No symbol table info available. #5 0xb7f6c99b in leveldb::DBImpl::BGWork(void*) () from /usr/lib/i386-linux-gnu/libleveldb.so.1 No symbol table info available. #6 0xb7f8c172 in ?? () from /usr/lib/i386-linux-gnu/libleveldb.so.1 No symbol table info available. #7 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #8 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 7 (Thread 0xb05feb40 (LWP 7072)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb6aa6646 in munmap () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. ---Type <return> to continue, or q <return> to quit--- #2 0xb7af4e95 in __free_stacks () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #3 0xb7af4f85 in __deallocate_stack () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #4 0xb7af5e9b in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #5 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 2 (Thread 0xb38d9b40 (LWP 7066)): #0 0xb7fdd424 in __kernel_vsyscall () No symbol table info available. #1 0xb6a9bdcb in poll () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #2 0xb680e2db in poll (__timeout=-1, __nfds=3, __fds=0xb2f023b0) at /usr/include/i386-linux-gnu/bits/poll2.h:46 No locals. #3 g_poll (fds=0xb2f023b0, nfds=3, timeout=-1) at /build/buildd/glib2.0-2.36.0/./glib/gpoll.c:132 No locals. #4 0xb67ff6d0 in g_main_context_poll (n_fds=3, fds=0xb2f023b0, timeout=<optimized out>, context=0x8678780, priority=<optimized out>) at /build/buildd/glib2.0-2.36.0/./glib/gmain.c:3995 poll_func = <optimized out> #5 g_main_context_iterate (context=0x8678780, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at /build/buildd/glib2.0-2.36.0/./glib/gmain.c:3696 max_priority = 2147483647 timeout = -1 some_ready = <optimized out> allocated_nfds = <optimized out> fds = 0xb2f023b0 nfds = 3 #6 0xb67ffc2b in g_main_loop_run (loop=0x8678748) at /build/buildd/glib2.0-2.36.0/./glib/gmain.c:3895 __PRETTY_FUNCTION__ = "g_main_loop_run" #7 0xb4a86bca in gdbus_shared_thread_func (user_data=0x8678768) at /build/buildd/glib2.0-2.36.0/./gio/gdbusprivate.c:278 data = 0x8678768 #8 0xb6824fc3 in g_thread_proxy (data=0x8674f20) at /build/buildd/glib2.0-2.36.0/./glib/gthread.c:798 thread = 0x8674f20 #9 0xb7af5d78 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 No symbol table info available. #10 0xb6aab3de in clone () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. Thread 1 (Thread 0xb6418740 (LWP 7062)): #0 0xb6a30f1f in ?? () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #1 0xb6c16b4f in operator delete(void*) () from /usr/lib/i386-linux-gnu/libstdc++.so.6 No symbol table info available. #2 0x08102562 in ?? () No symbol table info available. #3 0x08102557 in ?? () No symbol table info available. #4 0x08102557 in ?? () No symbol table info available. #5 0x08102557 in ?? () No symbol table info available. #6 0x08102557 in ?? () No symbol table info available. #7 0x08102557 in ?? () ---Type <return> to continue, or q <return> to quit--- No symbol table info available. #8 0x08102557 in ?? () No symbol table info available. #9 0x08102557 in ?? () No symbol table info available. #10 0x08102557 in ?? () No symbol table info available. #11 0x08102557 in ?? () No symbol table info available. #12 0x08102557 in ?? () No symbol table info available. #13 0x08102557 in ?? () No symbol table info available. #14 0x08102557 in ?? () No symbol table info available. #15 0x08102557 in ?? () No symbol table info available. #16 0x08102557 in ?? () No symbol table info available. #17 0x08102557 in ?? () No symbol table info available. #18 0x08102557 in ?? () No symbol table info available. #19 0x08102557 in ?? () No symbol table info available. #20 0x081025c6 in ?? () No symbol table info available. #21 0xb69ed7c1 in ?? () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #22 0xb69ed84d in exit () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #23 0xb69d393d in __libc_start_main () from /lib/i386-linux-gnu/libc.so.6 No symbol table info available. #24 0x08073151 in ?? () No symbol table info available.	https://api.github.com/repos/bitcoin/bitcoin/issues/2472	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2472/comments	2013-04-06T13:39:56Z	None
2471	open	Diapolo	I have a not up to date testnet node, started a reindex via -reindex, go into RPC console and enter ``setgenerate true``, which leads to a crash. Assertion failed! src/main.cpp Line: 4283 (differs from current master, as I have some own stuff in) Expression: "mempool transaction missing input" == 0	https://api.github.com/repos/bitcoin/bitcoin/issues/2471	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2471/comments	2013-04-06T10:35:29Z	None
2467	open	clanie	When getaddednodeinfo is called with dns=false it returns something like this: {"result":{"addednode":"faucet.bitcoin.st","addednode":"faucet.bitxcoin.st"},"error":null,"id":null} I expected restult to be an array, and when calling with dns=true that is also what I get. Isnt it supposed to always return an array? Im trying to deserialize this in Java, and that would be much easier if it always returned an array.	https://api.github.com/repos/bitcoin/bitcoin/issues/2467	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2467/comments	2013-04-05T19:53:28Z	None
2458	open	Diapolo	I tried to supply ``-style fusion`` (Qt5 style) as first command-line parameter to bitcoin-qt.exe, which leads to the client is not further parsing command-line parameters. It seems this is causing the problem: Workaround is to just supply the ``-style fusion`` at the end, but IMHO silently ignoring stuff the parser doesnt like is not the right thing to do!?	https://api.github.com/repos/bitcoin/bitcoin/issues/2458	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2458/comments	2013-04-04T12:58:43Z	None
2445	open	rebroad	My bitcoin-qt from the latest master is still sending transactions to the network which were included a block in the blockchain almost a year ago.	https://api.github.com/repos/bitcoin/bitcoin/issues/2445	8	https://api.github.com/repos/bitcoin/bitcoin/issues/2445/comments	2013-04-02T12:36:19Z	None
2427	open	reverie	Pass a fake option to bitcoind, whether on the command line or in the bitcoin.conf file. I would expect the daemon to fail to start, or at least warn you about the option it doesnt understand. Instead, it silently ignores the option and runs normally. This makes it unnecessarily difficult to debug configuration issues. For example, an option may not be compatible with your version of bitcoind, or you may have misspelled something.	https://api.github.com/repos/bitcoin/bitcoin/issues/2427	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2427/comments	2013-03-29T17:22:45Z	None
2413	open	rstarkov	If the datadir is a junction, Bitcoin-Qt crashes on startup. NTFS junctions are transparent to applications which do not accidentally misuse some API. What I think happens is that Bitcoin-Qt uses an over-eager library call which, instead of checking whether the path exists as a directory, goes ahead and looks at whether its also a reparse point, finds out that it is, decides that its therefore not a directory, and attempts to create it.	https://api.github.com/repos/bitcoin/bitcoin/issues/2413	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2413/comments	2013-03-26T23:28:15Z	None
2412	open	jonls	Allow the network activity of the client to be toggled temporarily. When network activity is disabled the client will close all connections, stop accepting inbound connections, and stop opening new outbound connections, until the network activity is reenabled. The first commit adds this feature to the core, accessed through SetNetworkActive(). Second commit adds an RPC command "togglenetwork" to toggle on/off. Third commit adds further connections to the gui. When the network activity is disabled the status bar and the debug window will show this. In addition the commit adds a button to the debug window to toggle network activity. ![bitcoin-network-activity](https://f.cloud.github.com/assets/420734/301091/75019bd4-95bd-11e2-91f2-c37c05891b31.png) Open issues: * Should the core close the listening socket or is it enough to just disregard incoming connections by closing them immediately? * Should SetNetworkActive() return an error code or can it throw exceptions?	https://api.github.com/repos/bitcoin/bitcoin/issues/2412	28	https://api.github.com/repos/bitcoin/bitcoin/issues/2412/comments	2013-03-26T02:33:14Z	None
2407	open	CodeShark	This pull request is a minimal step in the direction of merging The idea is to merge things incrementally rather than all at once.	https://api.github.com/repos/bitcoin/bitcoin/issues/2407	9	https://api.github.com/repos/bitcoin/bitcoin/issues/2407/comments	2013-03-24T02:50:04Z	None
2394	open	Belkaar	with an encyrpted wallet my client (0.8.1 compiled myself) crashes, if the walletpassphrase timeout occurs before the keypoolrefill has finished. It just closes, no error/crash log messages. The last line in the log is one of these: keypool added key 100, size=100 to reproduce do bitcoind walletpassphrase pass 10 && bitcoind keypoolrefill on a machine with no cpu cycles to spare at the moment	https://api.github.com/repos/bitcoin/bitcoin/issues/2394	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2394/comments	2013-03-20T20:48:53Z	None
2391	open	gusarov	In Windows OS, please, use AppData\Local (%LocalAppData% in Win7) instead of AppData\Roaming (%AppData%) The roaming folder is intended for synchronization with roaming profile storage, this is why all software should keep only small and absolutely necessary files here, which can make sense in other machine for the same user. Take look at browsers - they stores cache history in local folder and browser settings in roaming, this is correct. An average size of roaming profile for typical user is about 100..150MB (which can be easily transferred via LAN to any users PC), but Bitcoins folder have 16GB wich is inappropriate. At the same time you can think about ability to manually specify storage location, because of such a huge size. Most modern PC have SSD with quite limited capacity (64, 80, 128) for system drive and separate HDD of several TB in size. Personally I have to create Symbolic Link to store Bitcoins storage on alternative drive.	https://api.github.com/repos/bitcoin/bitcoin/issues/2391	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2391/comments	2013-03-20T07:29:05Z	None
2390	open	jgarzik	Our RPC code appears to violate HTTP/1.1 upon error (throw JSONRPCError), and led to at least one user complaint on IRC.	https://api.github.com/repos/bitcoin/bitcoin/issues/2390	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2390/comments	2013-03-20T06:44:36Z	None
2388	open	bradfitz	Its too difficult to verify that the Bitcoin downloads arent MITMed. bitcoin.org is not and prominently links to a bunch of downloads. sourceforge is only and while it has a SHASUMS.asc file, that is also served over I can get the bitcoin source from github using ssh or but: $ git grep 94761c70572b8ede8721524bb0317ede2d3723ce | wc -l 0 I cant see the SHA1 sums of previous releases in the git repo anywhere. (which one file says is the hash of bitcoin-0.8.1-linux.tar.gz) bitcoin.org should also say how to verify downloads.	https://api.github.com/repos/bitcoin/bitcoin/issues/2388	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2388/comments	2013-03-20T00:52:34Z	None
2381	open	mikehearn	This is more of a mental note to remind me to fix these things later. 1) The mempool needs to be topologically sorted before being processed. Otherwise the Bloom filter updating logic doesnt work right - if transaction A which spends to the clients wallet is then spent again by transaction B and the mempool.queryHashes call gives them back in order B,A then the filter will match the latter and not the former. 2) It will refuse to send more invs than MAX_INV_SZ. This is set to 50k entries so it shouldnt be an actual problem anytime soon. 3) It does not update setInventoryKnown. If you do a mempool command at the start of a connection and then download them all, a subsequent filtered block will send you the same transactions again even though you already saw them. The PushInventory() call already solves these problems. It probably makes sense to re-use it.	https://api.github.com/repos/bitcoin/bitcoin/issues/2381	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2381/comments	2013-03-18T22:11:35Z	None
2375	open	jgarzik	Running encryptwallet throws the following exception at shutdown: /usr/include/boost/thread/pthread/pthread_mutex_scoped_lock.hpp:26: boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*): Assertion `!pthread_mutex_lock(m) failed. bitcoind exits as expected, and restarts with the newly encrypted wallet just fine.	https://api.github.com/repos/bitcoin/bitcoin/issues/2375	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2375/comments	2013-03-17T07:16:06Z	None
2371	open	agravier	The preferences pane of Bitcoin-Qt (shortcut: command-comma) behaves incorrectly. Any change is discarded right after clicking [OK] or [Apply]. Specifically, * [OK] closes the preferences pane, but preferences are not changed, and reopening the pane shows that they have their original values. * [Apply] does not close the pane, but immediately resets all preferences to their original values. * [Cancel] behaves as expected. * [Reset options] warns about client restart, with the question "Do you want to proceed?". answering [Yes] or [Cancel] has the same effect: no client restart. I did not find any duplicate, so it might be a sporadic issue. Thanks.	https://api.github.com/repos/bitcoin/bitcoin/issues/2371	33	https://api.github.com/repos/bitcoin/bitcoin/issues/2371/comments	2013-03-16T16:12:34Z	None
2368	open	jgarzik	500 blocks is quite a lot of data. I wonder if we shouldnt target a byte size rather than block count, between requests. e.g. 32MB or somesuch.	https://api.github.com/repos/bitcoin/bitcoin/issues/2368	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2368/comments	2013-03-14T19:17:56Z	None
2362	open	patrikr	The chain fork alert was visible in Bitcoin-Qt until I restarted it, over 12 hours after the alert should have expired.	https://api.github.com/repos/bitcoin/bitcoin/issues/2362	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2362/comments	2013-03-13T06:31:09Z	None
2360	open	L2G	Im making this ticket so others know that Im working on making the Mac OS menu-bar icon (distinct from the dock icon) an option, along with allowing "minimize-to-tray" and "minimize-on-close" to work with that. (I dont think theres a ticket open for this, but if so, just let me know. There is #1522, but it is tangential.)	https://api.github.com/repos/bitcoin/bitcoin/issues/2360	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2360/comments	2013-03-12T19:14:11Z	None
2355	open	rebroad	Given this is the most-used bitcoin client, I think its about time that instructions existed so that the average non-I.T. person can buy bitcoins and store them sufficiently safely from theft. Bitcoin is still being adopted mostly by I.T. professionals, and its surely time that it become available to the wider population. For this to happen, there needs to be a "storing bitcoin safely for dummies" sort of document - and associated software changes to automate this as much as possible.	https://api.github.com/repos/bitcoin/bitcoin/issues/2355	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2355/comments	2013-03-11T04:39:14Z	None
2353	open	ralphtheninja	************************ EXCEPTION: St9bad_alloc std::bad_alloc bitcoin in ProcessMessages() ************************ EXCEPTION: St9bad_alloc std::bad_alloc bitcoin in ThreadMessageHandler() terminate called after throwing an instance of std::bad_alloc what(): std::bad_alloc Aborted The only thing I did was to wipe everything clean and start version 0.8.0. It started to download the block chain for a while and when I got back home it was dead. Is there anything I can do to prepare myself so I can gather more information if it happens again? Thinking of crash dumps, logs etc.	https://api.github.com/repos/bitcoin/bitcoin/issues/2353	4	https://api.github.com/repos/bitcoin/bitcoin/issues/2353/comments	2013-03-10T20:22:34Z	None
2342	open	petertodd	Basically AcceptBlock() checks IsFinal() for transactions in a block with nHeight of the block being tested, or essentially nBestHeight+1 however CreateNewBlock() was using just nBestHeight, so transactions were being included into blocks one block later than they could be. Additionally the new IsFinal() test in IsStandard() had the same issue, as well as the UI. (ironically, a fix I wrote a few months ago, lead astray by simply watching to see when transactions got mined on testnet) The bug in CreateNewBlock() is especially nasty for fidelity bond sacrifice transactions, because a miner who knew the trick could collect all the fees for himself, one block before anyone else had a chance. (subject to hash power of course) Anyway, I should update the patch with unittests and investigate the issue more carefully; for instance, have there ever been any nLockTimed transactions ever mined in the main chain at the minimum possible block? Also, can the same logic be fixed for time-locked transactions?	https://api.github.com/repos/bitcoin/bitcoin/issues/2342	16	https://api.github.com/repos/bitcoin/bitcoin/issues/2342/comments	2013-03-04T10:22:01Z	None
2340	open	petertodd	Set nLockTime on wallet transactions (only, no RPC changes) such that they can only be mined by the next block, rather than a block orphaning the current best block. There are two reasons to do this, the first is the minor benefit that using nLockTime ensures related bugs get caught immediately, so protocols that need that feature dont become "unusual" transactions with flaky behavior. The more important reason is to discourage "fee sniping" by deliberately mining blocks that orphan the current best block. Basically for a large miner the value of the transactions in the best block and the mempool can exceed the cost of deliberately attempting to mine two blocks to orphan the best block. However with nLockTime youll soon run out of transactions you can put in the first block, which means they now need to go in the second. With limited block sizes youre run out of room, and additionally another miner now only needs to orphan one block to in-turn snipe the high-fee transactions you had to place in the second block, wrecking all your hard work. Of course, the subsidy is high enough, and transaction volume low enough, that fee sniping isnt a problem yet, but by implementing a fix now we ensure code wont be written that makes assumptions about nLockTime that preclude a fix later. Transaction propagation is not impacted; even with non-final is non-standard the best block height implies we have at least one peer, and very soon more peers, that will accept and rebroadcast the transaction immediately. ## Testing ### Unit tests Pass ### Propagation No issues. Used -blocknotify=bitcoind sendtoaddress to send transactions as soon as a few block is found with worst-case of a node connected to only two 0.8 peers. Enabled -logtimestamps w/ ntp on that node and another node, and every transaction got to the second node within 5 seconds. ### Services No problems: Easywallet, Instawallet, Coinbase Wallet, Coinbase Merchant Services, Blockchain.info, BitPay, bitfetch, localbitcoins Wont accept until 1 confirmation: Satoshidice Most likely SatoshiDice implemented nLockTime == 0 rather than IsFinal() as their never-confirm nLockTime fix. I think there is an argument to be made that forcing them to make a minor change like this one would be a good way to test the waters to see if theyll make a more drastic change, as would be required if we make dust outputs non-standard.	https://api.github.com/repos/bitcoin/bitcoin/issues/2340	25	https://api.github.com/repos/bitcoin/bitcoin/issues/2340/comments	2013-03-01T11:09:14Z	None
2318	open	anarcat	In general, it is bad practice to put critical passwords (and I can hardly think of a more critical password than this one) on the commandline. It doesnt look like bitcoind allows for sending the passphrase securely. Theres a contrib python script for this (see #548), but it would be nice for the builtin code to do this directly.	https://api.github.com/repos/bitcoin/bitcoin/issues/2318	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2318/comments	2013-02-19T16:07:23Z	None
2317	open	anarcat	It seems that `""` is the default account, but that a few RPC commands do not really recognize that. It seems to me that the account should be optional for commands like `getaccountaddress`. This probably applies to `getaddressesbyaccount` and `getreceivedbyaccounttoo`.	https://api.github.com/repos/bitcoin/bitcoin/issues/2317	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2317/comments	2013-02-19T15:54:39Z	None
2303	open	Belkaar	My 0.8.0rc1 (self compiled from git tag) receives transactions from peers while syncing, which results in them beeing orphaned and the orphan-list filling up. Suggestion: Do not request or handle incomming transaction while in initial sync or when the client knows its blockchain is old. Also: Start connecting to peers only after every --loadblock entry has been processed	https://api.github.com/repos/bitcoin/bitcoin/issues/2303	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2303/comments	2013-02-13T06:44:10Z	None
2302	open	gavinandresen	I believe the correct behavior should be: Second click on a URI that pays to address A should remove the previous entry for A and add a new entry. E.g. click on "Pay 2 BTC to XYZ", then click on "Pay 1 BTC to XYZ", the Send Coins should show the last one. Click on "Pay 2 to XYZ", then click on "Pay 1 to VWX", Send Coins should show both recipients.	https://api.github.com/repos/bitcoin/bitcoin/issues/2302	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2302/comments	2013-02-12T22:57:08Z	None
2300	open	jgarzik	When pointing the shiny new Avalon ASIC miner directly at bitcoind (getwork mining), blasting bitcoind with a large number of requests, * cgminer reports several get failures (to be investigated; a separate issue from this) * bitcoind stalls in the middle of shutdown * this shutdown-freeze symptom does not occur outside of ASIC miner getwork testing.	https://api.github.com/repos/bitcoin/bitcoin/issues/2300	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2300/comments	2013-02-12T18:27:28Z	None
2293	open	Belkaar	I compiled the content of the git tag 0.8-rc1 on my raspberry pi (ARM) and downloaded the blockchain (well most of it) into the new format. When I try to copy the contents of blocks and chainstate an x86 machine and start the precompiled 0.8-rc1 bitcoind it crashes. Same happens with pi-created block chain files if you try to start the 0.8-rc1 windows. (Copying the datafiles between x86 and ARM was no problem with 0.7) Bitcoin version v0.8.0rc1-beta (2013-02-06 16:06:43 -0500) Using OpenSSL version OpenSSL 0.9.8k 25 Mar 2009 Startup time: 2013-02-10 14:07:00 Default data directory /root/.bitcoin Used data directory /mnt/store_0/bitcoin/bitcoincodes init message: Verifying wallet integrity... dbenv.open LogDir=/mnt/store_0/bitcoin/bitcoincodes/database ErrorFile=/mnt/store_0/bitcoin/bitcoincodes/db.log Bound to [::]:8333 Bound to 0.0.0.0:8333 init message: Loading block index... Opening LevelDB in /mnt/store_0/bitcoin/bitcoincodes/blocks/index Opened LevelDB successfully Opening LevelDB in /mnt/store_0/bitcoin/bitcoincodes/chainstate Opened LevelDB successfully LoadBlockIndex(): last block file = 37 LoadBlockIndex(): last block file: CBlockFileInfo(blocks=133, size=23791072, heights=216794..216926, time=2013-01-16..2013-01-17) LoadBlockIndex(): transaction index disabled LoadBlockIndex(): hashBestChain=00000000000004e3fa816b4c834a13e581e446c2b6881c83b28f9864d615a663 height=216926 date=2013-01-17 19:45:03 init message: Verifying block database integrity... Verifying last 288 blocks at level 3 ERROR: DisconnectBlock() : outputs still spent? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : outputs still spent? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : undo data adding output to missing transaction ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted ERROR: DisconnectBlock() : added transaction mismatch? database corrupted Unable to open file /mnt/store_0/bitcoin/bitcoincodes/blocks/rev00037.dat ERROR: CBlockUndo::ReadFromDisk() : OpenBlockFile failed ERROR: VerifyDB() : *** found bad undo data at 216819, hash=0000000000000333189f2bc4a671ed10abedb5c9fb3f6d69a2498c8c2317eeaa Error: Corrupted block database detected. Please restart the client with -reindex. Flush(false) DBFlush(false) ended 0ms StopNode() Flushed 0 addresses to peers.dat 467ms Committing 27465 changed transactions to coin database... Flush(true) DBFlush(true) ended 0ms Bitcoin exited	https://api.github.com/repos/bitcoin/bitcoin/issues/2293	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2293/comments	2013-02-10T17:38:24Z	None
2290	open	gavinandresen	According to the gcc manual: -frandom-seed=string This option provides a seed that GCC uses when it would otherwise use random numbers. It is used to generate certain symbol names that have to be different in every compiled file. It is also used to place unique stamps in coverage data files and the object files that produce them. You can use the -frandom-seed option to produce reproducibly identical object files. The string should be different for every file you compile. For gitian builds, we are breaking the "should be different for every file you compile" rule, which doesnt seem to be causing an issues right now but which I could imagine causing impossible-to-debug problems in the future. A little googling turned up this discussion thread about what to do about it:	https://api.github.com/repos/bitcoin/bitcoin/issues/2290	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2290/comments	2013-02-09T20:31:01Z	None
2280	open	Diapolo	checkip.dyndns.org - resolves to 91.198.22.70, 216.146.38.70 and 216.146.39.70 (we only have 91.198.22.70 hard-coded) 74.208.43.192 - cant be resolved, timeout when I try to open it with my browser www.showmyip.com - resolves to 2a01:608:ffff:2872::10 and 212.117.175.194, timeout when I try to open it with my browser Just mentioning it, perhaps we can remove / update / rework that.	https://api.github.com/repos/bitcoin/bitcoin/issues/2280	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2280/comments	2013-02-06T17:36:09Z	None
2267	open	gavinandresen	Nabbo in IRC reports that signrawtransaction is failing for coinbase transactions:	https://api.github.com/repos/bitcoin/bitcoin/issues/2267	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2267/comments	2013-02-03T19:14:36Z	None
2265	open	gmaxwell	When doing offline signing of unknown txins with the scriptpubkey provided on the command line signrawtransaction returns complete false when the transaction is really completed.	https://api.github.com/repos/bitcoin/bitcoin/issues/2265	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2265/comments	2013-02-02T04:05:39Z	None
2256	open	SergioDemianLerner	Please read the following thread: Also additional information was privately sent to the dev team. My proposed solutions is: 1. Create a Transaction hash cache to temporarily store the last used hash during the evaluation of a script. 2. Verify that the ECDSA signature and the ECDSA public key are well-formed before hashing the transaction. 3. Verify the length of pushed signatures of vin[i].scriptSig in CTransaction::AreInputsStandard() to see if they are long enough. (currently only stack.size() = (unsigned int)nArgsExpected) is tested, but not the actual arguments. ) The first 2 defense measures must be deployed together.	https://api.github.com/repos/bitcoin/bitcoin/issues/2256	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2256/comments	2013-02-01T05:07:19Z	None
2214	open	sipa	There are several new command-line switches which have no corresponding options in Qt: * -dbcache * -checkpoints * -par These older switches can probably also use a config panel equivalent: * -checklevel / -checkblocks * -maxreceivebuffer / -maxsendbuffer * -maxsigcachesize * -timeout	https://api.github.com/repos/bitcoin/bitcoin/issues/2214	8	https://api.github.com/repos/bitcoin/bitcoin/issues/2214/comments	2013-01-25T17:17:08Z	None
2212	open	qubez	After performing an automatic salvage operation on a wallet detected as damaged, Bitcoin displays an error on every subsequent launch of bitcoin-qt, with no remedy: "Warning: error reading wallet.dat! All keys read correctly, but transaction data or address book entries might be missing or incorrect" ![salvaged-wallet-error](https://f.cloud.github.com/assets/1425520/92816/f0bc623c-65f6-11e2-8003-f6eb552676a9.png) Data - repaired wallet and corrupted wallet auto-backup (original "corrupt" wallet is "wallet.1357810229.bak" in linked zip): bitcoin-qt pull-tester build Dec 2012 Win32 Windows XP SP3 (FAT32)	https://api.github.com/repos/bitcoin/bitcoin/issues/2212	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2212/comments	2013-01-24T07:30:27Z	None
2202	open	sipa	As the current "restart with -reindex" is fine for bitcoind, but very confusing for GUI users.	https://api.github.com/repos/bitcoin/bitcoin/issues/2202	11	https://api.github.com/repos/bitcoin/bitcoin/issues/2202/comments	2013-01-22T23:31:44Z	None
2197	open	PochiRaccoon	I have my data directory on a different drive so I changed all my shortcuts to include "-datadir=D:\BitCoinData" but the shortcut in "%AppData%\Microsoft\Windows\Startup" changes back to the default the next time bitcoin starts up. I do have the "start bitcoin on system login" box checked. I change it to "bitcoin-qt.exe -min -datadir=D:\BitCoinData" but the next time the program boots the shortcut is reverted back to "bitcoin-qt.exe -min". Can you please fix this or provide the best way to have it startup with that data directory? Or maybe on next client add an option in settings that allows the data directory to be specified?	https://api.github.com/repos/bitcoin/bitcoin/issues/2197	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2197/comments	2013-01-22T16:06:05Z	None
2180	open	subSTRATA	If user has X bitcoins in encrypted wallet and wants to send them all, and transaction would require fee, here is how application logic goes right now: 1. Put address and X bitcoins into appropriate fields then click on "Send" button. 2. Confirm send action. 3. Type password and proceed. 4. Bitcoin-qt will complain about not having enough bitcoins to pay fee. Steps 3. and 4. should be reversed. Additionaly, step where client asks user if he or she is OK with paying extra fee due to young coins and / or transaction size should come before typing password.	https://api.github.com/repos/bitcoin/bitcoin/issues/2180	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2180/comments	2013-01-14T18:53:45Z	None
2140	open	rricci2009	util.cpp: In function void AllocateFileRange(FILE*, unsigned int, unsigned int): util.cpp:1149: warning: ignoring return value of size_t fwrite(const void*, size_t, size_t, FILE*), declared with attribute warn_unused_result util.cpp: In function void ShrinkDebugFile(): util.cpp:1170: warning: ignoring return value of size_t fwrite(const void*, size_t, size_t, FILE*), declared with attribute warn_unused_result	https://api.github.com/repos/bitcoin/bitcoin/issues/2140	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2140/comments	2012-12-31T12:49:40Z	None
2138	open	rricci2009	netbase.cpp: In function bool ConnectSocketDirectly(const CService&, SOCKET&, int): netbase.cpp:334: warning: dereferencing pointer sockaddr.438 does break strict-aliasing rules netbase.cpp:334: note: initialized from here	https://api.github.com/repos/bitcoin/bitcoin/issues/2138	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2138/comments	2012-12-31T12:47:48Z	None
2134	open	rebroad	Quite often I find that bitcoind/bitcoin-qt can spend hours trying peers with no success. Would anyone have any suggestions on what the client could do in this situation or feedback to the user? For example, it could notify the user that the proxy server is unresponsive if that happens to be the cause, etc...	https://api.github.com/repos/bitcoin/bitcoin/issues/2134	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2134/comments	2012-12-28T16:57:03Z	None
2127	open	HandleX	OS: Windows Server 2008 R2. Call method: HTTP JSON RPC. Stringification method: JSON.stringify(). When I execute "move" bitcoin API (handled by bitcoind.exe), some comment string characters supported correctly, some not. As an example: Ive executed "move" API with comment "", where first letter is unofficial unicode bitcoin sign, and others are russian characters. Then Ive executed "listtransactions" API call, Ive received comment string distorted: "u0082". As we can see, some characters correct, some not. I use bitcoind as an online wallet on my site. Transaction comments can be useful there, so I want to have correct JSON RPC unicode support in bitcoind.	https://api.github.com/repos/bitcoin/bitcoin/issues/2127	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2127/comments	2012-12-24T13:29:20Z	None
2124	open	CodeShark	bitcoind now supports loading more than one wallet at once. A singleton object of type CWalletManager now exists. It handles dynamic loading/unloading and synchronization of wallets and allows different parts of the application to access wallets by name. A new CWallet* parameter has been added to the RPC functions. Functions which do not use a wallet simply ignore it. In addition, a new field has been added to CRPCCommand that tells us whether or not the function can be called on a wallet. Wallet-specific information has been removed from RPC method getinfo. Instead, getinfo just reports how many wallets are currently loaded. Detailed wallet info is now available via the listwallets method. Four new RPC methods have been added: - listwallets Returns an array containing wallet information. - usewallet \<walletname\> \<method\> [params] Allows you to apply existing RPC commands to different wallets. A default wallet named the empty string is always loaded and is used if calls are made without usewallet. Example: bitcoind usewallet foo listreceivedbyaddress 0 true (thanks, gmaxwell, for the idea) - loadwallet \<walletname\> [rescan=false] [upgradewallet=false] [maxversion=(latest)] Dynamically loads an existing wallet file wallet-\<walletname\>.dat. If no wallet file exists a new wallet is created. The default wallet file is always called wallet.dat. - unloadwallet \<walletname\> To specify additional wallets at startup, use option -usewallet=foo -usewallet=bar etc...as detailed here: and TODO: - Clean up I/O in CWalletManager::LoadWallet - debug, error, and UI output functions. - Check synchronization code. - Test mining functionality. Allow RPC mining on arbitrary wallets. - Integrate with Qt.	https://api.github.com/repos/bitcoin/bitcoin/issues/2124	27	https://api.github.com/repos/bitcoin/bitcoin/issues/2124/comments	2012-12-23T13:30:58Z	None
2091	open	grarpamp	Suggesting that bitcoind be able to bind to multiple anonymous (and regular) networks at once. Inbound queries would reply out the same bind they were received on. Outbound initiates/broadcasts might be sent from all binds, or if impossible or out of context, to a specified one. Goal: Allow one daemon to service all networks [1] at once. [1] IPv4, IPv6, Tor, I2P, Phantom Note it should always be made possible option to not bind to * (all addresses), but only to ones supplied. Im not certain if -externalip can do this. -discover in doc/Tor.txt says: If you want to run a dual stack, reachable from both Tor and IPv4 (or IPv6), youll need to either pass your other addresses using -externalip which implies maybe it can, but offers no syntax. Maybe it is a doc bug. -externalip=foo.onion (or Tors OnionCat IPv6 /48) -externalip=bar.i2p (or I2Ps GarliCat IPv6 /48) -externalip=6addr (.phantom / interpreted from its IPv6 /48 prefix) -externalip=6addr -externalip=4addr Also, since socks context via -proxy breaks down with more than one such anonymous net, there would also need to be: -tor=host:port (in Tor, in bitcoin) -i2p=host:port (in I2P, not in bitcoin) -phantom=host:port (not in Phantom, not in bitcoin) and maybe -proxyipv4=host:port -proxyipv6=host:port	https://api.github.com/repos/bitcoin/bitcoin/issues/2091	6	https://api.github.com/repos/bitcoin/bitcoin/issues/2091/comments	2012-12-11T06:56:15Z	None
2086	open	laanwj	This is a UI-only change, the infrastructure for storing comments with transactions is already implemented (in tx.mapValue["comment"). In case of a Bitcoin URI, the comment should be filled in from the "message" field in the URI. It is currently already possible to view the transaction comment in the Transaction Details window. However, it would be nice if it was more visible, maybe in the transaction list.	https://api.github.com/repos/bitcoin/bitcoin/issues/2086	5	https://api.github.com/repos/bitcoin/bitcoin/issues/2086/comments	2012-12-09T17:29:42Z	None
2079	open	Lohoris	// Check funds int64 nBalance = GetAccountBalance(strAccount, nMinDepth); if (nAmount > nBalance) throw JSONRPCError(-6, "Account has insufficient funds"); This prevents an account balance from going negative, but it doesnt consider the transaction fee, hence if you send out an entire account balance, youll get a negative balance if there is a transaction fee.	https://api.github.com/repos/bitcoin/bitcoin/issues/2079	11	https://api.github.com/repos/bitcoin/bitcoin/issues/2079/comments	2012-12-06T18:38:01Z	None
2041	open	luke-jr	Running 76 test cases... unknown location(0): fatal error in "CreateNewBlock_validity": memory access violation at address: 0x00000018: no mapping at fault address test/miner_tests.cpp(58): last checkpoint *** 1 failure detected in test suite "Bitcoin Test Suite"	https://api.github.com/repos/bitcoin/bitcoin/issues/2041	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2041/comments	2012-11-26T21:32:06Z	None
2040	open	luke-jr	Expected behaviour: test_bitcoin should not touch datadir	https://api.github.com/repos/bitcoin/bitcoin/issues/2040	0	https://api.github.com/repos/bitcoin/bitcoin/issues/2040/comments	2012-11-26T21:30:09Z	None
2039	open	luke-jr	To reproduce: chmod -r datadir/blk0*.dat Expected behaviour: Reindex read-only block file, and create a new blk0*.dat file when there are new blocks to add.	https://api.github.com/repos/bitcoin/bitcoin/issues/2039	1	https://api.github.com/repos/bitcoin/bitcoin/issues/2039/comments	2012-11-26T21:29:06Z	None
2038	open	luke-jr	To reproduce: chmod -r datadir/blocks/blk0*.dat -reindex fails with an error, but bitcoind still starts. I didnt see what it does when it tries to IBD (it didnt try at startup) Expected behaviour: Error and quit.	https://api.github.com/repos/bitcoin/bitcoin/issues/2038	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2038/comments	2012-11-26T21:27:12Z	None
2036	open	luke-jr	s mining refactor eliminated the check for GetMinFee on transactions included in blocks. Whether that was intentional or not, I think its important to reinstate some of the DoS rules - particularly the one for very small outputs. Perhaps the way to do this is to add the check for GetMinFee back in, and skip anything we dont want checked in GetMinFee with GMF_BLOCK mode?	https://api.github.com/repos/bitcoin/bitcoin/issues/2036	2	https://api.github.com/repos/bitcoin/bitcoin/issues/2036/comments	2012-11-26T16:29:04Z	None
2034	open	sipa	After reading #1271 and #1382, which dont fix the core problem in my opinion, here is an own proposal. The problem is that the block download mechanism may be active multiple times, in particular when during a normal initial block download a new block is announced by a different peer. We dont keep track of which block has already been downloaded from which peer, so a new (dulicate) getblocks/inv/getdata/block/getblocks cycle may be started for the newly announced block. This is what I would do: * There is one designated "sync node", from which the synchronization is supposed to happen. * getblocks messages are never sent to any but the sync node * A map is kept that remembers which getdata is sent to which node * block invs (for unknown blocks) coming from any node cause a getdata to that node, unless a getdata was already sent for that block. * When a node is disconnected, its outstanding entries are removed from the getdata map, and if it was the sync node, a new sync node is chosen. * When a (potentially valid) block arrives that has the highest timestamp ever seen, its sender becomes the sync node. This can later be extended to include a property that measures performance when sending blocks, and chooses a new sync node if deemed to low. I think this is about the best we can do without heavily reorganising the code, and if we do that, headers-first should get priority, as it allows for much better block download management (it means the best chain is known in advance, blocks can be requested from multiple peers, ...) Any comments/suggestions?	https://api.github.com/repos/bitcoin/bitcoin/issues/2034	9	https://api.github.com/repos/bitcoin/bitcoin/issues/2034/comments	2012-11-25T14:08:00Z	None
2007	open	Diapolo	I set my computers date to 2012-07-13 and tried to start the client (current master) and during startup it simply crashes. This is from the debug.log: <pre> 07/13/12 13:56:32 ERROR: CheckBlock() : block timestamp too far in the future 07/13/12 13:56:32 LoadBlockIndex() : *** found bad block at 34105, hash=0000000037c57b5ff0ebedd38469b9797c89e8640cbcd52dc967d3805e487b51 07/13/12 13:56:32 ERROR: LoadBlockIndex(): chain database corrupted </pre> There should be a check and warning like the one in util.cpp - AddTimeData(), but this needs to be done from some core dev.	https://api.github.com/repos/bitcoin/bitcoin/issues/2007	7	https://api.github.com/repos/bitcoin/bitcoin/issues/2007/comments	2012-11-13T15:04:47Z	None
2001	open	gmaxwell	I found user on IRC getting the generic out of sync report and being told to try all manner of cargo cult repairs (e.g. resync). Debug log showed his clock was exactly 24 hours fast. This is probably unoptimal. Showing out of sync when the last block is old makes sense, but there should probably be some additional text about your clock being wrong when your peers all say youre 1440 minutes off.	https://api.github.com/repos/bitcoin/bitcoin/issues/2001	3	https://api.github.com/repos/bitcoin/bitcoin/issues/2001/comments	2012-11-11T02:12:58Z	None
1998	open	sipa	In a network setup where several trusted peers run on a network, -connected to a single proxy which connects to the outside world, the wallet resubmission mechanism is defeated. If the proxy for some reason has a network hiccup at the time a wallet transaction is broadcasted the first time, it will never reach the public network. The wallet node will keep resubmitting, but as the proxy already has the transaction in its memory pool, it will not relay the announcement. This issue was reported to me on IRC by thermoman, and the solution seems adding a config parameter to setting a trusted list of IPs/netranges for which invs are always relayed, even if they were already known.	https://api.github.com/repos/bitcoin/bitcoin/issues/1998	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1998/comments	2012-11-10T12:20:30Z	None
1994	open	cinderblock	bitcoind should write to debug.log when it receives a shutdown signal so operator knows signal was sent while debugging/setup and for general logging. #### Story As a new bitcoind operator, it was not evident to me why bitcoind was running so slow. This manifested in several ways: * RPC calls from localhost took 1-2 mins * uptime went through the roof * shutdown also took 1-2 mins I have since realized the obvious (now that I understand bitcoin better) that Im still verifying my own block chain. *(This is taking freaking forever! I know I could use a lightweight...)* #### Rational What Ive proposed is a simple change that would significantly help new users and ensure proper logging of significant events. If debug.log had printed a trivial message that it had started its shutdown process, I wouldnt have been pulling my hair out trying to figure out why killing it was doing nothing. *(I was watching tail -f debug.log)* ###### Related note Adding to debug.log that the local blockchain is behind by more than ~2 blocks and that some time may be required to catch up would also be very useful, especially for people unfamiliar with bitcoin[d].	https://api.github.com/repos/bitcoin/bitcoin/issues/1994	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1994/comments	2012-11-09T05:23:30Z	None
1965	open	luke-jr	To trigger this, delete your old build/build.h and run make with -j50 or some similarly high number. Beware memory use!	https://api.github.com/repos/bitcoin/bitcoin/issues/1965	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1965/comments	2012-10-28T21:18:57Z	None
1958	open	Azulan	Sometimes, I want to play a game or watch an online video on my machine, and I find that often times the upload bandwidth being used by bitcoin can cause latency or other issues with these activities. I request a way to pause and resume all bitcoin related network traffic, preferably through the gui. Perhaps it can have an optional time component so that it restart automatically after an hour or so, so that the client is not wasting time if forgotten about. I think that this option would be preferable to having to quit the program and then restart it, which can take up quite some time and a great deal of disk activity by reloading the block chain.Thank you.	https://api.github.com/repos/bitcoin/bitcoin/issues/1958	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1958/comments	2012-10-25T07:21:55Z	None
1930	open	xanatos	The console program doesnt have a -license/-version/-copyright option, nor does it show the copyright and the license of the program. The installer doesnt include the various licenses of the various "parts" of the program (GPL, LGPL, BerkeleyDB, OpenSSL license) (I mean the txt files) If you include the copyright of OpenSSL in the readme.txt then you should include all the other copyrights (at least for BerkeleyDB, but I dont think doing a "quantitative" analysis is the right thing to do. All the "external" copyrights or none of the "external" copyrights in the readme.txt). The same for the MiniUPnP library, the QT library (that at least has an about dialog), the libqrencode. All these copyrights should be also present in the about dialog. Both the console program, the qt program and the readme(s) dont have/show a link to the source code repository (https://github/bitcoin/bitcoin). While perhaps putting the link would increase the number of persons that come here to ask questions, normally open source projects have links to their repositories. Both the console program, the qt program and the readme(s) dont have/show a link to the forum discussion about the specific version (for example for the 0.7 ) The asset_attribution.txt file isnt included in the installable release of the software. I think it should be made clear in the readme.txt that, while the license of the source code is MIT, the license of the combined program is a chimera based on GPL/LGPL/BerkeleyDB/OpenSSL (and note that the OpenSSL license isnt compatible with the GPL license, see ) and a discussion of what this imply (the combined product is protected by two strong copyleft licenses, BerkeleyDB and GPL, plus some clauses about advertisement and what needs to be written in the copyrights from the other licenses) I wont suggest fixes because I think the exact specification of these things should be decided by the higher-ups.	https://api.github.com/repos/bitcoin/bitcoin/issues/1930	4	https://api.github.com/repos/bitcoin/bitcoin/issues/1930/comments	2012-10-14T10:20:50Z	None
1928	open	freewil	It seems to me that the usefulness of multisig addresses are severely limited if the current client implementation doesnt support showing received payments to a multisig address unless one has all the keys imported into their wallet. I understand why it may be considered dangerous to show received payments if they arent spendable (the wallet doesnt have all the required keys for the multisig address) but at the same time that is exactly the point of using multisig addresses. It seems any rpc calls dealing with transactions (`listsince`, `listtransactions`, etc) should at least have an extra option to show transactions sent to multisig addresses that have been added with `addmultisigaddress` (ismine: true) even if all the keys havent been imported into the wallet.	https://api.github.com/repos/bitcoin/bitcoin/issues/1928	6	https://api.github.com/repos/bitcoin/bitcoin/issues/1928/comments	2012-10-13T17:06:46Z	None
1912	open	gmaxwell	Its now almost a daily event that I see people on IRC saying they used -rescan or telling people to use rescan when it makes no sense and should have no effect at all. Because it takes a little while some things that just take time to resolve (e.g. confirmation count going up on transactions) is very aggressively believed to be the magical cure all. Either that or there are a whole litany of nasty bugs all over the client, some totally unrelated to the wallet, which are cured by rescan which arent being reported because people have a workaround. Instead perhaps we should rename rescan to -frobnicate-wallet-transaction-index.	https://api.github.com/repos/bitcoin/bitcoin/issues/1912	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1912/comments	2012-10-06T20:20:20Z	None
1902	open	jgarzik	My public testnet3 node uses the internal miner. Immediately after block #32255, a flood of debug messages appeared. Many messages per second... ``` received block 000000000207e63e68f2 SetBestChain: new best=000000000207e63e68f2 height=32255 work=1162848638650514 date=10/02/12 21:55:17 ProcessBlock: ACCEPTED CreateNewBlock(): total size 1000 nActualTimespan = 326059 before bounds GetNextWorkRequired RETARGET nTargetTimespan = 1209600 nActualTimespan = 326059 Before: 1c04b5af 0000000004b5af00000000000000000000000000000000000000000000000000 After: 1c014500 00000000014500d8027027027027027027027027027027027027027027027027 nActualTimespan = 326059 before bounds GetNextWorkRequired RETARGET nTargetTimespan = 1209600 nActualTimespan = 326059 Before: 1c04b5af 0000000004b5af00000000000000000000000000000000000000000000000000 After: 1c014500 00000000014500d8027027027027027027027027027027027027027027027027 Running BitcoinMiner with 1 transactions in block (188 bytes) 81.161.177.190:18333 /Satoshi:0.7.0.3/ 32229 getblocks -1 to 00000000000000000000 limit 500 nActualTimespan = 326059 before bounds GetNextWorkRequired RETARGET nTargetTimespan = 1209600 nActualTimespan = 326059 Before: 1c04b5af 0000000004b5af00000000000000000000000000000000000000000000000000 After: 1c014500 00000000014500d8027027027027027027027027027027027027027027027027 nActualTimespan = 326059 before bounds GetNextWorkRequired RETARGET nTargetTimespan = 1209600 nActualTimespan = 326059 Before: 1c04b5af 0000000004b5af00000000000000000000000000000000000000000000000000 After: 1c014500 00000000014500d8027027027027027027027027027027027027027027027027 96.21.113.151:18333 /Satoshi:0.7.0.99/ 32229 getblocks -1 to 00000000000000000000 limit 500 88.198.7.53:18333 /Satoshi:0.7.0.3/ 32229 getblocks -1 to 00000000000000000000 limit 500 89.40.16.241:18333 /Satoshi:0.7.0.3/ 32229 getblocks -1 to 00000000000000000000 limit 500 178.63.48.141:18333 /Satoshi:0.7.0.3/ 32229 getblocks -1 to 00000000000000000000 limit 500 nActualTimespan = 326059 before bounds GetNextWorkRequired RETARGET nTargetTimespan = 1209600 nActualTimespan = 326059 Before: 1c04b5af 0000000004b5af00000000000000000000000000000000000000000000000000 After: 1c014500 00000000014500d8027027027027027027027027027027027027027027027027 ```	https://api.github.com/repos/bitcoin/bitcoin/issues/1902	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1902/comments	2012-10-02T22:16:05Z	None
1898	open	ThePiachu	At the moment, if one accidentally performs a double-spent (or has a double-spent performed against them), the transaction is forever stored in the wallet.dat file and appears as a 0-confirmation transaction on top of the transaction history in BitcoinQT. There is no way to get rid of that transaction without purging the wallet through various workarounds through external software. I propose adding some option of deleting double-spent transactions once their paired transactions are buried deep in the blockchain (say, 120 confirmations). This would allow the users to clean their wallets from accidental double-spend transaction without enabling one an easier way to perform double-spent attacks by deleting an unconfirmed but a valid transaction.	https://api.github.com/repos/bitcoin/bitcoin/issues/1898	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1898/comments	2012-10-02T08:14:14Z	None
1894	open	ThePiachu	The JSON RPC allows one to create accounts at a whim. However, there is little functionality for getting rid of old accounts. For example, if I deal with a customer, I create an account "Order 1" to let them pay into the account. After I am done dealing with the order, I cant really get rid of the account. This way, even after many months, I would still see it in the account list, even if I dont need it. I wouldnt want to delete the addresses associated with the account, but I would like to have an option of merging that "Order 1" account into for example "Archive" account. Currently I can only try getting that functionality by listing all addresses owned by an account and assigning them individually to a different account.	https://api.github.com/repos/bitcoin/bitcoin/issues/1894	5	https://api.github.com/repos/bitcoin/bitcoin/issues/1894/comments	2012-09-30T20:09:44Z	None
1874	open	darkhosis	With enough IPs listed as addnodes, the default delay of 2m will cause them to cycle endlessly, never picking up other outgoing peers. With the default timeout of 5000ms, it only takes 24 addnodes timing out to keep a cycle going. I observed this with ~400 addnodes, 1000ms timeout & manually changed source to a 15m cycle time. I think itd be nice to have the delay as a variable that could be set in the bitcoin.conf file. With a few # of addnodes, one may even want to decrease the delay time. Another option would be to increase the cycle time for each specific addnode by x amount per connection failure..	https://api.github.com/repos/bitcoin/bitcoin/issues/1874	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1874/comments	2012-09-27T17:51:50Z	None
1873	open	darkhosis	When using connect command line function it opens two connections to the IP specified... 09/27/12 17:32:31 accepted connection xx:22348 09/27/12 17:32:31 accepted connection xx:22347 It also continues to open connections up to your maximum # of outgoing connections rather than the stated "Connect only to the specified node(s)". The double connection is counted as 1, so if you have the default max of 8 outgoing connections, itll open 7 more. It doesnt allow incoming connections. observed behavior in bitcoin-qt and bitcoind (windows)	https://api.github.com/repos/bitcoin/bitcoin/issues/1873	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1873/comments	2012-09-27T17:45:15Z	None
1858	open	keystrike	I was going to send a transaction but it was too large and my client (0.7.0) wanted me to pay a fee. However, I was not fully synchronized with the blockchain yet. The client knew this. I waited a few more blocks and sent the transaction without having to pay the fee. The message asking me to pay a fee didnt mention the blockchain not being synchronized. Users who are unaware of how fees are calculated could have paid an unnecessary fee to the network had they accepted prior to the client knowing that there was a way to send coins w/o the fee. Perhaps the error message could be modified to reflect this? **Laanwj: clarified issue title**	https://api.github.com/repos/bitcoin/bitcoin/issues/1858	6	https://api.github.com/repos/bitcoin/bitcoin/issues/1858/comments	2012-09-23T02:05:33Z	None
1848	open	Belkaar	On the "listtransactions" RPC command I get the following errors for all P2Pool txs that send coins to one of my addresses CWalletTx::GetAmounts: Unknown transaction type found, txid a1450e39bff9771939315ea808676f0054cfec50f41f443c90f4fa4562ed6a30 "version" : 70003	https://api.github.com/repos/bitcoin/bitcoin/issues/1848	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1848/comments	2012-09-21T20:31:20Z	None
1827	open	jgarzik	At a minimum, onlynet=ipv6 needs to be supported for the internal HTTP client (RPC CLI).	https://api.github.com/repos/bitcoin/bitcoin/issues/1827	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1827/comments	2012-09-16T11:39:01Z	None
1816	open	luke-jr	This would aide greatly in ensuring miners arent messing up blocks, without the expense of losing 50 BTC.	https://api.github.com/repos/bitcoin/bitcoin/issues/1816	22	https://api.github.com/repos/bitcoin/bitcoin/issues/1816/comments	2012-09-10T02:57:58Z	None
1801	open	laanwj	I performed a bit of hand-rolled static analysis on the Bitcoin source to check for potential deadlocks, by examining partial lock orders (like DEBUG_LOCKORDER but more thorough). I found a few, which I checked manually. This list is not comprehensive, as indirect calls (functions pointers, virtual functions, such as in the RPC dispatcher) are currently ignored by my static checker. These cases are the exceptions. The cases under "counterexample" are the "normal" order, or at least the most common one. Case 4 involves TRY_LOCKs, so it is probably OK. **1.** `SendMessages` **LOCK**s cs_inventory lock on a node `CWallet::GetTransaction` **LOCK**s the cs_wallet lock. *Counterexample*: `CWallet::ResendWalletTransactions` **LOCK**s cs_wallet lock `CWallet::RelayWalletTransaction` `RelayMessage` `RelayInventory` `CNode::PushInventory` which **LOCK**s the cs_inventory lock **2.** `CTxMemPool::accept(CTxDB&, CTransaction&, bool, bool*)` **LOCK**s local static lock for rate-limit `CWallet::GetDebit(CTransaction const&) const` ` CWallet::GetDebit(CTxIn const&) const` **LOCK**s CWallet lock *Counterexample*: `CWallet::CommitTransaction(CWalletTx&, CReserveKey&)` **LOCK**s CWallet lock `CMerkleTx::AcceptToMemoryPool()` `CTxMemPool::accept(CTxDB&, CTransaction&, bool, bool*)` **LOCK**s local static lock for rate-limit **3.** `CWalletTx::AcceptWalletTransaction(CTxDB&, bool)` **LOCK**s CTxMemPool:cs `CTxMemPool::accept(CTxDB&, CTransaction&, bool, bool*) ` ` CWallet::GetDebit(CTransaction const&)` ` CWallet::GetDebit(CTxIn const&)` **LOCK**s CWallet:cs_wallet `CreateNewBlock(CReserveKey&)` **LOCK**s CTxMemPool:cs `CBlock::ConnectBlock(CTxDB&, CBlockIndex*, bool)` `CWallet::AddToWalletIfInvolvingMe(CTransaction const&, CBlock const*, bool, bool)` **LOCK**s CWallet:cs_wallet *Counterexample*: `CWallet::CommitTransaction(CWalletTx&, CReserveKey&)` **LOCK**s CWallet:cs_wallet `CMerkleTx::AcceptToMemoryPool()` `CTransaction::ClientConnectInputs()` **LOCK**s CTxMemPool:cs **4.** `ThreadSocketHandler2(void*)` **LOCK**s cs_vNodes, then **TRYLOCK**s CNode:cs_vSend (when disconnecting nodes) *Counterexample*: `ThreadMessageHandler2(void*)` **TRYLOCK**s CNode:cs_vSend `SendMessages(CNode*, bool)` **LOCK**s cs_vNodes (for address refresh broadcast)	https://api.github.com/repos/bitcoin/bitcoin/issues/1801	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1801/comments	2012-09-08T11:22:29Z	None
1766	open	Diapolo	Example, enter the following: - ``getpeerinfo`` - Enter - ``getinfo`` - Enter - use up key to re-use ``getpeerinfo`` and change it to ``help`` - Enter - try to use up key to select ``getinfo`` -> was deleted from the list after re-use of ``getpeerinfo`` Seems like a reuse and editting of old entries causes elements after that entry to get deleted, as the editted entry is moved to the last place of the list. Hope you understand, what I mean ^^.	https://api.github.com/repos/bitcoin/bitcoin/issues/1766	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1766/comments	2012-08-31T07:19:50Z	None
1763	open	luke-jr	If there are zero blocks network-wide, getwork and getblocktemplate error "Bitcoin is downloading blocks..."	https://api.github.com/repos/bitcoin/bitcoin/issues/1763	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1763/comments	2012-08-31T05:16:36Z	None
1746	open	TurkeyMan	Please consider adding support for standard USB NFC readers to invoke transactions. Id like to use the PC has an ad-hoc point of sales device, and the NFC scanner is essential. Hardware is inexpensive and readily available:	https://api.github.com/repos/bitcoin/bitcoin/issues/1746	17	https://api.github.com/repos/bitcoin/bitcoin/issues/1746/comments	2012-08-28T22:23:48Z	None
1734	open	gmaxwell	Getinfo should show current externalip list. (This is something that I noticed PPcoin did, seems pretty useful).	https://api.github.com/repos/bitcoin/bitcoin/issues/1734	3	https://api.github.com/repos/bitcoin/bitcoin/issues/1734/comments	2012-08-28T04:48:42Z	None
1725	open	sgornick	If there is a transaction where my wallet holds two of the output addresses, then the Transaction details dialog shows incorrect data. The To: for both addresses will show the same address (and label) regardless of which of the two I am viewing. Bitcoin-qt, v0.6.3.	https://api.github.com/repos/bitcoin/bitcoin/issues/1725	3	https://api.github.com/repos/bitcoin/bitcoin/issues/1725/comments	2012-08-26T08:17:27Z	None
1704	open	xanatos	In wallet.cpp, around lines 125, 129 and 237 there are some calculations to find the nDeriveIterations necessary for a given PC. ```C++ pMasterKey.second.nDeriveIterations = pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime))); ``` ```C++ pMasterKey.second.nDeriveIterations = (pMasterKey.second.nDeriveIterations + pMasterKey.second.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2; ``` ```C++ kMasterKey.nDeriveIterations = (kMasterKey.nDeriveIterations + kMasterKey.nDeriveIterations * 100 / ((double)(GetTimeMillis() - nStartTime))) / 2; ``` Now, Im not secure secure of it, but Ill say that the first has a better order of operations. Why? Now, nDeriveIterations is an uint. The first one multiplies it by a double number (100 / ...). There wont be an overflow at this point. Then the double is downcasted to uint (and here there could be an overflow). The second and third variants first multiply the uint by 100 and then (through the division with a double) convert it to a double. By first multiplying it by 100 you have limited the nDeriveIterations to around 42 million. Yeah, I do know that this isnt important with today computers :-)	https://api.github.com/repos/bitcoin/bitcoin/issues/1704	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1704/comments	2012-08-23T09:44:39Z	None
1675	open	gmaxwell	The coin selection should automatically sweep up excessive small / dust inputs in order to get them out of the txout set when there is room and the txn already has change. (e.g. excess priority before the txn loses freeness, or room before the next kiliobyte fee increment) This can be done as a post-processing step after the existing selection. Care should be taken to avoid reducing privacy by linking otherwise independent accounts. This can sometimes increase privacy by further disguising the values exchange.	https://api.github.com/repos/bitcoin/bitcoin/issues/1675	5	https://api.github.com/repos/bitcoin/bitcoin/issues/1675/comments	2012-08-14T20:52:51Z	None
1674	open	Diapolo	- change our hardening options to use -fstack-protector-all even for Windows builds, as we recently switched to a newer compiler suite - also removes an obsolete workaround for GCC 4.5 (https://bugs.launchpad.net/ubuntu/+source/gcc-4.5/+bug/691722), which required to first set -fno-stack-protector, before -fstack-protector-all	https://api.github.com/repos/bitcoin/bitcoin/issues/1674	95	https://api.github.com/repos/bitcoin/bitcoin/issues/1674/comments	2012-08-14T09:48:18Z	None
1666	open	laanwj	To prevent loss when people forget their encryption password, we need to add recovery options. One of these would be to offer to print the master key when the wallet is encrypted. - Qt has built-in support for printing: so it shouldnt be a lot of work to implement. - The decryption dialog and the change password dialog should accept this master key as well as the provided password (or, maybe better, but more work, add a dedicated "Recover wallet" option). - It should be made difficult to write the master key to a file or copy-paste it, as thats risky. Options for the key format would be base58 or hex, but I think hex is best here as there is no confusion between capitals and small letters. It will be a long string of 64 characters (512 bits) but heh, at least that discourages using the recovery key except for recovery :-) Another option would be to use words from a dictionary. This is easier to type but would result in an even longer string.	https://api.github.com/repos/bitcoin/bitcoin/issues/1666	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1666/comments	2012-08-09T15:08:30Z	None
1663	open	osmosis79	bitcoin-0.6.3-linux 64bit Only occurs with an old wallet file. Msg about upgrading wallet format appears. Use of -upgradewallet flag doesnt change result. At one point the wallet did actually load, but the dates on transactions appeared corrupted, with old transactions showing todays date. ************************ EXCEPTION: 11DbException Db::open: Invalid argument bitcoin in Runaway exception bitcoin-qt: /usr/include/boost/thread/pthread/mutex.hpp:50: void boost::mutex::lock(): Assertion `!pthread_mutex_lock(&m) failed. Aborted (core dumped)	https://api.github.com/repos/bitcoin/bitcoin/issues/1663	6	https://api.github.com/repos/bitcoin/bitcoin/issues/1663/comments	2012-08-08T17:47:09Z	None
1662	open	vcaxx	While calling getbalance or getbalance * returns the current available balance, getbalance accountName returns the amount of all received coins to the given account. This is inconsistent and in my opinion is a bug. If it is intended behavior, than it is confusing and the command should be changed to something like gettotalreceived accountName. I compiled version from github few days ago on Kubuntu. getinfo returns version 69900	https://api.github.com/repos/bitcoin/bitcoin/issues/1662	5	https://api.github.com/repos/bitcoin/bitcoin/issues/1662/comments	2012-08-08T16:24:34Z	None
1653	open	gmaxwell	Related to Issue #1637 : There should be an ability to mark some private keys as frozen so they wont be used for anything. It would be additionally useful to have a key both frozen and neutered, so that its effectively watch only and the data isnt even in the wallet. This can be used to avoid contamination from commingled inputs, to set aside special inputs that are to be used in contracts, or to create watching only wallets for improved security.	https://api.github.com/repos/bitcoin/bitcoin/issues/1653	3	https://api.github.com/repos/bitcoin/bitcoin/issues/1653/comments	2012-08-06T01:48:40Z	None
1647	open	luke-jr	**Status: Passes unit tests, and seems to work** Consider parent transactions in the "cost" of child transactions until confirmed, and confirm them together This is the part of #1240 that left out of #1590 since he felt it belonged in a separate commit/pullreq.	https://api.github.com/repos/bitcoin/bitcoin/issues/1647	13	https://api.github.com/repos/bitcoin/bitcoin/issues/1647/comments	2012-08-01T22:43:58Z	None
1643	open	dooglus	Take a look at [transaction ce9c9afee7b3dd1deebdc49ceb1560d2771acb4cd0a4725042beecde726a3463](http://blockchain.info/tx-index/14216990). He was trying to send 0.0011 BTC, and was charged 0.0445 in fees. Thats a 4045% charge. [According to the user](https://bitcointalk.org/index.php?topic=77870.msg1071052#msg1071052), there were "a lot of better fitting inputs". The coin selection code doesnt attempt to minimise fees. Perhaps it should. The transaction spent the following outputs: 571 single satoshis, plus these 15 amounts which sum to 0.05559429: 0.00007550 0.00009679 0.00011887 0.00014177 0.00019014 0.00042293 0.00045708 0.00049249 0.00056730 0.00134063 0.00178897 0.00187366 0.00196149 0.01070019 0.03536648 If just the last of those 15 was used, the fee would have been either 0.0005 or 0.	https://api.github.com/repos/bitcoin/bitcoin/issues/1643	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1643/comments	2012-08-01T19:47:01Z	None
1637	open	gmaxwell	Right now its really easy to stomp on yourself when using the rawtransactions api. For example, you write a transaction with some inputs of yours, you pass it off to another party to do $whatever, etc... and in the meantime you send some funds and those inputs get used out from under you. Having a lock /unlock txid:vout| [comment] that prevents automatic coin selection from taking the inputs would solve that neatly.	https://api.github.com/repos/bitcoin/bitcoin/issues/1637	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1637/comments	2012-07-29T06:07:23Z	None
1629	open	sjuxax	When bitcoin-qts "over the size limit" warning is triggered and an additional transaction fee is suggested, the client currently gives the options of "continue" or "cancel". This is problematic because, as I understand it, the bitcoin network does not truly mandate fees, particularly not in the amount shown (which is sometimes egregious), and a user could continue to submit the transaction and wait for a miner to process without the additional suggested fee. The dialog should be modified to allow the user to send the coins without forcing attachment of bitcoin-qts suggested fee. See for more discussion on this (at this point, thread is over a year old).	https://api.github.com/repos/bitcoin/bitcoin/issues/1629	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1629/comments	2012-07-24T10:34:41Z	None
1625	open	Diapolo	Im using current master with own modifications to the code as a testing playground (I did not change any IPv6 networking code), just pull #1615 is somehow net-related. When doing a full blockchain download with -onlynet="IPv6", I get the following exception: <pre> ************************ EXCEPTION: St12out_of_range CInv::GetCommand() : type=3 unknown type C:\Users\Diapolo\bitcoin.Qt\release\bitcoin-qt.exe in ProcessMessages() </pre> Part of the log before shows always this: <pre> received: inv (73 bytes) </pre> Afterwards this is always the same: <pre> ProcessMessage(inv, 73 bytes) FAILED </pre> Most messages show inv, 73 bytes, only some are with different sizes (4285 bytes, 325 bytes and 37 bytes). The first occurence is at block height=48000, then height=64688, height=84688, height=116771 ... (~25 exceptions until the chain is up to date). When doing the same initial blockchain download (just wallet.dat in datadir) with -onlynet="IPv4" not a single of these exceptions occurs, which leads me to believe there is a glitch in the IPv6 code or a strange behaving IPv6 node Im connected to.	https://api.github.com/repos/bitcoin/bitcoin/issues/1625	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1625/comments	2012-07-23T17:41:19Z	None
1613	open	weex	If a transaction lists more than one output going to the same address, there is no way to distinguish those outputs in the bitcoind json output. This issue is to propose that txout index be added to the data listed for each transaction output shown by listtransactions.	https://api.github.com/repos/bitcoin/bitcoin/issues/1613	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1613/comments	2012-07-20T05:15:18Z	None
1583	open	luke-jr	Accepts the transaction into mined blocks at a higher (or lower) priority	https://api.github.com/repos/bitcoin/bitcoin/issues/1583	18	https://api.github.com/repos/bitcoin/bitcoin/issues/1583/comments	2012-07-11T18:54:17Z	None
1561	open	TheBlueMatt	Both (and maybe more) call OpenNetworkConnection, which touches vnThreadsRunning[THREAD_OPENCONNECTIONS]	https://api.github.com/repos/bitcoin/bitcoin/issues/1561	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1561/comments	2012-07-05T19:38:45Z	None
1550	open	TheBlueMatt	About boost::thread_specific_ptr: "Note: on some platforms, cleanup of thread-specific data is not performed for threads created with the platforms native API. On those platforms such cleanup is only done for threads that are started with boost::thread unless boost::on_thread_exit() is called manually from that thread." Thus the lockstack object in sync.cpp may never be deleted. This is only really an issue due to recent RPC changes where long-running nodes may have seen many, many RPC threads.	https://api.github.com/repos/bitcoin/bitcoin/issues/1550	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1550/comments	2012-07-03T01:38:14Z	None
1535	open	luke-jr	If I interrupt CWallet::AddToWallet at the start, while it is adding a new coinbase transaction (or probably any first-seen-in-block) - for example with "quit" in GDB or SIGKILL - after restarting, Bitcoin-Qt (and bitcoind?) will not pick up on this transaction even after completely catching up. -rescan is then needed to see it.	https://api.github.com/repos/bitcoin/bitcoin/issues/1535	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1535/comments	2012-06-29T16:49:43Z	None
1505	open	grarpamp	Specifying syntax in bitcoin.conf or cmdline on 0.6.x... # ok upgradewallet= upgradewallet=<0..100k...> # crash upgradewallet ************************ EXCEPTION: N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_15program_options14invalid_syntaxEEEEE unrecognized line in upgradewallet bitcoin in AppInit() terminate called after throwing an instance of boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost ::program_options::invalid_syntax> > what(): unrecognized line in upgradewallet [New Thread 28801140 (LWP 100948/initial thread)] (gdb) bt #0 0x2873e9a7 in kill () from /lib/libc.so.7 #1 0x2852d397 in raise () from /lib/libthr.so.3 #2 0x2873d4da in abort () from /lib/libc.so.7 #3 0x285a0880 in __gnu_cxx::__verbose_terminate_handler () from /usr/lib/libstdc++.so.6 #4 0x285a508a in std::set_unexpected () from /usr/lib/libstdc++.so.6 #5 0x285a50d2 in std::terminate () from /usr/lib/libstdc++.so.6 #6 0x285a4f58 in __cxa_rethrow () from /usr/lib/libstdc++.so.6 #7 0x0816ceda in PrintException (pex=0x288590d0, pszThread=0x82f4f1a "AppInit()") at util.cpp:795 #8 0x08088695 in AppInit (argc=2, argv=0xbfbfedd8) at init.cpp:127 #9 0x080886dd in main (argc=Cannot access memory at address 0x3) at init.cpp:110	https://api.github.com/repos/bitcoin/bitcoin/issues/1505	8	https://api.github.com/repos/bitcoin/bitcoin/issues/1505/comments	2012-06-22T20:51:25Z	None
1491	open	darsie	Hi! I set up bitcoin for the first time. Someone gave me 0.01 btc. As a test I wanted to send 1 ubtc. The client said: "This transaction is over the size limit. You can still send it for a fee of 0.0005, which goes to the nodes that process your transaction and helps to support the network. Do you want to pay the fee?" The example transaction in has 378 bytes. I dont believe my transaction was over 10.000 bytes. Rather I believe, the fee was enforced because the output was smaller than 0.01 btc. Please write the correct reason for the fee when asking for the fee.	https://api.github.com/repos/bitcoin/bitcoin/issues/1491	3	https://api.github.com/repos/bitcoin/bitcoin/issues/1491/comments	2012-06-20T18:14:10Z	None
1473	open	bitcoinuser	I would like to see satoshi client with auto update function, something like how firefox works. Obs: I run the client from the bin of tgz files. So I would like to have auto update this way too.	https://api.github.com/repos/bitcoin/bitcoin/issues/1473	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1473/comments	2012-06-16T02:51:25Z	None
1467	open	TheBlueMatt	If you find a block (esp p2pool users who are often behind low-upload connections) you simultaneously announce it to all peers, resulting in increased upload time and in some cases, possibly even increased orphan rate. Bitcoin should ideally stagger uploads so that it can start getting new blocks out to the network quickly.	https://api.github.com/repos/bitcoin/bitcoin/issues/1467	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1467/comments	2012-06-14T23:55:53Z	None
1436	open	mikehearn	This isnt a big deal except that it breaks an assumption in bitcoinj occasionally, but if an alert is received from a peer it will be relayed to new peers that didnt see it yet even if there has been no version negotiation. IMHO ver/verack should be the first traffic on a newly created connection and other traffic should be delayed until after it completes. Probably the fix is as simple as ignoring peers that have no version set in the "alert" handling code.	https://api.github.com/repos/bitcoin/bitcoin/issues/1436	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1436/comments	2012-06-09T21:49:07Z	None
1428	open	sgornick	I believe the vector76 attack (also referred to as the "one confirmation attack", which is a variation of the Finney attack) can easily lead to a subsequent situation that is, at best, an annoyance but to some degree it may result in causing a denial of service for Bitcoin users. The problem is that coin selection in the client can choose a coin that only has only one confirmation. At the same time though, the vector76 attack makes it possible that a transaction will exist with at least one confirmation but will never confirm. The result is that the spend transaction chooses a coin from a transaction whose block will eventually be orphaned and that spend transaction will never confirm. This is an annoyance to the user because the client does not (yet) have a mechanism to clear these 0/unconfirmed spend transactions that will never confirm. How this could result in a denial of service though is because there is a period of time that the user believes a spend transaction has been made but because the transaction for that payment wont get relayed by any other nodes, as it is invalid, the recipient will not receive payment. How this occurs: Bobs bitcoin node is left configured using the default settings and receives incoming traffic on the default port 8333. Evil miner creates a transaction (Trx A) to Bobs address but does not broadcast it. As soon as Evil miner solves a block he waits for a block at the same height to be solved. Immediately on learning this, Evil miner sends his block directly to (and only to) Bobs node. Evil miner then immediately creates another transaction (Trx B) that double spends the coin used in Trx A and broadcasts Trx B to well connected nodes. Shortly after, Bob then makes a payment to Alice (Trx C). Bob doesnt keep much of a balance, so the coin that was chosen by the client happened to be from Trx A which came from Evil miner and has one confirmation yet. Because Trx B got a head start by being sent through a well connected node, Trx A from Bobs node wont get propagated. Eventually the blockchain will include Trx B in the next block and Bobs node will drop Trx A back to 0/unconfirmed. Bobs Trx C to Alice will never confirm then. Alice might think Bob is a scammer as the payment that Bob claims to have made doesnt arrive and will not get included in any blocks. It is ironic that only Bobs node is either the sole ignorant node (or one of the few nodes) that doesnt realize that Trx A is invalid. It will be in this state until next block gets mined, -- so on average there will be a ten minute span that Bobs client remains ignorant and is willing to spend that invalid coin. Bob could have lessened the chance of this occurring by following the recommended step of not listening (-nolisten) and explicitly connecting only to a well connected node (-connect=) but if even Bob didnt do that the Bitcoin client could handle this situation a little better. Apparently the future plans for how the Bitcoin.org client deals with these 0/unconfirmed spend transactions is to have the client temporarily disable them and eventually to delete them when the conflict is buried deep in the chain. There could, however, be a configurable option added to prevent the spend transaction from occurring in the first place. If there was a configuration setting that added a restriction to coin selection (i.e., only choose coins with N or more confirmations), then this situation could be averted entirely. Another approach, I suppose, would be to for the client to retain in the memory pool any transactions that it rejected (e.g., Trx B) and to then not consider using any coins where it knows there is at least one conflict until after the coin with a conflict has confirmed. Now the normal situation where Evil miner might be motivated to do this is if Bob delivers the goods after seeing just one confirmation (or on 0/unconfirmed even). This is not the recommended practice, of course, as six confirmations is the recommended level for merchants who transact with untrusted parties or where there is no recourse (e.g., exchange for Dwolla or Liberty Reserve, for example). But if Evil miners intention is to be disruptive to Bob such that Bobs service is harmed, then this attack is effective. (And inexpensive, say if the transaction is an exchange where little or no value is lost -- such as a deposit of bitcoins to an account on Bobs service and then a later withdrawal in which Bob assesses no fees.) If Bob could configure the client to only spend coins that have confirmed (e.g., those with six confirmations or more), the scenario where Bob makes spend transactions that will not confirm he could prevent this scenario of him creating invalid payments from occurring. The vector76 attack is described here: and further here	https://api.github.com/repos/bitcoin/bitcoin/issues/1428	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1428/comments	2012-06-06T19:40:11Z	None
1401	open	rebroad	bitcoin-qt.pro as it is doesnt let Qt Creator create a working Makefile. Currently the creation of build.h has to be done manually, and the "genbuild.depends = FORCE" line needs the FORCE removing.	https://api.github.com/repos/bitcoin/bitcoin/issues/1401	44	https://api.github.com/repos/bitcoin/bitcoin/issues/1401/comments	2012-05-31T02:49:20Z	None
1385	open	SergioDemianLerner	It is possible in many ways to force the application to dump to debug.log too much information for too little bytes sent. For example, sending a message header starting with an incorrect byte, and then sending a header containing an incorrect command padding we can force the application dump the following messages: \n\nPROCESSMESSAGE SKIPPED 1 BYTES\n\n \n\nPROCESSMESSAGE: ERRORS IN HEADER 1234567890\n\n\n Thats 85 bytes dumped for only 25 bytes sent by the wire. By sending the same chunk of bytes over and over, and assuming a connection with a bandwidth of 64 Kbytes/sec one can fill 18 Gb of victims hard disk in a day. The vulnerability is not severe since each time the application restarts the log file is shrank, but still if the application is left running headless the attacker can fill an entire 500 Gb HD in a month. There are other places in the code (such as in the processing of the command "getdata") where too much information is dumped with little data sent. On possible solution is to reduce some of the log messages sizes. Other possible solution is to generate a DoS forced disconnection if too much info is dumped by actions originated from a client node. Best regards! Sergio.	https://api.github.com/repos/bitcoin/bitcoin/issues/1385	3	https://api.github.com/repos/bitcoin/bitcoin/issues/1385/comments	2012-05-24T03:11:59Z	None
1279	open	msva	I think, it will be nice to separate GUI (at least, Qt. Dont know, it wxWidgets one still alive) from bitcoind and dont build "combined" binary. Instead of it, I think, It will be nice to add a way to set address (with IPv6 support, btw) and port where user wants to connect. And set default address value to "localhost" (assumed user installed bitcoind and gui on the same machine by default). But this way will add possibility (for advanced users) to set up bitcoind somewhere far far away and use only GUI part on localhost ;)	https://api.github.com/repos/bitcoin/bitcoin/issues/1279	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1279/comments	2012-05-12T23:33:53Z	None
1242	open	Folko85	After the update, the program does not appear in the system tray. Also there is no global menu.	https://api.github.com/repos/bitcoin/bitcoin/issues/1242	37	https://api.github.com/repos/bitcoin/bitcoin/issues/1242/comments	2012-05-09T14:04:09Z	None
1231	open	sgaltsev	This is the bug that has been in client and daemon since very beginning. Intention of setaccount command is essentially to rename existing account. For some reason, from very beginning, it was reallocating old label to some other address. Can we get rid of this? There is no other means to rename the label using XMLRPC without creating artifacts. Alternatively, is it possible to introduce another XMLRPC command designed to rename label on account? I need to be able to not keep existing one. Value setaccount(const Array& params, bool fHelp) { if (fHelp || params.size() < 1 || params.size() > 2) throw runtime_error( "setaccount <bitcoinaddress> <account>\n" "Sets the account associated with the given address."); CBitcoinAddress address(params[0].get_str()); if (!address.IsValid()) throw JSONRPCError(-5, "Invalid bitcoin address"); string strAccount; if (params.size() > 1) strAccount = AccountFromValue(params[1]); // Detect when changing the account of an address that is the unused current key of another account: //if (pwalletMain->mapAddressBook.count(address)) //{ // string strOldAccount = pwalletMain->mapAddressBook[address]; // if (address == GetAccountAddress(strOldAccount)) // GetAccountAddress(strOldAccount, true); //} pwalletMain->SetAddressBookName(address, strAccount); return Value::null; }	https://api.github.com/repos/bitcoin/bitcoin/issues/1231	6	https://api.github.com/repos/bitcoin/bitcoin/issues/1231/comments	2012-05-09T04:22:08Z	None
1213	open	TheBlueMatt	push_lock -> printf -> OutputDebugStringF -> GetDataDir -> LOCK -> push_lock	https://api.github.com/repos/bitcoin/bitcoin/issues/1213	6	https://api.github.com/repos/bitcoin/bitcoin/issues/1213/comments	2012-05-06T23:43:02Z	None
1195	open	rebroad	Extract from debug.log:- 04/05/12 22:45:11 askfor tx 6486a05 at 22:45:10 at 78.47.187.252:8333 04/05/12 22:45:11 getdata tx 6486a053d065fb7f94fb to 78.47.187.252:8333 04/05/12 22:45:11 askfor tx 6486a05 at 22:45:21 at p2hwc26zdsrqxiix.onion:8333 04/05/12 22:45:14 txaccept: free tx 6486a053d0 from 78.47.187.252:8333 rejected by rate limiter 04/05/12 22:45:14 askfor tx 6486a05 at 22:45:31 at a57qr3ydpnyntf5k.onion:8333 04/05/12 22:45:14 askfor tx 6486a05 at 22:45:41 at sjdntqu5roj4q6lo.onion:8333 04/05/12 22:45:14 askfor tx 6486a05 at 22:45:51 at 7hxvg2lvr2ashzli.onion:8333 04/05/12 22:45:16 askfor tx 6486a05 at 22:46:01 at siqdznszjf4e6v5j.onion:8333 04/05/12 22:45:20 askfor tx 6486a05 at 22:46:11 at 204.62.15.140:8333 04/05/12 22:45:21 getdata tx 6486a053d065fb7f94fb to p2hwc26zdsrqxiix.onion:8333 04/05/12 22:45:22 askfor tx 6486a05 at 22:45:31 at 88.80.6.187:8333 04/05/12 22:45:26 txaccept: free tx 6486a053d0 from p2hwc26zdsrqxiix.onion:8333 rejected by rate limiter 04/05/12 22:45:31 getdata tx 6486a053d065fb7f94fb to a57qr3ydpnyntf5k.onion:8333 04/05/12 22:45:31 getdata tx 6486a053d065fb7f94fb to 88.80.6.187:8333 04/05/12 22:45:31 txaccept: free tx 6486a053d0 from 88.80.6.187:8333 rejected by rate limiter 04/05/12 22:45:32 txaccept: free tx 6486a053d0 from a57qr3ydpnyntf5k.onion:8333 rejected by rate limiter 04/05/12 22:45:39 askfor tx 6486a05 at 22:45:41 at 69.164.196.4:8333 04/05/12 22:45:41 getdata tx 6486a053d065fb7f94fb to 69.164.196.4:8333 04/05/12 22:45:41 getdata tx 6486a053d065fb7f94fb to sjdntqu5roj4q6lo.onion:8333 04/05/12 22:45:41 txaccept: free tx 6486a053d0 from 69.164.196.4:8333 rejected by rate limiter 04/05/12 22:45:43 txaccept: free tx 6486a053d0 from sjdntqu5roj4q6lo.onion:8333 rejected by rate limiter 04/05/12 22:45:51 getdata tx 6486a053d065fb7f94fb to 7hxvg2lvr2ashzli.onion:8333 04/05/12 22:45:55 txaccept: free tx 6486a053d0 from 7hxvg2lvr2ashzli.onion:8333 rejected by rate limiter 04/05/12 22:46:01 getdata tx 6486a053d065fb7f94fb to siqdznszjf4e6v5j.onion:8333 04/05/12 22:46:03 txaccept: free tx 6486a053d0 from siqdznszjf4e6v5j.onion:8333 rejected by rate limiter 04/05/12 22:46:11 getdata tx 6486a053d065fb7f94fb to 204.62.15.140:8333 04/05/12 22:46:15 txaccept: free tx 6486a053d0 from 204.62.15.140:8333 rejected by rate limiter This is a grep of debug.log for this one transaction, but the happens with blocks also. This could become more of a problem in the future as the network grows and the same transactions is gossiped around the network for a while. Is it worth creating a memory pool of rejected blocks and transactions? Perhaps keeping only their hash rather than the whole block or transaction? This way, bandwidth can be saved for all nodes (at some small expense of memory storing the "ignore list").	https://api.github.com/repos/bitcoin/bitcoin/issues/1195	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1195/comments	2012-05-04T22:53:05Z	None
1185	open	rebroad	in main.cpp, there is a section that adds to the "askfor" queue a block where AlreadyHave() returns true. Then later when the code retrieves the queue, it erases it without actioning it due to AlreadyHave() returning true. Which bit of code is incorrect? The adding to the queue part, or the actioning the queue part?	https://api.github.com/repos/bitcoin/bitcoin/issues/1185	4	https://api.github.com/repos/bitcoin/bitcoin/issues/1185/comments	2012-05-02T18:55:47Z	None
1184	open	rebroad	This is a feature request, and also a BIP, but curious to hear feedback at this stage. To summarise, if for some reason, a user is using an old version of their wallet.dat, and without realising they make a transaction which tries to use coins already spent, currently the client doesnt alert the user of what they have done, they will simply (as I understand it) see that the transaction takes forever to confirm. (please correct me if I am incorrect). My suggestion is that when a node sees such invalid transactions, rather than simply ignore them, it sends a message back to the originating node to let them know it was invalid. This should only be necessary in situations where the transaction creating node isnt up to date on the block chain, otherwise the originating wallet should presumeably already alert the user, or ideally, have corrected their balance before they even tried to spend the coins. (A -rescan, IMHO, should do this, but, in my experience, it doesnt). edit@laanwj: clarified title	https://api.github.com/repos/bitcoin/bitcoin/issues/1184	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1184/comments	2012-05-02T18:32:56Z	None
1168	open	luke-jr	See 3 posts on the subject at	https://api.github.com/repos/bitcoin/bitcoin/issues/1168	3	https://api.github.com/repos/bitcoin/bitcoin/issues/1168/comments	2012-04-30T16:08:14Z	None
1164	open	rebroad	Wallet balance is incorrect. I have totalled the transactions, and these match the total of the amounts in my bitcoin addresses. The balance is showing much more than both of these, so I know it is incorrect. It first went above the correct value upon running a bitcoin-qt -rescan	https://api.github.com/repos/bitcoin/bitcoin/issues/1164	10	https://api.github.com/repos/bitcoin/bitcoin/issues/1164/comments	2012-04-29T19:22:42Z	None
1162	open	rebroad	I would like to be able to have different balances displayed based upon different groups of bitcoin addresses. It would also be nice to be able to see activity for bitcoin addresses for which I do not hold the private key (or if it is stored only offline) - this would enable me for example, to see transactions to addresses hosted by ewallets. This feature would especially be useful if combined with another feature [raise audible notification when n (e.g. 6) confirmations received on a transaction].	https://api.github.com/repos/bitcoin/bitcoin/issues/1162	3	https://api.github.com/repos/bitcoin/bitcoin/issues/1162/comments	2012-04-28T21:51:30Z	None
1158	open	rebroad	It was suggested to raise this issue by due to it being an orthogonal issue. Not so much an "issue" but a feature suggestion/request. This would be useful for changing the configuration but without experiencing too much downtime, testing, etc. A standard used by many programs would be to make the software re-parse the config file upon receiving a HUP signal. This would work on unix systems, but on Windows, some other standard is presumably available to triggering this.	https://api.github.com/repos/bitcoin/bitcoin/issues/1158	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1158/comments	2012-04-28T13:53:57Z	None
1157	open	rebroad	Although some code has already been introduced for "misbehaving" nodes, I think this could be further extended. E.g. nodes ignoring getdata requests. So far, this can cause a node to wait 2 minutes before re-asking, but if enough nodes started ignoring getdata requests, this could possibly cause significant detriment to the network. I propose some code that allows nodes to learn the network speed they are operating on, e.g. average times between asking for a tx or a block and receiving one. Then it should be possible to introduce timeouts for nodes which are significantly taking longer than average, and mark them as suspicious (may be that they just have poor network connectivity). This can be particularly of significance when catching up with the blockchain. By learning network speeds, the node can determine whether to download blocks from a number of nodes at once, rather than just one at a time, and also whether to upload blocks to many nodes at once or just one at a time.	https://api.github.com/repos/bitcoin/bitcoin/issues/1157	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1157/comments	2012-04-28T13:50:39Z	None
1153	open	freewil	The second param of `listsinceblock` appears to be broken as it doesnt seem to affect the output for my scenario. Heres some example output from a private testnet: `$ bitcoind -datadir=1 listsinceblock 00000000e1ca9ecc09bbcd03c0c2d208424e09af13f1cc7772aebf5db8268112` ```json { "transactions" : [ { "account" : "", "category" : "immature", "amount" : 50.00000000, "confirmations" : 1, "blockhash" : "00000000a2638ab449ccc10a3af88c27144a90c6db8f0ba30316b4a24064512a", "blockindex" : 0, "txid" : "c7a498a50d7cd8af1c6f5e1446772dd0575d1f4472524634229bb0b05caa488b", "time" : 1335499077 } ], "lastblock" : "00000000a2638ab449ccc10a3af88c27144a90c6db8f0ba30316b4a24064512a" } ``` Everything appears to be ok there, now if you set the second param, `target-confirmations` to 2, you would expect that transaction to not appear: `bitcoind -datadir=1 listsinceblock 00000000e1ca9ecc09bbcd03c0c2d208424e09af13f1cc7772aebf5db8268112 2` ```json { "transactions" : [ { "account" : "", "category" : "immature", "amount" : 50.00000000, "confirmations" : 1, "blockhash" : "00000000a2638ab449ccc10a3af88c27144a90c6db8f0ba30316b4a24064512a", "blockindex" : 0, "txid" : "c7a498a50d7cd8af1c6f5e1446772dd0575d1f4472524634229bb0b05caa488b", "time" : 1335499077 } ], "lastblock" : "00000000e1ca9ecc09bbcd03c0c2d208424e09af13f1cc7772aebf5db8268112" } ```	https://api.github.com/repos/bitcoin/bitcoin/issues/1153	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1153/comments	2012-04-27T04:20:02Z	None
1149	open	davout	When I list transactions by addresses, it would be very useful to have the TX ID in the returned JSON data.	https://api.github.com/repos/bitcoin/bitcoin/issues/1149	0	https://api.github.com/repos/bitcoin/bitcoin/issues/1149/comments	2012-04-26T07:43:22Z	None
1137	open	Diapolo	Currently the buttons like QMessageBox::Abort or QMessageBox::Cancel are english and are untranslatable, this should be changed for a even better UX. I only found this one: Is there any possibility to do this globally? Edit clarified title, title was "untranslated Qt message box button texts (not displayed in selected language)"	https://api.github.com/repos/bitcoin/bitcoin/issues/1137	12	https://api.github.com/repos/bitcoin/bitcoin/issues/1137/comments	2012-04-22T15:15:21Z	None
1073	open	dooglus	I just tried to send funds from a remote wallet back to my local one, but miscalculated how much to send to allow for the transaction fee and ended up with sub-cent change in the remote wallet. I decided to use the new dumpprivkey and importprivkey commands to bring the sub-cent change home. After running importprivkey and waiting for it to finish, I can see the coin in the coincontrol tab, but its not showing up in either overview or transactions. I shut down and restarted the client and now see it in both overview and transactions. Is it to be expected that I should have to restart the client before pre-existing transactions on imported private keys show up?	https://api.github.com/repos/bitcoin/bitcoin/issues/1073	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1073/comments	2012-04-10T03:21:43Z	None
1057	open	dooglus	In the code which selects which coins to use, the following appears: if (nPass == 0 ? rand() % 2 : !vfIncluded[i]) but rand() is never seeded. Should we use GetRandInt(2) instead to get unpredictable results?	https://api.github.com/repos/bitcoin/bitcoin/issues/1057	4	https://api.github.com/repos/bitcoin/bitcoin/issues/1057/comments	2012-04-07T17:18:36Z	None
1044	open	laanwj	In this case, the **rpcport** argument is silently ignored: -testnet -nolisten -server -connect 192.168.1.11 -rpcport=12345 However, when adding a = after connect, it works, i.e. -testnet -nolisten -server -connect=192.168.1.11 -rpcport=12345 It could be that the first is simply wrong; in that case, it should probably show an error message.	https://api.github.com/repos/bitcoin/bitcoin/issues/1044	4	https://api.github.com/repos/bitcoin/bitcoin/issues/1044/comments	2012-04-05T18:14:17Z	None
1040	open	gmaxwell	We have a manpage in ./contrib/debian/manpages/bitcoind.1 (surprise!), but its very out of date.	https://api.github.com/repos/bitcoin/bitcoin/issues/1040	1	https://api.github.com/repos/bitcoin/bitcoin/issues/1040/comments	2012-04-05T00:16:29Z	None
1034	open	jevonx	Nodes should broadcast a "dspend" message when they see a double spend, alerting the payee to show the transaction as -1 confirmations until it reaches 6 confirmations. ##### BENEFITS In [Bitcoin snack machine (fast transaction problem)](https://bitcointalk.org/index.php?topic=423.msg3819#msg3819), Satoshi estimated that by listening for double spends, it would be safe enough for POS locations and vending machines to accept unconfirmed transactions in 10 seconds or less. With dspend alerts, every node in the network would be a listening post. Double spend race attacks would be exposed within seconds. This would remove the argument that the 10 minute confirm time will keep Bitcoin from reaching wide adoption because it cant (convincingly) serve a major category of use cases. It would also increase security even for users who wait for confirmations. If a double spend is known to be floating around, its fairly risky even with 1 confirmation. Chain reorgs occur periodically due to two miners finding a block at the same time. If a reorg occurs, it is very possible the other fork had the other spend. Conversely, 1 confirmation is much safer if, during that time, the whole network was listening for double spends and didnt hear one. The additional layer of security reinforces the primary security of the block chain. This improvement request is not urgent, but would be nice to have to keep the need for instant payments from pushing people to resort to the trusted 3rd party model (think mybitcoin). ##### WHEN TO SEND A "dspend" MESSAGE If a node receives a second spend of a transaction in the tx pool, it should broadcast a "dspend" warning. The dspend message contains a copy of both transactions as proof that the same outpoint was signed twice. Proposed message structure: CTransaction CTransaction ##### WHAT TO DO WHEN A "dspend" MESSAGE IS RECEIVED If a node receives a dspend message for a transaction for which it is the payee, it should represent the transaction as -1 confirmations until it reaches 6 confirmations. In the UI, the transaction could be shown in red. In the JSON-RPC interface, -1 confirmations would warn automated systems not to credit the transaction yet. -1 confirmation coins should not be counted in the available balance or used for spending. It looks like this could all be done in one place by making CMerkleTx::GetDepthInMainChain return -1. Transactions flagged by dspend arent necessarily bad. If they win out, they can still grow up to be fully trusted. It only means that waiting the full 6 confirmations is really mandatory. In the hypothetical case of intentionally double spending your own transaction to increase the fee, it would be necessary for the recipient to wait for full confirmation to make sure which version is safe to spend. The dspend feature would automatically detect this case and do the extra wait. ##### ANALYSIS Old clients are not affected. They ignore the dspend message. dspend broadcasts will have no trouble propagating once at least 25% of the network starts relaying them. (25% is 2 out of 8 connections relaying, spreads exponentially, and other nodes will start it again if it fizzles out) There are NO changes to the way transactions are processed. ##### BANDWIDTH AND DoS ANALYSIS dspend messages should be rare. Double spends can only cause one dspend broadcast per outpoint. Once a node has a dspend for an outpoint, it will not relay another. One proof is enough. Nodes do not need to keep dspend messages after they have relayed them. They just need to keep a list (STL set or map) in memory of outpoints that have been proven double spent. Old entries can be purged after 6 confirmations.	https://api.github.com/repos/bitcoin/bitcoin/issues/1034	8	https://api.github.com/repos/bitcoin/bitcoin/issues/1034/comments	2012-04-04T17:22:22Z	None
1011	open	davout	When I import a private key, other JSON-RPC calls seem frozen and return a result only when the private key import JSON-RPC call has finished. This makes the feature hardly usable when used in web app or other shared wallet contexts. EDIT : Tested on latest master	https://api.github.com/repos/bitcoin/bitcoin/issues/1011	2	https://api.github.com/repos/bitcoin/bitcoin/issues/1011/comments	2012-03-29T20:19:20Z	None
1005	open	gavinandresen	The client id in version messages are specifically vague so potential attackers cant easily tell exactly what flavor of Bitcoin youre running. But we can, and should, pass full information to the Alert system, so we can send alerts targeted to just Windows Bitcoin-Qt users. I think just platform (Linux/OSX/Windows) and Qt-or-not.	https://api.github.com/repos/bitcoin/bitcoin/issues/1005	4	https://api.github.com/repos/bitcoin/bitcoin/issues/1005/comments	2012-03-28T23:05:53Z	None
993	open	gavinandresen	Install and then run Bitcoin-Qt. Then quit and uninstall. RESULT: C:\Program Files\Bitcoin\locale folder is left behind. RESULT: %APPDATA%\Bitcoin\addr.dat, .lock, db.log, debug.log, etc left behind Id expect everything except wallet.dat to be removed (and it would be nice if there was an uninstall checkbox, NOT checked by default, to remove the wallet, too).	https://api.github.com/repos/bitcoin/bitcoin/issues/993	6	https://api.github.com/repos/bitcoin/bitcoin/issues/993/comments	2012-03-26T16:56:51Z	None
957	open	dooglus	I was trying to import a private key into my wallet, and kept getting a generic error message: $ bitcoind importprivkey $x mywallet error: {"code":-4,"message":"Error adding key to wallet"} $ I thought maybe the key I was using was in the wrong format, or that my wallet already had the key imported. But it turned out I just needed to supply the wallet passphrase first: $ bitcoind walletpassphrase "$y" 60 $ bitcoind importprivkey $x mywallet $ It would be better if the error message could be more specific: "Error adding key to locked encrypted wallet", for example. If I try to add the key again, I get the same error message. This time Id prefer to see "Key already exists in wallet".	https://api.github.com/repos/bitcoin/bitcoin/issues/957	1	https://api.github.com/repos/bitcoin/bitcoin/issues/957/comments	2012-03-20T02:04:27Z	None
944	open	guru777	Hi, I have been doing tests with bitcoind version 0.6003 And for mosts tasks it works ok, however when I run a shopping cart, the bidcoind daemon crashes after a while, no money is lost, no addresses are lost, it simply crashes after about 1 hour of use, if it is being used lightly manual transactions and no shopping cart, it works fine. This bug can be reproduced by running the shoppping cart oscommerce and the weex module, however I do not think the bug is in the shopping cart module since all it is doing is using the same bitcoind daemon to check transactions repeatedly, and most of the time it works, if fails when the bitcoind crashes. There is another minor bug, that at times it takes a long time to do a simple transaction like bitcoind getinfo, most of the time it takes less than a second, but randomly sometimes takes almost a minute. To simply debuging, I compiled bitcoind without optimization, and debug enabled: Here is the console error log at crash, not the name of the daemon was bitcoind6003-notoptized-debug, meaning it has no optimizations and debug enabled: # ./bitcoind6003-notoptized-debug -server -debug *** glibc detected *** ./bitcoind6003-notoptized-debug: malloc(): smallbin double linked list corrupted: 0x0000000004491930 *** ======= Backtrace: ========= [0x8b6c12] [0x8ba39f] [0x8bb838] [0x87ee6d] [0x85ddf9] [0x51f4a3] [0x85e9bb] [0x5e4e22] [0x53b69a] [0x53e25e] [0x53c58f] [0x53c568] ======= Memory map: ======== 00400000-00ad6000 r-xp 00000000 08:01 58997057 /usr/local/sbin/bitcoind6003-notoptized-debug 00cd6000-00cf6000 rw-p 006d6000 08:01 58997057 /usr/local/sbin/bitcoind6003-notoptized-debug 00cf6000-0452d000 rw-p 00cf6000 00:00 0 [heap] 3778a00000-3778a1c000 r-xp 00000000 08:01 54919481 /lib64/ld-2.5.so 3778a1c000-3778c1b000 ---p 0001c000 08:01 54919481 /lib64/ld-2.5.so 3778c1b000-3778c1c000 r--p 0001b000 08:01 54919481 /lib64/ld-2.5.so 3778c1c000-3778c1d000 rw-p 0001c000 08:01 54919481 /lib64/ld-2.5.so 3778e00000-3778f4e000 r-xp 00000000 08:01 54919515 /lib64/libc-2.5.so 3778f4e000-377914d000 ---p 0014e000 08:01 54919515 /lib64/libc-2.5.so 377914d000-3779151000 r--p 0014d000 08:01 54919515 /lib64/libc-2.5.so 3779151000-3779152000 rw-p 00151000 08:01 54919515 /lib64/libc-2.5.so 3779152000-3779157000 rw-p 3779152000 00:00 0 3783c00000-3783c11000 r-xp 00000000 08:01 54919520 /lib64/libresolv-2.5.so 3783c11000-3783e11000 ---p 00011000 08:01 54919520 /lib64/libresolv-2.5.so 3783e11000-3783e12000 r--p 00011000 08:01 54919520 /lib64/libresolv-2.5.so 3783e12000-3783e13000 rw-p 00012000 08:01 54919520 /lib64/libresolv-2.5.so 3783e13000-3783e15000 rw-p 3783e13000 00:00 0 7fa38c000000-7fa38c203000 rw-p 7fa38c000000 00:00 0 7fa38c203000-7fa390000000 ---p 7fa38c203000 00:00 0 7fa390276000-7fa39027a000 r-xp 00000000 08:01 54919189 /lib64/libnss_dns-2.5.so 7fa39027a000-7fa390479000 ---p 00004000 08:01 54919189 /lib64/libnss_dns-2.5.so 7fa390479000-7fa39047a000 r--p 00003000 08:01 54919189 /lib64/libnss_dns-2.5.so 7fa39047a000-7fa39047b000 rw-p 00004000 08:01 54919189 /lib64/libnss_dns-2.5.so 7fa39047b000-7fa39057b000 rw-p 7fa39047b000 00:00 0 7fa39057b000-7fa390585000 r-xp 00000000 08:01 54919483 /lib64/libnss_files-2.5.so 7fa390585000-7fa390784000 ---p 0000a000 08:01 54919483 /lib64/libnss_files-2.5.so 7fa390784000-7fa390785000 r--p 00009000 08:01 54919483 /lib64/libnss_files-2.5.so 7fa390785000-7fa390786000 rw-p 0000a000 08:01 54919483 /lib64/libnss_files-2.5.so 7fa3907b2000-7fa3907b3000 ---p 7fa3907b2000 00:00 0 7fa3907b3000-7fa390fb3000 rw-p 7fa3907b3000 00:00 0 7fa390fb3000-7fa390fb4000 ---p 7fa390fb3000 00:00 0 7fa390fb4000-7fa3917b4000 rw-p 7fa390fb4000 00:00 0 7fa3917b4000-7fa3917b5000 ---p 7fa3917b4000 00:00 0 7fa3917b5000-7fa391fb5000 rw-p 7fa3917b5000 00:00 0 7fa391fb5000-7fa391fb6000 ---p 7fa391fb5000 00:00 0 7fa391fb6000-7fa3927b6000 rw-p 7fa391fb6000 00:00 0 7fa3927b6000-7fa3927b7000 ---p 7fa3927b6000 00:00 0 7fa3927b7000-7fa392fb7000 rw-p 7fa3927b7000 00:00 0 7fa392fb7000-7fa392fb8000 ---p 7fa392fb7000 00:00 0 7fa392fb8000-7fa3937b8000 rw-p 7fa392fb8000 00:00 0 7fa3937b8000-7fa3937b9000 ---p 7fa3937b8000 00:00 0 7fa3937b9000-7fa393fb9000 rw-p 7fa3937b9000 00:00 0 7fa393fb9000-7fa393fba000 ---p 7fa393fb9000 00:00 0 7fa393fba000-7fa3947ba000 rw-p 7fa393fba000 00:00 0 7fa3947ba000-7fa3947bb000 ---p 7fa3947ba000 00:00 0 7fa3947bb000-7fa394fbb000 rw-p 7fa3947bb000 00:00 0 7fa394fbb000-7fa394fbc000 ---p 7fa394fbb000 00:00 0 7fa394fbc000-7fa3957f3000 rw-p 7fa394fbc000 00:00 0 7fa3957f3000-7fa3957ff000 rw-s 00000000 08:01 47255424 /root/.bitcoin/__db.006 7fa3957ff000-7fa395e03000 rw-s 00000000 08:01 47255420 /root/.bitcoin/__db.005 7fa395e03000-7fa395e2b000 rw-s 00000000 08:01 47255419 /root/.bitcoin/__db.004 7fa395e2b000-7fa395e6d000 rw-s 00000000 08:01 47255418 /root/.bitcoin/__db.003 7fa395e6d000-7fa395fcb000 rw-s 00000000 08:01 47255416 /root/.bitcoin/__db.002 7fa395fcb000-7fa395fd1000 rw-s 00000000 08:01 47255414 /root/.bitcoin/__db.001 7fa395fd1000-7fa395fd2000 rw-p 7fa395fd1000 00:00 0 7fff9dfbd000-7fff9dfd2000 rw-p 7ffffffea000 00:00 0 [stack] 7fff9dfff000-7fff9e000000 r-xp 7fff9dfff000 00:00 0 [vdso] ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0 [vsyscall] Aborted Has anyone had similar problems with recent versions of bitcoind, and what was done to fix it? After doing some research, it appears that this bug depends on the wallet being used, with a clean new wallet it seems to be fine, however when I used my own wallet that has been around about a years and has gone though many bitcoin updates, I have a feeling is something on my wallet that causes this bug to trigger, and only happens are moderate or heavy use of bitcoind.	https://api.github.com/repos/bitcoin/bitcoin/issues/944	8	https://api.github.com/repos/bitcoin/bitcoin/issues/944/comments	2012-03-17T10:17:23Z	None
935	open	rebroad	Transactions shows amounts in and out, but I think it would be useful to have a column showing the balance history after each transaction.	https://api.github.com/repos/bitcoin/bitcoin/issues/935	2	https://api.github.com/repos/bitcoin/bitcoin/issues/935/comments	2012-03-12T19:42:38Z	None
933	open	TheBlueMatt	Found by etotheipi, likely due to this comment being wrong: This hurts security by making it easier to brute force, but not significantly, should be easily fixable.	https://api.github.com/repos/bitcoin/bitcoin/issues/933	0	https://api.github.com/repos/bitcoin/bitcoin/issues/933/comments	2012-03-12T04:20:22Z	None
888	open	jonassmedegaard	Details here:	https://api.github.com/repos/bitcoin/bitcoin/issues/888	4	https://api.github.com/repos/bitcoin/bitcoin/issues/888/comments	2012-02-23T11:27:40Z	None
835	open	luke-jr	1. Start Bitcoin-Qt with -server enabled 2. bitcoind importprivkey 5KKpXi2Jzq5Uhc2hewc9eXQZrUJyFx7wxbm1JL2PrKEmvJmJRi7 3. Check "Receive coins" tab 4. Observe new address (1MaRTyRCFm2tn1JYq6oDoAy6uati7eXJWj) is not listed 5. Exit Bitcoin-Qt completely 6. Start Bitcoin-Qt again after it finishes exiting 7. Observe new address is now in the "Receive coins" tab	https://api.github.com/repos/bitcoin/bitcoin/issues/835	7	https://api.github.com/repos/bitcoin/bitcoin/issues/835/comments	2012-02-14T17:44:48Z	None
824	open	xanatos	In bitcoinrpc.cpp, class SSLIOStreamDevice, to read from the socket (or socket+ssl) stream the function read_some is used. std::streamsize read(char* s, std::streamsize n) { handshake(ssl::stream_base::server); // HTTPS servers read first if (fUseSSL) return stream.read_some(asio::buffer(s, n)); return stream.next_layer().read_some(asio::buffer(s, n)); } The problem is that read_some doesnt guarantee to read n bytes. From > Remarks > The read_some operation may not read all of the requested number of bytes. Consider using the read function if you need to ensure that the requested amount of data is read before the blocking operation completes. Now, SSLIOStreamDevice is a bidirectional device. It implements a read and a write. Reading from here what the read should do we get: std::streamsize read(char* s, std::streamsize n) { // Reads up to n characters from the input // sequence into the buffer s, returning the number // of characters read. **Returning a value less than n // indicates end-of-sequence.** }	https://api.github.com/repos/bitcoin/bitcoin/issues/824	0	https://api.github.com/repos/bitcoin/bitcoin/issues/824/comments	2012-02-11T13:56:08Z	None
785	open	TheBlueMatt	As a part of #593 Gmaxwell suggested that the send coins confirmation dialog delay several seconds before it allows the user to click OK, similar to the way firefox does plugin installation. Though I found it to fall outside the scope of #593, it is still a good suggestion that should be implemented if someone has the free time and motivation.	https://api.github.com/repos/bitcoin/bitcoin/issues/785	2	https://api.github.com/repos/bitcoin/bitcoin/issues/785/comments	2012-01-26T18:14:59Z	None
767	open	gavinandresen	I have a test wallet with lots of small sendmany transactions, and I noticed that it takes a long time (tens of seconds) for it to complete a send because WalletUpdateSpent is doing a complete write-to-database-and-then-flush for every input. In this case, many of the inputs are from the same previous transaction, so it is re-writing the same record many times. Example debug.log output: WalletUpdateSpent found spent coin 0.0475bc 4c0f46c6b4d080ce88d3016e1fefca13aac8a544bfcbb5e83d84c95b4b05621f WalletUpdateSpent found spent coin 6.00bc fb27c5e669e7a19bdd79c0f0494cd5911c9497e04b424fc476925d5b6d7bed34 WalletUpdateSpent found spent coin 0.30bc 322e37c01be436b45bc8bf8268f7c89c39619af9d7e003b0eca4ab8113e42244 WalletUpdateSpent found spent coin 0.56bc 3e97e19ae3a5c56dc3c4c4d517213c6d453b696c0779e965a69932f8410b2a5b WalletUpdateSpent found spent coin 0.20bc 898a0d3e571ef73f451e3c0b0989517f72527c6d8da411681cbeaaabeaa8bc9b WalletUpdateSpent found spent coin 0.20bc 898a0d3e571ef73f451e3c0b0989517f72527c6d8da411681cbeaaabeaa8bc9b WalletUpdateSpent found spent coin 0.20bc 898a0d3e571ef73f451e3c0b0989517f72527c6d8da411681cbeaaabeaa8bc9b WalletUpdateSpent found spent coin 0.20bc 898a0d3e571ef73f451e3c0b0989517f72527c6d8da411681cbeaaabeaa8bc9b WalletUpdateSpent found spent coin 0.20bc 898a0d3e571ef73f451e3c0b0989517f72527c6d8da411681cbeaaabeaa8bc9b WalletUpdateSpent found spent coin 0.20bc 898a0d3e571ef73f451e3c0b0989517f72527c6d8da411681cbeaaabeaa8bc9b .... etc, for a hundred or so inputs. Doing all this in a single database transaction might be easy and make these big-transaction-sends much faster (and aught to be more correct, too).	https://api.github.com/repos/bitcoin/bitcoin/issues/767	0	https://api.github.com/repos/bitcoin/bitcoin/issues/767/comments	2012-01-18T22:31:04Z	None
763	open	da2ce7	If bitcoin is unable to connect to the proxy as specified in the configuration, we should display a banner at the bottom of the window warning unable to connect to proxy, check configuarion	https://api.github.com/repos/bitcoin/bitcoin/issues/763	2	https://api.github.com/repos/bitcoin/bitcoin/issues/763/comments	2012-01-17T08:42:09Z	None
754	open	ptmhd	"transaction" shows the date/time at which the client received the block which contains the transaction, not the timestamp when the transaction made it into the block. can be reproduced by sending bitcoins to a client that is offlne. later that client synchronizes the blockchain with the network and the transaction appears in the client with the date/time when the block was received and not with the time & date of the transaction reception by a miner (or block creation) as expected. that is inconvenient and confusing. I searched the open/closed issues but could not find this one. version affected 0.5 qt	https://api.github.com/repos/bitcoin/bitcoin/issues/754	5	https://api.github.com/repos/bitcoin/bitcoin/issues/754/comments	2012-01-11T01:53:13Z	None
751	open	TheBlueMatt	Currently we use a slight fork of (an outdated) JSON-Spirit (http://www.codeproject.com/KB/recipes/JSON_Spirit.aspx) in our repo. The debian maintainer for Bitcoin asked me a while ago (and I never got around to filing a bug report for it) if it were possible for us to revert back to the original version so that it is possible to use a packaged version. To do this, we need support for forcing numerical output to do fixed-length output of reals (see and scroll to the bottom to read a brief thread on the subject, it would be much appreciated if someone could take up that topic and continue with this issue).	https://api.github.com/repos/bitcoin/bitcoin/issues/751	2	https://api.github.com/repos/bitcoin/bitcoin/issues/751/comments	2012-01-09T18:16:13Z	None
747	open	gavinandresen	Transactions with more than MAX_SIGOPS sigops should not be added to the memory pool, because they can (obviously) never make it into a block. Probably a good idea to DoS-disconnect clients who send you such transactions, too.... Thanks to makomk for finding this on testnet. This would only be an issue on main-net if you were relaying/mining non-standard transactions or running an updated git HEAD or OP_EVAL backport which defines CHECKMULTISIG as a standard transaction type.	https://api.github.com/repos/bitcoin/bitcoin/issues/747	0	https://api.github.com/repos/bitcoin/bitcoin/issues/747/comments	2012-01-06T20:28:16Z	None
732	open	TheBlueMatt	In bitcoinrpc.cpp	https://api.github.com/repos/bitcoin/bitcoin/issues/732	1	https://api.github.com/repos/bitcoin/bitcoin/issues/732/comments	2011-12-30T09:09:08Z	None
664	open	theymos	eldentyrell on IRC reports that the Mac release of 0.5 does not contain a bitcoind binary.	https://api.github.com/repos/bitcoin/bitcoin/issues/664	5	https://api.github.com/repos/bitcoin/bitcoin/issues/664/comments	2011-11-26T02:35:52Z	None
651	open	gavinandresen	To test: When the wallet passphrase is changed, is it possible for the old master key to end up in the wallet.dat file, or is it guaranteed to be overwritten? If it can end up in the wallet.dat file, then the wallet should be rewritten when the passphrase is changed.	https://api.github.com/repos/bitcoin/bitcoin/issues/651	0	https://api.github.com/repos/bitcoin/bitcoin/issues/651/comments	2011-11-21T15:27:27Z	None
648	open	bitcoinuser	Hi, 1- I think should be able to right click on the address to edit key or label information. (It took me a while to figure out the double click to edit) 2- I think when adding an address on address book, could have an option to add custom fields. We could add, rename and delete the fields.	https://api.github.com/repos/bitcoin/bitcoin/issues/648	1	https://api.github.com/repos/bitcoin/bitcoin/issues/648/comments	2011-11-21T00:36:36Z	None
623	open	graingert	"luke-jr: the GUI really needs a way to search the address book -.-" The "Address Book" and "Send Coins" tabs should be merged. Typing in the label field or Pay To field should filter the list	https://api.github.com/repos/bitcoin/bitcoin/issues/623	4	https://api.github.com/repos/bitcoin/bitcoin/issues/623/comments	2011-11-08T23:22:54Z	None
614	open	petercooperjr	Very low priority, but I loaded up Bitcoin 5.0rc3 on Mac on my testnet data directory, and when I hover over the left column for a recent generation (or as this calls it, "Mined"), I see hovertext saying: > Unconfirmed (2 of 6 confirmations) > Mined balanced will be available in 118 more blocks > Mined I assume that the "2 of 6 confirmations" text is intended for "normal" transactions, not mined ones, but it seems erroneous. I can only effectively mine on testnet, and I suspect that most miners get paid by pools now directly, but it seemed worth noting.	https://api.github.com/repos/bitcoin/bitcoin/issues/614	7	https://api.github.com/repos/bitcoin/bitcoin/issues/614/comments	2011-11-07T21:38:18Z	None
601	open	xanatos	I have compiled bitcoin 0.4 under Visual Studio 2010. I know this isnt supported, but the bug isnt connected to Visual Studio. In util.h there is this block of code: inline uint160 Hash160(const std::vector<unsigned char>& vch) { uint256 hash1; SHA256(&vch[0], vch.size(), (unsigned char*)&hash1); uint160 hash2; RIPEMD160((unsigned char*)&hash1, sizeof(hash1), (unsigned char*)&hash2); return hash2; } Now the problem is that if there isnt a wallet the function is called with an empty vch. In "debug" mode the &vch[0] asserts, because 0 is >= the size of the vector. Read for example	https://api.github.com/repos/bitcoin/bitcoin/issues/601	1	https://api.github.com/repos/bitcoin/bitcoin/issues/601/comments	2011-11-01T09:46:42Z	None
596	open	dmgores	CBlock.GetSigOpCount counts vtx[0].vin[0]scriptSigs OpCount. It shouldnt, because the value in vtx[0].vin[0].scriptSig is a random string between 2 and 100 bytes.	https://api.github.com/repos/bitcoin/bitcoin/issues/596	15	https://api.github.com/repos/bitcoin/bitcoin/issues/596/comments	2011-10-29T18:29:13Z	None
588	open	Xeno-Genesis	If I use pywallet to remove all transactions from my wallet, and then run bitcoin -rescan, the transactions appear with date and time set to the moment i ran the command, and not the time when the transactions were performed.	https://api.github.com/repos/bitcoin/bitcoin/issues/588	0	https://api.github.com/repos/bitcoin/bitcoin/issues/588/comments	2011-10-20T06:38:31Z	None
581	open	alexwaters	I have followed - in order to build QT in windows (with 0.5.0) and I get the following error:	https://api.github.com/repos/bitcoin/bitcoin/issues/581	4	https://api.github.com/repos/bitcoin/bitcoin/issues/581/comments	2011-10-10T21:22:32Z	None
483	open	elis	When I try to use `setaccount` method with the same `address` more than once on the same `account` I get new addresses assigned to that account. Is this a but or just undocumented feature? :)	https://api.github.com/repos/bitcoin/bitcoin/issues/483	0	https://api.github.com/repos/bitcoin/bitcoin/issues/483/comments	2011-09-02T00:24:42Z	None
432	open	JoelKatz	An error was reported using the bitcoin client with TrueCrypt: EXCEPTION: N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10filesystem 22basic_filesystem_errorINS3_10basic_pathISsNS3_11path_traitsEEEEEEEEE boost::filesystem::create_directory: Permission Denied: "H:\" C:\Program Files (x86)\Bitcoin\bitcoin.exe in AppInit() At least in some cases, it seems that a permission error can be returned when an attempt is made to create a directory that already exists if the caller wouldnt have permission to create the directory if it didnt exist. And in some cases, creating the data directory makes no logical sense, for example if the data directory is the root of a USB drive on a Windows system. In these cases, create_directory will throw an exception. The client should put the create_directory calls in a try/catch block. If an exception is taken, the code should check if the directory exists and, if so, ignore the exception.	https://api.github.com/repos/bitcoin/bitcoin/issues/432	0	https://api.github.com/repos/bitcoin/bitcoin/issues/432/comments	2011-07-26T05:40:28Z	None
429	open	rPman	Some mining pools send rewards in first transactions in block, this transactions looks like generated, blockexplorer tools can detect list reward adresses, but bitcoin client cant. These transactions get into default "" account. listtransactions and gettransaction - show only amount bitcoins and transactions id I think it would be nice if the at the request gettransatstion in the array details were added the field address and is specified correctly account	https://api.github.com/repos/bitcoin/bitcoin/issues/429	1	https://api.github.com/repos/bitcoin/bitcoin/issues/429/comments	2011-07-25T20:19:17Z	None
386	open	graingert	Looks from that it would be fairly simple to add	https://api.github.com/repos/bitcoin/bitcoin/issues/386	5	https://api.github.com/repos/bitcoin/bitcoin/issues/386/comments	2011-07-07T00:19:42Z	None
339	open	nanotube	currently the binaries (at least the linux binaries) are shipped without debugging symbols. that makes it harder to figure out where stuff goes wrong when debugging. released binaries should not be stripped.	https://api.github.com/repos/bitcoin/bitcoin/issues/339	5	https://api.github.com/repos/bitcoin/bitcoin/issues/339/comments	2011-06-23T03:28:09Z	None
330	open	pickerin	I did not find this bug, but Im reporting it: See: "If you enter 0,005 as amount to be sent, the client sends 5.00 For the US-only localized guys I must add: 0,005 is, for example, in Germany the natural way to type what in the US would be typed as 0.005 - and this is consistent with all kinds of localizations in the operating system. So a German user is likely to send a much higher amount than she intended to. We have the bug confirmed on the 0.3.23-beta client on Windows 7 by Dennis1234 and on the 0.3.23-beta client on Linux self compilation by mself. Since my client is running in testnet currently I did some testing: 0,0005 is parsed as "error in amount" 0,005 is reparsed as 5.00 0,05 produces an "error in amount" 0,5 produces an "error in amount" Reparsed as 5.00 means the following: I enter 0,005 and upon "Send" the displayed amount changes into 5.00 and I get an error on insufficient funds (I do not have 5 BTC in my current testnet account). From the normal behaviour of the client I assume that, if I had more than 5.00 i would just lose these 5.00. DEVELOPER INFORMATION: The bug is in src/util.cpp:ParseMoney. In particular, on line 375 the function explicitly checks for , and interprets it as the American/English (or other?) digit grouping symbol. It checks if there is a digit before the comma, and three digits after it (e.g. One Million Dollars can be written as $1,000,000). Because of this 0,005 is considered valid, even though it makes no sense even from an a digit grouping perspective. Id say several patches are in order: 1) 0,005 should not be considered valid when interpreted as digit grouping 2) ParseMoney should be locale sensitive 3) OnButtonSend should display the valid it interpreted (after line 1925, nValue) and ask for confirmation. 3 is necessary because bugs like this are likely to crop up for a long time, and its just all around a good idea to give the user a second chance to verify their input.	https://api.github.com/repos/bitcoin/bitcoin/issues/330	2	https://api.github.com/repos/bitcoin/bitcoin/issues/330/comments	2011-06-19T00:21:18Z	None
318	open	roconnor	The time it takes to generate the first block after the difficulty level changes isnt used in the computation of how long the next 2016 blocks takes to compute. In some sense this is an artifact of the fact that there isnt the data available to compute how long it took to generate the genesis block. Anyhow, it would be interesting if this small flaw could somehow be exploited.	https://api.github.com/repos/bitcoin/bitcoin/issues/318	0	https://api.github.com/repos/bitcoin/bitcoin/issues/318/comments	2011-06-16T00:20:24Z	None
317	open	roconnor	It is my understanding that bitcoin does not verify the version number in block or transactions. If versions are meant as an extension mechanism, then presumably the client ought to enforce that all the version numbers are equal to 1 until such time as alternative block and transaction versions are added. Right now anyone can start spamming version numbers with any value they want I think. Similarly the client only checks to see if the low bits of the HashType are SIGHASH_NONE or SIGHASH_SINGLE and all other combinations are treated as SIGHASH_ALL. Again, if this mechanism was intended to be extensible, then you need to check that the SIGHASH_ALL is correct and reject all other invalid HashTypes. Since there are only 5 bits available, spammers could easily exhaust all the HashTypes. Already at least transaction c99c49... is using an invalid HashType of 0 as if it were a SIGHASH_ALL.	https://api.github.com/repos/bitcoin/bitcoin/issues/317	2	https://api.github.com/repos/bitcoin/bitcoin/issues/317/comments	2011-06-16T00:14:37Z	None
309	open	mikegogulski	It would be handy in certain circumstances to be able to update the config file and then ask bitcoind to parse it again (when updating rpcallowip filters, for example). An RPC command like "readconfig" would be good. Trapping for a SIGHUP on Unix would be cool, too.	https://api.github.com/repos/bitcoin/bitcoin/issues/309	0	https://api.github.com/repos/bitcoin/bitcoin/issues/309/comments	2011-06-08T17:21:09Z	None
279	open	theymos	Currently the network is allowed to adjust your time by 70 minutes either way. If most of the network is adjusted +70 minutes, and you are adjusted -70 minutes, you will reject all blocks due to the 2-hour rule. Probably you will be stuck in this state for quite some time. This person thought of it:	https://api.github.com/repos/bitcoin/bitcoin/issues/279	0	https://api.github.com/repos/bitcoin/bitcoin/issues/279/comments	2011-05-27T01:15:07Z	None
273	open	slothbag	I noticed the other day Bitcoin was maxing out my upload bandwidth on ADSL. Probably due to sending the block chain to fellow bitcoin users ( I had about 65 connections at the time ).. The ability to limit / throttle the network usage like most other p2p programs would be beneficial. Otherwise I have to ensure I close the Bitcoin application to keep it from killing my upload.	https://api.github.com/repos/bitcoin/bitcoin/issues/273	71	https://api.github.com/repos/bitcoin/bitcoin/issues/273/comments	2011-05-26T11:14:44Z	None
211	open	mikegogulski	``` bitcoin@btcserver:~/bitcoin-0.3.21/bin/32$ ./bitcoind sendtoaddress 16bRQcbr1VcxxxxxZQxqGhi242eL 0.2 error: {"code":-4,"message":"Error: This transaction requires a transaction fee of at least 0.01 because of its amount, complexity, or use of recently received funds "} ``` Reminds me a bit of "Password incorrect or domain controller unavailable". My "Errors and Error Messages: Handbook for Dungeon Masters" guidebook says: 16(a)(vii): "Each and every error message shall describe the one, single, sole, only and unique error condition generating the message." 16(a)(xix): "No error message shall contain any of the words or, nor, some, any, several, either or neither, nor any of the collocations one of, some of, one or more of, and so on."	https://api.github.com/repos/bitcoin/bitcoin/issues/211	3	https://api.github.com/repos/bitcoin/bitcoin/issues/211/comments	2011-05-09T16:08:31Z	None
210	open	mikegogulski	bitcoin@btcserver:~/bitcoin-0.3.21/bin/32$ ./bitcoind sendtoaddress 16bRQcbr1xxxu27ZQxqGhi242eL 0.2 error: {"code":-4,"message":"Error: This transaction requires a transaction fee of at least 0.01 because of its amount, complexity, or use of recently received funds "} I guess in the first place Id like an error message which comes back with a "TXFEEREQUIRED" status, giving that fee as its value, rather than needing to parse English text to find it. In the second place, Id like to be able to do something like: ``` try { rpc_bitcoind("sendtoaddress", address, amount); } catch (bitcoindexception e) { if (e->txfee) { try { rpc_bitcoind("sendtoaddress", address, amount, e->txfee); } catch { debug("zomgwtflolbbq"); } } else { debug("fail", e.toString()); } } ```	https://api.github.com/repos/bitcoin/bitcoin/issues/210	2	https://api.github.com/repos/bitcoin/bitcoin/issues/210/comments	2011-05-09T15:22:26Z	None
206	open	gavinandresen	When the user is told they have to pay a fee because a transaction has low priority, itd be nice if the client calculated how long theyd have to wait until the inputs have matured enough to have high enough priority so they DONT have to pay a fee. Suggested by bitlotto on the forums.	https://api.github.com/repos/bitcoin/bitcoin/issues/206	1	https://api.github.com/repos/bitcoin/bitcoin/issues/206/comments	2011-05-09T00:21:06Z	None
71	open	gavinandresen	See: ... for ideas on how to support "fast transactions" and still avoiding double-spending.	https://api.github.com/repos/bitcoin/bitcoin/issues/71	1	https://api.github.com/repos/bitcoin/bitcoin/issues/71/comments	2011-02-14T21:55:02Z	None
48	open	molecular	to reproduce: 1.) run bitcoin, wait for it to connect to net 2.) recycle your dynamic IP (get a new one) 3.) wait for next block 4.) see that new blocks dont show up in your client expected behaviour: bitcoin should detect that its disconnected from the network and reconnect. notes: 1.) the client still shows connection count after the IP change 2.) the connection count will slowly drop to 0 3.) then it will just sit there with 0 connections	https://api.github.com/repos/bitcoin/bitcoin/issues/48	10	https://api.github.com/repos/bitcoin/bitcoin/issues/48/comments	2011-01-29T10:54:12Z	None
7	open	gavinandresen	Bitcoin newbies have to endure an hour or two (or more) while bitcoin downloads and indexes all transactions and blocks. Satoshi has mostly implemented code that downloads just the block headers; as long as youre not generating blocks, you dont need all the old transactions.	https://api.github.com/repos/bitcoin/bitcoin/issues/7	1	https://api.github.com/repos/bitcoin/bitcoin/issues/7/comments	2010-12-20T13:53:07Z	None
