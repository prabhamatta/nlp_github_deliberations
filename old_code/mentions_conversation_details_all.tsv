issue_id	comment_id	created_at	comment_url	comment_user	mentioned_user	comment_text
3294	29035854	2013-11-21T23:39:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29035854	gavinandresen	Diapolo	@Diapolo: good catch on the -1.  init.cpp doesn't mention gen/genproclimit, since generating blocks is a developer-only feature (we don't want people thinking they can successfully CPU mine on the main network).
3294	29119945	2013-11-23T00:17:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29119945	gavinandresen	sipa	@sipa: number of threads is ignored in regtest mode already (one thread is used, and it exits as soon as a block is found).    If you like, you can think of it as "Start N threads, and exit each as soon as a block is found."  That isn't actually how it is implemented, of course (blocks are found so quickly the N threads would stomp on each other's blocks)...    I'm normally sympathetic to "makes RPC ugly" arguments, but since setgenerate is ONLY for developers/testing/debugging I think ugly is just fine here.
3292	28976556	2013-11-21T11:31:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28976556	laanwj	fanquake	Thanks @fanquake
3286	29006854	2013-11-21T17:55:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29006854	Diapolo	laanwj	@laanwj Am I right that MaxAddressLength is not the MinAddressLength ;)? And if this is the case, what is the minimum length of a BTC address? This is not yet mergable in the current state ^^.
3286	29055366	2013-11-22T08:07:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29055366	Diapolo	laanwj	@laanwj Re-worked, can you check for correctness?
3285	29007831	2013-11-21T18:05:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29007831	Diapolo	laanwj	I have more string and translations updates, but don't want to bloat this pull, so it get's merged faster.  @laanwj Can you take a look please?
3284	28979434	2013-11-21T12:20:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28979434	laanwj	sipa	@sipa @gmaxwell @gavinandresen Can I get some acks here please?
3284	28979434	2013-11-21T12:20:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28979434	laanwj	gmaxwell	@sipa @gmaxwell @gavinandresen Can I get some acks here please?
3284	28979434	2013-11-21T12:20:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28979434	laanwj	gavinandresen	@sipa @gmaxwell @gavinandresen Can I get some acks here please?
3276	29069119	2013-11-22T12:32:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29069119	sipa	gavinandresen	@gavinandresen @gmaxwell Some ACKs?
3276	29069119	2013-11-22T12:32:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29069119	sipa	gmaxwell	@gavinandresen @gmaxwell Some ACKs?
3271	28644305	2013-11-17T07:41:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28644305	laanwj	jgarzik	@jgarzik That's also why I have discouraged doing this.    On the other hand, it appears pretty trivial to rebase patches to this and it mostly (only) affects debug printing.
3271	28677269	2013-11-18T06:07:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28677269	brandondahler	sipa	@sipa and @laanwj:  following your suggestions, I have created the Log class (log.h and log.cpp).  At its core it works by multiplexing an input to multiple outputs.      Since generally flags won't change after instantiation of the class (except for changes from other threads), the constructor of the instantiation reads the different flags and decides what streams to send the data to.    For all types except strings and const char*s, the data is just passed along to the streams below (manipulators work too).  For strings and const char*s, we do a little processing based on what stream it is, specifically seeing if/when we are writing new lines.      For the error function, I removed it all-together and replaced them with log calls ("ERROR: " prepended, "\n" appened).  If we want to make it so the "ERROR: " part is configurable, I would recommend a public static const char* on Log instead of making a wrapping function.
3271	28677269	2013-11-18T06:07:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28677269	brandondahler	laanwj	@sipa and @laanwj:  following your suggestions, I have created the Log class (log.h and log.cpp).  At its core it works by multiplexing an input to multiple outputs.      Since generally flags won't change after instantiation of the class (except for changes from other threads), the constructor of the instantiation reads the different flags and decides what streams to send the data to.    For all types except strings and const char*s, the data is just passed along to the streams below (manipulators work too).  For strings and const char*s, we do a little processing based on what stream it is, specifically seeing if/when we are writing new lines.      For the error function, I removed it all-together and replaced them with log calls ("ERROR: " prepended, "\n" appened).  If we want to make it so the "ERROR: " part is configurable, I would recommend a public static const char* on Log instead of making a wrapping function.
3271	28862460	2013-11-20T04:10:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28862460	brandondahler	gavinandresen	@gavinandresen:  I understand feeling that there is a lot of one-time risk involved in moving from printf to stream style conversion; however, I completely disagree that there is no practical benefit.    1)  This makes maintenance easier    The code is much less complex overall.  This removes some ugly compatibility #defines, attribute markings, and even hacks.    2)  Platform independence    We are no longer relying on the platform to have a correct/compliant printf function.  Instead we are relying on the C++ standard library implementation which we already rely on since we use C++ in the first place.  This is specifically a problem for int64_t since Windows doesn't use the same syntax as Linux unless you use some compatibility defines.    3)  The way it reads    Streams read fluently instead of requiring the user to place the parameters in the correct place.  Consider:        return strprintf(              "HTTP/1.1 %d %s\r\n"              "Date: %s\r\n"              "Connection: %s\r\n"              "Content-Length: %"PRIszu"\r\n"              "Content-Type: application/json\r\n"              "Server: bitcoin-json-rpc/%s\r\n"              "\r\n"              "%s",          nStatus,          cStatus,          rfc1123Time().c_str(),          keepalive ? "keep-alive" : "close",          strMsg.size(),          FormatFullVersion().c_str(),          strMsg.c_str());    Becomes        ossReply << "HTTP/1.1 " << nStatus << " " << cStatus << "\r\n"               << "Date: " << rfc1123Time() << "\r\n"               << "Connection: " << (keepalive ? "keep-alive" : "close") << "\r\n"               << "Content-Length: " << strMsg.size() << "\r\n"               << "Content-Type: application/json\r\n"               << "Server: bitcoin-json-rpc/" << FormatFullVersion() << "\r\n"               << "\r\n"               << strMsg;      return ossReply.str();    Likewise logging lines stand out just like normal cout lines (given the new Log class).    ____    All of this being said, I will agree that the shorter changes, such as:        std::string tmpfn = strprintf("peers.dat.%04x", randv);    Becoming        std::ostringstream tmpfn("peers.dat.");      tmpfn << std::hex << std::setfill('0') << std::setw(4) << randv << std::dec << std::setfill(' ');    Would probably work better off as a boost::format.  The reason I started out with not using boost::format more is because I personally prefer to keep dependence on boost to a minimum.  If y'all disagree I do think it could make things less cluttered when making simple, smalls strings.      Likewise creating formatting functions for specific types of data would allow us to change the output formatting of the data in one place instead of across a bunch of files, while fitting in with the stream style.  Using the above function again, having a static call makes things cleaner all-together:        ...      std::string tmpfn = CAddrDB::PeersFilePath(randv);      ...        std::string CAddrDB::PeersFilePath(unsigned short randv)      {          std::ostringstream tmpfn();          tmpfn << "peers.dat." << std::hex << std::setfill('0') << std::setw(4) << randv;          return tmpfn.str();      }    Further we can make custom manipulators to reduce duplication of code:        ios_base& hex04(ios_base& ib)      {          ib << std::hex << std::setfill('0') << std::setw(4);          return ib;      }            std::string CAddrDB::PeersFilePath(unsigned short randv)      {          std::ostringstream tmpfn();          tmpfn << "peers.dat." << hex04 << randv;          return tmpfn.str();      }
3271	28867775	2013-11-20T07:07:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28867775	laanwj	gavinandresen	@gavinandresen Agreed, the problem isn't with printf-style *syntax*, it's with the printf function  - which (in our usage) isn't part of the C++ standard, so we had a dependency on C99-like formats that broke down on Windows without special mingw defines. Also it's not type safe, easy to mess up the stack with some wrong % char, and uses a variable-number-of-parameters hack which breaks down for std::string so a dummy '0' argument is inserted with a macro (the `real_strprintf` etc...).     Many reasons to get rid of the sprintf hacks. But boost::format would be better in that regard as it mostly keeps printf syntax but is typesafe and has none of those mentioned drawbacks.    I don't think the actual risk is that large, at most some debug messages will be formatted differently.    It could map pretty much one-on-one. Could we do this without adding (so many) lines?
3271	28887312	2013-11-20T13:04:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28887312	brandondahler	laanwj	@laanwj I would not consider the use of ostringstream as "rolling my own", namely because that is the only way provided by the C++ standard library to convert random types to strings and vice versa.    If you are talking about the Log class, the first commit started off without it, but it was added because it simplifies the actual logging process (the business logic that goes in to putting type T data into X, Y, and Z streams) and it makes reading the actual print lines prettier:        Log() << something << " something else";     vs         LogPrint(str(boost::format("%d something else") % something)); ).
3266	28662216	2013-11-17T19:58:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28662216	gmaxwell	kuzetsa	@kuzetsa "nothing invalid about address reuse on a protocol level", well I suggest you review section 10 of Bitcoin PDF, but thats actually not the point I was making here. If I were it would be in the form of "don't allow reuse".    Doubling payments is an actual mistake that people make which could be dampened by a polite confirmation, one which could be disabled with a don't tell me again, that it also provides a hook to _educate_ people about the consequences, both for themselves and for others, is just a bonus. The education matters, considering response I've had to bip32 public chains has been "why does it matter, I know who I'm paying already". :)
3266	28666555	2013-11-17T22:47:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28666555	kuzetsa	laanwj	@laanwj The off-topic comment about address reuse really threw me off as a "red herring", and I hadn't even double checked that the actual text of issue #3266 was completely unrelated to any current political movement to stigmatize address reuse, and that instead, you were merely joking about having ulterior motives for wanting to implement this feature, or something related.    @gmaxwell     Yeah, the section 10 is the one labeled "privacy", and since section 10 relates to privacy, rather than the technical details associated with protocol, it's pretty clear that any talk about limiting or avoiding address reuse is only meant as a privacy-enhancing "firewall".    > As an additional firewall, a new key pair should be used (...) if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner.    Address reuse itself has multiple "emergent behavior" type uses which are valid under bitcoin's original whitepaper specifications, as well as any implementation which isn't seeking to manipulate, control, or punish bitcoin users for how they choose to use bitcoin.    Just because some people wish to use bitcoin in a way which reuses addresses, it is not fair to call it a violation of protocol, if only because the word "should" is not the same as "must".    These terms have a meaningful technical distinction, as well as a legal one.    With respect to the actual text of issue #3266 --- I'll concede that if this feature explicitly takes the form of a sanity check to prevent double spends, it'd actually be a positive.
3266	28666555	2013-11-17T22:47:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28666555	kuzetsa	gmaxwell	@laanwj The off-topic comment about address reuse really threw me off as a "red herring", and I hadn't even double checked that the actual text of issue #3266 was completely unrelated to any current political movement to stigmatize address reuse, and that instead, you were merely joking about having ulterior motives for wanting to implement this feature, or something related.    @gmaxwell     Yeah, the section 10 is the one labeled "privacy", and since section 10 relates to privacy, rather than the technical details associated with protocol, it's pretty clear that any talk about limiting or avoiding address reuse is only meant as a privacy-enhancing "firewall".    > As an additional firewall, a new key pair should be used (...) if the owner of a key is revealed, linking could reveal other transactions that belonged to the same owner.    Address reuse itself has multiple "emergent behavior" type uses which are valid under bitcoin's original whitepaper specifications, as well as any implementation which isn't seeking to manipulate, control, or punish bitcoin users for how they choose to use bitcoin.    Just because some people wish to use bitcoin in a way which reuses addresses, it is not fair to call it a violation of protocol, if only because the word "should" is not the same as "must".    These terms have a meaningful technical distinction, as well as a legal one.    With respect to the actual text of issue #3266 --- I'll concede that if this feature explicitly takes the form of a sanity check to prevent double spends, it'd actually be a positive.
3266	28678370	2013-11-18T06:49:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28678370	laanwj	kuzetsa	@kuzetsa Sigh, it was just a silly statement because of the recent upheaval about privacy and blacklisting, I didn't intend to bring politics discussion here, sorry man.    My message should instead have been: "@gmaxwell good idea", consider it corrected.
3265	28895900	2013-11-20T15:02:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895900	Diapolo	laanwj	@laanwj Agreed, will rework this.
3256	29043042	2013-11-22T01:49:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29043042	imton	gmaxwell	@gmaxwell still, why couldn't the option exist?
3254	28515712	2013-11-14T19:42:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28515712	Diapolo	laanwj	@laanwj Any idea what is causing this build error, I don't understand the problem.    Edit: Was caused by paymentservertest.cpp, because Gavin called eventFilter() directly, which isn't possible anymore after this pull.
3254	28895984	2013-11-20T15:03:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895984	Diapolo	laanwj	@laanwj Merge-ready or anything more to be done here?
3249	28479591	2013-11-14T12:20:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28479591	jgarzik	laanwj	Given all the problems with existing floating point implementations, and existing JSON implementations, and how use of floating point has already lead to incorrect values following a multiplication or division etc. I have always supported the use of satoshis -- all integer -- in the RPC interface.    However, given that that decision was made years ago, backwards compat makes it difficult to switch now.  Even a "use-satoshis" option is not without danger, as @laanwj indicates.   I do not think it is a large danger, because an error would likely result in **sending too little** rather than sending too much.  But it is still a danger.
3249	28480535	2013-11-14T12:38:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28480535	laanwj	jgarzik	@jgarzik That's a completely different discussion. JSON always represents numbers as doubles (well that's not strictly true I should say *almost all implementations do*). Moving the decimal point around does not solve that.     But I'd be all for "send coin amounts as strings instead of numbers" option, so that people may be less tempted to use floating point for monetary values with all the risk it entails. This would also be pretty harmless if misconfigured (result in parse errors not incorrect amounts).
3249	28973914	2013-11-21T10:47:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28973914	luke-jr	laanwj	@laanwj bitcoind doesn't use double for monetary amounts internally at all... not sure what you mean by that?
3249	28974239	2013-11-21T10:53:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28974239	laanwj	luke-jr	@luke-jr We're talking about users of the API here, not so much bitcoind itself.
3249	29042362	2013-11-22T01:34:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29042362	super3	imton	@imton What language are you using?
3249	29042923	2013-11-22T01:47:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29042923	imton	super3	@super3 I am using RoR, and I took all measures to handle them safely, using RubyMoney/money & money-rails gem.    Still, It will be better if I didn't even have to convert them back from float to handle satoshis as int, as I do in ruby money.
3249	29046733	2013-11-22T03:38:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29046733	laanwj	imton	@imton The point is there is nothing *safer* in returning large values instead of smaller, up-to-8-digit precision JSON values. The problem is that javascript (which is at the base of JSON), as well as many other implementations, use doubles for number representation. Double is a *floating point* format, which means that the mantissa has a limited precision, not the number of decimals after the dot.    Sure, you can patch your JSON RPC parser to use integers instead, or maybe yours does already, but if you are going to patch your JSON RPC parser you can do it just as well in the current situation: make it return a Decimal or fixed point format for numbers.    Btw @luke-jr, what you say is not entirely correct, we indeed use uint64 as internal format but we do use doubles in the intermediate conversion for JSON RPC, see         int64_t AmountFromValue(const Value& value)      {          double dAmount = value.get_real();          if (dAmount <= 0.0 || dAmount > 21000000.0)              throw JSONRPCError(RPC_TYPE_ERROR, "Invalid amount");          int64_t nAmount = roundint64(dAmount * COIN);          if (!MoneyRange(nAmount))              throw JSONRPCError(RPC_TYPE_ERROR, "Invalid amount");          return nAmount;      }        Value ValueFromAmount(int64_t amount)      {          return (double)amount / (double)COIN;      }    This has caused an issue at least once with an upgrade of json::spirit. https://github.com/bitcoin/bitcoin/issues/3126 which somehow formatted numbers differently.    *When we'd use strings we could avoid converting to double intermediate format at all and be fixed-point all the way to the client.*
3249	29046733	2013-11-22T03:38:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29046733	laanwj	luke-jr,	@imton The point is there is nothing *safer* in returning large values instead of smaller, up-to-8-digit precision JSON values. The problem is that javascript (which is at the base of JSON), as well as many other implementations, use doubles for number representation. Double is a *floating point* format, which means that the mantissa has a limited precision, not the number of decimals after the dot.    Sure, you can patch your JSON RPC parser to use integers instead, or maybe yours does already, but if you are going to patch your JSON RPC parser you can do it just as well in the current situation: make it return a Decimal or fixed point format for numbers.    Btw @luke-jr, what you say is not entirely correct, we indeed use uint64 as internal format but we do use doubles in the intermediate conversion for JSON RPC, see         int64_t AmountFromValue(const Value& value)      {          double dAmount = value.get_real();          if (dAmount <= 0.0 || dAmount > 21000000.0)              throw JSONRPCError(RPC_TYPE_ERROR, "Invalid amount");          int64_t nAmount = roundint64(dAmount * COIN);          if (!MoneyRange(nAmount))              throw JSONRPCError(RPC_TYPE_ERROR, "Invalid amount");          return nAmount;      }        Value ValueFromAmount(int64_t amount)      {          return (double)amount / (double)COIN;      }    This has caused an issue at least once with an upgrade of json::spirit. https://github.com/bitcoin/bitcoin/issues/3126 which somehow formatted numbers differently.    *When we'd use strings we could avoid converting to double intermediate format at all and be fixed-point all the way to the client.*
3239	28261988	2013-11-12T02:05:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28261988	jgarzik	luke-jr	@luke-jr getblocktemplate always produces a subset of mempool
3239	28262901	2013-11-12T02:27:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28262901	jgarzik	luke-jr	@luke-jr Yes, always.  Sometimes subset == set, but usually not.  The mempool will always store more than **one** block's worth of transactions.  getblocktemplate only returns up to 1MB, etc.
3239	28864476	2013-11-20T05:19:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28864476	gavinandresen	laanwj	@laanwj: good catch, using ValueFromAmount to report fees now.
3229	28233487	2013-11-11T20:02:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28233487	luke-jr	laanwj	@laanwj That'd need making the variables globals again.. so maybe this is better after all?
3228	28144873	2013-11-10T06:06:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28144873	fanquake	gthiruva	@gthiruva Which version of Boost are you using, 1.54.0 ?
3228	28434383	2013-11-13T21:14:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28434383	gthiruva	fanquake	@fanquake Yep, 1.50.0 from macports:  ```shell  The following ports are currently installed:    boost @1.54.0_0+no_single+no_static+python27 (active)  ```  @laanwj And, yes. `make clean` and even `make distclean`.
3228	28434383	2013-11-13T21:14:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28434383	gthiruva	1.54.0_0+no_single+no_static+python27	@fanquake Yep, 1.50.0 from macports:  ```shell  The following ports are currently installed:    boost @1.54.0_0+no_single+no_static+python27 (active)  ```  @laanwj And, yes. `make clean` and even `make distclean`.
3228	28434383	2013-11-13T21:14:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28434383	gthiruva	laanwj	@fanquake Yep, 1.50.0 from macports:  ```shell  The following ports are currently installed:    boost @1.54.0_0+no_single+no_static+python27 (active)  ```  @laanwj And, yes. `make clean` and even `make distclean`.
3226	28389079	2013-11-13T12:00:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28389079	laanwj	gmaxwell	At least initially I'm fine with centralized rendezvous servers. Sure, a standardized P2P protocol would be better (and very difficult) but one step at a time. As @gmaxwell describes in the mentioned topic, the server can learn only very little. It's never worse than the current state in terms of privacy.    Deterministic wallets and such provide no extra privacy in the block chain if you're already keeping to the privacy guidelines and using a new address for every transaction.
3226	28591058	2013-11-15T18:18:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28591058	Diapolo	petertodd	@petertodd Isn't there some double-spend detecion pull lingering around here?
3226	28591517	2013-11-15T18:25:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28591517	petertodd	Diapolo	@Diapolo There is, but unfortunately it only handles the case of a double-spend of a transaction sent to you; it doesn't handle double-spends of transactions that you send.    Specifically: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg03126.html
3226	28664276	2013-11-17T21:20:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28664276	petertodd	mikehearn	@mikehearn You need to be able to handle a coinjoin participate maliciously double-spending their input.    @simondlr CoinJoin definitely needs to be a "by default" action in the long run for all payments to get the maximum benefit; I outlined this on the -talk forum: https://bitcointalk.org/index.php?topic=334241.msg3615921#msg3615921    In the short term there are issues with services that make bad assumptions about address re-use. It's nice that the payment protocol is so clear that txin's aren't return addresses; CoinJoin can easily be made the default way to send payments there provided a good implementation exists.    My thinking on that implementation is you really want to focus on making the default user experience seamless, and I think that means a simple, two-party mix protocol with a reasonably low default timeout. In the default case, it's ok if the transaction doesn't always wind up being joined. Equally, we may be able to take advantage of a fee UI's - if user's are taking advantage of time/cost trade-offs anyway integrate that configurable timeout as part of the CoinJoin process, which in turn helps the users who want a transaction sent quicker.
3226	28664276	2013-11-17T21:20:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28664276	petertodd	simondlr	@mikehearn You need to be able to handle a coinjoin participate maliciously double-spending their input.    @simondlr CoinJoin definitely needs to be a "by default" action in the long run for all payments to get the maximum benefit; I outlined this on the -talk forum: https://bitcointalk.org/index.php?topic=334241.msg3615921#msg3615921    In the short term there are issues with services that make bad assumptions about address re-use. It's nice that the payment protocol is so clear that txin's aren't return addresses; CoinJoin can easily be made the default way to send payments there provided a good implementation exists.    My thinking on that implementation is you really want to focus on making the default user experience seamless, and I think that means a simple, two-party mix protocol with a reasonably low default timeout. In the default case, it's ok if the transaction doesn't always wind up being joined. Equally, we may be able to take advantage of a fee UI's - if user's are taking advantage of time/cost trade-offs anyway integrate that configurable timeout as part of the CoinJoin process, which in turn helps the users who want a transaction sent quicker.
3226	28687946	2013-11-18T10:33:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28687946	idiotsabound	mikehearn	Can someone tell @mikehearn to give up with the whole "let's give bitcoin taints and blacklists and (add on all manner of ridiculous things here)"?(?)  Folks, please get on the coinjoin train.  Big ups to @luke-jr (et. al.) for the P2P concept.  Get er done.  Moving on.  Now, for those who are still attached to the state... Detach.  Thank you, and goodnight.
3226	28687946	2013-11-18T10:33:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28687946	idiotsabound	luke-jr	Can someone tell @mikehearn to give up with the whole "let's give bitcoin taints and blacklists and (add on all manner of ridiculous things here)"?(?)  Folks, please get on the coinjoin train.  Big ups to @luke-jr (et. al.) for the P2P concept.  Get er done.  Moving on.  Now, for those who are still attached to the state... Detach.  Thank you, and goodnight.
3226	28692378	2013-11-18T11:53:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692378	laanwj	idiotsabound	@idiotsabound if you're not helping development, please don't distract us here
3224	28121096	2013-11-09T06:21:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28121096	super3	github	I'd trade that for simplicity and security. Think that is not really important anymore since we have a handful of alternate wallets too. I just pinged @github to see if download stats are possible.
3224	28121135	2013-11-09T06:25:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28121135	laanwj	luke-jr	@luke-jr Looks like there are download statistics on releases posted to github (in contrast to "source tarballs"):    https://github.com/jhclark/multeval/downloads
3224	28122304	2013-11-09T08:07:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28122304	laanwj	gavinandresen	Agreed @gavinandresen . Here the process of creating github releases is described, seems pretty straightforward: https://github.com/blog/1547-release-your-software    I did hear there are some limits with regard to file sizes and total storage, but I can't find definitive numbers, and as the releases feature is brand new they don't appear to have updated their faq (https://help.github.com/articles/what-is-my-disk-quota) yet.
3224	28123164	2013-11-09T09:10:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28123164	super3	luke-jr	@luke-jr Yeah they depreciated downloads a while back, but recently they introduced releases which is what @laanwj and I linked to.
3224	28123164	2013-11-09T09:10:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28123164	super3	laanwj	@luke-jr Yeah they depreciated downloads a while back, but recently they introduced releases which is what @laanwj and I linked to.
3220	27991442	2013-11-07T18:15:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27991442	sipa	jgarzik	@jgarzik I think you may be misinformed. `getrawtransaction` currently does not work for wallet transactions. It works for transactions that are either in the mempool or not entirely spent (=in the UTXO set). This may overlap with wallet transactions of course, but is not guaranteed. I think that funtionality doesn't maatch many use cases, and is inefficient. I'd rather have it work under very clear conditions.    @laanwj I'm in favor of both improving the error message and a `getwallettransaction` command (though `gettransaction` is also a wallet RPC, but one that fetches ledger-level information, not transaction-level information).
3220	27991442	2013-11-07T18:15:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27991442	sipa	laanwj	@jgarzik I think you may be misinformed. `getrawtransaction` currently does not work for wallet transactions. It works for transactions that are either in the mempool or not entirely spent (=in the UTXO set). This may overlap with wallet transactions of course, but is not guaranteed. I think that funtionality doesn't maatch many use cases, and is inefficient. I'd rather have it work under very clear conditions.    @laanwj I'm in favor of both improving the error message and a `getwallettransaction` command (though `gettransaction` is also a wallet RPC, but one that fetches ledger-level information, not transaction-level information).
3220	27993328	2013-11-07T18:36:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27993328	luke-jr	sipa	@sipa No reason it couldn't work for wallet transactions - the raw data is all in the wallet too, IIRC.
3220	27995921	2013-11-07T19:05:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27995921	sipa	luke-jr	@luke-jr Sure, my main concern is not further confusing wallet operations with blockchain operations.    We could of course extend `getrawtransaction` with wallet functionality, and at the same time deprecate it in favor of a `getwalletrawtransaction` and `getblockchainrawtransaction` (the latter name may be confusing, as i suppose it would also do mempool fetching).
3219	27986251	2013-11-07T17:24:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27986251	imton	laanwj	@laanwj  it prevents compilation    ```console  checking for boostlib >= 1.20.0... yes  checking whether the Boost::System library is available... yes  configure: error: Could not find a version of the library!  ```
3219	27988511	2013-11-07T17:41:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27988511	imton	laanwj	@laanwj  I think it's too late, if config.log is not appended each time configure is exec, then mine only have the logs *after* installing proper packages sipa said and there fore it compiled properly (except for bdb too which was throwing an error).
3219	28057777	2013-11-08T11:58:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28057777	schildbach	laanwj	I can confirm this is not a fluke.    @laanwj I just personally mailed you my config.log after I ran ./configure with libboost-all-dev installed but none of the boost 1.54 packages. I was able to run the script with the 1.54 packages.
3214	28680756	2013-11-18T08:08:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28680756	laanwj	gmaxwell	@gmaxwell my idea would be to have everything but the wallet (and database env) follow the blocksdir. So  indeed: blocksdir isn't a good name. Any suggestion with regard to naming?    My intention is to split the data that the wallet needs (wallet.dat, bdb database logs) and the data the the block chain processing P2P client needs (logging, peer data, chain state, and block data). Of course it could be subdivided further if useful, but the most common case would be this.
3214	28681790	2013-11-18T08:35:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28681790	deed02392	gmaxwell	Why split other data related to the wallet in such a way? I think since the  main purpose of separation is sensitivity of data vs file size, just  enabling separate wallet.dat should be sufficient, then have datadir for  everything except that and walletdir for wallet.dat alone.  On 18 Nov 2013 08:09, "Wladimir J. van der Laan" <notifications@github.com>  wrote:    > @gmaxwell <https://github.com/gmaxwell> my idea would be to have  > everything but the wallet (and database env) follow the blocksdir. So  > indeed: blocksdir isn't a good name. Any suggestion with regard to naming?  >  > My intention is to split the data that the wallet needs (wallet.dat, bdb  > database logs) and the data the the block chain processing P2P client needs  > (logging, peer data, chain state, and block data). Of course it could be  > subdivided further if useful, but the most common case would be this.  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/issues/3214#issuecomment-28680756>  > .  >
3207	27847653	2013-11-06T07:30:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27847653	laanwj	sipa	@sipa I guess it could be stored in the wallet, but that means there will need to be a core interface for storing arbitrary data (that the core doesn't know the format of) in the wallet.    @gavinandresen Yes, storing incoming payment requests would make sense too, and could be done in a similar way but somewhere else in the UI
3207	27847653	2013-11-06T07:30:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27847653	laanwj	gavinandresen	@sipa I guess it could be stored in the wallet, but that means there will need to be a core interface for storing arbitrary data (that the core doesn't know the format of) in the wallet.    @gavinandresen Yes, storing incoming payment requests would make sense too, and could be done in a similar way but somewhere else in the UI
3207	27864089	2013-11-06T11:10:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27864089	laanwj	gavinandresen	@gavinandresen Thinking about it, we should store *incoming* payment requests in the transaction metadata and simply show them in the transactions list.   We can't do the same for *outgoing* payment requests at least until the recipient pays them, maybe they could be correlated and stored in the transaction list then, but until the request is paid it must be in this separate list.
3203	27847209	2013-11-06T07:16:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27847209	gavinandresen	luke-jr	Perfect is the enemy of better, @luke-jr     Someday maybe we'll have a libbtcore.a and separate projects for the GUI btcore and btcored/btcore-cli (and maybe there will be a gazillion other wallets that use libbtcore.a).    Now is a good time to change names, lets do it.
3203	27848296	2013-11-06T07:47:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27848296	AllThingsBitcoin	gavinandresen	For me, the name is insignificant. Ever since 0.8.0, I have had to re-index Bitcoin-qt on my Mac once or twice a month, which takes about three days.  If I want to open my Amory wallet, it takes another 2-3 days, which means it takes a week to access my Armory wallet, once or twice a month. Not cool.    With the growing number of Mac clients, I would think fixing the Mac implementation is more important than the name...    --Patrick    patrick@levell.net    http://www.allthingsbitcoin.org        On Nov 5, 2013, at 7:54 AM, Wladimir J. van der Laan <notifications@github.com> wrote:    > To remove the confusion between the Bitcoin network and the reference client implementation that we maintain in this repository, both confusingly named 'bitcoin', we'd like to rebrand the client.  >   > This has been discussed a lot before, but the following is the proposal by @gavinandresen and I agree:  >   > Bitcoin-Qt -->  btcore (full name 'Bitcoin Core')  > bitcoind --> btcored (full name 'Bitcoin Core Daemon')  > bitcoin-cli --> btcore-cli (full name 'Bitcoin Core CLI Client')  > Renaming the executables is going to break some scripts, so we'd likely want to combine it with the bitcoind CLI deprecation to make sure the migration pain is short and swift instead of drawn out.  >   >   > Reply to this email directly or view it on GitHub.  >
3203	27849018	2013-11-06T08:02:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27849018	laanwj	AllThingsBitcoin	@AllThingsBitcoin This issue is about the name and not about your personal pet peeves, or discussing whose peeve is more important. Take it somewhere else. For the Mac leveldb corruption issue see #2770.
3203	27850361	2013-11-06T08:16:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27850361	AllThingsBitcoin	AllThingsBitcoin	Wow. A pet peeve, it is not. An objective observation it is. I am sad that my observation has fallen on such biased ears.    As a miner, am very interested in how this turns out.    Thanks for blowing me off.    On Nov 6, 2013, at 3:03 AM, Wladimir J. van der Laan <notifications@github.com> wrote:    > @AllThingsBitcoin This issue is about the name and not about your personal pet peeves, or discussing whose peeve is more important. Take it somewhere else.  >   >   > Reply to this email directly or view it on GitHub.  >
3203	27850616	2013-11-06T08:20:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27850616	laanwj	AllThingsBitcoin	@AllThingsBitcoin nothing personal, sorry for getting a bit annoyed, but it's distracting when people post in completely unrelated issues about new/other problems. Try to use the "new issue" button next time, or in this case refer to the existing issue (#2770).
3203	27851174	2013-11-06T08:31:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27851174	AllThingsBitcoin	AllThingsBitcoin	#2770 - Nobody Assigned. Yup, this will get fixed, quickly, I am sure.    I joined this list because I thought I might be able to help, but all that I see is a good old boys club who can't see what is really wrong with Bitcoin-qt.    No problem. I shall unsubscribe from this list and no longer pester you with what you have deemed as my "irrelevant" concerns. What that means is that I will continue using wallets that work with Mac OS X. Bitcoin-qt has become irrelevant.    Take that however you wish.    On Nov 6, 2013, at 3:20 AM, Wladimir J. van der Laan <notifications@github.com> wrote:    > @AllThingsBitcoin nothing personal, sorry for getting a bit annoyed, but it's distracting when people post in completely unrelated issues about new/other problems. Try to use the "new issue" button next time, or in this case refer to the existing issue (#2770).  >   >   > Reply to this email directly or view it on GitHub.  >
3203	27852067	2013-11-06T08:51:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27852067	gmaxwell	AllThingsBitcoin	@AllThingsBitcoin We do not generally use the "assignment" feature in Github. The number of active participants here is small enough that software coordination of who is working on what isn't terribly helpful.
3203	28043517	2013-11-08T07:50:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28043517	laanwj	diapolo	@diapolo we're open to suggestions, but mind that there have been many discussions about a new name and the time to shedpaint about is limited - at a certain point we should simply make a decision    Edit: and I don't want to add -gui, at least not to the full name, a lot of users have no clue what "GUI" means and simply expect an "application" these days.
3203	28106243	2013-11-08T23:19:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28106243	super3	laanwj	I agree on the rebranding. +1 what @laanwj said about doing this in one swift move instead of drawn out. I think the name is subjective. Perhaps we should go to the community about this to come up with a name everyone likes.
3203	28388800	2013-11-13T11:54:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28388800	laanwj	mikehearn	I tend to agree with @mikehearn here.
3203	28403635	2013-11-13T15:28:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28403635	super3	mikehearn	@mikehearn Disagree. I've had to type in bitcoind many many times. I think brevity is key.
3203	28631339	2013-11-16T17:30:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28631339	super3	sipa	@sipa bitcoin-core-qt would probably be better in that case
3182	28625291	2013-11-16T12:05:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28625291	raarts	mikehearn	@mikehearn : can you please enlighten? Laptops seem to becoming the norm. My backup client for example gives me the choice to pause when battery drops below a configurable threshold. I just installed Bitcoin-qt, do you think that was a bad choice?
3181	27320469	2013-10-29T16:47:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27320469	gmaxwell	jgarzik	@jgarzik  Verifying the signature does nothing relevant here, alas, as it's not a concern about ecdsa leaking the private key.    The risk is an error can cause the change addresses to be wrong or cause the values to be wrong. Nothing currently guards against this (though, obviously, it's unlikely). Then it goes on to sign that wrong value, it validates fine, but doesn't do what you want.  We could and should go an verify more after signing, though doing that wouldn't completely eliminate change risk.    The behavior I was complaining about that Dooglus is talking about is where someone puts 100k btc in a single coin and then makes a bunch of small payments with ~100k change each time.  It's taking a small but unnecessary risk to move huge amounts of coins when the actual amount being moved is small.
3157	28200589	2013-11-11T13:47:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28200589	laanwj	Diapolo	@Diapolo I suppose what could work is pass in the Notificator object, and move the message() function/slot there. A global function in GUIUtil would not work, it wouldn't have access to the Notificator.
3157	28411342	2013-11-13T16:49:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28411342	Diapolo	laanwj	@laanwj How should I access the notificator pointer, it's included in BitcoinGUI also :-/.
3147	27192595	2013-10-28T07:08:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27192595	laanwj	luke-jr	@luke-jr you know just as well as us that they'll just ignore that
3141	26979738	2013-10-24T09:57:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26979738	laanwj	Diapolo	@Diapolo The solution is to add a timer, and only execute the action when the timer hit. Postpone the timer every time the user changes the query.
3136	28519132	2013-11-14T20:21:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28519132	Diapolo	laanwj	I tried to debug this, but failed badly... I get a segfault related to ``path.hpp``, which is from Boost filesystem. This happens after ``2013-11-14 20:09:45 Shutdown : done``. I just see that the object contains the correct path to my testnet3 datadir and is unrelated to our datadir caching (as I disabled it for testing purposes).    Perhaps there is some global that get's destructed after everything is already shutdown, dunno yet...    @laanwj Any idea how I can nail this down further?    Edit: I'm going to try Boost 1.55.0 tomorrow and see if that helps ;).
3132	27664065	2013-11-04T04:21:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27664065	fanquake	stevenroose	@stevenroose If you wanted to install bitcoind using WyseNynja's [formula]([https://github.com/WyseNynja/homebrew-bitcoin), you would         brew tap WyseNynja/bitcoin      brew install bitcoind    Tapping that repository will let you install any of the formula inside it.
3132	27746281	2013-11-05T04:05:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27746281	WyseNynja	fanquake	Well those steps __should__ work, but they fail for me on Mavericks.  Do they work for you @fanquake or @stevenroose ?
3132	27746281	2013-11-05T04:05:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27746281	WyseNynja	stevenroose	Well those steps __should__ work, but they fail for me on Mavericks.  Do they work for you @fanquake or @stevenroose ?
3132	28146275	2013-11-10T08:15:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28146275	fanquake	WyseNynja	@WyseNynja After upgrading to Mavericks I haven't been able to build 0.8.5 from your tap.     Building with current master is also failing from the boost sleep error in #3003
3132	28159268	2013-11-10T20:11:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28159268	WyseNynja	fanquake	@fanquake can you build 0.8.5 without my tap?  I can't even do that :(
3132	28615313	2013-11-16T00:47:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28615313	fanquake	WyseNynja	@WyseNynja No I can't build 0.8.5 without your tap.
3088	26230868	2013-10-14T00:34:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230868	gmaxwell	super3	@super3  We haven't considered it super high priority in the past because there are many other signals that give away a Bitcoin node on the network... and if you turn off listening or switch to using tor you turn off most (all in the case of Tor, hopefully) of them as as well as this one.    There were several other points of network centralization before, and we've been chewing away at them. This is the next obvious one to get rid of...
3088	26607973	2013-10-18T16:05:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26607973	petertodd	laanwj	@laanwj One example is for anti-sybil protection by associating an identity with p2pool proofs-of-work, or by simply purchasing a fidelity bond. Once you make the identity expensive to obtain, you can then use fraud proofs - for instance rather than having an expensive UTXO commitment system and associated soft-fork you can just as easily ask nodes to make signed statements as to what transactions match a given filter, and if a different peer gives a different answer, construct a compact proof that one of them was lying and thus destroy that identity. This will work particularly well in conjunction with micropayment systems for SPV node services.
3033	25684489	2013-10-04T08:56:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25684489	Diapolo	sipa	@sipa We should somehow catch these even better and offer help via our reindex dialog? Could latest LevelDB version help here?
3033	28394198	2013-11-13T13:36:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28394198	laanwj	lzrloveyou	@lzrloveyou did a reindex work to solve this?
3030	25318066	2013-09-29T10:37:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318066	jonasschnelli	Diapolo	@Diapolo Yes, that would be great. Make sense to address it in your pull #2612
3025	24962718	2013-09-23T23:04:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962718	sipa	petertodd	@petertodd You basically mean applying the canonicality test to output scripts as well, without enforcing it being push-only. Sounds reasonable.
3025	25044403	2013-09-24T21:32:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25044403	sipa	petertodd	@petertodd Done.
3025	25045309	2013-09-24T21:45:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25045309	sipa	petertodd	@petertodd Nice catch. I removed it while investigating a tester error, that lead to discovering IsPushOnly() was used in P2SH VerifyScript. I shouldn't have left that change in, though. Removed.
3025	25046914	2013-09-24T22:11:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25046914	petertodd	sipa	@sipa Cool. Fix the OP_n case and add more tests and I think this is done.
3025	25320576	2013-09-29T13:45:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320576	sipa	petertodd	@petertodd If we both allow OP_n and single-byte pushes, malleability will remain (at least for non-P2SH multisigs with less than 17 keys). Is it really a problem?
3025	25321242	2013-09-29T14:28:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321242	petertodd	sipa	@sipa As I said in my comment before IsStandard() tests that OP_n is used where appropriate, so there isn't any way to use a non-standard pushdata anyway. Just leave that decision until later - mark it with a "TODO" for now, and do note in that comment that OP_1NEGATE and OP_RESERVED would have to be handled correctly in addition to the more obvious OP_{0,1-16}    Besides, what do you mean by "malleability" in your comment about non-P2SH multisigs anyway? The scriptPubKey is hashed; no-one other than the sender can change it.
3025	26673298	2013-10-20T13:48:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26673298	sipa	petertodd	@petertodd Right now, this is just an IsStandard() test as a first step, but my intention is certainly to try to get this (or something similar) as a network rule (requiring a soft fork). Together with a few other changes, I believe it's possible to kill malleability entirely (only for transactions that don't choose to give it up through different hashtypes, of course).    From that perspective, I don't think there is any way around making sure that every potential data push has exactly one representation in the script language. If we can't accept such a strict rule even for just IsStandard(), then there is certainly no way to get it as a network rule, and this whole effort becomes less useful.
3003	24539787	2013-09-16T20:01:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24539787	theuni	BugAndNewsReporter	@BugAndNewsReporter yep, your log shows the same.
3003	28238730	2013-11-11T21:06:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28238730	theuni	mikehearn	Yep, the m4's find the path and store it, but we don't use it when doing our own checks. Exactly as @mikehearn said.    Fix is to store the good cppflags before the chrono check and add boost's includes:  ```  TEMP_CPPFLAGS="$CPPFLAGS"  CPPFLAGS="$CPPFLAGS $BOOST_INCLUDES"  ```  and reset it after the sleep implementation is set:    ```  CPPFLAGS="$TEMP_CPPFLAGS"
3003	28645555	2013-11-17T09:46:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28645555	fryx	mikehearn	I was having this issue with boost 1.53, turns out that the issue was libpthread not getting linked in. added -lpthread to CXX_FLAGS flags fixed it for me.    @mikehearn    your error is conftest.cpp:35:12: fatal error: 'boost/version.hpp' file not found your issue is that it can't find the boost headers in the path. you might be able to fix it by running ./configure CXXFLAGS="-I /path/to/boost/headers"
3003	28662474	2013-11-17T20:08:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28662474	theuni	mikehearn	@mikehearn I will push up a branch today. If you wouldn't mind verifying that it works as intended, I'll PR it after that.    @fryx: lpthread is a different issue. Autoconf should be linking in any necessary threading lib automatically. If it's not, it's a bug. Would you mind opening another ticket for it and linking a config.log demonstrating the problem?
3003	28662474	2013-11-17T20:08:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28662474	theuni	fryx	@mikehearn I will push up a branch today. If you wouldn't mind verifying that it works as intended, I'll PR it after that.    @fryx: lpthread is a different issue. Autoconf should be linking in any necessary threading lib automatically. If it's not, it's a bug. Would you mind opening another ticket for it and linking a config.log demonstrating the problem?
3003	28814360	2013-11-19T17:46:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28814360	theuni	mikehearn	@mikehearn Sorry for the delay. Mind testing: https://github.com/theuni/bitcoin/commit/5a531982a5d6ec3a6141bba60dcf952e2b4b1669 ?
3002	24545776	2013-09-16T21:22:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24545776	Diapolo	gavinandresen	@gavinandresen Well it's at least intersting to have accounts, with names I never set by using Bitcoin-Qt, no? I have no clue about the concept of labels, just asking :).
2984	24157226	2013-09-10T12:57:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24157226	jgarzik	sipa	The headers-first sync being implemented by @sipa should help with this issue.
2983	26785370	2013-10-22T08:29:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26785370	sipa	laanwj	@laanwj Since 0.8, there is no need to advise people to wipe their data directories, `-reindex` has the same effect, but can reuse blocks that aren't damaged.
2975	24034666	2013-09-09T01:42:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24034666	jgarzik	gmaxwell	Note that @gmaxwell was unable to get this PR to work for him, so there is a bug in there somewher.    @gavinandresen CTransaction method works
2975	24034666	2013-09-09T01:42:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24034666	jgarzik	gavinandresen	Note that @gmaxwell was unable to get this PR to work for him, so there is a bug in there somewher.    @gavinandresen CTransaction method works
2971	24264922	2013-09-11T18:36:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24264922	jonasschnelli	Mezrin	might be fixed (half fixed) with #2987.  @Mezrin do you talk about RPC (API)? I could also try give some info the RPC response whether the fee was voluntary or not
2966	25320852	2013-09-29T14:04:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320852	sipa	pstratem	@pstratem I've forgotten what we've discussed related to this. Do you remember, and is this still the suggested change?
2966	25677418	2013-10-04T05:35:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25677418	gavinandresen	gmaxwell	Can you elaborate on "For various reasons it doesn't actually accomplish this goal" ?    I worry that this pull will break a coinjoin implementation that uses the raw transactions API, but from your comment it sounds like that might be broken anyway ( @gmaxwell : have you done any testing with using other people's unconfirmed inputs to build a coinjoin transaction? )
2966	25683726	2013-10-04T08:39:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683726	sipa	pstratem,	@pstratem, @gmaxwell and I discussed this prior to this pull request.    It seems that currently, vtxPrev is only ever pulled from your wallet, meaning there is no way that something in vtxPrev is something you don't already have. After some digging, we found out this was likely because of the original pay-to-IP protocol, so that unconfirmed dependencies get sent out to receivers automatically (mental note: the payment protocol could use this too). In its current state it is both useless and inefficient (there is a degree of duplication, if you have wallets with many unconfirmed transactions). The solution was to remove it altogether now, and perhaps later re-introduce it when it's useful, in a saner way (without duplication, for starters).
2966	25683726	2013-10-04T08:39:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683726	sipa	gmaxwell	@pstratem, @gmaxwell and I discussed this prior to this pull request.    It seems that currently, vtxPrev is only ever pulled from your wallet, meaning there is no way that something in vtxPrev is something you don't already have. After some digging, we found out this was likely because of the original pay-to-IP protocol, so that unconfirmed dependencies get sent out to receivers automatically (mental note: the payment protocol could use this too). In its current state it is both useless and inefficient (there is a degree of duplication, if you have wallets with many unconfirmed transactions). The solution was to remove it altogether now, and perhaps later re-introduce it when it's useful, in a saner way (without duplication, for starters).
2966	25683876	2013-10-04T08:43:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683876	pstratem	sipa	@sipa this is still the suggested change, however at least one bug was revealed and there are likely more that I have not noticed    getbalance conf=0 can be negative if you have transactions which pay to an IsMine address
2962	23633634	2013-09-01T21:31:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23633634	Diapolo	gmaxwell	63 well all I can say that @gmaxwell had concerns and I was also able to add a .onion address that way. What didn't work was to remove it via ``addnode <onion> remove``. Also I have no answer for your raised question, perhaps we can get @sipa into the boat here?
2962	23633634	2013-09-01T21:31:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23633634	Diapolo	sipa	63 well all I can say that @gmaxwell had concerns and I was also able to add a .onion address that way. What didn't work was to remove it via ``addnode <onion> remove``. Also I have no answer for your raised question, perhaps we can get @sipa into the boat here?
2962	23635199	2013-09-01T23:10:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23635199	63	Diapolo	@Diapolo I can't seem to replicate that one either, at least, removing a .onion address doesn't result in a failure, and attempting to remove an address a second time does (implying that it has been removed).
2960	23604220	2013-08-31T10:32:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23604220	laanwj	jgarzik.	Agree with @jgarzik. Not breaking compability with current clients is more important IMO. I'm fine with an optional JSON-RPC 2.0 mode if anyone is so inclined (and it doesn't result in much more code), but let's not randomly break old clients.
2960	23605690	2013-08-31T12:47:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23605690	luke-jr	laanwj	@laanwj When multiple RPC versions have been proposed in the past, the conclusion at the end was that we should just break compatibility at some 'Y' (as in x.y.z) release since the client is beta anyway.
2954	23633727	2013-09-01T21:37:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23633727	Diapolo	63	@63 What OS are you using? Any special configuration?
2954	23635271	2013-09-01T23:15:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23635271	63	Diapolo	@Diapolo Last build from github, OSX, proxying through Tor, not listening.
2954	23926569	2013-09-06T08:42:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23926569	Diapolo	gmaxwell	Can any of the core devs take a look please? @gmaxwell @gavinandresen @jgarzik
2954	23926569	2013-09-06T08:42:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23926569	Diapolo	gavinandresen	Can any of the core devs take a look please? @gmaxwell @gavinandresen @jgarzik
2954	23926569	2013-09-06T08:42:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23926569	Diapolo	jgarzik	Can any of the core devs take a look please? @gmaxwell @gavinandresen @jgarzik
2936	26350766	2013-10-15T16:36:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26350766	Diapolo	jherrerob	@jherrerob Is that behaviour with current master? I introduced some small changes and fixes in that area over the past days and more pull-requests are open that are related to payment-requests in general.
2936	26354216	2013-10-15T17:20:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26354216	Diapolo	gavinandresen	@gavinandresen I need your help to investigate the reported problems.    Consider an insecure payment-request, this is a request, which doesn't contain an auth-merchant, right? It is otherwiese a normal payment-request, which can contain multiple send-to-addresses, right?    Currently GUI code differentiates between secure and insecure payment-requests, the insecure ones generate one sendcoinsentry for each send-to-address (displayed in the GUI), while secure ones don't do this (one entry and no addresses displayed in the sendcoins dialog).    Now consider an insecure payment-request with 3 send-to-addresses (A, B and C). Current code attaches the payment-request to the first displayed entry (only showing address A), while still adding 2 entries for the other addresses (B and C).    What does this result in? Payments to address A, B and C via the payment-request embedded in GUI entry 1 and payments to B and C via the separate GUI entries!    Seems like a heavy bug IMHO?
2936	26382900	2013-10-15T23:57:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26382900	gavinandresen	Diapolo	@Diapolo:    As I said, I think payment requests need a GUI redesign-- I don't think wedging them into the "one sendcoinsentry per destination address" works.    The design should drive the coding, not the other way around. "We" need to figure out the correct user experience; perhaps payment requests shouldn't even appear in the Send tab, but should be their own dialog boxes. As I said, I'm a terrible UI designer, so I hope @laanwj or somebody else will chime in with an opinion.
2936	26382900	2013-10-15T23:57:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26382900	gavinandresen	laanwj	@Diapolo:    As I said, I think payment requests need a GUI redesign-- I don't think wedging them into the "one sendcoinsentry per destination address" works.    The design should drive the coding, not the other way around. "We" need to figure out the correct user experience; perhaps payment requests shouldn't even appear in the Send tab, but should be their own dialog boxes. As I said, I'm a terrible UI designer, so I hope @laanwj or somebody else will chime in with an opinion.
2936	26395455	2013-10-16T06:26:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26395455	Diapolo	laanwj	@laanwj What you propose shouldn't be that hard (except some detailed display), I can take a look in the next days, as I'm quite im that part of the code now. But if you are already working on that area too, I'm waiting for your input. Can you take a look at the other related pulls and merge the small ones, so I have an up-to-date branch I can start working with :)?
2936	26395567	2013-10-16T06:30:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26395567	laanwj	diapolo,	@diapolo, yes I'll take another look    As for the interaction with the address book, I agree there should be as little as possible. And we should really get rid of the address book as it is and change it to "historical addresses". But that's a different topic (#2429).    Also we need to introduce per-transaction messages somehow (I think this is already supported in the core?). This would allow showing what the payment request was about in the "Transactions" tab instead of abusing the label for that.
2927	23226338	2013-08-25T11:52:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23226338	gmaxwell	63	@63 Thanks for the report!  A lot of the developers build with UPNP much of the time (or, well, at least I do), unfortunate that this slipped through.    @Diapolo we should not UPNP if listen=0, and separately, we should not UPNP if onlynet=tor.
2927	23226338	2013-08-25T11:52:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23226338	gmaxwell	Diapolo	@63 Thanks for the report!  A lot of the developers build with UPNP much of the time (or, well, at least I do), unfortunate that this slipped through.    @Diapolo we should not UPNP if listen=0, and separately, we should not UPNP if onlynet=tor.
2927	23393408	2013-08-28T06:09:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23393408	63	sipa	@sipa Reproduced in the latest master.     `bitcoin.conf`:  ![](https://f.cloud.github.com/assets/5250052/1040007/00088eb8-0fa8-11e3-8c4c-3322daa47c3b.png)    active UPNP mappings on the router:   ![](https://f.cloud.github.com/assets/5250052/1040014/3e42dc92-0fa8-11e3-9dc9-da36f90be40a.png)
2910	22878172	2013-08-19T15:00:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22878172	ashleyholman	luke-jr	There is no prevention to stop the storing of blocks prior to last checkpoint.  The closest thing is a check to see if the block's proof-of-work could possibly be valid given the time elapsed since last checkpoint, which allows for a worst case 4x dropoff in difficulty for every 2 weeks since the checkpoint.    @luke-jr does this introduce any centralisation that's not already there?  See these lines that are already in the AcceptBlock() code:    ```C++          // Check that the block chain matches the known block chain up to a checkpoint          if (!Checkpoints::CheckBlock(nHeight, hash))              return state.DoS(100, error("AcceptBlock() : rejected by checkpoint lock-in at %d", nHeight));  ```  so any attempt to extend a fork prior to a checkpoint will hit up against that check anyway, and won't be able to continue.
2910	22880300	2013-08-19T15:28:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22880300	jgarzik	sipa	+1 @sipa
2910	22892973	2013-08-19T18:22:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22892973	sipa	ashleyholman	@ashleyholman It is relevant, and right now, that's perhaps unwanted (though in case of a freshly-mined block, it is even distributed that way). But again headers-first sync will solve that, as any block received that is not part of the known best chain, is just dropped.
2910	23240834	2013-08-26T02:19:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240834	ashleyholman	sipa	@sipa: patch now amended to use CBlockIndex::IsInMainChain()
2910	24474736	2013-09-15T16:35:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474736	ashleyholman	sipa	@sipa anything else you need from me on this one?
2900	22728664	2013-08-15T20:42:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22728664	petertodd	mikehearn	@mikehearn As you know the DoS attacks identified are not attacks on bandwidth, but rather other resources. Those attacks are significantly easier to pull off if the attacker can reduce the amount of data the targets send back to them; bloom filters do exactly that by reducing the INV messages the attacker receives, allowing one computer to attack a very large number of nodes with very little bandwidth consumption.    It would be helpful if you responded on the email list with what types of prioritization you would consider most useful for SPV clients - @johndillon attempted to start that discussion but I haven't seen you reply. Disabling bloom filters is a form of prioritization in of itself of course, as SPV nodes do not contribute back to the network by relaying data. It is much better for them to have temporary issues connecting in an attack than for relaying in general to fail, something that could lead to a dangerous fork due to convergence failure.    Regardless as @gmaxwell pointed out aside from attacks, the protocol should allow for nodes to advertise whether or not they support bloom filters as a matter of good protocol design - it is after all a service. It's telling that when I mentioned that NODE_BLOOM didn't exist, @gmaxwell was surprised.
2900	22728664	2013-08-15T20:42:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22728664	petertodd	johndillon	@mikehearn As you know the DoS attacks identified are not attacks on bandwidth, but rather other resources. Those attacks are significantly easier to pull off if the attacker can reduce the amount of data the targets send back to them; bloom filters do exactly that by reducing the INV messages the attacker receives, allowing one computer to attack a very large number of nodes with very little bandwidth consumption.    It would be helpful if you responded on the email list with what types of prioritization you would consider most useful for SPV clients - @johndillon attempted to start that discussion but I haven't seen you reply. Disabling bloom filters is a form of prioritization in of itself of course, as SPV nodes do not contribute back to the network by relaying data. It is much better for them to have temporary issues connecting in an attack than for relaying in general to fail, something that could lead to a dangerous fork due to convergence failure.    Regardless as @gmaxwell pointed out aside from attacks, the protocol should allow for nodes to advertise whether or not they support bloom filters as a matter of good protocol design - it is after all a service. It's telling that when I mentioned that NODE_BLOOM didn't exist, @gmaxwell was surprised.
2900	22728664	2013-08-15T20:42:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22728664	petertodd	gmaxwell	@mikehearn As you know the DoS attacks identified are not attacks on bandwidth, but rather other resources. Those attacks are significantly easier to pull off if the attacker can reduce the amount of data the targets send back to them; bloom filters do exactly that by reducing the INV messages the attacker receives, allowing one computer to attack a very large number of nodes with very little bandwidth consumption.    It would be helpful if you responded on the email list with what types of prioritization you would consider most useful for SPV clients - @johndillon attempted to start that discussion but I haven't seen you reply. Disabling bloom filters is a form of prioritization in of itself of course, as SPV nodes do not contribute back to the network by relaying data. It is much better for them to have temporary issues connecting in an attack than for relaying in general to fail, something that could lead to a dangerous fork due to convergence failure.    Regardless as @gmaxwell pointed out aside from attacks, the protocol should allow for nodes to advertise whether or not they support bloom filters as a matter of good protocol design - it is after all a service. It's telling that when I mentioned that NODE_BLOOM didn't exist, @gmaxwell was surprised.
2900	22728664	2013-08-15T20:42:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22728664	petertodd	gmaxwell	@mikehearn As you know the DoS attacks identified are not attacks on bandwidth, but rather other resources. Those attacks are significantly easier to pull off if the attacker can reduce the amount of data the targets send back to them; bloom filters do exactly that by reducing the INV messages the attacker receives, allowing one computer to attack a very large number of nodes with very little bandwidth consumption.    It would be helpful if you responded on the email list with what types of prioritization you would consider most useful for SPV clients - @johndillon attempted to start that discussion but I haven't seen you reply. Disabling bloom filters is a form of prioritization in of itself of course, as SPV nodes do not contribute back to the network by relaying data. It is much better for them to have temporary issues connecting in an attack than for relaying in general to fail, something that could lead to a dangerous fork due to convergence failure.    Regardless as @gmaxwell pointed out aside from attacks, the protocol should allow for nodes to advertise whether or not they support bloom filters as a matter of good protocol design - it is after all a service. It's telling that when I mentioned that NODE_BLOOM didn't exist, @gmaxwell was surprised.
2900	22742635	2013-08-16T01:29:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22742635	petertodd	jgarzik	@jgarzik Good idea re: BIP.
2900	22746762	2013-08-16T04:14:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22746762	gavinandresen	SergioDemianLerner	I'm curious to see what @SergioDemianLerner thinks of this patch.    My concern is that if there IS a valid DoS attack on bloom-filter nodes (the "attack", as I understand it, is supposed to cause excessive disk seeking looking for transactions, yes?  "meh" -- worst case is "node gets slow" if it isn't running with big disk cache buffers or from an SSD), then adding a NODE_BLOOM bit will just make it easier for attackers to find them and attack them.
2900	22753140	2013-08-16T08:09:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22753140	petertodd	gavinandresen	@gavinandresen "node gets slow" is a potentially serious problem. "making it easier for attackers to find them": Serving SPV nodes is far less important to the health of the network than ensuring relaying works and consensus is maintained.    Next time I'd suggest letting people finish exploring the issue before you assume revealing the exploit publicly won't do any harm.
2900	22761634	2013-08-16T11:49:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22761634	petertodd	johndillon's	Mike, enough with the overheated rhetoric.    Occasionally nodes will have reasons not to offer the bloom filter service, while still having block data. (NODE_NETWORK) Right now the protocol doesn't give any way to say that, adding the NODE_BLOOM service bit lets you do that.    Of course, if you are going to have NODE_BLOOM, it's useful to be able to disable the bloom service for testing SPV clients, hence the undocumented command line flag. The code implementing the feature also shows what should happen if a node doesn't support bloom filters: kick peers requiring that feature so they won't waste their bandwidth. It'd also be useful as a temporary emergency measure if a DoS attack is launched, but in the meantime we don't have any reason to expect users to use the flag. It is unfortunate that Gavin's revealed a particularly effective one, but that's life. In any case, finding DoS attacks may be trivial for you, but our attackers don't seem to find them on their own and seem to only launch them after they have been revealed publicly prior to a patch.    If you want to talk about priority schemes, move it to the email list and reply to @johndillon's thread rather than cluttering up this pull-req with off-topic discussion. Your ideas only work against some types of attacks in any case.
2900	22761718	2013-08-16T11:52:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22761718	petertodd	wtogami	@wtogami I suggested awhile back to make it easy to set the alert keys locally for testing - maybe that's the way to handle testing them? You'd still have to regenerate the test cases every time the protocol version was changed, but that could be turned into a simple script using a known privkey.    Might be a better idea in general: because the key is what's non-standard, you can have test cases that use times that are standard without risking re-use of the test alerts on the network.
2900	22810556	2013-08-17T12:06:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810556	gmaxwell	wtogami	@wtogami change your test to run with a throwaway key which is only used in testing mode if thats your concern.
2900	22810585	2013-08-17T12:08:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810585	wtogami	gmaxwell	@gmaxwell Does that mean you suggest that be added as a second commit to this PR?
2900	22810860	2013-08-17T12:26:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810860	gmaxwell	wtogami	@wtogami  No, I don't care, updating the protocol version is infrequent enough that we can just fix the test after doing so. "Defacto centeral control" is not a concern there, if you are having trouble getting the test updated you just make the change I suggested, remove the test, or remove the alert key entirely.
2900	23229946	2013-08-25T15:46:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23229946	sipa	gavinandresen	@gavinandresen I don't really follow your reasoning; assuming an attack exists (ignoring whether it does or not for now), then forcing everyone to be vulnerable is certainly worse than making it optional and advertizing it (perhaps combining it with stronger anti-DoS measures, knowing that it may reduce availability of other offered services).    I do agree with @mikehearn that a decent resource-limitating implementation is necessary as a generic solution against DoS attacks. I do believe that's orthogonal to the approach taken by this change, though.    The services offered by P2P nodes to the network (for free!) are quite distinct, and have different use cases, different clients, and different attack models:   * (unfiltered) old blocks are only necessary for full nodes that are synchronizing. The only thing that matters is bandwidth really (latency is only important in so far that extreme degradation would increase sybil-vulnerability).   * (unfiltered) recent blocks are only necessary for full nodes keeping up with the chain, and mostly need low latency to keep the convergence speed of the network fast. Bandwidth is only important when it starts influencing latency.   * (filtered) blocks are only necessary for SPV nodes, and the same old/new distinction exists (old blocks need bandwidth, new blocks need latency).   * lone transactions are only necessary for distribution to miners and (to the extent possible) aim of the network to prevent 0-conf double spending. Until the payment protocol takes off, it also matters for distribution to receivers, but this isn't necessary IMHO. I believe all this is mostly best-effort in any case, and secondary to the other services offered.    In my opinion, these are sufficiently independent from each other that they should be easily isolatable. We're relying on charity of those running full nodes to provide these services, and which of these they consider important for the survival of the network may differ. Additionally, not all of these are necessarily present to the same extent in the network - there may be more demand for some than for others. This all speaks in favor of having separate services bits for them. Maybe at some point more specialized and separately-maintained software for each exists, though that's probably not for soon.    On the other hand, requiring full node implementations to support SPV functionality probably benefits the popularity of Bitcoin as a payment system, and may improve its usefulness to the economy. "Surviving" up to the point where we're worried about certain attacks may be more important than dealing with those attacks in the first place. Still, ultimately this is about whether alternate full node implementations are allowed to not implement SPV services, and they may have reasons not to (perhaps because they offer a competing lightweight client model). If the choice is between them not implementing Bloom filtering (and ignore requests, or disconnect in case of such requests), and them being able to advertize not supporting it in the first place, I certainly choose the latter.    I lean towards ACK, but this discussion probably belongs elsewhere (it's not entirely specific to the reference client), and certainly warrants a BIP. The implementation looks good in any case.
2900	23229946	2013-08-25T15:46:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23229946	sipa	mikehearn	@gavinandresen I don't really follow your reasoning; assuming an attack exists (ignoring whether it does or not for now), then forcing everyone to be vulnerable is certainly worse than making it optional and advertizing it (perhaps combining it with stronger anti-DoS measures, knowing that it may reduce availability of other offered services).    I do agree with @mikehearn that a decent resource-limitating implementation is necessary as a generic solution against DoS attacks. I do believe that's orthogonal to the approach taken by this change, though.    The services offered by P2P nodes to the network (for free!) are quite distinct, and have different use cases, different clients, and different attack models:   * (unfiltered) old blocks are only necessary for full nodes that are synchronizing. The only thing that matters is bandwidth really (latency is only important in so far that extreme degradation would increase sybil-vulnerability).   * (unfiltered) recent blocks are only necessary for full nodes keeping up with the chain, and mostly need low latency to keep the convergence speed of the network fast. Bandwidth is only important when it starts influencing latency.   * (filtered) blocks are only necessary for SPV nodes, and the same old/new distinction exists (old blocks need bandwidth, new blocks need latency).   * lone transactions are only necessary for distribution to miners and (to the extent possible) aim of the network to prevent 0-conf double spending. Until the payment protocol takes off, it also matters for distribution to receivers, but this isn't necessary IMHO. I believe all this is mostly best-effort in any case, and secondary to the other services offered.    In my opinion, these are sufficiently independent from each other that they should be easily isolatable. We're relying on charity of those running full nodes to provide these services, and which of these they consider important for the survival of the network may differ. Additionally, not all of these are necessarily present to the same extent in the network - there may be more demand for some than for others. This all speaks in favor of having separate services bits for them. Maybe at some point more specialized and separately-maintained software for each exists, though that's probably not for soon.    On the other hand, requiring full node implementations to support SPV functionality probably benefits the popularity of Bitcoin as a payment system, and may improve its usefulness to the economy. "Surviving" up to the point where we're worried about certain attacks may be more important than dealing with those attacks in the first place. Still, ultimately this is about whether alternate full node implementations are allowed to not implement SPV services, and they may have reasons not to (perhaps because they offer a competing lightweight client model). If the choice is between them not implementing Bloom filtering (and ignore requests, or disconnect in case of such requests), and them being able to advertize not supporting it in the first place, I certainly choose the latter.    I lean towards ACK, but this discussion probably belongs elsewhere (it's not entirely specific to the reference client), and certainly warrants a BIP. The implementation looks good in any case.
2900	26690423	2013-10-21T03:02:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690423	petertodd	gavinandresen	@gavinandresen rebased    Current test plan and results has been as follows:    1) Bloom filters enabled, NODE_BLOOM set, protocol version bump (default settings)    Peers connect normally, no observed changes: PASS  Android Bitcoin Wallet connects successfully: PASS  Android Bitcoin Wallet connects as only peer: PASS    2) Bloom filters disabled, NODE_BLOOM unset (-bloomfilters=0)    Non-bloom-using nodes connect normally: PASS  Bloom-using nodes kicked: PASS  No bloom-using nodes seen in getpeerinfo (which would indicate they don't give up): PASS  Android Bitcoin wallet w/ !NODE_BLOOM peer set as trusted peer and with DNS peer discovery enabled: PASS (fails to connect to the peer, but behaves normally otherwise)  Android Bitcoin wallet w/ !NODE_BLOOM peer as only peer: PASS, although the wallet code never gives up, connecting multiple times a second. But that's a bug in the Android wallet that should be fixed.    3) DNS seeds    @sipa implementation https://github.com/sipa/bitcoin-seeder ignores NODE_BLOOM: PASS  @TheBlueMatt's implementation https://github.com/TheBlueMatt/dnsseed-bitcoinj ignores NODE_BLOOM: PASS    Note that I only checked that the source code for both tests for NODE_NETWORK with an and, and thus will ignore other service bits being set. We can modify the dns seeds to filter requested service bits later if required; useful later for other things like the proposed NODE_ARCHIVAL_BLOCKCHAIN_DATA-type stuff.
2900	26690423	2013-10-21T03:02:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690423	petertodd	sipa	@gavinandresen rebased    Current test plan and results has been as follows:    1) Bloom filters enabled, NODE_BLOOM set, protocol version bump (default settings)    Peers connect normally, no observed changes: PASS  Android Bitcoin Wallet connects successfully: PASS  Android Bitcoin Wallet connects as only peer: PASS    2) Bloom filters disabled, NODE_BLOOM unset (-bloomfilters=0)    Non-bloom-using nodes connect normally: PASS  Bloom-using nodes kicked: PASS  No bloom-using nodes seen in getpeerinfo (which would indicate they don't give up): PASS  Android Bitcoin wallet w/ !NODE_BLOOM peer set as trusted peer and with DNS peer discovery enabled: PASS (fails to connect to the peer, but behaves normally otherwise)  Android Bitcoin wallet w/ !NODE_BLOOM peer as only peer: PASS, although the wallet code never gives up, connecting multiple times a second. But that's a bug in the Android wallet that should be fixed.    3) DNS seeds    @sipa implementation https://github.com/sipa/bitcoin-seeder ignores NODE_BLOOM: PASS  @TheBlueMatt's implementation https://github.com/TheBlueMatt/dnsseed-bitcoinj ignores NODE_BLOOM: PASS    Note that I only checked that the source code for both tests for NODE_NETWORK with an and, and thus will ignore other service bits being set. We can modify the dns seeds to filter requested service bits later if required; useful later for other things like the proposed NODE_ARCHIVAL_BLOCKCHAIN_DATA-type stuff.
2900	26690423	2013-10-21T03:02:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690423	petertodd	TheBlueMatt's	@gavinandresen rebased    Current test plan and results has been as follows:    1) Bloom filters enabled, NODE_BLOOM set, protocol version bump (default settings)    Peers connect normally, no observed changes: PASS  Android Bitcoin Wallet connects successfully: PASS  Android Bitcoin Wallet connects as only peer: PASS    2) Bloom filters disabled, NODE_BLOOM unset (-bloomfilters=0)    Non-bloom-using nodes connect normally: PASS  Bloom-using nodes kicked: PASS  No bloom-using nodes seen in getpeerinfo (which would indicate they don't give up): PASS  Android Bitcoin wallet w/ !NODE_BLOOM peer set as trusted peer and with DNS peer discovery enabled: PASS (fails to connect to the peer, but behaves normally otherwise)  Android Bitcoin wallet w/ !NODE_BLOOM peer as only peer: PASS, although the wallet code never gives up, connecting multiple times a second. But that's a bug in the Android wallet that should be fixed.    3) DNS seeds    @sipa implementation https://github.com/sipa/bitcoin-seeder ignores NODE_BLOOM: PASS  @TheBlueMatt's implementation https://github.com/TheBlueMatt/dnsseed-bitcoinj ignores NODE_BLOOM: PASS    Note that I only checked that the source code for both tests for NODE_NETWORK with an and, and thus will ignore other service bits being set. We can modify the dns seeds to filter requested service bits later if required; useful later for other things like the proposed NODE_ARCHIVAL_BLOCKCHAIN_DATA-type stuff.
2900	26706931	2013-10-21T10:36:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26706931	petertodd	wtogami	@wtogami Sure, but that's not something that prevents merging this patch; it's compatible with older SPV implementations. More to the point, those implementations aren't going to change until this patch is merged.
2900	26717023	2013-10-21T13:35:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26717023	petertodd	mikehearn	@mikehearn Read the patch prior to commenting about it; it automatically kicks older peers so they won't waste their bandwidth and my draft BIP says that behavior is a must.    Also, the requirements of serving archival and bloomfilter-using nodes are very different and can productively be optimized differently: https://github.com/bitcoin/bitcoin/pull/2900#issuecomment-23274616
2900	26723942	2013-10-21T14:53:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26723942	petertodd	TheBlueMatt	@TheBlueMatt If the sticking point for people is the fact that there is that option, I'll remove it.
2900	26744037	2013-10-21T18:39:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26744037	wtogami	petertodd	> our patch is "backwards compatible" as long as most nodes don't use it    NODE_BLOOM enabled-by-default with 0.9 combined with always-enabled with 0.8.x means most nodes will use it.    > I think it may make more sense to start advertising NODE_BLOOM before we add a (even undocumented) option to disable it. That could ease the transition significantly    Please.  No.  Removing the option would mean other clients can entirely opt out of paying attention to the service bit, thereby rendering it pointless.  The option being widely deployed at least makes it very easy to tell the world how to defend against a particular type of problem if it were to happen, which may be enough to discourage that problem from happening as they would know the network can bounce back very quickly without any software update.    @petertodd In retrospect, the 24 hour ban was too heavy handed.  Mike is right about it being too easy to ban an entire IP.
2900	27140402	2013-10-26T06:15:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140402	petertodd	schildbach	Updated to use CloseSocketDisconnect() rather than a 24-hour DoS-ban.    Tested with my Android wallet, which happily successfully connects then is disconnected about five times a second forever...    Off-topic here, but @schildbach I'd suggest some kind of back-off algorithm, or at least waiting a second or two. It even does that on a cellular data connection, which could get rather expensive.
2900	27141167	2013-10-26T07:23:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27141167	schildbach	petertodd	@petertodd Yes, that's a well known regression in bitcoinj: http://code.google.com/p/bitcoinj/issues/detail?id=296
2861	21601833	2013-07-26T05:10:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21601833	kyledrake	sipa	**THANK YOU SO MUCH!** @sipa you are my hero (and probably a bunch of other people's too)!    I will pull this and test it tomorrow, and try to do a more extensive test this weekend. I'll report back if I find any issues.    Again, you are awesome, and I think this is hugely important for bitcoin. Thank you, thank you, thank you.
2861	21601944	2013-07-26T05:16:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21601944	kyledrake	sipa	@sipa is there any chance this could make it into master for the next release? I'm not sure if it's out of scope for the next release or not, just curious on timing so I can plan accordingly. I would love to see in the next release of course, but I don't want to derail all the other important stuff you guys are working on.
2861	21611891	2013-07-26T10:01:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21611891	sipa	CodeShark	@CodeShark The approach that this pullreq takes is that for almost everything, watch-only is considered equal to normal keys. You'll see it in getbalance, in listtransactions, in listunspent, ...    However, these are not considered when creating a transaction. Presumably we'll need a getspendablebalance too, and some GUI special-casing (perhaps only shown when watch-only addresses are present at all).
2861	21708762	2013-07-29T09:34:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21708762	deweydb	sipa	Thanks @sipa and others who have contributed to this!  I am so insanely happy to see this functionality get added.
2861	22257253	2013-08-07T14:57:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22257253	sipa	gavinandresen	@gavinandresen You've voiced some objections to this on IRC, and prefer watch-only wallets over individual watch-only addresses IIRC, care to mention them here?    I don't feel like working on this further if it is controversial, but I think it's extremely useful and pretty much necessary to enable managing P2SH addresses without having all keys available. To get that same functionality with watch-only wallets, this becomes dependent on multiwallet, which doesn't seem to be making any progress.
2861	22284428	2013-08-07T21:12:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22284428	kyledrake	sipa	@sipa is the importaddress code expected to update the account balance when a transaction goes out? I just dropped a generated raw transaction onto blockchain.info's tx send with one of the unspent transactions, and it removed the unspent from `listunspent`, but it didn't change the balance for the account that the address is associated with.    I didn't send it through my bitcoind instance, so that may be why that's happening, I need to do another test and send through my local bitcoind. Just wanted to mention incase it was a bug:    ```  ~ $ bitcoind listunspent  [      {          "txid" : "d266240586fc70f4e3927f3b0a70351179a5f2dbd189aecd31907f8596f0ffc3",          "vout" : 1,          "address" : "134GKGyWFftj2m4ZFKsBuCbm3GgXfDmuxX",          "account" : "RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=",          "scriptPubKey" : "76a914168e48aa5551a3ce7339dd55048b976edea3687288ac",          "amount" : 0.06000000,          "confirmations" : 2668,          "spendable" : false      }  ]  ~ $ bitcoind getbalance  0.06000000  ~ $ bitcoind getbalance RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=  0.12000000  ~ $ bitcoind listaccounts  {      "" : -0.06000000,      "RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=" : 0.12000000  }  ```    And the transaction that was sent: https://blockchain.info/tx/87eb6a89ad7c53bc597a9c8431a22072e83d5e4b4ecbeb071b651aa5b5e964bd?show_adv=true
2861	22285171	2013-08-07T21:23:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22285171	sipa	kyledrake	@kyledrake Accounts are not addresses, and do not have _anything_ to do with the coins available to an address. The abstraction provided by the reference client has at no point any concept of a "balance of an address", only "balance of a wallet".    Addresses are associated with accounts, and coins received by those address will credit the account. For debits, you need to explicitly use "sendfrom".    Accounts are just virtual counters, and they can even go negative. I don't see a useful way to combine them with watch-only addresses. I think in general that their use is very limited, and in most cases what people really want is multiple individual wallets.
2861	22297719	2013-08-08T02:02:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22297719	luke-jr	jgarzik	@jgarzik Do they? (considering imports rescan the blockchain..)    Reminder that the original author of this pull request has abandoned it in favour of watch-only wallets. IMO, it makes a lot more sense to approach this after HD wallets are merged, as then there's a clear use-case that doesn't violate the no-address-reuse principle.
2861	22311416	2013-08-08T09:09:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22311416	runeksvendsen	luke-jr	@luke-jr `importaddress` doesn't do a rescan if you pass "false" as the third (rescan) parameter. So the approach for batch imports of watch-only addresses would be to add all your addresses except the last one with rescan=false, and add the last one with rescan=true.    Thinking about my use cases, I don't think I would have any use case for a mixed watch-only/regular wallet. Ie. I wouldn't have a need for a wallet containing private keys that can spend money, *and* a wallet containing watch-only addresses. To me, the whole point of watch-only addresses is not letting bitcoind manage private keys for added security. Either for use with a web service (which can be a blockchain.info-style site, or a web wallet), or a local Armory-style wallet, where an external program handles the wallet, and only uses bitcoind to maintain the blockchain and query it about relevant transactions.    As Armory functions now, it uses bitcoind to maintain the blockchain, but not to query information from it. Armory scans the entire blockchain (loads the raw "blkxxxxx.dat" files) on startup, and to deduce the balance for the wallets maintained by Armory. If these watch-only extensions were to become available, Armory could add the relevant addresses using the `importaddress` function, and let bitcoind gather information on these addresses. To me this would be the first step in separating the wallet functionality from bitcoind.    I agree that mixing these two address types can be confusing - even though it has to be done manually - so I would much rather have the ability to have either a watch-only wallet or a wallet with private keys than nothing at all, although I'm not sure how much work that would be to implement.    Another solution would be to add watch-only versions of the relevant affected RPC calls. Ie. using `wogetbalance` to get the balance of watch-only addresses, `wolistunspent` to list unspent transactions for watch-only addresses etc. Another option would be to include an optional [includewatchonly=false] parameter to the relevant RPC calls, as another solution to make sure we don't break existing installations. I agree with Gavin that this is an important concern.
2861	24636856	2013-09-18T02:24:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24636856	petertodd	kyledrake	@kyledrake You know, the P2SH support @sipa just added could work well with Coinpunk: store funds in a 2-of-2 multisig P2SH addresses (including change) and have both the server and the user's client-side wallet sign transactions. Because both parties need to be involved you'd be able to implement useful features like daily spending limits, 2-factor-authentication to keep coins safe even if the user's computer is completely compromised, and safe instant transfers between users, while still preventing coins from being stolen if the server itself is hacked.
2861	24636856	2013-09-18T02:24:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24636856	petertodd	sipa	@kyledrake You know, the P2SH support @sipa just added could work well with Coinpunk: store funds in a 2-of-2 multisig P2SH addresses (including change) and have both the server and the user's client-side wallet sign transactions. Because both parties need to be involved you'd be able to implement useful features like daily spending limits, 2-factor-authentication to keep coins safe even if the user's computer is completely compromised, and safe instant transfers between users, while still preventing coins from being stolen if the server itself is hacked.
2861	26014195	2013-10-09T22:22:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26014195	kyledrake	sipa	@sipa I'm not sure what the benefits are of using this over the current implementation (which appears to work very well under testing), but I'll defer to the experts.    How long do you think it will take to make that change? Is it a candidate for making it into 0.9?    Not trying to pushy, just need to provide information to people using Coinpunk. Thanks for the feedback!
2861	26016778	2013-10-09T23:05:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26016778	sipa	kyledrake	@kyledrake It's not about implementation - I expect that little would change. The reason to suggest it, is because the main controversy seems to be what the semantics of unspendable coins would be. If they behave identically to an already existing concept (lockunspent), the semantics are clear.    And I'm working on other things first.
2861	26661566	2013-10-19T23:50:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26661566	sipa	laanwj	@laanwj I do agree that having entire wallets be watch-only or not would certainly be an easier abstraction, but IMHO that means we need multiwallet as well.
2861	26661771	2013-10-20T00:05:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26661771	jegz	sipa,	Just want to give my love to @sipa, thanks for the feature! Hope it gets merged soon. +1
2861	26710932	2013-10-21T11:58:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26710932	laanwj	sipa	@sipa Yes, let's just go ahead with this. Even with watch-only wallets we'll need "importaddress" and unspendable outputs.    ACK; tested and it works as expected
2861	26719836	2013-10-21T14:08:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26719836	jgarzik	laanwj	@laanwj  +1  That's the bottom line    ACK, did a quick test and re-review
2861	26758690	2013-10-21T21:31:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26758690	sipa	keo	@keo It seems I never replied to your comment, but what may seem as overcomplication is rather the opposite.    Being able to always query information about any address's history, requires a rather large index to be maintained (multiple gigabytes). Using that for a simple wallet service means you become dependent on such an index, and your system will for example not be compatible with block chain pruning (not storing old parts of the block chain on disk). And most of all, it isn't needed for normal operation. Contrary to how many people see the system, internally it doesn't work with addresses at all - those are just part of an authentication layer on top of transactions (implemented through scripts).    For anyone just needing information about some wallet, where potentially not all keys are known, this is a much more efficient and scalable solution.
2861	27671538	2013-11-04T09:18:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27671538	wtogami	kyledrake	@kyledrake   Would Coinpunk be usable with a fully watch-only wallet?  It would be a lot safer and less confusing to allow watch-only addresses only if a wallet does not mix with privkey addresses.  I have to admit while testing this earlier that the user experience with the current watchonly implementation is very confusing when you have a mixed wallet.  The "fake-encrypted" wallet approach would allow a watch-only wallet to happen safely and easily.
2861	27703385	2013-11-04T17:15:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27703385	kyledrake	wtogami	@wtogami Coinpunk would be usable with a watch-only wallet, correct. I'm not sure if others would like to have the private key addresses for other purposes, but for me, private key addresses are not needed.
2861	27874594	2013-11-06T13:54:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27874594	wtogami	kyledrake	@kyledrake   Given the current conflict Watch Only will not improve until Coin Control #2343 is first merged.  CC is pretty much done except people need to step through the Test Plan in that ticket.  Could you please direct people to participate in that?
2861	27966370	2013-11-07T14:07:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27966370	laanwj	sipa	@sipa I agree. IMO the complication of the current solution would be less if it was more visible to the user through the interface; for example if getinfo and such were to return two balances: a spendable and a watch-only balance.     Internally this could be implemented by making GetBalance take an IsMineType. This would also fit better into the overview page in the GUI.
2861	27967829	2013-11-07T14:20:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27967829	jgarzik	sipa	@sipa +1
2861	29104359	2013-11-22T19:59:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29104359	imton	sipa	This is working awesome for me. Thank you @sipa  and all other people here too.   I want to ask, how can we delete a watched only address from being "watched". Because I sync my cache from "listtransactions *"  from now and then I don't want bitcoind to keep being aware of some address. Can I remove them?
2844	21371668	2013-07-22T20:07:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21371668	petertodd	luke-jr	@luke-jr I agree, and make the default for Accept: \*/\* be to output json so curl usually works the way people expect.
2844	21417535	2013-07-23T14:26:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21417535	jgarzik	sipa	@sipa makes a fair point about requiring a header being a bit more difficult.  Software such as dumb browsers do not permit easy HTTP header modification.  However, query strings are bloody ugly.    github.com-style clean URLs seem like a smart way to go, e.g.  ```      GET /rest/tx/TX-HASH/json  ```    to get the non-default JSON output.    Easy enough to add modifiers after the TX-HASH.
2844	22262030	2013-08-07T16:00:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22262030	keo	jgarzik	@jgarzik thank you! This is the beginning of a usable, clean API which appeals to merchants and PSPs.    @maaku agree on providing .json instead of /json - seems to be the way everyone does it (without saying anything about whether this is good or bad).
2844	22262030	2013-08-07T16:00:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22262030	keo	maaku	@jgarzik thank you! This is the beginning of a usable, clean API which appeals to merchants and PSPs.    @maaku agree on providing .json instead of /json - seems to be the way everyone does it (without saying anything about whether this is good or bad).
2844	22447903	2013-08-10T21:36:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22447903	gavinandresen	runeksvendsen	+1 for @runeksvendsen : I'd rather ship a version of his btchttp.py in contrib/ than make core bitcoind bigger.
2844	22449659	2013-08-10T23:49:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22449659	rebroad	runeksvendsen	The risk in moving this to contrib is that the majority of peers wouldn't  use it, and then when ISPs start blocking the original bitcoin protocol the  network is more likely to die. What we really need is HTTPS so that it's  harder to block.    On Sunday, August 11, 2013, Gavin Andresen wrote:    > +1 for @runeksvendsen <https://github.com/runeksvendsen> : I'd rather  > ship a version of his btchttp.py in contrib/ than make core bitcoind bigger.  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22447903>  > .  >
2844	22454377	2013-08-11T08:27:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22454377	sipa	rebroad	@rebroad This is not an interface intended to be exposed to the internet. You can do so of course, but it's not a replacement for the P2P system (it's more an addition to RPC). It's just an interface to ease debugging, or help other local applications that need access to raw block/transaction data.    Regarding whether this belongs in bitcoind, I'm in the middle. I understand the concern about not bloating bitcoind even further, but if such a feature means more people running a local bitcoind instead of relying on some centralized webservice, I'm all for it. The same goes for an address index, and a potential minimal built-in block explorer. However, I'm not sure what this adds that isn't available already. Humans will not use this interface, IMHO, and external applications can already use getblock/getrawtransaction.
2844	22460346	2013-08-11T16:25:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22460346	sipa	jgarzik	@jgarzik It's clearly a compromise between usability and bloat, which may or may not be worth it (see my other comment regarding that), however, there IS a getrawblock, it's called getblock [hash] false.
2844	23220357	2013-08-25T02:02:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220357	jgarzik	maaku	Updated for @maaku 's suggestion of HASH.EXTENSION, where the extension (.json, .txt, .dat) selects the format.    Updated OP examples.
2841	27014361	2013-10-24T17:51:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27014361	laanwj	CodeShark	@CodeShark I've rebased it: https://github.com/laanwj/bitcoin/tree/2013_10_noautorefillkeypool_rebase    @luke-jr yes, it should block all the cases in which keys are added to the wallet automatically. But in the (future) case of HD wallets it could "generate" new keys from the seed even with this option on.
2841	27014361	2013-10-24T17:51:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27014361	laanwj	luke-jr	@CodeShark I've rebased it: https://github.com/laanwj/bitcoin/tree/2013_10_noautorefillkeypool_rebase    @luke-jr yes, it should block all the cases in which keys are added to the wallet automatically. But in the (future) case of HD wallets it could "generate" new keys from the seed even with this option on.
2839	21794032	2013-07-30T14:21:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21794032	sipa	mikehearn	@mikehearn Makes sense, but that'd be more work, as there is no transaction index (and the optional one isn't used for validation). For blocks, there is already a mechanism for marking them invalid in the block index db.
2839	24918412	2013-09-23T13:11:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24918412	sipa	mikehearn	@mikehearn I wrote this pull request as preparation for headers-first sync, and the current headers-first sync pull request still includes it, but most of the code touched here (except the actual RPC implementations) is rewritten for headers-first anyway.
2834	22233078	2013-08-07T06:56:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22233078	K1773R	luke-jr	@luke-jr how about making changes so you can specify after which time X you get a new template?
2834	22234309	2013-08-07T07:30:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22234309	luke-jr	K1773R	@K1773R That might make sense for a future pull request.
2819	20703834	2013-07-09T20:42:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20703834	jgarzik	gavinandresen	@gavinandresen ACK
2811	20712410	2013-07-09T23:22:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20712410	kuzetsa	subSTRATA	@subSTRATA Even if the older version of OpenSSL is:    > known to have multiple issues (at least 3 bugs, as explained bellow)    ... It probably doesn't hurt anything.    Last I checked, bitcoin **mostly** is only using the randomizer from openssl and probably one or more hashing functions which are **not affected** by the security advisories you're referencing.
2790	19970374	2013-06-25T11:41:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19970374	laanwj	diapolo.	Indeed @diapolo. Date formatting is determined by the qt system locale, not the language. I guess it'd be possible to change the locale with the language though.
2784	19861397	2013-06-22T17:30:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19861397	sipa	mikehearn	@mikehearn Would this interact badly with BitcoinJ wallets? How frequently do they send pings?  (or anyone with an alternate implementation)
2784	26272177	2013-10-14T17:15:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26272177	gmaxwell	sipa	@sipa  ACK unconditional 2 minute ping plus 5 minute disconnect.
2770	19523114	2013-06-17T01:43:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19523114	gmaxwell	rebroad	@rebroad you're using a mac?
2770	19523153	2013-06-17T01:45:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19523153	rebroad	rebroad	No, windows XP with the bitcoin data directory mounted on a truecrypt  partition.  On Jun 17, 2013 8:43 AM, "Gregory Maxwell" <notifications@github.com> wrote:    > @rebroad <https://github.com/rebroad> you're using a mac?  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/issues/2770#issuecomment-19523114>  > .  >
2770	20870287	2013-07-12T10:56:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20870287	gmaxwell	Diapolo	...    @Diapolo  If a new version of LevelDB has changed in ways we don't understand, then those changes could result in chain forking.  If we understand how its changed we could reason about how they may or may not have helped OSX/Windows and there is no need to just guess.
2770	20870672	2013-07-12T11:09:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20870672	Diapolo	gmaxwell	@gmaxwell You are most likely correct in what you say, but doing nothing about the crashes seems to just bring people away from bitcoind or Bitcoin-Qt in the end :-/.
2770	22474152	2013-08-12T05:40:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22474152	gavinandresen	sipa	I got a chainstate corruption this morning on my Mac, and have spent most of the day debugging.  @sipa @gmaxwell @jgarzik : here is what I've found so far:    My MANIFEST- file is corrupted (corrupted file: http://skypaint.com/bitcoin/MANIFEST-076191 ). I wrote a little python tool to dump the log records (http://skypaint.com/bitcoin/dumplogfile.py ), and something odd happened at bytes 65,506-65.536: there are 30 zero bytes.    So the records look like (output from my dumplogfile.py ):      FULL length 1012 (position: 64490)    0 length 0 (position: 65509)    0 length 0 (position: 65516)    0 length 0 (position: 65523)  BLOCK 2    LAST length 1121 (position: 65536)    ... and leveldb is very upset that there is no FIRST record before the LAST record at the beginning of block 2 (block as in "leveldb 32,768-byte block of records", not bitcoin block).    WHY those 30 zero bytes were written.... I dunno.
2770	22474152	2013-08-12T05:40:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22474152	gavinandresen	gmaxwell	I got a chainstate corruption this morning on my Mac, and have spent most of the day debugging.  @sipa @gmaxwell @jgarzik : here is what I've found so far:    My MANIFEST- file is corrupted (corrupted file: http://skypaint.com/bitcoin/MANIFEST-076191 ). I wrote a little python tool to dump the log records (http://skypaint.com/bitcoin/dumplogfile.py ), and something odd happened at bytes 65,506-65.536: there are 30 zero bytes.    So the records look like (output from my dumplogfile.py ):      FULL length 1012 (position: 64490)    0 length 0 (position: 65509)    0 length 0 (position: 65516)    0 length 0 (position: 65523)  BLOCK 2    LAST length 1121 (position: 65536)    ... and leveldb is very upset that there is no FIRST record before the LAST record at the beginning of block 2 (block as in "leveldb 32,768-byte block of records", not bitcoin block).    WHY those 30 zero bytes were written.... I dunno.
2770	22474152	2013-08-12T05:40:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22474152	gavinandresen	jgarzik	I got a chainstate corruption this morning on my Mac, and have spent most of the day debugging.  @sipa @gmaxwell @jgarzik : here is what I've found so far:    My MANIFEST- file is corrupted (corrupted file: http://skypaint.com/bitcoin/MANIFEST-076191 ). I wrote a little python tool to dump the log records (http://skypaint.com/bitcoin/dumplogfile.py ), and something odd happened at bytes 65,506-65.536: there are 30 zero bytes.    So the records look like (output from my dumplogfile.py ):      FULL length 1012 (position: 64490)    0 length 0 (position: 65509)    0 length 0 (position: 65516)    0 length 0 (position: 65523)  BLOCK 2    LAST length 1121 (position: 65536)    ... and leveldb is very upset that there is no FIRST record before the LAST record at the beginning of block 2 (block as in "leveldb 32,768-byte block of records", not bitcoin block).    WHY those 30 zero bytes were written.... I dunno.
2770	22476681	2013-08-12T07:20:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22476681	Diapolo	gavinandresen	@gavinandresen Did this happen with a build, which includes the recent LevelDB update?
2770	22534779	2013-08-12T23:58:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22534779	gavinandresen	Diapolo	@Diapolo: yes, I got corruption running git HEAD which includes latest LevelDB.    I've reached the edge of my LevelDB/filesystem knowledge, so I'm done debugging this for now and moving on to other things.
2770	22534982	2013-08-13T00:03:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22534982	jgarzik	gavinandresen	@gavinandresen Were you able to reliably reproduce the corruption?
2770	22535988	2013-08-13T00:29:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22535988	luke-jr	toffoo	@toffoo I am not comfortable releasing a 0.7.3 final until the May15 hardfork has actually split from the older clients and the backport has proven reliable. I also don't have a Mac, so I cannot even build v0.7.3rc3 for it.
2770	22538532	2013-08-13T01:47:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22538532	gavinandresen	toffoo	@toffoo : I'd rather drop Bitcoin-Qt on OSX than recommend an old release; we don't have the resources to support multiple releases.    Whether this bug is serious enough to drop the OSX release until somebody figures out what is wrong and fixes it is debatable-- I've had two corruptions in the last six months, the seriousness of this problem seems to be different depending either on particular hardware or luck (I have no idea which).
2770	23230494	2013-08-25T16:17:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230494	sipa	medicinebottle	@medicinebottle Did you restart from scratch? (start with -reindex option, or wiped your blocks + chainstate directories).
2770	23549676	2013-08-30T09:21:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23549676	sipa	toffoo	@toffoo If you're up for another experiment to make sure the 0.8.4 changes are the cause here: can you try doing a reindex with 0.8.3 again, and see whether it fails?
2770	24487546	2013-09-16T03:39:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24487546	gmaxwell	toffoo	@toffoo A side effect of that long blah blah I wrote above I went and looked at how we were handling the blockfiles and found an OSX specific issue. See pull #3000.
2770	24749630	2013-09-19T15:48:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24749630	gmaxwell	toffoo	@toffoo  Any chance to test with my fix from pull 3000 in git?  I'd like to have some confirmation that it makes a visible improvement for people who were previously having issues.    If it does then perhaps we should do a 0.8.5.1 for OSX only. (wouldn't be the first time we respun OSX for a small fix)
2770	24756647	2013-09-19T17:16:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24756647	toffoo	gmaxwell	Hey @gmaxwell sure I'd be happy to test it here if someone can build me a binary?    I've never actually tried to compile a bitcoin-qt binary, nor do I have a built environment set up here, and I understand that it isn't exactly straightforward for a novice to get the Mac client built.
2770	24878173	2013-09-22T08:36:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24878173	face	toffoo.	Aloha @toffoo.   I'm the Mac developer for Litecoin.    Here is a build of Bitcoin 0.8.5 + pull 3000:  http://myutil.com/test/    I think it is built the same way as official builds (32bit, 10.5 support, built with Xcode 3.2.6 as that was the last Xcode with official support from Apple for OSX 10.5).
2770	24904678	2013-09-23T08:18:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24904678	face	gavinandresen,	Thanks @gavinandresen, I'll downgrade Xcode to 3.2.4 for all future builds (and then I think I have everything else the same, except perhaps for macports minor versions of dependencies).      We had a support issue with OSX 10.5 and the Xcode version could definitely be the culprit.
2770	25250712	2013-09-27T14:52:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25250712	gmaxwell	toffoo	@toffoo Any results?
2770	25287191	2013-09-28T01:06:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25287191	sheldonth	gavinandresen	When my Bitcoin-Qt 0.8.5-beta gets to "Loading Wallet", the program quits unexpectedly. The violating thread is:    Thread 0 Crashed:: Dispatch queue: com.apple.main-thread  0   libsystem_kernel.dylib         0x93a11a6a __pthread_kill + 10  1   libsystem_c.dylib              0x943ecb2f pthread_kill + 101  2   libsystem_c.dylib              0x94423631 abort + 168  3   libsystem_c.dylib              0x944314f6 __assert_rtn + 326  4   org.bitcoinfoundation.Bitcoin-Qt 0x000d1efc SetBestChain(CValidationState&, CBlockIndex*) + 2268  5   org.bitcoinfoundation.Bitcoin-Qt 0x000d3c28 ConnectBestBlock(CValidationState&) + 824  6   org.bitcoinfoundation.Bitcoin-Qt 0x001259e8 AppInit2(boost::thread_group&) + 22744  7   org.bitcoinfoundation.Bitcoin-Qt 0x00023440 main + 7504  8   org.bitcoinfoundation.Bitcoin-Qt 0x00020711 start + 53    Running OS X 10.8.5. Could it be related to issues above? @gavinandresen ?
2770	25294214	2013-09-28T08:30:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25294214	toffoo	face	@face thank you for the binary    @gmaxwell using face's Bitcoin 0.8.5 + pull 3000 Mac binary, I've just gone and re-indexed my "still working like a charm" v0.7.2 blockchain.  It chugged away for about 2.5 hours with no problems and seemed to finish and run with no issue.  I then let it run for a while, again with no problems, and then shutdown clean.  Upon first re-start I got this again:    ![screen shot 2013-09-28 at 5 11 47 am](https://f.cloud.github.com/assets/4701899/1230921/cd9f6036-2817-11e3-94be-6d0b82306350.png)    Here's a debug.log for you:    Bitcoin version v0.8.5-1-g9051cd9-beta (2013-09-21 21:46:04 -1000)  Using OpenSSL version OpenSSL 1.0.1e 11 Feb 2013  Startup time: 2013-09-28 08:10:32  Default data directory /Users/----/Library/Application Support/Bitcoin  Using data directory /Users/----/Library/Application Support/Bitcoin  Using at most 13 connections (2560 file descriptors available)  Using 8 threads for script verification  init message: Verifying wallet...  dbenv.open LogDir=/Users/----/Library/Application Support/Bitcoin/database ErrorFile=/Users/----/Library/Application Support/Bitcoin/db.log  Bound to [::]:8333  Bound to 0.0.0.0:8333  init message: Loading block index...  Opening LevelDB in /Users/----/Library/Application Support/Bitcoin/blocks/index  Opened LevelDB successfully  Opening LevelDB in /Users/----/Library/Application Support/Bitcoin/chainstate  Opened LevelDB successfully  LoadBlockIndexDB(): last block file = 6  LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=26, size=2413677, heights=260508...260533, time=2013-09-28...2013-09-28)  LoadBlockIndexDB(): transaction index disabled  LoadBlockIndexDB(): hashBestChain=0000000000000008b6bb368f7fc6e3d48c7cbc78063aed542a405f2438d4bcc7  height=260533 date=2013-09-28 07:59:13  init message: Verifying blocks...  Verifying last 288 blocks at level 3  ERROR: bool CBlock::ReadFromDisk(const CDiskBlockPos&)() : deserialize or I/O error  ERROR: VerifyDB() : *** block.ReadFromDisk failed at 260507, hash=0000000000000018d43c8f01bd6f999991558eeb09588e04ab5d6ef0eefa6f1b
2770	25294214	2013-09-28T08:30:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25294214	toffoo	gmaxwell	@face thank you for the binary    @gmaxwell using face's Bitcoin 0.8.5 + pull 3000 Mac binary, I've just gone and re-indexed my "still working like a charm" v0.7.2 blockchain.  It chugged away for about 2.5 hours with no problems and seemed to finish and run with no issue.  I then let it run for a while, again with no problems, and then shutdown clean.  Upon first re-start I got this again:    ![screen shot 2013-09-28 at 5 11 47 am](https://f.cloud.github.com/assets/4701899/1230921/cd9f6036-2817-11e3-94be-6d0b82306350.png)    Here's a debug.log for you:    Bitcoin version v0.8.5-1-g9051cd9-beta (2013-09-21 21:46:04 -1000)  Using OpenSSL version OpenSSL 1.0.1e 11 Feb 2013  Startup time: 2013-09-28 08:10:32  Default data directory /Users/----/Library/Application Support/Bitcoin  Using data directory /Users/----/Library/Application Support/Bitcoin  Using at most 13 connections (2560 file descriptors available)  Using 8 threads for script verification  init message: Verifying wallet...  dbenv.open LogDir=/Users/----/Library/Application Support/Bitcoin/database ErrorFile=/Users/----/Library/Application Support/Bitcoin/db.log  Bound to [::]:8333  Bound to 0.0.0.0:8333  init message: Loading block index...  Opening LevelDB in /Users/----/Library/Application Support/Bitcoin/blocks/index  Opened LevelDB successfully  Opening LevelDB in /Users/----/Library/Application Support/Bitcoin/chainstate  Opened LevelDB successfully  LoadBlockIndexDB(): last block file = 6  LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=26, size=2413677, heights=260508...260533, time=2013-09-28...2013-09-28)  LoadBlockIndexDB(): transaction index disabled  LoadBlockIndexDB(): hashBestChain=0000000000000008b6bb368f7fc6e3d48c7cbc78063aed542a405f2438d4bcc7  height=260533 date=2013-09-28 07:59:13  init message: Verifying blocks...  Verifying last 288 blocks at level 3  ERROR: bool CBlock::ReadFromDisk(const CDiskBlockPos&)() : deserialize or I/O error  ERROR: VerifyDB() : *** block.ReadFromDisk failed at 260507, hash=0000000000000018d43c8f01bd6f999991558eeb09588e04ab5d6ef0eefa6f1b
2770	27296568	2013-10-29T11:54:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27296568	wtogami	toffoo	@toffoo  https://bitcointalk.org/index.php?topic=320695  Please test the Bitcoin OMG build here that includes both Mac OS X fsync patches and an upgrade to leveldb 1.13.  We are very curious to learn if this solves the corruption that some Mac users experience.
2770	27562573	2013-11-01T12:34:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27562573	wtogami	toffoo	@toffoo @jgarzik https://bitcointalk.org/index.php?topic=320695.msg3456344#msg3456344
2770	27562573	2013-11-01T12:34:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27562573	wtogami	jgarzik	@toffoo @jgarzik https://bitcointalk.org/index.php?topic=320695.msg3456344#msg3456344
2770	27669022	2013-11-04T08:19:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27669022	toffoo	wtogami	@wtogami Thank you for your efforts, I'm so glad to see this issue receive the attention it deserves.    This weekend I got a chance to try your latest binary.  I downloaded and installed your Bitcoin-Qt-0.8.5-OMG3.dmg on my MacbookPro Retina, now running OSX Mavericks v10.9.    Once again I reindexed my up-to-date v0.7.2 blockchain, this time it took about 4 hours.  It finished reindexing with no problem, got synced with the network, and ran fine with no issue for several minutes until I did a clean shutdown.    Another positive I see is finally a return of Retina fonts to bitcoin-qt!  As far as I know, v0.7.2 is the only bitcoin-qt release that had "Retina-style" HiDPI font support.  All previous releases, and then again all the v0.8.x releases, look all jaggy on the Retina screen.  Of course I'm probably part of a very small audience here, and the other non-font GUI elements are of course still low-res, but it definitely look a lot sharper for me like this, so thanks!    Unfortunately the bad news is that upon first restart I got the exact same issue as last time, my dreaded: "Corrupted block database detected. Do you want to rebuilt the block database now?"     Here's the relevant part of debug.log for you:    Opened LevelDB successfully  LoadBlockIndexDB(): last block file = 6  LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=37, size=3188636, heights=267817...267853, time=2013-11-04...2013-11-04)  LoadBlockIndexDB(): transaction index disabled  LoadBlockIndexDB(): hashBestChain=000000000000000450718beafbece467989022fe2265c5dd69b07f0ca5b40e8f  height=267853 date=2013-11-04 07:21:53  init message: Verifying blocks...  Verifying last 288 blocks at level 3  ERROR: bool CBlock::ReadFromDisk(const CDiskBlockPos&)() : deserialize or I/O error  ERROR: VerifyDB() : *** block.ReadFromDisk failed at 267816, hash=0000000000000006fd15a014c76b0bd0200b74cbcbe8f3a873cedd2798e65a59  Shutdown : In progress...      Since this failed in exactly the same way as last time, and differently than how it used to die, it got me thinking a little deeper about the situation, so allow me to speculate on what I think may be going on here.    Let me preface this by saying I am NOT A PROGRAMMER and have never even tried to read the bitcoin source code, so this is nothing more than an educated guess as to how things may actually be working internally.    I noticed that pre-0.8.x bitcoin-qt stores the blockchain in files that fill up to 2.1 GB before spilling over to a new one.  Before this update/reindex I had blk0001.dat - blk0005.dat each 2.1 GB and then blk0006.dat 1.7 GB and I was synced to up to (I think about) 267816.    When I start the update and it does the reindex, it seems like it hardlinks the old block files with a slightly different name, but now in the /blocks/ directory.    Now, with the reindex complete, as the new client runs, rather than appending new blocks to the last 1.7 GB blockfile, it creates a new one, rather than continuing to fill up the last old one to 2.1 GB.  So now with any new blocks that came in during the 4 hours I was reindexing, or the 20-30 minutes I let it run afterwards, look like they've gone into a new 16.8 MB /blocks/blk00006.dat, and leaving a 1.7 GB blk00005.dat.    So then when I do the first cold restart, guessing from the behavior and the debug.log messages, it seems like it gets up to the last block 267816 I had previously synced and tries to keep reading from that last < 2.1 GB block file rather than looking for the new small one, and therefore quits with error "blockchain corrupted".      Again, maybe a shot in the dark here, but I think some version of this theory makes sense in light of some of the other  clues.  It could be that the "general Mac corruption issue" has been solved, but perhaps some new bug was introduced that only affects people (like me) updating from older Mac client blockchains.  Recall, these recent releases are "corrupting" for me immediately upon first restart in exactly the same way, and in a completely different way than how it used to get corrupted at some random, inconsistent moment with the earlier v0.8.x releases.    What do you think?
2770	28173510	2013-11-11T04:28:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28173510	toffoo	wtogami	Some updates here: I've been in contact with @wtogami on IRC and he concluded that my bitcoin-0.7.2 blockchain data is bad in a unique way that breaks upon update to bitcoin-0.8.  I added that my blockchain has been continually synced since v0.3ish and agree with his conclusion.    He suggested: 1.) attempt a complete fresh blockchain resync with his -OMG3 build instead of an update, that is now 2 days in progress, so far so good, I'll post how it turns out, and 2.) I've sent him an archive of my 0.7.2 blockchain for further analysis.    On a related noted, I have also recently updated my Litecoin from v0.6ish to his 0.8.5.2-rc4 build (which is a similar update from an old blockchain) with no problems and it has been running good with no corruption.
2770	28214157	2013-11-11T16:25:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28214157	KaosMcRage	toffoo	I tried running 0.8.5-OMG3 for a week with no corruption problems. When I first opened it, it did complain about my block database so I let it rebuild. Now it's complaining about the block database again. I guess I will try a completely fresh blockchain like @toffoo did.
2770	28444479	2013-11-13T23:22:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28444479	toffoo	wtogami	Another update: I had forgotten that I'd read Gavin's advice regarding App Nap on Mavericks https://github.com/bitcoin/bitcoin/issues/3182 after almost 4 days doing the fresh full sync.  Even then when I ticked it off it isn't clear if the executable is run directly from the command line if the OS respects that tick.  I was running:    /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt -dbcache=1000    from the command line on advice the initial sync would go faster.    So whether it was the App Nap, or this other issue mentioned https://github.com/bitcoin/bitcoin/issues/3243 which I also experienced, or just general slowness, this full sync took a LONG time for me.    But it did eventually finish last night, successfully, and ran well for hours thereafter and after a few restarts, so I was all ready to type up congratulatory comments that perhaps our Mac corruption bugs had finally been licked.    But then when I restarted Bitcoin-Qt again this morning, I got the dreaded error again:    Bitcoin version v0.8.5-OMG3-beta (2013-10-30 17:50:47 -1000)  Using OpenSSL version OpenSSL 1.0.1e 11 Feb 2013  Startup time: 2013-11-13 16:31:51  Default data directory /Users/----/Library/Application Support/Bitcoin  Using data directory /Users/-----/Library/Application Support/Bitcoin  Using at most 125 connections (2560 file descriptors available)  Using 8 threads for script verification  init message: Verifying wallet...  dbenv.open LogDir=/Users/-----/Library/Application Support/Bitcoin/database ErrorFile=/Users/-----/Library/Application Support/Bitcoin/db.log  Bound to [::]:8333  Bound to 0.0.0.0:8333  init message: Loading block index...  Opening LevelDB in /Users/-----/Library/Application Support/Bitcoin/blocks/index  Opened LevelDB successfully  Opening LevelDB in /Users/-----/Library/Application Support/Bitcoin/chainstate  Opened LevelDB successfully  LoadBlockIndexDB(): last block file = 92  LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=453, size=65057378, heights=268923...269375, time=2013-11-11...2013-11-13)  LoadBlockIndexDB(): transaction index disabled  LoadBlockIndexDB(): hashBestChain=00000000000000062c7d79d3d301f71320f986585ae385d5c356e444fed23f7f  height=269375 date=2013-11-13 08:17:03  init message: Verifying blocks...  Verifying last 288 blocks at level 3  LevelDB read failure: Corruption: block checksum mismatch  Shutdown : In progress...  StopNode()  Flushed 0 addresses to peers.dat  15ms  Committing 10456 changed transactions to coin database...  Shutdown : done    So again, this is @wtogami 's v0.8.5-OMG3-beta binary, about 12 hours after a complete full sync from the network.    On a related note, your v0.8.5.2-rc4-beta Litecoin binary is still running great with no problems.
2770	28445628	2013-11-13T23:38:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28445628	KaosMcRage	wtogami	I'm trying the same thing, a fresh blockchain using @wtogami 's 0.8.5-OMG3 beta. So far, so good, but I definitely need a few more days of testing. Although, your results don't give me much hope of this working now.    @toffoo Any chance you're hopping between networks/locations, such as home vs. work? I mentioned this on IRC the other day - I'm starting to suspect changing networks somehow causes this dreaded corruption error. Don't ask me to explain why that would be the case, but that's what I've been noticing. I can fire up the client without issue in one location, go to the other location, and get the corruption error. Take it back to the previous location, database validates just fine. And it isn't always the same result for each location. If I "fix" it in one location that was broken before (either by answering Yes to the rebuild question or seeding my Bitcoin folder with validated files), it very well may work there but now break in the other location. I can't imagine the client IP address or other network configuration would play into validating the block database, but... :suspect:
2770	28445628	2013-11-13T23:38:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28445628	KaosMcRage	toffoo	I'm trying the same thing, a fresh blockchain using @wtogami 's 0.8.5-OMG3 beta. So far, so good, but I definitely need a few more days of testing. Although, your results don't give me much hope of this working now.    @toffoo Any chance you're hopping between networks/locations, such as home vs. work? I mentioned this on IRC the other day - I'm starting to suspect changing networks somehow causes this dreaded corruption error. Don't ask me to explain why that would be the case, but that's what I've been noticing. I can fire up the client without issue in one location, go to the other location, and get the corruption error. Take it back to the previous location, database validates just fine. And it isn't always the same result for each location. If I "fix" it in one location that was broken before (either by answering Yes to the rebuild question or seeding my Bitcoin folder with validated files), it very well may work there but now break in the other location. I can't imagine the client IP address or other network configuration would play into validating the block database, but... :suspect:
2770	28446545	2013-11-13T23:52:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28446545	toffoo	KaosMcRage	@KaosMcRage interesting theory, I can certainly appreciate the temptation to search for patterns in the corruption.  But in my case, I have only ever run bitcoin-qt on the same home network ... BUT my external IP does change on occasion.  So I'm not sure if that data point supports your theory or not.
2770	28453222	2013-11-14T01:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28453222	KaosMcRage	toffoo	@toffoo If your external IP changes match up with some/all of your re-corruption instances... _maybe_ it supports or at least contributes to the theory. I know it's a stretch, though, and probably nonsense.    @wtogami I completely agree, it's a bit absurd. I've resisted saying anything for quite a while but it's just been too common lately to not at least mention it. Let us know if there is any specific testing you'd like done using OMG3+.
2770	28453222	2013-11-14T01:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28453222	KaosMcRage	wtogami	@toffoo If your external IP changes match up with some/all of your re-corruption instances... _maybe_ it supports or at least contributes to the theory. I know it's a stretch, though, and probably nonsense.    @wtogami I completely agree, it's a bit absurd. I've resisted saying anything for quite a while but it's just been too common lately to not at least mention it. Let us know if there is any specific testing you'd like done using OMG3+.
2770	28671160	2013-11-18T02:08:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28671160	KaosMcRage	wtogami	@wtogami I started with a 9 GB bootstrap.dat, synced the rest using OMG3-beta, and used it for about 5 days. When I opened it up today, it made it past the initial "Verifying blocks..." where B-Qt normally detects corruption and began syncing with the network, but then this popped up:  ![screen shot 2013-11-17 at 6 42 47 pm scaled](https://f.cloud.github.com/assets/1288694/1560042/c243db72-4ff4-11e3-8fc6-21c64612753b.png)  So, slightly different result but still getting corruption after a while, I guess. Potentially interesting things from debug.log:  ```  init message: Verifying blocks...  Verifying last 288 blocks at level 3  No coin database inconsistencies in last 132 blocks (35868 transactions)   block index           22444ms  init message: Loading wallet...  ```  That's where B-Qt would've failed. Then later...  ```  ProcessBlock: ACCEPTED  getblocks 270098 to 0000000000000000000000000000000000000000000000000000000000000000 limit 500  getblocks 270098 to 0000000000000000000000000000000000000000000000000000000000000000 limit 500  received block 0000000000000005e283ba322761cde5f606238a8a032b34f053e9500552d57f  LevelDB read failure: Corruption: block checksum mismatch  *** System error: Database corrupted  ```  Followed by a bunch of connection timeouts and  ```  ERROR: AcceptBlock() : AddToBlockIndex failed  ERROR: ProcessBlock() : AcceptBlock FAILED  ```  Then some more getblocks and a shutdown. Attempts to open the client after this point result in an immediate prompt to rebuild the block database.
2770	28673507	2013-11-18T03:35:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28673507	fanquake	KaosMcRage	@KaosMcRage If you choose no to rebuilding the client, does it crash immediately? If so, could you report the details of the crash report?
2770	28674122	2013-11-18T04:00:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28674122	KaosMcRage	fanquake	@fanquake Yes, it does. Log looks like this:  ```  init message: Verifying blocks...  Verifying last 288 blocks at level 3  LevelDB read failure: Corruption: block checksum mismatch  Shutdown : In progress...  StopNode()  Flushed 0 addresses to peers.dat  18ms  Committing 6113 changed transactions to coin database...  Shutdown : done  ```
2770	28674426	2013-11-18T04:12:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28674426	fanquake	KaosMcRage	@KaosMcRage Sorry I should have specified, I'm talking about the Apple error report.
2770	28674918	2013-11-18T04:35:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28674918	KaosMcRage	fanquake	@fanquake Oh, it doesn't actually crash in that regard. It exits gracefully as far as OS X is concerned.
2757	22557564	2013-08-13T11:08:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22557564	ashleyholman	gmaxwell	Just a note to say that I've had a chat with @gmaxwell and he's given me some pointers on how I can get started with reproducing this as a test case.  This will take me a while to get familiar with the various testing tools, but I'll post back here once I've got a test case.
2757	22809423	2013-08-17T10:36:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22809423	gmaxwell	sipa	@sipa The only problem I see is that it could make life harder for a fancy pruned node trying to reorg off a side chain.  Limiting it to very recent (/during this runtime) / blocks that were in our best chain previously shouldn't break that too awfully at least.
2745	19470966	2013-06-14T17:37:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19470966	gruez	fanquake	@fanquake yes, but this is with 0.8.2
2745	19913338	2013-06-24T15:12:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19913338	fanquake	gruez	@gruez #2664 was on 0.8.2 also
2737	23009233	2013-08-21T10:55:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23009233	jgarzik	luke-jr	@luke-jr ping?
2736	27214434	2013-10-28T14:13:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27214434	Diapolo	gavinandresen	@gavinandresen Perhaps you should take look at this?
2726	18804846	2013-06-02T09:51:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18804846	sipa	rebroad	@rebroad I assume you chainstate database got corrupted. You can rebuild it by starting with the -reindex command-line option.
2726	18953914	2013-06-05T03:42:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18953914	rebroad	sipa	@sipa ok, I have done the reindex now, but the problem still exists, although the block it got stuck at is different (it managed a further 3 days and is stuck at 1st April 2013 now). Does this mean i need to keep reindexing each time? if so, this will take forever!
2726	18955390	2013-06-05T04:47:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18955390	gmaxwell	rebroad	@rebroad You wouldn't happen to be near a train yard? (http://jakepoz.com/soviet_debugging.html)
2726	19161717	2013-06-09T06:41:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19161717	sipa	rebroad	@rebroad Can you try reindexing again, with par=1 in your bitcoin.conf file, or with -par=1 on the command line? I just want to rule out this is an issue caused by multithreaded verification, but my best guess is still that this is a hardware problem.
2726	19165095	2013-06-09T12:10:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19165095	rebroad	sipa	@sipa i will try that next. Just to also clarify. I've also tried removing the database entirely and redownloading the blockchain previously. i've now just tried another reindex, and this time it's stuck again, but again on a more recent block:-    2013-06-09 07:57:18 SetBestChain: new best=0000000000000007e967587557d2c26fbd6259a6bdad4f2943d1f23f5fec2517  height=232631  work=1057302097488701699688  tx=16563589  date=2013-04-22 20:27:57  2013-06-09 07:57:18 ProcessBlock: ACCEPTED  2013-06-09 07:57:19 ERROR: CScriptCheck() : e50c94cf77 VerifySignature failed  2013-06-09 07:57:19 InvalidChainFound: invalid block=0000000000000141686ceba58449a93c304b07aac8188583fbbf35aa66fff586  height=232632  work=1057340642384738704203  date=2013-04-22 20:36:24  2013-06-09 07:57:19 InvalidChainFound:  current best=0000000000000007e967587557d2c26fbd6259a6bdad4f2943d1f23f5fec2517  height=232631  work=1057302097488701699688  date=2013-04-22 20:27:57  2013-06-09 07:57:19 InvalidChainFound: invalid block=0000000000000141686ceba58449a93c304b07aac8188583fbbf35aa66fff586  height=232632  work=1057340642384738704203  date=2013-04-22 20:36:24  2013-06-09 07:57:19 InvalidChainFound:  current best=0000000000000007e967587557d2c26fbd6259a6bdad4f2943d1f23f5fec2517  height=232631  work=1057302097488701699688  date=2013-04-22 20:27:57  2013-06-09 07:57:19 ERROR: SetBestBlock() : ConnectBlock 0000000000000141686ceba58449a93c304b07aac8188583fbbf35aa66fff586 failed  2013-06-09 07:57:19 ERROR: AcceptBlock() : AddToBlockIndex failed  2013-06-09 07:57:19 ERROR: ProcessBlock() : AcceptBlock FAILED
2726	19165137	2013-06-09T12:14:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19165137	rebroad	sipa	@sipa what sort of hardware problem would cause this? and surely if I had such a hardware problem wouldn't other applications crash and it'd be unlikely I'd have a system uptime of several weeks.
2726	21378396	2013-07-22T21:48:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21378396	sipa	edam	@edam Interesting. This is a case of database error that goes undetected likely, so incorrect data is read back at some point, which mismatches the chain spends.    I'd very much like to know whether it is consistently the same block that triggers it (and if so, which). Can you try to reproduce the problem again, and report the exact InvalidChainFound errors reported (in particular "InvalidChainFound:  current best=%s  height=%d  log2_work=%.8g  date=%s" lines)?    That would be very helpful.
2726	21379622	2013-07-22T22:08:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21379622	edam	sipa	@sipa: I don't think it was the same place, but I'll have to re-run it to find out.  I'll report back with some logfile text after a couple of failed attempts.
2726	21450986	2013-07-23T22:27:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21450986	sipa	edam	@edam To exclude the possibility that the Debian patches were the cause, could you try the same thing with the released bitcoind binaries on sourceforge?
2726	21518130	2013-07-24T21:36:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21518130	edam	sipa	@sipa: OK, built from `bitcoin-0.8.3-linux.tar.gz`, obtained from sourceforge (against DB5.1, as there is no `libdb4.8-dev` package in Debain unstable). I started getting `InvalidChainFound` in `debug.log` after about 5hrs.  First occurrence is shown below:        SetBestChain: new best=00000000000002e795c6ad77bd81d9599147eda74b54c96bd841716020b2d3df  height=226197  log2_work=69.557647  tx=14514594  date=2013-03-16 17:00:55 progress=0.284534      ProcessBlock: ACCEPTED      received block 0000000000000295b44d976591991b889faf5407c621c961a98132b6bd529f1b      ERROR: CScriptCheck() : 2328ffd25c0344ed8ed2b455a4bdfbf466326bbabcbbbe12b81502b76161a750 VerifySignature failed      InvalidChainFound: invalid block=0000000000000295b44d976591991b889faf5407c621c961a98132b6bd529f1b  height=226198  log2_work=69.557681  date=2013-03-16 17:11:15      InvalidChainFound:  current best=00000000000002e795c6ad77bd81d9599147eda74b54c96bd841716020b2d3df  height=226197  log2_work=69.557647  date=2013-03-16 17:00:55    So the three runs have failed at 14th, 15th and 16th April, 2013!  Strange that the points of failure are so close together.
2726	21518428	2013-07-24T21:41:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21518428	gmaxwell	edam	@edam  Can you try running the binaries in that tar?  They are statically linked and will isolate out weirdness with your compiler and system libraries.    If you're concerned about the provenance of random binaries, they're built using a determinist build process which you can run yourself (needs an ubuntu VM, however).  They've also been built by several independent parties who have uploaded signatures here: https://github.com/bitcoin/gitian.sigs
2726	21573321	2013-07-25T18:11:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21573321	edam	gmaxwell	@gmaxwell: thanks, I was concerned about that, yes (gitian's a clever idea, though!).  Anyway, I've run the pre-built binary now and I still get the same results:        SetBestChain: new best=000000000000019a6cd4b53febbe8c0521496c9cd1015b089fdcc1c78d920a77  height=228172  log2_work=69.628947  tx=15013716  date=2013-03-26 23:14:26 progress=0.332393      ProcessBlock: ACCEPTED      stored orphan tx 9b2ba43727008fa8af0c46c4c5389409beceb3fca52b8fd7485c0b6ad8f09443 (mapsz 6735)      received block 0000000000000121cb62f9ba2039908031c9ca324b9caf01f5efb6ff41bdc01d      ERROR: CScriptCheck() : 0e3d910bbc2c801ac59e350b681c85a83ad7aa44f328238d8b04d2eb7f17ec47 VerifySignature failed      InvalidChainFound: invalid block=0000000000000121cb62f9ba2039908031c9ca324b9caf01f5efb6ff41bdc01d  height=228173  log2_work=69.628993  date=2013-03-26 23:17:53      InvalidChainFound:  current best=000000000000019a6cd4b53febbe8c0521496c9cd1015b089fdcc1c78d920a77  height=228172  log2_work=69.628947  date=2013-03-26 23:14:26
2726	21622639	2013-07-26T14:05:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21622639	edam	sipa	@sipa: that is correct.  I deleted (renamed, actually) `~/.bitcoin`, re-ran `bitcoind -daemon` using the pre-built binary in the tarball (and again, after setting the `rpcuser`/`rcppassword`), left it running for several hours and then checked `bitcoind getinfo` and the logs for errors.    The machine this is running on is well used and has not shown any memory- or cpu-like errors.  All the same, I ran memtest86+ for over an hour without error, just to be sure.  If it's something odd about my system that's causing this, it may be that I am using Debian sid/unstable (with a few packages from experimental).  So I wouldn't rule out the kernel or the few shared libraries that the pre-built binary uses from the system.  Should I try the pre-built binary on a live-CD of, say, Ubuntu 13.04 to see if it exhibits the same problems?
2726	22067376	2013-08-04T06:07:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22067376	gmaxwell	edam	@edam  I'm running out of guesses, so yes starting "something else" would be an interesting thing to test.    Thank you for being so helpful on this.
2726	22255338	2013-08-07T14:32:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22255338	Diapolo	sipa	@sipa Does this mean we may have a problem with the parallel verification code?
2726	22264042	2013-08-07T16:27:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22264042	edam	gmaxwell	Sorry for my lack of response -- I'm on holiday at the moment.    @gmaxwell: I can test that, just in case.  But it will be at least a week before I can.  In the meantime I'm also re-trying verification with `par=1`, just to be sure that it wasn't a fluke.    @Diapolo: If it helps, I am a developer, so I'm quite happy to apply "debugging" patches against the 0.8.3 code, or to fiddle about in `gdb`.  But it takes about 6hrs to go wrong on my machine, and I'm not familiar with the `bitcoind` code, so you'd have to direct me as to what information would be useful to you.
2726	22264042	2013-08-07T16:27:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22264042	edam	Diapolo	Sorry for my lack of response -- I'm on holiday at the moment.    @gmaxwell: I can test that, just in case.  But it will be at least a week before I can.  In the meantime I'm also re-trying verification with `par=1`, just to be sure that it wasn't a fluke.    @Diapolo: If it helps, I am a developer, so I'm quite happy to apply "debugging" patches against the 0.8.3 code, or to fiddle about in `gdb`.  But it takes about 6hrs to go wrong on my machine, and I'm not familiar with the `bitcoind` code, so you'd have to direct me as to what information would be useful to you.
2726	23623921	2013-09-01T12:26:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23623921	edam	gmaxwell	@gmaxwell: I've re-run bitcoind another 3 times, using a fresh `~/.bitcoin` directory each time, with `par=1` in the config file and I haven't received any errors.  So, it looks like I'm getting a fairly reliable 100% failure rate when *not* using `par=1` and 100% success rate when using it.    I'll try to run the above test (live CD of another distro, running binary from your tarball, no `par=1`) tomorrow, while I'm at work, and report back in the evening. Since Ubuntu is based on Debian, though, would it be wiser to try something more different, like Fedora? Or would you rather I use Ubuntu?
2726	23634024	2013-09-01T21:54:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23634024	Diapolo	Schmollen	@Schmollen Are you using some heave overclocking with that system or do you encounter other system instability?
2726	23634200	2013-09-01T22:04:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23634200	gmaxwell	edam	@edam  Great.  Can you check to see if your system has a separate multithreaded copy of boost and if bitcoin is being linked to that one?    @Schmollen can you try booting your system into memtest 86x as a sanity check?
2726	23634200	2013-09-01T22:04:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23634200	gmaxwell	Schmollen	@edam  Great.  Can you check to see if your system has a separate multithreaded copy of boost and if bitcoin is being linked to that one?    @Schmollen can you try booting your system into memtest 86x as a sanity check?
2726	23641710	2013-09-02T05:36:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23641710	Schmollen	Diapolo	Hi!  @Diapolo No, I don't. It is an old AMD Athlon (no overclock, no undervolt) Win XP (32bit) PC, Only for surfing (a litlle bit) and Bitcoin QT. Streestest (Prime95 & Memtest86) are okay.  @gmaxwell: Memtest: sanity check is okay.  @pstratem If you mean me: No, it doesn't run with -daemon
2726	23641710	2013-09-02T05:36:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23641710	Schmollen	gmaxwell	Hi!  @Diapolo No, I don't. It is an old AMD Athlon (no overclock, no undervolt) Win XP (32bit) PC, Only for surfing (a litlle bit) and Bitcoin QT. Streestest (Prime95 & Memtest86) are okay.  @gmaxwell: Memtest: sanity check is okay.  @pstratem If you mean me: No, it doesn't run with -daemon
2726	23641710	2013-09-02T05:36:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23641710	Schmollen	pstratem	Hi!  @Diapolo No, I don't. It is an old AMD Athlon (no overclock, no undervolt) Win XP (32bit) PC, Only for surfing (a litlle bit) and Bitcoin QT. Streestest (Prime95 & Memtest86) are okay.  @gmaxwell: Memtest: sanity check is okay.  @pstratem If you mean me: No, it doesn't run with -daemon
2726	26397601	2013-10-16T07:23:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26397601	Diapolo	sipa	@sipa I find it really odd, that quite a few people reported that -par=1 works but more threads seem to cause issues.
2719	18728788	2013-05-31T07:36:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18728788	goldbit89	jafoal	@jafoal   i just found a fix for my issue by downloading the zip version of the 8.2 client upgrade and  it worked without any errors or issues and loaded with no problems. so if you installed using the exe version , try using the zip version.  Hope this helps you out.
2715	18724012	2013-05-31T05:28:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724012	laanwj	luke-jr	@luke-jr you created the feature, do you see any problem with this?
2664	18122793	2013-05-19T18:58:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122793	hjfreyer	kerzane	Well, if it helps, I've seen this crash several times (I'm not sure whether it's the same block each time, this time the best height is 155152), and then when I re-run bitcoind I see:    Opened LevelDB successfully  LoadBlockIndex(): last block file = 5  LoadBlockIndex(): last block file: CBlockFileInfo(blocks=6722, size=120930866, heights=149037..155758, time=2011-10-12..2011-12-02)  LoadBlockIndex(): transaction index disabled  LoadBlockIndex(): hashBestChain=0000000000000c32151b017099b3e20899f6be3ec964731a28a30f6c4f16dad3  height=155152 date=2011-11-29 00:06:17  init message: Verifying block database integrity...  Verifying last 288 blocks at level 3  LevelDB read failure: Corruption: block checksum mismatch  : Error opening block database.  Do you want to rebuild the block database now?  Flush(false)  DBFlush(false) ended               1ms  StopNode()    Each time I've just nuked the directory and tried again.    @kerzane Did you get it working by using a different drive?
2664	18123048	2013-05-19T19:16:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123048	hjfreyer	gavinandresen	https://github.com/bitcoin/bitcoin/search?q=%22file+descriptors%22&type=Issues    @gavinandresen Care to comment?
2664	18132407	2013-05-20T05:04:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18132407	fanquake	kerzane	@kerzane @hjfreyer There are file descriptor fixes in 0.8.2    See issues #2517 #2522   and pulls #2557 #2568 #2569
2664	18132407	2013-05-20T05:04:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18132407	fanquake	hjfreyer	@kerzane @hjfreyer There are file descriptor fixes in 0.8.2    See issues #2517 #2522   and pulls #2557 #2568 #2569
2664	18154300	2013-05-20T15:39:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18154300	Diapolo	hjfreyer	<pre>  : Error opening block database.  Do you want to rebuild the block database now?  </pre>    @hjfreyer A -reindex will perhaps sort these issues out for you, can you give it a try?
2664	18158382	2013-05-20T16:52:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18158382	hjfreyer	Diapolo	@Diapolo I did reindex, and I also moved the block chain out of encfs (because why change one variable at a time when you can change two!). Regardless, I haven't seen the error again yet.
2656	18192802	2013-05-21T07:17:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18192802	laanwj	jonasschnelli	I'm convinced this is a duplicate issue, but cannot find the original anywhere.    In any case, yeah this would be nice, but don't expect it to be implemented any time soon. RPC, as it is now, is not good enough for implementing Bitcoin-Qt remotely. It lacks notification support and more fine-grained queries on the transaction / address lists, and other small things. I suggest using one of the UIs that @jonasschnelli mentions.    A split at wallet - block chain daemon level is preferred to this right now (and is being worked on). It would allow more flexible setups like running multiple wallets from one block chain source.
2653	17829295	2013-05-13T18:05:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17829295	gavinandresen	alanast1	@alanast1 : thanks, I understand the issue.    If they speak English, feel free to ask the authorities to contact me if they have questions about how Bitcoin works ( gavin@bitcoinfoundation.org ) or why the information on blockchain.info is unreliable.
2653	22765906	2013-08-16T13:29:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22765906	fanquake	Krellan	@Krellan Next to "Relayed by IP" there's a question mark. It displays the message on hover.
2646	17806291	2013-05-13T11:36:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17806291	Diapolo	sipa	Well ``bad_alloc`` is indeed memory related, it's an ``Exception thrown on failure allocating memory``, see http://www.cplusplus.com/reference/new/bad_alloc. The problem here is, where does it come from... how many nodes were connected and what is your exact command-line (if any)?    @sipa Take a look, seems to happen in ProcessMessages()  <pre>  2013-05-12 15:01:41 Committing 4247 changed transactions to coin database...  2013-05-12 15:01:41     ************************  EXCEPTION: St9bad_alloc         std::bad_alloc         C:\Program Files\Bitcoin\bitcoin-qt.exe in ProcessMessages()           2013-05-12 15:01:41 ProcessMessage(block, 451118 bytes) FAILED  </pre>
2639	17774795	2013-05-12T08:51:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17774795	sipa	Sjors	@Sjors I think you're confusing the transaction itself with its intermediate form used for signing. Among many other modifications, the hashtype is indeed appended to a transaction before computing the hash being signed, but this hashtype field is not part of the transaction itself. There are other modifications made, like clearing the other inputs of a transaction, and replacing the input script being signed with the output script being redeemed.    Just to be clear, sendrawtransaction/createrawtransaction/... take transactions. The modifications made to compute the hash being signed are done on-the-fly when necessary (they are different for the different inputs, for example, so you can't provide a single intermediate form anyway).
2631	27201016	2013-10-28T10:26:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27201016	Diapolo	kartcl14	@kartcl14 Can you try starting your client with -reindex added once, so it can rebuild the block-database. If this issue is solved or didn't occur again, please close this ticket.
2626	17572076	2013-05-07T21:31:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17572076	drak	sipa	@sipa - I am also aware of these potential issues, so please be clear, my ticket is not about autoupdating, simply notification that a new version is available. "Please visit `bitcoin.org/latest`" for details or something. What is the worst that can happen in this case? If you ask me, bitcoin's real weak-spot is relying on sourceforce to distribute the client, but that's another issue.
2626	17572247	2013-05-07T21:35:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17572247	gmaxwell	drak	@drak Because you push a malicious version, and then update the autoupdate notice and then very rapidly you have stolen the wallets of tens of thousands of people before anyone clueful has had a chance to notice.    So far we've had pretty good adoption rates of new versions this hasn't been a major problem (http://luke.dashjr.org/programs/bitcoin/files/charts/branches.html). And we can use the alert system if there is something urgent. The alert system also has the benefit that if the key is compromised something actually can be done about a malicious alert.
2626	17598423	2013-05-08T10:58:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17598423	drak	gmaxwell	@gmaxwell - what is the "alert system", I was unaware of such a mechanism. How does it work, are there some docs?
2626	17655558	2013-05-09T09:03:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17655558	laanwj	drak	@drak With your simple implementation there is the problem of bitcoin.org still not supporting HTTPS, so it would be trivial to MITM. This is not so much a problem for the version notice itself, but if you refer them to that site to download a new version they will download a potentially infected client from the attacker.     I remember some FinFisher scandal in which they pushed fake updates (to some software already on the user's computer) to install malware, so this threat is not hypothetical.  And even with SSL it would still be relying on a single point of failure...    For any auto-update, the client has to do the downloading + dev signature verification at least. Installation should be left to the user voluntarily (ie, "this is the list of changes, click here if you want to upgrade") .    Maybe we could use a form of signing that does not require a complete GPG to be packaged? Or is there some lightweight library that allows verifying GPG signatures?
2626	17657977	2013-05-09T10:25:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17657977	drak	laanwj	@laanwj I was unaware bitcoin.org has no SSL, so just use github to show a raw file because then it will have Github's SSL see: https://raw.github.com/bitcoin/bitcoin.org/master/README.md (it's an SSL link) for an example (that could be `latest_version.txt`). That also makes it very tamper evident because it's part of a versions github repository.    The weak-point doesnt change, the "what if someone hacks sourceforce and fiddles with the download" - the windows client should be signed by the way, like all major software vendors do (MS,Oracle etc). Having the client notify that a new version is available does nothing to increase or decrease the problem. The benefit of nagging the community to upgrade is essential. 15% of clients are insecure right now. That's way too high.
2612	17431185	2013-05-04T10:40:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17431185	Diapolo	laanwj	@laanwj I tested the pulltester executable and it does what it should :).
2612	17526432	2013-05-07T07:00:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17526432	Diapolo	laanwj	@laanwj Did you yet test this pull?
2612	18123486	2013-05-19T19:42:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123486	Diapolo	laanwj	I'm still working on the options dialog, currently it's looking like this:  ![options](https://f.cloud.github.com/assets/1419649/523468/ecbdabf8-c0bb-11e2-8ca7-87065ae4f9f6.png)    @laanwj I intend to always show the real QSettings values without trying to mess around with showing the real state values. Reason is, it really sucks to try to allow changing a QSetting, which is overriden and whose saved state isn't even shown in the GUI.
2612	21091066	2013-07-17T04:14:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091066	luke-jr	Diapolo	@Diapolo Needs rebase.
2612	21408562	2013-07-23T11:46:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21408562	Diapolo	luke-jr	@luke-jr And I need some feedback :)! Anyway, I currently don't intend to rebase but will rather update the whole pull. I just need some time and motivation to restart working on this.
2612	24265242	2013-09-11T18:40:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24265242	jonasschnelli	Diapolo	@Diapolo could you rebase (if motivated again...). I could also check the changes and give you feedback.
2612	24442021	2013-09-14T09:50:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24442021	Diapolo	jonasschnelli	@jonasschnelli Yeah I can rebase and I really would love to get some help with this also :). I'm just taking my current code without doing the commit-msg now and will base it on top of my core proxy pull, as this is also used in the options rework.
2612	25072086	2013-09-25T09:14:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25072086	Diapolo	jonasschnelli	Thanks for your comments, I will take a look into your UI suggestions. Have you a bitcoin.conf in use? I never got that -paytxfee warning and will take a look there too.    @jonasschnelli Can you do a configuration reset and see if that removes the txfee warning?
2612	25072720	2013-09-25T09:27:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25072720	jonasschnelli	Diapolo	@Diapolo yes bitcoin.conf in use. But only rpc/testet settings there.  The warning popped up after building with your pull. But did some other related testing some minutes before. So it might be another thing.
2612	25318485	2013-09-29T11:15:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318485	Diapolo	jonasschnelli	@jonasschnelli   ![options](https://f.cloud.github.com/assets/178464/1207390/56a746f0-25b6-11e3-8fc9-7d86b37c39cb.png)    I changed the lower part of the UI to be not special anymore (it's a seperate frame but has no special UI style set). It's not part of the tab element, because I wanted it to be visible everytime, no matter, which tab is activated. Can you perhaps post a screen of the current pull?    Edit: I'm not sure about the expert tab, as this 2 options were requested by @sipa for general availability ;).
2612	25318485	2013-09-29T11:15:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318485	Diapolo	sipa	@jonasschnelli   ![options](https://f.cloud.github.com/assets/178464/1207390/56a746f0-25b6-11e3-8fc9-7d86b37c39cb.png)    I changed the lower part of the UI to be not special anymore (it's a seperate frame but has no special UI style set). It's not part of the tab element, because I wanted it to be visible everytime, no matter, which tab is activated. Can you perhaps post a screen of the current pull?    Edit: I'm not sure about the expert tab, as this 2 options were requested by @sipa for general availability ;).
2612	25516356	2013-10-02T06:46:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25516356	Diapolo	jonasschnelli	@jonasschnelli ping
2612	25631966	2013-10-03T15:45:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25631966	Diapolo	jonasschnelli	Updated:  - save and restore optionsdialog window position  - update nTransactionFee in QSettings with a set -paytxfee value when opening optionsdialog (I'm not sure about this yet, perhaps revert to not updating QSettings and just display current -paytxfee value in optionsdialog.)    @jonasschnelli Can you retest current code and see if this fixes the tx-fee problems :).
2612	25679362	2013-10-04T06:48:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25679362	jonasschnelli	Diapolo	@Diapolo paytxfee issue is fixed. Works as expected now.  But can't give you an ACK because i don't have the time and experience to test the proxy, etc. settings.    The visual part (UI) looks good for me.
2612	25682766	2013-10-04T08:18:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682766	Diapolo	jonasschnelli	@jonasschnelli Thanks for testing! There were reports of misbehaving options in our Github issues, can you report if these are fixed or if something has changed on that part?
2612	25687007	2013-10-04T09:36:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687007	laanwj	diapolo,	@diapolo, @jonasschnelli  great work here
2612	25687007	2013-10-04T09:36:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687007	laanwj	jonasschnelli	@diapolo, @jonasschnelli  great work here
2612	28791111	2013-11-19T13:53:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28791111	laanwj	Diapolo	Needs rebase after coin control features introduction.    @Diapolo Can you make a list of what needs to be tested here?  It's too bad that this contains so many core changes and isn't just a GUI refactor, this makes it harder to merge and test.
2575	17430825	2013-05-04T10:06:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17430825	Diapolo	sipa	@sipa Further thoughts about this?
2575	19799899	2013-06-21T06:03:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19799899	Diapolo	gavinandresen	@gavinandresen I'm fine with a test plan, as long as this has a real chance of getting merged. Is the code okay now or is ths not wanted anyway?
2575	22851767	2013-08-19T05:33:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22851767	Diapolo	gmaxwell	@gmaxwell I'm glad you are interested in helping me with this one. You currently don't need to start Bitcoin-Qt to do so, as this can be tested completely via bitcoind. The only Bitcoin-Qt change is to make it compatible with a changed datastructure.    Should I start by listing possible combinations of all proxy switches and how they should behave?
2575	23260171	2013-08-26T12:50:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23260171	Diapolo	gmaxwell	@gmaxwell Perhaps you could take a look at what I've written, if the current proxy handling of this pull sounds correct, before I start doing the test-plan.
2575	25767583	2013-10-06T12:52:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767583	Diapolo	sipa	Updated: Included suggestions from @sipa and introduced ``getproxyinfo`` and made ``ProxyInit()`` return ``fBase``.
2560	16949338	2013-04-24T17:12:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16949338	APerson241	sipa	@sipa It would always be possible to measure the time taken for one segment of the work to be completed and then calculate the the time for all the work to be completed.
2560	16949869	2013-04-24T17:21:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16949869	gmaxwell	APerson241	@APerson241  Unfortunately it's not very, because the speed changes greatly in different segments, and the amount of the change depends on your cpu speed. The new progress indicator in git, however, is much better than the old one.
2560	16951010	2013-04-24T17:34:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16951010	APerson241	gmaxwell	@gmaxwell That's a very good point, though it would seem that for certain tasks with a large number of identical or very similar blocks, such as syncing the transaction history, the change in time caused by differing speeds would throw the result off less.  For the example of syncing, you could make the time estimate even more accurate by taking into account variables like the number of connections to the network (more connections = less speed).    If that's too expensive (speed-wise), a generic, constant estimate could always be used, taking into account a limited number of variables.
2551	18926219	2013-06-04T17:43:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18926219	jgarzik	ag346	@ag346 Not a bad idea, actually...
2551	23602185	2013-08-31T07:30:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23602185	neilneyman	ag346	@ag346 it seems that the big issue might be the participant's other actual private keys getting (all or partially) leaked in a crash report.  This might be over-complicating things, but brainstorming here: could there be a suggestion or even some utility for the tester-client to immediately generate new addresses and spend all of the potentially-compromised coins to them?  Could be optional but recommended upon the next startup. I don't know if this would necessitate sending the crashdump on some sort of delay until the wallet is secured again.  One glaring problem I see with this is transaction fees.
2547	16917054	2013-04-24T09:42:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16917054	sipa	gmaxwell	For the record: @gmaxwell noticed yesterday that this can only be cause by the retargetting code. That should narrow down the problem a lot.
2547	17277189	2013-05-01T11:16:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17277189	bitcoinstarter	sipa	@sipa any workaround/fix regarding this problem? I too have this issue for more than 2 weeks now.  ![assertion_failed](https://f.cloud.github.com/assets/4311082/448597/8b3c34ae-b250-11e2-8589-350820a68082.jpg)
2547	17428252	2013-05-04T05:43:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17428252	bitcoinstarter	gavinandresen	@gavinandresen     Can you please take a look the problem stated by @Diapolo above?    thanks
2547	17428252	2013-05-04T05:43:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17428252	bitcoinstarter	Diapolo	@gavinandresen     Can you please take a look the problem stated by @Diapolo above?    thanks
2547	17567742	2013-05-07T20:20:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17567742	sipa	gavinandresen	@gavinandresen That's very unlikely on Windows.
2547	17639696	2013-05-08T23:07:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17639696	sipa	bitcoinstarter	@bitcoinstarter You have this problem for more than two weeks now. Does that mean that you fix it, and it re-appears, or after it happened the first time, it just doesn't go away?
2547	17681430	2013-05-09T18:35:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17681430	bitcoinstarter	sipa	@sipa @gavinandresen Im still having issues. The problem still persist and I cannot finish synchronizing because of the issue. Below is the latest screenshot of my wallet showing the error.    ![still problem](https://f.cloud.github.com/assets/4311082/484383/1ce6b654-b8d7-11e2-9255-d2a0b58406d7.jpg)
2547	17681430	2013-05-09T18:35:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17681430	bitcoinstarter	gavinandresen	@sipa @gavinandresen Im still having issues. The problem still persist and I cannot finish synchronizing because of the issue. Below is the latest screenshot of my wallet showing the error.    ![still problem](https://f.cloud.github.com/assets/4311082/484383/1ce6b654-b8d7-11e2-9255-d2a0b58406d7.jpg)
2547	17681844	2013-05-09T18:42:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17681844	bitcoinstarter	sipa	@sipa  @gavinandresen no matter what button I choose from the error above, bitcoin-qt.exe has stopped working. This is my problem since I started downloading the client for more than 2 weeks now and I keep having this problem no matter how many times I have re-download the client whether I using the install version or the zip version. same issues.    ![not responding](https://f.cloud.github.com/assets/4311082/484413/d35aa2b0-b8d7-11e2-8f5e-6420ebcb79c9.jpg)      btw, I using windows 7 Ultimate with 4GB RAM  (just for reference).
2547	17681844	2013-05-09T18:42:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17681844	bitcoinstarter	gavinandresen	@sipa  @gavinandresen no matter what button I choose from the error above, bitcoin-qt.exe has stopped working. This is my problem since I started downloading the client for more than 2 weeks now and I keep having this problem no matter how many times I have re-download the client whether I using the install version or the zip version. same issues.    ![not responding](https://f.cloud.github.com/assets/4311082/484413/d35aa2b0-b8d7-11e2-8f5e-6420ebcb79c9.jpg)      btw, I using windows 7 Ultimate with 4GB RAM  (just for reference).
2547	17704903	2013-05-10T05:24:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17704903	bitcoinstarter	sipa	@sipa Yes, that is an error after I fire up the exe. the error appears after a few minutes of initialization.    btw, how do I start wit -reindex on the command line?    Is there a command line version for the wallet? or are you referring to the Windows CMD prompt?
2547	17705051	2013-05-10T05:31:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17705051	bitcoinstarter	sipa	@sipa Ok I think youre referring to the Windows CMD prompt so Im giving it a shot. Hope it works and will let you know :)    ![reindex](https://f.cloud.github.com/assets/4311082/486704/bc39f3f0-b932-11e2-8744-8aa37178cb38.jpg)
2542	16715119	2013-04-21T02:59:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16715119	gmaxwell	rebroad	@rebroad It does not fix the issue, it breaks the network.
2542	16733486	2013-04-21T16:51:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16733486	rebroad	gmaxwell	@gmaxwell How does it break the network? And how does it not fix the issue? Certainly, from my testing (11 months of testing now against the latest bitcoin master) it doesn't break the network and does fix the issue.
2542	16884682	2013-04-23T20:36:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16884682	sipa	rebroad	@rebroad I hope it won't break the network if you're the only one running it! I don't know whether it fixes the issue (and will not claim it doesn't), but killing connections because nodes do what you ask them is not the correct way to deal with the issue.
2542	17118529	2013-04-27T16:05:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17118529	rebroad	sipa	@sipa I agree it's not the ideal way, but it's a start. The ideal solution is to change the protocol so that a node can abort a block download without aborting the connection, but as this isn't currently part of the protocol, the only way it can currently be done is by aborting the connection.
2542	17118748	2013-04-27T16:17:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17118748	sipa	rebroad	@rebroad No offence, but it's not. Of course you can cancel a block sync without aborting the connection: just stop asking for blocks. Or even better, don't ask for the same block twice to begin with. That's the only correct solution. As I (and others) have told you many times before: killing a connection because the peer does what you asked is not going to happen.
2542	19143855	2013-06-08T06:17:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19143855	rebroad	sipa	@sipa - what you talk about is indeed a better solution, but since no one seems interested in making those changes, then i still argue that my fix is better than doing nothing - and will benefit the network too IMHO as current much traffic is wasted on nodes sending and receiving duplicate blocks. I'm not aware that my patch can be exploited to cause any network splits - which would be a good reason for not implementing it.
2511	16296248	2013-04-12T14:36:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16296248	Diapolo	gavinandresen	AFAIK that Wallet flush thread was introduced by @gavinandresen the way it is currently working with Git master, perhaps we need to re-think how often the wallet is flushed, dunno not my playground ^^.
2476	20107548	2013-06-27T09:46:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20107548	rofl0r	gmaxwell	@gmaxwell my system is https://github.com/rofl0r/sabotage based on musl libc.  and no, currently i dont have bitcoin running there due to the weird release situation for the official client.  but i'd like to add it, once a regular source tarball is available.
2476	20107943	2013-06-27T09:50:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20107943	rofl0r	sipa	@sipa please read before post
2476	20108144	2013-06-27T09:53:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20108144	gmaxwell	rofl0r	@rofl0r if your response is that you want a _non-SSL_ source for it, I'm going to have to WONTFIX that, cause thats kinda nuts.  Should we ever get around to running our own resources for bitcoin.org and move all the hosting to it that site will be SSL only.
2476	20108863	2013-06-27T10:05:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20108863	rofl0r	jeffmendoza	won't solve anyone's problem - so you're saying that i and @jeffmendoza are nobody ?
2476	20108920	2013-06-27T10:06:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20108920	gmaxwell	rofl0r	@rofl0r  Because of legacy inertia thats what sourceforge does.  There is another issue where yet someone else is yelling at us over the non-use of SSL. There is absolutely no way that we're going to commit to providing _non-ssl_ downloads for your busybox environment.
2476	20109014	2013-06-27T10:08:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20109014	rofl0r	gmaxwell	@gmaxwell sourceforge is providing both HTTP *and* HTTPS, so that's completely irrevelant
2476	20109240	2013-06-27T10:13:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20109240	gmaxwell	jeffmendoza	> won't solve anyone's problem - so you're saying that i and @jeffmendoza are nobody ?    I don't know who you are. I know that you are asking for something that some additional work on an already strained release process that seemingly almost no one else cares about, on the basis of apparently incorrect claims (github's tag links being non-determinstic), with additional preconditions which we will not commit to supporting (non-ssl downloads).    Do you think that responding aggressively and arguing every point is going to get you your way here?  I might have made a commitment to do some extra work to support someone's particular requirements if I understood them and thought it would help but I'm certainly not inclined after this interaction. :(    As far as Jeff goes, he hasn't said why one of the two options we already have isn't sufficient for his usage.
2476	20110866	2013-06-27T10:53:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20110866	gmaxwell	nemysis	@nemysis I'm afraid you're going to have to explain what you need thats missing here.
2476	20110952	2013-06-27T10:55:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20110952	nemysis	gmaxwell	@gmaxwell BSD and GNU/Linux users need a stable Source tarball on SF.
2476	20111028	2013-06-27T10:57:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20111028	gmaxwell	sipa	@sipa Better to encourage builds from GIT, since then it leaves people in a position to send patches. ;) But indeed, it shouldn't be a big deal. I'm concerned by the weirdness of the responses here.     @nemysis  On SF? They do?  Really? Why?   You're just repeating yourself please help me understand.  The tar I linked to is a stable tarball.
2476	20111028	2013-06-27T10:57:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20111028	gmaxwell	nemysis	@sipa Better to encourage builds from GIT, since then it leaves people in a position to send patches. ;) But indeed, it shouldn't be a big deal. I'm concerned by the weirdness of the responses here.     @nemysis  On SF? They do?  Really? Why?   You're just repeating yourself please help me understand.  The tar I linked to is a stable tarball.
2476	20111337	2013-06-27T11:05:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20111337	nemysis	gmaxwell	@gmaxwell yes is stable here, but is not good to download as  bitcoin-0.8.3.tar.gz with good checksum what is needed for BSD, GNU/Linux source tarball. This is only granted from SF.
2476	20111548	2013-06-27T11:10:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20111548	sipa	nemysis	@nemysis I understand your concern about a stable download - I assume the fact that checksums can be published and verified, and are guaranteed not to change (and I indeed don't know to what extent github provides this).    But just so I understand correctly: there is nothing specifically offered by SF that you need, right? It's just the fact that github doesn't guarantee stability of its source downloads?
2476	20111722	2013-06-27T11:15:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20111722	nemysis	gmaxwell	@gmaxwell yes for a FreeBSD Port is needed a stable tarball with good checksums, which GitHub not offer. Here when a Port use GitHub must download a snapshots, and in distinfo is then a checksum which is reference, but this is not very good, because GH sometimes change download and have same name.
2476	20112187	2013-06-27T11:25:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20112187	gmaxwell	nemysis	@nemysis  I'm sorry, I still must be confused.  Whats wrong with USE_GITHUB and GH_TAGNAME in ports? I had thought many ports already pulled from github archive URLs just like ours.
2476	20112342	2013-06-27T11:30:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20112342	nemysis	gmaxwell	@gmaxwell this is true, i have too some FreeBSD Ports which use GH, but problem is that GH change very oft his rules and then must FreeBSD portmgr@ change bsd.sites.mk that download works from GH with this new rules and all Ports must be sometimes changed to this new rules. And when is a source tarball on SF then is all good.
2476	20112410	2013-06-27T11:31:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20112410	gmaxwell	nemysis	@nemysis OK! Thats good to know.
2476	20114104	2013-06-27T12:14:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20114104	nemysis	gmaxwell	@gmaxwell good that you this now know, Could you now upload a stable bitcoin-0.8.3.tar.gz and future Versions to SF site, please?
2476	20114345	2013-06-27T12:19:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20114345	luke-jr	gmaxwell	@gmaxwell If we're going to move to automake, we'll end up needing to do source releases anyway. To take advantage of automake's functionality, programs need to distribute source with the configure script already generated.
2476	20115915	2013-06-27T12:44:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20115915	rofl0r	luke-jr	@luke-jr does that mean gentoo checks the extracted files as opposed to the tarball itself ? that would explain why you didnt notice the changed hash  i got this information on irc from a packager:  ````<redacted> Github sometimes changes the way it rolls the distfile. The last time they switched from the hash for the last commit to the tree before it was tagged, to the hash that represented the tagging of the release.````
2476	20117096	2013-06-27T13:02:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20117096	gmaxwell	xmj	@xmj What you're saying there is untrue to the best of my ability to determin. There is no random seed in gzip or zlib.  There may be other causes of non-determinism (like the timestamp) which is why I was asking more questions (and regardless of what we do here, if github is actually non-determinstic we should get that fixed).    I'm sorry, it's just my nature to ask a lot of questions when people show up with incorrect arguments and perplexing desires like wanting to use sourceforge voluntarily. :)    @robbak Thanks for the information, thats great!
2476	20117096	2013-06-27T13:02:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20117096	gmaxwell	robbak	@xmj What you're saying there is untrue to the best of my ability to determin. There is no random seed in gzip or zlib.  There may be other causes of non-determinism (like the timestamp) which is why I was asking more questions (and regardless of what we do here, if github is actually non-determinstic we should get that fixed).    I'm sorry, it's just my nature to ask a lot of questions when people show up with incorrect arguments and perplexing desires like wanting to use sourceforge voluntarily. :)    @robbak Thanks for the information, thats great!
2476	20117583	2013-06-27T13:07:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20117583	luke-jr	rofl0r	@rofl0r Gentoo checks the tarball's hash itself.
2476	20117635	2013-06-27T13:08:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20117635	rofl0r	gmaxwell	@gmaxwell   ````  /dev/shm $ mkdir zip-test  /dev/shm $ cd zip-test/  /dev/shm/zip-test $ echo "test bar foo baz" > test.txt  /dev/shm/zip-test $ cd ..  /dev/shm $ tar czf zip-test.tar.gz zip-test/  /dev/shm $ sha256sum zip-test.tar.gz   d4b554db02cbb7f91660adbdabf94ecae07a4e65c213b557324fd480d16fca00  zip-test.tar.gz  /dev/shm $ rm zip-test.tar.gz   /dev/shm $ tar czf zip-test.tar.gz zip-test/  /dev/shm $ sha256sum zip-test.tar.gz   81f05ba5d208dc1731cde883d46439e3b5e8c026b8f298bb4bebd4b0c6eb0b4c  zip-test.tar.gz    ````
2476	20118156	2013-06-27T13:17:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20118156	gmaxwell	rofl0r	@rofl0r Thats the timestamp.     [gmaxwell@helmholtz tmp]$ tar cf zip-test.tar.gz zip-test/ | gzip -cn - > zip-test.tar.gz ; sha256sum zip-test.tar.gz  7abee1d0f56eb5e4405b2f4b15d24a94ff7b3103b0d2f4ba63c11e68305e9df5  zip-test.tar.gz  [gmaxwell@helmholtz tmp]$ tar cf zip-test.tar.gz zip-test/ | gzip -cn - > zip-test.tar.gz ; sha256sum zip-test.tar.gz  7abee1d0f56eb5e4405b2f4b15d24a94ff7b3103b0d2f4ba63c11e68305e9df5  zip-test.tar.gz    Github tarballs don't store it.
2476	20118450	2013-06-27T13:22:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20118450	rofl0r	gmaxwell	@gmaxwell ````tar cf zip-test.tar.gz zip-test/```` doesnt output to stdout, so your pipe does effectively nothing
2476	20119534	2013-06-27T13:39:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20119534	gmaxwell	rofl0r	@rofl0r I did, did you? It had nothing to do with github file determinism, that was actually changing to a different commit id. (Interestingly: the one it changed to is completely invisible to me: nothing in the reflog on my checkouts with that hash. Nothing in the github UI, etc.)    Edit: I've decoded what appears to have happened in robbak's case: Originally he created the port using the ID of the ultimate commit on that version, but we subsequently added the digitally signed tag as part of the release process. The path in the tarball uses the ID of the tag (94933c3) instead of the commit.
2476	20125974	2013-06-27T15:06:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20125974	rofl0r	gavinandresen	@gavinandresen apparently you cant read, that is only the opinion of @gmaxwell and nobody else here
2476	20125974	2013-06-27T15:06:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20125974	rofl0r	gmaxwell	@gavinandresen apparently you cant read, that is only the opinion of @gmaxwell and nobody else here
2476	20126252	2013-06-27T15:09:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20126252	rofl0r	gavinandresen	@gavinandresen ulrich drepper would be proud of you.
2476	20126446	2013-06-27T15:09:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20126446	jgarzik	luke-jr	github tarballs are fine for now, as stated.    As @luke-jr indicated, this may change once automake support is complete and merged.
2476	20141628	2013-06-27T17:35:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20141628	gmaxwell	jeffmendoza	@jeffmendoza And what problems do the github tarballs cause for you? (I'm collecting problems to report to github: So far I have none and regardless of what we do in the future it would be nice if the functionality worked right for people.)
2476	20147136	2013-06-27T18:56:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20147136	rofl0r	jeffmendoza	@jeffmendoza is unability to download from HTTPS nothing ? this causes a huge problem for me and other busybox users.  edit: oops, that should have been @gmaxwell
2476	20147136	2013-06-27T18:56:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20147136	rofl0r	gmaxwell	@jeffmendoza is unability to download from HTTPS nothing ? this causes a huge problem for me and other busybox users.  edit: oops, that should have been @gmaxwell
2476	20162236	2013-06-27T23:36:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20162236	robbak	gmaxwell	@gmaxwell Not quite. We always retrieved the tag, v8.0.2. Github (or maybe a bitcoin dev) changed how it determined what that tag meant. (Probably github - there was a rash of github-sourced ports that needed changing at around that time.)
2476	20163114	2013-06-28T00:00:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20163114	gmaxwell	robbak	@robbak Can you explain to me how a gentoo ebuild from two years ago: (http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/net-p2p/bitcoind/Manifest?revision=1.1&view=markup)    Has correct SHA256s for files I can download for github today?    E.g. "DIST bitcoin-v0.5.1.tgz 1007787 RMD160 107944a SHA1 2718930 SHA256 e33279066298e0a29e1dcca566d0a0bbcd89ef6e02d43bdbbeaf046f5faf66fe"    $ wget https://github.com/bitcoin/bitcoin/tarball/v0.5.1  $ sha256sum v0.5.1  e33279066298e0a29e1dcca566d0a0bbcd89ef6e02d43bdbbeaf046f5faf66fe v0.5.1  $ tar -ztf v0.5.1  bitcoin-bitcoin-5623ee7/  bitcoin-bitcoin-5623ee7/.gitignore  bitcoin-bitcoin-5623ee7/COPYING  [...]    I note that 5623ee7 is the ID of the signed tag, just like the current one that confounded you. So there can be no doubt that the same behavior was in place two years ago.    Maybe you were being MITMed? :p
2471	16013157	2013-04-07T11:03:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013157	Diapolo	sipa	@sipa @gavinandresen Can you take a look at this?
2471	16013157	2013-04-07T11:03:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013157	Diapolo	gavinandresen	@sipa @gavinandresen Can you take a look at this?
2471	16169613	2013-04-10T11:54:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16169613	Diapolo	jgarzik	@jgarzik Perhaps you can take a look or try to reproduce, as I know you are using the internal-miner :).
2445	16054040	2013-04-08T14:38:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16054040	rebroad	sipa	@sipa yes
2445	18071585	2013-05-17T16:24:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18071585	rdponticelli	rebroad	I can't reproduce this. Reindexing and forcing a IBD on a used wallet seems to work as expected on my tests.    @rebroad: can you explain more thoroughly how you're triggering this?
2413	20795002	2013-07-11T07:33:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20795002	fanquake	xelvet	@xelvet  See #2590 for related discussion.
2412	15463122	2013-03-26T14:58:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15463122	Diapolo	laanwj	I'm no core-developer, but did some Qt things, so thanks for your update. I like the pull and when I have more time I'll compile it and see how it feels when using it :).    @laanwj What do you think?
2412	15632632	2013-03-29T08:34:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632632	laanwj	sipa	I'm OK with the GUI code changes -- nice work.    About the general idea:    - Can you give a use case for this? What are you using this for?    - I am not sure about the consequences for the network of accepting connections but immediately dropping them, and what would be proper behavior in this case. I *think* closing the socket so that clients get "connection refused" is preferable. Maybe @sipa or @gavinandresen could comment.
2412	15632632	2013-03-29T08:34:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632632	laanwj	gavinandresen	I'm OK with the GUI code changes -- nice work.    About the general idea:    - Can you give a use case for this? What are you using this for?    - I am not sure about the consequences for the network of accepting connections but immediately dropping them, and what would be proper behavior in this case. I *think* closing the socket so that clients get "connection refused" is preferable. Maybe @sipa or @gavinandresen could comment.
2412	15672261	2013-03-30T10:09:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672261	jonls	rebroad	@rebroad Ok, but that seems to require a different implementation. This patch simply cuts all connections, so I think your proposal is better suited for another issue. Also it seems that any kind of throttling or filtering of the connections eventually end up being too controversial to get anywhere (e.g. #273).
2412	15762518	2013-04-02T08:23:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15762518	Diapolo	sipa	@sipa @gavinandresen I'm asking myself, if the core-devs are willing to pull such a thing or if this should be GUI-only?
2412	15762518	2013-04-02T08:23:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15762518	Diapolo	gavinandresen	@sipa @gavinandresen I'm asking myself, if the core-devs are willing to pull such a thing or if this should be GUI-only?
2412	16041969	2013-04-08T09:59:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16041969	jonls	luke-jr	@luke-jr I will be happy to do rebases if this has a chance of actually being pulled but so far I'm not sure. Whet do you think?
2412	17570929	2013-05-07T21:11:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570929	Diapolo	gavinandresen	@gavinandresen What do you think about that? Would be sad to just forget about it :).
2412	24265042	2013-09-11T18:38:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24265042	jonasschnelli	jonls	@jonls could you rebase once more?
2412	24367295	2013-09-13T01:14:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24367295	jonls	jonasschnelli	@jonasschnelli done
2407	22321099	2013-08-08T12:51:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22321099	CodeShark	Kyle	@Kyle r.e. dynamic creation of wallets via RPC: that was one of the main objectives of #2124   I think I've found a better approach to wallet management which I've been pursuing separate from these pull requests. I'll publish something on it soon.
2371	17388904	2013-05-03T11:01:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17388904	Diapolo	jonasschnelli	@jonasschnelli I'm working on the options dialog currently, see #2612. If there are special Mac fixes I'm happy to receive your input :).
2371	17388982	2013-05-03T11:03:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17388982	jonasschnelli	Diapolo	@Diapolo okay,.. i just saw it. No worries. I first need to analyze the problem. As soon as i know what's the root cause, i'll let you know and maybe have a fix ready.
2371	17393614	2013-05-03T13:21:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17393614	jonasschnelli	Diapolo	@Diapolo you might also check for conflicts pulling #2613, but i think it should be mergable.
2371	19912638	2013-06-24T15:02:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912638	fanquake	agravier	@agravier with the recent merges of OSX related settings fixes, do you still encounter these issues running 0.8.2-beta?
2371	19927026	2013-06-24T18:46:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19927026	agravier	fanquake,	Hi @fanquake, thanks for notifying me. I downloaded v0.8.2-beta and still encounter those issues.    I've tried individually, and in that exact order (beware, those are stateful bugs) (I also break it down by Preferences tab for clarity):    ### Main    * Main > Pay transaction fee > 0.00000005 BTC > `Apply`: The new state is 0.00000005 BTC (expected behavior)  * Change it back to 0 and `Apply`: new value is kept  * Main > Pay transaction fee > 0.00000005 BTC > `OK`, then reopen preferences: The new state is 0.00000005 BTC (expected behavior)  * Main >  Start on system login > `Apply`: resets the checkbox state to unchecked ( **unexpected** behavior)  * Main >  Start on system login >  `OK`, then reopen preferences: resets the checkbox state to unchecked ( **unexpected** behavior)    ### Network    * Network >  Map port using UPnP > `Apply`: keeps new unchecked checkbox state (expected behavior)  * Network >  Map port using UPnP > `OK`, then reopen preferences: keeps new unchecked checkbox state (expected behavior)  * Network >  Connect through SOCKS proxy > `Apply`: keeps new checked checkbox state (expected behavior)  * Network >  Connect through SOCKS proxy > `OK`, then reopen preferences: keeps new checked checkbox state (expected behavior)  * Network >  Connect through SOCKS proxy > `OK`, then reopen preferences: keeps new unchecked checkbox state (expected behavior)  * Network >  Connect through SOCKS proxy, change IP, port, SOCKS version  >  `Apply` > Acknowledge message: keeps new checked checkbox state and new values (expected behavior)  * Network >  Connect through SOCKS proxy, change IP, port, SOCKS version  >  `Apply` > Acknowledge message: keeps new checked checkbox state and new values (expected behavior)  * Network >  Connect through SOCKS proxy, change IP, port, SOCKS version  > `OK` > Acknowledge message, then reopen preferences: keeps new checked checkbox state and new values (expected behavior)  * Network > Change IP, port, SOCKS version,  (uncheck) Connect through SOCKS proxy >  `Apply` > Acknowledge message: restores checked checkbox state and previous IP, port and version values ( **unexpected** behavior)  * Network > Change IP, port, SOCKS version,  (uncheck) Connect through SOCKS proxy >  `OK` > Acknowledge message, then reopen preferences: restores checked checkbox state and previous IP, port and version values ( **unexpected** behavior)  * All subsequent attempts to change the Connect through SOCKS proxy checkbox, IP, port, or SOCKS version fail, using `Apply` or using `OK` (which is now a real issue for me, as I guess the client will not be able to connect now...). The Map port using UPnP checkbox still behaves as expected.    ### Window    * Window: this one has an issue with `Apply`: the button remains greyed out even if I toggle one of the two checkboxes ( **unexpected** behavior)  * Window >  Minimize to the tray instead of the taskbar > OK, reopen preferences: checkbox state is unchecked ( **unexpected** behavior)  * Window >  Minimize on close > OK, reopen preferences: checkbox state is unchecked ( **unexpected** behavior)  * Window >  Minimize to the tray instead of the taskbar,  Minimize on close > OK, reopen preferences: checkboxes states are unchecked ( **unexpected** behavior)    ### Display    * Display > Interface language > franais (fr) > Acknowledge message > Apply > list choice remembered (expected)  * Display > Show unit amounts in > microBTC > Apply > list choice remembered, and I see the interface change in the background (expected)  * Change back to default language, BTC > Apply > Choices remembered (expected)  * Display > Display addresses in transaction list > Apply > Choice remembered, and I see the interface change in the background (expected)  * Display > OK > Reopen preferences: choices remembered (expected)    So, you will note from the above that the Network tab's SOCKS options started misbehaving after several changes, while the Window tab's options never worked in the first place. I think that the issue with the main tab's "Start on system login" may also have never worked.     I hope that my report helps. I'm sorry that I can't contribute in code, I lack time...
2371	25066041	2013-09-25T07:11:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25066041	jonasschnelli	agravier	@agravier   Can you explain in detail what you mean with:    Main >  Start on system login > Apply: resets the checkbox state to unchecked ( unexpected behavior)  Main >  Start on system login > OK, then reopen preferences: resets the checkbox state to unchecked ( unexpected behavior)    For me the "start on system login" works okay.  I can check the "start on system login" checkbox and it will kept checked as well as the system entry was done.    I built on the current master.
2371	25066183	2013-09-25T07:15:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25066183	jonasschnelli	agravier	@agravier the reported "Windows" problems are fixed #2613 (is removed now on mac because it don't make sense there).  The SOCKS changes sometime needs a restart of the app. I think this is okay.
2371	25068846	2013-09-25T08:13:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25068846	agravier	jonasschnelli	@jonasschnelli I guess you understood the problem correctly, but here is a full description:     Main >  Start on system login > Apply: resets the checkbox state to unchecked ( unexpected behavior)     That means:    1. I open the preferences, observe that the checkbox marked "Start Bitcoin on system login" is unchecked.  2. I check the checkbox next to "Start Bitcoin on system login"  3. I click on Apply, observe that as a result, the checkbox marked "Start Bitcoin on system login" is toggled back to unchecked state. I expected it to remain checked (and the client to start at login).    Main >  Start on system login > OK, then reopen preferences: resets the checkbox state to unchecked ( unexpected behavior)    That means:    1. I open the preferences, observe that the checkbox marked "Start Bitcoin on system login" is unchecked.  2. I check the checkbox next to "Start Bitcoin on system login"  3. I click on OK, observe that the preferences pane is closed as expected  4. I open the preferences again, and observe that the checkbox marked "Start Bitcoin on system login" is unchecked. I expected it to be checked, and the client to start at login.    Please note that (at least some of) the issues are stateful. Some of the problems appeared only after some time testing everything. It was not the case for "Start Bitcoin on system login", though, IIRC, it didn't work from the start.    I may try with the head of master in the end of the week, but I'd like to do a clean install for that. If I want to completely cleanup all local data, is removing the ~/Library/Application Support/Bitcoin folder sufficient?
2371	25069281	2013-09-25T08:22:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25069281	jonasschnelli	agravier	@agravier it could also be a permissions issue. Do you have "Admin" right on your mac?
2371	25069700	2013-09-25T08:30:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25069700	agravier	jonasschnelli	@jonasschnelli Checking the checkbox and applying or clicking OK has no effect on the list of login items as displayed by the preferences pane. Bitcoin-Qt is not in the list. My account is allowed to administer. Full groups memberships:    ```  (Canopy 64bit) Alexandres-MacBook-Pro:Bitcoin agravier$ groups  staff com.apple.sharepoint.group.1 com.apple.access_screensharing everyone _appstore localaccounts _appserverusr admin _appserveradm _lpadmin _lpoperator _developer  (Canopy 64bit) Alexandres-MacBook-Pro:Bitcoin agravier$    ```    Also, the rights of the contents of ~/Library/Application Support/Bitcoin are    ```  drwxr-xr-x   11 agravier  staff       374 Sep 25 10:14 .  drwx------+  51 agravier  staff      1734 Aug 22 22:54 ..  -rw-r--r--@   1 agravier  staff      6148 Sep 22 12:09 .DS_Store  -rw-------    1 agravier  staff         0 Feb 14  2013 .lock  drwx------  171 agravier  staff      5814 Sep 24 20:41 blocks  drwx------  159 agravier  staff      5406 Sep 25 10:20 chainstate  drwx------    3 agravier  staff       102 Sep 22 12:12 database  -rw-------    1 agravier  staff         0 Sep 22 12:12 db.log  -rw-------    1 agravier  staff  95734554 Sep 25 10:23 debug.log  -rw-------    1 agravier  staff   1068058 Sep 25 10:14 peers.dat  -rw-------    1 agravier  staff     69632 Sep 25 00:42 wallet.dat  ```    where agravier is my username.
2371	25070030	2013-09-25T08:36:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25070030	jonasschnelli	agravier	@agravier Which bitcoin version you use?
2371	25070154	2013-09-25T08:39:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25070154	agravier	jonasschnelli	@jonasschnelli Bitcoin-Qt v0.8.5-beta downloaded from http://bitcoin.org/en/download 3 days ago. Qt version 4.8.4.
2371	25684291	2013-10-04T08:52:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25684291	Diapolo	agravier	@agravier Are you able to compile #2612 and see if your problems are better/solved?
2371	25690519	2013-10-04T10:46:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25690519	agravier	Diapolo	@Diapolo sure, I'm on your [5511af6](https://github.com/Diapolo/bitcoin/commit/5511af64d32b4c5cbb9a6b74f284b0901b98dce5) but failing to compile, hitting the same issue as @jonasschnelli [there](https://github.com/bitcoin/bitcoin/pull/2943#issuecomment-24167856). I have the autotools, boost, qt, xcode, the protocol buffers, mini uPnP, open SSL, and I don't remember what else, but I believe that I make all of dem incantations the right way. I will dig more later if noone can help.
2371	25690519	2013-10-04T10:46:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25690519	agravier	jonasschnelli	@Diapolo sure, I'm on your [5511af6](https://github.com/Diapolo/bitcoin/commit/5511af64d32b4c5cbb9a6b74f284b0901b98dce5) but failing to compile, hitting the same issue as @jonasschnelli [there](https://github.com/bitcoin/bitcoin/pull/2943#issuecomment-24167856). I have the autotools, boost, qt, xcode, the protocol buffers, mini uPnP, open SSL, and I don't remember what else, but I believe that I make all of dem incantations the right way. I will dig more later if noone can help.
2371	25748669	2013-10-05T13:39:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25748669	agravier	Diapolo	I tried passing various arguments to the configure script (--with-qt-bindir, --with-qt-incdir, --with-qt-libdir, --with-qt-plugindir), but it always stops with        checking if qt should be enabled... configure: error: "qt support requested but qt could not be located. use --without-qt"    I'm not trying more, for now. I hope that @Diapolo or @jonasschnelli can tell me the right way to compile Bitcoin-Qt. The documentation is sparse on that point.
2371	25748669	2013-10-05T13:39:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25748669	agravier	jonasschnelli	I tried passing various arguments to the configure script (--with-qt-bindir, --with-qt-incdir, --with-qt-libdir, --with-qt-plugindir), but it always stops with        checking if qt should be enabled... configure: error: "qt support requested but qt could not be located. use --without-qt"    I'm not trying more, for now. I hope that @Diapolo or @jonasschnelli can tell me the right way to compile Bitcoin-Qt. The documentation is sparse on that point.
2371	25767266	2013-10-06T12:24:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767266	Diapolo	agravier	@agravier I'm sorry to say, but as I'm not using autotools for my local build yet, I'm not able to help you out. I hope @jonasschnelli was able to sort out his compilation error and is able to help you.
2371	25767266	2013-10-06T12:24:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767266	Diapolo	jonasschnelli	@agravier I'm sorry to say, but as I'm not using autotools for my local build yet, I'm not able to help you out. I hope @jonasschnelli was able to sort out his compilation error and is able to help you.
2371	25767569	2013-10-06T12:50:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767569	agravier	Diapolo	@Diapolo what do you use? I could maybe follow your procedure.
2371	25793208	2013-10-07T08:53:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25793208	agravier	Diapolo	@Diapolo Yes, I tried  QT Creator after failing the Unix way, and stumbled on an error telling me that `locale/bitcoin_ach.qm` is missing. Is it difficult to set up the right environment for QT Creator to be able to build the project? Do you advise me to give up on your solution?    The QT Creator error:    ```  10:46:14: Running steps for project bitcoin-qt...  10:46:14: Configuration unchanged, skipping qmake step.  10:46:14: Starting: "/usr/bin/make"   /Developer/Qt/5.1.1/clang_64/bin/rcc -name bitcoin ../src/qt/bitcoin.qrc -o qrc_bitcoin.cpp  RCC: Error in '../src/qt/bitcoin.qrc': Cannot find file 'locale/bitcoin_ach.qm'  make: *** [qrc_bitcoin.cpp] Error 1  10:46:14: The process "/usr/bin/make" exited with code 2.  Error while building/deploying project bitcoin-qt (kit: Desktop Qt 5.1.1 clang 64bit)  When executing step 'Make'  10:46:14: Elapsed time: 00:00.  ```
2355	14768725	2013-03-12T10:48:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14768725	rebroad	PartTimeLegend	@PartTimeLegend The very fact that you are suggesting using Google confirms this is an issue.
2355	14769290	2013-03-12T11:04:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14769290	dirkjan111	Rebroad,	@Rebroad, look on this page: http://bitcoin.org/clients.html - it suggest Armory that can be installed on top of Bitcoin-qt and allows for 'cold storage'. If you really want to be secured from theft in an easy way, just install the client on a dedicated laptop and power off when done doing your transaction (don't forget to backup your wallet and keep it in a (second) safe location).
2342	18795499	2013-06-01T19:30:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18795499	petertodd	jgarzik	@jgarzik Updated, removed FIXME.    Min-height nLockTime has been tested on testnet without any issues.
2342	21090344	2013-07-17T03:47:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090344	luke-jr	petertodd	@petertodd Needs rebase.
2340	14323157	2013-03-02T05:11:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14323157	petertodd	sipa	@sipa I looked into it and I think we don't need to worry about nBestHeight decreasing on a retarget reorg. Anything already in a node's mempool stays there and will be mined once the chain height catches upl so it would be extremely rare for that to take more than an extra block or two.
2340	21090359	2013-07-17T03:47:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090359	luke-jr	petertodd	@petertodd Needs rebase.
2340	23233615	2013-08-25T19:16:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233615	petertodd	jgarzik	@jgarzik @luke-jr Updated and tested it against inputs.io, Coinbase, EasyWallet, SatoshiDice and the Android Bitcoin Wallet. It may make zero-conf tx's take a little longer to show up for SatoshiDice, but other than that possible issue I didn't have any problems. (the android wallet seems to have been updated to never show unconfirmed tx's so that's a non-issue) I couldn't test inputs.io properly because right now they aren't showing *any* transactions as confirmed for my account, nLockTime or not.    Note that this version is still the weaker one compatible with the current off-by-one behavior of the rest of the network that https://github.com/bitcoin/bitcoin/pull/2342 fixes.    What does BitPay do with nLockTime-using transactions?
2340	23233615	2013-08-25T19:16:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233615	petertodd	luke-jr	@jgarzik @luke-jr Updated and tested it against inputs.io, Coinbase, EasyWallet, SatoshiDice and the Android Bitcoin Wallet. It may make zero-conf tx's take a little longer to show up for SatoshiDice, but other than that possible issue I didn't have any problems. (the android wallet seems to have been updated to never show unconfirmed tx's so that's a non-issue) I couldn't test inputs.io properly because right now they aren't showing *any* transactions as confirmed for my account, nLockTime or not.    Note that this version is still the weaker one compatible with the current off-by-one behavior of the rest of the network that https://github.com/bitcoin/bitcoin/pull/2342 fixes.    What does BitPay do with nLockTime-using transactions?
2340	23233618	2013-08-25T19:17:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233618	petertodd	luke-jr	@luke-jr You added this patch to next-test - any related bug reports?
2340	23236328	2013-08-25T21:55:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23236328	schildbach	petertodd	@petertodd   > the android wallet seems to have been updated to never show unconfirmed tx's    Why do you think so? That's certainly not the case. However it will display a warning if lockTime > 0, and it also checks the unconfirmed dependency chain.
2340	23238887	2013-08-26T00:37:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23238887	petertodd	schildbach	@schildbach Actually seems that Android Wallet has a number of issues:    8f8dee4bbd74b573c324745d9d23938a1e4d12f269f9afca022224cf740f16aa - This tx has nLockTime=1, but nSequence=int max so it is a final tx. Instead the wallet shows a big read "this transaction is non-standard and should not be trusted" until it confirmed - kinda silly.    fdb100df609349802c90dee38c694f3626b6c1f62a20ba92603ad17202b09322 - nLockTime=1, and nSequence set so nLockTime is active, but the tx is locked. It eventually showed up in my wallet, but only after a confirmation. It didn't show up immediately.    a4cceb4df7db3507966e57aea6d8f7b21ceabee55bac573e9b9590229fde6a3f - This one, and a few like it, are the worst though: they are time-locked transactions, and every one of them not only didn't know up prior to being confirmed, but even after being confirmed they still didn't show up in my wallet. tx 6ed945173e1455edf09931b4c7caac165c7d834ddc1ea296a24b9213a45cf24d is a particularly extreme example, having the minimum possible "lock-by-time" nLockTime.    Curiously if nLockTime > the "lock-by-time" range, but all the sequence numbers are set so the tx is locked, the transaction also never shows up and doesn't display that "this transaction is non-standard" error message. For example: 8100cb9c84cf2f9c78ab2e6b488feb0a531e2ef88a1d1d28243a9e8361a433a7    Finally after re-scanning the chain all the tx's showed up in my wallet.
2340	23247554	2013-08-26T07:29:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23247554	schildbach	petertodd	@petertodd Thanks for your detailed tests. I'll investigate.
2340	26240512	2013-10-14T07:56:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26240512	wtogami	schildbach	@schildbach any results?
2340	26240928	2013-10-14T08:06:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26240928	schildbach	wtogami	@wtogami I fixed the UI so that the first case should not show up as timelocked any more.    The other cases should not show up in their unconfirmed state. However, they will show once they're blockchain confirmed.
2340	26361751	2013-10-15T18:50:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26361751	petertodd	schildbach	@schildbach What's blocking showing those tx's in their unconfirmed, but final, state?
2340	26398951	2013-10-16T07:54:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26398951	schildbach	mikehearn	I think the rationale is those transactions currently do not constitute a usecase that is supported by bitcoinj, so for safety reasons they are not allowed into the wallet. I believe this will change in future, probably with the introduction of more complex payment types (consisting of more than one tx). Probably @mikehearn can tell more.
2340	26554040	2013-10-17T21:19:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26554040	gmaxwell	mikehearn	@mikehearn The problem right now is that they don't show up in android wallet even after they're locked. Those transactions are not non-standard, they propagate fine, and other wallets (most?) display them okay too.
2340	28960090	2013-11-21T06:00:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28960090	petertodd	schildbach	@schildbach @mikehearn Current version of the Android wallet is rejecting all using txs with nSequence != max and/or nLockTime != 0 even once they are confirmed.
2340	28960090	2013-11-21T06:00:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28960090	petertodd	mikehearn	@schildbach @mikehearn Current version of the Android wallet is rejecting all using txs with nSequence != max and/or nLockTime != 0 even once they are confirmed.
2340	28967418	2013-11-21T09:09:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28967418	schildbach	petertodd	@petertodd If you have a test script, can you publish that so I can reproduce?
2340	29011654	2013-11-21T18:46:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29011654	petertodd	schildbach	@schildbach I don't have a test script; I used the raw tx API and just edited the hex manually.
2318	13784673	2013-02-19T17:14:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13784673	sipa	anarcat	@anarcat Luke isn't talking about Bitcoin clients, but about JSON-RPC clients. The JSON-RPC interface is intended to be used by applications, and bitcoind itself just implements a very simple CLI JSON-RPC client (in addition to being a full-blown Bitcoin client). Earlier discussions have suggested writing a more user-friendly python JSON-RPC CLI client, instead of pushing more features into bitcoind,
2303	13527126	2013-02-14T00:36:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13527126	gmaxwell	gavinandresen	@gavinandresen  I generally agree but 10% is more than I would have suspected might be an interesting scenario to profile and find some low hanging inefficiencies which apply outside of the bootstrap case.  (In particular, if isolating a loadblocking node gets you a 10% speedup there may be a DOS vector lurking in there)
2302	24580901	2013-09-17T11:31:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24580901	Diapolo	gavinandresen	@gavinandresen I also found a strange behaviour after your payment request pull. It's not possible to remove a secure payment from the sendcoins dialog, but it can contain a safe and an unsafe payment, where you can remove the unsafe payment (not talking about clear all).
2256	26990698	2013-10-24T13:13:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26990698	Diapolo	gavinandresen	@gavinandresen Is this still unfixed?
2214	12712634	2013-01-25T17:57:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12712634	Diapolo	gmaxwell	Makes a whole lot of sense to add these and I also still have that proxy-stuff in my mind (with a simplified code in init.cpp ^^).    I guess we should discuss, if some other dev is missing further options, I know @gmaxwell was looking for some more of the networking stuff.
2214	16892835	2013-04-23T23:16:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16892835	sipa	Diapolo	@Diapolo @laanwj Any of you feel like doing this?
2214	16892835	2013-04-23T23:16:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16892835	sipa	laanwj	@Diapolo @laanwj Any of you feel like doing this?
2202	26987550	2013-10-24T12:25:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26987550	Diapolo	laanwj	Can someone please review #3136, as this is related.    @laanwj  I also think we have a problem with the ``ThreadSafeMessageBox`` function, as I'm not sure the way we implemented getting the user choice back is supported (bool pointer). As ``The return value of the member function call is placed in ret. If the invocation is asynchronous, the return value cannot be evaluated.``, see https://qt-project.org/doc/qt-4.8/qmetaobject.html#invokeMethod.
2202	27201242	2013-10-28T10:30:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27201242	Diapolo	laanwj	@laanwj Ping, can you take a quick look at the Qt docs to verify, if I'm correct here...
2202	27202570	2013-10-28T10:56:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27202570	laanwj	Diapolo	@Diapolo if you look at the ThreadSafeMessageBox source https://github.com/bitcoin/bitcoin/blob/master/src/qt/bitcoin.cpp#L56, you see that we use GUIUtil::blockingGUIThreadConnection() in case of a modal message, which never returns one of the asynchronous types.
2202	27205326	2013-10-28T11:52:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27205326	Diapolo	laanwj	@laanwj You are right, we are currently only using modal messages (because all ``uiInterface.ThreadSafeMessageBox()`` calls use MSG_ERROR or MSG_WARNING).    So we have 2 types used for the connection left:  if(QThread::currentThread() != qApp->thread()) -> Qt::BlockingQueuedConnection;  else -> Qt::DirectConnection;    Perhaps our ThreadSafeMessageBox should always be modal then to ensure we can always rely on ``bool ret;``?
2079	25427088	2013-10-01T05:57:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25427088	laanwj	skruger	@skruger the only correct way would be what @gavinandresen says: let the account pay the fee (possibly going negative), then reimburse the fee to that account. A "prepare" step will not support concurrency as there is no atomic way to do RPC.  A way to limit the paid fee in advance would be useful of course, but is orthogonal to this.
2079	25427088	2013-10-01T05:57:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25427088	laanwj	gavinandresen	@skruger the only correct way would be what @gavinandresen says: let the account pay the fee (possibly going negative), then reimburse the fee to that account. A "prepare" step will not support concurrency as there is no atomic way to do RPC.  A way to limit the paid fee in advance would be useful of course, but is orthogonal to this.
2079	25447560	2013-10-01T13:17:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25447560	skruger	laanwj	@laanwj I decided to go with letting the account pay the fee and reimbursing, but I observed something a little bit troubling.  When I did my move the account I was reimbursing came up to 0, but the account I was reimbursing from didn't change.    My accounts  ```  >>> r.listaccounts()  [u'', u'testing', u'user_account_6', u'user_account_5']  ```  My move request  ```  >>> [r.getbalance(x) for x in r.listaccounts()]  [Decimal('0.00650000'), Decimal('0E-8'), Decimal('0E-8'), Decimal('-0.00050000')]  >>> r.move('', 'user_account_5', 0.0005)  True  >>> [r.getbalance(x) for x in r.listaccounts()]  [Decimal('0.00650000'), Decimal('0E-8'), Decimal('0E-8'), Decimal('0E-8')]  ```    It is troubling to me that the sum of all accounts after doing the reimbursement move is 0.0005 higher than the sum before doing the move.  The interesting thing is that my default account with the balance of 0.0065 before the move is the one that was wrong according to my external transaction log table.    The move command to reimburse actually created the transactions inside the bitcoind database so that a sum of all transactions in the '' account matched getbalance('') which indicates to me that getbalance('') may not be relying on the transaction tables alone for its calculation.    Based on this it would appear as if the reimbursement step is required for accounting sanity purposes which makes me wish all the more that there were a way to set an account for transaction fees to be charged against when calling sendfrom so as to avoid reimbursement and the accounting oddities I have noted around that (or the oddities when a reimbursement isn't made).
2038	26990566	2013-10-24T13:12:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26990566	Diapolo	luke-jr	@luke-jr Is this still happening with current master? I'm not aware of chmod syntax, does -r remove all rights on the blk files?
2034	10711435	2012-11-26T10:57:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10711435	sipa	luke-jr	@luke-jr The main problem I want to solve is IBD that get interrupted randomly when a good peer tells you about a new block in between. I really want an IBD mechanism that at least is continuously downloading blocks, and doesn't stop for several minutes when a peer disconnects or the mechanism is disturbed for some silly reason. Seriously, the way it works now is embarrassing. However, just adding re-requests and randomly asking a new peer for blocks when an old one doesn't response would increase the double-block-download problem significantly, thus this is better solved as well at the same time.    You raise a good point that there are several issues with how Bitcoin's network core works now, but IMHO that is a much harder problem to solve.
2034	11293675	2012-12-12T15:37:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11293675	sipa	rebroad	@rebroad That would be better without a doubt, but that's far harder to do, and I doubt it would be less of a hack than what we have now. I want something that works, is easy to understand, doesn't request blocks several times, and doesn't get confused by different nodes announcing blocks.    The real solution is headers-first fetching, where we know in advance which blocks to request and which nodes have them. When we have that, parallel block fetching is definitely the intention, but right now, let's just make something that works.
2034	12192611	2013-01-13T11:44:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12192611	Diapolo	sipa	@sipa How would you chose the "sync node"? I took a quick look into that code parts and wow... heavy stuff in there for my little brain :-D.
2034	12198484	2013-01-13T19:20:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12198484	rebroad	Diapolo	@Diapolo what code?
2007	10557328	2012-11-20T14:52:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10557328	Diapolo	sipa	@sipa Did you check this out? Does it happen also on Linux or with bitcoind?
2007	10718980	2012-11-26T15:16:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10718980	Diapolo	laanwj	@laanwj I would prefer an error message before the client simply crashes, before we talk about how friedly that message should be :-D. Does a wrong time cause a crash on Linux, too with current master?
2007	12728350	2013-01-26T01:08:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12728350	Diapolo	sipa	@sipa Any comment for this one?
1994	26990356	2013-10-24T13:09:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26990356	Diapolo	cinderblock	@cinderblock I recently added a commit, that logs start and end of our ``Shutdown()`` function, does that help you?  Look for ``Shutdown : In progress...`` and ``Shutdown : done`` messages in your debug.log (running with latest master).    If this helps, please close the ticket for yourself.
1928	19493455	2013-06-15T08:56:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19493455	M4v3R	gavinandresen	Is there any progress on that?    My use case for this would be, that my service would manage users wallet and make transaction drafts for him, and his job would be signing them with his private key that my server doesn't know. @gavinandresen ?    While at it, it would be very nice to have a RPC command like "sendfrom" which could draft a transaction from given address to given addresses. Right now if the multisig address received several transactions, you have to handle the calculations yourself, and bitcoin client already solved that for plain addresses.
1816	10392472	2012-11-15T00:24:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10392472	luke-jr	sipa	Rebased and implemented @sipa 's CValidationResult solution.
1816	18697600	2013-05-30T18:10:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18697600	sipa	jgarzik	@jgarzik I don't think that's a requirement (though certainly something to take into consideration).    I like the idea of such functionality, as it allows miners to validate their work against multiple implementations. Especially with alternative full node implementations becoming available, having something like this may be inevitable. Plus it's a good debugging tool for checking whether new (unreleased) versions can accept the best chain.    On the other hand, I don't like the evolution that may follow from this, where miners become required to validate against a dozen implementations that may or may not differ in validation rules... that has nothing to do with this PR though.
1816	18771491	2013-05-31T21:04:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18771491	petertodd	sipa	@sipa A good example where the validation is extremely useful is a safety net for bitcoin changes that could potentially create invalid blocks. For instance in discussions with pools and miners something that comes up with implementing replace-by-fee and the child-pays-for-parent code I'm working on is the danger that there will be some kind of bug that leads to an invalid block. (let alone a delibrate exploit) Sure you can test all you want on testnet, but it's impossible to be 100% sure, and any orphan costs ~$3000USD; I've got one pool that wants to implement replace-by-fee that has said they are going to wait until it's been tested on Eligius first.
1816	18785624	2013-06-01T08:29:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18785624	sipa	petertodd	@petertodd Sure, I agree it's a very good way to debug and test potentially forking changes. I just don't like what it may lead to.
1816	18801469	2013-06-02T03:43:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18801469	rebroad	sipa	@sipa I agree it is good to be wary of where this may lead to. Are you meaning to imply that leaving things as they are may be a better alternative to the proposed solution made by Luke?
1801	27201164	2013-10-28T10:29:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27201164	Diapolo	laanwj	@laanwj @sipa Is this still one of our problems? I know there were some changes recently.
1801	27201164	2013-10-28T10:29:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27201164	Diapolo	sipa	@laanwj @sipa Is this still one of our problems? I know there were some changes recently.
1746	8554365	2012-09-14T08:11:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8554365	laanwj	turkeyman	@turkeyman: you seem to know a lot about it; why not take a shot at implementing it yourself?  @luke-jr: as I understand it, it simply sends bitcoin: URIs as standard URIs over NFC, instead of through QR codes  Edit: But I'm not entirely sure, there may be some extensions. If so, there should be a BIP first. Here is the code relating to NFC from the android app:  Utility functions:  * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/util/NfcTools.java  Ui: * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/TransactionActivity.java * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/WalletAddressFragment.java * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/RequestCoinsFragment.java * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/SendCoinsActivity.java
1746	8554365	2012-09-14T08:11:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8554365	laanwj	luke-jr	@turkeyman: you seem to know a lot about it; why not take a shot at implementing it yourself?  @luke-jr: as I understand it, it simply sends bitcoin: URIs as standard URIs over NFC, instead of through QR codes  Edit: But I'm not entirely sure, there may be some extensions. If so, there should be a BIP first. Here is the code relating to NFC from the android app:  Utility functions:  * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/util/NfcTools.java  Ui: * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/TransactionActivity.java * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/WalletAddressFragment.java * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/RequestCoinsFragment.java * https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/SendCoinsActivity.java
1746	8558230	2012-09-14T11:17:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8558230	TurkeyMan	sipa	@sipa This is part of my reasoning why this should be tackled in the reference client; everyone is rolling their own. If the reference client implements a thought-through protocol, then I suspect all clients would adopt support for the same protocol.  Another important consideration for the protocol is clients like Electrum.
1746	8607789	2012-09-17T08:51:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8607789	TurkeyMan	laanwj	@laanwj I think it's very important. One-direction URL is okay for phones, but consider:   * prepaid accounts out of credit   * monthly data limit exceeded   * poor weather in dark network zone   * travelling internationally (I am constantly without data network when overseas)   * use with smartcards instead of phones (very useful for those not interested in technology).  I think it should be possible for any phone/smartcard to run an electrum client, and the NFC/smartcard protocol should support that transaction style. In the case of a chip based smartcard, the POS would need to prompt the user to enter a PIN I imagine too.  That obviously doesn't need to be done immediately, but I think the protocol should define and support it.  One other communication for the protocol would be a balance request. If the phone has no network connection, the client app will still want to show the users balance, at which point the device will have to request the balance from the POS terminal.
1746	8634957	2012-09-17T23:42:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8634957	sipa	laanwj	@laanwj: I consider the fact that the Bitcoin's most common way of submitting transactions is to use the slow, unreliable and expensive P2P network (as opposed to directly submitting them to the receiver; payment protocol)) a flaw. I see absolutely no reason to do the same in the NFC case, especially because at that point you are most certainly already communicating with the merchant anyway.  @TurkeyMan: Bitcoin internally has no concept of balances, and I'm strongly against defining something like that. Balances are a wallet's responsability (especially since just the balance isn't enough; you need the transactions ids, amount, and txout scripts of the transactions crediting you anyway to construct a payment). Also, I certainly don't want our NFC protocol to be a proxy for a client device to connect to the internet. If it needs that, it should do so by itself.
1746	8634957	2012-09-17T23:42:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8634957	sipa	TurkeyMan	@laanwj: I consider the fact that the Bitcoin's most common way of submitting transactions is to use the slow, unreliable and expensive P2P network (as opposed to directly submitting them to the receiver; payment protocol)) a flaw. I see absolutely no reason to do the same in the NFC case, especially because at that point you are most certainly already communicating with the merchant anyway.  @TurkeyMan: Bitcoin internally has no concept of balances, and I'm strongly against defining something like that. Balances are a wallet's responsability (especially since just the balance isn't enough; you need the transactions ids, amount, and txout scripts of the transactions crediting you anyway to construct a payment). Also, I certainly don't want our NFC protocol to be a proxy for a client device to connect to the internet. If it needs that, it should do so by itself.
1746	8641442	2012-09-18T05:26:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8641442	laanwj	sipa	@sipa: Concern about attack surface and "internet proxy" behavior were exactly my reason to be skeptical of a return channel. But supporting devices without their own internet connection is a good reason. I still want the protocol to be as minimal as possible, so vendors can mess up the implementation in as few ways as possible that allow for fraud.  (and expose as little as possible in case someone succeeds in sniffing or MITMing the radio transmission)
1746	8644526	2012-09-18T07:59:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8644526	TurkeyMan	sipa	@sipa I can see your point, but in a retail situation where you are making a payment with an offline device, perhaps providing an internet proxy would be useful. That said, a full internet proxy seems overkill, since the only thing the user wants is the transaction history for their addresses of interest, and a full bitcoin client will already have this data locally (no?). They don't need to start updating their facebook or twitter posts.  Am I misunderstanding the transaction history? I can imagine a query to provide the transaction history for an address back to a particular point (the last record the device has I guess) would be a simple thing to serve, and allow the device to keep its user-facing record of the current balance accurate.
1746	8683927	2012-09-19T08:18:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8683927	TurkeyMan	laanwj	@laanwj /agree, it makes it more complicated than just the URL, but the only significant trust issue I see is requesting a PIN number from the POS device, and this is equally an unsolved issue with modern credit card POS terminals and ATM's. At least the security risk is familiar, and to make malicious use of collected PIN numbers, you need to acquire the users wallet card. Offline phones can enter their own pin on the screen, it's just a basic Electrum payment.  I would approach it like this (if I had time to offer):  Starting point, no security concern:  * one-way URL request; as a start (set the standard that NFC is expected in all bitcoin clients)    - POS monitors the network for satisfactory confirmation  * basic Electrum style payment; offline devices (authentication performed on the device)    - begins with a URL request, as above, but a second NFC touch may return a signed transaction  Then much lower priority:  * Electrum payment with pin request on POS terminal; for cards (trust concerns)  * transaction history (maybe?); show the user their balance (what advantage would the POS have to lie?)
1746	8691205	2012-09-19T13:36:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8691205	TurkeyMan	sipa	@sipa Sure, I would imagine the protocol to apply to whatever communication channel is used. I would design it as a stateless, instantaneous, single request+response transaction like HTTP.  PIN (or whatever) on the device is fine, IF the device is a device. If it is just a smartcard, then the POS needs to provide pin entry. I can imagine many people; tech-phobes, elderly, my mum, will prefer to have a bitcoin wallet that looks and feels like a credit card, rather than an app on her 10 yr old Nokia. The only difference technically is how to enter a PIN.
1675	24782153	2013-09-20T00:00:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24782153	gmaxwell	Cryddit	@Cryddit  alas, for a miner, making them free would be economically irrational since the scarcity creating the market to begin with is the maximum size of the block.    (Also, making txins free entirely has the risk of people stuffing kilobytes of data in them for parasitic storage)
1674	7737457	2012-08-14T19:33:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7737457	Diapolo	BitcoinPullTester	I tried the version from @BitcoinPullTester and it starts just fine, no crashes related to stack-protector on Win7 x64 here.
1674	7778875	2012-08-16T07:49:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778875	Diapolo	laanwj	@laanwj No I did not investigate further, until now I just enabled it. Have you got some links for stack-smashing fun :)? Forget my question, I'm going to test it now :).
1674	7792891	2012-08-16T17:36:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7792891	Diapolo	laanwj	@laanwj You want me to use ``-loadblock=`` as benchmark if I understand you correctly?
1674	7794866	2012-08-16T18:44:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7794866	sipa	Diapolo	@Diapolo that's correct
1674	7814487	2012-08-17T10:17:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7814487	Diapolo	laanwj	@laanwj Where is that part located in the code?  1st result without this patch: 08/17/12 09:59:28 Loaded 188524 blocks from external file in 5399340ms  2nd result with this patch: 08/17/12 11:49:21 Loaded 188524 blocks from external file in 5398498ms 08/17/12 13:44:26 Loaded 188524 blocks from external file in 5425789ms (verification run)  To me this looks like SSP is no bottleneck, when importing block-files.
1674	7837946	2012-08-17T23:13:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7837946	Diapolo	BitcoinPullTester	This currently seems to be not working with Gitian or @BitcoinPullTester builds, as the RELEASE=1 scope seems to be not taken into account (see #1673).
1674	7845677	2012-08-18T16:01:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7845677	Diapolo	laanwj	@laanwj I would have tested the executable, but @BitcoinPullTester did not generate any bitcoin-qt.exe.
1674	7845677	2012-08-18T16:01:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7845677	Diapolo	BitcoinPullTester	@laanwj I would have tested the executable, but @BitcoinPullTester did not generate any bitcoin-qt.exe.
1674	7854876	2012-08-19T17:18:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7854876	Diapolo	TheBlueMatt	@TheBlueMatt I'll try one more rebase with --fstack-protector (instead of -fstack-protector-all) and if that fails the problem with SSP on Windows is still there (IMHO caused by the cross-compilation somehow as my own build runs just fine).  Current bitcoin-qt_test.exe crashes for me too.
1674	7856753	2012-08-19T20:56:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7856753	Diapolo	BitcoinPullTester	Now that is interesting with just -fstack-protector as flag, the @BitcoinPullTester build passes the sanity-testing, BUT when testing it with testnet it leads to missbehaviour (blkindex.dat could not be loaded or with a clean datadir it shows wallet.dat corrupted / damaged).  @gmaxwell Any idea how to track down your idea further, that this could be a bug? I think it's rather strange that -fstack-protector leads at least to a valid executable...
1674	7856753	2012-08-19T20:56:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7856753	Diapolo	gmaxwell	Now that is interesting with just -fstack-protector as flag, the @BitcoinPullTester build passes the sanity-testing, BUT when testing it with testnet it leads to missbehaviour (blkindex.dat could not be loaded or with a clean datadir it shows wallet.dat corrupted / damaged).  @gmaxwell Any idea how to track down your idea further, that this could be a bug? I think it's rather strange that -fstack-protector leads at least to a valid executable...
1674	7907168	2012-08-21T16:34:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7907168	jgarzik	gmaxwell	@gmaxwell might be on to something.  mingw builds against binary libs whose ABI occasionally changes due to C++ ABI changes etc.
1674	7908383	2012-08-21T17:12:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7908383	laanwj	TheBlueMatt?	Could well be. What are the gcc versions involved? What gcc version do you use Diapolo? And which one for Bitcoin Pull tester by @TheBlueMatt? I suspect TheBlueMatt uses the version included in ubuntu lucid (4.4.x), Diapolo is using a more recent one included with mingw (4.6.x?).
1674	7910350	2012-08-21T18:09:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7910350	laanwj	diapolo	@diapolo: I suppose mingw32 4.2.1 is actually using gcc 4.2.1 for the cross compile, not 4.5.2.
1674	7924630	2012-08-22T04:50:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7924630	Diapolo	TheBlueMatt	@TheBlueMatt You are right, that @BitcoinPullTester and Gitian should use the same compiler versions. I was just asking, if someone is able to test-compile with a more current minGW version (at least 4.4) in Gitian or your setup. It drives me mad, that such a security mitigation is not working for Windows, as I'm sure Windows users are far more at risk to encounter an attack in comparison to other OSes.
1674	7924630	2012-08-22T04:50:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7924630	Diapolo	BitcoinPullTester	@TheBlueMatt You are right, that @BitcoinPullTester and Gitian should use the same compiler versions. I was just asking, if someone is able to test-compile with a more current minGW version (at least 4.4) in Gitian or your setup. It drives me mad, that such a security mitigation is not working for Windows, as I'm sure Windows users are far more at risk to encounter an attack in comparison to other OSes.
1674	7932871	2012-08-22T12:47:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932871	TheBlueMatt	laanwj	@laanwj precise has two sets of mingw packages - the regular mingw is the same old version, but there is now a mingw-w64 (the 64-bit part is optional) which is gcc 4.6.3.
1674	7932892	2012-08-22T12:48:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932892	TheBlueMatt	Diapolo	@Diapolo I'll look into compiling it myself later today if I get a chanace.
1674	7932913	2012-08-22T12:49:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932913	Diapolo	TheBlueMatt	@TheBlueMatt I greatly appreciate your efforts here :) (that goes to all others, who participate here).
1674	7947359	2012-08-22T20:05:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7947359	Diapolo	laanwj	@laanwj Great work and I have some comments to make to your findings.  1. I'm asking myself, how Gitian creates a static bitcoin-qt.exe as I was never able to achieve this with my local setup. The current project file has ``windows:LIBS += -Wl,-Bstatic -static-libgcc`` not included, so where is the magic here? 2. I'm currently using Boost 1.50 and in comparison to 1.49 no monkey patch was needed or active, as the Boost devs changed the parts of the interprocess code. 3. Yes, Boost > 1.49 needs the compiled Chrono lib included, which is what I also observed. 4. I didn't need to change any IPC code, but needed to remove ``typedef HANDLE pthread_t;`` from util.h and change ``pthread_t`` into ``HANDLE`` in ``CreateThread()``, perhaps that is also of help for your build. 5. I'll compile the Boost 1.51 libs and see if I encounter additional errors.  Can you upload your compiled version, I'm gona give it a run on a native Win7 x64 to verify it's working.  In the end I'm not sure what your findings are worth in terms of getting SSP to work with our official client builds, but a big thank you for your effort and time to investigate :).  Edit: The switch to Boost 1.51 caused no further compilation errors here.
1674	7970222	2012-08-23T13:54:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7970222	Diapolo	laanwj	@laanwj I tried your version and it's working, no crash and no strange errors after startup, looks good.
1674	9394262	2012-10-12T22:06:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9394262	Diapolo	laanwj	@laanwj Any idea, why we need this (https://github.com/bitcoin/bitcoin/blob/master/bitcoin-qt.pro#L37) in the pro-file, but such a linker flag is not needed in makefile.unix (https://github.com/bitcoin/bitcoin/blob/master/src/makefile.unix#L71) for SSP?    I tried to remove the linker flag for bitcoin-qt, as I was somehow sure it is no linker flag, but that creates a ton of errors (doesn't work and needs to be in place).
1674	9980890	2012-11-01T13:58:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9980890	laanwj	diapolo	@diapolo The security options need to be passed to the linker as well as compiler. Note that at the bottom of makefile.unix we pass xCXXFLAGS as well as xLDFLAGS to the linker, at different positions in the argument list.
1674	11906476	2013-01-05T00:43:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11906476	sipa	laanwj	@laanwj So, ACK on this after #2106?
1674	11907096	2013-01-05T01:21:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11907096	Diapolo	sipa	@sipa That GCC version should be safe to use, but to be sure I asked you, if you could do a little test build with this pull included :).
1674	11907393	2013-01-05T01:39:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11907393	sipa	Diapolo	@Diapolo It's included in http://bitcoin.sipa.be/builds/pre-0.8/2013-01-05-turbo-ldb17/
1674	11913454	2013-01-05T12:33:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11913454	Diapolo	sipa	@sipa Works just fine, startup, IBD, create a TX... all things that couldn't even be tested with the old compiler suite :).
1674	12122405	2013-01-10T22:31:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12122405	Diapolo	gmaxwell	Added a -static switch (after @gmaxwell suggested that), which works for my local build. Perhaps @sipa could integrate that into the leveldb17 test builds to see if the libssp-0.dll dependency is gone.    Edit: @laanwj What about adding ``CONFIG += static`` to the project file? Seems also right :).
1674	12122405	2013-01-10T22:31:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12122405	Diapolo	sipa	Added a -static switch (after @gmaxwell suggested that), which works for my local build. Perhaps @sipa could integrate that into the leveldb17 test builds to see if the libssp-0.dll dependency is gone.    Edit: @laanwj What about adding ``CONFIG += static`` to the project file? Seems also right :).
1674	12122405	2013-01-10T22:31:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12122405	Diapolo	laanwj	Added a -static switch (after @gmaxwell suggested that), which works for my local build. Perhaps @sipa could integrate that into the leveldb17 test builds to see if the libssp-0.dll dependency is gone.    Edit: @laanwj What about adding ``CONFIG += static`` to the project file? Seems also right :).
1674	12143789	2013-01-11T13:18:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12143789	Diapolo	BitcoinPullTester	Too bad @BitcoinPullTester didn't yet build a binary...
1674	12175925	2013-01-12T09:37:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12175925	Diapolo	TheBlueMatt	@TheBlueMatt     <pre>  /usr/bin/ld: cannot find -lQtTest  collect2: ld returned 1 exit status  make: *** [bitcoin-qt_test] Error 1  </pre>    I'm not sure if this is related to my pull, any idea?
1674	12199405	2013-01-13T20:15:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12199405	Diapolo	sipa	@sipa Your linked build does not contain the described error. I wonder how we can now check, that the stack-smashing protection is really still working.    I had code to trigger it, which caused a crash with a clear reference to libssp-0.dll on Windows. I wonder what it would look like with the recent static-change...    <pre>  char SPP_buffer[1024];  SPP_buffer[1025]=0xff;    printf("%s", SPP_buffer);  </pre>
1674	12201978	2013-01-13T22:48:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12201978	BitcoinPullTester	Diapolo	@Diapolo it appears to be an issue with this pull, it appears to be making the default -static instead of it being dynamic as it used to be.
1674	12207710	2013-01-14T06:05:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12207710	Diapolo	sipa	@sipa Yes, I'll make that Windows only and add a commit, which also enabled this for bitcoind.    Still the open question, how can we verify what happens on Windows, when a SSP problem is caught and the app get's terminated with -static beeing active.
1674	12208319	2013-01-14T06:54:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12208319	Diapolo	BitcoinPullTester	@BitcoinPullTester Is the pull tester still using that ancient compiler suite or are you now using the same as @sipa in the leveldb17 pull?    I updated the pull to use -static only for Windows and extened the Windows makefiles for bitcoind to be equal feature-wise.
1674	12208319	2013-01-14T06:54:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12208319	Diapolo	sipa	@BitcoinPullTester Is the pull tester still using that ancient compiler suite or are you now using the same as @sipa in the leveldb17 pull?    I updated the pull to use -static only for Windows and extened the Windows makefiles for bitcoind to be equal feature-wise.
1674	12228058	2013-01-14T17:02:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12228058	TheBlueMatt	Diapolo	@Diapolo The issue is on the linux side, not the MinGW side, I dont believe the leveldb17 pull changes that?
1674	12243278	2013-01-14T22:23:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243278	sipa	Diapolo	@Diapolo I included these changes in the leveldb17 branch (#2106), as it conflicted with other changes there.
1674	12243519	2013-01-14T22:28:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243519	Diapolo	sipa	@sipa Can you do a testbuild for me with that code in init.cpp, to see what happens with -static keyword? It will crash, but I would like to know if there is a chance to see the process got terminated by GCCs stack protector.    I think we need to ensure we don't break it...    <pre>  char SPP_buffer[1024];  SPP_buffer[1025]=0xff;    printf("%s", SPP_buffer);  </pre>
1674	12243607	2013-01-14T22:30:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243607	sipa	Diapolo	@Diapolo create a branch with the code you want to test, and point me to a commit id.
1674	18694427	2013-05-30T17:06:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694427	jgarzik	Diapolo	@Diapolo ping?
1674	18787199	2013-06-01T11:06:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18787199	Diapolo	jgarzik	@jgarzik As we are still using the same ancient GCC version I can't do anything here :-/.
1674	25786646	2013-10-07T06:04:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25786646	Diapolo	gavinandresen	@gavinandresen I didn't know we haven't yet upgraded pull-tester environment. This patch should at least result in working Windows executables for official Gitian builds.
1674	25867218	2013-10-08T06:21:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25867218	Diapolo	gavinandresen	@gavinandresen As long as we use this ancient ``i586-mingw32msvc-g++ (GCC) 4.2.1-sjlj (mingw32-2)`` compiler with pull-tester, we can't rely on it for creating or testing this pull I guess. Will download the qt exe and try it, it should crash or misbehave, as that was what happened before with pull-tester builds.
1674	26687889	2013-10-21T01:07:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687889	gavinandresen	Diapolo	@Diapolo : re executable size: they are not stripped (contain debugging symbols).  I assume they crash because pull-tester is using an ancient mingw?
1674	26697226	2013-10-21T07:29:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26697226	laanwj	gavinandresen	@gavinandresen Yes, they crash because of the ancient mingw version, so this is still pending on a pulltester mingw update.
1647	9983542	2012-11-01T15:15:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9983542	gavinandresen	mikehearn	@mikehearn :  needs unit tests, in my humble opinion. It is a very good candidate for "needs 100% code coverage from tests", because transaction selection is such a key piece of the Bitcoin infrastructure.    Also needs thorough code review, with an eye towards "Could I construct a series of transactions that made the selection algorithm take O(N^2) time ?"
1647	9985286	2012-11-01T16:01:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9985286	luke-jr	gavinandresen	@gavinandresen What kind of unit tests would you like for this? I already dealt with the O(N^2) problem a while back on Eligius, though of course more reviews are always welcome.
1647	9995865	2012-11-01T21:03:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9995865	gavinandresen	gmaxwell	Thanks @gmaxwell , those are exactly the types of tests I think this needs!
1625	7998032	2012-08-24T10:38:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7998032	Diapolo	sipa	@sipa Do you think this does need further checks or something? If no just close this issue.
1583	6916602	2012-07-11T19:17:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6916602	luke-jr	gavinandresen	Various people (@gmaxwell and @gavinandresen included) expressed interest in this - one example was to allow captcha-solving as an alternative to fees.
1583	7696109	2012-08-13T15:54:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7696109	sipa	luke-jr	@luke-jr Which commit removed the call to GetMinFee with GMF_BLOCK?
1583	7696169	2012-08-13T15:56:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7696169	luke-jr	sipa	@sipa c555400ca134991e39d5e3a565fcd2215abe56f6
1583	16275637	2013-04-12T04:43:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16275637	luke-jr	gavinandresen	Ok, finally redid this using a map.    @gavinandresen , look good?
1583	23118644	2013-08-22T19:35:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23118644	petertodd	luke-jr	@luke-jr Set a expiry height after they get knocked off the main chain and remove them from the map after n blocks? If n=100 is reached we have bigger problems...
1401	6031225	2012-05-31T09:14:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6031225	Diapolo	sipa	@sipa Yeah that's strange, but it won't compile with that part enabled ...
1401	6032679	2012-05-31T10:36:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6032679	rebroad	Diapolo	@Diapolo Have you got it compiling on Windows recently? I'm getting:  e:/nokiaqtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(bss_sock.o):bss_sock.c:(.text+0x13f): undefined reference to `shutdown@8'  e:/nokiaqtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(bss_sock.o):bss_sock.c:(.text+0x3af): undefined reference to `shutdown@8'  a problem in openssl?
1401	6500666	2012-06-22T05:01:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6500666	Diapolo	mhredmond21	@mhredmond21 It would be good to know what is the best / safest ordering to add libs in the .pro file. I got it working for myself and currently have:  <pre> windows:LIBS += -lshlwapi LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,) LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX windows:LIBS += -lws2_32 -lole32 -loleaut32 -luuid -lgdi32 LIBS += -lboost_system$$BOOST_LIB_SUFFIX -lboost_filesystem$$BOOST_LIB_SUFFIX -lboost_program_options$$BOOST_LIB_SUFFIX -lboost_thread$$BOOST_THREAD_LIB_SUFFIX </pre>  I needed to add -loleaut32, dunno what needed this, could be boost 1.49. And I needed to re-order another one. This compiles just fine, but I'm not that sure about the ordering ...
1401	6533662	2012-06-24T15:21:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533662	Diapolo	mhredmond21	@mhredmond21 Well I don't need to add local paths like you do. Seems like some paths are missing in the %PATH% environment variable or I have the libs and headers in the right place. But I'm glad you got it working.
1401	15634251	2013-03-29T09:42:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15634251	laanwj	Diapolo?	Anyone still planning to update the windows build instructions? @Diapolo?
1385	5899307	2012-05-24T12:53:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5899307	sipa	SergioDemianLerner	@SergioDemianLerner is correct, I believe.
1242	6718459	2012-07-02T20:06:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6718459	Diapolo	rebroad	@rebroad Is this true with a clean data-dir? What are your observations with current Git master?
1242	6733089	2012-07-03T12:36:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6733089	rebroad	Diapolo	@Diapolo This is also a problem with current git master also.  If I delete ~/.bitcoin then the tray icon does appear, but a few seconds after the main window appears (once blocks start downloading).
1242	6733210	2012-07-03T12:43:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6733210	Diapolo	laanwj	Can you post a screenshot that shows the missing menu and tray-icon? Perhaps @laanwj Should take a look at this, I guess he is also using Linux, while I'm on Windows. Hard to debug, as on Windows this is not an issue.
1242	6733709	2012-07-03T13:06:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6733709	rebroad	Diapolo	@Diapolo I don't really understand the reason for the screenshot request, but can provide one if you tell me where to upload it to.
1242	6747841	2012-07-03T22:04:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6747841	rebroad	Diapolo	@Diapolo the only thing that shows is the icon on far left for restoring windows.there are no menus nor a tray icon.
1242	8136908	2012-08-29T18:57:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8136908	laanwj	interfect	@interfect can you try building from source, and see whether it still happens?
1242	8137101	2012-08-29T19:03:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8137101	interfect	interfect	Is there a single, unified page that explains exactly what packages to  install and what commands to run on a stock Ubuntu 12.04 system to build  from source? Because if so, yes I can.    On Wed, Aug 29, 2012 at 1:57 PM, Wladimir J. van der Laan <  notifications@github.com> wrote:    > @interfect <https://github.com/interfect> can you try building from  > source, and see whether it still happens?  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/issues/1242#issuecomment-8136908>.  >  >
1242	17065845	2013-04-26T10:24:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17065845	Diapolo	interfect	@interfect I'm sorry AFAIK Unity / Linux doesn't use Mac stuff ^^.
1242	18191070	2013-05-21T06:14:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18191070	Diapolo	themighty1	@themighty1 Can you try with #2672? What Qt version is Bitcoin-Qt using?
1242	18193785	2013-05-21T07:45:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18193785	themighty1	Diapolo.	@Diapolo. Using latest stable bitcoin-qt, with Qt 4.8.1  Sorry, I cant apply the patch. I switched to gnome since my last post and have not looked back.
1231	5672596	2012-05-12T23:03:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672596	msva	laanwj	not "instead", btw. As I see on [3]  it renamed addres fine, but *also* (not instead) it moved "----> 1" to another one (does it? doesn't you?)  Btw, I remember something like that on very-very-very old bitcoin-qt releases, when it created new addresses every time I tried to rename existing, but than @laanwj fixed this.  So, I guess, it is GUI-related bug (like it was on bitcoin-qt before moving it to main tree).
1231	5990161	2012-05-29T17:33:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5990161	sgaltsev	msva	@msva You are right. What I was trying to say is that expected behavior is that account gets renamed and nothing else. Instead of that account gets renamed AND an old label gets relocated. The code that does it is located in RPC, at function `Value setaccount(const Array& params, bool fHelp)`, so it affects both GUI and daemon, and I saw this code in every incarnation of bitcoin client RPC.  What makes this bug extra annoying is that essentially it makes impossible to get rid of the label once it is in the database, unless you use GUI.  Is it possible to get this addressed anytime soon? I'm so tired of having to recompile client every time a new version comes out.
1231	6305302	2012-06-13T16:05:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6305302	laanwj	msva,	@msva, that bug was related to the "default address" (vchDefault). Indeed, the default address is no longer used or updated when QT_GUI is set.  The problem here is that the "account system" is slightly different from the UI labels. It doesn't allow removing all addresses from an account, which is intended behavior not a bug. We cannot change this as programs might be relying on this.  Maybe there should be a command to delete an account and move all its addresses to the "" label.
1185	5517669	2012-05-04T18:54:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5517669	rebroad	sipa,	@sipa, the commit in question that introduced the code (which I maintain doesn't do what it says it does) is this: https://github.com/bitcoin/bitcoin/commit/0aa89c08ff271f34271e6fd2eb1ef04afdbcab3a
1164	8214218	2012-09-01T16:10:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8214218	gmaxwell	rebroad	@rebroad  You haven't provided enough information to determine the cause of your problem or to reproduce it.  An incorrect balance display won't cause it to produce invalid transactions the only ways I'm aware of to cause that is to run the same wallet on multiple systems or restoring a backup and sending before its caught up with the pre-restore transactions; perhaps you have two issues.
1164	8217373	2012-09-01T22:53:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8217373	rebroad	gmaxwell	@gmaxwell I think it's one cause. i.e. probably caused by running the same wallet on multiple systems, but more than one symptom as a result. Are issues linked to number of causes or number of symptoms? I'd like to think the former, and if so, it's therefore only one issue, certainly one solution, IMHO. The solution I propose is that this can be (and should be) fixed during the -rescan operation, whereby the balance should be corrected based upon the transaction history for the addresses in the wallet. Also, as a matter of course, whenever a transaction is found to be invalid (due to the inputs having already been used), it should be shown as invalid, rather than remain "unconfirmed", IMHO.
1137	6834612	2012-07-08T20:56:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6834612	Diapolo	laanwj	@laanwj I found out something interesting, after upgrading my local setup to a self-compiled Qt 4.8.2 the StandardButtons on message boxes were untranslated again (remember, this did not happen with official Qt 4.8.1).  After a little investigation I found out that in ``%QTDIR%\translations`` there were only *.ts files but no *.qm files (ts = cleartext / qm = binary and after lrelease).  I opened up a Win command-promt and did: ``cd D:\Qt_4.8.2\translations`` ``mingw32-make``  This generates the missing *.qm files and after a re-compilation of Bitcoin-Qt the default buttons were translated. Qt officially only supports the French, German, and Simplified Chinese translation files and all other translations are contributed by third parties, but can you look at the official build process, if the *.qm files are in place before compiling Bitcoin-Qt?
1137	8998648	2012-09-28T23:49:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8998648	Diapolo	TheBlueMatt	There are only 2 reasons left I can think of, why bitcoin-qt shows some Qt default-texts as english.    1. ``%QTDIR%\translations`` is missing some .qm files (I'm not sure how to check this btw.)  2. Problem with old GCC version in Gitian    Perhaps it's a problem with the pull-tester only? @TheBlueMatt Any chance to get my hands on a qt-win32-4.7.4-gitian-r1.zip file from a Gitian build?
1137	12431521	2013-01-18T17:10:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12431521	Diapolo	TheBlueMatt	@TheBlueMatt I'll ask again, as this bug is still presend in latest builds. Could you (or any other dev) give me access to a qt-win32-4.8.3-gitian-r1.zip file created by Gitian?    Option 2, as written above would be to check if in %QTDIR%/translations the .qm files are generated after calling make install.    I checked the Qt makefile, which should do everything needed for Qt internal translations, as make install calls install_subtargets, which includes a call for:  <pre>  sub-translations-install_subtargets-ordered: translations\$(MAKEFILE) sub-tools-install_subtargets-ordered  FORCE   cd translations\ && $(MAKE) -f $(MAKEFILE) install  </pre>    ![missing_translations](https://f.cloud.github.com/assets/1419649/78761/6a622716-6192-11e2-9145-d5d78f5e2f37.png)
1057	5021913	2012-04-09T07:32:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5021913	laanwj	gmaxwell	@gmaxwell also, rand() is not thread-safe according to its man page, using rand_r(*seed) is recommended in that case is as it has explicit state.     If there is no privacy concern here, a simple solution would be using rand_r with the state (just one int) generated at the beginning of the function with GetRandInt().
1034	4959147	2012-04-04T17:52:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4959147	jevonx	gavin	This is the implementation of part 2 of that link, Satoshi's idea, as a default feature.    It would not take much bandwidth. It would probably *save* a lot of bandwidth vs having a lot of extra listening nodes for each merchant or independent service that is trying to listen. Functionally, it would be superior because every node is listening for the benefit of everyone, vs each separate service only having its own separate listeners.    @gavin:  Only one dspend per outpoint can be relayed. Nodes check their STL set of already known double spent outpoints before relaying.  Edit: Also, dspend broadcasts are only generated for double spends of transactions currently in the transaction pool. Not for old transactions already in the block chain.    Old way: Each outpoint can broadcast one spending transaction. A second spend stops relaying when it hits nodes that already have the first.    New way: Each outpoint can broadcast one spending transaction and cause one dspend broadcast. The second spend stops relaying when it hits nodes that already have the first, at which point they start relaying a dspend message.
1005	4809124	2012-03-29T11:23:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4809124	laanwj	diapolo	@diapolo main.cpp: GetWarnings, ProcessAlert
993	4699546	2012-03-26T17:35:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4699546	gavinandresen	laanwj;	Thanks @laanwj; I'll test some more, and if it is a Wx bitcoin remnant I'll have the 0.6 installer remove it, too.
835	18804835	2013-06-02T09:50:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18804835	sipa	BoltBlit	@BoltBlit You did not set rescan=false when importing?
835	18804995	2013-06-02T10:05:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18804995	BoltBlit	sipa	@sipa To clarify: I tried again w/ another key and rescan=true.  After import, the address shows up in the 'Addresses' pane, but not the 'Receive' pane.  After a restart, the address is no longer in the the 'Addresses' pane, but then does show up in the 'Receive' pane.  The behavior is kind of confusing.
763	3576126	2012-01-19T23:07:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3576126	TheBlueMatt	leokury	@leokury not currently possible, maybe file another bug report?
754	8847152	2012-09-25T08:35:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8847152	laanwj	luke-jr	@luke-jr I suppose this can be solved with the new "smart times"?
614	6220041	2012-06-09T14:06:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6220041	Diapolo	laanwj	Is this still present with 0.6.2? -> Yes it is ;).  @laanwj What would be a better suiting wording here?
614	8797486	2012-09-23T11:26:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8797486	Diapolo	petercooperjr	I'm not sure if this is fixed, the current text reads:  <pre> Unconfirmed (2 of 6 confirmations) Mined balanced will be available when it matures in 118 more blocks Mined </pre>  @petercooperjr Is this better now or still problematic?
273	14352582	2013-03-03T19:06:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14352582	gmaxwell	XcaninoX	@XcaninoX  so, you're saying you turned off listening as advised and it's using 70kbytes/sec outbound?
273	14380878	2013-03-04T13:36:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14380878	sipa	cjastram	@cjastram That is actually my point: I think it's better for people who do cannot or don't want to serve historic blocks to not do that at all, and not even advertize on the network that they do. If we enable bandwidth throttling without that, the chance of accidentally hitting a slow node would increase, while if we remove those nodes from the pool altogether, the chance for that decreases.    People fully shutting down nodes because it saturates their data link is of course bad. Throttling or disabling serving would improve that, but you're close to the resources you're willing to spend, perhaps you shouldn't run a full node in the first place.    Just relay of new transactions and blocks is typically quite low bandwidth - it's just when you get hit by a node that is syncing from scratch that you suddenly get an upload burst.     About over-engineering: the ability to run a pruned node is an inevitable evolution somewhere in the future, in my opinion, and it would also imply a solution to your problem anyway.
273	14389691	2013-03-04T16:30:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14389691	sipa	jgarzik	@jgarzik My point is that we're currently better off with less serving nodes, if that means those nodes are faster. Once we have headers-first, and parallel chain fetching, things are different, and probably anyone willing to contribute a bit of upload is useful.
273	14491575	2013-03-06T10:06:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14491575	gmaxwell	slothbag	@slothbag  Have you disabled listening?
273	14491857	2013-03-06T10:13:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14491857	slothbag	slothbag	No I haven't. I actually would like to contribute as a full listening node.  If I'm gonna disable listening then i might as well not bother and just let  it sync and then shut it down.    On Wednesday, March 6, 2013, Gregory Maxwell wrote:    > @slothbag <https://github.com/slothbag> Have you disabled listening?  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/issues/273#issuecomment-14491575>  > .  >
273	14492703	2013-03-06T10:36:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14492703	gmaxwell	slothbag	@slothbag As a non-listening node you are still a contributor to the network validating and forwarding transactions and new blocks, preventing partitioning... but you won't use much bandwidth.   A rate limit while serving historic blocks would be very damaging to the network right now, it is actually better that you do not run a node than serve historic blocks with a rate limit. ... but better still to run without listening.
273	16202400	2013-04-10T21:09:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16202400	simeonpilgrim	memetica	@memetica I understand your point, but I'm not running the client because I can't afford to have it use all my bandwidth.     Thus is it better to have some nodes on the network be slow or limited upload, or to only have "fast" nodes?    Maybe I shouldn't be running the client. When I was in the USA we had unlimited bandwidth so the load was meaningless. But out in the "rest of the world" bandwidth is not free, and if I don't have the ability to limit my exposure, I'm not prepared to run the client. And I'm quite sure the idea is to not have all the "fast" servers in a few countries, as that makes the network weaker.
273	16257414	2013-04-11T19:56:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16257414	sipa	soulhunter	@soulhunter There seems to be a bit of confusion here.    Of course we need many nodes if we want a decentralized system. But we mainly want many nodes that validate - Bitcoin's primary advantage over other currencies (in my opinion) is that I don't need to trust anyone to know nobody is cheating. If it's easier to run such a node, the less people will have not to do so.    However, to bootstrap a new node, it needs to be shown the history of the current state, so it can independently also assess that nothing in the past was fraudulent. Thus, we need a way of feeding them this history, and it's provided by other nodes in the network that also at some had to download that history anyway. Ideally, we also have as many of these as possible. But reality is not perfect. Not everyone wants to sacrifice their upstream for doing this, while others have plenty of upstream to spare. And, with the current buggy implementation, if you're accidentally hitting a slow peer to download from, you'll have a slow download. We don't have a mechanism to search for good peers or parallellize the download. Thus, as long as the sync mechanism is not improved, yes everyone is better off with few faster uploaders than many slower ones. Note that this is just about serving historic blocks to others - you can perfectly validate all blocks and transactions, and participate otherwise in the network without providing that service.
273	16271623	2013-04-12T01:34:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16271623	gmaxwell	cjastram	@cjastram I'm not sure if you're understanding correctly. If you are you're using a very weird definition of peer to peer. The blocks are downloaded from a random peer, but they're currently all downloaded from one peer.  (because the way the process works is basically a "tell me what I don't have" rather than a "here is what I'm missing").    And yes, absolutely this needs to be improved and that is why you have Pieter and I saying that while we support having all kinds of knobs to control resource usage, the fetching behavior needs to change first.
273	16272225	2013-04-12T01:58:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16272225	cjastram	gmaxwell	@gmaxwell I see, I guess I did read that correctly.  Is there some way to add that issue as a block for this issue, so it is more clear that the other must be done first?
273	17378012	2013-05-03T04:20:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17378012	gmaxwell	soundasleep	@soundasleep  Have you turned off listening for incoming connections?  If not, that should enable you to run it with less impact until there are other facilities available.
273	17378253	2013-05-03T04:35:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17378253	soundasleep	gmaxwell	@gmaxwell from what I understand that will just reduce the likelihood of my connection being saturated, and with only 0.8 Mbps upload (which is poorly shaped, poorly provisioned and throttled as well) I doubt it will solve anything since one peer could easily saturate that. I'll give it a go but I still can't run the client fulltime.
273	17378375	2013-05-03T04:42:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17378375	gmaxwell	XcaninoX	@XcaninoX  your response is confused and insanely disrespectful.  I am not your slave.  Having more options for this in the future is good, and planned, as has been explained over and over again but it is not trivial to implement and so it will wait for someone who has the time to work on it.      @soulhunter almost all the bandwidth is used by feeding the historical data to newly started nodes. Thus the advice to disable listening if you're bandwidth constrained so that you won't do this. Without feeding new nodes the maximum average utilization is on the order of 100kbit/sec or so.
273	17378375	2013-05-03T04:42:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17378375	gmaxwell	soulhunter	@XcaninoX  your response is confused and insanely disrespectful.  I am not your slave.  Having more options for this in the future is good, and planned, as has been explained over and over again but it is not trivial to implement and so it will wait for someone who has the time to work on it.      @soulhunter almost all the bandwidth is used by feeding the historical data to newly started nodes. Thus the advice to disable listening if you're bandwidth constrained so that you won't do this. Without feeding new nodes the maximum average utilization is on the order of 100kbit/sec or so.
273	17378698	2013-05-03T05:02:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17378698	XcaninoX	gmaxwell	@gmaxwell I'm sorry if i insulted you by any means, it definitely wasn't nor is my intention, tho i never really saw nor treated you as my slave, i apologize if you thought so.. My opinion regarding this issue stands, to be more clear, I am only expressing my points of view, just saying what it is in my mind, sharing how i see things are right now and how i think they should be instead, just putting the cards on the table and discussing them, that's it.
273	17379046	2013-05-03T05:21:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17379046	gmaxwell	XcaninoX	@XcaninoX OKAY.  I don't know what more needs to be addressed basically everyone agrees that there should be better resource controls. But agreeing that they should be there doesn't make them happen instantly.
273	17394664	2013-05-03T13:44:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17394664	soulhunter	soulhunter	On 03/05/13 00:13, Gregory Maxwell wrote: > > @soulhunter <https://github.com/soulhunter> almost all the bandwidth  > is used by feeding the historical data to newly started nodes. Thus  > the advice to disable listening if you're bandwidth constrained so  > that you won't do this. Without feeding new nodes the maximum average  > utilization is on the order of 100kbit/sec or so. >  Yes, but still feeding historical data is necessary, because otherwise  how would new nodes be added? (this is part of the reason why I'm  running a client on a server, to keep it up 24/7 and help the network).   Also, disabling "incoming" doesn't magically fix that, because you can  still get into an incomplete node via an outgoing connection (although  the probability gets greatly reduced).  Anyway, this far, the amount of  BW it has eaten is not *that* huge (just "spiky").  I'll keep it running  for a few more weeks and lets see (it looks like it will be using  ~500GB/mo, I can afford that, for now).  Why not implement something simple?  1. Add basic upload BW limit option (there are several ways of doing  this, I'll not elaborate now). 2. When a client is downloading, and has more than 1 peer, it should  download from a given peer for N seconds (say: N=300), and then move to  the next one in a round-robin (or even random) schema.  This way a given  client will not be "stuck" on a single slow peer, but will likely move  from fast to slow peers while it downloads, and spread the download load.  What do you think?  Ildefonso.
273	17725672	2013-05-10T15:08:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17725672	Rooke	jgarzik	If one imagines the blockchain as a 7GB+ torrent file, is there anything stopping us from using bittorrent architecture ideas to bootstrap clients? @jgarzik already implemented this idea independent of the client [over here](https://bitcointalk.org/index.php?topic=145386.0). I'm guessing that bloating the client by linking to libtransmission or its ilk is not acceptable (or would it be?). It might not be secure either. It probably does solve several problems associated with bandwidth and data cap management.     Perhaps as an independent experiment someone (I?) should try implementing a patch to respond only to historical data requests beyond a certain date or block number. I'm guessing most peers are either totally out of date (requiring the entire history) or else only a week or two out of date. I'm absolutely making this up, so I could be grossly wrong, but it seems like a reasonable guess. Assuming this is true, most peers could be served by setting a date filter a couple weeks in the past, and require brand new peers to resort to Jeff Garzik's torrent or whatever other mechanism might be available. It's not helpful to new clients, but it might easy bandwidth use.
211	17040276	2013-04-25T21:04:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17040276	APerson241	sipa	@sipa That would be a good idea.
48	28998964	2013-11-21T16:28:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28998964	Diapolo	sipa	@sipa Why not peridoically re-check (local) IPs or query via UPnP?
3264	28566901	2013-11-15T12:55:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566901	laanwj	thebluematt?	http://jenkins.bluematt.me/pull-tester/415b30e602502842caf640b220c148929f67b697/test.log    Strange. Seems like the block chain handling verification in the pulltester is failing, but I don't see how any of the changes here could cause that. Maybe something wrong with the tester. @thebluematt?
3257	28615671	2013-11-16T00:58:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28615671	Diapolo	laanwj	@laanwj Can you re-merge this, sorry for the confusion. Ping :).
3253	28551459	2013-11-15T07:18:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28551459	luke-jr	laanwj	Watch-only, as it currently is implemented, is not fit for merging ever... I agree with @laanwj , let's get this in now.
3253	28592467	2013-11-15T18:37:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28592467	kuzetsa	cozz	@cozz Thanks for all the work on this. I've been following this ever since I first heard about it.
3253	28622605	2013-11-16T08:54:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28622605	laanwj	sipa	Thanks @sipa  GUI can always be improved (but it works and is pretty nice already), it's mostly the core changes that need to be fool proof.  Going to merge this now, license headers can be added in a seperate pull.
3245	28393994	2013-11-13T13:32:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28393994	laanwj	diapolo	@diapolo Can you please check if the same happens on windows7/8 whatever you're running, I only have XP VMs
3244	28390939	2013-11-13T12:37:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28390939	brandondahler	laanwj	@laanwj continuing dicussion about using iostreams, would there be any known cross-compatibility issues with the switch?
3244	28391736	2013-11-13T12:53:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28391736	laanwj	brandondahler	@brandondahler This should be safe, and is only a very small change. As it works with the ancient mingw that pulltester uses (and on windows XP, which is the minimum Windows version that we support), it certainly works with latter ones.    A later patch could switch to using boost::format and/or iostreams, but that would be a huge patch and touch every file and function in the core (breaking all other pull requests to boot!). So I'd prefer to leave it at this for now and focus on more important issues.
3244	28406047	2013-11-13T15:53:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28406047	laanwj	Diapolo	@Diapolo but does the resulting bitcointest work?    I guess the reason that you get warnings is that the ATTR_WARN has to be changed to use C99 conventions too on WIN32:        #define ATTR_WARN_PRINTF(X,Y) __attribute__((format(printf,X,Y)))    Can you try changing it to?        #define ATTR_WARN_PRINTF(X,Y) __attribute__((format(gnu_printf,X,Y)))    Edit: already pushed this, works on other OSes too, yippie, no need for win32-specific exception
3238	28273257	2013-11-12T07:18:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28273257	Diapolo	TheBlueMatt	@TheBlueMatt Can you take a look?
3237	28274159	2013-11-12T07:42:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274159	laanwj	diapolo	@diapolo If I understand this correctly you're giving yourself too little credit. This does not only silence warnings, but it *fixes printf format strings throughout the source code* for Windows builds.    ACK in any case
3237	28287549	2013-11-12T11:55:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28287549	laanwj	diapolo	@diapolo Can you try removing the inttypes.h include completely on WIN32? I think it's only used for PRId64 (and friends) at this point and we shouldn't use C99 headers on WIN32.
3237	28364678	2013-11-13T04:55:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28364678	brandondahler	Diapolo	@Diapolo this only coincidentally fixes most instances of the warning because util.h is depended on by almost every file (indirectly at least). The inttypes.h include is spread across all of the files that use PRI[xdu]64 directly.    I would rather spend some time getting rid of all of the *printf functions and replace them with [i,o][,f,string]streams where appropriate.  Once that is done, there will be no dependence on inttypes.h anywhere.
3237	28372327	2013-11-13T07:26:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28372327	laanwj	brandondahler	It is quite urgent to fix this because it breaks strprintf on Windows XP and earlier (see http://sourceforge.net/apps/trac/mingw-w64/wiki/gnu%20printf)    @brandondahler have you checked how much strprintf is used? There's at least 130 direct usages. Converting that all to iostreams would be a massive endavour. Had I realized that inttypes.h was C99 I would not have ACKed your refactor :/ `    So unless we revert all those changes it forces us into the C99 route for the short term even on Windows. Thus to define `__USE_MINGW_ANSI_STDIO` and use the mingw C99 equivalent functions. I'd rather not have because this burns all the bridges to MSVC support, but no one cared about that anyway so it's not much of a loss.    *In the longer term* `boost::format` is a typesafe printf-backward-compatible function that natively uses std::strings, so I think that would be the way to go to replace strprintf. The syntax is different though (http://www.boost.org/doc/libs/1_55_0/libs/format/doc/format.html) so this still implies quite a lot of work.
3236	28234195	2013-11-11T20:10:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28234195	Diapolo	sipa	@sipa These here... sorry got kicked from IRC ^^.
3236	28274401	2013-11-12T07:49:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274401	laanwj	sipa	@sipa Blame Microsoft for using different format strings in the first place instead of simply the C99 format characters, in which case we wouldn't need the macros at all.    It's even worse: MSVC doesn't define those macros, and IIRC it doesn't have inttypes.h either as that's C99 and they still refuse to support that in their shitty compiler.    Though agreed in this specific case it's a bug in MinGW, as they provide the wrong values for the macros. @diapolo If you can confirm that inttypes.h comes with MinGW can you also file this bug upstream? It appears their bug tracker is http://sourceforge.net/p/mingw-w64/bugs/
3236	28274401	2013-11-12T07:49:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274401	laanwj	diapolo	@sipa Blame Microsoft for using different format strings in the first place instead of simply the C99 format characters, in which case we wouldn't need the macros at all.    It's even worse: MSVC doesn't define those macros, and IIRC it doesn't have inttypes.h either as that's C99 and they still refuse to support that in their shitty compiler.    Though agreed in this specific case it's a bug in MinGW, as they provide the wrong values for the macros. @diapolo If you can confirm that inttypes.h comes with MinGW can you also file this bug upstream? It appears their bug tracker is http://sourceforge.net/p/mingw-w64/bugs/
3236	28275258	2013-11-12T08:10:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28275258	Diapolo	laanwj	@laanwj Done, see https://sourceforge.net/p/mingw-w64/bugs/360/
3236	28281982	2013-11-12T10:15:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28281982	Diapolo	laanwj	@laanwj Can you please take a look at the posted answer from Jonathan Yong in the above bug report.
3234	28274932	2013-11-12T08:03:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274932	super3	laanwj	@laanwj Noted. Will take a look at that when I throw in my bitrpc changes.
3234	28577296	2013-11-15T15:33:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577296	super3	laanwj	@laanwj Fixed. Have explicit instructions to use bitrpc.
3231	28178125	2013-11-11T07:02:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28178125	laanwj	diapolo?)	ACK    Edit: not sure either whether the instructions for (for example) Windows are correct (can you comment @diapolo?) but it's more useful than what there is now.
3199	28131884	2013-11-09T17:17:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28131884	sipa	gavinandresen	@gavinandresen Nice catch, done.
3189	27411155	2013-10-30T16:54:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27411155	Diapolo	laanwj	@laanwj So, time for review ;).
3188	27644136	2013-11-03T12:58:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27644136	sipa	mikehearn	Agree with @mikehearn here.
3185	27530058	2013-10-31T21:22:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27530058	gavinandresen	petertodd	@petertodd: once an implementation is mature, I expect it would do nothing in response to a block rejection message, because false-positives (attackers being annoying) will be more common than true positives.    While an implementation is being developed, I expect the developers will investigate every rejection message.    I thought I was pretty clear in the gist that is the purpose of this message:    "In short, giving peers feedback about why their blocks or transactions are dropped or why they are being banned should help interoperability between different implementations"
3185	27572075	2013-11-01T15:07:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27572075	petertodd	gavinandresen	@gavinandresen Right, so you're basically saying block rejection messages could be useful for an alt-implementation that's being used for mining. We know that the state of computer science isn't close to the point where we can do that safely; I personally a half-dozen forking bugs across a few alt-implementations the other week after an hour or two of work spent auditing them. We don't want to encourage that, and giving them handy rejection messages does.    When it comes to blocks, the only useful feedback you can give them is "stop doing that". We don't need rejection messages for that; blocks get orphaned says that just fine already.
3185	27572266	2013-11-01T15:09:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27572266	petertodd	jgarzik	@jgarzik Looks to me like you could dump a 32MiB rejection message into your remotes logs, and what's worse is that I don't see anything stopping you from making fake logs by putting newlines in that rejection message. Ugh.
3185	27572417	2013-11-01T15:11:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27572417	mikehearn	jgarzik	@jgarzik It's not a dodge. You can fill up the logs just by connecting repeatedly as well, or sending messages that cause a Misbehaving(0) to be hit, or lots of other things. That's just not something that's currently in our threat model. If you want to strengthen the bitcoind threat model to include "attacker filling up logs" then go ahead and do that on a new set of changes. It's just irrelevant to this change. But I'd suggest working on the more problematic DoS attacks first.    Being able to make fake logs is perhaps more of an issue, but that can be resolved just by forbidding newline characters (or heck, spaces) in the messages.
3185	27573153	2013-11-01T15:21:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27573153	petertodd	mikehearn	@mikehearn @gavinandresen Should be forbidding anything non-ascii-standard, newline and carriage return, and limit messages to, say, 256 characters. (we did something similar with alert messages right?)
3185	27573153	2013-11-01T15:21:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27573153	petertodd	gavinandresen	@mikehearn @gavinandresen Should be forbidding anything non-ascii-standard, newline and carriage return, and limit messages to, say, 256 characters. (we did something similar with alert messages right?)
3185	27589382	2013-11-01T18:34:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27589382	gavinandresen	jgarzik	@jgarzik @petertodd : Reject messages are only logged if you are running -debug=net  (or -debug which means "everything"). I am assuming that you will only run -debug=net when you are, you know, debugging, and probably controlling who you are connecting to.    I'll add a "print out only the first 111 bytes", that should be sufficient belt-and-suspenders.
3185	27589382	2013-11-01T18:34:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27589382	gavinandresen	petertodd	@jgarzik @petertodd : Reject messages are only logged if you are running -debug=net  (or -debug which means "everything"). I am assuming that you will only run -debug=net when you are, you know, debugging, and probably controlling who you are connecting to.    I'll add a "print out only the first 111 bytes", that should be sufficient belt-and-suspenders.
3185	27590628	2013-11-01T18:47:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27590628	petertodd	gavinandresen	@gavinandresen I run all my nodes with -debug=net all the time so that if something odd happens with the network  (e.g. the chain fork) I can debug it; I've got stacks of disk space and io bandwidth. Filtering out garbage, especially newlines, is an absolute must.    Also, still NACK on block messages.
3185	27591220	2013-11-01T18:53:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27591220	gavinandresen	petertodd	@petertodd:  duly noted.    Everybody else:  any objections?  If pull tester is happy, I'm going to pull.
3185	27594574	2013-11-01T19:35:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27594574	gavinandresen	gmaxwell	@gmaxwell : good point RE: -printtoconsole.    Two commits now-- the first refactors the code we have in alert for sanitizing a string into a util.h SanitizeString method. Please don't suggest super-optimizing it with a lookup table, this is not performance-critical code.    The second limits the text printed to debug.log if -debug or -debug=net to 111 safe characters.    @petertodd : I'd get less annoyed if you made helpful observations like "don't we do something like that processing alerts..." up front. Maybe it is just me, but I constantly get the feeling you are trying to torpedo other people's ideas instead of trying to work together to be helpful.
3185	27594574	2013-11-01T19:35:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27594574	gavinandresen	petertodd	@gmaxwell : good point RE: -printtoconsole.    Two commits now-- the first refactors the code we have in alert for sanitizing a string into a util.h SanitizeString method. Please don't suggest super-optimizing it with a lookup table, this is not performance-critical code.    The second limits the text printed to debug.log if -debug or -debug=net to 111 safe characters.    @petertodd : I'd get less annoyed if you made helpful observations like "don't we do something like that processing alerts..." up front. Maybe it is just me, but I constantly get the feeling you are trying to torpedo other people's ideas instead of trying to work together to be helpful.
3185	27594805	2013-11-01T19:38:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27594805	petertodd	gavinandresen	@gavinandresen I hadn't read the code until today.    Also, limit the string to 111 characters first, then sanitize it.
3185	27597490	2013-11-01T20:16:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27597490	gavinandresen	jgarzik	@jgarzik @sipa : I think I've addressed all your concerns, I'd really like to move on to bigger and better things (almost have a relay-first-doublespend pull ready), can I get "good enough to pull" ACKs ?
3185	27597490	2013-11-01T20:16:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27597490	gavinandresen	sipa	@jgarzik @sipa : I think I've addressed all your concerns, I'd really like to move on to bigger and better things (almost have a relay-first-doublespend pull ready), can I get "good enough to pull" ACKs ?
3185	27679329	2013-11-04T11:39:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27679329	Diapolo	laanwj	@laanwj I thought the same, many strings seem just to be small modifications and tend to be dups even in some cases.
3185	28178040	2013-11-11T06:58:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28178040	laanwj	gavinandresen	@gavinandresen right, if it were translated messages it'd be different
3184	27369520	2013-10-30T07:22:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27369520	laanwj	sje1	@sje1 what problem do you have building head on centos 5?
3184	28182266	2013-11-11T09:01:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28182266	laanwj	sje1	@sje1 any luck yet?    If not, mind if I take over this pull request and get it merged before other RPC changes?
3184	28560832	2013-11-15T10:46:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28560832	sje1	laanwj	@laanwj thanks for taking over, i haven't figured out how to build yet :)
3180	27665608	2013-11-04T05:52:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27665608	gavinandresen	gmaxwell	Tested on OSX, behaves properly.    Message-handling should be eventually be reworked to use boost:asio (never sleep, be I/O event driven as @gmaxwell suggests) and to use some sort of active queue management to mitigate denial-of-service attacks.    But this code is better than what we've got, so I am going to merge.
3179	27372314	2013-10-30T08:32:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27372314	Diapolo	gavinandresen	@gavinandresen @laanwj See, the problem is, if I supply an invalid address in an URI, but have a running Bitcoin-Qt instance a new one is started, which won't work, because there is one running already ^^. This patch tries to deliver the faulty bitcoin: URI and THEN displays a nice warning message.
3179	27372314	2013-10-30T08:32:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27372314	Diapolo	laanwj	@gavinandresen @laanwj See, the problem is, if I supply an invalid address in an URI, but have a running Bitcoin-Qt instance a new one is started, which won't work, because there is one running already ^^. This patch tries to deliver the faulty bitcoin: URI and THEN displays a nice warning message.
3179	27379278	2013-10-30T10:45:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27379278	Diapolo	laanwj	@laanwj Tell me, is it easier/better UX wise to (try to) send an invalid URI to a running server and get a nice error message or show a saved error that the URI could not be parsed (via QMessageBox in init.cpp) and then another error, which tells that you already have a running instance, because when ipcSendCommandLine() fails we try to start a new instance (which also is not recommended to let an instance start by clicking an URI, because of missing command-line switches ^^).
3176	27206636	2013-10-28T12:20:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27206636	Diapolo	TheBlueMatt,	Indeed @TheBlueMatt, can you take a look?
3176	27233352	2013-10-28T17:17:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27233352	laanwj	jgarzik	@jgarzik agreed, though this has the advantage that it (indirectly) compares the valid status of the key, which was not considered before.     And in any case this is a function that's not used at all so it's not exactly performance critical, could even argue for removing it.
3176	27358038	2013-10-30T01:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27358038	gavinandresen	jgarzik,	Agree with @jgarzik, remove the dead code entirely, don't try to fix it.
3173	27266317	2013-10-28T23:20:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27266317	gavinandresen	Diapolo's	Added a comment to make it clear the -*messagestest options are not documented on purpose, since they are for implementors, not end-users.    I do think this should be a built-in run-time feature, it should be very helpful to re-implementors who are likely to be programming in a different language and might not want to bother setting up a dev environment to build themselves.    Tweaked with @Diapolo's suggestion to use GetArg instead of atoi (made it default to 1-of-10 messages fuzzed because that seems about right).    @petertodd: please file a bug or send an email to bitcoin-security@lists.sourceforge.net if you found a bug or a vulnerability.
3173	27266317	2013-10-28T23:20:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27266317	gavinandresen	petertodd	Added a comment to make it clear the -*messagestest options are not documented on purpose, since they are for implementors, not end-users.    I do think this should be a built-in run-time feature, it should be very helpful to re-implementors who are likely to be programming in a different language and might not want to bother setting up a dev environment to build themselves.    Tweaked with @Diapolo's suggestion to use GetArg instead of atoi (made it default to 1-of-10 messages fuzzed because that seems about right).    @petertodd: please file a bug or send an email to bitcoin-security@lists.sourceforge.net if you found a bug or a vulnerability.
3173	27367469	2013-10-30T06:15:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27367469	petertodd	gavinandresen	@gavinandresen Been running this for about a day with the crash fix and -fuzzmessagestest=100 No problems found.
3163	27156326	2013-10-26T21:35:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27156326	sipa	gmaxwell	@gmaxwell PullTester doesn't seem to be running the comparison tool anymore.
3163	27188535	2013-10-28T04:09:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27188535	gmaxwell	petertodd	@petertodd not odd at all, the reorg test is memory limited and only goes as far back as the dbcache size allows. Effectively the checklevel is lower for blocks further back than that.
3163	27213186	2013-10-28T13:57:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27213186	sipa	petertodd	@petertodd An empty CCoins cannot even be serialized - there is no storage format that corresponds to. Enough as a guarantee that it doesn't occur in the database? :)
3163	27214065	2013-10-28T14:08:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27214065	petertodd	sipa	@sipa That's a pretty good guarantee!    ACK
3160	27178253	2013-10-27T20:22:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27178253	Diapolo	laanwj	@laanwj This one should be save to merge, no "weird" changes to signals and slots :-D.
3156	27144777	2013-10-26T11:51:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27144777	fanquake	Diapolo	@Diapolo It's a know issue http://bitcoinstats.com/irc/bitcoin-dev/logs/2013/10/24#l1382614764    See #3143
3154	27145198	2013-10-26T12:24:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27145198	jgarzik	sipa	@sipa +1
3154	27184461	2013-10-28T01:07:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27184461	gavinandresen	sipa	@sipa : good idea.
3154	27189086	2013-10-28T04:37:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27189086	petertodd	sipa	@sipa Agreed.    FWIW I wound up implementing a CTxMempool style thing myself when I was looking at doing a child-pays-for-parent mempool, so I think that's the right general direction to go in.
3154	27356567	2013-10-30T00:35:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27356567	gavinandresen	sipa's	Rebased and updated as per @sipa's suggestions.    @jgarzik: locking has changed, but should be safer than before because there are many fewer cases of "reach inside and LOCK(mempool.cs)".  I'd like to make the mempool critical section private, but I think that should be done in a future refactor (we will probably need a "give me a snapshot copy of the memory pool"; but that should wait until after implementing a memory-limited mempool, I think).
3154	27356567	2013-10-30T00:35:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27356567	gavinandresen	jgarzik	Rebased and updated as per @sipa's suggestions.    @jgarzik: locking has changed, but should be safer than before because there are many fewer cases of "reach inside and LOCK(mempool.cs)".  I'd like to make the mempool critical section private, but I think that should be done in a future refactor (we will probably need a "give me a snapshot copy of the memory pool"; but that should wait until after implementing a memory-limited mempool, I think).
3154	27660608	2013-11-04T01:42:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27660608	gavinandresen	sipa	Rebased, and renamed AcceptToMempool to AcceptToMemoryPool for consistency.    @sipa: Moving CCoinsView/etc to core is non-trivial; CBlockIndex (at least) would have to move also. Lets save that for a future even-more-perfect refactor.
3152	27140115	2013-10-26T05:44:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140115	petertodd	gmaxwell	@gmaxwell I have vague memories of S.H.I.E.L.D. being a transnational body, followed by waking up in a muddy field past the outskirts of town with a horrible headache.
3145	27084963	2013-10-25T12:05:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27084963	Diapolo	mikehearn	@mikehearn Agreed, thanks.
3145	27230304	2013-10-28T16:51:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27230304	Diapolo	laanwj	@laanwj A further thing to consider is our baloon pop-up when a transaction is detected. I mainly use 3 addresses I sent coins to when testing a payment request. This is really ugly with the pop-up, as we only show 1 a time, but the 3 are practically created right in a row... any idea here?
3145	27685433	2013-11-04T13:46:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27685433	laanwj	diapolo	@diapolo do you intend to make further changes here or is this ready for merging?
3145	27687040	2013-11-04T14:10:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27687040	Diapolo	laanwj	@laanwj I currently have no working local build environment (tried to upgrade to a newer MinGW version, which caused troubles ^^). I intended to add back the delete button for payment requests, but this can be done in another pull. If there are no show-stoppers or bugs in here this can be merged.    @gavinandresen Can you perhaps check this out and give an ACK?
3145	27687040	2013-11-04T14:10:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27687040	Diapolo	gavinandresen	@laanwj I currently have no working local build environment (tried to upgrade to a newer MinGW version, which caused troubles ^^). I intended to add back the delete button for payment requests, but this can be done in another pull. If there are no show-stoppers or bugs in here this can be merged.    @gavinandresen Can you perhaps check this out and give an ACK?
3144	27083393	2013-10-25T11:33:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27083393	Diapolo	laanwj	@laanwj I upated the pull with your recent suggestion and moved ``handlePaymentRequest()`` main functionality back to BitcoinGUI. Perhaps you can take another look.
3143	27143543	2013-10-26T10:25:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143543	petertodd	sipa	Fixed nits from @sipa
3143	27143675	2013-10-26T10:36:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143675	petertodd	sipa	@sipa Note though I haven't actually changed much at all - all the lines changed are just due to an indent.
3143	27144757	2013-10-26T11:49:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27144757	sipa	petertodd	@petertodd Sure, but it avoids adding the extra loop for detecting the all-prunable case (and the duplicate work that is associated with it)
3143	27153819	2013-10-26T19:32:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153819	sipa	petertodd	@petertodd I sent a simpler pullreq (#3163) that should accomplish the same. Care to test it?
3143	27153924	2013-10-26T19:37:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153924	sipa	Diapolo	@Diapolo A reindex does not fix this (but that will let you temporarily avoid it); using -checklevel=2 is an easier workaround.
3143	27154702	2013-10-26T20:14:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154702	sipa	gmaxwell	@gmaxwell An alternative to reindexing.    In case we need to reorganize away from such a block, there is indeed a problem. Though both this and #3163 should fix it.
3142	26980461	2013-10-24T10:09:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26980461	Kroese	laanwj	@laanwj  With 'originating address' I ment the address(es) used as input. I can see that I send 500 BTC. I can also see the address it went to. But I cannot see the address it was taken from. I understand why this is (because the idea behind the wallet is that you have a single balance), but it makes the history-tab almost useless for me now. I merged many wallets into a single big one, giving every address a label based on the wallet-name it originally belonged to. I can track the history of incoming transactions just fine that way, and showing the inputs in the details dialogue would make that possible for the outgoing ones too.
3142	27170437	2013-10-27T14:46:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27170437	laanwj	Poes	@Poes it tries to show label information for the "input addresses" (see https://github.com/bitcoin/bitcoin/blob/master/src/qt/transactiondesc.cpp#L277). Are you sure these are not change addresses ?
3138	28199604	2013-11-11T13:31:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28199604	super3	laanwj	@laanwj Addressed both your suggestions.
3137	26970586	2013-10-24T07:03:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26970586	Diapolo	laanwj's	Updated: Fixed @laanwj's nits.
3131	26894744	2013-10-23T10:32:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26894744	Diapolo	laanwj	@laanwj Do you have a clue?
3130	26972201	2013-10-24T07:40:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26972201	Diapolo	laanwj	@laanwj That's fine with me... perhaps there are better methods for handling this message, but that's out of the score of this pr.
3130	26993217	2013-10-24T13:46:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26993217	Diapolo	laanwj's	Updated to reflect @laanwj's suggestion:  - add new slot handlePaymentACK() to paymentserver, which handles paymentACK messages (currently we just display them)
3128	26875522	2013-10-23T02:02:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26875522	jgarzik	gavinandresen	@gavinandresen Regardless of map/multimap, I had the same thought.  TX_NULL_DATA can be defined as OP_RETURN, with optional trailing pushdata <= 80 bytes.
3128	26960416	2013-10-24T01:29:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26960416	petertodd	gavinandresen	@gavinandresen Oh, doh, yeah lets just do that + the bugfix and ScriptSigArgsExpected() change I made.
3124	26781276	2013-10-22T07:02:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781276	Diapolo	gavinandresen	@gavinandresen I'm fine with you beeing grumpy, if you are fine with me beeing grumpy on devs that don't care about cleaning up left-over spaces and such (not specific to anyone, just to be sure ^^).
3121	26782232	2013-10-22T07:26:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26782232	Diapolo	theuni	@theuni Can you take a look?
3121	26798910	2013-10-22T12:36:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26798910	laanwj	luke-jr	I suppose this is useful for @luke-jr for his stable branch.    As for the autotools build system this change is not needed. mingwthrd is detected and -D_MT is added:  https://github.com/bitcoin/bitcoin/blob/master/configure.ac#L194
3121	26860427	2013-10-22T22:34:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26860427	theuni	phelixbtc	Note that I could not find any testers for native win32+autotools. @phelixbtc If you'd be willing to be a guinea pig, I'm happy to get it working there.
3121	27179556	2013-10-27T21:16:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27179556	phelixbtc	theuni	@theuni: tried to email you... contact me at blockchained.com    I assume this will not go into 0.8.5 then...
3119	26682122	2013-10-20T20:42:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682122	laanwj	jgarzik	@jgarzik I think he checked that
3116	27088460	2013-10-25T12:50:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27088460	Diapolo	laanwj	@laanwj It would be very nice if you could wait let's say 2 more days for the merge to mature and afterwards create a new master file update :).
3115	26671293	2013-10-20T11:35:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671293	sipa	laanwj	@laanwj The reasoning is that there are callbacks from the node/validation to the wallet; they're really just notifications in general, as the node code shouldn't care about what the wallet does with it (in fact, the signal names shouldn't contain "wallet" even, though I chose not to change them here). As EraseFromWallet was _only_ called as a callback, I just simplified the method here. In the case of AddToWalletIfInvolvingMe (which is called internally inside the wallet as well, with a relevant return code), I added a wrapper to use as signal handler.
3115	26674796	2013-10-20T15:09:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26674796	sipa	laanwj	@laanwj Modified the signal names a bit, and added comments.
3115	27151500	2013-10-26T17:49:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27151500	sipa	gavinandresen	@gavinandresen Test plan:  * Create a transaction in the GUI, and check whether the number of peers that have seen it goes up. This exercises the Inventory signal.    * Leave the client open until it confirms. This exercises the SyncTransaction signal.  * Every at most 30 minutes, ResendWalletTransactions should be called (LogPrintf'ed). This exercises the Broadcast signal.  * Mine a block yourself, and wait until another on top is mined, while leaving the GUI open. The block's payout should appear only when the second block is mined. This exercises the UpdatedTransaction signal.  * After being fully synchronized, wait for a block whose height is a multiple of 144, and forcibly kill the client. At startup, the automatic rescan shouldn't go back beyond that 144-multiple block. This exercises the SetBestChain signal.    * Alternatively, do a -reindex, and wait until a block whose height is a multiple of 20160 is crossed, and do the same kill/restart cycle.
3112	27141218	2013-10-26T07:28:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27141218	gmaxwell	weex	@weex it returns the block as a hex string, if you call it in non-verbose mode, which the script appears to do (I just glanced at it)    Also, I just tested it:    $ python ./linearize.py a.cfg  Wrote block 0  Wrote block 1000  Wrote block 2000  Wrote block 3000
3108	26663267	2013-10-20T02:14:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26663267	Diapolo	laanwj	@laanwj As I'm working on fixing current problems with payment request handling it would be cool to quickly merge this, if ACKed.
3106	26562473	2013-10-17T23:46:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26562473	super3	enmaku	Stolen from the original pull for these files #549 from @enmaku
3105	26537979	2013-10-17T18:48:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26537979	gmaxwell	dooglus	@dooglus  I am confused by this issue.    The sign message dialog in Bitcoin-qt lets you freely type in or paste the address you want to sign with already. There should have been no need to use the console.
3105	26554479	2013-10-17T21:26:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26554479	dooglus	gmaxwell	@gmaxwell That's a good point.  I was thinking I had to use one of the addresses in the 'receive' tab, because that tab's 'sign message' is inactive until I select an address.  But now I see I can also pick 'sign message' from the file menu.
3105	26558425	2013-10-17T22:26:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26558425	dooglus	luke-jr	@luke-jr Signing a message with a change address proves that the signer controls the change address that sent a transaction.  Why would you argue for removing useful functionality?    What does it even mean to say "Signed messages only work for receiving, not for sending"?  Signing a message with an address is unrelated to sending or receiving a transaction.
3105	26576687	2013-10-18T07:29:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26576687	luke-jr	dooglus	@dooglus Signing proves you *receive* at the address. Just because you receive at a given address, does not mean you sent the coins in a later transaction consuming the outputs (and indeed, the contrary is often true). Addresses are only used for receiving, not for sending.    If people need the ability to prove they sent a transaction, some new standard (whereby they sign with a transaction instead of an address) is needed.
3104	26672316	2013-10-20T12:43:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26672316	fanquake	laanwj	@laanwj     Reading from the OpenSSL cipher [docs](https://www.openssl.org/docs/apps/ciphers.html).        If ! is used then the ciphers are permanently deleted from the list. The ciphers deleted can never reappear in the list even if they are explicitly stated.    However, 'AH' isn't listed as one of the permitted [CIPHER_STRINGS](https://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS), could it be a typo for aDH/DH/ADH ?
3100	26837198	2013-10-22T19:48:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26837198	Diapolo	laanwj	@laanwj Is this still the case? AFAIK Gavin recently fixed a RPC shutdown problem related to a NULL pointer.
3100	26903697	2013-10-23T13:20:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26903697	Diapolo	laanwj	@laanwj What is the best way to fix this? Check for ``fServer`` in ``walletpassphrase()``? Are there more RPC commands that fail when ``fServer`` is false?
3099	26524215	2013-10-17T16:29:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26524215	laanwj	mikehearn	@mikehearn Agreed on generating a payment request. That was one of my ideas behind this, but I'll leave implementing that to a later pull.    As for the fields, yes it's not ideal like this. I'd like to make it a text that can be copy/pasted in one go, not multiple fields. And as @Diapolo says there is not really a way to show readonly-ness in Qt, beyond making the field disabled but that's ugly.
3099	26524215	2013-10-17T16:29:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26524215	laanwj	Diapolo	@mikehearn Agreed on generating a payment request. That was one of my ideas behind this, but I'll leave implementing that to a later pull.    As for the fields, yes it's not ideal like this. I'd like to make it a text that can be copy/pasted in one go, not multiple fields. And as @Diapolo says there is not really a way to show readonly-ness in Qt, beyond making the field disabled but that's ugly.
3099	26575517	2013-10-18T06:55:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26575517	laanwj	diapolo	@diapolo I think I'm going to remove the sign/verify message buttons from the address lists. After this, they can be launched from the menu directly more quickly. And confusion such as in #3105 will no longer happen then.    Edit: I also want to make it possible to copy/paste or drag/drop the QR code. Hopefully that's just a matter of enabling the right flags.
3099	26582140	2013-10-18T09:19:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26582140	Diapolo	laanwj	@laanwj I'm fine with removing them.
3099	26611323	2013-10-18T16:49:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26611323	gmaxwell	laanwj	@laanwj Really?   Hm.    I think the thing people will miss is not that, but they'll want a reasonably easy way to get a list of previously used addresses.  E.g. "What address did I just give bob?"     So why not add a request history button/page/tab and then something to click on there to repeat/edit/etc one of the prior ones?    From the UI screenshots its not clear to me what I should do when I want an address to receive an unspecified amount, which is a common thing to do.
3098	26391411	2013-10-16T04:02:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26391411	gavinandresen	jgarzik	ACK; good enough to merge in my opinion, but @jgarzik : any objections to moving linearize tool from misc/ ?
3098	26413712	2013-10-16T12:34:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26413712	jgarzik	gavinandresen	ACK    @gavinandresen: no objections
3092	26333330	2013-10-15T13:23:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26333330	schildbach	laanwj	@laanwj autotools-dev is already installed.
3092	26335754	2013-10-15T13:53:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26335754	laanwj	diapolo	I'll add libprotobuf-dev.    Ok so it seems that @diapolo is right and Qt5 is no longer supported at the moment :(
3092	26340336	2013-10-15T14:44:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26340336	schildbach	laanwj	@laanwj what would be the package for ccache?    I managed to build bitcoin-qt using the instructions. Thanks for your help!
3087	26454237	2013-10-16T20:25:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26454237	sipa	Diapolo	@Diapolo removed the superfluous comment.
3087	27042092	2013-10-24T23:20:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27042092	sipa	gavinandresen	@gavinandresen What is broken?
3084	26322543	2013-10-15T10:04:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26322543	Diapolo	sipa	@sipa Rebased, should be merge-ready.
3083	26370768	2013-10-15T20:47:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26370768	sipa	jgarzik	@jgarzik We should test that, indeed.  @gmaxwell Feel like testing sync by/from a node with this patch? :p
3083	26370768	2013-10-15T20:47:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26370768	sipa	gmaxwell	@jgarzik We should test that, indeed.  @gmaxwell Feel like testing sync by/from a node with this patch? :p
3082	26239184	2013-10-14T07:19:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26239184	laanwj	sipa	Performance wasn't the concern here, just sanity. Why would you need bitcoind on a system that only does requests? And good luck browsing through the bitcoind help message to find options that concern the client. Even as bitcoin developer I needed three reworks to get those right. There is just no excuse in the world to merge the client and server into one executable.    IMO the deprecation time period should be 0.9 to 0.10 or 0.11. Looking at the large time window between major releases, and the carefulness that merchants already have to switch to new major releases, that's enough. In any case that decision is for later, we don't need to make it now.    @sipa shouldn't the ciphers be used for the client as well? As I understand it, with SSL both the client and server have their say in what cipher is used? Or is that only with SSH?
3082	26671252	2013-10-20T11:32:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671252	sipa	gavinandresen	@gavinandresen @jgarzik @gmaxwell Any general opinion about this?    IMHO, the fact that bitcoind is both a client and a server is confusing, and that alone warrants separating them (though certainly not instantly, too much legacy code relies on bitcoind for now).
3082	26671252	2013-10-20T11:32:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671252	sipa	jgarzik	@gavinandresen @jgarzik @gmaxwell Any general opinion about this?    IMHO, the fact that bitcoind is both a client and a server is confusing, and that alone warrants separating them (though certainly not instantly, too much legacy code relies on bitcoind for now).
3082	26671252	2013-10-20T11:32:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671252	sipa	gmaxwell	@gavinandresen @jgarzik @gmaxwell Any general opinion about this?    IMHO, the fact that bitcoind is both a client and a server is confusing, and that alone warrants separating them (though certainly not instantly, too much legacy code relies on bitcoind for now).
3082	26673388	2013-10-20T13:52:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26673388	sipa	laanwj	@laanwj If we ever choose to actually separate the code, there is always the option to make bitcoind exec() bitcoin-cli in case some command is provided still.
3082	26674284	2013-10-20T14:43:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26674284	laanwj	jgarzik	@jgarzik Bitcoin-cli/remote is fine with me, I don't have any opinion on the name.  I still prefer a two-step deprecation process though.    @luke-jr How is this complicating the codebase? If anything, this is the beginning of a clean-up. I did some code movements in the original commit to separate different concerns into different files, which I've left out here for easier review, but they can still be done later.    It needs to be bitcoin specific because of the argument parsing. Only a bitcoin-specific client knows to parse argument 2 of sendtoaddress as a double (for example). Sure, it could be done in a Python script, but that complicates usage on windows or other systems that don't come with Python interpreter by default. And we have the C++ code already...
3082	26674284	2013-10-20T14:43:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26674284	laanwj	luke-jr	@jgarzik Bitcoin-cli/remote is fine with me, I don't have any opinion on the name.  I still prefer a two-step deprecation process though.    @luke-jr How is this complicating the codebase? If anything, this is the beginning of a clean-up. I did some code movements in the original commit to separate different concerns into different files, which I've left out here for easier review, but they can still be done later.    It needs to be bitcoin specific because of the argument parsing. Only a bitcoin-specific client knows to parse argument 2 of sendtoaddress as a double (for example). Sure, it could be done in a Python script, but that complicates usage on windows or other systems that don't come with Python interpreter by default. And we have the C++ code already...
3082	26676366	2013-10-20T16:26:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26676366	super3	sipa	@sipa I like the idea backward compatibility using exec() to call bitcoin-cli. I assume care of course must be taken to prevent malicious injection via Bitcoind.     @jgarzik I agree that it needs to removed, but I'd rather devs have at least one release cycle to use bitcoin-cli and change their core code to match. Then you can remove on ~1.0. Deprecation give devs a fair warning. Removing is just kinda ripping the Bitcoind rug out from under them.
3082	26676366	2013-10-20T16:26:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26676366	super3	jgarzik	@sipa I like the idea backward compatibility using exec() to call bitcoin-cli. I assume care of course must be taken to prevent malicious injection via Bitcoind.     @jgarzik I agree that it needs to removed, but I'd rather devs have at least one release cycle to use bitcoin-cli and change their core code to match. Then you can remove on ~1.0. Deprecation give devs a fair warning. Removing is just kinda ripping the Bitcoind rug out from under them.
3082	26681172	2013-10-20T19:59:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26681172	laanwj	luke-jr	@luke-jr yes, the helpmessage function is complicated somewhat by this, but that's the only one. To make it more readable it could be formatted as a table with a bitfield per option (which client kinds it applies to), if anyone cares enough to do that.    A seperate git repository sounds pointless. It's useful to be able to build everything at once. A different directory within src/ would make sense tho.
3082	26682228	2013-10-20T20:47:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682228	super3	sipa	@sipa That kinda sounds like a fun project for me, after I do a few more documentation sweeps. I can add unicorns as long as you don't mind them being [green](http://gunicorn.org/).
3082	26683496	2013-10-20T21:41:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26683496	super3	sipa	@sipa Which is why I said it would be a fun project. One or two of those features would be really easy to hack together using existing libs.    @wtogami Hmmm. Didn't know that py2exe had that limitation. Perhaps an alternative might provide the needed cross platform distribution. A quick google search reveals [cx_freeze](http://cx-freeze.sourceforge.net/) as a possibility.
3082	26683496	2013-10-20T21:41:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26683496	super3	wtogami	@sipa Which is why I said it would be a fun project. One or two of those features would be really easy to hack together using existing libs.    @wtogami Hmmm. Didn't know that py2exe had that limitation. Perhaps an alternative might provide the needed cross platform distribution. A quick google search reveals [cx_freeze](http://cx-freeze.sourceforge.net/) as a possibility.
3082	26695157	2013-10-21T06:30:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26695157	laanwj	sipa	@sipa I now understand, you're thinking of some kind of interactive client, not so much the rpc client it is now that is used from the shell or shell script. Sure, that'd be a useful project. I played with that idea while making the debug console, but it stayed at that as we don't want a scripting language (js, python) in the main client :-) Let's open a new issue for that.    It'd be a complement to this and not a replacement. For lightweight interaction from shell scripts, a small executable (yes, we'll make it small eventually...) would still be preferable to a py2exe wrapped "monster".    Rebased and renamed to bitcoin-cli.
3080	26329630	2013-10-15T12:26:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26329630	Diapolo	laanwj	@laanwj Could you check= Should be just a bunch of non-controversial changes :).
3079	26118671	2013-10-11T07:16:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26118671	gmaxwell	ThePiachu	@ThePiachu  Are you actually sure that you're restarting it?  What you're describing isn't obviously possible:  Where would it get the other string from?    I would suspect that the issue with your long password was the presence of characters like ?&<># getting munged in the encoding for http. Is this a possibility?
3077	26141505	2013-10-11T14:32:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26141505	jgarzik	sipa	@sipa You've got it.  Any of those suggestions is fine.
3077	26152995	2013-10-11T16:55:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26152995	sipa	jgarzik	@jgarzik Updated the variable name to chainActive.
3072	26153905	2013-10-11T17:08:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26153905	jgarzik	laanwj	@laanwj This seems relevant: http://boost.2283326.n4.nabble.com/boost-asio-UnregisterWaitEx-RegisterWaitForSingleObject-has-not-been-declared-td4633963.html    Review comments:  It would be nice if this were split into smaller chunks.  At a minimum, I would recommend two commits:  * Code movement of existing RPC client code to new .h and .cpp locations.  No external behavior changes.  * The rest of the changes, adding bitcoin-rpc.exe.    Overall the changes look pretty straightforward and correct.
3072	26218472	2013-10-13T14:07:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26218472	sipa	laanwj	@laanwj Agree it's still way too much, and let's merge #3082 first. I was just thinking about modularizing the source code in general :)
3069	25949844	2013-10-09T06:43:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25949844	Diapolo	TheBlueMatt	@TheBlueMatt Can you take a look at the @BitcoinPullTester failure, seems unrelated to my pull.
3069	25949844	2013-10-09T06:43:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25949844	Diapolo	BitcoinPullTester	@TheBlueMatt Can you take a look at the @BitcoinPullTester failure, seems unrelated to my pull.
3069	26032940	2013-10-10T07:02:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26032940	Diapolo	BitcoinPullTester	Is @BitcoinPullTester currently broken again? Would be nice if this (now small ^^) pull can come to an end.
3069	26101328	2013-10-10T23:42:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26101328	gavinandresen	laanwj's	Pull-tester *is* broken, I'm poking at it to figure out why.    RE: coinsSent:  I think @laanwj's intuition is right, adding to the address book should ideally be done as a coinsSent signal handler. I can imagine some future change where we want to add a coinsSent signal handler that does... something... that would like to know if the address we just sent to is in the address book. And the way you've rewritten the code, that potential future programmer will spend a bunch of time in a debugger trying to figure out why their code is broken (it'll be broken because their signal handler will be called BEFORE the address is added to the address book).
3067	26177496	2013-10-11T21:55:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26177496	sipa	gavinandresen	@gavinandresen So what would you like -debug to mean then?
3067	26193843	2013-10-12T08:52:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26193843	gavinandresen	gavinandresen	-debug is the same as -debug= which has empty-string for the category. So Logprintf equals Logprint("",...) etc.    --  Gavin Andresen      On Oct 12, 2013, at 7:55 AM, Pieter Wuille <notifications@github.com> wrote:    > @gavinandresen So what would you like -debug to mean then?  >   >   > Reply to this email directly or view it on GitHub.
3067	26204384	2013-10-12T19:38:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26204384	sipa	laanwj	I agree with @laanwj here - having a "" debug category seems counter-intuitive.
3067	26395016	2013-10-16T06:12:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26395016	Diapolo	sipa	@sipa @laanwj @gavinandresen  I'll summarize, what I think should be default behaviour (I don't say the pull is currently doing this already ^^):    Using ``-debug`` sets fDebug and we display ALL categories (``LogPrint()``).  Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories.    Perhaps we should re-work ``LogPrint()`` to prepend the category in the log-entry, as this will make searching the log MUCH easier!
3067	26395016	2013-10-16T06:12:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26395016	Diapolo	laanwj	@sipa @laanwj @gavinandresen  I'll summarize, what I think should be default behaviour (I don't say the pull is currently doing this already ^^):    Using ``-debug`` sets fDebug and we display ALL categories (``LogPrint()``).  Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories.    Perhaps we should re-work ``LogPrint()`` to prepend the category in the log-entry, as this will make searching the log MUCH easier!
3067	26395016	2013-10-16T06:12:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26395016	Diapolo	gavinandresen	@sipa @laanwj @gavinandresen  I'll summarize, what I think should be default behaviour (I don't say the pull is currently doing this already ^^):    Using ``-debug`` sets fDebug and we display ALL categories (``LogPrint()``).  Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories.    Perhaps we should re-work ``LogPrint()`` to prepend the category in the log-entry, as this will make searching the log MUCH easier!
3067	26400131	2013-10-16T08:19:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26400131	gavinandresen	Diapolo	@Diapolo:  -debug and -debug=  are the same. They both will set mapArgs["-debug"]=std::string("")    Changing that so -debug and -debug= sets mapArgs["-debug"] to two different things is likely to break things in unexpected ways.    EDIT: just realized I'm probably misreading, and you mean -debug being different from -debug=&lt;some_category&gt;.  EDIT2: aha!  Bitten by github removing stuff in &lt;&gt; ....    Ok, I can live with -debug meaning -debug=all.  I'll just set my default to -debug=none to get the default behavior I want.
3067	26403021	2013-10-16T09:12:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26403021	laanwj	gavinandresen	@gavinandresen: when learning a codebase or trying to find a problem in an otherwise unknown codebase I usually find it useful to enable all debug information, to get some idea what it is doing. It's of more limited usability once you have a better idea what you're looking for.
3067	26508301	2013-10-17T14:06:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26508301	Diapolo	sipa	@sipa @laanwj @gavinandresen  Can you take another look?    I added some suggestions from above and as I wrote earlier, this is achieved now:    Using ``-debug`` or ``-debug=1`` sets fDebug and we display ALL categories (all ``LogPrint()``).  Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories (only ``LogPrint(<category>)``).    It would be still fine, if we could add category in front of the log entries e.g. ``[net] blabla happened``.
3067	26508301	2013-10-17T14:06:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26508301	Diapolo	laanwj	@sipa @laanwj @gavinandresen  Can you take another look?    I added some suggestions from above and as I wrote earlier, this is achieved now:    Using ``-debug`` or ``-debug=1`` sets fDebug and we display ALL categories (all ``LogPrint()``).  Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories (only ``LogPrint(<category>)``).    It would be still fine, if we could add category in front of the log entries e.g. ``[net] blabla happened``.
3067	26508301	2013-10-17T14:06:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26508301	Diapolo	gavinandresen	@sipa @laanwj @gavinandresen  Can you take another look?    I added some suggestions from above and as I wrote earlier, this is achieved now:    Using ``-debug`` or ``-debug=1`` sets fDebug and we display ALL categories (all ``LogPrint()``).  Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories (only ``LogPrint(<category>)``).    It would be still fine, if we could add category in front of the log entries e.g. ``[net] blabla happened``.
3067	26508400	2013-10-17T14:07:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26508400	Diapolo	sipa	@sipa Agreed, ``-logtimestamps`` should be default, as it's much more readable IMO.
3067	26781141	2013-10-22T06:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781141	Diapolo	gavinandresen	@gavinandresen @sipa @laanwj  Rebased, fixed a merge-conflict. Can I get some final ACKs or futher comments?
3067	26781141	2013-10-22T06:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781141	Diapolo	sipa	@gavinandresen @sipa @laanwj  Rebased, fixed a merge-conflict. Can I get some final ACKs or futher comments?
3067	26781141	2013-10-22T06:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781141	Diapolo	laanwj	@gavinandresen @sipa @laanwj  Rebased, fixed a merge-conflict. Can I get some final ACKs or futher comments?
3067	26787547	2013-10-22T09:08:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26787547	Diapolo	laanwj	Updated:  - help message  - special-case -debug=0/-nodebug  - replace my checks with generic checks (thanks @laanwj and @gavinandresen)    ``-debug`` overrides ``-debug=<category>`` and ``-debug=0`` or ``-nodebug`` override all others!    I hope this is now just a final review!
3067	26787547	2013-10-22T09:08:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26787547	Diapolo	gavinandresen)	Updated:  - help message  - special-case -debug=0/-nodebug  - replace my checks with generic checks (thanks @laanwj and @gavinandresen)    ``-debug`` overrides ``-debug=<category>`` and ``-debug=0`` or ``-nodebug`` override all others!    I hope this is now just a final review!
3067	27154547	2013-10-26T20:07:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154547	Diapolo	sipa	@sipa I reworked the help-message for -debug once more, it reads now:  bitcoind:  ``Output debugging information for <category>. Output all possible debugging information if <category> is not set. <category> can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net.``    Bitcoin-Qt:  ``Output debugging information for <category>. Output all possible debugging information if <category> is not set. <category> can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net or qt.``
3067	27154768	2013-10-26T20:17:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154768	sipa	Diapolo	@Diapolo It's stil an extremely long line :)
3067	27177300	2013-10-27T19:41:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27177300	Diapolo	sipa	@sipa Like this?  <pre>  Output debugging information for category. Output all possible debugging information if category is not set.  Category can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net.  </pre>    Or feel free to just suggest a string, so we can merge this :).
3067	27377314	2013-10-30T10:10:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27377314	Diapolo	BitcoinPullTester	I hope @BitcoinPullTester is now happy again and @gavinandresen or @sipa can give a final ACK.
3067	27377314	2013-10-30T10:10:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27377314	Diapolo	gavinandresen	I hope @BitcoinPullTester is now happy again and @gavinandresen or @sipa can give a final ACK.
3067	27377314	2013-10-30T10:10:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27377314	Diapolo	sipa	I hope @BitcoinPullTester is now happy again and @gavinandresen or @sipa can give a final ACK.
3061	25880294	2013-10-08T10:51:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25880294	laanwj	lano1106	@lano1106 thanks for trying to help anyway!
3055	26226453	2013-10-13T20:36:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226453	sipa	laanwj	Agree with @laanwj and @wtogami. But perhaps these are more distro conventions than things we should be deciding?
3055	26226453	2013-10-13T20:36:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226453	sipa	wtogami.	Agree with @laanwj and @wtogami. But perhaps these are more distro conventions than things we should be deciding?
3055	26244584	2013-10-14T09:25:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26244584	prusnak	wtogami	@wtogami Distro packaging is of course not reliant on what upstream is willing to include. It's very hard to find upstream that is able to create a valid desktop file (categories are usually the biggest culprit), so distributions keep patching that stuff all the time.    At the same time it is nice not to carry a lot of patches in distribution packages, because it enhances upstream codebase and simplifies maintenance of the packages. That's why I sent this pull request, but feel free to decline it if you see it doesn't fit.
3053	25763926	2013-10-06T07:50:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25763926	laanwj	Diapolo	@Diapolo it would have been even better if the submitter of the pull request cites sources
3053	25766986	2013-10-06T12:02:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25766986	Diapolo	laanwj	@laanwj You are right, perhaps the sources should have been mentioned in the commit-msg also.
3049	25618221	2013-10-03T13:00:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25618221	Diapolo	sipa)	Indeed, the comment is wrong:  https://github.com/bitcoin/bitcoin/blob/master/src/netbase.h#L57    I looked at the code, which seems correct (AND with 0xFE == /7 when I understand it correct @sipa):  https://github.com/bitcoin/bitcoin/blob/master/src/netbase.cpp#L659
3047	25682584	2013-10-04T08:13:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682584	Diapolo	gavinandresen	@gavinandresen Updated and removed the ``else if (howmuch == 0)``. Should be fine now.
3047	25787604	2013-10-07T06:38:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25787604	laanwj	Diapolo	@Diapolo Yes, I'd prefer something like that, as it gives more of a signal to the reader that nDOS is the result of the state.IsInvalid() call. Now they could think 'hey, it's never >0, let's cut that code out!', but never mind this is just bikeshedding...
3038	25317721	2013-09-29T10:11:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25317721	Diapolo	wtogami	@wtogami OT: It has proven to be effective to add small style or spelling fixes to other pulls as otherwise no dev ever ACKs such pulls in a reasonable amount of time.
3038	25317997	2013-09-29T10:32:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25317997	wtogami	Diapolo	@Diapolo Certainly we can come up with a fast track procedure to accept obviously correct style/spelling fixes.  That would be better than the inability to ask people to keep changesets limited to a particular purpose because we don't do so ourselves.
3038	25318048	2013-09-29T10:36:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318048	Diapolo	wtogami	@wtogami I couldn't agree more :).
3038	25320506	2013-09-29T13:40:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320506	sipa	Diapolo	@Diapolo I often ignore Qt-related pull requests, as I'm not interested or familiar with that code; perhaps several others have the same tendency, which results in fewer people looking at your pull requests. Maybe that gives you an impression that they are overlooked.    I'd rather not mix unrelated typo fixes with actually functional commits though. On the other hand, I think that if I see pure comments/typo changes that seem uncontroverial, I just merge them.
3036	25684178	2013-10-04T08:50:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25684178	Diapolo	dsattler	@dsattler Is this still an issue, which version of the client were you using at that time? Can you try with latest 0.8.5?
3036	25792163	2013-10-07T08:32:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25792163	dsattler	Diapolo	@Diapolo I'm running bitcoin-qt.exe Version 0.8.5.0, isn't this the latest version?
3034	25217547	2013-09-27T01:54:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25217547	fanquake	Diapolo	@Diapolo Updated.
3032	25295123	2013-09-28T09:41:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25295123	laanwj	timsk	@timsk looks fine to me, esperanto is at 100% now
3029	25205036	2013-09-26T21:22:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25205036	wtogami	gavinandresen	OFF-TOPIC for this PR but responding anyway.    @gavinandresen Regarding "Ideally, a single 12.04 64-bit VM could compile everything", consensus is that it is infeasible as its built binaries would be incapable of running on RHEL6, a major server platform on which it is quite difficult to build Bitcoin from source.  It would also drop 10.04 which is still supported as a server platform.    The more recent conversation wandered into the desire to have modernized toolchains building to a target old glibc.  If that is the case, then we are better off keeping Linux gitian as-is for 0.9 (as it works just fine right now) and looking at future available options.  The ideal future single VM would cross-compiling everything from a long-term supported distro that maintains modern toolchains for us.  This would allow us to maintain only minimal toolchain additions ourselves, themselves deterministic built on the underlying OS.    On whatever future platform that is chosen we can build deterministic Linux binaries for i686 and x86_64 against a particular target old glibc ABI.  Whenever a mac cross-compile toolchain happens, it can be built and deployed there too.
3029	25300947	2013-09-28T16:14:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25300947	sipa	gavinandresen	@gavinandresen Agree with merging this now, so we don't have to rely on an ancient GCC with limited hardening anymore for Win32, and postponing the discussion about what to do for the linux build environments later?
3024	24920395	2013-09-23T13:43:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24920395	petertodd	mikehearn	@mikehearn I wrote up that proof-of-tx propagation idea we talked about a few weeks ago and posted it to the email list.    Given that fee estimation is still going to result in users getting their transactions stuck with few ways to fix the problem I think we'd be much better off pursuing tx-replacement first rather than easily sybilled fee estimation. Replacement can be implemented in a zero-conf safe way if desired (albeit at the cost of occasionally failing due to a lack of txouts) and would make wallets and other software across the whole Bitcoin ecosystem more resilient to the replacement-related errors that we'd see anyway with memory limited mempools. (never mind people exploiting tx mutability, or CoinJoin, or a zillion other ways)
3024	24947299	2013-09-23T19:30:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24947299	gavinandresen	petertodd	@petertodd:  re: replacement: I haven't seen any reports of people using un-hacked reference code having transactions permanently stuck, so I don't see any need for transaction replacement yet. And this code should be strictly better at getting the fee or priority right the first time than the hard-coded rules we have now.    @mikehearn: a 'txrejected' message when refusing to relay a transaction sounds reasonable to me, although you'll of course have to be careful about peers that lie or peers that send you a flood of 'txrejected' messages.
3024	24947299	2013-09-23T19:30:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24947299	gavinandresen	mikehearn	@petertodd:  re: replacement: I haven't seen any reports of people using un-hacked reference code having transactions permanently stuck, so I don't see any need for transaction replacement yet. And this code should be strictly better at getting the fee or priority right the first time than the hard-coded rules we have now.    @mikehearn: a 'txrejected' message when refusing to relay a transaction sounds reasonable to me, although you'll of course have to be careful about peers that lie or peers that send you a flood of 'txrejected' messages.
3024	24961518	2013-09-23T22:43:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24961518	petertodd	gavinandresen	@gavinandresen I've seen them get stuck for a dozen blocks - pretty poor user experience. No amount of fee estimation can predict the future, IE the network getting backlogged due to a string of bad luck.
3024	24962258	2013-09-23T22:56:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962258	petertodd	sipa	@sipa https://github.com/bitcoin/bitcoin/pull/2596 was going to be able to better handle those cases, although I haven't seen any action on that patch lately.    I think the correct logic is for the wallet to replace any existing transaction it sees with another transparently provided that at least one input is conflicting (making it not possible for both to be mined) and all outputs with scriptPubKey's in the wallet are greater or equal in value. Otherwise continue broadcasting the version we wanted mined.    The actual mempool replacement code I wrote awhile back: if at least one input conflicts, no new inputs are already spent, no output is already spent and new outputs are a superset of the old (txout value may be increased) replace the transaction.
3024	24962795	2013-09-23T23:06:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962795	sipa	luke-jr	@luke-jr That's the reason for suggesting looking at transaction remaining in the memory pool, rather than transactions being accepted.    See it this way: the P2P network is one way to distribute transactions to miners, but we shouldn't assume it's the only one. The memory pool is how we observe this distribution channel specifically. The block chain is the result of all miner's transactions combined.
3024	24963784	2013-09-23T23:25:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24963784	petertodd	sipa	@sipa @luke-jr That's not what this patch implements: https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R19 and https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R340 - tx estimate data is added when a transaction is included in a block. Any miner who is accepting out-of-band payment for transactions previously broadcast will seriously mess up the estimates, driving required fees/priority down and getting users' transactions stuck. (though oddly it seems that tx's with both positive fees and priority are ignored: https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R101 - this ignores data from wallets that don't do priority calculations, probably the majority of transactions)    One really ugly thing about the out-of-band payment case is by driving down apparent fees it wastes network bandwidth relaying transactions that as little as a single miner can profitably mine.    NACK
3024	24963784	2013-09-23T23:25:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24963784	petertodd	luke-jr	@sipa @luke-jr That's not what this patch implements: https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R19 and https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R340 - tx estimate data is added when a transaction is included in a block. Any miner who is accepting out-of-band payment for transactions previously broadcast will seriously mess up the estimates, driving required fees/priority down and getting users' transactions stuck. (though oddly it seems that tx's with both positive fees and priority are ignored: https://github.com/gavinandresen/bitcoin-git/commit/61bd47fa9b495ef99df9c3b995ac067344981b88#L4R101 - this ignores data from wallets that don't do priority calculations, probably the majority of transactions)    One really ugly thing about the out-of-band payment case is by driving down apparent fees it wastes network bandwidth relaying transactions that as little as a single miner can profitably mine.    NACK
3024	24964095	2013-09-23T23:32:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964095	sipa	petertodd	@petertodd Oh, I didn't claim this patch did. Just explaining why I suggested using not-included-transactions (which Gavin mentioned in the pullreq).
3024	24964200	2013-09-23T23:34:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964200	sipa	gavinandresen	@gavinandresen Maybe looking at mined transactions gives a bit better estimation than by looking at those that don't, but if that means a system that is more easily gamed (which is what it seems, to me), that's not necessarily worth it.
3024	24964444	2013-09-23T23:39:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964444	petertodd	sipa	@sipa Oh, sorry. Agreed on disliking easily gamed systems, especially given that we've got some fairly large transaction makers like bc.i who might very well have enough volume to create large amounts of out-of-band payments. (@luke-jr eligius has an agreement with mt. gox or something to mine tx's right?)    Anyway, the tx's getting stuck by accident problem is a good enough reason to do things differently.
3024	24965097	2013-09-23T23:52:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24965097	petertodd	luke-jr	@luke-jr Also come to think of it the estimation code can't handle child-pays-for-parent properly either, particularly cases where one child pays for multiple parents. Similarly it doesn't properly handle anomalies in the average fee-per-kb paid by larger transactions compared to smaller ones, which will be the case given the tendency for wallets to apply minimum fees for small transactions. (a single large transaction has the same statistical sample weight as a single small one)
3024	24966361	2013-09-24T00:21:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24966361	luke-jr	sipa	@sipa On the other hand, only looking at not-included-in-blocks fails to account for better spam filters on miners (for example, many miners filter out DP spam using non-mainline algorithms). So we definitely need to consider both sides of the spectrum.    @petertodd I think you have a good case that we need transaction replacement, but we also need to get away from hard-coded fees too. Until @gavinandresen wrote this, I don't think anyone was actively working on either problem. So this is definitely a step forward - someone just needs to get the other foot to move forward along with it. The current algorithms already don't work nicely with CPFP, so I don't think that should be considered a blocker.
3024	24966361	2013-09-24T00:21:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24966361	luke-jr	petertodd	@sipa On the other hand, only looking at not-included-in-blocks fails to account for better spam filters on miners (for example, many miners filter out DP spam using non-mainline algorithms). So we definitely need to consider both sides of the spectrum.    @petertodd I think you have a good case that we need transaction replacement, but we also need to get away from hard-coded fees too. Until @gavinandresen wrote this, I don't think anyone was actively working on either problem. So this is definitely a step forward - someone just needs to get the other foot to move forward along with it. The current algorithms already don't work nicely with CPFP, so I don't think that should be considered a blocker.
3024	24966361	2013-09-24T00:21:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24966361	luke-jr	gavinandresen	@sipa On the other hand, only looking at not-included-in-blocks fails to account for better spam filters on miners (for example, many miners filter out DP spam using non-mainline algorithms). So we definitely need to consider both sides of the spectrum.    @petertodd I think you have a good case that we need transaction replacement, but we also need to get away from hard-coded fees too. Until @gavinandresen wrote this, I don't think anyone was actively working on either problem. So this is definitely a step forward - someone just needs to get the other foot to move forward along with it. The current algorithms already don't work nicely with CPFP, so I don't think that should be considered a blocker.
3024	24989399	2013-09-24T09:42:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24989399	gavinandresen	petertodd	@petertodd : I am not claiming that this is the perfect solution. I am claiming that it is strictly better than the code that exists in the reference implementation today. You have a habit of claiming that things are "impossible" and simply being wrong (estimating can easily be extended to related-groups-of-transactions instead of single transactions for parent-pays functionality, for example).    RE: off-blockchain side-deals : please tell me more about how those actually work (@luke-jr : what is CPFP????).
3024	25003508	2013-09-24T13:36:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25003508	gmaxwell	mikehearn	@mikehearn "Regular bitcoind nodes know when it's got full because they have the mempool, but other types of wallet don't.", no they don't they don't make use of the knowledge. I suspect it wouldn't be super useful... I've never seen a stuck report that I could attribute to that.    (ah, I was busily typing out saying that I couldn't believe you weren't getting stuck reports But android wallet doesn't support importing keys, does it?  I think a majority of stuck reports I've gotten are not fee related, but are due to things like importing keys from bc.i wallets in an attempt to unstick a transaction there, and only ending up with more things stuck)
3024	25005323	2013-09-24T13:54:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25005323	petertodd	mikehearn	@mikehearn Any users of bitcoinj out there who are often making large (1K+) transactions? Because the default rules are to have a minimum absolute transaction fee most people are paying at least twice the minimum fee/KB, and there's lots of traffic paying absolute minimums. In any case "stuck" is relative: if a transaction won't confirm for a few hours because everything else is paid more fees than me I'd very much call that stuck if I'm trying to buy some Bitcoins in person - that there is no way to set fees in the Android wallet is a complaint I've heard from people doing trades at the local Bitcoin meetup.    How do you feel zero-conf safe version of replacement breaks unconfirmed transactions?    @gavinandresen Rather than trying to make this personal and putting words in my mouth, how about you just respond as to why you think this patch as it stands doesn't have cases where it will get people's transactions stuck due to bad fee estimation? If it does, how are you going to fix that before we merge it?    @luke-jr I wouldn't say the current algorithms don't play nice with CPFP, rather I'd say they don't take advantage of it. The wallet doesn't re-spend unconfirmed transactions other than your own anyway, so the parent tx will always have what the wallet considers sufficient fees.
3024	25005323	2013-09-24T13:54:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25005323	petertodd	gavinandresen	@mikehearn Any users of bitcoinj out there who are often making large (1K+) transactions? Because the default rules are to have a minimum absolute transaction fee most people are paying at least twice the minimum fee/KB, and there's lots of traffic paying absolute minimums. In any case "stuck" is relative: if a transaction won't confirm for a few hours because everything else is paid more fees than me I'd very much call that stuck if I'm trying to buy some Bitcoins in person - that there is no way to set fees in the Android wallet is a complaint I've heard from people doing trades at the local Bitcoin meetup.    How do you feel zero-conf safe version of replacement breaks unconfirmed transactions?    @gavinandresen Rather than trying to make this personal and putting words in my mouth, how about you just respond as to why you think this patch as it stands doesn't have cases where it will get people's transactions stuck due to bad fee estimation? If it does, how are you going to fix that before we merge it?    @luke-jr I wouldn't say the current algorithms don't play nice with CPFP, rather I'd say they don't take advantage of it. The wallet doesn't re-spend unconfirmed transactions other than your own anyway, so the parent tx will always have what the wallet considers sufficient fees.
3024	25005323	2013-09-24T13:54:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25005323	petertodd	luke-jr	@mikehearn Any users of bitcoinj out there who are often making large (1K+) transactions? Because the default rules are to have a minimum absolute transaction fee most people are paying at least twice the minimum fee/KB, and there's lots of traffic paying absolute minimums. In any case "stuck" is relative: if a transaction won't confirm for a few hours because everything else is paid more fees than me I'd very much call that stuck if I'm trying to buy some Bitcoins in person - that there is no way to set fees in the Android wallet is a complaint I've heard from people doing trades at the local Bitcoin meetup.    How do you feel zero-conf safe version of replacement breaks unconfirmed transactions?    @gavinandresen Rather than trying to make this personal and putting words in my mouth, how about you just respond as to why you think this patch as it stands doesn't have cases where it will get people's transactions stuck due to bad fee estimation? If it does, how are you going to fix that before we merge it?    @luke-jr I wouldn't say the current algorithms don't play nice with CPFP, rather I'd say they don't take advantage of it. The wallet doesn't re-spend unconfirmed transactions other than your own anyway, so the parent tx will always have what the wallet considers sufficient fees.
3024	25005800	2013-09-24T13:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25005800	gmaxwell	gavinandresen	@gavinandresen  "Child pays for parent"    @petertodd you sure about that? CPFP means that a block may contain a bunch of too-low-fee transactions which just got accepted because of a high fee parent. This means that CPFP will also distort the metric here.
3024	25005800	2013-09-24T13:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25005800	gmaxwell	petertodd	@gavinandresen  "Child pays for parent"    @petertodd you sure about that? CPFP means that a block may contain a bunch of too-low-fee transactions which just got accepted because of a high fee parent. This means that CPFP will also distort the metric here.
3024	25006014	2013-09-24T14:01:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25006014	petertodd	gmaxwell	@gmaxwell I pointed out that problem above; by "current algorithms" luke and I mean what is in the current version, not this patch.
3024	25042780	2013-09-24T21:09:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25042780	luke-jr	mikehearn	@mikehearn "Stuck" means never confirming, not merely delayed (as is the case with no-fee transactions that don't meet the 27kB limit - eventually, they'll get to be in the highest priority 27 kB!). The delay for no-fee transactions is by-design and intentional. It's fine for mempool-less nodes.    @gavinandresen Off-chain side deals: for example, MtGox publishes a list of their outstanding txids, and Eligius uses the prioritisetransaction RPC call to give them priority over others, including when they might have otherwise failed to meet minimum fee rules.    @petertodd CPFP is ignored by relay nodes already, thus a parent may not get relayed despite having children that make it worth mining.
3024	25042780	2013-09-24T21:09:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25042780	luke-jr	gavinandresen	@mikehearn "Stuck" means never confirming, not merely delayed (as is the case with no-fee transactions that don't meet the 27kB limit - eventually, they'll get to be in the highest priority 27 kB!). The delay for no-fee transactions is by-design and intentional. It's fine for mempool-less nodes.    @gavinandresen Off-chain side deals: for example, MtGox publishes a list of their outstanding txids, and Eligius uses the prioritisetransaction RPC call to give them priority over others, including when they might have otherwise failed to meet minimum fee rules.    @petertodd CPFP is ignored by relay nodes already, thus a parent may not get relayed despite having children that make it worth mining.
3024	25042780	2013-09-24T21:09:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25042780	luke-jr	petertodd	@mikehearn "Stuck" means never confirming, not merely delayed (as is the case with no-fee transactions that don't meet the 27kB limit - eventually, they'll get to be in the highest priority 27 kB!). The delay for no-fee transactions is by-design and intentional. It's fine for mempool-less nodes.    @gavinandresen Off-chain side deals: for example, MtGox publishes a list of their outstanding txids, and Eligius uses the prioritisetransaction RPC call to give them priority over others, including when they might have otherwise failed to meet minimum fee rules.    @petertodd CPFP is ignored by relay nodes already, thus a parent may not get relayed despite having children that make it worth mining.
3024	25047743	2013-09-24T22:25:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25047743	petertodd	luke-jr	@luke-jr You know, given you already do this for MtGox it'd be really useful if Eligius had a program that used the inputs.io API to accept off-chain payments to artificially add priority to a given txid. At the simplest you'd just have to publish an inputs.io account name ("prioritize_tx@eligius.st") and tell people to put the txid in the "notes" field; pass whatever amount they pay as the argument to prioritizetx. The hardest part would probably be that people would want you to implement logic to give people their money back if you don't have the tx and/or it gets mined by another pool.
3024	25949898	2013-10-09T06:44:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25949898	gavinandresen	wtogami	@wtogami: RE: stuck transactions:    Ok, let me see if I can address those concerns.    Before this pull request, clients assume that if a transaction has a fee greater than 0.0001 XBT or a priority greater than 54million then it will be confirmed.    So, before this pull request, if transaction volumes goes up, those assumptions break, and people will see transactions never confirm.    I believe all of the concerns discussed in this pull request fall into the "perfect is the enemy of the good" category, and that is why I claim that this pull request, while not perfect, is much better than the code that exists in the tree today. As block space becomes scarce, the code in this pull request will give a BETTER estimate than the hard-coded rules we have now.    Anybody who commented above: please let me know if I missed some subtle interaction that makes you think that this pull request will be worse than the code in the tree before this pull request.
3024	25961045	2013-10-09T10:31:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25961045	Diapolo	wtogami	@wtogami I agree and I'm sure Gavin and Matt are working on upgrading the @BitcoinPullTester build environment. It should match the one in our release process as close as possible IMHO.
3024	25961045	2013-10-09T10:31:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25961045	Diapolo	BitcoinPullTester	@wtogami I agree and I'm sure Gavin and Matt are working on upgrading the @BitcoinPullTester build environment. It should match the one in our release process as close as possible IMHO.
3024	25961921	2013-10-09T10:48:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25961921	petertodd	gavinandresen	@gavinandresen My point was the mining code still has fixed CTransaction::nMinTxFee and CTransaction::dMinFreePriority logic; the fee estimator will happily estimate fees that are less than those minimums and transactions will get stuck in that case. If you make the fee estimation have a fixed lower bound then you'd have a system that's strictly better than the current one.    Anyway right now there is the opposite problem: I've been testing the code on one of my nodes and right now estimatefees calculates the 1% cut-off used for relaying to be 0.23mBTC/KB, lower than the 0.1mBTC/KB hardcoded default. At initial startup after upgrading or if the mempool data is wiped for any reason estimateFees falls back to the hardcoded values until the estimates get enough data, which would mean that transactions created by the user in that time-frame would have fees so low they wouldn't even get into the mempool and thus would get stuck.    Anyway without the ability to actually change the fee on a transaction after the fact we're always going to run into cases like that - what's your plan to fix this?
3024	25968848	2013-10-09T13:01:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25968848	gavinandresen	petertodd	@petertodd: RE: fixed lower:  that would ruin the entire point, which is to let fees float up or down based on miner behavior.    RE: "we have the opposite problem now" : EXACTLY MY POINT. The hard-coded fees are not high enough to guarantee speedy transaction confirmation.    RE: what to do if a transaction doesn't get relayed/mined:  I like Mike's idea of a "txrejected" message from your peers if they reject your transaction, that is then plumbed up to Do The Right Thing.  The Right Thing is complicated, though-- for example, if the wallet is locked then the wallet code can't just create a higher-fee version of the transaction and try again.  What do you suggest?
3024	25970908	2013-10-09T13:29:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25970908	petertodd	gavinandresen	@gavinandresen Both cases where I show estimatefees being fooled into a too low fee are things that can happen without actual transaction volume pressure, and result in worse outcomes than the current code; add a fixed minimum and estimate fees will never make a worse decision than the current code. Once that's done we can consider merging.    Long term as I said before we need to have the ability to increase the fees on a transaction after the fact - replace-by-fee does that efficiently, and replace-by-fee+txouts are a strict superset maintains the current zero-conf behavior.    Sure, the right thing is a bit complicated, but start moving in that direction now - replacement will break all kinds of really badly written merchant code, but the longer we wait the more of that code will get written. (e.g. BIP70 doesn't make it clear as I suggested before that a payment should be considered valid if a given scriptPubKey:value pair exists, so people will write code that assumes a given txid)    re: txrejected, thoughts on tx propagation proofs? http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02868.html
3023	24888997	2013-09-22T19:43:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24888997	luke-jr	petertodd	@petertodd Nobody has signed git commits in our repos right now...    I agree with the name/email, though I don't think it defines who you are as a person. ;)
3023	24889330	2013-09-22T20:01:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24889330	petertodd	luke-jr	@luke-jr I have: ```git log --show-signature | grep Good\ signature```    Discussed it with michagogo on IRC: we think setting weight=1 is reasonable, and would allow setting "minimumweight=121" to say that a build requires three core devs + 1 additional sig. (or something similar)
3023	24889531	2013-09-22T20:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24889531	Michagogo	gavinandresen	@gavinandresen When you said it should be eleven, was that serious? Was there an actual reason behind that?
3022	24744086	2013-09-19T14:44:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24744086	gmaxwell	Enelar	@Enelar Then you need something other than Bitcoin transactions. They do not contain a from address, as have been extensively explained to you here.
3020	24737164	2013-09-19T13:10:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24737164	Diapolo	sipa	Indeed, perhaps @sipa or @gavinandresen can comment. At least the comments and the change in wallet.cpp seems still be needed :).
3020	24737164	2013-09-19T13:10:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24737164	Diapolo	gavinandresen	Indeed, perhaps @sipa or @gavinandresen can comment. At least the comments and the change in wallet.cpp seems still be needed :).
3020	24797268	2013-09-20T08:51:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24797268	Diapolo	gavinandresen	Reverted the test changes... @gavinandresen I don't want to touch the tests, you are free to remove any output related stuff that shouldn't be in there.
3015	24722392	2013-09-19T07:51:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24722392	Diapolo	theuni	ACK to the Win32 version info change.  @theuni I verified the executable, looks great, thanks.    ![bitcoind](https://f.cloud.github.com/assets/1419649/1171245/4cea8402-2100-11e3-8d56-87c6ef190f4d.png)
3013	24722832	2013-09-19T08:01:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24722832	Diapolo	sipa,	https://github.com/bitcoin/bitcoin/blob/master/src/main.h#L652    Seems he is correct @sipa, can you take a look.
3013	24723980	2013-09-19T08:30:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24723980	p308945	sipa,	May not yet corrected.Now I study bitcoin source code.I hope we can exchange.      ------------------  ------------------  : "Philip Kaufmann";<notifications@github.com>;  : 2013919() 4:01  : "bitcoin/bitcoin"<bitcoin@noreply.github.com>;   : ""<895175589@qq.com>;   : Re: [bitcoin] Im a Chinese .Say sorry that my English is poor. I found a small bug. (#3013)          https://github.com/bitcoin/bitcoin/blob/master/src/main.h#L652     Seems he is correct @sipa, can you take a look.       Reply to this email directly or view it on GitHub.
3008	24921014	2013-09-23T13:52:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24921014	petertodd	mikehearn	@mikehearn Before you try to propose that get some good figures on the marginal cost each KB of transactions costs miners, particularly smaller ones, in terms of increased orphans. I did a rough estimate and came up with IIRC 0.00025 BTC/KB myself.    FWIW that's exactly what I had in mind with my mempool rewrite for the mining code: a simple priority->BTC conversion ratio and a setting for how many BTC worth of free transactions you were willing to donate per block.
3008	24931535	2013-09-23T16:07:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24931535	petertodd	jgarzik	@jgarzik cost-vs-benefit: given how almost all third-party wallets ignore priority in favor of adding minimum fees obviously there isn't much demand for the feature; while that isn't a reason to remove the code immediately, it is a reason to not bother re-implementing it in a rewrite.    @mikehearn If free transaction was such a huge draw wallets would implement them, but they don't bother. Secondly using up coin days is not just as good a method, because owning coins give you a steady supply of new coin days.    It's rather obnoxious that I could, for instance, create a timestamping app that made timestamps for free using whatever high-priority coins you had lying around using a bare/p2sh CHECKMULTISIG txout; individually timestamping every single Bitcoin git commit as they were created would only require a BTC or two.
3008	24931535	2013-09-23T16:07:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24931535	petertodd	mikehearn	@jgarzik cost-vs-benefit: given how almost all third-party wallets ignore priority in favor of adding minimum fees obviously there isn't much demand for the feature; while that isn't a reason to remove the code immediately, it is a reason to not bother re-implementing it in a rewrite.    @mikehearn If free transaction was such a huge draw wallets would implement them, but they don't bother. Secondly using up coin days is not just as good a method, because owning coins give you a steady supply of new coin days.    It's rather obnoxious that I could, for instance, create a timestamping app that made timestamps for free using whatever high-priority coins you had lying around using a bare/p2sh CHECKMULTISIG txout; individually timestamping every single Bitcoin git commit as they were created would only require a BTC or two.
3008	24933321	2013-09-23T16:31:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24933321	gmaxwell	mikehearn	@mikehearn I would agree with what you're actually saying, except I don't see how it wouldn't just result in every block being the maximum size miner's are willing to create. This size is rationally smaller than the size they're willing to create full of free stuff because a lot of free stuff is DOS attack cruft (e.g. the millions of correct horse transactions) or just due to the increased orphaning risk    @jgarzik He's not suggesting we get rid of free transactions, he's suggesting that for the purpose of prioritizing transactions we convert priority into an "equivalent fee" and just have one list and no separate free transaction limit.
3008	24933321	2013-09-23T16:31:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24933321	gmaxwell	jgarzik	@mikehearn I would agree with what you're actually saying, except I don't see how it wouldn't just result in every block being the maximum size miner's are willing to create. This size is rationally smaller than the size they're willing to create full of free stuff because a lot of free stuff is DOS attack cruft (e.g. the millions of correct horse transactions) or just due to the increased orphaning risk    @jgarzik He's not suggesting we get rid of free transactions, he's suggesting that for the purpose of prioritizing transactions we convert priority into an "equivalent fee" and just have one list and no separate free transaction limit.
3008	24935339	2013-09-23T16:59:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24935339	petertodd	jgarzik	@jgarzik Yup. Converting everything to BTC makes things like artificial priority modifications, perhaps due to an out-of-band fee payment promise or just because the tx one of yours, easier to reason about as well.    Anyway essentially all of this stuff is us saying "We know the technical limits are 1MB/10minutes, but we know there isn't actually that much genuine blockchain demand yet so we'd rather set artificial limits so we don't waste our startup capital on spam too soon." Not to mention that we really want people to get used to the idea that transaction have some kind of cost associated with them, however minor, so apps and business plans aren't written with bad assumptions baked in.
3008	25687079	2013-10-04T09:36:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687079	wtogami	cozz	I am in agreement with @cozz in that the network needs a way to smoothly transition into this.
3008	25687577	2013-10-04T09:43:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687577	petertodd	wtogami	@wtogami There are very few >1000byte free transactions being created, and nearly only the Bitcoin reference client creates free transactions; the network doesn't upgrade to new versions overnight giving a transition period anyway.
3008	25690366	2013-10-04T10:43:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25690366	petertodd	wtogami	@wtogami The wallet doesn't use GetMinFee() to determine if nMinTxFee must be paid so it'll continue to create nMinFee-paying transactions when there is a subcent output; see CWallet::CreateTransaction()
3008	25694142	2013-10-04T12:11:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25694142	gavinandresen	cozz	@cozz : good idea.  I updated the first commit with your suggestion, and added comments on two places in the code that can be simplified once the network upgrades.    @petertodd : I think you're confused by the code that avoids creating a free transaction with a change output less than 0.01.  The edge case is a user who creates a high-priority transaction (maybe a 10 BTC, well-aged input) with a sub-CENT output (maybe they're sending 0.001 BTC, so have a 9.999 BTC change output) during the transition period when most of the network hasn't upgraded to 0.9 yet. The first version of this pull would send that without a fee, and their transaction would likely never confirm.
3008	25694142	2013-10-04T12:11:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25694142	gavinandresen	petertodd	@cozz : good idea.  I updated the first commit with your suggestion, and added comments on two places in the code that can be simplified once the network upgrades.    @petertodd : I think you're confused by the code that avoids creating a free transaction with a change output less than 0.01.  The edge case is a user who creates a high-priority transaction (maybe a 10 BTC, well-aged input) with a sub-CENT output (maybe they're sending 0.001 BTC, so have a 9.999 BTC change output) during the transition period when most of the network hasn't upgraded to 0.9 yet. The first version of this pull would send that without a fee, and their transaction would likely never confirm.
3008	25694419	2013-10-04T12:17:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25694419	petertodd	gavinandresen	@gavinandresen Yeah, I think you're correct there, my mistake.
3006	25683961	2013-10-04T08:45:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683961	Diapolo	laanwj	@laanwj This needs your help...
3006	25802085	2013-10-07T11:44:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25802085	laanwj	diapolo	That's a very strange address indeed.  I've done the paymentrequests tests myself and did not encounter this.    @diapolo Can you confirm or deny @luke-jr's suspicion that this is solved with #1850? It could indeed have to do with a non-standard output somehow being converted to an (invalid, unlabaled) address.
3006	25802085	2013-10-07T11:44:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25802085	laanwj	luke-jr's	That's a very strange address indeed.  I've done the paymentrequests tests myself and did not encounter this.    @diapolo Can you confirm or deny @luke-jr's suspicion that this is solved with #1850? It could indeed have to do with a non-standard output somehow being converted to an (invalid, unlabaled) address.
3006	25802728	2013-10-07T11:57:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25802728	Diapolo	laanwj	@laanwj I'm going to integrate @luke-jr's patch, can you try to use the label, address and condition in my initial post to see if you can re-create the issue?
3006	25802728	2013-10-07T11:57:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25802728	Diapolo	luke-jr's	@laanwj I'm going to integrate @luke-jr's patch, can you try to use the label, address and condition in my initial post to see if you can re-create the issue?
3006	25803699	2013-10-07T12:16:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25803699	Diapolo	luke-jr's	I included @luke-jr's patch into my local build and still get the weird ``3QJmnh`` address added to my addressbook.  Perhaps it is important to mention that my testnet wallet is encrypted.    Here is the link to the payment-request:  https://bitcoincore.org/~gavin/createpaymentrequest.php?merchant=bitcoincore&address1=mfYEyfXvxhiRWyqmMUnVCTHrdjaCb5dvPn&amount1=0.001&address2=&amount2=&address3=&amount3=&time=0&expires=never&memo=My+Memo...&payment_url=on&ACK_message=Zahlung+erfolgreich%2C+danke!&produce_uri=on&submit=Create+Payment+Request
3006	25883016	2013-10-08T11:46:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25883016	Diapolo	laanwj	@laanwj Alright, we HAVE a problem in ``void SendCoinsDialog::on_sendButton_clicked()``, when we have a payment request, ``entry->getValue()`` has nothing in address or label, just amount and authenticatedMerchant are filled. We shouldn't try to add anything to our addressbook, when we have a payment request IMHO?
3004	24553463	2013-09-16T23:32:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24553463	BugAndNewsReporter	1.54.0_0+no_single+no_static+python27	    > port installed | grep boost      boost @1.54.0_0+no_single+no_static+python27 (active)
3000	24510172	2013-09-16T13:40:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24510172	gmaxwell	mikehearn	@mikehearn in our codebase that appeared to be it.
2999	24623615	2013-09-17T21:22:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24623615	sipa	TheBlueMatt	@TheBlueMatt The typedef remove is being bikeshedded in #2980, so please don't duplicate it here.    Also, if this only works on 0.8.5, why is this being pullrequested into master?
2999	24651732	2013-09-18T09:30:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24651732	prusnak	TheBlueMatt	@TheBlueMatt please also include suggested changes from my comment above (icon+executable in desktop file).
2999	25320793	2013-09-29T14:01:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320793	sipa	prusnak's	I'm not very familiar with this, but @prusnak's request seems reasonable.
2997	25684098	2013-10-04T08:48:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25684098	Diapolo	63	@63 Should be fixed by #3047!
2997	25689111	2013-10-04T10:14:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25689111	63	Diapolo,	Did not go unnoticed @Diapolo, thanks.
2994	25199892	2013-09-26T20:14:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25199892	Diapolo	laanwj	@laanwj ping
2994	25298116	2013-09-28T13:28:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25298116	Diapolo	laanwj	@laanwj This change just ensures that address labels, that ARE in our address book are shown, when using a normal bitcoin: URI or insecure payments. And because of that ensures we don't overwrite labels in the users address book.    So for secure payments there is no change at all, we will see the merchant displayed and no address or label in the sendcoinsdialog. I'm not sure if I'm with you, that this change is related to address re-use at all, it just brings our normal sendcoins mechanism (chose address -> label from address book is displayed in sendcoins) into play when using URIs or insecure payments.
2994	25924566	2013-10-08T20:28:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25924566	Diapolo	laanwj	@laanwj I would love to get an agreement on this pull, see my comments above :).
2994	26396253	2013-10-16T06:48:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26396253	laanwj	diapolo	@diapolo agree to close this one? As we want to reduce interaction of payment requests with labels, it makes no sense to show user-defined labels with payment requests in any circumstances.
2993	24441472	2013-09-14T09:15:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24441472	Diapolo	joe999	Could that be a problem with the hebrew translation files? @joe999 Can you please see if this happens with language set to english via ``-lang=en``.
2993	24441565	2013-09-14T09:22:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24441565	joe999	Diapolo	@Diapolo i need some blocks to update in order to know if something come up on the terminal, will write here in several hours with the result on the English, but i also think its related to Hebrew, btw, Hebrew is RTL Language
2992	24449790	2013-09-14T16:04:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24449790	theuni	laanwj	I have this changed locally (almost word-for-word what @laanwj said, coincidentally). Will push it up in a few min.
2992	24657666	2013-09-18T11:33:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24657666	laanwj	diapolo	@diapolo https://github.com/bitcoin/bitcoin/commit/9a4a7d3c6a6413b952dde12c899cf74a3fab8452
2991	25298188	2013-09-28T13:33:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25298188	Diapolo	laanwj	@laanwj This should be looked at before the next translations update, so as you seem to be active today you can perhaps review it :).
2988	24285619	2013-09-11T23:56:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24285619	theuni	gavinandresen	@gavinandresen this was a bug that slipped in, -O2 was supposed to be in the original autotools PR. Apparently some of the hardening options create strange warning/errors when combined with no optims.    I proposed that now was a good time to evaluate how debug/release usage should work (or if the distinction even needs to be available via configure options) now that we're beginning to deviate from the old build. A good example is OSX, which is currently (as it was before) vastly different between debug/release builds, meaning that devs rarely see what end users will see.    Stopgap is just to put the old behavior back rather than having fishy builds in the meantime.
2988	24290746	2013-09-12T02:15:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24290746	theuni	gavinandresen	@gavinandresen I would agree with that, yes. Hardening and debugging pretty much conflict as concepts.    But if we go that route, I would go further as to say that there's no longer any need for the hardening option, it's simply always on in release mode and never in debug.
2988	24291914	2013-09-12T02:51:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24291914	theuni	gavinandresen	@gavinandresen ok, then the last hurdle is figuring out what to do with OSX, since debug/release vary so much. I was hoping to bite this off in different chunks, but I suppose it's better worth doing as a whole.    OSX is currently back-compat to 10.5. As you've mentioned, this should change to 10.6. Unfortunately, 10.6 still supports 32bit cpus, so release builds will need to remain 32bit. And in that case, debug should be 32bit as well.    So that means that the following move from release flags to always-on flags:  -mmacosx-version-min=10.5 -arch i386 -> -mmacosx-version-min=10.6 -arch i386    Additionally, osx has historically built with -O3 for release. For the sake of consistency, I'd prefer to move all release to -O2 or -O3 (no preference which).
2988	24386016	2013-09-13T10:32:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24386016	sipa	gmaxwell	@gmaxwell: So your suggestion is:  * Debug is "-O0 -g2 -ggdb"  * Release is "-O2 -g0 + hardening"  * Default is release  Or do I miss something?    I think I'd prefer -O1 for debug builds, and having hardening enabled there too, as it doesn't interfere that much with debugging, but has a large performance impact (which matters in particular when running under valgrind).
2988	24405711	2013-09-13T16:13:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24405711	gmaxwell	sipa	@sipa I have never seen hardening interfere with debugging, so I think it should always be on. (though perhaps we turn off the couple things that cause warnings at O0 just to remove the noise.    Jeff is right that a lot of work has gone into making debugging work at O2 -g.  make debug is for when that fails.    I too would prefer O1 for make debug, but since I consider make debug for the case where release breaks debugging so O0 is safer and it can be overridden easily.    Yes, release should be default.    Does anyone here know how the split debugging stuff works?  I'd like it if we could ship production binaries that have the debugging removed (I think it makes them a zillion mb smaller for us) but still have the symbols around to correlate when we get reports.
2988	24409280	2013-09-13T17:06:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24409280	jgarzik	gmaxwell	@gmaxwell Starter links,  https://fedoraproject.org/wiki/Packaging:Debuginfo?rd=Packaging/Debuginfo  https://fedorahosted.org/elfutils/wiki/DebugInfo    Though I think that the size of our executables is a low priority [unless it's a fun project you just want to obsess over ;p]   Shipping debug info in production executables should be just fine.  The compiler puts the debug info in separate sections, so it should not pollute instruction/L1/L2 caches if unused.
2988	24412569	2013-09-13T17:55:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24412569	theuni	gmaxwell	@gmaxwell Split debug stuff is no problem, I can create a target for those once the dust settles here.
2988	24421255	2013-09-13T20:12:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24421255	theuni	jgarzik	@jgarzik fwiw, "-g -O2" is the autoconf default. That's what most would expect to see as a result of a vanilla "./configure".
2985	24196048	2013-09-10T21:27:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24196048	theuni	laanwj	@laanwj It's common for me, as I'm usually doing cross/gitian builds. This would encourage devs to use tests when interacting with users, as-in: "please post the output of the tests", which can now be easily run by users and trusted by the bug-hunter.
2985	24489721	2013-09-16T05:35:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24489721	theuni	gavinandresen	@gavinandresen Could you please install 'bsdmainutils' in the pull-tester? After that i'll rebase on master and push for a new test.
2980	24019868	2013-09-08T12:11:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019868	laanwj	Diapolo	It's not a license problem @Diapolo . We just don't like json spirit changes that diverge further from upstream.
2980	28200236	2013-11-11T13:41:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28200236	laanwj	gavinandresen	On the other hand we don't really keep up with upstream (http://www.codeproject.com/Articles/20027/JSON-Spirit-A-C-JSON-Parser-Generator-Implemented). Last time we tried to upgrade json spirit was a horrible fail that we had to revert immediately.    What's the verdict here? In general I agree with the "let's not diverge further from upstream" however seemingly we've already diverged and it's only a single line change so I'm fine with merging it (or deleting the line as @gavinandresen prefers).
2979	24015590	2013-09-08T05:49:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015590	luke-jr	wtogami	@wtogami Qt5 support can be something for a future pull request. As long as it doesn't build correctly (I don't think having to remove Qt4 counts), configure should fail.
2979	24016477	2013-09-08T07:21:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016477	jgarzik	wtogami	@wtogami  The proposed solutions are largely an artifact of transitional code.  New checkouts should not see the problem, and pre-autotools builds will quickly plunge in frequency, in a few months after release.    Seems like an issue for release notes, something easily grep-able and google-able for people finding common pre->autotools transition issues.
2979	24019265	2013-09-08T11:30:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019265	gmaxwell	Diapolo	@Diapolo  The secret of autotools is that no one else in the world understands it either.  Really you just randomly poke at it until it works. Once you've done this long enough everyone will assume that you actually know what you're doing, and you can smirk quietly and carry on the great secret. :)    Don't worry, if you get stuck everyone will help you. Autotools is like a big hazing as part of the initiation into the free software brotherhood.  At conferences we all sit around over beer griping about how much autotools stinks. :)
2979	24021412	2013-09-08T14:08:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24021412	luke-jr	Krellan	@Krellan Programs are not supposed to be built with -fPIC (it's for shared libraries only), so I'm not sure where your problem is coming from. I'll make a note to remove the CXXFLAGS from build-unix.md (it's no longer necessary).    @wtogami bitcoind was never built in the base directory, so the location is already the same.
2979	24021412	2013-09-08T14:08:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24021412	luke-jr	wtogami	@Krellan Programs are not supposed to be built with -fPIC (it's for shared libraries only), so I'm not sure where your problem is coming from. I'll make a note to remove the CXXFLAGS from build-unix.md (it's no longer necessary).    @wtogami bitcoind was never built in the base directory, so the location is already the same.
2979	24021473	2013-09-08T14:12:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24021473	wtogami	luke-jr	@luke-jr Oops, I meant bitcoin-qt.
2979	24027314	2013-09-08T19:18:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24027314	Krellan	luke-jr	@luke-jr As for -fPIC, nonetheless, it seems to be required.  Can you compile on your system with `--enable-hardening` without adding -fPIC?  I can't, without getting the error message about relocation and the reminder to use -fPIC.  With ASLR hardening, the address space is randomized, so position-independent code would already be a necessity, right?    On my system, a hardened executable shows up as "shared object" (ET_DYN) instead of "executable" (ET_EXEC) in the `file` and `scanelf -e` commands respectively.  So, although -fPIC is for shared libraries only, as you said and I agree with, maybe a hardened executable counts as a shared library for this purpose?
2979	24045518	2013-09-09T06:15:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24045518	theuni	Diapolo	@Diapolo: I have patches for enabling qt5, and it builds fine. But I excluded it from the initial autotools pull to avoid overcomplicating it.
2979	24069511	2013-09-09T12:34:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24069511	laanwj	wtogami	@wtogami yes,the mingw-w64 (don't mind the name, it's for 32 bit as well) cross compilation stuff in Ubuntu 12.04 is new enough for hardened builds (w/ stack-protector-all) to work correctly on Windows.
2973	23926255	2013-09-06T08:35:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23926255	Diapolo	laanwj	@laanwj Alright, should be complete and I removed all ``()`` like you suggested.  An additional idea now would be to send all these to our debug window, what do you think?
2970	23807635	2013-09-04T17:23:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23807635	aceat64	Diapolo	@Diapolo It appears to only be used for the copy-to-clipboard and CSV export functions.    @luke-jr Yeah, I think the details window is the appropriate place for the subtransaction index. It should probably also be included in the CSV export as it's own column.
2970	23807635	2013-09-04T17:23:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23807635	aceat64	luke-jr	@Diapolo It appears to only be used for the copy-to-clipboard and CSV export functions.    @luke-jr Yeah, I think the details window is the appropriate place for the subtransaction index. It should probably also be included in the CSV export as it's own column.
2965	24729338	2013-09-19T10:21:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24729338	Diapolo	CodeShark	@CodeShark Can you take a look please.
2965	26033308	2013-10-10T07:12:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26033308	Diapolo	CodeShark	@CodeShark Could be because of old compiler/build environment and old Boost version used!?
2964	23624496	2013-09-01T13:04:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23624496	sipa	TheBlueMatt	Dang. @TheBlueMatt: how does pulltester send/announce blocks, does it answer getheaders, and how does it know a block was received?
2964	24288529	2013-09-12T01:10:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24288529	theuni	sipa	@sipa fyi, now you can easily run the same scripts as pull-tester to check locally, in case you're looking into fixing up the block-tester. Just add --with-comparison-tool to your configure, and this test will be enabled during 'make check':  ```  ./configure --with-comparison-tool=/tmp/BitcoindComparisonTool.jar  make  make check  ```  If you replace the .jar, just 'make check' again.
2964	24443561	2013-09-14T11:42:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24443561	sipa	TheBlueMatt	@TheBlueMatt Any help decoding pulltester's output?
2964	24623948	2013-09-17T21:27:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24623948	sipa	TheBlueMatt	@TheBlueMatt (as discussed on IRC) Yes, this gets us further already, but it seems the getheaders implementation in the comparison tool is too incomplete to do a successful multi-block reorg with headers-first. So this means fixing that becomes sort of a blocker for this; unfortunately, I don't have the time any time soon to look into that.
2963	23633393	2013-09-01T21:19:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23633393	Diapolo	laanwj	@laanwj Yeah I have another pull ready, which changes all usages of ``OutputDebugStringF()`` into ``qDebug()``.
2956	23578976	2013-08-30T17:59:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23578976	gmaxwell	wumpus	I saw a really interesting multi-step failure from an experienced Bitcoin user:    They imported a private key from some third party (I didn't ask I assume it was a contest or something).    Much later they needed to receive some Bitcoin so they picked an address of their receive page.    Sometime after that they noticed a transaction they didn't make taking some of their bitcoin.    They eventually figured out that they'd picked that imported key and send coin there and someone else eventually noticed and spent it.    Discussion about this ("Why would someone pull an address from the list??") resulted in me discovering that we were prompting for a password on new addresses (now fixed).    But just another point to confirm my agreement with @wumpus that we should probably bury the lists as historical data, and have a receive page like Armory's.
2956	23606536	2013-08-31T13:45:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23606536	Diapolo	laanwj	@laanwj Can you also make a small comment here?
2956	23607250	2013-08-31T14:32:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23607250	laanwj	gmaxwell	WTF, I thought I already replied here.    NACK. This was rejected before, mainly because Address Book is too long in some languages.    I agree with @gmaxwell though. We need to get rid of receiving and sending addresses and bury them as historical data. The current process encourages address reuse. See #2383.
2956	23611440	2013-08-31T18:27:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23611440	Michagogo	gmaxwell	Is there something else that we could change it to that wouldn't be too  long? I agree that it should be (re)moved, but having it just say  "Addresses" seems like a bad thing -- IMO it needs to be made clearer that  these addresses are addresses that you've saved for sending.    On Saturday, August 31, 2013, Wladimir J. van der Laan wrote:    > WTF, I thought I already replied here.  >  > NACK. This was rejected before, mainly because Address Book is too long in  > some languages.  >  > I agree with @gmaxwell <https://github.com/gmaxwell> though. We need to  > get rid of receiving and sending addresses and bury them as historical  > data. The current process encourages address reuse. See #2383<https://github.com/bitcoin/bitcoin/issues/2383>.  >  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2956#issuecomment-23607250>  > .  >
2953	23517455	2013-08-29T19:37:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23517455	neilneyman	luke-jr	OK, I understand.  Would it make more sense to, er, "crash gracefully" rather than presenting an assert message to the end-user though?    @luke-jr the "assert.h" file (gnu for example) has code like this:   #ifdef NDEBUG   #define assert(EX)   #else   #define assert(EX) (void)((EX) || (__assert (#EX, __FILE__, __LINE__),0))   #endif     so if you #define NDEBUG somewhere in your code it basically makes the assert macro do nothing.  It's meant to disable debugging mode.  I was unclear on whether the -g option also did this but it does not.
2951	23622470	2013-09-01T10:37:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23622470	laanwj	diapolo	@diapolo but ack otherwise?
2950	26212584	2013-10-13T06:45:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26212584	pstratem	gavinandresen	@gavinandresen comment added
2949	23507854	2013-08-29T17:37:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23507854	petertodd	luke-jr	@luke-jr Good idea, although I won't make it a <= test, not a == test.    Actually, no, I'm going to take that back: app developers are just going to call sendrawtransaction with their nFees, which is likely to be calculated wrong anyway... So stick with the hard sanity limit.
2948	23630608	2013-09-01T18:50:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23630608	sipa	gmaxwell	@gmaxwell I'd like to see such "magic" targets (fee, change) as well. I suppose the logic would be: if change is specified, it's replaced by a random change address pulled (and marked) in your wallet. If fee is present, it must be the exact different between inputs and outputs.
2948	23631279	2013-09-01T19:24:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23631279	jgarzik	sipa	@sipa +1
2948	23680240	2013-09-02T22:12:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23680240	gavinandresen	sipa	Another @sipa +1    This pull: looks good to me, ACK.
2946	23471871	2013-08-29T07:37:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23471871	Diapolo	laanwj	@laanwj I don't like that we currently have mixed ways of using these Qt signal stuff. If we define "it's okay to use connections specified via the Qt Designer" that is fine with me, but then we should rework the code to move this into the .ui files.    Perhaps that would also remove some of the on_XYZ_clicked() stuff from our code, which Qt handles then declaratively :). What do you think?
2945	24576023	2013-09-17T09:50:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24576023	gavinandresen	sipa	I've been playing with variations of this for a couple hours, and wrote a unit test (I'll email you the patch).    ACK in general, with one nit:    It looks like 109 isn't the right number, I'm getting P2SH signatures that are 108-110 bytes big. @sipa : what is the maximum DER-encoded signature plus compress public key size?
2945	24608419	2013-09-17T17:51:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24608419	petertodd	gmaxwell	@gmaxwell @gavinandresen Signatures can be up to 73 bytes long,(1) so that gets you 73+1 for the signature, and (33+1)+1 for the scriptPubKey, and another byte for the length of the scriptPubKey, 110 bytes in total.    1) https://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm <- I wrote this after checking with @sipa
2945	24608419	2013-09-17T17:51:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24608419	petertodd	gavinandresen	@gmaxwell @gavinandresen Signatures can be up to 73 bytes long,(1) so that gets you 73+1 for the signature, and (33+1)+1 for the scriptPubKey, and another byte for the length of the scriptPubKey, 110 bytes in total.    1) https://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm <- I wrote this after checking with @sipa
2945	24608419	2013-09-17T17:51:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24608419	petertodd	sipa	@gmaxwell @gavinandresen Signatures can be up to 73 bytes long,(1) so that gets you 73+1 for the signature, and (33+1)+1 for the scriptPubKey, and another byte for the length of the scriptPubKey, 110 bytes in total.    1) https://en.bitcoin.it/wiki/Elliptic_Curve_Digital_Signature_Algorithm <- I wrote this after checking with @sipa
2945	24621383	2013-09-17T20:52:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24621383	gmaxwell	cozz	@cozz ... you were testing P2SH?
2945	24622000	2013-09-17T21:00:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24622000	cozz	gmaxwell	@gmaxwell no, I am talking about a default tx, sorry for bothering.
2943	23605354	2013-08-31T12:20:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23605354	fanquake	theuni	@theuni Do you use MacPorts, HomeBrew or something else on OSX?
2943	23620407	2013-09-01T07:42:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23620407	theuni	fanquake	Just pushed a boatload of fixes. Sorry for yet another round of changes, but this has turned out to be much more complicated than originally anticipated. I can squash down before merge, but I decided to push individual changes in case anyone is following the progress.    Fully verified on osx now that my macbook is up and running again (yay!).    I also scrapped the 'windows-deploy' target and replaced it with the generic 'deploy' one. 'make deploy' on osx will produce a fully-functional dmg. When building for windows, 'make deploy' will create a fully-functional win32 installer.    At this point, it's feeling very very solid. That said, I only have osx 10.6 at my disposal currently, so it hasn't been tested on 10.7/10.8 yet.    @fanquake: Tested extensively with macports and homebrew after today's changes. The build procedure is pretty much: install macports/homebrew depends as before, but with automake/autoconf added. Additionally, you can install qt directly from macports/homebrew and it should just work (tm). After that, standard configure+make should be all it takes.    I'll try to get the osx docs written+pushed tomorrow.
2943	23621849	2013-09-01T09:48:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23621849	sipa	laanwj	ACK code changes, and seems to work fine on Ubuntu (13.04). @laanwj still wanted some improvement to the .pro file, though?
2943	23641552	2013-09-02T05:29:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23641552	jgarzik	gavinandresen	@gavinandresen Usually I do something like    CXXFLAGS="-O2 -Wall -g -I/opt/local/include" LDFLAGS="-L/opt/local/lib" ./configure
2943	23695701	2013-09-03T08:02:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23695701	theuni	TheBlueMatt	Ok, that should do it for the pull tester. I've integrated lcov and the java test into the build. Also added a set of scripts for contrib that pull-tester can run from jenkins. The big benefit is that everything is now in-tree, so if they change in the future, there's no worry of getting out of sync with the build procedure. Additionally, devs can run the script and yield the same result as the bot.    @TheBlueMatt ping. With any luck, the bot just needs to run test-scripts/pull-tester.sh . That in-turn kicks off https://github.com/theuni/bitcoin/blob/dd08a1146f5408af5316651fbd89027575bedf14/contrib/test-scripts/build-tests.sh.in, which is as close to the old behavior as I could get it.
2943	23760958	2013-09-04T01:54:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23760958	theuni	gavinandresen	@gavinandresen If/when you go to update the bot, the params have changed to accommodate the out-of-tree java tool.    It should now be invoked as:  ```  contrib/test-scripts/build-tests.sh /path/to/win32/deps /mnt/test-scripts/BitcoinjBitcoindComparisonTool.jar 6  ```
2943	23763886	2013-09-04T03:31:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23763886	theuni	jgarzik's	Ok, I've pushed the last of my changes. I now consider this to be complete. I'm sure it's full of bugs and facepalms, but I think it now meets @jgarzik's criteria above.    pull-tester should be working pending teaching the bot its new tricks, and a rebase of this branch. The win32 build will fail until it gets updated deps, so I've disabled that build in the test-scripts for now. Any objections to squashing this down now and rebasing to master?
2943	24011659	2013-09-07T23:06:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24011659	theuni	shripadk	@shripadk I think I see it. (Also, you need to install pkg-config from ports).    Could some committer kill the extra ] that snuck in here: https://github.com/bitcoin/bitcoin/blob/master/configure.ac#L411
2941	23246171	2013-08-26T06:48:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23246171	fanquake	medicinebottle	@medicinebottle     Running Bitcoin-Qt with -reindex should fix your problem. See #2674, #2405, #2426    If you're unsure how to do that, open Terminal.app and type         open /Applications/Bitcoin-Qt.app --args -reindex
2941	23249801	2013-08-26T08:29:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23249801	fanquake	Diapolo	@Diapolo By the looks of the crash report he is running 0.8.4
2939	23246165	2013-08-26T06:48:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23246165	Diapolo	gmaxwell	@gmaxwell Just to get this clear, when I use -tor this is for reaching Tor addresses (hidden services) and this patch would disable listening, if not explicitly enabled and would also lead to disable -upnp and -discover (if not explicitly enabled). How does this break hidden services?    @sipa I guess the patch should be changed to do this for -onlynet=Tor then?
2939	23246165	2013-08-26T06:48:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23246165	Diapolo	sipa	@gmaxwell Just to get this clear, when I use -tor this is for reaching Tor addresses (hidden services) and this patch would disable listening, if not explicitly enabled and would also lead to disable -upnp and -discover (if not explicitly enabled). How does this break hidden services?    @sipa I guess the patch should be changed to do this for -onlynet=Tor then?
2939	23246270	2013-08-26T06:51:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23246270	gmaxwell	Diapolo	@Diapolo because you could no longer receive incoming connections from other hidden service peers. If you intended to have no non-tor connectivity at all you should instead be using proxy. Perhaps this could be better documented.    No, this shouldn't disable listening for onlynet=tor either, since that will break hidden service inbound too. It should probably disable UPNP when onlynet=tor, however.
2939	23247378	2013-08-26T07:25:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23247378	Diapolo	gmaxwell	@gmaxwell Right, incoming connections would be disabled that way.    When I setup Tor and want bitcoin to only use Tor I do this via ``-proxy=127.0.0.1:9050 -externalip=XYZ.onion -onlynet="Tor" -bind=127.0.0.1`` (perhaps that configuration should be mentioned in tor.md?), which explicitly ENABLES incoming connections.
2939	23250492	2013-08-26T08:45:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23250492	Diapolo	gmaxwell	@gmaxwell I'll close this, would be nice if you could comment my above posting.
2937	23228789	2013-08-25T14:41:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228789	sipa	jgarzik	@jgarzik Agree that a hook-mechanism for dealing with incoming commands is probably the future, but we don't do that right now for other messages, and it's unreasonable to demand that in a pullreq like this.
2937	23247313	2013-08-26T07:23:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23247313	sipa	gavinandresen	@gavinandresen There are many factors that affect Bitcoin P2P latency which you wouldn't notice through network-level ping (application throttling, peer having an overloaded receive queue, peer being DoS'ed, implementation problems...), and it will not work for every type of connection (incoming peers that are firewalled, or onion peers for example).    Additionally, having ping statistics inside the program can be useful for future heuristics when picking peers to sync/download from.
2937	25320951	2013-09-29T14:11:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320951	sipa	jgarzik	@jgarzik @gavinandresen @gmaxwell Any further comments? I'd like this merged, to be able to add some automatic latency measurement on top.
2937	25320951	2013-09-29T14:11:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320951	sipa	gavinandresen	@jgarzik @gavinandresen @gmaxwell Any further comments? I'd like this merged, to be able to add some automatic latency measurement on top.
2937	25320951	2013-09-29T14:11:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320951	sipa	gmaxwell	@jgarzik @gavinandresen @gmaxwell Any further comments? I'd like this merged, to be able to add some automatic latency measurement on top.
2933	23228861	2013-08-25T14:45:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228861	sipa	Diapolo	@Diapolo Actually, it is there. Unfortunately, there is only a single commit in the upstream LevelDB repo from 1.12 to 1.13 ("LevelDB 1.13"), and it's listed in the squashed subtree commit.    If you want to see the full commit message, look at the leveldb repo (http://github.com/bitcoin/leveldb), in the bitcoin-fork branch.  EDIT: It's not yet merged there, look at pullreq 1 in that repo.
2933	23228895	2013-08-25T14:47:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228895	sipa	wtogami	@wtogami There's always some risk, and we should be careful when making changes to the leveldb subtree, as it may affect convergence in case of bugs. In this case, I think the potential benefit is worth the risk, and the changes look safe.
2933	23230960	2013-08-25T16:44:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230960	petertodd	sipa	@sipa "This obviously depends on the LevelDB 1.13 changes being merged in the LevelDB repo first" <- by that do you mean this pull-req might be changed again if LevelDB changes what they decide to merge?    I'd spend an hour or two to go through the actual changes manually, but it's not worth it unless we're sure this is what we would want to merge.
2933	23231021	2013-08-25T16:48:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23231021	sipa	petertodd	@petertodd I mean in our LevelDB repo, (http://github.com/bitcoin/leveldb). Upstream LevelDB 1.13 is released, so no worries there.    Reason for this is that it's not entirely clear to me how we want to manage our leveldb repository, depending on whether we want to merge upstream changes before or after testing them in Bitcoin. In any case, this pull request  serves as a preview to the actual changes, but may change if we for example wish to make some changes in our leveldb repo before merging the upstream changes.
2933	25320969	2013-09-29T14:12:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320969	sipa	jgarzik	@jgarzik @laanwj @gmaxwell @gavinandresen Opinions? Do we need some testing before or after merging this in the bitcoin/leveldb repo?
2933	25320969	2013-09-29T14:12:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320969	sipa	laanwj	@jgarzik @laanwj @gmaxwell @gavinandresen Opinions? Do we need some testing before or after merging this in the bitcoin/leveldb repo?
2933	25320969	2013-09-29T14:12:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320969	sipa	gmaxwell	@jgarzik @laanwj @gmaxwell @gavinandresen Opinions? Do we need some testing before or after merging this in the bitcoin/leveldb repo?
2933	25320969	2013-09-29T14:12:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320969	sipa	gavinandresen	@jgarzik @laanwj @gmaxwell @gavinandresen Opinions? Do we need some testing before or after merging this in the bitcoin/leveldb repo?
2933	25321172	2013-09-29T14:24:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321172	gmaxwell	sipa	@sipa I've given it some fairly basic testing now: ran the node under it, reindexed under it, and switched back to the old one. Everything seems okay.
2932	24801258	2013-09-20T10:18:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24801258	Diapolo	laanwj	@laanwj Changed to a vector of strings and modified paymentserver to benefit of the changes. Can you take another look?
2932	24859658	2013-09-21T09:56:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24859658	Diapolo	TheBlueMatt	@TheBlueMatt Can you restart a build if the pulltester errors are fixed?
2932	25063488	2013-09-25T05:53:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25063488	Diapolo	BitcoinPullTester	I'm still rather sure this is a @BitcoinPullTester related error, can some core-dev take a look at http://jenkins.bluematt.me/pull-tester/8f3cb255f195b4808ca5e64c01e6bc6c58cbf210/test.log
2932	25297998	2013-09-28T13:20:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25297998	Diapolo	laanwj	@laanwj Can you have another look, I updated the code in bitcoind.cpp to what you had suggested :). Also ``fCommandLine`` is no longer a global now.
2932	25320988	2013-09-29T14:13:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320988	sipa	laanwj	@laanwj I'm very much in favor of splitting off the RPC client into a separate binary.
2928	23240227	2013-08-26T01:49:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240227	jgarzik	sipa	Fixed @sipa nit.
2924	23111042	2013-08-22T17:45:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23111042	sje397	luke-jr	@luke-jr That's exactly why I wanted it - because I had moments of antsy-ness about network usage :) I think it's better to be transparent.
2924	23134739	2013-08-22T23:47:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23134739	sje397	petertodd	@petertodd I was sure there'd be a better time func in there somewhere - cheers. @gmaxwell Thanks. Yeah, would be good to take it further.
2924	23134739	2013-08-22T23:47:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23134739	sje397	gmaxwell	@petertodd I was sure there'd be a better time func in there somewhere - cheers. @gmaxwell Thanks. Yeah, would be good to take it further.
2924	23137899	2013-08-23T01:20:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23137899	sje397	petertodd	@petertodd The problem with those time functions is that they use wall-clock time. Is it possible to use boost's 'steady clock' or we need to support versions of boost that are too old for that?
2924	23145103	2013-08-23T06:04:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23145103	petertodd	sje397	@sje397 I'm not familiar enough with boost to answer that.    Would someone else please answer his question.
2924	23149775	2013-08-23T08:20:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23149775	gavinandresen	sje397	@sje397 : Looks like we gitian-build against boost 1.40.  Updating the version of Ubuntu we use for deterministic building and updating dependencies is on my want-to-happen-for-0.9 list...
2924	23337408	2013-08-27T13:50:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23337408	sje397	Diapolo	@Diapolo No probs. Thanks for your time and patience.
2924	23338000	2013-08-27T13:56:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23338000	Diapolo	laanwj	I would say some core-devs should comment on the core changes and RPC stuff now and @laanwj should review the Qt code. If I find the time I'll try to compile your patch also if you consider it test-ready :).    One feature request, maybe you could add a clear button?
2924	23466558	2013-08-29T04:38:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23466558	sje397	laanwj	@laanwj Will look tonight. Odd that it passed the auto tests, and I didn't see it on osx or linux...will have to get my win build working I guess.
2924	23879900	2013-09-05T16:14:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23879900	sje397	laanwj	@laanwj Please try again - I think I've resolved those errors.  @Diapolo I added the alpha background and fixed the issue with the slider value display.
2924	23879900	2013-09-05T16:14:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23879900	sje397	Diapolo	@laanwj Please try again - I think I've resolved those errors.  @Diapolo I added the alpha background and fixed the issue with the slider value display.
2924	24733532	2013-09-19T11:58:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24733532	sje397	Diapolo....	Done. Thanks again, @Diapolo....  Now to figure out how to build the thing without a pro file :)
2924	24735245	2013-09-19T12:34:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24735245	sje397	sipa	Thanks @sipa - no worries installing db48... I just thought it was going to be a 5 min fixup, that's all... now it can't find Qt... I'll figure it out.
2924	25078798	2013-09-25T11:28:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25078798	Diapolo	laanwj	@laanwj ping
2924	25763825	2013-10-06T07:39:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25763825	laanwj	diapolo	@diapolo If this was a GUI-only change I'd have merged it quite some time ago.     Maybe split adding the RPC call into a different commit so it gets more review by the other devs?
2924	25767031	2013-10-06T12:05:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767031	Diapolo	laanwj	@laanwj Well even if @sje397 leaves out the rpc-call, there are still changes to the core (at least adding some vars for counting the traffic), which needs core-devs ACK :-/. I'm fine with your split idea, if this helps speed things up...
2924	25767031	2013-10-06T12:05:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767031	Diapolo	sje397	@laanwj Well even if @sje397 leaves out the rpc-call, there are still changes to the core (at least adding some vars for counting the traffic), which needs core-devs ACK :-/. I'm fine with your split idea, if this helps speed things up...
2924	25821312	2013-10-07T16:04:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25821312	laanwj	gmaxwell	Yes that's true, it's not possible to entirely split it into core + GUI parts. So don't do the split.    Let's just get at least one more ACK on the core changes.  @gmaxwell what do you think about the network changes? Your per-peer comment is not addressed yet but that could be done in a later pull, I think we should merge this if there are no blocking issues.
2922	23016815	2013-08-21T13:29:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23016815	Diapolo	gavinandresen	@gavinandresen Please merge before the final 0.8.4 is built :-).
2922	23069807	2013-08-22T05:48:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069807	Diapolo	gavinandresen	@gavinandresen It would still be a good thing, to get current translations into releases, which are not based on current master, but I can't think of a clean way to do this. As 0.8.4 may contain old strings that are not recent in current master anymore and as such are removed on Transifex and would then be untranslated...    @wtogami Right, there is no good way to achieve this.
2922	23069807	2013-08-22T05:48:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069807	Diapolo	wtogami	@gavinandresen It would still be a good thing, to get current translations into releases, which are not based on current master, but I can't think of a clean way to do this. As 0.8.4 may contain old strings that are not recent in current master anymore and as such are removed on Transifex and would then be untranslated...    @wtogami Right, there is no good way to achieve this.
2914	22932615	2013-08-20T09:29:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22932615	gmaxwell	sipa	@sipa ::nods:: As you wish. :) (where is my brown paper bag?)
2909	22867049	2013-08-19T12:02:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22867049	sipa	jgarzik	@jgarzik That is correct, but irrelevant. The block chain is only 11 GB and is only written once, and he complains about much larger usage.    My guess for the reason is that the chainstate database is continuously being updated, and in total a much larger amount of data is being written for this. Assuming the size of the virtual disk is large enough, then depending on the file system, the data may end up scattered over the virtual block device, making every sector dirty and require space.
2905	23012436	2013-08-21T12:09:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23012436	luke-jr	gavinandresen	@gavinandresen Good point. Does anyone object if I use my python-blkmaker module for the port?
2904	22810137	2013-08-17T11:33:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810137	gmaxwell	wumpus	@wumpus @diapolo  Any comments? I don't normally change GUI code.
2904	22810137	2013-08-17T11:33:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810137	gmaxwell	diapolo	@wumpus @diapolo  Any comments? I don't normally change GUI code.
2904	22810891	2013-08-17T12:28:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810891	gmaxwell	Diapolo	@Diapolo Good observation on default, I hadn't thought to check to find out if that were the last user of it.
2904	23069801	2013-08-22T05:48:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069801	laanwj	diapolo	Good change.    Agree with @diapolo with regard to default key and allow reuse.
2902	22721329	2013-08-15T18:53:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721329	Diapolo	petertodd	I agree with @petertodd here, it's hard enough sometimes to remind devs to add new options in the help message in the code ^^.
2902	22721683	2013-08-15T18:58:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721683	Michagogo	super3	@super3 If you want to have the commands in a list, it's as simple as `bitcoind --help >> switches` for the command line switches, or `bitcoind help >> commands` for the RPC commands.
2902	22721856	2013-08-15T19:00:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721856	super3	Michagogo	@Michagogo Well the plan was to go a little further than just listing them, but providing examples of usage as well. Should that be thrown into the /docs or the wiki or both?
2901	22730662	2013-08-15T21:06:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22730662	jgarzik	gmaxwell)	disable-wallet mode now skips BDB environment setup, reducing startup RSS here by over 40MB (h/t @gmaxwell)
2901	22811064	2013-08-17T12:40:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22811064	Diapolo	gmaxwell	@gmaxwell Agreed, it's the only miner I use with Testnet as it's so damn easy to use and JUST works.
2901	23221635	2013-08-25T04:15:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221635	jgarzik	Diapolo	Rebased on top of #2928 and fixed @Diapolo 's nit.    getblocktemplate now works in no-wallet mode.  OP updated accordingly.  Should be merge ready, modulo another IsMine() review.  I reviewed quickly based on @laanwj 's comment, but did not see the case.  Will look more closely with brain fully engaged before saying it is 100% merge-ready :)
2901	23221635	2013-08-25T04:15:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221635	jgarzik	laanwj	Rebased on top of #2928 and fixed @Diapolo 's nit.    getblocktemplate now works in no-wallet mode.  OP updated accordingly.  Should be merge ready, modulo another IsMine() review.  I reviewed quickly based on @laanwj 's comment, but did not see the case.  Will look more closely with brain fully engaged before saying it is 100% merge-ready :)
2901	23240506	2013-08-26T02:03:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240506	jgarzik	laanwj	Rebased, and fixed the bug found by @laanwj
2901	23489967	2013-08-29T13:43:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23489967	Diapolo	laanwj	@laanwj ``-wallet=0`` IS ``-nowallet``, which I would vote for as a name for the switch.
2901	28132274	2013-11-09T17:34:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28132274	sipa	jgarzik	@jgarzik Can you rebase please?
2898	22682564	2013-08-15T03:07:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22682564	super3	gavinandresen,	Thanks for pointing that out @gavinandresen, and all the great work you do.   Git issues. See #2899 for a squashed commit.
2888	22977265	2013-08-20T20:57:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22977265	wtogami	sipa	Does @sipa insist on the rewrite to use nChainWork difference?
2888	23194907	2013-08-23T22:21:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23194907	sipa	wtogami	@wtogami Yes, I think it's trivial to do right.
2888	23490300	2013-08-29T13:47:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23490300	Diapolo	coblee	@coblee Any progress on this? Seems to be a nice feature.
2888	23528039	2013-08-29T22:20:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23528039	wtogami	pooler	https://github.com/litecoin-project/litecoin/pull/69  @pooler has implemented sipa's requested change.  coblee wants to write tests before submitting this to Bitcoin.  I suggest squashing it a bit to have fewer, cleaner commits for Bitcoin.
2888	24384876	2013-09-13T10:07:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24384876	coblee	sipa,	Sorry for the delay, the change is tested and pushed. Please take another look.    @sipa, thanks for the suggestion.    @gmaxwell, the default behavior is to use the previous 120 blocks.    Thanks @pooler for the fix.
2888	24384876	2013-09-13T10:07:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24384876	coblee	gmaxwell,	Sorry for the delay, the change is tested and pushed. Please take another look.    @sipa, thanks for the suggestion.    @gmaxwell, the default behavior is to use the previous 120 blocks.    Thanks @pooler for the fix.
2888	24384876	2013-09-13T10:07:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24384876	coblee	pooler	Sorry for the delay, the change is tested and pushed. Please take another look.    @sipa, thanks for the suggestion.    @gmaxwell, the default behavior is to use the previous 120 blocks.    Thanks @pooler for the fix.
2888	24413957	2013-09-13T18:16:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24413957	coblee	sipa,	Hmm, I made the change, but looking at it now, I'm not sure it's a good change. Making sure we get correct results for weird edge cases is probably not worth the extra cost in keeping tracking of a min/max over all the blocks, since people won't be calling this method with a small number of blocks. @sipa, what do you think? We can always just do a sanity check to make sure min < max.
2888	24486943	2013-09-16T03:05:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24486943	gmaxwell	sipa	@sipa  How does the estimator you use on sipa.be work?
2888	25321329	2013-09-29T14:34:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321329	sipa	gmaxwell	@gmaxwell Exponential window that measures rate and average timestamp of past blocks (which seems to be what you need for a most likelyhood estimator for an poisson process whose rate is an exponential function; I'm certainly not able to do the math for that again, but the resulting formula's became ridiculously simple), which is used to guess the parameters of the hashrate growth curve in every point, which on its turn is used to extrapolate the the speed at the current time. Way too complex (and probably too unstable) for using inside the program.
2885	23488734	2013-08-29T13:27:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488734	Diapolo	gavinandresen	ping @gavinandresen Wasn't this included in your paymentrequest-pull?
2885	23534800	2013-08-30T01:10:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23534800	gavinandresen	Diapolo	@Diapolo : yes, this was part of the paymentrequest pull.  Closing.
2884	22327044	2013-08-08T14:27:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22327044	petertodd	SergioDemianLerner	@SergioDemianLerner +1    > "Old clients that receive non-canonically-encoded transactions or blocks deserialize them into CTransaction/CBlock structures in memory, and then re-serialize them before relaying them to peers."    What do you mean by "old" here?
2884	22354879	2013-08-08T20:54:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22354879	gavinandresen	petertodd	@petertodd : for "block" messages, old means "previous versions of the reference implementation."  For "tx" messages, old means "versions that have commit 'Simplify storage of orphan transactions'".    Rejecting non-canonically-encoded "tx" messages should have no ill effects-- well, beyond creating Yet Another Way to craft 0-confirmation transactions that are accepted by un-upgraded nodes and rejected by newer nodes.    I'll make the CHECK_THROW for the unit tests message specific.
2884	23231197	2013-08-25T16:58:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23231197	petertodd	sipa	@sipa With the pull-tester I suspect what happened was it just expected the block to fail, so this patch just makes it fail for a different reason.
2884	23238187	2013-08-25T23:55:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23238187	gavinandresen	sip	@sip @petertodd : Sipa is right, this should have made the blockchain tester fail at block b64:  ```          // Check that a block which is (when properly encoded) <= MAX_BLOCK_SIZE is accepted          // Even when it is encoded with varints that make its encoded size actually > MAX_BLOCK_SIZE          // -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18)          //  ```
2884	23238187	2013-08-25T23:55:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23238187	gavinandresen	petertodd	@sip @petertodd : Sipa is right, this should have made the blockchain tester fail at block b64:  ```          // Check that a block which is (when properly encoded) <= MAX_BLOCK_SIZE is accepted          // Even when it is encoded with varints that make its encoded size actually > MAX_BLOCK_SIZE          // -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18)          //  ```
2884	23306364	2013-08-27T00:52:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23306364	gavinandresen	TheBlueMatt	There is a bug in the blockchain tester code; running under the debugger, I'm getting:    ```  02:47:47 10 BitcoindComparisonTool.<init>: Block "b63" completed processing  ... I had a conditional breakpoint set to trip with messages > 900,000 bytes, and  on b64 I get:  (gdb) p nMessageSize  $6 = 999999  ```    @TheBlueMatt : I'll need help figuring out how to fix and then recompile the .jar.
2884	23461936	2013-08-29T01:50:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23461936	TheBlueMatt	gavinandresen	@gavinandresen My usual method is to import bitcoinj into eclipse and use the export menu from there. It would be easier if it worked in IntelliJ but I have yet to get IntelliJ's jar export to work.
2884	23883126	2013-09-05T16:49:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23883126	TheBlueMatt	gavinandresen	@gavinandresen oh, Read the next comment, the signature size is non-deterministic, so try running it again and see if you get it over 1m (I believe you've got a 1/3 shot IIRC).
2884	25411020	2013-09-30T22:13:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25411020	gavinandresen	sipa	@sipa : I still think there is a bug in pull-tester. I'm torn on whether or not that bug should be fixed before this change goes in, because accepting this pull would just mean removing that pull-tester test (since the purpose of this pull is for the network to reject the thing pull-tester is testing).
2878	22435899	2013-08-10T08:00:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22435899	laanwj	jonasschnelli	Indeed, the bitcoin application icon has been available (in the repository) as SVG since the beginning of Bitcoin-Qt. This still holds for the redesigned one by @jonasschnelli .    Closing this issue.
2876	22734086	2013-08-15T22:01:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734086	gmaxwell	bluematt	ACK. I think we should pull this, but I also think pulltester should gain a reproduction of it. @bluematt  where are we keeping issues for the pulltester?
2874	22056639	2013-08-03T15:37:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22056639	fcicq	gmaxwell	@gmaxwell or only apply this check for incoming (mode == GMF_RELAY) tx? I think for relaying, (1+nsize/1k) * nMinRelayTxFee should be required.
2874	23223030	2013-08-25T06:56:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23223030	fcicq	jgarzik	@jgarzik @luke-jr @gmaxwell I no longer expect this to be merged. It may be still useful for pool operators as a new rule for tx relaying and should help reduce the mempool size, and not affecting most of legitimate normal tx that is smaller than 1k bytes. Thanks for reviewing.
2874	23223030	2013-08-25T06:56:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23223030	fcicq	luke-jr	@jgarzik @luke-jr @gmaxwell I no longer expect this to be merged. It may be still useful for pool operators as a new rule for tx relaying and should help reduce the mempool size, and not affecting most of legitimate normal tx that is smaller than 1k bytes. Thanks for reviewing.
2874	23223030	2013-08-25T06:56:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23223030	fcicq	gmaxwell	@jgarzik @luke-jr @gmaxwell I no longer expect this to be merged. It may be still useful for pool operators as a new rule for tx relaying and should help reduce the mempool size, and not affecting most of legitimate normal tx that is smaller than 1k bytes. Thanks for reviewing.
2872	22325930	2013-08-08T14:11:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22325930	Diapolo	laanwj	@laanwj Can you take a look?
2872	23147116	2013-08-23T07:09:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23147116	Diapolo	laanwj	Updated to revert the removal of NULL pointer checks to comply with @laanwj :).
2868	21885917	2013-07-31T18:47:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21885917	jgarzik	sipa	@sipa prefers not to put this in wallet.cpp, closing    (the ancestor pull req, miner separation, remains open and valid)
2868	21896491	2013-07-31T21:18:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21896491	sipa	CodeShark	Wow, I have influence!    Just to be clear, I do agree with the underlying issue of separating the wallet from the validation core, but IMHO the right way to do so is either by turning the wallet registration functions into boost signals, or by providing a CValidationEventListener in main.h that gets implemented in wallet.    Perhaps @CodeShark has an opinion about this?
2868	21916627	2013-08-01T06:09:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21916627	CodeShark	CodeShark	Heh, this sounds a little familiar.    Indeed I do have an opinion about this!    There is only one standard set of messages in bitcoin at present: the p2p protocol.    The p2p protocol is the backbone of the network and crucial for the tasks of validation and relay - but it is far too low level for pretty much any other kind of application (including big backend apps like block chain databases as well as wallet apps). A far better architecture would be to have a validation service running on a device which then can have other applications subscribe to it for updates. It would then be simple to insert filters, queues, etc... in order to provide client apps high-level structures that make the client-side logic as simple as possible and can guarantee proper synchronization and push notifications.    I believe it would be worthwhile to define some high level message types (and support serialization using protobuf, json, and perhaps other standards) and abstract some interfaces for pushing and subscribing to high level messages (i.e. block added to best chain, block removed from best chain, transaction in block with header and merkle path, etc). I've been working on something along these lines using a library I wrote - however, it would be far more powerful if we could standardize a set of message structures and interfaces.    From within the same process we could use something like signals (whether boost or otherwise, boost signals are quite resource-intensive but provide a lot of thread-safe features). But exactly how it's implemented is not nearly as important to agree on as the types of messages and the interfaces we use.    On Jul 31, 2013, at 2:18 PM, Pieter Wuille <notifications@github.com> wrote:    > Wow, I have influence!  >   > Just to be clear, I do agree with the underlying issue of separating the wallet from the validation core, but IMHO the right way to do so is either by turning the wallet registration functions into boost signals, or by providing a CValidationEventListener in main.h that gets implemented in wallet.  >   > Perhaps @CodeShark has an opinion about this?  >   >   > Reply to this email directly or view it on GitHub.  >
2864	21738715	2013-07-29T18:01:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21738715	dan-da	jgarzik	@jgarzik Thanks for the suggestion.    If core devs don't want the patch, no problem.  I am curious where this recommendation is to not expose RPC layer.   I don't see it on the wiki jsonrpc pages, <a href="https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list">here</a> or <a href="https://en.bitcoin.it/wiki/API_reference_%28JSON-RPC%29">here</a>.   Can you provide me a pointer?  thanks.
2860	21596774	2013-07-26T01:44:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21596774	fanquake	macd0g	@macd0g     Assuming you have Bitcoin-Qt in your Applications folder.    Open Terminal and type      open /Applications/Bitcoin-Qt.app --args -reindex
2859	21710930	2013-07-29T10:20:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21710930	Diapolo	gavinandresen	@gavinandresen Do you think a small dialog box (with the possibility to cancel startup), giving users the hint, that it's wise to start the client before using bitcoin: URIs would be worth to add to Bitcoin-Qt?
2859	21713097	2013-07-29T11:12:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21713097	gavinandresen	Diapolo	@Diapolo : No. The number of users who modify their shortcut to add command-line arguments is vanishingly small; bothering EVERY user with another dialog box for that tiny minority is the wrong thing to do.
2859	21720853	2013-07-29T13:49:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21720853	laanwj	gavinandresen.	I agree with @gavinandresen. Especially now that it is possible to change the data directory without passing a command line argument, it should not be needed to pass anything on the command line. Everything can be set either in the options dialog or, if not, in bitcoin.conf.
2856	21514322	2013-07-24T20:38:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21514322	Diapolo	jgarzik	@jgarzik Strange I'm missing your comment... anyway, this now only removes windows.h.
2852	22752789	2013-08-16T08:00:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22752789	petertodd	luke-jr	@luke-jr You're not going to get consensus-level behavior unless you use the same arithmetic as Bitcoin, which uses bigints, so you have no choice but to export an integer; that's exactly what my implementation exports.
2852	22756225	2013-08-16T09:23:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22756225	luke-jr	petertodd	@petertodd You're exporting an integer as a hexified String, rather than a JSON Number, which I think is what @sipa was suggesting.
2852	22756225	2013-08-16T09:23:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22756225	luke-jr	sipa	@petertodd You're exporting an integer as a hexified String, rather than a JSON Number, which I think is what @sipa was suggesting.
2852	22757528	2013-08-16T09:56:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22757528	petertodd	luke-jr	@luke-jr Right, but the problem there is that JSON numbers are kinda-sorta double-precision floats - matching Javascript semantics - and support for bigints is pretty spotty in libraries.    Also sipa was talking about making the number in "difficulty" units, with has a 2^32 factor, so you'd always wind up with floating point numbers. I haven't worked it out, but I wouldn't be surprised if double-precision floats aren't precise enough for consensus purposes.
2852	22808353	2013-08-17T09:06:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22808353	sipa	petertodd	@petertodd Do you have an actual use case where the full-precision chainwork is useful?
2852	22822367	2013-08-18T00:24:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822367	petertodd	sipa	@sipa Testing alt-implementations. chainwork is nasty, because subtle arithmetic mistakes in calculating it that only affect low-order bits are easy to not notice if any rounding is done anywhere, yet still can cause an (unlikely) fork. In addition it lets us easily compare different bitcoin versions to make sure we ourselves don't introduce any subtle mistakes.
2850	21605290	2013-07-26T07:19:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21605290	Diapolo	laanwj	@laanwj Can you take another look, I'm now checking for progress.
2845	21389160	2013-07-23T02:12:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389160	gmaxwell	grayleonard	@grayleonard   The extra loop with the "return ++nResult == 0;" is ... a little perplexing.  The % that sipa proposed (or the min)  should actually result in simpler looking code. Just move the length check to the end, and use the % to make sure that both only access valid indexes. Care to give it a shot?
2845	21389784	2013-07-23T02:35:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389784	gmaxwell	theuni	@theuni we're deep in pedantry land, but expecting very high accuracy sleeps results in sadness. It's perfectly possible to leak data through a sleep like that.
2845	21389930	2013-07-23T02:40:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389930	theuni	gmaxwell	@gmaxwell fair point on pedantry, but if you're on a system with <50msec sleep precision, i'd guess you'd have bigger concerns. In this case, it'd likely even spoil the very attack the evildoer is attempting.
2845	21394416	2013-07-23T05:47:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21394416	grayleonard	theuni	@theuni From what I've read it seems like there are two ways to mitigate timing attacks - one can hold all responses with a constant delay, say 50ms.  The other returns faster, I've seen ~10ms in this instance from tests I've run, with a constant-time comparison algorithm.  Either one works.    I'm not sure how soon 1.0 is going to be available, but if we are treating this as a vulnerability instead of a bug it's important we get it out as soon as possible, regardless of the technique we use.
2843	21407188	2013-07-23T11:13:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21407188	Diapolo	laanwj	I tried again yesterday and was not able to generate a block with Bitcoin-Qt :-/.    @laanwj Could you also try this?
2843	21538770	2013-07-25T08:01:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21538770	Diapolo	jgarzik.	Alright today I was able to mine 2 blocks via the internal miner.  blockhash: 000000007e965762bc7aef72f171d3e57387a33252e7caec72a1a76eca28de8  blockhash: 00000000889348cc14eb3336ce872bafe32c32217a4cfb673875ee2275ea8c27    I will close this, thanks for taking a look @jgarzik.
2842	21340438	2013-07-22T12:26:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21340438	petertodd	luke-jr	@luke-jr Fair enough, ACK.
2840	22822345	2013-08-18T00:22:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822345	sipa	Diapolo	@Diapolo It improves performance/throughput, by allowing more code to run without needing the cs_main lock, and conversely, holding that lock for a shorter time, so more other code can run in parallel.    At this point the improvements may not be noticable, but if we ever want a decently parallellizable core, we can't avoid doing this everywhere it's possible.
2838	21296479	2013-07-20T16:45:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21296479	gmaxwell	jgarzik	@jgarzik   he doesn't mean timing an actual authentication session, he means that even absent a user who knows the password an attacker who could reach the rpc port could analyze the timing of the rejections to derive the password one character at a time because the comparison shortcuts and thus returns faster when the error is at the front.    If you've exposed your rpc port to an attacker life is probably not good for you to begin with. But this should probably using a constant time comparison and also delay all failures. I'll look into it.
2837	21292243	2013-07-20T11:35:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292243	sipa	gavinandresen	@gavinandresen I would actually like having the payment protocol functionality be available via RPC - like sending a (potentially unsigned) payment request to bitcoind and asking it to give you a payment/signed transaction back. There's no need for having that in a first release though.    @Diapolo I haven't tested this yet, but looks good and if pulltester is happy, it's likely to be right. I'll try it soon.
2837	21292243	2013-07-20T11:35:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292243	sipa	Diapolo	@gavinandresen I would actually like having the payment protocol functionality be available via RPC - like sending a (potentially unsigned) payment request to bitcoind and asking it to give you a payment/signed transaction back. There's no need for having that in a first release though.    @Diapolo I haven't tested this yet, but looks good and if pulltester is happy, it's likely to be right. I'll try it soon.
2837	21331279	2013-07-22T08:42:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21331279	Diapolo	luke-jr.	Fixed a missing ``.c_str()``, thanks @luke-jr.
2837	21857884	2013-07-31T12:26:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21857884	Diapolo	gavinandresen	@gavinandresen Can you take a look, perhaps you can then remove the similar commit in your paymentrequest pull.  @sipa ping
2837	21857884	2013-07-31T12:26:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21857884	Diapolo	sipa	@gavinandresen Can you take a look, perhaps you can then remove the similar commit in your paymentrequest pull.  @sipa ping
2831	21072527	2013-07-16T20:49:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21072527	grahama	_;	Guys,    I'm really sorry, but this was my fault, I was doing (perl):    sub backupwallet {  my ($self, $param) = @_;  $self->raw({method => 'backupwallet', param => [$param]});  }    I should have been "params" not "param" :(    I was unable to detect this typo because the server threw a 500 and did not return a JSON error code, which I would have expected, maybe something like RPC_INVALID_PARAMETER or RPC_INVALID_PARAMS.    Once again sorry,  BTW: I'm running the binary Linux x64 from bitcoin.org, as I cannot compile it as I'm running Fedora 14 and it's openssl does not support some features see https://bugzilla.redhat.com/show_bug.cgi?id=319901    BTW: if there is anyone in bitcoin development that could read the last comment on that bug and maybe help out on the legal question, bitcoin would eventually find it's way into every RHEL/Fedora distribution which would widen the bitcoin community somewhat.    Albert
2830	21696294	2013-07-29T02:11:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21696294	petertodd	sipa	@sipa Actually bitcoind can spend any P2SH-encoded scriptPubKey that it knows how to spend, so you can (currently) put a pay-to-pubkey or a pay-to-pubkey-hash in redeemScript and things will work fine. In any case I think the feature of adding arbitrary redeemScripts makes the most sense in the context of watch-only-wallets where the actual mechanism to spend the coins can be handled elsewhere.
2830	24370141	2013-09-13T02:52:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24370141	gmaxwell	petertodd	@petertodd  Can you remove addredeemscript for now since it seems like the watch stuff is currently delayed?
2829	21664080	2013-07-27T11:29:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21664080	sipa	simondlr	@simondlr Of course.
2829	21664672	2013-07-27T12:24:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21664672	simondlr	sipa	@sipa Awesome! Looking forward to it.
2829	22735127	2013-08-15T22:20:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735127	sipa	gavinandresen	@gavinandresen @jgarzik @gmaxwell Opinions?
2829	22735127	2013-08-15T22:20:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735127	sipa	jgarzik	@gavinandresen @jgarzik @gmaxwell Opinions?
2829	22735127	2013-08-15T22:20:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735127	sipa	gmaxwell	@gavinandresen @jgarzik @gmaxwell Opinions?
2827	21232475	2013-07-19T05:44:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21232475	Diapolo	laanwj	@laanwj That IS a good idea, thanks.
2827	21244463	2013-07-19T11:21:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21244463	Diapolo	laanwj	@laanwj Can you take another look :)?
2827	22090543	2013-08-05T07:20:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22090543	Diapolo	laanwj	@laanwj Did you test the patch yet?
2824	22232835	2013-08-07T06:49:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22232835	K1773R	sipa	@sipa its only usefull if you forgot to run with -rescan so you dont have to stop + start again, anyone editing the wallet while bitcoind is running is stupid. id say this new RPC call would atrract alot of ppl exactly doing this, therefore its not a that good idea.
2818	21091775	2013-07-17T04:36:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091775	Michagogo	Luke-Jr	@Luke-Jr What weight would you suggest? I just didn't really know how much  the community feels that my signature would be meaningful. (note that an  updated PR would need to wait until my computer is back from repair, about  a week or so)    On Wednesday, July 17, 2013, Luke-Jr wrote:    > IMO, either the weight needs to be increased or it should wait until there  > are enough other keys that this makes a difference. At weight 1, I don't  > think it's possible for gitian-downloader to ever act on it.  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2818#issuecomment-21091327>  > .  >      --   Sent from Gmail Mobile
2814	23534691	2013-08-30T01:06:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23534691	petertodd	luke-jr	@luke-jr FWIW sipa has told me that his headers first patch changes a lot of the code that this mempool patch touches, so I'm going to wait until he's done that before working on this further.
2812	20428647	2013-07-03T16:41:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20428647	jgarzik	luke-jr	@luke-jr That is actually another todo item.  Getting an entire, raw block is difficult, potentially impossible without -txindex.  This is frustrating, because the data is certainly available to bitcoind.    I've been planning a 'getrawblock <hash>' RPC pull request for this reason.
2812	20429787	2013-07-03T16:59:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20429787	luke-jr	jgarzik	@jgarzik Well, getting the raw data is already possible with getblock. But getting the fully detailed data for all the transactions was removed back after getblock got added...
2809	20333857	2013-07-02T08:48:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20333857	wlch	laanwj's	In response to @laanwj's earlier comment, the last bar in the connection icon has been tweaked to make it appear less dark against the gray status bar.
2809	20483127	2013-07-04T15:37:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20483127	wlch	wtogami	@wtogami Closed just until I've had the time to make a few more modifications; I'll re-open once I've done.
2808	22438713	2013-08-10T12:10:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22438713	Diapolo	laanwj	@laanwj Do we still maintain bitcoin-qt.pro after that autotools stuff got merged? I'm a bit sceptical about it, because I never worked with it and I feel comfortable with our .pro file ^^.
2806	27152933	2013-10-26T18:51:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27152933	sipa	M4v3R	@M4v3R In addition to #3162, does removing the 'const' before the declaration of 'std::locale loc' help?
2806	27722495	2013-11-04T21:05:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27722495	nvmd	sipa	@sipa Yes, it helps. I've just created a pull request #3198
2805	20533093	2013-07-05T18:36:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20533093	theuni	jgarzik	@jgarzik @laanwj @sipa ping. Any comments?
2805	20533093	2013-07-05T18:36:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20533093	theuni	laanwj	@jgarzik @laanwj @sipa ping. Any comments?
2805	20533093	2013-07-05T18:36:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20533093	theuni	sipa	@jgarzik @laanwj @sipa ping. Any comments?
2805	20570245	2013-07-07T12:48:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570245	sipa	laanwj	Changes look good to me, except that I do not want to maintain two build systems in parallel. If we switch to autotools, we switch, and the existing makefiles go away. Gitian determinism can be fixed later (though just builds should be verified to work). Unfortunately; I can't test myself now (I'm not at home).    About -Qt, you'll want an ACK from @laanwj     I have no opinion about recursive makefiles or not.
2805	21166438	2013-07-18T07:11:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21166438	luke-jr	laanwj	I don't think anyone considers this an obstacle to merging. I believe that is just waiting on @laanwj at this point.
2805	21519185	2013-07-24T21:54:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21519185	theuni	jgarzik	@jgarzik good suggestion on bitcoin-configh.h, thanks. Done. As for the header order, I've changed it as requested, though I would disagree and say that if (in-project) include order matters, something else is broken somewhere. But that's way out of scope here :)
2805	21519668	2013-07-24T22:00:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21519668	theuni	jgarzik	@jgarzik as for BitcoinPullTester, I'm not sure. It seems to have a hard-coded build process. If that's the case, it should change to:  ```  ./autogen.sh && ./configure && make check  ```
2804	20233639	2013-06-29T17:22:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233639	sipa	johndillon	@johndillon The tar file is generated by git, and there's no source of randomness (the owner is set to root, the timestamps are equal to that of the last commit, and files are sorted alphabetically) as far as I can see - though this can obviously change in newer git versions. So it could be done inside gitian, I suppose, as that guarantees a consistent version of git to generate it.
2804	20234132	2013-06-29T17:55:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20234132	johndillon	sipa	@sipa Provided that is true I'll ACK this patch.    In some ways making it easier for distribution managers to distribute Bitcoin anything bothers me in that they represent a very real risk of compromise with very high rewards, but if they are going to do so this is a reasonable thing to provide.
2804	20249229	2013-06-30T15:49:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20249229	sipa	luke-jr	@luke-jr But the released .zip and .tar.gz files have hashes signed by gitian. True, the entire source tree is signed as well, but being able to just compare the hash on a single .tar.xz is certainly easier.
2802	20210877	2013-06-28T19:59:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20210877	sipa	petertodd	@petertodd Thanks for catching those two comments.    There is a count and a skip argument, so you can paginate results (the database is queried each time, but the relevant transactions are only read from disk when actually requested).
2802	20211322	2013-06-28T20:07:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211322	sipa	petertodd	@petertodd They are in increasing position on disk, which for now corresponds to number of confirmations (except for transactions in sidechains - yes, those are returned too). I could just reverse the order, I guess.    One problem for the future is that when we'll have headers-first sync and parallel block downloading, block order on disk won't be necessarily consistent anymore with chain order. A solution is of course fetching all blocks, and sorting them by confirmations before pagination, but that's a very significant overhead. Another solution is storing the height of each entry in the index...
2802	20211821	2013-06-28T20:17:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211821	sipa	petertodd	@petertodd What I want it for is an easy local blockexplorer. And the nice thing about the block tree (and all its indexes) is that they're append only, which is easy implementation-wise.    I agree an address index to the UTXO is useful too, and probably less controversial. It's not implemented however :)
2802	20212066	2013-06-28T20:22:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20212066	sipa	petertodd	@petertodd Also, searching the UTXO set by address would have a very different interface anyway, as it's a set of transaction outputs, not a set of transactions. It wouldn't make sense in the same RPC command, IMHO.
2802	20213052	2013-06-28T20:41:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20213052	petertodd	sipa	@sipa Good point.    Well, seems to me that for a blockexplorer simply being able to iterate forward and reverse should be enough for the UI, and at worse you can add the height index later when the order guarantee breaks. In that case:    ```  searchrawtransactions <address> [skip=0] [count=100] [verbose=1]    Return count transactions with <address> present in their scriptSig,  skipping skip at the beginning. The ordering is oldest transaction first;  if skip is negative the order returned is newest transaction first and skip+1  transactions are skipped. If verbose=0 only txids are returned rather than  the full transactions.  ```
2802	20226989	2013-06-29T09:22:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20226989	sipa	luke-jr	@luke-jr More seriously, every index entry adds around 10 bytes, and given the current amount of address reuse, those constitute the majority of the database. I've considered adding the entire script too, but that would mean a 50% increase (or more) because of that reason. Plus, if you know the full script, just pick the largest data push in it, and search for that.
2802	20228344	2013-06-29T11:26:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20228344	sipa	petertodd	@petertodd There is an alternative implementation possible, where we store (height, txoffset) for each index entry instead of (filenum, blockoffset, txoffset) - That's smaller too, and allows consistent ordering. The downside is that it can't support side-chain matches, as heights are not unique.
2802	20232937	2013-06-29T16:38:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232937	luke-jr	sipa	@sipa I meant the 64-bit hash *instead* of the current 64-bit key. Any address can be converted to a script and hashed just fine.
2802	20232958	2013-06-29T16:39:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232958	johndillon	mikehearn	@mikehearn If you can't offer a feature in a decentralized way with reasonably low resource consumption you should be happy that centralized services pop up and offer it instead.    If you want to be useful design an API that allows you to pay via micro-transactions those resources you are using by querying a node that has gone to the expense of using @sipa's code to maintain a blockchain index. It would be easy to add this as a service bit and use preferential peering to make it possible for nodes to find peers supporting that API. Such a system would still be decentralized and resource consumption would be paid for in a fair and equitable way.    You do after have a brand new micro-transactions system...
2802	20232958	2013-06-29T16:39:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232958	johndillon	sipa's	@mikehearn If you can't offer a feature in a decentralized way with reasonably low resource consumption you should be happy that centralized services pop up and offer it instead.    If you want to be useful design an API that allows you to pay via micro-transactions those resources you are using by querying a node that has gone to the expense of using @sipa's code to maintain a blockchain index. It would be easy to add this as a service bit and use preferential peering to make it possible for nodes to find peers supporting that API. Such a system would still be decentralized and resource consumption would be paid for in a fair and equitable way.    You do after have a brand new micro-transactions system...
2802	20233027	2013-06-29T16:43:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233027	sipa	luke-jr	@luke-jr That doesn't allow you to query pay-to-pubkeys given the corresponding address.
2802	20233092	2013-06-29T16:47:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233092	sipa	mikehearn	@mikehearn I'll agree to have an address index exposed to the P2P network if it can be done in an authenticated way, like Alan Reiner's proposal for exposing an address-indexed committed merkle tree, and even then only for the UTXO set, and not the entire history.    I'm completely opposed to providing any service on the P2P network that requires the entire history being available, except bootstrapping a new full node.
2802	20233111	2013-06-29T16:48:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233111	johndillon	sipa	@sipa My preference would be to support the full (filenum, blockoffset, txoffset) set myself. Whatever the additional space used is it doesn't seem like a big deal once you've decided to go to the effort of creating the index in the first place. Hard-drive space is cheap.    Incidentally, it does speak to how it would be useful to be able to iterate over every block stored, *including* orphans, and be able to deliberately add orphans to your database even after the fact. Heh, timestamp your orphan blocks and it would even be reasonable to maintain a set of every orphan ever created after the fact *while* allowing users to submit new blocks to this database even far into the future. (the timestamp is the anti-spam measure)
2802	20233141	2013-06-29T16:50:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233141	luke-jr	sipa	@sipa Neither does the specialized form you're suggesting...?
2802	20233169	2013-06-29T16:52:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233169	johndillon	luke-jr	@luke-jr It does because every PUSHDATA > 20 bytes is indexed by first computing Hash160(data).    Even individual multisigs in a bare OP_CHECKMULTISIG can be searched for as @petertodd pointed out.
2802	20233169	2013-06-29T16:52:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233169	johndillon	petertodd	@luke-jr It does because every PUSHDATA > 20 bytes is indexed by first computing Hash160(data).    Even individual multisigs in a bare OP_CHECKMULTISIG can be searched for as @petertodd pointed out.
2802	20233312	2013-06-29T17:01:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233312	petertodd	sipa	@sipa I'll second @johndillon's thoughts on the full (filenum, blockoffset, txoffset) index.    Clever idea re: an orphan database... It'd be useful to have an index of all children for a given block too, but that can be a different pull-req; by that point we'll have a -all-blockchain-indexes flag...
2802	20233312	2013-06-29T17:01:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233312	petertodd	johndillon's	@sipa I'll second @johndillon's thoughts on the full (filenum, blockoffset, txoffset) index.    Clever idea re: an orphan database... It'd be useful to have an index of all children for a given block too, but that can be a different pull-req; by that point we'll have a -all-blockchain-indexes flag...
2802	20233493	2013-06-29T17:12:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233493	sipa	petertodd	@petertodd To have a consistent ordering, we'd need (filenum, blockoffset, txoffset, height) even.
2802	21293216	2013-07-20T13:06:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21293216	sipa	petertodd.	Rebased and fixed the bugs reported by @petertodd.
2802	21643695	2013-07-26T19:43:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21643695	sipa	petertodd	@petertodd Feel free to test the pageability now.
2802	21647791	2013-07-26T20:59:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21647791	petertodd	sipa	@sipa Will do after my litecoin audit's done.
2802	26709584	2013-10-21T11:31:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26709584	sipa	petertodd),	Seems there is a not-understood problem at least (as reported by @petertodd), and I don't plan to work on this any time soon.
2802	26713080	2013-10-21T12:36:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26713080	laanwj	63	@63 if you care a lot about this, why not pick it up yourself and try to resolve the remaining issue and submit a pull?
2796	20571985	2013-07-07T15:03:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20571985	gmaxwell	TheBlueMatt	@TheBlueMatt  No it doesn't. I promise.
2791	20041961	2013-06-26T11:56:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20041961	jgarzik	Mazo	@Mazo None.  The blockchain continues to store every single transaction, from 2009 through eternity.
2791	20614082	2013-07-08T15:35:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20614082	petertodd	sipa	@sipa @TheBlueMatt I added tests for attempting to spend OP_RETURNS, including with IF's and similar, to the unit tests actually. I agree there should be tests to ensure they don't end up in the UTXO set though.
2791	20614082	2013-07-08T15:35:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20614082	petertodd	TheBlueMatt	@sipa @TheBlueMatt I added tests for attempting to spend OP_RETURNS, including with IF's and similar, to the unit tests actually. I agree there should be tests to ensure they don't end up in the UTXO set though.
2791	20711109	2013-07-09T22:51:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20711109	sipa	petertodd	@petertodd @TheBlueMatt I agree we need tests to verify that such unspendable outputs don't end up in the UTXO set, but I disagree it should be part of pulltester. This does not affect network interaction, but is a client-side optimization.
2791	20711109	2013-07-09T22:51:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20711109	sipa	TheBlueMatt	@petertodd @TheBlueMatt I agree we need tests to verify that such unspendable outputs don't end up in the UTXO set, but I disagree it should be part of pulltester. This does not affect network interaction, but is a client-side optimization.
2791	20732918	2013-07-10T10:12:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20732918	TheBlueMatt	TheBlueMatt	The point of adding it to pull-tester is that if it is done wrong, it is network interaction.  Pieter Wuille <notifications@github.com> wrote: >@petertodd @TheBlueMatt I agree we need tests to verify that such >unspendable outputs don't end up in the UTXO set, but I disagree it >should be part of pulltester. This does not affect network interaction, >but is a client-side optimization. > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20711109
2791	20774728	2013-07-10T21:28:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20774728	sipa	TheBlueMatt	@TheBlueMatt Just to be clear: I'm all for adding tests to pulltester intended to trigger edge cases related to handling of provably-unspendable outputs. I'm just not in favor of making pulltester use more than the P2P interface for testing (i.e., making it a whitebox rather than blackbox test) - tests for checking that unspendable outputs do not end up in the UTXO set are for unit tests, not for network interaction testing.
2791	20935344	2013-07-14T11:59:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20935344	sipa	petertodd	@petertodd That's my point - anyone in the network only cares whether your script/verification implementation is correct. Only you care about whether it's not using more storage than necessary.    I prefer the block-acceptance tests to remain implementation-independent, so it can remain as generic as possible, and be used to find bugs that could lead to non-convergence - not only for bitcoind/bitcoin-qt. If another implementation chooses not to implement pruning, that's their choice. Sure, it would change the economics of the system as a whole, but it's not a network rule violation to do so.    Of course, if a some form of committed-UTXO-set-in-coinbase is ever added, the actual UTXO set becomes observable to the network rules, and this changes of course.    We need unit tests for verifying that provably-unspendable outputs do not end up in the UTXO set though.
2791	21257372	2013-07-19T15:36:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21257372	petertodd	gmaxwell	@gmaxwell sounds like a good idea to me. The canary txout should be the first op_return in the chain of course.
2791	21295037	2013-07-20T15:14:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21295037	jgarzik	sipa	@sipa ACK.  Definitely output the flag via gettxsetinfo.
2791	21340353	2013-07-22T12:24:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21340353	petertodd	sipa	@sipa A flag sounds like less work, and few people would be affected, so go ahead and do it that way.    The important thing is to give users an understanding of why two different UTXO hashes don't match. Maybe add a UTXO version number, and just increment it every time we change something? IMO it's fine to have a meta version -1 that gets set if you run some dev code that puts the UTXO database in a bad state or have a flag called "utxo-consistent" that is unset in that case.
2789	19897767	2013-06-24T09:49:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19897767	sipa	laanwj	@laanwj Ok, introduced a DUMP_ADDRESSES_INTERVAL in net.cpp.  @gmaxwell Made it sleep once before the first execution.
2789	19897767	2013-06-24T09:49:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19897767	sipa	gmaxwell	@laanwj Ok, introduced a DUMP_ADDRESSES_INTERVAL in net.cpp.  @gmaxwell Made it sleep once before the first execution.
2789	19907912	2013-06-24T13:52:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19907912	jgarzik	sipa	@sipa Where is the discussion for the sleep change?  For a general facility, such as the one you are changing, it seems a valid use to directly begin execution.    Putting the sleep first strikes me as a hack-y approach to a problem, that does not belong in a generic facility.  People in the Linux kernel routinely jigger sleep delays to paper over driver problems ;p
2789	19908018	2013-06-24T13:54:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19908018	sipa	jgarzik	@jgarzik It's the only place where LoopForever is used. So yes, I'm changing its semantics, but I think both cases are meaningful, and only the one actually used is implemented.
2788	19876591	2013-06-23T16:29:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876591	Diapolo	sipa	@sipa https://github.com/bitcoin/bitcoin/blob/master/src/bitcoind.cpp#L70 What about this?
2788	19876686	2013-06-23T16:35:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876686	sipa	Diapolo	@Diapolo Ah, that's for the RPC client, not for bitcoind's normal functions.
2788	19876867	2013-06-23T16:45:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876867	Diapolo	sipa	@sipa Could we then place that call (``SelectParamsFromCommandLine()``) here for bitcoind to work in all vairants?  https://github.com/bitcoin/bitcoin/blob/master/src/bitcoind.cpp#L39
2781	19783462	2013-06-20T21:08:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19783462	sipa	jgarzik	@jgarzik Commits exist at the git level, pull requests at the github level. A commit referring to something in github namespace makes no sense to me.
2779	19718237	2013-06-19T22:01:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19718237	sipa	jgarzik	@jgarzik CWallet::AddCryptedKey overrode CKeyStore::AddCryptedKey; since #1863 it does no longer, so the newly encrypted keys never get written. The easy solution is adding the timestamp to CKeyStore::AddCryptedKey, but that is sorta ugly... (it's data the keystore shouldn't care about).
2779	19718628	2013-06-19T22:08:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19718628	sipa	jgarzik	@jgarzik Thinking a bit more, also about how CKeyMeta will get used for more than just birthdates (BIP32 in particular), how about this:  * Key metadata is kept in a CWallet::mapKeyMetaData (std::map<CKeyId,CKeyMeta)  * When generating a new key, time is put in that map, and new key is written  * AddKey and AddCryptedKey do not take a creation time argument, but instead pull it from that map, if it exists there.    This will make it easier to store key metadata along with the key itself in a wallet format update (avoiding repeating the pubkeys 3 times - once for the key, once for the keypool, once for the metadata).
2776	20004477	2013-06-25T20:24:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20004477	jgarzik	sipa	Updated per @sipa suggestion.
2772	19501612	2013-06-15T19:01:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19501612	sipa	molecular	@molecular When starting bitcoind, what is the first line being written to debug.log?
2767	19445776	2013-06-14T08:46:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19445776	laanwj	gmaxwell	@gmaxwell From what I understand this does not duplicate anything. It does pre-declare classes, but that only consists of the name and nothing more.    At first glance this seems like a lot of changes, but it's almost entirely restricted to the #include portion of files. The only substantial code move is moving WalletDB.h functions to its implementation file.    There's problems with compiling the tests after this, though (see pulltester output).        test/script_tests.cpp: In function 'CScript ParseScript(std::string)':      test/script_tests.cpp:47: error: 'replace_first' was not declared in this scope
2767	19448075	2013-06-14T09:42:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19448075	sipa	CodeShark	I'm generally in favor of cleanups like this, and it indeed seems pure code movement + include changes.    However:  * Some changes seem not up-to-date with recent refactors (see inline comments)  * I'm not sure I like the increased use of forward declarations. They don't remove actual code dependencies, but they hide them. Of course we're already using them, and the compilation performance improvements it gives may be worth it. Other devs opinions?  * Regarding uint64 and int64: I'd prefer including stdint.h and using int64_t and uint64_t instead, over redeclaring them all over the place.    @CodeShark Mind taking a look at this? Does it interfere with the dependencies cleanup?
2767	19525341	2013-06-17T03:52:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19525341	luke-jr	brandondahler	@brandondahler Simply replacing [u]int64 types with stdint will probably break something - we tried this like a year ago and had to revert it :(
2767	19525403	2013-06-17T03:55:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19525403	brandondahler	luke-jr	@luke-jr It was a non-negligable change, but it did compile and pass tests on my linux machine.  Was the issue with compiling on other architectures?
2767	21076670	2013-07-16T21:46:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21076670	luke-jr	brandondahler	@brandondahler Reviewing logs, it looks like it didn't build on 64-bit Fedora. I don't believe we ever fully diagnosed the reason, but:  ```  [Wednesday, December 21, 2011] [3:15:25 PM] <jgarzik>   serialize.h: In function unsigned int GetSerializeSize(int64  _t, int, int):  [Wednesday, December 21, 2011] [3:15:26 PM] <jgarzik>   serialize.h:139:21: error: redefinition of unsigned int GetS  erializeSize(int64_t, int, int)  [Wednesday, December 21, 2011] [3:15:26 PM] <jgarzik>   serialize.h:137:21: error: unsigned int GetSerializeSize(lon  g int, int, int) previously defined here  [Wednesday, December 21, 2011] [3:15:38 PM] <jgarzik>   tree is full of broken  [Wednesday, December 21, 2011] [3:16:18 PM] Join        larsivi has joined this channel (~quassel@188.113.74.106).  [Wednesday, December 21, 2011] [3:16:25 PM] <jgarzik>   luke-jr: ^^  [Wednesday, December 21, 2011] [3:16:29 PM] <luke-jr>   jgarzik: works fine here  [Wednesday, December 21, 2011] [3:16:56 PM] <jgarzik>   luke-jr: totally broke Fedora build (g++ 4.6.1)  [Wednesday, December 21, 2011] [3:17:05 PM] <jgarzik>   luke-jr: on 64-bit  [Wednesday, December 21, 2011] [3:17:32 PM] <jgarzik>   luke-jr: breakage is obvious.  64-bit platforms define int64_t==long int  [Wednesday, December 21, 2011] [3:17:49 PM] <luke-jr>   jgarzik: 4.5.3 here  [Wednesday, December 21, 2011] [3:18:31 PM] <jgarzik>   'int foo(int64_t)' is the same as 'int foo(long)'  ```
2767	23488877	2013-08-29T13:28:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488877	Diapolo	jgarzik	I also like the intention of this pull, can you rebase and perhaps follow @jgarzik so we can differentiate the type-changes and the cleanup changes :).    Edit: Also a merge-speedup is possible, if you create a Qt-only and a core-only pull, as @laanwj is able to merge Qt-pulls much faster than core changes.    Edit 2: @laanwj Any objection, to start using quint64 or qint64 in Qt code? Perhaps that could also be a scope of a separate Qt pull.
2767	23488877	2013-08-29T13:28:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488877	Diapolo	laanwj	I also like the intention of this pull, can you rebase and perhaps follow @jgarzik so we can differentiate the type-changes and the cleanup changes :).    Edit: Also a merge-speedup is possible, if you create a Qt-only and a core-only pull, as @laanwj is able to merge Qt-pulls much faster than core changes.    Edit 2: @laanwj Any objection, to start using quint64 or qint64 in Qt code? Perhaps that could also be a scope of a separate Qt pull.
2767	23488877	2013-08-29T13:28:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488877	Diapolo	laanwj	I also like the intention of this pull, can you rebase and perhaps follow @jgarzik so we can differentiate the type-changes and the cleanup changes :).    Edit: Also a merge-speedup is possible, if you create a Qt-only and a core-only pull, as @laanwj is able to merge Qt-pulls much faster than core changes.    Edit 2: @laanwj Any objection, to start using quint64 or qint64 in Qt code? Perhaps that could also be a scope of a separate Qt pull.
2767	24034659	2013-09-09T01:41:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24034659	brandondahler	gavinandresen	@gavinandresen: Are you sure?  First two errors for last log are:        leveldb.h:11:24: error: leveldb/db.h: No such file or directory      leveldb.h:12:33: error: leveldb/write_batch.h: No such file or directory    I think I kicked off the last update by updating my original comment.
2767	24035486	2013-09-09T02:19:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24035486	gavinandresen	gavinandresen	Am I sure pull-tester is working?  Yes, see  http://jenkins.bluematt.me/pull-tester/102518fdb711b646dec8f0cc26fa170364bf2e0b/test.logfor  a successful pull-test from 2 hours ago.      On Mon, Sep 9, 2013 at 11:41 AM, Brandon Dahler <notifications@github.com>wrote:    > @gavinandresen <https://github.com/gavinandresen>: Are you sure? First  > two errors for last log are:  >  > leveldb.h:11:24: error: leveldb/db.h: No such file or directory  > leveldb.h:12:33: error: leveldb/write_batch.h: No such file or directory  >  > I think I kicked off the last update by updating my original comment.  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2767#issuecomment-24034659>  > .  >        --   --  Gavin Andresen
2767	24474671	2013-09-15T16:32:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474671	sipa	brandondahler	@brandondahler Sure, no need to fix everything. But I'll help avoiding introducing more of them.
2767	28144493	2013-11-10T05:32:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28144493	brandondahler	sipa	Address @sipa comments.  I think most of the main.h problems were caused by rebasing/merging so many times.
2766	19444539	2013-06-14T08:12:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19444539	theuni	wtogami	@wtogami did a quick test with this and confirmed that it solved the hang. Could you please verify that it's completely fixed?
2766	19447316	2013-06-14T09:24:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19447316	wtogami	theuni	@theuni Seems great in my Fedora native builds now.  I enjoy not needing kill -9 to quit bitcoin-qt.  Haven't tested with gitian builds, but it seems from the simplicity of this patch that it shouldn't be a problem.
2753	20501739	2013-07-05T05:20:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20501739	fanquake	medoix	@medoix 0.8.3-beta is the same as 0.8.2-beta with the only change being the transaction patch. As @jonasschnelli mentioned 0.8.2-beta didn't contain the fix as it was merged after the 0.8.2 branch was created. It will be included in 0.9.0-beta, or possibly earlier if we see another 0.8.x release.
2753	20501739	2013-07-05T05:20:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20501739	fanquake	jonasschnelli	@medoix 0.8.3-beta is the same as 0.8.2-beta with the only change being the transaction patch. As @jonasschnelli mentioned 0.8.2-beta didn't contain the fix as it was merged after the 0.8.2 branch was created. It will be included in 0.9.0-beta, or possibly earlier if we see another 0.8.x release.
2750	23490233	2013-08-29T13:47:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23490233	Diapolo	jgarzik	@jgarzik Can you take a look at this again :)?
2750	25550094	2013-10-02T15:47:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25550094	jgarzik	mikehearn	@mikehearn  "don't care about this enough to continue rebasing and maintaining it"  Following Gavin's ACK, more work was piled on top.  Not interested in constant rebasing on top of someone else's code as suggested up-thread.
2749	19144754	2013-06-08T07:41:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19144754	laanwj	sipa	@sipa It's only one line of code change, the rest is ui markup :smile:    @subSTRATA yes it could be useful to query the total of subsets of transactions, this is also requested in #627
2749	19144754	2013-06-08T07:41:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19144754	laanwj	subSTRATA	@sipa It's only one line of code change, the rest is ui markup :smile:    @subSTRATA yes it could be useful to query the total of subsets of transactions, this is also requested in #627
2748	19117292	2013-06-07T16:21:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19117292	sipa	gmaxwell	One (potential) nit: several of the M4 files are GPL licensed (with a special exception); I don't know enough about licensing issues, but perhaps this impacts our source distribution? @gmaxwell @luke-Jr comments?
2748	19117292	2013-06-07T16:21:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19117292	sipa	luke-Jr	One (potential) nit: several of the M4 files are GPL licensed (with a special exception); I don't know enough about licensing issues, but perhaps this impacts our source distribution? @gmaxwell @luke-Jr comments?
2748	19135561	2013-06-07T22:06:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19135561	theuni	jgarzik	@jgarzik   1. Sure, I'll squash down if/when reviewers sign-off. It was pushed this way so that the code-changes are easy to review separate from the buildsystem ones.    2. I used a single makefile in order to make life easier for qt-creator users. How firm are you on the split?  Agreed about the test-data. Will change it.
2748	19135674	2013-06-07T22:09:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19135674	theuni	laanwj	@laanwj I suppose there's no real reason, it just made more sense to me this way. One current issue with moving to the top would mean that the .pro file would have to move (if it's kept around after autotools merge), since it produces a Makefile that would conflict.
2748	19135941	2013-06-07T22:17:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19135941	theuni	sipa	@sipa the gpl in those files is effectively meaningless. Since they're always distributed in source-form, and resulting scripts are exempt from infection, the only way to violate would be to strip the attribution (which would violate MIT as well). So the net effect here is effectively nil.
2748	19138492	2013-06-07T23:33:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19138492	laanwj	theuni	@theuni just assume that either the .pro will be used or the autotools build system, not both in parallel, so the makefiles won't get in each others way.   I'd prefer the configure script to be at the top level, but others may disagree...
2748	19497533	2013-06-15T14:45:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19497533	sipa	laanwj	Just a generic comment: I'm strongly in favor of moving towards a real build system, but under the condition that we switch entirely. I wouldn't want to retain both the old and the new, and needing to maintain them both. So, as soon as this can be used to build on linux/linux-mingw/osx/win32, and the gitian builds work, I'm fine with merging. Perhaps @laanwj wants to retain the .pro file, but assuming the autotools plugin to Qt Creator is powerful enough, I'd rather get rid of it.
2748	19501389	2013-06-15T18:48:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19501389	theuni	warren	Ok. I'm working on the reorg concerns above, I didn't have much time to get to it this week. In the meantime, though, @warren has helped me to get the gitian descriptors up and running for win32, and linux should be easy after that.    I've gotten the same vibe from the others, so I'll finish up with the impression that back-compat is not needed. Also, @laanwj said he is ok with figuring out some solution for himself for the .pro file, so I'll not concern myself with that either.
2748	19501389	2013-06-15T18:48:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19501389	theuni	laanwj	Ok. I'm working on the reorg concerns above, I didn't have much time to get to it this week. In the meantime, though, @warren has helped me to get the gitian descriptors up and running for win32, and linux should be easy after that.    I've gotten the same vibe from the others, so I'll finish up with the impression that back-compat is not needed. Also, @laanwj said he is ok with figuring out some solution for himself for the .pro file, so I'll not concern myself with that either.
2748	20231511	2013-06-29T15:14:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20231511	sipa	theuni	@theuni Hi, any updates about this?    There have been a few refactors lately, which may impact this work (core.cpp/h and chainparams.cpp/h were added), but I think the largest changes are over now.    I'd really like to see this merged.
2748	20243679	2013-06-30T07:51:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20243679	theuni	sipa	Hi @sipa     I've been very occupied for the last few weeks, sorry for the lack of updates here. I have a branch that splits out the makefiles as requested. Personally I think it's a sizable regression, but I'm ok with that if it's what it takes to get it merged.    I'll try find some time tomorrow to push up a rebased branch for review round2.
2748	20249291	2013-06-30T15:51:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20249291	sipa	theuni	@theuni Great, no actual hurry - I just wouldn't like this work to get lost.
2747	19117836	2013-06-07T16:31:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19117836	sipa	jgarzik.	Agree with @jgarzik. ACK otherwise.    EDIT: hmm, it seems getrawtransaction uses 0/1 for verbose... meh
2747	19120821	2013-06-07T17:24:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19120821	luke-jr	jgarzik	Indeed... Boolean does make more sense, but usually consistency wins so far. Otherwise, we should be using Satoshi values everywhere...    @jgarzik Any further thoughts? Agree/disagree?
2741	18954342	2013-06-05T03:59:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18954342	theuni	jonasschnelli	ping @jonasschnelli for review
2741	18960125	2013-06-05T07:38:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18960125	jonasschnelli	theuni	Yes. My fault. Sorry guys. thanks @theuni
2740	18993602	2013-06-05T17:31:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18993602	luke-jr	laanwj	@laanwj How is it non-standard? The specification seems to say raw UTF-8 is standard and parsers must handle it...
2740	19006665	2013-06-05T20:35:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19006665	constantined	jgarzik	> @jgarzik commented on 370df18  >"now builds on unix" tells us nothing about the commit: why it was needed -- because it builds on "unix" here, what needed changing etc. Suggested commit message:    >makefile.unix: link with boost_chrono to fix build on [your platform]    Sorry, it was my own issue. Solved by upgrading boost libs from v1.52  to v1.53.
2740	21362098	2013-07-22T17:46:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21362098	Diapolo	jgarzik	@jgarzik Seems like a good thing to do.    Also I hope the new json_spirit version fixes a compiler warning I get:    <pre>  \src\json\json_spirit_writer_template.h:31: Warnung:typedef 'Char_type' locally defined but not used [-Wunused-local-typedefs]           typedef typename String_type::value_type Char_type;                                                    ^  </pre>
2740	21390018	2013-07-23T02:44:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21390018	constantined	jgarzik	@jgarzik Done.  @Diapolo Can't reproduce this warning on master branch. gcc-4.7.3, GNU/Linux.
2740	21390018	2013-07-23T02:44:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21390018	constantined	Diapolo	@jgarzik Done.  @Diapolo Can't reproduce this warning on master branch. gcc-4.7.3, GNU/Linux.
2740	21395714	2013-07-23T06:32:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21395714	Diapolo	constantined	@constantined I also did not have that error with MinGW < 4.8.1, but perhaps latest json_spirit fixes this anyway :).
2738	19009171	2013-06-05T21:15:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19009171	petertodd	gmaxwell	The current UI has no mechanism to show the user any messages in any OP_RETURN outputs, so I don't think we'll see people using OP_RETURN for stuff that would be better done with the payment protocol. What we do need is an alternative to data and hashes in unspendable outputs so we can nudge the users using Bitcoin for timestamping and similar things towards methods that are less harmful.    I'm still of the opinion that using OP_RETURN should always be as easy and cheap as creating an unspendable txout. That would mean allowing as many OP_RETURN outputs in a transaction as you want, and allowing up to 192 bytes of data per one. (OP_CHECKMULTISIG equivalent, either bare or with P2SH) There should never be an excuse to use an unspendable UTXO rather than OP_RETURN and pressuring people into not doing it via social means isn't working.    Still, if a compromise is what it takes, it's a good step forward.    Once implemented widely, something @gmaxwell suggested was to change the UI so that creating a zero-value out transaction actually creates an OP_RETURN with the digest as the data. I think we should also see if we can convince blockchain.info to implement this on their API in some way. All the timestamping sites and phone apps that have popped up recently seem to use blockchain.info so it'd be great to use that as a way of pushing people onto OP_RETURN. In particular it'd be great if blockchain.info could make 20-byte out OP_RETURN txouts be indexed in their database as though they were addresses to give users a way to look up their timestamps, thus making the overall experience of doing the better thing strictly easier than harming the network.    I'll review/test code later.
2738	19928669	2013-06-24T19:11:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19928669	jgarzik	petertodd	Rebased, and fixed @petertodd issue
2738	19929049	2013-06-24T19:17:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19929049	sipa	TheBlueMatt	I agree with @TheBlueMatt that this shouldn't be deployed before there's a alternative for cases where it'd otherwise just be used a communication through the blockchain.    I'm working on a patch that prunes OP_RETURN-starting pubkeyscripts.
2738	21091219	2013-07-17T04:15:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091219	luke-jr	jgarzik	@jgarzik Rebase needed again.
2738	24537740	2013-09-16T19:33:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24537740	gmaxwell	dacoinminster	@dacoinminster There is already usage of this.
2738	25015736	2013-09-24T15:34:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25015736	gmaxwell	M4v3R	@M4v3R  See my above comment. Being merged wasn't the bar I was suggesting.    Whats your interest / application here?
2738	25016149	2013-09-24T15:39:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016149	gmaxwell	sipa	@sipa > "May see" I don't think there is any ambiguity there, "will see".  But is it worth the trade off to shape it towards less harmful forms when it happens?     @petertodd needs? Is this just because they want to store _more_ than 80 bytes?!    (Incidentally, I still think 80 bytes is too much, but I do find PT's existence of alternatives argument relatively convincing on that point)
2738	25016149	2013-09-24T15:39:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016149	gmaxwell	petertodd	@sipa > "May see" I don't think there is any ambiguity there, "will see".  But is it worth the trade off to shape it towards less harmful forms when it happens?     @petertodd needs? Is this just because they want to store _more_ than 80 bytes?!    (Incidentally, I still think 80 bytes is too much, but I do find PT's existence of alternatives argument relatively convincing on that point)
2738	25016350	2013-09-24T15:42:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016350	petertodd	sipa	Ooops, deleted my comment accidentally, reproduced below:    @sipa I think MasterCoin shows that you can't stop datastorage in the blockchain via social means, only technical ones. (or occasionally the threat of a technical change) Their protocol needs the ability to store more than one data txout per transaction, which means they have reasons to ignore OP_RETURN as implemented here (because you are limited to one OP_RETURN txout) in favor of sticking with CHECKMULTISIG.
2738	25016593	2013-09-24T15:45:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016593	petertodd	gmaxwell	@gmaxwell Who cares? It's easy for them to make a protocol that does what they want with CHECKMULTISIG, so that's what they'll do.
2738	25017368	2013-09-24T15:53:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25017368	gmaxwell	petertodd	@petertodd In your second to last comment didn't you just propose limiting bare multisig?  That removes datastorage in utxos in that case too. WRT who cares part of the idea here is shaping behavior towards conservative needs.    For many abuses of bitcoin you only _need_ a hash, and that carries a lot less risk for the system. So I care about the motivation because I want to know if enabling this is going to signal to people that this makes non-hash data "kosher".
2738	25018894	2013-09-24T16:12:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25018894	petertodd	gmaxwell	@gmaxwell Oh, yeah, that's correct, so once you limit the UTXO-usage by getting rid of everything but P2SH and pay-to-pubkey-hash making your OP_RETURN be cheaper than either mechanism is what we want. Given that each 20-byte-hash output has a cost in terms of Bitcoins burned (due to the dust rule) it'd be enough to make the data allowed in an OP_RETURN be equal to 20 bytes, and either require the rest to destroy Bitcoins, or just make all OP_RETURN's not subject to the dust rule to make it clear that implementing OP_RETURN in your shitty app is worth the trouble. (note how in this case relative to the data storage required by legit financial transactions you're paying a large premium per-byte because you can't make use of the 8-byte txout value while they can, and eventually we can even mandate it's actually a hash a-la P2SH^2)    Anyway my point is that you don't shape behavior by just telling people, you have to actually force them through incentives and limitations.
2738	25021353	2013-09-24T16:41:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25021353	M4v3R	gmaxwell	@gmaxwell I already stated that on the mailing list. My interest is to attach an  additional signature to transactions generated by my service, so anyone  receiving the transaction can see that it came from the service. This would  allow merchants or exchanges to safely accept Bitcoins after zero  confirmations, because then know they'll coming from my service, which acts  as an escrow and will never double spend.
2738	25021713	2013-09-24T16:45:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25021713	petertodd	M4v3R	@M4v3R Given that the additional OP_RETURN data will make your transactions easily identifiable anyway why not just use a single green address and send all transactions from it? Or just provide a way to query your server over SSL to just ask if a particular transaction is from you?
2738	25022277	2013-09-24T16:52:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25022277	petertodd	M4v3R	@M4v3R BTW if you're working to make a business based on securing zero-conf, I should warn you that we've got a way of making them fairly secure that could make your business plans obsolete: https://bitcointalk.org/index.php?topic=251233.msg2669189#msg2669189
2738	25071236	2013-09-25T08:57:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25071236	M4v3R	petertodd	@petertodd If that's the case then this is great news. No, my business model is not based on securing zero-conf, I just thought it could be a valuable addition to the business, but if that will be solved another way I'm all for it.
2738	25071574	2013-09-25T09:04:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25071574	M4v3R	petertodd	@petertodd My service is based on giving the service operators as little trust as possible (ideally, no trust at all). That means that at any point I don't want to be in 100% control of users coins. This is implemented by using multi signature transactions. With that in mind I can't use a single green address because it would require me to route all transactions to that address first, thus getting in control of the coins for that moment, which I don't want.  I could provide an SSL API for asking for transaction ownership, but that creates an additional step for receiving clients to implement, and relies on the API having very high uptime, and on the network itself. Whereas signature checking can be done without any network requests, so its more reliable.    PS. This could start a discussion whether the above goal is possible, but please leave that discussion for another time, as this has nothing to do with the issue we're discussing.
2738	25550408	2013-10-02T15:51:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25550408	jgarzik	sipa	Rebased.  Code-wise it is merge-ready now, though @sipa illustrated the current merge decision factors.
2738	25682033	2013-10-04T08:01:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682033	petertodd	gavinandresen	@gavinandresen Seems to me that we should have an -accept-nonstd option that -testnet soft-sets to true so that -accept-nonstd=0 can be used easily to test mainnet behavior exactly. (or conversely, -reject-nonstd) I've seen multiple people get confused by that difference when testing their code, usually when debugging nLockTime-using protocols where propagation differs.    https://github.com/petertodd/bitcoin/tree/accept-nonstdtxn is up to date IIRC and could be easily modified for that purpose.
2738	25792402	2013-10-07T08:38:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25792402	jgarzik	gavinandresen	@gavinandresen I made hand-created outputs using https://github.com/gasteve/node-libcoin   For python this should work, https://github.com/jgarzik/python-bitcoinlib    Then I pushed to TNIAB setup and manually observed.
2738	25792537	2013-10-07T08:40:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25792537	jgarzik	petertodd	@petertodd I'm fine with (1) a chain param indicating accept-nonstd, and (2) a command-line param enabling alteration of that default.    Current default behavior must be preserved of course.
2735	18911888	2013-06-04T14:18:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18911888	vinniefalco	fanquake	@fanquake This is not supposed to be a replacement for doc/coding.md
2734	18894943	2013-06-04T08:12:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18894943	fanquake	casellas	@casellas ~/Library/Application Support/Bitcoin/
2734	18895230	2013-06-04T08:18:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18895230	casellas	casellas	is not showing bitcoin in library/application support/no bitcoin file      On Tue, Jun 4, 2013 at 4:13 AM, Michael Ford <notifications@github.com>wrote:    > @casellas <https://github.com/casellas> ~/Library/Application  > Support/Bitcoin/  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/issues/2734#issuecomment-18894943>  > .  >        --   CONFIDENTIALITY NOTICE  This message (including any attachments) contains information that may be  confidential. Unless you are the intended recipient (or authorized to  receive for the intended recipient), you may not read, print, retain, use,  copy, distribute or disclose to anyone the message or any information  contained in the message. If you have received the message in error, please  advise the sender by reply e-mail, and destroy all copies of the original  message (including any attachments).
2725	18780754	2013-06-01T00:50:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18780754	Suffice	alexpennace	@alexpennace There's this: http://gavintech.blogspot.com/2012/05/neutralizing-51-attack.html
2718	18787527	2013-06-01T11:30:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18787527	Diapolo	laanwj	As @laanwj said, we won't merge such translation pulls, make the changes via Transifex and we'll update translations before a new release or from time to time. Can you close this please?
2712	18658578	2013-05-30T02:43:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18658578	adavies42	gavinandresen	@gavinandresen    > Sounds like your hard disk or hard disk controller is failing.    Possible, I suppose, but I havent seen any other signs of it.    My wallet.dat is on a mounted disk image; everything else is on the main drive (same as the OS, etc.).    Where do I find the log that tells me whats actually going wrong?
2712	18673252	2013-05-30T10:49:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18673252	fanquake	adavies42	@adavies42  ~/Library/Application Support/Bitcoin/
2712	18723869	2013-05-31T05:20:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18723869	goldbit89	adavies42	@adavies42   did you ever get your error fixed and if so how did you resolve? I have the same issue on issue 2707.
2712	18783855	2013-06-01T05:20:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18783855	goldbit89	adavies42	@adavies42   i fixed mine by installing the zip version of 8.2 , for whatever reason some if not all of bitcoin folders and files have been locked, i couldnt even remove them with being the admin. so i just installed 8.2 zip in another location and it located everything needed to get back on and with newest update.
2712	18784158	2013-06-01T05:52:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18784158	fanquake	goldbit89	@goldbit89 If you run the tidy_datadir script ( contrib/tidy_datadir.sh ), it will detect and remove all of the obsolete DB files from your datadir.
2711	18654431	2013-05-30T00:16:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18654431	gmaxwell	Suffice	@Suffice Thanks for pointing out that the wiki anonymity page was somewhat misleading, I've corrected it a bit... though it could use some more revisions.
2711	18892787	2013-06-04T07:15:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18892787	sipa	whitslack	@whitslack You are technically correct. Transactions have inputs, and inputs refer to previous outputs, and those outputs have in the majority of cases a well-defined address. You can call this a "from address" if you like, and it is well-defined. The reason for not calling it that way is because people make incorrect assumptions about it. People associate certain properties with a "from address", like that it belongs to the sender of the transaction (not true in case of online wallets), that you can send coins back to it (not true in case of shared wallets), or that it is unique or always present. Furthermore, it makes people think Bitcoin works as a ledger with address balances.    More in the context of this issue: the problem is that it breaks the abstraction provided by the wallet software (which is: a wallet has a balance, and has several address to receive coins with, but otherwise functions as a black box). Not everyone needs this abstraction, but just breaking it partially will even cause more confusion.    My preferred solution is coin control - not because I think it's that useful as a feature for most (micro-management is IMHO not how you solve a privacy issue, the software should offer higher-level solutions for that like multiple independent wallets and linking-minimizing transaction creation), but because it breaks the abstraction completely and allows you to see the wallet as a set of coins, assigned to addresses. This indeed does what you want, but without risking the misunderstanding that it's addresses that are used as inputs.
2707	18725783	2013-05-31T06:38:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18725783	goldbit89	laanwj	@laanwj     the installer does not create bitcoin directories ?
2703	18588781	2013-05-29T00:22:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18588781	paraboul	luke-jr	oh, @luke-jr can you elaborate?  Edit:  Can't we mix that intentional design and the one that check the balance by something like :  * No [minconf] provided : no balance check  * [minconf] provided : actually using it (and therefore check the balance accordingly)    I see no reason why one would provide [minconf] and intentionally don't want to actually check the balance.
2703	18617461	2013-05-29T13:51:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18617461	gavinandresen	paraboul	@paraboul : what are you trying to do that you cannot do with the way it is implemented now?
2703	18618401	2013-05-29T14:05:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18618401	paraboul	gavinandresen	@gavinandresen moving funds from one account to another without having to "getbalance account minconf" in order to check the sender balance. The current move command has a "[minconf]" argument which is not used.    WIth the current implementation I would have to :    * balance = getbalance accountA 6  * if amount <= balance : move accountA accountB amount  * else not enough funds    With this patch :    * move accountA accountB amount 6    It just save up one RPC call and do it atomically
2703	18618846	2013-05-29T14:12:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18618846	gavinandresen	paraboul	@paraboul: confirmation tracking through 'moves' is non-trivial.    E.g. lets say I send 11 BTC to an address associated with account A, and it gets 1 confirmation.    Then I:    move accountA accountB 3    move accountB accountC 1 6  <-- does this succeed or fail ?
2703	18634447	2013-05-29T17:56:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18634447	paraboul	sipa	@sipa better coin control. I'm just looking for a solution to sandbox every accounts so that they can't interfere to each other (e.g. not using addr/funds/unspentoutput from AccountA when AccountB spends funds). Multi walltet would solve this problem if you consider one wallet per account.
2703	18635859	2013-05-29T18:19:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18635859	sipa	paraboul	@paraboul My point exactly. Accounts (as they currently) exist do NOT provide any coin control at all. That's why I say they solve a different problem.
2703	18643499	2013-05-29T20:24:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18643499	luke-jr	paraboul	@paraboul Multi-wallet is planned, but I'm not sure it's really something targetting your use case. There should be no reason to isolate coins per-user. That just creates higher transaction fees for your users, prevents you from implementing proper security (an offline wallet), and propagates harmful myths about Bitcoin (such as that transactions have "from" or "return" addresses).    What real problem are you trying to solve here, that you think needs each user to have isolated coins?
2703	18647008	2013-05-29T21:20:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18647008	paraboul	luke-jr	@luke-jr My original idea was just to use "account" as a ledger.  That is : using the balance of each account in order to implement a simple exchange system.  My idea was : if two users are on the same wallet : do the transaction off-the-network (move) instead of a regular sendfrom(). For this I needed to check that the sender has enough funds confirmed by 6 blocks (hence the move [minconf]).  But I guess that writing my own ledger/account system is a better idea.
2702	19859277	2013-06-22T16:15:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19859277	sipa	gavinandresen	I'd prefer to have access to the individual changes that were made to the leveldb subtree.    Ideally, the leveldb changes appear as individual commits in our repository, but that may be hard (I'm not familiar enough with git-subtree yet). An alternative is having a leveldb branch (or separate) repository under the bitcoin project, and occasionally pull changes from there through such a squashed commit as exists in this pullreq now. Other devs opinions? @gavinandresen @jgarzik @gmaxwell @laanwj?
2702	19859277	2013-06-22T16:15:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19859277	sipa	jgarzik	I'd prefer to have access to the individual changes that were made to the leveldb subtree.    Ideally, the leveldb changes appear as individual commits in our repository, but that may be hard (I'm not familiar enough with git-subtree yet). An alternative is having a leveldb branch (or separate) repository under the bitcoin project, and occasionally pull changes from there through such a squashed commit as exists in this pullreq now. Other devs opinions? @gavinandresen @jgarzik @gmaxwell @laanwj?
2702	19859277	2013-06-22T16:15:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19859277	sipa	gmaxwell	I'd prefer to have access to the individual changes that were made to the leveldb subtree.    Ideally, the leveldb changes appear as individual commits in our repository, but that may be hard (I'm not familiar enough with git-subtree yet). An alternative is having a leveldb branch (or separate) repository under the bitcoin project, and occasionally pull changes from there through such a squashed commit as exists in this pullreq now. Other devs opinions? @gavinandresen @jgarzik @gmaxwell @laanwj?
2702	19859277	2013-06-22T16:15:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19859277	sipa	laanwj?	I'd prefer to have access to the individual changes that were made to the leveldb subtree.    Ideally, the leveldb changes appear as individual commits in our repository, but that may be hard (I'm not familiar enough with git-subtree yet). An alternative is having a leveldb branch (or separate) repository under the bitcoin project, and occasionally pull changes from there through such a squashed commit as exists in this pullreq now. Other devs opinions? @gavinandresen @jgarzik @gmaxwell @laanwj?
2702	20158535	2013-06-27T22:09:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158535	sipa	gavinandresen	@gavinandresen @jgarzik @laanwj @gmaxwell Are you in favor of having a bitcoin/leveldb repository?
2702	20158535	2013-06-27T22:09:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158535	sipa	jgarzik	@gavinandresen @jgarzik @laanwj @gmaxwell Are you in favor of having a bitcoin/leveldb repository?
2702	20158535	2013-06-27T22:09:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158535	sipa	laanwj	@gavinandresen @jgarzik @laanwj @gmaxwell Are you in favor of having a bitcoin/leveldb repository?
2702	20158535	2013-06-27T22:09:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158535	sipa	gmaxwell	@gavinandresen @jgarzik @laanwj @gmaxwell Are you in favor of having a bitcoin/leveldb repository?
2702	20158952	2013-06-27T22:17:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158952	vinniefalco	jgarzik	@jgarzik Yes, note that what you have now is "in-tree." What @sipa is asking is if you want to also have as a public repository, your fork of leveldb.    @sipa I say, why not add bitcoin/leveldb? There's no downside to it. You can either fork the one from ripple, or create your own empty repository and push to it like this:            # From your local bitcoin repository            # add a remote for bitcoin's fork of leveldb          git add leveldb git@github.com:bitcoin/leveldb.git             # add a remote for ripple's fork          git add ripple git@github.com:ripple/leveldb.git            # bring the ripple fork's ref into the local repo, so subtree-split can find it          git fetch ripple            # split out the commits to leveldb into its own branch          git subtree split -P src/leveldb -b leveldb            # push the recreated branch to bitcoin's repository.          # it will be called bitcoin-fork          git push leveldb leveldb:bitcoin-fork    @sipa You should try these steps anyway. You can always throw away the branch or repository. Get some practice with git-subtree, it's great!
2702	20158952	2013-06-27T22:17:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158952	vinniefalco	sipa	@jgarzik Yes, note that what you have now is "in-tree." What @sipa is asking is if you want to also have as a public repository, your fork of leveldb.    @sipa I say, why not add bitcoin/leveldb? There's no downside to it. You can either fork the one from ripple, or create your own empty repository and push to it like this:            # From your local bitcoin repository            # add a remote for bitcoin's fork of leveldb          git add leveldb git@github.com:bitcoin/leveldb.git             # add a remote for ripple's fork          git add ripple git@github.com:ripple/leveldb.git            # bring the ripple fork's ref into the local repo, so subtree-split can find it          git fetch ripple            # split out the commits to leveldb into its own branch          git subtree split -P src/leveldb -b leveldb            # push the recreated branch to bitcoin's repository.          # it will be called bitcoin-fork          git push leveldb leveldb:bitcoin-fork    @sipa You should try these steps anyway. You can always throw away the branch or repository. Get some practice with git-subtree, it's great!
2702	20158952	2013-06-27T22:17:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158952	vinniefalco	sipa	@jgarzik Yes, note that what you have now is "in-tree." What @sipa is asking is if you want to also have as a public repository, your fork of leveldb.    @sipa I say, why not add bitcoin/leveldb? There's no downside to it. You can either fork the one from ripple, or create your own empty repository and push to it like this:            # From your local bitcoin repository            # add a remote for bitcoin's fork of leveldb          git add leveldb git@github.com:bitcoin/leveldb.git             # add a remote for ripple's fork          git add ripple git@github.com:ripple/leveldb.git            # bring the ripple fork's ref into the local repo, so subtree-split can find it          git fetch ripple            # split out the commits to leveldb into its own branch          git subtree split -P src/leveldb -b leveldb            # push the recreated branch to bitcoin's repository.          # it will be called bitcoin-fork          git push leveldb leveldb:bitcoin-fork    @sipa You should try these steps anyway. You can always throw away the branch or repository. Get some practice with git-subtree, it's great!
2702	20158952	2013-06-27T22:17:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158952	vinniefalco	sipa	@jgarzik Yes, note that what you have now is "in-tree." What @sipa is asking is if you want to also have as a public repository, your fork of leveldb.    @sipa I say, why not add bitcoin/leveldb? There's no downside to it. You can either fork the one from ripple, or create your own empty repository and push to it like this:            # From your local bitcoin repository            # add a remote for bitcoin's fork of leveldb          git add leveldb git@github.com:bitcoin/leveldb.git             # add a remote for ripple's fork          git add ripple git@github.com:ripple/leveldb.git            # bring the ripple fork's ref into the local repo, so subtree-split can find it          git fetch ripple            # split out the commits to leveldb into its own branch          git subtree split -P src/leveldb -b leveldb            # push the recreated branch to bitcoin's repository.          # it will be called bitcoin-fork          git push leveldb leveldb:bitcoin-fork    @sipa You should try these steps anyway. You can always throw away the branch or repository. Get some practice with git-subtree, it's great!
2702	20158988	2013-06-27T22:18:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158988	sipa	jgarzik	@jgarzik No one suggests changing that. This is using git-subtree, so a copy of the LevelDB source is still inside our code, but there's a separate repository where development of our LevelDB tree can happen (it has significant changes, including a non-upstream Windows port with some patches by us). This way, the LevelDB code can live somewhat independently, but we can easily synchronize the in-repo copy.    One of the nice things about git-subtree is that it doesn't matter where that extra repository is maintained - it's only identified using commit ids. In a previous patch, we 'switched' to a tree that @vinniefalco extracted from our LevelDB history, and this commits pulls in changes that have been made there. My question is whether we wouldn't rather have such a LevelDB tree under github.com/bitcoin.
2702	20158988	2013-06-27T22:18:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158988	sipa	vinniefalco	@jgarzik No one suggests changing that. This is using git-subtree, so a copy of the LevelDB source is still inside our code, but there's a separate repository where development of our LevelDB tree can happen (it has significant changes, including a non-upstream Windows port with some patches by us). This way, the LevelDB code can live somewhat independently, but we can easily synchronize the in-repo copy.    One of the nice things about git-subtree is that it doesn't matter where that extra repository is maintained - it's only identified using commit ids. In a previous patch, we 'switched' to a tree that @vinniefalco extracted from our LevelDB history, and this commits pulls in changes that have been made there. My question is whether we wouldn't rather have such a LevelDB tree under github.com/bitcoin.
2702	20159092	2013-06-27T22:20:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20159092	sipa	vinniefalco	@vinniefalco No need to yell.
2702	20159155	2013-06-27T22:21:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20159155	vinniefalco	sipa	@sipa Yeah yeah, I forgot to mark those commands as "code" in GitHub flavored markdown so they became section headers in large bold text.    Anyway, here's a simple improvement for bringing in LevelDB that lets you trim it from the Makefile or whatever and also will speed up your build:    https://gist.github.com/vinniefalco/5880905    At some point I will make it work without the fancy macros and put it in our fork so anyone can use it.
2702	20177346	2013-06-28T08:59:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20177346	mikehearn	sipa	To answer Luke, yes, I audited the changes and didn't see anything that  could cause desynchronization or other security issues. The FD limit was  raised but we did that already, I think.      On Fri, Jun 28, 2013 at 12:21 AM, Vinnie Falco <notifications@github.com>wrote:    > @sipa <https://github.com/sipa> Yeah yeah, I forgot to mark those  > commands as "code" in GitHub flavored markdown.  >  > Anyway, here's a simple improvement for bringing in LevelDB that lets you  > trim it from the Makefile or whatever and also will speed up your build:  >  > https://gist.github.com/vinniefalco/5880905  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2702#issuecomment-20159155>  > .  >
2702	22849947	2013-08-19T04:03:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22849947	vinniefalco	gmaxwell	@gmaxwell To apply a patch to leveldb all you need to do is split the subtree out of Bitcoin using "git subtree split", and it will become an orphaned branch in your local repo (a branch that doesn't share any history with bitcoin). Then you apply the level db patches to that branch. Finally, use "git subtree pull" or "git subtree merge" (preferably with --ff-only) on your local orphaned leveldb branch to bring the changes back in.    Once you have split your leveldb branch using "git subtree split" you can push it to your own remote leveldb repository and maintain it as a fork. Or not. Whatever you want to do. The files will still always exist as normal files in the bitcoin repo.    As usual contact me if you have questions.
2700	18501757	2013-05-27T14:41:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18501757	laanwj	jonasschnelli	@jonasschnelli: Compilation speed and sanity. This allows compiling the core objects only once and storing them in an archive (library) to be used by the all of bitcoin-qt, bitcoind and the tests.  There are only very few differences left under QT_GUI defines (some help messages, and the default key which is going away anyway) so I honestly don't see the "GUI code in non-GUI" problem.
2700	18513128	2013-05-27T20:13:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513128	theuni	jonasschnelli	@jonasschnelli you said: "I like ifdefs". If that's the resounding attitude here, I'll need to reevaluate my autotools work. Ifdefs are a portability nightmare if used to control runtime behavior. In this case, depending on the compiler/linker/settings used, the unreachable paths might be stripped away just as if ifdefs had been used.    Would you mind explaining your position, and if it's common for bitcoin development? I have no problem adapting (even if i disagree), but it may negate the reasoning for my work.
2700	18513680	2013-05-27T20:30:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513680	luke-jr	theuni	@theuni I don't think @jonasschnelli 's ifdef love is representative of most developers here. It makes sense for some optional build-time features (UPnP, IPv6), but not so much in this case.
2700	18513680	2013-05-27T20:30:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513680	luke-jr	jonasschnelli	@theuni I don't think @jonasschnelli 's ifdef love is representative of most developers here. It makes sense for some optional build-time features (UPnP, IPv6), but not so much in this case.
2700	18513701	2013-05-27T20:31:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513701	jonasschnelli	theuni	@theuni: no. just go on (even when i  generally  like #ifdef's). I just like binaries that only containing code which will be runned through. But for this case ifdefs are not the right thing.
2700	18665129	2013-05-30T07:15:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18665129	laanwj	sipa.	Agree with @sipa. We could call the resulting file `bitcoind.cpp`, which is more descriptive than `noui.cpp`.
2700	18993907	2013-06-05T17:35:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18993907	theuni	jgarzik	@jgarzik This is holding up my autotools pull request (it depends on this work), and it looks like #2154 could be a while. Could i convince you to change your mind on that?
2699	18461840	2013-05-26T11:46:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461840	laanwj	luke-jr	@luke-jr is correct. If the length of the key is 33, and the last byte of the private key is 0x01, the key is interpreted as compressed. Otherwise, it is treated as uncompressed. So an additional parameter is not needed.
2697	18461795	2013-05-26T11:42:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461795	Diapolo	Michagogo	Well you are right, perhaps @Michagogo add a line describing what (new version) needs to be via an example or such.
2697	18461834	2013-05-26T11:45:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461834	Michagogo	Laanwj	@Laanwj Ah, I see what you're saying. When I get back to my computer I'll take a look and see if I can think of a way to demonstrate... The fact that it can be more than just numbers (i.e. 0.8.2rc3, not just 0.8.2) is important to clarify, IMHO. Also, I agree with you that it can be confusing regarding where you should and shouldn't prepend a `v' -- I'm not sure why it belongs in some places and not others. If you have any suggestions in the meantime regarding how to phrase it, I'd be glad to hear them.    Sent from Mailbox for iPhone    On Sun, May 26, 2013 at 2:39 PM, Wladimir J. van der Laan  <notifications@github.com> wrote:    > The reason for being overly specific is to show the *exact* format in which the version has to be given. I have been known for adding v's in front where there should not be, for example. If you do this, specify exactly what format is expected.  > ---  > Reply to this email directly or view it on GitHub:  > https://github.com/bitcoin/bitcoin/pull/2697#issuecomment-18461755
2697	18463419	2013-05-26T13:59:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18463419	Michagogo	laanwj	@laanwj The current phrasing doesn't say "for example", it provides values. IMHO, it should be like with the "export SIGNER=" line, making it clear that this is somewhere to fill in your own file. I've tweaked it a bit. What do you think?
2697	18669508	2013-05-30T09:12:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18669508	fanquake	Michagogo	@Michagogo Can you squash this into a single commit?
2697	18669611	2013-05-30T09:15:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18669611	Michagogo	fanquake	@fanquake I apologize for my ignorance, but how exactly do I do that?
2697	18671421	2013-05-30T09:59:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18671421	Michagogo	fanquake	@fanquake Okay, I *think* I just did that...
2690	18474106	2013-05-27T01:05:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18474106	wtogami	0xc0b7f00,	CTxMemPool::accept() : accepted 0d36dd05ff1a616424f34e6f83c11347db6ad36584daf38956f45f2a813e6a2e (poolsz 44)  CTxMemPool::accept() : accepted 3815abbabaa3ed2ee78d09dbab7f9b24f7f450d3c0e906f1702ab911dbbf5509 (poolsz 45)  opencon thread interrupt  net thread interrupt  msghand thread interrupt  Flushed 14157 addresses to peers.dat  45ms  Flushed 14157 addresses to peers.dat  47ms  Flushed 14157 addresses to peers.dat  43ms  Flushed 14157 addresses to peers.dat  47ms    "thread apply all bt full" during the forever looping messages...    Thread 11 (Thread 0x7fdb69374700 (LWP 5127)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=5, fds=0x7fdb6400a010, timeout=-1, context=0x1b22b90) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=0x1b22b90, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 5          allocated_nfds = <optimized out>          fds = 0x7fdb6400a010  #3  0x00007fdb7427a182 in g_main_loop_run (loop=0x1b22b20) at gmain.c:3484          __PRETTY_FUNCTION__ = "g_main_loop_run"  #4  0x0000003d5d8cc546 in gdbus_shared_thread_func (user_data=0x1b22b60) at gdbusprivate.c:277          data = 0x1b22b60  #5  0x00007fdb7429d605 in g_thread_proxy (data=0x1b1c770) at gthread.c:797          thread = 0x1b1c770  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb69374700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb69374700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580339795712, -8763684436165665671, 0, 263496798208, 140580339795712, 28453728, 8779750987466923129,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 10 (Thread 0x7fdb621a4700 (LWP 5131)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=1, fds=0x7fdb500029c0, timeout=-1, context=0x7fdb500009a0) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=context@entry=0x7fdb500009a0, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 1            allocated_nfds = <optimized out>          fds = 0x7fdb500029c0  #3  0x00007fdb74279e44 in g_main_context_iteration (context=0x7fdb500009a0, may_block=1) at gmain.c:3351          retval = <optimized out>  #4  0x0000003d639a5fa6 in QEventDispatcherGlib::processEvents (this=0x7fdb500008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:426          d = 0x7fdb500008e0          canWait = <optimized out>          savedFlags = {i = 0}          result = false  #5  0x0000003d639765ef in QEventLoop::processEvents (this=this@entry=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:149          d = 0x7fdb50002920  #6  0x0000003d63976878 in QEventLoop::exec (this=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:204          d = 0x7fdb50002920          locker = {val = 29823160}          app = 0x7fffbfa15ee0  #7  0x0000003d63878980 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:542          d = 0x1c71030          locker = {val = 29823160}          eventLoop = {<QObject> = {_vptr.QObject = 0x3d63cd2630 <vtable for QEventLoop+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x7fdb50002920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68ce0 <qt_meta_stringdata_QEventLoop> "QEventLoop", data = 0x3d63a68d00 <qt_meta_data_QEventLoop>, extradata =       0x3d63cd26c0 <QEventLoop::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d76a0 <QEventLoop::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          returnCode = <optimized out>  #8  0x0000003d6387b95c in QThreadPrivate::start (arg=0x1c71f60) at thread/qthread_unix.cpp:338          __clframe = {__cancel_routine = 0x3d6387a900 <QThreadPrivate::finish(void*)>, __cancel_arg = 0x1c71f60, __do_it = 1, __cancel_type = <optimized out>}          thr = 0x1c71f60          data = 0x1c71170          objectName = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0xb9e200 <QString::shared_null>, static codecForCStrings = 0x0}  #9  0x0000003d5a007d15 in start_thread (arg=0x7fdb621a4700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb621a4700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580220454656, -8763684436165665671, 0, 263496798208, 140580220454656, 0, 8779740378897702009,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}            not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #10 0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 9 (Thread 0x7fdb68b73700 (LWP 5136)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000000000617773 in BGThread (this=0x26e6df0) at util/env_posix.cc:654          function = <optimized out>          arg = <optimized out>  #2  leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper (arg=0x26e6df0) at util/env_posix.cc:599  No locals.  #3  0x0000003d5a007d15 in start_thread (arg=0x7fdb68b73700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb68b73700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580331403008, -8763684436165665671, 0, 28497120, 140580331403008, 21, 8779752087515421817,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #4  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 8 (Thread 0x7fdb3a447700 (LWP 5164)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 120, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 120000000000}  #3  0x00000000004fba30 in MilliSleep (n=<optimized out>) at src/util.h:110  No locals.  #4  0x00000000004f9a38 in ThreadOpenAddedConnections () at src/net.cpp:1533          lAddresses = empty std::list          lservAddressesToAdd = empty std::list          i = 3    #5  0x00000000004fb5fd in TraceThread<void (*)()> (name=0x66914a "addcon", func=0x4f91b0 <ThreadOpenAddedConnections()>) at src/util.h:571          s = "bitcoin-addcon"  #6  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #7  0x0000003d5a007d15 in start_thread (arg=0x7fdb3a447700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb3a447700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579552130816, -8763684436165665671, 0, 263496798208, 140579552130816, 5223872, 8779582648908110969,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #8  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 7 (Thread 0x7fdb38c44700 (LWP 5167)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 10, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 10000000000}  #3  0x00000000004fba91 in MilliSleep (n=10000) at src/util.h:110  No locals.  #4  LoopForever<void (*)()> (name=0x669161 "dumpaddr", func=0x4f4850 <DumpAddresses()>, msecs=10000) at src/util.h:548          s = "bitcoin-dumpaddr"  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x1002b450, pn = {pi_ = 0x9c6f7f0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb38c44700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb38c44700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579526952704, -8763684436165665671, 0, 263496798208, 140579526952704, 5225024, 8779577152960584825,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114    No locals.    Thread 6 (Thread 0x7fdb2bfff700 (LWP 5168)):  #0  0x0000003d59cf2a73 in epoll_wait () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000000000579758 in boost::asio::detail::epoll_reactor::run (this=0x5c76f60, block=<optimized out>, ops=...)      at /usr/include/boost/asio/detail/impl/epoll_reactor.ipp:392          timeout = <optimized out>          events = {{events = 1, data = {ptr = 0x5c76fb8, fd = 96956344, u32 = 96956344, u64 = 96956344}}, {events = 0, data = {ptr = 0x0, fd = 0, u32 = 0,                 u64 = 0}} <repeats 126 times>, {events = 0, data = {ptr = 0xc0b7ed0, fd = 202079952, u32 = 202079952, u64 = 202079952}}}          num_events = <optimized out>          check_timers = <optimized out>  #2  0x000000000057d3aa in do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>)      at /usr/include/boost/asio/detail/impl/task_io_service.ipp:378          on_exit = {task_io_service_ = 0xc0b7ed0, lock_ = 0x7fdb2bffebe0, ops_ = 0x7fdb2bffebd0}          more_handlers = false  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2bffec70, private_op_queue = 0x7fdb2bffebd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0x0, __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}, signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2bffebf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = false}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xca2df10, pn = {pi_ = 0x89c5910}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2bfff700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2bfff700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579312760576, -8763684436165665671, 0, 263496798208, 140579312760576, 355554048, 8779614161083161721,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.      Thread 5 (Thread 0x7fdb2b7fe700 (LWP 5169)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2b7fdc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2b7fdc70, private_op_queue = 0x7fdb2b7fdbd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2b7fdbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xffb62b0, pn = {pi_ = 0x14159ba0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2b7fe700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2b7fe700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579304367872, -8763684436165665671, 0, 263496798208, 140579304367872, 355554048, 8779615261131660409,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 4 (Thread 0x7fdb2affd700 (LWP 5170)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2affcc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.    #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2affcc70, private_op_queue = 0x7fdb2affcbd0, next = 0x7fdb2b7fdbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2affcbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x15545c80, pn = {pi_ = 0x11d84490}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2affd700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2affd700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579295975168, -8763684436165665671, 0, 263496798208, 140579295975168, 355554048, 8779616361180159097,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 3 (Thread 0x7fdb2a7fc700 (LWP 5171)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2a7fbc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2a7fbc70, private_op_queue = 0x7fdb2a7fbbd0, next = 0x7fdb2affcbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =         "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2a7fbbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102039b0, pn = {pi_ = 0xb1857a0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2a7fc700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2a7fc700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579287582464, -8763684436165665671, 0, 263496798208, 140579287582464, 355554048, 8779617461228657785,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 2 (Thread 0x7fdb29ffb700 (LWP 5172)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 0, tv_nsec = 500000000}  #2  0x0000000000512dc9 in sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 500000000}  #3  MilliSleep (n=500) at src/util.h:110  No locals.  #4  ThreadFlushWalletDB (strFile="wallet.dat") at src/walletdb.cpp:504          fOneThread = true          nLastSeen = 0          nLastFlushed = 0          nLastWalletUpdate = 1369618935  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102f45f0, pn = {pi_ = 0x140d2ab0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb29ffb700) at pthread_create.c:308            __res = <optimized out>          pd = 0x7fdb29ffb700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579279189760, -8763684436165665671, 0, 263496798208, 140579279189760, 2097152, 8779609765184134265,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 1 (Thread 0x7fdb73e10880 (LWP 5126)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000003d5d01293b in wait (m=..., this=0xd85b968) at boost/thread/pthread/condition_variable.hpp:62          guard = {m = 0x7fffbfa157d0}          check_for_interruption = {thread_info = 0x0, m = 0xd85b968, set = false}          res = <optimized out>  #2  boost::thread::join (this=0x7a6f170) at libs/thread/src/pthread/thread.cpp:273          lock = {m = 0xd85b940, is_locked = false}          do_join = false          local_thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #3  0x000000000043c5b1 in boost::thread_group::join_all (this=this@entry=0x7fffbfa162d0) at /usr/include/boost/thread/detail/thread_group.hpp:74          it =           end =   #4  0x0000000000433c4f in main (argc=1, argv=<optimized out>) at src/qt/bitcoin.cpp:280          threadGroup = {threads = std::list = {[0] = 0x1c71890, [1] = 0x1c73af0, [2] = 0x1c7c110, [3] = 0x8953500, [4] = 0x90dee40, [5] = 0xa24aaf0, [6] =       0x7a6f170, [7] = 0x869a1d0, [8] = 0xfa3e6b0, [9] = 0x1129d860, [10] = 0x2708040}, m = {state = {shared_count = 1, exclusive = false, upgrade = false,                 exclusive_waiting_blocked = false}, state_change = {m = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins =       0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\000' <repeats 39 times>, __align = 0}}, shared_cond = {internal_mutex = {__data = {__lock = 0,                     __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, exclusive_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, upgrade_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}}}            window = {<QMainWindow> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x70cd50 <vtable for BitcoinGUI+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                         extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1bee220}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},       <QPaintDevice> = {_vptr.QPaintDevice = 0x70cf18 <vtable for BitcoinGUI+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1bee368}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64697ce0 <qt_meta_stringdata_QMainWindow> "QMainWindow", data =       0x3d64697e80 <qt_meta_data_QMainWindow>, extradata = 0x3d64a8dfc0 <QMainWindow::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x3d64a9de80 <qt_meta_extradata_QMainWindow>, static_metacall =       0x3d646325b0 <QMainWindow::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9d9c0 <QMainWindow::staticMetaObject>, stringdata = 0x70c7a0 <qt_meta_stringdata_BitcoinGUI> "BitcoinGUI", data = 0x70cae0 <qt_meta_data_BitcoinGUI>,                 extradata = 0x70c780 <BitcoinGUI::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x5f4720 <BitcoinGUI::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static DEFAULT_WALLET = {static null = {<No data fields>},               static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0,                 righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0,                 data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0,                 array = {  0}}, d = 0x197b820, static codecForCStrings = 0x0}, clientModel = 0x0, walletFrame = 0x1be6790, labelEncryptionIcon = 0x1bdcd40,             labelConnectionsIcon = 0x1bd1a80, labelBlocksIcon = 0x1bd1a50, progressBarLabel = 0x1bd19f0, progressBar = 0x1bd0c70, appMenuBar = 0x1bfddb0,             overviewAction = 0x1becca0, historyAction = 0x1be6490, quitAction = 0x1bf9030, sendCoinsAction = 0x1be64f0, addressBookAction = 0x1be7270,             signMessageAction = 0x1bff2a0, verifyMessageAction = 0x1be24f0, aboutAction = 0x1bf90f0, receiveCoinsAction = 0x1be7ac0, optionsAction =       0x1bd08a0, toggleHideAction = 0x1bd08c0, encryptWalletAction = 0x1bd7110, backupWalletAction = 0x1bde4e0, changePassphraseAction = 0x1be6e70,             aboutQtAction = 0x1bf9110, openRPCConsoleAction = 0x1bd55f0, trayIcon = 0x1b8c1d0, notificator = 0x1bf6530, transactionView = 0x50, rpcConsole =       0x1c36240, syncIconMovie = 0x1c2b0d0, prevBlocks = 238110}          pollShutdownTimer = <optimized out>          paymentServer = 0x1b85480          optionsModel = {<QAbstractListModel> = {<QAbstractItemModel> = {<QObject> = {_vptr.QObject = 0x70fb50 <vtable for OptionsModel+16>,                   static staticMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data =       0x3d63a56260 <qt_meta_data_QObject>, extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0,                     static_metacall = 0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89d20},                   static staticQtMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data =       0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}}, static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a685c0 <qt_meta_stringdata_QAbstractItemModel> "QAbstractItemModel", data = 0x3d63a68a80 <qt_meta_data_QAbstractItemModel>, extradata =       0x3d63cd25e0 <QAbstractItemModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7340 <QAbstractItemModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0x3d63cd25c0 <QAbstractItemModel::staticMetaObject>, stringdata = 0x3d63a689e0 <qt_meta_stringdata_QAbstractListModel> "QAbstractListModel", data =       0x3d63a68a00 <qt_meta_data_QAbstractListModel>, extradata = 0x3d63cd2560 <QAbstractListModel::staticMetaObjectExtraData>}},               static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d6cd0 <QAbstractListModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9dae0 <QAbstractListModel::staticMetaObject>, stringdata = 0x70fce0 <qt_meta_stringdata_OptionsModel> "OptionsModel", data =       0x70fd20 <qt_meta_data_OptionsModel>, extradata = 0x70fcc0 <OptionsModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects =       0x0, static_metacall = 0x5f5cc0 <OptionsModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, nDisplayUnit = 0, bDisplayAddresses =         true, fMinimizeToTray = true, fMinimizeOnClose = false, language = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1},                 alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0,                 reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>,                 clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8b650, static codecForCStrings =       0x0}}          lang = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a8c0, static codecForCStrings = 0x0}          qtTranslator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8b920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          translatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8ba00}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          splash = {<QSplashScreen> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x714590 <vtable for SplashScreen+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                       extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bbc0}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata =       0x0}}}, <QPaintDevice> = {_vptr.QPaintDevice = 0x714758 <vtable for SplashScreen+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1b8bd08}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64698be0 <qt_meta_stringdata_QSplashScreen> "QSplashScreen", data =       0x3d64698d20 <qt_meta_data_QSplashScreen>, extradata = 0x3d64a8f620 <QSplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x0, static_metacall = 0x3d646339e0 <QSplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}},             static staticMetaObject = {d = {superdata = 0xb9e0e0 <QSplashScreen::staticMetaObject>, stringdata =       0x7147b0 <qt_meta_stringdata_SplashScreen> "SplashScreen", data = 0x7147c0 <qt_meta_data_SplashScreen>, extradata =       0x7147a0 <SplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =         0x5f83f0 <SplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          app = {<QCoreApplication> = {<QObject> = {_vptr.QObject = 0x3d64a62df0 <vtable for QApplication+16>, static staticMetaObject = {d = {superdata =       0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x19a46e0}, static staticQtMetaObject = {d = {                    superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},               static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68d80 <qt_meta_stringdata_QCoreApplication> "QCoreApplication", data = 0x3d63a68e20 <qt_meta_data_QCoreApplication>, extradata =       0x3d63cd27a0 <QCoreApplication::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7780 <QCoreApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static self = 0x0}, static staticMetaObject = {d = {                superdata = 0x3d63cd2780 <QCoreApplication::staticMetaObject>, stringdata = 0x3d6463b3c0 <qt_meta_stringdata_QApplication> "QApplication",                 data = 0x3d6463b600 <qt_meta_data_QApplication>, extradata = 0x3d64a62ea0 <QApplication::staticMetaObjectExtraData>}},             static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d63fcdcf0 <QApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          lang_territory = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a650, static codecForCStrings = 0x0}          translator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bae0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          qtTranslatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89fd0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}
2690	18474106	2013-05-27T01:05:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18474106	wtogami	0xc0b7f00,	CTxMemPool::accept() : accepted 0d36dd05ff1a616424f34e6f83c11347db6ad36584daf38956f45f2a813e6a2e (poolsz 44)  CTxMemPool::accept() : accepted 3815abbabaa3ed2ee78d09dbab7f9b24f7f450d3c0e906f1702ab911dbbf5509 (poolsz 45)  opencon thread interrupt  net thread interrupt  msghand thread interrupt  Flushed 14157 addresses to peers.dat  45ms  Flushed 14157 addresses to peers.dat  47ms  Flushed 14157 addresses to peers.dat  43ms  Flushed 14157 addresses to peers.dat  47ms    "thread apply all bt full" during the forever looping messages...    Thread 11 (Thread 0x7fdb69374700 (LWP 5127)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=5, fds=0x7fdb6400a010, timeout=-1, context=0x1b22b90) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=0x1b22b90, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 5          allocated_nfds = <optimized out>          fds = 0x7fdb6400a010  #3  0x00007fdb7427a182 in g_main_loop_run (loop=0x1b22b20) at gmain.c:3484          __PRETTY_FUNCTION__ = "g_main_loop_run"  #4  0x0000003d5d8cc546 in gdbus_shared_thread_func (user_data=0x1b22b60) at gdbusprivate.c:277          data = 0x1b22b60  #5  0x00007fdb7429d605 in g_thread_proxy (data=0x1b1c770) at gthread.c:797          thread = 0x1b1c770  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb69374700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb69374700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580339795712, -8763684436165665671, 0, 263496798208, 140580339795712, 28453728, 8779750987466923129,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 10 (Thread 0x7fdb621a4700 (LWP 5131)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=1, fds=0x7fdb500029c0, timeout=-1, context=0x7fdb500009a0) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=context@entry=0x7fdb500009a0, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 1            allocated_nfds = <optimized out>          fds = 0x7fdb500029c0  #3  0x00007fdb74279e44 in g_main_context_iteration (context=0x7fdb500009a0, may_block=1) at gmain.c:3351          retval = <optimized out>  #4  0x0000003d639a5fa6 in QEventDispatcherGlib::processEvents (this=0x7fdb500008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:426          d = 0x7fdb500008e0          canWait = <optimized out>          savedFlags = {i = 0}          result = false  #5  0x0000003d639765ef in QEventLoop::processEvents (this=this@entry=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:149          d = 0x7fdb50002920  #6  0x0000003d63976878 in QEventLoop::exec (this=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:204          d = 0x7fdb50002920          locker = {val = 29823160}          app = 0x7fffbfa15ee0  #7  0x0000003d63878980 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:542          d = 0x1c71030          locker = {val = 29823160}          eventLoop = {<QObject> = {_vptr.QObject = 0x3d63cd2630 <vtable for QEventLoop+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x7fdb50002920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68ce0 <qt_meta_stringdata_QEventLoop> "QEventLoop", data = 0x3d63a68d00 <qt_meta_data_QEventLoop>, extradata =       0x3d63cd26c0 <QEventLoop::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d76a0 <QEventLoop::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          returnCode = <optimized out>  #8  0x0000003d6387b95c in QThreadPrivate::start (arg=0x1c71f60) at thread/qthread_unix.cpp:338          __clframe = {__cancel_routine = 0x3d6387a900 <QThreadPrivate::finish(void*)>, __cancel_arg = 0x1c71f60, __do_it = 1, __cancel_type = <optimized out>}          thr = 0x1c71f60          data = 0x1c71170          objectName = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0xb9e200 <QString::shared_null>, static codecForCStrings = 0x0}  #9  0x0000003d5a007d15 in start_thread (arg=0x7fdb621a4700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb621a4700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580220454656, -8763684436165665671, 0, 263496798208, 140580220454656, 0, 8779740378897702009,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}            not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #10 0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 9 (Thread 0x7fdb68b73700 (LWP 5136)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000000000617773 in BGThread (this=0x26e6df0) at util/env_posix.cc:654          function = <optimized out>          arg = <optimized out>  #2  leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper (arg=0x26e6df0) at util/env_posix.cc:599  No locals.  #3  0x0000003d5a007d15 in start_thread (arg=0x7fdb68b73700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb68b73700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580331403008, -8763684436165665671, 0, 28497120, 140580331403008, 21, 8779752087515421817,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #4  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 8 (Thread 0x7fdb3a447700 (LWP 5164)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 120, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 120000000000}  #3  0x00000000004fba30 in MilliSleep (n=<optimized out>) at src/util.h:110  No locals.  #4  0x00000000004f9a38 in ThreadOpenAddedConnections () at src/net.cpp:1533          lAddresses = empty std::list          lservAddressesToAdd = empty std::list          i = 3    #5  0x00000000004fb5fd in TraceThread<void (*)()> (name=0x66914a "addcon", func=0x4f91b0 <ThreadOpenAddedConnections()>) at src/util.h:571          s = "bitcoin-addcon"  #6  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #7  0x0000003d5a007d15 in start_thread (arg=0x7fdb3a447700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb3a447700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579552130816, -8763684436165665671, 0, 263496798208, 140579552130816, 5223872, 8779582648908110969,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #8  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 7 (Thread 0x7fdb38c44700 (LWP 5167)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 10, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 10000000000}  #3  0x00000000004fba91 in MilliSleep (n=10000) at src/util.h:110  No locals.  #4  LoopForever<void (*)()> (name=0x669161 "dumpaddr", func=0x4f4850 <DumpAddresses()>, msecs=10000) at src/util.h:548          s = "bitcoin-dumpaddr"  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x1002b450, pn = {pi_ = 0x9c6f7f0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb38c44700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb38c44700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579526952704, -8763684436165665671, 0, 263496798208, 140579526952704, 5225024, 8779577152960584825,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114    No locals.    Thread 6 (Thread 0x7fdb2bfff700 (LWP 5168)):  #0  0x0000003d59cf2a73 in epoll_wait () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000000000579758 in boost::asio::detail::epoll_reactor::run (this=0x5c76f60, block=<optimized out>, ops=...)      at /usr/include/boost/asio/detail/impl/epoll_reactor.ipp:392          timeout = <optimized out>          events = {{events = 1, data = {ptr = 0x5c76fb8, fd = 96956344, u32 = 96956344, u64 = 96956344}}, {events = 0, data = {ptr = 0x0, fd = 0, u32 = 0,                 u64 = 0}} <repeats 126 times>, {events = 0, data = {ptr = 0xc0b7ed0, fd = 202079952, u32 = 202079952, u64 = 202079952}}}          num_events = <optimized out>          check_timers = <optimized out>  #2  0x000000000057d3aa in do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>)      at /usr/include/boost/asio/detail/impl/task_io_service.ipp:378          on_exit = {task_io_service_ = 0xc0b7ed0, lock_ = 0x7fdb2bffebe0, ops_ = 0x7fdb2bffebd0}          more_handlers = false  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2bffec70, private_op_queue = 0x7fdb2bffebd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0x0, __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}, signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2bffebf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = false}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xca2df10, pn = {pi_ = 0x89c5910}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2bfff700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2bfff700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579312760576, -8763684436165665671, 0, 263496798208, 140579312760576, 355554048, 8779614161083161721,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.      Thread 5 (Thread 0x7fdb2b7fe700 (LWP 5169)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2b7fdc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2b7fdc70, private_op_queue = 0x7fdb2b7fdbd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2b7fdbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xffb62b0, pn = {pi_ = 0x14159ba0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2b7fe700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2b7fe700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579304367872, -8763684436165665671, 0, 263496798208, 140579304367872, 355554048, 8779615261131660409,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 4 (Thread 0x7fdb2affd700 (LWP 5170)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2affcc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.    #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2affcc70, private_op_queue = 0x7fdb2affcbd0, next = 0x7fdb2b7fdbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2affcbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x15545c80, pn = {pi_ = 0x11d84490}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2affd700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2affd700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579295975168, -8763684436165665671, 0, 263496798208, 140579295975168, 355554048, 8779616361180159097,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 3 (Thread 0x7fdb2a7fc700 (LWP 5171)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2a7fbc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2a7fbc70, private_op_queue = 0x7fdb2a7fbbd0, next = 0x7fdb2affcbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =         "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2a7fbbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102039b0, pn = {pi_ = 0xb1857a0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2a7fc700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2a7fc700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579287582464, -8763684436165665671, 0, 263496798208, 140579287582464, 355554048, 8779617461228657785,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 2 (Thread 0x7fdb29ffb700 (LWP 5172)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 0, tv_nsec = 500000000}  #2  0x0000000000512dc9 in sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 500000000}  #3  MilliSleep (n=500) at src/util.h:110  No locals.  #4  ThreadFlushWalletDB (strFile="wallet.dat") at src/walletdb.cpp:504          fOneThread = true          nLastSeen = 0          nLastFlushed = 0          nLastWalletUpdate = 1369618935  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102f45f0, pn = {pi_ = 0x140d2ab0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb29ffb700) at pthread_create.c:308            __res = <optimized out>          pd = 0x7fdb29ffb700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579279189760, -8763684436165665671, 0, 263496798208, 140579279189760, 2097152, 8779609765184134265,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 1 (Thread 0x7fdb73e10880 (LWP 5126)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000003d5d01293b in wait (m=..., this=0xd85b968) at boost/thread/pthread/condition_variable.hpp:62          guard = {m = 0x7fffbfa157d0}          check_for_interruption = {thread_info = 0x0, m = 0xd85b968, set = false}          res = <optimized out>  #2  boost::thread::join (this=0x7a6f170) at libs/thread/src/pthread/thread.cpp:273          lock = {m = 0xd85b940, is_locked = false}          do_join = false          local_thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #3  0x000000000043c5b1 in boost::thread_group::join_all (this=this@entry=0x7fffbfa162d0) at /usr/include/boost/thread/detail/thread_group.hpp:74          it =           end =   #4  0x0000000000433c4f in main (argc=1, argv=<optimized out>) at src/qt/bitcoin.cpp:280          threadGroup = {threads = std::list = {[0] = 0x1c71890, [1] = 0x1c73af0, [2] = 0x1c7c110, [3] = 0x8953500, [4] = 0x90dee40, [5] = 0xa24aaf0, [6] =       0x7a6f170, [7] = 0x869a1d0, [8] = 0xfa3e6b0, [9] = 0x1129d860, [10] = 0x2708040}, m = {state = {shared_count = 1, exclusive = false, upgrade = false,                 exclusive_waiting_blocked = false}, state_change = {m = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins =       0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\000' <repeats 39 times>, __align = 0}}, shared_cond = {internal_mutex = {__data = {__lock = 0,                     __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, exclusive_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, upgrade_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}}}            window = {<QMainWindow> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x70cd50 <vtable for BitcoinGUI+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                         extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1bee220}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},       <QPaintDevice> = {_vptr.QPaintDevice = 0x70cf18 <vtable for BitcoinGUI+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1bee368}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64697ce0 <qt_meta_stringdata_QMainWindow> "QMainWindow", data =       0x3d64697e80 <qt_meta_data_QMainWindow>, extradata = 0x3d64a8dfc0 <QMainWindow::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x3d64a9de80 <qt_meta_extradata_QMainWindow>, static_metacall =       0x3d646325b0 <QMainWindow::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9d9c0 <QMainWindow::staticMetaObject>, stringdata = 0x70c7a0 <qt_meta_stringdata_BitcoinGUI> "BitcoinGUI", data = 0x70cae0 <qt_meta_data_BitcoinGUI>,                 extradata = 0x70c780 <BitcoinGUI::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x5f4720 <BitcoinGUI::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static DEFAULT_WALLET = {static null = {<No data fields>},               static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0,                 righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0,                 data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0,                 array = {  0}}, d = 0x197b820, static codecForCStrings = 0x0}, clientModel = 0x0, walletFrame = 0x1be6790, labelEncryptionIcon = 0x1bdcd40,             labelConnectionsIcon = 0x1bd1a80, labelBlocksIcon = 0x1bd1a50, progressBarLabel = 0x1bd19f0, progressBar = 0x1bd0c70, appMenuBar = 0x1bfddb0,             overviewAction = 0x1becca0, historyAction = 0x1be6490, quitAction = 0x1bf9030, sendCoinsAction = 0x1be64f0, addressBookAction = 0x1be7270,             signMessageAction = 0x1bff2a0, verifyMessageAction = 0x1be24f0, aboutAction = 0x1bf90f0, receiveCoinsAction = 0x1be7ac0, optionsAction =       0x1bd08a0, toggleHideAction = 0x1bd08c0, encryptWalletAction = 0x1bd7110, backupWalletAction = 0x1bde4e0, changePassphraseAction = 0x1be6e70,             aboutQtAction = 0x1bf9110, openRPCConsoleAction = 0x1bd55f0, trayIcon = 0x1b8c1d0, notificator = 0x1bf6530, transactionView = 0x50, rpcConsole =       0x1c36240, syncIconMovie = 0x1c2b0d0, prevBlocks = 238110}          pollShutdownTimer = <optimized out>          paymentServer = 0x1b85480          optionsModel = {<QAbstractListModel> = {<QAbstractItemModel> = {<QObject> = {_vptr.QObject = 0x70fb50 <vtable for OptionsModel+16>,                   static staticMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data =       0x3d63a56260 <qt_meta_data_QObject>, extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0,                     static_metacall = 0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89d20},                   static staticQtMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data =       0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}}, static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a685c0 <qt_meta_stringdata_QAbstractItemModel> "QAbstractItemModel", data = 0x3d63a68a80 <qt_meta_data_QAbstractItemModel>, extradata =       0x3d63cd25e0 <QAbstractItemModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7340 <QAbstractItemModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0x3d63cd25c0 <QAbstractItemModel::staticMetaObject>, stringdata = 0x3d63a689e0 <qt_meta_stringdata_QAbstractListModel> "QAbstractListModel", data =       0x3d63a68a00 <qt_meta_data_QAbstractListModel>, extradata = 0x3d63cd2560 <QAbstractListModel::staticMetaObjectExtraData>}},               static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d6cd0 <QAbstractListModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9dae0 <QAbstractListModel::staticMetaObject>, stringdata = 0x70fce0 <qt_meta_stringdata_OptionsModel> "OptionsModel", data =       0x70fd20 <qt_meta_data_OptionsModel>, extradata = 0x70fcc0 <OptionsModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects =       0x0, static_metacall = 0x5f5cc0 <OptionsModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, nDisplayUnit = 0, bDisplayAddresses =         true, fMinimizeToTray = true, fMinimizeOnClose = false, language = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1},                 alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0,                 reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>,                 clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8b650, static codecForCStrings =       0x0}}          lang = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a8c0, static codecForCStrings = 0x0}          qtTranslator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8b920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          translatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8ba00}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          splash = {<QSplashScreen> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x714590 <vtable for SplashScreen+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                       extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bbc0}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata =       0x0}}}, <QPaintDevice> = {_vptr.QPaintDevice = 0x714758 <vtable for SplashScreen+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1b8bd08}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64698be0 <qt_meta_stringdata_QSplashScreen> "QSplashScreen", data =       0x3d64698d20 <qt_meta_data_QSplashScreen>, extradata = 0x3d64a8f620 <QSplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x0, static_metacall = 0x3d646339e0 <QSplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}},             static staticMetaObject = {d = {superdata = 0xb9e0e0 <QSplashScreen::staticMetaObject>, stringdata =       0x7147b0 <qt_meta_stringdata_SplashScreen> "SplashScreen", data = 0x7147c0 <qt_meta_data_SplashScreen>, extradata =       0x7147a0 <SplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =         0x5f83f0 <SplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          app = {<QCoreApplication> = {<QObject> = {_vptr.QObject = 0x3d64a62df0 <vtable for QApplication+16>, static staticMetaObject = {d = {superdata =       0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x19a46e0}, static staticQtMetaObject = {d = {                    superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},               static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68d80 <qt_meta_stringdata_QCoreApplication> "QCoreApplication", data = 0x3d63a68e20 <qt_meta_data_QCoreApplication>, extradata =       0x3d63cd27a0 <QCoreApplication::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7780 <QCoreApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static self = 0x0}, static staticMetaObject = {d = {                superdata = 0x3d63cd2780 <QCoreApplication::staticMetaObject>, stringdata = 0x3d6463b3c0 <qt_meta_stringdata_QApplication> "QApplication",                 data = 0x3d6463b600 <qt_meta_data_QApplication>, extradata = 0x3d64a62ea0 <QApplication::staticMetaObjectExtraData>}},             static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d63fcdcf0 <QApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          lang_territory = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a650, static codecForCStrings = 0x0}          translator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bae0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          qtTranslatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89fd0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}
2690	18474106	2013-05-27T01:05:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18474106	wtogami	0xc0b7f00,	CTxMemPool::accept() : accepted 0d36dd05ff1a616424f34e6f83c11347db6ad36584daf38956f45f2a813e6a2e (poolsz 44)  CTxMemPool::accept() : accepted 3815abbabaa3ed2ee78d09dbab7f9b24f7f450d3c0e906f1702ab911dbbf5509 (poolsz 45)  opencon thread interrupt  net thread interrupt  msghand thread interrupt  Flushed 14157 addresses to peers.dat  45ms  Flushed 14157 addresses to peers.dat  47ms  Flushed 14157 addresses to peers.dat  43ms  Flushed 14157 addresses to peers.dat  47ms    "thread apply all bt full" during the forever looping messages...    Thread 11 (Thread 0x7fdb69374700 (LWP 5127)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=5, fds=0x7fdb6400a010, timeout=-1, context=0x1b22b90) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=0x1b22b90, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 5          allocated_nfds = <optimized out>          fds = 0x7fdb6400a010  #3  0x00007fdb7427a182 in g_main_loop_run (loop=0x1b22b20) at gmain.c:3484          __PRETTY_FUNCTION__ = "g_main_loop_run"  #4  0x0000003d5d8cc546 in gdbus_shared_thread_func (user_data=0x1b22b60) at gdbusprivate.c:277          data = 0x1b22b60  #5  0x00007fdb7429d605 in g_thread_proxy (data=0x1b1c770) at gthread.c:797          thread = 0x1b1c770  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb69374700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb69374700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580339795712, -8763684436165665671, 0, 263496798208, 140580339795712, 28453728, 8779750987466923129,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 10 (Thread 0x7fdb621a4700 (LWP 5131)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=1, fds=0x7fdb500029c0, timeout=-1, context=0x7fdb500009a0) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=context@entry=0x7fdb500009a0, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 1            allocated_nfds = <optimized out>          fds = 0x7fdb500029c0  #3  0x00007fdb74279e44 in g_main_context_iteration (context=0x7fdb500009a0, may_block=1) at gmain.c:3351          retval = <optimized out>  #4  0x0000003d639a5fa6 in QEventDispatcherGlib::processEvents (this=0x7fdb500008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:426          d = 0x7fdb500008e0          canWait = <optimized out>          savedFlags = {i = 0}          result = false  #5  0x0000003d639765ef in QEventLoop::processEvents (this=this@entry=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:149          d = 0x7fdb50002920  #6  0x0000003d63976878 in QEventLoop::exec (this=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:204          d = 0x7fdb50002920          locker = {val = 29823160}          app = 0x7fffbfa15ee0  #7  0x0000003d63878980 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:542          d = 0x1c71030          locker = {val = 29823160}          eventLoop = {<QObject> = {_vptr.QObject = 0x3d63cd2630 <vtable for QEventLoop+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x7fdb50002920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68ce0 <qt_meta_stringdata_QEventLoop> "QEventLoop", data = 0x3d63a68d00 <qt_meta_data_QEventLoop>, extradata =       0x3d63cd26c0 <QEventLoop::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d76a0 <QEventLoop::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          returnCode = <optimized out>  #8  0x0000003d6387b95c in QThreadPrivate::start (arg=0x1c71f60) at thread/qthread_unix.cpp:338          __clframe = {__cancel_routine = 0x3d6387a900 <QThreadPrivate::finish(void*)>, __cancel_arg = 0x1c71f60, __do_it = 1, __cancel_type = <optimized out>}          thr = 0x1c71f60          data = 0x1c71170          objectName = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0xb9e200 <QString::shared_null>, static codecForCStrings = 0x0}  #9  0x0000003d5a007d15 in start_thread (arg=0x7fdb621a4700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb621a4700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580220454656, -8763684436165665671, 0, 263496798208, 140580220454656, 0, 8779740378897702009,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}            not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #10 0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 9 (Thread 0x7fdb68b73700 (LWP 5136)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000000000617773 in BGThread (this=0x26e6df0) at util/env_posix.cc:654          function = <optimized out>          arg = <optimized out>  #2  leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper (arg=0x26e6df0) at util/env_posix.cc:599  No locals.  #3  0x0000003d5a007d15 in start_thread (arg=0x7fdb68b73700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb68b73700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580331403008, -8763684436165665671, 0, 28497120, 140580331403008, 21, 8779752087515421817,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #4  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 8 (Thread 0x7fdb3a447700 (LWP 5164)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 120, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 120000000000}  #3  0x00000000004fba30 in MilliSleep (n=<optimized out>) at src/util.h:110  No locals.  #4  0x00000000004f9a38 in ThreadOpenAddedConnections () at src/net.cpp:1533          lAddresses = empty std::list          lservAddressesToAdd = empty std::list          i = 3    #5  0x00000000004fb5fd in TraceThread<void (*)()> (name=0x66914a "addcon", func=0x4f91b0 <ThreadOpenAddedConnections()>) at src/util.h:571          s = "bitcoin-addcon"  #6  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #7  0x0000003d5a007d15 in start_thread (arg=0x7fdb3a447700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb3a447700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579552130816, -8763684436165665671, 0, 263496798208, 140579552130816, 5223872, 8779582648908110969,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #8  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 7 (Thread 0x7fdb38c44700 (LWP 5167)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 10, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 10000000000}  #3  0x00000000004fba91 in MilliSleep (n=10000) at src/util.h:110  No locals.  #4  LoopForever<void (*)()> (name=0x669161 "dumpaddr", func=0x4f4850 <DumpAddresses()>, msecs=10000) at src/util.h:548          s = "bitcoin-dumpaddr"  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x1002b450, pn = {pi_ = 0x9c6f7f0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb38c44700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb38c44700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579526952704, -8763684436165665671, 0, 263496798208, 140579526952704, 5225024, 8779577152960584825,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114    No locals.    Thread 6 (Thread 0x7fdb2bfff700 (LWP 5168)):  #0  0x0000003d59cf2a73 in epoll_wait () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000000000579758 in boost::asio::detail::epoll_reactor::run (this=0x5c76f60, block=<optimized out>, ops=...)      at /usr/include/boost/asio/detail/impl/epoll_reactor.ipp:392          timeout = <optimized out>          events = {{events = 1, data = {ptr = 0x5c76fb8, fd = 96956344, u32 = 96956344, u64 = 96956344}}, {events = 0, data = {ptr = 0x0, fd = 0, u32 = 0,                 u64 = 0}} <repeats 126 times>, {events = 0, data = {ptr = 0xc0b7ed0, fd = 202079952, u32 = 202079952, u64 = 202079952}}}          num_events = <optimized out>          check_timers = <optimized out>  #2  0x000000000057d3aa in do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>)      at /usr/include/boost/asio/detail/impl/task_io_service.ipp:378          on_exit = {task_io_service_ = 0xc0b7ed0, lock_ = 0x7fdb2bffebe0, ops_ = 0x7fdb2bffebd0}          more_handlers = false  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2bffec70, private_op_queue = 0x7fdb2bffebd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0x0, __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}, signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2bffebf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = false}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xca2df10, pn = {pi_ = 0x89c5910}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2bfff700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2bfff700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579312760576, -8763684436165665671, 0, 263496798208, 140579312760576, 355554048, 8779614161083161721,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.      Thread 5 (Thread 0x7fdb2b7fe700 (LWP 5169)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2b7fdc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2b7fdc70, private_op_queue = 0x7fdb2b7fdbd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2b7fdbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xffb62b0, pn = {pi_ = 0x14159ba0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2b7fe700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2b7fe700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579304367872, -8763684436165665671, 0, 263496798208, 140579304367872, 355554048, 8779615261131660409,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 4 (Thread 0x7fdb2affd700 (LWP 5170)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2affcc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.    #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2affcc70, private_op_queue = 0x7fdb2affcbd0, next = 0x7fdb2b7fdbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2affcbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x15545c80, pn = {pi_ = 0x11d84490}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2affd700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2affd700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579295975168, -8763684436165665671, 0, 263496798208, 140579295975168, 355554048, 8779616361180159097,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 3 (Thread 0x7fdb2a7fc700 (LWP 5171)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2a7fbc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2a7fbc70, private_op_queue = 0x7fdb2a7fbbd0, next = 0x7fdb2affcbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =         "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2a7fbbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102039b0, pn = {pi_ = 0xb1857a0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2a7fc700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2a7fc700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579287582464, -8763684436165665671, 0, 263496798208, 140579287582464, 355554048, 8779617461228657785,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 2 (Thread 0x7fdb29ffb700 (LWP 5172)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 0, tv_nsec = 500000000}  #2  0x0000000000512dc9 in sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 500000000}  #3  MilliSleep (n=500) at src/util.h:110  No locals.  #4  ThreadFlushWalletDB (strFile="wallet.dat") at src/walletdb.cpp:504          fOneThread = true          nLastSeen = 0          nLastFlushed = 0          nLastWalletUpdate = 1369618935  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102f45f0, pn = {pi_ = 0x140d2ab0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb29ffb700) at pthread_create.c:308            __res = <optimized out>          pd = 0x7fdb29ffb700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579279189760, -8763684436165665671, 0, 263496798208, 140579279189760, 2097152, 8779609765184134265,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 1 (Thread 0x7fdb73e10880 (LWP 5126)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000003d5d01293b in wait (m=..., this=0xd85b968) at boost/thread/pthread/condition_variable.hpp:62          guard = {m = 0x7fffbfa157d0}          check_for_interruption = {thread_info = 0x0, m = 0xd85b968, set = false}          res = <optimized out>  #2  boost::thread::join (this=0x7a6f170) at libs/thread/src/pthread/thread.cpp:273          lock = {m = 0xd85b940, is_locked = false}          do_join = false          local_thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #3  0x000000000043c5b1 in boost::thread_group::join_all (this=this@entry=0x7fffbfa162d0) at /usr/include/boost/thread/detail/thread_group.hpp:74          it =           end =   #4  0x0000000000433c4f in main (argc=1, argv=<optimized out>) at src/qt/bitcoin.cpp:280          threadGroup = {threads = std::list = {[0] = 0x1c71890, [1] = 0x1c73af0, [2] = 0x1c7c110, [3] = 0x8953500, [4] = 0x90dee40, [5] = 0xa24aaf0, [6] =       0x7a6f170, [7] = 0x869a1d0, [8] = 0xfa3e6b0, [9] = 0x1129d860, [10] = 0x2708040}, m = {state = {shared_count = 1, exclusive = false, upgrade = false,                 exclusive_waiting_blocked = false}, state_change = {m = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins =       0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\000' <repeats 39 times>, __align = 0}}, shared_cond = {internal_mutex = {__data = {__lock = 0,                     __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, exclusive_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, upgrade_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}}}            window = {<QMainWindow> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x70cd50 <vtable for BitcoinGUI+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                         extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1bee220}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},       <QPaintDevice> = {_vptr.QPaintDevice = 0x70cf18 <vtable for BitcoinGUI+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1bee368}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64697ce0 <qt_meta_stringdata_QMainWindow> "QMainWindow", data =       0x3d64697e80 <qt_meta_data_QMainWindow>, extradata = 0x3d64a8dfc0 <QMainWindow::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x3d64a9de80 <qt_meta_extradata_QMainWindow>, static_metacall =       0x3d646325b0 <QMainWindow::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9d9c0 <QMainWindow::staticMetaObject>, stringdata = 0x70c7a0 <qt_meta_stringdata_BitcoinGUI> "BitcoinGUI", data = 0x70cae0 <qt_meta_data_BitcoinGUI>,                 extradata = 0x70c780 <BitcoinGUI::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x5f4720 <BitcoinGUI::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static DEFAULT_WALLET = {static null = {<No data fields>},               static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0,                 righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0,                 data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0,                 array = {  0}}, d = 0x197b820, static codecForCStrings = 0x0}, clientModel = 0x0, walletFrame = 0x1be6790, labelEncryptionIcon = 0x1bdcd40,             labelConnectionsIcon = 0x1bd1a80, labelBlocksIcon = 0x1bd1a50, progressBarLabel = 0x1bd19f0, progressBar = 0x1bd0c70, appMenuBar = 0x1bfddb0,             overviewAction = 0x1becca0, historyAction = 0x1be6490, quitAction = 0x1bf9030, sendCoinsAction = 0x1be64f0, addressBookAction = 0x1be7270,             signMessageAction = 0x1bff2a0, verifyMessageAction = 0x1be24f0, aboutAction = 0x1bf90f0, receiveCoinsAction = 0x1be7ac0, optionsAction =       0x1bd08a0, toggleHideAction = 0x1bd08c0, encryptWalletAction = 0x1bd7110, backupWalletAction = 0x1bde4e0, changePassphraseAction = 0x1be6e70,             aboutQtAction = 0x1bf9110, openRPCConsoleAction = 0x1bd55f0, trayIcon = 0x1b8c1d0, notificator = 0x1bf6530, transactionView = 0x50, rpcConsole =       0x1c36240, syncIconMovie = 0x1c2b0d0, prevBlocks = 238110}          pollShutdownTimer = <optimized out>          paymentServer = 0x1b85480          optionsModel = {<QAbstractListModel> = {<QAbstractItemModel> = {<QObject> = {_vptr.QObject = 0x70fb50 <vtable for OptionsModel+16>,                   static staticMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data =       0x3d63a56260 <qt_meta_data_QObject>, extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0,                     static_metacall = 0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89d20},                   static staticQtMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data =       0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}}, static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a685c0 <qt_meta_stringdata_QAbstractItemModel> "QAbstractItemModel", data = 0x3d63a68a80 <qt_meta_data_QAbstractItemModel>, extradata =       0x3d63cd25e0 <QAbstractItemModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7340 <QAbstractItemModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0x3d63cd25c0 <QAbstractItemModel::staticMetaObject>, stringdata = 0x3d63a689e0 <qt_meta_stringdata_QAbstractListModel> "QAbstractListModel", data =       0x3d63a68a00 <qt_meta_data_QAbstractListModel>, extradata = 0x3d63cd2560 <QAbstractListModel::staticMetaObjectExtraData>}},               static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d6cd0 <QAbstractListModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9dae0 <QAbstractListModel::staticMetaObject>, stringdata = 0x70fce0 <qt_meta_stringdata_OptionsModel> "OptionsModel", data =       0x70fd20 <qt_meta_data_OptionsModel>, extradata = 0x70fcc0 <OptionsModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects =       0x0, static_metacall = 0x5f5cc0 <OptionsModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, nDisplayUnit = 0, bDisplayAddresses =         true, fMinimizeToTray = true, fMinimizeOnClose = false, language = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1},                 alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0,                 reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>,                 clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8b650, static codecForCStrings =       0x0}}          lang = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a8c0, static codecForCStrings = 0x0}          qtTranslator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8b920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          translatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8ba00}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          splash = {<QSplashScreen> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x714590 <vtable for SplashScreen+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                       extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bbc0}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata =       0x0}}}, <QPaintDevice> = {_vptr.QPaintDevice = 0x714758 <vtable for SplashScreen+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1b8bd08}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64698be0 <qt_meta_stringdata_QSplashScreen> "QSplashScreen", data =       0x3d64698d20 <qt_meta_data_QSplashScreen>, extradata = 0x3d64a8f620 <QSplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x0, static_metacall = 0x3d646339e0 <QSplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}},             static staticMetaObject = {d = {superdata = 0xb9e0e0 <QSplashScreen::staticMetaObject>, stringdata =       0x7147b0 <qt_meta_stringdata_SplashScreen> "SplashScreen", data = 0x7147c0 <qt_meta_data_SplashScreen>, extradata =       0x7147a0 <SplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =         0x5f83f0 <SplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          app = {<QCoreApplication> = {<QObject> = {_vptr.QObject = 0x3d64a62df0 <vtable for QApplication+16>, static staticMetaObject = {d = {superdata =       0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x19a46e0}, static staticQtMetaObject = {d = {                    superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},               static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68d80 <qt_meta_stringdata_QCoreApplication> "QCoreApplication", data = 0x3d63a68e20 <qt_meta_data_QCoreApplication>, extradata =       0x3d63cd27a0 <QCoreApplication::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7780 <QCoreApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static self = 0x0}, static staticMetaObject = {d = {                superdata = 0x3d63cd2780 <QCoreApplication::staticMetaObject>, stringdata = 0x3d6463b3c0 <qt_meta_stringdata_QApplication> "QApplication",                 data = 0x3d6463b600 <qt_meta_data_QApplication>, extradata = 0x3d64a62ea0 <QApplication::staticMetaObjectExtraData>}},             static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d63fcdcf0 <QApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          lang_territory = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a650, static codecForCStrings = 0x0}          translator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bae0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          qtTranslatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89fd0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}
2690	18474106	2013-05-27T01:05:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18474106	wtogami	0xc0b7f00,	CTxMemPool::accept() : accepted 0d36dd05ff1a616424f34e6f83c11347db6ad36584daf38956f45f2a813e6a2e (poolsz 44)  CTxMemPool::accept() : accepted 3815abbabaa3ed2ee78d09dbab7f9b24f7f450d3c0e906f1702ab911dbbf5509 (poolsz 45)  opencon thread interrupt  net thread interrupt  msghand thread interrupt  Flushed 14157 addresses to peers.dat  45ms  Flushed 14157 addresses to peers.dat  47ms  Flushed 14157 addresses to peers.dat  43ms  Flushed 14157 addresses to peers.dat  47ms    "thread apply all bt full" during the forever looping messages...    Thread 11 (Thread 0x7fdb69374700 (LWP 5127)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=5, fds=0x7fdb6400a010, timeout=-1, context=0x1b22b90) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=0x1b22b90, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 5          allocated_nfds = <optimized out>          fds = 0x7fdb6400a010  #3  0x00007fdb7427a182 in g_main_loop_run (loop=0x1b22b20) at gmain.c:3484          __PRETTY_FUNCTION__ = "g_main_loop_run"  #4  0x0000003d5d8cc546 in gdbus_shared_thread_func (user_data=0x1b22b60) at gdbusprivate.c:277          data = 0x1b22b60  #5  0x00007fdb7429d605 in g_thread_proxy (data=0x1b1c770) at gthread.c:797          thread = 0x1b1c770  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb69374700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb69374700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580339795712, -8763684436165665671, 0, 263496798208, 140580339795712, 28453728, 8779750987466923129,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 10 (Thread 0x7fdb621a4700 (LWP 5131)):  #0  0x0000003d59ce99ad in poll () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x00007fdb74279d24 in g_main_context_poll (priority=2147483647, n_fds=1, fds=0x7fdb500029c0, timeout=-1, context=0x7fdb500009a0) at gmain.c:3584          poll_func = 0x7fdb74287e00 <g_poll>  #2  g_main_context_iterate (context=context@entry=0x7fdb500009a0, block=block@entry=1, dispatch=dispatch@entry=1, self=<optimized out>) at gmain.c:3285          max_priority = 2147483647          timeout = -1          some_ready = <optimized out>          nfds = 1            allocated_nfds = <optimized out>          fds = 0x7fdb500029c0  #3  0x00007fdb74279e44 in g_main_context_iteration (context=0x7fdb500009a0, may_block=1) at gmain.c:3351          retval = <optimized out>  #4  0x0000003d639a5fa6 in QEventDispatcherGlib::processEvents (this=0x7fdb500008c0, flags=...) at kernel/qeventdispatcher_glib.cpp:426          d = 0x7fdb500008e0          canWait = <optimized out>          savedFlags = {i = 0}          result = false  #5  0x0000003d639765ef in QEventLoop::processEvents (this=this@entry=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:149          d = 0x7fdb50002920  #6  0x0000003d63976878 in QEventLoop::exec (this=0x7fdb621a3d00, flags=...) at kernel/qeventloop.cpp:204          d = 0x7fdb50002920          locker = {val = 29823160}          app = 0x7fffbfa15ee0  #7  0x0000003d63878980 in QThread::exec (this=<optimized out>) at thread/qthread.cpp:542          d = 0x1c71030          locker = {val = 29823160}          eventLoop = {<QObject> = {_vptr.QObject = 0x3d63cd2630 <vtable for QEventLoop+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x7fdb50002920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68ce0 <qt_meta_stringdata_QEventLoop> "QEventLoop", data = 0x3d63a68d00 <qt_meta_data_QEventLoop>, extradata =       0x3d63cd26c0 <QEventLoop::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d76a0 <QEventLoop::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          returnCode = <optimized out>  #8  0x0000003d6387b95c in QThreadPrivate::start (arg=0x1c71f60) at thread/qthread_unix.cpp:338          __clframe = {__cancel_routine = 0x3d6387a900 <QThreadPrivate::finish(void*)>, __cancel_arg = 0x1c71f60, __do_it = 1, __cancel_type = <optimized out>}          thr = 0x1c71f60          data = 0x1c71170          objectName = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0xb9e200 <QString::shared_null>, static codecForCStrings = 0x0}  #9  0x0000003d5a007d15 in start_thread (arg=0x7fdb621a4700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb621a4700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580220454656, -8763684436165665671, 0, 263496798208, 140580220454656, 0, 8779740378897702009,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}            not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #10 0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 9 (Thread 0x7fdb68b73700 (LWP 5136)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000000000617773 in BGThread (this=0x26e6df0) at util/env_posix.cc:654          function = <optimized out>          arg = <optimized out>  #2  leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper (arg=0x26e6df0) at util/env_posix.cc:599  No locals.  #3  0x0000003d5a007d15 in start_thread (arg=0x7fdb68b73700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb68b73700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140580331403008, -8763684436165665671, 0, 28497120, 140580331403008, 21, 8779752087515421817,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #4  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 8 (Thread 0x7fdb3a447700 (LWP 5164)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 120, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 120000000000}  #3  0x00000000004fba30 in MilliSleep (n=<optimized out>) at src/util.h:110  No locals.  #4  0x00000000004f9a38 in ThreadOpenAddedConnections () at src/net.cpp:1533          lAddresses = empty std::list          lservAddressesToAdd = empty std::list          i = 3    #5  0x00000000004fb5fd in TraceThread<void (*)()> (name=0x66914a "addcon", func=0x4f91b0 <ThreadOpenAddedConnections()>) at src/util.h:571          s = "bitcoin-addcon"  #6  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #7  0x0000003d5a007d15 in start_thread (arg=0x7fdb3a447700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb3a447700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579552130816, -8763684436165665671, 0, 263496798208, 140579552130816, 5223872, 8779582648908110969,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #8  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 7 (Thread 0x7fdb38c44700 (LWP 5167)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 10, tv_nsec = 0}  #2  0x00000000004fba1a in boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 10000000000}  #3  0x00000000004fba91 in MilliSleep (n=10000) at src/util.h:110  No locals.  #4  LoopForever<void (*)()> (name=0x669161 "dumpaddr", func=0x4f4850 <DumpAddresses()>, msecs=10000) at src/util.h:548          s = "bitcoin-dumpaddr"  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x1002b450, pn = {pi_ = 0x9c6f7f0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb38c44700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb38c44700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579526952704, -8763684436165665671, 0, 263496798208, 140579526952704, 5225024, 8779577152960584825,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114    No locals.    Thread 6 (Thread 0x7fdb2bfff700 (LWP 5168)):  #0  0x0000003d59cf2a73 in epoll_wait () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000000000579758 in boost::asio::detail::epoll_reactor::run (this=0x5c76f60, block=<optimized out>, ops=...)      at /usr/include/boost/asio/detail/impl/epoll_reactor.ipp:392          timeout = <optimized out>          events = {{events = 1, data = {ptr = 0x5c76fb8, fd = 96956344, u32 = 96956344, u64 = 96956344}}, {events = 0, data = {ptr = 0x0, fd = 0, u32 = 0,                 u64 = 0}} <repeats 126 times>, {events = 0, data = {ptr = 0xc0b7ed0, fd = 202079952, u32 = 202079952, u64 = 202079952}}}          num_events = <optimized out>          check_timers = <optimized out>  #2  0x000000000057d3aa in do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>)      at /usr/include/boost/asio/detail/impl/task_io_service.ipp:378          on_exit = {task_io_service_ = 0xc0b7ed0, lock_ = 0x7fdb2bffebe0, ops_ = 0x7fdb2bffebd0}          more_handlers = false  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2bffec70, private_op_queue = 0x7fdb2bffebd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0x0, __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}, signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2bffebf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = false}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xca2df10, pn = {pi_ = 0x89c5910}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2bfff700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2bfff700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579312760576, -8763684436165665671, 0, 263496798208, 140579312760576, 355554048, 8779614161083161721,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.      Thread 5 (Thread 0x7fdb2b7fe700 (LWP 5169)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2b7fdc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2b7fdc70, private_op_queue = 0x7fdb2b7fdbd0, next = 0x0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2b7fdbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0xffb62b0, pn = {pi_ = 0x14159ba0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2b7fe700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2b7fe700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579304367872, -8763684436165665671, 0, 263496798208, 140579304367872, 355554048, 8779615261131660409,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 4 (Thread 0x7fdb2affd700 (LWP 5170)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2affcc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.    #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2affcc70, private_op_queue = 0x7fdb2affcbd0, next = 0x7fdb2b7fdbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =       "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2affcbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x15545c80, pn = {pi_ = 0x11d84490}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2affd700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2affd700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579295975168, -8763684436165665671, 0, 263496798208, 140579295975168, 355554048, 8779616361180159097,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 3 (Thread 0x7fdb2a7fc700 (LWP 5171)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x000000000057d57d in wait<boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex> > (lock=..., this=0x7fdb2a7fbc70)      at /usr/include/boost/asio/detail/posix_event.hpp:80  No locals.  #2  do_run_one (ec=..., private_op_queue=..., this_thread=..., lock=..., this=<optimized out>) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:405  No locals.  #3  boost::asio::detail::task_io_service::run (this=0xc0b7ed0, ec=...) at /usr/include/boost/asio/detail/impl/task_io_service.ipp:146          this_thread = {wakeup_event = 0x7fdb2a7fbc70, private_op_queue = 0x7fdb2a7fbbd0, next = 0x7fdb2affcbf0}          wakeup_event = {<boost::noncopyable_::noncopyable> = {<No data fields>}, cond_ = {__data = {__lock = 0, __futex = 1, __total_seq = 1, __wakeup_seq =       0, __woken_seq = 0, __mutex = 0xc0b7f00, __nwaiters = 2, __broadcast_seq = 0}, __size =         "\000\000\000\000\001\000\000\000\001", '\000' <repeats 24 times>, "\177\v\f\000\000\000\000\002\000\000\000\000\000\000", __align = 4294967296},             signalled_ = false}          ctx = {<boost::noncopyable_::noncopyable> = {<No data fields>}, key_ = 0xc0b7ed0, value_ = 0x7fdb2a7fbbf0, next_ = 0x0}          private_op_queue = {<boost::noncopyable_::noncopyable> = {<No data fields>}, front_ = 0x0, back_ = 0x0}          lock = {<boost::noncopyable_::noncopyable> = {<No data fields>}, mutex_ = @0xc0b7f00, locked_ = true}          n = <optimized out>  #4  0x000000000057e1a5 in boost::asio::io_service::run (this=0x101277f0) at /usr/include/boost/asio/impl/io_service.ipp:59          ec = {m_val = 0, m_cat = 0x3d5c6030b8 <boost::system::system_category()::system_category_const>}          s = <optimized out>  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102039b0, pn = {pi_ = 0xb1857a0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb2a7fc700) at pthread_create.c:308          __res = <optimized out>          pd = 0x7fdb2a7fc700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579287582464, -8763684436165665671, 0, 263496798208, 140579287582464, 355554048, 8779617461228657785,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 2 (Thread 0x7fdb29ffb700 (LWP 5172)):  #0  0x0000003d5a00e86d in nanosleep () at ../sysdeps/unix/syscall-template.S:81  No locals.  #1  0x0000003d5d010f47 in boost::this_thread::sleep_for (ns=...) at libs/thread/src/pthread/thread.cpp:442          ts = {tv_sec = 0, tv_nsec = 500000000}  #2  0x0000000000512dc9 in sleep_for<long, boost::ratio<1l, 1000l> > (d=...) at /usr/include/boost/thread/v2/thread.hpp:29          ns = {static boost_chrono_test_420 = <optimized out>, static boost_chrono_test_422 = <optimized out>,             static boost_chrono_test_424 = <optimized out>, rep_ = 500000000}  #3  MilliSleep (n=500) at src/util.h:110  No locals.  #4  ThreadFlushWalletDB (strFile="wallet.dat") at src/walletdb.cpp:504          fOneThread = true          nLastSeen = 0          nLastFlushed = 0          nLastWalletUpdate = 1369618935  #5  0x0000003d5d011629 in boost::(anonymous namespace)::thread_proxy (param=<optimized out>) at libs/thread/src/pthread/thread.cpp:143          thread_info = {px = 0x102f45f0, pn = {pi_ = 0x140d2ab0}}  #6  0x0000003d5a007d15 in start_thread (arg=0x7fdb29ffb700) at pthread_create.c:308            __res = <optimized out>          pd = 0x7fdb29ffb700          now = <optimized out>          unwind_buf = {cancel_jmp_buf = {{jmp_buf = {140579279189760, -8763684436165665671, 0, 263496798208, 140579279189760, 2097152, 8779609765184134265,       -8783260145072743303}, mask_was_saved = 0}}, priv = {pad = {0x0, 0x0, 0x0, 0x0}, data = {prev = 0x0, cleanup = 0x0, canceltype = 0}}}          not_first_call = 0          pagesize_m1 = <optimized out>          sp = <optimized out>          freesize = <optimized out>  #7  0x0000003d59cf248d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:114  No locals.    Thread 1 (Thread 0x7fdb73e10880 (LWP 5126)):  #0  pthread_cond_wait@@GLIBC_2.3.2 () at ../nptl/sysdeps/unix/sysv/linux/x86_64/pthread_cond_wait.S:165  No locals.  #1  0x0000003d5d01293b in wait (m=..., this=0xd85b968) at boost/thread/pthread/condition_variable.hpp:62          guard = {m = 0x7fffbfa157d0}          check_for_interruption = {thread_info = 0x0, m = 0xd85b968, set = false}          res = <optimized out>  #2  boost::thread::join (this=0x7a6f170) at libs/thread/src/pthread/thread.cpp:273          lock = {m = 0xd85b940, is_locked = false}          do_join = false          local_thread_info = {px = 0xd85b910, pn = {pi_ = 0x102552a0}}  #3  0x000000000043c5b1 in boost::thread_group::join_all (this=this@entry=0x7fffbfa162d0) at /usr/include/boost/thread/detail/thread_group.hpp:74          it =           end =   #4  0x0000000000433c4f in main (argc=1, argv=<optimized out>) at src/qt/bitcoin.cpp:280          threadGroup = {threads = std::list = {[0] = 0x1c71890, [1] = 0x1c73af0, [2] = 0x1c7c110, [3] = 0x8953500, [4] = 0x90dee40, [5] = 0xa24aaf0, [6] =       0x7a6f170, [7] = 0x869a1d0, [8] = 0xfa3e6b0, [9] = 0x1129d860, [10] = 0x2708040}, m = {state = {shared_count = 1, exclusive = false, upgrade = false,                 exclusive_waiting_blocked = false}, state_change = {m = {__data = {__lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins =       0, __list = {__prev = 0x0, __next = 0x0}}, __size = '\000' <repeats 39 times>, __align = 0}}, shared_cond = {internal_mutex = {__data = {__lock = 0,                     __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, exclusive_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}, upgrade_cond = {internal_mutex = {__data = {                    __lock = 0, __count = 0, __owner = 0, __nusers = 0, __kind = 0, __spins = 0, __list = {__prev = 0x0, __next = 0x0}}, __size =       '\000' <repeats 39 times>, __align = 0}, cond = {__data = {__lock = 0, __futex = 0, __total_seq = 0, __wakeup_seq = 0, __woken_seq = 0, __mutex = 0x0,                     __nwaiters = 0, __broadcast_seq = 0}, __size = '\000' <repeats 47 times>, __align = 0}}}}            window = {<QMainWindow> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x70cd50 <vtable for BitcoinGUI+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                         extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1bee220}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},       <QPaintDevice> = {_vptr.QPaintDevice = 0x70cf18 <vtable for BitcoinGUI+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1bee368}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64697ce0 <qt_meta_stringdata_QMainWindow> "QMainWindow", data =       0x3d64697e80 <qt_meta_data_QMainWindow>, extradata = 0x3d64a8dfc0 <QMainWindow::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x3d64a9de80 <qt_meta_extradata_QMainWindow>, static_metacall =       0x3d646325b0 <QMainWindow::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9d9c0 <QMainWindow::staticMetaObject>, stringdata = 0x70c7a0 <qt_meta_stringdata_BitcoinGUI> "BitcoinGUI", data = 0x70cae0 <qt_meta_data_BitcoinGUI>,                 extradata = 0x70c780 <BitcoinGUI::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x5f4720 <BitcoinGUI::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static DEFAULT_WALLET = {static null = {<No data fields>},               static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0,                 righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0,                 data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0,                 array = {  0}}, d = 0x197b820, static codecForCStrings = 0x0}, clientModel = 0x0, walletFrame = 0x1be6790, labelEncryptionIcon = 0x1bdcd40,             labelConnectionsIcon = 0x1bd1a80, labelBlocksIcon = 0x1bd1a50, progressBarLabel = 0x1bd19f0, progressBar = 0x1bd0c70, appMenuBar = 0x1bfddb0,             overviewAction = 0x1becca0, historyAction = 0x1be6490, quitAction = 0x1bf9030, sendCoinsAction = 0x1be64f0, addressBookAction = 0x1be7270,             signMessageAction = 0x1bff2a0, verifyMessageAction = 0x1be24f0, aboutAction = 0x1bf90f0, receiveCoinsAction = 0x1be7ac0, optionsAction =       0x1bd08a0, toggleHideAction = 0x1bd08c0, encryptWalletAction = 0x1bd7110, backupWalletAction = 0x1bde4e0, changePassphraseAction = 0x1be6e70,             aboutQtAction = 0x1bf9110, openRPCConsoleAction = 0x1bd55f0, trayIcon = 0x1b8c1d0, notificator = 0x1bf6530, transactionView = 0x50, rpcConsole =       0x1c36240, syncIconMovie = 0x1c2b0d0, prevBlocks = 238110}          pollShutdownTimer = <optimized out>          paymentServer = 0x1b85480          optionsModel = {<QAbstractListModel> = {<QAbstractItemModel> = {<QObject> = {_vptr.QObject = 0x70fb50 <vtable for OptionsModel+16>,                   static staticMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data =       0x3d63a56260 <qt_meta_data_QObject>, extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0,                     static_metacall = 0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89d20},                   static staticQtMetaObject = {d = {superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data =       0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}}, static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a685c0 <qt_meta_stringdata_QAbstractItemModel> "QAbstractItemModel", data = 0x3d63a68a80 <qt_meta_data_QAbstractItemModel>, extradata =       0x3d63cd25e0 <QAbstractItemModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7340 <QAbstractItemModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0x3d63cd25c0 <QAbstractItemModel::staticMetaObject>, stringdata = 0x3d63a689e0 <qt_meta_stringdata_QAbstractListModel> "QAbstractListModel", data =       0x3d63a68a00 <qt_meta_data_QAbstractListModel>, extradata = 0x3d63cd2560 <QAbstractListModel::staticMetaObjectExtraData>}},               static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d6cd0 <QAbstractListModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}, static staticMetaObject = {d = {superdata =       0xb9dae0 <QAbstractListModel::staticMetaObject>, stringdata = 0x70fce0 <qt_meta_stringdata_OptionsModel> "OptionsModel", data =       0x70fd20 <qt_meta_data_OptionsModel>, extradata = 0x70fcc0 <OptionsModel::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects =       0x0, static_metacall = 0x5f5cc0 <OptionsModel::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, nDisplayUnit = 0, bDisplayAddresses =         true, fMinimizeToTray = true, fMinimizeOnClose = false, language = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1},                 alloc = 0, size = 0, data = 0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0,                 reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>,                 clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8b650, static codecForCStrings =       0x0}}          lang = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a8c0, static codecForCStrings = 0x0}          qtTranslator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8b920}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          translatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8ba00}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          splash = {<QSplashScreen> = {<QWidget> = {<QObject> = {_vptr.QObject = 0x714590 <vtable for SplashScreen+16>, static staticMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>,                       extradata = 0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bbc0}, static staticQtMetaObject = {d = {                      superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata =       0x0}}}, <QPaintDevice> = {_vptr.QPaintDevice = 0x714758 <vtable for SplashScreen+472>, painters = 0}, static staticMetaObject = {d = {superdata =       0xb9de80 <QObject::staticMetaObject>, stringdata = 0x3d6463f1e0 <qt_meta_stringdata_QWidget> "QWidget", data = 0x3d6463f720 <qt_meta_data_QWidget>,                     extradata = 0x3d64a64e40 <QWidget::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6401b240 <QWidget::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, data = 0x1b8bd08}, static staticMetaObject = {d = {superdata =       0xb9e680 <QWidget::staticMetaObject>, stringdata = 0x3d64698be0 <qt_meta_stringdata_QSplashScreen> "QSplashScreen", data =       0x3d64698d20 <qt_meta_data_QSplashScreen>, extradata = 0x3d64a8f620 <QSplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {                objects = 0x0, static_metacall = 0x3d646339e0 <QSplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}},             static staticMetaObject = {d = {superdata = 0xb9e0e0 <QSplashScreen::staticMetaObject>, stringdata =       0x7147b0 <qt_meta_stringdata_SplashScreen> "SplashScreen", data = 0x7147c0 <qt_meta_data_SplashScreen>, extradata =       0x7147a0 <SplashScreen::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =         0x5f83f0 <SplashScreen::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          app = {<QCoreApplication> = {<QObject> = {_vptr.QObject = 0x3d64a62df0 <vtable for QApplication+16>, static staticMetaObject = {d = {superdata =       0x0, stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x19a46e0}, static staticQtMetaObject = {d = {                    superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},               static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a68d80 <qt_meta_stringdata_QCoreApplication> "QCoreApplication", data = 0x3d63a68e20 <qt_meta_data_QCoreApplication>, extradata =       0x3d63cd27a0 <QCoreApplication::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7780 <QCoreApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, static self = 0x0}, static staticMetaObject = {d = {                superdata = 0x3d63cd2780 <QCoreApplication::staticMetaObject>, stringdata = 0x3d6463b3c0 <qt_meta_stringdata_QApplication> "QApplication",                 data = 0x3d6463b600 <qt_meta_data_QApplication>, extradata = 0x3d64a62ea0 <QApplication::staticMetaObjectExtraData>}},             static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d63fcdcf0 <QApplication::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          lang_territory = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 1}, alloc = 0, size = 0, data =       0xb9e21a <QString::shared_null+26>, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}},             static shared_empty = {ref = {_q_value = 9}, alloc = 0, size = 0, data = 0x3d63cd48fa <QString::shared_empty+26>, clean = 0, simpletext = 0,               righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x1b8a650, static codecForCStrings = 0x0}          translator = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0, stringdata =       0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b8bae0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}          qtTranslatorBase = {<QObject> = {_vptr.QObject = 0x3d63cd2ab0 <vtable for QTranslator+16>, static staticMetaObject = {d = {superdata = 0x0,                   stringdata = 0x3d63a561c0 <qt_meta_stringdata_QObject> "QObject", data = 0x3d63a56260 <qt_meta_data_QObject>, extradata =       0x3d63ccfb40 <QObject::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d6398e070 <QObject::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}, d_ptr = {d = 0x1b89fd0}, static staticQtMetaObject = {d = {                  superdata = 0x0, stringdata = 0x3d63a5f100 <qt_meta_stringdata_Qt> "Qt", data = 0x3d63a62a20 <qt_meta_data_Qt>, extradata = 0x0}}},             static staticMetaObject = {d = {superdata = 0xb9de80 <QObject::staticMetaObject>, stringdata =       0x3d63a6a180 <qt_meta_stringdata_QTranslator> "QTranslator", data = 0x3d63a6a1a0 <qt_meta_data_QTranslator>, extradata =       0x3d63cd2b40 <QTranslator::staticMetaObjectExtraData>}}, static staticMetaObjectExtraData = {objects = 0x0, static_metacall =       0x3d639d7e10 <QTranslator::qt_static_metacall(QObject*, QMetaObject::Call, int, void**)>}}
2686	18361381	2013-05-23T18:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18361381	luke-jr	alamtr	@alamtr Sounds like you are receiving spam, which the network tries to filter out. We can probably know more for sure if you post the transaction ids and amounts.
2684	18351902	2013-05-23T15:42:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18351902	Diapolo	jonasschnelli	@jonasschnelli You can close issues you created for yourself :).
2679	18602889	2013-05-29T08:36:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18602889	vhf	super3	@super3 : Sure. Done.
2677	18242271	2013-05-21T21:29:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18242271	gmaxwell	gyver	@gyver Thats what miner software should and (some) does do.  .. but at some point you need to compute the data... and it's good if it's not a slow and expensive operation.
2677	18243282	2013-05-21T21:43:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18243282	gyver	gmaxwell	@gmaxwell of course I agree speeding up the actual computation is desirable.    I was wondering if it wouldn't make sense to implement this async technique in bitcoind itself. For example I suspect (again: uninformed guess) that slow calls to getmininginfo and getblocktemplate use the same access pattern to an internal tx structure and could benefit from the same optimization (at least they became slow on my node when the number of tx started to grow). At some point when multiple tools all implement the same algorithm on top of another tool the question of integrating this algorithm in the common tool becomes valid (the answer isn't always obvious though).  It could become more obvious when the heavy client only makes sense for pool owners/miners (and most end-users have migrated to lightweight clients).    It's just an idea to test the waters (mainly to avoid wasting time with it if the template build process intrinsically can't benefit from this approach), it's far from a feature request.    I'm more and more interested by the node's source code and how I could play with it but I just scraped the surface...
2677	18245264	2013-05-21T22:11:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245264	gyver	gmaxwell	@gmaxwell still thinking about your suggestion and focusing on how miner software can optimize their latency when a new block is accepted by the local node. The miner doesn't want to use an old cached template to avoid wasting work but can't simply call getblocktemplate naively if it wants a fast reply (event after a new block there can be and often is a lot of transactions to include in a template).  It can receive a notification from the node (there are already interfaces for that). I assume that to minimize latency it can call getblocktemplate with an emplty tx list to get a fast reply and immediately call it again without specifying the list to include txs as soon as possible.  As many pools have closed source software I'm not sure if they really implement this kind of behaviour. Latency issues may be solved by simply publishing recommendations for miner software instead of modifying bitcoind itself. As p2pool is probably the most likely to benefit from this, I'll link this post in the p2pool bitcointalk.org thread and continue there to avoid deviating even more from the subject here.
2677	18245577	2013-05-21T22:18:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245577	gmaxwell	gyver	@gyver Eloipool is free software an implements the optimizations you appear to be describing there. (precomputed empty templates and such).
2677	18245961	2013-05-21T22:26:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245961	gyver	gmaxwell	@gmaxwell thanks for the pointer. Was already in my large bag of source code to read but moved near the top of the pile :)
2675	18154099	2013-05-20T15:36:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18154099	Diapolo	laanwj	@laanwj Perhaps we should add some category for this type of transaction, so we at least show something and not just nothing?
2675	18157087	2013-05-20T16:28:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18157087	laanwj	diapolo	Ok, at least it's explained, nothing more to do here, closing the issue.    @diapolo this is not something that happens with normal use of the software, so fixing this has no priority. I'm already happy that it's robust against this and that it doesn't trigger some assertion.
2672	18134764	2013-05-20T07:07:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18134764	jonasschnelli	Diapolo	ACK  @Diapolo looks good on mac. Started Bitcoin-Qt with -testnet. TN-Icon showed up simultaneous with the splashscreen.
2672	18153356	2013-05-20T15:23:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18153356	Diapolo	laanwj	@laanwj I'm fine with your sidenode, but as I use Testnet even more often than Mainnet, I wanted to make this "perfect" ;).
2671	18123522	2013-05-19T19:44:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123522	Diapolo	bytemaster	@bytemaster If there are more leaks in key.cpp it would be fine to have fixes in this pull for them IMHO.
2671	18153974	2013-05-20T15:34:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18153974	Diapolo	bytemaster	@bytemaster How did you find these problems, just by browsing the code of via some tool?
2671	18160074	2013-05-20T17:23:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18160074	bytemaster	bytemaster	I was using the source code as an example for creating my own ECC library.    The real question is what kind of security implications are there?  Could  someone construct transactions to exploit these leaks?  I doubt anyone  could lose coins, but you could crash all of the nodes on the network with  the right kind of trx spam.      On Mon, May 20, 2013 at 11:34 AM, Philip Kaufmann  <notifications@github.com>wrote:    > @bytemaster <https://github.com/bytemaster> How did you find these  > problems, just by browsing the code of via some tool?  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2671#issuecomment-18153974>  > .  >
2671	18160733	2013-05-20T17:34:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18160733	gmaxwell	bytemaster	@bytemaster We only use key recovery for verifymessage (the manual message signing stuff), and we only sign in response to user/rpc request, never P2P.  Unless I'm missing something here there is no such risk in these cases.    (None the less the fixes are fantastic and also point out the memleak testing I've been doing recently, which hasn't involved using sign message or creating transactions while under instrumentation, is inadequate. thanks!)
2671	18381392	2013-05-24T01:09:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18381392	gmaxwell	Diapolo	@Diapolo I'm not eager to pull a fix for a non-network triggerable leak that I can't (easily) reproduce right before a release.
2670	18161639	2013-05-20T17:49:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18161639	laanwj	gmaxwell	@gmaxwell: fixed that, all the warnings was indeed a bit over the top
2670	18190705	2013-05-21T06:00:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18190705	laanwj	rebroad	@rebroad No, he means the Armory site obviously...     @jbreher GB as in 10^9. This is Bitcoin, we use SI units.
2670	18190705	2013-05-21T06:00:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18190705	laanwj	jbreher	@rebroad No, he means the Armory site obviously...     @jbreher GB as in 10^9. This is Bitcoin, we use SI units.
2670	18192352	2013-05-21T07:02:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18192352	Diapolo	laanwj	@laanwj I also think we should drop support for ancient Boost version. I never understood, why it is a problem to do so anyway.
2670	18724174	2013-05-31T05:36:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724174	sipa	Suffice	@Suffice As a follow-up, maybe there can be some menu option "Move datadir", which requires a restart immediately afterwards (or not, but that's definitely a lot more work). I think that's independent from this pullreq, which already improves 99% of use cases.
2670	18724463	2013-05-31T05:51:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724463	laanwj	suffice	@suffice yeah maybe... but I *do* want to make sure people see the warning about downloading 10Gb, as one of the reasons for this is that people don't get freaked out later when they see their harddisk being filled up. In any case they already accept the default by clicking "OK" immediately. On a fresh install, it will initially show the default data directory.    @sipa Could be useful option. But I feel better about that once block chain dir != wallet dir. No problem with moving the block chain, it can be redownloaded if the user makes a mistake, but as moving implies a delete I don't really want to "move" the wallet.dat. Copy at most. Let people that know what they're doing do this manually for now.
2670	18724463	2013-05-31T05:51:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724463	laanwj	sipa	@suffice yeah maybe... but I *do* want to make sure people see the warning about downloading 10Gb, as one of the reasons for this is that people don't get freaked out later when they see their harddisk being filled up. In any case they already accept the default by clicking "OK" immediately. On a fresh install, it will initially show the default data directory.    @sipa Could be useful option. But I feel better about that once block chain dir != wallet dir. No problem with moving the block chain, it can be redownloaded if the user makes a mistake, but as moving implies a delete I don't really want to "move" the wallet.dat. Copy at most. Let people that know what they're doing do this manually for now.
2670	18724649	2013-05-31T05:59:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724649	sipa	laanwj	@laanwj ACK, separating datadir from wallets must happen first.
2670	18730089	2013-05-31T08:02:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18730089	laanwj	suffice	![default](https://f.cloud.github.com/assets/126646/589677/2f89fd14-c9c8-11e2-9485-2118c7a87dd8.png)    @suffice this is better I think. It makes clear that the initially selected directory is the default, and requires an extra radio button click to change it to prevent it from being changed cluelessly. And it still shows what the default data directory is (though disabled), and whether there is enough space there.
2670	18837130	2013-06-03T12:17:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18837130	laanwj	jonasschnelli	@jonasschnelli eh I'll take a look  @diapolo when you click the first option, it shows the default directory greyed out in the input field.
2670	18837130	2013-06-03T12:17:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18837130	laanwj	diapolo	@jonasschnelli eh I'll take a look  @diapolo when you click the first option, it shows the default directory greyed out in the input field.
2670	19027981	2013-06-06T06:55:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19027981	Diapolo	laanwj	It behaves a little weird, let me explain:    - default selected (``C:\Users\Diapolo\AppData\Roaming\Bitcoin``)  -- message ``9GB of free space available (of 10GB needed).`` displayed    - switching to custom, message is the same  -- it doesn't show that this directory already exists  -- adding a ``\`` leads to ``Directory already exists...``  -- adding a ``\test\ leads to ``Warning: Low disk space on device``    Edit: Sorry, I didn't have the recent rebase changes in my local branch... will test again!    Edit 2: Behaviour is the same, I would await, that ``C:\Users\Diapolo\AppData\Roaming\Bitcoin`` is detected as existing path already, even without the ``\`` at the end.    @laanwj Did you take a look at this comments yet?
2670	19217341	2013-06-10T18:30:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19217341	Diapolo	laanwj	@laanwj Can you test if you are able to use a non-default language (no english) and that this is loaded? Either there is a bug in this pull or I have a problem with my local build related to this in combination with my QSettings work (or a problem with this and #2700?).
2670	19445886	2013-06-14T08:49:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19445886	laanwj	Diapolo	@Diapolo does it still show the strange behavior on Windows? If so, any idea what causes that?
2670	20918424	2013-07-13T11:13:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20918424	Diapolo	laanwj	@laanwj Can we perhaps merge this now :)?
2669	18396310	2013-05-24T09:59:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18396310	laanwj	luke-jr	Agree with @luke-jr  here
2669	18399976	2013-05-24T11:37:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18399976	schildbach	luke-jr	Agree also with @luke-jr . "-v" should be reserved for "--verbose".
2669	18401579	2013-05-24T12:20:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18401579	Diapolo	laanwj	@laanwj I still think this won't work for Bitcoin-Qt, see my comments above about ``--help``.
2669	18407959	2013-05-24T14:26:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18407959	laanwj	nmarley	@nmarley no need to close the issue, you can re-push to the same branch after you've fixed it and it will show up here
2661	18087395	2013-05-17T21:37:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18087395	rdponticelli	TheBlueMatt	@TheBlueMatt: The error on pulltester doesn't seems to be related to these changes, right?
2661	18116432	2013-05-19T11:53:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18116432	Diapolo	laanwj	@laanwj What is that magic number here telling?  ``progressBar->setMaximum(1000000000);``    @rdponticelli Did you try yet what laanwj suggested above?
2661	18116432	2013-05-19T11:53:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18116432	Diapolo	rdponticelli	@laanwj What is that magic number here telling?  ``progressBar->setMaximum(1000000000);``    @rdponticelli Did you try yet what laanwj suggested above?
2661	18120046	2013-05-19T16:13:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120046	laanwj	Diapolo	@Diapolo just an arbitrary number AFAIK    @rdponticelli Good, that at least isolates the issue. So that function has a bug that makes it crash with only the genesis block. At least on your setup. I have not noticed this myself, when starting with an empty data directory. I'm unable to reproduce it.
2661	18120046	2013-05-19T16:13:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120046	laanwj	rdponticelli	@Diapolo just an arbitrary number AFAIK    @rdponticelli Good, that at least isolates the issue. So that function has a bug that makes it crash with only the genesis block. At least on your setup. I have not noticed this myself, when starting with an empty data directory. I'm unable to reproduce it.
2661	18126154	2013-05-19T22:42:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18126154	rdponticelli	laanwj	@laanwj and/or @Diapolo: Is it intended and correct that BitcoinGUI::setNumBlocks is called twice at startup?
2661	18126154	2013-05-19T22:42:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18126154	rdponticelli	Diapolo	@laanwj and/or @Diapolo: Is it intended and correct that BitcoinGUI::setNumBlocks is called twice at startup?
2660	18262674	2013-05-22T07:56:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18262674	TheBlueMatt	gmaxwell	@gmaxwell Hah, well I suppose thats what happens when you skim...sorry for all the confusion.
2658	21091143	2013-07-17T04:14:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091143	luke-jr	TheBlueMatt	@TheBlueMatt Rebase needed.
2658	21334120	2013-07-22T09:45:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21334120	TheBlueMatt	wtogami	@wtogami Hmm...I dont see any fork messages during -reindex, are you talking about a -reindex on a corrupted chainstate?
2651	18409772	2013-05-24T14:55:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18409772	jonasschnelli	laanwj	@laanwj can you review again? Now the transaction gets prepared and the instance will be used to commit the transaction.
2651	18824958	2013-06-03T07:06:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18824958	jonasschnelli	laanwj	@laanwj good catch. The QMessageBox can stay open till infinity (it needs user action). So,... the missing wallet locking can be quite a problem. I do test now what happens when i keep open the message box and trigger another payment with rpc.
2651	18836926	2013-06-03T12:11:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18836926	jonasschnelli	Diapolo	Will fix the typo.  @Diapolo: what do you think if we take the html stuff into separates stings. Goal: exclude html from tr stuff. It might be then a bit a string gluing battle. But prevents us from messed up transiflex sources.
2651	18837166	2013-06-03T12:17:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18837166	Diapolo	laanwj	Let's see what @laanwj thinks, but if possible I would prevent big HTML stuff in translatable strings if possible, like you suggest.
2651	19099969	2013-06-07T10:39:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19099969	jonasschnelli	PRab	rebased, squashed, updated.  - Added new string recommended by @PRab   - overhauled string gluing like @Diapolo recommended.    Now it looks like:    single no fee (std case):  ![bildschirmfoto 2013-06-07 um 12 31 40](https://f.cloud.github.com/assets/178464/623262/5ce7181e-cf5e-11e2-9fcc-5cb8fdd13f0a.png)    single with fee:  ![bildschirmfoto 2013-06-07 um 12 32 13](https://f.cloud.github.com/assets/178464/623264/6855a300-cf5e-11e2-8a91-ed5e0aeb3bb2.png)    multiple recp. no fee:  ![bildschirmfoto 2013-06-07 um 12 31 48](https://f.cloud.github.com/assets/178464/623265/733f93c0-cf5e-11e2-822b-5f3d70fb3182.png)    multiple recp. with fee:  ![bildschirmfoto 2013-06-07 um 12 32 22](https://f.cloud.github.com/assets/178464/623266/7c2d6dd6-cf5e-11e2-9b17-043ac6c3ad92.png)
2651	19099969	2013-06-07T10:39:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19099969	jonasschnelli	Diapolo	rebased, squashed, updated.  - Added new string recommended by @PRab   - overhauled string gluing like @Diapolo recommended.    Now it looks like:    single no fee (std case):  ![bildschirmfoto 2013-06-07 um 12 31 40](https://f.cloud.github.com/assets/178464/623262/5ce7181e-cf5e-11e2-9fcc-5cb8fdd13f0a.png)    single with fee:  ![bildschirmfoto 2013-06-07 um 12 32 13](https://f.cloud.github.com/assets/178464/623264/6855a300-cf5e-11e2-8a91-ed5e0aeb3bb2.png)    multiple recp. no fee:  ![bildschirmfoto 2013-06-07 um 12 31 48](https://f.cloud.github.com/assets/178464/623265/733f93c0-cf5e-11e2-822b-5f3d70fb3182.png)    multiple recp. with fee:  ![bildschirmfoto 2013-06-07 um 12 32 22](https://f.cloud.github.com/assets/178464/623266/7c2d6dd6-cf5e-11e2-9b17-043ac6c3ad92.png)
2651	19100408	2013-06-07T10:53:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19100408	jonasschnelli	Diapolo	@Diapolo agree for the "!". Added, commited, pushed.
2651	19123165	2013-06-07T18:04:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19123165	jonasschnelli	sipa	@sipa: It does look the same (check screenshot with voluntary 0.1BTC fee):  ![bildschirmfoto 2013-06-07 um 20 03 04](https://f.cloud.github.com/assets/178464/625337/a6e8cdc0-cf9c-11e2-83fe-6ef6db740474.png)    Maybe the sentence need to be changed. What do you think?
2651	19123370	2013-06-07T18:07:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19123370	jonasschnelli	PRab	@PRab okay. sounds good. Let me check how i can detect if vol. or req. fee.
2651	19164925	2013-06-09T11:56:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19164925	jonasschnelli	cozz	@cozz Thanks for the report. The problem might be, that the `return` of the new `prepareTransaction` method is within the `LOCK` block. I will clean this up and move the return out of the LOCK block.
2651	19165001	2013-06-09T12:02:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19165001	jonasschnelli	cozz	Updated. Exclamation mark is removed. Voluntary gets detected. LOCK problematic "could" be fixed. @cozz can you retest?  Can somebody have a closer look into the `prepareTransaction` and `sendCoins` methods? Especially the locking, etc.?
2651	19249536	2013-06-11T08:51:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19249536	jonasschnelli	cozz	@cozz: I do compare the requiresFee from createTransaction with the possible voluntary fee from the settings. If the value is the same, it must be a voluntary fee. Or not?
2651	19252993	2013-06-11T10:17:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19252993	jonasschnelli	laanwj	@laanwj We could change to "added" in all cases. But my understanding is that the user should be happy when he set (example) a 0.001BTC vol. fee in settings and then read "added" (even when the tx would require 0.001BTC as fee). When the tx fee would be higher, it would then be "required".
2651	19260459	2013-06-11T13:12:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19260459	laanwj	cozz	Yes -- but mind that the fee set in configuration is per KB, so at least you'd have to do some computations as well. I'm not comfortable with the UI making guesses based on the amount. That logic doesn't belong there.    On the other hand I'm fine with a solution in which CreateTransaction returns a flag whether the fee was voluntary or not (as @cozz suggest), but it should not be in this pull request.     Let's just try to get this merged with the current functionality, as it's very nice to have.
2651	19377310	2013-06-13T07:57:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19377310	jonasschnelli	Cozz,	@Cozz, @sipa: i've updated the CReserveKey handling. The CReserveKey will now no longer be passed around. I decided to keep it as a instance var of walletmodel (including a new cleanup transaction method). If you could review it.. would be appreciated.  @Cozz: if you find time: Could you do a retest (it sounds that you have a proper test-setup).
2651	19377310	2013-06-13T07:57:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19377310	jonasschnelli	sipa	@Cozz, @sipa: i've updated the CReserveKey handling. The CReserveKey will now no longer be passed around. I decided to keep it as a instance var of walletmodel (including a new cleanup transaction method). If you could review it.. would be appreciated.  @Cozz: if you find time: Could you do a retest (it sounds that you have a proper test-setup).
2651	19377310	2013-06-13T07:57:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19377310	jonasschnelli	Cozz	@Cozz, @sipa: i've updated the CReserveKey handling. The CReserveKey will now no longer be passed around. I decided to keep it as a instance var of walletmodel (including a new cleanup transaction method). If you could review it.. would be appreciated.  @Cozz: if you find time: Could you do a retest (it sounds that you have a proper test-setup).
2651	19382110	2013-06-13T09:50:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19382110	jonasschnelli	laanwj	@laanwj yes. These state's are really not easy to handle. They need a very clear work to avoid leaks, etc. The problem is, that i'm going deeper than i should. :) I do not see the root cause of the CReserveKey problem as i also do not have a test setup to debug it. The WalletModelTransaction class sounds after a good idea. For now it looks a bit overheaded but it's extendable and it's a good base for other "changes" (CoinControl) in that area.
2651	19529826	2013-06-17T07:28:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19529826	jonasschnelli	Cozz	Update code, moved transaction-stuff to a own class.  @Cozz: could you please re-test one more time?  @laanwj: code-review?
2651	19529826	2013-06-17T07:28:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19529826	jonasschnelli	laanwj	Update code, moved transaction-stuff to a own class.  @Cozz: could you please re-test one more time?  @laanwj: code-review?
2651	20298556	2013-07-01T17:54:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20298556	jonasschnelli	cozz	Thanks @cozz will have a look at it soon/tmr
2651	20724560	2013-07-10T06:52:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20724560	jonasschnelli	cozz.	cleaned up and fixed issues reported by @cozz. Ready for some final ACKs.
2651	22095550	2013-08-05T09:31:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22095550	Diapolo	jonasschnelli	@jonasschnelli What is the current state for this pull?
2651	22097413	2013-08-05T10:14:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22097413	jonasschnelli	Diapolo	Sorry. Didn't realize that my turn is missing... will check it and give response soon. @Diapolo thanks for the reminder!
2651	22101242	2013-08-05T11:51:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22101242	Diapolo	cozz	No problem, I was just wondering, why that one isn't merged yet and saw there is an open feedback from @cozz and you surely need to rebase.
2651	22474957	2013-08-12T06:18:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22474957	jonasschnelli	Diapolo	@Diapolo did cleanup the code (fixed your pointing) and also got rid of the setOptionsModel in sendCoinsDialog.
2651	22475839	2013-08-12T06:51:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22475839	Diapolo	jonasschnelli	@jonasschnelli Thanks for your hard work here, I have to say sorry, but IMHO we need to check the data types for fee variables once more. In the core we use ``int64 nTransactionFee``, so AFAIK we should then match this in our Qt code by using ``qint64``, right? So places which you recently changed to ``quint64`` should be ``qint64`` to match core.
2651	22475993	2013-08-12T06:56:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22475993	jonasschnelli	Diapolo	@Diapolo yes. I've also thought we should not use unsigned vars. I also prefer qint64. Let me change this.
2651	22476508	2013-08-12T07:14:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22476508	Diapolo	laanwj	Looks good now, let's see what @laanwj thinks about the general idea now (use qint64 etc. in Qt code).
2651	23158321	2013-08-23T11:38:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23158321	wtogami	laanwj	ping @laanwj
2651	23489900	2013-08-29T13:42:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23489900	Diapolo	laanwj	Dunno if it needs another rebase, but ping @laanwj :).
2650	17809734	2013-05-13T12:58:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17809734	jonasschnelli	TheBlueMatt	@TheBlueMatt Okay. Did change the script. I assume for the upcoming 0.8.2 release you will do the PPA lanuchpad package?
2650	17814260	2013-05-13T14:17:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17814260	jonasschnelli	TheBlueMatt	@TheBlueMatt i have no deb experience. Hopefully the changelog is right now...
2650	17830248	2013-05-13T18:20:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17830248	jonasschnelli	TheBlueMatt	@TheBlueMatt okay. Changed ("Mo" => "Mon") and squashed.
2650	18414794	2013-05-24T16:16:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18414794	jonasschnelli	gavinandresen	@gavinandresen Hmm.. the .ico file has changed and yes, I think there are different resolutions which the nsi script might can't handle. I will check it in the next hours and give you a feedback.
2650	18417394	2013-05-24T17:03:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18417394	jonasschnelli	sipa's	you could also try to replace the .ico file with the old one and try again. Just to make sure it's the .ico file... or something else like @sipa's idea with the readdir order.
2648	18045678	2013-05-17T06:21:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18045678	Diapolo	sipa	@sipa What do you think?
2648	18277984	2013-05-22T13:26:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18277984	Diapolo	sipa	@sipa Nothing (exit)? It prints to the console just like when a DB corruption is detected, which already is a dialog for Bitcoin-Qt and just a message for bitcoind.
2648	18659326	2013-05-30T03:16:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18659326	sipa	Diapolo	ACK.    @Diapolo Right, that should be changed (we've had console users type 'ye' in the terminal after bitcoind exits with "Do you want to reindex now?"), but that's outside of the scope of this PR.
2645	19510401	2013-06-16T10:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19510401	sipa	gavinandresen	Anyone interested in this? @gavinandresen @jgarzik @laanwj @gmaxwell ?
2645	19510401	2013-06-16T10:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19510401	sipa	jgarzik	Anyone interested in this? @gavinandresen @jgarzik @laanwj @gmaxwell ?
2645	19510401	2013-06-16T10:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19510401	sipa	laanwj	Anyone interested in this? @gavinandresen @jgarzik @laanwj @gmaxwell ?
2645	19510401	2013-06-16T10:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19510401	sipa	gmaxwell	Anyone interested in this? @gavinandresen @jgarzik @laanwj @gmaxwell ?
2645	19568299	2013-06-17T19:24:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19568299	sipa	petertodd	@petertodd If it takes that much effort to convince you this is safe, I'd rather just close this pull request. (note: this isn't a argument to convince you otherwise in any case; it's just not worth that much effort).    I've of course already run this on testnet and mainnet without problems, but that doesn't mean anything for potential false positives.
2645	19570323	2013-06-17T19:56:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19570323	petertodd	sipa	@sipa I haven't reviewed the code carefully enough to be convinced one way or the other technically - I just wanted to float the idea given it's an option we haven't used yet.    That said inline signature serialization helps most with the largest transactions; I don't think we know much yet about what the advantages and disadvantages of allowing really large and complex transactions actually are yet and there are a whole lot of tradeoffs between networking, UTXO proofs, distributed verification etc. On that basis I'm slightly inclined to say NACK for possible premature optimization, but do keep the code around for later.
2645	22734284	2013-08-15T22:05:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734284	sipa	gavinandresen	@gavinandresen @gmaxwell  @jgarzik I'd like some opinions about this. I'm not going to work on this further, but I believe it is sufficiently tested. If it's not considered useful or too risky, I'd rather close it.
2645	22734284	2013-08-15T22:05:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734284	sipa	gmaxwell	@gavinandresen @gmaxwell  @jgarzik I'd like some opinions about this. I'm not going to work on this further, but I believe it is sufficiently tested. If it's not considered useful or too risky, I'd rather close it.
2645	22734284	2013-08-15T22:05:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734284	sipa	jgarzik	@gavinandresen @gmaxwell  @jgarzik I'd like some opinions about this. I'm not going to work on this further, but I believe it is sufficiently tested. If it's not considered useful or too risky, I'd rather close it.
2645	26364716	2013-10-15T19:28:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26364716	sipa	gavinandresen	@gavinandresen Care to have another look?
2645	26471808	2013-10-17T00:53:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26471808	gavinandresen	SergioDemianLerner	@SergioDemianLerner : yes, the unit test creates 50,000 random, 10-opcode-long scriptPubKey transactions, many of which will contain multiple OP_CODESEPARATORs.
2644	17784069	2013-05-12T19:45:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17784069	sipa	jgarzik	@jgarzik Just reasoning. For each CBlockIndex representing a node in the active chain, we remove 8 bytes from the CBlockIndex, and add 8 bytes to vBlockIndexByHeight. Actually, it should reduce memory usage slightly, as non-best-chain nodes also lose 8 bytes.
2643	18034890	2013-05-16T23:09:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18034890	gmaxwell	rdponticelli	@rdponticelli How did you determine this?
2643	18047802	2013-05-17T07:39:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18047802	laanwj	rdponticelli.	Great find @rdponticelli.  I think we should revert that pull before the 0.8.2 release and later figure out why and how and re-merge a fixed version.
2643	18048754	2013-05-17T08:07:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18048754	Diapolo	laanwj	@laanwj Any idea what is the cause, can it be related to clientModel somehow? I would vote for fixing over revertig... dunno how near 0.8.2 FINAL is or if Gavin intends to offer an RC2.
2641	17774907	2013-05-12T09:02:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17774907	sipa	gavinandresen	@gavinandresen I'm pretty sure that specifying a -datadir explicitly always set the datadir to exactly that, and didn't add testnet3/ afterwards.    EDIT: I was completely wrong about this.    Also, this seems to explain #2594 and #2547.
2641	17775682	2013-05-12T10:13:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17775682	sipa	jonasschnelli	@jonasschnelli #2605 reported that bitcoind behaved correctly, and Bitcoin-Qt incorrectly. IMHO, it is the other way around (regarding consistency with before, not arguing what the "right" behaviour should be).    EDIT: I'm wrong.
2641	17775731	2013-05-12T10:18:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17775731	jonasschnelli	sipa	@sipa Right. Someone needs to define the right behavior and then we need to make it consistent.
2638	21091099	2013-07-17T04:14:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091099	luke-jr	Crinklebine	@Crinklebine Will you be fixing the above concerns and rebasing this?
2636	17707704	2013-05-10T07:28:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17707704	jonasschnelli	Crinklebine	@Crinklebine i recommend not to split. Because the SDK downloadable from qt-project does not work out of the box (i always had to compile qt sdk) i would also say, remove the parts of Line 47 and change it with your information (install through port). Then we can also avoid making differences between 32 and 64 bit.
2636	17708488	2013-05-10T07:54:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17708488	Crinklebine	fanquake	@fanquake  I see what you are saying. This should work on brew?    brew install qt    @jonasschnelli Your recommendation seems right as MacPorts and HomeBrew both support QT install.    P.S. This is my first pull so please bare with me. :-)
2636	17708488	2013-05-10T07:54:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17708488	Crinklebine	jonasschnelli	@fanquake  I see what you are saying. This should work on brew?    brew install qt    @jonasschnelli Your recommendation seems right as MacPorts and HomeBrew both support QT install.    P.S. This is my first pull so please bare with me. :-)
2636	17708669	2013-05-10T07:59:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17708669	jonasschnelli	Crinklebine	@Crinklebine your pull is great (even when we bother you with details)! :)
2636	17729935	2013-05-10T16:22:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17729935	Crinklebine	jonasschnelli	I will close this pull request and reopen a new pull to incorporate the suggestions from @jonasschnelli  and @fanquake .
2636	17729935	2013-05-10T16:22:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17729935	Crinklebine	fanquake	I will close this pull request and reopen a new pull to incorporate the suggestions from @jonasschnelli  and @fanquake .
2636	17733289	2013-05-10T17:26:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17733289	Crinklebine	sipa	@sipa Thank you for the help. I have already opened a new pull request. I'm still learning the Git development process and will do it correctly next time.
2633	17668385	2013-05-09T14:51:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17668385	sipa	TheBlueMatt	@TheBlueMatt do these error messages mean that -DBOOST_CHRONO_HEADER_ONLY doesn't work on Windows? We can just disable it there, as we link with boost_chrono on Windows anyway.
2632	19118334	2013-06-07T16:40:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19118334	sipa	mikehearn	@mikehearn If you don't expect this pull to be ready soon, you'll likely need to rebase on top of #2154.
2632	19673598	2013-06-19T10:01:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19673598	sipa	mikehearn	@mikehearn You'll need to fix the Qt code too:        src/qt/clientmodel.cpp: In member function bool ClientModel::isTestNet() const:      src/qt/clientmodel.cpp:113:12: error: fTestNet was not declared in this scope
2632	19681748	2013-06-19T12:54:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19681748	sipa	mikehearn	@mikehearn Yes, please try to keep every commit a usable state - otherwise you risk breaking git bisect.    Also can you have a look at @petertodd's nits?    After that, I think we can merge.
2632	19681748	2013-06-19T12:54:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19681748	sipa	petertodd's	@mikehearn Yes, please try to keep every commit a usable state - otherwise you risk breaking git bisect.    Also can you have a look at @petertodd's nits?    After that, I think we can merge.
2632	19688539	2013-06-19T14:45:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19688539	jgarzik	sipa	ACK    Note that @sipa only said each commit needs to build on its own -- which does not necessarily imply all commits must be squashed together, only that commits should each be able to exist on their own, buildable and testable.
2632	19690176	2013-06-19T15:09:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19690176	sipa	laanwj	ACK    @laanwj You have any comments still?
2630	17655815	2013-05-09T09:11:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17655815	laanwj	gavinandresen	That's a good idea, to keep this updated and merge this just before the 0.8.2 release. It prevents superfluous updates to the translation files (ie all those pesky +122/-231 and "untranslated" messages) in git and still allows having the latest translations in the release.    So just in case: before tagging/packaging 0.8.2, please merge this pull first @gavinandresen
2628	17982771	2013-05-16T05:28:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17982771	laanwj	gmaxwell	@gmaxwell yes, that's the intention
2627	17553333	2013-05-07T16:28:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17553333	gmaxwell	falinatecas	@falinatecas Can you point me to the discussion you're referring to?
2627	17570239	2013-05-07T20:59:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570239	Diapolo	laanwj	User experience for sure can be improved, perhaps I'll do some brain-storming with @laanwj in the next time after I'm finished with that options-stuff :).
2627	17589299	2013-05-08T06:42:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589299	jonasschnelli	Diapolo	@Diapolo @laanwj i could also contribute (workdown some tasks) to UI changes if you had work out a strategy.
2627	17589299	2013-05-08T06:42:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589299	jonasschnelli	laanwj	@Diapolo @laanwj i could also contribute (workdown some tasks) to UI changes if you had work out a strategy.
2627	17621287	2013-05-08T17:32:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17621287	Diapolo	laanwj	@laanwj That is indeed a nice idea.
2627	17655235	2013-05-09T08:53:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17655235	laanwj	Diapolo	@Diapolo and it's indeed a good idea to brainstorm about where to go with the GUI. Maybe we should also discuss some way that the community can fund our work. There are a lot of people, for example on bitcointalk or reddit, raising issues and/or making improvement requests, but who have no dev skills on their own to fix them. It would be nice to get some community-funded development initiative going. I have no experience in those things, though :/
2627	17772663	2013-05-12T04:59:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17772663	rebroad	laanwj	@laanwj I'd have thought that "funding" can be provided by the return on investment. i.e. a developer purchases bitcoins, develops the app making it available to a far wider audience - bitcoin price rises - developer is therefore compensated for their work. simples.
2627	17775709	2013-05-12T10:16:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17775709	jonasschnelli	rebroad	@rebroad hmm.. i'm not sure if investing in highly volatile bitcoin to fiat exchange rates is the right thing for core-developers. I would just say it's to risky. The exchange rate will probably not be related to the developers work. I made very good experience with donation options for free software. Because you can donate with the software you'd like to donate to, it would be even more interesting. :) But if there is more then one person developing a free/os software, it will maybe be more complicate to use the funds.  But we might switch this discussion to another issue/platform.
2627	17982825	2013-05-16T05:31:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17982825	laanwj	gmaxwell	@gmaxwell LOL    @falinatecas Don't post such inane stuff here.     Closing this issue, see #2628
2627	17982825	2013-05-16T05:31:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17982825	laanwj	falinatecas	@gmaxwell LOL    @falinatecas Don't post such inane stuff here.     Closing this issue, see #2628
2625	17570373	2013-05-07T21:01:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570373	gavinandresen	gmaxwell	@gmaxwell : previously the second task's 'walletpassphrase' would fail with "error: wallet already unlocked."    If you REALLY want the max() behavior, then I say have the tasks call getinfo to get unlocked_until and do that calculation yourself.  I'm very much in favor of the RPC having the most obvious implementation, and strongly feel that "do the last thing I told you to do" is the most obvious behavior.
2625	17575288	2013-05-07T22:38:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17575288	gmaxwell	gavinandresen	@gavinandresen  You can't do that calculation yourself though, because there is a potential race if you have multiple callers calling the RPC at once. E.g. if the shorter unlock calls getinfo first then the longer unlock happens before the shorter unlock the longer unlock's request will get ignored... and we have no way to facilitate exclusive access to the RPC.    "Do the last thing" starts losing its meaning when there is concurrent access.    It's not the end of the world don't make concurrent accesses with different unlock lifetimes is also an answer... I'm just generally uneasy about behavior that may expose racy behavior in callers because it's really hard to debug.
2619	19911495	2013-06-24T14:46:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19911495	jgarzik	laanwj.	Agree w/ @laanwj.  Please update help text to reflect his suggestions, and we can merge this.
2618	18702814	2013-05-30T19:35:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18702814	fcicq	jgarzik	@jgarzik rebased.
2618	18703755	2013-05-30T19:51:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18703755	fcicq	jgarzik	@jgarzik so just wait the pull tester :)
2618	21090285	2013-07-17T03:44:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090285	luke-jr	fcicq	@fcicq Needs rebase again.
2616	18556329	2013-05-28T15:02:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18556329	vinniefalco	Diapolo	@Diapolo No. git-subtree does not store the location of the repo. The foreign repo is only accessed at the time you issue the appropriate git-subtree command. Other than when you are running a git-subtree command, the files are normal repository files like everything else. There is nothing magical or special about them, other than they have a few extra lines in the commit message that help the git-subtree script figure things out. Git-subtree only does things that you could do manually yourself, the structure of the repository is not hacked.    The reason that I have created my own LevelDB repo (at https://github.com/vinniefalco/LevelDB) is so that I could recreate the "bitcoin-fork" branch, which includes all of the changes made by the Bitcoin developers replayed on top of the commit log from the original LevelDB (stored at google code). You can see this recreated history here:  https://github.com/vinniefalco/LevelDB/commits/bitcoin-fork    Notice how sipa's changes are all there, and if you keep going back in time you will find the place where Bitcoin forked LevelDB. When LevelDB was added to bitcoin, they did it by just manually plopping the files into the source code hierarchy and making a commit. By doing so, the history of LevelDB was not carried over and therefore it is difficult to submit changes back to the upstream (the google code repo in this case).    What I have done is to recreate the commit log including bitcoin's changes, and turn it into a proper branch called 'bitcoin-fork' located in my repository (URL above). Then I used git-subtree to replace the detached LevelDB sources in the bitcoin repo with an identical set of sources that also carries the history with it. This allows me to recreate the fork with any new changes that you guys make to LevelDB, so that I can submit it to the upstream.    The repository here:  https://github.com/vinniefalco/LevelDB/commits/bitcoin-fork    Is not needed by the bitcoin developers. You can simply continue on the way you did before, editing LevelDB sources as needed. At any time, I can pull your changes and split them into my bitcoin-fork branch. I can also cherry pick commits from the upstream LevelDB repo, commit them to my bitcoin-fork branch, and then submit a pull request so they can get into Bitcoin. This is how I brought in the 1.10.0 update as well as the fix for the Windows deadlocking.    If you guys want to do this yourself I can show you how to use subtree. It is quite easy. If you want to use your own repository to store your fork of leveldb (e.g. at bitcoin/leveldb) you could fork mine, or clone mine and push it to your own empty repo (at bitcoin/leveldb) so that it appears as an original and not a fork (at which point I can delete my repo and fork yours). Its worth repeating that none of this affects the subtree, because the repo URI is not stored anywhere. It's just a remote in your local repo (on any developer's computer who wants to issue git-subtree commands). You don't need to use git-subtree to edit the resulting files. You only need to use git-subtree if you want to do the following:    1) Pull in commits from the external repository  2) Submit a pull request for local changes to the upstream (i.e. the google code repo or bitcoin's fork of it)    Or you could just continue on and pretend that LevelDB has no external repository, making changes to the sources as if they were your own - I can always step in and maintain the 'bitcoin-fork' branch no matter what you do, no action is required on your part unless you want to learn git-subtree and maintain the fork branch yourself.
2616	18556431	2013-05-28T15:03:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18556431	laanwj	diapolo	@diapolo that'd be the case with submodule. With subtree, all the files are still in this repository, there is simply a link back to the original repository to make it easier to stay up to date (merging) or push changes back upstream.
2616	18556665	2013-05-28T15:06:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18556665	vinniefalco	laanwj	@laanwj No that's not quite right. The URI / URL to the external repository is not stored anywhere in the bitcoin repository. Only the hashes of the commits are referenced, since that's all that matters for having an intact commit log. Anyone who wants to stay up to date / merge, or push changes back to the external repository needs to first 'git fetch' from the external repository to bring all the refs in locally. It does not matter from which repository they come from as long as it contains the appropriate objects - they are referenced by hash.
2615	17411331	2013-05-03T18:44:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17411331	jonasschnelli	gavinandresen	@gavinandresen No. It's not yet tested on 10.5 to 10.7. I'll do that in the next days. I also fix the pull-tester-report issue.
2615	17597378	2013-05-08T10:30:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17597378	jonasschnelli	gavinandresen	@gavinandresen getting crazy while building on 10.6/32bit. :)  After a proper qmake/make and fancy build (dmg) i try to run Bitcoin-Qt on 10.5 but get:  ```  dyld: Library not loaded: @executable_path/../Frameworks/libssl.1.0.0.dylib    Referenced from: /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt    Reason: no suitable image found.  Did find:   /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/../Frameworks/libssl.1.0.0.dylib: unknown required load command 0x80000022   /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/../Frameworks/libssl.1.0.0.dylib: unknown required load command 0x80000022  Trace/BPT trap  ```  libssl looks okay:  ```lipo -info Contents/Frameworks/libssl.1.0.0.dylib  Architectures in the fat file: Contents/Frameworks/libssl.1.0.0.dylib are: i386 x86_64```    any ideas?
2615	17597378	2013-05-08T10:30:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17597378	jonasschnelli	executable_path/../Frameworks/libssl.1.0.0.dylib	@gavinandresen getting crazy while building on 10.6/32bit. :)  After a proper qmake/make and fancy build (dmg) i try to run Bitcoin-Qt on 10.5 but get:  ```  dyld: Library not loaded: @executable_path/../Frameworks/libssl.1.0.0.dylib    Referenced from: /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt    Reason: no suitable image found.  Did find:   /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/../Frameworks/libssl.1.0.0.dylib: unknown required load command 0x80000022   /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/../Frameworks/libssl.1.0.0.dylib: unknown required load command 0x80000022  Trace/BPT trap  ```  libssl looks okay:  ```lipo -info Contents/Frameworks/libssl.1.0.0.dylib  Architectures in the fat file: Contents/Frameworks/libssl.1.0.0.dylib are: i386 x86_64```    any ideas?
2615	17758004	2013-05-11T10:54:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17758004	jonasschnelli	Diapolo	@Diapolo yes. I initially wrote this patch for Qt5 compatibility because it can handle growl without qt platform functions.
2615	18398360	2013-05-24T10:53:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18398360	jonasschnelli	fanquake	fixed some minor code-style related things.  @fanquake can you do a test on mac and give a final ACK?  other final ACKs?
2615	18444767	2013-05-25T10:11:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18444767	fanquake	jonasschnelli	@jonasschnelli I'll test it this weekend
2614	17405344	2013-05-03T16:50:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17405344	Diapolo	laanwj	Idea is good, but I dislike the fact that this is a) Mac only and b) we have that stuff as duplicate in ``void BitcoinGUI::setClientModel(ClientModel *clientModel)``. Even on Windows we first have that normal tray icon and after loading it switches to testnet. I think it's worth to think about a better solution that covers all OSes and directly displays the correct icon.    We currently set the default icon in the BitcoinGUI constructor, where we don't have acces to clientmodel, which is used to query for testnet later... see the problem? @laanwj Do you have a good idea?
2614	17413516	2013-05-03T19:28:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17413516	laanwj	diapolo	@diapolo The reason for this appears to be that on MacOSX it shows the dock icon already before the main window (and tray icon) is created, immediately at the start of the process. This has no analog in any other OS.    It is usually desirable to move the common code to a function, but in this case it's only one line (and result purely visual) so I'm not so sure.    On windows/linux it would be possible to change the icon a little bit sooner (ie, immediately when creating the main window) but mehh. It's only testnet, only developers get to see it anyway. Don't obsess about it too much.
2614	17428933	2013-05-04T06:54:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17428933	jonasschnelli	laanwj	As @laanwj said: it's devs only stuff. But I also agree with @Diapolo: we should also take a look at win and Linux. I do not have a win toolchain,... so @Diapolo your probably the right guy for a win optimization of that issue.
2614	17428933	2013-05-04T06:54:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17428933	jonasschnelli	Diapolo	As @laanwj said: it's devs only stuff. But I also agree with @Diapolo: we should also take a look at win and Linux. I do not have a win toolchain,... so @Diapolo your probably the right guy for a win optimization of that issue.
2614	17428933	2013-05-04T06:54:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17428933	jonasschnelli	Diapolo	As @laanwj said: it's devs only stuff. But I also agree with @Diapolo: we should also take a look at win and Linux. I do not have a win toolchain,... so @Diapolo your probably the right guy for a win optimization of that issue.
2610	17395086	2013-05-03T13:53:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17395086	petertodd	luke-jr	@luke-jr The code that actually disabled those OP's *is* executed, so I'd be inclined to leave that in place out of paranoia, at least for now.    FWIW, I manually reviewed the change.
2606	17434251	2013-05-04T14:42:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17434251	sipa	laanwj	@laanwj This commit added that Shutdown() call?
2606	17448203	2013-05-05T08:01:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17448203	laanwj	sipa	@sipa that's not what I meant. When I initially wrote bitcoin-qt I'm pretty sure that Shutdown() was not called (in the bitcoind case, in init.cpp) in case AppInit2() failed. At least I remember checking this. So it must have been added in the meantime.
2605	17366699	2013-05-02T21:42:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17366699	gavinandresen	Diapolo	@Diapolo : no
2605	17366784	2013-05-02T21:44:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17366784	gmaxwell	Diapolo	@Diapolo  In the case of it being "wanted" the correct behavior is at least harmless, in the case where it's not wanted the incorrect (current) behavior is dangerous.  So even admitting that sometimes people might want it, the less risky behavior is the one we want.
2604	17352030	2013-05-02T17:28:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17352030	gmaxwell	gavinandresen	@gavinandresen Agreed. It can't simply be brought back in any case, since they can't just be turned on without it being a hardfork relative to currently deployed nodes.  (e.g. they'd have to be brought back inside a script v2 that looked like a NOOP to existing nodes)
2604	17354991	2013-05-02T18:20:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17354991	petertodd	gavinandresen	@gavinandresen ACK
2603	18183493	2013-05-21T01:08:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18183493	sipa	gmaxwell	@gmaxwell That'd be a nice improvement, but doesn't change the fact that we need to write updated bestblock records more frequently to avoid spurious rescans.
2601	17307093	2013-05-01T21:17:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17307093	luke-jr	sipa	@sipa In that case, this patch would break clients trying to use /rpc/v0/blah    Perhaps an alternative to / should be allowed within some criteria?
2600	17421372	2013-05-03T22:20:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17421372	sipa	jgarzik	@jgarzik 0x00 is a valid serialized EC point (though not a valid ECDSA public key), so I prefer using a certainly-invalid data there, to trigger more errors in case of some out-of-bounds access.
2599	17241260	2013-04-30T17:22:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17241260	sipa	jgarzik	@jgarzik How so? There is always progress:  * Because there is a message in the send buffer left (so we send)  * or there is no complete message in the receive buffer (so we receive)  * or there is a complete message in the receive buffer (so we process)
2599	17357970	2013-05-02T19:06:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17357970	sipa	jgarzik	@jgarzik Mind taking another look at this?
2598	17336129	2013-05-02T12:54:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17336129	Diapolo	sipa	@sipa As pulltester is happy, can you merge it, so I can create another translations update :).
2596	17246056	2013-04-30T18:38:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17246056	jevonx	gmaxwell	@gmaxwell - good catch, I'm working on a fix.
2596	17255325	2013-04-30T21:27:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17255325	jevonx	luke-jr	Now it ignores double spends if everything is identical except the sigs.    I think we probably don't want to allow different inputs for same outputs, because independent transactions can have identical outputs. Take this transaction triangle...  T1: in=A+B, out=X  // thank you  T2: in=C+D, out=X  // more money, thank you  T3: in=A+C, out=X  // benign double spend?  ...if T3 gets mined, then T1 and T2 can't.    @luke-jr Even without relaying double spends yet, this already works most of the time. If you have 20 connections, you have 20 chances to get the double spend. If none of your peers gets the double spend, it probably didn't reach very many nodes.    It also scans transactions in blocks, so you know immediately if your transaction loses, instead of wondering if it's staying at 0 conf because it just got passed over. If there's a fork, it scans other fork's blocks too.
2596	17258237	2013-04-30T22:25:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17258237	gmaxwell	jevonx	@jevonx Well, I'd want to allow changes like increasing fees (which might require adding a change output that wasn't there before.  I'd prefer it to be something like  "doesn't pay _me_ any less", can you suggest a reason to be more restrictive than that?   We should still not show _both_ of a benign double spend, but we should probably not penalize the one we are showing.
2596	21091054	2013-07-17T04:13:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091054	luke-jr	jevonx	@jevonx Poke, please rebase and squash...
2595	17236846	2013-04-30T16:08:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17236846	sipa	TheBlueMatt	@TheBlueMatt is there a problem with pulltester here?
2595	17238850	2013-04-30T16:43:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17238850	Diapolo	sipa	@sipa Looks like this is the cause but perhaps just related to some pulltester work.  ``Blocks which should/should not have been accepted but weren't/were: 9``
2592	18257707	2013-05-22T05:05:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18257707	sipa	luke-jr	@luke-jr I disagree. For a wallet format you mainly want strong consistency guarantees and easy updating. An export/import format is write-once anyway, and is preferably compatible with other clients and transparent.
2592	19858836	2013-06-22T15:47:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19858836	sipa	soundasleep	@soundasleep I don't think that functionality belongs in this command, as it exports to an already-defined format designed for key backups. I would have no problems with a separate command that just lists all wallet keys, though.
2591	17239927	2013-04-30T17:00:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17239927	sipa	gmaxwell	@gmaxwell #2558 isn't merged yet
2590	17165294	2013-04-29T13:06:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17165294	mcdee	jonasschnelli	It looks like the specific situation which the patches address is when the link points to an NTFS filesystem.  When the link points to an EXT3 filesystem it works without the patch.    @jonasschnelli which version of boost are you using?
2590	17165802	2013-04-29T13:16:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17165802	jonasschnelli	mcdee	@mcdee boost @1.53.0, Revision 1 (devel)
2590	17165802	2013-04-29T13:16:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17165802	jonasschnelli	1.53.0,	@mcdee boost @1.53.0, Revision 1 (devel)
2590	17772636	2013-05-12T04:56:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17772636	rebroad	gavinandresen	@gavinandresen Why do you consider this a "weird" configuration? I suspect it's a fairly common one. Certainly a symlink to a NTFS partition should be supported, IMHO. Why shouldn't it be?
2590	17806147	2013-05-13T11:32:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17806147	Diapolo	sipa	@sipa I also think there is no real maintain-cost here.    What I would like is a little comment, what this does in the code.
2590	18691933	2013-05-30T16:29:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18691933	jgarzik	jonasschnelli	@jonasschnelli Ouch.  Can you confirm this happens on HEAD + this patch?    In general, "meh"   Symlinks currently work. Some people might notice that their $datadir as applied differs from the one specified, e.g. /home/real/path/to/my/data rather than /my/data.
2590	18701248	2013-05-30T19:08:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18701248	jonasschnelli	1.53.0	ACK  - checked out HEAD + this commit  - having `boost @1.53.0 (devel)` (installed trough port)  - running standard 10.8.3  run's smooth    But i didn't test against a symlink pointing to a NTFS drive (NTFS connection are very rare on mac).
2589	17201399	2013-04-29T23:36:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17201399	sipa	Diapolo	@Diapolo The win32 env code is not part of upstream LevelDB. If it matures a bit more, we may try to get it merged though.
2588	17137559	2013-04-28T17:07:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17137559	Diapolo	laanwj	@laanwj @sipa Updated and removed the default for fDefault paramter.
2588	17137559	2013-04-28T17:07:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17137559	Diapolo	sipa	@laanwj @sipa Updated and removed the default for fDefault paramter.
2588	17273931	2013-05-01T09:08:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17273931	Diapolo	sipa	@sipa @laanwj Anything more to be done here?
2588	17273931	2013-05-01T09:08:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17273931	Diapolo	laanwj	@sipa @laanwj Anything more to be done here?
2588	17589609	2013-05-08T06:52:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589609	Diapolo	sipa	@sipa It's ugly to keep this updated, any meaning if this should be merged now or not?
2587	17135436	2013-04-28T15:04:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17135436	sipa	Diapolo	On IRC @Diapolo mentioned that it was a socket send error, which would mean SocketSendData is called on a CNode without valid hSocket field.
2581	17115145	2013-04-27T12:12:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17115145	laanwj	diapolo	@diapolo any idea why this is the case?
2577	17086536	2013-04-26T16:58:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17086536	gavinandresen	Diapolo,	Rebased to make the qt an Error as suggested by @Diapolo, and tell the user they screwed up if they give bad -mintxfee/minrelaytxfee values.    Don't know why github is confused about the commits...
2577	17107596	2013-04-27T00:59:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17107596	gavinandresen	petertodd	@petertodd : I added belt-and-suspenders code, since we don't have good CreateTransaction unit tests.  @sipa:  why not indeed.    I'll squash the two commits before final pull.
2577	17107596	2013-04-27T00:59:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17107596	gavinandresen	sipa	@petertodd : I added belt-and-suspenders code, since we don't have good CreateTransaction unit tests.  @sipa:  why not indeed.    I'll squash the two commits before final pull.
2577	17140050	2013-04-28T18:45:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17140050	johndillon	gavinandresen	@gavinandresen Nice technical details. But how expensive do you expect a transaction to be? That is the real issue and that is the one that drives scalability. What are you going to tell the people doing tiny transactions like tipjars, just leave Bitcoin?
2577	17141937	2013-04-28T20:26:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17141937	gavinandresen	johndillon	@johndillon : Bitcoin is not appropriate for transactions less than a penny or three.    If Moore's Law continues to hold, then one day it might be.    That is all out of scope for this pull request; if we do nothing, then we are stuck with MIN_RELAY_TX_FEE=0.0005 BTC.
2577	17142014	2013-04-28T20:30:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17142014	jgarzik	gavinandresen	@gavinandresen ACK general roadmap
2577	17148144	2013-04-29T02:48:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17148144	johndillon	gavinandresen	@gavinandresen Good to hear. When people try to get the blocksize raised for the sake of penny transactions I'll be able to tell my fellow investors that people are trying to fundamentally damage Bitcoin's decentralization for the sake of penny bets.    Moore's law doesn't apply to bandwidth, and Moore's law is on it's last legs anyway.
2577	17148811	2013-04-29T03:28:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17148811	petertodd	johndillon	@johndillon Seriously, take politics off github.
2577	17175496	2013-04-29T15:55:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17175496	petertodd	simondlr	@simondlr http://bitcoin.speedstats.org/ is quite wrong. The cost to send a transaction is related to it's size, not it's value. (there are some exceptions to deter abuse of free or spam transactions) Transaction fees are a process where you bid for a limited amount of blockchain space, so we can't tell you an exact number and demand for blockchain space changes day by day and hour by hour.    @mikehearn Bumping the protocol version doesn't help much because nodes can only use that information with a code change, in which case they should just follow the new rules instead.
2577	17175496	2013-04-29T15:55:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17175496	petertodd	mikehearn	@simondlr http://bitcoin.speedstats.org/ is quite wrong. The cost to send a transaction is related to it's size, not it's value. (there are some exceptions to deter abuse of free or spam transactions) Transaction fees are a process where you bid for a limited amount of blockchain space, so we can't tell you an exact number and demand for blockchain space changes day by day and hour by hour.    @mikehearn Bumping the protocol version doesn't help much because nodes can only use that information with a code change, in which case they should just follow the new rules instead.
2577	17177555	2013-04-29T16:27:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17177555	simondlr	petertodd	@petertodd ah yes. Of course. Thanks! Isn't the plan with the memory pool to dynamically check what tx fee (per kb) is needed to be included in the block? Thus you will know by the hour (or per block)? Or am I getting it wrong? I tried finding the discussion on the memory pool, but couldn't find it. Can someone link it to me please?
2577	17182087	2013-04-29T17:43:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17182087	schildbach	petertodd	@petertodd Nothing like that yet in Bitcoin Wallet. It updates when a new version is uploaded to the market. So this 50% switch thing could be implemented manually by uploading the right version at the right time.
2577	17244334	2013-04-30T18:09:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17244334	BlueMeanie	petertodd	@petertodd , with all due respect, could you please link us to your proposal re. Colored Coins?  I have been participating in the discussion on the [Google Group](https://groups.google.com/forum/?fromgroups=#!forum/bitcoinx), and I pointed out the problem re. Microtransactions about a week ago.  I agree with many of your stated frustrations.  Thanks.
2577	17247336	2013-04-30T18:59:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17247336	gmaxwell	dacoinminster	@dacoinminster  instead of raising the fee funds you lose forever just increase the value of the tracking txouts you use. This avoids the problem of creating perpetual txout set data-bloat which will never be swept up because doing so costs more than the redeemed output yields.  No amount of txfee increases can approximate that.
2577	17248557	2013-04-30T19:21:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17248557	petertodd	BlueMeanie	@BlueMeanie Sure: https://github.com/petertodd/trustbits/blob/master/fidelitybond.md#contracts It's from my fidelity bonds stuff, but the mechanism is just a way of doing colored coins really. The advantage is that because value isn't a fixed ratio of shared to satoshi's you can divide however much you want and still avoid dust rules, and it's friendly to SPV nodes. Now if your bond value is smaller than a tx fee, well, use a off-chain tx system that's compatible with Bitcoin transactions, basically a blockchain who's contents is guaranteed by a third party.    @gavinandresen commented on the forums that miners can sybil the network and create nodes that lie about RELAYCOST to, say, drive up fees, but equally miners can create nodes that just don't relay transactions with low fees to others with the exact same effect.
2577	17248557	2013-04-30T19:21:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17248557	petertodd	gavinandresen	@BlueMeanie Sure: https://github.com/petertodd/trustbits/blob/master/fidelitybond.md#contracts It's from my fidelity bonds stuff, but the mechanism is just a way of doing colored coins really. The advantage is that because value isn't a fixed ratio of shared to satoshi's you can divide however much you want and still avoid dust rules, and it's friendly to SPV nodes. Now if your bond value is smaller than a tx fee, well, use a off-chain tx system that's compatible with Bitcoin transactions, basically a blockchain who's contents is guaranteed by a third party.    @gavinandresen commented on the forums that miners can sybil the network and create nodes that lie about RELAYCOST to, say, drive up fees, but equally miners can create nodes that just don't relay transactions with low fees to others with the exact same effect.
2577	17252019	2013-04-30T20:28:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252019	katuma	BlueMeanie	@BlueMeanie: Impact on colored coins does not really belong here, [this has been brought up a week ago on the mailing list you mention](https://groups.google.com/d/msg/bitcoinx/-b6XC4nUdYo/khkO7YHXBxwJ), without any satisfactory answer. Peter's way seem plausible on paper, but it's yet to be seen about implementation.  After all, when you see retep's code, it's christmas.
2577	17252734	2013-04-30T20:41:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252734	BlueMeanie	petertodd	@petertodd , thank you.  There is some follow up on your ideas and their relevance for Colored Coins [here](https://groups.google.com/forum/?fromgroups=#!topic/bitcoinx/eBvfvlZZcig)
2577	17252857	2013-04-30T20:43:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252857	petertodd	gmaxwell	@gmaxwell That's a good point, although I'm also thinking farther into the future where transaction replacement may mean that nodes want to limit the traffic from replacements that they're getting.    @BlueMeanie Um, no, that's not what I'm suggesting, just a part of it. Read that paper please...
2577	17252857	2013-04-30T20:43:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252857	petertodd	BlueMeanie	@gmaxwell That's a good point, although I'm also thinking farther into the future where transaction replacement may mean that nodes want to limit the traffic from replacements that they're getting.    @BlueMeanie Um, no, that's not what I'm suggesting, just a part of it. Read that paper please...
2577	17257981	2013-04-30T22:19:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17257981	killerstorm	petertodd	I don't think this change will create significant problems for "colored coins".    I mean, it's strange that you're doing this, but I guess we can live with it.    @petertodd Your mechanism cannot handle more than one color in one transaction without mandatory tagging, which adds to blockchain bloat. I see no advantages over order-based coloring. We considered odd-even, tagging and similar ideas. Order-based scheme is the most straightforward and carries minimal overhead.
2577	17259454	2013-04-30T22:53:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17259454	petertodd	killerstorm	@killerstorm I outlined a mechanism where the tagging is integrated into the pubkey; no extra bytes at all in the blockchain. If that's too complex you can use a OP_RETURN <20 bytes> txout to mark txouts with data that can be immediately pruned.
2577	17268179	2013-05-01T04:24:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17268179	BlueMeanie	petertodd	@petertodd I do agree that the concept they are currently running with @BitcoinX/Color Coins ignores the economics of transaction processing.  It's exploiting the fact that transactions of any size are processed without discretion.  The points made in this thread show that this model is not viable, and not acceptable for the Bitcoin community.  There is more detail in my posts on the Google Group.
2577	17268179	2013-05-01T04:24:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17268179	BlueMeanie	BitcoinX/Color	@petertodd I do agree that the concept they are currently running with @BitcoinX/Color Coins ignores the economics of transaction processing.  It's exploiting the fact that transactions of any size are processed without discretion.  The points made in this thread show that this model is not viable, and not acceptable for the Bitcoin community.  There is more detail in my posts on the Google Group.
2577	17271042	2013-05-01T07:02:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17271042	killerstorm	BlueMeanie	@BlueMeanie LOL. You failed to understand that Peter's contract value accounting also uses satoshi value of unspent transaction outputs. It is just that it uses a different encoding scheme, a scheme which provides better divisibility.    I don't think there is a problem with "the economics of transaction processing" in either of these schemes. That's just your opinion, do not pretend that it is widespread.    Let's close this discussion here (I mean discussion of 'colored coins' and related), there is a mailing list or a forum for that.
2577	17278414	2013-05-01T11:59:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17278414	BlueMeanie	killerstorm	@killerstorm seems the discussion on that list involves those who are invested in particular ideas about colored coins.  I reviewed @petertodd's idea, personally I think that a 'colored coin' solution lies in alt-chains and using the main BTC block chain is not appropriate for this application.  If someone can convince me otherwise in a credible way, I'm all for it.  I have yet to see that.  This is the place to raise these points because the plan that currently dominates on the list affects the issue of Coin Dust and Tx fees directly.  Personally I think most are avoiding the topic on the list.
2577	17278414	2013-05-01T11:59:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17278414	BlueMeanie	petertodd's	@killerstorm seems the discussion on that list involves those who are invested in particular ideas about colored coins.  I reviewed @petertodd's idea, personally I think that a 'colored coin' solution lies in alt-chains and using the main BTC block chain is not appropriate for this application.  If someone can convince me otherwise in a credible way, I'm all for it.  I have yet to see that.  This is the place to raise these points because the plan that currently dominates on the list affects the issue of Coin Dust and Tx fees directly.  Personally I think most are avoiding the topic on the list.
2577	17458696	2013-05-05T20:38:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17458696	gmaxwell	pentarh	@pentarh I disagree. Sending a flood of femtocents at someone isn't a "transaction". Bitcoin has long had limitations on the sending of very tiny transactions the original ones added by satoshi himself.
2577	17458980	2013-05-05T20:55:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17458980	pentarh	gmaxwell	@gmaxwell I agree that spam is an issue, but it should be changed in different way. Breaking fundamentals is a bad way IMHO, because its a precedent for further breaking. Does youtube banning out small and not popular videos? No. Youtube just extending storage. I think Bitcoin needs scalable distributed DHT-like block chain storage.
2577	17459216	2013-05-05T21:08:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17459216	gmaxwell	pentarh	@pentarh Perhaps you misunderstand what this does. This is not a protocol-rule change. Miners can still include the same transactions they can now, though this pull makes 'picocent' payments not get included by default unless they change a threshold setting (useful if the value of Bitcoin changes greatly).    "scalable distributed DHT-like" is a total arm-wave. DHTs are not strongly attack resistant and are generally not very suitable for the interesting challenges in the Bitcoin system. In order to be a decenteralized system all full nodes must inspect all transactions and have rapidly reliable access to the set of spendable outputs. You can make various storage vs bandwidth tradeoffs, but we're constrained on both.    The obvious alternative to abuse based on tiny worthless outputs is to add fees, which was satoshi's solution. But with sendmany Satoshi's solution was obviously not aggressive enough (you'd send one fee and N junk outputs). Litecoin addressed that by multiplying the fee by the number of outputs but this quickly becomes obnoxious and still doesn't prevent the abuse. Better to address the creation of worthless tx outputs _directly_ and better to send most of your anti-abuse 'fee' to your destination in order to make the abuse not abuse rather than give it away to a third party.
2577	17462033	2013-05-06T00:09:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462033	gmaxwell	awishformore	@awishformore uh. Perhaps you too are confused. This is not a protocol rule, it's a default behavior which is configuration adjustable. Miners can still happily mine transactions not meeting this rule if they choose to.    Weird to here you talk about other cryptocurrencies, as many (most? all?) have much more aggressive anti-dust rules than Bitcoin. We previously declined to merge the ones from litecoin.
2577	17462077	2013-05-06T00:12:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462077	awishformore	gmaxwell	@gmaxwell then it should be *off* by default, not on. Yes, you don't change the protocol. What you do is even worse - you pretty much disable something that is considered legal and valid by the protocol.    If you declined to merge the Litecoin approach, I really don't get how you can even consider implementing such an ill-conceived dirty fix into Bitcoin, which should be the flagship crypto-currency.
2577	17462109	2013-05-06T00:15:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462109	petertodd	awishformore	@awishformore We do need better communication of this stuff, and that includes doing things like taking "Low or zero processing fees" off of bitcoin.org and not talking about microtransactions.    Just the other day I was on the phone with an investor working on some payment system thing who had never heard of the blocksize limit at all.
2577	17462158	2013-05-06T00:18:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462158	robbak	awishforme	@awishforme: If you are creating a business that relies on creating many  unspendable outputs, and this patch persuades you not to do so, then I'd  say it has done it's job. The growth of unspendable and near unspendable  outputs is a real and growing problem.  On 06/05/2013 9:31 AM, "awishformore" <notifications@github.com> wrote:    > I'm currently starting a company that I hoped would bring innovation and  > diversity to the landscape of the Bitcoin economy, and this comes as a *  > huge* shock to me.  >  > Neither this, nor the MIN_RELAY_TX_FEE=0.0005 BTC are required, Gavin.  > It's ridiculous that you claim they are.  >  > This is something that should be 100% up to the miners to decide on. If  > you go through with this, you join the game of doing politics, and it's not  > your place to do so.  >  > I swear, if this happens, Bitcoin is dead to me. I will direct all efforts  > and all capital of my company onto an alternative crypto-currency the  > second this is released as standard in any Bitcoin version.  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2577#issuecomment-17461469>  > .  >
2577	17463246	2013-05-06T01:29:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463246	mikegogulski	pentarh	@pentarh Fuck the "bible". Even Satoshi, peace be upon Him, can be wrong, mistaken or can fail to anticipate certain aspects of things. In any event, He is not here to guide us, so we must to the job ourselves, with all of our own faculties.    @gavinandresen My trust level toward you is extremely high. I see a lot of rubbish in this thread that unjustly questions your judgement. Even so, your initial comments are a bit worrying to me, and make me dream of a better reality. That is, when we recognize that what we have now is rather screwed up, we are best served in the long run by fixing the problem at its root rather than hacking at the branches; antivirals and antibiotics, not analgesics and Band-Aids(TM). I feel you're probably right going this way now on this decision. It's more or a less a "gotta be done" thing. But I really wish that folks who are submitting and committing new code will devote equal energy to deeply examining and then refining old code so that the kind of dilemma you faced here doesn't occur.    (topically tangent aside: I wrestled for a couple of weeks in January refactoring parts of the RPC code, including where it touches the interfaces to the CWallet object. I got some great feedback from @sipa, but not much more attention to my diffs, and I gave up a bit later on when other changes to the RPC code broke the build on my branch. I am not a coder on the level of any of the core devs, but I do know well how to look at a code base that I've come to understand and then identify and fix problems around unit tests, modularity and separation of concerns. I have zero animosity about "wasted" work or whatever, but I feel very strongly that not enough attention is being paid to those kinds of issues in the existing codebase. I imagine, given your statement above, that you share the same sort of feeling.)
2577	17463246	2013-05-06T01:29:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463246	mikegogulski	gavinandresen	@pentarh Fuck the "bible". Even Satoshi, peace be upon Him, can be wrong, mistaken or can fail to anticipate certain aspects of things. In any event, He is not here to guide us, so we must to the job ourselves, with all of our own faculties.    @gavinandresen My trust level toward you is extremely high. I see a lot of rubbish in this thread that unjustly questions your judgement. Even so, your initial comments are a bit worrying to me, and make me dream of a better reality. That is, when we recognize that what we have now is rather screwed up, we are best served in the long run by fixing the problem at its root rather than hacking at the branches; antivirals and antibiotics, not analgesics and Band-Aids(TM). I feel you're probably right going this way now on this decision. It's more or a less a "gotta be done" thing. But I really wish that folks who are submitting and committing new code will devote equal energy to deeply examining and then refining old code so that the kind of dilemma you faced here doesn't occur.    (topically tangent aside: I wrestled for a couple of weeks in January refactoring parts of the RPC code, including where it touches the interfaces to the CWallet object. I got some great feedback from @sipa, but not much more attention to my diffs, and I gave up a bit later on when other changes to the RPC code broke the build on my branch. I am not a coder on the level of any of the core devs, but I do know well how to look at a code base that I've come to understand and then identify and fix problems around unit tests, modularity and separation of concerns. I have zero animosity about "wasted" work or whatever, but I feel very strongly that not enough attention is being paid to those kinds of issues in the existing codebase. I imagine, given your statement above, that you share the same sort of feeling.)
2577	17463246	2013-05-06T01:29:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463246	mikegogulski	sipa,	@pentarh Fuck the "bible". Even Satoshi, peace be upon Him, can be wrong, mistaken or can fail to anticipate certain aspects of things. In any event, He is not here to guide us, so we must to the job ourselves, with all of our own faculties.    @gavinandresen My trust level toward you is extremely high. I see a lot of rubbish in this thread that unjustly questions your judgement. Even so, your initial comments are a bit worrying to me, and make me dream of a better reality. That is, when we recognize that what we have now is rather screwed up, we are best served in the long run by fixing the problem at its root rather than hacking at the branches; antivirals and antibiotics, not analgesics and Band-Aids(TM). I feel you're probably right going this way now on this decision. It's more or a less a "gotta be done" thing. But I really wish that folks who are submitting and committing new code will devote equal energy to deeply examining and then refining old code so that the kind of dilemma you faced here doesn't occur.    (topically tangent aside: I wrestled for a couple of weeks in January refactoring parts of the RPC code, including where it touches the interfaces to the CWallet object. I got some great feedback from @sipa, but not much more attention to my diffs, and I gave up a bit later on when other changes to the RPC code broke the build on my branch. I am not a coder on the level of any of the core devs, but I do know well how to look at a code base that I've come to understand and then identify and fix problems around unit tests, modularity and separation of concerns. I have zero animosity about "wasted" work or whatever, but I feel very strongly that not enough attention is being paid to those kinds of issues in the existing codebase. I imagine, given your statement above, that you share the same sort of feeling.)
2577	17463281	2013-05-06T01:31:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463281	felipelalli	pentarh	This is sad. Goodbye Satoshi. Agreed @pentarh
2577	17463796	2013-05-06T02:04:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463796	BlueMeanie	gavinandresen	The kind of *transaction discrimination* reflected in this recent merge is inevitable.  It's important to note however, that many ideas for the future of bitcoin rely on a flexible policy regarding what makes it's way into the block chain.  I agree with @gavinandresen - these new measures are required.
2577	17464042	2013-05-06T02:20:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464042	johndillon	gavinandresen	@gavinandresen     > So IsDust() will be based on what is actually being accepted into blocks, and will adjust appropriately.    How is this going to work given that miners only have an incentive to charge per KB? (using UTXO space after all is treated no differently than using blockchain space)
2577	17464257	2013-05-06T02:33:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464257	drwasho	gmaxwell	@gmaxwell receives the prize for the most intelligent comment:     "Perhaps you misunderstand what this does. This is not a protocol-rule change. Miners can still include the same transactions they can now, though this pull makes 'picocent' payments not get included by default unless they change a threshold setting (useful if the value of Bitcoin changes greatly)."    This doesn't seem to be the Bitpocalypse that people are making it out to be.     To Bitcoin miners thinking of boycotting the new version, a better way to protest would be to change your default settings to process these microtransactions. If most of the miners make these changes, then this controversy truly becomes irrelevant.
2577	17464455	2013-05-06T02:44:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464455	mikegogulski	petertodd	@petertodd No, and screw you for demanding. We will not leave politics off GitHub.    @johndillon Subterfuge? O'RLY? WTF?    @felipelalli (My apologies if I am not reacting to the @pentarh comment you were reacting to. I hope that folks will find this useful in any case.)    In the late 1950s to late 1970s, The Establishment, aka The Man, aka The Conspiracy, aka the FBI (Fucking Bavarian Illuminati) and the CIA (Cocksucking Illuminati Assholes) identified, targeted and destroyed the leading lights of a nascent, shining shining movement toward global illumination: MLK. Leary. JFK. Morrison. Malcom X. Lennon. and on and on. The dawning of the Age of Aquarius was strangled in the crib.    The failure of that time, which culminated worldwide in '68, was that the movement had FACES, and faces are targets. Destroy the faces, destroy the movement. Take all of the trappings of the new consciousness and recast them as cheap marketing gimmicks: subversion complete. The Hippie pioneers did not drive Volkswagen Beetles because they were some kind of status symbol or mass-consumer-culture signifier. They drove them because they were cheap, simple, minimalistic, trivial to repair and infinitely customizable. It was only later that the cultural imperialists sucked everything good out of the times and pushed it through the marketing meat grinder, until: Fahrvergngen.    Today, I believe, a few of the surviving "secret chiefs", if you will, who were active back in '68 and before are working as cleverly as they can, before they die, to levitate the Pentagon^w^w^wshift global consciousness in much the same way, but with a fundamentally different and more effective strategy: No more faces. Anonymous. Alan Moore's Guy Fawkes mask. The unknown hero, the nameless brother, the faceless Samaritan. When The Man can't target a Face, it doesn't know what to do, and the field is open for massive gains on the side of the regular people. Today, we don't venerate the Faces. We don the mask. And this Face Book? Oh! Do you jest, or do you not feel the power you have lost?    Whoever or whatever Satoshi is or was knew this, and acted right from the start on that knowledge. No face, no target. Produce brilliance, show some people, fade away into legend.    There is a teaching in Zen Buddhism which I will paraphrase here: If you meet Satoshi on the road, KILL HIM.
2577	17464455	2013-05-06T02:44:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464455	mikegogulski	johndillon	@petertodd No, and screw you for demanding. We will not leave politics off GitHub.    @johndillon Subterfuge? O'RLY? WTF?    @felipelalli (My apologies if I am not reacting to the @pentarh comment you were reacting to. I hope that folks will find this useful in any case.)    In the late 1950s to late 1970s, The Establishment, aka The Man, aka The Conspiracy, aka the FBI (Fucking Bavarian Illuminati) and the CIA (Cocksucking Illuminati Assholes) identified, targeted and destroyed the leading lights of a nascent, shining shining movement toward global illumination: MLK. Leary. JFK. Morrison. Malcom X. Lennon. and on and on. The dawning of the Age of Aquarius was strangled in the crib.    The failure of that time, which culminated worldwide in '68, was that the movement had FACES, and faces are targets. Destroy the faces, destroy the movement. Take all of the trappings of the new consciousness and recast them as cheap marketing gimmicks: subversion complete. The Hippie pioneers did not drive Volkswagen Beetles because they were some kind of status symbol or mass-consumer-culture signifier. They drove them because they were cheap, simple, minimalistic, trivial to repair and infinitely customizable. It was only later that the cultural imperialists sucked everything good out of the times and pushed it through the marketing meat grinder, until: Fahrvergngen.    Today, I believe, a few of the surviving "secret chiefs", if you will, who were active back in '68 and before are working as cleverly as they can, before they die, to levitate the Pentagon^w^w^wshift global consciousness in much the same way, but with a fundamentally different and more effective strategy: No more faces. Anonymous. Alan Moore's Guy Fawkes mask. The unknown hero, the nameless brother, the faceless Samaritan. When The Man can't target a Face, it doesn't know what to do, and the field is open for massive gains on the side of the regular people. Today, we don't venerate the Faces. We don the mask. And this Face Book? Oh! Do you jest, or do you not feel the power you have lost?    Whoever or whatever Satoshi is or was knew this, and acted right from the start on that knowledge. No face, no target. Produce brilliance, show some people, fade away into legend.    There is a teaching in Zen Buddhism which I will paraphrase here: If you meet Satoshi on the road, KILL HIM.
2577	17464455	2013-05-06T02:44:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464455	mikegogulski	felipelalli	@petertodd No, and screw you for demanding. We will not leave politics off GitHub.    @johndillon Subterfuge? O'RLY? WTF?    @felipelalli (My apologies if I am not reacting to the @pentarh comment you were reacting to. I hope that folks will find this useful in any case.)    In the late 1950s to late 1970s, The Establishment, aka The Man, aka The Conspiracy, aka the FBI (Fucking Bavarian Illuminati) and the CIA (Cocksucking Illuminati Assholes) identified, targeted and destroyed the leading lights of a nascent, shining shining movement toward global illumination: MLK. Leary. JFK. Morrison. Malcom X. Lennon. and on and on. The dawning of the Age of Aquarius was strangled in the crib.    The failure of that time, which culminated worldwide in '68, was that the movement had FACES, and faces are targets. Destroy the faces, destroy the movement. Take all of the trappings of the new consciousness and recast them as cheap marketing gimmicks: subversion complete. The Hippie pioneers did not drive Volkswagen Beetles because they were some kind of status symbol or mass-consumer-culture signifier. They drove them because they were cheap, simple, minimalistic, trivial to repair and infinitely customizable. It was only later that the cultural imperialists sucked everything good out of the times and pushed it through the marketing meat grinder, until: Fahrvergngen.    Today, I believe, a few of the surviving "secret chiefs", if you will, who were active back in '68 and before are working as cleverly as they can, before they die, to levitate the Pentagon^w^w^wshift global consciousness in much the same way, but with a fundamentally different and more effective strategy: No more faces. Anonymous. Alan Moore's Guy Fawkes mask. The unknown hero, the nameless brother, the faceless Samaritan. When The Man can't target a Face, it doesn't know what to do, and the field is open for massive gains on the side of the regular people. Today, we don't venerate the Faces. We don the mask. And this Face Book? Oh! Do you jest, or do you not feel the power you have lost?    Whoever or whatever Satoshi is or was knew this, and acted right from the start on that knowledge. No face, no target. Produce brilliance, show some people, fade away into legend.    There is a teaching in Zen Buddhism which I will paraphrase here: If you meet Satoshi on the road, KILL HIM.
2577	17464455	2013-05-06T02:44:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464455	mikegogulski	pentarh	@petertodd No, and screw you for demanding. We will not leave politics off GitHub.    @johndillon Subterfuge? O'RLY? WTF?    @felipelalli (My apologies if I am not reacting to the @pentarh comment you were reacting to. I hope that folks will find this useful in any case.)    In the late 1950s to late 1970s, The Establishment, aka The Man, aka The Conspiracy, aka the FBI (Fucking Bavarian Illuminati) and the CIA (Cocksucking Illuminati Assholes) identified, targeted and destroyed the leading lights of a nascent, shining shining movement toward global illumination: MLK. Leary. JFK. Morrison. Malcom X. Lennon. and on and on. The dawning of the Age of Aquarius was strangled in the crib.    The failure of that time, which culminated worldwide in '68, was that the movement had FACES, and faces are targets. Destroy the faces, destroy the movement. Take all of the trappings of the new consciousness and recast them as cheap marketing gimmicks: subversion complete. The Hippie pioneers did not drive Volkswagen Beetles because they were some kind of status symbol or mass-consumer-culture signifier. They drove them because they were cheap, simple, minimalistic, trivial to repair and infinitely customizable. It was only later that the cultural imperialists sucked everything good out of the times and pushed it through the marketing meat grinder, until: Fahrvergngen.    Today, I believe, a few of the surviving "secret chiefs", if you will, who were active back in '68 and before are working as cleverly as they can, before they die, to levitate the Pentagon^w^w^wshift global consciousness in much the same way, but with a fundamentally different and more effective strategy: No more faces. Anonymous. Alan Moore's Guy Fawkes mask. The unknown hero, the nameless brother, the faceless Samaritan. When The Man can't target a Face, it doesn't know what to do, and the field is open for massive gains on the side of the regular people. Today, we don't venerate the Faces. We don the mask. And this Face Book? Oh! Do you jest, or do you not feel the power you have lost?    Whoever or whatever Satoshi is or was knew this, and acted right from the start on that knowledge. No face, no target. Produce brilliance, show some people, fade away into legend.    There is a teaching in Zen Buddhism which I will paraphrase here: If you meet Satoshi on the road, KILL HIM.
2577	17465224	2013-05-06T03:37:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465224	BlueMeanie	pentarh	also: I do agree with @pentarh , I think we need some innovation in the storage technology.  All transactions should be accessible on some level of resolution, but really these problems are outside the scope of Bitcoin and @gavinandresen is doing the right thing.  Just because some parties want Colored Coins or Distributed Exchanges to work with the existing block chain does not mean it must be worked into the core code, certainly not at the expense of basic features.  I think all this discussion points to some goals for Bitcoin 2.0.  Having *multiple user-defined asset types* is really a very valuable use case and opens up a whole world of possibilities for finance, truly **making money accessible for everyone**.
2577	17465224	2013-05-06T03:37:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465224	BlueMeanie	gavinandresen	also: I do agree with @pentarh , I think we need some innovation in the storage technology.  All transactions should be accessible on some level of resolution, but really these problems are outside the scope of Bitcoin and @gavinandresen is doing the right thing.  Just because some parties want Colored Coins or Distributed Exchanges to work with the existing block chain does not mean it must be worked into the core code, certainly not at the expense of basic features.  I think all this discussion points to some goals for Bitcoin 2.0.  Having *multiple user-defined asset types* is really a very valuable use case and opens up a whole world of possibilities for finance, truly **making money accessible for everyone**.
2577	17465310	2013-05-06T03:45:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465310	gmaxwell	johndillon	@johndillon  I'm hurt. The accusation of subterfuge is misplaced.  In the same breath I've been talking about this I've talked about the other kinds of non-standard transactions which work exactly the same way. If you don't think I've been clear enough about it okay, so point it out to me and I'll fix it. I certainly have no reason to deceive anyone. None of us in support of this change profit from it beyond the hope that it stops some of the abusive use and keep bitcoin humming nicely.    Presumably anyone agreeing to process a non-standard transaction will direct you to addnode something that will take them for them (https://en.bitcoin.it/wiki/Free_transaction_relay_policy), which can now even be added without restarting the software .
2577	17465313	2013-05-06T03:45:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465313	josephagoss	gavinandresen	@gavinandresen Couldn't you finally increase the divisibility of Bitcoin down to a larger amount of decimal places, making a "Satoshi" divisible would help make that unit useful and no longer dust.    If a Bitcoin could be split into a trillion places, and define dust as being several digits from the new smallest unit, this would leave all the units we deal with as useful, including the "Satoshi" unit.
2577	17465552	2013-05-06T04:02:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465552	johndillon	gmaxwell	@gmaxwell I am of the position that I solidly think the change is a good thing, but I also feel that it is simply not communicated to the wider community at all. That my little post on the forums lead to 7000 views in just a few hours shows how little people know and understand about these changes even taking trolls into account. @petertodd is right to point out how few people understand these issues in the wider community and how we still present this misleading "low or no fees" message without any plan for how that will actually be achieved. If investors are putting money into Bitcoin thinking it is something it is not, this is a serious problem. What I see is people sinking money into Bitcoin assuming it will be a cheap payment platform, and people sinking money assuming it will be decentralized, and the way things are going with the foundation and Gavin I do not see how it will be both, but none of this is being effectively communicated outside of a small number of developers and the occasional interested person like myself.    Also without a way for nodes to relay dust transactions, given that 0.8.2 nodes will not identify themselves, yes, the change really is blocking dust entirely. I think that is a good thing to do, but don't go off on forums soothing peoples feelings by telling them untruths like it's just a miners choice. Consider this very wrong post byTradeFortress : https://bitcointalk.org/index.php?topic=196482.0 Even @jgarzik isn't really being honest here: https://bitcointalk.org/index.php?topic=196138.msg2043040#msg2043040 Again, if the network is ignoring your transaction, from the users' point of view it is a protocol change.
2577	17465552	2013-05-06T04:02:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465552	johndillon	petertodd	@gmaxwell I am of the position that I solidly think the change is a good thing, but I also feel that it is simply not communicated to the wider community at all. That my little post on the forums lead to 7000 views in just a few hours shows how little people know and understand about these changes even taking trolls into account. @petertodd is right to point out how few people understand these issues in the wider community and how we still present this misleading "low or no fees" message without any plan for how that will actually be achieved. If investors are putting money into Bitcoin thinking it is something it is not, this is a serious problem. What I see is people sinking money into Bitcoin assuming it will be a cheap payment platform, and people sinking money assuming it will be decentralized, and the way things are going with the foundation and Gavin I do not see how it will be both, but none of this is being effectively communicated outside of a small number of developers and the occasional interested person like myself.    Also without a way for nodes to relay dust transactions, given that 0.8.2 nodes will not identify themselves, yes, the change really is blocking dust entirely. I think that is a good thing to do, but don't go off on forums soothing peoples feelings by telling them untruths like it's just a miners choice. Consider this very wrong post byTradeFortress : https://bitcointalk.org/index.php?topic=196482.0 Even @jgarzik isn't really being honest here: https://bitcointalk.org/index.php?topic=196138.msg2043040#msg2043040 Again, if the network is ignoring your transaction, from the users' point of view it is a protocol change.
2577	17465552	2013-05-06T04:02:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465552	johndillon	jgarzik	@gmaxwell I am of the position that I solidly think the change is a good thing, but I also feel that it is simply not communicated to the wider community at all. That my little post on the forums lead to 7000 views in just a few hours shows how little people know and understand about these changes even taking trolls into account. @petertodd is right to point out how few people understand these issues in the wider community and how we still present this misleading "low or no fees" message without any plan for how that will actually be achieved. If investors are putting money into Bitcoin thinking it is something it is not, this is a serious problem. What I see is people sinking money into Bitcoin assuming it will be a cheap payment platform, and people sinking money assuming it will be decentralized, and the way things are going with the foundation and Gavin I do not see how it will be both, but none of this is being effectively communicated outside of a small number of developers and the occasional interested person like myself.    Also without a way for nodes to relay dust transactions, given that 0.8.2 nodes will not identify themselves, yes, the change really is blocking dust entirely. I think that is a good thing to do, but don't go off on forums soothing peoples feelings by telling them untruths like it's just a miners choice. Consider this very wrong post byTradeFortress : https://bitcointalk.org/index.php?topic=196482.0 Even @jgarzik isn't really being honest here: https://bitcointalk.org/index.php?topic=196138.msg2043040#msg2043040 Again, if the network is ignoring your transaction, from the users' point of view it is a protocol change.
2577	17465748	2013-05-06T04:17:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465748	BlueMeanie	johndillon	@johndillon , it is entirely true that Bitcoin should not be seen as no-transaction-fee technology, although it appears that way because the incentive is(temporarily) coming through an inflation vehicle(the coins created with each block in the chain).  Obviously problems arise when, in the case of color coins, they are actually multiplying the BTC value of a very small amount(ie. 0.000001 BTC is colored to be worth 1 silver gram which has it's own BTC value of 0.2039 - at the time of writing) - this will clearly have fatal effects on the mining economy because **you have detached real value from BTC units**.  Various ideas have been proposed to circumvent any kind of regulations, but no proposals offer a way to create a long-term viable transaction economy that reflects the actual consent of the users.
2577	17465794	2013-05-06T04:20:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465794	gmaxwell	johndillon	@johndillon  I agree it could be communicated better. I didn't realize that it was pulled already until mid-discussion today, and I thought it had been posted (thus the discussion above about colored coins), or I would have prodded for it to be more widely advertised myself.    I pointed out in the threads someplace that you can't tell when it's being dropped. I do think you need to be careful with "blocked".   "You have to change the setting, and addnode a cooperating miner, and then it works fine", it's not the same as blocked. We probably need better language to discuss this, as there are absolutely people thinking that its blocked in a protocol rules sense (saying 'miners have no choice because they can only run bitcoind' and such) and I don't think it's wrong or misleading to respond to that saying it's not blocked.
2577	17466019	2013-05-06T04:34:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17466019	petertodd	gmaxwell	@gmaxwell Points for a proper press release about this:    Main thing driving this: make data spam more expensive in a way that doesn't make regular transactions more expensive. The minimum output does this because data spam doesn't spend outputs.    Options for affected businesses: combine payments together so that the lump sum is >54uBTC or connect directly to a miner willing to mine your transactions. Off-chain is possible too with something like EasyWallet, but then your customer needs an easywallet account. (they have an API) Consider that Bitcoin may not yet be right for you.    Long-term outlook: We don't really know yet. If tx fees rising can threaten your business take into account that they may be more expensive in the future (10x is quite possible) and there may be very little you or the development team can do about it.      I've got better things to do than post it though: http://www.reddit.com/r/Bitcoin/comments/1dqsul/warning_if_you_use_microtransactions_they_will/c9t4ea5
2577	17468052	2013-05-06T06:35:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17468052	jgarzik	johndillon	1) I note the distinct lack of discussion surrounding https://bitcointalk.org/index.php?topic=130450.0 and its pull request.    2) This issue certainly deserves better communication, but think the trolling (reddit/bitcointalk) by @johndillon was premature and exaggerated, because there is still plenty of time and opportunity in the release cycle for comments.  Usually the time prior to -rc1 release is used to write the communications that appear in -rc1.  The -rc1 release announcement then describes the changes, including rationale and impact.    -rc1 release initiates a phase of public testing and comment.  If the community really dislikes a particular change, this testing phase is yet another opportunity to make that known.    3) Most importantly...    The vast majority of remote workers (miners) do not seem to care at all about mining policies, in practice.  Pools' mining policies are incredibly opaque, few miners show deep interest in mining policy, and few pool operators show much interest in deep thinking about mining policies, transaction selection, and various economic incentives.  Even a lot of smart, engaged pool operators wind up preferring unmodified (or close to it) bitcoind for reasons of reduced complexity.    Therefore, just wanting -- quite rationally -- to get paid for mining, it is the sad reality that the block subsidy (currently 25.0 BTC) reduces transaction fees to the economic equivalent of statistical noise.  The long term cost of generating and storing economically worthless transaction outputs is simply not transmitted to users or miners.  Nor, really, is the short term cost.  The economic signalling of the block subsidy drowns the rest out.    The cost is currently borne entirely by "the cloud", the all-volunteer P2P network of full nodes.  The only modicum of behavior signalling we see there is a decreasing number of full nodes, and an increasing amount of P2P traffic.    What does all this add up to?  The answer is lies in the free market.  Move transaction fees away from hardcoded limits, and towards something more dynamic, with economic feedback between merchants, users and miners.    These hardcoded anti-spam limits have existed for years, originally starting out at 0.01 BTC.  Transactions have always been filtered.  Anything outside a small set of "standard" transactions are deemed "non-standard", and will be filtered (not relayed).  Again, policy has been in place for years.    The fee limits were lowered over time, but still hardcoded.  This latest change makes this limit configurable, moving one step closer to the goal of users being able to react rapidly to changes in miner policy or bitcoin value.  One step closer to a freer market.    Also introduced is an anti-spam rule that avoids relaying transactions whose value is below that of the transaction fee required to send it.  This rule self-adjusts over time, as the "tx fee required to send" changes over time.  In a dynamic fee market, it might change a lot.    It is unavoidable that tiny transactions worth fractions-of-a-penny may be easily abused for data transmission and storage.  We have already been burdened with megabytes worth of wikileaks data, GPG encrypted data, and the PGP fingerprint strong set, so this is not a theoretical problem.  These files are stored as bitcoin transactions with values around 0.00000001.
2577	17468564	2013-05-06T06:59:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17468564	petertodd	jgarzik	1) @jgarzik That discussion was on the development forum, around the holidays. As I said above, I've run into people putting serious effort into starting payment-dependent Bitcoin businesses who don't even know that there is a blocksize limit.    3)    http://blockchain.info/charts/cost-per-transaction    If the block subsidy was not statistical noise, transactions would have to cost something more like $1 each for 1MB blocks, $10 each to equal the block subsidy. On the other hand, if transactions were still cheap, say a penny each, well, you've just made the data storage problem something like 100 to 1000 times worse.    If you don't want the blocksize to grow at the maximum rate possible, 52GB/year, the answer does *not* lie in the free market until genuine economic activity is such that transaction fees are expensive. It relies on taking advantage of miner persuasion, as we already do.    Anyway users *can't* react rapidly to changes in miner policy or Bitcoin value without reasonable alternatives. I suspect *without* alternatives blockchain space is more like diesel and gasoline in terms of supply and demand - you absolutely need it and if you can't get it you just close up shop instead and that section of the economy goes out of business. (FWIW why I think calling @johndillon a troll is over-simplifying things)
2577	17468564	2013-05-06T06:59:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17468564	petertodd	johndillon	1) @jgarzik That discussion was on the development forum, around the holidays. As I said above, I've run into people putting serious effort into starting payment-dependent Bitcoin businesses who don't even know that there is a blocksize limit.    3)    http://blockchain.info/charts/cost-per-transaction    If the block subsidy was not statistical noise, transactions would have to cost something more like $1 each for 1MB blocks, $10 each to equal the block subsidy. On the other hand, if transactions were still cheap, say a penny each, well, you've just made the data storage problem something like 100 to 1000 times worse.    If you don't want the blocksize to grow at the maximum rate possible, 52GB/year, the answer does *not* lie in the free market until genuine economic activity is such that transaction fees are expensive. It relies on taking advantage of miner persuasion, as we already do.    Anyway users *can't* react rapidly to changes in miner policy or Bitcoin value without reasonable alternatives. I suspect *without* alternatives blockchain space is more like diesel and gasoline in terms of supply and demand - you absolutely need it and if you can't get it you just close up shop instead and that section of the economy goes out of business. (FWIW why I think calling @johndillon a troll is over-simplifying things)
2577	17469259	2013-05-06T07:28:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17469259	jgarzik	petertodd	@petertodd The *goal* is a free market.  It is a long road to get there, and we don't ultimately get there until the block subsidy is tiny, years from now.    This change is one small constrained step, not the end goal itself.
2577	17470202	2013-05-06T08:00:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470202	killerstorm	cjdelisle	@cjdelisle Can you please explain how "deterministic satoshi tracking" colored coin implementations are not affected? I think I know what you're talking about, but I don't see how they are not affected.    If possible, please reply in "colored bitcoin tech discussion" on forum.    (I know that coloring schemes which will work fine despite this change are possible, but I don't see how it applies to "deterministic satoshi tracking".)
2577	17470372	2013-05-06T08:06:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470372	awishformore	gavinandresen	My business would not rely on micro-transactions at all, and the fact that no one is getting why I'm *still* going to move away from Bitcoin if this goes through is what should worry everyone    @gavinandresen @gmaxwell All you are discussing and discussing is whether this change is sound technically. Since you already admitted in your own words that this change is supposed to be temporary and should be replaced by a solid system later on goes to show that no, it's not. It's a dirty, quick fix for a problem that goes way beyond a simple quick change - and it should never be approached in such a half-arsed way.    However, this is not even relevant. What is relevant here is that you both suffer from something I like to call "developer-blindness". You think you know better than anyone else, and maybe you do, but that does not matter. The majority of users does *not* want this change. In fact, the majority of users are opposed to this change citing various real arguments. Arguments you might not agree with. Arguments you might consider less relevant than your own. Arguments nonetheless.    It is not and should never be your place to impose a change on the community that is clearly not wanted. Again, if miners would have such huge trouble with these transactions, they would end up implementing their own filter. What you are doing is to massacre the protocol for everyone. Even worse, by dictating such an unpopular change, you kill the credibility of Bitcoin as a whole.    I, personally, will never trust the potential, aspiration and philosophy behind Bitcoin again if this gets implemented, and I'm not the only one. I don't need to tell you how vulnerable Bitcoin still is. Right now, Bitcoin is growing tremendously, not because the software behind it is mature in every possible way, but because of the idea behind it. You are risking to put this idea in danger.
2577	17470372	2013-05-06T08:06:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470372	awishformore	gmaxwell	My business would not rely on micro-transactions at all, and the fact that no one is getting why I'm *still* going to move away from Bitcoin if this goes through is what should worry everyone    @gavinandresen @gmaxwell All you are discussing and discussing is whether this change is sound technically. Since you already admitted in your own words that this change is supposed to be temporary and should be replaced by a solid system later on goes to show that no, it's not. It's a dirty, quick fix for a problem that goes way beyond a simple quick change - and it should never be approached in such a half-arsed way.    However, this is not even relevant. What is relevant here is that you both suffer from something I like to call "developer-blindness". You think you know better than anyone else, and maybe you do, but that does not matter. The majority of users does *not* want this change. In fact, the majority of users are opposed to this change citing various real arguments. Arguments you might not agree with. Arguments you might consider less relevant than your own. Arguments nonetheless.    It is not and should never be your place to impose a change on the community that is clearly not wanted. Again, if miners would have such huge trouble with these transactions, they would end up implementing their own filter. What you are doing is to massacre the protocol for everyone. Even worse, by dictating such an unpopular change, you kill the credibility of Bitcoin as a whole.    I, personally, will never trust the potential, aspiration and philosophy behind Bitcoin again if this gets implemented, and I'm not the only one. I don't need to tell you how vulnerable Bitcoin still is. Right now, Bitcoin is growing tremendously, not because the software behind it is mature in every possible way, but because of the idea behind it. You are risking to put this idea in danger.
2577	17471229	2013-05-06T08:31:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17471229	petertodd	jgarzik	@jgarzik Client side fee stuff is just a few months of work. It's really not a big deal technically, the issue is the politics of accepting that fees and limits are a necessity. What will probably be very interesting is watching all the deliberate attacks that will come from people like @johndillon and evorhees (hi luke!) to show anything but fixed limits are insane.
2577	17471229	2013-05-06T08:31:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17471229	petertodd	johndillon	@jgarzik Client side fee stuff is just a few months of work. It's really not a big deal technically, the issue is the politics of accepting that fees and limits are a necessity. What will probably be very interesting is watching all the deliberate attacks that will come from people like @johndillon and evorhees (hi luke!) to show anything but fixed limits are insane.
2577	17482645	2013-05-06T13:54:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17482645	ripper234	MeniRosenfeld,	@MeniRosenfeld, colored coins is a side project, it's not something that Bitcoin should necessarily support. Still, trading colored coins is still possible, it just possibly gets a bit more expensive.    As much as my opinion counts for anything here, I think we should consider Bitcoin and Bitcoin dust/fees first, and as it is know that Bitcoin was never meant to handle microtransactions ... go forward with this pull request & Gavin's roadmap.
2577	17495465	2013-05-06T17:29:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17495465	cjdelisle	killerstorm	@killerstorm As a proud non-member of the forum (because of threads like this) I won't be able to post about it. I did just subscribe to the bitcoinX google group (the subscribe email bitcoinx+subscribe@googlegroups.com should be prominently displayed) and I will write my understanding there.
2577	17570133	2013-05-07T20:57:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570133	petertodd	SergioDemianLerner	@SergioDemianLerner Huh? You can spend transaction inputs regardless of how small they are with this patch, and we have every reason to make that possible, even easier, to try to reduce the UTXO set size.    The only time what you are suggesting might apply is if we were desperate enough to reduce the UTXO set size that we were willing to make old coins unspendable, and we're literally multiple orders of magnitude away from even considering that step. Not to mention you said "store coins forever"...    Don't confuse people.
2577	17570148	2013-05-07T20:58:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570148	gmaxwell	SergioDemianLerner	@SergioDemianLerner  This doesn't inhibit spending in any way. It inhibits the creation of new dust outputs paying. Spending them is important, in part, because it's important that they get swept up.  I'm not sure what you're talking about here, but it's not this pull.
2577	17650803	2013-05-09T05:58:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17650803	gmaxwell	satoshiroulette	@satoshiroulette I had no idea that you still created outputs smaller than this. Satoshidice does not (their smallest is right on the boundary).  Creating very tiny outputs independently of how many are created is harmful because it costs users more in fees to clean them up then they yield, so they never get cleaned up. Actual economic transactions are not intended to be effected by this, so I think your commentary about "I do not see this patch reducing spam" is confused. This change in behavior targets exactly the specific activities it is intended to target. The intended effect is to decrease the amount of outputs which are too worthless to redeem (negative-effective-value-payments) and the unredeemable data storage transactions.    Services which simply inefficiently generate large numbers of transactions (I assume this is what you mean by spam?) get to compete with fees and priority for space in the blockchain. This patch isn't intended to do anything with respect to that.
2577	17654676	2013-05-09T08:36:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17654676	satoshiroulette	gmaxwell	@gmaxwell we wont be creating them for much longer ;)    Previously we used to reforge our dust into a whole piece of bitcoin again by using raw transaction api and sending to a new address in the same wallet with no fees.    Thanks for the early warning, we shall get to work updating our game configs so we are ready for this change.
2577	17736410	2013-05-10T18:24:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17736410	gmaxwell	paraipan	@paraipan There are no more magic numbers.
2577	17737518	2013-05-10T18:44:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17737518	petertodd	paraipan	@paraipan We already have a "magic" number for minimum allowed txout value, and that magic number was 1 satoshi. This patch changes that magic number to 5430 satoshis; no new magic numbers are being added.    edit: as sipa and gmaxwell point out, this isn't strictly correct. I should have said "This patch changes the default setting of that magic number to 5430 satoshis, and additionally lets you easily change it with a configuration setting. (although, please don't unless you know what you're doing)"
2577	17738507	2013-05-10T19:01:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738507	gmaxwell	petertodd	@petertodd @cjdelisle     No, not even that. The patch replaces a hardcoded base fee value with a _configurable_ one, and makes the hardcoded dust value just be a fraction of the base fee value. So nothing is hardcoded except a fraction off a configured value...
2577	17738507	2013-05-10T19:01:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738507	gmaxwell	cjdelisle	@petertodd @cjdelisle     No, not even that. The patch replaces a hardcoded base fee value with a _configurable_ one, and makes the hardcoded dust value just be a fraction of the base fee value. So nothing is hardcoded except a fraction off a configured value...
2577	17738577	2013-05-10T19:03:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738577	sipa	paraipan	I On 10 May 2013 20:44, "Peter Todd" <notifications@github.com> wrote: > > @paraipan We already have a "magic" number for minimum allowed txout value, and that magic number was 1 satoshi. This patch changes that magic number to 5240 satoshis; no new magic numbers are being added.  That's not even true. It changes the minimum output side to whatever is at least 3 times the fee necessary according to the active policy to spend it. For a fee rule of 0.0001/kB, this results in 5240 satoshi. This 5240 itself is not a constant.  And even better, this patch makes the fee policy rule configurable. So no, this patch strictly reduces the magic numbers.
2577	17738953	2013-05-10T19:10:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738953	petertodd	gmaxwell	@gmaxwell @sipa Sorry, I should have taken the time to write a more detailed response than my quick approximation.
2577	17738953	2013-05-10T19:10:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738953	petertodd	sipa	@gmaxwell @sipa Sorry, I should have taken the time to write a more detailed response than my quick approximation.
2577	17744646	2013-05-10T21:06:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17744646	jspilman	caleb	> @caleb: It aims to prevent payments where spending that payment requires a fee of more than 1/3 of the payment itself.    > @sipa: It changes the minimum output side to whatever is at least 3 times the fee necessary according to the active policy to spend it.    Yes, and yes. Well sort of...       IsDust = 1000 * TxOutAmount / (3 * (TxOutBytes + 148)) < MinRelayFeePerKB    Easier on my eyes this way:       IsDust = TxOutAmount < 3 * MinRelayFeePerKB / 1000 * (TxOutBytes + 148)    Given nMinRelayFeePerKB of 10,000, that makes IsDust 4680 Satoshi, plus 30 Satoshi / byte for the ScriptPubKey.    Standard ScriptPubKey is 25 bytes, resulting in minimum output of 5430. But hey, a P2SH output would save you 2 bytes and lower the minimum by 60 Satoshi to 5370! However, if I understand correctly, minimum actual fees paid still assumes transactions are at least 1KB:       Line 600: int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;    So in practice, the minimum standard outputs will actually cost ~2x their value in fees in order to spend them. Is there any plan to update Line 600 as follows for 0.8.2:       nMinFee = (int64)nBytes * nBaseFee / 1000;
2577	17744646	2013-05-10T21:06:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17744646	jspilman	sipa	> @caleb: It aims to prevent payments where spending that payment requires a fee of more than 1/3 of the payment itself.    > @sipa: It changes the minimum output side to whatever is at least 3 times the fee necessary according to the active policy to spend it.    Yes, and yes. Well sort of...       IsDust = 1000 * TxOutAmount / (3 * (TxOutBytes + 148)) < MinRelayFeePerKB    Easier on my eyes this way:       IsDust = TxOutAmount < 3 * MinRelayFeePerKB / 1000 * (TxOutBytes + 148)    Given nMinRelayFeePerKB of 10,000, that makes IsDust 4680 Satoshi, plus 30 Satoshi / byte for the ScriptPubKey.    Standard ScriptPubKey is 25 bytes, resulting in minimum output of 5430. But hey, a P2SH output would save you 2 bytes and lower the minimum by 60 Satoshi to 5370! However, if I understand correctly, minimum actual fees paid still assumes transactions are at least 1KB:       Line 600: int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;    So in practice, the minimum standard outputs will actually cost ~2x their value in fees in order to spend them. Is there any plan to update Line 600 as follows for 0.8.2:       nMinFee = (int64)nBytes * nBaseFee / 1000;
2577	17748821	2013-05-10T22:58:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17748821	petertodd	jspilman	@jspilman By "cost to spend" we mean the marginal bytes required to spend a transaction input * the fee/kb when added to an existing transaction, like one combining a whole bunch of dust outputs together, not the cost to simply create a transaction re-spending the dust output with a single input and single output.
2577	18113905	2013-05-19T07:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18113905	idiotsabound	gavinandresen	Let me lay it down for @gavinandresen , @gmaxwell , @petertodd , and all you others who thought you could hammer this out on github over the holidays, close it, and then not get any objections, you know, like this:    https://bitcointalk.org/index.php?topic=196138.0;all    Some bazillion (that's not a real number) of posts later, you get the gist:  People are looking at what you've done, and they are saying: WTF?    It doesn't matter what nice formulas you've come up with.    It doesn't matter if you are going to justify it by saying that this avoids the problem of bitcoin getting DDOS'd.    It doesn't matter if you felt it needed to be done for some other purpose, like "to increase potential investors' confidence" or something, ahead of #Bitcoin2013.     None of this matters.    What does matter is that this is not truly open and that there are literally millions of users (estimate, but not a bad guess) you are closing out of the system who have, and always will have, a lower figure in their bitcoin wallet that hovers somewhere between .01 BTC and .003 BTC, because they have started with a small amount from faucet and used bitcoin primarily for transaction (not for storage) and / or because they access and use sites that pay in uBTC for site visits or microtasks.    I don't think you did any kind of epic polling of the millions of users or, for that matter, the many thousands of businesses / website owners that have sprung up who pay based on bitcoin microtasks or views.  I would submit that most of us who are on bitcoin today have obtained their first portion of a bitcoin not because they mined it straightaway, but because they obtained it through a BunnyRun or a website visit that paid out in uBTC for visits, views, or microtasks performed.  Speaking on the latter, whether or not you consider them a significant part of the bitcoin economy is irrelevant.  You have disregarded their voices by acting in an "open" forum to act in this way without a more open consultation.    Github is not a proper forum to discuss this kind of matter.  It is the place where changes are ultimately made that affect the code, yes.  But when such changes are so large as to concern the manner in which an entire user base can utilize an increasingly trusted method of transaction, and the development under discussion is a surprise or even completely unknown to many who are about to be affected by it, in no small part because of the behavior of the developers, this is entirely unacceptable.  The behavior I am seeing here in the development of this pull request, is reminiscent of the behavior not of the open community of coders and innovators, but rather reminds me of the ITU (International Telecommunication Union), the closed-door body for which only governments have a vote.    No, this is not an issue of numbers, or formulae, or how to best prevent bitcoin from being DDOS'd.     The issue here, at its core, is was this a legitimate way to address the microtransaction issue?    Was Github truly used to solicit views and ideas of Bitcoin users?    The answer is no.  A small group of developers huddled together and pushed this through.  This change should be pulled back until the larger community's views can be taken into account and votes on the matter can be taken outside of Github.  There are a number of online deliberative tools that are available to perform such tasks.  Solicitation of ideas from a larger community, prioritization of appropriate solutions, and larger community selection through ranking or vote on which solutions are the best to address a problem facing the community, this must always come before decisions are made.    This is not like other things.  You are not developing a fix for Cryptocat or talking solutions for libpurple problems in Pidgin / OTR.      There is a larger community, whose voice must be heard, outside of Github.    This is Bitcoin.
2577	18113905	2013-05-19T07:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18113905	idiotsabound	gmaxwell	Let me lay it down for @gavinandresen , @gmaxwell , @petertodd , and all you others who thought you could hammer this out on github over the holidays, close it, and then not get any objections, you know, like this:    https://bitcointalk.org/index.php?topic=196138.0;all    Some bazillion (that's not a real number) of posts later, you get the gist:  People are looking at what you've done, and they are saying: WTF?    It doesn't matter what nice formulas you've come up with.    It doesn't matter if you are going to justify it by saying that this avoids the problem of bitcoin getting DDOS'd.    It doesn't matter if you felt it needed to be done for some other purpose, like "to increase potential investors' confidence" or something, ahead of #Bitcoin2013.     None of this matters.    What does matter is that this is not truly open and that there are literally millions of users (estimate, but not a bad guess) you are closing out of the system who have, and always will have, a lower figure in their bitcoin wallet that hovers somewhere between .01 BTC and .003 BTC, because they have started with a small amount from faucet and used bitcoin primarily for transaction (not for storage) and / or because they access and use sites that pay in uBTC for site visits or microtasks.    I don't think you did any kind of epic polling of the millions of users or, for that matter, the many thousands of businesses / website owners that have sprung up who pay based on bitcoin microtasks or views.  I would submit that most of us who are on bitcoin today have obtained their first portion of a bitcoin not because they mined it straightaway, but because they obtained it through a BunnyRun or a website visit that paid out in uBTC for visits, views, or microtasks performed.  Speaking on the latter, whether or not you consider them a significant part of the bitcoin economy is irrelevant.  You have disregarded their voices by acting in an "open" forum to act in this way without a more open consultation.    Github is not a proper forum to discuss this kind of matter.  It is the place where changes are ultimately made that affect the code, yes.  But when such changes are so large as to concern the manner in which an entire user base can utilize an increasingly trusted method of transaction, and the development under discussion is a surprise or even completely unknown to many who are about to be affected by it, in no small part because of the behavior of the developers, this is entirely unacceptable.  The behavior I am seeing here in the development of this pull request, is reminiscent of the behavior not of the open community of coders and innovators, but rather reminds me of the ITU (International Telecommunication Union), the closed-door body for which only governments have a vote.    No, this is not an issue of numbers, or formulae, or how to best prevent bitcoin from being DDOS'd.     The issue here, at its core, is was this a legitimate way to address the microtransaction issue?    Was Github truly used to solicit views and ideas of Bitcoin users?    The answer is no.  A small group of developers huddled together and pushed this through.  This change should be pulled back until the larger community's views can be taken into account and votes on the matter can be taken outside of Github.  There are a number of online deliberative tools that are available to perform such tasks.  Solicitation of ideas from a larger community, prioritization of appropriate solutions, and larger community selection through ranking or vote on which solutions are the best to address a problem facing the community, this must always come before decisions are made.    This is not like other things.  You are not developing a fix for Cryptocat or talking solutions for libpurple problems in Pidgin / OTR.      There is a larger community, whose voice must be heard, outside of Github.    This is Bitcoin.
2577	18113905	2013-05-19T07:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18113905	idiotsabound	petertodd	Let me lay it down for @gavinandresen , @gmaxwell , @petertodd , and all you others who thought you could hammer this out on github over the holidays, close it, and then not get any objections, you know, like this:    https://bitcointalk.org/index.php?topic=196138.0;all    Some bazillion (that's not a real number) of posts later, you get the gist:  People are looking at what you've done, and they are saying: WTF?    It doesn't matter what nice formulas you've come up with.    It doesn't matter if you are going to justify it by saying that this avoids the problem of bitcoin getting DDOS'd.    It doesn't matter if you felt it needed to be done for some other purpose, like "to increase potential investors' confidence" or something, ahead of #Bitcoin2013.     None of this matters.    What does matter is that this is not truly open and that there are literally millions of users (estimate, but not a bad guess) you are closing out of the system who have, and always will have, a lower figure in their bitcoin wallet that hovers somewhere between .01 BTC and .003 BTC, because they have started with a small amount from faucet and used bitcoin primarily for transaction (not for storage) and / or because they access and use sites that pay in uBTC for site visits or microtasks.    I don't think you did any kind of epic polling of the millions of users or, for that matter, the many thousands of businesses / website owners that have sprung up who pay based on bitcoin microtasks or views.  I would submit that most of us who are on bitcoin today have obtained their first portion of a bitcoin not because they mined it straightaway, but because they obtained it through a BunnyRun or a website visit that paid out in uBTC for visits, views, or microtasks performed.  Speaking on the latter, whether or not you consider them a significant part of the bitcoin economy is irrelevant.  You have disregarded their voices by acting in an "open" forum to act in this way without a more open consultation.    Github is not a proper forum to discuss this kind of matter.  It is the place where changes are ultimately made that affect the code, yes.  But when such changes are so large as to concern the manner in which an entire user base can utilize an increasingly trusted method of transaction, and the development under discussion is a surprise or even completely unknown to many who are about to be affected by it, in no small part because of the behavior of the developers, this is entirely unacceptable.  The behavior I am seeing here in the development of this pull request, is reminiscent of the behavior not of the open community of coders and innovators, but rather reminds me of the ITU (International Telecommunication Union), the closed-door body for which only governments have a vote.    No, this is not an issue of numbers, or formulae, or how to best prevent bitcoin from being DDOS'd.     The issue here, at its core, is was this a legitimate way to address the microtransaction issue?    Was Github truly used to solicit views and ideas of Bitcoin users?    The answer is no.  A small group of developers huddled together and pushed this through.  This change should be pulled back until the larger community's views can be taken into account and votes on the matter can be taken outside of Github.  There are a number of online deliberative tools that are available to perform such tasks.  Solicitation of ideas from a larger community, prioritization of appropriate solutions, and larger community selection through ranking or vote on which solutions are the best to address a problem facing the community, this must always come before decisions are made.    This is not like other things.  You are not developing a fix for Cryptocat or talking solutions for libpurple problems in Pidgin / OTR.      There is a larger community, whose voice must be heard, outside of Github.    This is Bitcoin.
2577	18120113	2013-05-19T16:19:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120113	paraipan	sipa,	@sipa, in Bitcoin policy change=network rules change if I'm not mistaken. I would support said "mechanism to detect what fees get confirmed" though.
2577	18120173	2013-05-19T16:23:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120173	gmaxwell	paraipan	@paraipan  You are mistaken.  I thought you understood it after this discussion with you: https://bitcointalk.org/index.php?topic=197414.msg2054475#msg2054475
2577	18120432	2013-05-19T16:36:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120432	paraipan	gmaxwell	@gmaxwell I understood your position then and stopped pushing the patch based on your analysis. I didn't agree with your point though as I see personal preference as more important than maintaining a predictable fee level in the protocol.
2577	18122002	2013-05-19T18:10:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122002	idiotsabound	sipa	@sipa you just don't get it.  Re-read my original comment above.  Read it again if necessary for effect.    This is reminiscent of the efforts I had (with many others) to get the International Telecommunication Union to come out into the open. (They didn't.) It was a effort of over a year resulting eventually in #OpWCIT and later which spawned  #OpWTF - a smaller and more focused effort of awareness about the problems associated with closed-minded organizations and groups.    I have the feeling that just such an effort is needed to shove this development group out in the open and ensure that not only this issue is dealt with but all future issues involving bitcoin developers are not pushed in this nontransparent and backchannel way that does not take into account the voices of the internet.    This is Bitcoin.
2577	18123275	2013-05-19T19:29:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123275	jgarzik	idiotsabound	@idiotsabound The public website containing public source code changes cannot be considered a back channel.  It is already very much out in the open.  All discussions occur in public, and are publicly logged and google-able.    I agree that a continual effort is needed to educate users like yourself on how open source engineering works, and how open source engineering differs from other engineering efforts.
2577	18125249	2013-05-19T21:41:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18125249	n074v41l4bl34u	jgarzik	@jgarzik First, thank you for your hard work on Bitcoin protocol.  Secondly, you write "All discussions occur in public" then I ask you where was this change discussed?  To me and most other people supporting Bitcoin, the problem with this change is not only about the code itself but mostly about unilateralism with which the decision was made.  I am, as a Bitcoin user and as a Bitcoin trader, wholeheartedly against such quick-fix changes. It seems Bitcoin is becoming just a replacement for Western Union type of transfers instead of being a full-fledged currency of the Internet with some unique features - where are contracts?  The decision making process regarding Bitcoin development is becoming a problem. It is too centralized and not democratic/market driven enough. Fees should be determined by market so developers should focus on features relating to fee management rather than hardcoding another magic number.  As Bitcoin's value is ultimately set by the market, I am personally taking some money out of Bitcoin until some long-term market solution for fees management is proposed.
2577	25945095	2013-10-09T03:53:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25945095	gavinandresen	idiotsabound	@idiotsabound: this pull request is an inappropriate place to discuss the NSA/etc. I'm deleting your comment, please stay on-topic, there are plenty of places to speculate about bitcoin in general (e.g. bitcointalk forums, reddit /r/bitcoin, bitcoin.stackexchange.com, #bitcoin channel in IRC).
2576	17112950	2013-04-27T08:59:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17112950	laanwj	TheBlueMatt	Indeed, I saw @TheBlueMatt s proposal on figuring out the fee from the mempool, and thought it was pretty neat.    But yeah, going to remove the recommendation for now. It's much too large and we can't manually change it every release based on the current trading price.
2570	17070316	2013-04-26T11:59:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17070316	sipa	gavinandresen	@gavinandresen Why do you assume it's caused by the wallet code? (not saying you're wrong, just wondering whether some information is missing here)
2569	17084866	2013-04-26T16:27:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17084866	jgarzik	gavinandresen	agreed, @gavinandresen
2569	17167162	2013-04-29T13:42:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17167162	sipa	Diapolo	@Diapolo This is really just about how many sockets we watch simultaneously. If not enough sockets are available for what the user requests, opening them will just fail.
2568	17071510	2013-04-26T12:21:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17071510	sipa	gavinandresen	@gavinandresen Have you tested whether this compiles on OSX?
2568	17083117	2013-04-26T15:56:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17083117	gavinandresen	sipa	@sipa : yes, compiles fine, unit tests run, bitcoind -testnet runs on OSX
2568	17083541	2013-04-26T16:03:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17083541	gmaxwell	gavinandresen	@gavinandresen  can you try running     (for i in {1..220000} ; do export bh=`./bitcoind getblockhash $i` ; for tx in `./bitcoind getblock $bh | grep '     "' | cut -d'"' -f2` ; do  ./bitcoind getrawtransaction $tx > /dev/null  ; done   ; done)    On a OSX mainnet node with this patch and txindex=1 when you get a chance?  It should causes about 500 FDs to be used.
2568	17169878	2013-04-29T14:29:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17169878	gavinandresen	gmaxwell	ACK.  @gmaxwell : successfully ran (a modified version of) your stress test on OSX with this patch and -txindex=1.
2557	17043425	2013-04-25T22:04:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17043425	sipa	Diapolo	@Diapolo That would be bad and unexpected news. I don't see how that could cause/worsen that, but we never know of course. Can you confirm it's related to this?
2557	17060345	2013-04-26T08:06:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17060345	Diapolo	gmaxwell	I sent @gmaxwell a copy of my coinstate folder, with which I had the problem. Currently I'm 73 weeks behind with a client that doesn't have this patch active. After it synced without error I'll restart with this patch applied and a bootstrap (which contains 50% of the current blocks on the net) + re-sync.
2557	17090146	2013-04-26T18:05:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17090146	sipa	Diapolo	@Diapolo I'd rather find the reason for this crash, as this patch should not have any difference at all during IBD.
2557	17107487	2013-04-27T00:54:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17107487	sipa	Diapolo	@Diapolo Can you retry with #2580 compiled in?
2557	17113710	2013-04-27T10:06:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17113710	Diapolo	sipa	@sipa Sure, I'll take a look later...
2557	17114093	2013-04-27T10:40:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17114093	Diapolo	sipa	@sipa     Seems the error was the same as I posted in the chat yesterday:  2013-04-27 10:15:34 LevelDB read failure: IO error: C:\Users\Diapolo\AppData\Roaming\Bitcoin\chainstate\000446.sst: Could not create random access file.  2013-04-27 10:15:34 LevelDB error encountered: IO error: C:\Users\Diapolo\AppData\Roaming\Bitcoin\chainstate\000446.sst: Could not create random access file.  2013-04-27 10:15:34 *** Systemfehler: Database I/O error
2557	17120541	2013-04-27T18:08:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17120541	sipa	Diapolo	@Diapolo Feel like retrying with the commits in https://github.com/sipa/bitcoin/commits/win32ldberr ?
2555	16914138	2013-04-24T08:32:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16914138	sipa	Timwi	I think it's a bit unfair to attack someone who simply made a wrong assumption about the system.    @Timwi It is true that Bitcoin is designed to be cheap (and to some extent, even free). But there is a fee built into the system. It's used both as an incentive for miners to prioritize your transactions (so you can pay to have your transaction confirmed quickly), and as a way to combat attacks on the system. Smallish transactions or those that use too little and too young coins as input, will be regarded as spam by the network and dropped/ignored. The client software uses the same rules as most network nodes, so can detect this, and will refuse to create such a transaction without a fee.    It's not true that in general you can't send 0.005 BTC, but such a small transaction will likely always need a fee to get relayed. It's also not true that in general a fee is required, only for certain transactions. When required, the fee is always calculated per kilobyte of data, and has nothing to do with the amounts in it, as the load on the system for a single transaction is independent of whether it's small or large (in amount). This means that transactions below a certain value will be uneconomical to do.    It's fair to say that fees are an unsolved issue right now. They cause some confusing, and are also outdated. There are definitely suggests to deal with this in a better way, like have the software suggesting how much is reasonable for the transaction you're created, to have it confirmed relatively quickly. Allowing users to bypass this 'required' fee is also frequently requested, but is seen as too dangerous as the client right now does not deal well with transactions that do not confirm. This is considered a bug, though.
2553	16848871	2013-04-23T09:48:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16848871	Diapolo	BitcoinPullTester	@BitcoinPullTester Error seems unrelated to my changes!    <pre>  Exception in thread "main" java.lang.reflect.InvocationTargetException   at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)   at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)   at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)   at java.lang.reflect.Method.invoke(Method.java:616)   at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58)  Caused by: java.lang.OutOfMemoryError: Java heap space   at com.google.bitcoin.core.FullBlockTestGenerator.getBlocksToTest(FullBlockTestGenerator.java:1335)   at com.google.bitcoin.core.BitcoindComparisonTool.<init>(BitcoindComparisonTool.java:77)   at com.google.bitcoin.core.BitcoindComparisonTool.main(BitcoindComparisonTool.java:50)   ... 5 more  </pre>
2553	16858649	2013-04-23T13:45:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16858649	TheBlueMatt	BitcoinPullTester	Oops, false-positive, sorry, retesting...  also, tagging @BitcoinPullTester  doesnt email me, please tag @TheBlueMatt instead
2553	16858649	2013-04-23T13:45:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16858649	TheBlueMatt	TheBlueMatt	Oops, false-positive, sorry, retesting...  also, tagging @BitcoinPullTester  doesnt email me, please tag @TheBlueMatt instead
2553	17273840	2013-05-01T09:05:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17273840	Diapolo	sipa	@sipa Fixed your nit ;) and you were absolutely right.
2553	17569863	2013-05-07T20:53:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569863	Diapolo	gavinandresen	@gavinandresen I will update after your patch was merged or you just merge this an rebase your pull :). That way the other changes in this pull can get in now.    As #2625 seems a little controversial, what is your oppinion on this now Gavin?
2552	16845218	2013-04-23T08:19:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16845218	Diapolo	laanwj	@laanwj Seems that one is caused by @BitcoinPullTester ^^, I hope Matt can take a look.
2552	16845218	2013-04-23T08:19:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16845218	Diapolo	BitcoinPullTester	@laanwj Seems that one is caused by @BitcoinPullTester ^^, I hope Matt can take a look.
2552	17008544	2013-04-25T13:59:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17008544	Diapolo	TheBlueMatt	@TheBlueMatt It's still not building it seems?
2550	16884018	2013-04-23T20:25:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16884018	sipa	laanwj	@laanwj Anything useful?
2550	17415522	2013-05-03T20:12:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17415522	laanwj	jonasschnelli	I found no error messages or strange things in the debug.log he sent.    @jonasschnelli  where do you get/see that assertion?
2550	17428736	2013-05-04T06:33:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17428736	jonasschnelli	laanwj	@laanwj crashlogs line 19.
2543	17570484	2013-05-07T21:03:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570484	Diapolo	jonasschnelli	@jonasschnelli Can you take a look, if this is graphics related perhaps?
2543	17602840	2013-05-08T12:42:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17602840	jonasschnelli	nextgenthemes	@nextgenthemes i do not have XFCE experience. How do i add bitcoin to the app menu? How did you install bitcoin (assume apt-get)?
2543	17656720	2013-05-09T09:40:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17656720	nextgenthemes	jonasschnelli	@jonasschnelli as I said right at the first line of this issue.    > Running Xubuntu 12.10 and current stable bitcoin from ppa:bincoin/bitcoin    so yes with apt-get install. It adds itself to the menu so I did nothing manually.    This has to be something about the .xpm file and how they are created. I have no idea about this format but I try to look into this when I have time. Pretty busy atm. Maybe someone else is faster or has already knowledge about this format.
2543	17656884	2013-05-09T09:46:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17656884	jonasschnelli	nextgenthemes	@nextgenthemes sorry for overlooking your first line. Okay. I try to reproduce it with Xubuntu 12.10.
2541	17452062	2013-05-05T13:54:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17452062	laanwj	sipa	ACK (after squashing into one commit)    Edit: and I agree with @sipa on the use of references, please just rename the variables.
2541	18693005	2013-05-30T16:46:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693005	jgarzik	laanwj	ACK, once @laanwj and @sipa comments applied
2541	18693005	2013-05-30T16:46:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693005	jgarzik	sipa	ACK, once @laanwj and @sipa comments applied
2539	18977137	2013-06-05T13:59:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18977137	gavinandresen	mikehearn	@mikehearn : I fixed the bug you found (handling multiple pay-to addresses).    Next steps are:    + Do the bitcoin-qt-handles-payment-request-mime-type thing on Linux  + Finish writing a test plan  + Bribe some people to test on windows/linux/osx  + Assuming successful testing, merge into master  + Turn the gist document into BIPs
2539	21710762	2013-07-29T10:16:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21710762	Diapolo	mikehearn	@mikehearn Our Qt code is Qt5.1 compatible, should be no problem to upgrade to Qt5 code-wise, but "only" Gitian wise IMHO.
2539	21769398	2013-07-30T04:43:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21769398	luke-jr	gavinandresen	@gavinandresen Well, in this case, as long as the browser and wallet are using the OS's cert store (even with the Microsoft-downloaded root certs), we can be sure that if the user went to https://foo.com, he also has the cert for it. I agree that software (including browsers, sorry @mikehearn) has no business overriding/ignoring the OS's cert store and using their own.
2539	21769398	2013-07-30T04:43:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21769398	luke-jr	mikehearn)	@gavinandresen Well, in this case, as long as the browser and wallet are using the OS's cert store (even with the Microsoft-downloaded root certs), we can be sure that if the user went to https://foo.com, he also has the cert for it. I agree that software (including browsers, sorry @mikehearn) has no business overriding/ignoring the OS's cert store and using their own.
2539	21841939	2013-07-31T06:03:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21841939	gavinandresen	laanwj	Merged with @laanwj 's changes so it compiles with Qt 5.    I think this is ready to be pulled; gitian changes to compile releases with Qt5 can happen after merge.
2539	21991062	2013-08-02T07:44:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21991062	Diapolo	luke-jr	@luke-jr   - Make Bitcoin-Qt visible when a URI is opened (it just remains hidden or in the background at present; this bug is in master already)    That is a bug, which seems to be introduced by the GUI refactoring and was not spotted. I'm looking into this.
2539	22296575	2013-08-08T01:25:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22296575	gavinandresen	Diapolo	@Diapolo : I'd guess there is an operator+(char*, QString) that produces a QString, and the QString serializer adds the double-quotes.    Couple more bug reports from a tester:    1) PaymentACK dialog box should say "Payment Acknowledged", since "Received" might imply that the payment is confirmed already.  2) Payment requests asking the user to create dust TxOuts should be rejected right away with a message to the user; otherwise, transaction creation fails.    If transaction creation DOES fail for some reason (e.g. insufficient wallet balance), there's a question of whether or not the payment request should be automatically cleared.  I'm not sure of the right answer-- maybe the user just received some bitcoins and just has to wait a few minutes for them to confirm, so leaving the payment request is the right thing to do. And it is easy enough to push the clear button on the Send tab...
2539	22684536	2013-08-15T04:26:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22684536	gavinandresen	sipa	@sipa : "... makes the entire second step useless, as it becomes entirely unreliable" ?    In the normal course of events, the user clicks on link, their wallet fetches a payment request from the merchant's server, and then a minute or two later (after user inspect transaction details and unlocks wallet) the Payment message is sent to the merchant's server.    So it will only be unreliable if the merchant's server or user's internet connection goes down in that minute or two.    I REALLY don't think that will happen often enough to justify the added complexity of marking transactions as "don't broadcast/rebroadcast", modifying the GUI to show the user that they're "pending submission", locking the inputs, giving the user some way of double-spending a "pending submission" transaction or automatically double-spending after some period of time with retries has passed, etc etc etc.    If I'm wrong, then I'll write that code. But I'd really like to move on to higher priorities.
2539	22686102	2013-08-15T05:35:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22686102	luke-jr	sipa's	Probably easier to implement @sipa's suggestion after we're able to replace transactions generally.
2539	22690858	2013-08-15T08:26:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22690858	sipa	gavinandresen	@gavinandresen What if as a gambling site, your server goes down for a minute. If you have high traffic, you'll have many users making bets for which they were still able to fetch the payment request. You have no way of paying them without knowing a refund address, and you have no way to contact them. Of course you can wait for them to contact you, but if that is necessary for every minute of downtime, you'll need very high reliability of your service (DoS attacks, anyone?), or poor customer support.    It is true that the locked funds issue right now makes this harder, as we cannot deal well with non-confirming transactions. I consider that a separate issue, but it makes an optimal implementation difficult now. But if you can't do that, please at least save the payment request, and retry getting PaymentACKs for some time, just like we retry broadcasting normal transactions.    And put a suggestion in the BIP that this is recommended. Even if you can't implement it yourself now - in some environments it may be significantly easier to do.
2539	22736592	2013-08-15T22:50:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22736592	gavinandresen	sipa	@sipa : You're right, that use case works much better if it is "merchant broadcasts first".    I'll look into rebroadcasting. I suspect it will be easier to just lock the inputs for the estimated worst-case Payment-->PaymentACK round trip, and broadcast the transaction when the PaymentACK is received. If Payment->PaymentACK succeeds, then broadcast the transaction; if it fails, then just unlock the inputs and tell the user "error communicating".    I've been putting off writing code to save the PaymentRequest/Payment/PaymentACK messages in the wallet, because adding more stuff to wallet.dat when we're likely to rewrite it soon for HD support might make the upgrade harder, and because I'm not planning on implementing any GUI for looking at old PaymentRequests. But I should probably save the data anyway.
2539	23066915	2013-08-22T03:55:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23066915	gavinandresen	sipa	Rebased (needed to fix conflict in bitcoin-qt.pro).    And made a functionality tweak: PaymentRequests are now written to wallet.dat, using the (formerly unused and always empty) vector&lt;pair&lt;string,string&gt;&gt; vOrderForm field in CWalletTx.  Each PaymentRequest satisfied by the transaction has key="PaymentRequest" value=...serialized PaymentRequest protocol buffer message.    The transaction details information also now shows the Merchant (or merchants) associated with a transaction.    @sipa: since one transaction can satisfy several PaymentRequest messages, locking the inputs until we get a PaymentACK doesn't work; e.g. if a transaction satisfies requests from merchants A and B, we'd send Payment messages to both A and B.  If one of them fails, then we can't cancel the transaction-- the other merchant will go ahead and broadcast it for us.    Rebroadcasting the Payment message if the merchant's site goes down would be nice to have.  "patches welcome"
2538	18302781	2013-05-22T19:41:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18302781	Diapolo	laanwj	@laanwj I didn't try with Qt4 for some time now, let me see if my Qt4 build is still working...  It IS working and I can confirm this patch or your is not needed for Qt4.    Do you intend to fix the includes I changed and replace with that #undef then in our Qt files?
2533	19912904	2013-06-24T15:06:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912904	fanquake	btcusr	@btcusr Can you follow up with any further info?    Are you still experiencing the crashing running 0.8.2-beta?     As @sipa mentioned, OS and Hardware info is helpful, as well as a debug log if possible.
2533	19912904	2013-06-24T15:06:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912904	fanquake	sipa	@btcusr Can you follow up with any further info?    Are you still experiencing the crashing running 0.8.2-beta?     As @sipa mentioned, OS and Hardware info is helpful, as well as a debug log if possible.
2533	22810071	2013-08-17T11:28:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810071	Diapolo	swills	@swills Any helpful information in debug.log?
2531	16362206	2013-04-14T23:59:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16362206	gavinandresen	adrelanos	"meh"    Builders fetch dependencies independently, and we only re-fetch when dependencies change.    And any differences are picked up by the gitian build process; see, for example:    https://github.com/bitcoin/gitian.sigs/blob/master/0.8.1/gavinandresen/bitcoin-build.assert#L564  ... for the sha256 sum of the miniupnpc.tar.gz used to build release 0.8.1    More gitian builders is the right defense against men in the middle compromising Bitcoin. @adrelanos : can we count on you to help gitian build future releases?
2530	17065706	2013-04-26T10:21:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17065706	Diapolo	laanwj	@laanwj ping :)
2526	16844023	2013-04-23T07:47:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16844023	Diapolo	laanwj	@laanwj ping :) I want to do another translations update.
2526	16844313	2013-04-23T07:55:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16844313	laanwj	diapolo	@diapolo I delayed on this as I thought the 0.8.2 release was going to be really soon thus to prevent any last-minute message changes. There is no reason for this commit to be urgent. But I guess that one translation message doesn't matter so much. ACK.
2525	16356216	2013-04-14T18:08:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16356216	laanwj	diapolo,	@diapolo, yes, and that it was not the diskspace warning but a leveldb error (likely in the network thread while accepting a block). It's still strange that it sometimes worked (like for askFee) and sometimes did not, but this should solve it for good.
2524	16431249	2013-04-16T07:57:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16431249	jonasschnelli	laanwj	@laanwj strange. The messages is written by a standard QT command:  QSplashScreen::showMessage(QString::fromStdString(message), Qt::AlignBottom|Qt::AlignHCenter, QColor(55,55,55));    Let me install the toolchain/src on my ubuntu vm and try to debug it..
2524	16492797	2013-04-17T08:20:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16492797	jonasschnelli	laanwj	@laanwj found the problem source. Ubuntu has no Arial and has also different font rendering. I did update the code so now, the font-size will be increased with factor 0.75 when the calculated text width goes over 160px (which would mean it then would go over the "B" in the splashscreen).  Works for mac and linux (ubuntu).  How about windows?    The missing status text at the bottom was my fault. Did not update the textcolor. Now fixed.
2519	16355903	2013-04-14T17:55:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16355903	Diapolo	BitcoinPullTester	@BitcoinPullTester ``fatal: can't open patch 'src/../contrib/test-patches/temp-revert-1.patch': No such file or directory`` is unrelated to this pull :).    @jonasschnelli Can you squash the commits or somehow remove that merge-commit?
2519	16355903	2013-04-14T17:55:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16355903	Diapolo	jonasschnelli	@BitcoinPullTester ``fatal: can't open patch 'src/../contrib/test-patches/temp-revert-1.patch': No such file or directory`` is unrelated to this pull :).    @jonasschnelli Can you squash the commits or somehow remove that merge-commit?
2519	16358091	2013-04-14T19:51:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16358091	jonasschnelli	Diapolo	@Diapolo squashed.
2518	16330086	2013-04-13T09:15:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16330086	laanwj	jonasschnelli	To be clear: this is about the *taskbar* icon, not @jonasschnelli 's new *application* icon.     It looks a bit strange bit the white instead of transparency. The old one looked simpler. I noticed this on Ubuntu default theme too.    ![mainnet](https://f.cloud.github.com/assets/126646/376269/886565fc-a418-11e2-8dc7-ad5a5bf751ca.png)  ![testnew_new2](https://f.cloud.github.com/assets/126646/376271/d0954644-a418-11e2-8f5e-7978a0220c12.png)    Versus before:    ![testnet_old](https://f.cloud.github.com/assets/126646/376283/7650fb4a-a41a-11e2-9e27-dd6c7ffdc4e6.png)  ![mainnet_old](https://f.cloud.github.com/assets/126646/376284/7ac449e8-a41a-11e2-8020-1d3b6b7d774a.png)    I slightly prefer the previous one, too. Except for the color it fitted perfectly with the "Ubuntu Mono Dark" theme style. Maybe we need a theme-dependent icons somehow.
2518	16332339	2013-04-13T12:36:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16332339	laanwj	jonasschnelli	@jonasschnelli it uses the same icon as the taskbar on windows at the moment (toolbar.png / toolbar_testnet.png). But if you make an linux specific icon, that logic could be changed.
2516	16441320	2013-04-16T12:21:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16441320	petertodd	sipa	@sipa @mikehearn replied on bitcoin-dev mailing list
2516	16441320	2013-04-16T12:21:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16441320	petertodd	mikehearn	@sipa @mikehearn replied on bitcoin-dev mailing list
2516	16451620	2013-04-16T15:32:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16451620	petertodd	mikehearn	@mikehearn We already know we have to test DoS behavior, and fix that behavior, so we already know the code will need to be changed a few times. Under those circumstances I see no reason to put that code into the client everyone is going to be running, potentially disrupting their testing activities for no good reason. (enabling long-disabled code is essentially the same thing as adding new code)    Setting up a dozen nodes for testing isn't a big deal - I'd be happy to run one or two with the tx-replacement patch if you want.    @qubez FWIW what you wrote is probably the fourth or fifth re-invention of those ideas - a good sign! Also, how did you do that graphic BTW? We could use more graphics on the wiki explaining transactions, among other things, just saying... :)
2516	16451620	2013-04-16T15:32:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16451620	petertodd	qubez	@mikehearn We already know we have to test DoS behavior, and fix that behavior, so we already know the code will need to be changed a few times. Under those circumstances I see no reason to put that code into the client everyone is going to be running, potentially disrupting their testing activities for no good reason. (enabling long-disabled code is essentially the same thing as adding new code)    Setting up a dozen nodes for testing isn't a big deal - I'd be happy to run one or two with the tx-replacement patch if you want.    @qubez FWIW what you wrote is probably the fourth or fifth re-invention of those ideas - a good sign! Also, how did you do that graphic BTW? We could use more graphics on the wiki explaining transactions, among other things, just saying... :)
2516	16465058	2013-04-16T19:04:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16465058	petertodd	sipa	@sipa tax replacement can only replace outputs and scriptsigs, not inputs. You already have to pick in advance your max fee and gradually increase it by replacing outputs.
2516	16465177	2013-04-16T19:06:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16465177	sipa	petertodd	@petertodd I know. I don't see how that conflicts with my proposal? You have to pick a maximum change in advance indeed, but you're not required to actually use more and more of it at every step. You can, if you want to compensate for the decreased priority, though.
2516	16562376	2013-04-18T07:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16562376	petertodd	mikehearn	With the recent -development mailing list [post](http://sourceforge.net/mailarchive/message.php?msg_id=30738521) pointing out how the "[rapidly-adjusting micropayments](https://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_party)" use on the Contracts page in the wiki doesn't even work due to a bug that would be obvious to anyone who actually wrote an implementation I'm also going to amend my NAK to include the requirement for a toy-implementation. At least tx-replacement example should be implemented, but ideally a few use-cases.    @mikehearn you could have easily done that on a single machine with a modified bitcoind and determined if a fix is or is not possible, and what changes (if any) need to be done with tx replacement without wasting everyones' time.    Of course, I too am guilty of advocating stuff without writing any code...
2515	16287738	2013-04-12T11:19:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287738	laanwj	diapolo	@diapolo both fixed
2506	16359564	2013-04-14T21:07:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16359564	jonasschnelli	gavinandresen	@gavinandresen can you check (if time), if the description for mac release still are valid:    https://github.com/bitcoin/bitcoin/blob/master/doc/release-process.txt#L76-83
2506	16367805	2013-04-15T05:22:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16367805	jonasschnelli	gavinandresen	@gavinandresen the version information can be placed there. But QT only support the @SHORT_VERSION@ which then would be 0.8 (for 0.8.2) which is somehow not funny.  But the Info.plist has currently no affect because of a (still open) QT Bug (https://bugreports.qt-project.org/browse/QTBUG-21267). That's why the current binary release also have strange infos.  But i have a fix (on the way).
2506	16367805	2013-04-15T05:22:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16367805	jonasschnelli	SHORT_VERSION	@gavinandresen the version information can be placed there. But QT only support the @SHORT_VERSION@ which then would be 0.8 (for 0.8.2) which is somehow not funny.  But the Info.plist has currently no affect because of a (still open) QT Bug (https://bugreports.qt-project.org/browse/QTBUG-21267). That's why the current binary release also have strange infos.  But i have a fix (on the way).
2502	16176345	2013-04-10T14:10:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16176345	sipa	jonasschnelli	@jonasschnelli No, that's not possible.
2501	16572545	2013-04-18T12:04:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16572545	Diapolo	laanwj	@laanwj ping :)
2499	16168762	2013-04-10T11:32:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16168762	Diapolo	samholmes	This should be fixed by #2386, but I'm not sure if it's in 0.8.1, but 0.8.2 will include that patch.  People in #1522 also reported that the patch is fixing that problem.    @samholmes Which version are you using?
2499	16358912	2013-04-14T20:34:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16358912	Diapolo	jonasschnelli	@jonasschnelli Was that problem still persistent after #2386, as some reported that fixed the issues, or are we having a second issue?
2499	16367713	2013-04-15T05:17:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16367713	jonasschnelli	samholmes	@samholmes can you build from the sources?
2497	16167134	2013-04-10T10:49:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167134	Diapolo	laanwj	ACK    Edit: @laanwj Is there any chance we could include this new testnet icon into bitcoin-qt.exe? I know the mainnet icon is embedded, but to have both would be really nice.    Edit 2: Ah this is happening in bitcoin-qt.rc. So @jonasschnelli Could you integrate a bitcoin_testnet.ico into this pull :)?
2497	16167134	2013-04-10T10:49:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167134	Diapolo	jonasschnelli	ACK    Edit: @laanwj Is there any chance we could include this new testnet icon into bitcoin-qt.exe? I know the mainnet icon is embedded, but to have both would be really nice.    Edit 2: Ah this is happening in bitcoin-qt.rc. So @jonasschnelli Could you integrate a bitcoin_testnet.ico into this pull :)?
2497	16167517	2013-04-10T10:59:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167517	laanwj	diapolo	ACK  @diapolo would make sense, I suppose, as the other icon could be selected for shortcuts that start testnet.  I don't think it is necessary for this pull though. It's extra functionality that wasn't there before.
2497	16168072	2013-04-10T11:14:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16168072	Diapolo	laanwj	@laanwj Yeah sure, could be a separate pull, so this one can be merged.
2497	16174151	2013-04-10T13:32:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16174151	Diapolo	jonasschnelli	@jonasschnelli I would add that icon to bitcoin-qt.exe via another pull :).
2497	16219003	2013-04-11T06:38:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16219003	Diapolo	jonasschnelli	@jonasschnelli Can you create a branch with a bitcoin_testnet.ico update? But don't yet open a pull-request here, because I'm trying to create a pull for YOUR branch, which you can then merge and create a pull for us here which includes my change :).
2497	16219747	2013-04-11T07:06:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16219747	jonasschnelli	Diapolo	@Diapolo will do that asap
2497	16220341	2013-04-11T07:27:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16220341	Diapolo	jonasschnelli	@jonasschnelli I want to thank you, I really like he new icon set, good job and keep it up!
2497	16233659	2013-04-11T13:18:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16233659	jonasschnelli	Diapolo	@Diapolo branch with new tn ico file: https://github.com/jonasschnelli/bitcoin/tree/new_testnet_ico_file
2496	16131041	2013-04-09T18:29:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16131041	jonasschnelli	laanwj	I did a fix on that.  But it's in a PullRequest for the Qt5 Mac compatibility in laanwj branch:  https://github.com/laanwj/bitcoin/pull/1    I can also create a PullRequest with the addressbookpage.cpp fixes for the master branch.  @laanwj how far are we from merging Qt5 support to the master branch?
2496	16134404	2013-04-09T19:24:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16134404	Diapolo	jonasschnelli	@jonasschnelli That commit should fix it. The build was broken because of wrong button names that I introduced ;-). Thanks for taking care of some Mac stuff.
2496	16136671	2013-04-09T20:05:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16136671	L2G	jonasschnelli	@jonasschnelli I have Qt4.8 on Lion and the build with your change seems to work fine for me.
2495	16117919	2013-04-09T15:02:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16117919	Diapolo	laanwj	@laanwj ACK, I thought the same. We don't want to update that screen with every new year or relase.    @jonasschnelli Looks very nice, I like it.
2495	16117919	2013-04-09T15:02:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16117919	Diapolo	jonasschnelli	@laanwj ACK, I thought the same. We don't want to update that screen with every new year or relase.    @jonasschnelli Looks very nice, I like it.
2495	16133375	2013-04-09T19:06:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16133375	jonasschnelli	laanwj	@laanwj @Diapolo as a coder, i would also recommend the option of placing the text on the splashscreen by code. As a designer i would avoid this. Why: text placed by Qt will look much more sharp and somehow crispy. Text placed as image on a template image by imagemagick (or other command-line capable gfx tool) will look much better and can use non-standard fonts.    It might sounds crazy for you (coders), but in my eyes, the splash screen is the first contact with the enduser and when it come to the point where the Bitcoin-Qt client gets "mainstream", first contact is very important. That's why i would go with the pre-generated png in the build process with imagemagick.    It's more work for us, but more quality for the enduser. And i kind of like this.
2495	16133375	2013-04-09T19:06:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16133375	jonasschnelli	Diapolo	@laanwj @Diapolo as a coder, i would also recommend the option of placing the text on the splashscreen by code. As a designer i would avoid this. Why: text placed by Qt will look much more sharp and somehow crispy. Text placed as image on a template image by imagemagick (or other command-line capable gfx tool) will look much better and can use non-standard fonts.    It might sounds crazy for you (coders), but in my eyes, the splash screen is the first contact with the enduser and when it come to the point where the Bitcoin-Qt client gets "mainstream", first contact is very important. That's why i would go with the pre-generated png in the build process with imagemagick.    It's more work for us, but more quality for the enduser. And i kind of like this.
2495	16136174	2013-04-09T19:56:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16136174	jonasschnelli	laanwj	@laanwj yes. Include into bitcoin-qt's build process.  Font: i would just place a ttf or otf file (open source fonts) into the qt/src folder. The font must not be installed on the build-system.
2495	16136591	2013-04-09T20:04:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16136591	laanwj	diapolo	@diapolo would calling imagemagick in the build process work on windows? I suppose it'd be more difficult...
2495	16157860	2013-04-10T06:39:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16157860	jonasschnelli	laanwj	@laanwj i thought the same. Imagemagick is probably a overkill. Has also huge dependencies (Ghostscript, freetype). And yes: windows user would hate me. ;)    I think I try to create a solution with qt only (runtime).  Let me try to play with http://qt-project.org/doc/qt-5.0/qtgui/qrawfont.html#alphaMapForGlyph.    Will push something soon.
2495	16167175	2013-04-10T10:50:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167175	Diapolo	laanwj	@laanwj I've never heard of ``imagemagick``, but as we want to do it the Qt way I won't even google it ^^.
2495	16176166	2013-04-10T14:07:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16176166	Diapolo	jonasschnelli	@jonasschnelli You could use QApplication::applicationName() for the name, but be careful, as it would be ``Bitcoin-Qt-testnet`` for testnet currently.
2495	16178387	2013-04-10T14:42:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16178387	Diapolo	jonasschnelli	@jonasschnelli We currently use [testnet] appended to ``Bitcoin-Qt`` to indicate testnet usage (see bitcoingui.cpp -> ``setWindowTitle(windowTitle() + QString(" ") + tr("[testnet]"));``), which I would like to keep (with equality and translation stuff in my mind).
2495	16179139	2013-04-10T14:52:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16179139	jonasschnelli	laanwj	@laanwj the testnet splash png is 45.37kb. When you compare it against the blockchain size... but yes: it will increase the bin size. I still recommend to have it (the new testnet splash).
2495	16219190	2013-04-11T06:46:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16219190	Diapolo	jonasschnelli	@jonasschnelli Can you please squash all commits into one after we have the final ACK for this :).
2495	16234077	2013-04-11T13:27:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16234077	fanquake	jonasschnelli	@jonasschnelli I can test for you. Have one comp running 10.7.5
2495	16234177	2013-04-11T13:28:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16234177	jonasschnelli	fanquake	@fanquake do you can build from the source (take master and pull from jonasschnelli/bitcoin new_splash_screen)?
2495	16240777	2013-04-11T15:12:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16240777	Diapolo	BitcoinPullTester	You can rebase to current master and update this pull, perhaps @BitcoinPullTester was doing it's work with a not up-to-date version :).
2495	16250737	2013-04-11T17:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16250737	Diapolo	jonasschnelli	Same here, I really love it, great looking! Don't think my many comments lower that feeling :) @jonasschnelli .
2495	16282083	2013-04-12T08:45:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16282083	jonasschnelli	Diapolo	@Diapolo my contributions are for the blockchain and not for my ego. :) so keep on finding details to make it better!
2495	16331842	2013-04-13T11:56:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16331842	jonasschnelli	sipa	@sipa: will finish the splash screen soon (1-2 days) then i try to squash. I once pulled/updates from master, ... i think i can't squash over the merge of the master? Can i?
2495	16332361	2013-04-13T12:37:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16332361	laanwj	jonasschnelli	@jonasschnelli it is possible, but more difficult, and not simply with git rebase -i (I think. That's why you should ideally not merge in these cases, but always rebase); easiest may be to start from a new branch with master, then git cherry-pick the non-merge commits.
2495	16349945	2013-04-14T11:54:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16349945	jonasschnelli	sipa	@sipa: i did a --force push but the "old commits" where still in the commit list. The branch on my github repo was completely different to what i had localy (and pushed with --force). That's why i then restarted the whole thing. Hope you excuse. :)
2494	16116766	2013-04-09T14:45:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16116766	fanquake	jonasschnelli	@jonasschnelli Looks like you accidentally pushed your splash screen changes into this pull?
2494	16117764	2013-04-09T14:59:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16117764	Diapolo	fanquake	@fanquake Indeed :)
2493	16322747	2013-04-12T23:27:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16322747	Diapolo	luke-jr	@luke-jr I know that my dependecy lib pull needs updates to reflect this.
2493	16322763	2013-04-12T23:27:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16322763	Diapolo	robbak	@robbak Windows needed the chrono lib because we use Boost 1.50.
2492	16218864	2013-04-11T06:31:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16218864	Diapolo	laanwj	Updated to reflect @laanwj suggestions.
2489	16099304	2013-04-09T08:00:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16099304	Diapolo	gavinandresen	That message was removed by @gavinandresen :).  See https://github.com/bitcoin/bitcoin/commit/a0a437c86ae404152de883ac6a1463e6641eda1c#L5L109
2488	16097580	2013-04-09T07:09:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16097580	Diapolo	sipa	@sipa Could be related to #2333, as I said, a former pull changed the message in ``Step 5: verify wallet database integrity``, whereas everyone seems to ignore step 7 ;).
2487	16169521	2013-04-10T11:52:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16169521	Diapolo	laanwj	@laanwj Can we get this in, perhaps I can do another Transifex pull before 0.8.2 release :).
2480	17516621	2013-05-07T00:30:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17516621	sipa	ryepdx	@ryepdx Great, but the "Complete registration" button after entering my address doesn't really seem to do anything...
2479	16020079	2013-04-07T18:11:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020079	brandondahler	gmaxwell	@gmaxwell @mikehearn : Is there currently a proper way to refuse a getblocks request?  Right now there is a mechanism that will allow callers of the PushMessage functions to see if they failed to be sent or not, having them send a different response based on that is trivial.      It sounds like closing all connections will be a good idea for nodes that have met their overall max bandwidth.  I will look in to getting that added in the next weeks.
2479	16020079	2013-04-07T18:11:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020079	brandondahler	mikehearn	@gmaxwell @mikehearn : Is there currently a proper way to refuse a getblocks request?  Right now there is a mechanism that will allow callers of the PushMessage functions to see if they failed to be sent or not, having them send a different response based on that is trivial.      It sounds like closing all connections will be a good idea for nodes that have met their overall max bandwidth.  I will look in to getting that added in the next weeks.
2479	16032987	2013-04-08T05:19:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16032987	jgarzik	gmaxwell.	Bandwidth limits are a common P2P knob, well within reasonable user expectations.  It has been said for years, in the Linux kernel, that  it was awful to put bandwidth limits inside each application, when instead smarter, higher level layers such as cgroups and tc/qdisc would be far more appropriate.    In theory, that is true.  In practice, it is easier to deploy immediately in a user application.  In-app limits do not require modifying kernel or firewall configuration -- which the user may not have rights to access anyway.    Therefore, I respectfully disagree with @gmaxwell.  Closing inbound peers is a very poor solution, and it is disappointing to see that as a recommendation -- when the alternative is to enable users with a limit commonly found in other P2P applications.    RE @mikehearn:  *"Even just serving it very slowly won't work well (the peers won't switch to a faster node)."*   @sipa is already starting to address this, by scoring peers in #2461.  As such, serving slowly is preferred to serving nothing.  That enables 50% of the solution -- with the other 50% of the solution being better seeking/scoring of peers for getblocks requests.  That sets up a natural ecosystem:  peers do what they can, and other peers seek the best behaving peers.  At times when our popular peers are over-loaded, the less able peers automatically step in and provide some level of service.
2479	16032987	2013-04-08T05:19:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16032987	jgarzik	mikehearn	Bandwidth limits are a common P2P knob, well within reasonable user expectations.  It has been said for years, in the Linux kernel, that  it was awful to put bandwidth limits inside each application, when instead smarter, higher level layers such as cgroups and tc/qdisc would be far more appropriate.    In theory, that is true.  In practice, it is easier to deploy immediately in a user application.  In-app limits do not require modifying kernel or firewall configuration -- which the user may not have rights to access anyway.    Therefore, I respectfully disagree with @gmaxwell.  Closing inbound peers is a very poor solution, and it is disappointing to see that as a recommendation -- when the alternative is to enable users with a limit commonly found in other P2P applications.    RE @mikehearn:  *"Even just serving it very slowly won't work well (the peers won't switch to a faster node)."*   @sipa is already starting to address this, by scoring peers in #2461.  As such, serving slowly is preferred to serving nothing.  That enables 50% of the solution -- with the other 50% of the solution being better seeking/scoring of peers for getblocks requests.  That sets up a natural ecosystem:  peers do what they can, and other peers seek the best behaving peers.  At times when our popular peers are over-loaded, the less able peers automatically step in and provide some level of service.
2479	16032987	2013-04-08T05:19:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16032987	jgarzik	sipa	Bandwidth limits are a common P2P knob, well within reasonable user expectations.  It has been said for years, in the Linux kernel, that  it was awful to put bandwidth limits inside each application, when instead smarter, higher level layers such as cgroups and tc/qdisc would be far more appropriate.    In theory, that is true.  In practice, it is easier to deploy immediately in a user application.  In-app limits do not require modifying kernel or firewall configuration -- which the user may not have rights to access anyway.    Therefore, I respectfully disagree with @gmaxwell.  Closing inbound peers is a very poor solution, and it is disappointing to see that as a recommendation -- when the alternative is to enable users with a limit commonly found in other P2P applications.    RE @mikehearn:  *"Even just serving it very slowly won't work well (the peers won't switch to a faster node)."*   @sipa is already starting to address this, by scoring peers in #2461.  As such, serving slowly is preferred to serving nothing.  That enables 50% of the solution -- with the other 50% of the solution being better seeking/scoring of peers for getblocks requests.  That sets up a natural ecosystem:  peers do what they can, and other peers seek the best behaving peers.  At times when our popular peers are over-loaded, the less able peers automatically step in and provide some level of service.
2479	16033183	2013-04-08T05:28:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033183	jgarzik	mikehearn	To be clear, NAK on anything that drops getblocks requests, or similar.  As @mikehearn said, "you can't just not respond to getblocks requests, that will break things"
2479	16034175	2013-04-08T06:11:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034175	gmaxwell	jgarzik	@jgarzik Right now "bitcoin took two (or more) days to synchronize" is _the_ most common complaint I hear about the software.  This is a direct result of fetching from low bandwidth peers. I do not think that we can afford to make that worse before we make it better.
2479	16034613	2013-04-08T06:28:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034613	gmaxwell	jgarzik	@jgarzik I fully support people controlling their own systems. **[Edit: I've toned this down a bit. I know Jeff doesn't intend to insult me, and if I've some how left him thinking that I want to restrict choice then I've been doing a very poor job expressing myself, and thats my fault not his]**    Right now users can stop the high bandwidth usage by simply disabling listening. _At the moment_, because of the way nodes select and use peers, this is preferable to having listening enabled but artificially rate limited" don't advertise a capacity you don't have because your peers aren't smart enough to figure out that you don't and cope with it". It's not ideal but it will prevent the IBD badness. A limiter that also turned off node-network when set under some value would likewise by completely fine.    Since you used Tor as an example it would be useful to consider all the work the Tor project has put into load-balancing:  Tor nodes report their configured/observed bandwidth to Tor directory authorities, the bandwidth authorities (https://gitweb.torproject.org/torflow.git/blob/HEAD:/NetworkScanners/BwAuthority/README.spec.txt) periodically test nodes to make sure their bandwidth claims are honest, and then only the top 7/8th's of nodes get the flagged ("fast") for primary use. There used to be a minimum bandwidth threshold under which nodes were ignored because they degraded the network, but that become superfluous to the 7/8ths test. Load balancing is then linear on bandwidth. But linear load-balancing doesn't actually achieve the best utilization, so they've experimented with things like using a PID controller (https://lists.torproject.org/pipermail/tor-relays/2011-December/001039.html) to weigh the bandwidth amounts to achieve better utilization, but it seems they've given up on this particular mechanism I mention it as color for how complicated a problem this is, especially when you need to be attack resistant.     Fortunately, our application is not quite as sybil vulnerable as Tor... but unfortunately we don't get to have central authorities telling people validated bandwidths. It's also interesting to note that Tor has seen some parallel arguments to the ones made against my recommendation to turn off listening that its demotivating to people who want to contribute see the last comment (By cyberpunks/paul) at https://trac.torproject.org/projects/tor/ticket/1854
2479	16039010	2013-04-08T08:46:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039010	sipa	jgarzik	@jgarzik @gmaxwell I think you're talking about different things.    Nobody is saying that bandwidth control in general is a bad idea. It's a common expectation from P2P software, and a very reasonable one.    However, with the current software, effectively the first peer connected to is being used to fetch blocks from. I consider that a bug, and it needs fixing independently from this issue. Nonetheless, it means that even when (from what I can tell) more than enough fast upload capacity is available from the network, users face horribly slow block download because they randomly connect to a peer who probably doesn't even like the fact that he's serving the historic chain in the first place.    Right now, with the state of the current software, and without changing the protocol, I do agree that simply dropping the connection is the best throttling mechanism we have, as that will result in the peer (eventually, but see #2461) finding a new peer instead of waiting days before every block is uploaded through - who knows - perhaps a GPRS connection. Dropping the connection results in a better experience for both parties.
2479	16039010	2013-04-08T08:46:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039010	sipa	gmaxwell	@jgarzik @gmaxwell I think you're talking about different things.    Nobody is saying that bandwidth control in general is a bad idea. It's a common expectation from P2P software, and a very reasonable one.    However, with the current software, effectively the first peer connected to is being used to fetch blocks from. I consider that a bug, and it needs fixing independently from this issue. Nonetheless, it means that even when (from what I can tell) more than enough fast upload capacity is available from the network, users face horribly slow block download because they randomly connect to a peer who probably doesn't even like the fact that he's serving the historic chain in the first place.    Right now, with the state of the current software, and without changing the protocol, I do agree that simply dropping the connection is the best throttling mechanism we have, as that will result in the peer (eventually, but see #2461) finding a new peer instead of waiting days before every block is uploaded through - who knows - perhaps a GPRS connection. Dropping the connection results in a better experience for both parties.
2477	16013094	2013-04-07T10:58:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013094	Diapolo	jonasschnelli	I think the bitcoin_logo_doxygen.png looks a little blurry compared to the former version. I'm not yet sure if I like the new testnet color, I will wait for pull-tester to build and then try it out :).    @jonasschnelli Very nice work, I have no passion to be a graphics-artist and love that work you show use here.
2477	16038680	2013-04-08T08:38:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16038680	jonasschnelli	Diapolo	@Diapolo: right, the doxygen icon was blurry. It's fixed and pushed now.
2477	16098261	2013-04-09T07:31:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16098261	Diapolo	jonasschnelli	@jonasschnelli I'm now using your current icons with my local build and I think you should also update the toolbar.png and toolbar_testnet.png versions. Specially on testnet the combination of the new color with the old one in the Windows system-tray looks really weird/ugly :). Also I still think the old color was a little more friedly, the new one doesn't fit into the color scheme (at least on Windows).    ![testnet](https://f.cloud.github.com/assets/1419649/355649/8c469364-a0e7-11e2-860c-4e8d6660c2c8.png)
2477	16098771	2013-04-09T07:45:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16098771	jonasschnelli	Diapolo	@Diapolo your right. I did not take care of the testnet toolbar. I will no update the color more according to the old testnet color (was more warm) and also take care of the testnet toolbar.
2477	16167568	2013-04-10T11:00:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167568	Diapolo	jonasschnelli	@jonasschnelli Can you take a look? I think the new icon is missing a little transparency or fading on the outer ring and seems smaller (Or is this intended?) for me on Windows.    (left old / right new)  ![Icon](https://f.cloud.github.com/assets/1419649/361693/b8e5db5a-a1cd-11e2-85c1-8610c917b47e.png)
2477	16169866	2013-04-10T12:00:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16169866	jonasschnelli	Diapolo	@Diapolo let me startup my Windows WM...
2469	16097483	2013-04-09T07:06:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16097483	Diapolo	laanwj	@laanwj Can this also make it into 0.8.2?
2465	15962841	2013-04-05T15:33:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15962841	Diapolo	petertodd	@petertodd That was, what this pull is for afaik :).
2461	15940635	2013-04-05T06:19:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15940635	Diapolo	sipa	@sipa Does this fix the non-working IBD after importing blocks from disk (but not up to the height the network currently has - so after disk we need to switch to network)?    Edit: I'm creating a build with that patch and will see ^^.    Edit 2: Very nice, it immediately switches to network sync, when import was finished, GREAT!
2461	15946557	2013-04-05T09:34:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15946557	sipa	Diapolo	@Diapolo Indeed, that's what it should do :)
2461	15994137	2013-04-06T10:38:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15994137	Diapolo	sipa	@sipa What about an information, what the current sync node is? Perhaps in getinfo or getpeerinfo (isSyncNode or something) RPC?
2461	16039376	2013-04-08T08:55:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039376	sipa	jgarzik	@jgarzik To comment on a remark you made in another pullreq: this patch effectively only uses the scoring mechanism when the current sync node goes away, even though it may not be the "node in practice being synced from" anymore. When IBD is complete, and a node (different from the designated sync node) announces a new block, we will fetch it from him. This patch does not switch the sync node to that peer then, though that could be improved in further revisions (see #2034). All this does is make sure there is always at least one node we've asked about new blocks.
2457	15987135	2013-04-06T00:04:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15987135	Diapolo	jonasschnelli	@jonasschnelli Can you give some more details in which file the compilation fails and what the exact errors are? I can only talk about the Windows build, which should compile just fine.
2457	15993712	2013-04-06T10:00:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15993712	jonasschnelli	Diapolo	@Diapolo i try to analyse it more clear and maybe i'm capable to offer you a pull request with some fixes.
2457	15993805	2013-04-06T10:09:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15993805	Diapolo	laanwj	Sounds good :).  @laanwj Linux doesn't suffer any compilation problems?
2457	16002559	2013-04-06T19:36:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16002559	jonasschnelli	Diapolo	And some screens from mac client with qt5.    ![Bildschirmfoto 2013-04-06 um 21 34 03](https://f.cloud.github.com/assets/178464/347750/137fd528-9ef1-11e2-980d-8fa15a1dc713.png)  ![Bildschirmfoto 2013-04-06 um 21 34 14](https://f.cloud.github.com/assets/178464/347751/1e65d992-9ef1-11e2-9b0e-e5f74fa1fb9d.png)    @Diapolo btw: your 440BTC balance is nice. :) I have to recover somehow.
2457	16012908	2013-04-07T10:43:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16012908	Diapolo	jonasschnelli	@jonasschnelli I think you can base your pull request on this one, as I don't yet know how I could add your pull-request into my repository (was never the case before ^^). But it's rather GREAT, that you are able to help with Mac GUI wise!    I don't think we need a Qt5 branch, as long as Qt4 compatibility is still persistent.    Oh and that BTC is a testnet wallet ^^. I lost all my coins with a scam a few months ago, but I don't care :).
2457	16012944	2013-04-07T10:45:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16012944	Diapolo	BitcoinPullTester	At least @BitcoinPullTester is happy, does he also build Mac binaries? Perhaps not ^^.
2457	16013113	2013-04-07T11:00:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013113	Diapolo	laanwj	@laanwj I would also love to see that merged, perhaps @jonasschnelli can then create pulls based on current master :). How far is 0.8.2 away, as we need to fix the Mac stuff after merging it.    Edit: That Mac look is quite nice, but I really fell in love with Fusion ^^.
2457	16013113	2013-04-07T11:00:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013113	Diapolo	jonasschnelli	@laanwj I would also love to see that merged, perhaps @jonasschnelli can then create pulls based on current master :). How far is 0.8.2 away, as we need to fix the Mac stuff after merging it.    Edit: That Mac look is quite nice, but I really fell in love with Fusion ^^.
2457	16013734	2013-04-07T11:48:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013734	Diapolo	laanwj	@laanwj I think we need to think about translations for that intermediate releases, which are based on own branches then!? But at least this means we can safely pull Qt5 and iron it out for 0.9?
2457	16013773	2013-04-07T11:51:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013773	laanwj	diapolo	@diapolo I'd be for a "no message changes in intermediate releases" policy, to prevent that from being a problem.  And yes, if there are only superficial issues on Mac that can be resolved along the way, nothing wallet-eatingly bad, I think we can merge this (as soon as you've rebased).
2457	16015885	2013-04-07T14:22:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16015885	Diapolo	laanwj	@laanwj So I need to add your remote repo via ``git remote add laanwj git://github.com/laanwj/bitcoin`` and push my Qt5 branch to your master via ``git push origin laanwj/master``?
2457	16017514	2013-04-07T15:58:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017514	Diapolo	laanwj	@laanwj How do I create a pull-request via the git command-line? Normally I push to my repo and create a pull-req for Bitcoin master directly via Github website.    Edit: Nevermind I got it, I can chose you as base repo to open pull-requests via Github, so no need to fiddle around with the command-line :D. Currently your branch is up-to date, so nothing to do now.
2457	16038744	2013-04-08T08:40:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16038744	jonasschnelli	Diapolo	As soon as @Diapolo has open a push request on https://github.com/laanwj/bitcoin Qt5 branch and @laanwj has merged, i will create also a PR with my mac QT5 changes.
2457	16038744	2013-04-08T08:40:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16038744	jonasschnelli	laanwj	As soon as @Diapolo has open a push request on https://github.com/laanwj/bitcoin Qt5 branch and @laanwj has merged, i will create also a PR with my mac QT5 changes.
2457	16039288	2013-04-08T08:53:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039288	jonasschnelli	laanwj	@laanwj @BitcoinPullTester i think cross-platfrom builds are not possible. The apple frameworks are only available on Mac OSX.   I can try to set up a hackintosh on one of my debian-servers with VMWare and give you a jenkins node.  How does the pull tester works? Manually executed? Or does the tester search for new PR and auto-tests them?
2457	16039288	2013-04-08T08:53:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039288	jonasschnelli	BitcoinPullTester	@laanwj @BitcoinPullTester i think cross-platfrom builds are not possible. The apple frameworks are only available on Mac OSX.   I can try to set up a hackintosh on one of my debian-servers with VMWare and give you a jenkins node.  How does the pull tester works? Manually executed? Or does the tester search for new PR and auto-tests them?
2457	16040716	2013-04-08T09:29:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16040716	Diapolo	jonasschnelli	@jonasschnelli laanwj already has this Qt5 branch in his repo, which is also the master repo. So you can start supplying patches and even I'm allowed to merge them in his repo.
2457	16287335	2013-04-12T11:06:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287335	Diapolo	luke-jr	@luke-jr Can you check if this also happens with Qt 4.8.3 / 4.8.4? AFAIK I never had this problem with the Qt4 version of my local build.
2457	17570583	2013-05-07T21:05:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570583	Diapolo	laanwj	@laanwj AFAIK there were not that many changes to the Qt5 branch or did @jonasschnelli add further commits to your branch? I'm asking in the light how we intend to behave with Qt5 available now as 5.0.2, which seems rather mature.
2457	17570583	2013-05-07T21:05:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570583	Diapolo	jonasschnelli	@laanwj AFAIK there were not that many changes to the Qt5 branch or did @jonasschnelli add further commits to your branch? I'm asking in the light how we intend to behave with Qt5 available now as 5.0.2, which seems rather mature.
2452	15846519	2013-04-03T16:15:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15846519	laanwj	codeshark	Thanks for the fixes!    @codeshark Next time you should fix your own bugs :p
2447	15837761	2013-04-03T13:53:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15837761	Diapolo	laanwj	@laanwj IMHO the duplicate QAction and connect() stuff in ``::createActions()`` is causing some trouble currently and this needs cleanup badly. That is for sure a blocker for any new release and I'm not sure how to fix that. Can you perhaps have an in-depth look?
2444	15776123	2013-04-02T13:52:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776123	laanwj	schildbach	@schildbach having a svg version is nice; if its decided to use your icon, would you be willing to license it under MIT or public domain? (I vaguely remember the one in Bitcoin Wallet is LGPL)
2444	15776410	2013-04-02T13:57:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776410	schildbach	jonasschnelli	@jonasschnelli You can adjust everything by parameters in the SVG. See the viewBox comment. I deliberately chose "0 0 1 1" as the normal size, because that's easier for embedding.    @laanwj The icon is adapted from the original by BitBoy. See this thread for the original:  https://bitcointalk.org/?topic=1756.0  Currently my version is under the same license as the original, whatever that is (it did not get clear to me I must admit). Is that suitable?
2444	15776410	2013-04-02T13:57:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776410	schildbach	laanwj	@jonasschnelli You can adjust everything by parameters in the SVG. See the viewBox comment. I deliberately chose "0 0 1 1" as the normal size, because that's easier for embedding.    @laanwj The icon is adapted from the original by BitBoy. See this thread for the original:  https://bitcointalk.org/?topic=1756.0  Currently my version is under the same license as the original, whatever that is (it did not get clear to me I must admit). Is that suitable?
2444	15776709	2013-04-02T14:03:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776709	laanwj	schildbach	@schildbach Yes, from what I understood bitboy's license is public domain, so that's ok.
2444	15776962	2013-04-02T14:07:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776962	jonasschnelli	schildbach,	@schildbach, @laanwj:  i'll recommend a inverse shadow for the "B Letter" because then it looks more integrated and also more near to the current, transparent version.  I'll try now to create a SVG version (or optimize the current one). If LGPL, i recommend to create a new SVG under MIT or as public domain.    but: somehow it must also be translated into PNG and a ICNS (as well as a .iconset) where it then depends whenever the shadow looks nice or not.  The SVG can replace the committed PSD (makes it more open-source like and avoid Adobe stuff).    But: SVG has limitation in effects and will reduce the graphical/design potential.
2444	15776962	2013-04-02T14:07:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776962	jonasschnelli	laanwj	@schildbach, @laanwj:  i'll recommend a inverse shadow for the "B Letter" because then it looks more integrated and also more near to the current, transparent version.  I'll try now to create a SVG version (or optimize the current one). If LGPL, i recommend to create a new SVG under MIT or as public domain.    but: somehow it must also be translated into PNG and a ICNS (as well as a .iconset) where it then depends whenever the shadow looks nice or not.  The SVG can replace the committed PSD (makes it more open-source like and avoid Adobe stuff).    But: SVG has limitation in effects and will reduce the graphical/design potential.
2444	15777219	2013-04-02T14:11:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15777219	jonasschnelli	Diapolo	@Diapolo: for sure. But i think it's more efficient to first agree on a icon design (SVG, hires). If done, i'll then can create all necessary sub-icons (rendered icons).    That's why the commit only includes the mac icon (my starting point)
2444	15798784	2013-04-02T20:01:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15798784	jonasschnelli	schildbach,	@schildbach, @laanwj: i've just added a SVG file. The svg is a overhauled version of bitboys file. I did some vector combinations.  The shadow is very light. The "b" is no longer transparent.  http://dl.dropbox.com/u/7383846/bitcoin.svg    I've also added the white version of the mac osx icon.  License of SVG and rendered icon version: MIT (as source code)
2444	15798784	2013-04-02T20:01:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15798784	jonasschnelli	laanwj	@schildbach, @laanwj: i've just added a SVG file. The svg is a overhauled version of bitboys file. I did some vector combinations.  The shadow is very light. The "b" is no longer transparent.  http://dl.dropbox.com/u/7383846/bitcoin.svg    I've also added the white version of the mac osx icon.  License of SVG and rendered icon version: MIT (as source code)
2444	15807198	2013-04-02T22:36:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15807198	schildbach	jonasschnelli	@jonasschnelli Nice work!
2443	15774940	2013-04-02T13:31:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15774940	Diapolo	laanwj	@laanwj My fault, I fixed the renaming stuff :). What you observed was a thing I intended to avoid ^^.
2443	15862472	2013-04-03T20:32:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15862472	Diapolo	laanwj	@laanwj Updated to ``receiving address`` :).
2442	15779268	2013-04-02T14:44:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15779268	Diapolo	laanwj	@laanwj I reverted the qApp thing, should be fine now :).
2436	15765290	2013-04-02T09:29:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15765290	Diapolo	CodeShark	@CodeShark Can you take a look :)?
2435	16358932	2013-04-14T20:35:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16358932	Diapolo	gavinandresen	@gavinandresen Can you take a look here?
2435	17222945	2013-04-30T11:59:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17222945	jonasschnelli	watchedman	I'm trying to reproduce that problem without success. @watchedman which version do you use? 0.8.1? downloaded from where? built by yourself?  Does the error only happens when the blockchain is "mostly" downloaded? Or also when you just have some transaction stored?
2435	17226970	2013-04-30T13:29:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17226970	watchedman	jonasschnelli	@jonasschnelli Yes I'm on 0.8.1. I did not build it, I just downloaded the Mac OS X binary executable for that version.    Strangely enough, this error ended up going away by itself. After I posted here the other day, I tried opening Bitcoin-QT again, and that time it successfully rebuilt everything, and now everything is working fine.     I guess that's why it says "beta" at the end of the version number! This turned out to be just a hiccup for me, but I still hope that the Gist I posted can help someone figure out the root cause.    As far as blockchain and transactions, this error started happening after I already had a bunch of transactions and the full blockchain. Then I rebuilt the whole blockchain when prompted (like the OP) and then I finally got the "corrupt database" error after that finished, then I posted here, then I tried one last time and it started working again.    For others having this issue, it sounds crazy, but the solution might be to just keep trying until it works!
2434	15804702	2013-04-02T21:44:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15804702	iSnow	gavinandresen	@gavinandresen: they are more than symlinks, they are designed not to (easily) break if you move the target.    @qubez You cannot - from the GUI - create hard or symlinks in MacOS. As a Mac user, you create Aliases. Symlinking worked for me, but how many Maccies will go to the terminal and symlink the new position of the Bitcoins folder?    https://en.wikipedia.org/wiki/Alias_%28Mac_OS%29  https://developer.apple.com/library/mac/#documentation/Carbon/Reference/Alias_Manager/Reference/reference.html
2434	15804702	2013-04-02T21:44:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15804702	iSnow	qubez	@gavinandresen: they are more than symlinks, they are designed not to (easily) break if you move the target.    @qubez You cannot - from the GUI - create hard or symlinks in MacOS. As a Mac user, you create Aliases. Symlinking worked for me, but how many Maccies will go to the terminal and symlink the new position of the Bitcoins folder?    https://en.wikipedia.org/wiki/Alias_%28Mac_OS%29  https://developer.apple.com/library/mac/#documentation/Carbon/Reference/Alias_Manager/Reference/reference.html
2434	16163705	2013-04-10T09:23:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16163705	jonasschnelli	laanwj	@laanwj agree.  Close?
2432	15721622	2013-04-01T16:02:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15721622	laanwj	jgarzik	@jgarzik bitcoin-python includes your changes to jsonrpc, it is a bit thicker wrapper that pythonizes the API and adds some convenience features (converts error codes to specific exceptions, parses the bitcoin config file, etc)
2431	15779182	2013-04-02T14:42:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15779182	jgarzik	gavinandresen	Ping @gavinandresen
2430	15690613	2013-03-31T12:20:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15690613	Aeyoun	laanwj.	Of course, @laanwj. Ive done so now.
2430	15709814	2013-04-01T09:28:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15709814	Aeyoun	rebroad	@rebroad the patch continues to use Boost for creating the directory cross-platform. What is added is for Unix systems to set the permissions more restrictive after creating the patch. This should also upgrade permissions for existing users, where as doing a new `mkdir` will not.
2430	15718013	2013-04-01T14:42:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718013	laanwj	rebroad	@rebroad This is strange. We *are* setting the umask (in init.cpp).  Also my .bitcoin filter has the right permissions even without this patch.    @Aeyoun Are you sure it manages to create the directory with wrong permissions? Can you reproduce this?
2430	15718013	2013-04-01T14:42:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718013	laanwj	Aeyoun	@rebroad This is strange. We *are* setting the umask (in init.cpp).  Also my .bitcoin filter has the right permissions even without this patch.    @Aeyoun Are you sure it manages to create the directory with wrong permissions? Can you reproduce this?
2429	16357842	2013-04-14T19:38:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16357842	laanwj	rebroad	@rebroad: dealing out change addresses as "new" sounds like something that warrants a seperate issue
2428	15756007	2013-04-02T05:53:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15756007	Diapolo	laanwj	ACK    @laanwj If you get this in today, I'll create another translations update for this. Also, I remember I asked about a better general translations process in line with release cycles and whether we should drop languages, that are below a certain percentage translated, what do you think?
2428	15772630	2013-04-02T12:41:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15772630	laanwj	Diapolo	@Diapolo yes I agree. Is 'updating translations' something that could be made part of the release process in doc/release-process.txt? I suppose so?    With regard to dropping translations, I don't know. I suppose below a certain % you could just as well have no translation. Do you know how other projects using transfex handle this, and if so what threshold they use?
2426	15783708	2013-04-02T15:50:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15783708	Diapolo	gavinandresen	@gavinandresen ping
2426	15940533	2013-04-05T06:14:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15940533	Diapolo	Kjlawrence63	@Kjlawrence63 Very nice, so if it's working now, please close the ticket :).
2425	15668456	2013-03-30T02:42:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15668456	rebroad	stephantual	@stephantual Can this issue be closed now? if so, you should have access to do this AFAIK.
2423	15677633	2013-03-30T16:51:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677633	sipa	TheBlueMatt	@TheBlueMatt Can you drop the #2409 included code, or switch to its latest version? They should combine cleanly anyway.
2423	15716596	2013-04-01T14:09:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15716596	TheBlueMatt	rebroad	@rebroad meh, that just sounds like useless duplication...in that case, anyone will just send block invs so that you re-request blocks more often, sounds like a better way to let an attacker be more targeted.
2423	15797235	2013-04-02T19:33:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15797235	jgarzik	gmaxwell	@gmaxwell what are the previously discussed reasons?  I don't see them in this pull.
2422	15626106	2013-03-29T02:26:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15626106	sipa	jgarzik	@jgarzik Not that know of?
2422	15659718	2013-03-29T20:42:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15659718	Diapolo	jgarzik	Perhaps @jgarzik was talking about the help message?  ``Set database cache size in megabytes (default: 25)``
2422	15661920	2013-03-29T21:38:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15661920	sipa	Diapolo	@Diapolo @jgarzik -dbcache is still the intended database cache, but we shouldn't use that number both for the coincache/leveldb AND bdb.
2422	15661920	2013-03-29T21:38:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15661920	sipa	jgarzik	@Diapolo @jgarzik -dbcache is still the intended database cache, but we shouldn't use that number both for the coincache/leveldb AND bdb.
2421	19912040	2013-06-24T14:54:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912040	jgarzik	sipa.	Agree w/ @sipa.  This functionality is OK to have, but in a different form.    The first suggestion is the most powerful, and would seem to solve many common requests:  'getblock' simply returns a full block, including all transactions.    Closing, as consensus seems to point elsewhere.
2418	15677614	2013-03-30T16:50:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677614	sipa	BitcoinPullTester	@BitcoinPullTester @TheBlueMatt I believe this will require a different pulltest, as I presume it tries to modify the global BigNums.
2418	15677614	2013-03-30T16:50:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677614	sipa	TheBlueMatt	@BitcoinPullTester @TheBlueMatt I believe this will require a different pulltest, as I presume it tries to modify the global BigNums.
2418	16285742	2013-04-12T10:19:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16285742	sipa	TheBlueMatt	@TheBlueMatt I've added a patch to your patch in this pullreq. If you update pulltester to use the tests in contrib, this *should* apply cleanly.
2416	15783617	2013-04-02T15:49:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15783617	Diapolo	sipa	@sipa Can you have a look at that seems LevelDB related.
2416	24553230	2013-09-16T23:27:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24553230	theuni	dvdkhlng	@dvdkhlng I was under the assumption that stdatomic wasn't present in your toolchain and you took the debian patch, sounds like that's not the case. Either way, I think skiplist_test would be a good next step, if you haven't tried that already.
2416	24637669	2013-09-18T02:50:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24637669	dvdkhlng	theuni	@theuni: looks like you are right, it's a atomic operations problem.  cstdatomic is either broken with the Debian Mipsel Squeeze toolchain or the leveldb code does uses it in a broken way.    Implementing MemoryBarrier as       __asm__ volatile ("" : : : "memory");    makes bitcoin work for me.  The proper implementation for those newer multi-core MIPSes (Loongson 3A, Octeon etc.) should be :      __asm__ volatile ("sync" : : : "memory");    This version is curently running here, though on a single-core system there shouldn't be any perceivable difference.    To make the implementation somewhat portable across Linux distributions, we might have to change that into:      __asm__ volatile (".int 0x0f" : : : "memory");    This generates the same code, but doesn't rely on GNU As to parse the 'sync' mnemonic.  GNU As will only allow sync opcode assembly when MIPS III or newer architecture was specified via GCC march= switch.  However on Debian Mips, default settings compile for Mips1 only, to support all the older gear.    Now on old Mips1 CPUs, leveldb would SIGILL at runtime, but then those old CPUs may not be capable to keep up with the Bitcoin network's load anyways.  All recently manufactured MIPS CPUs/SoCs I know of support at least the MIPS III instructions (most should do MIPS32r2, Loongson 2f is very backwards in only supporting MIPS III, but that's due to patents).    A proper patch would look like this:    ```diff  Index: bitcoin-0.8.5-linux/src/src/leveldb/port/atomic_pointer.h  ===================================================================  --- bitcoin-0.8.5-linux.orig/src/src/leveldb/port/atomic_pointer.h      2013-09-12 12:43:31.000000000 +0200  +++ bitcoin-0.8.5-linux/src/src/leveldb/port/atomic_pointer.h   2013-09-18 04:24:17.358004348 +0200  @@ -68,6 +68,18 @@   }   #define LEVELDB_HAVE_MEMORY_BARRIER     +// Gcc on MIPS  +#elif defined(__mips) && defined(__GNUC__)  +inline void MemoryBarrier() {  +   /* Actually a 'sync' instruction, though that can only be assembled  +      with the right -march= switch present, so compilation would fail with  +      default GCC options on Debian-Mipsel (which compiles for Mips1 per  +      default) */  +  __asm__ __volatile__(".int 0x0000000f" : : : "memory");  +}  +#warning "Mips detected"  +#define LEVELDB_HAVE_MEMORY_BARRIER  +   // Mac OS   #elif defined(OS_MACOSX)   inline void MemoryBarrier() {  ```
2416	24643934	2013-09-18T06:38:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24643934	theuni	dvdkhlng	@dvdkhlng Nice sleuthing. Though now that the issue is nailed down, I'd suggest taking it upstream. I'm not sure that the bitcoin devs would be interested in carrying this.    Perhaps you could ping the leveldb devs on the bug report above?
2416	26983308	2013-10-24T11:03:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26983308	laanwj	theuni,	Agree with @theuni, this issue should be taken upstream. We use libraries such as boost and leveldb to not have to bother with architecture-specific details, and going into mips assembly is just a step to far.  We don't have any way to test this either.
2415	15592572	2013-03-28T14:50:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15592572	gavinandresen	3.2.2	Nice!  Can you put the trivial python client in contrib/0mq/ ?    Also:  0mq is available in MacPorts, does version matter?  zmq                            @3.2.2          devel/zmq  zmq20                          @2.0.11         devel/zmq20  zmq22                          @2.2.0          devel/zmq22
2415	15592572	2013-03-28T14:50:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15592572	gavinandresen	2.0.11	Nice!  Can you put the trivial python client in contrib/0mq/ ?    Also:  0mq is available in MacPorts, does version matter?  zmq                            @3.2.2          devel/zmq  zmq20                          @2.0.11         devel/zmq20  zmq22                          @2.2.0          devel/zmq22
2415	15592572	2013-03-28T14:50:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15592572	gavinandresen	2.2.0	Nice!  Can you put the trivial python client in contrib/0mq/ ?    Also:  0mq is available in MacPorts, does version matter?  zmq                            @3.2.2          devel/zmq  zmq20                          @2.0.11         devel/zmq20  zmq22                          @2.2.0          devel/zmq22
2415	15597704	2013-03-28T16:16:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15597704	gmaxwell	petertodd	@petertodd  I was aware of the licensing I don't think it's problematic.  We have LGPL (QT) and advertising-clause BSD (OpenSSL) in parts of the system which are more essential... ZeroMQ can at least just be left out by someone practicing extreme licensing confusion.  GMP for modular inversion will be a bigger question in the future.
2415	15598501	2013-03-28T16:28:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15598501	fredan	gavinandresen	@gavinandresen     Yes, the version does matter.  Use the version 3.2.2 (which is the latest stable one).     Quote from 0mq:  "We recommend this release to anyone developing new applications with MQ"    I will include example client(s) under contrib/0mq in later commitments.
2415	15598559	2013-03-28T16:29:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15598559	petertodd	gmaxwell	@gmaxwell Yup, it's a niche case for it to actually matter, but we should document it clearly for the lawyers; might as well put the info about our dependencies and associated license obligations in assets-attribution.txt or a similar file. (yes, I'm volunteering to write that up)
2415	15722511	2013-04-01T16:20:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15722511	fredan	mikehearn	@mikehearn    What the publisher does is to send new messages when something happens in the bitcoin client. You don't have to ask if something has happened, you already know that.    Under 'contrib/0mq/bitcoin-zmq.py' is an example client of how the publisher part works and their filter defined.    Please run this and take a look of what the output is. (Hint: all json)    To your other questions that depends on where in the source code that happens. If it's in the main.cpp - SetBestChain, then yes if not, tell me where and I will add that as well.
2415	16395222	2013-04-15T16:19:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16395222	fredan	laanwj	@laanwj     The usleep is only running if there is nothing for the thread to do. If we have a lot of request coming in, we will process this until the queue is empty. The reason why I have done this is to be able to shutdown the bitcoin process.    0mq does not any authentication method. That's correct. Only allow it from trusted sources.    The default value for USE_ZMQ is zero (0) in the makefile.unix. That's why you need USE_ZMQ=1 to be able to compile it with 0mq support.
2415	18693102	2013-05-30T16:48:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693102	jgarzik	laanwj	Agree with @laanwj comments.    Let's go those addressed, and get this merged.
2415	21090391	2013-07-17T03:48:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090391	luke-jr	fredan	@fredan Are you going to fix this up?
2415	23221167	2013-08-25T03:21:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221167	jgarzik	fredan.	Ping @fredan.  Also, ping @doublec in case you are motivated to split this up, and get 0mq support moving again.
2415	23221167	2013-08-25T03:21:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221167	jgarzik	doublec	Ping @fredan.  Also, ping @doublec in case you are motivated to split this up, and get 0mq support moving again.
2414	15572532	2013-03-28T07:54:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15572532	Diapolo	gavinandresen	@gavinandresen Is there a more recent version of https://github.com/bitcoin/bitcoin/blob/master/contrib/gitian-descriptors/README available or shall I try to use that to setup a Gitian box?    @gavinandresen ping :)
2414	15572532	2013-03-28T07:54:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15572532	Diapolo	gavinandresen	@gavinandresen Is there a more recent version of https://github.com/bitcoin/bitcoin/blob/master/contrib/gitian-descriptors/README available or shall I try to use that to setup a Gitian box?    @gavinandresen ping :)
2414	16335199	2013-04-13T15:38:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16335199	Diapolo	luke-jr	@luke-jr I have no idea what ``Error: junk at end of line, first unrecognized character is `m'`` means, can you help?
2409	15677693	2013-03-30T16:54:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677693	sipa	TheBlueMatt	@TheBlueMatt can you put a link to the patches applied for pulltester in the produced message?
2409	15679006	2013-03-30T18:10:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15679006	TheBlueMatt	sipa	@sipa Updated the message, it now links to http://jenkins.bluematt.me/pull-tester/files/patches/
2408	17046667	2013-04-25T23:16:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17046667	sipa	luke-jr	@luke-jr With 1000 file descriptors, that effectively means O(1M) operations to construct these sets, which seems ridiculous. Is there any reason not to switch to using poll()?
2408	17047382	2013-04-25T23:37:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17047382	sipa	jeremysawicki	@jeremysawicki Sure, it's no argument against this pull request - it's a strict improvement. Nonetheless, it's something we should look at. It seems Windows only has a poll()-like call as of Vista though, and currently we try to be compatible with XP...
2408	17047767	2013-04-25T23:49:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17047767	luke-jr	sipa	@sipa Windows doesn't have poll(). Vista and newer (only) do have a WSAPoll which was supposed to emulate poll(), but has some weird bugs that someone would need to look more into if it were used..
2405	15573108	2013-03-28T08:17:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15573108	Diapolo	gavinandresen	@gavinandresen As I know you are using Mac, can you take a look here :).
2405	17205748	2013-04-30T01:54:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17205748	gavinandresen	frespa81	I'm unable to reproduce so far.  I'll try some more tomorrow (I'm kill -9 'ing a running bitcoind, to simulate a machine crash / unclean shutdown).    @frespa81 @hank : did this only happen for you after crashing or shutting down during the initial, after-upgrade reindex process?
2405	17205748	2013-04-30T01:54:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17205748	gavinandresen	hank	I'm unable to reproduce so far.  I'll try some more tomorrow (I'm kill -9 'ing a running bitcoind, to simulate a machine crash / unclean shutdown).    @frespa81 @hank : did this only happen for you after crashing or shutting down during the initial, after-upgrade reindex process?
2405	17213135	2013-04-30T07:25:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17213135	frespa81	gavinandresen	@gavinandresen It was a while ago the crash happened for me. I had recently installed the app and the index had finished syncing. I Had gotten a small transfer, everything was working fine. I later had some issues not related to bitcoin-qt. what I can remember the mac did not shutdown cleanly. Then during startup of bitcoin-qt the application crashed.    This was some time ago, can't remember exactly what happened. I will make sure to write things down if they happen again.    Thanks for looking in to the issue!
2405	17569442	2013-05-07T20:47:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569442	sipa	Polyergic	@Polyergic No, it's a "unknown if fixed or not". We assume it's a corruption of your database that was caused by a known bug that is now fixed in HEAD (but is not in a released version yet).    So feel free to reopen or comment here if it would happen again after updating.    Also, next time, you can recover using -reindex (which just imports the block data you already hvae and revalidates it, but doesn't redownload it).
2405	17569452	2013-05-07T20:47:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569452	Diapolo	sipa	No that is no WONTFIX, it is a (hopefully) HAVEFIXED by one of the recent patches :).  @sipa You were faster ^^.
2404	19912337	2013-06-24T14:58:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912337	fanquake	laanwj	With the introduction of the new splash screen, this can be closed. Ping @laanwj or @L2G
2404	19912337	2013-06-24T14:58:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912337	fanquake	L2G	With the introduction of the new splash screen, this can be closed. Ping @laanwj or @L2G
2404	26982951	2013-10-24T10:57:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26982951	jonasschnelli	laanwj	@laanwj should also be closed. It's solved.
2403	15348877	2013-03-24T00:27:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15348877	qubez	gavinandresen	A better patch if you aren't going to call the pull request "Change minimum fees to 0.0001 BTC":  +static const int64 MIN_RELAY_TX_FEE = 50000;    Disclosure of S.DICE interests by a certain MH and other bloat lobbyists would allow detection of individual profit motive before any further implementation of a tragedy of the commons. @gavinandresen Spam rules should not be "6MB of spam an hour allowed at any price.    A user interface recommending an elevated fee based on network activity (and setting the minimum fee to apply to all transactions) would be prudent before further mucking with fees, relay rules, block sizes.
2403	15349268	2013-03-24T01:03:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15349268	gmaxwell	qubez	@qubez  While I share your concerns, you may note that the current most conspicuous bloat sources are paying more than 0.0005 BTC in any case.  What you're asking for would just upset people who do not understand these concerns and would not differentiate traffic.    I also agree with the UI recommendation path, but it appears that at this time changing the behavior here should be harmless e.g. doesn't make anything worse. It's a one byte change.
2403	15349544	2013-03-24T01:29:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15349544	gmaxwell	qubez	@qubez What the network imposes is min _relay_ fee, which is unchanged here. The users you are concerned about do not run bitcoind, and do not care what MIN_TX_FEE is because it's not imposed on the network. (and, as I mentioned, they are already paying more than MIN_TX_FEE in any case, because their software is stupid and can't cope with fee/kb and forces them to pay a static fee large enough for the largest txn they would create)
2403	15402387	2013-03-25T16:05:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15402387	petertodd	gmaxwell	@gmaxwell @qubez re: S,DICE while it's true that they are using software that can't calculate per-kb fees properly, remember that they were initially paying a 0.5mBTC fee on every transaction and later upped it to 1mBTC. To me that says they're paying the fees they do to have a competitive bid for limited block space more than anything else, and are just being a bit lazy on the per-kb aspect of it.    That said, there is a short-term problem with changing MIN_TX_FEE, which is that it's used in GetMinFee(), called by CreateNewBlock(), to determine eligibility for tx inclusion in a new block. How much hashing power will accept these new fees right now?
2403	15402387	2013-03-25T16:05:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15402387	petertodd	qubez	@gmaxwell @qubez re: S,DICE while it's true that they are using software that can't calculate per-kb fees properly, remember that they were initially paying a 0.5mBTC fee on every transaction and later upped it to 1mBTC. To me that says they're paying the fees they do to have a competitive bid for limited block space more than anything else, and are just being a bit lazy on the per-kb aspect of it.    That said, there is a short-term problem with changing MIN_TX_FEE, which is that it's used in GetMinFee(), called by CreateNewBlock(), to determine eligibility for tx inclusion in a new block. How much hashing power will accept these new fees right now?
2403	15989611	2013-04-06T02:41:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15989611	sipa	rebroad	@rebroad 25 BTC subsidy * exchange rate
2402	15338535	2013-03-23T15:10:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15338535	Diapolo	laanwj	I have some feeling, that perhaps there could be a problem with the signal-handlers from core to GUI, when the disk-space check fails.    @laanwj Can you take a look if this could be related to ``ThreadSafeMessageBox``? I know @sipa added a bool, which we use to handle dialog-boxes. Perhaps there is something wrong with it?
2402	15338535	2013-03-23T15:10:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15338535	Diapolo	sipa	I have some feeling, that perhaps there could be a problem with the signal-handlers from core to GUI, when the disk-space check fails.    @laanwj Can you take a look if this could be related to ``ThreadSafeMessageBox``? I know @sipa added a bool, which we use to handle dialog-boxes. Perhaps there is something wrong with it?
2402	16334467	2013-04-13T14:56:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16334467	sipa	laanwj	@laanwj Can you have a look?
2402	16351318	2013-04-14T13:52:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16351318	Diapolo	laanwj	@laanwj @sipa Should this error induce a question to rebuild via the known GUI dialog-box? That is still something where I think we also could have a problem with this users OS and ``ThreadSafeMessageBox``.    https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L833
2402	16351318	2013-04-14T13:52:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16351318	Diapolo	sipa	@laanwj @sipa Should this error induce a question to rebuild via the known GUI dialog-box? That is still something where I think we also could have a problem with this users OS and ``ThreadSafeMessageBox``.    https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L833
2398	15756062	2013-04-02T05:54:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15756062	Diapolo	robbak	@robbak I didn't even knew, that testnet2 nodes can connect to testnet3 nodes ^^, I thought such connections would be blocked or aborted?
2395	15313585	2013-03-22T18:27:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15313585	sipa	qubez	@qubez Since 0.8, BDB is only used for the wallet, so that is the problem, and syncing the block chain without the walelt won't change anything.    I don't understand why -salvagewallet doesn't solve this, as it rebuilds the wallet from scratch. The only thing I can imagine is something very broken in in of the database/* files. I'd try wiping database/*, and then starting with -salvagewallet.
2392	15189331	2013-03-20T17:09:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15189331	gmaxwell	srs96	Uh.    @srs96 What version are you running? The alert you're mentioning is only displayed to older nodes.    @luke-jr But there hasn't been any annoyingly large blocks recent. And as Sipa says, IBD normally pauses (e.g. when a peer goes away).  Don't confuse the basic tech support.
2392	15189331	2013-03-20T17:09:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15189331	gmaxwell	luke-jr	Uh.    @srs96 What version are you running? The alert you're mentioning is only displayed to older nodes.    @luke-jr But there hasn't been any annoyingly large blocks recent. And as Sipa says, IBD normally pauses (e.g. when a peer goes away).  Don't confuse the basic tech support.
2392	15193362	2013-03-20T18:11:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15193362	srs96	gmaxwell	and @gmaxwell it is version 0.7.2-beta
2386	15160312	2013-03-20T06:27:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15160312	Nerzahd	L2G	@L2G Do you right click on the icon? Should look like  ![Ohne Titel](https://f.cloud.github.com/assets/901234/279445/260e8f36-9127-11e2-9391-72b13e88c2ea.png)
2386	15160699	2013-03-20T06:46:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15160699	Diapolo	Nerzahd	@Nerzahd So you say it is working with this patch? Or was that just a screen from when it worked ^^.
2386	15161000	2013-03-20T07:00:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15161000	Nerzahd	Diapolo	@Diapolo  yes. it works with your patch.
2386	15171360	2013-03-20T12:04:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15171360	Diapolo	Nerzahd	@Nerzahd Thanks for testing :).  @laanwj Seems we have a working patch now, can you review?
2386	15171360	2013-03-20T12:04:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15171360	Diapolo	laanwj	@Nerzahd Thanks for testing :).  @laanwj Seems we have a working patch now, can you review?
2386	15379699	2013-03-25T06:40:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15379699	Diapolo	laanwj	@laanwj Does this collide with the GUI refactoring, if no we should pull this now :).    Edit: ping ^^
2385	15137036	2013-03-19T19:19:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15137036	gavinandresen	petertodd	@petertodd : good idea.  That can be done in a subsequent pull.    Reworked/rebased to whitelist the characters in the alert message, as suggested by @jgarzik.
2385	15137036	2013-03-19T19:19:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15137036	gavinandresen	jgarzik.	@petertodd : good idea.  That can be done in a subsequent pull.    Reworked/rebased to whitelist the characters in the alert message, as suggested by @jgarzik.
2383	15152341	2013-03-20T00:32:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15152341	gruez	petertodd	@petertodd @gladoscc I don't see what's wrong with giving people a *choice* to ignore transactions. Anyone can implement their own address filtering by editing the source code, so what do we gain by adding a technical barrier?
2383	15152341	2013-03-20T00:32:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15152341	gruez	gladoscc	@petertodd @gladoscc I don't see what's wrong with giving people a *choice* to ignore transactions. Anyone can implement their own address filtering by editing the source code, so what do we gain by adding a technical barrier?
2383	15183280	2013-03-20T15:38:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15183280	gmaxwell	gruez	@gruez "Anyone sufficiently motivated could build a chemical weapon, what do we gain by not equipping every adult with one?"    Having to modify the software gives people enough friction to think over their change. Not just "I should do this because some website said to click here for awesomeness". ... though my level of horror at this pull request is somewhat tempered by the fact that it's easily avoided by someone using Bitcoin properly (not reusing addresses).    Still, NAK.    It's also worth noting that inconsistent forwarding rules created by the dust setting makes it much harder to write reliable wallet software... since the software doesn't actually know when its peers are going to forward the transaction or not (and your peers don't tell you when they don't). Ultimately wallets will need to deal with that, but they don't currently.    I'd prefer to see a pull request that depriortizes all address reuse, as that will allow reusers with standing relationships to opt into lower priority handling and it encourages blacklisting resistant behavior in our ecosystem.
2383	15638914	2013-03-29T12:31:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15638914	paraipan	laanwj,	I beg to differ @laanwj, I don't understand your point in not letting me control my own resources. Did someone put you there to decide over what bitcoiners have to have in their client software?
2378	15082983	2013-03-18T21:26:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15082983	Diapolo	gavinandresen	@gavinandresen @sipa @laanwj and other core devs:  I dislike the fact that we release versions with unfinished translations, IMHO our release process should cover these things much better. I'd like to vote for a central place where a release schedule is maintained, so that I can sync these translation update pulls with them. If we want our client to become (even more) widely accepted, we should at least cover 100% of the "main" supported languages. We should even consider to drop translations below a certain percentage of completeness.    I'm fine with emergency releases, that need to get out the sooner the better, but even 0.8 didn't have full german translation coverage for example.
2378	15082983	2013-03-18T21:26:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15082983	Diapolo	sipa	@gavinandresen @sipa @laanwj and other core devs:  I dislike the fact that we release versions with unfinished translations, IMHO our release process should cover these things much better. I'd like to vote for a central place where a release schedule is maintained, so that I can sync these translation update pulls with them. If we want our client to become (even more) widely accepted, we should at least cover 100% of the "main" supported languages. We should even consider to drop translations below a certain percentage of completeness.    I'm fine with emergency releases, that need to get out the sooner the better, but even 0.8 didn't have full german translation coverage for example.
2378	15082983	2013-03-18T21:26:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15082983	Diapolo	laanwj	@gavinandresen @sipa @laanwj and other core devs:  I dislike the fact that we release versions with unfinished translations, IMHO our release process should cover these things much better. I'd like to vote for a central place where a release schedule is maintained, so that I can sync these translation update pulls with them. If we want our client to become (even more) widely accepted, we should at least cover 100% of the "main" supported languages. We should even consider to drop translations below a certain percentage of completeness.    I'm fine with emergency releases, that need to get out the sooner the better, but even 0.8 didn't have full german translation coverage for example.
2378	15083768	2013-03-18T21:40:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15083768	sipa	Diapolo	@Diapolo v0.8.1 is branched directly from v0.8.0, and not from git HEAD. It has only 4 commits and no changes to translatable texts.    In general, I agree with your comment about a better process for translations though, but I really don't have the time to work on that.
2373	15013608	2013-03-16T22:45:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15013608	gavinandresen	TheBlueMatt	Pull-tester is upset because it creates a block (b39) that violates the new rule (it fills the block up to 1MB with abnormally tiny transactions that have scriptSig OP_1 and scriptPubKey OP_1).    @TheBlueMatt : easiest fix, I think, would be to have pull-tester create blocks with timestamps from the past.
2373	15026573	2013-03-17T17:19:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15026573	gavinandresen	petertodd	@petertodd : third commit just bumps version numbers to '0.8.1', I removed it from this pull only because it doesn't merge cleanly with git HEAD.    @luke-jr : deep re-orgs are definitely a theoretical problem, but we have to weigh two months of chronic unconfirmed transactions if we set the block size too small versus coddling people/services who won't upgrade or set their DB_CONFIG.  Based on IRC conversation, I think the right thing to do is recommend setting DB_CONFIG for 120,000 locks instead of 50,000, although even that will cause problems for people running on low-memory VPS'es. But they should upgrade to 0.8 anyway to get much better performance...
2373	15026573	2013-03-17T17:19:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15026573	gavinandresen	luke-jr	@petertodd : third commit just bumps version numbers to '0.8.1', I removed it from this pull only because it doesn't merge cleanly with git HEAD.    @luke-jr : deep re-orgs are definitely a theoretical problem, but we have to weigh two months of chronic unconfirmed transactions if we set the block size too small versus coddling people/services who won't upgrade or set their DB_CONFIG.  Based on IRC conversation, I think the right thing to do is recommend setting DB_CONFIG for 120,000 locks instead of 50,000, although even that will cause problems for people running on low-memory VPS'es. But they should upgrade to 0.8 anyway to get much better performance...
2373	15035036	2013-03-18T01:03:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15035036	gmaxwell	gavinandresen	@gavinandresen  Yea, the pulltester test was designed to trigger this case, I suppose it should be switched to do two such blocks, a must accept with a past timestamp and a must reject with a timestamp that triggers this rule.
2373	15041654	2013-03-18T07:04:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15041654	Diapolo	gavinandresen	@gavinandresen When is 0.8.1 scheduled? I'm asking, because we should update translations, if there is time left.
2373	15141700	2013-03-19T20:41:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15141700	Diapolo	gavinandresen	@gavinandresen If these are IN 0.8.1 why not merge it to current head?
2370	15715514	2013-04-01T13:37:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15715514	rebroad	ThePiachu	@ThePiachu Do you mean that both transactions eventually got confirmed? If so, why is this issue still open?
2369	14946626	2013-03-15T07:19:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14946626	rebroad	Definit	@Definit what version of the client are you using?
2369	14946695	2013-03-15T07:23:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14946695	rebroad	Definit	@Definit I suspect this is unconfirmed because the fee wasn't high enough. The network is experiencing more traffic these days and miners are being more selective about which transactions to include in blocks, especially due to the recent block 225430 hard-fork issue.
2364	15362669	2013-03-24T17:02:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15362669	gmaxwell	Bobalot	@Bobalot  Can you walk me through what problem this solves that isn't solved equally well by just polling once a second (to a few seconds)?
2364	15953334	2013-04-05T12:39:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15953334	Bobalot	gavinandresen	I guess you're right, launching a new process is a terrible thing to do on every transaction. This was really just an ugly hack, having found mini-node it seems using that would be a much easier and safer way to achieve what I wanted.    @gavinandresen it isn't really a good idea to implement this, but the same can be said for -blocknotify and -walletnotify, if they only create further code to review.       @gmaxwell you're right this would be easier by polling, but i've found using pynode is even easier.
2364	15953334	2013-04-05T12:39:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15953334	Bobalot	gmaxwell	I guess you're right, launching a new process is a terrible thing to do on every transaction. This was really just an ugly hack, having found mini-node it seems using that would be a much easier and safer way to achieve what I wanted.    @gavinandresen it isn't really a good idea to implement this, but the same can be said for -blocknotify and -walletnotify, if they only create further code to review.       @gmaxwell you're right this would be easier by polling, but i've found using pynode is even easier.
2363	15633389	2013-03-29T09:06:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15633389	laanwj	codeshark's	If you need multiwallet support badly, can you help testing @codeshark's pulls?    https://github.com/bitcoin/bitcoin/pulls/CodeShark    Testing will always help get things merged sooner.    Closing this issue, as the consensus is that we don't agree that this is bad practice.
2361	15151714	2013-03-20T00:12:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15151714	L2G	laanwj,	By the way, @laanwj, I'm looking at this in the design window in Qt Creator 2.6.2, and it looks like both labels specify a fixed point size. Moreover, I don't see how it's possible to define relative sizes.    I'm still very much a rookie with this Qt stuff, so your patience and understanding is appreciated. :grin: I'm just trying to help out from the Mac side.
2361	15379683	2013-03-25T06:39:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15379683	Diapolo	L2G	@L2G IMHO we can pull this if you just remove ``<pointsize>11</pointsize>`` from the .UI file instead of changing it to 13 :).
2361	15567735	2013-03-28T04:26:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15567735	L2G	Diapolo,	@Diapolo, are you talking about the progress message that says "Processed X blocks of transaction history"? That doesn't show up for me unless I hover over the sync status indicator in the lower-right corner; then it shows up as a tool tip.
2357	15651219	2013-03-29T17:28:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15651219	gavinandresen	denis2342	@denis2342 : when you say "right now", do you mean with this patch or without it?
2357	15672363	2013-03-30T10:21:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672363	denis2342	denis2342	yes, with the patch.    sorry for the delay, I am on the road.    denis    Sent from my iPhone    On 29.03.2013, at 18:29, Gavin Andresen <notifications@github.com> wrote:    > @denis2342 : when you say "right now", do you mean with this patch or without it?  >   >   > Reply to this email directly or view it on GitHub.
2357	15689983	2013-03-31T11:11:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15689983	sipa	laanwj	@laanwj No, Sleep() (as opposed to sleep()) was an own function in util.cpp that takes milliseconds as argument. I'm in favor of renaming it to MilliSleep() to reduce confusion.
2357	15784574	2013-04-02T16:02:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15784574	gavinandresen	denis2342	@denis2342 can you run under a debugger and get a call stack for that assertion? I'm guessing something is being called after main() exits, but I'm just guessing...
2357	15863195	2013-04-03T20:41:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15863195	Diapolo	gavinandresen	@gavinandresen Why are we supporting such an ancient Boost version anyway? I don't get that :).
2357	15875391	2013-04-04T01:24:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15875391	gavinandresen	denis2342	I'm going to pull this, I suspect @denis2342 is seeing the same intermittent crash-at-shutdown problems that we saw before on OSX (or are you seeing them on freebsd?)
2356	14706348	2013-03-11T10:40:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14706348	Diapolo	fanquake	Yeah, seems to be a duplicate, please use the linked thread from @fanquake and just close this one, thanks.
2349	15993643	2013-04-06T09:52:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15993643	Diapolo	sipa	@sipa What about ``-rpcthreads``, does this make sense there too? Or for ``-genproclimit`` (which seems missing from our help message in init.cpp?)?
2349	16317722	2013-04-12T21:08:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317722	sipa	Diapolo	@Diapolo As long as we don't have good lock isolation, RPC processing is effectively single-threaded anyway. I don't even think there's any good reason for more than 2 RPC threads right now.
2349	16322940	2013-04-12T23:33:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16322940	Diapolo	sipa	@sipa AFAIK we currently use 4 RPC threads as default ;). I just was asking if these changes could be valuable for other thread-related command-line parameters also.
2349	17180931	2013-04-29T17:23:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17180931	dserrano5	rdponticelli.	Ok, did the rebase, with help from @rdponticelli.
2345	14938422	2013-03-15T00:51:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14938422	gmaxwell	hrobbins	@hrobbins  I'm happy you are interested but your response is a handwave "The more hashing power you contribute"  ... how is _you_ defined?   "less you're trusted"  ... trusted in what way?    The self-regulating comment was wrt fervent-dissent's "moderated during transitions" the system has a feed-forward control loop to keep the block rate controlled during such transitions and doesn't appear to need any additional help (even if fervent-dissent had specified some way that it actually could be helped).  It wasn't a comment with respect to "51%" the inability to handle >50%+1 byzantine faults is unfortunate, but appears to be fundamental.    @tobypinder "albeit nontrivial" I've seen nothing suggested here which was even that useful alas.
2345	14938422	2013-03-15T00:51:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14938422	gmaxwell	tobypinder	@hrobbins  I'm happy you are interested but your response is a handwave "The more hashing power you contribute"  ... how is _you_ defined?   "less you're trusted"  ... trusted in what way?    The self-regulating comment was wrt fervent-dissent's "moderated during transitions" the system has a feed-forward control loop to keep the block rate controlled during such transitions and doesn't appear to need any additional help (even if fervent-dissent had specified some way that it actually could be helped).  It wasn't a comment with respect to "51%" the inability to handle >50%+1 byzantine faults is unfortunate, but appears to be fundamental.    @tobypinder "albeit nontrivial" I've seen nothing suggested here which was even that useful alas.
2345	14943904	2013-03-15T04:58:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14943904	hrobbins	gmaxwell	@gmaxwell wrt "The system is self-regulating" I misunderstood.  Also thought it would be clear "you" would be an address that mined bitcoins would be awarded to.  "Trusted" being in terms of deciding consensus on the block chain, taking the chain with the greatest trust behind it that factored in risk from unknown and high powered contributors, rather than the greatest difficulty (hashing power).    @tobypinder I agree something more rigorous would be needed.  "A perfect solution" is not.  There's something to be said for defense in depth.  The more difficult you can make it for an attacker the better, all you need is to insure the cost isn't going to be worth the benefit.  Right now, it's not, if/when Bitcoin starts to threaten governments, or have a significant impact on the financial system in general, it may.
2345	14943904	2013-03-15T04:58:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14943904	hrobbins	tobypinder	@gmaxwell wrt "The system is self-regulating" I misunderstood.  Also thought it would be clear "you" would be an address that mined bitcoins would be awarded to.  "Trusted" being in terms of deciding consensus on the block chain, taking the chain with the greatest trust behind it that factored in risk from unknown and high powered contributors, rather than the greatest difficulty (hashing power).    @tobypinder I agree something more rigorous would be needed.  "A perfect solution" is not.  There's something to be said for defense in depth.  The more difficult you can make it for an attacker the better, all you need is to insure the cost isn't going to be worth the benefit.  Right now, it's not, if/when Bitcoin starts to threaten governments, or have a significant impact on the financial system in general, it may.
2345	14978039	2013-03-15T18:43:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14978039	gmaxwell	hrobbins	@hrobbins What attack are you asking about and I'll let you know if I know of something that monitors for it?
2345	14980008	2013-03-15T19:23:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14980008	hrobbins	gmaxwell	@gmaxwell Specifically thinking about the >50% attack, the "Cancer Nodes" attack, or general misbehavior of the network like the 0.7/0.8 fork which seemed to catch people off-guard.
2343	14407850	2013-03-04T21:47:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14407850	cozz	gmaxwell	update: removed "back to input"    @gmaxwell I am actually already computing the fees while selecting inputs assuming 2 outputs
2343	14419157	2013-03-05T01:55:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14419157	rebroad	eldentyrell	I concur with @eldentyrell - if this isn't merged then a fork will occur, which may potentially be more popular than this one - some diversity of this client is probably a good thing though to maintain what bitcoin is meant to be about - decentralised.
2343	14419206	2013-03-05T01:57:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14419206	gmaxwell	rebroad	@rebroad  I'm wondering why you think it's appropriate to use threatening language over code that doesn't currently compile? Good luck with that fork.
2343	14420378	2013-03-05T02:41:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14420378	luke-jr	eldentyrell	@eldentyrell They could always merge coincontrol with the relevant stable branch (not to dissuade merging this..)    @gmaxwell I didn't interpret @rebroad as threatening at all O.o
2343	14420378	2013-03-05T02:41:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14420378	luke-jr	gmaxwell	@eldentyrell They could always merge coincontrol with the relevant stable branch (not to dissuade merging this..)    @gmaxwell I didn't interpret @rebroad as threatening at all O.o
2343	14420378	2013-03-05T02:41:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14420378	luke-jr	rebroad	@eldentyrell They could always merge coincontrol with the relevant stable branch (not to dissuade merging this..)    @gmaxwell I didn't interpret @rebroad as threatening at all O.o
2343	14421643	2013-03-05T03:29:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14421643	eldentyrell	luke-jr,	@luke-jr, I'm talking about non-{template-heavy-C++}-programmers (the majority of bitcoin users).
2343	14422152	2013-03-05T03:52:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422152	cozz	gmaxwell	@gmaxwell confirmations are shown with tooltip. priority does not matter in my version of coin control.    ALL SELECTED INPUTS ARE GOING INTO THE TRANSACTION FOR SURE.  If you select 100BTC but only send 1 satoshi, still all 100BTC will be inputs, rest will send back as change.    Also there is already select all / unselect all, you have to click on "*" (left table header).
2343	14422352	2013-03-05T04:00:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422352	gmaxwell	cozz	@cozz  Uh. Priority has nothing to do with which selected inputs go into the transaction.  It's one of the factors that determines if the transaction can be free or not, and influences how fast it can be mined. I am totally confused as to what you're thinking there.    A tooltip is effectively hidden, especially one that takes a half second hover on a tiny icon. Why not make it the number?    The asterisk fails on discoverability: I couldn't find it and I looked (tried left and right clicking in several places but not your ~~ symbol~~ * symbol. :P   If I can't figure it out, knowing that it should have something there might want to consider another approach.
2343	14422710	2013-03-05T04:16:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422710	cozz	gmaxwell	@gmaxwell ah Im sorry with the priority thing, now I know what you mean, youre right, showing this in an extra column could be useful.
2343	14485414	2013-03-06T06:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14485414	rebroad	cozz	Looking good @cozz - I notice @jgarzik commented on the bitcointalk thread about RPC functionality - but I wasn't quite sure of the relevance - is he implying some duplication of effort as a result of this pull?
2343	14485414	2013-03-06T06:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14485414	rebroad	jgarzik	Looking good @cozz - I notice @jgarzik commented on the bitcointalk thread about RPC functionality - but I wasn't quite sure of the relevance - is he implying some duplication of effort as a result of this pull?
2343	14495285	2013-03-06T11:47:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14495285	cozz	rebroad	@rebroad - @jgarzik does not want to patch Bitcoin-Qt but instead provide this functionality through another external app. You could realize this through the lockunspent methods.   (except the extremely important feature that all selected should go into the transaction for sure, you have to patch bitcoin source for this, otherwise selected only maybe included in the transaction)  But I am not interested in this, I will maintain this patch anyway, because I am doing it for myself. If you guys then include this upstream or not is up to you.
2343	14495285	2013-03-06T11:47:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14495285	cozz	jgarzik	@rebroad - @jgarzik does not want to patch Bitcoin-Qt but instead provide this functionality through another external app. You could realize this through the lockunspent methods.   (except the extremely important feature that all selected should go into the transaction for sure, you have to patch bitcoin source for this, otherwise selected only maybe included in the transaction)  But I am not interested in this, I will maintain this patch anyway, because I am doing it for myself. If you guys then include this upstream or not is up to you.
2343	14966206	2013-03-15T15:14:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14966206	rebroad	cozz	@cozz I'd like to install this Perhaps you could include instructions for the novice github users for downloading it..? (including me!)
2343	15020219	2013-03-17T10:10:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15020219	cozz	rebroad	 @rebroad I have published binarys also: https://bitcointalk.org/index.php?topic=144331
2343	15718515	2013-04-01T14:53:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718515	laanwj	rebroad	@rebroad: sounds like a very serious problem; did you manage to get more information from the crashes?
2343	15768408	2013-04-02T10:50:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15768408	cozz	Nothing4You	@Nothing4You You you dont need to select you can direct right click and copy to clipboard    @rebroad if you cant reproduce the error I cant help you here.    From my standpoint its not possible to create a corrupt wallet with the coin control patch.  I guess the changes are less critical than some people think. The only critical code is in wallet.cpp  thats 2 if-statements and some get-set methods. It is only tampering with inputs and outputs of transactions  thats it, its not touching the wallet directly.    Anyway I hope I can kick myself in the ass and create a testing plan this week, I will send this gavin for review and then publish if he says testing plan is ok. Then I will test the new multi-wallet commit with this and then publish testing plan and rebase this, to get this finally merged. Until then theres no sense rebasing this all the time.
2343	15768408	2013-04-02T10:50:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15768408	cozz	rebroad	@Nothing4You You you dont need to select you can direct right click and copy to clipboard    @rebroad if you cant reproduce the error I cant help you here.    From my standpoint its not possible to create a corrupt wallet with the coin control patch.  I guess the changes are less critical than some people think. The only critical code is in wallet.cpp  thats 2 if-statements and some get-set methods. It is only tampering with inputs and outputs of transactions  thats it, its not touching the wallet directly.    Anyway I hope I can kick myself in the ass and create a testing plan this week, I will send this gavin for review and then publish if he says testing plan is ok. Then I will test the new multi-wallet commit with this and then publish testing plan and rebase this, to get this finally merged. Until then theres no sense rebasing this all the time.
2343	16000873	2013-04-06T18:03:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16000873	laanwj	sipa,	Agreed @sipa, it should not be state but an extra input to the sendtransactions
2343	16712295	2013-04-20T22:14:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16712295	sipa	luke-jr	@luke-jr Without special measures to try to make the change look like a regular output (try to mimic precision/patterns in amount values, for example), I think it's safer to assume that change can be inferred.
2343	16715772	2013-04-21T04:16:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16715772	eldentyrell	luke-jr,	> that it is change is not represented in the transaction itself    @luke-jr, do you mean:    1. In the blockchain?  Of course not.    2. In a client's local transaction records?  The client can make note of the purpose for which a private key was created (to receive change or not) at the time of its creation.    3. In the bitcoin-qt client implementation in particular?  See wallet.cpp, bool CWallet::IsChange() -- it's essentially doing (2) using the "address book" part of the wallet to determine the creation purpose.  If the user created the address for non-change purposes it gets put in the address book.  If it's not in there, the cilent assumes it was created in order to receive change.
2343	18659631	2013-05-30T03:31:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18659631	sipa	ahdinosaur	@ahdinosaur You can do coin control using the raw transaction api in RPC.
2343	18664208	2013-05-30T06:44:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18664208	laanwj	sipa's	We'd like to merge this ASAP, but it really needs @sipa's comment fixed (no per-wallet state, use CTxDestination) before it can be merged.
2343	18862897	2013-06-03T18:57:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18862897	cozz	luke-jr	update:    - new class CCoinControl in wallet.h    class has       - CTxDestination for change       - Coin Control Methods       - Lock Unspent Methods         I have merged lockunspent - methods into this class, because otherwise          we would have again same state for gui and rpc for lockunsppent.     There are 2 instances of this class created, 1 in walletmodel for gui     and 1 in wallet for rpc. I have not implemented rpc, but would be trivial now.     CCoinControl class is passed as parameter into createTransaction() also in AvailableCoins().     In AvailableCoins() this is where the actual coin control is done, its the same line of code     where you asked if isLockedUnspent before  - dust logic    - at least in my tests it turned out that dust is actual 5460 satoshis, not 5430    - if you enter dust as recipient Amount the label Low Ouput shows "DUST"    - fee is calculated correctly according to dust, this is when change would be dust, its added to the fee  - fixed a (for me) very annoying compiler warning in a separate commit  - some minor improvements, not really worth mentioning, like improving start-up time of the popup if you had a lot of outputs selected, change address warnings are now red etc.    @luke-jr: sry, your spacebar-bug would require to create a separate treewidget class and overwrite keypressevent, so I leave this unfixed for now
2343	18908805	2013-06-04T13:29:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18908805	jgarzik	sipa	Although I do agree w/ @sipa RE lockunspent data, it was an open question at the time whether it should be stored in the wallet or not.  Some people requested a second iteration of lockunspent store the lock list in stable storage, thereby solving an issue with the current implementation: one must reload the lock list the first time the wallet is used, post-bitcoind-restart.  That is a window for errors, that storing the locks in stable storage would solve.
2343	19092973	2013-06-07T07:32:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19092973	jonasschnelli	wtogami	@wtogami is right. If the pull get's ACKed and merged, pull #2651 needs overhaul and some merge effort.
2343	19100038	2013-06-07T10:41:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19100038	wtogami	jonasschnelli	@jonasschnelli It seems #2651 is closer to acceptance than #2343 Coin Control, so Coin Control should rebase on master with #2651 as a dependency.
2343	20422144	2013-07-03T15:15:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20422144	cozz	wtogami	update:  - labels are now selectable, because people often ask "how to copy to clipboard?"  - fix spacebar/esc bug, I had to subclass the treewidget for this  - s/Minus Fee/After Fee/  - s/nBaseFee/nFee/  - remove (nAmount - nPayFee) parenthesis  - added a "~" before bytes and say "Can vary +/- 1 Byte per input" in tooltip, this is because ecdsa signature for a uncompressed public key is: with a 25% chance 179 bytes, with a 50% chance 180 bytes, with a 25% chance 181 bytes. I simply assume 180 bytes for all. Same for compressed, but with 32 bytes less. The only way to give 100% accurate bytes would be to actually create and sign the transaction for every click in coin control, which would be overkill in my opinion. So bytes is just an extreme good guess.    @wtogami   - I put the OK button on the left on purpose, because checkboxes are on the left, otherwise my mouse ways were to long, I had to move mouse from left to right all the time, I hated that  - I have tested some compressed/uncompressed inputs, I can not say more than "It works for me". In your case it really looks like there has been a false detection of compressed/uncompressed. But I dont know what else to test.  - your phenomenom with the 45 low-medium switching to medium is correct behaviour. This is because if you only select 1 input, I have to add 78 bytes for the output here. This is 2 * 34 + 10. 2 outputs and 10 bytes transaction overhead. Now if you select 45 inputs, also I only add 78 bytes, because selecting more inputs does not mean you have more outputs, you still have 2 outputs. So the more inputs you select, the less "meaningful" are 78 bytes for the math-calculation. This means you can actually "cheat" your priority up, by selecting more inputs. But thats not my fault, thats how bitcoin priority calculation works. I mean with the power of coin control you can always cheat up your priority, simply by selecting a huge input, although it is not needed and then send this coins back to yourself as change.  - Your last question above does not really make sense. An output is always 34 bytes, its a ripe160 hash,  there is no compressed/uncompressed. Only the input is either 180 or 148 bytes, depending on compressed/uncompressed.
2343	20427175	2013-07-03T16:20:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20427175	wtogami	cozz	@cozz Sounds great!  Could you please provide this new version rebased to 0.8.2 as well?
2343	20431575	2013-07-03T17:27:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20431575	cozz	wtogami	    @wtogami  http://sourceforge.net/projects/bitcoincoincont/files/bitcoin-0.8.3-coincontrol.tar.gz/download
2343	20453813	2013-07-04T00:52:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20453813	wtogami	cozz	@cozz a tiny request.  Could you please push each new revision of Coin Control to a new branch on your github?  It is difficult to compare the changes to previous versions when the earlier versions are gone.
2343	20454477	2013-07-04T01:16:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20454477	luke-jr	wtogami	@wtogami It's not difficult at all. Pushing to the same branch is necessary to update the pull request.
2343	20457505	2013-07-04T03:32:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20457505	wtogami	luke-jr	@luke-jr I may be mistaken, but isn't what he is doing push --force, which wipes access to the previous revisions?
2343	20457553	2013-07-04T03:34:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20457553	luke-jr	wtogami	@wtogami Presumably. Don't you have a local copy?
2343	22534163	2013-08-12T23:44:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22534163	gavinandresen	wtogami	I'd still be much more comfortable ACK'ing this if there was a written-up QA test plan. I see a lot of ad-hoc testing (e.g. @wtogami testing priority calculations sweeping up dust) which is fine, but the purpose of thorough testing is to find edge cases that aren't tested because "it works for what the developer uses it for."
2343	24274890	2013-09-11T20:46:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24274890	wtogami	gavinandresen	@gavinandresen What sort of test plan?  Completely automated is necessary?
2343	24275028	2013-09-11T20:48:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24275028	wtogami	cozz	@cozz Needs rebase.
2343	24281264	2013-09-11T22:20:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24281264	gavinandresen	wtogami	@wtogami : no, completely automated is NOT necessary.  The kind of test plan described here:    https://github.com/bitcoin/QA    e.g. https://github.com/gavinandresen/QA/blob/master/PaymentRequestTest.md
2343	25031273	2013-09-24T18:40:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25031273	cozz	gavinandresen	update:  - rebase/fix merge conflicts  - replace hardcoded 57600000 with AllowFree(..)  - minor fee bug: occured for sub-cent change and unusual fee setting, 0 < fee < 10000  - minor gui: hide change label when checkbox unchecked    Testplan:  https://github.com/cozz/bitcoin/blob/cozz1/cctestplan.md    @gavinandresen What do you think about the testplan?
2343	25116179	2013-09-25T19:15:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25116179	petertodd	cozz	@cozz That kind of thing can probably even happen in the regular wallet with co-current RPC operations, so yeah, if you could think it through carefully and come up with a good solution and user experience that'd be quite valuable. Just make sure the error message you got is reasonable friendly - "TRANSACTION CREATION FAILED!!!!!" isn't, but something along the lines of "Sorry, looks like some coins you wanted to spend were spent elsewhere. Retry?" is good.    FWIW keep in mind what you described can also be thought of as a double-spend, and we don't handle them well in general.
2343	25491339	2013-10-01T21:23:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25491339	mumblerit	cozz	@cozz Great work!  Could you please post a new backport to 0.8.5?  You have many testers there that would help to validate the recent changes.
2343	25756894	2013-10-05T20:55:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25756894	cozz	mumblerit	@mumblerit http://sourceforge.net/projects/bitcoincoincont/files/bitcoin-0.8.5-coincontrol.tar.gz/download
2343	26905257	2013-10-23T13:39:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26905257	cozz	HostFat	update:  - fix transaction times bug reported by @HostFat   - because of #3008     - change labels from 10000 to 1000 bytes      (I did not have to change fee-logic, only tooltip label and label turn red threshold)    - testplan: change from 10000 to 1000 bytes  - because of #2945     - ignore bytes from the inputs for priority calculation    - adjusted getPriorityLabel(..) thresholds (because priorities are higher now and           they just add up now when selecting more inputs, this          resulted in getting "highest" priority label too quickly)    Testplan still the same link: https://github.com/cozz/bitcoin/blob/cozz1/cctestplan.md
2343	27092736	2013-10-25T13:36:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27092736	cozz	Diapolo	update:   - code nits     - introduced GUIUtil::setClipboard     - calling getBalance(coinControl) now in walletmodel.cpp     - replaced "WARNING" with "Warning"     - added notr="true" to ui non translatable strings   - added "coinControlUpdateLabels();" at the end of SendCoinsDialog::pasteEntry(..).     This is because payment-request did not trigger label refresh.   - reverted some changes from the last commit for #2945:     I forgot uncompressed keys are over the limit. The ignore limit introduced by #2945     is 151 bytes. An input with uncompressed key is 180 bytes. So I credit 29 bytes per uncompressed input. This is priority calculation only.    @Diapolo yes, I honor display units    Tested payment request. No problems found, besides the "coinControlUpdateLabels();" call mentioned above.    Latest 0.8.5 backport: http://sourceforge.net/projects/bitcoincoincont/files/bitcoin-0.8.5-coincontrol.tar.gz/download    Testplan still the same: https://github.com/cozz/bitcoin/blob/cozz1/cctestplan.md
2343	27338178	2013-10-29T20:03:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27338178	gmaxwell	wtogami	@wtogami  "Please just merge" is not helpful.  "Mr. Foo. Went through the test plan and completed all the tests successfully" is.
2343	28106326	2013-11-08T23:20:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28106326	cozz	luke-jr	618 = 3 * 180 + 2 * 34 + 10  This would be 3 inputs from uncompressed keys and 2 outputs.    590 = 3 * 148 + 4 * 34 + 10  This would be 3 inputs from compressed keys and 4 outputs.    Calculation depends on how many inputs/outputs and also if inputs are from compressed or uncompressed ecdsa public key. If it is unknown how many outputs, I assume 2 outputs.    @luke-jr Is this a question in general or did coincontrol actually show you 618 bytes and when you sent the transaction, it only had 590?
2341	26604709	2013-10-18T15:25:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26604709	laanwj	gavinandresen	As @gavinandresen says, without a stack trace (with symbols and line numbers) we can't do anything. You'll need to debug the issue yourself, especially if you build with your own toolchain and build options.
2339	14327926	2013-03-02T13:06:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14327926	Diapolo	Tindalos	@Tindalos If everything is working now, you can close this issue ticket :).
2338	14037030	2013-02-25T11:38:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14037030	sipa	mikehearn	@mikehearn 8 bytes + 0.25 byte/tx + overhead of sending the transactions in separate messages instead of inline in a block.
2338	14065572	2013-02-25T18:55:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14065572	gmaxwell	TheBlueMatt	@TheBlueMatt not horrible, though a protocol made just for this could transmit say 8 bytes instead, and then just pull the whole block in the insanely rare case that there is a collision. Probably not worth doing inside the bitcoin p2p protocol however.
2336	14020489	2013-02-25T00:12:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14020489	gmaxwell	BitcoinPullTester	@BitcoinPullTester  LOL. Should he write a unit test for the unit test?
2335	14020719	2013-02-25T00:25:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14020719	luke-jr	BitcoinPullTester	@BitcoinPullTester Uh, how?
2334	14346784	2013-03-03T13:16:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14346784	laanwj	eurekafag's	Indeed, the underlying problem is that the tooltip is generated when a block comes in, not when the tooltip is requested to be rendered. @eurekafag's patch works around this by sending the numBlockChanged signal even though the number of blocks hasn't changed (which is contrary to the principle of least surprise, I'd say).    Another related problem is that the tooltip is never updated while it is visible. This is a qt limitation. I suppose to really fix this the tooltip should be drawn manually.    Edit: issue #2233 was about the same problem
2333	14029933	2013-02-25T08:14:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14029933	Diapolo	TheBlueMatt	@TheBlueMatt How can my change here cause this: ``test/util_tests.cpp(307): error in "util_seed_insecure_rand": check count<=10000/mod+err failed``?
2333	15222891	2013-03-21T07:27:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15222891	Diapolo	gmaxwell	Can any core-dev confirm this is okay? I know that @gmaxwell recently changed that message with another pull, but perhaps didn't see that duplicate, which used the same string.    Edit: It was #2384.
2332	14829256	2013-03-13T08:19:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14829256	Diapolo	laanwj	@laanwj I updated the pull, should be better now :).
2332	15027278	2013-03-17T17:58:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027278	Diapolo	laanwj	@laanwj Perhaps you consider this also mergable then :)?
2330	14028990	2013-02-25T07:36:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14028990	laanwj	schildbach	The current icon is in the source tree in svg format ("bitcoin.svg"). I think we should require the same from any replacement icons.    Although vector doesn't completely make the scaling issue go away, especially at the very small sizes (such as 16x16/24x24/32x32 for the notification icon) we still need a bitmap.    @schildbach The problem with the launcher icon is separate; to have a high-resolution launcher icon you need to install a .desktop file in the right place, and an icon somewhere in the shared system directories. I'm not sure if the ppa does this, but the problem is not unavailability of the current icon in different sizes.
2329	14030085	2013-02-25T08:19:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14030085	Diapolo	Vort	@Vort Can you close this issue please?
2327	13881100	2013-02-21T09:57:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13881100	laanwj	Diapolo	yep, this is already possible with the flag @Diapolo mentions. closing
2325	13844342	2013-02-20T17:22:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13844342	laanwj	diapolo	@diapolo Sorry, it's probably because we're mostly used to responding to comments we *don't* agree with    I agree that this will have to be retranslated (though with 0.8 final being out of the door there's a lot of time for that).    And for wallet/block database, yeah, I'd say leave out "database" for the wallet and make the message "Verifying wallet".
2315	13666192	2013-02-16T18:49:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13666192	sipa	gavinandresen	@gavinandresen From what I can see, this also fixes the crash-at-shutdown issue.
2315	13698379	2013-02-17T22:28:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698379	sipa	gavinandresen	@gavinandresen I added a very simple destructor to CCheckQueue that calls Quit(), which should take care of taking down the sigcheck threads during shutdown.    I have no explanation for your assert error, though.
2312	13746088	2013-02-18T22:14:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13746088	gmaxwell	BitcoinPullTester	@BitcoinPullTester Because you asked so nicely
2312	13956558	2013-02-22T17:20:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13956558	gmaxwell	diapolo	@diapolo I _did_ change the indentation.  Please don't be rude about it, I am listening and I do care... but as much as people shouldn't be offended when you make nits, you shouldn't be offended by people's responses.    Personally, I'm fine to have your style nits, my preferred style is something else no one here wants and sometimes a bit of it leaks through, so I'm happy to have people point it out and I'll change it. (which I did here!)
2312	13958158	2013-02-22T17:52:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13958158	Diapolo	laanwj	No offence to anyone :), I just though out loud ^^. I think @laanwj your suggestion to keep a look at my blood-pressure and heart-rate is the best I can and will do :D.
2310	13627204	2013-02-15T20:47:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13627204	luke-jr	schildbach	@schildbach Qt will automatically change "day(s)" to "day" or "days" as appropriate.
2310	13627729	2013-02-15T20:59:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13627729	schildbach	luke-jr	@luke-jr Hu? I'm almost sure I saw "day(s)" in the actual running software. I'm running Ubuntu Linux 12.10 in case this matters.
2310	13629695	2013-02-15T21:42:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13629695	laanwj	schildbach	This isn't based on the last version of my commits. I fixed the totalSecs already, along with some other changes such as the LF before the transaction message.    @schildbach: in Qt that is avoided by adding the correct plurals in the english translation file, no need to hack around in the source code.    @qubez if you know better just submit a pull request to improve it, I'm pretty darn sick of all the complaining, whatever we change to the progress bar (or something else) there is at least someone that complains that the old situation was better. That's why I was reluctant to touch it, or do much development on bitcoin at all anymore for that matter.
2310	13629695	2013-02-15T21:42:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13629695	laanwj	qubez	This isn't based on the last version of my commits. I fixed the totalSecs already, along with some other changes such as the LF before the transaction message.    @schildbach: in Qt that is avoided by adding the correct plurals in the english translation file, no need to hack around in the source code.    @qubez if you know better just submit a pull request to improve it, I'm pretty darn sick of all the complaining, whatever we change to the progress bar (or something else) there is at least someone that complains that the old situation was better. That's why I was reluctant to touch it, or do much development on bitcoin at all anymore for that matter.
2310	13632926	2013-02-15T23:04:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13632926	sipa	laanwj	@laanwj In that case, pull my commits into your pullreq and I'll close this?
2310	13650028	2013-02-16T13:53:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13650028	sipa	laanwj	@laanwj Updated to your latest pull's code (I think...)    @qubez If you're keen on making graphs, can you compare with the method implemented in this pullreq? It's fairly similar to what you propose, except it uses transactions and not blockchain size, as transactions are already computed (so don't require extra checkpoints data)... Or, as said, feel free to write a patch yourself.    @laanwj @schildbach I still see week(s) in the current code. You say that is fixed by adding it to the translations - that isn't done yet then?
2310	13650028	2013-02-16T13:53:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13650028	sipa	qubez	@laanwj Updated to your latest pull's code (I think...)    @qubez If you're keen on making graphs, can you compare with the method implemented in this pullreq? It's fairly similar to what you propose, except it uses transactions and not blockchain size, as transactions are already computed (so don't require extra checkpoints data)... Or, as said, feel free to write a patch yourself.    @laanwj @schildbach I still see week(s) in the current code. You say that is fixed by adding it to the translations - that isn't done yet then?
2310	13650028	2013-02-16T13:53:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13650028	sipa	laanwj	@laanwj Updated to your latest pull's code (I think...)    @qubez If you're keen on making graphs, can you compare with the method implemented in this pullreq? It's fairly similar to what you propose, except it uses transactions and not blockchain size, as transactions are already computed (so don't require extra checkpoints data)... Or, as said, feel free to write a patch yourself.    @laanwj @schildbach I still see week(s) in the current code. You say that is fixed by adding it to the translations - that isn't done yet then?
2310	13650028	2013-02-16T13:53:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13650028	sipa	schildbach	@laanwj Updated to your latest pull's code (I think...)    @qubez If you're keen on making graphs, can you compare with the method implemented in this pullreq? It's fairly similar to what you propose, except it uses transactions and not blockchain size, as transactions are already computed (so don't require extra checkpoints data)... Or, as said, feel free to write a patch yourself.    @laanwj @schildbach I still see week(s) in the current code. You say that is fixed by adding it to the translations - that isn't done yet then?
2310	13650757	2013-02-16T14:37:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13650757	Diapolo	schildbach	@schildbach As long as the english translation master file is not updated in the correct way, you will see this generic string. Most of the time I update these file or laanwy does. This is a non-issue, really :).
2310	13653022	2013-02-16T15:35:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13653022	laanwj	sipa	@sipa yes this is the last version, and indeed the translations still have to be updated
2310	13683237	2013-02-17T09:30:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13683237	schildbach	laanwj	@laanwj emphasis on the "and". Probably it was "and 0 hours", I just wanted to describe the scheme. Could in future as well happen with "and 0 years" if you decide to add centuries.
2310	13684671	2013-02-17T11:43:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13684671	schildbach	laanwj	@laanwj Ok thanks for fixing.    With the current version, there is another problem: The progress bar does not appear to progress well. It started with about 100 week(s) behind, and the bar was nearly empty. Now I'm at 29 week(s) behind, and the bar is filled by perhaps 15%. I'd expect to be filled either at about 70% or at about 85%, depending on if the progress is relative to genesis or to app start.    Actually I'm not convinced that a progress bar is a suitable metaphor for blockchain download at all, because a) download never finishes and b) the blockchain is not a chain.
2310	13686666	2013-02-17T14:31:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13686666	schildbach	laanwj	@laanwj Please read my report. My arguement is that about 15% fits neither calculation. Genesis was 210 weeks ago, in my test case I had 29 weeks to go. In terms of time, I had 86% done, yet it showed only about 15%. In terms of transaction I cannot say, but if you look at  https://blockchain.info/charts/n-transactions  its pretty clear visually that the integral before "29 weeks ago" is more than 15% compared to the integral after.
2310	13686761	2013-02-17T14:37:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13686761	sipa	schildbach	@schildbach That is because signature verification is only enabled after the last checkpoint, so transaction after that  are given much higher weight in the calculation (15 times more). Feel free to suggest a better factor (or heuristic for determining it), but for a test I did, this resulted in a very accurate measurement of processing time.
2310	13691552	2013-02-17T19:18:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13691552	qubez	schildbach	Signature verification gets "turned on" only for the last 5000 blocks - the problem @schildbach is describing is that most of the download time is downloading blocks 0-216116, the progress of which is figured as 50% by 108058, but the actual percentage of blockchain size/transactions downloaded and processed by then is only about 2% - (see area under curve in my graphic above).    That's the problem which my big unacknowledged post describes a way to fix. Such a fix needs to mess with checkpoints.cpp; you're messing with checkpoints.cpp...      This pull is two things:  1 - bar wording changed ("blocks remaining" -> "days behind")  2 - post-final-checkpoint "correction factor"    "# 2" being here has made it a place to discuss the other missing code:  3 - correction of progress bar percentage to reflect actual download progress (size MB) instead of block number.    If you had just changed the wording with this pull, then "lets also fix # 3" likely wouldn't be bikeshedded here (I searched instead of filing a new issue.)      I figure I could do # 3 with one very long weighted sum, but I'm at the "build env, installed git, now..." part of being able to code/submit.
2310	13694929	2013-02-17T20:41:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13694929	sipa	qubez	@qubez Using block chain size or transaction count shouldn't matter much - they are very correlated.    What this pull does is change the progressbar to reflect "verification time progress". Effectively, it counts/estimates transactions, weighing those after the last checkpoint higher, as those require higher much more CPU.    The factor used to scale post-checkpoint transactions should reflect the time factor (download + process + sigcheck) / (download + process). The factor that is currently hardcoded (15.0) was determined by running on some system, and indeed not taking download time into account. Doing so would probably result in a lower number. Feel free to do benchmarks so the factor can be improved.    If I understand you correctly, you suggest that your method (using block chain size, and hardcode sizes in the checkpoints) will better account for download time? I'm not sure about that - assuming transactions have a constant size (which, on average, is true) and the post-checkpoint time factor is reasonably, the estimation implemented here should be very accurate.
2310	13698102	2013-02-17T22:16:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698102	sipa	qubez	@qubez I think you misunderstand this patch, given the graph above. I do not have a constant time per block (with a different speed before/after the checkpoint) - it's a constant time per _transaction_ (with a different speed before/after the checkpoint), and transactions have a pretty constant size on average, so it's proportional to the size in bytes of the chain.    Also, I do not claim the current implementation is correct for everyone. That's not possible with a constant slowdown factor after the checkpoint. For it to be exact, this factor would depend on whether or not your downloading (or reindexing from disk), the degree of parallellism you have for script validation, and a few other things probably.    What I do claim, is that given a good factor (specifcally for the user's system - abstracting from how that factor is obtained), it is accurate in the general case. For example, if download time dominates everything and local processing/verification can be ignored, setting the factor=1 should result in more or less the same progress you'd calculate.
2310	13698250	2013-02-17T22:25:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698250	gmaxwell	qubez	@qubez Please don't post graphs which are pure conjecture. If you're going to go through the trouble of making a graph please make it on an actual measurement. What you're proposing is actually just a less accurate version of what Sipa already implemented his change uses the transaction count which is very closely related to size and more strongly correlated with the work than size is).
2306	17197850	2013-04-29T22:08:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17197850	paulproteus	tariq786	Thanks to @tariq786 for the fix!
2305	13540695	2013-02-14T10:08:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13540695	sipa	Lohoris	@Lohoris The problem is not a corrupted downloaded file - that's easy. In your case, the database is corrupted, despite several systems which try to prevent ever getting an inconsistent state on disk. You also don't need to redownload anything. Starting with -reindex will rebuild the database using the block chain data you already have.
2305	24428307	2013-09-13T22:15:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24428307	gmaxwell	nikolajsheller	@nikolajsheller Yes, though the official Linux binaries in tar form are for ubuntu.
2305	28221936	2013-11-11T17:43:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28221936	raamdev	sipa	@sipa The only two files that I kept were `peers.dat` and `wallet.dat`. I deleted everything else and every time I started the Bitcoin-Qt client I received the "System Error: Database Corrupted" message. It wasn't until I deleted everything *including* the `peers.dat` file that the problem resolved itself.
2294	13358973	2013-02-10T19:14:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13358973	schildbach	laanwj	@laanwj If you want to mimic the behaviour of Bitcoin Wallet, you should have a look at https://code.google.com/p/bitcoin-wallet/source/browse/wallet/src/de/schildbach/wallet/ui/BlockchainStateFragment.java (lines 145-169).    First of all, it does not show seconds or minutes. It starts with "1 hour behind."    1-48 hours: x hours behind  2-14 days: x days behind  2-xx weeks: x weeks behind    I'm thinking of even allowing months.
2294	13360047	2013-02-10T20:11:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13360047	schildbach	gmaxwell	@gmaxwell I had these thoughts as well about 18 months ago. Back then I was seeing max 45 minutes gap, and I thought timestamps are not off more than 15 minutes. Note that I have a separate warning for when your system clock is off.    So how many minutes of threshold would you suggest?
2294	13360079	2013-02-10T20:12:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13360079	schildbach	laanwj	@laanwj Its probably shed-painting, but people start to think in weeks, months or even years if you have larger timespans. Nobody has got a feel of how much 1237 days actually are.
2294	13376024	2013-02-11T11:14:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13376024	sipa	schildbach	I agree with @schildbach that when numbers get too large, they become hard to interpret. I wonder if using more decimals just to show progress would be useful. For example: X hours (2-48 hours), X.X days (2-14 days), X.XX weeks (14-60 days), X.XXX months (>60 days). Certainly the decimals don't really convey any actual information anymore, but as a whole it's easy to interpret and does show progress.
2294	13378259	2013-02-11T12:35:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13378259	sipa	laanwj	@laanwj Yeah, just brainstorming - I'm not convinced about the many decimals idea either. Adding dots sounds like an easy and useful way to convey progress as well.
2294	13418966	2013-02-12T05:38:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13418966	laanwj	schildbach's,	Ok I changed the time units to @schildbach's, and for the first time in history the spinner does something useful: it spins a frame every time setNumberOfBlocks is called with a changed number of blocks. So both liveness and progress is covered again.
2294	13481983	2013-02-13T10:02:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13481983	sipa	laanwj	@laanwj Yes, it actually seems to speed up a bit, as the very early blocks have almost no transactions in them, but still require a per-block processing time.    Only disadvantage is that it requires 4 measured/guessed control parameters. Guessing them wrong doesn't result in worse behaviour than we already have, but it does require some extra work when adding a checkpoint.
2294	13576304	2013-02-14T20:21:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13576304	sipa	gavinandresen	@gavinandresen In the added refactor commit, I've added some comments.
2294	13579066	2013-02-14T21:17:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13579066	sipa	Diapolo	@Diapolo More seriously: I'll add some comments :)
2291	21071737	2013-07-16T20:38:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21071737	luke-jr	jgarzik	@jgarzik How does this break the existing API? From a readover, it seems to behave the same when called without options...?
2291	21090367	2013-07-17T03:48:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090367	luke-jr	mb300sd	@mb300sd BTW, this needs a rebase.
2283	13595121	2013-02-15T07:19:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13595121	Diapolo	laanwj	@laanwj ping
2282	16024708	2013-04-07T21:30:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16024708	gmaxwell	codeshark	@codeshark Does use of pwalletMain here to get the account gum up the mult-wallet support?
2282	16024773	2013-04-07T21:34:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16024773	sipa	gmaxwell	@gmaxwell All wallet RPCs receive an extra parameter pointing to the wallet, that will indeed need to be adapted for this method too, but it's a trivial change.
2278	13228879	2013-02-07T09:57:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13228879	laanwj	gavinandresen	Agree with @gavinandresen . I've done some work with random access to compressed data in the past and IMO it's not worth the complexity in the case of bitcoin, especially if the savings is only 25% in the best case (without re-positioning structures and/or extra block resets). On devices with limited storage space you don't want to run a full node in the first place.
2277	13184403	2013-02-06T14:34:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13184403	gavinandresen	sipa	Not the right fix according to @sipa -- instead, need to make sure that invalid blocks always return an invalid CValidationState.
2275	13466153	2013-02-12T23:32:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13466153	gavinandresen	SergioDemianLerner	@SergioDemianLerner : RE: nSigHT & 0x83 : good idea.    RE: why not extend to OP_CHECKSIG:  the cache only exists during the execution of a single OP_CHECKSIG, because standard transaction types only contain either a single OP_CHECKSIG or an OP_CHECKMULTISIG in each scriptPubKey.    If we ever have lots of transaction scriptPubKeys with multiple OP_*SIGs, then it would make sense to extend the cache to any signature operation.    Note that this is not intended to help with attackers who might create blocks full of non-standard transactions; I believe that is expensive enough (attacker has to be willing to create blocks that are very likely to be orphaned) that it isn't a problem.
2275	16086333	2013-04-08T23:50:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16086333	gavinandresen	sipa	Implemented @sipa and @SergioDemianLerner suggestions, and rebased to master so pull-tester is happy.
2275	16086333	2013-04-08T23:50:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16086333	gavinandresen	SergioDemianLerner	Implemented @sipa and @SergioDemianLerner suggestions, and rebased to master so pull-tester is happy.
2275	16353840	2013-04-14T16:29:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16353840	sipa	gavinandresen	@gavinandresen Sorry, this was a dangerous suggestion of mine: the sighash depends on the position of the CHECKSIG in the script, when there are OP_CODESEPARATORs present. You should probably index the map by pbegincodehash as well.
2275	16409536	2013-04-15T20:30:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16409536	sipa	SergioDemianLerner	@SergioDemianLerner I'm in favor of removing OP_CODESEPARATOR, but I think you mean a soft fork. As far as I know, there has never ever been a hard fork in Bitcoin's history (but we'll do one in 1 month...). Also, there's no need for one here. Simpy turn OP_CODESEPARATOR into a 'return false' - no need to add new semantics.    What do you mean by putting a "*" in the script?
2272	16034852	2013-04-08T06:38:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034852	Diapolo	sipa	@sipa Can you comment to my question above ;)?
2268	13063520	2013-02-04T06:07:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13063520	Diapolo	laanwj	@laanwj I'd vote for checking if we are using the current version or if there were known security issues with our used one.
2261	13361312	2013-02-10T21:17:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13361312	sipa	Lohoris	@Lohoris please try v0.8.0rc1, and see whether this improves the situation.
2261	13362095	2013-02-10T21:55:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13362095	Lohoris	sipa	@sipa for some reason it started re-downloading the blockchain from 0, so it's going to take a while... I'll let you know : )
2261	13386547	2013-02-11T15:58:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13386547	gmaxwell	lohoris	@lohoris Are you saying that it still takes 20 minutes to start?    Can you post the debug.log text from on of these startup instances?  This doesn't make a lot of sense to me that just sounds broken even if your machine is very slow.
2259	13153861	2013-02-05T21:48:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13153861	rdponticelli	gmaxwell	Added @gmaxwell suggestion, and a comment on the source.
2255	12991158	2013-02-01T11:53:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12991158	sipa	rdponticelli	@rdponticelli: you can just push to a branch already associated with a pull request to update it.
2251	12970461	2013-01-31T22:43:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12970461	colindean	luke-jr's	Shall I     1. Back out the changes to the translation files other than English?  2. Find where @luke-jr's suggestion should be inserted into the code and change the English translation to match it?  3. Add the copyright notice to all of the Qt files?    I unfortunately am going out of the country for the next week and won't likely be near an Internet connection until the evening of Thursday, 2/7. If whatever action is recommended is timely (I don't recall when 0.8 is due, or if this is even fodder for it), someone else is welcome to take my work and build on it.
2249	12912967	2013-01-30T21:16:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12912967	gavinandresen	sipa	@sipa : I stand corrected: it fixes a variant of #2228 where no IBD was done if you start with an empty data directory and -reindex.
2248	12912802	2013-01-30T21:12:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12912802	Diapolo	sipa	@sipa Agreed, don't we have one in main.h for this?
2245	12905445	2013-01-30T18:47:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905445	petertodd	Diapolo	ACK, timestamps and tx look pretty boring to me...    @Diapolo Ha, and next a fundraising drive!
2243	13121496	2013-02-05T09:37:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13121496	sipa	TheBlueMatt	@TheBlueMatt can you force a pulltester run on this pullreq?
2243	13135129	2013-02-05T15:41:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13135129	luke-jr	gavinandresen	@gavinandresen That sounds like a good idea to me. Shall I add it to this pullreq?
2241	14121602	2013-02-26T15:49:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14121602	luke-jr	maqifrnswa	@maqifrnswa memenv is only needed for test_bitcoin.
2236	12873262	2013-01-30T04:02:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12873262	sipa	jgarzik	@jgarzik _FILE_OFFSET_BITS changes the size of off_t, and makes fopen transparently support large files. _LARGEFILE64_SOURCE adds off64_t, fseeko64()... in addition to the normal ones.
2234	12870276	2013-01-30T02:07:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12870276	jgarzik	sipa	I think @sipa said he was going to check in a script that would generate these from seeds.txt, so that at least the list is a little bit verifiable.
2233	12839320	2013-01-29T15:17:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12839320	schildbach	laanwj	@laanwj In this case, I would avoid using timespans with second precision. Use the term "less than a minute ago", that's accurate enough. And you don't expect it to increment under your eye.
2233	12854790	2013-01-29T20:05:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12854790	Diapolo	laanwj	@laanwj ``I prefer that solution to franctically updating on a timer.``  I dunno what franctically means, sorry ;). Are you fine with a pull that removes cached values from ClientModel::updateTimer() so that statusbar and so on get's updated via an interval?
2229	12872418	2013-01-30T03:25:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872418	sipa	gmaxwell	@gmaxwell Largest advantage is the ability to cat the files together to create a bootstrap.dat :)    ... though I'm sure people would otherwise complain about wasted disk space too :p
2225	13361401	2013-02-10T21:22:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13361401	sipa	gavinandresen	This seems strange indeed, certainly now the block chain doesn't need bitdb anymore.    @gavinandresen I assume this was added for the wallet salvage code. Is it (still) necessary?
2224	12745825	2013-01-27T01:21:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12745825	sipa	luke-jr	@luke-jr seems I completely forgot about that. Shouldn't be hard to integrate rejection reasons into this, though.
2224	12814537	2013-01-29T00:49:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12814537	sipa	laanwj	I added a commit to deal with LevelDB errors. It seems to work, but I don't like it. The exception is being caught in several places inside main to do be able to do a graceful shutdown, but it's unclear if all cases are covered (though the worst case is a lesser clean shutdown...). The reported error on stderr can end up being "Error: Error: system error: Database corrupted", followed by shutdown. I guess some hint to try restarting with -reindex should be given. The GUI version relies on ThreadSafeMessageBox, and before the UI is loaded, this simply doesn't do anything, and the program exits without any hint. @laanwj any way to improve that?    All in all, this will indeed catch errors and cause a shutdown, but it's ugly code and ugly reporting.
2223	12742542	2013-01-26T21:24:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12742542	gmaxwell	luke-jr	@luke-jr Without  TX replacement the purpose non-final transactions have is very limit the only difference this will make is that you have to transmit them out of band until they lock... which you already had to do if you wanted the ability to replace.    What this fixes is that right now the wallet will display transactions that have no conceivable chance of confirming. Unless you have a more detailed understanding of the system and know to look for the impossibly far locktime you'll think that it at least has reasonable odds.  This is misleading and makes Bitcoin even more unsafe for people in practice. Limiting them also closes down some potential areas that DOS vectors could be found.    The obvious alternatives to outright disabling them e.g. relaying transactions only x hours or less before they lock turn out to be pretty complicated to implement in the wallet (e.g. what do you do about txn whos parents were above threshold but later fall below it) and don't make an obvious improvement.
2223	12742796	2013-01-26T21:38:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12742796	schildbach	gavinandresen	@gavinandresen Do you also account for the fact that an attacker can send a timeLocked tx and then a plain normal tx that builds on the first one? The second one looks normal but in fact will also be timeLocked.
2223	12742861	2013-01-26T21:42:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12742861	gmaxwell	goonie	@goonie The non-final txn should not enter the memory pool, so its children should be treated as orphaned.
2223	12743900	2013-01-26T22:46:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12743900	luke-jr	gmaxwell	@gmaxwell I guess that makes sense... I suppose if someone comes up with other valid use cases, this can be reconsidered in the future anyway.
2220	15306058	2013-03-22T16:17:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15306058	laanwj	CodeShark	@CodeShark I still plan to merge this as one of the next things, can you rebase please?
2220	15715787	2013-04-01T13:45:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15715787	Diapolo	CodeShark	@CodeShark Is it intended that bitcoingui.cpp and walletview.cpp seem to have quite much duplicate code in them? It would also be nice, if you could take a look at #2436. I created pulls for some other stuff that was not working, but perhaps there is more. We need to be really careful with such pulls IMHO.
2219	12752371	2013-01-27T10:29:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12752371	Diapolo	laanwj	This discussion seems rather controversial, so @laanwj would you ACK this, if I just disable the button on valid address entered? I'm fine with such a solution.    Edit: Changed to enable/disable instead of show/hide.
2219	12784395	2013-01-28T14:40:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12784395	laanwj	philip	@philip yes, disabling is fine
2219	21396466	2013-07-23T06:58:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21396466	Diapolo	laanwj	@laanwj @luke-jr Is there any interest in this? If no I'm fine with just closing this pull.
2219	21396466	2013-07-23T06:58:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21396466	Diapolo	luke-jr	@laanwj @luke-jr Is there any interest in this? If no I'm fine with just closing this pull.
2218	21396495	2013-07-23T06:58:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21396495	Diapolo	laanwj	@laanwj Can you tag this with GUI?
2216	12728082	2013-01-26T00:56:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12728082	Diapolo	gmaxwell	@gmaxwell There are currently ``18 open issues`` tagged for 0.8, so there is plenty of time :-D. Perhaps some core dev needs to define which of these are really wanted for 0.8 IMHO!
2216	12793232	2013-01-28T17:30:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12793232	gavinandresen	Diapolo	@Diapolo : I went through and removed the 0.8 milestone from everything that I consider non-critical. I would like to get a rc1 out today or tomorrow.
2216	12793401	2013-01-28T17:33:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12793401	Diapolo	gavinandresen	@gavinandresen Thanks, makes sense and I support that cleanup :).
2215	12752391	2013-01-27T10:32:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12752391	Diapolo	luke-jr	@luke-jr It was one of your feature-requests, can you take a look if this does what you wanted ;)?
2215	13224184	2013-02-07T06:58:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13224184	Diapolo	laanwj	@laanwj Addressed your concerns :).
2215	15027292	2013-03-17T17:59:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027292	Diapolo	laanwj	@laanwj I'll rebase after the header / cpp cleanup got in, so perhaps we can also get this in soonTM.
2213	12689181	2013-01-25T05:59:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12689181	Diapolo	laanwj	@laanwj Are you ok with the idea to have a fully translated RC ;)?
2210	13223618	2013-02-07T06:30:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13223618	Diapolo	BitcoinPullTester	Seems to be a @BitcoinPullTester error...
2210	15025632	2013-03-17T16:28:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15025632	Diapolo	laanwj	I'm no Linux guy, sorry... is there any way to point your compiler to the old Qt4 instead of Qt5?  As long as @laanwj doesn't merge this, because of other refactoring pulls you will be unlucky, sorry.
2210	15027043	2013-03-17T17:44:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027043	laanwj	Diapolo	@Diapolo I'm fine with merging this now.     Seems there is a merge conflict though:        src/qt/paymentserver.cpp:122: error: invalid use of incomplete type 'struct QUrl'      /usr/include/qt4/QtCore/qmetatype.h:260: error: forward declaration of 'struct QUrl'
2210	15027105	2013-03-17T17:47:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027105	Diapolo	laanwj	@laanwj Indeed, I removed QUrl from paymentserver.cpp by mistake. I hope @BitcoinPullTester is happy now after the last update.
2210	15027105	2013-03-17T17:47:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027105	Diapolo	BitcoinPullTester	@laanwj Indeed, I removed QUrl from paymentserver.cpp by mistake. I hope @BitcoinPullTester is happy now after the last update.
2206	12616023	2013-01-23T19:00:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12616023	sipa	gmaxwell	@gmaxwell Right, it's only at pre-allocation time (which makes sense, when just looking at block storage), but we still need to prevent out-of-disk-space when doing coincache flushes, as these are large bulk writes.
2204	16892867	2013-04-23T23:17:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16892867	sipa	gavinandresen	@gavinandresen Does this still exist after the threads rework?
2203	12588012	2013-01-23T09:39:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12588012	sipa	Diapolo	@Diapolo pretty sure we'd have gotten tons of complaints from windows users if that was the case. Are you able to import from a >2GiB bootstrap.dat?
2203	12589503	2013-01-23T10:25:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12589503	Diapolo	sipa	@sipa I never played around neither with that auto-import, nor with the normal -loadblock at all. Can you hand me the link to the bootstrap.dat download?
2203	12595124	2013-01-23T13:22:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12595124	Diapolo	sipa	@sipa I had no problems while bootstrapping!
2203	12596838	2013-01-23T14:11:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12596838	sipa	Diapolo	@Diapolo thanks, good to know. So the problem is really only on Linux 32-bit. Maybe OSX 32-bit as well, but I have no way to test that.
2203	12616154	2013-01-23T19:03:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12616154	sipa	gavinandresen	@gavinandresen DId you ever try importing a >2GiB file on 32-bit OSX builds?
2199	12562385	2013-01-22T19:46:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12562385	sipa	gavinandresen	@gavinandresen If this is true: https://bitcointalk.org/index.php?topic=137680.0 it perhaps does make sense to define our own enum with priorities in util.h, and have CreateThread take such an enum value. It could be a no-op in all but WIN32.
2199	12564184	2013-01-22T20:20:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12564184	Diapolo	gavinandresen	@gavinandresen I think your point is valid in terms of CPU mining beeing unsupported (although I love to use it on testnet to quickly generate a block), but as @sipa pointed out there is that "issue" in Windows, that the whole OS is lagging, when the ThreadScriptCheck is run. Also there is ThreadMessageHandler2, which uses a non-default priority on Windows... dunno why, but that is the current state ;).
2199	12564184	2013-01-22T20:20:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12564184	Diapolo	sipa	@gavinandresen I think your point is valid in terms of CPU mining beeing unsupported (although I love to use it on testnet to quickly generate a block), but as @sipa pointed out there is that "issue" in Windows, that the whole OS is lagging, when the ThreadScriptCheck is run. Also there is ThreadMessageHandler2, which uses a non-default priority on Windows... dunno why, but that is the current state ;).
2199	12583518	2013-01-23T06:39:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12583518	Diapolo	gavinandresen	Added:  - removes thread priority code for non-Windows OSes, so these will just    get a no-op    Still, I think it makes sense to evaluate if the current prios are chosen wisely or if there is room for improvement.    @gavinandresen Are you still on NACK or does it now seem to make sense for Windows :)?
2195	12748636	2013-01-27T06:05:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12748636	CodeShark	luke-jr	@luke-jr: I added instructions for Ubuntu Precise users on how to install db4.8 using the steps you gave earlier.
2193	12496977	2013-01-21T13:06:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12496977	Diapolo	laanwj	@laanwj Yeah, I checked there and we don't require a query in an URI, so I removed that check and updated this pull. As you can see pull tester is fine with it now :).
2188	12568902	2013-01-22T21:55:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12568902	gmaxwell	mikehern	@mikehern this response make it feel to me that you're now railroading the change.  Personally, this is triggering a reflexive negative reaction. I think the fact that you feel the need to defend it this way is a sign that it may be too immature to include.  Better protocols can come in the future, but old ones need to be supported a long time.    WRT latency, you're talking about 1x RTT for an event that happens once per ten minutes in the steady state. Or an overhead or a 0.01% performance difference for 100ms RTT.  Am I missing something there?
2188	12571490	2013-01-22T22:49:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12571490	TheBlueMatt	gmaxwell	@gmaxwell Im not so sure that the whole bloom filter stuff is/was railroaded...actually it was pretty well thought/implemented through.  This pull itself one could argue is being railroaded, but only because it doesnt make sense for the bloom code as-is to be included in any releases (in part due to changes to bitcoinj that are also only just now happening).  Also, the minute difference that this pull represents, IMHO, is really not something that merits a large discussion.
2183	12321875	2013-01-16T15:00:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12321875	Diapolo	sipa	Perhaps via IRC or the bitcointalk.org forums, but I consider issue directly related to specific issues with the client. Your complaint may be true, but in terms of development process or coding changes it's much more of a long-term goal. Great work is currently done, as @sipa did a great job with switching to another block/coin database and reduce file-sizes and a whole lot of other things.
2183	12322040	2013-01-16T15:03:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12322040	sipa	pascalBokBok	@pascalBokBok Just to clarify: the purpose of the reference client is being an implementation of a full Bitcoin node. It can by definition not do anything but verify every transaction in history.    There are a number of solutions, if this is a problem:  * If you're unable to spend the resources required, you can run a lightweigh (SPV) client like MultiBit, which uses a lower security model, but is a lot faster (as it doesn't verify transactions, only block headers) and doesn't need to store transactions the user isn't interested in.  * Even though a fully validation node is required to verify everything, it doesn't necessarily need to store everything indefinitely. Changing this poses risks to the network (as nodes still need to find archive nodes that do have history to bootstrap from), but it will probably be implemented some time.  * We might move to a model where the client also incorporates a lighter security model, and upgrades itself when possible/chosen by the user. This is a big change, and will probably take a while before it is implemented.
2183	12323124	2013-01-16T15:25:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12323124	pascalBokBok	sipa	@sipa cool. Didn't know about multibit. According to multibit installer: "MultiBit is experimental software. Do not use it with large amounts of bitcoin." Since I administer an associations bitcoins I'm somewhat hesitant to use it.    Problem is people can't get started without waiting 24 hours with their computer online and their mobile broadband quota being killed.
2183	12324665	2013-01-16T15:54:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12324665	luke-jr	pascalBokBok	@pascalBokBok All of Bitcoin is experimental...
2183	12330607	2013-01-16T17:43:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12330607	Diapolo	laanwj	@laanwj ACK to close this "issue".
2179	12285768	2013-01-15T19:52:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12285768	gavinandresen	mikehearn	@mikehearn : good idea.
2178	12238705	2013-01-14T20:43:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12238705	sipa	SergioDemianLerner.	Now I see. Yes, you're right @SergioDemianLerner. That line would prevent the amplication. It's still something that's hard to exploit nonetheless, IMHO.
2178	12238955	2013-01-14T20:49:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12238955	sipa	gavinandresen	@gavinandresen about 2): WHAT? and let those fill up everyone's UTXO sets forever?
2178	12239032	2013-01-14T20:51:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12239032	gmaxwell	sipa	@sipa The UTXO bloat can be addressed by only including them when confirmed. The penny flood breaking things can be addressed by excluding the dust in the primary coin selection but then adding them back into transactions with change as a post-processing step. ... but the incentivize the latter we need a different priority rule.
2178	12239243	2013-01-14T20:56:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12239243	sipa	gmaxwell	@gmaxwell Excluding them from the coin selection process is very different from not adding them to the wallet.
2178	12240900	2013-01-14T21:32:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12240900	gavinandresen	SergioDemianLerner	@SergioDemianLerner : the default key is generated randomly (because keypool keys are generated randomly).    If there are ever bitcoins sent to it (thereby revealing it in the blockchain), then it is changed. That is what this code does.    So, again, unless you tell the attacker what your default key is, there is no vulnerability. You would have to send 2**159 transactions on average to guess a default key.
2177	15659640	2013-03-29T20:40:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15659640	Diapolo	laanwj	@laanwj Agreed, the overview page could get some more details or new stuff... I have no great idea yet.
2177	15671682	2013-03-30T09:14:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671682	Diapolo	schildbach	@schildbach Your vote here, Just remove or move to debug-window?
2176	15832465	2013-04-03T11:55:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15832465	Diapolo	schildbach	@schildbach Can you please close the ticket, as the feaure is now in the client.
2175	12216575	2013-01-14T12:32:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12216575	Diapolo	laanwj	I'm also fine with removing that label. The other solution (to update counting etc.) would be much more effort and could create other problems IMHO.    @laanwj It's a little weird to me, I have a testnet wallet, which shows 15 tx on overviewpage, 12 are displayed in the tx list and listtransactions "" 100 gives me 18 tx.    Edit: Seems I found out what the reason for this is. I have 3 tx, where I sent coins to an address in my testnet wallet (from and to is the same), which creates a send and an receive tx, which both have the same tx ID. Also orphaned transactions are not shown in the tx list, but via the listtransactions RPC command.    Edit 2: I would suggest to move the label from overviewpage to debug window and make it read ``unique transaction IDs`` with a help message ``Total number of unique transaction IDs in wallet``. What about that?
2174	18693407	2013-05-30T16:52:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693407	jgarzik	CodeShark	Poke @CodeShark
2170	12165937	2013-01-11T22:08:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12165937	Diapolo	Goonie	@Goonie As I said above, you found a bug. A fix is in the referenced pull.
2168	12141856	2013-01-11T12:15:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12141856	sipa	Diapolo	@Diapolo Around 500 MB extra in storage, and a lot of extra I/O. I didn't spend much effort optimizing this, as I don't consider this functionality a priority.
2168	12143294	2013-01-11T13:02:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12143294	Diapolo	sipa	@sipa Thanks, I was just interested in the technical base aspects :).
2168	12229369	2013-01-14T17:29:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12229369	sipa	mikehearn	@mikehearn I'm absolutely against making this available to the P2P network. If there is one thing I don't want services to depend on, then it is the availability of a fully indexed transaction history. If you really need one, fine, but maintain it yourself.
2168	12709506	2013-01-25T16:52:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12709506	sipa	gavinandresen	@gavinandresen RE test plan:  * getrawtransaction without txindex should work for not-fully spent confirmed transactions, mempool transactions or transactions in the relay cache. For not-fully spent confirmed transactions, it may be slower than with txindex present. In general, without txindex I consider getrawtransaction to just work on a best-effort basis.  * extra disk space caused by txindex will be in the blktree/ directory    Otherwise the plan looks correct and complete to me.    EDIT: -reindex doesn't cause a slow startup, the startup is always instant, but importing (and thus building the txindex) happens in the background.
2167	12393361	2013-01-17T21:45:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12393361	Diapolo	sipa	@sipa I'm going to try the pulltester binary with WinXP tomorrow :).
2167	12418847	2013-01-18T11:53:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12418847	Diapolo	sipa	@sipa Did an IBD with bitcoin-qt.exe, tried a wallet encryption and there were no errros, the client started and closed just fine as expected. Btw. it seems @BitcoinPullTester is using an older OpenSSL version then we do with Gitian.
2167	12418847	2013-01-18T11:53:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12418847	Diapolo	BitcoinPullTester	@sipa Did an IBD with bitcoin-qt.exe, tried a wallet encryption and there were no errros, the client started and closed just fine as expected. Btw. it seems @BitcoinPullTester is using an older OpenSSL version then we do with Gitian.
2165	12093999	2013-01-10T12:47:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12093999	Diapolo	laanwj	@laanwj I intend to extend the addressbook context menu with an option to directly feed the send coins tab with address and label. This pull is nearly ready, but I thought it would be good to get this and the addrbook fixes merged before.
2165	12543264	2013-01-22T13:00:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12543264	Diapolo	laanwj	@laanwj ping (seems 0.8 progress is speeding up, thats why I'm pinging you more often ^^)
2165	12559014	2013-01-22T18:37:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12559014	Diapolo	laanwj	@laanwj This is the screen directly after starting the client and switching to the addressbook:  ![1](https://f.cloud.github.com/assets/1419649/87452/4ffc9a72-64c2-11e2-9f23-28bc68c0fdc9.png)    It seems like the first address is "somewhat" selected, so I tried to access the context menu via Keyboard, which works. Selected "delete" and nothing happened. This is really the only case, when I could create a "nothing is selected". When I delete an address there is indeed a situation, where really NOTHING is selected, but this case doesn't even allow to open the context menu.    Now switching to send coins leads to his screen:  ![2](https://f.cloud.github.com/assets/1419649/87454/9eafc1a8-64c2-11e2-9250-50ea63a30279.png)    When I now try to access the context menu via keyboard there is NO "delete" action at all. So I really dunno how one can trigger a delete action for own addresses...
2165	12622513	2013-01-23T21:10:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12622513	Diapolo	laanwj	@laanwj My whish is to get your final decision on this, so we can get it into 0.8 RC :)! Your final vote counts.
2165	12623777	2013-01-23T21:35:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12623777	Diapolo	laanwj	In that state I consider your vote a help, you say revert that deleteAction change and I'll do this asap :).    Edit: @laanwj I chose to revert that change!
2164	12157777	2013-01-11T18:46:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12157777	Diapolo	gavinandresen	Perhaps we have a problem when aborting -reindex then? I'll try a -reindex later...    @gavinandresen I also got a MSVC++ Runtime error message, while the -reindex was running. That was with an own build... restarting the client without -reindex just leads to the same crash. Will need to start an IBD I guess.
2161	12067863	2013-01-09T21:34:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12067863	sipa	gavinandresen	@gavinandresen done
2161	12235785	2013-01-14T19:41:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12235785	gavinandresen	jgarzik	@jgarzik : the fClient work is in the 'blockheaders' branch here. The only code snippet I got from Satoshi is now merged (the signature cache).
2160	12141641	2013-01-11T12:07:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12141641	petertodd	sipa	@sipa: Modified to return the offset itself.
2158	12024281	2013-01-08T23:57:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12024281	gavinandresen	gmaxwell;	I agree with @gmaxwell; the harm to the network of filling up more "I'm listening" ports of your peers outweighs any possible benefit of having more than 8 outgoing connections.  Closing.
2157	11999520	2013-01-08T14:44:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11999520	Diapolo	TheBlueMatt	@TheBlueMatt Can you fix @BitcoinPullTester?  ``fatal error: error writing to /tmp/ccBCY0YL.s: No space left on device``
2157	11999520	2013-01-08T14:44:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11999520	Diapolo	BitcoinPullTester?	@TheBlueMatt Can you fix @BitcoinPullTester?  ``fatal error: error writing to /tmp/ccBCY0YL.s: No space left on device``
2157	12006664	2013-01-08T17:14:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12006664	Diapolo	laanwj	@laanwj Take a look here, the unsorted list caused some weird issues for me.    ![qSort](https://f.cloud.github.com/assets/1419649/50837/c9293020-59b6-11e2-8630-cc0b82c3b201.png)
2157	12134122	2013-01-11T07:18:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12134122	Diapolo	laanwj	@laanwj Take a look at #1839, it seems this indeed fixes the problem.
2157	12390686	2013-01-17T20:44:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12390686	Diapolo	laanwj	@laanwj ping :-P
2156	11974811	2013-01-07T22:19:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11974811	Diapolo	laanwj	@laanwj You are absolutely right, bad idea here :).
2155	11960899	2013-01-07T17:21:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11960899	gavinandresen	gmaxwell	@gmaxwell:    Cast from Decimal to float will be safe as long as floats are 64 bits.  Checking for that is a good idea:  "information about the precision and internal representation of floating point numbers for the machine on which your program is running is available in sys.float_info."    ... or maybe more straightforward (and more easily portable to other languages) would be a check routine that takes Decimal("20000000.00000003"), converts it to float, json encode/decode, and makes sure precision is not lost in the round-trip.    mmm, yeah, json encode/decode definitely better, because the json float encoder might decide to round/truncate...
2154	11955851	2013-01-07T15:34:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11955851	sipa	gavinandresen	@gavinandresen That doesn't make sense. This is for peers.dat, which doesn't use BDB at all, and I suppose CDbEnv will be gone as soon as we kick out BDB-based wallets.
2154	11983843	2013-01-08T04:05:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11983843	CodeShark	gavinandresen	@gavinandresen Noted and done.
2154	11997567	2013-01-08T13:49:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11997567	Diapolo	sipa	I think you are doing good work, but I'm sure you will get faster ACKs or merges, if you try to keep pulls smaller. Perhaps @sipa or other core devs can comment.
2154	12017209	2013-01-08T21:05:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12017209	sipa	CodeShark	Just for the record: I've been discussing these changes extensively with @CodeShark the past few days, and I think they are very valuable. They should make the code easier to understand and reuse.    Getting 0.8 out now certainly has priority over refactorings, but as these are almost entirely just code-movement changes, merging them shouldn't be too hard.
2154	12905016	2013-01-30T18:39:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905016	Diapolo	CodeShark	I'm sure @CodeShark intents to rework this pull into smaller more logical pieces after 0.8 is final.
2154	18926462	2013-06-04T17:47:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18926462	jgarzik	CodeShark	Agreed, RE holding other pullreqs, to avoid the endless rebase pain on @CodeShark 's part.
2154	18977111	2013-06-05T13:58:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18977111	sipa	jgarzik	@jgarzik Not sure you see the reason for those indirect pointers. They are there to break the dependency of net on main, and seen as such it seems perhaps weird, if the only user of net is main for now.    However, over time, net should turn into a class "CNetworkNode" or something, which exposes a way to listen for events. I suppose a boost::signal could be used right now instead, which more clearly shows its intention.    And please, the overhead of a pointer indirection is few orders of magnitude lower than even just allocating the buffer in which a message being processed is read...
2154	18996278	2013-06-05T18:13:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18996278	sipa	TheUni	Just so this isn't forgotten: @TheUni just noticed this doesn't update makefiles (yet)
2154	19019106	2013-06-06T01:00:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19019106	robbak	TheUni	ACK for FreeBSD - this branch builds and runs clean with the standard  FreeBSD adjustments.      On 6 June 2013 04:13, Pieter Wuille <notifications@github.com> wrote:    > Just so this isn't forgotten: @TheUni <https://github.com/TheUni> just  > noticed this doesn't update makefiles (yet)  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18996278>  > .  >
2154	19021448	2013-06-06T02:26:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19021448	CodeShark	sipa	@sipa I have deliberately avoided putting anything in core.cpp to avoid makefile issues for this merge. Eventually, it will probably make sense to move some of the code in core.h into core.cpp.
2154	19024746	2013-06-06T04:49:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19024746	sipa	CodeShark	@CodeShark You'll still at least need to add core.h to bitcoin-qt.pro, and while you're on it, I don't see any harm in adding core.cpp to the other makefiles too - that'll make it easier to move stuff there in the future.
2154	19026897	2013-06-06T06:17:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19026897	CodeShark	sipa	@sipa done  @TheUni core.h/core.cpp will have to be considered in what you're doing
2154	19026897	2013-06-06T06:17:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19026897	CodeShark	TheUni	@sipa done  @TheUni core.h/core.cpp will have to be considered in what you're doing
2145	11869901	2013-01-04T02:17:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11869901	sipa	gmaxwell	@gmaxwell there is a trivial undo test possible: verify their checksums. However, how meaningful is it to check undo data without checking the coin state - there is no scenario in which you need undo data but not coin state.    In way, the system is backwards. The coin state is by far the most important thing to verify, but unfortunately it is also almost the most expensive, and it already requires consistent blocks and undo data.    Regarding only checking very few with low dbcache... what would you suggest?    Also, the calculation for memory sizes based on transaction counts is only very approximately and spread over several types of caches (leveldb blktree, leveldb coindb, coins view cache). Doing the rollback pulls the transaction data in the global cache, and then changes to it in a memory-only cache on top of it, that is discarded. The transactions themself remain in the global cache though, afterwards.
2145	11869999	2013-01-04T02:22:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11869999	sipa	Diapolo	@Diapolo such a flag would be possible, but why add it? The next startup the database will most likely still be inconsistent, so it would be detected again (and if it isn't, maybe it was something temporary...).    For GUI users, I would like to see something like "Your database is corrupted. Do you want to rebuild it now, or exit?". For bitcoind I think the right approach is indeed quitting immediately with an error message instructing the user to restart with -reindex, so they can run the rebuild on their own terms (or perhaps copy a database from another instance or backup they have running).
2145	11870019	2013-01-04T02:23:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11870019	sipa	gmaxwell	@gmaxwell Suggestions for better reporting are welcome :)
2145	11883622	2013-01-04T14:03:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11883622	sipa	gmaxwell	@gmaxwell I've added a new level in between 1 and 2 (which verifies undo data). I've also changed the heuristic for determining how far to roll back a bit - it now aims for using +- 5-10 MB extra for validation, even with very small dbcache.
2144	11862012	2013-01-03T21:37:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11862012	Diapolo	Xenland	@Xenland Would that be sufficient?    ![signature](https://f.cloud.github.com/assets/1419649/41839/cc0169d8-55ed-11e2-8cfb-2a245b8f72f9.png)
2144	11920031	2013-01-05T21:15:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11920031	Xenland	Diapolo	@Diapolo Looks good, I can definitely instruct my users with that solution. Cheers!
2144	11929134	2013-01-06T14:38:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11929134	Diapolo	Xenland	@Xenland My patch got merged, you can now close this issue.
2144	11935053	2013-01-06T22:01:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11935053	Xenland	Diapolo	@Diapolo Thanks mate!
2141	11913681	2013-01-05T12:58:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11913681	Diapolo	laanwj	Can please some other core dev merge translations updates, as @laanwj seems to have not that much time to participate. I don't want to get in a hurry before we do 0.8 RCs as translators need time to catch up!
2137	11769197	2012-12-30T21:58:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11769197	SimonVrouwe	25BTC	Yes, in fact I change this label:  spaar-adres #01 @25BTC = 50.0  into this:  spaar-adres #01 @25BTC = 75.0    By clicking on the label and pressing F2.    --- On Sun, 12/30/12, Michael Ford <notifications@github.com> wrote:    From: Michael Ford <notifications@github.com>  Subject: Re: [bitcoin] Editing label single address in address book also changes another label (#2137)  To: "bitcoin/bitcoin" <bitcoin@noreply.github.com>  Cc: "SimonVrouwe" <simonvrouwe@yahoo.com>  Date: Sunday, December 30, 2012, 2:23 PM    When you say you edit the label of the uppermost label in the list, i.e. changing part "25.0" to "75.0",   do you mean changing part "50.0" to "75.0" ?                                              Reply to this email directly or view it on GitHub.
2137	11769197	2012-12-30T21:58:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11769197	SimonVrouwe	25BTC	Yes, in fact I change this label:  spaar-adres #01 @25BTC = 50.0  into this:  spaar-adres #01 @25BTC = 75.0    By clicking on the label and pressing F2.    --- On Sun, 12/30/12, Michael Ford <notifications@github.com> wrote:    From: Michael Ford <notifications@github.com>  Subject: Re: [bitcoin] Editing label single address in address book also changes another label (#2137)  To: "bitcoin/bitcoin" <bitcoin@noreply.github.com>  Cc: "SimonVrouwe" <simonvrouwe@yahoo.com>  Date: Sunday, December 30, 2012, 2:23 PM    When you say you edit the label of the uppermost label in the list, i.e. changing part "25.0" to "75.0",   do you mean changing part "50.0" to "75.0" ?                                              Reply to this email directly or view it on GitHub.
2137	12043665	2013-01-09T13:13:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12043665	Diapolo	SimonVrouwe	@SimonVrouwe Can you test the fix from #2157? You find a Windows binary for that pull over here: http://jenkins.bluematt.me/pull-tester/e6d230056202b05a27f187dff2648eb5c76fcfee/bitcoin/bitcoin-qt.exe
2137	12785592	2013-01-28T15:03:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12785592	Diapolo	laanwj	@laanwj Can be closed!
2131	11734974	2012-12-28T16:12:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11734974	sipa	gavinandresen	@gavinandresen Updated.
2131	13121681	2013-02-05T09:42:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13121681	sipa	gavinandresen	@gavinandresen I really don't like the fact that this would mean rules at the transaction validation level would need knowledge about the precise inner script semantics. IMHO, we should just gradually introduce rules to remove malleabilities, and then perhaps use tx.nVersion==2 rule to enforce them in the block chain at some later point.
2131	21091621	2013-07-17T04:29:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091621	luke-jr	sipa	@sipa Needs rebase (or close if it was merged in another form?).
2131	22735066	2013-08-15T22:19:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735066	sipa	jgarzik	Rebased. @jgarzik @gmaxwell @gavinandresen @laanwj: opinions?
2131	22735066	2013-08-15T22:19:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735066	sipa	gmaxwell	Rebased. @jgarzik @gmaxwell @gavinandresen @laanwj: opinions?
2131	22735066	2013-08-15T22:19:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735066	sipa	gavinandresen	Rebased. @jgarzik @gmaxwell @gavinandresen @laanwj: opinions?
2131	22735066	2013-08-15T22:19:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735066	sipa	laanwj	Rebased. @jgarzik @gmaxwell @gavinandresen @laanwj: opinions?
2130	19703713	2013-06-19T18:27:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19703713	jgarzik	mikegogulski	Poke @mikegogulski     The general sentiment towards these changes seems positive.  Let's rebase and get this moving, or close.
2128	11702445	2012-12-27T07:08:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11702445	da2ce7	Diapolo	@Diapolo Yes, having user local installs would be great.  However to provide that functionally the nsi install scripts are much more complicated than what we have now.    Ideally the installer will only as for permissions as it needs them.  (For example a user local install will not require any escalation of privileges). Unlike an all-user install, that would escalate to admin.    Unfortunately, making a nsi installer that provides that sort of functional is quite hard.
2128	18717404	2013-05-31T00:42:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18717404	da2ce7	jgarzik	@jgarzik I'm not sure how to do that.  However this pull request is better than the broken behavior that the current installer has on some windows environments.
2128	18725083	2013-05-31T06:17:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18725083	goldbit89	da2ce7	@da2ce7   so is the pull request going to be a admin only install or will it be a multi-user or current user install only?
2126	12905151	2013-01-30T18:41:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905151	Diapolo	luke-jr	@luke-jr Agreed
2125	17772701	2013-05-12T05:03:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17772701	rebroad	sipa	@sipa yes, this still is useful after your network changes. This patch is still providing me with valuable functionality - especially when combined with #1382
2125	18693941	2013-05-30T16:59:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693941	jgarzik	rebroad	@rebroad Agree w/ @sipa.  Please explain *precisely* what behavior differences and problems are being seen.    "still useful" is insufficient :)
2125	18693941	2013-05-30T16:59:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693941	jgarzik	sipa.	@rebroad Agree w/ @sipa.  Please explain *precisely* what behavior differences and problems are being seen.    "still useful" is insufficient :)
2123	11922670	2013-01-06T01:12:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922670	sipa	laanwj	agree with @laanwj     Being able to get useful information through a static analyzer is nice, though.
2121	21090451	2013-07-17T03:50:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090451	luke-jr	CodeShark	@CodeShark Needs rebase.    Although I don't think this makes sense to merge until we have HD wallets and it can be an entire read-only address-chain...
2121	21095113	2013-07-17T06:50:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21095113	luke-jr	kyledrake	@kyledrake HD wallets should solve all of those issues, that's my point ;)
2121	21185979	2013-07-18T14:12:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21185979	kyledrake	luke-jr	@luke-jr I'm cool with HD Wallets, but HD Wallets are a long way away. This is a light, simple patch to solve a very big problem, that enables some major new infrastructure for bitcoin. I tried to rebase it and I got very close, I think someone with knowledge of the bitcoin source would very easily be able to rebase this. The biggest hurdle was the @sipa (I think?) refactor of `keystore.cpp`. The rest was just really simple merges.
2121	21185979	2013-07-18T14:12:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21185979	kyledrake	sipa	@luke-jr I'm cool with HD Wallets, but HD Wallets are a long way away. This is a light, simple patch to solve a very big problem, that enables some major new infrastructure for bitcoin. I tried to rebase it and I got very close, I think someone with knowledge of the bitcoin source would very easily be able to rebase this. The biggest hurdle was the @sipa (I think?) refactor of `keystore.cpp`. The rest was just really simple merges.
2121	21190332	2013-07-18T15:10:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21190332	kyledrake	sipa	@sipa Do you have any free time this week to look at this? I think it's a really super easy fix for you because you are very familiar with the code (and awesome). I think I got pretty close, I just don't know any C++ and I'm completely unfamiliar with the bitcoin keystore plumbing. http://i.imgur.com/xVyoSl.jpg
2121	21562875	2013-07-25T15:40:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21562875	kyledrake	runeksvendsen's	For those of us in the bitcoind camp using an old unstable master so we can get `importaddress`, I have merged `importaddress` with @runeksvendsen's hint of ec0004a here: https://github.com/kyledrake/bitcoin/tree/importaddressupdate    Since I posted on this pull request, I have gotten emails from people using this commit **in production**, because there is no other alternative. Which makes me excited about its potential to improve bitcoin security, but also terrified because they are using it with unstable bitcoind. It would be really great if someone was able to look at this, I really doubt it would take more than a few hours for a seasoned member of the glorious, highly talented bitcoin development team to resolve the merge conflicts on it (@sipa? @jgarzik?).
2121	21562875	2013-07-25T15:40:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21562875	kyledrake	jgarzik?).	For those of us in the bitcoind camp using an old unstable master so we can get `importaddress`, I have merged `importaddress` with @runeksvendsen's hint of ec0004a here: https://github.com/kyledrake/bitcoin/tree/importaddressupdate    Since I posted on this pull request, I have gotten emails from people using this commit **in production**, because there is no other alternative. Which makes me excited about its potential to improve bitcoin security, but also terrified because they are using it with unstable bitcoind. It would be really great if someone was able to look at this, I really doubt it would take more than a few hours for a seasoned member of the glorious, highly talented bitcoin development team to resolve the merge conflicts on it (@sipa? @jgarzik?).
2121	21591425	2013-07-25T23:12:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21591425	sipa	kyledrake	@kyledrake Have a look at #2861.
2114	11674823	2012-12-25T17:32:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11674823	sipa	petertodd	@petertodd Good idea. I'll try to add some references in comments soon.
2113	11512111	2012-12-19T00:21:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11512111	sipa	laanwj	@laanwj Indeed; maybe I'll need to split off a few more things, but I think that's nice anyway (like moving the adjustedtime stuff to network, as it's quite insane that util depends on netbase now...).
2108	12582845	2013-01-23T06:02:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12582845	Diapolo	gavinandresen	@gavinandresen If you prefer batch dependency upgrades perhaps I should just include the latest Boost version also. I'm fine with creating that pulls, because at least in the Win-world it is (most of the time) essential to stay up-to-date (security and performance wise).    I took a look at Gitian also, but the howto setup was a real pain for me and I came to the conclusion that I currently don't want to spend too much time with it.
2108	15295160	2013-03-22T12:57:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15295160	Diapolo	gavinandresen	@gavinandresen So just to understand, when I create a patch to use Qt 4.8.4 does this require any manual or additional work for the core-devs who create the Gitian builds or does it just increase the compile-time once?
2107	12133411	2013-01-11T06:36:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12133411	Diapolo	gavinandresen	@gavinandresen Can you close this issue, as you fixed it already.
2106	11401803	2012-12-15T09:44:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11401803	Diapolo	sipa	@sipa If we have a new compiler ready with Gitian, #1674 should be tested also. Could you do a build with that integrated, as I guess pull-tester is not yet using the same compiler suite.
2106	11404844	2012-12-15T14:09:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11404844	sipa	laanwj	@laanwj I've given up trying to make gitian fetch what I want by itself.    I have a wrapper script at http://bitcoin.sipa.be/builds/bitcoin-build.sh.txt, which injects the commit you ask for from a local repository into gitian. It also does some other things like singing and packaging.
2106	11408253	2012-12-15T18:35:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11408253	sipa	gavinandresen	@gavinandresen I added a commit that changes the Logv implementation (to something based on our util.cpp's strprintf). It's not very efficient, but maybe this works better (strange va_list semantics?). Can you try again?
2106	11639315	2012-12-22T17:34:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11639315	sipa	gavinandresen	@gavinandresen Added your patch to this pull request, rebasing it after removing my alternate Logv inplementation.    Is removing -O2 from the command line options accidental?
2106	11788925	2013-01-01T11:53:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11788925	Diapolo	sipa	I'm currently taking a look at this and try to build it with my IDE... will report back later.    Edit: Got an error, during linking:  ``d:/mingw/bin/../lib/gcc/mingw32/4.7.2/../../../../mingw32/bin/ld.exe: cannot find -ldbghelp``    @sipa I fetched your leveldb17 branch, does this include Gavins last commit?
2106	11791832	2013-01-01T19:01:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11791832	Diapolo	sipa	@sipa Thanks for fixing. Can you now also remove that line, as we don't need Boost chrono with Boost 1.52.  https://github.com/bitcoin/bitcoin/blob/master/bitcoin-qt.pro#L387    Edit: What is the main benefit of this pull, does it fix certain known issues with Windows or should it be faster? A few more details would be very nice. I'm currently doing an IBD with test- and mainnet.
2106	11793304	2013-01-01T21:34:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11793304	sipa	gavinandresen	@gavinandresen Done (hope you didn't mind me modifying your commit).    Did you see https://bitcointalk.org/index.php?topic=129861.msg1427066#msg1427066 ?
2106	11794378	2013-01-01T22:24:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11794378	gavinandresen	sipa	@sipa : don't mind at all; I was lazy and didn't compile Qt libraries (or Bitcoin-Qt) on my Windows VM.    RE: leveldb port using a ton of disk space on Windows:  yes, saw that, it makes me want to cry...  I do now have a VM that can run the mingw gdb, so hopefully "we" can reproduce/fix it, but I'm not looking forward to learning about the details of how leveldb works to figure out what is broken.
2106	11794933	2013-01-01T22:34:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11794933	sipa	Diapolo	@Diapolo   * The native windows backend for leveldb should be faster than the boost one.   * Keeping up with more recent (and less-patched) LevelDB versions seems a good idea for future extensibility.  * A more recent VM image to build with also means a more recent compiler, and things like link-time optimizations may gain us some performance as well.    In any case, in theory, none of these should cause a degradation. Again has been proved however that the difference between theory and practice is that in theory there is none, but in practice there is :)
2106	11795387	2013-01-01T22:42:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11795387	sipa	gavinandresen	@gavinandresen It uses the exact same snprintf construction - as this is not code that is specific to the Windows port at all. Then again, we have no reason to assume that the issue reported in that forum post doesn't already exist in the current git master...
2106	11795627	2013-01-01T22:46:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11795627	sipa	gavinandresen	@gavinandresen Maybe the solution is just replacing the %llu's in the current leveldb code by macros like PRI64u in the core code. I hate maintaining such patched trees though...
2106	11810805	2013-01-02T15:06:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11810805	Diapolo	sipa	@sipa I found http://blog.qt.digia.com/blog/2012/05/08/qt-commercial-support-weekly-19-how-to-write-your-own-static-library-with-qt-2/ which mentions a few things about static linking with Qt. Perhaps it's at least a little interesting for you.    @gavinandresen When did you update your commit? I'm asking because I need to fetch the changes then :).
2106	11810805	2013-01-02T15:06:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11810805	Diapolo	gavinandresen	@sipa I found http://blog.qt.digia.com/blog/2012/05/08/qt-commercial-support-weekly-19-how-to-write-your-own-static-library-with-qt-2/ which mentions a few things about static linking with Qt. Perhaps it's at least a little interesting for you.    @gavinandresen When did you update your commit? I'm asking because I need to fetch the changes then :).
2106	11847111	2013-01-03T15:20:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11847111	gavinandresen	sipa's	I ran @sipa's latest gitian-compiled binary overnight in an XP VM on -testnet with no issues.
2106	12099211	2013-01-10T14:38:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12099211	Diapolo	sipa	Just a small feedback, I'm testing another IBD with this (emtpy datadir) and now have ~54000 blocks to download. Bitcoin-Qt is currently using ~745MB of RAM, which seems to be a quite high number. I'll take a look and see how this progresses now.    @sipa   28000 Blocks to go and now it's using ~1GB RAM.  14000 Blocks to go and now it's using ~1.1GB RAM.
2104	12665699	2013-01-24T18:30:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12665699	al42and	gavinandresen	@gavinandresen What is the preferred way to create test protocol for RPC calls? For most users the easiest way, in mu opinion, would be to use Debug window in Bitcoin-Qt. Or is it better to create some script (in e.g. Python) which does all necessary calls via network (purely automatically or may be interactively)?
2104	16020292	2013-04-07T18:23:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020292	sipa	luke-jr	ACK.    @luke-jr They shouldn't, as address reuse is discouraged. If you know you are reusing addresses, you're taking the performance penalty here too.
2103	11323585	2012-12-13T06:06:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11323585	Diapolo	laanwj,	I support @laanwj, no changes there, as we had more than 1 discussion on that progressbar. I consider the current look and feel as the best compromise.
2103	15592612	2013-03-28T14:51:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15592612	Diapolo	L2G	@L2G The next version will not meassure in blocks anymore on the progressbar anyway, it is a time-based solution, that tells how many weeks, days, hours your client is behing the network. It will be included in 0.8.X.    @laanwj Sorry to be OT, but any news about the refactorings or my small open pulls + the ones we ACKed :)?
2103	15592612	2013-03-28T14:51:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15592612	Diapolo	laanwj	@L2G The next version will not meassure in blocks anymore on the progressbar anyway, it is a time-based solution, that tells how many weeks, days, hours your client is behing the network. It will be included in 0.8.X.    @laanwj Sorry to be OT, but any news about the refactorings or my small open pulls + the ones we ACKed :)?
2103	15679141	2013-03-30T18:17:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15679141	L2G	laanwj,	@laanwj, is that patch that you talked about still around somewhere? I'd love to play with it!
2103	15679838	2013-03-30T18:58:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15679838	sipa	L2G	@L2G There is probably no feature that has caused as much discussion as that progress bar already. Different systems have been tried already, and been reverted. IMHO, it just shows that a progress bar is not the correct way to represent this information. Current git head shows "N days behind" for example, instead of a percentage, which is certainly more useful. It also bases the progress calculation on the number of (estimated) transactions, rather than the number of blocks (which is very fast initially, and very slow at the end).
2103	15702293	2013-04-01T02:38:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15702293	gmaxwell	L2G	@L2G  Thanks for taking a step back there it can be hard working on this when there are so many LOUD opinions about.  People do have your wishes in mind here and you're certainly not the only person who has expressed similar ones, and at least if someone sees a way to make this work better for everyone that they're confident won't have issues, it'll make its way in eventually.
2099	11317554	2012-12-13T00:53:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11317554	sipa	luke-jr	@luke-jr I only know of problems with read-only files. Whether a file is hard-linked shouldn't be even be observable by applications (except for the output of stat()).
2099	11420113	2012-12-16T17:24:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11420113	gavinandresen	sipa	Thanks @sipa -- updated to use string().c_str() and rebased.
2099	12062998	2013-01-09T19:45:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12062998	schildbach	gavinandresen	@gavinandresen Can you explain in the "build binaries yourself" case which branch we need to build? The main "bitcoin" repository does not appear to contain 0.8 related stuff.
2099	12064286	2013-01-09T20:12:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12064286	sipa	Goonie	@Goonie from the branch this pull request refers to. bitcoin/bitcoin.git master does in fact contain the code that will become 0.8 (it's marked "0.7.99" now).
2099	12141832	2013-01-11T12:14:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12141832	sipa	Goonie	@Goonie Very strange. Which commit did you use (bitcoin reports this in the version string, see the first debug.log line printed)
2099	12142385	2013-01-11T12:33:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12142385	schildbach	sipa	@sipa 2013-01-10 22:20:55 Bitcoin version v0.7.1-297-g429915b-beta (2013-01-06 07:26:43 -0800)    Maybe I should mention that I was using the Ubuntu package (0.7.2-quantal2) before. which is a little bit different to the official build in its dependencies.
2099	12143160	2013-01-11T12:57:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12143160	sipa	Goonie	@Goonie I'm afraid I confused you. You built from git head, it seems. This page is a pull request: a change requested to be merged in git head, but not yet there. The branch to pull from is in gavin's repository (https://github.com/gavinandresen/bitcoin-git.git), in branch blkfile_upgrade.    It's also included in my 'turbo' branch (https://github.com/sipa/bitcoin.git, branch turbo), together with several other pull requests.
2099	12147250	2013-01-11T14:55:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12147250	schildbach	sipa	@sipa Ok, this time I'm using v0.7.1-269-gf4445f9-beta. It looks like its using hard links in the blocks directory. It managed to reindex about 211700 blocks in 80 minutes. Then suddenly the status bar text disappeared. From the icons on the lower right and from debug.log I can tell its still accepting blocks, but at a relatively low rate of 1 block per second (still better than before).
2099	12151231	2013-01-11T16:19:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12151231	schildbach	sipa	@sipa Another issue: the "Show QR code" context menu option silently fails. I remember it was working before because I was using QR codes to scan with Bitcoin Wallet.
2099	12151573	2013-01-11T16:26:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12151573	gavinandresen	Goonie	@Goonie : context menu breaking wouldn't be a @sipa bug-- can you open a new issue about that?
2099	12151573	2013-01-11T16:26:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12151573	gavinandresen	sipa	@Goonie : context menu breaking wouldn't be a @sipa bug-- can you open a new issue about that?
2099	12159432	2013-01-11T19:24:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12159432	Diapolo	Goonie	@Goonie The GUI is using an estimated block count, which it get's from the connected nodes and the last checkpoint, to be able to compute a "Blocks left" number and to display the progressbar. If you have more blocks than the estimated block count there is nothing to predict anymore and so the progressbar get's hidden.
2098	11308767	2012-12-12T20:49:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11308767	Diapolo	sipa	@sipa At least you try to clarify your position... though I don't agree on the 100 fragments part. The undofile size is a reasonable comment, but for blockfiles a to be filled 128MB file is clearly not wasted space. I'll keep using this with my local build, but guess I won't create a pull for that CAutoFile thing as I dislike Gavins dictatorial nature on patches, I put quite some time in...
2098	11331735	2012-12-13T11:50:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11331735	sipa	Diapolo	@Diapolo my suggestion:    1) implement AllocateFileRange for Windows (just inside the function body, using macros) that doesn't try to do more than that function intends.    2) If, after benchmarking with 1) you can still observe a noticable slowdown, we can increase the chunk size for Windows - or make it configurable in the first place.    That should have exactly the same effect as your current code, in something like 10 lines of code.
2075	11675105	2012-12-25T18:13:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11675105	mikegogulski	CodeShark	Hi Pieter, thanks for the feedback. Tagging @CodeShark here too.    I laid off on turning comments into code simply for want of more feedback. Not too much sense in plowing ahead with a raft of changes which will get rejected for reasons I hadn't anticipated.    I think your nit is a serious issue, actually. Just as the json stuff should be kept out of the wallet representation as much as possible, so the base58 stuff as well.
2074	11034582	2012-12-05T09:20:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11034582	Diapolo	sipa	ACK    Edit: @sipa Can you please take a look at #2063 and #2068 as I consider them "minor", too :).
2071	11007249	2012-12-04T17:49:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11007249	sipa	mikegogulski	@mikegogulski Sounds great, I think that's what we want. Note that there are some plans to move to another database backend for the wallets. Just so you don't waste effort on code that's going to be thrown out anyway.
2066	11014629	2012-12-04T20:37:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11014629	Diapolo	laanwj	@laanwj I reverted that reference change, it's now the pointer again as we know that is working :).
2061	11159798	2012-12-08T15:37:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11159798	sipa	laanwj	@laanwj I believe there is quite some non-ECDSA-specific EC code left in OpenSSL that would need to be included in that case too...
2061	11308007	2012-12-12T20:29:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11308007	Diapolo	sipa	@sipa This pull can be tested independently from your other one with parallel verification or do they depend on eachother?
2061	13022367	2013-02-02T01:25:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13022367	sipa	SergioDemianLerner	@SergioDemianLerner: thanks!
2061	17364528	2013-05-02T21:02:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17364528	sipa	Diapolo	@Diapolo Github hiccup, I guess.
2059	10934955	2012-12-02T20:50:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10934955	sipa	Diapolo	@Diapolo I've changed the code to always report in ms, but sometimes with some decimals. Avoids the necessity for a mu symbol, and is more readable. All timing printfs should honor the fBenchmark yes - should be the case now.
2059	10935696	2012-12-02T21:41:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10935696	Diapolo	sipa	@sipa Thanks, I'm fine with that benchmark stuff then.    Edit: Seems the ``Make SetBestChain() atomic`` sneaked in here ^^.
2059	10937526	2012-12-02T23:48:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10937526	sipa	Diapolo	@Diapolo Yes, since they touch the same code, I didn't bother writing them separately (I even mentioned it on the pullreq summart!). If there's an issue with the other pullreq, I'll rebase this one, and if the other gets NAK'ed or delayed, I'll separate them.
2059	10942490	2012-12-03T06:04:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10942490	Diapolo	sipa	@sipa I think your smaller pulls should make it much faster into master, so I have no problem with what I noted above :).
2059	11062988	2012-12-05T22:08:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11062988	sipa	Diapolo	@Diapolo Feel like testing this? I'd like to know what kind of output you get on Windows.
2059	11074262	2012-12-06T06:08:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11074262	Diapolo	sipa	@sipa Yeah, will do that today :).  Do I need to start an IBD or are you fine with just any occurance of that messages from the log?
2059	11076017	2012-12-06T08:02:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11076017	Diapolo	sipa	@sipa Here are a few examples with current master + some mods to block file pre-alloc and CAutoFile (dunno if these are related for the benches).    12/06/12 07:57:25 - Connect 293 transactions: 2776.80ms (9.477ms/tx, 3.644ms/txin)  12/06/12 07:57:25 - Connect: 2870.41ms  12/06/12 07:57:25 - Flush 976 transactions: 0.00ms (0.0000ms/tx)    12/06/12 07:57:25 - Connect 108 transactions: 686.40ms (6.356ms/tx, 3.556ms/txin)  12/06/12 07:57:25 - Connect: 702.00ms  12/06/12 07:57:25 - Flush 271 transactions: 0.00ms (0.0000ms/tx)    12/06/12 07:57:26 - Connect 106 transactions: 748.80ms (7.064ms/tx, 3.404ms/txin)  12/06/12 07:57:26 - Connect: 748.80ms  12/06/12 07:57:26 - Flush 283 transactions: 0.00ms (0.0000ms/tx)    12/06/12 07:57:38 - Connect 409 transactions: 3291.61ms (8.048ms/tx, 3.275ms/txin)  12/06/12 07:57:38 - Connect: 3322.81ms  12/06/12 07:57:38 - Flush 1209 transactions: 0.00ms (0.0000ms/tx)    Is this a benchmark for LevelDB access and performance?
2059	11127710	2012-12-07T12:07:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11127710	sipa	Diapolo	@Diapolo Seems microsecond_clock on your system has a resolution of 15.6ms - what I assume to be 1/64 of a second. That makes the numbers -benchmark would report quite useless...
2059	11128004	2012-12-07T12:19:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11128004	Diapolo	sipa	@sipa I didn't even take a close look at the numbers, but your assumption makes sense, if I look at the numbers. Any idea for a working code-path for Win32 then? I could try with GetTimeMillis() instead and see if that numbers make more sense, as at least a ms timer-resolution should be possible (and not a 15.6ms res).
2059	11128104	2012-12-07T12:21:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11128104	sipa	Diapolo	@Diapolo GetTimeMillis uses the same boost function to get the actual time, so I doubt that will make any difference. Up to you to find something that gives an accurate clock in Windows :)
2059	11128185	2012-12-07T12:23:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11128185	Diapolo	sipa	@sipa I had read some stuff a few days ago on that issue and it seems ... well hard to do it portable. Any the native WIN32 APIs for time stuff is a thing I've never used ^^. I'll take another look.    Edit: ``Note that the existence of the higher resolution classes (eg: nanoseconds) depends on the installation of the library. See Build-Compiler Information for more information. `` Any idea if that means we need to link against the ``boost_date_time`` library?    Edit 2: I tested, which timer resolution is available via:  <pre>  secs = boost::posix_time::time_duration::num_fractional_digits();  printf("DEBUG: %u digits timer resolution available\n", secs);  </pre>  ``DEBUG: 6 digits timer resolution available``    So it seems Boost is believing it's able to use microsecond resolution... which IS not true as we saw from the results ;).    Edit 3:  12/07/12 13:06:13 - Connect 70 transactions: 444.03ms (6.343ms/tx, 3.442ms/txin)  12/07/12 13:06:13 DEBUG: 6 digits timer resolution available  12/07/12 13:06:13 - Connect: 451.03ms  12/07/12 13:06:13 - Flush 181 transactions: 1.00ms (0.0055ms/tx)    Next weird thing is I now have such results in the debug.log...
2056	10910537	2012-12-01T01:12:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10910537	sipa	gavinandresen	@gavinandresen Updated.
2051	10897306	2012-11-30T17:35:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10897306	Diapolo	abrkn	@abrkn Are you using the latest version?
2050	10837627	2012-11-29T07:21:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10837627	Diapolo	n1bor	@n1bor I would like to only comment on some style stuff I saw. There are some places where you added unneeded line-breaks (2 in a row). I also think it's much nicer to use speaking names for GUI elements like labels and such (eg: transactionFeeLabel or okButton). Consider this feedback constructive and it's mostly nit-picking, but I'm known to have eagle eyes for such small things, sorry ;).
2049	10908177	2012-11-30T23:21:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10908177	sipa	jgarzik	@jgarzik boost::filesystem::temp_directory_path indeed tries that (and 3 other env variables), and falls back to /tmp afterwards. It is only available in boost filesystem v3 though (introduced in 1.44).
2045	10986232	2012-12-04T06:44:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10986232	Diapolo	laanwj	@laanwj This should be sane now, it was rebased after the removal of the modal flag.
2045	11120386	2012-12-07T06:31:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11120386	Diapolo	laanwj	@laanwj Considered ready to get merged?
2045	11307896	2012-12-12T20:26:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11307896	Diapolo	laanwj	@laanwj ping
2044	10762342	2012-11-27T15:37:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10762342	Diapolo	laanwj	@laanwj Yeah, this is not the fix for the underlying problem (if there is one), but an easy addition anyway :).    So perhaps Boost is the problem here, I'm thinking of the second path in BackupWallet().  <pre>  #if BOOST_VERSION >= 104000                      filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists);  #else                      filesystem::copy_file(pathSrc, pathDest);  #endif  </pre>
2044	10793371	2012-11-28T07:43:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10793371	laanwj	luke-jr	@luke-jr please make this end up in the stable release too
2043	10762819	2012-11-27T15:48:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10762819	sipa	robzrob	I assume the disk I/O is just killing his machine.    @robzrob What hardware are you on? OS/cpu/ram/disk?
2043	10769895	2012-11-27T18:22:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10769895	robzrob	robzrob	OS             CPU             RAM             DISK                  Cheers         Rob    Cornwall    UK    robzrob@hotmail.com                   From: Pieter Wuille [mailto:notifications@github.com]   Sent: 27 November 2012 15:49  To: bitcoin/bitcoin  Cc: robzrob  Subject: Re: [bitcoin] Downloaded And Frozen (#2043)         I assume the disk I/O is just killing his machine.    @robzrob <https://github.com/robzrob>  What hardware are you on? OS/cpu/ram/disk?      Reply to this email directly or view it on GitHub <https://github.com/bitcoin/bitcoin/issues/2043#issuecomment-10762819> .       <https://github.com/notifications/beacon/7oRz6yZkvWRSf7BZECOZXWT9o6-U9bSg1kIpLWCvULaCFDCHncJdNIfd1Gzf4jsL.gif>
2043	10920186	2012-12-01T18:21:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10920186	grant-olson	robzrob	@robzrob the mail interface to the issue tracker probably stripped any images you tried to add to an email.
2035	10749377	2012-11-27T08:14:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10749377	Diapolo	Joukehofman	I tried it and was able to overwrite the file. The modified stamp of the file got updated.    @Joukehofman Can you please give more details, OS, Bitcoin version and so on.
2035	10749671	2012-11-27T08:28:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10749671	Diapolo	Joukehofman	@Joukehofman I need to further ask, you tried to backup via bitcoind or the GUI one Bitcoin-Qt? I tried the Bitcoin-Qt dialog, which is working for me on Windows 7 x64.
2035	10758771	2012-11-27T14:02:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10758771	Diapolo	laanwj	One glitch I found is that RPC console converts this input ``C:\Users\Diapolo\Desktop`` into ``C:UsersDiapoloDesktop`` so it means to achieve what I want I need to escap back-slashes ``C:\\Users\\Diapolo\\Desktop``.    @laanwj It would be nice to tell the use that fact in the welcome message?
2035	10761485	2012-11-27T15:17:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10761485	laanwj	diapolo	@diapolo yes, you should surround paths with '' (single quotes). Otherwise you get into trouble with spaces as well.
2035	10762045	2012-11-27T15:31:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10762045	Diapolo	laanwj	Can you guys try, if with #2044 the client at least shows an error. What boost versions are you using?    @laanwj I remember Gavins proposal to change the format of the RPC commands help messages... would make sense :).
2033	11579731	2012-12-20T16:22:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11579731	sipa	rebroad	@rebroad Yes, indeed. Not a bad one, though.
2033	11582771	2012-12-20T17:33:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11582771	rebroad	sipa	@sipa it looks like it was a bug that could have successfully created a DOS attack that may even have broken the network - i.e. create loads of conflicting transactions so that the mempool fills up to its limit and then the nodes would have stopped passing on new transactions... yes/no?
2032	11508443	2012-12-18T22:28:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11508443	Diapolo	laanwj	Yes, as there were no recent changes to signverifymessagedialog.ui this commit will merge just fine to current master.    @laanwj Ping :)
2032	11791798	2013-01-01T18:58:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11791798	Diapolo	sipa	@sipa Indeed, but they are on different tabs and each tab is reached by the now changed shortcut, so that we now have a shortcut to reach the tab and a shortcut to execute the sign or verify :).
2029	10544233	2012-11-20T06:31:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10544233	laanwj	luke-jr	Yes this is clearly an upstream bug in Qt, nothing we can do here.     According to the issue that @luke-jr links, it isn't addressed yet. This would be something you'd expect them to address in Qt5.
2026	12904847	2013-01-30T18:35:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12904847	luke-jr	colindean,	@colindean, rebase needed
2026	12919365	2013-01-30T23:43:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12919365	colindean	luke-jr	@luke-jr I think I did it right...?
2026	13813147	2013-02-20T02:53:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13813147	colindean	gavinandresen	Rebased to current master as of 0.8.0 release.     @gavinandresen @luke-jr, anything else?
2026	13813147	2013-02-20T02:53:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13813147	colindean	luke-jr,	Rebased to current master as of 0.8.0 release.     @gavinandresen @luke-jr, anything else?
2025	10485922	2012-11-18T13:03:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10485922	Diapolo	laanwj	@laanwj Strange ... have you got a Windows machine, as it only happens on Windows. I know sipa could not reproduce it on Linux and it also does not happen with bitcoind.
2025	10682443	2012-11-24T19:06:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10682443	luke-jr	Diapolo	@Diapolo Care to verify 0.7.2rc1 fixes this? http://luke.dashjr.org/programs/bitcoin/files/bitcoin-qt/0.7.2/test/rc1/
2025	10692325	2012-11-25T11:07:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692325	Diapolo	luke-jr	@luke-jr Yeah, I'll take a look now, will report back in a few minutes.    Edit: Crash is gone, fix is working!
2024	10486018	2012-11-18T13:15:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10486018	Diapolo	laanwj	@laanwj Could this be related https://svn.boost.org/trac/boost/ticket/6320?    Edit: Last rebase adds init of the private flags to false.    Edit 2: It seems the crash is coming from path.hpp (Boost filesystem).
2022	10468996	2012-11-17T01:33:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10468996	laanwj	Luke-Jr?	How is this a bug in the Microsoft printf function @Luke-Jr?
2022	10469142	2012-11-17T01:45:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10469142	luke-jr	laanwj	@laanwj %lld is standard C printf format, but not supported by Microsoft's printf: http://sourceforge.net/tracker/?func=detail&atid=102435&aid=1963136&group_id=2435
2022	10471900	2012-11-17T08:35:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10471900	luke-jr	laanwj	@laanwj The original code which Diapolo is referring to used %lld; he replaced that with PRI64u, but it needs to be PRI64d since the argument is signed.
2022	10472051	2012-11-17T08:59:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10472051	Diapolo	jgarzik	@jgarzik Sorry, yes it was a weak commit message :), fixed it!
2021	10463287	2012-11-16T21:41:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10463287	Diapolo	luke-jr	@luke-jr https://github.com/bitcoin/bitcoin/commit/6b3783a Is fine with me then, your explanation did it's job ;). Just wondering, if the legacy translations will still be used then? I have new translation files ready in another pull now btw.
2021	10464228	2012-11-16T22:08:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10464228	luke-jr	Diapolo	@Diapolo Gavin NACK'd 6b3783a anyway, so it won't be in 0.7.2. Maybe 0.7.3 :) I've pulled in translations of strings that were missing for 0.7.1, if that's what you mean by the second part.
2021	10532191	2012-11-19T21:35:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10532191	Diapolo	luke-jr	@luke-jr I would vote no, as this is just a small glitch but not really a heavy UX problem IMHO. I would much more love to see #2024 get in 0.7.2.
2019	10472089	2012-11-17T09:04:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10472089	Diapolo	laanwj	@laanwj In the end your patience to explain things made me want to get it working ^^.
2017	14008912	2013-02-24T14:12:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14008912	sipa	jgarzik	@jgarzik @gavinandresen I'd like to see this in 0.8.1.
2017	14008912	2013-02-24T14:12:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14008912	sipa	gavinandresen	@jgarzik @gavinandresen I'd like to see this in 0.8.1.
2016	10432231	2012-11-16T00:42:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10432231	jgarzik	sipa	@sipa: ITYM back().  Updated.
2009	10380396	2012-11-14T19:36:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10380396	sipa	gavinandresen	@gavinandresen Do you think this warrants a 0.7.2?
2009	10446350	2012-11-16T13:10:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10446350	Diapolo	luke-jr	@luke-jr I would not include https://github.com/bitcoin/bitcoin/commit/6b3783a as this needs the bitcoinstrings.cpp update (#1999) and a new master file on Transifex, which is what I'm waiting for to start translating the german stuff, to have the changes in for all languages. It's clearly for 0.8 (and already merged in master) and non-critical + needs time to mature.
2009	10447659	2012-11-16T14:02:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10447659	Diapolo	gavinandresen	@gavinandresen I disagree here, as I think https://github.com/bitcoin/bitcoin/commit/0f8a647 is quite an important fix / change.
2008	10352454	2012-11-14T02:06:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10352454	jgarzik	sipa	@sipa is correct.  Storage class for enum is 'int', unless greater size is needed (int -> unsigned int -> long -> unsigned long -> etc., IIRC)
2008	10356561	2012-11-14T06:29:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10356561	laanwj	jgarzik	Indeed, you can define flags using an enum, but you can't use the enum as parameter when you want to be able to specify multiple flags as it's no longer an enumeration. I believe Qt has a 'typesafe flags' type but that doesn't help us here :) I do think defining the flag values using an enum has a nicer syntax than a list of const XXX.    And I agree with @jgarzik that it's better to have anything that you manipulate bitwise be unsigned. It steers clear of crazy undefined areas of C++, such as overflows flipping the sign bit.
2008	10357651	2012-11-14T07:44:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10357651	Diapolo	laanwj	@laanwj Nice I observed the same problem with the client interface pull we are working on ^^. We should then change to ``unsigned int`` there, too, right?    @luke-jr: GCC warns about OR 2 enum flags, when the function parameter is expected to be an enum ;), tried it.
2008	10357651	2012-11-14T07:44:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10357651	Diapolo	luke-jr	@laanwj Nice I observed the same problem with the client interface pull we are working on ^^. We should then change to ``unsigned int`` there, too, right?    @luke-jr: GCC warns about OR 2 enum flags, when the function parameter is expected to be an enum ;), tried it.
2008	10425348	2012-11-15T21:05:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10425348	Diapolo	jgarzik	Comments from @jgarzik are not in, so it would be nice if @sipa could update to these last 4 suggestions before this should get merged IMO.
2008	10425348	2012-11-15T21:05:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10425348	Diapolo	sipa	Comments from @jgarzik are not in, so it would be nice if @sipa could update to these last 4 suggestions before this should get merged IMO.
2003	11075710	2012-12-06T07:44:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11075710	laanwj	jgarzik's	I like @jgarzik's idea. Shared-nothing passing messages is a safe and elegant default, if it turns out to be a performance burden, which I don't believe so, it can always be optimized again **without** the locking mess.
2003	11094855	2012-12-06T17:22:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11094855	alexanderkjeldaas	jgarzik	Hi, sorry I have not had time to follow up on these locking changes, but..    Actually locking and synchronous shared-nothing message passing are very  similar from a theoretical point of view.    To build an intuition for this, imagine that you create a thread for every  set of locks that can be held in the program at the same time, by some  thread.  What does this mean? It means that you create a thread for every  single "group" of data that is protected by a set of locks, much like in a  fine-grained message-passing implementation.    Also, for any two locks that can be held at the same time, define a lock  acquisition order (so lock A must be taken before lock B, if they can both  be held by the same thread at the same time).    Now, imagine that every time you take a lock, you instead pass a message to  the designated thread with a copy of "the environment" which consists of  all variables visible in the lexical scope.  This message is synchronous,  so you wait until that other thread returns.    Then this is equivalent to the synchronous shared nothing message passing  implementation.    Note that no other thread can legally modify "the environment" because that  would require a lock, and thus execution of said modification would have to  happen in a thread which is currently blocked.    Anyways, what this means is that the process of annotating which data is  protected by which locks is exactly the same information that one encodes  when restructuring a program into message-passing style.  However,  message-passing style is a pretty heavy transformation, as it affects both  performance and correctness.  Lock annotation only deals with correctness.    Also, for performance reasons, message-passing style in C++ is often not  synchronous.  Asynchronous message-passing can actually be a lot harder to  do right than a lock-based implementation because the number of states that  the program can be in is suddenly expanded over the lock-based  implementation.    So I would suggest that the bitcoin software is not rewritten to use  message-passing.    Rather, simply use lock annotations, and as a hygiene issue, limit the size  of "the environment" typically by restricting the visibility of global  variables.    Also, try to get rid of TRY_LOCK.    Alexander    On 6 December 2012 04:44, Wladimir J. van der Laan <notifications@github.com  > wrote:    > I like @jgarzik <https://github.com/jgarzik>'s idea. Shared-nothing  > passing messages is a safe and elegant default, if it turns out to be a  > performance burden, which I don't believe so, it can always be optimized  > again *without* the locking mess.  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11075710>.  >  >
1999	10399414	2012-11-15T07:16:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10399414	Diapolo	luke-jr	@luke-jr: You uploaded a new english master file to Transifex, but the bitcoinstrings.cpp update is missing from master, this sucks (and is not how we defined the default procedure). Oh and to complain even more the new master file is also not included in current master...    @laanwj: Perhaps you can quickly kick the updated files into master?
1999	10399414	2012-11-15T07:16:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10399414	Diapolo	laanwj	@luke-jr: You uploaded a new english master file to Transifex, but the bitcoinstrings.cpp update is missing from master, this sucks (and is not how we defined the default procedure). Oh and to complain even more the new master file is also not included in current master...    @laanwj: Perhaps you can quickly kick the updated files into master?
1999	10406025	2012-11-15T11:48:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10406025	Diapolo	luke-jr	@luke-jr: What is happening? It seems we now have an old version again on Transifex and I started translating already ... makes me mad a little, sorry to say. My translation work is gone and I can do it again, when the updated file re-appears.
1999	10438800	2012-11-16T07:33:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10438800	Diapolo	luke-jr	@luke-jr I did a diff of the german language file before and after that mess and no english base strings changed! I don't know what you did, but please use the default procedure of putting new master files in a commit first!
1995	10257587	2012-11-10T17:38:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10257587	sipa	TheBlueMatt	I'm certainly in favor of improving the locking system. I didn't know about clang's -Wthread-safety, but it certainly looks like a nice way to improvements. If we go that way, I'd like to see it completed as well, so that probably means rebasing from time to time, and following up. Unfortunately, refactoring patches are often not considered high priority, and they conflict easily with other patches.    About the locks in general, I think most of the uglyness/entanglement is the result of lack of encapsulation. Many objects expose their inner state publically, and are also accessed/modified from almost everywhere. I think we made at least some improvement since Satoshi's days (there wasn't even a CWallet or CkeyStore, and all was done from within main), but there's a long road ahead still.    For the block chain, I've been planning to add a class to separate the block tree (mapBlockChain, pblocktree & co) and the coin state (pcoinsTip, hashBestChain) entirely after ultraprune (which is now merged). Ideally, both get guarded by separate locks (so cs_main can go), and encapsulate them in well-behaved classes.    Regarding callbacks, @TheBlueMatt has worked on creating a message queue for the core before, so callbacks to wallet could run in separate threads. This never got merged, unfortunately.
1992	10223462	2012-11-09T11:55:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10223462	Diapolo	sipa	@sipa I updated the pull with your suggestion, can you please have a look.
1990	10254192	2012-11-10T11:26:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254192	Diapolo	robbak	@robbak You should not merge upstream changes but rebase your pull onto current master. The way this pull is now it won't be accepted I think.    - ``git checkout "local branch"``  - ``git fetch upstream``  - ``git rebase upstream``  - ``git push origin "local branch" -f``
1988	10062187	2012-11-05T07:13:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10062187	Diapolo	laanwj	@laanwj I suppose ui_interface.h - MessageBoxFlags could be cleaned up or the GUI part needs some reworking to make this options available (which seems not needed, as we only use MessageBoxFlags for displaying warnings / errors currently).
1988	10240492	2012-11-09T19:01:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10240492	Diapolo	laanwj	@laanwj Updated to just use masks, can you please take another look. Thanks for your time :).
1988	10318475	2012-11-13T08:07:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10318475	Diapolo	laanwj	@laanwj I'm the one who loves to do things perfect, so I'm really fine with getting constructive feedback!
1988	10357289	2012-11-14T07:22:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10357289	Diapolo	laanwj	@laanwj Would it be better (typesafe) to directly use ``CClientUIInterface::MessageBoxFlags style`` instead of ``int style`` in the modified functions? Seems like a not well thought idea, as (ICON_ERROR | BTN_OK) are not recognized as enum but as integer...
1988	10362927	2012-11-14T11:24:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10362927	Diapolo	laanwj	@laanwj I'll merge the last commit if you ACKed all changes and are fine with the pull as is now :).
1988	10532022	2012-11-19T21:31:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10532022	Diapolo	laanwj	@laanwj I would love to replace all direct ``notificator->notify()`` with ``message()`` in another pull. Are you fine with using ``message(tr("foo"), tr("foo"), false, CClientUIInterface::ICON_WARNING);`` to achieve this :)?    Did you have the time try to test out this pull yet?
1988	10692396	2012-11-25T11:17:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692396	Diapolo	laanwj	@laanwj I need your help getting this in, any time-window :)?
1988	10749455	2012-11-27T08:18:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10749455	Diapolo	laanwj	@laanwj I would like to use the new interface for other pulls, so it would be great if you could prioritize the testing of this pull :).
1986	10434614	2012-11-16T02:33:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434614	jgarzik	gavinandresen	Rebased.  Still need to address valid @gavinandresen etc. comments.
1984	10061786	2012-11-05T06:42:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10061786	Diapolo	grimd34th	@grimd34th I've been using a similar approach for months with my local Windows build, what wonders me is that the official build process seems to not need ``-loleaut32``, any idea for this?    Otherwise I can confirm this change is needed to directly build on Windows!    Let's see what our pull-tester is making from this ;).
1984	10460564	2012-11-16T20:16:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10460564	luke-jr	Diapolo	@Diapolo Could you shed some light on whether 0.4.x - 0.6.x need this as well? Thanks
1983	10260993	2012-11-10T22:57:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260993	gavinandresen	laanwj	@laanwj : "setaccount" used to be called "setlabel", so there is a precedent for breaking compatibility (after maintaing the old names for a while) just for aesthetic reasons.
1982	10434635	2012-11-16T02:34:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434635	jgarzik	gavinandresen	Rebased.    @gavinandresen wallet backup, that doesn't need to be encrypted yet again.  @sipa has a fair point on format, though.
1982	10434635	2012-11-16T02:34:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434635	jgarzik	sipa	Rebased.    @gavinandresen wallet backup, that doesn't need to be encrypted yet again.  @sipa has a fair point on format, though.
1982	16084814	2013-04-08T23:09:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16084814	jgarzik	kjj	Closing.  Not much interest, and wallet dump format still an open question.    Was originally at @kjj request.
1980	10254749	2012-11-10T12:36:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254749	sipa	BitcoinPullTester	/poke @BitcoinPullTester
1980	10438860	2012-11-16T07:38:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10438860	Diapolo	BitcoinPullTester	Guess there is no need to wait fot @BitcoinPullTester as it seems to be down?
1980	10441953	2012-11-16T09:56:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10441953	sipa	jgarzik	@jgarzik Yes, kinda.    Reason I want @BitcoinPullTester, is because Matt claimed it had tests for this issue in particular, though it seems to validate head just fine.
1980	10441953	2012-11-16T09:56:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10441953	sipa	BitcoinPullTester,	@jgarzik Yes, kinda.    Reason I want @BitcoinPullTester, is because Matt claimed it had tests for this issue in particular, though it seems to validate head just fine.
1977	10049209	2012-11-04T10:44:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049209	Diapolo	laanwj	It was this pull, who included this change https://github.com/bitcoin/bitcoin/commit/69d605f410c83235aa7b757445e7d0166fcfe2d9, but as you see between the #undef and the #define are only boost or std headers, well I'm not sure it's a no-op, but compilation and running the client is working fine. We include util.h quite often and it's mostly before boost headers...    @laanwj It was your pull, perhaps you can enlighten this?
1976	10061364	2012-11-05T06:03:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10061364	Diapolo	sipa	@sipa My pulls are just an offer, if they don't make sense for all platforms we support, just comment and close them :).
1971	9988202	2012-11-01T17:24:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9988202	sipa	gmaxwell	@gmaxwell It's a loop over all wallet transactions, the transactions contain the hash of the block they are encoded in, and those just require a lookup in mapBlockIndex to know whether this means they are confirmed. So it's a O(n_wallet_tx * log(blocks_in_history)) operation.
1968	10049093	2012-11-04T10:28:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049093	Diapolo	laanwj	@laanwj You added this a few months ago, so perhaps you can comment here?
1966	9869958	2012-10-29T15:02:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9869958	TheBlueMatt	Diapolo	@Diapolo So should we downgrade to 0.8.1 then?
1964	9973219	2012-11-01T08:02:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9973219	laanwj	dscotese	@dscotese Yes you need to build *everything* against MingW libs. If any part links against Visual C or MingW, undebuggable madness ensues. As a plus, you will learn a lot about linker internals :frog:!    @gavinandresen I have a build for bitcoind + bitcoin-qt + most deps (everything in one project for easy building) for VS somewhere, but my Visual Studio trial license expired along the way (and there's no way I'm going to put any money into it).   It'd be a matter of adding leveldb to get it to work. Anyway, no one showed interest up until now. There are just not that many windows developers partaking in open source, and those that do (like Diapolo) seem to use the mingw toolchain / qt creator.    **Alternatively** (it's the option I prefer at the moment) is that we add a cmake build system and let it generate all the build scripts for all platforms for us. qmake scales very badly to big projects and is starting to show its seams, and will likely be deprecated somewhere along the road to Qt5. I may get around to this.
1964	9973219	2012-11-01T08:02:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9973219	laanwj	gavinandresen	@dscotese Yes you need to build *everything* against MingW libs. If any part links against Visual C or MingW, undebuggable madness ensues. As a plus, you will learn a lot about linker internals :frog:!    @gavinandresen I have a build for bitcoind + bitcoin-qt + most deps (everything in one project for easy building) for VS somewhere, but my Visual Studio trial license expired along the way (and there's no way I'm going to put any money into it).   It'd be a matter of adding leveldb to get it to work. Anyway, no one showed interest up until now. There are just not that many windows developers partaking in open source, and those that do (like Diapolo) seem to use the mingw toolchain / qt creator.    **Alternatively** (it's the option I prefer at the moment) is that we add a cmake build system and let it generate all the build scripts for all platforms for us. qmake scales very badly to big projects and is starting to show its seams, and will likely be deprecated somewhere along the road to Qt5. I may get around to this.
1964	9995688	2012-11-01T20:58:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9995688	Diapolo	dscotese	@dscotese This is how I build the boost libs with MinGW on Windows:    Example for Boost 1.49 extracted to D:\boost_1_49_0 in my case!    - D:\boost_1_49_0 must be set as BOOST_ROOT environment variable    --------------    open D:\boost_1_49_0\bootstrap.bat  replace ``set toolset=msvc`` with ``set toolset=gcc``    --------------    open D:\boost_1_49_0\tools\build\v2\engine\build.bat and search for ``mingw``    replace existing code with:  if EXIST "D:\MinGW\bin\gcc.exe" (      set "BOOST_JAM_TOOLSET=mingw"      set "BOOST_JAM_TOOLSET_ROOT=D:\MinGW\"    My MinGW installation resides in ``D:\MinGW\`` you need to change this, so it matches your config!    --------------    open ``Qt 4.8.0 for Desktop (MinGW)`` (Qt command-prompt) and ``cd D:\boost_1_49_0``    You can also just use the Windows command-promt (``cmd``), if you setup all Qt stuff in the envirionment variables!    --------------    enter ``bootstrap.bat gcc``    This builds b2, the Boost build engine V2!    --------------    create the libs needed by Bitcoin:  b2 --toolset=gcc --build-dir=D:\boost_1_49_0\build --build-type=minimal stage link=static runtime-link=static threading=multi variant=release -a -j 4 --with-filesystem --with-program_options --with-system --with-thread    This should create all *.a files you need for Bitcoin-Qt and they can be found in ``D:\boost_1_49_0\build``, just search for *.a in that dir ;).    Hope this helps!
1964	10006294	2012-11-02T06:47:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10006294	Diapolo	laanwj	I'm glad you could figure out that Boost stuff now, btw. @laanwj do you think it makes sense to keep that howto somewhere in the doc folder?    Are you using the default MinGW that ships with the Qt SDK?    My toolchain is using -rtti, which is coming from ``\mkspecs\win32-g++\qmake.conf``. I'm not sure about that exception handling thing, can you post compiler / linker output?
1964	10031770	2012-11-02T22:04:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10031770	dscotese	gavinandresen	I installed MinGW before I installed QT, to the root of C, so I compiled the Boost libs with the MinGW in the root of C.  There are only 4 items in my `C:\QT\4.8.3` folder that contain "MinGW" so I think my QT installation detected my existing MinGW installation and didn't install its own.    @gavinandresen The instructions for Windows have a step to download the dependencies archive, which has an old version of Boost in it.  Do you recommend updating the archive with the newer version, or updating the instructions to include compiling version 1.51 of the Boost files we need?      Since compiler output includes errors that will disappear when earlier errors are fixed, I'm only posting the first chunk of it here.  Let me know if the errors listed are ones I can ignore (and if it's easy to suppress them on the grounds that they are useless, how do I do that?):  ```  14:48:53: Running steps for project bitcoin-qt...  14:48:53: Starting: "C:\Qt\4.8.3\bin\qmake.exe" C:\Qt\projects\bitcoin\bitcoin-qt.pro -r -spec win32-g++  The directory name is invalid.  Removed plural forms as the target language has less forms.  If this sounds wrong, possibly the target language is not set or recognized.  Could not find qmake configuration directoryCould not find qmake configuration fileProject MESSAGE: Building with UPNP supportThe directory name is invalid.  Removed plural forms as the target language has less forms.  If this sounds wrong, possibly the target language is not set or recognized.  Could not find qmake configuration directoryCould not find qmake configuration fileProject MESSAGE: Building with UPNP supportThe directory name is invalid.  Removed plural forms as the target language has less forms.  If this sounds wrong, possibly the target language is not set or recognized.  Could not find qmake configuration directoryCould not find qmake configuration fileProject MESSAGE: Building with UPNP support'.' is not recognized as an internal or external command,  operable program or batch file.  '.' is not recognized as an internal or external command,  operable program or batch file.  Project MESSAGE: Building with UPNP support  Project MESSAGE: Building with UPNP support  Project MESSAGE: Building with UPNP support  14:48:58: The process "C:\Qt\4.8.3\bin\qmake.exe" exited normally.  14:48:58: Starting: "C:\MinGW\bin\mingw32-make.exe"   C:/MinGW/bin/mingw32-make -f Makefile.Release  mingw32-make[1]: Entering directory 'C:/Documents and Settings/dscotese/bitcoin-qt-build-desktop-Qt_4_8_3__4_8_3__Release'  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/sendcoinsdialog.ui -o build/ui_sendcoinsdialog.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/addressbookpage.ui -o build/ui_addressbookpage.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/signverifymessagedialog.ui -o build/ui_signverifymessagedialog.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/aboutdialog.ui -o build/ui_aboutdialog.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/editaddressdialog.ui -o build/ui_editaddressdialog.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/transactiondescdialog.ui -o build/ui_transactiondescdialog.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/overviewpage.ui -o build/ui_overviewpage.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/sendcoinsentry.ui -o build/ui_sendcoinsentry.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/askpassphrasedialog.ui -o build/ui_askpassphrasedialog.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/rpcconsole.ui -o build/ui_rpcconsole.h  c:/Qt/4.8.3/bin/uic.exe ../../../Qt/projects/bitcoin/src/qt/forms/optionsdialog.ui -o build/ui_optionsdialog.h  g++ -c -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,-z,now -O2 -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -fno-exceptions -fno-rtti -DUNICODE -DQT_LARGEFILE_SUPPORT -DQT_GUI -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_UPNP=1 -DSTATICLIB -DUSE_IPV6=1 -DWIN32 -D_MT -DQT_THREAD_SUPPORT -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_NEEDS_QMAIN -DQT_NO_DYNAMIC_CAST -I'../../../Qt/4.8.3/include/QtCore' -I'../../../Qt/4.8.3/include/QtGui' -I'../../../Qt/4.8.3/include' -I'../../../Qt/projects/bitcoin/src' -I'../../../Qt/projects/bitcoin/src/json' -I'../../../Qt/projects/bitcoin/src/qt' -I'../../../Qt/projects/bitcoin/src/leveldb/include' -I'../../../Qt/projects/bitcoin/src/leveldb/helpers' -I'../../../Qt/4.8.3/include/ActiveQt' -I'build' -I'build' -I'../../../Qt/4.8.3/mkspecs/win32-g++' -o build/bitcoin.o ../../../Qt/projects/bitcoin/src/qt/bitcoin.cpp  In file included from ../../../Qt/4.8.3/include/boost/thread/exceptions.hpp:22:0,                   from ../../../Qt/4.8.3/include/boost/thread/win32/thread_primitives.hpp:16,                   from ../../../Qt/4.8.3/include/boost/thread/win32/basic_timed_mutex.hpp:14,                   from ../../../Qt/4.8.3/include/boost/thread/win32/mutex.hpp:9,                   from ../../../Qt/4.8.3/include/boost/thread/mutex.hpp:14,                   from ../../../Qt/projects/bitcoin/src/allocators.h:10,                   from ../../../Qt/projects/bitcoin/src/qt/walletmodel.h:6,                   from ../../../Qt/projects/bitcoin/src/qt/bitcoin.cpp:6:  ../../../Qt/4.8.3/include/boost/system/system_error.hpp: In member function 'virtual const char* boost::system::system_error::what() const':  ../../../Qt/4.8.3/include/boost/system/system_error.hpp:70:16: error: exception handling disabled, use -fexceptions to enable  ```
1964	10986182	2012-12-04T06:41:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10986182	Diapolo	dscotese	@dscotese Why not backup your modifications in your Git-branch by simply copying them out of the used directory, delete your branch and start with a clean master branch.    ``git checkout master``  ``git branch -D ds_native_windows``  ``git branch ds_native_windows``  ``git checkout ds_native_windows``    Great you figured out the USE_UPNP stuff, when chaning such things it's always a good idea to cleanup via the Qt Cretor IDE, which has a menu point for that under ``Build`` or ``Create`` in the main menu bar.    You indeed need to build ALL dependency packages with your compiler, if you want to be successful in building Bitcoin-Qt. The ones you need are BDB, Boost, OpenSSL, Qt and leveldb.    I'm fine with your blog-style here :).
1961	10473673	2012-11-17T12:43:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10473673	Diapolo	wowus	@wowus Is this related to the problem described in #1960 and the mentioned fix? Can you check if current master fixes this for you.
1961	11019988	2012-12-04T23:05:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11019988	sipa	Diapolo	@Diapolo It's unrelated.
1961	17665190	2013-05-09T13:52:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17665190	gavinandresen	wowus	@wowus : I cannot reproduce this either, even on my wimpy 32-bit OSX 10.6 laptop.  What OS/machine configuration are you running on?
1960	10254212	2012-11-10T11:28:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254212	Diapolo	laanwj	@laanwj You are way more skilled to debug this, so as this is now high priority you can perhaps take a look at it?
1960	10473663	2012-11-17T12:41:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10473663	Diapolo	94m3k1n9	@94m3k1n9 Can you verify current master is fixing your problem with ``move``?
1957	9770566	2012-10-25T09:03:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770566	sipa	robbak	@robbak The reason for this method was having the ability to sign messages with keys corresponding to Bitcoin addresses, so one can prove ownership of coins, or prove being the sender of a transaction.    I do agree it doesn't need to do more than what it can already - it just has to core functionality, other use cases can be implemented on top of it.
1957	9849312	2012-10-28T19:24:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9849312	sipa	NaruFGT	@NaruFGT sorry, there are no standard encodings that have all necessary data for public key recovery from a signature, so we had to invent our own.
1956	9767337	2012-10-25T06:26:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9767337	Diapolo	laanwj	"Pragmatic solution: we could just set it to false next time we think the state of the tree is dangerous enough to warrant a warning."    @laanwj I really like that one! Btw. why are there so many changes in the UI file? Is it because of a different layout chosen?    Edit: I seem to miss the bitcoind changes?
1956	9767627	2012-10-25T06:44:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9767627	laanwj	diapolo	@diapolo getinfo returns GetWarnings("statusbar"), so no special changes are needed for rpc    There are really very few changes to the layout, try `git diff -b` (ignore whitespace changes) or use a character-wise diff tool instead of github's line-based one. The only thing that happened is adding an outer element, so the whole thing got indented.
1953	9728780	2012-10-24T06:02:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9728780	Diapolo	gmaxwell	@gmaxwell The part with the LOCK is also described in #1946. I can confirm this fixes the assertion I observed a few times while doing some testnet tests.
1953	9729005	2012-10-24T06:17:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9729005	gmaxwell	Diapolo	@Diapolo Duh, I should have paid attention to the issues, it would have saved me a few minutes. :P
1951	9715924	2012-10-23T20:00:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9715924	Diapolo	jgarzik	Seems logical, as before the blk000x.dat files had a hard-coded limit of < 2GiB on Windows. I'm sure @jgarzik or @sipa can clarify this. Are you using NTFS or FAT32 as filesystem?
1951	9715924	2012-10-23T20:00:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9715924	Diapolo	sipa	Seems logical, as before the blk000x.dat files had a hard-coded limit of < 2GiB on Windows. I'm sure @jgarzik or @sipa can clarify this. Are you using NTFS or FAT32 as filesystem?
1951	9766916	2012-10-25T05:57:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9766916	laanwj	qubez	`off_t` is 64 bit if -D_FILE_OFFSET_BITS=64 is defined. I've just verified this with mingw and linux (someone needs to verify on OSX).     Another problem is that we use `fseek` takes a `long` for the offset. This depends on the architecture. We could instead use `fseeko` which takes an `off_t` (and `ftello` which returns one).    @qubez: blkindex.dat is not affected, it is a berkelydb database, which has no problems with large files
1950	9809178	2012-10-26T10:47:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9809178	Diapolo	tucenaber	@tucenaber Can you please try current master again, there was a fix merged related to the Shutdown() function.
1948	9674637	2012-10-22T18:20:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9674637	sipa	xanatos;	Agree with @xanatos; i'm also not sure whether it should actually disable features - people will always find ways to do stupid things anyway
1946	9664839	2012-10-22T14:07:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9664839	Diapolo	sipa	@sipa  What do you think about adding this into the setgenerate RPC call?    <pre>      if (vNodes.empty())          throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, "Bitcoin is not connected!");            if (IsInitialBlockDownload())          throw JSONRPCError(RPC_CLIENT_IN_INITIAL_DOWNLOAD, "Bitcoin is downloading blocks...");  </pre>    This check is also uses IN the threads itself, but when adding this to the RPC command we prevent spawning 4 threads that just idle and perhaps even prevent block-generation happening in some other weird situations (that currently happen, because I was able to mine a block while beeing on IBD), which causes further problems.    So start the mining threads for RPC call only when connected and not in IBD (explicit usage) and still alow the old behavior, when using -gen (as you most likely want to start mining, when the client is ready here - implicit usage).    I was not able to reproduce the assertion again, so your idea seems to have fixed that one! You think it was a locking problem?    Edit: Do you thing it makes sense to create a pull for your assert fix here or is that obsolete with your last patches to master?
1945	9922890	2012-10-30T21:07:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9922890	Diapolo	sipa	@sipa Is there a changelog fot that available? IMHO as long as there is no stable release available, we are free to do this whenever it's needed / wanted :).
1944	9737887	2012-10-24T12:44:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9737887	Diapolo	burger2	@burger2 There is a check at startup, which just tries to send new URIs to the message queue used for handling URIs. If that succeeds skip further client startup and exit, if no message queue is available start a new client. To me it seems that check doesn't work reliable, when impatient users are clicking to fast on a bitcoin: URI (which is indeed no fault and should not crash the client though).
1944	15832257	2013-04-03T11:50:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15832257	Diapolo	gavinandresen	@gavinandresen As your paymentserver pull was merged, this can be closed IMO.
1943	9680007	2012-10-22T20:48:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9680007	sipa	jgarzik	@jgarzik split the commit in two
1943	9720210	2012-10-23T22:07:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9720210	sipa	gmaxwell	@gmaxwell That's exactly what happens, by the way. While reindexing, fImporting is true, and the "block" message gets ignored entirely, and no IBD is initiated.
1943	10049594	2012-11-04T11:42:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049594	sipa	laanwj	Improved GUI feedback during reindex.    @laanwj Can you also have a look?
1936	9631935	2012-10-20T14:47:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9631935	sipa	gavinandresen	@gavinandresen Yes - I even tried changing it to return faulty results, to check whether the current unit tests catch it (they do).
1931	9420183	2012-10-14T14:52:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9420183	laanwj	Diapolo	@Diapolo Depends on what rescaling algorithm @xanatos used, but usually manually controlling the scaling result gives a better result than qt does "realtime". Anyway, I don't think it gets any sharper than this.
1931	9420183	2012-10-14T14:52:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9420183	laanwj	xanatos	@Diapolo Depends on what rescaling algorithm @xanatos used, but usually manually controlling the scaling result gives a better result than qt does "realtime". Anyway, I don't think it gets any sharper than this.
1931	9424701	2012-10-14T19:22:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9424701	Diapolo	luke-jr	I think it's rather good that we have some "eagle eye"-dev for such special thinks who watches and warns. What sometimes feels like nit-picking is wanting only the best for the client. So I would say @luke-jr is the guardian of licenses :-D.
1931	9434717	2012-10-15T05:32:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9434717	laanwj	xanatos	On the other hand I wasted my sunday morning on these icons. And @xanatos probably more time, so I wouldn't exactly call this a win.    And if that wasn't enough, I spent part of the evening on IRC trying to dispell Luke-Jr's bullshit that I'm some kind of dictator threatening to make Bitcoin non-free. I'm really pissed at the moment.
1931	9441634	2012-10-15T11:17:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9441634	luke-jr	xanatos	@xanatos Bitcoin-Qt is fully in compliance with the terms imposed by the GPL'd icons.
1931	9442271	2012-10-15T11:52:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9442271	xanatos	luke-jr	@luke-jr I hate hate hate myself. I just lost 30 minutes of my life, just to write this.     NO NO NO Just to be sure I have just installed the bitcoin-0.7.0-win32-setup.exe from SourceForge. Now.... There isn't any GPL.txt file (or similar file with the license) (this makes bitcoin incompatible with both GPL and LGPL), there isn't any LGPL.txt file (or similar file with the license) (this makes bitcoin incompatible with LGPL). And point 2b of the GPL license: b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, ***to be licensed*** as a whole at no charge to all third parties ***under the terms of this License***. The subject is YOU. I don't think it is enough that the software is relicenseable because it's MIT licensed. I think YOU (plural, not you luke-jr) would at least need to dual license it explicitly under MIT and GPL. And last, in the COPYING.txt file, the program is explicitly licensed under the MIT license. Now, morally you are perhaps fine with GPL because you are distributing the source code (it's even included in the installer, but note that it isn't complete... For example the bitcoin-qt.pro file is missing, so that you can't build the QT project. Point 3 of the GPL license: "plus the scripts used to control compilation and installation of the executable" so this copy of the source isn't enough. But you can download the source from this site, right? A shame that in all the installed files there isn't a link to this site or an email address of a programmer. The only link is to https://en.bitcoin.it/wiki/Main_Page)
1931	9442488	2012-10-15T12:03:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9442488	luke-jr	xanatos	@xanatos I suppose technically speaking we need to include a copy of the licenses, but that is hardly a big deal. Since the MIT license allows anyone to relicense the work under more restrictive terms, the rest of the code *can be licensed by anyone* under the terms of the GPL *in addition to* the MIT license. If the bitcoin-qt.pro file is missing from the installed source code, I think that is a bug. The (L)GPL licenses further also consider publishing the source code - even if on a different server - with equivalent accessibility, to be identical to including it verbatim with the binary object: therefore we do not strictly require a link included (though it would be a good idea).
1927	10489906	2012-11-18T19:07:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10489906	luke-jr	burger2	@burger2 Can you check https://www.transifex.com/projects/p/bitcoin/ and correct it if still a problem there?
1927	10492100	2012-11-18T21:43:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10492100	Diapolo	burger2	@burger2 is right, the tab and the button to execute the sign / verify have the same shortcuts. I think it's a great mess to need to re-translate such strings for all used languages when we need to change them because of a dup shortcut :-/.
1927	10493754	2012-11-18T22:40:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10493754	luke-jr	Diapolo	@Diapolo We don't, I can easily copy the old translations - and fixes like this to the English strings shouldn't affect others, though of course in this case the translation happens to have the same bug :)
1926	9617483	2012-10-19T20:32:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9617483	Diapolo	BitcoinPullTester	It's scary that only @BitcoinPullTester is active in the project, what's up? Did I miss something?
1925	9769119	2012-10-25T08:06:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769119	Diapolo	laanwj	@laanwj Any reason to not merge this now?
1923	9417754	2012-10-14T09:27:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9417754	Diapolo	laanwj	Updated with event filter, would be nice if @laanwj could test it, too.
1923	9654159	2012-10-22T06:59:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9654159	Diapolo	laanwj	@laanwj I updated this pull to now use statustips in addition to tooltips where it makes sense and added new descriptive texts for some elements that were missing these.
1923	9769376	2012-10-25T08:17:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769376	Diapolo	laanwj	@laanwj I guess this needs a rebase after your warning bar pull is in, but are you ok with it now?    I have a question on our used eventFilter() functions. The Digia doc says:  <pre>  If all the event filters allow further processing of an event (by each returning false), the event is sent to the target object itself.  If one of them stops processing (by returning true), the target and any later event filters do not get to see the event at all.  </pre>    Then why are we nearly everywhere doing something like ``return QObject::eventFilter(obj, evt);`` at the end of your eventFilter() instead of just false, to send the event to the target object?
1920	9363728	2012-10-12T01:03:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9363728	laanwj	diapolo	@diapolo you're right. This is a classical use-after-free:        const char* pszDataDir = GetDataDir().string().c_str();    * string() creates a temporary string  * c_str takes a pointer (which is a non-owning reference) to the buffer of that temporary string   * the temporary string is freed after leaving this statement  * we have a pointer pointing to unallocated memory, which gives us a fun surprise (the stringified date, even!)    Subtle bugs like this are why I always (less subtly) encourage people to use proper string types and not char*. This one must have slipped by :(    Going to take a stab at fixing it.
1920	9366960	2012-10-12T05:26:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9366960	Diapolo	laanwj	@laanwj You can hit me, but I had a bad feeling when Gavin started using this ``const char *`` with the BDB excpetion hardening patch and was thinking about asking him to use a std::string, but as I nit-picked too often over the past weeks I keept quiet ... seems that was wrong.    Thanks for fixing this :)!
1919	9329416	2012-10-11T05:58:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9329416	Diapolo	laanwj	@laanwj It is rather clear what the button is intended for, I see no need to remove it, as it should be helpful at first for all Windows users, which are not that familiar with command-line fiddling ;).
1918	9637258	2012-10-20T21:55:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9637258	sipa	jgarzik	@jgarzik Any idea why BitcoinPullTester complains?
1918	10434666	2012-11-16T02:36:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434666	jgarzik	gmaxwell	Closing, for now.  Need to think more about @gmaxwell 's comments (see #1833, the previous version of this pull req) with regards to the proposed expiration of old, unconfirmed transactions in the memory pool.
1918	10697960	2012-11-25T20:30:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10697960	luke-jr	Diapolo	Also note this broke Bitcoin-Qt builds. Looks like we need that startup time variable @Diapolo suggested a while back...
1910	9209263	2012-10-07T15:56:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209263	Diapolo	laanwj	@laanwj I agree, it would be nice to have such a command, on the other hand we have not such a thing (currently) and I'm always going to point people at strings like these, which are not correct in the end ;). Have you got an idea for such a script?
1909	9243705	2012-10-08T23:09:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9243705	gavinandresen	jgarzik	@jgarzik making it global and putting it early in main won't fix the problem; the order of global destructors is undefined in C++.    As long as there is a printf/OutputDebugStringF before we start creating threads (and there is, early in AppInit2()) there is no race.    Reworking logging should be done... someday...  For now, I think this little change is the right thing to do.
1900	9077983	2012-10-02T16:52:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9077983	Diapolo	laanwj	@laanwj Thanks for explaining the idea to limit core access to *model.cpp, but I have to ask what makes the difference between having them in a .cpp or a .h only in the end?
1900	9207517	2012-10-07T12:29:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207517	sipa	laanwj	@laanwj Ok, good to know. There has been a general trend towards moving code to .cpp files, but I wasn't sure to what extent we want to pursue this. I don't care about having such oneliners in .h files.
1899	9084506	2012-10-02T19:55:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9084506	laanwj	TheBlueMatt	@TheBlueMatt why is that part of the windows upgrader pull? :)
1899	9085223	2012-10-02T20:16:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9085223	Diapolo	TheBlueMatt	@TheBlueMatt I didn't know that you had worked on that part, sorry. Apart from that I think my pull is smoother in the end, as we don't need a GetProxySocksVersion() function, which is the result from a discussion with @sipa and @laanwj.    I'm currently trying to overhaul the whole proxy stuff in the core and afterwards want to extend the Qt proxy / networking options with it.    Btw. funny thing is, that the starting point for my work on that part was your issue that we miss a lock for proxy structures :-D.
1899	9085223	2012-10-02T20:16:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9085223	Diapolo	sipa	@TheBlueMatt I didn't know that you had worked on that part, sorry. Apart from that I think my pull is smoother in the end, as we don't need a GetProxySocksVersion() function, which is the result from a discussion with @sipa and @laanwj.    I'm currently trying to overhaul the whole proxy stuff in the core and afterwards want to extend the Qt proxy / networking options with it.    Btw. funny thing is, that the starting point for my work on that part was your issue that we miss a lock for proxy structures :-D.
1899	9085223	2012-10-02T20:16:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9085223	Diapolo	laanwj.	@TheBlueMatt I didn't know that you had worked on that part, sorry. Apart from that I think my pull is smoother in the end, as we don't need a GetProxySocksVersion() function, which is the result from a discussion with @sipa and @laanwj.    I'm currently trying to overhaul the whole proxy stuff in the core and afterwards want to extend the Qt proxy / networking options with it.    Btw. funny thing is, that the starting point for my work on that part was your issue that we miss a lock for proxy structures :-D.
1899	9117324	2012-10-03T18:41:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9117324	laanwj	Diapolo	@Diapolo yes we really need your help as windows dev to get that windows auto-updating stuff in :) Personally, I think that's more urgent than perfecting the settings dialog.
1899	9137992	2012-10-04T11:16:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9137992	Diapolo	laanwj	@laanwj The current proxy related pulls are not there, only because I have some GUI ideas in my mind, they make proxy usage better and extend it with nice new stuff + fix the missing lock.    @TheBlueMatt As you opened the proxy lock issue, can you perhaps take a look at the code and ACK or give a short feedback? Can you rebase your Windows-update pull to current master or (if you want to) onto this one? I'll then try that whole stuff out in the following days :).    Edit: Btw., is the Pull tester offline?
1899	9137992	2012-10-04T11:16:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9137992	Diapolo	TheBlueMatt	@laanwj The current proxy related pulls are not there, only because I have some GUI ideas in my mind, they make proxy usage better and extend it with nice new stuff + fix the missing lock.    @TheBlueMatt As you opened the proxy lock issue, can you perhaps take a look at the code and ACK or give a short feedback? Can you rebase your Windows-update pull to current master or (if you want to) onto this one? I'll then try that whole stuff out in the following days :).    Edit: Btw., is the Pull tester offline?
1899	9164958	2012-10-05T04:09:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9164958	TheBlueMatt	Diapolo	@Diapolo Ill look at this in the next few days, and...not sure when Ill get around to updating the auto-update stuff... re: pull-tester, dont think so, but it seems like the jenkins server has mysteriously slowed down even more recently...not sure whats up with that (I chose to blame dnsseed, but I havent looked into it, so I cant blame @sipa for that)...Ive got some new hardware I may be able to throw into the mix, though, if I get the time to set up some sync mechanism...
1899	9164958	2012-10-05T04:09:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9164958	TheBlueMatt	sipa	@Diapolo Ill look at this in the next few days, and...not sure when Ill get around to updating the auto-update stuff... re: pull-tester, dont think so, but it seems like the jenkins server has mysteriously slowed down even more recently...not sure whats up with that (I chose to blame dnsseed, but I havent looked into it, so I cant blame @sipa for that)...Ive got some new hardware I may be able to throw into the mix, though, if I get the time to set up some sync mechanism...
1897	9077114	2012-10-02T16:26:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9077114	laanwj	luke-jr	Who is inventing a protocol here?    @luke-jr I don't like longpolling. IMO it's kind of a hack, as you have to re-establish the connection every time.     I'm not sure about "most clients", but streaming JSON data over a HTTP connection works fine at least in Python. If you can receive streaming video then you can receive streaming everything...    Adopting the Stratum protocol  sounds like overkill... We don't need an alternative method to submit commands or receive replies, just a way to remotely listen to async events so that UIs can be updated and such.
1895	9143425	2012-10-04T14:36:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9143425	gavinandresen	Diapolo	@Diapolo : good idea on the Verifying message.  And ok, I'll change the first period to an exclamation mark.    I'm finding serious bugs doing more testing; writing here so I don't lose track of them:    1) Getting a crash on my main wallet, bdb complaining about out of memory (out of mutexes).    2) Getting this weirdness switching from newer bitcoind to older:   10/04/12 14:16:00 nFileVersion = 70003   10/04/12 14:16:00 Performing wallet upgrade to 60000    3) Crash-at-shutdown due to the printf-in-global-destructor bug
1895	9154474	2012-10-04T19:45:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9154474	gavinandresen	jgarzik	Updated to not "pre-verify" blkindex.dat which fixes the 'out of mutexes' problem (looks like bdb does not clean up after a ->verify() ?), pick up some changes from @jgarzik version of DBEnv::RemoveDB (kept RemoveDB as the name, though, since it removes a database not a dbenv), and tweaked Warning! messages.    I'll investigate the downgrade weirdness separately, I'm afraid that might be another bug introduced in 0.7.0.
1895	9207890	2012-10-07T13:16:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207890	sipa	gavinandresen	@gavinandresen Do you consider this pull ready now?
1895	9240885	2012-10-08T21:28:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9240885	gavinandresen	luke-jr	@luke-jr it handles encrypted wallets as well as might be expected. It works on the bdb level, salvaging as many key/value pairs as it can from the backed-up wallet.dat.  If it encounters a database-level error reading keys (private keys, encrypted or not, or master keys) it tells the user to try to recover from a backup.
1889	9207904	2012-10-07T13:17:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207904	sipa	gmaxwell.	I agree with @gmaxwell. Can we add a check so only wallet names without / (or other filesystem separation character) are accepted? Maybe even limit to just alphanumeric names, and add ".dat" implicitly?
1889	10316604	2012-11-13T05:56:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316604	luke-jr	tcatm	@tcatm Any update and/or rebase?
1889	18909640	2013-06-04T13:43:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18909640	laanwj	sipa	Agree with @sipa
1886	9011812	2012-09-30T08:31:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9011812	laanwj	gavinandresen	I think it's worth doing a 0.7.1 after merging this.    AFAIK there have been no major or risky changes since the 0.7.0 release, so it could simply be spun off from master.    But it's @gavinandresen his call...
1884	8996293	2012-09-28T21:49:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8996293	gmaxwell	vladgiurgiubv	@vladgiurgiubv  Just to clarify what Sipa wrote: It still remembers the old keypool keys, but it makes new ones.. so if you don't back up right after encrypting you are exposed.
1884	8996652	2012-09-28T22:01:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8996652	vladgiurgiubv	gmaxwell	@gmaxwell I did back up after encrypting and I still lost them. I made 100 new adresses and that still didn't show up. Should I do more?
1884	8996954	2012-09-28T22:13:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8996954	gmaxwell	vladgiurgiubv	@vladgiurgiubv  making addresses isn't how you see if there there.. just startup with the restored wallet put in the app data directory and see if if the transactions show up after the blockchain is finished synchronizing.
1884	8996991	2012-09-28T22:15:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8996991	vladgiurgiubv	gmaxwell	@gmaxwell I did this and didn't get the 4.5 BTC
1884	8997284	2012-09-28T22:27:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8997284	vladgiurgiubv	gmaxwell	@gmaxwell I didn't make many transactions after the backup, after the backup i hit 2 times new adress...some of the transactions are showing up
1884	8999499	2012-09-29T01:08:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8999499	gmaxwell	vladgiurgiubv	@vladgiurgiubv  I'd be willing to take a look at it, if it's encrypted with wallet encryption and a strong passphrase, encrypt it up with gpg and send it to me (email address and key on the bitcoin.org site).  What you're describing doesn't sound possible... by looking at it I might be able to figure out something useful (either what behavior in bitcoin caused your loss, or figuring out where the coins went). Though doing this would deanonymize you to me.
1884	9001319	2012-09-29T06:33:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9001319	vladgiurgiubv	gmaxwell	@gmaxwell I've sent you an email. :) Thank you very much for trying!
1884	9012450	2012-09-30T10:29:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9012450	vladgiurgiubv	runeksvendsen	@runeksvendsen So what can I do now?... The fix you sent is just for the warning, isn't it?
1884	9211470	2012-10-07T19:34:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9211470	Diapolo	sipa	@sipa You can close this as we now have warnings in the GUI and when using the RPC-command.
1880	8978807	2012-09-28T14:52:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978807	sipa	Diapolo	@Diapolo I haven't checked lately, but if I recall correctly, IMPLEMENT_RANDOMIZE_STACK was effectively compiled away in recent GCCs. I've already argued for removing it, and still think we should - we have -fstack-protector to accomplish this now. I certainly won't implement it myself for new threads, though I wom't stop anyone from adding it.
1880	8979637	2012-09-28T15:15:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8979637	Diapolo	sipa	@sipa I'm not an in depth security guru, so if we are safe and the macro doesn't add anything to our security hull I'm also fine with removing it entirely. Perhaps the person who introduced it can comment?  Edit: When GCC optimises it away, that would be also a fact pro removal IMO.  Edit 2: Other than that I like this patch :).
1880	8983752	2012-09-28T16:59:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8983752	Diapolo	laanwj	@laanwj Some decissions I don't understand ... the code could be a little easier to read without it and would be shorter. Did no one want to remove it (do the work)?    Edit: I like that we now remove that thing :).
1880	9208019	2012-10-07T13:31:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208019	sipa	laanwj	@laanwj Updated; moved the management of fImporting to a RAII object.
1879	8975943	2012-09-28T13:17:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8975943	laanwj	diapolo's	ACK (after @diapolo's comment fixed)
1879	8976102	2012-09-28T13:23:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8976102	Diapolo	laanwj	@laanwj Sorry, I don't get it.
1878	8976683	2012-09-28T13:44:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8976683	xanatos	Diapolo	@Diapolo Aaaah... I hate github... I hate git... I was trying to rebase everything in local and I closed the pull...
1877	8965233	2012-09-28T05:45:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8965233	laanwj	diapolo	@diapolo can you please check?
1876	9122664	2012-10-03T21:19:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9122664	jgarzik	laanwj	@laanwj See OP, "Will BIP-ify if people like this."    No big use case outside of diagnostics (probing network to see how many are stuck), so closing
1872	9069867	2012-10-02T13:00:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9069867	gmaxwell	gavinandresen	@gavinandresen  Ah. Thanks.  I'm pretty sure thats just from adding an empty group after encountering a transaction where it can't add any linked ins or outs.   Pushing a revised patch that I expect will fix that (though I don't have a reproduction setup right now).    It might be helpful to encrypt that wallet with some impossible key and post it.
1871	8977206	2012-09-28T14:00:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977206	sipa	laanwj	ACK.  @laanwj even with an append-only wallet format, I suspect (at least initially) we'll load the entire wallet into memory anyway. Either we do that at the application level (have an iterator process all entries in the wallet at startup, like now), or at a thin layer beneath it that stores the key-value pairs in memory.
1870	9209689	2012-10-07T16:37:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209689	gavinandresen	jgarzik	I wrote up a 4-step test plan that I've been working through.    I also have a branch (not published) to reconcile this with my corrupt wallet handling pull; @jgarzik see https://github.com/gavinandresen/bitcoin-git/commits/BDB_RECOVER    The testplan I was working through:    1. Run new testnet3-in-a-box instance, let it IBD, shut it down.  Remove testnet3/database/ directory.     EXPECT: automatic re-index of blk0001.dat on startup.    2. Same a (1), but run with -detachdb. Corrupt blkindex.dat by truncating it by a few bytes, then restart.     EXPECT: automatic re-index of blk0001.dat on startup.    3. Same as (2), but corrupt some bytes instead of truncating the file.     EXPECT: automatic re-index.    4. Compile a bitcoind against a later version of BDB (e.g. BDB 5 instead of 4). Run without -detachdb.     Then startup a bitcoind compiled against the earlier BDB version.     EXPECT: Something Reasonable-- not a BDB_RUNRECOVERY uncaught exception/crash.    5. Same as (4), run with -detachdb.     EXPECT: Same something reasonable as (4).    I haven't tested 4/5 yet, and don't know enough about BDB major version compatibility to know what is reasonable to expect.
1870	9289231	2012-10-10T03:45:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9289231	jgarzik	gavinandresen	Fixed a few bugs, and rebased on top of @gavinandresen 's ::RemoveDb().  blkindex.dat is now properly removed, and reindex proceeds as expected.  Things appear to be working now.    Caveat: a genesis block is newly stored to blkNNNN.dat, for each -reindex invocation.  LoadBlockIndex() adds a new one to the (it thinks) newly created block file.  All other blocks are properly read and processed in-place.    -reindex highlights the poor speed of BDB indexing alone... and should provide a useful apples-to-apples basis for comparing the old BDB system with ultraprune.
1868	8897486	2012-09-26T17:12:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8897486	gmaxwell	laanwj	@laanwj  sounds like a plan.
1865	8846773	2012-09-25T08:18:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8846773	laanwj	diapolo	@diapolo no, it's not strictly needed for parsing, but it's human friendly to have some whitespace.
1864	8862971	2012-09-25T17:34:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8862971	Diapolo	fanquake	@fanquake Thanks for noticing, I'll fix that.
1863	16020156	2013-04-07T18:16:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020156	sipa	jgarzik?	Hmm, mind rebasing this @jgarzik? I think we forgot about this somehow.
1863	16033425	2013-04-08T05:38:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033425	jgarzik	sipa	@sipa will put it on the todo list.    @gmaxwell No real blocker other than it seemed like @gavinandresen grumped over this pull request in general.  :)
1863	16033425	2013-04-08T05:38:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033425	jgarzik	gmaxwell	@sipa will put it on the todo list.    @gmaxwell No real blocker other than it seemed like @gavinandresen grumped over this pull request in general.  :)
1863	16033425	2013-04-08T05:38:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033425	jgarzik	gavinandresen	@sipa will put it on the todo list.    @gmaxwell No real blocker other than it seemed like @gavinandresen grumped over this pull request in general.  :)
1863	18660363	2013-05-30T04:02:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18660363	jgarzik	sipa	@sipa agree that the static counters are ugly
1863	18750250	2013-05-31T15:01:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18750250	jgarzik	sipa	@sipa Added commit to encapsulate the static variables, and some existing variables held across invocations from multiple callers, into CWalletScanState.
1860	8977769	2012-09-28T14:20:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977769	sipa	gmaxwell	@gmaxwell I think a merkle-UTXO tree is further ahead than the need for separation between archive nodes and full nodes. I think the use case for those is separate from this issue, so I'd leave that for another network service bit.  @mikehearn: service bits have to indicate (positive) support for a feature, as they are ORed together when storing in the address book. That can change too of course, but it's certainly easier if that weren't necessary.  Originally, I thought about adding two separate bits, NODE_VALIDATION (validation/relay of blocks and transactions, maintaining a mempool, keeping UTXO set, serving (very) recent blocks) and NODE_ARCHIVE (providing old blocks), and have NODE_NETWORK imply both. This proposal accomplishes the same, but forces every archive node to be a validation node as well. Not a problem as such, but I'm not sure that's necessary.
1860	8977769	2012-09-28T14:20:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977769	sipa	mikehearn	@gmaxwell I think a merkle-UTXO tree is further ahead than the need for separation between archive nodes and full nodes. I think the use case for those is separate from this issue, so I'd leave that for another network service bit.  @mikehearn: service bits have to indicate (positive) support for a feature, as they are ORed together when storing in the address book. That can change too of course, but it's certainly easier if that weren't necessary.  Originally, I thought about adding two separate bits, NODE_VALIDATION (validation/relay of blocks and transactions, maintaining a mempool, keeping UTXO set, serving (very) recent blocks) and NODE_ARCHIVE (providing old blocks), and have NODE_NETWORK imply both. This proposal accomplishes the same, but forces every archive node to be a validation node as well. Not a problem as such, but I'm not sure that's necessary.
1860	9122778	2012-10-03T21:23:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9122778	jgarzik	sipa	@sipa:    If archive nodes will always be validating (which seems logical), one additional ```NODE_VALIDATION``` bit is sufficient.    If archive nodes will sometimes _not_ validate, then yes, we need two bits.
1860	9161778	2012-10-05T00:19:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9161778	sipa	jgarzik	@jgarzik Yes, that's my point. I don't think it makes sense to have that distinction now, but I'm not sure we should make it impossible to make that distinction in the future.
1860	9163970	2012-10-05T02:52:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9163970	TheBlueMatt	gmaxwell	@gmaxwell meh, I find that more protocol update than node service update...but I suppose leaving that up to the version king works best...  @sipa Can always add a NODE_ARCHIVE later if we really need it to mean non-verified old block provider?
1860	9163970	2012-10-05T02:52:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9163970	TheBlueMatt	sipa	@gmaxwell meh, I find that more protocol update than node service update...but I suppose leaving that up to the version king works best...  @sipa Can always add a NODE_ARCHIVE later if we really need it to mean non-verified old block provider?
1860	9169273	2012-10-05T08:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9169273	sipa	TheBlueMatt	@TheBlueMatt Right, but at that point, an old client that needs to IBD and doesn't know yet about the new service bit will not be able to find the archive-only nodes.
1860	9179862	2012-10-05T15:45:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9179862	TheBlueMatt	jgarzik	@jgarzik No consensus? I think every comment has been generally positive, and this is something we really need in the near future (I'd argue before ultraprune is merged).
1859	9002422	2012-09-29T09:43:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9002422	Diapolo	sipa	@sipa I updated GetProxy() to fill a proxyType object and make that usable outsite of netbase.cpp (moved the typedef to netbase.h).  @laanwj Can you have a in depth look at the changes to optionsmodel.cpp, I included the use of GetProxy() for the SOCKS version, too, which was not in before (was read from the settings only).
1859	9002422	2012-09-29T09:43:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9002422	Diapolo	laanwj	@sipa I updated GetProxy() to fill a proxyType object and make that usable outsite of netbase.cpp (moved the typedef to netbase.h).  @laanwj Can you have a in depth look at the changes to optionsmodel.cpp, I included the use of GetProxy() for the SOCKS version, too, which was not in before (was read from the settings only).
1859	9018066	2012-09-30T21:17:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9018066	Diapolo	laanwj	@laanwj Anything left for the Qt changes? I trie to not include feature-changes and will do that after this got merged.
1852	8787366	2012-09-22T10:08:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787366	fanquake	laanwj	@laanwj merged into one :)
1850	10392884	2012-11-15T00:41:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10392884	luke-jr	sipa	Fixed the bug @sipa found, and commented CWalletTx::GetAmounts better so the flow is more understandable.    I'll get to tests later.
1850	21089385	2013-07-17T03:08:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21089385	luke-jr	gavinandresen	Fixed @gavinandresen 's nit and a bug I thought @jgarzik reported with it (though it seems to have vanished here...), and rebased.    I am not sure how to create a test plan for these particular fixes. I believe the conditions to trigger the bug can only occur when some other (eg, newer) client has accepted wallet transactions that the currently running version does not understand.
1850	21089385	2013-07-17T03:08:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21089385	luke-jr	jgarzik	Fixed @gavinandresen 's nit and a bug I thought @jgarzik reported with it (though it seems to have vanished here...), and rebased.    I am not sure how to create a test plan for these particular fixes. I believe the conditions to trigger the bug can only occur when some other (eg, newer) client has accepted wallet transactions that the currently running version does not understand.
1850	25802763	2013-10-07T11:57:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25802763	Diapolo	luke-jr	@luke-jr Can you please rebase this or is it mergable?
1850	26050466	2013-10-10T12:50:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26050466	Diapolo	luke-jr	@luke-jr Are you still around here or don't you participate anymore?
1847	8786130	2012-09-22T06:47:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786130	laanwj	TheBlueMatt	ACK  I don't understand the pull tester output "Error: An error occurred while setting up the RPC port 8332 for listening on IPv4: Address already in use". Seems that a previous test run was still running? @TheBlueMatt
1847	8792570	2012-09-22T20:40:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8792570	TheBlueMatt	laanwj	@laanwj sorry, should be fixed now
1846	24643427	2013-09-18T06:23:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24643427	Diapolo	theuni	@theuni Could you help with adding meta-information to bitcoind.exe with autotools? The .rc file we use for bitcoin-qt.exe could be used I guess.
1846	24643649	2013-09-18T06:30:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24643649	theuni	laanwj	as @laanwj said, windres is already detected and used for qt. Just need to create a similar .rc and add a rule for it.
1846	24663117	2013-09-18T13:19:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24663117	Diapolo	theuni	@theuni I have no clue, how to do that. I could create a .rc file but that's it. I looked at makefile.am in src and src\qt and don't know how to make it working. Help please ;-).
1846	25684050	2013-10-04T08:47:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25684050	Diapolo	theuni	Thanks @theuni for creating the patch, closing!
1844	8786463	2012-09-22T07:54:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786463	Diapolo	fanquake	@fanquake Pretty neat catch, I will update this pull :).
1844	8786856	2012-09-22T08:59:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786856	laanwj	fanquake	ACK  BTW @fanquake you can get around the problem of displaying `<` and `>` on github by indenting code with four spaces :-) I've edited your post to show this.
1844	8786990	2012-09-22T09:17:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786990	fanquake	laanwj	@laanwj ah, cheers for that. I couldn't figure out how to make it work.
1844	8787017	2012-09-22T09:23:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787017	laanwj	diapolo	Oops @diapolo seems I merged this without the include change, I think you'll need a new pull for that
1844	8787064	2012-09-22T09:28:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787064	fanquake	Diapolo	@Diapolo I can do it if you want.
1844	8787347	2012-09-22T10:06:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787347	Diapolo	fanquake	@fanquake Yeah that's fine with me!
1841	8729776	2012-09-20T14:16:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8729776	gavinandresen	sipa,	I see two bugs:  make clean should remove obj/build.h  .gitignore should not ignore src/build.h, so 'git status' shows the obsolete src/version.h.  I'll push a fix for those.  I agree with @sipa, time moves forward and we don't want to muddy our source or Makefiles for stuff we changed in the past.
1841	8743191	2012-09-20T19:47:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8743191	luke-jr	gavinandresen	@gavinandresen Sounds reasonable.
1839	12043680	2013-01-09T13:14:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12043680	Diapolo	dooglus	@dooglus @jambolo Can you test the fix from #2157? You find a Windows binary for that pull over here: http://jenkins.bluematt.me/pull-tester/e6d230056202b05a27f187dff2648eb5c76fcfee/bitcoin/bitcoin-qt.exe    Others are also encouraged to test the fix!    @nybble41 ``I also noticed that the list does not get updated when the labels are changed via an RPC command.`` It would be nice to know if this one is still present and if yes can you create a separate issue please :).
1839	12043680	2013-01-09T13:14:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12043680	Diapolo	jambolo	@dooglus @jambolo Can you test the fix from #2157? You find a Windows binary for that pull over here: http://jenkins.bluematt.me/pull-tester/e6d230056202b05a27f187dff2648eb5c76fcfee/bitcoin/bitcoin-qt.exe    Others are also encouraged to test the fix!    @nybble41 ``I also noticed that the list does not get updated when the labels are changed via an RPC command.`` It would be nice to know if this one is still present and if yes can you create a separate issue please :).
1839	12043680	2013-01-09T13:14:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12043680	Diapolo	nybble41	@dooglus @jambolo Can you test the fix from #2157? You find a Windows binary for that pull over here: http://jenkins.bluematt.me/pull-tester/e6d230056202b05a27f187dff2648eb5c76fcfee/bitcoin/bitcoin-qt.exe    Others are also encouraged to test the fix!    @nybble41 ``I also noticed that the list does not get updated when the labels are changed via an RPC command.`` It would be nice to know if this one is still present and if yes can you create a separate issue please :).
1839	12134061	2013-01-11T07:15:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12134061	dooglus	nybble41's	I don't use Windows, but I built a Linux binary from #2157 and it does indeed appear to fix this issue.    As for @nybble41's comment, I've tried using the RPC command setaccount on the same address with various different account names using the #2157 build, and it updates correctly in the 'receive coins' tab each time.
1839	12134100	2013-01-11T07:17:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12134100	Diapolo	dooglus	@dooglus Thanks for testing, that are some good news :).
1839	12785601	2013-01-28T15:03:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12785601	Diapolo	laanwj	@laanwj Can be closed!
1837	8755568	2012-09-21T05:33:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8755568	laanwj	TheBlueMatt's	Ok great,  Looks like @TheBlueMatt's has to install openssl1.0.1c in /mnt/mingw/openssl-1.0.1c, before the pull tester can test this.
1836	8736271	2012-09-20T16:32:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8736271	gavinandresen	laanwj	I like @laanwj 's suggestion, add an optional boolean param to stop.
1836	8763046	2012-09-21T12:31:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763046	sipa	laanwj;	Agree with @laanwj; in LevelDB we won't need this anymore.
1835	8826754	2012-09-24T17:18:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8826754	jgarzik	sipa's	Closing, hopefully can look at implementing @sipa's suggestion
1834	8679990	2012-09-19T05:50:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8679990	gmaxwell	jgarzik	@jgarzik the download happily continues when we get another block from the network in an average of 10 minutes.  I presented the toy example ignoring checkpoints because its easier to understand.  The same exposure exists at retargets where a forks can be created that differ in difficulty by a factor of two, or if a non-majority but high hashpower (e.g. asics before they are widely adopted) attacker used timewarp to mine a fork down to low difficulty starting anywhere after the highest checkpoint.  I don't think the exposure, even if it is fringe and unexciting is worth avoiding waiting for a block in the rare case that you get a peer which is stuck and behind the chain.
1833	8827980	2012-09-24T17:56:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8827980	jgarzik	mikehearn	Two more added conditions:  1) Should have checked NODE_NETWORK (pfrom->fClient), which the BIP states, and @mikehearn unintentionally hinted at. 2) Only do this for the first two hours after node startup.
1833	9208279	2012-10-07T14:08:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208279	sipa	jgarzik	@jgarzik PullTester gives a compile error; can you look into that?
1832	12133430	2013-01-11T06:37:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12133430	Diapolo	gavinandresen	@gavinandresen Wasn't this also fixed?
1832	12150928	2013-01-11T16:13:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12150928	gavinandresen	Diapolo	@Diapolo : yes, thanks for looking through the issues list, that's a huge help!  Closing.
1828	10434714	2012-11-16T02:38:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434714	jgarzik	sipa	agree w/ @sipa
1826	8596341	2012-09-16T16:38:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8596341	luke-jr	KrzaQ	@KrzaQ You may wish to visit https://www.transifex.com/projects/p/bitcoin/ and check if your language has 100% coverage; if not, it would be helpful if you can help update/maintain it :)
1825	8616586	2012-09-17T14:30:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8616586	roques	xanatos	@xanatos: You're raising good questions and I've thus pushed an updated "big comment".  On testing the correctness of the implementation:  I've tested the equivalence of the old and new implementations for a reasonably big subset of all possible compact numbers.  While doing so I've benchmarked the new against the old implementation:  For sizes relevant to bitcoin the new implementation is ~80% faster.  For bigger sizes the speedup approaches ~900% due to the big intermediate value used by the old implementation.    Compact numbers are such a small part of bitcoin, their speed is almost irrelevant; I'm hoping the new implementation is easier to understand, the speedup is just a nice side effect.  About endianness:  The "compact" representation is not a serialization into bytes, but a mapping into and out of an unsigned 32 bit number.  The endianness (= order of bytes when mapping a number to a sequence of bytes) is thus irrelevant.  However, bitcoin serializes `CBlock::nBits` like any other `unsigned long`.  The semantics of `BN_num_bytes(n)` is well documented and part of the interface of OpenSSL.  It is *not* the number of bytes used in a serialization of `n`, but the position of the most significant non-zero base256 digit of `n`.  It actually is implemented as `(BN_num_bits(n)+7)/8`.  (`BN_num_bits(10)` = 4 because decimal 10 = binary 1010)
1823	8532257	2012-09-13T15:31:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8532257	sipa	gavinandresen	@gavinandresen The problem is not that it doesn't follow some specification (afaik Satoshi invented this compact format), the problem is that the encode and decode functions are inconsistent with each other.  I agree we should think about changing functions involved in block validation very carefully of course...
1823	8537872	2012-09-13T18:21:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8537872	roques	sipa	@sipa It is not even that bad:  Currently `SetCompact()` produces negative results for compact numbers with `0x00800000` bit set, whereas other implementations leave the bit set in their interpretation of the compact number or fail during verification.  If a Satoshi client get's such a compact number it will pass it to CBigNum.getuint256, which will ignore the sign and thus interpret the compact number `0x08812345` as `0x0123450000000000` instead of `0x8123450000000000`.  However, none of the implementations I've looked at actually generates such compact numbers and my proposed rewrite still makes sure not to generate them either.  The effect of the rewrite is that ''if'' a future implementation would produce such a number it would be interpreted in the most likely intended way instead of effectively stripping the bit in a convoluted way.  The reason for proposing this change is that I'm going through the bignum and base58 implementation extending the test-suite and simplifying the implementation.  This weird behavior of `SetCompact` was the first to trip-up my tests.  If we come to the conclusion not to accept this change, I'll change the test-suite accordingly.
1821	8497786	2012-09-12T15:30:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8497786	jgarzik	sipa's	Prefer @sipa's #1822 fix
1814	8437541	2012-09-10T20:39:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8437541	gmaxwell	Diapolo	@Diapolo The miner used an identical pubkey and extranonce, resulting in a duplicate coinbase transaction. (which replaced the prior one, making the earlier one effectively unspendable). This has happened twice... an expensive mistake.
1813	8426153	2012-09-10T15:17:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8426153	gavinandresen	gmaxwell,	I agree with @gmaxwell, the goto looks like spaghetti code to me.
1811	8426243	2012-09-10T15:19:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8426243	gavinandresen	laanwj	NACK. I agree with @laanwj
1809	8409045	2012-09-09T20:38:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409045	sipa	jgarzik	@jgarzik Sure the use case for attaching metadata to payments comes up, but in my opinion that is just because no infrastructure for negotiating a payment exists. I still haven't seen a need for that metadata to be attached to the actual bitcoin transaction that is used to perform that payment. My opinion remains that only data necessary for the world to validate the transfer belongs in the transaction - anything else is private information between sender and receiver.
1809	8409081	2012-09-09T20:42:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409081	gmaxwell	jgarzik	@jgarzik You actually think that people have a fundamental right to force third parties to perpetually store information unrelated to securing and inflation proofing Bitcoin as a price of being able to contribute their participation to the decentralized trust the Bitcoin is secure and inflation proof. I don't agree.   If you instead want to say that creating costs unrelated to operating the currency for users is regrettable but sometimes unavoidable, and that it's better to enforce some least harmful methods in order to discourage some more harmful ones (e.g. paying to bogus pubkeys) I would agree.... but so long as the OP_DROP data is in scriptpubkey instead of scriptsig, it's not really a least harmful method.
1809	8412481	2012-09-10T02:46:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8412481	laanwj	sipa.	I agree with @sipa. Only data that is strictly necessary for the world to validate a transaction has a place in the block chain. That's the whole point of it. Everything that is only significant to the sender and receiver (or miner) should be between the sender and receiver (or miner) and doesn't need to be stored forever by every other full node in the world.  Really I'd love sending some metadata with transactions for UI purposes, or even messaging between users, but this data should ideally be transient and not carved in stone in the block chain. That just feels wrong.   Would it be possible to have an expiration date on the information? So that the OP_DROP could truly be dropped after some time? I guess not, if they're hashed into the transaction...
1809	18937708	2013-06-04T20:43:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18937708	luke-jr	gmaxwell	IMO, this kind of thing really should have @gmaxwell 's hash preimage required-to-relay as a prerequisite...
1807	8405548	2012-09-09T17:12:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405548	luke-jr	gavinandresen	%zu is AFAIK standard C++, so is it confirmed to not work with MingW?  @gavinandresen PRI64x *is* the standard way of printing int64 types. %x, %lx, %llx all target implementation-dependent sizes for int, long, and long long.
1807	8405681	2012-09-09T17:29:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405681	laanwj	luke-jr	@luke-jr Well as I said, I can't find it in the list in the official documentation on the MS site, so if it works at all I don't think it is safe to use.  Also I'm pretty sure that C++ standard says nothing about printf, that's from the (Ansi/C89/C99) C standard. C++ has the funny `std::cout <<` formatting...  Edit: I do read that %z is official C99 and quite some C++ compilers implement it. However, it's still strange that it's not in the documentation for MSVC...
1807	8405880	2012-09-09T17:44:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405880	luke-jr	laanwj	@laanwj Meh, it's part of C99 (page 289), so if it works then I don't see any reason to avoid it.
1797	8359722	2012-09-07T08:48:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8359722	Diapolo	laanwj	@laanwj I'm sure URI-handling is not active on Windows with 0.6.3, so I'm surprised then...
1797	8359820	2012-09-07T08:54:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8359820	Diapolo	Sladien	@Sladien Here you go http://sourceforge.net/projects/bitcoin/files/Bitcoin/bitcoin-0.7.0/test/
1796	8373611	2012-09-07T18:07:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8373611	luke-jr	tcatm	I've sync'd my local copy of this branch with Transifex and updated the first 2 commits there. Will be working with @tcatm to finish the rest.
1795	8915356	2012-09-27T01:09:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8915356	jgarzik	mikehearn	implementation ACK, I like it a lot.  This seems to match the initial sketch from @mikehearn and myself on IRC.
1795	10030079	2012-11-02T20:58:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10030079	TheBlueMatt	mikehearn	@mikehearn there are a few comments which note what the protocol defines as spec (these are obviously up for discussion):  * there is no formal definition for filter parameters for a filteradd command if no filter is loaded - it is up to the serving node (if the client doest care, why should the spec determine the parameters?)  * as noted above, 1MB limit to filteradd  * txes in MSG_FILTERED_BLOCK can be relayed even when a node already has seen it (the current code does this) however it MUST always forward txn that the node has not seen (I think the bip says this, but its not really clearly worded imho, I updated the BIP to make this more clear)
1795	10030614	2012-11-02T21:18:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10030614	TheBlueMatt	BitcoinPullTester	@BitcoinPullTester hey, I wasnt done yet!
1795	12047118	2013-01-09T14:47:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12047118	gmaxwell	mikehearn	@mikehearn  Kind of an an unfortunate privacy loss for ones who do set it, and it still leaves the feature potentially useless for any who set it.  (But I agree on having the option, if for nothing else because it makes the load-balancing lark I suggested viable)
1795	12328294	2013-01-16T16:58:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12328294	TheBlueMatt	gavinandresen	@gavinandresen Yes, after discussion I believe we are currently targeting skipping the 2 MatchesTemplate commits for 0.8 and maybe skipping those entirely depending on what we may need in the future.
1795	12336539	2013-01-16T19:52:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12336539	TheBlueMatt	gavinandresen	@gavinandresen moved it to main.cpp, is that ok for you?
1793	8738277	2012-09-20T17:25:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8738277	Diapolo	sipa	@sipa As this touches a part of your networking code, can you take a look here, too?
1786	8288946	2012-09-05T06:34:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8288946	jgarzik	Diapolo	@Diapolo so you actually tested this on Windows, for the net and !net cases?  I'm not sure the Windows expected behavior matches what you describe...
1786	8289180	2012-09-05T06:49:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289180	Diapolo	laanwj	The error 10022 is still logged with this and without my patch, as select() returns WSAEINVAL. I tried it :).  @laanwj Yes, a check for ``have_fds`` is working, I can update my pull after this one is in.
1786	8289850	2012-09-05T07:24:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289850	Diapolo	jgarzik,	That is what I tried to say @jgarzik, his patch does not prevent the 10022 spam, I read the select() documentation on MSDN more than once to understand what is happening ^^.  I rather sure most part of that network code are still from Satoshi (at least he was the one who merged them to Github at first).
1784	8266288	2012-09-04T15:06:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8266288	laanwj	gavinandresen.	In general, nitpick pull requests means that people are looking closely at the code and reporting issues and strange things, which is very good.  This, of course, doesn't all proposed changes have to be accepted. In this case I agree with @gavinandresen. This makes the code longer, not shorter :p
1782	8253967	2012-09-04T06:49:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8253967	Diapolo	luke-jr	@luke-jr ACK this patch is unneeded.
1781	9857498	2012-10-29T06:41:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9857498	Diapolo	sipa	@sipa Did you look if the code-flow is valid? It took me quite some time, so it would be nice if feature-wise this could get an ACK and I try to compress the code, to shorten it :).    Btw. I'm using a client with this codebase since a few weeks with Tor hs enabled, looking good.
1781	10052253	2012-11-04T16:28:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10052253	Diapolo	sipa	@sipa I have re-worked this pull to be a little shorter, it contains no loop though. Can you have a look at the functionality now?
1781	10316623	2012-11-13T05:57:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316623	luke-jr	sipa	What @sipa said. Also, this needs a rebase.
1778	8291252	2012-09-05T08:36:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8291252	Diapolo	laanwj	Updated to reflect @laanwj suggestion to not pass multiple bools to Bind().
1778	8738247	2012-09-20T17:24:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8738247	Diapolo	sipa	@sipa Any reason left to not merge from your point of view?
1778	8965990	2012-09-28T06:42:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8965990	Diapolo	sipa	I'm a little sad that @sipa does not comment, as we had the initial discussion. I still think this patch is valuable.
1778	8969624	2012-09-28T10:01:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8969624	sipa	Diapolo	@Diapolo sorry, I've been very busy the past few days - I'll have a look soon.
1776	8800045	2012-09-23T16:33:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8800045	Diapolo	gavinandresen	Perhaps @gavinandresen could re-run his tests with current master. And I'm asking myself if setVisible() could contain bugs because of the "old" Qt version we use for compiling Bitcoin-Qt?
1776	10473694	2012-11-17T12:45:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10473694	Diapolo	gavinandresen	@gavinandresen Can you comment again please, such orphans need more love ;).
1775	12307181	2013-01-16T07:09:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12307181	Diapolo	laanwj	@laanwj   I did successfully build Qt5 and a Qt5 based Qt Creator version (2.6.1). I'm now in the process in looking at needed source code changes because of Qt API changes (see https://qt-project.org/doc/qt-5.0/qtdoc/sourcebreaks.html).    So far there were only a few things like changed function names or deprecated things. I'll create a patch, for the changes what are already possible with Qt4, to increase Qt5 compatibility. I was also able to build a static Qt5 version, but I'm not able to build Bitcoin-Qt from it -_-.
1774	8219723	2012-09-02T07:36:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8219723	luke-jr	laanwj	@laanwj It does feel strange to me, but I failed to think up a better way short of trying to rewrite it in some other paradigm. Maybe boost::variant would work better (most of the CAccountingEntry pointers are NULL), but I'm not comfortable with adding that into the mix myself this late in the release cycle.
1773	12017874	2013-01-08T21:20:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12017874	Diapolo	gavinandresen	Also for 0.7, @gavinandresen any news on this?
1772	8220967	2012-09-02T11:19:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8220967	Diapolo	sipa	Perhaps @sipa can comment here and ACK or suggest a better solution?
1772	8268668	2012-09-04T16:06:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268668	Diapolo	gmaxwell	@gmaxwell @sipa and others... Can another core dev please take a look and ACK this one? As a fix I would like to see it in the next RC.
1772	8268668	2012-09-04T16:06:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268668	Diapolo	sipa	@gmaxwell @sipa and others... Can another core dev please take a look and ACK this one? As a fix I would like to see it in the next RC.
1767	8289902	2012-09-05T07:27:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289902	Diapolo	laanwj	@laanwj Do you consider this a 0.7 patch? I updated it to reflect in a comment that we currently don't have a scrollback limit.
1767	8312068	2012-09-05T20:05:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8312068	Diapolo	gmaxwell	@gmaxwell I really had no privacy concern at first when opening this, I was just annoyed that the Up-/Down-Key history could not be deleted ^^. I'm not sure about your idea, it is for sure some work and I also would like to be able to still do copy and paste (when not using the clear button).
1767	8384765	2012-09-08T05:30:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384765	laanwj	gmaxwell	@gmaxwell good idea, I guess this could be best done with a list of commands and parameter positions that contain secrets that should be "censored". Secrets nested deep in JSON data structures are too much bother IMO.
1767	9367270	2012-10-12T05:49:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9367270	Diapolo	laanwj	@laanwj Can you still merge this for 0.7.1?
1767	10434832	2012-11-16T02:44:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434832	jgarzik	laanwj	ping @laanwj
1764	8203127	2012-08-31T19:51:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8203127	gmaxwell	luke-jr	@luke-jr  that is a major reason to impose a strict canonicality requirement. If there is only one way to encode/decode each value then it is relatively simple and reliable to write tests cases that that show two implementations agree.  If there are multiple ways then an attacker can exploit them to create network splits if there are subtle bugs in some implementation.
1762	8178784	2012-08-31T00:03:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178784	gmaxwell	clopez	Also, NAK, but I wanted to also thank @clopez  for taking the time to actually implement something and write a pull request, even if this particular change isn't one we want.  Generally prefer to keep functionality 'internal' rather than direct people to centralized services, and we already have a pretty good transaction detail decoder in Bitcoin (e.g. open the console and run getrawtransaction).
1760	8183206	2012-08-31T05:46:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183206	Diapolo	laanwj	@laanwj Thanks for your feedback.  - You are right, we should test every supplied proxy, but tell me how would I pass (command-line wise) more than 1 proxy as in current init code there is no loop for more than 1 proxy. - Yes it should leave the option active and just warn the user, to don't breach privacy, I'll change that. I see the current implementation just as a startup check, which could be extended to a proactive meassurement thread or sth. - As to init(), network or own thread I have no final belief, where this is suited best ... - There currently is just a 1sec timeout and if that passed the warning is shown.
1760	8189188	2012-08-31T11:31:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8189188	sipa	Diapolo	@Diapolo A separate proxy server for IPv6 was never implemented :)
1760	8207266	2012-08-31T23:03:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8207266	Diapolo	sipa	@sipa Not yet, but as you know #1769 just does that. Are you fine with the ``ConnectionTest()`` function?
1760	8211234	2012-09-01T08:52:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8211234	Diapolo	gmaxwell	@gmaxwell Currently, when using or supplying a non working proxy, the client simply does not connect and tells the user nothing about it (which is worst case IMO). This one at least checks if a connection to the supplied IP:port combination can be made on startup.  You are right the connection is not used as proxy connection currently, but I guess ``ConnectionTest()`` can be extended. I did not intend it as watchdog, but just to fix #763. I like your idea though and @laanwj suggested something similar.
1760	8211234	2012-09-01T08:52:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8211234	Diapolo	laanwj	@gmaxwell Currently, when using or supplying a non working proxy, the client simply does not connect and tells the user nothing about it (which is worst case IMO). This one at least checks if a connection to the supplied IP:port combination can be made on startup.  You are right the connection is not used as proxy connection currently, but I guess ``ConnectionTest()`` can be extended. I did not intend it as watchdog, but just to fix #763. I like your idea though and @laanwj suggested something similar.
1760	8211281	2012-09-01T09:01:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8211281	laanwj	gmaxwell's	I like @gmaxwell's test-as-we-go approach. When the proxy is used, and it fails to connect to the proxy, show and log a warning (only once!).   For this to work you'd need to isolate cannot-connect-to-proxy problems from the-proxy-cannot-connect-to-target errors.
1759	8175512	2012-08-30T21:37:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8175512	Diapolo	bondbeau	@bondbeau 0.6.3 doesn't like it, when the process just get's killed, 0.7 should be more sane as we did some shutdown-code-tweaking there. Could be, that your database was damaged and if you never used the client and have no funds in your wallet it would be easiest to just empty your whole Bitcoin data directory.  ONLY delete it, if there are NO coins or needed addresses in your wallet!
1759	8178272	2012-08-30T23:36:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178272	bondbeau	Diapolo	@Diapolo Thanks for your reply, but I have to say I'm quite shocked that Bitcoin is being proffered as a refined money replacement for world-wide use if something as simple as an unplanned shutdown brings it to its knees.  Since I really don't want to be a tester and therefore only want to run 'released' versions...please explain step-by-step exactly how one can repair this situation. I do actually have a tiny amount of coin in the wallet which I would be just as happy to keep as to lose (as I suspect would be the case for most users regardless of circumstance), so exactly which files in which directories need to be deleted or fixed or whatever...it that is the correct solution? For example, I don't see a "data" directory for Bitcoin. I see "daemon" and "src"...  Please understand that I am simply an end-user...just like most any other person in-the-wild who might like to see what this is about...and thanks for your help.
1759	8178497	2012-08-30T23:47:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178497	sipa	luke-jr	@luke-jr I doubt that'd make any difference  @bondbeau  I assume the shutdown caused Bitcoin to be terminated prematurely, and the database got corrupted. Little we can do about that while using BDB (the database engine) I'm afraid, but it is embarrassing to be frank. BDB should deal with such events, but since it didn't, I fear there's little you can do but delete blkindex.dat, blk0001.dat, and if it exists blk0002.dat. They can be found in the data directory (see https://en.bitcoin.it/wiki/Data_directory). After that, start Bitcoin again, and it should redownload the blockchain.
1759	8178497	2012-08-30T23:47:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178497	sipa	bondbeau	@luke-jr I doubt that'd make any difference  @bondbeau  I assume the shutdown caused Bitcoin to be terminated prematurely, and the database got corrupted. Little we can do about that while using BDB (the database engine) I'm afraid, but it is embarrassing to be frank. BDB should deal with such events, but since it didn't, I fear there's little you can do but delete blkindex.dat, blk0001.dat, and if it exists blk0002.dat. They can be found in the data directory (see https://en.bitcoin.it/wiki/Data_directory). After that, start Bitcoin again, and it should redownload the blockchain.
1759	8178853	2012-08-31T00:07:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178853	bondbeau	luke-jr	@luke-jr Thanks, but the the file for the .exe didn't want to download after I reloaded the page...(I hesitated and cancelled it the first time because Avast said something like "hey...do you really want to download this file that almost nobody around the world has ever downloaded"). Hope you understand...  @sipa Bitcoin is running again and downloading the block chain according to your suggestion...so thank you very kindly. I'll play around with it a bit, but given this first-time experience I can't imagine trying to rely on Bitcoin as a way to actually live and make routine transactions. It's desperately...D-E-S-P-E-R-A-T-E-L-Y...needed...but it simply can't fly like this in my opinion...it just can't gain widespread use.  Really...thinking about it just now, wouldn't it have to be essentially foolproof for children as young as four or five...or whatever age it is that kids commonly start to handle small amounts of paper and coin money?  Much appreciation for the concept though...cheers and well wishes!
1759	8178853	2012-08-31T00:07:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178853	bondbeau	sipa	@luke-jr Thanks, but the the file for the .exe didn't want to download after I reloaded the page...(I hesitated and cancelled it the first time because Avast said something like "hey...do you really want to download this file that almost nobody around the world has ever downloaded"). Hope you understand...  @sipa Bitcoin is running again and downloading the block chain according to your suggestion...so thank you very kindly. I'll play around with it a bit, but given this first-time experience I can't imagine trying to rely on Bitcoin as a way to actually live and make routine transactions. It's desperately...D-E-S-P-E-R-A-T-E-L-Y...needed...but it simply can't fly like this in my opinion...it just can't gain widespread use.  Really...thinking about it just now, wouldn't it have to be essentially foolproof for children as young as four or five...or whatever age it is that kids commonly start to handle small amounts of paper and coin money?  Much appreciation for the concept though...cheers and well wishes!
1759	8179061	2012-08-31T00:18:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8179061	luke-jr	bondbeau	@bondbeau np, like @sipa said, it probably isn't fixed anyway. On a side note, you might consider another antivirus suite: Avast seems fairly hostile to Bitcoin so far.  Keep in mind that neither this client, nor any other today, is considered production-ready. For better or worse, the market is ahead of the software in this area.
1759	8179061	2012-08-31T00:18:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8179061	luke-jr	sipa	@bondbeau np, like @sipa said, it probably isn't fixed anyway. On a side note, you might consider another antivirus suite: Avast seems fairly hostile to Bitcoin so far.  Keep in mind that neither this client, nor any other today, is considered production-ready. For better or worse, the market is ahead of the software in this area.
1759	8183046	2012-08-31T05:29:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183046	Diapolo	bondbeau	@bondbeau These problems are why we still call our Bitcoin client experimental software. The people who are participating here do this mostyl in their freetime and they do a pretty good job. A switch to a "better" or more stable database system is in the works and every day brings fixes to the client. We simply need users, like you, who will report problems here, so thanks for that :).
1759	8678299	2012-09-19T03:32:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8678299	gmaxwell	gavinandresen	@gavinandresen  that just means you get to do it to leveldb too. :P
1759	8690778	2012-09-19T13:23:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8690778	bondbeau	sipa's	The next chapter in this story after @sipa's suggestion helped me get Bitcoin running again:   1. After running it for a number of days (with only ordinary laptop sleep along the way) and letting it finish downloading the blockchain, I did a PLANNED shutdown. As in, I selected File > Exit and quit the program before restarting my machine.   2. Bitcoin not having been high priority, I didn't try to start it again until yesterday...but guess what..it doesn't. In fact, the only option given in the Bitcoin directory of the start menu is to "Uninstall Bitcoin".
1758	8184310	2012-08-31T07:12:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8184310	Diapolo	laanwj	@laanwj I was not quite sure, if the code was platform independent, that is why I mentioned Windows.  Just enter ``addmultisigaddress`` for example and take a look at the message. It clearly mentions ``<'[\"key\",\"key\"]'>``, which makes users think they need to specify ``\"`` instead of just ``"`` (which works after your patch).
1758	8196136	2012-08-31T15:45:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8196136	laanwj	diapolo	Help (as in the help X command) was already working. It seems that what @diapolo was seeing is that error messages are dumped as raw JSON object, instead of formatted (and that you get help for free as error if you issue an command without the needed # of arguments).  I've added basic formatting for errors. I've also added a doxygen comment to explain what `parseCommand` does.
1753	8130892	2012-08-29T16:16:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8130892	gmaxwell	jgarzik	@jgarzik   Perhaps, but most packages aren't currencies where a mis-compilation can make tens of thousands of dollars worth of data go irrecoverably poof.   Giving it the standard 'check' name and having the build process yell at you to run it would be not horrible half-step perhaps.
1752	8139958	2012-08-29T20:31:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8139958	Diapolo	laanwj	@laanwj Can you verify tha I did what you suggested ;)?
1750	8118425	2012-08-29T08:24:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8118425	Diapolo	laanwj	@laanwj Any good idea for the JSON arrays and the RPC console?
1750	8119845	2012-08-29T09:30:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8119845	laanwj	diapolo.	Thanks for testing and examples @diapolo. This is something with boost:escaped string not emulating bash well enough. I'll try to fix this before rc2.
1750	8120062	2012-08-29T09:39:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8120062	Diapolo	laanwj	@laanwj Yeah that would be nice! It seems a little weird to see the help output, which contains ``'`` and as Windows user I have to replace that by ``\"`` is there any chance to internally fix this or at least let the RPC help string contain the correct format for each OS?
1744	8270829	2012-09-04T17:06:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8270829	laanwj	jgarzik	Ok @jgarzik I hadn't done a line-by-line comparison yet. If it's just code movement, apart from the added key, it's fine for me to merge it into rc2.
1742	8106026	2012-08-28T20:33:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8106026	gmaxwell	Diapolo	@Diapolo    Imagine you were to send a number in the range -127 to 127 inclusive to someone using bits. You decide to send one bit to indicate positive or negative, then 7 more bits to signal 0-127.    In this encoding there are two ways to send zero:  +0 and -0.  This can create problems if some series of calculations could result in +0 and some series of calculations could result in -0 and then you compare them naively.  You can avoid this confusion by declaring +0 as canonical and either converting -0 to +0 whenever it shows up or catching it and treating it as an error.  In Bitcoin we use OpenSSL to parse our  signatures. A signature consists of a set of flags and some big numbers packed together. The signatures are supposed to be DER encoded, but OpenSSL supports BER (a superset of DER) and even parses some  crazy invalid values as meaningful, like some negative values being treated as positive and you can even create valid signatures this way by depending on the details of OpenSSL's behavior behavior that won't hold true with other implementations or perhaps not in the future.  In particular, for Bitcoin the validity of non-canonical signatures is problematic because tx ids are hashes over the whole transaction, including the signature.  I can stick garbage at the end of your transaction's signature resulting in a still valid transaction but with a different txid which your software may or may not recognize as being the same transaction.
1742	8978659	2012-09-28T14:48:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978659	sipa	gavinandresen	@gavinandresen @jgarzik Can I get some ACKs on this? This pull request has no semantic effect, it just brings a test function into scope.  I suppose the question is whether the code here reflects the actual standard for public keys and signatures we want. The test case does have a function to verify consistency with OpenSSL, and has 100% coverage (for signatures), though.
1742	8978659	2012-09-28T14:48:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978659	sipa	jgarzik	@gavinandresen @jgarzik Can I get some ACKs on this? This pull request has no semantic effect, it just brings a test function into scope.  I suppose the question is whether the code here reflects the actual standard for public keys and signatures we want. The test case does have a function to verify consistency with OpenSSL, and has 100% coverage (for signatures), though.
1742	9633166	2012-10-20T16:28:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9633166	sipa	gmaxwell	@gmaxwell I think we need code that enforces creation of strictly-even-s-value-signatures, and have some discussion with authors of other clients before we can even think about code to test for that...
1737	8115891	2012-08-29T05:47:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8115891	Diapolo	CoDCoyote	@CoDCoyote If it's working again please just close the ticket :).
1736	8098886	2012-08-28T16:57:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8098886	Diapolo	sipa	@sipa Any reson to not remove a (currently) non working feature during RC-phase? Less code should contain less bugs ^^.
1730	8068273	2012-08-27T19:52:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8068273	luke-jr	Diapolo	@Diapolo Yep, we're dealing with the fallout from that missing on IRC now ;)
1730	8072379	2012-08-27T21:58:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8072379	Diapolo	TheBlueMatt	@TheBlueMatt As that is sorted out and already merged you can close this.
1727	8182348	2012-08-31T04:24:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8182348	fanquake	keverw	@keverw  http://qt.nokia.com/products/
1723	8021028	2012-08-25T07:37:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8021028	laanwj	sipa	@sipa can you test that this also solves the problem in xubuntu?
1722	8016800	2012-08-24T22:35:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8016800	gmaxwell	sipa	@sipa  I don't think anyone is opposed to that idea; but I could write a script that produces an infinite number of possible ones, and I don't think we know how to agree on one.
1720	8117767	2012-08-29T07:52:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8117767	Diapolo	laanwj	@laanwj Can we get this in for RC2?
1718	8014330	2012-08-24T20:45:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014330	luke-jr	mikehearn	ACK, though @mikehearn 's point deserves some consideration.
1718	8014456	2012-08-24T20:50:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014456	gmaxwell	mikehearn	@mikehearn  Well the reasoning on 1711 doesn't slippery slope like that; or at least I didn't intend it to.  Let me retry: The number of txouts in the txset with 1e-8 minimum txout is 2100000000000000 outputs, or about 51 bits of index. Without a limit the maximum is infinite. Perhaps its a bit academic, but it makes it possible to write design which can be shown to always work (absent a hardfork that changes things around).  (Also, arguably, bitcoin nodes don't have an incentive to actually validate against double-spend 0 value transactions because they don't risk inflation)  With a value of zero, redeeming it gains you absolutely nothing (at least in the context of the system) redeeming it if it's 1e-8 gets you something and is always rational to do so when you can do it for free (e.g. when there is space left over before the next increment). E.g. I can reasonably say that a feature that autosweeps 1e-8 dust when making transactions is clearly in the users direct best interest. I can't say that for 0.  Thanks for the smart property example, getting that example was why I prodded you for your input.  I don't think it changes my view at least in terms of non-standardness; though perhaps it will ultimately be a reason to not make them invalid.
1717	7997927	2012-08-24T10:33:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7997927	Diapolo	laanwj	@laanwj IMHO we can't protect people from everything and should not special case too much (and that I learned from you ^^).
1716	8014263	2012-08-24T20:42:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014263	luke-jr	TheBlueMatt	@TheBlueMatt No reason the Gitian build can't be updated to use 1.50 too, but it sounds non-trivial, and I think @gavinandresen wants to do 0.7rc1 today.
1716	8014263	2012-08-24T20:42:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014263	luke-jr	gavinandresen	@TheBlueMatt No reason the Gitian build can't be updated to use 1.50 too, but it sounds non-trivial, and I think @gavinandresen wants to do 0.7rc1 today.
1716	8044982	2012-08-27T00:50:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8044982	luke-jr	Diapolo's	Adjusted for @Diapolo's comment. Whether we switch to boost 1.50 or not is another issue IMO, and the 1.49 build should still be fixed either way...
1716	8045745	2012-08-27T02:15:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8045745	laanwj	luke-jr,	I think this should be merged nevertheless. If anything, it is harmless when 1.50+ is used because of the version check.  Edit: btw @luke-jr, now that you're changing the boost build, - can you add `runtime-link=static` to build only the mt-s variant that we use, instead of mt-s and mt? this just saves some compilation time. - also we need a `<ranlib>i686-w64-mingw32-ranlib` in user-config.jam so that the manual `ar xf`s (in both boost-win32.xml and gitian-win32.xml) can be skipped.
1716	8047323	2012-08-27T05:34:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8047323	Diapolo	laanwj	I have to admit, I really like the idea of directly switching to Boost 1.50 and use that.  @laanwj Did you yet report that Boost 1.51 bug to the Boost devs? Would be nice to notify them. Just for comparison, my Boost command-line to build contains ``--build-type=minimal stage link=static runtime-link=static threading=multi variant=release -a -j 4 --with-filesystem --with-program_options --with-system --with-thread``
1715	17398341	2013-05-03T14:52:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17398341	jonasschnelli	laanwj	@laanwj could we not just show the "nTransactionFee" from walletmodel in the dialog according to mockups in #1714? Because we also do the exceeds calculations based on nTransactionFee,... so i would say it's also okay to place them there. The real txfee will might be different. Maybe we show " and ~0.0005 BTC to transaction fees"?
1715	17469463	2013-05-06T07:36:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17469463	jonasschnelli	laanwj	@laanwj okay,... let me check if i can somehow calculate (use the current txfee calc code) the fee before the confirmation dialogue pops up.
1714	16109945	2013-04-09T12:39:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16109945	Diapolo	qubez	@qubez So you don't have a patch, but just did some graphics mod how you would like it to look ;)?
1714	24580619	2013-09-17T11:26:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24580619	Diapolo	laanwj	@laanwj Can be closed, as the great patch from @jonasschnelli was merged recently.
1714	24580619	2013-09-17T11:26:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24580619	Diapolo	jonasschnelli	@laanwj Can be closed, as the great patch from @jonasschnelli was merged recently.
1712	7970583	2012-08-23T14:04:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7970583	Diapolo	laanwj	I was using https://download.visucore.com/bitcoin/bitcoin-qt-20120823.zip, which @laanwj created for a stack-protector test-setup.  Interesting find now is, that my own builds, which include #1479, are working and display the immature balance directly after client startup ... forget that I re-tested laanwjs build and now the transaction and balance is displayed, too ... very strange.
1712	7993060	2012-08-24T06:01:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7993060	laanwj	luke-jr	@luke-jr also wants to change that, to show mined transactions at depth 1 instead of depth 2.   I tend to agree this time. Especially as no one clueless is solo-mining anymore, the current threshold is probably overprotective.
1706	8276570	2012-09-04T19:59:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8276570	xanatos	jgarzik	@jgarzik woops... I corrected the name of the pull instead of the name of the commit :-)
1705	7974204	2012-08-23T15:51:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7974204	laanwj	TheBlueMatt	Agree @TheBlueMatt it's only a lukejr thing, it's fine with me to remove it.  I remember some time ago there was a redesign that moved the tabs to the side; when there is a lot of space for tabs it makes sense to make even message signing, which is a rarely used feature, a tab in itself. But with so limited space for tabs it really makes no sense.
1705	7978205	2012-08-23T17:58:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978205	Diapolo	sipa	@sipa I like the idea of a Tools / Utilities menu option, but that should go to another pull then :).
1705	7978220	2012-08-23T17:59:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978220	luke-jr	sipa	@sipa If there is still disagreement over this, then it should remain an option.
1705	7983311	2012-08-23T20:40:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983311	Diapolo	laanwj	I had that feeling ... and I was right. Everytime a decision is made that differs from what you would like it to be, some arguments are constructed even if you would be the only person in the world as proponent. Shall I open a poll everytime I argue with @laanwj over something... seems a little unconstructive in the end, sorry to say.
1705	7983662	2012-08-23T20:53:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983662	luke-jr	Diapolo	@Diapolo What is unconstructive is this removing of functionality people want for no reason.
1705	7987944	2012-08-23T23:37:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7987944	luke-jr	Diapolo	If FIRST_CLASS_MESSAGING is to be removed against consensus, could @Diapolo at least do it in a separate commit after the "re-order GUI code" so those of us who want it can revert in our own branches?
1705	8004534	2012-08-24T15:23:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8004534	Diapolo	BitcoinPullTester	@BitcoinPullTester The last error was ``fatal: 'e3eb634e44f677d02a08ed5bbc0d7d3acc0db6c7' does not point to a commit`` and that should not relate to the contents of this pull, as current commit-ID is ``0b35903d75803eb983e6a4f4c3c888da5ae4e3d7``.
1705	8009314	2012-08-24T17:34:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8009314	TheBlueMatt	BitcoinPullTester,	That probably means between the time pull tester got the list of pulls and the time it checked this pull, the commit that was this pull's head was removed from the git repo in question, it should give an update when it runs the new version. (also, please dont tag @BitcoinPullTester, I wont see it, please tag me instead)
1705	8028858	2012-08-26T00:22:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8028858	Diapolo	luke-jr	@luke-jr Sorry, I don't know what you mean by ``Check out .git/logs/refs/heads/cleanup_bitcoingui`` and I don't want to spend too much time with this. I thought the change was ACKed and as I said you could just skip that pull?
1705	8118347	2012-08-29T08:20:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8118347	Diapolo	luke-jr	To do @luke-jr a small favor, I split up that pull into 2 commits, one removes the 1stclass stuff and the other does the GUI re-ordering. I hope everyone is happy now and this get's in soon to not have the need to further discuss it...
1695	7910355	2012-08-21T18:09:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7910355	sipa	Diapolo	@Diapolo Normally, block files do not contain orphan blocks (by which i mean blocks that have no known parent), they do have chains of stale chains that got reorganised away (which is what I assume you're talking about). This only prevents real orphan blocks from being imported.
1694	7931495	2012-08-22T11:36:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931495	sipa	Diapolo	@Diapolo You're not the first to miss it, so I added a comment to clarify: that break does not stop trying new addresses, it just returns to the outer loop, which sleeps, recalculates allowed address ranges, adds seed nodes, ... before continuing.
1692	8269147	2012-09-04T16:19:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269147	Diapolo	jgarzik	@jgarzik I can remove the cache, as I did not profile :). Will update, just a few minutes...
1692	8269609	2012-09-04T16:32:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269609	Diapolo	jgarzik	Guys that pull was open for 2 weeks now, I got no feedback, then used @jgarzik feedback to update and now you tell me that thing is useless...
1692	8269863	2012-09-04T16:39:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269863	Diapolo	laanwj	@laanwj Sorry for my over-reacting, had a little trouble at work today. You are right, it can be even shorter and if you want I can use strprintf (although snprintf() has a buffer-length check afaik).
1692	8270815	2012-09-04T17:06:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8270815	Diapolo	laanwj	@laanwj You are absolutely right then, ``strprintf()`` is the function to take ... I'm just interested, was it deeply inspected for any faults / security flaws in it's implementation, as I find it rather strange to trust a hand-made function that much :) or even more than standard functions.
1685	8757101	2012-09-21T07:27:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8757101	laanwj	Diapolo	@Diapolo my time is pretty limited, and I haven't found time to test and look at this in further detail yet. It will be  a while before 0.8.0 is released, I guess, so there's no need to hurry.
1685	9209901	2012-10-07T17:01:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209901	Diapolo	laanwj	@laanwj I found a method to achieve what I wanted, without the need to change the detachDB stuff in OptionsModel::data().
1685	11906764	2013-01-05T00:59:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11906764	Diapolo	luke-jr	Neither @luke-jr nor @laanwj added further comments, but from my point of view this would be a nice little addition for 0.8.    Edit: I tried it and still seems to work, but would of course need a little testing an feedback ;).
1685	11906764	2013-01-05T00:59:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11906764	Diapolo	laanwj	Neither @luke-jr nor @laanwj added further comments, but from my point of view this would be a nice little addition for 0.8.    Edit: I tried it and still seems to work, but would of course need a little testing an feedback ;).
1684	7842609	2012-08-18T07:35:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842609	laanwj	luke-jr	@luke-jr So to decode that, you mean run this importing in a thread (after the Init succeeds), pretend that the blocks come in from the network, and use the current progress mechanism? I suppose that could work, if you block the real network for the duration that the file is being read.  Also it doesn't address the above points. Does it somehow need to remember where it was with importing, between runs?
1684	7843040	2012-08-18T09:07:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843040	Diapolo	luke-jr	I recently added an info message when doing a -loadblock, so this needs a rebase + the shorter the message the better, because of the small splashscreen.  @luke-jr When doing a -loadblock nothing is interactive, the client is just displaying the splashscreen and a message for ~1 hour or more.
1684	7844448	2012-08-18T13:26:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7844448	luke-jr	laanwj	@laanwj I guess that would keep the current IBD behaviour during a loadblocks. However, it seems like it has potential to slow things down, so should probably be tested.
1684	8827353	2012-09-24T17:38:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8827353	jgarzik	Diapolo's	Updated strings, addressing @Diapolo's comments.
1684	8833440	2012-09-24T20:28:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8833440	Diapolo	jgarzik	@jgarzik Thanks, one last nitpick, we use ellipsis for every stage of the init and you make me happy, when you convert the ``.`` into ``...`` for both strings :-D. You are free to hate me a little afterwards ^^, but get my ACK then.
1684	8869431	2012-09-25T20:42:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8869431	Diapolo	gavinandresen	@gavinandresen I sometimes hate that character trait and so I'm fine with other devs ignoring some of the nit-picks if they feel bugged.
1683	7843064	2012-08-18T09:12:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843064	Diapolo	laanwj	@laanwj I know that you don't want this like it is now, but for reference and discussion it needs to be here, as I'm unable to do Linux scripts or stuff like that :). That's why I mentioned ``build.h``.
1683	7965741	2012-08-23T10:36:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7965741	Diapolo	sipa	I "only" need our version information in this format:  <pre> #define VER_PRODUCTVERSION     0,6,99,0 #define VER_PRODUCTVERSION_STR "0.6.99.0" </pre>  @sipa Tell me, do you think this is achievable via your suggestion?
1683	7975803	2012-08-23T16:41:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975803	Diapolo	BitcoinPullTester	Updated to include a comment for the macros, looks good to me. I just don't know how many messages @BitcoinPullTester will create now ;). I would like to take a look at it, after this last update, to be sure.
1683	7996496	2012-08-24T09:22:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7996496	Diapolo	BitcoinPullTester,	Come on dear @BitcoinPullTester, I want a build to get this in 0.7 :). Well there is no folder for commit-ID a5266398d88c6e596b91208eca0ce3aee5b5e3cb, so I guess I won't get one ^^.  Well as I said on Windows everything is looking good, so it should be safe to give it a try before 0.7 RC?
1683	8004569	2012-08-24T15:24:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8004569	Diapolo	laanwj	@laanwj I never understood, where the Qt version variable was used. I can do a diff of the makefiles WITH and WITHOUT ``VERSION`` and report back.
1683	8031805	2012-08-26T10:02:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8031805	Diapolo	BitcoinPullTester	It seems the relative path I used in Windows format (in the .rc file) is incompatible with the cross-compilation. I'll update later with Linux style format.  Edit: I changed ``#include "..\..\clientversion.h"`` into ``#include "../../clientversion.h"``, which still compiles just fine on Windows. Waiting now for a @BitcoinPullTester confirmation.
1683	8150316	2012-08-30T06:19:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8150316	laanwj	thebluematt	@thebluematt we could use another pulltester run here :-)
1683	8212421	2012-09-01T12:21:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8212421	Diapolo	TheBlueMatt	@TheBlueMatt Any idea, why @BitcoinPullTester refused to build anything for us? I would love to see this in 0.7 final.
1683	8212421	2012-09-01T12:21:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8212421	Diapolo	BitcoinPullTester	@TheBlueMatt Any idea, why @BitcoinPullTester refused to build anything for us? I would love to see this in 0.7 final.
1683	8215093	2012-09-01T17:58:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8215093	TheBlueMatt	Diapolo,	Sorry, @Diapolo, pull tester is currently paused pending an upgrade to the block tester.  I should have time to get it back up today.
1683	8289144	2012-09-05T06:46:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289144	Diapolo	laanwj	@laanwj I rebased to current master to create a new commit-ID, hope that helps.
1683	8305508	2012-09-05T16:50:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8305508	Diapolo	BitcoinPullTester	Rebased to match the 0.7rc2 version information. Still no sign from @BitcoinPullTester :-(.  @TheBlueMatt Can you check why this pull seems to be ignored by it?
1683	8305508	2012-09-05T16:50:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8305508	Diapolo	TheBlueMatt	Rebased to match the 0.7rc2 version information. Still no sign from @BitcoinPullTester :-(.  @TheBlueMatt Can you check why this pull seems to be ignored by it?
1683	8305924	2012-09-05T17:02:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8305924	TheBlueMatt	Diapolo	@Diapolo calm down, this pull is pretty far down the list, there is quite a backlog, and each test takes a number of hours, it may be a few days...
1683	8339307	2012-09-06T16:52:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8339307	Diapolo	TheBlueMatt	@TheBlueMatt It seems once more a no more existing commit ID was chosen. Any idea for this?
1683	8339477	2012-09-06T16:57:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8339477	TheBlueMatt	Diapolo	@Diapolo again, the backlog is pretty long, you'll have to wait for it to finish its current run and start the next before it picks up the latest commit id.
1683	8366336	2012-09-07T14:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8366336	Diapolo	laanwj	@laanwj YES, it finally works, I downloaded bitcoin-qt.exe and can verify it works! The last rebase was needed to update to 0.7.0.2 for RC2.  @TheBlueMatt Sorry that I was so impatient ^^.
1683	8366336	2012-09-07T14:11:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8366336	Diapolo	TheBlueMatt	@laanwj YES, it finally works, I downloaded bitcoin-qt.exe and can verify it works! The last rebase was needed to update to 0.7.0.2 for RC2.  @TheBlueMatt Sorry that I was so impatient ^^.
1677	7899172	2012-08-21T12:18:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7899172	Diapolo	sipa	@sipa One question, our current AppendBlockFile() function takes MAX_SIZE into account and generates a new block-file if the space left in the block file (max allowed filesize) is < MAX_SIZE. So 128 MiB files would have a maximum of 96 MiB usage-data, right?
1677	7899296	2012-08-21T12:24:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7899296	sipa	Diapolo	@Diapolo: not sure what you mean; I don't use AppendBlockFile anymore.
1677	7899334	2012-08-21T12:27:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7899334	Diapolo	sipa	@sipa I saw that and wanted to understand the change here, which condition is used to determine, if a new block-file needs to be created, where is the check in your new code for that and what's the space limit?
1677	8047427	2012-08-27T05:47:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8047427	Diapolo	sipa	@sipa With block database format you mean stored blocks in blk0000x.dat?
1677	8052173	2012-08-27T10:31:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8052173	sipa	luke-jr	@luke-jr how do you mean breaking the ability to downgrade? The blk000*.dat files remain exactly the same format, but the other databases are incompatible.  @Diapolo No, it uses coins.dat (the unspent txout set) and chain.dat (the block index), in addition to the blk*.dat (and rev*.dat) files. It's the format of chain.dat that changed in the last commit.
1677	8052173	2012-08-27T10:31:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8052173	sipa	Diapolo	@luke-jr how do you mean breaking the ability to downgrade? The blk000*.dat files remain exactly the same format, but the other databases are incompatible.  @Diapolo No, it uses coins.dat (the unspent txout set) and chain.dat (the block index), in addition to the blk*.dat (and rev*.dat) files. It's the format of chain.dat that changed in the last commit.
1677	8062078	2012-08-27T16:47:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8062078	luke-jr	sipa	@sipa If it interacts with downgrades in ugly ways, I'd probably not want to put it into next-test.
1677	8062727	2012-08-27T17:07:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8062727	sipa	luke-jr	@luke-jr Shouldn't be a problem - the filenames are all different, so you can (almost) run ultraprune and non-ultraprune together in the same datadir independently.  That said, it's likely to conflict with a lot of other stuff, so decide for yourself.
1677	8158190	2012-08-30T12:48:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8158190	sipa	mikehearn	@mikehearn https://github.com/bitcoin/bitcoin/pull/1677.diff ?
1677	8189169	2012-08-31T11:29:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8189169	sipa	mikehearn	@mikehearn  Seems that through rebasing I lost some comments you made earlier on the commits?  Regarding the encodings, I plan to write some text about the final format for all datastructures, but I may change a few things still.
1677	8282968	2012-09-04T23:43:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8282968	sipa	mikehearn's	Rebased/combined with @mikehearn's LevelDB patch
1677	8762537	2012-09-21T12:07:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762537	sipa	TheBlueMatt	@TheBlueMatt any way to disable the build tester here, as it seems to be incompatible with this anyway?
1677	8764081	2012-09-21T13:12:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8764081	sipa	laanwj	@laanwj: updated to use $(MAKE)
1677	8792615	2012-09-22T20:46:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8792615	TheBlueMatt	sipa	@sipa Id rather not, the patch is really quite simple (http://jenkins.bluematt.me/pull-tester/files/bitcoind-comparison.patch) , afaict, its only failing because setBlockIndexValid was added directly above hashGenesisBlock in main.cpp.  Can you just move that line and see if it works?
1677	8851318	2012-09-25T11:48:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8851318	sipa	TheBlueMatt	Changed the database/serialization format one more time: coins and undo data now contains the transaction version number. This may be necessary when new versions of transaction are defined that have an influence on their ability to be spent.  @TheBlueMatt ok, moved the setBlockIndexValid line in main.cpp.
1677	8978928	2012-09-28T14:56:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978928	sipa	TheBlueMatt	@TheBlueMatt I wonder why it still complains?  EDIT: Oh, just out of date with master. Let's wait for the next cycle.
1677	9357697	2012-10-11T20:59:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9357697	sipa	Diapolo	@Diapolo es, I've done windows builds; I even had to backport the LevelDB env for windows from c++0x to c++, as gitian only has a gcc 4.2 mingw compiler which doesn't support c++0x.
1677	9496096	2012-10-16T16:07:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9496096	gavinandresen	echo	Errors compiling on my Mac:    makefile.osx has 4 spaces instead of a tab:  ```    @echo "Building LevelDB ..."; cd leveldb-1.5.0; make; cd ..```    And:  ```txdb-bdb.cpp: In member function bool CCoinsDB::HaveCoins(uint256):  txdb-bdb.cpp:10: error: make_pair was not declared in this scope```
1677	9502063	2012-10-16T18:51:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9502063	sipa	gavinandresen	@gavinandresen Why does it build the BDB version? Did you explicitly disable USE_LEVELDB, or is there a problem with the makefile that causes this?
1677	9631794	2012-10-20T14:32:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9631794	gavinandresen	sipa	Design ACK; I reviewed all of the changes to main.h and about half of main.cpp, and had just a handful of tiny nits that aren't worth picking.    I feel comfortable pulling this as long as @sipa can commit to working through the remaining TODOs and help fix any bugs that crop up over the next month or so.
1673	7737505	2012-08-14T19:34:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7737505	Diapolo	BitcoinPullTester	I tried the version from @BitcoinPullTester and it starts just fine, but Process Explorer shows ASLR as Disabled, which it does not for my local build with the linker flags from this patch.
1673	7778851	2012-08-16T07:48:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778851	Diapolo	BitcoinPullTester	Does @BitcoinPullTester use an official Gitian build setup? I observed, that it seems to use Qt 4.8.2 (which is nice), but I'm not sure what causes ASLR not to work or how this can be fixed.  I used the qmake ``*=`` operator, which only adds the options, if they are not present, perhaps I should try with default ``+=``?
1673	7816931	2012-08-17T12:50:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816931	Diapolo	sipa	@sipa The official qmake docs only mention win32:, while we seem to use windows: quite a lot in the project-file, but that is not what you observed, it looks like you could be right, see this.  <pre>  win32 {      SOURCES += paintwidget_win.cpp  }  The above code will add the paintwidget_win.cpp file to the sources listed in the generated Makefile if qmake is used on a Windows platform. If qmake is used on a platform other than Windows, the define will be ignored. </pre> From: http://doc-snapshot.qt-project.org/4.8/qmake-advanced-usage.html  But how can we enable linker-flags for Windows builds then? Would the condition be true for official Gitian builds?
1673	7817179	2012-08-17T13:01:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817179	sipa	Diapolo	I just checked; all windows-specific stuff enabled in bitcoin-qt.pro ends up being passed as command-line options in jenkin's build log. @Diapolo Can you try changing the win32: qualifier to windows: ?
1673	7817268	2012-08-17T13:05:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817268	Diapolo	sipa	@sipa Updated to ``windows:`` I'll also check my makefiles and will try ``windows:`` and ``win32:``.
1673	7828349	2012-08-17T16:50:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828349	TheBlueMatt	Diapolo	@Diapolo I thought I grabbed the same versions of deps that the gitian file uses, but I might have just grabbed the latest Qt...However, I did use exactly the gitian script (minus a few faketimes, etc things that are only there to make it deterministic), so if you find the version it uses, running the same gitian scripts with that version should work fine.
1673	7828460	2012-08-17T16:53:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828460	Diapolo	TheBlueMatt	@TheBlueMatt Thanks for that information, btw. I think we should use latest Qt for official builds, but that's not the matter here :). How does @BitcoinPullTester check if a pull changed or how long does it take after a new build is started after a rebase. Just asking, as I want to get this issue sorted out (missing linker-flags).
1673	7828460	2012-08-17T16:53:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828460	Diapolo	BitcoinPullTester	@TheBlueMatt Thanks for that information, btw. I think we should use latest Qt for official builds, but that's not the matter here :). How does @BitcoinPullTester check if a pull changed or how long does it take after a new build is started after a rebase. Just asking, as I want to get this issue sorted out (missing linker-flags).
1673	7837306	2012-08-17T22:49:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7837306	Diapolo	TheBlueMatt	@TheBlueMatt It seems to me that ``RELEASE=1`` is missing in the test.log's qmake-calls, could this be true?
1673	7843262	2012-08-18T09:48:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843262	Diapolo	sipa	@sipa If we want this for bitcoind.exe on Windows, where do we need to add the linker flags?
1671	7711107	2012-08-13T22:57:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7711107	luke-jr	gmaxwell	@gmaxwell requested it (or at least a build; not sure if he meant for a pullreq)
1671	7715560	2012-08-14T03:53:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715560	jgarzik	laanwj	@laanwj +1
1671	7816972	2012-08-17T12:52:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816972	sipa	gmaxwell	@gmaxwell You can request a view of changes from github without there being a pull request for it. The URL for this one would be: https://github.com/luke-jr/bitcoin/compare/63046fcf6...next  (where 63046fcf6 is the current master).
1670	7817221	2012-08-17T13:03:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817221	sipa	gmaxwell	I believe @gmaxwell argued in an earlier request for just using the full string. I wouldn't mind, and it enables using getblock directly, for example, without extra lookup. It's still a debug log file, right?
1670	8300753	2012-09-05T14:32:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8300753	laanwj	luke-jr	Agree with @luke-jr here. The point of the log is simply to give as much as possible info for debugging issues.
1669	7708054	2012-08-13T21:07:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7708054	Diapolo	laanwj	@laanwj Who is Diablo :-P?  But yes, I proposed ``Bitcoin-Qt`` a few times and still think the child needs a better name (proper noun) than just ``Bitcoin``. I also think luke is right when saying "Not confusing users is pretty important." as between all that tech-stuff Gavins grandma should be able to use all this ^^.
1669	7715274	2012-08-14T03:26:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715274	laanwj	Diapolo,	@Diapolo, Diablo is someone on IRC but I meant you, sorry for the confusion  I also think not confusing users is pretty important, however of the many things I've heard users complain about, the name is not one of them. I'm also pretty sure that the wx UI simply called itself "Bitcoin" everywhere (but feel free to prove me wrong) as my first draft was an exact clone of that with Qt.
1665	7606711	2012-08-09T06:54:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7606711	laanwj	luke-jr	Yes it makes sense. I know it was discussed when encrypted wallets were implemented.  @luke-jr: It still may use that for change, right?
1656	7708341	2012-08-13T21:15:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7708341	Diapolo	apetersson	@apetersson I don't think this is worth to be open as issue, as we have the mentioned "out of sync" display in 0.7 and the 0 display are the UI default values. Are you fine with closing this?
1648	7702928	2012-08-13T18:42:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7702928	sipa	luke-jr	I think @luke-jr is right here, though I haven't looked closely enough to be sure, so thanks for raising the point.  Anyway, this does raise another point: maybe IsFromMe() transactions should not be retransmitted unless they are really created by this instance (and not received from the network).
1648	7703714	2012-08-13T18:57:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7703714	luke-jr	sipa	@sipa That sounds like a good idea. How does it work with raw transactions (which are likely the common use case for this)?
1648	7732345	2012-08-14T16:58:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7732345	luke-jr	SergioDemianLerner	@SergioDemianLerner "A" is not a real risk, since relaying the non-standard transaction is the only way to actually use it (so the only way to avoid this risk is to not use non-standard transactions at all). "B" seems like it could have some serious privacy implications, though - do you think it would work better if the client secretly held onto the transaction and only relayed it again later?
1641	7436355	2012-08-01T18:53:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7436355	jgarzik	gmaxwell	@gmaxwell was asking about testing.  This was tested successfully with a one-line pynode patch (pynode HEAD deb07f51435cd0d18596bddfee28e337a5a6454e).  pynode issues 'mempool' at startup, and fills its own mempool with the returned results.  ``` --- a/node.py +++ b/node.py @@ -238,6 +238,7 @@ class NodeConn(asyncore.dispatcher):                         self.send_message(msg_verack(self.ver_send))                         if self.ver_send >= CADDR_TIME_VERSION:                                 self.send_message(msg_getaddr(self.ver_send)) +                       self.send_message(msg_mempool())                         self.send_getblocks()   ```
1639	7425982	2012-08-01T12:28:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7425982	Diapolo	sipa	@sipa That is, why I made it an option here ... some like this better, others like that better and now they can chose. I really like the progress bar. Give this patch a try and tell what you think afterwards?
1639	7426117	2012-08-01T12:35:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7426117	sipa	Diapolo	@Diapolo I don't really use the GUI myself, so I'll let others judge it. It just seems to me that after not having reached an acceptable solutions after so much discussion, we should try something else :)
1632	7434590	2012-08-01T17:53:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434590	luke-jr	jgarzik	Rebased and fixed @jgarzik 's spelling qubbles. However, I left nIds and addrinfos, because: - "nId's" construction is invalid grammar - nIds is in fact used as a variable name already - addrinfo is not a variable name at all (CAddrInfo is a class)
1620	7170805	2012-07-23T06:36:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7170805	luke-jr	laanwj	@laanwj It's the client name. How are users to differentiate Bitcoin-Qt from other clients they may have installed? Specific clients shouldn't claim to be "Bitcoin" or it will confuse users into thinking Bitcoin *is* the software.
1620	7170918	2012-07-23T06:46:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7170918	laanwj	gavinandresen	Anyway, I'm fine with any name but I think naming should be @gavinandresen 's call as project lead.
1620	7171868	2012-07-23T07:28:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7171868	luke-jr	laanwj	I guess I see it as the same Bitcoin-Qt project mainly by @laanwj (ie, same maintainer = same project), and @gavinandresen the project lead of bitcoin*d* (which happens to share the same git repository). I don't really care what you choose to name the client, but *some* distinction between Bitcoin and this Bitcoin client is needed.
1620	7171868	2012-07-23T07:28:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7171868	luke-jr	gavinandresen	I guess I see it as the same Bitcoin-Qt project mainly by @laanwj (ie, same maintainer = same project), and @gavinandresen the project lead of bitcoin*d* (which happens to share the same git repository). I don't really care what you choose to name the client, but *some* distinction between Bitcoin and this Bitcoin client is needed.
1620	7180912	2012-07-23T15:17:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7180912	luke-jr	gavinandresen	As I see it: - Bitcoin as the concept / protocol / technique / blockchain - "Satoshi" as the reference protocol implementation began by Satoshi Nakamoto, maintained by @gavinandresen  - bitcoind as the JSON-RPC server began by Satoshi Nakamoto, maintained by @gavinandresen  - Bitcoin-Qt as GUI client began and maintained by @laanwj
1620	7180912	2012-07-23T15:17:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7180912	luke-jr	gavinandresen	As I see it: - Bitcoin as the concept / protocol / technique / blockchain - "Satoshi" as the reference protocol implementation began by Satoshi Nakamoto, maintained by @gavinandresen  - bitcoind as the JSON-RPC server began by Satoshi Nakamoto, maintained by @gavinandresen  - Bitcoin-Qt as GUI client began and maintained by @laanwj
1620	7180912	2012-07-23T15:17:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7180912	luke-jr	laanwj	As I see it: - Bitcoin as the concept / protocol / technique / blockchain - "Satoshi" as the reference protocol implementation began by Satoshi Nakamoto, maintained by @gavinandresen  - bitcoind as the JSON-RPC server began by Satoshi Nakamoto, maintained by @gavinandresen  - Bitcoin-Qt as GUI client began and maintained by @laanwj
1619	7157433	2012-07-21T23:04:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7157433	justmoon	mikehearn	> If it must be forked, the fork should have its own git repository, which can be embedded using git submodules (or just pulled in by gitian for Win32)  I'm maintaining the branch here, feel free to fork/clone: https://github.com/justmoon/leveldb-mingw  It should be pointed out that the "fork" doesn't actually modify a single line of code in LevelDB. LevelDB runs in Chromium (`env_chromium.cc`) on Windows and is heavily tested there, but of course those APIs are Chrome specific. For Mac, Linux etc. it comes with an `env_posix.cc`. For Windows, Edouard wrote an `env_boost.cc`. All I did then was to make the MSVC specific stuff MingW compatible. ([diff](https://github.com/justmoon/leveldb-mingw/commit/81b85db8bf6dde62d80ae5bed33a29ade27129fc))  @mikehearn: Let me know if/how we should go about promoting this upstream. We'd probably have the best chances once we also test native compilation on Windows with both GCC and MSVC - which is on my todo list.  > Dynamic linking to OS-provided LevelDB should be supported, especially since the fork is only needed for Win32  I agree, there are many bad, but also a few good reasons why people might want to link to their own LevelDB build, so there should be a clean, canonical way of doing it without having to edit build files.
1619	7399074	2012-07-31T14:03:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7399074	sipa	luke-jr,	I'd like to have all database-breaking changing merged at once, as I don't we'd like to either support many different combinations of database environments, or force users to regularly rebuild or at least reindex their database.  I'm specifically referring to Jeff's attempts to split the database in several parts, and my "ultraprune" branch (though we should first do benchmarks to check the performance of combining both).  Also, @luke-jr, ultraprune has an abstract class to represent the coin database, and I've already implemented an std::map-backed implementation, so whether or not the database itself can be memory-backed is not much of an issue anymore.
1619	7420822	2012-08-01T07:57:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7420822	mikehearn	luke-jr,	My concern with that is we need better performance right now, because miners have been observed dropping transactions to ensure fast block propagation.  Pruning is a more complex change with unresolved questions like how to ensure we have a good enough collection of archival nodes, how they are found, etc. I guess it also improves performance (maybe?) due to the smaller working set - combining these branches and getting some performance metrics would be useful.  Jeffs work I think is subsumed by this because leveldb is structured as lots of small files already. On 31 Jul 2012 16:03, "Pieter Wuille" < reply@reply.github.com> wrote:  > I'd like to have all database-breaking changing merged at once, as I don't > we'd like to either support many different combinations of database > environments, or force users to regularly rebuild or at least reindex their > database. > > I'm specifically referring to Jeff's attempts to split the database in > several parts, and my "ultraprune" branch (though we should first do > benchmarks to check the performance of combining both). > > Also, @luke-jr, ultraprune has an abstract class to represent the coin > database, and I've already implemented an std::map-backed implementation, > so whether or not the database itself can be memory-backed is not much of > an issue anymore. > > --- > Reply to this email directly or view it on GitHub: > https://github.com/bitcoin/bitcoin/pull/1619#issuecomment-7399074 >
1619	7423774	2012-08-01T10:29:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7423774	sipa	mikehearn	@mikehearn The reason I'm pushing ultraprune is exactly because of the performance improvements. If I disable signature checking, importing the entire blockchain (using -loadblock, a few weeks ago) took 7 minutes on my laptop (6 minutes when on tmpfs instead of disk, 5 minutes when I use an std::map-backed store instead of BDB). It was originally intended to reduce storage requirements and permit pruning, but because of the much smaller working set, there is a very significant speedup. Pruning isn't even implemented right now (but would be trivial), and I need a bit more time to do tests to verify that it works exactly as the current validation engine, but apart from that, it is mostly functional. I hope to have a pull request soon.
1619	7759455	2012-08-15T15:45:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7759455	jgarzik	luke-jr	Most of the @luke-jr requests are not reasonable, but I do agree about wanting to avoid forking Windows support.  Is there a technical reason why straight Win32 API cannot be used?  I looked through env_boost.cc and port_win.cc, and it seems like a doable task.  Several of the functions in env_boost.cc would become quite a bit shorter, possibly just one line, if you just used the standard Windows APIs.  IMO get Windows support upstream, then clone.  We don't want to maintain a _fork_ I don't think.
1619	7765978	2012-08-15T19:12:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7765978	luke-jr	jgarzik	@jgarzik Why is it unreasonable to keep a separate git repository for a separate codebase? It's trivial (would take about 15 minutes to setup), harmless, and has much to gain (upstream *can* merge it, directly). If @mikehearn doesn't want to spend 15 minutes on it, I wouldn't object to doing it myself...
1619	7765978	2012-08-15T19:12:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7765978	luke-jr	mikehearn	@jgarzik Why is it unreasonable to keep a separate git repository for a separate codebase? It's trivial (would take about 15 minutes to setup), harmless, and has much to gain (upstream *can* merge it, directly). If @mikehearn doesn't want to spend 15 minutes on it, I wouldn't object to doing it myself...
1619	7781069	2012-08-16T09:48:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7781069	laanwj	luke-jr	If it is decided to include leveldb:  - We should not hardcode the version number (1.5.0) inside the repository, and thus rename the directory to 'src/leveldb'  - I'm not sure building the .a separately is needed. It makes the qmake file (at least) pretty ugly. Is it possible to include the .cc files that we need in the build project like we do with spirit-json? I'm not sure this is a good idea either but I agree with @luke-jr that the current "nested build" setup is pretty ugly
1618	7163425	2012-07-22T16:55:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7163425	Diapolo	postfan	@postfan When everything is working now, please close the ticket :).
1617	7272454	2012-07-26T08:51:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7272454	Diapolo	laanwj	@laanwj Do you agree with this small pull after the last rebase?
1617	7707262	2012-08-13T20:40:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707262	Diapolo	laanwj	@laanwj  Anything I can do to get this small thing merged after 24 days :-D?
1617	7715493	2012-08-14T03:46:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715493	luke-jr	laanwj	@laanwj Eh, GitHub *does* let you assign pull requests... you just need to do it from the Issues list
1617	8115785	2012-08-29T05:41:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8115785	Diapolo	laanwj	@laanwj Is that string freeze still persistent or does this make it into 0.7 final? Just wanted to know :).
1614	7303650	2012-07-27T12:06:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7303650	Diapolo	laanwj	@laanwj I hope anyone is using Windows or at least appreciates DEP support ;).
1614	7707304	2012-08-13T20:42:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707304	Diapolo	luke-jr	@luke-jr I'm not able or really willing to test this with ReactOS ^^, but as I just use the Windows-API here with no bad things happening, when the code fails, I think this is fine.
1614	7720125	2012-08-14T08:56:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7720125	Diapolo	laanwj	@laanwj I use these 2 linker flags since a few weeks now for my local build and they work fine. I just wanted to ensure at least basic DEP get's in before 0.7 and wanted to create another pull for ASLR and DEP linker-flags after this got in :).
1612	7433473	2012-08-01T17:15:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433473	jgarzik	gmaxwell	or do what pynode does, and maintain a (height)->(list of block hashes) index... ;)  weak ACK, but sounds like it needs updating based on @gmaxwell 's comments
1607	7096124	2012-07-19T11:43:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7096124	Diapolo	laanwj	@laanwj Why? When I use the tool ProcessExplorer, which is able to show some internal informations of running processes, handles and so on, I consider an application that provides no meta-data as suspicious on the first look. I think it's a good style to supply such meta-data.
1607	7106208	2012-07-19T18:09:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7106208	gruez	Diapolo	@Diapolo  >more trustworthy  wow really? that's about as effective as naming bitcoin-qt.exe to legit_bitcoin-qt.exe
1603	8998304	2012-09-28T23:26:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8998304	Diapolo	sipa	As @sipa has now a pull, which removes IMPLEMENT_RANDOMIZE_STACK(), I'll close this.
1597	6980917	2012-07-14T07:51:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6980917	laanwj	luke-jr	Great development! At least Virtualbox runs on more platforms than KVM, which is Linux-only.  @luke-jr How is Ruby *not* platform independent? AFAIK it has been ported to neigh everything, just like Python.
1597	6981132	2012-07-14T08:26:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6981132	luke-jr	laanwj	@laanwj I meant in terms of it not being a standard component of most operating systems. But it occurred to me that I'm not the audience for this patch anyway, and the audience it's intended for probably couldn't care less whether they have Ruby installed or not.
1597	7073505	2012-07-18T16:14:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7073505	maaku	BlueMatt	Just to be clear, very little of this pull request has anything to do with gitian. @BlueMatt and I had a discussion about this on IRC, and I agree now that it would have been better if I had never mentioned gitian.  The purpose of these scripts is to enable a developer on Windows to create Windows binaries, or a Mac developer to generate Linux binaries (two actual use cases I encountered), as well as any other combination of build-host system. Gitian is being used simply because it is the most reliable process for doing cross-platform builds of bitcoind and Bitcoin-Qt.  Included are are a handful of fixes required to get gitian running within an already-virtualized environment, and in time (aka, when I or someone else has time) those patches will be generalized and submitted upstream to gitian-builder. But that should be a minor footnote. This is really about doing cross-platform or local builds without complicated dedicated build servers.
1597	10434939	2012-11-16T02:48:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434939	jgarzik	gavinandresen	meh due to maintenance burden as @gavinandresen points out (but pointedly _not_ NAK'ing, in case somebody else disagrees, and wants to pull)
1594	6982196	2012-07-14T11:26:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6982196	Diapolo	laanwj	@laanwj Alright, but then testnet3 will not catch-up as long as testnet2 our node connects to them.  Anything else in here that you think is merge-worthy? I'm fine with removing the testnet3 check but think the other small things are nice to have.
1594	7078946	2012-07-18T19:17:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7078946	Diapolo	burger2	@burger2 Yes, when more nodes are running 0.7.x everything will be fine again.
1594	7115036	2012-07-19T20:55:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7115036	Diapolo	laanwj	@laanwj I had a talk with sipa about the underlying issue a few days ago and you are right of course. That's why the testnet3 casing is gone from this pull ;).
1592	6957331	2012-07-13T08:35:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6957331	Diapolo	laanwj	@laanwj I have thought about it a little more and I have some suggestions:  1. Rename Window title to ``Bitcoin-Qt - Wallet`` -> Bitcoin-Qt is the GUI to Bitcoin and this keeps Wallet but separated by "-" to ensure users don't think the client is called "Bitcoin Wallet". 2. Rename ``About Bitcoin-Qt`` -> ``About Bitcoin`` -> We show version stuff that is not the Qt client version, but the Bitcoin "core" version. 3. Rename ``Client`` in the Debug window -> ``Core``, ``Bitcoin Core`` or ``Core Client`` -> This is clearer in terms of we use the Core and have the Qt GUI on top.  Oh and for not knowing Qt, we have an ``About Qt`` in the GUI :).  What do you think?
1590	6951407	2012-07-13T00:08:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6951407	gavinandresen	luke-jr	@luke-jr : no, it doesn't include anything from #1240.  The steps towards better fee handling, as I see them, are:  1) Get miners to prefer including higher fee-per-kb transactions in their blocks.  That's what this pull request does. 2) Once a significant number of miners are doing that, modify the client to estimate what fee (if any) is needed to get into the next block or six, and let the user include a fee on a transaction-by-transaction basis. 3) Make more improvements to the transaction selection algorithm, like considering dependent transactions' fees when selecting what to include in a block (part of #1240), and roll that out to miners and clients.
1590	7239641	2012-07-25T03:09:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7239641	gavinandresen	luke-jr	Reworked a little bit after getting some feedback from the big mining pools (added options -maxblocksize and -maxfreesize).  @luke-jr : I spent most of today looking carefully at how your proposed priority mechanism (the age*weight1 + fee*weight2 formula) and this one actually behave with the transactions that are in the main network's memory pool right now (I implemented just the "change the priority calculation" part of #1240 and ran it).  And I came to the conclusion that with your scheme it will be hard to get the weights right, and miners will have no idea what they're trading off if we give them the ability to fiddle with the weights.  I wrote the code, and couldn't predict how many free transactions would be included in a block if I made weight1=1 and weight2=1000.  I like this method better; it is clear what will happen if you set -maxblocksize=50000 and -maxfreesize=10000  (defaults are 250,000 and 27,000 which match the behavior of previous releases).
1590	7240839	2012-07-25T05:09:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7240839	gavinandresen	luke-jr	@luke-jr : you can't. Prioritizing by fee alone is too easy to game (spammer includes a 1-satoshi fee with all their transactions and crowds out all the zero-fee transactions).  Sorting by significantly-greater-than-zero-fee first, and then filling up to -maxblocksize with free transactions would also be easy to game (just send lots of zero-priority zero-fee transactions to make the miner always create -maxblocksize blocks). Or all the SatoshiDice fee-paying transactions would crowd out old clients that expect that their high-priority free transactions will get into a block eventually.
1590	7251081	2012-07-25T14:50:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7251081	gavinandresen	luke-jr	@luke-jr : I think we could safely get the behavior you want by introducing another parameter: lets call it -blockminsize.  The rules would then be: Up to -blockprioritysize, insert transactions based on priority. Then insert as many fee-paying transactions as will fit, to a max of -blockmaxsize. If the block is less than -blockminsize big, fill up to -minblocksize with free transactions (where "free" is less-than-TX_MIN_FEE per kilobyte, to exclude 1-satoshi-fee attacks)  You'd set -blockprioritysize=0, and set -blockmaxsize and -blockminsize to the size of blocks you want to create, and you'll get always-sorted-by-fee, include-free-if-there-is-extra-room.  Depending on your block size, I believe these days your blocks would contain no free transactions, though, due to all the SatoshiDice fee-paying return transactions.  My only concern is that three different sizes is a lot of knobs to explain.
1589	6936502	2012-07-12T14:28:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6936502	Diapolo	laanwj	@laanwj The bug report made me think the problem needs fixing only in the optionsmodel ... I'm not sure here. The definition was missing in the pull, it's there now.
1586	7433591	2012-08-01T17:18:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433591	jgarzik	gmaxwell	@gmaxwell and I are definitely interested in this, at least.  Will keep this pull request open.  A rebase would be nice, if you have time.
1576	7419745	2012-08-01T06:56:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7419745	Diapolo	sipa	@sipa ACK to that suggestion!
1574	6899049	2012-07-11T06:25:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899049	Diapolo	sipa	@sipa Can you take a look at this and comment :)?
1571	7153130	2012-07-21T14:00:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7153130	Diapolo	laanwj	@laanwj I would like to merge that last commit after you took a look.
1570	6834933	2012-07-08T21:15:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6834933	gmaxwell	Diapolo	@Diapolo Perhaps just a third option on the fee question?  "yes, no, take it out of the amount being sent" ?
1570	6846600	2012-07-09T13:39:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6846600	gmaxwell	laanwj	@laanwj  It could certainly happen if the implementation was simplistic and if the payment was small (0.05 or less) or the user manually set a high BTC/KB.  Good catch.  I'm not quite sure how to avoid that without further complexifying the UI.
1564	7000093	2012-07-16T07:39:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7000093	Diapolo	laanwj	@laanwj Further problems / hints for this one?
1563	6809963	2012-07-06T16:35:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6809963	Diapolo	TheBlueMatt	@TheBlueMatt: It IS used, when compiling Bitcoin-Qt on Windows directly via the project file. Even if this was not used by us, it is beneficial to users trying to build from source as a clear indication for static Boost 1.49 libs. I myself rely this btw. ;).
1563	6898143	2012-07-11T04:56:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6898143	Diapolo	luke-jr	@luke-jr Supply a working dependency package and add a small comment?
1559	6784572	2012-07-05T17:08:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6784572	sje397	Diapolo	@Diapolo - I had already made those same changes :)
1556	8763019	2012-09-21T12:29:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763019	Diapolo	sipa	@sipa I'm not sure if this needs fixing, but I dunno how anyway. If you consider this to be a non-issue just close it!
1556	12728387	2013-01-26T01:10:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12728387	Diapolo	sipa	This warning doesn't happen with recent MinGW version. @sipa Should this be fixed and if no you are free to close this!
1556	17589800	2013-05-08T06:58:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589800	Diapolo	sipa	@sipa Another ping... trying to get some things closed or looked at ^^.
1551	8284759	2012-09-05T01:16:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8284759	sipa	jgarzik	@jgarzik Not contended? We have a cs_main that blocks anything useful being done in parallel. Since many tasks only need read-only access to data structures, shared locks could increase parallellism massively.  That said, I still disagree with an implementation that releases a lock when trying to go from shared to exclusive.
1549	6722834	2012-07-02T23:52:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6722834	TheBlueMatt	gmaxwell	@gmaxwell In terms of listing the full list of addresses the added node resolves to...yes, that would be better.  In terms of making the user make two/three calls to get at the info on whether or not a given added node is connected, I entirely disagree here.  I'll add a in/out/not connected flag.  @sipa The goal is to allow a long-running node to add trusted nodes without having to restart.  In terms of having a one-shot connection, this was discussed back when addnode was changed, since it used to be a one-off, I was then of the opinion that addnode shouldn't be scrapped to allow for that and keepnode was clearer in this case...  In any case, I agree that there should be an option for a one-off connection creator RPC, Ill throw that in when I touch this up (connecttonode?).
1549	6722834	2012-07-02T23:52:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6722834	TheBlueMatt	sipa	@gmaxwell In terms of listing the full list of addresses the added node resolves to...yes, that would be better.  In terms of making the user make two/three calls to get at the info on whether or not a given added node is connected, I entirely disagree here.  I'll add a in/out/not connected flag.  @sipa The goal is to allow a long-running node to add trusted nodes without having to restart.  In terms of having a one-shot connection, this was discussed back when addnode was changed, since it used to be a one-off, I was then of the opinion that addnode shouldn't be scrapped to allow for that and keepnode was clearer in this case...  In any case, I agree that there should be an option for a one-off connection creator RPC, Ill throw that in when I touch this up (connecttonode?).
1549	6723029	2012-07-03T00:05:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723029	gmaxwell	TheBlueMatt	@TheBlueMatt  Yea, I actually wrote the tristate first and then thought some people might disagree with the duplication.  I'm pretty sure we should have commands to edit addnode on running nodes. I'm tired of restarting my p2pool bitcoind's just to dork around with the addnode settings.  Perhaps the oneshot could just be a addnode foo oneshot instead of another RPC?
1549	12798305	2013-01-28T19:08:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12798305	gavinandresen	apoelstra	Thanks @apoelstra , 1 BTC "thanks for testing" tip sent.    ACK on code changes, pulling.
1543	6934543	2012-07-12T13:10:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6934543	Diapolo	cardpuncher	I know that @cardpuncher played around with the width and the one in this pull is the one that works, even for french ^^. But yea, this one needs a rebase then!
1543	7077309	2012-07-18T18:19:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7077309	Diapolo	cardpuncher	@cardpuncher Can you please rebase this?  <pre> git fetch upstream git rebase upstream git push ... </pre>
1533	6665144	2012-06-29T15:30:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6665144	gavinandresen	jgarzik,	agree with @jgarzik, for the same reasons.
1526	6713232	2012-07-02T16:38:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713232	gmaxwell	jgarzik	@jgarzik  Then I, Greifer Mc. Greifer,  mine a single invalid v2 block.  The super majority of nodes will happily extend it and continue the chain, the minority of upgraded nodes will reject it forever and ignore that chain. Nice split you've got there.
1526	6713309	2012-07-02T16:41:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713309	luke-jr	sipa	And perhaps half as importantly, that would be an abuse of the centralization in a single client to force a blockchain rule through like that. Besides, @sipa already was working on a proper "block/transaction version rules" BIP.
1526	6713757	2012-07-02T17:00:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713757	jgarzik	gmaxwell	@gmaxwell highly unlikely, but no objection to doing it the current way  @luke-jr re-read, you missed the phrase "publish a BIP"
1526	6713757	2012-07-02T17:00:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713757	jgarzik	luke-jr	@gmaxwell highly unlikely, but no objection to doing it the current way  @luke-jr re-read, you missed the phrase "publish a BIP"
1526	6713935	2012-07-02T17:08:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713935	luke-jr	jgarzik	@jgarzik Yes, I did. Sorry.
1526	6717106	2012-07-02T19:09:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717106	gmaxwell	rebroad	@rebroad it can't make a split as it currently is, but because the v2 blocks are not _enforced_ as it is a malicious party who wants to create trouble by mining duplicate coinbases could do so by just choosing to mine v1 blocks. Basically the patch as is only protects against mistaken duplication by incorrectly modified mining code.
1526	6717194	2012-07-02T19:13:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717194	gmaxwell	gavinandresen	@gavinandresen  but as soon as the 75% produces two blocks (or whatever is require to get ahead again) the 25% moves back.  (thus the distinction between a split and a orphan-stub: a split never heals)
1526	6717380	2012-07-02T19:21:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717380	rebroad	gavinandresen	@gavinandresen thanks, you answered the question I had intended to ask.
1526	6717685	2012-07-02T19:34:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717685	gavinandresen	gmaxwell	@gmaxwell : I think of orphan-stubs as temporary splits, and use the term "hard fork" for permanent splits (but don't really care about vocabulary as long as we all understand each other).  Ok:  One issue remains with this:  should this pull include rules for eventually rejecting nVersion=1 blocks ?  If that is *not* done now, then we'll be bumping block.nVersion=3 in a year and writing code that says "when X% of the network is v3 and less than Y% is v1 then reject nVersion=1 blocks as too old to support any more."  Suggestion from @gmaxwell in IRC is:   stop accepting v1 when v1 blocks are 5% or less of the last 1,000 blocks
1526	6717685	2012-07-02T19:34:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717685	gavinandresen	gmaxwell	@gmaxwell : I think of orphan-stubs as temporary splits, and use the term "hard fork" for permanent splits (but don't really care about vocabulary as long as we all understand each other).  Ok:  One issue remains with this:  should this pull include rules for eventually rejecting nVersion=1 blocks ?  If that is *not* done now, then we'll be bumping block.nVersion=3 in a year and writing code that says "when X% of the network is v3 and less than Y% is v1 then reject nVersion=1 blocks as too old to support any more."  Suggestion from @gmaxwell in IRC is:   stop accepting v1 when v1 blocks are 5% or less of the last 1,000 blocks
1526	6719888	2012-07-02T21:11:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719888	gavinandresen	jgarzik	@jgarzik: once past 95% v2 blocks (assuming there's consensus on "orphan the last 5% of miners who refuse to get with the program and upgrade") there will be no flapping, because 95% of the network will reject v1 blocks past that point.  The release after that happens a checkpoint can be added and the code can be simplified to "require valid v2+ blocks."  @luke-jr:  so we release code that creates v2 blocks, but always accepts v1 blocks.  Then a while from now we release code that creates v2 blocks but rejects v1 blocks if some threshold has been reached.  If I'm a miner, why would I risk running that code; I need to SEE network support for the "reject v1 block" rule before I start doing that.
1526	6719888	2012-07-02T21:11:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719888	gavinandresen	luke-jr	@jgarzik: once past 95% v2 blocks (assuming there's consensus on "orphan the last 5% of miners who refuse to get with the program and upgrade") there will be no flapping, because 95% of the network will reject v1 blocks past that point.  The release after that happens a checkpoint can be added and the code can be simplified to "require valid v2+ blocks."  @luke-jr:  so we release code that creates v2 blocks, but always accepts v1 blocks.  Then a while from now we release code that creates v2 blocks but rejects v1 blocks if some threshold has been reached.  If I'm a miner, why would I risk running that code; I need to SEE network support for the "reject v1 block" rule before I start doing that.
1526	7699453	2012-08-13T17:35:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7699453	jgarzik	luke-jr	@luke-jr forrestv does not agree
1522	15068421	2013-03-18T17:23:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15068421	L2G	Nerzahd	For those watching at home, @Nerzahd moved `#ifndef Q_OS_MAC` down one line to keep `trayIcon = new QSystemTrayIcon(this);` from being excluded by the conditional.    (I had to diff the two to figure out what was going on.) :grin:
1522	15143723	2013-03-19T21:17:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15143723	L2G	Nerzahd's	You have a point. At least this way the call the call to `QSystemTrayIcon` will get compiled into the Mac version, but without the call to `trayIcon->show`, it may be useless. I have a Mac and can try this out (just not right this moment).    Wait, were you talking about @Nerzahd's patch or mine?
1519	6571931	2012-06-26T10:14:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6571931	Diapolo	laanwj	@laanwj I'm not sure how to fix your observation, as I pass "en" into QLocale and query ``.language()`` and ``.country()``. Perhaps UnitedStates is default here? As Germany is for de?
1519	6576664	2012-06-26T14:15:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6576664	Diapolo	laanwj	@laanwj Thanks, it now does, what we want it to do.
1518	6694184	2012-07-01T15:14:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6694184	Diapolo	laanwj	@laanwj Thanks mate :). I'll update to integrate your suggestion and do this as seperate commit, so you can see easily what was changed. After your final ACK I can merge that commit, so we only have one if you want.
1518	6799588	2012-07-06T08:13:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6799588	Diapolo	laanwj	@laanwj Same here, is it possible to get this into 0.7, before the RC phase? Any further things I need to fix, suggestions or such stuff?
1515	6567343	2012-06-26T05:25:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6567343	muggenhor	laanwj	@laanwj I've tried to make the names look like those in the thread enumeration, unfortunately only 15 characters are available. So I've deviated from those names for some instances to improve readability. That being said I could add a copy of the thread names as comments to that enum.
1515	6685868	2012-06-30T15:05:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685868	muggenhor	luke-jr	@luke-jr If pthread_set_name_np is implemented similar to BSD's setprogname then it *will* modify the commandline parameters (that's how it does this: overwriting argv[0-n] memory).  It's manpage seems to suggest otherwise though. I can add the code easily enough, but I'm not even sure if my FreeBSD 8 installation still boots. So I'd appreciate if you could test & confirm that it works as advertised,
1515	6685910	2012-06-30T15:12:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685910	luke-jr	muggenhor	@muggenhor I only use Linux, just came across the BSD variant looking at your pullreq.
1515	6685998	2012-06-30T15:25:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685998	muggenhor	luke-jr	@luke-jr Right, I've just confirmed that I can cross-compile an isolated call to pthread_set_name_np for FreeBSD 8.  I'll try dusting off my FreeBSD 8 box for a test run.
1515	6835036	2012-07-08T21:24:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6835036	muggenhor	Diapolo	@Diapolo: that was just an oversight. Addressed in my last commit.
1513	15664454	2013-03-29T22:52:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15664454	burger2	nanpanman	@nanpanman still got the problem?
1513	15666221	2013-03-30T00:03:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15666221	nanpanman	nanpanman	No. I moved to a new computer no issues since. The previous one had an SSD  that got progressively more corrupted so that might have been the culprit.  On Mar 29, 2013 3:53 PM, "Birger Hedman" <notifications@github.com> wrote:    > @nanpanman <https://github.com/nanpanman> still got the problem?  >  >   > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/issues/1513#issuecomment-15664454>  > .  >
1512	6610587	2012-06-27T17:56:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6610587	jgarzik	gavinandresen	Rebased, and fixed bug reported by @gavinandresen (note: turned out _not_ to be a policy decision, as I claimed on IRC)
1510	6607104	2012-06-27T15:48:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607104	jgarzik	gmaxwell	@gmaxwell all the kernel interfaces that SNMP uses tend to return groups of statistics that the kernel finds easy to generate together (tx pkts, rx pkts, rx bytes, tx bytes, collisions, ...)  I see the same pattern elsewhere.  So perhaps 'getstat $STAT' can return complex objects, if it is natural to do so internally.  Regardless... closing.  will work on 'getpeerinfo' and then see what's left.
1509	6935482	2012-07-12T13:49:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6935482	Diapolo	luke-jr	@luke-jr Can you close this for now? @laanwj Any date / idea when or if we can switch to a newer Qt version?
1509	6935482	2012-07-12T13:49:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6935482	Diapolo	laanwj	@luke-jr Can you close this for now? @laanwj Any date / idea when or if we can switch to a newer Qt version?
1507	6531983	2012-06-24T10:51:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6531983	Diapolo	jgarzik	@jgarzik Can you please add this, or is the switch intended to be "hidden"?
1506	6534291	2012-06-24T16:35:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6534291	Diapolo	xanatos	@xanatos Can you try our my patch #1518 and give some feedback.
1506	6534313	2012-06-24T16:38:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6534313	xanatos	Diapolo	@Diapolo I don't have a C++ environment :-) In the last 5 years I have programmed only C#. And even when I was a C++ programmer, I was a Visual C++ programmer, not a QT/gcc/g++ programmer.
1506	6534324	2012-06-24T16:39:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6534324	Diapolo	xanatos	@xanatos Too bad :). But I guess at least you could take a quick look at the code.
1506	6534618	2012-06-24T17:12:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6534618	xanatos	Diapolo	@Diapolo My only problem is with the BitcoinAmount::validate()... It does two different things... It checks for non-zero value and checks for "textual" correctness and number-of-digits validation (the last two checks in the parse() call). I do think the non-zero value test isn't correct to be put there (and, for example, the MainOptionsPage doesn't use the validate() method probably for this reason, because 0.00 commissions are ok). Considering the BitcoinAmount::validate() does a "textual" validation and a number-of-digits validation, I would stop the QR code from being generated if it isn't valid.   I'll note that there is even a minor bug in the save-as button. If you put too many letters in a field the QR code on the screen will disappear, but the save button will save the last correctly generated QR code.
1506	6536613	2012-06-24T21:40:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6536613	Diapolo	xanatos	@xanatos Thanks for your feedback, I updated my patch to reflect your suggestions. The save button is now only enabled, when the QR Code was successfully generated. Perhaps you can take another look.
1506	6935535	2012-07-12T13:51:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6935535	Diapolo	xanatos	@xanatos As #1518 got merged, you can close this now. That's the new look of the QR Code dialog:  ![updated QRCodeDialog](http://i50.tinypic.com/2l8vggy.jpg)
1492	6464732	2012-06-20T19:33:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6464732	gavinandresen	p2k	Working around by commenting out: disk.update(registering_applications=False)  @p2k : any idea why this suddenly stopped working?
1489	6496621	2012-06-21T22:49:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6496621	luke-jr	jgarzik	@jgarzik There should be a mutex on the cache, so I'm not sure how you'd get into CreateNewBlock concurrently. Unless you're thinking of getwork and getmemorypool at the same time, but I can't think of any reason to support that...
1479	7678676	2012-08-12T18:56:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7678676	luke-jr	Diapolo	@Diapolo Those builds from @BitcoinPullTester should help you out
1479	7678676	2012-08-12T18:56:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7678676	luke-jr	BitcoinPullTester	@Diapolo Those builds from @BitcoinPullTester should help you out
1479	7707366	2012-08-13T20:44:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707366	Diapolo	luke-jr	@luke-jr How does this help? You mean using the Qt version from jenkins and using it on testnet?
1479	7710496	2012-08-13T22:34:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7710496	luke-jr	Diapolo	@Diapolo I was thinking http://jenkins.bluematt.me/pull-tester/ed1afd67c1d3f485a9ba3850ba2751e50d897f53/bitcoin/src/bitcoind.exe
1479	8021383	2012-08-25T08:33:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8021383	Diapolo	BitcoinPullTester	Guys, I setup bitcoind and can use it to pass RPC commands, but I simply don't know how you want me to test the function there, as ``GetImmatureBalance()`` seems to be only used by Qt?  I could for sure add ``obj.push_back(Pair("walletversion", pwalletMain->GetImmatureBalance()));`` to RPC ``getinfo``, but as I can't compile bitcoind I would rely on @BitcoinPullTester to create a bitcoind.exe for me and need to revert that change before this would be considered mergeable.
1479	8028840	2012-08-26T00:18:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8028840	Diapolo	sipa	@sipa I didn't want to push or create a usage scenario for RPC, I just wanted to say I dunno how to further test this code :). As I said in Qt it does the job and asked if it will get accepted that way or what I can do now.
1478	6600670	2012-06-27T11:17:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6600670	Diapolo	laanwj	@laanwj Just a reminder *merge me* :-).
1475	6384053	2012-06-17T19:41:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384053	Diapolo	burger2	@burger2 To fix your testnet problems try out #1477. Current master has a bug, which gives all testnet nodes on IRC the same NICK, which causes the current testnet3 troubles.  @laanwj I think the immature balance, which then matures after 120 blocks is not taken correctly into account in terms of the ``balanceChanged`` signal. The state change from immature to mature, which also changes the current balance then, is not triggered by a transaction, so the emited ``balanceChanged`` signal in ``WalletModel::updateTransaction()`` does not help here. That's why I introduced a mechanism, which uses block-changes for this. If you have a cleaner / better idea I'm fine with a simpler patch :). The re-name was a logical thing for me here, because there are now 2 models in overviepage and sendcoinsdialog, so only e.g. ``setModel`` is missleading. I guess a timer is not needed if I add a check for ``IsInitialBlockDownload()`` in the code, as with a catched-up chain the processing won't happen that often.
1475	6384053	2012-06-17T19:41:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384053	Diapolo	laanwj	@burger2 To fix your testnet problems try out #1477. Current master has a bug, which gives all testnet nodes on IRC the same NICK, which causes the current testnet3 troubles.  @laanwj I think the immature balance, which then matures after 120 blocks is not taken correctly into account in terms of the ``balanceChanged`` signal. The state change from immature to mature, which also changes the current balance then, is not triggered by a transaction, so the emited ``balanceChanged`` signal in ``WalletModel::updateTransaction()`` does not help here. That's why I introduced a mechanism, which uses block-changes for this. If you have a cleaner / better idea I'm fine with a simpler patch :). The re-name was a logical thing for me here, because there are now 2 models in overviepage and sendcoinsdialog, so only e.g. ``setModel`` is missleading. I guess a timer is not needed if I add a check for ``IsInitialBlockDownload()`` in the code, as with a catched-up chain the processing won't happen that often.
1475	6385060	2012-06-17T21:33:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6385060	Diapolo	laanwj	@laanwj I showed sipa the code, who also thinks the new function (CWallet::GetUnconfirmedBalance()) is cleaner ... but as this is unrelated to fixing the base-issue, I will create another pull and close this one!
1475	6453511	2012-06-20T13:16:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453511	Diapolo	laanwj	@laanwj Is your fix on track for 0.7, any branch you want me to test?
1471	6371856	2012-06-16T09:09:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6371856	Diapolo	laanwj	@laanwj ACK
1471	6410542	2012-06-18T22:00:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6410542	luke-jr	jgarzik	@jgarzik Well, FWIW, @gavinandresen is always saying to discuss on the mailing list before making pull requests...  But this whole thread of discussion is IMO off-topic for here...
1471	6410542	2012-06-18T22:00:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6410542	luke-jr	gavinandresen	@jgarzik Well, FWIW, @gavinandresen is always saying to discuss on the mailing list before making pull requests...  But this whole thread of discussion is IMO off-topic for here...
1470	6366640	2012-06-15T21:07:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6366640	jgarzik	gavinandresen	@gavinandresen just a simple "it works" test using ArtForz' half-a-node satisfies me...
1469	6364886	2012-06-15T19:39:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364886	Diapolo	luke-jr	@luke-jr Can you re-test now :)?
1469	6369346	2012-06-16T00:11:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6369346	Diapolo	luke-jr	@luke-jr Can you please try again and report back :), thanks.
1469	6372043	2012-06-16T09:46:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6372043	Diapolo	luke-jr	@luke-jr Good suggestions, I'm going to update this.
1469	6372239	2012-06-16T10:31:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6372239	Diapolo	luke-jr	@luke-jr Can you test it once more please.  I did not add a paste button for address field on verify message, as we have one there next to the signature field (which makes sense as we have a copy signature button on sign message).  The warning message thing I did not understand, can you explain for a native non english speaking person :)?  Todo: - add a button / context menu entry in addressbook for verify message to be consistent with sign message - generalize some functions, as some use nearly identical code for sign / verify
1469	6416477	2012-06-19T05:40:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416477	Diapolo	luke-jr	@luke-jr I'm fine with such a warning message, will change that. As for the paste button. Even if I place them next to the input field, they are generic. This means copying a signatute from sign and click the paste button on verify - address input, will try to paste the signature. If you say the user has to take this into account that's okay adding them, but there is no technical solution to distinguish them via different clipboards afaik.
1469	6416795	2012-06-19T06:14:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416795	Diapolo	laanwj	@laanwj Don't bother, I also would not like to have different clipboards ... just wanted to know what luke had in his mind for the buttons.
1469	6477917	2012-06-21T09:22:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6477917	Diapolo	laanwj	@laanwj I currently think it would be even nicer to remove the paste button from sign for the address input field instead of adding mor of that buttons to verify. Everyone should be able to use Ctrl + C / Ctrl + V (or whatever is default on your OS).
1469	6609264	2012-06-27T17:08:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6609264	Diapolo	laanwj	But they should at least be able to use a context menu, right? I'm still in between removing the paste button from sign-tab or adding more paste buttons ... the more I think about it the more I would like to streamline that UI part ;). Perhaps @laanwj should throw a coin so we can get this in before 0.7.
1469	6658010	2012-06-29T12:05:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6658010	Diapolo	laanwj	@laanwj Alright, no further feature changes in this pull, just waiting for your report and fix stuff if needed, otherwise I consider this feature-complete.
1469	6799573	2012-07-06T08:12:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6799573	Diapolo	laanwj	@laanwj Can we get this in before the 0.7 RC Window please? I have a strong feeling that phase is coming soon and this still lingers around here ;).  Small changes can occur in another pull if required!
1466	15664764	2013-03-29T23:03:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15664764	burger2	Diapolo	@Diapolo it's @gavinandresen that maintains the site.    btw, the link http://www.bitcoin.org/smf/index.php?board=4.0 on http://sourceforge.net/projects/bitcoin/support needs to be updated.
1466	15664764	2013-03-29T23:03:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15664764	burger2	gavinandresen	@Diapolo it's @gavinandresen that maintains the site.    btw, the link http://www.bitcoin.org/smf/index.php?board=4.0 on http://sourceforge.net/projects/bitcoin/support needs to be updated.
1464	6377527	2012-06-16T23:50:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6377527	Diapolo	burger2	@burger2 Thanks for testing.
1464	6500619	2012-06-22T04:56:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6500619	Diapolo	luke-jr	@luke-jr I considered that too, but was not sure abot the best place there. Below startup time? With an own header? A new tab (for just item ... not that good)?
1464	6572048	2012-06-26T10:20:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6572048	Diapolo	laanwj	@laanwj If you don't see any use here I can close this. But what about lukes idea to move it to the debug window? Where would you place it there?
1458	6364539	2012-06-15T19:22:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364539	luke-jr	sipa	Agree with @sipa
1456	6413674	2012-06-19T01:13:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413674	gavinandresen	sipa's	Rebased to master and added rpcrawtx.cpp to bitcoin-qt.pro.  But I'm having second thoughts on how to specify previous outputs; especially with @sipa's compression work I think maybe specifying them as [txid,n,hex_scriptPubkey] might be better than just "hex_serialized_complete_transaction"
1453	6333091	2012-06-14T16:11:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333091	Diapolo	TheBlueMatt	@TheBlueMatt Sorry, I really thought this would enforce updates :D.
1453	8301837	2012-09-05T15:02:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8301837	TheBlueMatt	laanwj	@laanwj afaik there were no remaining issues.  There are no binaries in this pull. s/lack of interest/lack of ACKs/
1453	10632892	2012-11-22T12:25:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10632892	Diapolo	mikehearn	@mikehearn I would vote for at least a one time informational message that the client will behave that way (for installed versions only) or even a possibility to opt-out of background-updates and make it an explicit check. I really dislike all that crappy update services that todays software uses / installs without letting me now what they intend to do in the background.
1453	17566224	2013-05-07T19:54:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17566224	gmaxwell	drak	@drak Why so interested?  Someone give you an exploit against the sourceforge download site? :p
1453	17568872	2013-05-07T20:38:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17568872	drak	gmaxwell	@gmaxwell - no idea what you are talking about, given bitcoin protocol lives by having a majority of a given version, it's imperative as the ecosystem grows that the network can upgrade. It makes sense to at least have the client inform users of a new download being available. I would not rely on something like sourceforge either, possibly have the version string stored on a github repo hosted page - that way there is version integrity,
1453	17569226	2013-05-07T20:44:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569226	TheBlueMatt	drak	@drak If you want to get this merged, I'm sure it needs tons of updates, so feel free to help out :)
1452	6363609	2012-06-15T18:41:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6363609	Diapolo	laanwj	@laanwj I was able to reproduce this again, had 0.955402 BTC in my wallet and sent them all to another address in a different wallet. The transaction was shown as tray-notification, is visible in the transaction-list and on the overviewpage. But the balance on overviewpage AND send coins still shows 0.955402 BTC.  Block-chain was up-to-date before sending and I was on normal net. Used a custom build based on master. Can you perhaps try to re-create the scenario and test it out?  Edit: The number of transactions was updated, too ... a client-restart leads to a display of the correct values for balance.
1452	6536724	2012-06-24T21:56:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6536724	Diapolo	laanwj	@laanwj I think this is related to the problem with immature balances display. I tried your suggestion and placed an ``emit balanceChanged(0, 0, 0);`` on a timer, which when fired, correctly updates the balance.  Today I had the main problem again, sent all coins from the wallet (a Tx fee was included), got a tray-notification, Tx shows up in the list, but balance display on overviewpage doesn't change.
1452	6827029	2012-07-07T22:14:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6827029	Diapolo	laanwj	@laanwj Could this be resovled by #1559? I currently can't verify, because my build environment get's some updates (at least I'm trying to switch to GCC 4.7).
1442	6264167	2012-06-12T06:53:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6264167	laanwj	sipa	@sipa is already working on a append-only wallet format, to make it easier to have wallet 'files'. As there are some requirements with regard to robustness and error recovery, these will not be in an interoperable format such as XML or CSV, though.  We recommend interoperating with bitcoin through JSON-RPC, not by reading/writing its files directly.
1439	6238254	2012-06-11T07:22:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6238254	Diapolo	laanwj	@laanwj Updated to reflect your suggestions. Can you explain, why noui.cpp is not added in bitcoin-qt.pro? I found it quite strange to not be able to edit that file directly somehow.
1439	6244279	2012-06-11T13:30:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244279	Diapolo	TheBlueMatt	I'm asking myself, if the change in net.cpp is correct, but as net.cpp is used by the Qt version and bitcoind it should be a StartShutdown() call.  @TheBlueMatt I reverted the changes that don't compile, they now use ``Shutdown(NULL);`` again, which should be fine for a non Qt version.  @laanwj The ``exit()`` call in Shutdown() is not an issue anymore for the Qt version, as Shutdown() was moved down (see: https://github.com/bitcoin/bitcoin/pull/1439/files#L6R304) to ensure e.g. BitcoinGUI destructor get's called and objects are not just "killed".
1439	6244279	2012-06-11T13:30:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244279	Diapolo	laanwj	I'm asking myself, if the change in net.cpp is correct, but as net.cpp is used by the Qt version and bitcoind it should be a StartShutdown() call.  @TheBlueMatt I reverted the changes that don't compile, they now use ``Shutdown(NULL);`` again, which should be fine for a non Qt version.  @laanwj The ``exit()`` call in Shutdown() is not an issue anymore for the Qt version, as Shutdown() was moved down (see: https://github.com/bitcoin/bitcoin/pull/1439/files#L6R304) to ensure e.g. BitcoinGUI destructor get's called and objects are not just "killed".
1439	6244659	2012-06-11T13:47:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244659	Diapolo	TheBlueMatt	@TheBlueMatt One last thing that bothers me, should the 2 ``Shutdown(NULL);`` calls in init.cpp be converted to ``StartShutdown();``, which could be considered the default function to call, when a shutdown is needed. It would end up with Shutdown() via a thread, but fits better to the rest of the shutdown code and usage.
1439	6244847	2012-06-11T13:54:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244847	laanwj	diapolo	@diapolo ok, that's also a possibility, as it appears that nothing else can "fall through" to there
1439	6245559	2012-06-11T14:21:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6245559	Diapolo	laanwj	@laanwj Seems rather hard to ensure a clean shutdown and wanting to keep the tray-icon till the very end. Leaving the Qt Shutdown(NULL) were it was before leads to killing Qt objects. this looks much more sane now. So any further idea (perhaps in another pull if this requires additional re-work on the GUI)?
1439	6254673	2012-06-11T20:12:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6254673	Diapolo	laanwj	@laanwj I see 2 problems with your last suggestion.  1. Shutdown() calls ``CreateThread(ExitTimeout, NULL);`` which seems to be a 5 second timer, before the process get's killed anyway, so the Shutdown() function still somehow exits / kills the client. 2. I think an #ifdef is easier / cleaner than another function in this case.
1438	20262922	2013-07-01T04:26:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20262922	fanquake	Rudd-O	@Rudd-O If this is no longer an issue feel free to close it.
1437	6300139	2012-06-13T12:59:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6300139	Diapolo	laanwj	@laanwj I consider this pull as a base for further updates to the URI handling code, even if not all parts of my re-work pull #1023 are considered good or mergable, I'm fine with a cherry picking or splitting them. But I think this pull needs to get in ASAP and if we need a patched boost 1.49 on Windows that's ok.
1437	6301160	2012-06-13T13:39:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301160	Diapolo	laanwj	@laanwj I guess we need no detection for the Windows users, we just need an official dependency package, which includes the used version of Boost and its libs.
1434	6254102	2012-06-11T19:51:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6254102	Diapolo	laanwj	@laanwj Can you take a look at the code, I think this is a rather "small" one, which could get in, if you don't want to add/change something.
1434	6281251	2012-06-12T20:10:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281251	Diapolo	laanwj	Last commit implements 2 of your suggestions @laanwj , this will get squashed after we are "final" :).
1434	6381274	2012-06-17T13:43:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6381274	Diapolo	laanwj	@laanwj Can you merge this now, I'm working on further changes in some of the files and would like to avoid merge-conflicts :).
1433	6300177	2012-06-13T13:00:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6300177	Diapolo	laanwj?	I'm going to add a restart warning for enabling / disabling SOCKS proxy and will re-size the dialog a little. If this is in, it would be really nice to get this into 0.7, do you think that's possible @laanwj?
1432	6658381	2012-06-29T12:29:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6658381	Diapolo	laanwj	@laanwj How is progress going for your fix to this issue? Would be a bad thing if this get's into 0.7 IMHO.
1431	6208550	2012-06-08T17:31:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6208550	luke-jr	jgarzik	@jgarzik That's what this does...
1431	7434612	2012-08-01T17:53:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434612	Diapolo	GNUmakefile	Would be nice to not introduce something that does not work on Windows or makes building even harder to do @GNUmakefile ;).
1431	7434639	2012-08-01T17:54:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434639	luke-jr	Diapolo	@Diapolo GNUmakefile is more of an out-of-tree config thing. Windows has .BAT files :P
1427	6150871	2012-06-06T13:44:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6150871	rebroad	csyangchen	@csyangchen if one is wanting to parse start up times from the log file with timestamps turned on, one wouldn't use the startup time line anyway, but the first line with "Bitcoin version", or the line after "Default data directory". The "startup time" line is entirely redundant with timestamps enabled.
1427	6155046	2012-06-06T16:11:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6155046	csyangchen	rebroad	@rebroad I agree with the point you made. However, a redundant line in debug won't hurt, just not worthy of a separate pull, IMO.  Previously (appeared at least in v0.6.0, fixed by now ) there is a duplicated timestamp output in main.cpp, on the recv message: "timestamp timestamp received: ...". That, I think, is a duplication worthy of fix, considering frequency of the recv message.  If we actually want a start time message, I think we should also provide a stop time message, so that users can parse the debug file and calculate the session time, when timestamp is not provided.
1427	6171446	2012-06-07T09:01:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6171446	Diapolo	csyangchen	@csyangchen The duplicate timestamps are fixed, I created a patch for this a few weeks ago. I also think this pull is unneeded.
1427	6415920	2012-06-19T04:39:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6415920	luke-jr	rebroad	@rebroad , did you test this at all? It doesn't compile... -.-
1427	6719094	2012-07-02T20:35:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719094	rebroad	luke-jr	@luke-jr everything takes so long to compile on my laptop, as due to the way git works, it causes all file modification times to be changed, so make tried to recompile everything. If I could work out a way for make to use checksums instead of modification times, then my compiles wouldn't take so long, and I'd have tested this. thanks for the fix!
1426	6346104	2012-06-14T23:24:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6346104	rebroad	sipa	@sipa it's just a debug.log. I doubt anyone will have a debug.log file as long as 100 years, so 14 characters would be an extreme overkill.  @gmaxwell it doesn't currently show full values and never has. The current requirement seems to be that the numbers don't want to be duplicated within the entirity of the debug.log file. For that, the last 14 hex characters are more than sufficient (as sipa pointed out).
1426	6346104	2012-06-14T23:24:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6346104	rebroad	gmaxwell	@sipa it's just a debug.log. I doubt anyone will have a debug.log file as long as 100 years, so 14 characters would be an extreme overkill.  @gmaxwell it doesn't currently show full values and never has. The current requirement seems to be that the numbers don't want to be duplicated within the entirity of the debug.log file. For that, the last 14 hex characters are more than sufficient (as sipa pointed out).
1426	6411056	2012-06-18T22:24:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6411056	luke-jr	rebroad	@rebroad Are you going to update this to show the least-significant (end/tail) N?
1426	6719744	2012-07-02T21:05:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719744	rebroad	luke-jr	@luke-jr can I ask your opinion - is it better to hardcode the substr numbers or instead do it in a way that uses the length of the string?
1426	6722622	2012-07-02T23:37:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6722622	rebroad	luke-jr	@luke-jr modified (not yet tested - compiling)
1426	6723181	2012-07-03T00:16:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723181	sipa	rebroad	@rebroad I prefer the reported hashes in the debug file to be globally and near-forever usable as unique identifiers. I'd just use the low 64 bits of the hash (i.e., the last 16 hex characters). .substr(48) i suppose.
1426	6723796	2012-07-03T01:03:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723796	gmaxwell	rebroad	@rebroad I know it doesn't currently show full values.  @sipa  I still think it should show the full value.  The partial values are almost useless because there is no way to getblock by them. I don't think carrying another index for partial block values names sense, nor do I think precluding hash tables that require exact lookups makes sense.  Reducing them by 1/4th while breaking lookup with getblock isn't a worthwhile tradeoff.  (Of, course, I'll continue to patch my nodes to log the full value regardless, but I think its a reasonable default).
1426	6723796	2012-07-03T01:03:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723796	gmaxwell	sipa	@rebroad I know it doesn't currently show full values.  @sipa  I still think it should show the full value.  The partial values are almost useless because there is no way to getblock by them. I don't think carrying another index for partial block values names sense, nor do I think precluding hash tables that require exact lookups makes sense.  Reducing them by 1/4th while breaking lookup with getblock isn't a worthwhile tradeoff.  (Of, course, I'll continue to patch my nodes to log the full value regardless, but I think its a reasonable default).
1426	6747803	2012-07-03T22:02:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6747803	rebroad	sipa	@sipa how do you turn the current value into GHy?
1426	6765569	2012-07-04T18:30:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6765569	rebroad	sipa	@sipa Shall I add that change to this pull, or a separate pull (which would need to go in after this one?)
1417	6214532	2012-06-08T22:32:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214532	Diapolo	luke-jr	@luke-jr The function is called, after we hide the main Window in preparation of a shutdown, which is the right place.
1417	6215373	2012-06-08T23:45:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6215373	Diapolo	luke-jr	@luke-jr Okay, I took a look and come to the conclusion as it's not possible to pretend, when trayIcon will be deleted, we have to call trayIcon->hide() as long as we know it is controllable.  In the present code from master branch this will not succeed and so the icon is displayed, even if the app is closed already. Which one is worse, a tray-icon when there is no app or a missing tray-icon, while shutting down the app?  Edit: I think it's overkill to re-implement the class destructor from QSystemTrayIcon to call hide there.
1417	6219875	2012-06-09T13:47:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6219875	Diapolo	laanwj	@laanwj Any idea for this one ;)?
1417	6227644	2012-06-10T11:24:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6227644	Diapolo	laanwj	@laanwj Sounds good, will test and update this pull to only do that change.
1417	6231753	2012-06-10T20:45:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231753	laanwj	bluematt.	Last comment was @bluematt.  Do not call queueshutdown from Shutdown that will cause big trouble! The qt event loop is long dead by that point and for non-ui you'd be calling shutdown recursively.
1417	6231802	2012-06-10T20:49:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231802	Diapolo	laanwj	@laanwj Damn, I was too quick ... and missunderstood your comment :-/.
1417	6231997	2012-06-10T21:09:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231997	Diapolo	laanwj	@laanwj Well no, I don't get it ... calling ``uiInterface.QueueShutdown();`` triggers ``QMetaObject::invokeMethod(QCoreApplication::instance(), "quit", Qt::QueuedConnection);``, which puts a quit() command in the main event loop, right? So why should the event loop be gone when we are in ``Shutdown()``? I can't find the connection between the two.
1417	6232267	2012-06-10T21:39:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6232267	Diapolo	laanwj	@laanwj Don't bother with my last question, I had a discussion on IRC with BlueMatt and will come up with a new pull-request tomorrow and close this one.
1412	6207119	2012-06-08T16:29:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6207119	Diapolo	laanwj	As @laanwj is currently not here that frequently it would be nice to have some other dev, who ACKs on small GUI changes like this one :).
1409	6086388	2012-06-03T15:33:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6086388	wizkid057	Diapolo	@Diapolo It seems to set it up so that generation transactions are just treated more like normal transactions and are tagged in the category "received".  Since I would guess that anything that made use of this data already should be able to handle a "received" transaction, I don't see the issue.  Here is a paste of the last block I mined on testnet3 with it: http://pastebin.com/Q6HdDiiT
1409	6086423	2012-06-03T15:37:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6086423	Diapolo	wizkid057	@wizkid057 I think there are still places in the code that need to be changed for the GUI client to handle generated like received, but I guess @luke-jr should give his thoughts on this, too.
1409	6086423	2012-06-03T15:37:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6086423	Diapolo	luke-jr	@wizkid057 I think there are still places in the code that need to be changed for the GUI client to handle generated like received, but I guess @luke-jr should give his thoughts on this, too.
1409	7707634	2012-08-13T20:52:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707634	Diapolo	sipa	@sipa I also like "processing" on 1+ confirmation better, I don't get the 2+ here.  @luke-jr Does this touch or better do you need to look into other Qt code using mature / immature amounts or did you consider all that with the current patch?
1409	7707634	2012-08-13T20:52:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707634	Diapolo	luke-jr	@sipa I also like "processing" on 1+ confirmation better, I don't get the 2+ here.  @luke-jr Does this touch or better do you need to look into other Qt code using mature / immature amounts or did you consider all that with the current patch?
1409	7710555	2012-08-13T22:36:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7710555	luke-jr	Diapolo	@Diapolo The only effect on Bitcoin-Qt is that it shows the address.
1409	7939420	2012-08-22T16:07:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7939420	luke-jr	gavinandresen	@gavinandresen I think it might be nice to have a state that represents "possible to spend immediately, but not confirmed yet" (so 1+/100+); thoughts?
1409	7983236	2012-08-23T20:38:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983236	luke-jr	gmaxwell	@gmaxwell It does for me?
1409	7983832	2012-08-23T20:59:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983832	luke-jr	gmaxwell	@gmaxwell Having a special status for coinbases contradicts the main goal of the status ;)  I'd worry "confirming" could be misread as "confirmed" too easily.  I can rebase this as soon as @gavinandresen makes a final call on the shed painting :)
1409	7983832	2012-08-23T20:59:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983832	luke-jr	gavinandresen	@gmaxwell Having a special status for coinbases contradicts the main goal of the status ;)  I'd worry "confirming" could be misread as "confirmed" too easily.  I can rebase this as soon as @gavinandresen makes a final call on the shed painting :)
1404	6145779	2012-06-06T08:48:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6145779	rebroad	Diapolo	@Diapolo which commits would you want to see removed? It's too much of a headache to remove -quietinitial, so I'd rather wait until that gets pulled and rebase this than remove it.
1404	6149173	2012-06-06T12:23:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6149173	rebroad	Diapolo	@Diapolo is there an easy way for me to test this pull request with those commits on my machine but without pushing them to github?
1399	6404972	2012-06-18T18:35:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6404972	Diapolo	Sipa	@Sipa does this fix ``::1`` considered as invalid, if used in ``LookupNumeric()``?
1399	6405090	2012-06-18T18:39:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6405090	sipa	Diapolo	@Diapolo yes; there's even some unit tests that test "::1".
1398	6278072	2012-06-12T18:12:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6278072	luke-jr	laanwj	@laanwj if you ever use a 5.x bdb, your wallet is incompatible with all the official builds of bitcoind/Bitcoin-Qt and downgrading is impossible. BlueMatt's Ubuntu PPA provides bdb 4.8 for newer Ubuntu versions.
1397	6028026	2012-05-31T04:59:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6028026	Diapolo	sipa,	Thanks @sipa, will open a pull for the new master file later today :), closing this!
1396	6615675	2012-06-27T21:15:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6615675	rebroad	Diapolo	@Diapolo what do you suggest for the parameter description? I changed it to that as per @luke-jr's suggestion.
1396	6615675	2012-06-27T21:15:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6615675	rebroad	luke-jr's	@Diapolo what do you suggest for the parameter description? I changed it to that as per @luke-jr's suggestion.
1396	6617586	2012-06-27T22:42:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6617586	rebroad	Diapolo	@Diapolo amended as per your suggestion.
1396	6617588	2012-06-27T22:42:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6617588	rebroad	Diapolo	@Diapolo amended as per your suggestion.
1393	7038748	2012-07-17T15:29:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7038748	luke-jr	laanwj	@laanwj Except for extreme differences in the local clock, the assigned order from this patch is always chronological; but right now, sorting by time in Bitcoin-Qt has no logic behind the order of transactions with the same time.
1389	5912312	2012-05-24T17:23:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5912312	sipa	jgarzik	@jgarzik agree, I considered that, but wanted to postpone that until after tor hidden service support is merged, as that will extend the network config options further.
1389	5948233	2012-05-26T17:14:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5948233	sipa	laanwj	@laanwj ack on the optionsmodel changes? After tor hidden service support is merged, the network option panel should be extended, I think, but for now, this should do.
1389	6040439	2012-05-31T16:20:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6040439	sipa	gavinandresen	As asked by @gavinandresen: the parameter interactions are now done using SoftSetBoolArg, instead of complex boolean formulas. Also added some comments.
1389	6110843	2012-06-04T20:58:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6110843	Diapolo	sipa	@sipa This introduces a small display bug in the Qt GUI, it displays "localhost" as default Proxy-IP and it seems hostnames are not allowed there. If I enable the proxy and click apply it is changed to 127.0.0.1.  I think this happens in CNetAddr::ToStringIP(), which resolves 127.0.0.1 to "localhost", which is true, but currently not allowed in the GUI input field or in this line: https://github.com/bitcoin/bitcoin/pull/1389/files#L9R151
1386	6207155	2012-06-08T16:30:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6207155	jgarzik	gavinandresen's	Copying and expanding on the comments in @gavinandresen's gist RPC interface document https://gist.github.com/2839617  1) 'name' should be restricted to [a-zA-z0-9] etc. as suggested  2) although the **implementation** of the interface is currently exact match, the **semantics** are fuzzy match. users of this interface should perform their own exact matching, to prepare for an implementation that uses bloom filters or other fuzzy matching.  This behavior should be documented somewhere.  3) I dislike the use of * because it creates minor command line PITAs...  but I will go with consensus if others want '*' rather than filterclearall  4) I agree better docs are needed  5) Multi-match behavior should be addressed, as @roques hints.  We could call the filter multiple times, or we could exec once with a comma-separated list.  Currently it stops at first match.  6) Contra @gavinandresen's opinion, I continue to think sending HTTP requests over a pipelined connection is superior to continually exec'ing a program.  @gavinandresen's objections to such methods -- getting SSL and auth correct is difficult -- remain valid.
1386	6207155	2012-06-08T16:30:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6207155	jgarzik	roques	Copying and expanding on the comments in @gavinandresen's gist RPC interface document https://gist.github.com/2839617  1) 'name' should be restricted to [a-zA-z0-9] etc. as suggested  2) although the **implementation** of the interface is currently exact match, the **semantics** are fuzzy match. users of this interface should perform their own exact matching, to prepare for an implementation that uses bloom filters or other fuzzy matching.  This behavior should be documented somewhere.  3) I dislike the use of * because it creates minor command line PITAs...  but I will go with consensus if others want '*' rather than filterclearall  4) I agree better docs are needed  5) Multi-match behavior should be addressed, as @roques hints.  We could call the filter multiple times, or we could exec once with a comma-separated list.  Currently it stops at first match.  6) Contra @gavinandresen's opinion, I continue to think sending HTTP requests over a pipelined connection is superior to continually exec'ing a program.  @gavinandresen's objections to such methods -- getting SSL and auth correct is difficult -- remain valid.
1386	6207155	2012-06-08T16:30:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6207155	jgarzik	gavinandresen's	Copying and expanding on the comments in @gavinandresen's gist RPC interface document https://gist.github.com/2839617  1) 'name' should be restricted to [a-zA-z0-9] etc. as suggested  2) although the **implementation** of the interface is currently exact match, the **semantics** are fuzzy match. users of this interface should perform their own exact matching, to prepare for an implementation that uses bloom filters or other fuzzy matching.  This behavior should be documented somewhere.  3) I dislike the use of * because it creates minor command line PITAs...  but I will go with consensus if others want '*' rather than filterclearall  4) I agree better docs are needed  5) Multi-match behavior should be addressed, as @roques hints.  We could call the filter multiple times, or we could exec once with a comma-separated list.  Currently it stops at first match.  6) Contra @gavinandresen's opinion, I continue to think sending HTTP requests over a pipelined connection is superior to continually exec'ing a program.  @gavinandresen's objections to such methods -- getting SSL and auth correct is difficult -- remain valid.
1386	6207155	2012-06-08T16:30:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6207155	jgarzik	gavinandresen's	Copying and expanding on the comments in @gavinandresen's gist RPC interface document https://gist.github.com/2839617  1) 'name' should be restricted to [a-zA-z0-9] etc. as suggested  2) although the **implementation** of the interface is currently exact match, the **semantics** are fuzzy match. users of this interface should perform their own exact matching, to prepare for an implementation that uses bloom filters or other fuzzy matching.  This behavior should be documented somewhere.  3) I dislike the use of * because it creates minor command line PITAs...  but I will go with consensus if others want '*' rather than filterclearall  4) I agree better docs are needed  5) Multi-match behavior should be addressed, as @roques hints.  We could call the filter multiple times, or we could exec once with a comma-separated list.  Currently it stops at first match.  6) Contra @gavinandresen's opinion, I continue to think sending HTTP requests over a pipelined connection is superior to continually exec'ing a program.  @gavinandresen's objections to such methods -- getting SSL and auth correct is difficult -- remain valid.
1386	6412808	2012-06-19T00:07:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6412808	luke-jr	jgarzik	@jgarzik Do you plan to finish rebasing it?
1384	6265096	2012-06-12T08:05:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6265096	laanwj	burger2	@burger2 My idea with #1361 was a proposal to make make it more clear what happens by grouping label/address together visually, but it was shot down very quickly.  I'd still like to somehow put label and address in one field, to make it more clear that they belong together, and that it's nonsensical to change one without the other.   People get confused about this all the time. The current behavior is not a bug, but a result from differing expectations (see also the issues I mention in the first comment).
1384	8808135	2012-09-24T05:57:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8808135	burger2	dooglus	But issue #840 don't have nothing to do with the address book. It was when you typed in a label and then pasted (ctrl+v in windows) in the bitcoin address field, then the label got deleted.  I think @dooglus should comment on this issue.  And the fix about not selecting automatically when address book was opened is very good.
1382	5916764	2012-05-24T20:31:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5916764	rebroad	TheBlueMatt	@TheBlueMatt @laanwj Please can you see Issue #1120 - do we really want to continue having nodes sending thousands of duplicate blocks to each other? If we don't disconnect the peer, then what are the alternative solutions to this problem? By the way, in case it wasn't obvious, this is relating to when a peer is catching up and is more than a thousand blocks behind the best block.
1382	5916764	2012-05-24T20:31:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5916764	rebroad	laanwj	@TheBlueMatt @laanwj Please can you see Issue #1120 - do we really want to continue having nodes sending thousands of duplicate blocks to each other? If we don't disconnect the peer, then what are the alternative solutions to this problem? By the way, in case it wasn't obvious, this is relating to when a peer is catching up and is more than a thousand blocks behind the best block.
1382	6733822	2012-07-03T13:11:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6733822	rebroad	csyangchen	@csyangchen this isn't meant to disconnect to due misbehavoiur, but simply to reduce wasted bandwidth between two nodes. This is a problem still occuring in 0.6.3 with a good internet connection, so unless someone has an alternative suggestion for fixing this, I would appreciate some ACKs please.
1382	7273877	2012-07-26T10:12:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7273877	rebroad	gmaxwell	@gmaxwell what do you suggest instead of disconnecting then? Or do you propose that we continue to waste bandwidth as is currently the case?
1382	10692534	2012-11-25T11:37:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692534	rebroad	jgarzik	I'm glad to see other people confirming this issue. What other options are there other than disconnecting the peer? If peer's utilised more than one connection, then it would be possible to disconnect the transfer without disconnecting the peer, but I'm not sure it's worth coding this just for that reason.    The problem is exacerbated by the fact that during block validation the peers stops responding to requests, and so once the block validation completes, the peer suddenly sends a load of stuff that the requesting peer no longer needs, so another solution would be to change the code to continue responding to requests even during block validation.    @jgarzik could this be re-opened please?
1382	10692568	2012-11-25T11:41:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692568	rebroad	sipa	@sipa how do you tell if the "old one is really lagging"?
1382	10692656	2012-11-25T11:54:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692656	rebroad	sipa	@sipa No one is suggesting disconnecting a peer for doing what is asked from them. We are suggesting disconnecting peers which are sending _repeatedly and in a sustained fashion_ blocks which are not required.    You also haven't defined how to determine when a "peer seems unresponsive". I posit, that this will always be a guess, and therefore unreliable. The simplest solution IMHO is to simply end the transfer of the unwanted blocks by the only mechanism available currently - disconnection. This will benefit the entire network as currently there is a majority of wasted traffic happening due to these disconnections not happening.    What is the disadvantage in disconnection? So far, we have discussed the advantages, and it doesn't appear anyone has suggested any disadvantages. The only reason for not doing this IMHO is if there are significant disadvantages.    I agree that a simple solution is needed, and I think this patch is it. I agree that a better solution could be developed later though.
1382	10692817	2012-11-25T12:14:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692817	rebroad	sipa	@sipa I am aware that peers should only send blocks they've been asked for. There are already timeouts implemented, but these will always be arbitrary and only a guess to determine if a peer is lagging or not. They are therefore not reliable, and IMHO shouldn't be relied on. The problem cannot be fixed by tweaking timeouts, and if timeouts are set too long, then it will cause other problems too.    How do you define "good nodes"? The only nodes this patch will cause us to lose are bad ones - "bad ones" being nodes that are repeatedly and consistently sending us blocks we do not want or need. Labelling a node "good" just because it's doing what we've asked of it, isn't definitive, IMHO. It can be based on more criteria than this.
1382	10692875	2012-11-25T12:22:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692875	rebroad	sipa	@sipa you're right of course that the code currently does request some blocks multiple times when it doesn't need to, but that is a separate issue and requires a separate patch to fix that. That fix, however, won't eradicate the situation that this patch mitigates.    There is an argument though that that patch should be a prerequisite patch to this one.
1382	10692976	2012-11-25T12:34:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692976	rebroad	sipa	@sipa You're explaining things to me that I already know and understand, and I've already said I agree that there could  be a patch to fix what you are describing in my previous comment, and that that patch might be better done before this one (which is still needed to cater for lagging nodes). You are failing to address the issue of lagging nodes providing blocks already received by lesser-lagging nodes, which is what this patch is intended for.    Having said that, I think that this patch is still better implemented now rather than waiting for the other patch to be done first.
1382	16715154	2013-04-21T03:02:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16715154	gmaxwell	rebroad	@rebroad What you are seeing is not due to "lagging peers", this is pretty easily tested. Sipa explained why you saw this. We only make the request out to one peer (except in the case sipa outlined) so lagging really has nothing to do with it.
1382	16732271	2013-04-21T16:44:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16732271	rebroad	gmaxwell	@gmaxwell a block is requested from another peer if it's not received within 2 minutes. This 2 minutes is rather arbitrary and not a reliable way to determine that a block has failed to be downloaded. It will even request the same block from another peer even when the original peer is currently sending a block. The code behind this could do with some obvious improvements, and the 2 minute delay should be replaced with something not so time based, IMHO. Perhaps start the timer from the point at which block reception stops, rather than from the point of initial request.
1377	5992289	2012-05-29T18:50:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5992289	rebroad	gavinandresen	@gavinandresen why do we time other things then, such as flushing, etc?
1375	5978397	2012-05-29T08:47:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5978397	rebroad	gavinandresen	@gavinandresen It's thread safe unless some future change tries to change the value of txnode from a different thread. So far, only one thread uses txnode, so the value won't get changed between the test and the use.  @luke-jr - thanks for the feedback. How would you recommend doing it? I realise I could just add one line in ProcessMessage() to log the peer against the tx, but I guess my motivation was to keep debug.log small (at the expense of code brevity)....
1375	5978397	2012-05-29T08:47:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5978397	rebroad	luke-jr	@gavinandresen It's thread safe unless some future change tries to change the value of txnode from a different thread. So far, only one thread uses txnode, so the value won't get changed between the test and the use.  @luke-jr - thanks for the feedback. How would you recommend doing it? I realise I could just add one line in ProcessMessage() to log the peer against the tx, but I guess my motivation was to keep debug.log small (at the expense of code brevity)....
1375	5985268	2012-05-29T14:38:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5985268	rebroad	sipa	@sipa I did try passing it in arguments, but I was getting errors about incorrect number of arguments. Perhaps my understanding of C++ isn't quite sufficient.. :-s Is there any way to restrict the use of txnode so that it can't be used by other threads?
1374	5840187	2012-05-22T06:05:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840187	Diapolo	luke-jr	@luke-jr Agreed.
1371	5836007	2012-05-21T23:01:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5836007	jgarzik	gavinandresen	@gavinandresen : BOOST_SPIRIT_THREADSAFE should be included in script_tests.cpp and rpcdump.cpp, I'd guess.  Can you try adding it at each location where the json_spirit headers are included?
1370	5945564	2012-05-26T08:52:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5945564	Diapolo	luke-jr	@luke-jr :-D Was that an ACK then ;)?
1369	5827492	2012-05-21T16:48:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5827492	sipa	laanwj	@laanwj removed comment
1368	5840728	2012-05-22T06:58:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840728	Diapolo	laanwj	@laanwj I would like to get this on meged (when final), as your suggestion requires a change to this ui-element and others. Can you show me a screen of how you think of that tooltip ... I currently have not imagination, how that would look :).
1368	5858880	2012-05-22T21:04:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858880	sipa	gmaxwell	@gmaxwell maybe you want to comment on this?
1368	5971887	2012-05-28T20:51:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5971887	Diapolo	gmaxwell	Updated once more, removed checkAddress() and placed code directly in on_verifyMessage_clicked() function. @gmaxwell Can you comment please :)?
1368	6045969	2012-05-31T20:03:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6045969	Diapolo	laanwj	Updated to add visual feedback to LineEdits via QValidatedLineEdit class. Any other dev except @laanwj (who is not here currently), who can try this and comment?
1368	6057731	2012-06-01T10:37:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6057731	Diapolo	laanwj	@laanwj Great to see you here :)!
1367	5815417	2012-05-21T04:59:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5815417	Diapolo	jgarzik	I was playing around with this flag too and never had any obvious problems with it. What I observed was, that no __db.001 - __db.006 file is generated, as memory regions are created in per-process heap memory. @jgarzik While you are at it, could you bench with the flag dbenv.set_flags(DB_REGION_INIT, 1); added and report (I know sipa tried it once)?
1367	5824679	2012-05-21T14:58:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5824679	jgarzik	sipa	@sipa satoshi removed DB_PRIVATE at my urging ;)
1367	5825274	2012-05-21T15:21:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5825274	sipa	jgarzik	@jgarzik Why...?
1359	6361512	2012-06-15T17:04:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6361512	luke-jr	tril0byte	@tril0byte That bug is in git master for now, not related to this at all.
1359	6363645	2012-06-15T18:42:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6363645	luke-jr	Diapolo	@Diapolo Please post on the pullrequest (you're posting on an old commit). I don't foresee this getting merged any time soon, unless someone steps up to clean it up - including your changes. If you'd prefer, I can merge a patch you make into my branch.
1359	6364019	2012-06-15T18:59:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364019	Diapolo	luke-jr	@luke-jr It seems I took a route to a dead-end ... dunno how that happened, had no beer yet ^^. If you are willing to teach me the Git magic I need to do to be able to create a patch, you're welcome :). Do I need to fork your repo and create a pull or is there another way?
1359	6364237	2012-06-15T19:10:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364237	luke-jr	Diapolo	@Diapolo ``` git remote add luke-jr git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git git fetch luke-jr git checkout luke-jr/coincontrol -b coincontrol # make your changes git commit -a git push # however you normally do it! ``` Then just point me at your branch...
1359	6404747	2012-06-18T18:27:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6404747	Diapolo	luke-jr	@luke-jr https://github.com/Diapolo/bitcoin/tree/coincontrol
1359	6410195	2012-06-18T21:49:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6410195	luke-jr	Diapolo	Rebased with @Diapolo 's changes.
1359	6416542	2012-06-19T05:48:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416542	Diapolo	luke-jr	@luke-jr You merged the whole patch ;)?
1359	6416617	2012-06-19T05:56:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416617	Diapolo	dooglus	What does not work? You did try it before merging, no?  @dooglus: Yes I added that .ui file. Anything wrong with it?
1359	6416766	2012-06-19T06:11:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416766	Diapolo	dooglus	@dooglus I'm glad this hot-fixes the segfault ... will have to check this in depth later. Strange thing is that does not happen for me on Windows. Thanks for testing my patch. I'm willing to bring this forward now GUI wise and perhaps we can fix the "bad" internals somehow to get this merged in the near future?
1359	6420219	2012-06-19T09:24:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6420219	Diapolo	dooglus	@dooglus Great, yes this will fix it ... currently model is not initialized to 0. This should be done via:  <pre> CoinControlPage::CoinControlPage(QWidget *parent) :     QDialog(parent),     ui(new Ui::CoinControlPage),     model(0) </pre>  Will create a patch later... btw. I find it hard to follow the changes when they occur as rebase. Shall we just use seperate commits for now and rebase the whole thing in the end?
1359	6430146	2012-06-19T16:30:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6430146	Diapolo	laanwj	Can you tell @laanwj he uses a wrong init value all over the GUI.  Btw: http://www2.research.att.com/~bs/bs_faq2.html#null
1359	6431184	2012-06-19T17:04:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6431184	Diapolo	luke-jr	@luke-jr But this should be safe, as you merged my patch and did only some small further changes, right? When I have a new commit, how shall we proceed further?
1359	6431329	2012-06-19T17:10:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6431329	Diapolo	laanwj	@laanwj That post was purely ironic, I want all of them to be 0 to stay consistent, nothing more :).
1359	6481900	2012-06-21T13:18:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6481900	Diapolo	luke-jr	@luke-jr That ``git diff luke-jr/coincontrol`` doesn't help, as it's too much difference ... I regularly rebase patches to current master, but coincontrol seems to be not up to date, which makes comparing the branches very hard. My joy to push here fades away, when I don't know what you left out of my patch or changed for yourself. Things you consider unrelated (even if that may be true feature-wise) but I would like to see in that pull (or I would do when opening that pull) make things not better in the end. Any suggestion for this issue?
1359	6540869	2012-06-25T07:06:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6540869	gmaxwell	dooglus	@dooglus   I was thinking it would be interesting if it supported a hierarchy accounts/labels  /  addresses / inputs,  and if you could select groups at each level (e.g. select an account to get all its addresses and all their inputs, select an address to get all its inputs) with each level showing a subtotal, and there being a total of selected.  Also a 'select all', which would then let you go exclude things.   But... lots of gui work to do all that.
1359	6547702	2012-06-25T13:50:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6547702	gmaxwell	sipa	@sipa  fair enough.
1359	6898469	2012-07-11T05:29:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6898469	luke-jr	Diapolo	Rebased with more of @Diapolo 's GUI improvements
1359	6899086	2012-07-11T06:28:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899086	dooglus	luke-jr	@luke-jr I just built your rebased version from an hour ago.  The coin control tab is now lacking a scrollbar.  I can scroll the contents using the right-hand edge of the touchpad (probably that's simulating a mouse's scrollwheel), but the scrollbar itself is missing.  It was there the last time I built from your same branch.  I can't see what you've changed because it appears that you've overwritten the previous commit with the new one.  Remember when @Diapolo said:  "can we work with seperate commits until we are final? It's impossible to track changes when it's rebased all the time"  and you replied:  "I suppose separate commits makes sense for this one..."  and I thought that meant we'd be using separate commits for this one?
1359	6899086	2012-07-11T06:28:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899086	dooglus	Diapolo	@luke-jr I just built your rebased version from an hour ago.  The coin control tab is now lacking a scrollbar.  I can scroll the contents using the right-hand edge of the touchpad (probably that's simulating a mouse's scrollwheel), but the scrollbar itself is missing.  It was there the last time I built from your same branch.  I can't see what you've changed because it appears that you've overwritten the previous commit with the new one.  Remember when @Diapolo said:  "can we work with seperate commits until we are final? It's impossible to track changes when it's rebased all the time"  and you replied:  "I suppose separate commits makes sense for this one..."  and I thought that meant we'd be using separate commits for this one?
1359	6899194	2012-07-11T06:35:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899194	Diapolo	dooglus	@dooglus As I currently don't work on this (e.g. found it boring to discuss about cosmetic changes that luke refused to accept, no commits, lack of under the hood updates etc.) I can only guess, that perhaps in the UI file scrollbars are disabled?
1359	6899272	2012-07-11T06:41:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899272	dooglus	Diapolo	@Diapolo It's a shame.  I find it to be a useful feature to have, but after rebasing it over and over I too had to give up on it.
1359	6899388	2012-07-11T06:49:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899388	Diapolo	dooglus	@dooglus I put great efforts in improving parts of the GUI client over the last weeks, but I think it could need a few more helping hands. You are absolutely right!
1359	6899450	2012-07-11T06:54:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899450	luke-jr	dooglus	@dooglus Yes, I see that @Diapolo 's latest changes removed the scrollbar. I'll add it back, I suppose.  As far as just adding commits, I had intended to just pull (fast-forward style) from others. Unfortunately @Diapolo did his own rebasing and merging of his old changes with his new changes, so I had to dig them out and merge them in by hand (so not even cherry-picking would work). And then there's all the completely unrelated changes that @Diapolo insists on keeping in his branch...  @DIapolo I didn't refuse any of your cosmetic changes related to Coin Control at all, until this removal of the scrollbar that I agree with @dooglus makes no sense.
1359	6899450	2012-07-11T06:54:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899450	luke-jr	Diapolo	@dooglus Yes, I see that @Diapolo 's latest changes removed the scrollbar. I'll add it back, I suppose.  As far as just adding commits, I had intended to just pull (fast-forward style) from others. Unfortunately @Diapolo did his own rebasing and merging of his old changes with his new changes, so I had to dig them out and merge them in by hand (so not even cherry-picking would work). And then there's all the completely unrelated changes that @Diapolo insists on keeping in his branch...  @DIapolo I didn't refuse any of your cosmetic changes related to Coin Control at all, until this removal of the scrollbar that I agree with @dooglus makes no sense.
1359	6899450	2012-07-11T06:54:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899450	luke-jr	Diapolo	@dooglus Yes, I see that @Diapolo 's latest changes removed the scrollbar. I'll add it back, I suppose.  As far as just adding commits, I had intended to just pull (fast-forward style) from others. Unfortunately @Diapolo did his own rebasing and merging of his old changes with his new changes, so I had to dig them out and merge them in by hand (so not even cherry-picking would work). And then there's all the completely unrelated changes that @Diapolo insists on keeping in his branch...  @DIapolo I didn't refuse any of your cosmetic changes related to Coin Control at all, until this removal of the scrollbar that I agree with @dooglus makes no sense.
1359	6899450	2012-07-11T06:54:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899450	luke-jr	Diapolo	@dooglus Yes, I see that @Diapolo 's latest changes removed the scrollbar. I'll add it back, I suppose.  As far as just adding commits, I had intended to just pull (fast-forward style) from others. Unfortunately @Diapolo did his own rebasing and merging of his old changes with his new changes, so I had to dig them out and merge them in by hand (so not even cherry-picking would work). And then there's all the completely unrelated changes that @Diapolo insists on keeping in his branch...  @DIapolo I didn't refuse any of your cosmetic changes related to Coin Control at all, until this removal of the scrollbar that I agree with @dooglus makes no sense.
1359	6899450	2012-07-11T06:54:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899450	luke-jr	DIapolo	@dooglus Yes, I see that @Diapolo 's latest changes removed the scrollbar. I'll add it back, I suppose.  As far as just adding commits, I had intended to just pull (fast-forward style) from others. Unfortunately @Diapolo did his own rebasing and merging of his old changes with his new changes, so I had to dig them out and merge them in by hand (so not even cherry-picking would work). And then there's all the completely unrelated changes that @Diapolo insists on keeping in his branch...  @DIapolo I didn't refuse any of your cosmetic changes related to Coin Control at all, until this removal of the scrollbar that I agree with @dooglus makes no sense.
1359	6899450	2012-07-11T06:54:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899450	luke-jr	dooglus	@dooglus Yes, I see that @Diapolo 's latest changes removed the scrollbar. I'll add it back, I suppose.  As far as just adding commits, I had intended to just pull (fast-forward style) from others. Unfortunately @Diapolo did his own rebasing and merging of his old changes with his new changes, so I had to dig them out and merge them in by hand (so not even cherry-picking would work). And then there's all the completely unrelated changes that @Diapolo insists on keeping in his branch...  @DIapolo I didn't refuse any of your cosmetic changes related to Coin Control at all, until this removal of the scrollbar that I agree with @dooglus makes no sense.
1359	6901504	2012-07-11T09:04:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6901504	Diapolo	luke-jr	@luke-jr I like your feedback most of the time as coding-wise it's valuable ... but most of the time a team-play like here (where you are the master-chief of this patch currently) seems to not work. I rebase all my patches agains the current master in regular intervals, which minimizes merge-conflicts. And coding-style wise we have different points of view.
1359	14413412	2013-03-04T23:22:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14413412	gmaxwell	eldentyrell	@eldentyrell  Perhaps you are interested in Pull #2343 ?
1357	5858792	2012-05-22T21:01:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858792	sipa	gavinandresen	@gavinandresen what say you?
1357	5913925	2012-05-24T18:28:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5913925	sipa	gavinandresen	Rebased and fixed unit tests.  @gavinandresen: added some comments, as well
1356	5805573	2012-05-19T23:38:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805573	Diapolo	gmaxwell	@gmaxwell To understand the feature as it's intended, I need to supply a signature and a message and won't get the address out of the two. I just can verify, that the person, who send me both seems to be the owner of the signing address (I don't know or don't need to know).
1356	5819244	2012-05-21T10:13:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5819244	sipa	Diapolo	@Diapolo that's quite expected - the signature does not encode whether it's from testnet or not. The key recovery mechanism (which does require the message, by the way) can recover the public key, but the address that corresponds to it depends on which network you're on.
1356	5820310	2012-05-21T11:26:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5820310	Diapolo	sipa	@sipa: Alright, even if the behaviour is expected, I think the verifymessage page should act like the RPC ``verifymessage``. It does not make any sense to "recover" an address (or key) that was not used to sign the message. As I wrote, the current state allows to use a valid signature, enter any message and get a Bitcoin address displayed. I have code ready, that changes it to behave like ``verifymessage``.
1356	5822171	2012-05-21T13:20:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5822171	luke-jr	Diapolo	@Diapolo both the testnet address you signed with and the bitcoin address you got are the same key; you can export it from testnet and import it to mainnet to use it there. Pasting the signature without the message is obviously a bug for sure,  though, and I do believe the behaviour should be corrected here.
1352	5800442	2012-05-19T09:13:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5800442	Diapolo	luke-jr	Updated and hoping someone can test this :). @luke-jr See: https://github.com/Diapolo/bitcoin/commit/e9558a2bd022823e232b23443ed2a124ed3715b3  I don't know, why the last update is not showing up here ... weird.
1352	5808754	2012-05-20T13:09:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5808754	Diapolo	gavinandresen	Rebased to be mergable again! @gavinandresen What about re-open and accepting this or do you still prefer a non-portable approach?
1351	5796076	2012-05-18T21:21:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5796076	Diapolo	luke-jr.	Updated to reflect suggestion from @luke-jr.
1351	5805212	2012-05-19T22:19:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805212	Diapolo	gavinandresen	@gavinandresen Are you fine with massive boost usage now? I will update that pull and use what you suggested, no problem.
1349	5779253	2012-05-18T03:21:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779253	gmaxwell	jgarzik	@jgarzik if your 'log-worthy event' comment is also on the oversized orphans (like 183 instead of 191), I thought the same thing.
1349	5787180	2012-05-18T14:24:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5787180	gavinandresen	gmaxwell	@gmaxwell : I want to keep this pull based on 0.6.2 in case we decide we need a 0.6.3.  @jgarzik : ACK, I'll fix the comments. I think encapsulation in a class is overkill.  @SergioDemianLerner  : excellent catch on vSpent, and I 100% agree this code needs extremely careful review and as much testing as we can throw at it.  I also like your suggestion to only cache valid signatures; it has the added benefit of making the code a lot simpler.
1349	5787180	2012-05-18T14:24:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5787180	gavinandresen	jgarzik	@gmaxwell : I want to keep this pull based on 0.6.2 in case we decide we need a 0.6.3.  @jgarzik : ACK, I'll fix the comments. I think encapsulation in a class is overkill.  @SergioDemianLerner  : excellent catch on vSpent, and I 100% agree this code needs extremely careful review and as much testing as we can throw at it.  I also like your suggestion to only cache valid signatures; it has the added benefit of making the code a lot simpler.
1349	5787180	2012-05-18T14:24:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5787180	gavinandresen	SergioDemianLerner	@gmaxwell : I want to keep this pull based on 0.6.2 in case we decide we need a 0.6.3.  @jgarzik : ACK, I'll fix the comments. I think encapsulation in a class is overkill.  @SergioDemianLerner  : excellent catch on vSpent, and I 100% agree this code needs extremely careful review and as much testing as we can throw at it.  I also like your suggestion to only cache valid signatures; it has the added benefit of making the code a lot simpler.
1349	5821270	2012-05-21T12:33:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5821270	gavinandresen	SergioDemianLerner	@SergioDemianLerner I'll isolate and benchmark the cache unit test to see why cached signatures are taking 50ms to validate.  Note that all of the CScript interpreter machinery is still being run (I am testing/measuring at the VerifySignature() level, not a the CKey:: level).
1349	5852732	2012-05-22T17:06:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5852732	gmaxwell	SergioDemianLerner	@SergioDemianLerner  Thats actually a bad idea.    Otherwise I can just create endless numbers of scripts of the form push $randomnumber pop  [normal script]   with no computation on my part in order to bypass the cache.
1349	5858576	2012-05-22T20:52:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858576	gmaxwell	SergioDemianLerner	@SergioDemianLerner      PUSH $randomnumber POP {normal script}   will also validate if {normal script} would have also validated but it will have a different hash.
1349	5860763	2012-05-22T22:29:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5860763	SergioDemianLerner	gmaxwell	@gmaxwell You are right. Scripts cannot be easily cached. We would need an pushdown automata parser and optimizer to compress scripts and erase all garbage.  It would be interesting to program such an algorithm to allow clients to "standarize" scripts, detect and remove hidden messages while transactions are passed from peer to peer. We may even create a transaction antivirus !! (just joking, I remember transaction signature do not withstands such modifications...)
1349	5872807	2012-05-23T13:29:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5872807	gmaxwell	SergioDemianLerner	@SergioDemianLerner  I picked a toy example, and besides, we wouldn't want to adopt a design which strongly discouraged expanding IsStandard in the future.
1347	5775415	2012-05-17T22:05:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775415	rebroad	jgarzik	@jgarzik I would argue that had this mapping been named mapWaitingFor (as per #1341), this bug would have been less likely to have occurred, since upon renaming it becomes more intuitively obvious that it's in the wrong place in the code.  I do think quite strongly that #1341 should be re-opened for some discusssion. If POLA isn't a good reason for a variable name change, then what is?
1347	5811712	2012-05-20T19:55:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5811712	sipa	rebroad's	Not tested, but @rebroad's reasoning sounds correct to me. mapAlreadyAskedFor contains getdata requests that have not been answered yet. If AlreadyHave() returns true for an inv, there is no reason to keep waiting for it.
1344	6719350	2012-07-02T20:46:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719350	rebroad	luke-jr	@luke-jr whoops. fixed. thanks for helping.
1343	5781779	2012-05-18T08:32:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781779	rebroad	jgarzik	@jgarzik are you sure? I thought my edit simply added a printf, but doesn't change the logic. I've just double-check. Yup, it doesn't change the way local nodes are treated, it just reports when it happens now.
1343	5819242	2012-05-21T10:13:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5819242	rebroad	jgarzik,	Ah. Sorry, yes, @jgarzik, I do see what you mean now. I shall move the nMishehavior line back to its original location. Doing so now.
1340	5775797	2012-05-17T22:28:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775797	Diapolo	jgarzik	@jgarzik I think it would be nice to define a standard format for these time-measuring log entries all over the code.
1338	5781746	2012-05-18T08:30:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781746	rebroad	gmaxwell	@gmaxwell how would you code it so that it reports the peer in question for a DoS(100) event? I've been testing this for over a month and not noticed any problems. What sort of symptoms from being thread-unsafe would you expect to see?  Regarding changing of HVC for additional information, does this mean that we're stuck with not being able to log this information as we don't want to touch HVC? It's only the printf() and errors() affected, none of the actual logic.
1337	6345808	2012-06-14T23:07:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6345808	rebroad	sipa	@sipa The addition of AskForBlock is explained above. It's due to #1404.
1333	5769653	2012-05-17T17:46:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769653	rebroad	laanwj	@laanwj maybe... I'll track them down as add to this commit, shall I?
1333	5769721	2012-05-17T17:48:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769721	rebroad	laanwj	@laanwj ok, other Makefiles also updated. Thanks for pointing this out.
1327	5841432	2012-05-22T07:57:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5841432	Diapolo	laanwj?	Perhaps it is related to this line of code @laanwj? https://github.com/bitcoin/bitcoin/blob/master/src/qt/bitcoingui.cpp#L407
1326	5781630	2012-05-18T08:18:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781630	rebroad	gmaxwell,	I've closed this pull for now, as it was opened for comments, but it's not ready to pull. It still needs: 1) stuck management, and 2a) either a separate AskFor function for txs and blocks, as as it's currently written, it'll getdata the same tx from many nodes at the same time, or 2b) the same treatment of txs, i.e. don't download the same tx from another peer.  2b isn't so ideal as it will produce more getdatas as with the way it's written, it'll only have 1 inv per every getdata. This is ok for blocks (IMHO), but perhaps not so suitable for txs, so I'd be inclined to go with 2a rather than 2b.  Feedback much appreciated.  @gmaxwell, re your last comment, no worries, it's not finished anyway, so perhaps it's better to wait until I've completed bits 1 and 2a first - although your comments on whether 2a or 2b or 3c (something else) are suitable would be welcome.  Re CaughtUp() not being reliable. Well, true, but if one is connected to misbehaving peers such as this, then one'd (!) probably not want to be downloading from them anyway. The reason I created CaughtUp() is so that it can be refined to be more reliable. It serves a different purpose to IsInitialDownload() from what I've been told by others that that function is for. I do think CaughtUp(), based on your comments above, does need refining given the risk you mention. Perhaps it can factor in the timestamp of the last block received also as a sanity check.
1317	5723905	2012-05-15T18:46:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5723905	rebroad	sipa,	@sipa, uhuh, but surely it shouldn't exit, should it? Just ignore it instead?
1317	5726089	2012-05-15T20:14:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5726089	rebroad	sipa	@sipa - do you think it should exit or continue, ignoring the non-resolvable address? I think the latter would be better.
1317	5726158	2012-05-15T20:16:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5726158	rebroad	sipa	@sipa in that case, can it exit *before* it spends ages loading the block index?
1314	5763547	2012-05-17T13:00:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763547	Diapolo	laanwj.	I'm tuning the layout a little currently, please wait for a final rebase before merging @laanwj.
1314	5763889	2012-05-17T13:24:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763889	Diapolo	laanwj	Updated tooltip once more, changed tr() handling, to not need to translate "(" and ")" and fixed use stylesheet in the UI-file. If @laanwj you feel the text is now better this can be merged.
1314	5765814	2012-05-17T15:03:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5765814	Diapolo	laanwj	@laanwj My suggestion is: <b>The displayed information reflects an older state. To get more recent information, the local block chain needs to be synced with the network. This process starts automatically after a network connection is established.</b>
1314	5767460	2012-05-17T16:12:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5767460	Diapolo	laanwj	@laanwj OMFG that needs an update :), thanks for mentioning!
1314	5768046	2012-05-17T16:38:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5768046	laanwj	gmaxwell	As for the messages, maybe it'd be good if @gmaxwell takes a look too. He opened the original issue.
1314	5772568	2012-05-17T19:50:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5772568	Diapolo	gmaxwell	Updated to @gmaxwell phrasing suggestion.
1311	5705357	2012-05-14T23:59:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5705357	rebroad	gmaxwell	@gmaxwell Doesn't it make more sense to use the misbehaving function on a peer that you will *always* disconnect whenever it connects? Why not use it?  Re peer addresses: these are changes anyone could do anyway, it is useful debug info, especially when trying to work out why blocks aren't downloading as fast as they could be, or for troubleshooting code to determine network lag in general or per peer. The debug.log is chopped regularly, so there is usually no more than a day or two of logs. Would it help perhaps, if instead of showing IP addresses, it just used a unique number instead? The IP address itself isn't important, but correlating which of several peers is.  Re timestamps, @jgarzik  - how is this a privacy implication? With timestamps off, the flushing of the wallet.dat is always timestamped, so a timestamp per line surely makes little difference, does it?
1311	5705357	2012-05-14T23:59:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5705357	rebroad	jgarzik	@gmaxwell Doesn't it make more sense to use the misbehaving function on a peer that you will *always* disconnect whenever it connects? Why not use it?  Re peer addresses: these are changes anyone could do anyway, it is useful debug info, especially when trying to work out why blocks aren't downloading as fast as they could be, or for troubleshooting code to determine network lag in general or per peer. The debug.log is chopped regularly, so there is usually no more than a day or two of logs. Would it help perhaps, if instead of showing IP addresses, it just used a unique number instead? The IP address itself isn't important, but correlating which of several peers is.  Re timestamps, @jgarzik  - how is this a privacy implication? With timestamps off, the flushing of the wallet.dat is always timestamped, so a timestamp per line surely makes little difference, does it?
1311	5716715	2012-05-15T14:10:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5716715	rebroad	fanquake	@fanquake I just did a git log -p to check, but there's no mention of proxytoo in the entire log history, so I'm not quite sure what you're looking at. oh.. but on github it does show... I'll try pushing again. Ok, I've removed the ProxyToo mention now, thanks for spotting that. An inadvertent merge, not that this'll be enough to get it ACKed. I'll add a flag for the peer logging, as I agree with @gmaxwell that it reduces anonymousness unnecessarily in most situations.
1311	5716715	2012-05-15T14:10:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5716715	rebroad	gmaxwell	@fanquake I just did a git log -p to check, but there's no mention of proxytoo in the entire log history, so I'm not quite sure what you're looking at. oh.. but on github it does show... I'll try pushing again. Ok, I've removed the ProxyToo mention now, thanks for spotting that. An inadvertent merge, not that this'll be enough to get it ACKed. I'll add a flag for the peer logging, as I agree with @gmaxwell that it reduces anonymousness unnecessarily in most situations.
1311	5717668	2012-05-15T14:48:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5717668	rebroad	gmaxwell,	Ok, this now displays peers only if -logpeers is true, and that option isn't advertised unless the code is examined. Peers are shown for blocks, and for Dos(100) transactions only unless the option is selected. Timestamps are disabled by default. DoS for obsolete version also removed. Also, HandleSIGTERM now shows the signal number received.  Thanks for the feedback @gmaxwell, hopefully this is a more agreeable edit now.
1306	5718674	2012-05-15T15:24:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5718674	rebroad	laanwj	@laanwj you are of course correct, in that there is probably software which could take care of the routing, routing some via tor, some directly, etc. I'm not aware of any, but I'm sure it exists. Would you be willing to let me know of the software that does this?  I think it's a simple enough change, and I agree that a minority of people will use it. Would it be more agreeable if the proxytoo option was not mentioned in the syntax output?
1306	5809237	2012-05-20T14:26:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5809237	TheBlueMatt	laanwj,	I agree with @laanwj, I think "sometimes things work more reliably through tor, and at other times directly" is a sign that you either have issues with your connection, or the peer selection algorithms are doing a woefully poor job (depending on what, exactly you mean by work more reliably).  I cant really see any legitimate reasons for this to be used...maybe you want to elaborate?
1306	5809975	2012-05-20T16:10:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5809975	sipa	TheBlueMatt	@TheBlueMatt he has a very limited internet connection, whose provider regularly resets TCP connections, it seems.
1306	5841506	2012-05-22T08:03:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5841506	rebroad	sipa	@sipa I agree that it would be only a few people, but it's also only a few people who would want to see "IRC got who" events also, and we're keeping that in....
1305	5716699	2012-05-15T14:09:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5716699	rebroad	sipa	@sipa or how about, considering that function will be run with any signal, displaying the signal number received..?
1305	5718270	2012-05-15T15:09:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5718270	rebroad	sipa	@sipa I've just realised this change is also in another pull request. :-s I've avoided saying SIGTERM received, as this is a specific signal (15), so saying that might be misleading, whereas it's true to say the function HandleSIGTERM() is called.
1305	5720868	2012-05-15T16:46:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5720868	sipa	rebroad	@rebroad no signal handler is installed for SIGUSR1. See the beginning of AppInit2 in init.cpp.
1305	5769248	2012-05-17T17:29:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769248	rebroad	Diapolo	@Diapolo I can do... does it make much difference? (rebased now)
1305	5769374	2012-05-17T17:34:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769374	rebroad	Diapolo	@Diapolo I see 1 commit and 1 diff. What do you see? That's also what I saw before I rebased.
1305	5793722	2012-05-18T19:29:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5793722	sipa	luke-jr	@luke-jr how exactly?
1305	5794391	2012-05-18T20:05:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5794391	luke-jr	sipa	@sipa printf needs to use a lock to ensure multiple threads aren't writing at the same time, but signals can interrupt writes (while that lock is held). If this happens, the printf in the signal handler will try to lock again, and block. Even if the lock is recursive, there is a risk of the signal printf mixing output with the ongoing one.
1305	5796192	2012-05-18T21:27:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5796192	Diapolo	laanwj	@laanwj You were updating the function a few days ago ^^...
1305	5828257	2012-05-21T17:17:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828257	rebroad	luke-jr	@luke-jr what would be your ideal solution for this (other than removing the prinf)?
1305	5843234	2012-05-22T09:51:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5843234	rebroad	luke-jr	@luke-jr when I get time I'll have a dabble with this. I'm fairly new to the whole thread thing, but I was thinking of moving ProcessBlock() into a thread of it's own so that it doesn't block the reception of messages (which it appears to do currently, based upon the timestamps in debug.log)
1305	7273951	2012-07-26T10:15:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7273951	rebroad	laanwj	@laanwj That does sound like a decent solution. I will update this to do that, when I get time...
1304	5698826	2012-05-14T18:56:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5698826	rebroad	gmaxwell	@gmaxwell they aren't usually a sign of manipulation, but they *could* be a sign. This is correct, right? It's rare, admittedly, and might never have happened so far!
1304	5698948	2012-05-14T18:59:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5698948	gmaxwell	rebroad	@rebroad It's not an interesting form of manipulation (someone could lie to slightly increase the difficulty by a about half a percent), but I wasn't taking issue with your comment.  There have been some people who saw the negative going timestamps and ran around claiming it was an attack, seems to be a common mistake people make in assuming that it won't happen absent an attack.  Logging it sounds fine to me.
1304	6333610	2012-06-14T16:31:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333610	rebroad	Diapolo	@Diapolo I thought 4 spaces was for inside functions/parenthesis, and 2 spaces is for lines that have been broken up over more than one line.
1303	5811829	2012-05-20T20:08:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5811829	jgarzik	sipa	Issue 5 fixed.  Thanks to @sipa for noticing the probable bug.
1298	6397905	2012-06-18T14:53:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6397905	sipa	wizeman	@wizeman Seems @gavinandresen did it for you.  For future reference: yes, you can just push to the branch on github where you originally pullrequested from, and the pull request will be updated accordingly (keeping relevant discussion, but changing commits as necessary).
1298	6397905	2012-06-18T14:53:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6397905	sipa	gavinandresen	@wizeman Seems @gavinandresen did it for you.  For future reference: yes, you can just push to the branch on github where you originally pullrequested from, and the pull request will be updated accordingly (keeping relevant discussion, but changing commits as necessary).
1298	6897088	2012-07-11T03:17:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6897088	luke-jr	wizeman	@wizeman Could you comment on #1497 please?
1297	5684754	2012-05-14T08:21:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5684754	Diapolo	laanwj	@laanwj To be more clear, I was referring to a WIndows command prompt, not the RPC Console, when I talked about what I as Win-user expect from such a RPC Console ;), sorry.
1290	5679191	2012-05-13T20:24:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5679191	laanwj	sipa	@sipa is right, what you see is consistent with little-endian. This is, BTW, why people concerned with type-safety hate `printf`. Some compilers will warn you for these mistakes  with -Wformat.
1290	5679712	2012-05-13T21:31:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5679712	Diapolo	sipa	@sipa: That's what I did, thanks again.
1289	5694943	2012-05-14T16:34:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5694943	Diapolo	sipa	I'm not sure about Wikipedia beeing a general reference, but they use it the same way I would use it. @sipa What you say?
1288	5678216	2012-05-13T18:22:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678216	Diapolo	laanwj	@laanwj I think we should break translations before RC-phase, so yes ... I'm cleaning up ^^.
1281	5675143	2012-05-13T09:42:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675143	sipa	laanwj	@laanwj In all but the first call, it doesn't even need a mutex - it just returns the value cached in pathCached[].
1281	5678430	2012-05-13T18:46:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678430	jgarzik	sipa	@sipa: You're right.  That's a bug...  I meant to use the net-specific path.
1271	5669315	2012-05-12T15:29:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669315	rebroad	sipa	@sipa thankyou.. now 1 commit.
1271	5679587	2012-05-13T21:16:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5679587	rebroad	jgarzik	@jgarzik 1) accessed in both, yes. thread safety - not needed from what I can tell, but please feel free to explain why you think it is. 2) No. Once asked for blocks, it's true. It never becomes false, since the past cannot be changed. Any new CNode, it's set to false on creation.
1271	5697185	2012-05-14T17:59:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697185	rebroad	gmaxwell	@gmaxwell there's certainly room for improvement, but this is a small (intentionally, to increase the change of it bring pulled) step towards making it get the blocks more quickly. This particular change has been tested in my fork for over a month, but I've also got other code that checks for stuck downloads (which then timeout's the askfor and asks elsewhere). Currently it's not ideal in that it often causes the same blocks to be downloaded from several nodes (as sometimes they do wake up again), so isn't as bandwidth efficient as I'd like it to be, and it also has various timeouts hardcoded, which is based on my internet connection. My eventual plan is to a patch that will determine the speed of the network and peers over time, and factor that knowledge into the block download process.  @sipa, I see what you're saying. it does get modified from those two places. It seems to work though. Are you saying it could end up being two different values within the two different threads? I've never noticed this happen during over a month of testing so far. I could move the nAskedForBlocks++ code from ProcessMessages() into the socket handler thread. It probably belongs there more than ProcessMessages() now anyway, since it's not part of the strCommend == "version" code any longer. I was going to do this as a later pull, since as it is it works, and is less of a change to keep it in ProcessMessages(), and move it elsewhere later.
1271	5697185	2012-05-14T17:59:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697185	rebroad	sipa,	@gmaxwell there's certainly room for improvement, but this is a small (intentionally, to increase the change of it bring pulled) step towards making it get the blocks more quickly. This particular change has been tested in my fork for over a month, but I've also got other code that checks for stuck downloads (which then timeout's the askfor and asks elsewhere). Currently it's not ideal in that it often causes the same blocks to be downloaded from several nodes (as sometimes they do wake up again), so isn't as bandwidth efficient as I'd like it to be, and it also has various timeouts hardcoded, which is based on my internet connection. My eventual plan is to a patch that will determine the speed of the network and peers over time, and factor that knowledge into the block download process.  @sipa, I see what you're saying. it does get modified from those two places. It seems to work though. Are you saying it could end up being two different values within the two different threads? I've never noticed this happen during over a month of testing so far. I could move the nAskedForBlocks++ code from ProcessMessages() into the socket handler thread. It probably belongs there more than ProcessMessages() now anyway, since it's not part of the strCommend == "version" code any longer. I was going to do this as a later pull, since as it is it works, and is less of a change to keep it in ProcessMessages(), and move it elsewhere later.
1271	6303647	2012-06-13T15:08:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6303647	TheBlueMatt	rebroad's)	Note that though I think this pull is good and should be added to specifically fix #1234, it appears that the motivation for this patch is to fix an issue where some ISPs (specifically @rebroad's) are closing connections without RSTing them after a certain amount of time and I would kinda like to see a specific fix for that to fix the underlying issue here instead of just working around it.
1271	11582551	2012-12-20T17:27:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11582551	rebroad	TheBlueMatt	@TheBlueMatt just to clarify. This patch has nothing to do with ISPs that RST connections. It's needed for all ISPs for where any connection goes stale and eventually (after about 3 minutes in my last tests) times out.
1262	5672176	2012-05-12T22:01:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672176	Diapolo	gmaxwell	So, remove the manual timestamps?  @gmaxwell Is -timestamps default to on really a security issue?
1255	5647445	2012-05-11T09:55:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647445	sipa	jgarzik	@jgarzik: added
1254	5650578	2012-05-11T13:33:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650578	sipa	Diapolo	@Diapolo don't tell me we need a mutex for printf on windows...
1254	5650604	2012-05-11T13:34:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650604	Diapolo	sipa	@sipa I was just asking with nothing bad in my mind...
1253	6670452	2012-06-29T18:00:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6670452	coblee	1.47.0	So, add this to /opt/local/etc/macports/sources.conf before the rsync line:   file:///Users/Shared/dports  and then:   mkdir /Users/Shared/dports   cd /Users/Shared/dports   svn co http://svn.macports.org/repository/macports/trunk/dports/devel/boost/@85591 devel/boost/   portindex /Users/Shared/dports   sudo port install boost @1.47.0
1252	5647062	2012-05-11T09:31:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647062	sipa	laanwj	@laanwj Excellent idea; why didn't I think of that myself?    Updated and rebased.
1252	5647112	2012-05-11T09:35:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647112	sipa	gavinandresen	@gavinandresen You want this backported for 0.6.2.2, or stick with the earlier version?
1247	5618659	2012-05-10T05:55:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618659	Diapolo	laanwj	@laanwj .log files are opened with notepad.exe per default (if you didn't change the file association) on WinXP, Win Vista and Win7 (see: https://bugs.freenetproject.org/print_bug_page.php?bug_id=3245).    I thought about a button, too, but came up with the feeling it would be a bad thing to integrate a button for it. If users are familiar with where to find that switch, it is okay to have it, where it's now IMHO. It's somehow related to the debug window, so yes perhaps add a button there AND leave the menu option.
1247	5627772	2012-05-10T15:12:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5627772	Diapolo	laanwj	@laanwj What do you think?    http://oi49.tinypic.com/35i5ct5.jpg
1246	6605636	2012-06-27T14:57:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6605636	sipa	luke-jr	@luke-jr Can you rebase #1245 and this? I'd like to merge.
1244	5646925	2012-05-11T09:22:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5646925	laanwj	Diapolo	Fixed, thanks @Diapolo
1240	6414164	2012-06-19T01:52:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6414164	luke-jr	gavinandresen	@gavinandresen I think SatoshiDice tested that for me (the fix from ~16 days ago)
1240	7430874	2012-08-01T15:43:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430874	jgarzik	gavinandresen	Sadly, in addition to being NAK'd this conflicts heavily with @gavinandresen 's work redoing CreateNewBlock()  You should work with @gavinandresen to coordinate changes in that area, before posting another pull request relating to CreateNewBlock() + TX selection/fees.
1240	7430874	2012-08-01T15:43:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430874	jgarzik	gavinandresen	Sadly, in addition to being NAK'd this conflicts heavily with @gavinandresen 's work redoing CreateNewBlock()  You should work with @gavinandresen to coordinate changes in that area, before posting another pull request relating to CreateNewBlock() + TX selection/fees.
1238	5623084	2012-05-10T11:43:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5623084	Diapolo	laanwj	@laanwj If you don't want to be the console that public just comment. I still like that :).
1237	5600051	2012-05-09T13:32:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5600051	gmaxwell	Diapolo	@Diapolo Yes. :) (are you actually current with master?  What GCC version?  With 4.7.0 we're clean for me (save a complaint about ignoring a fwrite return value)
1236	5768132	2012-05-17T16:42:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5768132	Diapolo	gmaxwell	@gmaxwell Are you okay with this message as tooltip: <b>The displayed information reflects an older state. To get more recent information, the local block chain needs to be synced with the network. This process starts automatically after a network connection is established.</b> See #1314 for details.
1236	5769922	2012-05-17T17:58:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769922	Diapolo	gmaxwell	@gmaxwell I will update once the final sentences are finished :).
1235	5618799	2012-05-10T06:12:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618799	Diapolo	laanwj	@laanwj It's still not available on Transifex. @tcatm Can you check what's wrong here or tell me how I / we can force Transifex to fetch the new master file?
1235	5618799	2012-05-10T06:12:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618799	Diapolo	tcatm	@laanwj It's still not available on Transifex. @tcatm Can you check what's wrong here or tell me how I / we can force Transifex to fetch the new master file?
1233	5697689	2012-05-14T18:21:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697689	rebroad	TheBlueMatt,	@TheBlueMatt, do you mean within github? I'm not sure how to do that. Could you provide a URL, perhaps?
1229	5590761	2012-05-09T01:14:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5590761	gruez	gavinandresen	@gavinandresen I know it's to provide at-glance information to the user, and it's designed to be less busy than the transactions window. However, its use of space is very inefficient. I would like to either consolidate it with another tab, or reduce the window size so there is less whitespace.
1227	5666443	2012-05-12T08:41:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5666443	Diapolo	burger2	@burger2 I think you are right and bitcoin should be written uppercase, so if you can post the string and the occurences in the master file (click on Details in Transifex and copy the line that reads lile: "Occurrences: ../forms/aboutdialog.ui:14" I will try to get this fixed ASAP.
1227	5995049	2012-05-29T20:36:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5995049	Diapolo	burger2	@burger2 You are right, and that's not new to me, current Transifex master file is behind the real project status. Before I can update the master file, I need someone, who is able to create the bitcoinstrings.cpp file, which is created via some Linux scripts.  Opened #1397 for this.
1227	6903861	2012-07-11T11:19:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6903861	Diapolo	laanwj	@laanwj Can you please create a current bitcoinstrings.cpp file once more, before the RC-phase begins? As I was told lang-updates are possible during the whole RC-phase we have quite some time for this. I'll keep an eye on the translations and will fetch the current translations before we push a new master-file to Transifex.
1227	6960619	2012-07-13T11:43:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6960619	Diapolo	Dr-Nix	@Dr-Nix I observed this too, while doing the German translation. I'm not sure though, if this because we use a different switch when creating the master file (which removes source- and ui-file line-references from the translation files) or if they were there before that change. Can you remember perhaps?
1227	6962065	2012-07-13T12:51:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6962065	Dr-Nix	Diapolo	@Diapolo Well I remember duplicates come and go, but in the latest changes the two long ones (sign a message... & verify a message...) were empty and I had to fill them out three times each. Therefore I noticed them.  Transifex had suggestions ready (from what I entered before) so this suggests that these strings (or something very similar) were there in a previous version. And I think so too, but maybe a word or some punctuation has changed.
1227	7034355	2012-07-17T13:00:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7034355	Diapolo	laanwj	@laanwj I guess it would be best to wait for that new master-file version, before doing a pull for current Transifex state?
1222	5597240	2012-05-09T10:50:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5597240	Diapolo	ssokolow	@ssokolow I can't comment on your suggestion, but perhaps you can explain how and if this will affect Windows users as there are quite many of them using Bitcoin-Qt.
1222	5597437	2012-05-09T11:05:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5597437	laanwj	ssokolow	@ssokolow yes, that's fine, just send a list with the icon names, and maybe examples how they look in various default themes, so we can see that they provide consistent tab icons
1216	5585754	2012-05-08T20:40:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585754	jgarzik	gmaxwell	Two specfiles, for two separate packages.  @gmaxwell already does this for openssl, in fact: http://people.xiph.org/~greg/openssl/
1211	5540879	2012-05-06T21:08:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540879	Diapolo	laanwj	@laanwj So it would be best to simply keep "..."! Do you agree to the other changes (no "..." on buttons, but in menus)? If yes I will revert the last ELLIPSIS commit and this is finished.
1208	5533019	2012-05-06T05:31:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533019	laanwj	gmaxwell	@gmaxwell nails it, the current behavior is intended. This does not "fix" anything.
1206	5539924	2012-05-06T19:22:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5539924	Diapolo	laanwj	@laanwj Do you agree with luke-jr on his suggestion? What about the other changes? I'm interested in a small integration of these little commits :).
1204	5549354	2012-05-07T12:56:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5549354	Diapolo	laanwj	@laanwj I added your suggestion and consolidated gotoMessagePage() into 1 function.
1199	5611353	2012-05-09T20:50:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5611353	Diapolo	luke-jr	@luke-jr I tried your tripple-clicking-thing and that's also nice, but I guess the majority likes this pull :). And if it doesn't break your work-flow even better!
1193	5541298	2012-05-06T22:07:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5541298	sipa	luke-jr	@luke-jr screenshot?
1193	5542108	2012-05-07T00:18:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542108	gruez	Daminvar	@Daminvar @luke-jr   Agreed, it does look better with gridlines, but only the vertical ones. There's no need for horizontal gridlines because any one with decent eyes can tell the lines apart.
1193	5542108	2012-05-07T00:18:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542108	gruez	luke-jr	@Daminvar @luke-jr   Agreed, it does look better with gridlines, but only the vertical ones. There's no need for horizontal gridlines because any one with decent eyes can tell the lines apart.
1193	5542149	2012-05-07T00:25:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542149	gruez	luke-jr	@luke-jr   I want lines going up and down  I do not want lines going left to right
1191	5495221	2012-05-03T18:51:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5495221	rebroad	gmaxwell.	@gmaxwell. Yes, wallet / backend sepatation does seem to be where this idea would fit in. Protocol-wise, do you think it should involve a BIP, or be an independent network? I'm inclined to think it could fit in easily to the existing network (via BIP). Although I think the current version system advertised amongst peers is not ideal for future feature expansion. I think something in the form of flags would be better. The number 60000 takes up 16 bits of information. I wonder whether a new version/flag system implemented, via the BIP process, where each bit could correspond to a function of that peer, might offer better expansion abilities.
1191	5509319	2012-05-04T12:27:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5509319	rebroad	laanwj	@laanwj Apologies for the re-hashing of ideas. I wasn't aware that they were old ideas (although I'm not surprised). I did do a search of the github issue database first before raising this though, which I thought would be the first place to look for whether it had previously been suggested.    From my perspective, github issue list seems the ideal place to discuss things, as with the mailing list, I can only see what is discussed since I joined the list, which isn't much, and I'm not aware of any mailing list archives, nor how to easily search them.    Can someone please advise how I can get post/reply ability on bitcointalk.org please? It would be nice to be able to discuss such things on there instead of here, if that is the overall preference.
1191	5510263	2012-05-04T13:21:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5510263	laanwj	rebroad	@rebroad: http://sourceforge.net/mailarchive/forum.php?forum_name=bitcoin-development
1189	5506494	2012-05-04T08:44:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5506494	Diapolo	laanwj	@laanwj Updated to be a GUI-fix only, is the LOCK in parentheses correct? I get now compiler warning, just want to be sure :)
1187	5481354	2012-05-03T05:45:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5481354	laanwj	diapolo	ACK    @diapolo Right, we don't actually use IE, but if you define _WIN32_IE to some old version you may be including some deprecated API that no longer exists on 64 bit windows.    Edit: which makes me wonder, what happens if you don't define _WIN32_IE at all? or do all windows programs need it?  If so, why don't we define these things (_WIN32_WINNT, _WIN32_IE) centrally in the build system instead?
1186	5485665	2012-05-03T11:32:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5485665	rebroad	Diapolo,	@Diapolo, I originally commented in the relevant issue for the pull request for this code, but luke-jr said I should raise a new issue, presumably because the old issue had been closed.    I'd love to ask this in the forums, but I don't have post access - if you can tell me how to obtain this I'd be grateful.
1186	5518861	2012-05-04T19:53:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5518861	rebroad	laanwj	@laanwj I joined bitcointalk a few months ago now.. still no post access....
1186	5522268	2012-05-04T23:11:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5522268	rebroad	Diapolo	@Diapolo aha! Thank you! I guess I'm such a noob that I didn't realise that :)
1183	5468543	2012-05-02T18:26:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5468543	rebroad	laanwj	@laanwj  it seems to be random. usually it's my Google Chrome window, but sometimes more than one application is unminimised. No special options enabled.
1183	8797368	2012-09-23T11:04:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8797368	Diapolo	rebroad	@rebroad Any new input here? I would also be interested in what happens, when using a newer Qt version like 4.8.2.
1182	5485693	2012-05-03T11:35:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5485693	rebroad	laanwj	@laanwj - If I'm the only experiencing this, then it would seem that it's a rare combination between my unusual desktop, and something unusual bitcoin-qt is doing (since no other applications have these problems). I'd still suggest this issue remains open pending further investigation - and if anyone has any advice on how to debug this, I'd be happy to help. I'm shortly planning to upgrade from Oneiric to Precise, so perhaps that will fix the problem. I don't believe my desktop has had any unusual configuration changes. It's pretty much a stock Oneiric AFAIK.
1181	5459185	2012-05-02T11:14:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5459185	Diapolo	laanwj	It could be possible to get the text-direction from the system locale via QLocale.textDirection() and set it via http://harmattan-dev.nokia.com/docs/library/html/qt4/qtextoption.html#setTextDirection but I guess @laanwj is able to confirm this :).
1180	5585505	2012-05-08T20:30:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585505	Diapolo	jgarzik	@jgarzik Will you do that mentioned pull above or shall I do it tomorrow?
1174	5476879	2012-05-03T01:44:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5476879	sipa	rebroad	@rebroad: switch to whatever branch you want my patches to be merged with (possibly just master), and type "git pull git://github.com/sipa/bitcoin.git torhs".
1174	5485789	2012-05-03T11:44:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5485789	rebroad	sipa	@sipa Thanks. doing that now. Has -addnode code been removed from init.cpp, or am I misreading the merge conflict?
1174	5509277	2012-05-04T12:25:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5509277	rebroad	gmaxwell	@gmaxwell can you elaborate on what anti-dos you have in mind? ah, you mean such as banning based on IP address. Well, the only way around this would be to make nodes somehow uniquely identifiable. I'm not sure which would be worse, that or lack of ability to ban peers.
1174	5518896	2012-05-04T19:55:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5518896	rebroad	gmaxwell,	@gmaxwell, already did that before my post.
1174	5536037	2012-05-06T14:20:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5536037	sipa	rebroad	@rebroad the anti-DoS system registers IP addresses which engage in incorrect behavior, and prevents them from connecting or being connected to. In combination with Tor hidden services, you don't know the source IP, so it cannot be banned.    Mental note: make sure the proxy is never banned.
1174	6301802	2012-06-13T14:03:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301802	sipa	laanwj.	Rebased, fixed some sign warnings, and updated a comment as asked by @laanwj.
1174	6510367	2012-06-22T15:24:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6510367	Diapolo	sipa	@sipa I would like to make this available for the GUI, can you specify / tell me what is needed?
1174	6510407	2012-06-22T15:25:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6510407	sipa	Diapolo	Rebased and updated documentation a bit.  @Diapolo: I'll explain over IRC if you like.
1174	6533700	2012-06-24T15:26:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533700	Diapolo	sipa	@sipa: I saw that in the source comments the option ``-notor`` is mentioned. Was this left out of the help message in init.cpp by intention?
1173	5436100	2012-05-01T09:46:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5436100	Diapolo	laanwj	@laanwj That's a thing you should do, but sounds like a very good idea :).
1160	5490156	2012-05-03T15:22:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5490156	Diapolo	retep	@retep You have to rebase to current master, so that only your commit goes into this pull-req.  e.g. rebase origin upstream
1160	5504159	2012-05-04T04:42:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5504159	petertodd	Diapolo	@Diapolo Thanks. I think I fixed it.    Sorry, this is the first time I've used github pull requests before.
1159	5403693	2012-04-29T09:18:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5403693	laanwj	Sipa's	I think it's fine for the JSON call to show all the different times, as people may need them for different purposes.    On the other hand, @Sipa's change is great for the GUI.
1159	7430829	2012-08-01T15:41:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430829	jgarzik	gavinandresen	I'm officially -ENOCARE.  Code appears correct to my minimal scan.   @gavinandresen ?  @gmaxwell based on your comments, it sounds like you ACK this code?
1159	7430829	2012-08-01T15:41:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430829	jgarzik	gmaxwell	I'm officially -ENOCARE.  Code appears correct to my minimal scan.   @gavinandresen ?  @gmaxwell based on your comments, it sounds like you ACK this code?
1154	5404052	2012-04-29T10:30:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5404052	Diapolo	laanwj	@laanwj I need your help here, have you got any ideas? I guess it is related to your commit https://github.com/bitcoin/bitcoin/commit/98e61758744ed34e8b7f59b37edb6d09b33d5517
1154	5407020	2012-04-29T17:54:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5407020	Diapolo	laanwj	I can confirm addresses now stay again selected, but as I said I can't check if CPU usage or lag is fixed, as I didn't observe this with my own builds. @laanwj Shall I let this open until the next RC or will you work-out on further commits that address the problem, so this can be closed?
1154	5808769	2012-05-20T13:10:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5808769	Diapolo	laanwj	#1205 has improved the CPU usage during initial block download, but it feels still a bit hight. @laanwj How is CPU usage on Ubuntu with -debug -logtimestamps?
1154	5963207	2012-05-28T11:01:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5963207	rebroad	laanwj	Low. I don't see how these flags would make any significant difference to the CPU usage.    Sent from my Nokia phone  -----Original Message-----  From: Philip Kaufmann  Sent:  20/05/2012 14:10:49  Subject:  Re: [bitcoin] during block-chain download: high CPU load + GUI lags + addresses don't stay selected and lose focus (0.6.1 RC1) (#1154)    #1205 has improved the CPU usage during initial block download, but it feels still a bit hight. @laanwj How is CPU usage on Ubuntu with -debug -logtimestamps?    ---  Reply to this email directly or view it on GitHub:  https://github.com/bitcoin/bitcoin/issues/1154#issuecomment-5808769
1142	5424501	2012-04-30T18:44:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5424501	jgarzik	sipa	Closing, due to @sipa comments
1140	5287822	2012-04-23T18:20:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5287822	jgarzik	gavinandresen	RE @gavinandresen:    1) Updated and rebased, to fix LimitOrphanTxSize() issue.    2) RE "Test ScriptSigArgsExpected() for error" -- I agree ScriptSigArgsExpected() may not return <0 given current conditions, but there are two advantages to the new code,       a) the code is less fragile, in case those conditions change in the future.  checking for an error that a function is pretty harmless, and trivial in terms of CPU cycles.       b) the compiler's optimizer is guaranteed a non-negative value, enabling certain value-range optimizations.
1136	5268765	2012-04-22T16:04:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268765	jgarzik	sipa	@sipa agreed
1136	5434516	2012-05-01T06:51:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5434516	laanwj	jgarzik	Mind that @jgarzik is talking about multiple commits, not necessarily multiple pull requests. Multiple pull requests are good for completely unrelated things, but don't feel obligated to make a separate pull request for each warning message, for example.
1135	5268762	2012-04-22T16:04:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268762	jgarzik	sipa	@sipa +100
1134	5585476	2012-05-08T20:29:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585476	Diapolo	jgarzik	@jgarzik If an array has no initialization, the values are undefined, no? You are right about the commit message, it's one of my early pull-reqs ^^.
1122	5246633	2012-04-20T15:29:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5246633	laanwj	luke-jr	@luke-jr: a lot of those seem different function names to calls? (but same binary representation)    If you want a fair comparison you should remove the ',' from phexdigit, so that the array will stay 255 bytes. (don't know if you did that already)    Also gcc tends to be quite weird, in that small unrelated changes can seemingly randomly change how certain optimizations are done.    Edit: I'm trying with -O0 and can confirm there are minor changes to the generated code, though, even with just commit 8c8e8c2e:      addrman.o: match    bitcoinrpc.o: base_uint&lt;256u>::SetHex(char const*) differs    checkpoints.o: base_uint&lt;256u>::SetHex(char const*) differs    crypter.o: match    db.o: match    init.o: match    irc.o: match    key.o: match    keystore.o: match    main.o: base_uint&lt;256u>::SetHex(char const*) differs    net.o: match    netbase.o: match    noui.o: match    protocol.o: match    rpcdump.o: match    script.o: difference in CScript::DecodeOP_N(opcodetype) and CScript::EncodeOP_N(int)    util.o: match    version.o: match    wallet.o: match    walletdb.o: match    A change in SetHex isn't so surprising, but in DecodeOP?!?        0000000000000000 <CScript::DecodeOP_N(opcodetype)>:         0: 55                    push   %rbp         1: 48 89 e5              mov    %rsp,%rbp         4: 48 83 ec 20           sub    $0x20,%rsp         8: 89 7d ec              mov    %edi,-0x14(%rbp)         b: 64 48 8b 04 25 28 00  mov    %fs:0x28,%rax        12: 00 00         14: 48 89 45 f8           mov    %rax,-0x8(%rbp)        18: 31 c0                 xor    %eax,%eax        1a: 83 7d ec 00           cmpl   $0x0,-0x14(%rbp)        1e: 75 07                 jne    27 <CScript::DecodeOP_N(opcodetype)+0x27>        20: b8 00 00 00 00        mov    $0x0,%eax        25: eb 2f                 jmp    56 <CScript::DecodeOP_N(opcodetype)+0x56>        27: 8b 45 ec              mov    -0x14(%rbp),%eax        2a: 83 f8 50              cmp    $0x50,%eax        2d: 7e 08                 jle    37 <CScript::DecodeOP_N(opcodetype)+0x37>        2f: 8b 45 ec              mov    -0x14(%rbp),%eax        32: 83 f8 60              cmp    $0x60,%eax        35: 7e 19                 jle    50 <CScript::DecodeOP_N(opcodetype)+0x50>        37: b9 00 00 00 00        mov    $0x0,%ecx      -  3c: ba c0 01 00 00        mov    $0x1c0,%edx      +  3c: ba c2 01 00 00        mov    $0x1c2,%edx        41: be 00 00 00 00        mov    $0x0,%esi        46: bf 00 00 00 00        mov    $0x0,%edi        4b: e8 00 00 00 00        callq  50 <CScript::DecodeOP_N(opcodetype)+0x50>        50: 8b 45 ec              mov    -0x14(%rbp),%eax        53: 83 e8 50              sub    $0x50,%eax        56: 48 8b 55 f8           mov    -0x8(%rbp),%rdx        5a: 64 48 33 14 25 28 00  xor    %fs:0x28,%rdx        61: 00 00         63: 74 05                 je     6a <CScript::DecodeOP_N(opcodetype)+0x6a>        65: e8 00 00 00 00        callq  6a <CScript::DecodeOP_N(opcodetype)+0x6a>        6a: c9                    leaveq         6b: c3                    retq       It's minimal and I have no idea what it means (the change in CScript::EncodeOP_N(int) is similar) .
1122	5247582	2012-04-20T16:07:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5247582	dlitz	luke-jr	@luke-jr  That's weird.  On my machine, I only see these differences for script.o: http://paste.pocoo.org/show/584704/
1120	5188074	2012-04-17T22:58:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5188074	rebroad	sipa,	@sipa, yes, stock 0.6.0.6-beta, running on Windows 7, using tor.
1120	17774746	2013-05-12T08:46:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17774746	sipa	rebroad	@rebroad If a node is slow in responding, you need to switch to another peer for downloading. If a node is really slow, you can choose to disconnect him. If a node doesn't respond at all, he'll timeout after one minute anyway. But without logic to at least prevent unintentional double requests, disconnecting a peer simply because they do what you asked seems pretty much cutting in your own flesh.
1119	5219234	2012-04-19T11:12:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5219234	sipa	laanwj	@laanwj I'm not so sure - I believe many corruptions are caused by people shutting down their computers before lsn_reset has completed, or otherwise killing it because of slow shutdown. Not calling lsn_reset is perfectly safe, only you can't move blkindex.dat to a new environment afterwards. If you do so anyway, if will fail (deterministically) at startup.    EDIT: right, your comment was about users reacting the same way. Let's see if I can change the tooltip.
1119	5290451	2012-04-23T20:08:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5290451	sipa	jgarzik	Right, not what we want to do by ourself.    @jgarzik and @gmaxwell: what worries do you still have w.r.t. this pullreq?
1119	5290451	2012-04-23T20:08:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5290451	sipa	gmaxwell	Right, not what we want to do by ourself.    @jgarzik and @gmaxwell: what worries do you still have w.r.t. this pullreq?
1119	5314001	2012-04-24T19:04:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5314001	sipa	laanwj	@laanwj If i'd change the checkbox to be "detach block and address databases from environment (slower shutdown)", and make it default off. Would that sound less alarming?
1110	21514420	2013-07-24T20:39:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21514420	Diapolo	andrasfuchs	If this is fixed @andrasfuchs can you please close the issue?
1109	5143467	2012-04-15T23:05:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143467	sipa	jgarzik	Seems @jgarzik was doing something similar. I've rebased his changes on top of mine now.
1107	5414207	2012-04-30T09:30:04Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5414207	Diapolo	sipa	Your version string indicates an own build and not the last 0.6.1 RC1, right?  @sipa How could a corrupt blk000x.dat be detected, to take care of this condition?
1105	5143516	2012-04-15T23:12:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143516	sipa	gavinandresen,	Sorry @gavinandresen, see #1108 and #1109...
1103	5140037	2012-04-15T15:44:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140037	jgarzik	laanwj	RE @laanwj "And there's no long registration function that has to be kept up to date when new commands added, just a simple one"    Well, the long registration function is replaced with a long table.  As the saying goes, "six of one, half-dozen of the other"  In both this pull request and #1102, there is one (1) place that contains a master list of RPC commands.  In this pull request it is vRPCCommands[], and in #1102 it is RegisterRPCCommands().    I do lean towards this pull request too, because it is smaller and more compact.  However, the continued use of 'rpcfn_type' would probably be ugly to C++ purists :)
1101	5265649	2012-04-22T05:06:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5265649	jgarzik	gavinandresen	Rebased.  @gavinandresen do you still get a warning?  If yes, can you paste the code line as well as the warning, just for double-checking?
1101	5297675	2012-04-24T05:10:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5297675	jgarzik	gavinandresen	@gavinandresen fixed.  Merge error added some useless code.
1092	5148188	2012-04-16T08:51:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5148188	laanwj	luke-jr	@luke-jr can you test whether this really fixes your issue?
1090	5525385	2012-05-05T08:23:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525385	laanwj	luke-jr's	Rebased, and added a useful heuristic to only do this for *long* tooltips, where "long" is defined as longer than a certain length in characters. This fixes @luke-jr's issue.
1089	5118579	2012-04-13T16:40:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118579	Diapolo	laanwj	@laanwj 1 more thing I observed while playing around in Qt Linguist, we should set the base language of our en .ts file to only english (currently set to country USA). This can be done under Edit -> Translation File Settings...:    http://i42.tinypic.com/fp5irm.jpg
1088	5108639	2012-04-13T05:19:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5108639	laanwj	diapolo	According to @diapolo transifex has problems with \n in messages, they tend to get lost in translations.     Also, as I said before, I think it's crazy that we (and translators) have to estimate the width at which the text gets rendered, the width of the users screen, and manually break the text. This is not 1980.    Are you sure Qt has no functionality to automatically wordwrap tooltips?
1088	5109362	2012-04-13T06:52:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5109362	cardpuncher	Diapolo	> According to @Diapolo transifex has problems with \n in messages, they tend to get lost in translations.    I had remarked this with the content of the About Bitcoin-Qt window but it was apparently just a rendering issue of translated strings on Transifex's side. The file was formatted correctly in Qt Linguist and in Bitcoin, too. Besides they seem to have fixed that glitch now, but I'm not sure so don't take it as granted.    > Are you sure Qt has no functionality to automatically wordwrap tooltips?    I'm just a translator, I don't know much about coding but apparently if Qt considers the content of the tooltip as plain text it won't care about its length. However, if it thinks it deals with rich text it will wrap the content. Adding a < br> tag or < font color=black>lorem ipsum< /font> does the trick although it's not very elegant.    So you may remove the 3 "\n" from the patch until you decide how you want to manage this tooltip issue.
1085	15701399	2013-04-01T01:36:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15701399	gmaxwell	rebroad	@rebroad because that would leave the wallet in an undertested 'inconsistent' state. (e.g. you may find out transactions from the network spending prior transactions of yours which you don't know about)
1082	5099249	2012-04-12T19:55:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5099249	dooglus	gavinandresen	@gavinandresen Is that in any way relevant to this bug?    Resetting testnet wouldn't fix this bug.    The fix would be changing the line to the following to do away with the unsigned subtraction:        if (pblock->nTime > pindexLast->nTime + nTargetSpacing*2)
1082	5100614	2012-04-12T21:03:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5100614	Diapolo	sirk390	@sirk390 Together with a testnet reset this should not be a problem, right?
1081	5153975	2012-04-16T14:54:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5153975	jgarzik	luke-jr	@luke-jr yes, that will come in a separate cover
1078	5097258	2012-04-12T18:22:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5097258	Diapolo	laanwj	@laanwj Done!
1074	5074778	2012-04-11T17:58:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5074778	laanwj	thebluematt	I somehow don't think we added this warning just for fun:        QMAKE_LFLAGS += -fstack-protector      # do not enable this on windows, as it will result in a non-working executable!    I now remember that @thebluematt added this after the gitian-produced executable frustratingly didn't work. Might be that the underlying issue is solved but we should be really careful.
1074	6874013	2012-07-10T12:27:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6874013	Diapolo	laanwj	@laanwj Even passing -fstack-protector-all does not set the ASLR enabled flag in the resulting executable (checked via ProcessExplorer - Sysinternals tool).
1074	7004445	2012-07-16T12:17:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7004445	Diapolo	luke-jr	@luke-jr I know you have that test-next project, which uses the official build-process ... could you try to enable the stack-protection on Windows with ``-fstack-protector-all``!? I will be glad to test it. This needs to be looked at! We can be happy there are currently no known attacks on the client that use a buffer-overflow, but this will for sure help mitigate, if that happens in the future.  Do you need a pull?
1074	7012479	2012-07-16T17:16:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7012479	Diapolo	luke-jr	@luke-jr You are free to test: https://github.com/Diapolo/bitcoin/tree/stack-protector
1074	7075551	2012-07-18T17:22:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7075551	Diapolo	TheBlueMatt	@TheBlueMatt Could you give Jenkins a try on this? I would like to test a Gitian or static-compiled bitcoin-qt.exe to verify if it's usable now :).
1072	5040021	2012-04-10T06:43:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5040021	laanwj	jgarzik	I agree with @jgarzik on that this is "cute c++ abuse" by boost. Then again, the standard library << and >> for stream operators?!? is not much better.  And just like those, `/` has no standard use for strings.    This is an upstream issue way outside the scope of bitcoin. We cannot decide the interfaces of the upstream libraries we use. It's a good idea to just use the functionality IMO as it provides a platform-independent way of building paths.
1071	5111992	2012-04-13T10:16:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5111992	laanwj	dooglus,	Arguably it is a problem with the theme or Qt and not with Bitcoin if text on the progress bar is unreadable, it is a common enough use-case.    Orange kind of fits with the rest of the icons in the status bar, and the color of the bitcoin icon. It's not the color that is the problem, it is that this fix causes other (otherwise well-behaved themes) to break.    Well at least I assume so. @dooglus, what happens if you completely remove the setStyleSheet line?
1071	5112215	2012-04-13T10:37:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5112215	laanwj	sipa	That's fine. I propose that we handle the exceptions on a case-by-case basis. @sipa can you comment what environments exactly have the readability issue with the default style sheet?    No option for this, please. That'd be lazy and shoveling the trouble on the user.    See you in a week!
1066	5111620	2012-04-13T09:46:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5111620	Diapolo	laanwj	Allright, 2 options for me ... leave this as it is or rework to change no var names and only add the small changes I did code-wise. First vore wins, let's go :D.    Edit: @laanwj Thanks, I'm more the GUI lover than console user and it's fun to work together :).
1064	6679566	2012-06-29T22:14:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6679566	Diapolo	cardpuncher	@cardpuncher Is your graphics a simple resize of the current one?
1064	6683464	2012-06-30T07:26:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6683464	cardpuncher	cardpuncher	On 30/06/12 00:14, Philip Kaufmann wrote: > @cardpuncher Is your graphics a simple resize of the current one?  Yes, the image results from a quick resizing of the current JPEG with GIMP.   --  One man alone can be pretty dumb sometimes, but for real bona fide stupidity, there ain't nothin' can beat teamwork.--Edward Abbey
1064	15832405	2013-04-03T11:54:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15832405	Diapolo	laanwj	@laanwj I never got line-wrapping to work in the splash-screen + I would like to keep that screen (after some thoughts about it, I think it's a nice thing - which could just be improved). Perhaps we could add an abort button somehwere, like Office 2010 does in it's splash-screen?
1064	17570769	2013-05-07T21:08:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570769	Diapolo	laanwj	@laanwj Can be closed, as our new splashscreen is bigger :).
1063	5111670	2012-04-13T09:50:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5111670	Diapolo	laanwj	@laanwj I think it could also be done by replacing \n with a HTML-br as this is what's done for the lock symbol in the client, if the wallet is encrypted and / or unlocked ... that tooltip seems to be rich text already, right? I think there are only 2-4 places at all, where HTML-tags are used directly in the strings. Your idea seems cleaner, so we would only have to remove the current br-Tags (the ones for bold text should remain).
1063	6679205	2012-06-29T21:55:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6679205	Diapolo	cardpuncher	@cardpuncher Can you upgrade, that's a rather old version ... we currently compile Bitcoin-Qt with 4.7.4 and available is 4.8.2.
1061	8176234	2012-08-30T22:03:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8176234	Diapolo	cardpuncher	@cardpuncher Anything to add, if not can you close this?
1060	5022475	2012-04-09T08:54:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5022475	laanwj	sje397	@sje397 sent pull request #855 to implement this. It needs rebasing and testing on the various OSes still though.
1059	8763260	2012-09-21T12:40:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763260	Diapolo	laanwj	@laanwj You can close this one, it was fixed long ago.
1054	5007416	2012-04-07T11:02:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5007416	sipa	jgarzik	@jgarzik     1) genbuild.sh depends on being run from the project's root directory, which may include a commit id    2) no idea what you mean
1054	5008598	2012-04-07T14:35:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008598	sipa	laanwj	@laanwj yes, indeed; version.cpp is built every time, and linking is done every time. These are small, and won't take much time to build. However, preventing such a rebuild every time would be nice indeed. No idea how to pull that off via a makefile, though.
1054	5008902	2012-04-07T15:14:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008902	sipa	laanwj's	New version, mostly following @laanwj's idea, but generalized genbuild.sh a bit.
1054	5011072	2012-04-07T19:43:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5011072	sipa	makomk	Ok, fairly large rewrite: by using the export-subst git attribute in a somewhat hacky way, the commit id is now included statically in version.cpp in exported source trees (github tar/zip bundles, output of the git-archive command, gitian build src/ directories, ...). contrib/build.sh is only used for running a git-describe where possible anyway, and does not require cd'ing to a root anymore.    Thanks to @makomk and @luke-jr for the idea.
1054	5011072	2012-04-07T19:43:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5011072	sipa	luke-jr	Ok, fairly large rewrite: by using the export-subst git attribute in a somewhat hacky way, the commit id is now included statically in version.cpp in exported source trees (github tar/zip bundles, output of the git-archive command, gitian build src/ directories, ...). contrib/build.sh is only used for running a git-describe where possible anyway, and does not require cd'ing to a root anymore.    Thanks to @makomk and @luke-jr for the idea.
1054	5012158	2012-04-07T23:02:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5012158	sipa	luke-jr	@luke-jr now it does.
1054	5053406	2012-04-10T18:53:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053406	sipa	jgarzik	@jgarzik reason is that we want to prevent build.h being updated unnecessarily, as that would cause a rebuild of version.cpp and linking every time.
1053	5007830	2012-04-07T12:20:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5007830	rebroad	luke-jr	@luke-jr they sent the RSTs to both sides of the connection, so this would only work if the other side had this rule too, which is unlikely... class action lawsuit sounds a good idea, but I'd rather not admin it..!
1053	5575099	2012-05-08T13:53:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5575099	rebroad	gavinandresen	Hi @gavinandresen , do you consider the ability to resume downloads to be useful? e.g. "wget -c"? Given that it seems to be fairly standard on the internet these days, is there a good reason that bitcoin should *not* support resume-able block downloads? Could at least there be an option feature that can be supported, such that if I create a fork that does support this, that there can be a way to identify other peers which support it, without adding to the already unnecessary traffic that this proposed patch intends to reduce? I'd like to explore this, and would be happy for it not to enter the master branch (even though I think it would be an overall advantage if it eventually did).
1053	5575979	2012-05-08T14:31:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5575979	rebroad	sipa,	@sipa, I've already modified the software to re-issue getblocks, but haven't gotten around to re-basing it and submitting a pull request for it. My internet connection disconnects connections at around the 300kB mark, so a 1MB block is often a problem unless download it via tor. I won't be the only person world-wide with such a connection to the bitcoin network but who also wants to run a full-node. I think bitcoin should support such users, and have yet to hear an argument why they should be excluded. Are there any disadvantages to including the ability to resume block downloads, for example?
1053	5586059	2012-05-08T20:53:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586059	rebroad	gavinandresen	@gavinandresen I agree with the importance of keeping it simple. I was wondering if perhaps then the ability to respond to to peers which request partial blocks might be added, (in a similar way to header functionality being added), but that wasn't used by default. This would allow it to be tested by a minority of nodes who use this feature, without impacting on the majority of nodes which do not use the feature. Would this be something you might consider as a way forward?    I'd be willing to contribute to the coding of this, but would rather get an amber light first before putting too much effort into it...
1053	5588876	2012-05-08T23:00:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5588876	rebroad	sipa	@sipa - what is a decent user experience? With the changes I've made to my fork, I'm now downloading the blockchain much faster, but it's very inefficient in terms of bandwidth due to often downloading the same block from many peers, and often the connection breaking before the block completes. My proposals would fix both these issues. I'm regularly getting a memory pool of 400 or so between block updates, so I think my node is contributing to the network fine for transactions so far, just not so well for blocks until these changes can be implemented. (By the way, there is still a bug in my fork where it loses track of "block providers" and doesn't getblocks as early as it should - stil to fix).
1049	4993784	2012-04-06T11:11:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4993784	sipa	laanwj	@laanwj sounds like a good idea
1049	5709439	2012-05-15T06:32:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5709439	Diapolo	laanwj	@laanwj This got much better, but the work-around you use to set a width is really ugly ^^. I tried to search the web, but found no good solution to this. I'll give it another try and if I find nothing I'll close this one.
1046	5000625	2012-04-06T19:04:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5000625	laanwj	luke-jr's	I've updated the code to take @luke-jr's suggestions into account
1028	17570960	2013-05-07T21:11:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570960	Diapolo	laanwj	@laanwj IMHO we should close this now, as splashscreen is full of life :).
1028	17588014	2013-05-08T06:00:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17588014	laanwj	gmaxwell	@gmaxwell: How is that in any way GUI specific? If you start bitcoind you have the same delay before you can use the interface.  And the splash screen doesnt monopolize at all; it doesn't have "stay on top" enabled, you can do something else (just not with bitcoin) while it loads.
1028	17588183	2013-05-08T06:06:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17588183	gmaxwell	laanwj	@laanwj Must be some crazy interaction with my windowmanger it stays on top, pinned to all workspaces and is immovable! I'd commented on it before and somehow had the impression that this was expected (and I boggled that anyone found it tolerable but I don't use the GUI except for testing)
1028	17589156	2013-05-08T06:38:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589156	jonasschnelli	sipa.	i agree with @sipa. Splashscreens are somethings from the last century. A splashscreen always reminds me to a bad startup/thread design. :)  Maybe we could try getting the main-window earlier and show the block/db init there somewhere. But I would also say it's not trivial because some features in the main-window must be disabled during the init-process.  @laanwj having the big-picture: how complicate would it be? Without knowing to much from the core, is it worth to have a look at it?
1028	17589156	2013-05-08T06:38:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589156	jonasschnelli	laanwj	i agree with @sipa. Splashscreens are somethings from the last century. A splashscreen always reminds me to a bad startup/thread design. :)  Maybe we could try getting the main-window earlier and show the block/db init there somewhere. But I would also say it's not trivial because some features in the main-window must be disabled during the init-process.  @laanwj having the big-picture: how complicate would it be? Without knowing to much from the core, is it worth to have a look at it?
1028	17611163	2013-05-08T14:56:16Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17611163	laanwj	graingert	The only advantage would be that it could be incremental. Ie, information about the wallet could be displayed as soon as the wallet is initialized, information about the block chain could be displayed as soon as the block chain is initialized (but I suppose it needs information about the blockchain to determine which transactions are confirmed and/or orphaned in the wallet, so I'm not even sure how useful this is).    The user would be unable to do anything before the whole thing is loaded; even changing (non-UI) options is a bad idea while the initialization is in progress.     All in all, it wouldn't be a big win. @graingert 's suggestion would accomplish basically the same :) I agree with speeding up the initialization process is the best idea and this is also where most progress has been made over the last versions.
1028	17611409	2013-05-08T15:00:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17611409	jonasschnelli	graingert	one plus could be the thing that @graingert mentioned: "read their address book".
1028	17614279	2013-05-08T15:43:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17614279	gmaxwell	laanwj	@laanwj Would making the splash screen go away when you click on it be bad?
1028	17614861	2013-05-08T15:52:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17614861	sipa	laanwj	@laanwj @gmaxwell I'd like that as well (also xmonad user)...
1028	17614861	2013-05-08T15:52:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17614861	sipa	gmaxwell	@laanwj @gmaxwell I'd like that as well (also xmonad user)...
1028	26982103	2013-10-24T10:40:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26982103	laanwj	Squeezle42	@Squeezle42 use the -nosplash option    I'm closing this issue as we don't really want to replace the splash screen with a visible but dysfunctional main window.
1025	4879609	2012-04-02T14:35:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4879609	Diapolo	sipa	@sipa The style/design of the progressbar comes from the OS and can only be changed by some form of Qt stylesheets afaik (see: http://harmattan-dev.nokia.com/docs/library/html/qt4/qprogressbar.html#details).    2 options, put the text right to the progressbar or search the web for howto edit the style of the bar (which is a hard work, because of the different OS GUIs and color schemes :-/).
1025	4882562	2012-04-02T16:42:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4882562	Diapolo	sipa.	Okay, I found a way to apply stylesheets to the bar and it can be very well customized ... will add a commit so you could try it out @sipa.
1025	4895352	2012-04-03T06:31:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4895352	Diapolo	laanwj	@laanwj Could you take a short look over the last commit. If you are fine with that, I will rebase!
1023	5953846	2012-05-27T14:27:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5953846	Diapolo	luke-jr!	Dunno how that happened, I normally don't include rebase-conflicts ;), should work again. Sorry @luke-jr!
1021	4875044	2012-04-02T09:31:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875044	sipa	Diapolo	@Diapolo: yes you can use it with multiple NICs; it's even in a separate commit named "Support for multiple local addresses".    IPv6 external address detection works the same way as IPv4, though IRC and whatismyip.com will obviously only tell you about IPv4 addresses.
1021	4875624	2012-04-02T10:09:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875624	Diapolo	sipa.	Thanks for the infos @sipa. How would I query or list all interfaces that are used for connections, is this possible with a single GetLocal() call somehow?
1021	5651038	2012-05-11T13:53:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5651038	sipa	luke-jr	@luke-jr how do you mean?
1017	4873472	2012-04-02T07:22:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873472	laanwj	coderrr.	That's a good point. My idea was that it is best to keep coin control development coordinated. Let's wait for @coderrr.
1017	4873584	2012-04-02T07:32:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873584	dooglus	laanwj	It really doesn't matter to me.  @laanwj ?
1012	5084030	2012-04-12T03:45:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5084030	dooglus	rebroad	@rebroad Do you have the blockchain downloaded?    I think it's known that shutting down can take a long time if you've recently been syncing the blockchain.    The bug I was reporting here is that the shutdown time has doubled even if the blockchain has been synced for months.
1012	5455236	2012-05-02T07:02:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5455236	Diapolo	sipa	@sipa Is there anything more planned or is 2s considered fine (which I think is okay).
1010	4833837	2012-03-29T23:48:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4833837	sipa	jgarzik	@jgarzik it was chosen after some benchmarks that counted the number of transactions between flushes. Flushing every 200000 transactions causes max 120 MiB log files, which seemed reasonable as long as it did not decrease block sync efficiency.
1004	4793503	2012-03-28T23:01:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4793503	dooglus	sipa	@sipa: I tested it a lot before making the pull request, yes.  It seems to work well in db5.1.25.  I don't have db4.x.    @gavinandresen: I think the logs are so you can do database recovery in the event of a crash.    It seems that in the event of a crash we usually manage to clean up the logs before exiting however :)    I'll update my patch so it's not a command line option.
1004	4793503	2012-03-28T23:01:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4793503	dooglus	gavinandresen	@sipa: I tested it a lot before making the pull request, yes.  It seems to work well in db5.1.25.  I don't have db4.x.    @gavinandresen: I think the logs are so you can do database recovery in the event of a crash.    It seems that in the event of a crash we usually manage to clean up the logs before exiting however :)    I'll update my patch so it's not a command line option.
1003	4827209	2012-03-29T18:00:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4827209	dooglus	gavinandresen	@gavinandresen I've updated this pull request with the change, but can't reopen the issue.
1002	5244846	2012-04-20T14:14:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5244846	sipa	TheBlueMatt	What does @TheBlueMatt think about this?
1002	5262083	2012-04-21T17:25:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5262083	Diapolo	TheBlueMatt	@TheBlueMatt  I'll look into your suggestions, even small glitches can be changed / fixed :).
1002	5407066	2012-04-29T17:58:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5407066	Diapolo	TheBlueMatt	Rebased once more, merged the 3 commits into a single one and re-worked a few days ago to include one of @TheBlueMatt suggestions.
1002	5809058	2012-05-20T13:57:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5809058	TheBlueMatt	Diapolo	I agree with @Diapolo here, we have a huge list of pulls piling up (dont we always...) and I see little reason to not pull this because URIs are supported, just not on Windows or Mac.
997	5100551	2012-04-12T21:00:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5100551	Diapolo	runeksvendsen.	There were quite big changes in the database parts of the code during the RC releases. This in combination with a hard chrash or corrupted blockchain file could have caused this. If this is working again, I guess you can close this @runeksvendsen.
997	5947508	2012-05-26T15:14:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5947508	Diapolo	molecular	@molecular You will have to let the client re-download the chain or use -loadblock command to use an external file.
989	7430748	2012-08-01T15:38:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430748	jgarzik	gavinandresen	Well, there is clearly a user interest, if somebody paid for it, but it seems like this is subsumed by @gavinandresen 's recent miner/fee proposals.  No apparent dev review interest.  I looked over the patch, and technically appears to be correct.  I don't object to it, but I think we need a gavin ack/nak here, and he may nak it given other work out there.
989	7437363	2012-08-01T19:29:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7437363	luke-jr	gavinandresen	I agree this seems redundant given @gavinandresen 's recent changes.
983	4681893	2012-03-25T14:27:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681893	laanwj	sipa	@sipa yes, as in  "the title says it all" :)
980	4669552	2012-03-23T23:02:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669552	Diapolo	TheBlueMatt	@TheBlueMatt I will have to try this ... never used testnet before (does this work in the default and same data-dir?). But I have an idea if it causes problems in the current state. Perhaps I could add an "testnet" string to the message_queue name, which is now "BitcoinURL". Is there a utility function to query where I mine?
980	4670034	2012-03-23T23:45:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4670034	Diapolo	TheBlueMatt	@TheBlueMatt I will do some tests on this tomorrow. I don't even know if there are issues with your mentioned case at all, but thanks for your input :)!
980	4672501	2012-03-24T09:13:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672501	Diapolo	sipa	@sipa What do you mean by coding style errors, would be nice if you can point me to them, so I can fix it. I only added so many commits, to get some kind of history, will rebase.
980	4684387	2012-03-25T20:28:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4684387	Diapolo	TheBlueMatt	@TheBlueMatt I compiled Bitcoin-Qt with boost 1.49 and that did NOT fix this bug. Is your commit a backport from boost > 1.47 to 1.47?
980	4696747	2012-03-26T15:38:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4696747	Diapolo	gavinandresen	The URI feature is little known, so perhaps the problem with URI handling in general was not observed, since no one ever used it on Windows (i.e. because currently there are very few links out in the internet).    @gavinandresen I'm fine with 0.7 ... you would only be the bad guy, if you said that code sucks all over the place, go away ;) ... but you didn't do that.
977	4680761	2012-03-25T10:27:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4680761	laanwj	luke-jr	@luke-jr should probably update the version string
977	4703123	2012-03-26T20:17:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4703123	Diapolo	TheBlueMatt	@TheBlueMatt For the new GUI, is it possible to make the last bar in the "connection-quality" symbol green ... I did never understand, why it's more like yellow (and am no graphics artist ^^).
976	4645469	2012-03-22T18:42:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4645469	Diapolo	luke-jr	@luke-jr: What you mean by stock release builds?    @gavinandresen Is there a place to download the pre-compiled boost libs which were used in RC2? I would like to make a file-compare. Another thing that is weird for me ... why is 1_43 in the bitcoin-qt.pro and why does it compile on Gitian without that VariantClear error?    I'll try to "crash" my PC by simply shutting it of, while I have a running instance of my version ... :-/.    Which MinGW version is used in Gitian?
976	4645469	2012-03-22T18:42:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4645469	Diapolo	gavinandresen	@luke-jr: What you mean by stock release builds?    @gavinandresen Is there a place to download the pre-compiled boost libs which were used in RC2? I would like to make a file-compare. Another thing that is weird for me ... why is 1_43 in the bitcoin-qt.pro and why does it compile on Gitian without that VariantClear error?    I'll try to "crash" my PC by simply shutting it of, while I have a running instance of my version ... :-/.    Which MinGW version is used in Gitian?
973	4632709	2012-03-22T04:55:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632709	sipa	TheBlueMatt	@TheBlueMatt addrman has significantly less address messages (it adds groups of incoming addrs at once).
972	4639165	2012-03-22T14:26:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4639165	sipa	gmaxwell	@gmaxwell What do you mean, only yell if it fails any of the harder tests? Failing the easier tests is probably much worse.
971	4673857	2012-03-24T14:14:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4673857	Diapolo	laanwj,	I'm with @laanwj, as performance is really a not existing problem with 4 more make_preferred() calls out of any thread and the main-loop.
964	4608240	2012-03-20T23:55:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608240	sipa	jgarzik	@jgarzik:    Time to load 133k blocks:    NF: 30.4  LC: 8.6  LC+NF: 5.1  LC+NF+NS: 5.0    LC = large cache (100 MiB cache, 100 MiB log, 10 MiB log buffer)  NF = no flushing every 500 blocks  NS = open database env with DB_TX_WRITE_NOSYNC    The larger db cache size has the largest impact.
962	4602889	2012-03-20T18:57:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602889	Diapolo	luke-jr	@luke-jr I see more, if this commit is active ... does "active connections to Bitcoin network" sum inbound and outbound as that could explain the numbers, because there are more outbound connections active.
962	4608286	2012-03-20T23:57:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608286	gruez	rebroad	@rebroad storage and network connections are two very different things. as more peers join the network, it actually becomes easier to broadcast your connection, not harder.
962	4612651	2012-03-21T08:25:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612651	rebroad	gruez	@gruez Ok, so if the network became smaller then nodes might need more than 8 connections?    With my ISP I'm not allowed incoming connections. Is the max of 8 always going to be sufficient for nodes that will never be able to receive incoming connections?
959	4612156	2012-03-21T07:33:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612156	rebroad	luke-jr	@luke-jr - I'll assume you mean every time. Have you compared with the version my changes were based on? What does gdb show? My changes are so few, and especially if you're not exiting during the load, I struggle to believe it would be due to this change.
959	4612252	2012-03-21T07:44:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612252	rebroad	laanwj	@laanwj I initially coded it to return false but changed it to true as 1) it made the code smaller, 2) it's not failing, 3) would you normally expect a return code of false from any program that exited only because the user requested it?    In answer to 3, the answer is no, and so I believe and function should follow that logic.     Returning true doesn't go against and C standards that I know of either.
959	4612480	2012-03-21T08:03:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612480	rebroad	luke-jr	@luke-jr What OS are you using?    P.S. @luke-jr  are you sure you're not some Manchurian candidate or perhaps a cylon without knowing it?!
959	4612480	2012-03-21T08:03:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612480	rebroad	luke-jr	@luke-jr What OS are you using?    P.S. @luke-jr  are you sure you're not some Manchurian candidate or perhaps a cylon without knowing it?!
959	4612535	2012-03-21T08:12:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612535	rebroad	laanwj	@laanwj No. But if LoadBlockIndex returns false then AppInit2 will display an error without additional code.
959	4612540	2012-03-21T08:13:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612540	rebroad	luke-jr	@luke-jr Ok, so how would you code it to allow it to be killed during the block index load?
959	4625693	2012-03-21T19:52:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625693	rebroad	laanwj	@laanwj - ah, so it does. Thanks, I will change this. I'm currently debugging to find the cause of the SIGSEGV @luke-jr mentioned.
959	4625693	2012-03-21T19:52:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625693	rebroad	luke-jr	@laanwj - ah, so it does. Thanks, I will change this. I'm currently debugging to find the cause of the SIGSEGV @luke-jr mentioned.
959	4629590	2012-03-21T23:31:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4629590	rebroad	luke-jr.	ok. There was a bug, which I've fixed with the fixup. This was also the cause of the SEGV initially reported by @luke-jr. Thanks Luke!
959	4704027	2012-03-26T20:55:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4704027	rebroad	luke-jr,	Hi @luke-jr, would you be willing to ACK this please to confirm that the issue you found has been resolved please?
956	4603785	2012-03-20T19:41:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4603785	sipa	Diapolo	@Diapolo is it required to delete the database logs as well? that seems unrelated to the boost_interprocess problem.
956	4610188	2012-03-21T03:07:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4610188	finway-china	Diapolo	@Diapolo  , your solution works!    @sipa
956	4610188	2012-03-21T03:07:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4610188	finway-china	sipa	@Diapolo  , your solution works!    @sipa
956	4611600	2012-03-21T06:23:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611600	Diapolo	sipa	@sipa As this is caused by the boost libs, there should be a possibility to take care of that situation via an error check in the BC client code, right?
953	4569926	2012-03-19T09:30:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4569926	Diapolo	passy	Thanks @passy I fixed that one via another commit (via the same procedure as described above).
950	4576885	2012-03-19T16:19:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4576885	sipa	TheBlueMatt	(edited)    @TheBlueMatt: oh yes, indeed, it needs a min_version update
946	4599409	2012-03-20T16:31:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4599409	TheBlueMatt	laanjw	ACK if @laanjw says it doesnt break anything when built on Win32.
946	4629356	2012-03-21T23:14:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4629356	luke-jr	laanwj,	Found a way to do a prefix. @laanwj, please test on native Windows. I'm doing a cross-gitian build now.
946	4630314	2012-03-22T00:26:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4630314	TheBlueMatt	luke-jr	ACK, the build @luke-jr gave me to test worked fine.
946	4642440	2012-03-22T16:40:08Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4642440	gavinandresen	laanwj	Rebase into one commit? And a final ACK from @laanwj ?
936	4496980	2012-03-14T12:21:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4496980	gavinandresen	forrestv	What does @forrestv think?
936	6243007	2012-06-11T12:25:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6243007	jgarzik	sipa	@sipa can you pipe that through "fmt -72" or similar?  Even 'raw' requires a horizontal scroll bar, which is unreadable in these modern times...
936	6243140	2012-06-11T12:33:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6243140	sipa	jgarzik	@jgarzik done
936	6244868	2012-06-11T13:55:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244868	luke-jr	sipa	@sipa Hope this addresses everything:  1) Servers are not required to have access to the transaction database, and miners may wish to include transactions that have not been relayed on the main network. 2) The "submit/hash" mutation allows miners to replace actual transaction data with a reference, for servers which support this. The pull-request here does not support this functionality, since it is unlikely to be needed in bitcoind (solo miners and downstream pool servers are probably always going to be local and without bandwidth concerns); there are also mutations which servers can opt to use to allow miners to omit the transaction list entirely when it hasn't been modified, effectively reducing the bandwidth requirements to the same as getwork 3) Your suggestion for a list of required coinbase outputs would involve specifying a format for that list, and actually increases the complexity since the same thing is expressed by what is effectively a boolean right now. I see the benefit of doing it that way, to allow miners to claim fees of transactions they add themselves - but what if a pool doesn't want to allow that? 4) With restricted coinbase input, it is possible for servers to implement BIP 22 in the same way as they currently use getwork, but allowing miners to still audit the block they are working on. 5) Clients are not required to support noncerange limiting, so the added complexity is itself optional 6) "time/\*" can usually in practice be ignored, since it is implied if the min/max are provided; it is listed so it is clear the time can be changed, and so servers might have a defined way to express "change the time to anything you want" - it's specified explicitly by bitcoind since there is no practical upper limit to the time miners can send it. 7) The use case for adding transactions is... so miners can add other transactions. Kinda half the point of decentralized mining IMO. :p 8) I don't mind removing "transactions/remove", but I'd rather just note it as being always implied to express that it can be done explicitly 9) "prevblock" mutation is for the scenario where the miner has validated a new block before the server 10) the "required" key on transaction objects is necessary for the flexibility of pools negotiating contracts for transaction acceptance, but "txrequired" allows saving a lot of bandwidth; I agree the mutation should be implicit given these two other methods 11) "mintime" and "maxtime" are needed in addition to their "\*off" versions, for servers such as bitcoind which only care about the network rules; in this case, "mintime" is a fixed time, not related to the current time at all. 12) "target" is needed to allow shares of varying sizes; pools *do* make use of this 13) "workid" is needed to allow the server to identify which work issued the block is being submitted against, so it can properly validate the share 14) Transaction objects must include sigop count, as there is no way for dumb miners to calculate it thanks to BIP16
936	6246562	2012-06-11T14:56:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6246562	gavinandresen	luke-jr	@luke-jr you didn't respond to the big-picture design question about whether you agree that BIP22 is over-complicated.  I agree with @sipa, I think there are way too many optional features, different ways of doing things, etc.
936	6246562	2012-06-11T14:56:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6246562	gavinandresen	sipa,	@luke-jr you didn't respond to the big-picture design question about whether you agree that BIP22 is over-complicated.  I agree with @sipa, I think there are way too many optional features, different ways of doing things, etc.
936	6247705	2012-06-11T15:38:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6247705	luke-jr	gavinandresen	@gavinandresen "Overcomplicated" is relative based on what it needs to do. I think for the most part (there are exceptions, which I hope to simplify based on sipa's suggestions) BIP22 as it is can't get *too* much simpler with its given requirements.
936	6249907	2012-06-11T16:59:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6249907	gavinandresen	sipa	I guess @sipa and I think maybe you're throwing in too many requirements.  I say start simple, and if there is demand for a feature add it later. I'm OK with planning ahead with a design that allows stuff like adding/removing transactions, but that's a feature I've never heard "dumb miners" say they want.  Also: being explicit about the requirements in the BIP might help.  I see only a very vague description of them in the 'motivation' section.
936	6256660	2012-06-11T21:32:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6256660	luke-jr	sipa	Updated BIP22 based on @sipa and @gavinandresen 's suggestions.  Unless there are problems with the subset of BIP22 supported by bitcoind (in this pull request), however, let's move BIP22 discussion back to the mailing list. I don't think it makes sense to hold up this pullrequest due to unrelated concerns.
936	6256660	2012-06-11T21:32:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6256660	luke-jr	gavinandresen	Updated BIP22 based on @sipa and @gavinandresen 's suggestions.  Unless there are problems with the subset of BIP22 supported by bitcoind (in this pull request), however, let's move BIP22 discussion back to the mailing list. I don't think it makes sense to hold up this pullrequest due to unrelated concerns.
936	6331784	2012-06-14T15:22:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6331784	sipa	luke-jr	@luke-jr What I was talking about in my latest comment here, is the availability of {"tx" : "hex"}, as {"tx" : "obj"} provides a strict superset of that. It would indeed mean breaking backward compatibility, indeed.
936	7461493	2012-08-02T17:02:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7461493	luke-jr	gavinandresen	Will do as soon as we have a final on the new name. I emailed @gavinandresen so hopefully he'll provide input next time he's got email access.
936	7463196	2012-08-02T18:02:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7463196	gavinandresen	gavinandresen	Encore on the name.    --  Gavin Andresen      On Aug 2, 2012, at 11:02 AM, Luke-Jr<reply@reply.github.com> wrote:    > Will do as soon as we have a final on the new name. I emailed @gavinandresen so hopefully he'll provide input next time he's got email access.  >   > ---  > Reply to this email directly or view it on GitHub:  > https://github.com/bitcoin/bitcoin/pull/936#issuecomment-7461493
934	4658392	2012-03-23T12:52:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4658392	Diapolo	sipa	@sipa: That one is so cool ^^.
932	5055439	2012-04-10T20:28:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5055439	sipa	jgarzik	@jgarzik: agree
923	4998471	2012-04-06T16:51:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4998471	rebroad	krishKM	@krishKM I'd not recommend selling your bitcoins. I think I understood your question to mean "could someone have stolen my bitcoins as a result of continuing to use 0.6.0rc1", right? The answer is practically, no, as sipa implied but didn't expressly state. Even had there been a fork that your client followed, it wouldn't have been the main fork, and even if you'd spend your coins on that fork, they would still exist on the main fork. If anything, you'd have ended up with 50k coins on both forks, and could have double spent them had anyone else continued following and mining that other fork (which they didn't). I think I'm right in this conclusion. Hopefully someone will correct me if I'm not.
921	5123768	2012-04-13T19:53:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5123768	dooglus	laanwj	@laanwj The problem with that is that I often see nTotalBlocks = 168000 (the most recent checkpoint), so your proposed condition is true, and the green check mark is shown incorrectly.  See my comment 2 up from this one for details of why that happens.    Even if we fix the median code to ignore the 0 value, there's still a problem if the first peer we connect to is still downloading the blockchain.  We'll set nTotalBlocks to the number of blocks that peer has, see that we have more, and so show the green checkmark.
921	5129007	2012-04-14T05:24:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5129007	laanwj	dooglus	@dooglus that's why we should check *both* secs < 90*60 and count >= nTotalBlocks.     You complaint was that the progress bar is shown with the green checkmark. The progress bar is only shown when count < nTotalBlocks.    So the proposed change will mean they are never shown at the same time.    We use the last checkpoint as initial estimation of the total number of blocks, but this will quickly change as soon as some connections are made. That's on purpose, nTotalBlocks is always going to be lagging with the current protocol.
919	4509222	2012-03-14T22:03:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4509222	sipa	Diapolo	@Diapolo: compare it to putting your signature (in ink) on a text document. The feature can be used to send a message to a merchant, while proving you are the one who paid him. It could also be used to get access to a site by signing some text they send you with a key that was used to pay them.    The general message here is: pay attention to what you sign.
919	4512214	2012-03-15T01:29:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4512214	TheBlueMatt	tcatm	@tcatm usually does the pulls right before full releases (not maintenance releases like 0.5.2 and 0.5.3, though 0.5.1 was not a maintenance release).  Expect the new translations to show up in 0.6.
919	4514716	2012-03-15T06:44:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4514716	tcatm	Diapolo	@Diapolo: Are you willing to do that or create a script that will aid with fetching new translations, figuring out whether they are ready to be merged (i.e. not too many phrases left untranslated) and resolve conflicts?
917	5118533	2012-04-13T16:38:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118533	mndrix	luke-jr	Thanks to ee12c3d60c4bb7b25e06709e92344d2d8b2c581e the problem @luke-jr mentioned is no longer an issue.  I've updated the pull request accordingly.
917	5194750	2012-04-18T09:19:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5194750	rebroad	laanwj	@laanwj You mean rotate the log file and re-parse bitcoin.conf? -0.99999 to that one ;)
917	5196589	2012-04-18T11:39:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5196589	rebroad	laanwj	@laanwj I'm not aware of many people using Windows XP (for example) that use log rotation tools, and even if they did, are the tools able to rotate the logs at exactly midnight so that entries from either side of midnight don't end up in the wrong log file?
917	5209036	2012-04-18T21:17:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5209036	rebroad	davout	@davout I agree that at present config reload isn't very useful. I'm tempted to suggest that SIGHUP be reserved for that possibly functionality in future though, and going with SIGUSR1 for the logfile rotation, if that's the agreed standard. e.g. how does "tor" do things?    I still think it's not unreasonable for bitcoin to offer to do it's own log rotation though - people can still choose to use a 3rd party program if they prefer. one or two config options would probably suffice, and it'd be easy to code.
917	5209232	2012-04-18T21:27:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5209232	davout	rebroad	@rebroad it is unreasonable to reinvent the wheel. if you don't care about log rotation you'll be fine with the log size limit. if you do care you'll use logrotate.
917	5215395	2012-04-19T05:55:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5215395	laanwj	rebroad	@rebroad: We want to reduce the complexity of the core, not increase it. Anything that can (sanely) be handled by external utilities, should be. If your platform does not have these utilities, you can port them or switch platform.    Note that log rotation is only useful for servers and services, in which you'd like to keep the old data for auditing purposes. Windows XP users tend to be normal end-users which don't care about log files at all.    Reloading configuration is an orthogonal option, open a new issue and discuss about it there.    Let's keep this thread for testing and ACKing this code.
906	4433027	2012-03-10T18:33:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4433027	laanwj	luke-jr	Good, indeed it was asymmetric to have signing without verifying, this at least makes it complete.    IMO you don't have to do any extra work to make it play nice with FIRST_CLASS_MESSAGING. Only @luke-jr uses that option, let him do that :)
906	4456613	2012-03-12T17:11:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4456613	laanwj	TheBlueMatt	@TheBlueMatt we have FIRST_CLASS_MESSAGING because it was part of the signmessage pull. Luke-jr wanted to add signing messages as a separate tab, whereas according to us there are already too many tabs and we should reserve them for essential functionality. So he put it behind a qmake option, I guess because he wants to keep it as a tab himself...
905	5009670	2012-04-07T16:11:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5009670	dooglus	gavinandresen	@gavinandresen I noticed that the shuffle was missing some time ago.  It has been added back in in #1017 which is my current branch for these changes, and includes the coincontrol and lesschange changes too.    I'll also add a new unit test for randomness too.    Do you need this pull request with just the refactoring updated too?  I merged these related changes all together to make them easier to keep up to date.
898	4184395	2012-02-26T20:56:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4184395	dooglus	gavinandresen	@gavinandresen I'd be happy to write some unit tests for SelectCoins but it seems to depend on the whole blockchain which isn't available to the unit tests.  Is that what you are referring to with the refactoring of SelectCoins?  I'm sure with a little help I could get this done.
898	4184773	2012-02-26T21:40:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4184773	gavinandresen	dooglus	@dooglus : yes, off the top of my head something like splitting it into two methods, the first of which creates an array of pointers to available outputs (or maybe tuples of (output, nConfirmations, size) or something) and the second of which runs the actual "figure out which outputs to use" algorithm.  Making SelectCoins strictly a function that chooses a subset of items passed in should make it much easier to both test and modify in the future.
898	4186435	2012-02-27T00:55:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186435	dooglus	gavinandresen	@gavinandresen Is it acceptable to use a vector of pair&lt;nConfirmations,pair&lt;nSize,pair&lt;tx,output_number&gt; &gt; &gt; or is that too ugly?
898	4192110	2012-02-27T11:54:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4192110	dooglus	sipa	@sipa COutPoint has a hash, rather than a transaction, whereas I already have the transactions.    I used a new smallish class anyway because it makes things tidier.
898	4200889	2012-02-27T19:22:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4200889	dooglus	luke-jr	@luke-jr Your "correct solution" adds up to 1.01.  Subtracting the desired amount leaves 0.0099.  That's sub-cent change, which we're trying to avoid.    Wouldn't it be better to chose all 3 coins, leaving 0.0104 change and no fee?    I guess you made a typo somewhere, but I can't work out what you meant.
898	7990483	2012-08-24T02:25:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7990483	gmaxwell	dooglus	@dooglus  Can you explain why the test case passes?   https://github.com/bitcoin/bitcoin/blob/master/src/test/wallet_tests.cpp#L210  Can you suggest a test case that fails?  I suspect you have an unclean clone that has been merged 'nTargetValue +=' doesn't appear anywhere in the codebase as far as I can tell.
898	7990710	2012-08-24T02:43:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7990710	jwillerth	dooglus	Take me off this list    Regards,    Joseph Willerth    Sent from my iPhone    On Aug 23, 2012, at 9:25 PM, Gregory Maxwell <notifications@github.com> wrote:    > @dooglus Can you explain why the test case passes? https://github.com/bitcoin/bitcoin/blob/master/src/test/wallet_tests.cpp#L210  >   > Can you suggest a test case that fails?  >   >   > Reply to this email directly or view it on GitHub.  >
877	4222328	2012-02-28T18:37:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4222328	gavinandresen	p2k	@p2k : I'd like to get this resolved before the final 0.6 release, or at least suggest a workaround in the release notes.  What do you mean by "choosing the plain Growl.app" ?  Choose where?
877	4256360	2012-03-01T11:18:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4256360	tayl0r	gavinandresen	@gavinandresen He means that right before the app crashes, it pops up a dialog box (http://cl.ly/2c0O0m0m3A090V2J2Y0R)    But it didn't work for me. I chose Growl.app but it still crashed.  I haven't found a fix that isn't just "install the old version of Growl".
861	15832431	2013-04-03T11:54:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15832431	Diapolo	luke-jr	@luke-jr That feature is now in the client (via context menu), can you please close the ticket :).
861	17570796	2013-05-07T21:08:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570796	Diapolo	luke-jr	@luke-jr ping  @laanwj Perhaps you can close this issue now.
861	17570796	2013-05-07T21:08:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570796	Diapolo	laanwj	@luke-jr ping  @laanwj Perhaps you can close this issue now.
861	24580718	2013-09-17T11:27:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24580718	Diapolo	luke-jr	@luke-jr Would be nice if you can comment or at leat close this now...
860	4026333	2012-02-17T19:33:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4026333	laanwj	sje397?	I've also wondered why it is in the Settings menu and not under file.     @sje397?    Edit: maybe to put it together with "Encrypt wallet"?
857	4032684	2012-02-18T08:05:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4032684	laanwj	sipa	@sipa: I'm simply mimicing the behaviour of most programs... On linux, people expect --help output in the terminal (which can be copied, piped, redirected, etc). On windows they expect a message box (as there is no other way).    I really don't like the message box to be the default.
855	4611732	2012-03-21T06:39:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611732	laanwj	diapolo	@diapolo it makes sense when you're testing a certain pull request to post about your experiences with it (as in this case). But of course not to make a new issue about something that isn't in master yet.    I, at first, didn't notice luke-jr was posting to an existing pull request instead of a new issue, hence the confusion with another commit.
853	4027627	2012-02-17T20:47:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4027627	laanwj	luke-jr	@luke-jr   you don't have that problem without this pull request? I find it strange, because this patch *no longer* overrides showNormal (which is called when you click a tab).    The stuff in changeEvent does not fire when you change tabs (at least, shouldn't be, as it explicitly checks for state transitions from and to minimized...).
841	4045961	2012-02-19T22:41:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4045961	sipa	gavinandresen	@gavinandresen done
837	5649898	2012-05-11T12:58:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649898	Diapolo	laanwj	As @laanwj is the one, who is able to merge this he should give the final ACK and comment :). Thanks for your work!
837	6076185	2012-06-02T09:39:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6076185	laanwj	sje397,	Finally merged...  Agreed with @sje397, the ui file output is just a data file, and should be opaque. No need for manually shuffling around xml unless something is broken in the designer and it produces nonfunctional code as a result.
837	6143434	2012-06-06T05:43:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6143434	Diapolo	sje397	@sje397 Scott, today I observed sth. strange, the displayed Immature balance was displaying a higher value, than it should. In the transaction list the mined ammounts were already displayed as mature, but did still count towards immature. A client restart fixed this, any idea for that?
837	6143763	2012-06-06T06:16:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6143763	sje397	Diapolo	@Diapolo I'll look into it. All I can think of is that perhaps the signal to update those values isn't working correctly. It should update along with the balance above, which should also change when amounts mature.
837	6453625	2012-06-20T13:21:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453625	Diapolo	laanwj	Have a look at the discussion in #1475. AFAIK @laanwj is currently working on that general fix.
834	3980113	2012-02-15T13:25:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3980113	laanwj	sipa	@sipa: I'm working on the default suffix issue, and will issue a pull request when finished. Please don't let it block this one from accepting it into 0.6.0.
834	3980178	2012-02-15T13:31:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3980178	sje397	laanwj	@laanwj: fyi, the extension works fine on my kubuntu (built with qt 4.7.4)
830	4256810	2012-03-01T11:57:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4256810	Diapolo	krishKM	@krishKM Even an empty data folder instantly freezes the GUI, so currently not fixable for me ... waiting for RC2.
825	3921958	2012-02-11T17:20:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921958	laanwj	sipa	@sipa it's not -- it might work with some compilers, but not by definition in the C++ standard, doing so gives "undefined behavior"
821	6219927	2012-06-09T13:53:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6219927	Diapolo	sipa	As IPv6 support is in now, it could be as simple as updating this line: https://github.com/bitcoin/bitcoin/pull/1433/files#L2R42 (link to a non-merged pull)!  @sipa Anything more to take into consideration?
820	4092392	2012-02-21T23:56:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4092392	jmack	TheBlueMatt,	This very well could be related to #640, but I have some doubt about #639. Using the latest debug version provided by @TheBlueMatt, I was able to get a backtrace that suggests line 1662 in bitcoinrpc.cpp:    throw JSONRPCError(-15, "Error: running with an unencrypted wallet, but walletlock was called.");
814	3919823	2012-02-11T10:06:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3919823	laanwj	sipa?	The UI gets the string representation of the proxy address in this way:        return QVariant(QString::fromStdString(addrProxy.ToStringIP()));    ... which returns either a IPv4 address or IPv6 address string, based on the return value of isIPv4(). An address is identified as IPv4 if it starts with `0000:0000:0000:0000:0000:FFFF` (IPv4 Mapped address). I see nothing wrong in the logic here.    This does not explain how the garbage value ended up in the proxy option in the wallet, though. And I'm unable to reproduce this. Could there be a backward compatibility issue in the serialized representation of addresses? @sipa?    Some experimentation did uncover another problem: the input field takes only IPv4 addresses    Edit: He is *not* using the proxy. Theoretically, the setting should still be at the default (127.0.0.1:9050), or at least what he left it at last time.
809	5016075	2012-04-08T15:20:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5016075	schildbach	ancow	@ancow Ah, that's true. I am using the Ubuntu PPA version.
800	4032676	2012-02-18T08:04:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4032676	laanwj	plaid	@plaid:    1. sub.idx is a sorting key, used to sort multiple transactions with the same txid. Previously it just defaulted to 0.    2. wallet->GetCredit(txout) counts the credit for the entire transaction, for all outputs that are owned by the wallet. It performs the same looping over outputs that is now done manually.    3. Yes, ismine is true for all outputs that the wallet owns the private key for.
800	4035348	2012-02-18T16:47:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4035348	Plaidxx	laanwj	@laanwj I appreciate you taking the time to answer my admittedly elementary questions. They all make perfect sense now.
795	3801644	2012-02-03T18:29:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3801644	laanwj	luke-jr	@luke-jr: it fails in some cases, see #788, #692
795	3921306	2012-02-11T15:38:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921306	laanwj	matoking	@matoking  can you try #826 and verify it still fixes your problem (I've reworked it a bit so that it works for Ubuntu too...)?
791	3767385	2012-02-01T21:18:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3767385	grawity	gmaxwell,	@gmaxwell, do you mean all databases (`wallet.dat`, `addr.dat`, `blkindex.dat`) share *the same log file* between them? Or are you just saying that, for example, `wallet.dat` and the log file of `wallet.dat` must be in the same directory?
787	3697594	2012-01-28T02:21:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3697594	sipa	gavinandresen	Some improvements and bugfixes done.    @gavinandresen:   * It will convert an old addr.dat to the new format. During the first start-up, all addr.dat entries are imported. During a second start-up, all old addr entries are removed (using CDB::Rewrite).   * It is faster in the sense that all locking issues involving CAddrDB and cs_mapAddresses are gone, and address-operations are fast. Reaching 8 connections may be a bit slower, as the new code much less strongly favors trying recently seen addresses - that is the price to pay for some protection against sybil attacks. When connection count is low, it will however favor self-tried addresses.  * Yes, booting from seed nodes is no problem.    The main thing to be tested is whether the bucket count (256 and 64) and bucket size (64) are large enough, knowing that they do not get quickly filled completely. For example, a new-style addr.dat of a week old, will it easily find connections when ran using -noirc -nodnsseed -nolisten?
787	4156179	2012-02-24T12:37:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4156179	sipa	luke-jr	@luke-jr recently had a crash that seemed related to addrman; I am unable to reproduce the problem though. Stack traces or valgrind information from anyone who can reproduce it, is very welcome.
782	3646222	2012-01-25T05:30:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3646222	sipa	piratelinux	@piratelinux: CKey::GetPubKey extracts the public key from the OpenSSL Key structure, which is constructed at the time of the CKey::SetPrivKey() call. The information present there from the CKey::SetPubKey() is only used to know whether the key is compressed.
782	3646400	2012-01-25T05:57:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3646400	sipa	TheBlueMatt	@TheBlueMatt do they exist?
776	4900916	2012-04-03T13:18:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4900916	pszturmaj	Diapolo	@Diapolo this means that average fragment size is 19.5KB... this is really harming to disk drive    @gmaxwell with 500 fragments I have waited a minute to see received block count increase by one. After defragmenting blk0001.dat rate jumped to few tens of blocks/sec. Tested with latest 0.6 version.    This is serious issue and it seems that client doesn't use buffering at all. If you're about to write block to disk, instead write it to 4MB (adjustable) memory-buffer. Do the same with other blocks until buffer is filled up, then commit whole block to disk. This simple fix should help greatly.
776	4900916	2012-04-03T13:18:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4900916	pszturmaj	gmaxwell	@Diapolo this means that average fragment size is 19.5KB... this is really harming to disk drive    @gmaxwell with 500 fragments I have waited a minute to see received block count increase by one. After defragmenting blk0001.dat rate jumped to few tens of blocks/sec. Tested with latest 0.6 version.    This is serious issue and it seems that client doesn't use buffering at all. If you're about to write block to disk, instead write it to 4MB (adjustable) memory-buffer. Do the same with other blocks until buffer is filled up, then commit whole block to disk. This simple fix should help greatly.
776	4951081	2012-04-04T10:54:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4951081	Diapolo	pszturmaj	I'm currently working on an "experimental" patch, that addresses this for the blk0001.dat file on Windows. I'm not sure if the devs are fine with such a thing, but I'm sure this can also be done for Mac and Linux. For such optimizations I would tolerate OS-specific patches as long as they don't break the legacy (un-optimized) behaviour of the client, what do other devs think about this?    @pszturmaj Are you able to compile the client on Windows, as I can't compile redistributable files (because of dependecies to non stacially linked libs) and don't want to :). You could check out my work after it's finished as a tester.
776	4951100	2012-04-04T10:55:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4951100	sipa	Diapolo	@Diapolo how does it work? How do you influence bdb?    Also: I hope it can be integrated in gitian builds.
776	4959869	2012-04-04T18:28:24Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4959869	Diapolo	sipa	@sipa I need your help (badly)! The WriteToDisk() in CBlock uses streams to write index headers and blocks. I would like to know, if I can somehow set the filepointer / position indicator, so that the data is not always appended to the end of blk0001.dat. I need to be independend of the real file length for my idea.    I tried to change the fseek() in AppendBlockFile(), but that didn't make a difference :-(. The very first block is okay, I see this because I queried via ftell(), but after the "fileout <<" calls, the position indicator is not, where it should be :D.
776	4975398	2012-04-05T12:18:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4975398	pszturmaj	Diapolo	@Diapolo I was able to compile libs separately, but then I gave up and didn't touch it again. Please let me know when you'll finish your patches, I'll try to test them on Windows.
776	5056719	2012-04-10T21:29:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056719	Diapolo	pszturmaj	@pszturmaj With the help of BlueMatt I can perhaps compile a version for you to download and test. I hope to have it ready before I'm off for a few days ;).
776	5540672	2012-05-06T20:47:39Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540672	Diapolo	pszturmaj	@pszturmaj I have a branch ready that fixes your reported problem for Windows (consider it still experimental): https://github.com/Diapolo/bitcoin/tree/InitBlockDL-exp The problem is I can't compile an executable you could try, so I rely on BlueMatt to get a working exe via Jenkins, which produced quite some errors the last time we tried. Or are you able to compile for yourself now?
776	5550391	2012-05-07T13:51:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5550391	Diapolo	pszturmaj	@pszturmaj Sipa was so kind to build a working executable from my branch (https://github.com/Diapolo/bitcoin/tree/InitBlockDL-exp), which is based on the current bitcoin master branch. You find the files for Windows (only) here: http://bitcoin.sipa.be/builds/0.6.1-35-g34a0eab/    Would be great if you could check them out and report back. Be aware that you will need to delete your current blk*.dat files for this testing and unofficial build to work properly!    DISCLAIMER:  The linked build is experimental and should only used in testing environments, as it can contain serious bugs! I tested this on my Windows machine and fixed all bugs I found to date!
776	5551379	2012-05-07T14:37:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5551379	pszturmaj	Diapolo	@Diapolo Hey, it's much better! It allocates ~2 GB block file and now it doesn't block the system anymore.    Here's a screenshot after 10 minutes of running the client: http://i.imgur.com/GSms5.png. Please note the network graph. The link speed constantly drops and increases, I think this could be optimized.
776	5551877	2012-05-07T14:57:58Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5551877	Diapolo	pszturmaj	@pszturmaj Sounds good as a starting-point. Could you benchmark (messure the time it takes to do a full block-chain download) with 0.6.1 official vs. that experimental build?    And perhaps a startup- / shutdown-time comparison :)?
776	5553316	2012-05-07T15:57:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5553316	pszturmaj	Diapolo	@Diapolo I'm still experiencing extensive disk access, shutdown-time was 45 sec after 3 mins of downloading (during shutdown, Hdd LED was ON and system was blocked). Before that, I temporarily closed the client and defragmented blkindex.dat and debug.log. I see that debug.log is written frequently but I think it's too small to cause such slow downs.    I did look at the IO stats and I saw that bitcoin process reads at rate up to 10 MB/s and writes up to 8 MB/s. Speed dropped to 5-10 blocks/sec. Does it scan the whole index for each block?    It seems that downloading gets slower, proportionally to the number of received blocks.
776	5569428	2012-05-08T07:46:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5569428	Diapolo	pszturmaj	@pszturmaj   blkindex.dat is still heavily fragmented over time, but at least the blk000x.dat files should consist of a single fragment on disk. My last work was truncating unused space in the block files after they reach their max size, to save disk space and adding reading from block files via std::fstream, too ... which now also works.    I currently can't do anything in terms of network performance, my focus lies on the filesystem stuff in my experimental build. I'll see if there is a way to do the same pre-alloc for blkindex.dat.
776	5572890	2012-05-08T11:53:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5572890	sipa	pszturmaj	@pszturmaj more recent blocks have more transactions, and to process a transaction, all its inputs have to be looked up in the index. This index is very efficient, but since those transactions are most likely spread out over many megabytes on your disk, it will require more and more seeking as the block database grows.
771	3576919	2012-01-20T00:10:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3576919	TheBlueMatt	sipa	Oh and as usual thanks to @sipa and @gmaxwell for comments/suggestions/general help for my C++ noobishness along the way.
771	3576919	2012-01-20T00:10:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3576919	TheBlueMatt	gmaxwell	Oh and as usual thanks to @sipa and @gmaxwell for comments/suggestions/general help for my C++ noobishness along the way.
771	4989700	2012-04-06T02:29:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4989700	TheBlueMatt	sipa	Closing this since after some thought I really dont trust myself to touch this much code without introducing one or two fatal bugs.  If anyone does want to look at this, @sipa spent some time cleaning up the internals to look nicer/run a bit smoother at https://github.com/sipa/bitcoin/tree/ooifiedbs
771	4994255	2012-04-06T12:13:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4994255	sipa	TheBlueMatt	@TheBlueMatt large refactorings always carry some risk, but imho this is a refactor that needs to happen anyway. It can probably use a few more eyes, but it seems to run without problem, so it seems a waste not trying to get it merged.    By the way, ooifiedbs is rebased against master.
771	5546522	2012-05-07T09:25:37Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5546522	TheBlueMatt	Diapolo	Spent some more time double checking and triple checking the latest rebase...found one more potential deadlock, fixed one potential race...more checking to be done  @Diapolo Ill check in the morning, its almost 6am...
760	3522301	2012-01-17T02:48:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3522301	gruez	TheBlueMatt	@TheBlueMatt I think it should be even lower than that. One click and the transaction fee doubles doesn't look right. Maybe 0.0005.
756	3504227	2012-01-15T23:14:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3504227	gruez	itstooez	@itstooez: yes
753	3507218	2012-01-16T07:50:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3507218	laanwj	gruez	@gruez Maybe you're using an old version, which still shows global progress, which would indeed be at 99% every time...    It was already changed to your suggestion. It starts from the last complete sync count, which means it looks like it starts from 0 every time, which is the reason @gmaxwell opened this issue.    Seems it sucks either way.
753	3507218	2012-01-16T07:50:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3507218	laanwj	gmaxwell	@gruez Maybe you're using an old version, which still shows global progress, which would indeed be at 99% every time...    It was already changed to your suggestion. It starts from the last complete sync count, which means it looks like it starts from 0 every time, which is the reason @gmaxwell opened this issue.    Seems it sucks either way.
742	3817019	2012-02-05T11:24:05Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3817019	laanwj	tcatm	@tcatm do you know of an efficient way to update this in transifex, in one go?
740	3363921	2012-01-05T00:46:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3363921	TheBlueMatt	gmaxwell	@gmaxwell heh, of course...maybe I just need to give up programming at this point...
739	3848092	2012-02-07T13:51:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3848092	laanwj	gmaxwell	@gmaxwell: yes, I don't think there is a way to detect tor, hence the awkward heuristic of checking for port 9050. So probably we should add a "tor" checkbox in the UI and a `-tor` commandline option?
739	4967295	2012-04-05T02:13:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4967295	sipa	gmaxwell	@gmaxwell For IPv6, I've already implemented SOCKS5 client support, which is also provided by Tor. SOCKS5 supports IPv4, IPv6 and hostname destinations.    Is there any reason to stick to SOCKS4?
736	3501418	2012-01-15T20:05:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3501418	gruez	Skinkworks	@Skinkworks: no, it needs to be specified on every startup. coincidentally, datadir also specifies where bitcoin.conf is, which causes a chicken-and-egg problem about where to save settings.
736	15633488	2013-03-29T09:11:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15633488	laanwj	Diapolo	The problem is that, by the time you get the UI, the datadir will already have been created and filled.    The only way around this would be to have a 'first use' screen in which the datadir can be selected (as, indeed, as @Diapolo says, the Qt settings are not stored in the datadir).
735	3378630	2012-01-05T23:49:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3378630	sipa	laanwj	@laanwj: by the way, does it work in the windows dev environment as well?
735	3387857	2012-01-06T17:39:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3387857	sipa	jgarzik	@jgarzik: I moved ConnectSocket out of CService.
729	3281584	2011-12-27T14:07:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3281584	laanwj	gavinandresen	Agreed @gavinandresen I don't think simply delaying the change would have won much. People hardly look at "non-official" branches.    Somehow we should encourage more people to take a look at the source carefully, and attack it from any angle possible. Thanks a lot @roconnor.
729	3281584	2011-12-27T14:07:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3281584	laanwj	roconnor.	Agreed @gavinandresen I don't think simply delaying the change would have won much. People hardly look at "non-official" branches.    Somehow we should encourage more people to take a look at the source carefully, and attack it from any angle possible. Thanks a lot @roconnor.
729	3283107	2011-12-27T17:08:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3283107	roconnor	gavinandresen	@gavinandresen can you (or someone else) clearly document all the desired functionality that you want from OP_EVAL, giving examples of how it would work, either in the BIP_0012 wiki page or linked from the wiki page?  Maybe we can find an alternative way of getting all this functionality without such a fundamental change as OP_EVAL?  OP_EVAL destroys all sorts of nice properties of the scripting system. As I said before OP_EVAL (probably) makes the language "in-principle" Turing complete.  Also miners now have the ability to review the entire script before execution.  These will go away when OP_EVAL is introduced.  This is what I mean by a fundamental change.
729	3287780	2011-12-28T02:56:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3287780	ByteCoin	roconnor	@roconnor Go into more detail about these "nice properties" of the scripting system that OP_EVAL destroys and then we can talk about how important these properties are and how to preserve them.     It seems easy in principle to limit the evaluation time of scripts and forbid looping constructs by preventing recursive OP_EVALs. It's possible that in this instance it was not implemented correctly but I think it indicates a lack of resources devoted to testing rather than a more fundamental flaw.    If you felt strongly that OP_EVAL was undesirable, you should have made a bit more noise before a lot of engineering and political effort was expended traveling down this path.    Taking your words literally, you say that miners won't be able to review the entire script before execution once OP_EVAL is introduced. This is plainly false. I know the change you actually meant and it was mentioned the very first time OP_EVAL was proposed.   With OP_EVAL, it becomes practically impossible to work out what sort of script or whether a valid script exists which can redeem the proposed "standard" OP_EVAL transactions. I think this is a desirable feature rather than an unfortunate consequence.
729	3287997	2011-12-28T03:56:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3287997	gavinandresen	roconnor	@roconnor: reasons for, and advantages/disadvantages of, OP_EVAL were discussed pretty extensively in this forum thread three months ago:  https://bitcointalk.org/index.php?topic=46538.0    Initial implementation was available for code review on October 19'th, over three months ago.  I know everybody is busy, but I don't think 4 or 5 months to get a new feature out is unreasonable.
729	3293769	2011-12-28T18:45:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3293769	roconnor	gavinandresen	Good morning all.    @gavinandresen @ByteCoin: I glanced through that thread a while ago (BTW, extracting the use cases of OP_EVAL from reading that thread is difficult, which is why I expected a summary of uses to be in the BIP) and there seemed to be enough skepticism in that thread and on #bitcoin-dev that I didn't expect the proposal to move forward without  further consideration.  Suddenly I find out from a blog post that OP_EVAL is slated for inclusion in 0.6.  Since I'm not yet convinced OP_EVAL is a good idea, I went browsing through the implementation trying to find an error to stop you guys (since the OP_EVAL proposal isn't even close to documented in the BIP (how does OP_EVAL interact with OP_IF? Does OP_EVAL clear the alt_stack? what is the rational for these design choices (and I suspect the answer is that you guys haven't even considered this and are not even aware you are making design choices)) the only way to find out what the OP_EVAL proposal is is to read the code).  It only took me 70 minutes to find an error.    Now I see this as a serious red flag.  If I can find a bug in 70 minutes, how many other bugs are lurking? Think about it.  (Granted this wasn't as serious as I reported due to the op_code execution limit, but it was still a moderate bug.)    (Also because OP_EVAL doesn't have a detailed specification, I wasn't even sure that the ++ was an error when I first saw it.  Only later after double checking the semantics of post-fix ++ was I sure it was an error.)    @ByteCoin current properties include something like square or cubic space usage in terms of the length of scripts (ignoring the artificial limits imposed by the standard client) and some sort of polynomial bound on time usage that I haven't figured out.  Also right now the miners have the option inspect the script before executing.  They can easily count the number of OP_CHECKSIGS or whatever they want to do.  Tell me, how many OP_CHECKSIGS will be executed in "OP_1 OP_HASH160 OP_EVAL"? (In a related note: Personally I would have designed OP_CHECKMULTISIG to statically take m and n in the opcode itself, but nothing can be done about that now.) There may be other nice properties that I haven't even considered.    Maybe it is okay to alter these properties.  Maybe it is right to clear the alt_stack upon OP_EVAL and restore it when done. I don't know.  My concern is that you guys haven't even thought about these issues.  These issues certainly haven't been documented anywhere.    Personally I think you cannot even give proper consideration to protocol extensions without first given proper consideration to the current protocol by documenting it and its design.  (Did you know that a OP_VERIF will cause a script to fail even if it occurs in a non-executed part of an OP_IF branch?)  And yes, Gavin, I do volunteer to do this and have been slowly working on it in my spare time.
729	3293769	2011-12-28T18:45:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3293769	roconnor	ByteCoin	Good morning all.    @gavinandresen @ByteCoin: I glanced through that thread a while ago (BTW, extracting the use cases of OP_EVAL from reading that thread is difficult, which is why I expected a summary of uses to be in the BIP) and there seemed to be enough skepticism in that thread and on #bitcoin-dev that I didn't expect the proposal to move forward without  further consideration.  Suddenly I find out from a blog post that OP_EVAL is slated for inclusion in 0.6.  Since I'm not yet convinced OP_EVAL is a good idea, I went browsing through the implementation trying to find an error to stop you guys (since the OP_EVAL proposal isn't even close to documented in the BIP (how does OP_EVAL interact with OP_IF? Does OP_EVAL clear the alt_stack? what is the rational for these design choices (and I suspect the answer is that you guys haven't even considered this and are not even aware you are making design choices)) the only way to find out what the OP_EVAL proposal is is to read the code).  It only took me 70 minutes to find an error.    Now I see this as a serious red flag.  If I can find a bug in 70 minutes, how many other bugs are lurking? Think about it.  (Granted this wasn't as serious as I reported due to the op_code execution limit, but it was still a moderate bug.)    (Also because OP_EVAL doesn't have a detailed specification, I wasn't even sure that the ++ was an error when I first saw it.  Only later after double checking the semantics of post-fix ++ was I sure it was an error.)    @ByteCoin current properties include something like square or cubic space usage in terms of the length of scripts (ignoring the artificial limits imposed by the standard client) and some sort of polynomial bound on time usage that I haven't figured out.  Also right now the miners have the option inspect the script before executing.  They can easily count the number of OP_CHECKSIGS or whatever they want to do.  Tell me, how many OP_CHECKSIGS will be executed in "OP_1 OP_HASH160 OP_EVAL"? (In a related note: Personally I would have designed OP_CHECKMULTISIG to statically take m and n in the opcode itself, but nothing can be done about that now.) There may be other nice properties that I haven't even considered.    Maybe it is okay to alter these properties.  Maybe it is right to clear the alt_stack upon OP_EVAL and restore it when done. I don't know.  My concern is that you guys haven't even thought about these issues.  These issues certainly haven't been documented anywhere.    Personally I think you cannot even give proper consideration to protocol extensions without first given proper consideration to the current protocol by documenting it and its design.  (Did you know that a OP_VERIF will cause a script to fail even if it occurs in a non-executed part of an OP_IF branch?)  And yes, Gavin, I do volunteer to do this and have been slowly working on it in my spare time.
729	3293769	2011-12-28T18:45:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3293769	roconnor	ByteCoin	Good morning all.    @gavinandresen @ByteCoin: I glanced through that thread a while ago (BTW, extracting the use cases of OP_EVAL from reading that thread is difficult, which is why I expected a summary of uses to be in the BIP) and there seemed to be enough skepticism in that thread and on #bitcoin-dev that I didn't expect the proposal to move forward without  further consideration.  Suddenly I find out from a blog post that OP_EVAL is slated for inclusion in 0.6.  Since I'm not yet convinced OP_EVAL is a good idea, I went browsing through the implementation trying to find an error to stop you guys (since the OP_EVAL proposal isn't even close to documented in the BIP (how does OP_EVAL interact with OP_IF? Does OP_EVAL clear the alt_stack? what is the rational for these design choices (and I suspect the answer is that you guys haven't even considered this and are not even aware you are making design choices)) the only way to find out what the OP_EVAL proposal is is to read the code).  It only took me 70 minutes to find an error.    Now I see this as a serious red flag.  If I can find a bug in 70 minutes, how many other bugs are lurking? Think about it.  (Granted this wasn't as serious as I reported due to the op_code execution limit, but it was still a moderate bug.)    (Also because OP_EVAL doesn't have a detailed specification, I wasn't even sure that the ++ was an error when I first saw it.  Only later after double checking the semantics of post-fix ++ was I sure it was an error.)    @ByteCoin current properties include something like square or cubic space usage in terms of the length of scripts (ignoring the artificial limits imposed by the standard client) and some sort of polynomial bound on time usage that I haven't figured out.  Also right now the miners have the option inspect the script before executing.  They can easily count the number of OP_CHECKSIGS or whatever they want to do.  Tell me, how many OP_CHECKSIGS will be executed in "OP_1 OP_HASH160 OP_EVAL"? (In a related note: Personally I would have designed OP_CHECKMULTISIG to statically take m and n in the opcode itself, but nothing can be done about that now.) There may be other nice properties that I haven't even considered.    Maybe it is okay to alter these properties.  Maybe it is right to clear the alt_stack upon OP_EVAL and restore it when done. I don't know.  My concern is that you guys haven't even thought about these issues.  These issues certainly haven't been documented anywhere.    Personally I think you cannot even give proper consideration to protocol extensions without first given proper consideration to the current protocol by documenting it and its design.  (Did you know that a OP_VERIF will cause a script to fail even if it occurs in a non-executed part of an OP_IF branch?)  And yes, Gavin, I do volunteer to do this and have been slowly working on it in my spare time.
729	3294409	2011-12-28T19:48:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3294409	TheBlueMatt	luke-jr	@luke-jr I agree there should be a distinction, though I would put the distinction more along the lines of gitian/contrib/doc/minor ui  changes vs core/protocol/etc changes.  Though maybe protocol changes need acks from other client devs too.  Luke-Jr <reply@reply.github.com> wrote:  >An important point of my comment was the distinction between >protocol-level changes and other changes. > >---  >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/issues/729#issuecomment-3292006
729	3294624	2011-12-28T20:13:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3294624	roconnor	ByteCoin	@ByteCoin Long story short, OP_EVAL effectively makes static analysis of scripting code impossible, and for this reason alone I personally reject the entire proposal.  But even if this doesn't bother you, the fact that OP_EVAL isn't well specified and hasn't yet been well implemented should be enough to at least delay the proposal.
729	3294629	2011-12-28T20:14:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3294629	roconnor	gavinandresen	@gavinandresen You make it sound like OP_EVAL is the only possible mechanism to enable distributed trust.
729	3294718	2011-12-28T20:23:26Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3294718	roconnor	gavinandresen	@gavinandresen OP_VERIF *is* disabled.  But it is processed this way because of this code:         else if (fExec || (OP_IF <= opcode && opcode <= OP_ENDIF))    OP_VERIF is in between OP_IF and OP_ENDIF so it is executed, but since there is no case handler, it fails.    My point is that this complexity is exactly the reason you need to stop expanding the protocol and figure out what you already have.  Blindly going forward with OP_EVAL when you clearly don't understand the existing protocol yet is simply too risky.  You may cause more problems than you solve.
729	3294782	2011-12-28T20:29:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3294782	ByteCoin	roconnor	@roconnor and @luke-jr : Let's consider pragmatic Bitcoin development politics. We've said that "the perfect is the enemy of the good". Gavin's a good project leader and I think it's more productive to support his development vision than to second guess it and throw sand in the gears.     By far the biggest systemic risk to Bitcoin is the possibility Gavin might leave. If you disagree with him then your ultimate sanction is to leave. The weight of your opinion is likely to be proportional to the amount that you help with the project and make Gavin's life easier. If you help out then Gavin's incentivized to keep you happy or else he loses your development effort when you leave. If you want your opinion taken more seriously and have more influence in the development direction I suggest you work together. Do some work you don't particularly want to do or find interesting so that it doesn't have to be done by someone else.    I've read Gavin's implementation of OP_EVAL. He didn't do it in the way I would have done it but HE DID IT. I didn't. Similarly with large parts of the existing client and protocol. It's rubbish but it exists and works. You can criticize it but it's not very productive unless you're prepared to help.    You raise some valid points but I'll be much more impressed if you follow up. You say "these issues haven't been documented anywhere". Document them yourself (in the wiki?) You say "you guys haven't even thought about these issues". Ok you have (a few months too late but never mind). Perhaps we have and didn't bother documenting it, perhaps we didn't.    I think it's unlikely that OP_EVAL developmet will come to a grinding halt based on your concerns. Your disapproval signals a lack of appreciation for the work that has been done and is demoralizing. It's easy to find something to criticize about someone else's code. Why not be more supportive? Aren't we all working towards the same ultimate goal?    ByteCoin    PS. Thanks for finding the bug.
729	3294782	2011-12-28T20:29:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3294782	ByteCoin	luke-jr	@roconnor and @luke-jr : Let's consider pragmatic Bitcoin development politics. We've said that "the perfect is the enemy of the good". Gavin's a good project leader and I think it's more productive to support his development vision than to second guess it and throw sand in the gears.     By far the biggest systemic risk to Bitcoin is the possibility Gavin might leave. If you disagree with him then your ultimate sanction is to leave. The weight of your opinion is likely to be proportional to the amount that you help with the project and make Gavin's life easier. If you help out then Gavin's incentivized to keep you happy or else he loses your development effort when you leave. If you want your opinion taken more seriously and have more influence in the development direction I suggest you work together. Do some work you don't particularly want to do or find interesting so that it doesn't have to be done by someone else.    I've read Gavin's implementation of OP_EVAL. He didn't do it in the way I would have done it but HE DID IT. I didn't. Similarly with large parts of the existing client and protocol. It's rubbish but it exists and works. You can criticize it but it's not very productive unless you're prepared to help.    You raise some valid points but I'll be much more impressed if you follow up. You say "these issues haven't been documented anywhere". Document them yourself (in the wiki?) You say "you guys haven't even thought about these issues". Ok you have (a few months too late but never mind). Perhaps we have and didn't bother documenting it, perhaps we didn't.    I think it's unlikely that OP_EVAL developmet will come to a grinding halt based on your concerns. Your disapproval signals a lack of appreciation for the work that has been done and is demoralizing. It's easy to find something to criticize about someone else's code. Why not be more supportive? Aren't we all working towards the same ultimate goal?    ByteCoin    PS. Thanks for finding the bug.
729	3295133	2011-12-28T21:05:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3295133	luke-jr	ByteCoin,	@ByteCoin, I think you mean the ultimate sanction is to fork... Anyhow, I've tried to make Gavin's job easier with the 'next' (only stuff the core team has approved) and 'next-test' (that plus other stuff not yet accepted) branches, but he seems to prefer ignoring them and delaying merges until he gets around to doing them himself, which makes more work for everyone.    I'd like to think I've been fair with OP_EVAL as well: it's been part of 'next' from the start, and I have support for it deployed live on Eligius; however, these recent concerns as well as areas we could improve it before deployment (such as pubkey extraction) have changed my position to one of preferring a slight delay for further improvement. I don't think anyone is suggesting it should come to a grinding halt, but that it needs more time before it's ready.
729	3295451	2011-12-28T21:40:17Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3295451	ByteCoin	luke-jr	@luke-jr Re: Fork vs Leave. How would we tell the difference?
729	3295574	2011-12-28T21:52:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3295574	luke-jr	ByteCoin	@ByteCoin: someone forking would release a new client. ;)
729	3295642	2011-12-28T21:59:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3295642	ByteCoin	luke-jr	@luke-jr And this would be noteworthy for some reason?
721	3470692	2012-01-12T21:16:03Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3470692	sipa	jgarzik	Agree with @jgarzik here: let's clean up getinfo, and create a specific getmininginfo call for those who are interested.    Over what time frame can we remove fields from getinfo?
713	5454871	2012-05-02T06:25:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5454871	Diapolo	laanwj	@laanwj Is this on track, I think it would be a great addition to the GUI. Have you code ready or some links to read in perhaps ;)?
713	5456674	2012-05-02T08:52:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5456674	laanwj	diapolo	@diapolo   * initialization/OptionsModel: Allow the OptionsModel to set the default of the -lang option (easy, it's already in the right place)  * OptionsModel: add an option for setting the language, make sure its saved to QSettings  * OptionsDialog: add a widget to set the language to one of the pages, and add a mapping from this widget to the option in OptionsModel    The setting would become effective after restarting bitcoin, which is good enough.
711	3265494	2011-12-23T23:16:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3265494	TheBlueMatt	laanwj	@laanwj exactly, I was proposing writing a patch specific to this case, not modifying bitcoin to ignore errors in general.
703	8800123	2012-09-23T16:42:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8800123	Diapolo	laanwj	Still present with 0.7 (Qt 4.7.4 based)! @laanwj What is your opinion on switching to Qt 4.8.2 (which is what the pull tester is using)?
703	9068132	2012-10-02T11:44:51Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9068132	Diapolo	Vort	@Vort Can you please test, if switching to Qt 4.8.2 fixed this problem for you?    You can download a bitcoin-qt.exe based on Qt 4.8.2 here:  http://jenkins.bluematt.me/pull-tester/26809acbf9d62480375dd8c1875e8bd7faa1d75e/bitcoin/    It was build by our pull tester bot, you can try with a new wallet, if you don't want to use your live wallet :).
703	9102196	2012-10-03T10:46:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9102196	Diapolo	Vort	@Vort Thanks for reporting back, you can then close the issue :).
678	3002027	2011-12-03T18:13:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3002027	laanwj	echo	Well, it should be pretty simple to make a .bat file that changes a environment variable and launches `bitcoin.exe`. I don't use windows myself, so I can't test, but copy-pasting this into a bat in the same directory as bitcoin.exe should do the job:        @echo off      SET LANG=en_US.UTF-8      bitcoin.exe
672	2986831	2011-12-02T06:25:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2986831	laanwj	luke-jr	@luke-jr good catch, do you know why is tree-vectorize so bad here?
660	3024722	2011-12-05T22:38:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3024722	EhVedadoOAnonimato	laanwj,	@laanwj, I was not aware about these other sensitive files.  Don't you think this deserves an issue of its own?  I mean.. I never treated any other file with the same care that I treat wallet.dat, and I guess I'm not the only one. There's either a bug there (leaking sensitive data to logs) or a great need of more clarification for most users, as I don't think I'm the only one that's not aware of such thing...
659	3024570	2011-12-05T22:28:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3024570	EhVedadoOAnonimato	Iongshun,	I'm sorry for not having reported back.    I confirm that the -nolisten switch seems to fix the issue. At least when I add it, there are no incoming connections and bitcoin is not listening on 8333.    @Iongshun, concerning the incoming connections, when I first installed bitcoin (there's a while), I manually configured my router to redirect connections on 8333 to my machine, so that explains how people could reach me. That doesn't explain how they knew there was a bitcoin running on my IP though. Or do bitcoin nodes store IPs of nodes they see once and keep trying to connect to it for a long time? Because than perhaps my Android phone is to blame: I have the BitcoinJ based app on it, and I run it behind the same router (so, the same IP), without Tor...
649	3261844	2011-12-23T15:33:33Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3261844	sipa	luke-jr	@luke-jr  done
640	4091391	2012-02-21T23:02:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4091391	jmack	TheBlueMatt.	Also replicated on the 0.6.0 head version using a debug Windows binary provided by @TheBlueMatt.     Gdb backtrace most often indicates line 1662 in bitcoinrpc.cpp:    throw JSONRPCError(-15, "Error: running with an unencrypted wallet, but walletlock was called.");
640	4583368	2012-03-19T20:55:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4583368	laanwj	jmack	@jmack thanks for testing & confirmation
629	2721876	2011-11-13T11:40:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2721876	sje397	mikehearn	@mikehearn I can do that - what email?
627	18679495	2013-05-30T13:22:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18679495	laanwj	luke-jr	1) NAK - I'm against aesthethic-only settings as they add extra testing work for very little gain. Ideally these kind of preferences should be configured at the level of Qt or the operating system.    2,4) NAK -- bitcoin-qt works at the "wallet" abstraction, it has no concept of "balance of an address"    3) Statistics on transaction list search could be weakly useful    5) Apart from the window position, the state of the GUI is not being remembered between program starts. I guess remembering the tab position could be added.    6) NAK - number of transactions has been removed from the overview tab    7,8) Totals send and/or received could be added to overview page    9) When a transaction made it into a block, it could show the block date. I remember @luke-jr did some work in this direction with "smart dates" (CWallet::nTimeSmart). I'm not sure there is any reason to not show those in the GUI instead.    10) NAK - too much configurability and room to mess up, IMO should just have a sensibile default
624	17570858	2013-05-07T21:10:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570858	Diapolo	graingert	@graingert Can you please close this now, as current master has new position for export and even no global thing anymore.
622	8797354	2012-09-23T11:01:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8797354	Diapolo	laanwj	I tend to agree @laanwj this seems to be a non-issue as we would need to look and think about every GUI elements size then, which is nearly impossible to do for only 2 "real" GUI devs.
622	15832308	2013-04-03T11:51:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15832308	Diapolo	laanwj	@laanwj /close me
593	3043353	2011-12-07T05:03:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3043353	TheBlueMatt	laanwj	In an attempt at making this slightly more useful, I added the latest commit to automatically focus on new SendCoinEntrys and scroll to them, however because the scrolling is called before the qt thread is free to recalculate the new frame size, it scrolls to n-1 SendCoinEntrys not the last one.  I'm assuming there is a simple way to do this, but I dont feel like spending a ton of time digging through qt docs to figure it out when I'm assuming @laanwj probably knows the solution, so how would one scroll to the end directly after adding a new SendCoinEntry?
590	2495056	2011-10-23T12:13:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2495056	laanwj	tcatm	@tcatm how are we going to handle this?  will you close this pull request when this ends up in the bitcoin source?  or do we consider it 'merged' already because it is in transifex?
583	2415921	2011-10-15T15:31:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2415921	laanwj	p2k	Thanks for testing @p2k and @luke-jr, as this is only UI changes I think that's enough. I'm merging this.
583	2415921	2011-10-15T15:31:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2415921	laanwj	luke-jr,	Thanks for testing @p2k and @luke-jr, as this is only UI changes I think that's enough. I'm merging this.
555	2369974	2011-10-11T19:23:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369974	laanwj	shadders,	I do think bitcoin needs a mechanism to send asynchronous notifications of incoming transactions, new blocks, whatever a client wants to subscribe to.    However, I agree with @shadders, and don't think signals are the preferred interprocess communication method here. Signals are specific to UNIX and pretty annoying to handle at that, as they interrupt system calls, and have many other tricky corner cases.
555	2408098	2011-10-14T15:44:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408098	freewil	laanwj	This may be something more thorough than what is needed, but some sort of hooks "interface"  like @laanwj was saying, for events like new transactions, blocks, etc is much needed. I imagine something flexible like being able to specify in the conf file an event and a script to run or a callback URL to POST to.
555	2408181	2011-10-14T15:52:52Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408181	shadders	Iaanwj	I think a script call would be just as usable as a callback url.  A  little more fiddly but more flexible if the end user doesn't want to  implement a http listener.  On 15/10/11 01:44, freewil wrote: > This may be something more thorough than what is needed, but some sort of hooks "interface"  like @Iaanwj was saying, for events like new transactions, blocks, etc is much needed. I imagine something flexible like being able to specify in the conf file an event and a script to run or a callback URL to POST to. >
555	2408208	2011-10-14T15:55:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408208	freewil	shadders	Yup, what @shadders says. A script to run (probably passed some helpful arguments) or a callback URL I think gives the best flexibility.
555	2416641	2011-10-15T18:09:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2416641	mikegogulski	shadders	"IPC code, if implemented correctly, could give benefits to all bitcoind admins"    No, only to those running bitcoind on the very same machine as their commerce app/pool server -- or running such an app at all. RPC solves the general case, and those running both on the same box can point to localhost.    @shadders: Did you actually read issue 20?
555	2418468	2011-10-16T00:58:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418468	shadders	shadders	 On 16/10/11 04:09, Mike Gogulski wrote: > @shadders: Did you actually read issue 20? Of course I read it... Are you referring to this part?: "/Used by basically every pool now/"  Unfortunately that's only true in luke's happy place where JVMs don't  exist.  What he really means is every pool running pushpool or a  derivative which is a minority by a very big margin.  />>>  Shadders, I consider it a non-issue that Java is too broken to support standard POSIX functionality.  /  Luke currently 75% of network hash power is served by pools that use a  JVM.  That's hardly an inconsequential minority.  There are two solutions presented here that are both simple to implement  (both use mechanisms already present in bitcoind), extensible,  cross-platform, cross-machine and can easily be made backward  compatible.  It would appear the only advantage you could gain by  choosing to go with SIGUSR1 over either of them is to lock out 'broken  java' and non-posix compliant platforms.
511	2066308	2011-09-11T22:52:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066308	TheBlueMatt	jgarzik	@jgarzik does it honestly matter that much? Either way a binary mo has to be regenerated.
476	1942626	2011-08-30T14:40:34Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1942626	nanotube	gavinandresen	by the way, wanted to make a note @gavinandresen : this will also be useful for writing that cross-client test-suite you were talking about.     when we were discussing it, you were primarily focusing on sending client various bits of blockchain. however, as we know from the existing bug where transactions with duplicate inputs are treated as valid for the purposes of rebroadcast, testing the client by sending it a bunch of weird transactions would be good too. and this getmemorypool functionality would let you query the client to see if it has 'accepted' the transaction.    just a thought. :)
471	8763033	2012-09-21T12:30:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763033	Diapolo	Plasma	@Plasma Hey there, could you please download the latest 0.7 relase and test if this still happens and otherwise just close the issue?
471	17589776	2013-05-08T06:58:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589776	Diapolo	laanwj	@laanwj I guess this one can also be closed now.
461	2604425	2011-11-02T15:02:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2604425	TheBlueMatt	T_X	@T_X in gavin's comment, build rule would refer to the default when calling make/qmake+make and the distributed binaries.    Personally, I don't care what the default is, the tri-state option was added because no one would agree on what the default for UPnP should be and thus it wasn't getting merged, so tri-state was added to move the process forward.  If you want to change it, go ahead, but even two different arguments would be clearer than tri-state (--have-upnp and --upnp-by-default or something).    Distributing libminiupnpc? No way, we already distribute our own outdated, modified copy of json_spirit which we should never be doing.  We don't need to be distributing other outdated copies of software in our src.  Also, libminiupnpc is now in debian and gaining packages in other distros, so I'm not too concerned.  Also, users who know enough to be compiling bitcoin from source probably aren't using UPnP on their router anyway, so most people who this effects are just going to disable UPnP anyway.    In any case, if someone wants to put in the effort and actually make an update to the way UPnP is defined, go right ahead...this pull request is outdated and only halfway done.  It would be better to discuss updates specific to implementation instead of wandering around all day asking what we should do.
461	4566547	2012-03-19T01:41:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4566547	sipa	neofutur	@neofutur have you even read the rest of this issue? I'm sure it is confusing, and I agree it needs to be changed, but you know that USE_UPNP= disables linking against miniupnpc?
457	5677751	2012-05-13T17:13:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5677751	muggenhor	jgarzik	@jgarzik I'll work on updating this pull request next Thursday (Ascension Day, national holiday so I'll have some time off).
457	5808816	2012-05-20T13:19:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5808816	muggenhor	luke-jr	@luke-jr This also contains a change (in 652eebf08e7f0e32d686d4e36475742fa27f71cc) to treat IPv4-mapped IPv6 addresses (::127.0.0.1 is one) as IPv4 addresses.
457	6385032	2012-06-17T21:31:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6385032	Diapolo	muggenhor	NACK until the last commit is clarified.  @muggenhor Wait, what are you doing there to the shutdown ... we had a long discussion and merged a patch a few days ago. Your last commit is likely to break sth. or at least change the current behaviour once more, see #1439.
457	6531684	2012-06-24T09:37:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6531684	muggenhor	luke-jr	@luke-jr it's been long since I've done windows development, but don't you mean ws2_32 ? And isn't that linked to already?  @Diapolo yes, I did read your comment. I however have a day job which doesn't leave me much time during the week to reply *immediately*. So being patient enough to wait till the next weekend following your comment might be nice.  Then as for the actual content of your comment: > Your last commit is likely to break sth  Please elaborate, because I've carefully checked *how* my change would affect existing code. As far as I could see there should be no difference except the *location* from where the shutdown thread gets started.  > or at least change the current behaviour once more  As explained above: shutdown behaviour should not be changed for existing/untouched code. It should only affect the termination of the RPC handling's shutdown sequence.  I.e. the RPC code *needs* to be interrupted by a signal in order to terminate it. Setting a variable that can be polled (fShutdown) isn't enough because we're blocking until some kind of event (network I/O or internal operation on io_service or one of the sockets) occurs.
457	6531684	2012-06-24T09:37:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6531684	muggenhor	Diapolo	@luke-jr it's been long since I've done windows development, but don't you mean ws2_32 ? And isn't that linked to already?  @Diapolo yes, I did read your comment. I however have a day job which doesn't leave me much time during the week to reply *immediately*. So being patient enough to wait till the next weekend following your comment might be nice.  Then as for the actual content of your comment: > Your last commit is likely to break sth  Please elaborate, because I've carefully checked *how* my change would affect existing code. As far as I could see there should be no difference except the *location* from where the shutdown thread gets started.  > or at least change the current behaviour once more  As explained above: shutdown behaviour should not be changed for existing/untouched code. It should only affect the termination of the RPC handling's shutdown sequence.  I.e. the RPC code *needs* to be interrupted by a signal in order to terminate it. Setting a variable that can be polled (fShutdown) isn't enough because we're blocking until some kind of event (network I/O or internal operation on io_service or one of the sockets) occurs.
457	6531916	2012-06-24T10:34:35Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6531916	Diapolo	muggenhor	@muggenhor I didn't want to hurry you the feedback of another dev would have been sufficient, too. I didn't want to offend you. That said ``StartShutdown()`` is currently used in bitcoinrpc, main, net and test_bitcoin.  GUI:  StartShutdown() ->  uiInterface.QueueShutdown() -> quit() for QCoreApplication (Qt event loop) -> Shutdown(NULL); in bitcoin.cpp (no exit here) -> return 0; (Bitcoin-Qt exit)  NOUI: StartShutdown() -> CreateThread(Shutdown, NULL); -> Shutdown(NULL) -> exit(0);  What happens if StartShutdown is called in e.g. net.cpp with your patch using the NOUI version? Perhaps you can explain to me the new flow with your patch for the NOUI version. I'm not that advanced with the boost signal thing ;). Just want to ensure nothing get's broken.
457	6532199	2012-06-24T11:36:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532199	muggenhor	Diapolo	@Diapolo as you correctly seem to have noticed nothing is changed for the GUI case (outside of the RPC code).  For the NOUI case the flow is changed to: StartShutdown() -> raise QueueShutdown() signal -> CreateThread(Shutdown, NULL); -> Shutdown(NULL) -> exit(0);  In addition to that, for both GUI/NOUI the RPC code now uses the QueueShutdown() signal to stop listening for new connections: QueueShutdown() signal -> for each listening socket as acceptor -> acceptor.cancel().  As for the CreateThread call. That's registered with the QueueShutdown signal, so will get called immediately (along with other signal handlers) when the signal is raised/emitted/sent. (calling a signal is done by an immediate for-loop on all slots/handlers).
457	6532303	2012-06-24T11:56:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532303	sipa	Diapolo	It does seem to simplify the shutdown code. @Diapolo: any reason to assume things will break with this patch?  Both bitcoin-qt and bitcoind seem to shutdown fine with this, via RPC stop, UI quit, or SIGINT.
457	6532382	2012-06-24T12:11:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532382	luke-jr	muggenhor	@muggenhor basic_socket_acceptor uses [AcceptEx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms737524.aspx), which is defined in mswsock
457	6532411	2012-06-24T12:18:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532411	muggenhor	luke-jr	@luke-jr basic_socket_acceptor is already used in mainline, so the problem should exist already. Regardless, I've fixed it as well in my branch.
439	2880506	2011-11-26T08:11:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2880506	laanwj	jrmithdobbs	I agree with @jrmithdobbs here. >2GB log files are a problem in itself, but it should not simply stop logging after that, that can be dangerous and lead to non-debuggable issues.
427	2690676	2011-11-10T02:15:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690676	T-X	TheBlueMatt	@TheBlueMatt: Would you mind summarizing the results of your discussion back then here? I'm afraid that they might get lost otherwise, as no one seems to be working on them at the moment.
425	3005692	2011-12-04T09:54:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3005692	laanwj	luke-jr	The Wx UI is no longer being supported.     The 0.4.x daemon is still supported. @luke-jr provides backports of bug fixes.    Apart from that, I think it IS necessary to close issues that are no longer relevant with the current version. After all, they have been fixed in -master. Most open source projects work this way. We can't keep them in the list until 2020.
417	1638155	2011-07-23T17:56:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1638155	cdhowie	sgimenez	@sgimenez: Looks good.  I'll close this one since your patch supersedes it (and this patch was always a hack anyway).
415	3198060	2011-12-19T00:42:22Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3198060	coderrr	gavinandresen	@gavinandresen  Is this the kind of test plan you were looking for? https://gist.github.com/9ec080b2bab70372b60e    What the patch does is basically only allow SelectCoinsMinConf() to "see" the addresses you have selected to send from.  So in the case you mention it will inform the user the transaction has failed.  Same thing for any case where the total amount required is more than the sum of the addresses you have selected.
415	3326515	2012-01-01T23:45:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326515	TheBlueMatt	midnightmagic	@midnightmagic every pull request to bitcoin is asked to not break anything or not interact negatively with existing features.  Every other pull request (including ones which many would argue are much more important than this one) is subject to the same requirements.  This is a cool feature for people who want to be anonymous or just have more control over their transactions, but if it breaks or acts really weird when it finds an OP_EVAL or Send-to-IP transactions it shouldn't be merged.  AFAIK no one has even tested this with either, so it should wait.  That isn't bikesheding, thats just wait until it is known to work.  Also, the +1s are completely worthless, if this pull request is well-tested and known to work, I would think no one would have objections to it being merged, so +1s arent worth anything.
415	3326591	2012-01-02T00:03:48Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326591	TheBlueMatt	midnightmagic	@midnightmagic if any bitcoin pull request has style choices which the final pull-er doesn't agree with it wont get pulled.  This pull is not special, and it should adapt to match the stylistic choices of the pull-ers.  If you don't agree with those choices you can argue them, but if the developers dont agree, thats what forks are for.  Also, people discussing the stylistic choices is healthy, this pull should wait on more testing imo anyway, so who cares?
415	4678869	2012-03-25T02:19:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4678869	dooglus	luke-jr	@luke-jr    My changes make a huge difference to the speed.  It's almost instantaneous with them.    I removed the top blank line which I thought looked really bad.  I don't know anything about Qt, but also don't like the blank lines.    "Balance Minus Tx Fee" is (balance-MIN_TX_FEE), and:      static const int64 MIN_TX_FEE = 50000;  I'd rather not see that column.    To get addresses to the "Send From" line, select addresses (using ctrl-click or shift-click to select multiple addresses) then go to the 'Send Coins' tab.  It took me a while to realise that was how to do it too.
397	1559298	2011-07-13T01:22:45Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559298	jayschwa	tcatm.	Thanks @tcatm.    Created pull request #402 to fix this.
396	1550537	2011-07-11T22:27:13Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550537	jayschwa	TheBlueMatt	@TheBlueMatt You'd like it to not truncate within the GitHub interface here? c0b922f is the only commit message that is truncated for me. I can shorten this if this is what you're requesting.
396	1550571	2011-07-11T22:34:30Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550571	jayschwa	TheBlueMatt	@TheBlueMatt Okay, I amended that last commit to make the first line shorter. Hopefully that is what you wanted and hopefully I did it correctly =)
396	1550763	2011-07-11T23:00:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550763	TheBlueMatt	jayschwa	@jayschwa yep, that looks good, ack from here
387	6791549	2012-07-05T21:42:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6791549	jgarzik	sipa	Duplicate of issue #68 (specify wallet.dat location), really.  Will happen when we split wallet.dat out of BDB, as @sipa indicates.
359	8763125	2012-09-21T12:34:44Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763125	Diapolo	nilsja	@nilsja This is now ``Start Bitcoin on system login`` and IMO can be considered fixed! Just close this issue, if you agree.
356	1449822	2011-06-27T19:27:43Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449822	davout	TheBlueMatt	Hooray for unit testing!  @TheBlueMatt what I find the easiest way of writing tests is to actually write a failing test before correcting a bug, this way you just write tests progressively and easily prevent regressions
328	4091570	2012-02-21T23:11:19Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4091570	sipa	laanwj	@laanwj Does this issue still exist in the Qt GUI?
320	1382380	2011-06-16T16:31:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382380	sipa	roconnor	@roconnor is talking about syntactic validity, not about whether the script is a) standard or b) evaluates to true for a particular/possible input. For example if it'd contain unknown opcodes, or opcodes that require additional databytes at the end of the output script.
319	1465679	2011-06-29T09:04:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465679	davout	gmaxwell	@gmaxwell just my personal opinion, it doesn't matter that much, and consensus seems to go the other way :)  @TheBlueMatt +1
319	1465679	2011-06-29T09:04:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465679	davout	TheBlueMatt	@gmaxwell just my personal opinion, it doesn't matter that much, and consensus seems to go the other way :)  @TheBlueMatt +1
319	1472447	2011-06-30T03:22:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1472447	groffer	sacarlson	Changed:    - Rebased on latest head  - Renamed all instances of "escrow" to "multisign" because this is not really escrow in the traditional sense  - Switched to CHECKMULTISIG which did not clean things up that much because of the need to check hash160s  - Added unit tests  - Fixed some unit testing issues with the makefile.  No need to compile with GUI, add all the object files and ensure that we get the correct main().    @sacarlson - looks very interesting
319	1714884	2011-08-03T01:49:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1714884	groffer	gmaxwell	@gmaxwell - good point, and actually it already works this way.  If you have none of the keys, it will create a tx without any signatures.  To increase visibility into the signature collection process, the latest commit adds the list of addresses that have signed the tx to the output of the RPC call.    The latest commit also refactors the script Solver function so it can be used to check more complex scripts that include repeated segments.  multisign now uses this facility to perform exact script matching.  This prevents an attacker from fooling the user into thinking a tx is protected when it is put fully under the control of the attacker by a maliciously crafted script.
319	1885913	2011-08-24T01:32:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1885913	groffer	sipa	@sipa - that's actually very similar to what I had before switching to OP_CHECKMULTISIG in dc2dfbab6a0f75070fc3 (search for OP_TUCK).  I can revert to that if it's preferred.    @gavinandresen - yes, otherwise you have to distribute the pubkeys ahead of time.
319	1885913	2011-08-24T01:32:54Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1885913	groffer	gavinandresen	@sipa - that's actually very similar to what I had before switching to OP_CHECKMULTISIG in dc2dfbab6a0f75070fc3 (search for OP_TUCK).  I can revert to that if it's preferred.    @gavinandresen - yes, otherwise you have to distribute the pubkeys ahead of time.
319	1886527	2011-08-24T03:51:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1886527	groffer	gavinandresen)	(sorry for the skew - my response was before I saw last comment from @gavinandresen)    Yes, CHECKMULTISIG is okay with a malformed pubkey (CheckSig returns false, and the loop moves on to the next pubkey).    But the last CHECKMULTISIG solution above can be redeemed with just one correct signature, as coblee explains in the gist.
319	1905906	2011-08-26T01:38:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905906	groffer	sipa	I would love to implement the more general solution from @sipa if @gavinandresen is on board with that.
319	1905906	2011-08-26T01:38:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905906	groffer	gavinandresen	I would love to implement the more general solution from @sipa if @gavinandresen is on board with that.
319	1913726	2011-08-26T15:48:06Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1913726	groffer	sipa	I think it is easier to check the correctness of a relatively general solution than to have a growing set of special cases.  We already have a simple general solution in the current code that does general COUNT(a1..an) > m and is pretty easy to validate.    I will switch to back to a CHECKSIG solution since it is simpler, eliminates the need to pad (for SigOpCount workaround) and more flexible for the future.    I could also do a general RPN IsStandard - a rudimentary componentized solver is already in the code and as @sipa says, there are only a few cases to consider for each component.
319	1914171	2011-08-26T16:41:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1914171	groffer	gmaxwell	@gmaxwell good point.
300	1311072	2011-06-06T18:59:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1311072	sipa	jrmithdobbs	@jrmithdobbs: good suggestion - implemented.
300	1329964	2011-06-08T21:22:57Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329964	sipa	gavinandresen	@gavinandresen: I disagree - I don't like global variables, but doing parsing of command-line options all over the place is even worse.
271	1364462	2011-06-14T08:08:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364462	davout	nanotube	@nanotube if i get you correctly, it's hardly possible for an offline client to just create a tx from thin air without knowing which outs it's allowed to pick-up since it's not always perfectly up to date with the blockchain ?    I don't really get how the key import/export could be potentially dangerous in itself ? Maybe we could have an option that exports only public keys/only private keys/both.    I guess the big picture of the general use cases for such a features needs a little more thought.
271	1365508	2011-06-14T12:03:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1365508	nanotube	davout	@davout:  obviously, you'll have to periodically insert the latest blockchain snapshot, and run -rescan.  once you do that, it is perfectly fine to create transactions.    danger of key import export: well, where are you exporting them /to/? obviously, to take them somewhere with an internet connection. thus opening them up to compromise which you were trying to protect against via the airgap. re: public/private: in order to create outgoing transactions, you need to export the private key (to sign the transaction). exporting public keys for this purpose is useless. so you would necessarily be exposing one of your private keys, if you were attempting to do this via key import/export, rather than transaction import/export.    To me, the use case are quite clear and unambiguous. :)
271	1376717	2011-06-15T20:53:11Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1376717	davout	nanotube	@nanotube take the example of bitcoin-central, one thing that would be great would be that the internet accessible client can generate addresses at will, only have knowledge of the pubkeys so it can track incoming transfers, and have an offline client which also has the private keys in order to be able to sign transactions.    This would require a two way interaction :    - When the internet client runs low on addresses you can feed it a bunch of public keys generated on the private client   - Manually feed the blockchain to the private client    So at any time the public client has a pool of 10 to 100k public keys for which the private client knows the private keys, and whenever you want to sign transactions you feed some blocks to the private client, create a tx, and feed it to the public client for broadcast. Hopefully I'm clear and making sense :)    I think that would be an awesome level of security.
271	1382040	2011-06-16T15:50:40Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382040	nanotube	davout	@davout:  The idea of having a wallet with 'only public keys', and thereby being able to monitor your balance while keeping your private keys secure, is a great idea :) but it is a /separate/ idea (and i think it deserves its own github issue).    the ability to import/export transactions would be useful independent of this 'public wallet' functionality. the 'public wallet' functionality would also be useful (but somewhat less so) without the tx import/export functionality.
271	1456919	2011-06-28T16:36:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1456919	nanotube	gmaxwell	@gmaxwell:   ok, and once they figure out how to trigger a bug in blockchain parsing... what are they going to do? the wallet is airgapped! even if they manage to create a bunch of txns to try to spend the coins, they won't go out to the network. so with a wiping of the wallet and a restoration of a backup, all your coins are still gonna be there safe and sound.    but yes, as another complementary feature, running a public-keys-only mode has been suggested above. the tx import/export functionality, together with the public-keys-only wallet functionality, would bring us some good offline wallet capability. that said, tx import/export will be useful even without it.
271	1457221	2011-06-28T17:09:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1457221	nanotube	gmaxwell	@gmaxwell:  aah, very nice - copying private keys into signature fields is nice and sneaky - and since a user cannot easily check by inspection whether it is a signature or private key data, since they both look like gibberish to the eye... bam, you're hosed. ok, i buy that.    re: needing to know txins: yea they just need to be included with the data.     still, getting tx import/export i think is a good first step. :)
252	1258991	2011-05-29T22:43:25Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1258991	TheBlueMatt	stuhood	Chosing which nodes to make outgoing connections too could use an upgrade like this, as could general connection tactics (being more aggressive couldn't hurt this insane times for bootstrapping that have been seen recently).   @stuhood might you consider writing that into the Bitcoin client for us? Everything should be in sr/net.cpp
252	3002163	2011-12-03T18:37:47Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3002163	laanwj	stuhood	@stuhood how is the implementation coming along?  :)
252	3200366	2011-12-19T08:09:55Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3200366	stuhood	laanwj	@laanwj It's not... sorry! Got caught up in other obligations.
242	2507653	2011-10-24T18:53:59Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2507653	freewil	DataSurfer	@DataSurfer: try upgrading your client and you shall find what you're looking for :)    https://en.bitcoin.it/w/index.php?title=Original_Bitcoin_client/API_calls_list
232	1364980	2011-06-14T10:04:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364980	TheBlueMatt	sysfrog	@sysfrog Im not sure.  Though it may claim to be more secure, 1000 rounds on OpenSSL's algorithm is also very secure and I think I'd rather use a more common/well used/well analysed algorithm like OpenSSL's entire code base is.
232	1364981	2011-06-14T10:05:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364981	TheBlueMatt	dizzyd	@dizzyd Ill take a look at updating to your other recommendations when I have a chance.
232	1382673	2011-06-16T17:13:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382673	gstarnberger	TheBlueMatt	@TheBlueMatt As far as I understand scrypt the main advantage over older techniques is that it not only adds computational complexity to calculate a given key from a password, but that each calculation also requires a given amount of RAM. So it's much harder to parallelize an attack with, e.g., an ASIC, as you would need lots of RAM to do so.    But I agree with you: There have been much more reviews of the SSL code base, and so the chance of critical errors in OpenSSL is much lower compared to scrypt.
232	1382749	2011-06-16T17:24:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382749	TheBlueMatt	witkamp	@witkamp mostly because it would be a pain to store.  This patch already uses the public key as the IV for the encryption of each private key so any kind of brute force/dictionary attack is already ridiculously difficult, I dont see a major advantage to adding a random salt to be used for a given wallet (and then stored in the wallet) as to brute force a wallet, you already need to know some of the information in the wallet (namely the public keys).  But maybe others disagree?    @sysfrog OK, so its agreed then that OpenSSL key derivation is probably the best way to go?    @dizzyd Still planning on updating with some of your original recommendations, but I'm on vacation atm and dont feel like doing much coding.
232	1382749	2011-06-16T17:24:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382749	TheBlueMatt	sysfrog	@witkamp mostly because it would be a pain to store.  This patch already uses the public key as the IV for the encryption of each private key so any kind of brute force/dictionary attack is already ridiculously difficult, I dont see a major advantage to adding a random salt to be used for a given wallet (and then stored in the wallet) as to brute force a wallet, you already need to know some of the information in the wallet (namely the public keys).  But maybe others disagree?    @sysfrog OK, so its agreed then that OpenSSL key derivation is probably the best way to go?    @dizzyd Still planning on updating with some of your original recommendations, but I'm on vacation atm and dont feel like doing much coding.
232	1382749	2011-06-16T17:24:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382749	TheBlueMatt	dizzyd	@witkamp mostly because it would be a pain to store.  This patch already uses the public key as the IV for the encryption of each private key so any kind of brute force/dictionary attack is already ridiculously difficult, I dont see a major advantage to adding a random salt to be used for a given wallet (and then stored in the wallet) as to brute force a wallet, you already need to know some of the information in the wallet (namely the public keys).  But maybe others disagree?    @sysfrog OK, so its agreed then that OpenSSL key derivation is probably the best way to go?    @dizzyd Still planning on updating with some of your original recommendations, but I'm on vacation atm and dont feel like doing much coding.
232	1382789	2011-06-16T17:30:53Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382789	enmaku	TheBlueMatt	@TheBlueMatt gotcha, didn't see the public key = IV bit but it makes sense and stops dictionary/BF attacks at least as well as a random salt so I'm happy with it as a solution.
232	1383776	2011-06-16T19:49:29Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1383776	dizzyd	dizzyd	On Thu, Jun 16, 2011 at 11:24 AM, TheBlueMatt < reply@reply.github.com>wrote:  > > @dizzyd Still planning on updating with some of your original > recommendations, but I'm on vacation atm and dont feel like doing much > coding. >  No worries -- I read your last reply first and was confused. :)  D.
232	1407446	2011-06-21T02:09:36Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407446	mutantmonkey	phantomcircuit	@phantomcircuit That attack is effective against 11-round AES-256, but not full 14-round AES-256. It'd be better to increase the number of rounds (he recommends 28 or more in that article) used instead of using a smaller key size. There are plenty of attacks on AES-128 as well, many of which were published after that article was written.
220	1590491	2011-07-17T16:15:02Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1590491	sipa	lachesis	@lachesis: should be fixed
220	2150228	2011-09-20T21:46:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2150228	casascius	gmaxwell	@gmaxwell: What part of this functionality constitutes an exploit?  The idea that one should be able to have their own private keys on paper, or on bitbills, or on physical bitcoins, etc. should be something that enhances security, not detracts from it.  Please explain how security is compromised.
220	2160082	2011-09-21T19:40:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160082	enmaku	sipa	@sipa: Nice mod!  @gavinandresen re: testing: Works beautifully on Debian squeeze i686. All added functionality tested and working properly.  @casascius: +1 for adding Mini Private Key format. It should be pretty easy to implement. Also, I believe the problem @gmaxwell was addressing is that scammers can generate "secure" keypairs for their victims and then never relinquish control of the private key, thus allowing them to steal funds from those accounts later
220	2160082	2011-09-21T19:40:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160082	enmaku	gavinandresen	@sipa: Nice mod!  @gavinandresen re: testing: Works beautifully on Debian squeeze i686. All added functionality tested and working properly.  @casascius: +1 for adding Mini Private Key format. It should be pretty easy to implement. Also, I believe the problem @gmaxwell was addressing is that scammers can generate "secure" keypairs for their victims and then never relinquish control of the private key, thus allowing them to steal funds from those accounts later
220	2160082	2011-09-21T19:40:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160082	enmaku	casascius	@sipa: Nice mod!  @gavinandresen re: testing: Works beautifully on Debian squeeze i686. All added functionality tested and working properly.  @casascius: +1 for adding Mini Private Key format. It should be pretty easy to implement. Also, I believe the problem @gmaxwell was addressing is that scammers can generate "secure" keypairs for their victims and then never relinquish control of the private key, thus allowing them to steal funds from those accounts later
220	2160082	2011-09-21T19:40:18Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160082	enmaku	gmaxwell	@sipa: Nice mod!  @gavinandresen re: testing: Works beautifully on Debian squeeze i686. All added functionality tested and working properly.  @casascius: +1 for adding Mini Private Key format. It should be pretty easy to implement. Also, I believe the problem @gmaxwell was addressing is that scammers can generate "secure" keypairs for their victims and then never relinquish control of the private key, thus allowing them to steal funds from those accounts later
220	2160269	2011-09-21T19:56:38Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160269	casascius	enmaku,gmaxwell	@enmaku,@gmaxwell: I wasn't sure if keeping the private key was the concern here, because bitaddress.org appears to have been created with that concern in mind.  The generator at bitaddress.org is actually quite novel from a security perspective: the generation is entirely client-side and implemented in javascript in easy-to-read code in a single self-contained html file that contains no references to any network resources.  The QR codes are generated from scratch, client-side, as well.  This is exactly how a personal address generator should be.  One can save the single .html file to disk and use it to safely generate bitcoin addresses straight to their printer while disconnected from the internet.  To me, it's a shining example of a good idea rather than an exploit.
220	2160324	2011-09-21T20:00:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160324	enmaku	casascius	@casascius: I think the concern is that while you and I might check the source, 99% of folks won't and eventually one will crop up that phones home and makes a big database of privkeys ripe for exploitation. Realistically though this isn't our problem any more than any other product or service whose userbase is regularly phished. We can put the info out there, but people want this feature and if it's not in the main client it'll be in external tools like pywallet. We can't stop those who want to from importing addresses, merging wallets, etc. The best we can do is put up big scary popups in the GUI implementation informing folks that messing with the wallet is dangerous and if they do stupid things they'll get bad results.
220	2160427	2011-09-21T20:10:07Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160427	casascius	enmaku	@enmaku: I share the concern, and am appreciative of the fact that the author of this website makes no attempt to explain what his website does to newbies.  You have to know why you're there and what the number means, otherwise it is just a gibberish generator.  And the part I appreciate the most is simply that he has released functional code that can be clipped and put into other environments where the source is ostensibly trusted. (e.g. on MtGox, or on the LinuxCoin ISO).  Free bonus is it's platform independent.    I think the best thing that can be done to the GUI implementation would be to include this functionality where the user can get at it, and seek to be less user unfriendly, then websites like this wouldn't have a reason to exist.
220	2183844	2011-09-23T23:27:42Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2183844	sipa	casascius'	What do other people think about support for @casascius' mini private keys?
220	2184519	2011-09-24T02:02:28Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184519	casascius	sipa	@sipa: Do you suggest that a 56-character private key format that uses only uppercase be implemented instead of, versus in addition to, the 22 character format I propose?  You make a very good point, in that with such a scheme, a smaller QR code becomes possible without any question as to whether a reduction is lessening security.    My physical bitcoins aside, I believe a short-to-type private key format is highly valuable and important to Bitcoin's future.  I foresee Joe Sixpack buying bitcoins for cash at a pawn shop or check cashing place, and him receiving them in the form of a pre-made scratch-off card that gets activated (read: loaded) at the register.  Which he will then take to the Bitcoin-accepting online marketplace of his choice, and type it in for instant credit.  He may or may not be able to scan a QR code, and this Joe won't be downloading clients or block chains.  Typing 50+ mixed-case characters really sucks (done it numerous times), but especially for Joe.  Even 22 sucks, but that's already flirting with the minimum enough and there is not much that can be done about that.
220	2184564	2011-09-24T02:19:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184564	casascius	sipa	@sipa:  If you calculated half of all the minikeys and ignored all the ones that needed 717 rounds to generate, you'd only victimize those who elected to use the ones that passed on the first round.  Those who follow the best practice of only using only the ones that pass on round 717, and not on round 1, where able, are not going to be affected.  On the other hand, if you're a javascript and you need to quickly generate an address to collect a payment that's going to get swept to another wallet right away anyway, the option for a 1 round key comes in handy.    Supporting the import of these private keys in the client doesn't in and of itself encourage their unnecessary use.  The average joe user isn't going to be making the decision as to which kind of key to use, these decisions are presumably going to be made by developers who would have the intellectual means to weigh whether generating minikeys versus full keys in their app is a good design decision.  I think it would be irresponsible to put a "generate minikey" button in the client.  But I don't think it serves any useful purpose to not accept them as imports and instead demand the user use some other utility to get the job he already needs done, done.  (Having him find and download the other utility exposes him to a new class of risks by itself, far more frightening than a brute force attack on the key space).
220	2184680	2011-09-24T03:00:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184680	casascius	gmaxwell	@gmaxwell: I used the "either or" check so that there would be a means to generate a crappy key if you only need it for a short time for a crappy purpose.  In other words, if you have the means to select a key that passes the 717 check and not the 1st check, then by all means do that.  That means, to generate a "better" key, explicitly discard all the candidates that pass on the 1st check.    I agree with you that javascript is a poor environment to be generating keys, and I mention it only for ease of illustration.  Minikeys could be needed in the context of an interpreted language on a server, or on a microcontroller.  Imagine a check cashing shop that sells BTC and uses a VeriFone point-of-sale credit card machine to generate and issue a minicode on a piece of receipt tape - a very plausible application.  That little box with its 400 MHz underclocked ARM and 2MB memory might not be able to do 180000 SHA256's in any short order, and 95% says the dude buying it is probably going to redeem it that same day, so the window of opportunity for a thief is vanishingly short.    On the other hand, let's kick around as granted the conclusion that this is a bad idea.  What do we want Joe Sixpack to do instead when he acquires a private key given to him on paper?  We could make him type 51 characters instead of 22, sure.  We could make him type 26 or 30 as well.  We could make him scan a QR code, but it's likely he either has nothing to scan it with, or is almost certainly going to have to hand-key it off his cell phone and into his computer, making the QR code of no benefit and nothing more than an extra burdensome step.  I suppose it's fair to say that a minimum length keycode is universally desirable, and it's really just where to draw the line of being reckless with security.    Let me also propose an alternate solution.  The key space for my proposal is all of those who pass the SHA256 check with the magic byte "00".  What if, in addition to this, we define another key space, and that's all of those 22-character base58 codes who fail my check but pass with magic byte "01".  And then we utilize a far more computationally intensive key derivation function to compute the 32-bytes in place of SHA256, that dwarfs both SHA256 and EC in resource complexity, and define that as the best practice for generating such short keycodes.  And then still leave 717 and even 1-round SHA256 as a weak option so that microcontrollers can still stay in the game where needed.
220	2690578	2011-11-10T02:01:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690578	T-X	sipa	@sipa: "What do other people think about support for @casascius' mini private keys?"    Sounds like an extra feature which will need extra attention. Maybe it should be added as an additional commit on top later and should be further discussed under a separate pull request after the "straightforward" 51-character base58-encoded import/export version got added?
220	2690578	2011-11-10T02:01:32Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690578	T-X	casascius'	@sipa: "What do other people think about support for @casascius' mini private keys?"    Sounds like an extra feature which will need extra attention. Maybe it should be added as an additional commit on top later and should be further discussed under a separate pull request after the "straightforward" 51-character base58-encoded import/export version got added?
218	15325538	2013-03-22T22:56:31Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15325538	gavinandresen	mai77	@mai77 : does your commercial bank really let you send money anywhere in the world for less than 3 cent  ?
218	15327802	2013-03-23T00:24:23Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15327802	mai77	Gavin	If the fee is too high, which it is, bitcoin cannot be a micro payment system anymore. The fee should just disincentivize spammers.   @Gavin: I get SEPA for free, even the mTAN SMS is on the bank. If btc exchange rate is rising further, 0.0005 btc is too dear.
216	4091361	2012-02-21T23:00:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4091361	sipa	laanwj	@laanwj Does this problem still exist?
214	1491134	2011-07-03T01:32:21Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491134	jgarzik	JoelKatz	@JoelKatz:  you missed the point.  This is not an optimization, but a big step towards correcting a major design flaw.  The current RPC code executes HTTP requests in order, in a FIFO queue.    You can find examples of this logic in "My First TCP Server" style code examples, but never in any production server.  A synchronous, FIFO approach stalls all clients except the "current" one.  If the current client is, itself, stalled or slow or misbehaving, then all other clients suffer.    Asynchronous I/O + HTTP/1.1 keep alives are desperately needed to solve obvious problems seen in the field by heavy RPC users.
209	3290333	2011-12-28T12:20:20Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3290333	laanwj	midnightmagic	@midnightmagic: But if the host is remote/tunneled, wouldn't it make sense to use a fully qualified path in the first place?    I think, in general, with this API you always want to send a fully qualified path to make sure the backup ends up in the right place.     Maybe the API should be similarly changed to reject non-fully qualified paths, to prevent (extremely sensitive) backups from being written to places the user doesn't expect them.
209	5586301	2012-05-08T21:02:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586301	jgarzik	sipa	Closing.  Please either    1) Update code to require full pathname, or    2) Update code to send entire wallet via RPC, which @sipa admits is a mostly-rewrite
199	1458399	2011-06-28T19:40:12Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458399	cdhowie	pixelglow	@pixelglow: I had that in at some point and Gavin asked that I remove it.  :)  But it's a one line change to add it.    The transactions should be listed sorted by block.  So in terms of the time that the blocks were created, you can infer that from the time the transaction happened.  If all you care about is which blocks came before which blocks, then you don't even have to look at the transaction times, just their order.
199	1471413	2011-06-29T23:20:56Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1471413	pixelglow	cdhowie	@cdhowie that is an excellent idea and solves exactly the issue I have with confirmations. I can't see any other reason why someone would need to look at earlier blocks than the last, other than checking confirmations. (But then again, I'm a newbie when it comes to bitcoin :-) ).
180	1124735	2011-05-09T16:53:49Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124735	jgarzik	Gavin	NAK the mingw stuff from Matt -- it is absolutely not needed.  That stuff varies from system to system, and hardcoding it into configure _breaks_ platforms other than the one Matt's using.    @Gavin:  can do
180	1124803	2011-05-09T17:06:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124803	TheBlueMatt	jgarzik	@jgarzik Isnt that the point of autotools, it finds the stuff to include and link and uses that.  As I said, the stuff in this pull request from my repo really should never be pulled (because of what you just said)
180	1126416	2011-05-09T21:23:27Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126416	TheBlueMatt	jaromil	@jaromil Your commit was merged. https://github.com/bitcoin/bitcoin/commit/84c3fb07b0b8199c7f85c5de280e7100bad0786f is your commit in the repo.  Its the same pull methods used in every other pull, the merge shows up as done by jgarzik, but your commit is back in the repo by its original date.
180	1448987	2011-06-27T17:33:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448987	jrmithdobbs	2.68	OSX Broken? (10.6.7 xcode 4):    mith@dair:0:~/src/bitcoin$ port list autoconf automake miniupnpc boost wxWidgets-devel  autoconf                       @2.68           devel/autoconf  automake                       @1.11.1         devel/automake  miniupnpc                      @1.5            net/miniupnpc  boost                          @1.46.1         devel/boost  wxWidgets-devel                @2.9.1          graphics/wxWidgets-devel  mith@dair:0:~/src/bitcoin$ autoconf  configure.ac:124: error: possibly undefined macro: AM_INIT_AUTOMAKE        If this token and others are legitimate, please use m4_pattern_allow.        See the Autoconf documentation.  configure.ac:140: error: possibly undefined macro: AM_PROG_AS  configure.ac:229: error: possibly undefined macro: AM_OPTIONS_WXCONFIG  configure.ac:230: error: possibly undefined macro: AM_PATH_WXCONFIG  configure.ac:261: error: possibly undefined macro: AM_CONDITIONAL  mith@dair:1:~/src/bitcoin$ ./configure --prefix=/usr/local  configure: error: cannot find install-sh, install.sh, or shtool in "." "./.." "./../.."
180	1448987	2011-06-27T17:33:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448987	jrmithdobbs	1.11.1	OSX Broken? (10.6.7 xcode 4):    mith@dair:0:~/src/bitcoin$ port list autoconf automake miniupnpc boost wxWidgets-devel  autoconf                       @2.68           devel/autoconf  automake                       @1.11.1         devel/automake  miniupnpc                      @1.5            net/miniupnpc  boost                          @1.46.1         devel/boost  wxWidgets-devel                @2.9.1          graphics/wxWidgets-devel  mith@dair:0:~/src/bitcoin$ autoconf  configure.ac:124: error: possibly undefined macro: AM_INIT_AUTOMAKE        If this token and others are legitimate, please use m4_pattern_allow.        See the Autoconf documentation.  configure.ac:140: error: possibly undefined macro: AM_PROG_AS  configure.ac:229: error: possibly undefined macro: AM_OPTIONS_WXCONFIG  configure.ac:230: error: possibly undefined macro: AM_PATH_WXCONFIG  configure.ac:261: error: possibly undefined macro: AM_CONDITIONAL  mith@dair:1:~/src/bitcoin$ ./configure --prefix=/usr/local  configure: error: cannot find install-sh, install.sh, or shtool in "." "./.." "./../.."
180	1448987	2011-06-27T17:33:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448987	jrmithdobbs	1.5	OSX Broken? (10.6.7 xcode 4):    mith@dair:0:~/src/bitcoin$ port list autoconf automake miniupnpc boost wxWidgets-devel  autoconf                       @2.68           devel/autoconf  automake                       @1.11.1         devel/automake  miniupnpc                      @1.5            net/miniupnpc  boost                          @1.46.1         devel/boost  wxWidgets-devel                @2.9.1          graphics/wxWidgets-devel  mith@dair:0:~/src/bitcoin$ autoconf  configure.ac:124: error: possibly undefined macro: AM_INIT_AUTOMAKE        If this token and others are legitimate, please use m4_pattern_allow.        See the Autoconf documentation.  configure.ac:140: error: possibly undefined macro: AM_PROG_AS  configure.ac:229: error: possibly undefined macro: AM_OPTIONS_WXCONFIG  configure.ac:230: error: possibly undefined macro: AM_PATH_WXCONFIG  configure.ac:261: error: possibly undefined macro: AM_CONDITIONAL  mith@dair:1:~/src/bitcoin$ ./configure --prefix=/usr/local  configure: error: cannot find install-sh, install.sh, or shtool in "." "./.." "./../.."
180	1448987	2011-06-27T17:33:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448987	jrmithdobbs	1.46.1	OSX Broken? (10.6.7 xcode 4):    mith@dair:0:~/src/bitcoin$ port list autoconf automake miniupnpc boost wxWidgets-devel  autoconf                       @2.68           devel/autoconf  automake                       @1.11.1         devel/automake  miniupnpc                      @1.5            net/miniupnpc  boost                          @1.46.1         devel/boost  wxWidgets-devel                @2.9.1          graphics/wxWidgets-devel  mith@dair:0:~/src/bitcoin$ autoconf  configure.ac:124: error: possibly undefined macro: AM_INIT_AUTOMAKE        If this token and others are legitimate, please use m4_pattern_allow.        See the Autoconf documentation.  configure.ac:140: error: possibly undefined macro: AM_PROG_AS  configure.ac:229: error: possibly undefined macro: AM_OPTIONS_WXCONFIG  configure.ac:230: error: possibly undefined macro: AM_PATH_WXCONFIG  configure.ac:261: error: possibly undefined macro: AM_CONDITIONAL  mith@dair:1:~/src/bitcoin$ ./configure --prefix=/usr/local  configure: error: cannot find install-sh, install.sh, or shtool in "." "./.." "./../.."
180	1448987	2011-06-27T17:33:01Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448987	jrmithdobbs	2.9.1	OSX Broken? (10.6.7 xcode 4):    mith@dair:0:~/src/bitcoin$ port list autoconf automake miniupnpc boost wxWidgets-devel  autoconf                       @2.68           devel/autoconf  automake                       @1.11.1         devel/automake  miniupnpc                      @1.5            net/miniupnpc  boost                          @1.46.1         devel/boost  wxWidgets-devel                @2.9.1          graphics/wxWidgets-devel  mith@dair:0:~/src/bitcoin$ autoconf  configure.ac:124: error: possibly undefined macro: AM_INIT_AUTOMAKE        If this token and others are legitimate, please use m4_pattern_allow.        See the Autoconf documentation.  configure.ac:140: error: possibly undefined macro: AM_PROG_AS  configure.ac:229: error: possibly undefined macro: AM_OPTIONS_WXCONFIG  configure.ac:230: error: possibly undefined macro: AM_PATH_WXCONFIG  configure.ac:261: error: possibly undefined macro: AM_CONDITIONAL  mith@dair:1:~/src/bitcoin$ ./configure --prefix=/usr/local  configure: error: cannot find install-sh, install.sh, or shtool in "." "./.." "./../.."
180	1450406	2011-06-27T21:00:09Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450406	jgarzik	jrmithdobbs	@jrmithdobbs:  that last is standard.  you want AM_MAINTAINER_MODE + "make maintainer-clean" (or "make maintainerclean", I forget)    "distclean" is only supposed to return you to the state of a freshly-unpacked dist tarball
100	2369722	2011-10-11T19:02:10Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369722	laanwj	WakiMiko	As @WakiMiko mentions, this was merged with the Qt UI, closing the issue
68	1248127	2011-05-27T09:26:50Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1248127	sipa	alexgenaud	@alexgenaud: the wallet is much more than a collection of keys - it also contains transactions, accounting information, settings, and information about the block chain
68	15730620	2013-04-01T18:57:15Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15730620	gmaxwell	keystrike	@keystrike  it's likely going to get subsumed by the multiple wallet support.
68	17150936	2013-04-29T05:45:14Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17150936	laanwj	APerson241	Does that mean you're volunteering to do it @APerson241 ? Otherwise, please spare us your judgements as to how easy or difficult something is.
64	4091463	2012-02-21T23:05:00Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4091463	sipa	laanwj	@laanwj I read compatibility with NVDA was recently added?
14	4091435	2012-02-21T23:03:46Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4091435	sipa	TheBlueMatt	@TheBlueMatt BIP21 compatible URI's are now supported; can this issue be closed ?
2	17063592	2013-04-26T09:28:41Z	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17063592	Diapolo	jgarzik	@jgarzik ACK
