{"comment_text": "Can someone with a mac test this?\r\n", "comment_meta": "3297\t29052986\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29052986\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/332ebbe0f1fcc288d3046d122c1dc8dda28ccd0d for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3297\t29054433\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29054433\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/006b893cf3d4e25526811b7ef86928ab229d7497 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3296\t28985917\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28985917\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3296\t29035348\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29035348\tgavinandresen"}
{"comment_text": "ACK.\r\n\r\nI think it may make sense to generalize the logging code to add peer information when available in a consistent way, but let's do that another time.", "comment_meta": "3296\t29068706\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29068706\tsipa"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/9decfc8f8868c1c89bf5e1b9c5d3cd506485494b for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3295\t29047357\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29047357\tBitcoinPullTester"}
{"comment_text": "@Diapolo: good catch on the -1.  init.cpp doesn't mention gen/genproclimit, since generating blocks is a developer-only feature (we don't want people thinking they can successfully CPU mine on the main network).\r\n", "comment_meta": "3294\t29035854\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29035854\tgavinandresen"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/c8b74258bad399d39262ed11b892a729196cb297 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3294\t29039395\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29039395\tBitcoinPullTester"}
{"comment_text": "I think overloading the meaning of that setgenerate argument for regtest is ugly.\r\n\r\nCan't we move that functionality to an additional argument? Ideally there are as few explicit checks for what network we're working on in the code itself.", "comment_meta": "3294\t29069092\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29069092\tsipa"}
{"comment_text": "@sipa: number of threads is ignored in regtest mode already (one thread is used, and it exits as soon as a block is found).\r\n\r\nIf you like, you can think of it as \"Start N threads, and exit each as soon as a block is found.\"  That isn't actually how it is implemented, of course (blocks are found so quickly the N threads would stomp on each other's blocks)...\r\n\r\nI'm normally sympathetic to \"makes RPC ugly\" arguments, but since setgenerate is ONLY for developers/testing/debugging I think ugly is just fine here.", "comment_meta": "3294\t29119945\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29119945\tgavinandresen"}
{"comment_text": "Right, I was about to make the same comment about overloading arguments when I saw the code, another thing that I noticed is that setgenerate (regtest) and setgenerate (normal) are almost completely distinct and it may make sense to split functions instead of check the mode everywhere.\r\n\r\n...but it's only setgenerate so meh.", "comment_meta": "3294\t29127173\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29127173\tlaanwj"}
{"comment_text": "@laanwj Am I right that MaxAddressLength is not the MinAddressLength ;)? And if this is the case, what is the minimum length of a BTC address? This is not yet mergable in the current state ^^.", "comment_meta": "3286\t29006854\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29006854\tDiapolo"}
{"comment_text": "@laanwj Re-worked, can you check for correctness?", "comment_meta": "3286\t29055366\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29055366\tDiapolo"}
{"comment_text": "Looks ok, but I'm not sure we should really be checking the length of the address at all, as we have much more reliable methods to check the validity of an address.\r\n", "comment_meta": "3286\t29055864\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29055864\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ea9f6ccf449e359600ada5000858da93e9e772d2 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3286\t29056449\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29056449\tBitcoinPullTester"}
{"comment_text": "This is just a pre-check, if that fails why would we check with CBitcoinAddress anyway ;)? The big plus is that too short addresses will already mark the field as invalid, when focusing out, I like that behaviour, try it.", "comment_meta": "3286\t29061281\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29061281\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/9aeaf8c1dbc14f3421c2c5bfc9b3f34e89febd20 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3285\t28910487\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28910487\tBitcoinPullTester"}
{"comment_text": "I have more string and translations updates, but don't want to bloat this pull, so it get's merged faster.\r\n@laanwj Can you take a look please?", "comment_meta": "3285\t29007831\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29007831\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/09608542da107c8c060483e1e1f5c2dc62f262bd for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3284\t28965276\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28965276\tBitcoinPullTester"}
{"comment_text": "@sipa @gmaxwell @gavinandresen Can I get some acks here please?\r\n", "comment_meta": "3284\t28979434\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28979434\tlaanwj"}
{"comment_text": "ACK design. The code looks good, but I haven't checked all moves in detail.", "comment_meta": "3284\t28983010\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28983010\tsipa"}
{"comment_text": "ACK concept. Going to take a bit to read through. ", "comment_meta": "3284\t29030686\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29030686\tsuper3"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/35f21fdfa76666f0d54c8d4ae4e9c7bef54338d3 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3281\t28788339\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28788339\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b4d9db77faf2105a60c0e1f85c2f3dff6901df98 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3277\t28703086\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28703086\tBitcoinPullTester"}
{"comment_text": "Code changes look good", "comment_meta": "3276\t28793347\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28793347\tlaanwj"}
{"comment_text": "Rebased to trigger pulltester evaluation.", "comment_meta": "3276\t28943815\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28943815\tsipa"}
{"comment_text": "I missed the should-not-disconnect-localhost behaviour, thanks pulltester!", "comment_meta": "3276\t28948690\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28948690\tsipa"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/6a14a6e8b5c52211601258eed258cd05c2e7fd46 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3276\t28949618\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28949618\tBitcoinPullTester"}
{"comment_text": "@gavinandresen @gmaxwell Some ACKs?", "comment_meta": "3276\t29069119\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29069119\tsipa"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/fb0507fe4b3ff733386c8e3580032cfc965eec17 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3273\t28649263\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649263\tBitcoinPullTester"}
{"comment_text": "ACK to the idea, didn't test the code... but looks sane :).", "comment_meta": "3273\t28983865\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28983865\tDiapolo"}
{"comment_text": "While the motivation is appreciated...  meh, a bit disinclined to stir every printf line, and break tons of other patches, for this.\r\n", "comment_meta": "3271\t28642450\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28642450\tjgarzik"}
{"comment_text": "@jgarzik That's also why I have discouraged doing this.\r\n\r\nOn the other hand, it appears pretty trivial to rebase patches to this and it mostly (only) affects debug printing.\r\n", "comment_meta": "3271\t28644305\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28644305\tlaanwj"}
{"comment_text": "Apart from the above nits I think this is overall a good idea (printf is ugly and un-typesafe after all, so getting rid of it in favor of a safer method reduces risks. Also depending on C99 as well as C++ was a bit weird), but we may want to merge other pull requests first to prevent conflicts.", "comment_meta": "3271\t28645089\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28645089\tlaanwj"}
{"comment_text": "I'd prefer a `CLogStream(\"class\") << ...`, with \"class\" optional as well.\r\n\r\nSince this is something that is often written during debugging, maybe just call it `Log()`?", "comment_meta": "3271\t28649395\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649395\tsipa"}
{"comment_text": "Why remove error's return type?", "comment_meta": "3271\t28649428\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649428\tsipa"}
{"comment_text": "Because error always returned false, which made the fact that it returns anything confusing (until you looked up the definition).  Error was a subroutine acting like a function. \r\n\r\n> On Nov 17, 2013, at 8:29 AM, Pieter Wuille <notifications@github.com> wrote:\r\n> \r\n> Why remove error's return value?\r\n> \r\n> \u2014\r\n> Reply to this email directly or view it on GitHub.", "comment_meta": "3271\t28649828\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649828\tbrandondahler"}
{"comment_text": "@sipa and @laanwj:  following your suggestions, I have created the Log class (log.h and log.cpp).  At its core it works by multiplexing an input to multiple outputs.  \r\n\r\nSince generally flags won't change after instantiation of the class (except for changes from other threads), the constructor of the instantiation reads the different flags and decides what streams to send the data to.\r\n\r\nFor all types except strings and const char*s, the data is just passed along to the streams below (manipulators work too).  For strings and const char*s, we do a little processing based on what stream it is, specifically seeing if/when we are writing new lines.\r\n\r\n\r\nFor the error function, I removed it all-together and replaced them with log calls (\"ERROR: \" prepended, \"\\n\" appened).  If we want to make it so the \"ERROR: \" part is configurable, I would recommend a public static const char* on Log instead of making a wrapping function.", "comment_meta": "3271\t28677269\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28677269\tbrandondahler"}
{"comment_text": "Fixed problems hopefully, rebased.", "comment_meta": "3271\t28757904\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28757904\tbrandondahler"}
{"comment_text": "I prefer printf-style syntax over << \" \" << etc, so I don't like this pull.  It is 700 extra lines of code for approximately zero practical benefit that I can see.\r\n\r\n", "comment_meta": "3271\t28857110\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28857110\tgavinandresen"}
{"comment_text": "@gavinandresen:  I understand feeling that there is a lot of one-time risk involved in moving from printf to stream style conversion; however, I completely disagree that there is no practical benefit.\r\n\r\n1)  This makes maintenance easier\r\n\r\nThe code is much less complex overall.  This removes some ugly compatibility #defines, attribute markings, and even hacks.\r\n\r\n2)  Platform independence\r\n\r\nWe are no longer relying on the platform to have a correct/compliant printf function.  Instead we are relying on the C++ standard library implementation which we already rely on since we use C++ in the first place.  This is specifically a problem for int64_t since Windows doesn't use the same syntax as Linux unless you use some compatibility defines.\r\n\r\n3)  The way it reads\r\n\r\nStreams read fluently instead of requiring the user to place the parameters in the correct place.  Consider:\r\n\r\n    return strprintf(\r\n            \"HTTP/1.1 %d %s\\r\\n\"\r\n            \"Date: %s\\r\\n\"\r\n            \"Connection: %s\\r\\n\"\r\n            \"Content-Length: %\"PRIszu\"\\r\\n\"\r\n            \"Content-Type: application/json\\r\\n\"\r\n            \"Server: bitcoin-json-rpc/%s\\r\\n\"\r\n            \"\\r\\n\"\r\n            \"%s\",\r\n        nStatus,\r\n        cStatus,\r\n        rfc1123Time().c_str(),\r\n        keepalive ? \"keep-alive\" : \"close\",\r\n        strMsg.size(),\r\n        FormatFullVersion().c_str(),\r\n        strMsg.c_str());\r\n\r\nBecomes\r\n\r\n    ossReply << \"HTTP/1.1 \" << nStatus << \" \" << cStatus << \"\\r\\n\"\r\n             << \"Date: \" << rfc1123Time() << \"\\r\\n\"\r\n             << \"Connection: \" << (keepalive ? \"keep-alive\" : \"close\") << \"\\r\\n\"\r\n             << \"Content-Length: \" << strMsg.size() << \"\\r\\n\"\r\n             << \"Content-Type: application/json\\r\\n\"\r\n             << \"Server: bitcoin-json-rpc/\" << FormatFullVersion() << \"\\r\\n\"\r\n             << \"\\r\\n\"\r\n             << strMsg;\r\n    return ossReply.str();\r\n\r\nLikewise logging lines stand out just like normal cout lines (given the new Log class).\r\n\r\n____\r\n\r\nAll of this being said, I will agree that the shorter changes, such as:\r\n\r\n    std::string tmpfn = strprintf(\"peers.dat.%04x\", randv);\r\n\r\nBecoming\r\n\r\n    std::ostringstream tmpfn(\"peers.dat.\");\r\n    tmpfn << std::hex << std::setfill('0') << std::setw(4) << randv << std::dec << std::setfill(' ');\r\n\r\nWould probably work better off as a boost::format.  The reason I started out with not using boost::format more is because I personally prefer to keep dependence on boost to a minimum.  If y'all disagree I do think it could make things less cluttered when making simple, smalls strings.  \r\n\r\nLikewise creating formatting functions for specific types of data would allow us to change the output formatting of the data in one place instead of across a bunch of files, while fitting in with the stream style.  Using the above function again, having a static call makes things cleaner all-together:\r\n\r\n    ...\r\n    std::string tmpfn = CAddrDB::PeersFilePath(randv);\r\n    ...\r\n\r\n    std::string CAddrDB::PeersFilePath(unsigned short randv)\r\n    {\r\n        std::ostringstream tmpfn();\r\n        tmpfn << \"peers.dat.\" << std::hex << std::setfill('0') << std::setw(4) << randv;\r\n        return tmpfn.str();\r\n    }\r\n\r\nFurther we can make custom manipulators to reduce duplication of code:\r\n\r\n    ios_base& hex04(ios_base& ib)\r\n    {\r\n        ib << std::hex << std::setfill('0') << std::setw(4);\r\n        return ib;\r\n    }\r\n    \r\n    std::string CAddrDB::PeersFilePath(unsigned short randv)\r\n    {\r\n        std::ostringstream tmpfn();\r\n        tmpfn << \"peers.dat.\" << hex04 << randv;\r\n        return tmpfn.str();\r\n    }\r\n", "comment_meta": "3271\t28862460\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28862460\tbrandondahler"}
{"comment_text": "On another note, does anyone have any idea why pull tester is failing?  The only lines that look bad are:\r\n\r\n    =============\r\n    1 test passed\r\n    =============\r\n    make[4]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\r\n    make[3]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\r\n    make[2]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\r\n    make[1]: Leaving directory `/mnt/bitcoin/linux-build/src'\r\n    make  check-local\r\n    make[2]: Entering directory `/mnt/bitcoin/linux-build'\r\n    /bin/mkdir -p qa/tmp\r\n    make[2]: *** [check-local] Killed\r\n    make[2]: Leaving directory `/mnt/bitcoin/linux-build'\r\n    make[1]: *** [check-am] Error 2\r\n    make[1]: Leaving directory `/mnt/bitcoin/linux-build'\r\n    make: *** [check-recursive] Error 1\r\n    tail: `/mnt/bitcoin/linux-build/.bitcoin/regtest/debug.log' has become inaccessible: No such file or directory\r\n\r\nFrom http://jenkins.bluematt.me/pull-tester/fd77e459e07f3684c39b7861e758028ace756456/test.log .  Whereas a successful one shows the following at the same spot:\r\n\r\n    =============\r\n    1 test passed\r\n    =============\r\n    make[4]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\r\n    make[3]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\r\n    make[2]: Leaving directory `/mnt/bitcoin/linux-build/src/test'\r\n    make[1]: Leaving directory `/mnt/bitcoin/linux-build/src'\r\n    make[1]: Entering directory `/mnt/bitcoin/linux-build'\r\n    make  check-local\r\n    make[2]: Entering directory `/mnt/bitcoin/linux-build'\r\n    /bin/mkdir -p qa/tmp\r\n    tail: write error: Broken pipe\r\n    tail: write error", "comment_meta": "3271\t28862686\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28862686\tbrandondahler"}
{"comment_text": "@gavinandresen Agreed, the problem isn't with printf-style *syntax*, it's with the printf function  - which (in our usage) isn't part of the C++ standard, so we had a dependency on C99-like formats that broke down on Windows without special mingw defines. Also it's not type safe, easy to mess up the stack with some wrong % char, and uses a variable-number-of-parameters hack which breaks down for std::string so a dummy '0' argument is inserted with a macro (the `real_strprintf` etc...). \r\n\r\nMany reasons to get rid of the sprintf hacks. But boost::format would be better in that regard as it mostly keeps printf syntax but is typesafe and has none of those mentioned drawbacks.\r\n\r\nI don't think the actual risk is that large, at most some debug messages will be formatted differently.\r\n\r\nIt could map pretty much one-on-one. Could we do this without adding (so many) lines?\r\n", "comment_meta": "3271\t28867775\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28867775\tlaanwj"}
{"comment_text": "Also -- do we really need our own class for handling time? (bitcointime.cpp/h) How is this related to the subject of this pull?\r\nReducing depenency on boost is not a goal! If boost offers some functionality, please use that instead of rolling our own.\r\n\r\nThis changes way too many things, please keep it focused.\r\n\r\n", "comment_meta": "3271\t28867859\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28867859\tlaanwj"}
{"comment_text": "@laanwj I would not consider the use of ostringstream as \"rolling my own\", namely because that is the only way provided by the C++ standard library to convert random types to strings and vice versa.\r\n\r\nIf you are talking about the Log class, the first commit started off without it, but it was added because it simplifies the actual logging process (the business logic that goes in to putting type T data into X, Y, and Z streams) and it makes reading the actual print lines prettier:\r\n\r\n    Log() << something << \" something else\"; \r\n\r\nvs \r\n\r\n    LogPrint(str(boost::format(\"%d something else\") % something)); ).", "comment_meta": "3271\t28887312\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28887312\tbrandondahler"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ce86ee002d20c7a77cf25bb4468ffd4f62667469 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3271\t29126107\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29126107\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/07dcfd03aedb0acf137950d5d82cc3c1959867f6 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3265\t28616175\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28616175\tBitcoinPullTester"}
{"comment_text": "<pre>\r\ntail: write error: Broken pipe\r\ntail: write error\r\n</pre>\r\n\r\nOnce more an unrelated error.", "comment_meta": "3265\t28616760\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28616760\tDiapolo"}
{"comment_text": "@laanwj Agreed, will rework this.", "comment_meta": "3265\t28895900\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895900\tDiapolo"}
{"comment_text": "Closing until re-worked :).", "comment_meta": "3265\t29070610\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29070610\tDiapolo"}
{"comment_text": "@laanwj Any idea what is causing this build error, I don't understand the problem.\r\n\r\nEdit: Was caused by paymentservertest.cpp, because Gavin called eventFilter() directly, which isn't possible anymore after this pull.", "comment_meta": "3254\t28515712\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28515712\tDiapolo"}
{"comment_text": "Damn:\r\n<pre>\r\npaymentservertests.cpp: In function SendCoinsRecipient handleRequest(PaymentServer*, std::vector<unsigned char, std::allocator<unsigned char> >&):\r\npaymentservertests.cpp:49: error: no matching function for call to QCoreApplication::sendEvent(QObject&, QFileOpenEvent&)\r\n/usr/include/qt4/QtCore/qcoreapplication.h:214: note: candidates are: static bool QCoreApplication::sendEvent(QObject*, QEvent*)\r\npaymentservertests.cpp:49: error: return-statement with no value, in function returning SendCoinsRecipient\r\n</pre>\r\n\r\nMy fault, the function wants a pointer not an object ^^.", "comment_meta": "3254\t28684037\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28684037\tDiapolo"}
{"comment_text": "I hope this is the last time now -_-.", "comment_meta": "3254\t28700606\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28700606\tDiapolo"}
{"comment_text": "Wohoooo :)", "comment_meta": "3254\t28704118\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28704118\tDiapolo"}
{"comment_text": "@laanwj Merge-ready or anything more to be done here?", "comment_meta": "3254\t28895984\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895984\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/21193673e9cc343058192471bc10009f30beba36 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3254\t28906703\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28906703\tBitcoinPullTester"}
{"comment_text": "Tested on OSX 10.9 with homebrew:\r\nNo more 'No working boost sleep implementation found' error during ./configure\r\nBuilds fine.", "comment_meta": "3242\t29070634\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29070634\tcodeboost"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/5e4494c62a3bc5d3334f04fb5bf8884a0591f8f0 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3242\t29071845\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29071845\tBitcoinPullTester"}
{"comment_text": "The verbose flag seems needlessly redundant with getblocktemplate...", "comment_meta": "3239\t28261928\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28261928\tluke-jr"}
{"comment_text": "@luke-jr getblocktemplate always produces a subset of mempool\r\n", "comment_meta": "3239\t28261988\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28261988\tjgarzik"}
{"comment_text": "Not always...? Wouldn't the goal of a good mempool be to only keep transactions you'd be putting in templates?", "comment_meta": "3239\t28262223\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28262223\tluke-jr"}
{"comment_text": "@luke-jr Yes, always.  Sometimes subset == set, but usually not.  The mempool will always store more than **one** block's worth of transactions.  getblocktemplate only returns up to 1MB, etc.", "comment_meta": "3239\t28262901\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28262901\tjgarzik"}
{"comment_text": "Could just add some non-standard extensions to bitcoind getblocktemplate to request more, but meh.", "comment_meta": "3239\t28264035\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28264035\tluke-jr"}
{"comment_text": "Nit: CTxMemPoolEntrys should be CTxMemPoolEntries", "comment_meta": "3239\t28273393\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28273393\tDiapolo"}
{"comment_text": "Remove EraseTransaction() while we're at it; only tx replacement uses that code. I don't see any way it could have gotten much if any testing in the past.", "comment_meta": "3239\t28300218\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28300218\tpetertodd"}
{"comment_text": "It'd be better if ComputePriority() was not a part of CTransaction - priority calculations are node policy rather than consensus critical and we'd be better off if such code was kept out of the core data structures to make code review easier in the future.", "comment_meta": "3239\t28300759\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28300759\tpetertodd"}
{"comment_text": "Rebased, extended the help, and tweaked to rename verbose output 'dependson' to 'depends' to be more consistent with getblocktemplate, and to always output a 'depends' key (will be an empty array if no dependencies).\r\n\r\nRE: getblocktemplate: I seem to remember having the same argument when getrawmempool was pulled, and the decision remains getrawmempool is valuable.\r\n\r\nRE: removing EraseTransaction/moving ComputePriority:  another clean-up pull request would be fine, I'm busy working on higher priorities.\r\n\r\nRE: CTxMemPoolEntries:  please read the code, and ideally compile and test it, before commenting.", "comment_meta": "3239\t28455681\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28455681\tgavinandresen"}
{"comment_text": "ACK apart from that, appears to work as expected, and code changes look good", "comment_meta": "3239\t28576085\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28576085\tlaanwj"}
{"comment_text": "@laanwj: good catch, using ValueFromAmount to report fees now.", "comment_meta": "3239\t28864476\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28864476\tgavinandresen"}
{"comment_text": "Testing on my smartfee branch (which save/restores the mempool), I noticed transactions with repeated txids in the depends array because they depends on multiple outputs from previous transactions.\r\n\r\nI decided to fix that by unique-ifying the depends array. The alternative would be to report \"txid:vout\" or something more complicated/verbose like  [ { \"txid: \" .... \", \"vout\" : 11 }, { ... } ]\r\n\r\nBut I think just pointing to the unconfirmed parent txids is the right thing to do. You can use getrawtransaction for the child to work out exactly which txins are unconfirmed.", "comment_meta": "3239\t28865423\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28865423\tgavinandresen"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/2ad685e4faaef9d45ff69eaf3f2b95f827b2557b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3239\t28866572\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28866572\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b0c2b169a2fef4655f617bede0d2486cc00658dd for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3229\t28165258\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28165258\tBitcoinPullTester"}
{"comment_text": "I'd propose to implement this slightly differently, more straightforward: set the default to invalid values (such as `-1` or MAXINT or `0`, whatever is most useless) then check for valid values in IsMiningSetup() instead of probing the arguments.\r\n", "comment_meta": "3229\t28190386\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28190386\tlaanwj"}
{"comment_text": "That'd probably make it clearer too, okay...", "comment_meta": "3229\t28230109\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28230109\tluke-jr"}
{"comment_text": "@laanwj That'd need making the variables globals again.. so maybe this is better after all?", "comment_meta": "3229\t28233487\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28233487\tluke-jr"}
{"comment_text": "Ugh, yes I now see that CreateNewBlock also queries and parse the arguments every time. That's the same as using globals, just in a hidden way.\r\nAt least I now understand your reasoning for doing it that way in IsMiningSetup.", "comment_meta": "3229\t28236085\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28236085\tlaanwj"}
{"comment_text": "The obvious downside of this approach being ..... once a miner has set them, we lose the ability to select smarter defaults, because whatever they pick could end up being used indefinitely.", "comment_meta": "3229\t28314793\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28314793\tmikehearn"}
{"comment_text": "\"We\" shouldn't be setting defaults anyway. That's the point.", "comment_meta": "3229\t28320534\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28320534\tluke-jr"}
{"comment_text": "If we think that the common settings become wrong for an option there is always the possibility of just renaming the option to force resetting it.", "comment_meta": "3229\t28321718\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28321718\tgmaxwell"}
{"comment_text": "Nice work, but I tend to disagree storing in QSettings, as this is at least on Windows stored in the registry. Would be ugly and bad practise to do this IMHO.", "comment_meta": "3207\t27799039\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27799039\tDiapolo"}
{"comment_text": "I don't see why this would not be stored in the wallet?\r\n\r\nEDIT: misread, this is about requested payments - not sent ones.", "comment_meta": "3207\t27834202\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27834202\tsipa"}
{"comment_text": "The wallet stores both \"from\" and \"to\" transactions, so storing both \"from\" and \"to\" payment requests makes sense to me (I believe we're storing neither right now).\r\n", "comment_meta": "3207\t27842886\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27842886\tgavinandresen"}
{"comment_text": "@sipa I guess it could be stored in the wallet, but that means there will need to be a core interface for storing arbitrary data (that the core doesn't know the format of) in the wallet.\r\n\r\n@gavinandresen Yes, storing incoming payment requests would make sense too, and could be done in a similar way but somewhere else in the UI\r\n", "comment_meta": "3207\t27847653\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27847653\tlaanwj"}
{"comment_text": "@gavinandresen Thinking about it, we should store *incoming* payment requests in the transaction metadata and simply show them in the transactions list. \r\nWe can't do the same for *outgoing* payment requests at least until the recipient pays them, maybe they could be correlated and stored in the transaction list then, but until the request is paid it must be in this separate list.", "comment_meta": "3207\t27864089\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27864089\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/666893b1facfbc748de760e6aeb6bc26bd3797f3 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3207\t28790786\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28790786\tBitcoinPullTester"}
{"comment_text": "This should be rather uncontroversial, no?", "comment_meta": "3178\t28312917\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28312917\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/8bc4e0288be05d7fd91c8d94ceff624671d179d0 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3178\t28509890\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28509890\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3178\t28511577\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28511577\tsipa"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/f2949a9c3f26f84c4611c8dde44d5567605700a7 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3157\t27153603\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153603\tBitcoinPullTester"}
{"comment_text": "As I mentioned somewhere else: AddressBookPage is supposed to be a standalone dialog that can be launched from anywhere, so I'd prefer not making it dependent on connecting signals.\r\n", "comment_meta": "3157\t27468012\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27468012\tlaanwj"}
{"comment_text": "Yeah, I'm going to rework this, to not use ``mesage()``, that way as it seems impossible to do it in a clean way and it's a standalone dialog, as you also said. It's a tad sad that my invention breaks the coding-rules somehow, but I'm happy you appreciated this :-).\r\n\r\nWhat about a ``message()`` function (not signal) in GUIUtil, perhaps nearly a copy of the one in BitcoinGUI (so we have a unified user experience and API)? Just a quick thought...", "comment_meta": "3157\t27502703\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27502703\tDiapolo"}
{"comment_text": "@Diapolo I suppose what could work is pass in the Notificator object, and move the message() function/slot there. A global function in GUIUtil would not work, it wouldn't have access to the Notificator.\r\n", "comment_meta": "3157\t28200589\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28200589\tlaanwj"}
{"comment_text": "@laanwj How should I access the notificator pointer, it's included in BitcoinGUI also :-/.", "comment_meta": "3157\t28411342\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28411342\tDiapolo"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/fa94a2ee7a3610c285ba57e02938aa05172cf5dd for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3147\t27037944\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27037944\tBitcoinPullTester"}
{"comment_text": "Looks pretty good, based on a 60-second, untested review ;p\r\n", "comment_meta": "3147\t27041594\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27041594\tjgarzik"}
{"comment_text": "Agree with the first two commits; --with-system-leveldb is a bit controversial, as it may nudge distro packagers the wrong way. There's a good reason that we include our own copy of leveldb.\r\n", "comment_meta": "3147\t27079808\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27079808\tlaanwj"}
{"comment_text": "I have to agree that --with-system-leveldb sends the wrong message to distributions.", "comment_meta": "3147\t27124773\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27124773\twtogami"}
{"comment_text": "Perhaps an AC_WARN would be appropriate.", "comment_meta": "3147\t27127144\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27127144\tluke-jr"}
{"comment_text": "@luke-jr you know just as well as us that they'll just ignore that\r\n", "comment_meta": "3147\t27192595\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27192595\tlaanwj"}
{"comment_text": "This is _not_ ready for merging yet. I've done some basic testing\u2014 instrumenting announcement and seeing that it worked like expected, but before I put a lot more time into testing it (setting up a simulated network and such) I wanted to get some feedback on the general approach of giving the peer back the address it told us.\r\n\r\n(also, this patch was bluntly forward ported from the older version that I tested\u2014 I've not run this particular version, though it does build)\r\n\r\nThere is a bunch of code motion I've included here for some of the heuristics in deciding to use the our current estimate vs the peers report. I'm not married to it, and perhaps it would be better removed and a more simpler behavior adopted.\r\n ", "comment_meta": "3088\t26229036\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229036\tgmaxwell"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/a851bf84f6a2ff95bd86b23e55bb0647f5f47188 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3088\t26229349\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229349\tBitcoinPullTester"}
{"comment_text": "This seems like a priority because of the privacy and reliability implications. Will donate boxes and/or cloud time for testing. Is there anything in the request that let's the service know that its a Bitcoin node asking for an IP?\r\n\r\nWhat will happen if both of the listed services 'checkip.dyndns.org' and 'www.showmyip.com' are down?", "comment_meta": "3088\t26229726\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229726\tsuper3"}
{"comment_text": "Bitcoind advertizes as 'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1)', so no - it doesn't really let the site know anything. Of course, there could be other data that gives it away (combination with http protocol, closing of connections, timings, ...).\r\n\r\nIf the external ip services are down, then we don't know our own IP and can't advertize it. No big deal, but makes your node hard or impossible to find for others.", "comment_meta": "3088\t26229849\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229849\tsipa"}
{"comment_text": "Well since these seem to be well used services that should make it fairly difficult. Volunteer services won't help either because they will only be used Bitcoin (which makes it easy to just run some honeypot nodes), and will require maintaining some sort of list of available look-up services. \r\n\r\nSeems like the immediate band-aid would be adding some more services until this method is readying for merging. ", "comment_meta": "3088\t26230098\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230098\tsuper3"}
{"comment_text": "@super3  We haven't considered it super high priority in the past because there are many other signals that give away a Bitcoin node on the network... and if you turn off listening or switch to using tor you turn off most (all in the case of Tor, hopefully) of them as as well as this one.\r\n\r\nThere were several other points of network centralization before, and we've been chewing away at them. This is the next obvious one to get rid of...", "comment_meta": "3088\t26230868\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230868\tgmaxwell"}
{"comment_text": "I need to look closer at the code changes, but I have little doubt this will be ready for 0.9.", "comment_meta": "3088\t26230885\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230885\tsipa"}
{"comment_text": "This is nice to have, if we don't need to depend on centralized services we shouldn't.\r\n", "comment_meta": "3088\t26327878\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26327878\tlaanwj"}
{"comment_text": "Approach sounds good. Can you write a test plan?\r\n", "comment_meta": "3088\t26386367\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26386367\tgavinandresen"}
{"comment_text": "Lying about a user-agent isn't gonna help anyway (trust me, I spent years shooting ua-forging fish in a barrel). The decentralisation aspects are more important.", "comment_meta": "3088\t26507993\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26507993\tmikehearn"}
{"comment_text": "ACK on approach.\r\n\r\nThough it's worth considering how we could have had a system of signed per-node identities where you would sign your advertisement - including what you think is your IP/tor/whatever - and in addition to that nodes that relayed your advertisement could sign their own messages saying what they thought your globally reachable address was. But that's just food-for-thought - what you're doing is the right thing to do for now.", "comment_meta": "3088\t26526820\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26526820\tpetertodd"}
{"comment_text": "Why would one want signed per-node identities? For what would nodes want to identify themselves at all, isn't the idea that nodes are as indistinguishable and exchangeable as possible?\r\n", "comment_meta": "3088\t26596329\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26596329\tlaanwj"}
{"comment_text": "@laanwj One example is for anti-sybil protection by associating an identity with p2pool proofs-of-work, or by simply purchasing a fidelity bond. Once you make the identity expensive to obtain, you can then use fraud proofs - for instance rather than having an expensive UTXO commitment system and associated soft-fork you can just as easily ask nodes to make signed statements as to what transactions match a given filter, and if a different peer gives a different answer, construct a compact proof that one of them was lying and thus destroy that identity. This will work particularly well in conjunction with micropayment systems for SPV node services.", "comment_meta": "3088\t26607973\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26607973\tpetertodd"}
{"comment_text": "Would this be more informative if it logged when it transmits an advertisement?  Otherwise it is difficult to tell if it is working at all.  The log could also be informative in showing you if a peer lied to you.\r\n\r\nDoes bitcoin currently handle multi-homing?  The logging would also be informative here to show advertisements of multiple external IP's.\r\n\r\nhttps://github.com/wtogami/bitcoin/commits/0.8.5-externalip\r\nBackport to Bitcoin 0.8.5.", "comment_meta": "3088\t27144211\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27144211\twtogami"}
{"comment_text": "```receive version message: version 70001, blocks=266272, us=XX.XX.XX.XX:8333, them=0.0.0.0:0, peer=YY.YY.YY.YY:60127```\r\n\r\nThe ```0.0.0.0``` is expected and seemingly harmless when the remote host is using the externalip patch.  But if they explicitly set their own public address with externalip= it continues to be self-reported as 0.0.0.0.  Harmless but expected?", "comment_meta": "3088\t27159683\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27159683\twtogami"}
{"comment_text": "Both. The design here is specifically to not start advertising whatever addresses untrusted peers give us to other peers.", "comment_meta": "3088\t27159709\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27159709\tgmaxwell"}
{"comment_text": "https://bitcointalk.org/index.php?topic=320695.0\r\nIf end-users want to help testing of this patch, a backport is included in this build of Bitcoin 0.8.5", "comment_meta": "3088\t27354043\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27354043\twtogami"}
{"comment_text": "This would constitute a soft-fork, as IsPushOnly is called by P2SH VerifyScript. Closing until I find a workaround.", "comment_meta": "3025\t24959971\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24959971\tsipa"}
{"comment_text": "Why not make a generic \"IsCanonicalPushDatas\" that just checks arbitrary scripts for pushdata canonicality and apply it to both scriptPubKey and scriptSig?", "comment_meta": "3025\t24962556\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962556\tpetertodd"}
{"comment_text": "@petertodd You basically mean applying the canonicality test to output scripts as well, without enforcing it being push-only. Sounds reasonable.", "comment_meta": "3025\t24962718\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962718\tsipa"}
{"comment_text": "Yup, and the same function can be used for scriptSigs because other mechanisms force them to be only pushdata's anyway.", "comment_meta": "3025\t24962988\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962988\tpetertodd"}
{"comment_text": "@petertodd Done.", "comment_meta": "3025\t25044403\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25044403\tsipa"}
{"comment_text": "@petertodd Nice catch. I removed it while investigating a tester error, that lead to discovering IsPushOnly() was used in P2SH VerifyScript. I shouldn't have left that change in, though. Removed.", "comment_meta": "3025\t25045309\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25045309\tsipa"}
{"comment_text": "@sipa Cool. Fix the OP_n case and add more tests and I think this is done.", "comment_meta": "3025\t25046914\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25046914\tpetertodd"}
{"comment_text": "@petertodd If we both allow OP_n and single-byte pushes, malleability will remain (at least for non-P2SH multisigs with less than 17 keys). Is it really a problem?", "comment_meta": "3025\t25320576\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320576\tsipa"}
{"comment_text": "@sipa As I said in my comment before IsStandard() tests that OP_n is used where appropriate, so there isn't any way to use a non-standard pushdata anyway. Just leave that decision until later - mark it with a \"TODO\" for now, and do note in that comment that OP_1NEGATE and OP_RESERVED would have to be handled correctly in addition to the more obvious OP_{0,1-16}\r\n\r\nBesides, what do you mean by \"malleability\" in your comment about non-P2SH multisigs anyway? The scriptPubKey is hashed; no-one other than the sender can change it.", "comment_meta": "3025\t25321242\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321242\tpetertodd"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/930491c2cf5089e1ca348614ceee11f7c0e1382b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3025\t25679118\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25679118\tBitcoinPullTester"}
{"comment_text": "@petertodd Right now, this is just an IsStandard() test as a first step, but my intention is certainly to try to get this (or something similar) as a network rule (requiring a soft fork). Together with a few other changes, I believe it's possible to kill malleability entirely (only for transactions that don't choose to give it up through different hashtypes, of course).\r\n\r\nFrom that perspective, I don't think there is any way around making sure that every potential data push has exactly one representation in the script language. If we can't accept such a strict rule even for just IsStandard(), then there is certainly no way to get it as a network rule, and this whole effort becomes less useful.", "comment_meta": "3025\t26673298\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26673298\tsipa"}
{"comment_text": "I know that, I'm just saying that in this case the rule is meaningless for now because it's a case that can't happen in a standard transaction scriptSig, and we should at least update the rest of the reference client source code to follow this new standard first.", "comment_meta": "3025\t26685857\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26685857\tpetertodd"}
{"comment_text": "Trying to implement a \"pushing a byte between 0x00 and 0x10 uses OP_n, rather than 1-byte data pushes\" rule, I hit an odd problem: the coinbase genesis is non-canonical...", "comment_meta": "3025\t26761908\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26761908\tsipa"}
{"comment_text": "Heh, I was waiting for you to notice that. :)", "comment_meta": "3025\t26834021\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26834021\tpetertodd"}
{"comment_text": "Summary fail. This attempts to fix an issue in bitcoin-qt where checking or unchecking the \"Connect through SOCKS proxy\" box does not work as expected. It's easily reproduced by enabling/disabling and clicking 'apply'.", "comment_meta": "3005\t24557386\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24557386\ttheuni"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b07659bf46deb7e81428aea64ac600975a6360ed for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3005\t24558368\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24558368\tBitcoinPullTester"}
{"comment_text": "That whole proxy stuff in current Bitcoin-Qt settings is IMHO a mess, because we try to change it on the fly, which doesn't even work for bitcoind, you may want to take a lookt at #2612.", "comment_meta": "3005\t24565713\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24565713\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/e71d6f4147d39c209e54c6769c6791880027fe6e for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2975\t23810843\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23810843\tBitcoinPullTester"}
{"comment_text": "Note that @gmaxwell was unable to get this PR to work for him, so there is a bug in there somewher.\r\n\r\n@gavinandresen CTransaction method works\r\n", "comment_meta": "2975\t24034666\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24034666\tjgarzik"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/a80864e8c8fe19101e54287a770769784ddafd17 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2966\t23631269\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23631269\tBitcoinPullTester"}
{"comment_text": "@pstratem I've forgotten what we've discussed related to this. Do you remember, and is this still the suggested change?", "comment_meta": "2966\t25320852\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320852\tsipa"}
{"comment_text": "Can you elaborate on \"For various reasons it doesn't actually accomplish this goal\" ?\r\n\r\nI worry that this pull will break a coinjoin implementation that uses the raw transactions API, but from your comment it sounds like that might be broken anyway ( @gmaxwell : have you done any testing with using other people's unconfirmed inputs to build a coinjoin transaction? )\r\n", "comment_meta": "2966\t25677418\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25677418\tgavinandresen"}
{"comment_text": "@pstratem, @gmaxwell and I discussed this prior to this pull request.\r\n\r\nIt seems that currently, vtxPrev is only ever pulled from your wallet, meaning there is no way that something in vtxPrev is something you don't already have. After some digging, we found out this was likely because of the original pay-to-IP protocol, so that unconfirmed dependencies get sent out to receivers automatically (mental note: the payment protocol could use this too). In its current state it is both useless and inefficient (there is a degree of duplication, if you have wallets with many unconfirmed transactions). The solution was to remove it altogether now, and perhaps later re-introduce it when it's useful, in a saner way (without duplication, for starters).", "comment_meta": "2966\t25683726\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683726\tsipa"}
{"comment_text": "@sipa this is still the suggested change, however at least one bug was revealed and there are likely more that I have not noticed\r\n\r\ngetbalance conf=0 can be negative if you have transactions which pay to an IsMine address", "comment_meta": "2966\t25683876\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683876\tpstratem"}
{"comment_text": "I just noticed that bug above is actually currently possible to trigger if you happen to have a wallet where vtxPrev has at least one correct entry.  Assuming this worked correctly at some point that would be something to fix also.", "comment_meta": "2966\t26006682\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26006682\tpstratem"}
{"comment_text": "> mental note: the payment protocol could use this too\r\n\r\nThe payment protocol was designed with this in mind from the start :) That's why you are allowed to submit multiple transactions in a Payment message submission.", "comment_meta": "2966\t27571913\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27571913\tmikehearn"}
{"comment_text": "This is my first time doing a patch for bitcoin, so please scrutinise and tell me if I've done something wrong :)\r\n\r\nThanks", "comment_meta": "2910\t22871772\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22871772\tashleyholman"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/720d7a084dfa7a303ad6ea187087b17a0e06ac35 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2910\t22874576\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22874576\tBitcoinPullTester"}
{"comment_text": "NACK, this makes Bitcoin centralized.\r\n\r\nEdit: Nevermind, misread.", "comment_meta": "2910\t22876870\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22876870\tluke-jr"}
{"comment_text": "Isn't there a rule already that prevents storing blocks before the last checkpoint?\r\n\r\nLuke: if the rule was \"Do not send blocks in a forked chain more than 2016 blocks behind the main chain\", would that also be 'centralized'?", "comment_meta": "2910\t22877260\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22877260\tsipa"}
{"comment_text": "Nevermind, I misread this. Thought it was non-sending/storing pre-checkpoint blocks *even in* the main chain.", "comment_meta": "2910\t22877843\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22877843\tluke-jr"}
{"comment_text": "There is no prevention to stop the storing of blocks prior to last checkpoint.  The closest thing is a check to see if the block's proof-of-work could possibly be valid given the time elapsed since last checkpoint, which allows for a worst case 4x dropoff in difficulty for every 2 weeks since the checkpoint.\r\n\r\n@luke-jr does this introduce any centralisation that's not already there?  See these lines that are already in the AcceptBlock() code:\r\n\r\n```C++\r\n        // Check that the block chain matches the known block chain up to a checkpoint\r\n        if (!Checkpoints::CheckBlock(nHeight, hash))\r\n            return state.DoS(100, error(\"AcceptBlock() : rejected by checkpoint lock-in at %d\", nHeight));\r\n```\r\nso any attempt to extend a fork prior to a checkpoint will hit up against that check anyway, and won't be able to continue.", "comment_meta": "2910\t22878172\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22878172\tashleyholman"}
{"comment_text": "I have done a test and confirmed that you can send a min difficulty block of height 1001 to a node who is on block 167000 and it will store it.  For a fully synced node, it looks like you would need to generate a block of difficulty ~68000, and they would accept it at height 1001 also, but I haven't generated a block that hard in order to test it.  In a couple of weeks, it should only require 17000 difficulty to fingerprint an up-to-date node, so I could try to gen one on my GPU at that point and test.", "comment_meta": "2910\t22879387\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22879387\tashleyholman"}
{"comment_text": "PS. another way to test this is to set your clock forward a few years, and then your client will happily store a min difficult block prior to checkpoints (if the block's timestamp is also in the future).", "comment_meta": "2910\t22879582\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22879582\tashleyholman"}
{"comment_text": "Regarding storing blocks, that problem will disappear once we switch to headers-first syncing (where only blocks along the known best header chain are fetched anyway).\r\n\r\nI have no objection to not serving pre-checkpoint sidechain blocks, though. I prefer decreasing the reliance on checkpoints, but that would mean we need to come up with a criterion that will eventually limit how deep reorgs the network supports; so for now, I think using the last checkpoint is fine.\r\n\r\nI'll review the code later.", "comment_meta": "2910\t22879755\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22879755\tsipa"}
{"comment_text": "+1 @sipa ", "comment_meta": "2910\t22880300\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22880300\tjgarzik"}
{"comment_text": "Something else that may be of relevance here:  currently a node does not need to first request a block in order to store it.  You can just connect to it and send a 'block' message and it will process it and store it as if it asked for it.  Likewise, in response to a getdata request, you can send a different block and it will process it and store it as per normal, providing it passes the checks.", "comment_meta": "2910\t22882230\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22882230\tashleyholman"}
{"comment_text": "@ashleyholman It is relevant, and right now, that's perhaps unwanted (though in case of a freshly-mined block, it is even distributed that way). But again headers-first sync will solve that, as any block received that is not part of the known best chain, is just dropped.", "comment_meta": "2910\t22892973\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22892973\tsipa"}
{"comment_text": "ACK\r\n", "comment_meta": "2910\t23220699\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220699\tjgarzik"}
{"comment_text": "@sipa: patch now amended to use CBlockIndex::IsInMainChain()", "comment_meta": "2910\t23240834\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240834\tashleyholman"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/898d96670bd04222c95a8f2a8bcf36cbb3aa1cc7 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2910\t23241696\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23241696\tBitcoinPullTester"}
{"comment_text": "@sipa anything else you need from me on this one?", "comment_meta": "2910\t24474736\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474736\tashleyholman"}
{"comment_text": "I'd like to postpone this until after headers-first is merged, as:\r\n* The problem with storing blocks will be solved in a very natural way then already (by only fetching blocks we already know we want)\r\n* My current headers-first patch (#2964) removes GetLastCheckpoint, and I'd like to keep it that way; we should reduce relying on checkpoints to the extent possible. However, there's no need to use the checkpoints in this case. In headers-first, the best chain is always known, and we can simply refuse to serve non-main-chain blocks as soon as the main chain has N blocks more than the fork (with N=144, a day, for example).", "comment_meta": "2910\t24964031\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964031\tsipa"}
{"comment_text": "This is highly desirable.", "comment_meta": "2906\t22977179\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22977179\twtogami"}
{"comment_text": "ACK.  Please collapse last commit into previous one.\r\n", "comment_meta": "2906\t23220737\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220737\tjgarzik"}
{"comment_text": "ACK after the aforementioned squash.", "comment_meta": "2906\t23225251\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23225251\twtogami"}
{"comment_text": "What do we need for this to move forward?", "comment_meta": "2906\t24138710\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24138710\twtogami"}
{"comment_text": "Either the help should make it clear that the banned list is cleared on restart, or the banned list should be saved at clean shutdown and read in at startup (either is OK with me, saving/restoring could be a future pull request).", "comment_meta": "2906\t24552596\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24552596\tgavinandresen"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/562a909aa6cd909a67f58a47e3854039aa6a5408 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2906\t24556034\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24556034\tBitcoinPullTester"}
{"comment_text": "Is this even working?  I see it add IP addresses to listbannednode, but I now realize that the IP address remains connected.", "comment_meta": "2906\t26237259\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26237259\twtogami"}
{"comment_text": "Needs rebase, test plan, and somebody to run through the test plan to make sure it works for somebody other than CodeShark.\r\n", "comment_meta": "2906\t26689466\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689466\tgavinandresen"}
{"comment_text": "The alert tests are protocol version specific; what would be best way to work around this? I'd say just set PROTOCOL_VERSION for testing, but it's a #define rather than a mutable variable.", "comment_meta": "2900\t22710734\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22710734\tpetertodd"}
{"comment_text": "What DoS attacks? Why not post them to the security list so we can look at how to fix them (ignoring for now the fact that bitcoin is full of DoS attacks so this would not make much difference).\r\n\r\nAnyway, I think this pull request is a bad idea. I do not wish to have to support this in bitcoinj as it would complicate things significantly to have to search out nodes that properly support bloom filtering. Basically any feature in Bitcoin can be DoS attacked, that's not a good reason to just switch things off.", "comment_meta": "2900\t22712679\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22712679\tmikehearn"}
{"comment_text": "For instance this one posted to the email list: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02490.html All of the devs, including you, are aware of a second and more serious non-public vulnerability.\r\n\r\nbitcoinj added a protocol version test to find bloom capable peers in revision 2c44a4fad7faccfe9b1392c67f60d21b25703bde; add a second test to check for the NODE_BLOOM bit. In the future DNS seeds can be updated to let you ask for peers with specific service bits set, but there's no rush as bloom filtering is left on by default for now.", "comment_meta": "2900\t22714363\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22714363\tpetertodd"}
{"comment_text": "I asked Peter to open this pull.\r\n\r\nService bitting bloom makes sense to me\u2014 it increases nodes control over the granularity of the services they are providing the public, should it be needed\u2014 I have no clue why I didn't ask for this to begin with.  The primary risk I see with this is that it will potentially result in increased levels lazy alternative node implementers not implementing the bloom server side functionality, but at the same time at least those nodes will be identifiable and avoidable (as opposed to them simply not implementing and making your connecting life hard). So I do not believe it would be useful to protocol-version-suicide-pact the bloom functionality.\r\n\r\nIf we're concerned that ignorant node operators may turn off bloom when they don't need to, we could remove the hidden switch, but I'm not especially concerned about that as bloom saves a lot of bandwidth when not being abused.\r\n\r\nSeparately, this is what litecoin has implemented since they had the benefit of later knowledge when they did their protocol update that added bloom support. So anything that supports litecoin would have the service bit testing in any case.", "comment_meta": "2900\t22718867\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22718867\tgmaxwell"}
{"comment_text": "Keep in mind that if an alternative node implementation doesn't want to put in the relatively small amount of effort to implement bloom filters, what makes you think they are going to put in the much larger amount of effort required to really get Bitcoin semantics exactly right regarding convergence? Given that SPV nodes are relatively dependent on their peers - especially if users are accepting zero-conf transactions in any way - it's reasonable to only want to connect to peers running the satoshi codebase rather than some other implementation.", "comment_meta": "2900\t22720055\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22720055\tpetertodd"}
{"comment_text": "So the argument is that because you can ask a peer to use *less* bandwidth, that makes dos attacks *worse*?\r\n\r\nYou can't fix a denial of service by denying service. That's backwards, especially as I don't recall the last time I saw a DoS attacker who actually paid for his own bandwidth. The only way to fix it is to figure out who should be getting service and ensuring they get it first. So why don't you fix it by allowing nodes to prioritise inbound connections?", "comment_meta": "2900\t22723770\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22723770\tmikehearn"}
{"comment_text": "@mikehearn As you know the DoS attacks identified are not attacks on bandwidth, but rather other resources. Those attacks are significantly easier to pull off if the attacker can reduce the amount of data the targets send back to them; bloom filters do exactly that by reducing the INV messages the attacker receives, allowing one computer to attack a very large number of nodes with very little bandwidth consumption.\r\n\r\nIt would be helpful if you responded on the email list with what types of prioritization you would consider most useful for SPV clients - @johndillon attempted to start that discussion but I haven't seen you reply. Disabling bloom filters is a form of prioritization in of itself of course, as SPV nodes do not contribute back to the network by relaying data. It is much better for them to have temporary issues connecting in an attack than for relaying in general to fail, something that could lead to a dangerous fork due to convergence failure.\r\n\r\nRegardless as @gmaxwell pointed out aside from attacks, the protocol should allow for nodes to advertise whether or not they support bloom filters as a matter of good protocol design - it is after all a service. It's telling that when I mentioned that NODE_BLOOM didn't exist, @gmaxwell was surprised.", "comment_meta": "2900\t22728664\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22728664\tpetertodd"}
{"comment_text": "ACK NODE_BLOOM and ACK the entire patch, though myself, I probably wouldn't have added an option to disable bloom filters in the reference impl\r\n\r\nA minor BIP would be nice (like to document every protocol change in a BIP, even though this is terribly minor)", "comment_meta": "2900\t22740077\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22740077\tjgarzik"}
{"comment_text": "@jgarzik Good idea re: BIP.", "comment_meta": "2900\t22742635\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22742635\tpetertodd"}
{"comment_text": "Note: When you bump the protocol version it breaks the alert tests. Your options are then to either generate new signed test data every time the protocol version is bumped, or rather fix the alert tests so the protocol version does not matter.\r\n\r\nhttps://github.com/litecoin-project/litecoin/commit/dbc5f6d7f4ef7ba38157e12b6d9c52ff99aba695\r\nLitecoin chose the latter option as the alert notify codepath is still sufficiently tested without hard-coded protocol versions within signed test data.  We feel it is better to minimize the risk of exposing the alert key, and as a matter of policy it seems ideal to allow protocol bumping without the centralized approval of the alert key signer.", "comment_meta": "2900\t22746389\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22746389\twtogami"}
{"comment_text": "I'm curious to see what @SergioDemianLerner thinks of this patch.\r\n\r\nMy concern is that if there IS a valid DoS attack on bloom-filter nodes (the \"attack\", as I understand it, is supposed to cause excessive disk seeking looking for transactions, yes?  \"meh\" -- worst case is \"node gets slow\" if it isn't running with big disk cache buffers or from an SSD), then adding a NODE_BLOOM bit will just make it easier for attackers to find them and attack them.\r\n", "comment_meta": "2900\t22746762\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22746762\tgavinandresen"}
{"comment_text": "We only have 64 service bits. It would make sense to only use them when nodes benefit from not implementing features. On the other hand, having a separate service bit means notes can support bloom filters, but *not* NODE_NETWORK...", "comment_meta": "2900\t22749513\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22749513\tluke-jr"}
{"comment_text": "    uint64 nServices;\r\n\r\nWe've got 64 of them - I don't think we're about to run out...", "comment_meta": "2900\t22752833\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22752833\tpetertodd"}
{"comment_text": "@gavinandresen \"node gets slow\" is a potentially serious problem. \"making it easier for attackers to find them\": Serving SPV nodes is far less important to the health of the network than ensuring relaying works and consensus is maintained.\r\n\r\nNext time I'd suggest letting people finish exploring the issue before you assume revealing the exploit publicly won't do any harm.", "comment_meta": "2900\t22753140\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22753140\tpetertodd"}
{"comment_text": "Can we cut it out with \"revealing the exploit\" stuff? It's trivial to find DoS attacks on bitcoind. I did it for fun last time this came up and it took about 45 minutes. I was going to post about it (it's a memory bloat issue) and then got distracted with the RNG stuff.\r\n\r\nWhy would we make bloom filtering optional? There's no benefit to be had from that at this point. If somebody wants to reimplement the protocol for some reason, they can reimplement that too. No big deal. Clients that rely on it are not dramatically less important than other nodes. They're called \"end users\" and they're extremely important!\r\n\r\nYou can force nodes to do arbitrary amounts of disk seeking with or without Bloom filtering. Just ask for random blocks in the chain. Asking them to filter the blocks adds some CPU load, but that just multiplies resource exhaustion dimensions from 1 to 2. Recall that most average hard disks can only manage about 100 seeks per second. Connect 100 times, request one random block per second per connection and all the seeks are gone. Bandwidth usage is hardly a problem. Nodes don't remember what data elements they already served so you can just do that forever, but even if they did you could just reconnect every so often to make them forget.\r\n\r\nI think I've explained how to implement a working anti-DoS strategy several times by now. If I didn't reply to John it's only because this issue keeps coming up and I feel like I'm repeating myself.\r\n\r\nFirst step - make nodes understand their own resource limits. This is useful anyway because an operator may not want bitcoind to eat all available machine resources, and currently it will just if it legitimately gets busy.\r\n\r\nSecond step - implement handlers that run when the node is running out of resources, that perform load shedding. For example, throwing out low priority transactions in the mempool, disconnecting peers that score badly (idle for long periods of time, use lots more memory than would be expected, etc). Coming up with good scoring functions is a big part of the art of DoS defence. This is where you'd score transactions before signature checking as well.\r\n\r\nThird step - once you force attackers to basically act just like regular network nodes, you can introduce an optional cookie mechanism so if there are suddenly thousands of clients that appear to be well behaved, clients that have a long history get priority over clients that appeared 5 minutes ago. This also helps in the case where Bitcoin \"suffers\" a sudden spike in popularity. Established users take priority over new users.\r\n\r\nFinal step - optimise everything so the amount of load you can handle before falling over gets pushed higher and higher.\r\n\r\nThe wrong strategy is the one being pursued here:\r\n\r\n1) Find a feature that uses resources\r\n2) Panic and disable it\r\n3) GOTO 1\r\n\r\nThe last time this happened I described the strategy as a \"death spiral\" and I wasn't joking.", "comment_meta": "2900\t22759172\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22759172\tmikehearn"}
{"comment_text": "Mike, enough with the overheated rhetoric.\r\n\r\nOccasionally nodes will have reasons not to offer the bloom filter service, while still having block data. (NODE_NETWORK) Right now the protocol doesn't give any way to say that, adding the NODE_BLOOM service bit lets you do that.\r\n\r\nOf course, if you are going to have NODE_BLOOM, it's useful to be able to disable the bloom service for testing SPV clients, hence the undocumented command line flag. The code implementing the feature also shows what should happen if a node doesn't support bloom filters: kick peers requiring that feature so they won't waste their bandwidth. It'd also be useful as a temporary emergency measure if a DoS attack is launched, but in the meantime we don't have any reason to expect users to use the flag. It is unfortunate that Gavin's revealed a particularly effective one, but that's life. In any case, finding DoS attacks may be trivial for you, but our attackers don't seem to find them on their own and seem to only launch them after they have been revealed publicly prior to a patch.\r\n\r\nIf you want to talk about priority schemes, move it to the email list and reply to @johndillon's thread rather than cluttering up this pull-req with off-topic discussion. Your ideas only work against some types of attacks in any case.", "comment_meta": "2900\t22761634\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22761634\tpetertodd"}
{"comment_text": "@wtogami I suggested awhile back to make it easy to set the alert keys locally for testing - maybe that's the way to handle testing them? You'd still have to regenerate the test cases every time the protocol version was changed, but that could be turned into a simple script using a known privkey.\r\n\r\nMight be a better idea in general: because the key is what's non-standard, you can have test cases that use times that are standard without risking re-use of the test alerts on the network.", "comment_meta": "2900\t22761718\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22761718\tpetertodd"}
{"comment_text": "I don't have access to the DoS report of  issue it's been discussed, but I can imagine.\r\n\r\nAny tool (or NODE_ bit) that gives the users the ability to mitigate an eventual DoS attack would be welcomed by the community. Bitcoin network protocol is not \"fair\", peers do not send the exact amount of useful information they receive. This is a true altruistic network, so I think people won't use these bits to discriminate peers.\r\n\r\n", "comment_meta": "2900\t22776227\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22776227\tSergioDemianLerner"}
{"comment_text": "Regarding using the bit NODE_BLOOM maliciously to detect \"vulnerable\" nodes, I don't think this ease much an attack, since bloom enabled nodes can been detected by many different ways indirectly. (e.g. connecting to the victim with two peers, and testing if txs are filtered or not). ", "comment_meta": "2900\t22776705\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22776705\tSergioDemianLerner"}
{"comment_text": "Another way of looking at it is Gavin is worried about NODE_BLOOM making it easier to detect \"vulnerable\" nodes, and his solution is to make all nodes vulnerable.", "comment_meta": "2900\t22776898\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22776898\tpetertodd"}
{"comment_text": "ACK to NODE_BLOOM and this particular patch.  We will however need a solution for the broken alert tests, preferably one that does not require the alert key signer to have de facto centralized control over any protocol version bumps.", "comment_meta": "2900\t22810433\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810433\twtogami"}
{"comment_text": "@wtogami change your test to run with a throwaway key which is only used in testing mode if thats your concern.", "comment_meta": "2900\t22810556\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810556\tgmaxwell"}
{"comment_text": "@gmaxwell Does that mean you suggest that be added as a second commit to this PR?", "comment_meta": "2900\t22810585\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810585\twtogami"}
{"comment_text": "@wtogami  No, I don't care, updating the protocol version is infrequent enough that we can just fix the test after doing so. \"Defacto centeral control\" is not a concern there, if you are having trouble getting the test updated you just make the change I suggested, remove the test, or remove the alert key entirely.", "comment_meta": "2900\t22810860\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810860\tgmaxwell"}
{"comment_text": "@gavinandresen I don't really follow your reasoning; assuming an attack exists (ignoring whether it does or not for now), then forcing everyone to be vulnerable is certainly worse than making it optional and advertizing it (perhaps combining it with stronger anti-DoS measures, knowing that it may reduce availability of other offered services).\r\n\r\nI do agree with @mikehearn that a decent resource-limitating implementation is necessary as a generic solution against DoS attacks. I do believe that's orthogonal to the approach taken by this change, though.\r\n\r\nThe services offered by P2P nodes to the network (for free!) are quite distinct, and have different use cases, different clients, and different attack models:\r\n * (unfiltered) old blocks are only necessary for full nodes that are synchronizing. The only thing that matters is bandwidth really (latency is only important in so far that extreme degradation would increase sybil-vulnerability).\r\n * (unfiltered) recent blocks are only necessary for full nodes keeping up with the chain, and mostly need low latency to keep the convergence speed of the network fast. Bandwidth is only important when it starts influencing latency.\r\n * (filtered) blocks are only necessary for SPV nodes, and the same old/new distinction exists (old blocks need bandwidth, new blocks need latency).\r\n * lone transactions are only necessary for distribution to miners and (to the extent possible) aim of the network to prevent 0-conf double spending. Until the payment protocol takes off, it also matters for distribution to receivers, but this isn't necessary IMHO. I believe all this is mostly best-effort in any case, and secondary to the other services offered.\r\n\r\nIn my opinion, these are sufficiently independent from each other that they should be easily isolatable. We're relying on charity of those running full nodes to provide these services, and which of these they consider important for the survival of the network may differ. Additionally, not all of these are necessarily present to the same extent in the network - there may be more demand for some than for others. This all speaks in favor of having separate services bits for them. Maybe at some point more specialized and separately-maintained software for each exists, though that's probably not for soon.\r\n\r\nOn the other hand, requiring full node implementations to support SPV functionality probably benefits the popularity of Bitcoin as a payment system, and may improve its usefulness to the economy. \"Surviving\" up to the point where we're worried about certain attacks may be more important than dealing with those attacks in the first place. Still, ultimately this is about whether alternate full node implementations are allowed to not implement SPV services, and they may have reasons not to (perhaps because they offer a competing lightweight client model). If the choice is between them not implementing Bloom filtering (and ignore requests, or disconnect in case of such requests), and them being able to advertize not supporting it in the first place, I certainly choose the latter.\r\n\r\nI lean towards ACK, but this discussion probably belongs elsewhere (it's not entirely specific to the reference client), and certainly warrants a BIP. The implementation looks good in any case.", "comment_meta": "2900\t23229946\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23229946\tsipa"}
{"comment_text": "A good example where the very different requirements of the different types of nodes matters is for anyone with a lot of bandwidth available to them, but not a lot of disk io or memory, a common scenario for servers in datacenters.\r\n\r\nThe most efficient way to push blocks over the wire for such a server would be to use sendfile() to do a direct copy from the blockchain data on disk to the network interface - behind the scenes Linux will use direct zero-copy DMA transfers of the data from the disk interface to the network interface, or system memory to the network interface, using almost no CPU in the process. On the other hand that means the blocks have to be sent unfiltered, which is fine if my peer needs the whole block. This arrangement uses the resources I have available most efficiently for the sake of the network.\r\n\r\nBut if I start accepting SPV clients I can't use sendfile() anymore, and even worse is that because I'm serving those SPV clients filtered blocks I'm using up far more disk IO than network bandwidth, when what I have available to me is the opposite.\r\n\r\nInterestingly the opposite case is common too: lots of home users running nodes have plenty of disk IO available, especially if they have SSD's, but very poor upload capacity. It would probably make sense for full nodes to prefer to connect to nodes without NODE_BLOOM set, especially if they are syncing a lot of archival history, leaving capacity on the NODE_BLOOM capable nodes for SPV clients that need it.", "comment_meta": "2900\t23274616\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23274616\tpetertodd"}
{"comment_text": "Also, here is my draft BIP: http://www.mail-archive.com/bitcoin-development@lists.sourceforge.net/msg02751.html", "comment_meta": "2900\t23276995\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23276995\tpetertodd"}
{"comment_text": "Needs rebase and a test plan. But I still think this is a bad idea....\r\n", "comment_meta": "2900\t26689385\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689385\tgavinandresen"}
{"comment_text": "@gavinandresen rebased\r\n\r\nCurrent test plan and results has been as follows:\r\n\r\n1) Bloom filters enabled, NODE_BLOOM set, protocol version bump (default settings)\r\n\r\nPeers connect normally, no observed changes: PASS\r\nAndroid Bitcoin Wallet connects successfully: PASS\r\nAndroid Bitcoin Wallet connects as only peer: PASS\r\n\r\n2) Bloom filters disabled, NODE_BLOOM unset (-bloomfilters=0)\r\n\r\nNon-bloom-using nodes connect normally: PASS\r\nBloom-using nodes kicked: PASS\r\nNo bloom-using nodes seen in getpeerinfo (which would indicate they don't give up): PASS\r\nAndroid Bitcoin wallet w/ !NODE_BLOOM peer set as trusted peer and with DNS peer discovery enabled: PASS (fails to connect to the peer, but behaves normally otherwise)\r\nAndroid Bitcoin wallet w/ !NODE_BLOOM peer as only peer: PASS, although the wallet code never gives up, connecting multiple times a second. But that's a bug in the Android wallet that should be fixed.\r\n\r\n3) DNS seeds\r\n\r\n@sipa implementation https://github.com/sipa/bitcoin-seeder ignores NODE_BLOOM: PASS\r\n@TheBlueMatt's implementation https://github.com/TheBlueMatt/dnsseed-bitcoinj ignores NODE_BLOOM: PASS\r\n\r\nNote that I only checked that the source code for both tests for NODE_NETWORK with an and, and thus will ignore other service bits being set. We can modify the dns seeds to filter requested service bits later if required; useful later for other things like the proposed NODE_ARCHIVAL_BLOCKCHAIN_DATA-type stuff.", "comment_meta": "2900\t26690423\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690423\tpetertodd"}
{"comment_text": "Note that the alert tests need to be fixed because the protocol version was incremented, as discussed above; if disabled manually all other tests run fine.", "comment_meta": "2900\t26690505\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690505\tpetertodd"}
{"comment_text": "https://code.google.com/p/bitcoinj/source/detail?r=2c44a4fad7faccfe9b1392c67f60d21b25703bde\r\nThe current Android Wallet logic is to determine if a peer does bloom only from the protocol version.  bitcoinj would need to learn how to to read service bits.", "comment_meta": "2900\t26706681\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26706681\twtogami"}
{"comment_text": "@wtogami Sure, but that's not something that prevents merging this patch; it's compatible with older SPV implementations. More to the point, those implementations aren't going to change until this patch is merged.", "comment_meta": "2900\t26706931\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26706931\tpetertodd"}
{"comment_text": "Sorry, I didn't mean that is a blocker for this patch, it was meant as a FYI.", "comment_meta": "2900\t26707029\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26707029\twtogami"}
{"comment_text": "Um, old SPV implementations are not compatible with this patch - it is inherently impossible for them to be so. A node that opts out of a previously mandatory feature will still be expected to provide it by old software. If an old client connects to a new server that has the feature disabled, it will hang as it waits for a response to a message that the remote server has ignored.\r\n\r\nThis patch is just all kinds of bad news. Please stop it. People who want to serve the chain but not do computational work on behalf of clients can just seed the chain torrent instead.", "comment_meta": "2900\t26716129\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26716129\tmikehearn"}
{"comment_text": "@mikehearn Read the patch prior to commenting about it; it automatically kicks older peers so they won't waste their bandwidth and my draft BIP says that behavior is a must.\r\n\r\nAlso, the requirements of serving archival and bloomfilter-using nodes are very different and can productively be optimized differently: https://github.com/bitcoin/bitcoin/pull/2900#issuecomment-23274616", "comment_meta": "2900\t26717023\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26717023\tpetertodd"}
{"comment_text": "Yes, I read that comment. That's why I suggested serving the chain torrent if you have lots of bandwidth and not much CPU. Or heck, just serve snapshots of the chain via HTTP. Then you have a piece of software and protocol actually designed for serving large files, instead of bitcoin+p2p protocol which simply isn't.", "comment_meta": "2900\t26717448\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26717448\tmikehearn"}
{"comment_text": "So you agree that it's backwards compatible with older SPV implementations? Any other issues?\r\n\r\nI don't see why we want to depend on a clunky system of requiring separate manual torrent/HTTP downloads, especially given ideas like partial UTXO mode to transparently bring nodes from SPV security to full over time in the background.", "comment_meta": "2900\t26718181\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26718181\tpetertodd"}
{"comment_text": "Your patch is \"backwards compatible\" as long as most nodes don't use it, which is not the meaning most people would associate with the term. Worse, you implemented this by DoS banning the IP address, which fails to take into account that many users (especially on mobile) sit behind giant NAT boxes. A single user who didn't upgrade could get their entire local cell tower or even city banned from every node with your patch activated, even for clients that are upgraded.\r\n\r\nYou could make it backwards compatible by not having such nodes take part in the regular P2P network at all and provide a separate DNS seed for them, so old clients would never see them at all, but then if you're going to have a separate P2P network why not use a P2P system that's actually designed for file distribution, like BitTorrent? \r\n\r\nIgnoring for now that Bitcoin-Qt doesn't have any SPV support and nobody is working on any, fancy automatic migration of SPV nodes to full nodes doesn't make sense from a user experience perspective - the requirements are just so different, such arguments don't persuade me. \r\n\r\nAs it is, the maintainer of the serving side says this patch is a bad idea, the maintainer of the client side says this is a bad idea, so what do you hope to achieve by keeping this issue open? It gets quite frustrating when the people who are actually maintaining the code bases that are affected by this patch both say \"this is a bad idea\" and you just plough on regardless.", "comment_meta": "2900\t26719432\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26719432\tmikehearn"}
{"comment_text": "Ah good, finally you looked at the code. Anyone have any comments re: the DoS behavior? I could potentially change it to simply close the associated connection.\r\n\r\nService bits are meant to advertise services, and performing computations on behalf of clients who don't serve other clients sounds very much like a service to me. That said I'd be very surprised to see many nodes operators disabling bloom filters as the command-line switch to do so is undocumented, so we've got plenty of time to upgrade DNS seeds to let nodes pick service bits they want, or just require NODE_BLOOM to be set if protocol version >=70002. (DNS seeds are just for bootstrapping after all and nodes should use them infrequently; no sense putting too much effort into them vs. decentralized peer discovery)\r\n\r\nI'm sure more people would run Bitcoin-QT full-nodes if it was useful immediately, albeit with reduced SPV security. We could certainly use more full nodes. You like to say how businesses will \"obviously\" run full nodes - maybe we can make it easier for them by getting their nodes up and running as fast as possible. An attractive alternative is to just use a central service immediately rather than waiting after all.\r\n\r\nNote the positive comments and ACKS from gmaxwell, sipa, jgarzik, and wtogami - the reference client is maintained by a group of people, not just one guy who calls the shots.", "comment_meta": "2900\t26721635\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26721635\tpetertodd"}
{"comment_text": "I think it may make more sense to start advertising NODE_BLOOM before we add a (even undocumented) option to disable it. That could ease the transition significantly", "comment_meta": "2900\t26721860\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26721860\tTheBlueMatt"}
{"comment_text": "@TheBlueMatt If the sticking point for people is the fact that there is that option, I'll remove it.", "comment_meta": "2900\t26723942\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26723942\tpetertodd"}
{"comment_text": "> our patch is \"backwards compatible\" as long as most nodes don't use it\r\n\r\nNODE_BLOOM enabled-by-default with 0.9 combined with always-enabled with 0.8.x means most nodes will use it.\r\n\r\n> I think it may make more sense to start advertising NODE_BLOOM before we add a (even undocumented) option to disable it. That could ease the transition significantly\r\n\r\nPlease.  No.  Removing the option would mean other clients can entirely opt out of paying attention to the service bit, thereby rendering it pointless.  The option being widely deployed at least makes it very easy to tell the world how to defend against a particular type of problem if it were to happen, which may be enough to discourage that problem from happening as they would know the network can bounce back very quickly without any software update.\r\n\r\n@petertodd In retrospect, the 24 hour ban was too heavy handed.  Mike is right about it being too easy to ban an entire IP.", "comment_meta": "2900\t26744037\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26744037\twtogami"}
{"comment_text": "The \"sticking point\" for me is practical:  every service bit adds complication-- another possible configuration that should be tested, but probably won't be (which makes attacks more likely).\r\n\r\nI have seen zero evidence that requiring that every NODE_NETWORK node support bloom filters causes anything more than temporary denial-of-service problems for under-powered full nodes, and I see large benefits to requiring that all full nodes support SPV clients.\r\n", "comment_meta": "2900\t26762842\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26762842\tgavinandresen"}
{"comment_text": "On Mon, 2013-10-21 at 11:39 -0700, Warren Togami wrote:\n>         I think it may make more sense to start advertising NODE_BLOOM\n>         before we add a (even undocumented) option to disable it. That\n>         could ease the transition significantly\n>         \n> \n> Please. No. Removing the option would mean other clients can entirely\n> opt out of paying attention to the service bit, thereby rendering it\n> pointless. The option being widely deployed at least makes it very\n> easy to tell the world how to defend against a particular type of\n> problem if it were to happen, which may be enough to discourage that\n> problem from happening as they would know the network can bounce back\n> very quickly without any software update.\n> \nUmm...what? people will refuse to implement a new standard because its\nnot actively used but will break their apps in the future if they dont?\nSomehow I don't see why this would be true.", "comment_meta": "2900\t26771832\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26771832\tTheBlueMatt"}
{"comment_text": "Updated to use CloseSocketDisconnect() rather than a 24-hour DoS-ban.\r\n\r\nTested with my Android wallet, which happily successfully connects then is disconnected about five times a second forever...\r\n\r\nOff-topic here, but @schildbach I'd suggest some kind of back-off algorithm, or at least waiting a second or two. It even does that on a cellular data connection, which could get rather expensive.", "comment_meta": "2900\t27140402\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140402\tpetertodd"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/e7a64af74fee5734620e91e0045075c97197153a for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2900\t27140472\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140472\tBitcoinPullTester"}
{"comment_text": "@petertodd Yes, that's a well known regression in bitcoinj: http://code.google.com/p/bitcoinj/issues/detail?id=296", "comment_meta": "2900\t27141167\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27141167\tschildbach"}
{"comment_text": "Note: untested for now.", "comment_meta": "2861\t21591431\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21591431\tsipa"}
{"comment_text": "**THANK YOU SO MUCH!** @sipa you are my hero (and probably a bunch of other people's too)!\r\n\r\nI will pull this and test it tomorrow, and try to do a more extensive test this weekend. I'll report back if I find any issues.\r\n\r\nAgain, you are awesome, and I think this is hugely important for bitcoin. Thank you, thank you, thank you.", "comment_meta": "2861\t21601833\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21601833\tkyledrake"}
{"comment_text": "@sipa is there any chance this could make it into master for the next release? I'm not sure if it's out of scope for the next release or not, just curious on timing so I can plan accordingly. I would love to see in the next release of course, but I don't want to derail all the other important stuff you guys are working on.", "comment_meta": "2861\t21601944\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21601944\tkyledrake"}
{"comment_text": "Thanks for giving this pull request some love, sipa!\r\n\r\nI think having both spendable and watch-only accounts in the same wallet is problematic. For instance, how do we deal with getbalance, account labels, etc...?\r\n\r\nI had delayed attempting this merge until multiwallet capability had been merged, where we could simply have a wallet be entirely watch-only or entirely spendable. I'm glad some people are finding it useful as it is, though.", "comment_meta": "2861\t21608666\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21608666\tCodeShark"}
{"comment_text": "@CodeShark The approach that this pullreq takes is that for almost everything, watch-only is considered equal to normal keys. You'll see it in getbalance, in listtransactions, in listunspent, ...\r\n\r\nHowever, these are not considered when creating a transaction. Presumably we'll need a getspendablebalance too, and some GUI special-casing (perhaps only shown when watch-only addresses are present at all).", "comment_meta": "2861\t21611891\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21611891\tsipa"}
{"comment_text": "Thanks @sipa and others who have contributed to this!  I am so insanely happy to see this functionality get added.", "comment_meta": "2861\t21708762\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21708762\tdeweydb"}
{"comment_text": "I have tested this patch by importing an address with`importaddress`, and `getbalance`, `listtransactions`, `getreceivedbyaddress`, `listreceivedbyaddress` work as expected (and they agree with blockchain.info).\r\n\r\n`sendtoaddress` from a wallet that contains only a single watch-only address fails gracefully with:\r\n\r\n    error: {\"code\":-4,\"message\":\"Signing transaction failed\"}", "comment_meta": "2861\t21791384\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21791384\truneksvendsen"}
{"comment_text": "One interesting thing to test would be having a mixed wallet, and checking that you can spend the amount in normal keys, but not more.", "comment_meta": "2861\t21793339\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21793339\tsipa"}
{"comment_text": "Summarizing IRC review comments:\r\n\r\n* AvailableCoins() needs an additional arg.  It now takes two optional bool args.\r\n* Would be nice if 'listunspent' indicated watch-only or not\r\n* Agree that testing a mixed wallet would be useful\r\n\r\nACK once issues are fixed\r\n\r\n", "comment_meta": "2861\t21794114\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21794114\tjgarzik"}
{"comment_text": "I just tested sending transactions on testnet. Sending amounts higher than the balance available for spending (from non-watch-only addresses) results in a \"Signing transaction failed\" error.\r\n\r\n`mq7se9wy2egettFxPbmn99cK8v5AFq55Lx` is the watch-only address and `mv7VTUiBNmNSNrWaXrySbZcEzQ9C6ZNTNu` I have the private key for:\r\n\r\n    rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind listunspent\r\n    [\r\n        {\r\n            \"txid\" : \"98278b9eb6cde5d3124ffc6c0ff75fa1d813b41383c35414315ce47f85fc45cc\",\r\n            \"vout\" : 1,\r\n            \"address\" : \"mv7VTUiBNmNSNrWaXrySbZcEzQ9C6ZNTNu\",\r\n            \"scriptPubKey\" : \"76a914a019eab435cd509dce95353febe6b48e7b15075388ac\",\r\n            \"amount\" : 0.39800000,\r\n            \"confirmations\" : 5\r\n        },\r\n        {\r\n            \"txid\" : \"bd9a149d58d9d2eff00e9bb1c0f463a2ce213f99affa8261bdbe8e85d60f5158\",\r\n            \"vout\" : 1,\r\n            \"address\" : \"mq7se9wy2egettFxPbmn99cK8v5AFq55Lx\",\r\n            \"account\" : \"\",\r\n            \"scriptPubKey\" : \"76a9146953ce65058e5e68125a9163d74b277d6a7f4a9e88ac\",\r\n            \"amount\" : 23.49990000,\r\n            \"confirmations\" : 101\r\n        }\r\n    ]\r\n    rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind sendtoaddress mq7se9wy2egettFxPbmn99cK8v5AFq55Lx 0.4\r\n    error: {\"code\":-4,\"message\":\"Signing transaction failed\"}\r\n    rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind sendtoaddress mq7se9wy2egettFxPbmn99cK8v5AFq55Lx 0.398\r\n    error: {\"code\":-4,\"message\":\"Signing transaction failed\"}\r\n    rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind sendtoaddress mq7se9wy2egettFxPbmn99cK8v5AFq55Lx 0.397\r\n    14ce96d4809b18a7a7bc7f6501801572d3e673f6eb2ea645ad731a056e953221\r\n    rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind getbalance\u00a0\r\n    33.69660000\r\n", "comment_meta": "2861\t21802217\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21802217\truneksvendsen"}
{"comment_text": "Significant changes, re-testing would be welcome :)\r\n\r\nInstead of fRequireSpendable, the IsMine family of functions now return MINE_NO, MINE_WATCH_ONLY or MINE_SPENDABLE (instead of a boolean). `listunspend` should show whether a coin is spendable.", "comment_meta": "2861\t21824880\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21824880\tsipa"}
{"comment_text": "Overall ACK of updated code.  Did not test, just code review.  Minor taste-based nits:\r\n\r\n* RPC: 'true' seems a better return value than 'null'\r\n* perhaps due to my b/g I prefer the \"_t\" suffix to the more verbose \"type\".  POSIX standard naming for such situations.\r\n", "comment_meta": "2861\t21832372\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21832372\tjgarzik"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/02e10bf92bcb693288740ff7af0422d4fa0572d8 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2861\t21930967\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21930967\tBitcoinPullTester"}
{"comment_text": "Some changes:\r\n* Fixed a bug that caused rescans to sometimes be skipped.\r\n* Adapt the output of validateaddress for watch-only addresses.", "comment_meta": "2861\t21935228\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21935228\tsipa"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/80f264464ff2f424cc65e6c910411b7ba059f893 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2861\t21937206\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21937206\tBitcoinPullTester"}
{"comment_text": "I just tested the new changes and now re-scanning works both on testnet and mainnet for me. I can send and receive on testnet, and I get a\r\n\r\n    error: {\"code\":-4,\"message\":\"Insufficient funds\"}\r\n\r\nerror message when I try to send more than I have in spendable funds (according to `listunspent`) but less than I have in unspendable funds.\r\n\r\nOn mainnet, the `listransactions` output agrees with blockchain.info for the tested address.", "comment_meta": "2861\t22244904\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22244904\truneksvendsen"}
{"comment_text": "@gavinandresen You've voiced some objections to this on IRC, and prefer watch-only wallets over individual watch-only addresses IIRC, care to mention them here?\r\n\r\nI don't feel like working on this further if it is controversial, but I think it's extremely useful and pretty much necessary to enable managing P2SH addresses without having all keys available. To get that same functionality with watch-only wallets, this becomes dependent on multiwallet, which doesn't seem to be making any progress.", "comment_meta": "2861\t22257253\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22257253\tsipa"}
{"comment_text": "IMO there is a strong user-based case for merging.  There is clear user interest.  People are building websites based on this branch, among other things.", "comment_meta": "2861\t22257476\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22257476\tjgarzik"}
{"comment_text": "I'd like to add that it increases decentralization, thus increasing the resilience of the Bitcoin ecosystem. Instead of having to rely on blockchain.info to get information about addresses not owned by myself, I can monitor these addresses using my own node. The same goes for other Bitcoin services. I suspect a lot of people depend on the blockchain.info JSON API simply because they have no other option right now. I know at least one service whose developer I spoke with using the blockchain.info API because they're the only ones offering a way to pull data about addresses for which one doesn't own the private key.\r\n\r\nEvery time blockchain.info has problems, or gets DDOSed, my service is unable to continue because I have no way of retrieving this information in a decentralized manner. It becomes a single point of failure for many of the smaller Bitcoin-related services.\r\n\r\nI agree that separate, watch-only wallets would be preferable, but at the same time I don't see why it has to be an either-or issue.", "comment_meta": "2861\t22258333\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22258333\truneksvendsen"}
{"comment_text": "It might be useful to have 'getinfo' or another RPC return a boolean indication of watch-only addresses in the wallet.", "comment_meta": "2861\t22259075\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22259075\tjgarzik"}
{"comment_text": "We'd love to have this feature. It is nonsense that we have to rely on blockexplorer.com and blockchain.info while having the entire blockchain stored on our own node.\r\n\r\nCurrently bitcoind doesn't have a friendly API for merchants and payment services providers. It is crucial to be able to handle tens of thousands of addresses for which we don't want to share the private keys with a certain copy of bitcoind.\r\n\r\nIt would be really cool to have this merged ASAP without creating dependencies on other not yet developed features.\r\n\r\nTo show how people overcomplicate this: The best would be to simply have an RPC call which queries the database for a certain address, as a one-off query. No need to add it to any wallets, manage it, etc. Just query the database for it. Make getreceivedbyaddress work with _any_ address. That's all we need.\r\n\r\nI really appreciate the work put into this branch, in fact we live off it for quite some time now. Would love to see this merged.\r\n\r\nThanks for listening!", "comment_meta": "2861\t22260388\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22260388\tkeo"}
{"comment_text": "It also seems opportune, with mentions of blockexplorer/blockchain, to plug my related pull request,\r\n\r\n\"Add unauthenticated HTTP REST interface\" (req #2844 )", "comment_meta": "2861\t22261093\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22261093\tjgarzik"}
{"comment_text": "@sipa is the importaddress code expected to update the account balance when a transaction goes out? I just dropped a generated raw transaction onto blockchain.info's tx send with one of the unspent transactions, and it removed the unspent from `listunspent`, but it didn't change the balance for the account that the address is associated with.\r\n\r\nI didn't send it through my bitcoind instance, so that may be why that's happening, I need to do another test and send through my local bitcoind. Just wanted to mention incase it was a bug:\r\n\r\n```\r\n~ $ bitcoind listunspent\r\n[\r\n    {\r\n        \"txid\" : \"d266240586fc70f4e3927f3b0a70351179a5f2dbd189aecd31907f8596f0ffc3\",\r\n        \"vout\" : 1,\r\n        \"address\" : \"134GKGyWFftj2m4ZFKsBuCbm3GgXfDmuxX\",\r\n        \"account\" : \"RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=\",\r\n        \"scriptPubKey\" : \"76a914168e48aa5551a3ce7339dd55048b976edea3687288ac\",\r\n        \"amount\" : 0.06000000,\r\n        \"confirmations\" : 2668,\r\n        \"spendable\" : false\r\n    }\r\n]\r\n~ $ bitcoind getbalance\r\n0.06000000\r\n~ $ bitcoind getbalance RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=\r\n0.12000000\r\n~ $ bitcoind listaccounts\r\n{\r\n    \"\" : -0.06000000,\r\n    \"RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=\" : 0.12000000\r\n}\r\n```\r\n\r\nAnd the transaction that was sent: https://blockchain.info/tx/87eb6a89ad7c53bc597a9c8431a22072e83d5e4b4ecbeb071b651aa5b5e964bd?show_adv=true", "comment_meta": "2861\t22284428\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22284428\tkyledrake"}
{"comment_text": "@kyledrake Accounts are not addresses, and do not have _anything_ to do with the coins available to an address. The abstraction provided by the reference client has at no point any concept of a \"balance of an address\", only \"balance of a wallet\".\r\n\r\nAddresses are associated with accounts, and coins received by those address will credit the account. For debits, you need to explicitly use \"sendfrom\".\r\n\r\nAccounts are just virtual counters, and they can even go negative. I don't see a useful way to combine them with watch-only addresses. I think in general that their use is very limited, and in most cases what people really want is multiple individual wallets.\r\n", "comment_meta": "2861\t22285171\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22285171\tsipa"}
{"comment_text": "I'll be happy with watch-only addresses in the wallet if their meaning is\nclear and that meaning doesn't break people's existing code.\n\nIf I understand, as implemented their meaning is \"Exactly like any other\naddress in your wallet (shown as part of total balance, shown in\nlisttransactions, ??shown in listunspent??), except you cannot spend them\nwithout constructing a raw transaction yourself\".\n\nThat breaks two assumptions people may have:\n\n1) getbalace shows the total number of bitcoins available to spend.  I\nthink that is an important assumption not to break.\n\n2) If all your receive transactions are confirmed, sum(listtransactions) ==\ngetbalance '*'  == sum(listunspent) .\n\n\n\n-- \n--\nGavin Andresen", "comment_meta": "2861\t22285332\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22285332\tgavinandresen"}
{"comment_text": "They are included in listtransactions, listreceivedbyaddress, and balances. They are also included in listunspent, but marked as watch-only there. Adding a flag to balance, or a separate RPC to query only spendable / watch-only addresses is probably useful.\r\n\r\n", "comment_meta": "2861\t22286490\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22286490\tsipa"}
{"comment_text": "More thoughts:\r\n\r\nI agree that there is consensus that SOME solution is needed.\r\n\r\nI'll (grudgingly) go along with a watch-only address breaking the \"getbalance == coins you can spend\" assumption, as long as that is well documented.\r\n\r\nRE: flag to balance or separate RPC:  \"meh\"  -- if people want to keep track of watch-only balances separately, they should give them all a \"watchonly\" label.  In fact, I'd vote that the default label for importaddress be \"watchonly\" (or \"imported\" -- don't care about the name) instead of \"\".\r\n\r\nRE: documentation: How about: importaddress help says something like:\r\n\r\nAdds an address that can be watched as if it were in your wallet, but cannot\r\nbe used to spend. Transactions to or from watch-only addresses will appear\r\nin listtransactions and listunspent and will be counted in getbalance, but\r\nare not spendable without the private key. Watch-only addresses may be\r\nmade spendable by importing the corresponding private key using\r\nimportprivkey.\r\n", "comment_meta": "2861\t22293831\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22293831\tgavinandresen"}
{"comment_text": "One more random thought:\r\n\r\nWill the typical use case be a merchant importing a bunch of addresses?  If yes, maybe this should be:\r\n  importaddresses [address1,address2,...] &lt;label&gt; &lt;rescan&gt;\r\n", "comment_meta": "2861\t22294149\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22294149\tgavinandresen"}
{"comment_text": "\"six of one, half-dozen of the other\" -- JSON-RPC 2.0 batches work just as well, for multiple importaddress.\r\n", "comment_meta": "2861\t22297093\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22297093\tjgarzik"}
{"comment_text": "@jgarzik Do they? (considering imports rescan the blockchain..)\r\n\r\nReminder that the original author of this pull request has abandoned it in favour of watch-only wallets. IMO, it makes a lot more sense to approach this after HD wallets are merged, as then there's a clear use-case that doesn't violate the no-address-reuse principle.", "comment_meta": "2861\t22297719\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22297719\tluke-jr"}
{"comment_text": "@luke-jr `importaddress` doesn't do a rescan if you pass \"false\" as the third (rescan) parameter. So the approach for batch imports of watch-only addresses would be to add all your addresses except the last one with rescan=false, and add the last one with rescan=true.\r\n\r\nThinking about my use cases, I don't think I would have any use case for a mixed watch-only/regular wallet. Ie. I wouldn't have a need for a wallet containing private keys that can spend money, *and* a wallet containing watch-only addresses. To me, the whole point of watch-only addresses is not letting bitcoind manage private keys for added security. Either for use with a web service (which can be a blockchain.info-style site, or a web wallet), or a local Armory-style wallet, where an external program handles the wallet, and only uses bitcoind to maintain the blockchain and query it about relevant transactions.\r\n\r\nAs Armory functions now, it uses bitcoind to maintain the blockchain, but not to query information from it. Armory scans the entire blockchain (loads the raw \"blkxxxxx.dat\" files) on startup, and to deduce the balance for the wallets maintained by Armory. If these watch-only extensions were to become available, Armory could add the relevant addresses using the `importaddress` function, and let bitcoind gather information on these addresses. To me this would be the first step in separating the wallet functionality from bitcoind.\r\n\r\nI agree that mixing these two address types can be confusing - even though it has to be done manually - so I would much rather have the ability to have either a watch-only wallet or a wallet with private keys than nothing at all, although I'm not sure how much work that would be to implement.\r\n\r\nAnother solution would be to add watch-only versions of the relevant affected RPC calls. Ie. using `wogetbalance` to get the balance of watch-only addresses, `wolistunspent` to list unspent transactions for watch-only addresses etc. Another option would be to include an optional [includewatchonly=false] parameter to the relevant RPC calls, as another solution to make sure we don't break existing installations. I agree with Gavin that this is an important concern.", "comment_meta": "2861\t22311416\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22311416\truneksvendsen"}
{"comment_text": "FYI I have worked around the `getbalance` issue by calling `listunspent` for the addresses I am watching and looping to calculate the balance.\r\n\r\nThe wiki page on raw transactions doesn't yet document this, but there's an optional array of addresses you can add to the end:\r\n\r\n```\r\nlistunspent [minconf=1] [maxconf=9999999]  [\"address\",...]\r\n```\r\n\r\nI believe this solves the balance calculation for me!", "comment_meta": "2861\t22344871\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22344871\tkyledrake"}
{"comment_text": "Another issue I'm running into is that `listtransactions ACCOUNT` doesn't show sent transactions anymore when I send via `sendrawtransaction`. I can use `listtransactions` to see them, but I can't filter it on bitcoind itself using an array of addresses, so I would have scaling issues after a certain point if I used it for a site running a lot of transactions.\r\n\r\nIdeally it would be nice to see a list of transactions filtered by an array of addresses, similar to how listunspent can be used.\r\n\r\nI'm not saying this is a problem for this commit (and you mentioned this issue above), I'm just adding this info incase anyone was interested. I will work around this by scanning the transactions manually for now, and try to come up with a longer term solution later on.\r\n\r\nUpdate: Actually I won't be able to do a listransactions dump either, because there isn't really a way to see the source of the sends in the output except via the transaction id. I'll probably have to keep track of transactions/txids on my end.", "comment_meta": "2861\t22348369\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22348369\tkyledrake"}
{"comment_text": "The _only_ way to have a transaction debit an account, is by using sendfrom. I'm not sure how you'd expect sendrawtransaction to interact with this. Accounts are not about address balances, and any application that tries to do so will likely have a hard time working around the abstraction that the wallet provides:\r\n\r\n * A wallet is a bunch of transactions and keys\r\n * A wallet has a number of addresses, which are entry points into the wallet.\r\n * Afterwards, the wallet is a black box that manages your coins.\r\n * When sending coins, they are sent from your wallet - there is no concept of a \"from\" address.\r\n\r\n", "comment_meta": "2861\t22368905\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22368905\tsipa"}
{"comment_text": "Just wanted to chime in to say I'd love watch-only functionality. IMO, it's the best way to go for server security, and I'd love to be able to do this without using a 3rd party service like blockchain.info. For me, it doesn't matter whether it's a separate watch-only wallet or integrated into the regular wallet, although I'd agree with runeksvendsen that I can't think of any cases I'd want to use them together. It would also probably keep things simpler to have them separate, but I'm not at all against the idea of combining them, either.", "comment_meta": "2861\t22990583\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22990583\tephraimb"}
{"comment_text": "I'm also coming in with a +1 on this.\r\nEchoing earlier comments, for merchants this feature is an absolute must. \r\nHaving the ability to listunspent for a watch only address is IMO, essential for merchants and developers of BTC applications. \r\nCurrently the only way to get unspent is with blockchain.info /unspent api ~ having this feature locally would obviously be a massive improvement.", "comment_meta": "2861\t24471648\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24471648\tntom"}
{"comment_text": "I have been using this in testing for Coinpunk and haven't run into any problems yet. Would love to see it get merged to master!", "comment_meta": "2861\t24632095\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24632095\tkyledrake"}
{"comment_text": "@kyledrake You know, the P2SH support @sipa just added could work well with Coinpunk: store funds in a 2-of-2 multisig P2SH addresses (including change) and have both the server and the user's client-side wallet sign transactions. Because both parties need to be involved you'd be able to implement useful features like daily spending limits, 2-factor-authentication to keep coins safe even if the user's computer is completely compromised, and safe instant transfers between users, while still preventing coins from being stolen if the server itself is hacked.", "comment_meta": "2861\t24636856\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24636856\tpetertodd"}
{"comment_text": "What's the safest (least amount of changes compared to a stable version) version containing this patch? Are there any binaries available? I tried getting them from jenkins from last auto sanity check but it returns 404.", "comment_meta": "2861\t24806243\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24806243\tSzymonPobiega"}
{"comment_text": "very quiet here.. How far is this from going into the 0.9 release ? ", "comment_meta": "2861\t25215075\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25215075\tntom"}
{"comment_text": "Would also like to see this merged in for an upcoming release! Let me know if I can help.\r\n\r\nI have been using this functionality extensively with Coinpunk. I have refactored the service so that it now depends on nothing but the watch only address functionality, and have figured out how to deal with the transaction management without using the bitcoind wallet.\r\n\r\nIt would be great to not require users to compile an older custom version of bitcoind to use Coinpunk. I have been testing the watch address functionality extensively over the last month and have not run into a single issue with it.", "comment_meta": "2861\t25579094\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25579094\tkyledrake"}
{"comment_text": "I'll try merging this into master and doing some testing.\r\n\r\nEdit: though on second thought I'd prefer a solution in which an entire wallet is made watch-only, instead of adding watch-only keys to an existing wallet and creating two classes of IsMine. This feels error prone somehow.\r\n", "comment_meta": "2861\t25972349\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25972349\tlaanwj"}
{"comment_text": "A recent suggestion by gmaxwell is to make coins received through watch-only function as if they were automatically (and irreverisbly) marked locked. Not much would change in practice, though.", "comment_meta": "2861\t25980110\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25980110\tsipa"}
{"comment_text": "@sipa I'm not sure what the benefits are of using this over the current implementation (which appears to work very well under testing), but I'll defer to the experts.\r\n\r\nHow long do you think it will take to make that change? Is it a candidate for making it into 0.9?\r\n\r\nNot trying to pushy, just need to provide information to people using Coinpunk. Thanks for the feedback!", "comment_meta": "2861\t26014195\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26014195\tkyledrake"}
{"comment_text": "@kyledrake It's not about implementation - I expect that little would change. The reason to suggest it, is because the main controversy seems to be what the semantics of unspendable coins would be. If they behave identically to an already existing concept (lockunspent), the semantics are clear.\r\n\r\nAnd I'm working on other things first.", "comment_meta": "2861\t26016778\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26016778\tsipa"}
{"comment_text": "@laanwj I do agree that having entire wallets be watch-only or not would certainly be an easier abstraction, but IMHO that means we need multiwallet as well.", "comment_meta": "2861\t26661566\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26661566\tsipa"}
{"comment_text": "Just want to give my love to @sipa, thanks for the feature! Hope it gets merged soon. +1", "comment_meta": "2861\t26661771\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26661771\tjegz"}
{"comment_text": "@sipa Yes, let's just go ahead with this. Even with watch-only wallets we'll need \"importaddress\" and unspendable outputs.\r\n\r\nACK; tested and it works as expected\r\n", "comment_meta": "2861\t26710932\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26710932\tlaanwj"}
{"comment_text": "@laanwj  +1  That's the bottom line\r\n\r\nACK, did a quick test and re-review\r\n", "comment_meta": "2861\t26719836\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26719836\tjgarzik"}
{"comment_text": "Just to add to the testing reports: I haven't found a single error using importaddress and listunspent using this code so far, and I've used it quite a bit. It's been working great in testnet and production for me.", "comment_meta": "2861\t26745272\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26745272\tkyledrake"}
{"comment_text": "@keo It seems I never replied to your comment, but what may seem as overcomplication is rather the opposite.\r\n\r\nBeing able to always query information about any address's history, requires a rather large index to be maintained (multiple gigabytes). Using that for a simple wallet service means you become dependent on such an index, and your system will for example not be compatible with block chain pruning (not storing old parts of the block chain on disk). And most of all, it isn't needed for normal operation. Contrary to how many people see the system, internally it doesn't work with addresses at all - those are just part of an authentication layer on top of transactions (implemented through scripts).\r\n\r\nFor anyone just needing information about some wallet, where potentially not all keys are known, this is a much more efficient and scalable solution.", "comment_meta": "2861\t26758690\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26758690\tsipa"}
{"comment_text": "It doesn't really make sense for address-watching to add outputs to the wallet in the first place, since the outputs aren't really related beyond the receive notification.", "comment_meta": "2861\t27273212\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27273212\tluke-jr"}
{"comment_text": "My testing indicates that Coin Control #2343 and Watch Only operate fine independently, but the combination has issues.\r\n\r\nhttps://github.com/litecoin-project/bitcoinomg/commits/bitcoin-omg-0.8\r\nHere is my branch of Bitcoin 0.8.5 where I initially tried to add watchonly to coin control by filtering out the watchonly outputs in AvailableCoins().  That succeeded in excluding the unspendable coins from the selection dialog, Coin Control appears to calculate the tx size and fee correctly, but then things go wrong after you Send.\r\n\r\nOne transaction I attempted had 67 inputs and was just under 10KB qualifying for free with a sufficiently high priority.  After send, the client ended up failing with the \"Transaction too large\" error, meaning the client thought the transaction was in excess of 100KB.  Another attempt with a 2KB transaction failed with an insufficient fee as the client thought the actual size was much larger than what Coin Control believed it to be.\r\n\r\nThe way Coin Control is currently structured it is uncertain if it can use watchonly's fSpendable as intended.  I also wonder if it would be useful to anything for it to be tri-state like IsMIne() instead of a boolean.", "comment_meta": "2861\t27464246\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27464246\twtogami"}
{"comment_text": "I forgot to mention, Coin Control + Watch Only exhibits this strange erroneously large transaction behavior even if you have zero watchonly addresses.", "comment_meta": "2861\t27477678\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27477678\twtogami"}
{"comment_text": "@kyledrake \r\nWould Coinpunk be usable with a fully watch-only wallet?  It would be a lot safer and less confusing to allow watch-only addresses only if a wallet does not mix with privkey addresses.  I have to admit while testing this earlier that the user experience with the current watchonly implementation is very confusing when you have a mixed wallet.  The \"fake-encrypted\" wallet approach would allow a watch-only wallet to happen safely and easily.", "comment_meta": "2861\t27671538\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27671538\twtogami"}
{"comment_text": "@wtogami Coinpunk would be usable with a watch-only wallet, correct. I'm not sure if others would like to have the private key addresses for other purposes, but for me, private key addresses are not needed.", "comment_meta": "2861\t27703385\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27703385\tkyledrake"}
{"comment_text": "@kyledrake \r\nGiven the current conflict Watch Only will not improve until Coin Control #2343 is first merged.  CC is pretty much done except people need to step through the Test Plan in that ticket.  Could you please direct people to participate in that?", "comment_meta": "2861\t27874594\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27874594\twtogami"}
{"comment_text": "I fully agree that having a mixed wallet, with both spendable keys and other unspendable addresses, leads to a more complex and potentially confusing interface. However:\r\n * As long as we don't have multiwallet, I believe that forcing an entire wallet to be spendable or not makes this less useful. This is arguable a problem on its own that needs fixing, but work around multiwallet support seems to have declined.\r\n * For effectively dealing with multisig transactions where you only have some of the required keys, you inevitably need some form of watch-only (in a wallet with actual keys) to use the raw transaction API, unless you're implementing an entire wallet from scratch\r\n * We effectively already have non-spendable coins in wallets, through `lockunspent`\r\n", "comment_meta": "2861\t27964917\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27964917\tsipa"}
{"comment_text": "@sipa I agree. IMO the complication of the current solution would be less if it was more visible to the user through the interface; for example if getinfo and such were to return two balances: a spendable and a watch-only balance. \r\n\r\nInternally this could be implemented by making GetBalance take an IsMineType. This would also fit better into the overview page in the GUI.\r\n", "comment_meta": "2861\t27966370\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27966370\tlaanwj"}
{"comment_text": "@sipa +1\r\n", "comment_meta": "2861\t27967829\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27967829\tjgarzik"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/a13f1e8f61f2c4f32c72c72409ea591228557434 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2861\t28142876\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28142876\tBitcoinPullTester"}
{"comment_text": "This is working awesome for me. Thank you @sipa  and all other people here too. \r\nI want to ask, how can we delete a watched only address from being \"watched\". Because I sync my cache from \"listtransactions *\"  from now and then I don't want bitcoind to keep being aware of some address. Can I remove them? ", "comment_meta": "2861\t29104359\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29104359\timton"}
{"comment_text": "I don't see the need for a non-standard \"bitcoin-format\" header...\r\n\r\nAccept: application/x-bitcoin-block, application/json\r\nAccept-Encoding: hex", "comment_meta": "2844\t21370296\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21370296\tluke-jr"}
{"comment_text": "@luke-jr I agree, and make the default for Accept: \\*/\\* be to output json so curl usually works the way people expect.", "comment_meta": "2844\t21371668\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21371668\tpetertodd"}
{"comment_text": "I think passing the requested format as an HTTP header is awkward and hard to use. I'd say either a /rest/tx/<txid>/<format> or ?format=<format>. This also allows us to for example at some point build a minimal HTML interface that links to it, without breaking compatibility or changing the earlier interface.", "comment_meta": "2844\t21374823\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21374823\tsipa"}
{"comment_text": "Yes, please don't invent a new HTTP header: this is exactly what the `Accept` is for. Allowing a `?format=` GET parameter alternative covers cases where specifying headers is inconvenient or impossible.\r\n\r\nUsing Accept-Encoding for 'hex' struck me as a little weird, but having read the spec again it appears to be correct. I'm not sure why you'd ever use hex though when sending raw binary data over HTTP is fine, and when that is not an option the less verbose base64 is commonplace.. If this were me writing the patch, I'd support the following formats:\r\n\r\n**Raw/binary**\r\n\r\n    Accept: application/octet-stream\r\n    ?format=raw\r\n\r\n**Base64-encoded binary**\r\n\r\n    Accept: application/octet-stream\r\n    Accept-Encoding: base64\r\n    ?format=base64\r\n\r\n**JSON**\r\n\r\n    Accept: application/json\r\n    ?format=json\r\n\r\n**XML**\r\n\r\n    Accept: application/xml\r\n    ?format=xml\r\n\r\nNote that with `Accept-Encoding` the server notifies the client that the requested encoding was honored by including a `Content-Encoding` in the response.", "comment_meta": "2844\t21376342\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21376342\tmaaku"}
{"comment_text": "Also, I would suggest using the base url `/api/v1/`, for hopefully obvious reasons.", "comment_meta": "2844\t21376404\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21376404\tmaaku"}
{"comment_text": "The Accept/Accept-Encoding feedback seems to be in line with HTTP spec, and widely requested.\r\n\r\nOn the version number in API:  it's already there, in one sense.  The API *major* version number will change very infrequently -- perhaps once a decade, if the bitcoind JSON-RPC compatibility is any guide.\r\n\r\nAs such, it is trivial to direct API version 2 callers to /rest2/\r\n\r\nAny change outside a major compatibility break may easily be handled within the /rest/ namespace.\r\n\r\nIf people want to bikeshed and strongly prefer /rest1/ that's fine.  Just pointing out how infrequent are major version number changes, and the fact that the current scheme already handles major version changes.", "comment_meta": "2844\t21386251\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21386251\tjgarzik"}
{"comment_text": "Added:  In the past, /api/v1 has been suggested for the *RPC* interface.  At this point, \"api\" is too generic I think.\r\n", "comment_meta": "2844\t21388441\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21388441\tjgarzik"}
{"comment_text": "@sipa makes a fair point about requiring a header being a bit more difficult.  Software such as dumb browsers do not permit easy HTTP header modification.  However, query strings are bloody ugly.\r\n\r\ngithub.com-style clean URLs seem like a smart way to go, e.g.\r\n```\r\n    GET /rest/tx/TX-HASH/json\r\n```\r\n\r\nto get the non-default JSON output.\r\n\r\nEasy enough to add modifiers after the TX-HASH.\r\n", "comment_meta": "2844\t21417535\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21417535\tjgarzik"}
{"comment_text": "Updated commits and pull req description to indicate use of \"clean\" URLs.\r\nNon-standard header \"Bitcoin-Format\" removed.\r\n", "comment_meta": "2844\t21419762\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21419762\tjgarzik"}
{"comment_text": "> GET /rest/tx/TX-HASH/json\r\n\r\nIs that actually how github does it? `TX-HASH.json` might be a better choice, I think. Dumb clients which ignore the headers will assume it's json from the extension.", "comment_meta": "2844\t21432492\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21432492\tmaaku"}
{"comment_text": "@jgarzik thank you! This is the beginning of a usable, clean API which appeals to merchants and PSPs.\r\n\r\n@maaku agree on providing .json instead of /json - seems to be the way everyone does it (without saying anything about whether this is good or bad).", "comment_meta": "2844\t22262030\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22262030\tkeo"}
{"comment_text": "Excuse me if this is out of place, but why implement this in bitcoind?\r\n\r\nWriting an external program that wraps bitcoind RPC calls and allows HTTP querying makes much more sense to me. As far as I can see this adds no new information retrievable from bitcoind, it only changes the protocol/format. A simple Python script should be able to do this, no?", "comment_meta": "2844\t22262583\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22262583\truneksvendsen"}
{"comment_text": "Just for fun, I created a simple Python script that does this: https://github.com/runeksvendsen/btchttp/blob/master/btchttp.py\r\n\r\nIt only supports JSON right now, but should easily extensible.", "comment_meta": "2844\t22446819\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22446819\truneksvendsen"}
{"comment_text": "+1 for @runeksvendsen : I'd rather ship a version of his btchttp.py in contrib/ than make core bitcoind bigger.\r\n", "comment_meta": "2844\t22447903\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22447903\tgavinandresen"}
{"comment_text": "The risk in moving this to contrib is that the majority of peers wouldn't\r\nuse it, and then when ISPs start blocking the original bitcoin protocol the\r\nnetwork is more likely to die. What we really need is HTTPS so that it's\r\nharder to block.\r\n\r\nOn Sunday, August 11, 2013, Gavin Andresen wrote:\r\n\r\n> +1 for @runeksvendsen <https://github.com/runeksvendsen> : I'd rather\r\n> ship a version of his btchttp.py in contrib/ than make core bitcoind bigger.\r\n>\r\n> \u2014\r\n> Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22447903>\r\n> .\r\n>", "comment_meta": "2844\t22449659\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22449659\trebroad"}
{"comment_text": "@rebroad This is not an interface intended to be exposed to the internet. You can do so of course, but it's not a replacement for the P2P system (it's more an addition to RPC). It's just an interface to ease debugging, or help other local applications that need access to raw block/transaction data.\r\n\r\nRegarding whether this belongs in bitcoind, I'm in the middle. I understand the concern about not bloating bitcoind even further, but if such a feature means more people running a local bitcoind instead of relying on some centralized webservice, I'm all for it. The same goes for an address index, and a potential minimal built-in block explorer. However, I'm not sure what this adds that isn't available already. Humans will not use this interface, IMHO, and external applications can already use getblock/getrawtransaction.", "comment_meta": "2844\t22454377\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22454377\tsipa"}
{"comment_text": "I fear several commenters here read the pull request title, and did not examine what the code actually *does*.\r\n\r\nSome salient points:\r\n* Dramatically easier interface for developers and general queries\r\n* Out of the box SSL support, already built into bitcoind\r\n* This pull adds functionality not available via RPC (there is no getrawblock) -- thus the btchttp.py example does not provide what this pull request provides.\r\n* Wider selection of command line tools work out of the box with HTTP REST, versus JSON-RPC\r\n* Nobody will write their own proxy to accomplish this\r\n* A contributed proxy, shipped with bitcoind, might be used -- but it is obviously a fragile, two-process unsupported solution\r\n", "comment_meta": "2844\t22459961\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22459961\tjgarzik"}
{"comment_text": "@jgarzik It's clearly a compromise between usability and bloat, which may or may not be worth it (see my other comment regarding that), however, there IS a getrawblock, it's called getblock [hash] false.", "comment_meta": "2844\t22460346\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22460346\tsipa"}
{"comment_text": "Rebased.  The first commit is a cleanup candidate for immediate inclusion, too.\r\n", "comment_meta": "2844\t23218677\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23218677\tjgarzik"}
{"comment_text": "Updated for @maaku 's suggestion of HASH.EXTENSION, where the extension (.json, .txt, .dat) selects the format.\r\n\r\nUpdated OP examples.\r\n", "comment_meta": "2844\t23220357\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220357\tjgarzik"}
{"comment_text": "ACK", "comment_meta": "2844\t23230413\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230413\tsipa"}
{"comment_text": "Rebased for CreateNewBlock() update.", "comment_meta": "2844\t23241002\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23241002\tjgarzik"}
{"comment_text": "JFYI:  Since it was easy, I implemented the following on a side branch:\r\n```\r\n     GET /rest/block/template.(dat|txt)\r\n```\r\n\r\nto download the binary (/hex) encoding of a miner block template.  No fee or sigop information is provided, just straight CBlock and nothing else.\r\n\r\nIt seems nice and efficient for a pool server to simply request the binary block from a trusted node, and vary bits of the header and coinbase from there.\r\n\r\nAs noted at top, this is on a side branch, and will not be added to this pull req.", "comment_meta": "2844\t23241581\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23241581\tjgarzik"}
{"comment_text": "Merge-ready\r\n", "comment_meta": "2844\t23310170\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310170\tjgarzik"}
{"comment_text": "Rebased.  Merge-ready.\r\n\r\nNote: I also have a HTTP REST interface for \"getblocktemplate\" on a local side branch.\r\n", "comment_meta": "2844\t25549364\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25549364\tjgarzik"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/009ca574d83af47f8ff4c4cd7b17e052fe1737de for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2844\t26310428\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26310428\tBitcoinPullTester"}
{"comment_text": "Pull-tester error: rest.h is mentioned in the Makefile.am, but there ain't no rest.h committed.\r\n\r\nAlso, when testing:  Is it supposed to be ...TXHASH.json or TXHSAH/json  ?  The former complains \"invalid hash\", the latter works.\r\n", "comment_meta": "2844\t26310500\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26310500\tgavinandresen"}
{"comment_text": "I like the interface.\r\n\r\nRegarding bloat/redundancy, is this going to deprecate the JSON API calls for doing non-authenticated, non-wallet queries eventually?\r\n", "comment_meta": "2844\t26315587\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26315587\tlaanwj"}
{"comment_text": "It also makes sense to have a different interface for block chain data if we want to split the wallet off into another executable eventually. The \"block chain daemon\" part wouldn't need a JSON RPC interface at all.\r\n\r\n", "comment_meta": "2844\t26697462\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26697462\tlaanwj"}
{"comment_text": "1) Feature request seems sane.  30 second glance did not turn up any bugaboos.\r\n\r\n2) Mild conflict with #2776 but easily resolved.\r\n\r\n3) Waiting to see if pulltesters likes these new commits.  A bit worried that the first commit breaks git bisect?\r\n", "comment_meta": "2841\t21348723\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21348723\tjgarzik"}
{"comment_text": "needs rebase", "comment_meta": "2841\t22747391\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22747391\tgmaxwell"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/4ec0d1d99554e4109bfcef1970b1354e89cc6a97 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2841\t24572269\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24572269\tBitcoinPullTester"}
{"comment_text": "needs rebase again", "comment_meta": "2841\t25493614\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25493614\twtogami"}
{"comment_text": "I ain't never seen a double-negative I didn't disapprove of.\r\n\r\nOption should be -autofillkeypool, default should be 1, set it to 0 to turn it off.\r\n\r\nAnd needs rebase and a test plan.\r\n", "comment_meta": "2841\t26689264\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689264\tgavinandresen"}
{"comment_text": "I like this feature, as I'd like to have more control over when and whether it refills the key pool, so that I know exactly when there are new keys in the wallet and I need to make a new backup. It just feels safer.\r\n", "comment_meta": "2841\t26783720\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26783720\tlaanwj"}
{"comment_text": "Maybe I/someone should just implement very basic BIP32 key generation instead :)", "comment_meta": "2841\t26784884\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26784884\tsipa"}
{"comment_text": "That'd be a good option too. But as long as we have a keypool option (and I don't think it's wise to completely do away with the keypool as soon as introducing deterministic wallet support) having more explicit control over it would be useful. And this code is already written...\r\n", "comment_meta": "2841\t26789927\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26789927\tlaanwj"}
{"comment_text": "I wonder if it should be -generatekeys=0/1 instead, so it covers any future cases where keys might be created.", "comment_meta": "2841\t27010572\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27010572\tluke-jr"}
{"comment_text": "@CodeShark I've rebased it: https://github.com/laanwj/bitcoin/tree/2013_10_noautorefillkeypool_rebase\r\n\r\n@luke-jr yes, it should block all the cases in which keys are added to the wallet automatically. But in the (future) case of HD wallets it could \"generate\" new keys from the seed even with this option on.\r\n", "comment_meta": "2841\t27014361\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27014361\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/9fe9d788a9eaf40cc5dd1171807b24c9bd170104 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2839\t21302121\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21302121\tBitcoinPullTester"}
{"comment_text": "Could also be used for whitebox test instrumentation: E.g. have a table with the proper utxo state for every height, and use blacklisting to walk all the way back while checking it.", "comment_meta": "2839\t21302247\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21302247\tgmaxwell"}
{"comment_text": "ACK\r\n", "comment_meta": "2839\t21347973\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21347973\tjgarzik"}
{"comment_text": "I was thinking it'd be better to allow tx hash blacklisting. To blacklist a block you'd blacklist its coinbase.\r\n\r\nTX blacklisting would allow app developers to more easily test double spend and reorg handling in regtest mode.", "comment_meta": "2839\t21793211\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21793211\tmikehearn"}
{"comment_text": "@mikehearn Makes sense, but that'd be more work, as there is no transaction index (and the optional one isn't used for validation). For blocks, there is already a mechanism for marking them invalid in the block index db.", "comment_meta": "2839\t21794032\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21794032\tsipa"}
{"comment_text": "Bitcoin already re-validates the last N hundred blocks on startup, right? Do you imagine your patch ever being used to blacklist a block more than a few hundred blocks deep? If not, then it would still seem to be possible.", "comment_meta": "2839\t21873450\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21873450\tmikehearn"}
{"comment_text": "Not sure how that is related. This is not something that happens at startup - it can mark a block invalid during execution, and it will reorganize away from it instantly. If anything, this is very useful to test edge cases in the block connection logic.\r\n\r\nFor blacklisting transactions that are in the blockchain already, you'd need a transaction index anyway, and if you do, it's easy enough to look up the block your transaction is in, and blacklist that. For blacklisting mempool transactions (which is more useful, I think - it's unlikely that you hate a transaction that much that you want to cause a hardfork over it), a different approach is needed, but it'd very simple to do: just call mempool.erase from an RPC call.", "comment_meta": "2839\t21938028\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21938028\tsipa"}
{"comment_text": "Just to clarify: blacklistblock permanently blacklists a block; the only way to undo it is to -reindex the block chain.\r\n\r\nI think that should go in the blacklistblock help message; people might assume that the blacklist state is memory-only and can be reset by restarting.\r\n\r\nOtherwise: ACK.", "comment_meta": "2839\t22095477\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22095477\tgavinandresen"}
{"comment_text": "ACK (even it isnt up to me), this could save us alot of time if we run in the same trouble again", "comment_meta": "2839\t22233193\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22233193\tK1773R"}
{"comment_text": "It sounds like people are in favor of this but only want the help message to more explicitly explain what it does and the danger of misusing it?", "comment_meta": "2839\t23380430\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23380430\twtogami"}
{"comment_text": "@mikehearn I wrote this pull request as preparation for headers-first sync, and the current headers-first sync pull request still includes it, but most of the code touched here (except the actual RPC implementations) is rewritten for headers-first anyway.", "comment_meta": "2839\t24918412\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24918412\tsipa"}
{"comment_text": "Maybe it should be closed then.", "comment_meta": "2839\t24918661\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24918661\tmikehearn"}
{"comment_text": "Close?", "comment_meta": "2839\t26237871\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26237871\twtogami"}
{"comment_text": "So should this be closed?\r\n", "comment_meta": "2839\t29053065\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29053065\tlaanwj"}
{"comment_text": "Closing until updated.", "comment_meta": "2839\t29068757\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29068757\tsipa"}
{"comment_text": "Any ideas on how this could be usefully automatically tested?\r\n", "comment_meta": "2834\t21210309\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21210309\tgmaxwell"}
{"comment_text": "- Fetch a template with getblocktemplate()\r\n- Spawn a second thread which simulates a new block on the network after 5 seconds\r\n- Time a request to getblocktemplate with longpollid set to the value provided by previous reply\r\n- Ensure time is within 4-6 seconds.\r\n- Spawn a second thread which increments the \"new transactions counter\" after 5 seconds\r\n- Time a request to getblocktemplate with longpollid set to the value provided by previous reply\r\n- Ensure time is within 59-61 seconds.\r\n- Spawn a second thread which increments the \"new transactions counter\" after 65 seconds\r\n- Spawn a third thread which requests a new template (no longpollid) after 5 seconds, and ensure it returns immediately (to check longpoll doesn't block RPC completely)\r\n- Time a request to getblocktemplate with longpollid set to the value provided by previous reply\r\n- Ensure time is within 64-121 seconds.\r\n", "comment_meta": "2834\t21229609\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21229609\tluke-jr"}
{"comment_text": "@luke-jr how about making changes so you can specify after which time X you get a new template?", "comment_meta": "2834\t22233078\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22233078\tK1773R"}
{"comment_text": "@K1773R That might make sense for a future pull request.", "comment_meta": "2834\t22234309\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22234309\tluke-jr"}
{"comment_text": "Quick review seems OK... wants testing and additional review at a minimum\r\n", "comment_meta": "2834\t23220849\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220849\tjgarzik"}
{"comment_text": "Rebase needed.\r\n", "comment_meta": "2834\t26689128\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689128\tgavinandresen"}
{"comment_text": "Rebased.", "comment_meta": "2834\t27043633\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27043633\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/d8d173f128d7021cc14c31f3261ed5b6807ee725 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2834\t27045376\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27045376\tBitcoinPullTester"}
{"comment_text": "@mikehearn Would this interact badly with BitcoinJ wallets? How frequently do they send pings?\r\n(or anyone with an alternate implementation)", "comment_meta": "2784\t19861397\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19861397\tsipa"}
{"comment_text": "bitcoinj sends pings every two seconds, it's much more aggressive than this patch. We could certainly reduce it. Ping times are used to pick which peer to download from.", "comment_meta": "2784\t19874318\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19874318\tmikehearn"}
{"comment_text": "The disconnect logic seems like it would negatively impact testnet.", "comment_meta": "2784\t19879931\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19879931\tjgarzik"}
{"comment_text": "Inverted the logic, so it now becomes a ping if nothing has been received for a while, rather than sent.\r\n\r\nTested that it indeed detects broken connections within one minute.", "comment_meta": "2784\t19882740\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19882740\tsipa"}
{"comment_text": "Change looks good to me, although it will have the effect of disconnecting any nodes that don't respond to pings with pongs (or some other message). As pong messages were added in protocol version 60000 it would effectively EOL clients older than that and this may deserve an announcement somewhere.\r\n\r\nHowever bitcoinj clients will be fine with it.", "comment_meta": "2784\t20512785\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20512785\tmikehearn"}
{"comment_text": "So, this causes nodes to impose an upper bound on their peers response latency. Effectively, someone who will take a minute to respond can't participate in the network at all. This may adversely impact some anonymity protocols which cause high latency\u2014 for many kinds of Bitcoin usage the latency isn't all that critical. I'd suggest that such users should be using an alternative transport, except the bitcoin p2p protocol is already reasonably well designed for high latency usage (at least its highly asynchronous).\r\n\r\nSome of the other side effects of timeouts is that they can reduce link stability during a DOS attack, and they can preclude some kinds of node high availability schemes which might cause tens of seconds of unresponsiveness (e.g. during a state resync or hardware migration).  Connection slot filling attacks are more effective if you can overload a peer temporarily and make them drop all their good connections.\r\n\r\nSome other protocols, like BGP, negotiate the heart-beating\u2014 30, 90 being a common set of parameters in that case\u2014 to address the problem of potentially imposing too fast a response requirement.  But since our network protocol is _mostly_ stateless (though\u2014 it has become less so with bloom-filtering, and never was completely: e.g. inv caching) there is less of an issue as restarts aren't so bad.\r\n\r\nI'd instead prefer a longer timeout and _separately_ having peer rotation code that periodically slays the least recently active node from node out of the set which been heard from in >60 seconds. E.g. imposing the shorter timeout but only when we could potentially better use the slot.\r\n\r\nTCP's design targets a maximum segment lifetime of 2 minutes. Many operating systems have an SO_KEEPALIVE timeout of around 10 minutes. Somewhere in that range \r\n", "comment_meta": "2784\t20573463\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20573463\tgmaxwell"}
{"comment_text": "It would be easy to adjust the timeout for onion addresses, but really, I'm not sure we want nodes in the network that can't respond within a minute. Slow nodes can have terrible effects on the user experience for SPV wallets. They will automatically drop to the bottom of the preference list in bitcoinj and not be used for much except observing broadcasts, for that reason.\r\n\r\nThat said, just dropping the slowest peer when we run out of slots on the bitcoind side indeed sounds reasonable.", "comment_meta": "2784\t20603317\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20603317\tmikehearn"}
{"comment_text": "How about a 5-minute timeout, and get this merged?  Maybe 1 minute is too short, but 90 is far too long.\r\n", "comment_meta": "2784\t23220987\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220987\tjgarzik"}
{"comment_text": "Suggestion: send pings _every_ 2 minutes (even in case something was received recently, with the new ping-response-time-measurement that means we always get some useful latency information), and disconnect after receiving nothing for 5 minutes.", "comment_meta": "2784\t26230542\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230542\tsipa"}
{"comment_text": "@sipa  ACK unconditional 2 minute ping plus 5 minute disconnect.", "comment_meta": "2784\t26272177\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26272177\tgmaxwell"}
{"comment_text": "Rebased & updated.", "comment_meta": "2784\t26295067\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26295067\tsipa"}
{"comment_text": "ACK.", "comment_meta": "2784\t26296509\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26296509\tgavinandresen"}
{"comment_text": "There may be a bug in this code; will investigate later.\r\n\r\nEDIT: fixed.", "comment_meta": "2784\t26297069\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26297069\tsipa"}
{"comment_text": "ACK\r\n\r\nOptional nit:  \"5 * 60\" is more self-documenting than \"300\", and the previous code used the \"M * 60\" notation.  All modern compilers will automatically convert the more human-readable M*60 at compile time, so there is no added runtime cost.\r\n\r\n", "comment_meta": "2784\t26304885\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26304885\tjgarzik"}
{"comment_text": "Moved/added the ping/timeout constants to net.h (where they can be accessed by both net & main), and changed the timeout logic a bit: either there is an unanswered ping >5 minutes old, or there has been no message received at all for 5 minutes.", "comment_meta": "2784\t26367710\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26367710\tsipa"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/f9eeb06c10d826a56389b8473ec48549d4d57787 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2784\t26375968\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26375968\tBitcoinPullTester"}
{"comment_text": "Currently running this patch myself on bitcoin.sipa.be. I see a surprisingly high number of ping timeouts and inactivity timeouts (every 10 minutes or so, very irregularly). I'll investigate whether these are actual connections that go dead (in which case this patch is actually useful...) or a problem with the disconnection logic.", "comment_meta": "2784\t26444184\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26444184\tsipa"}
{"comment_text": "@laanwj I tested the pulltester executable and it does what it should :).", "comment_meta": "2612\t17431185\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17431185\tDiapolo"}
{"comment_text": "Updated:\r\n- re-work handling of language settings and move default language code into OptionsModel::getLanguage()", "comment_meta": "2612\t17454939\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17454939\tDiapolo"}
{"comment_text": "@laanwj Did you yet test this pull?", "comment_meta": "2612\t17526432\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17526432\tDiapolo"}
{"comment_text": "No, not yet", "comment_meta": "2612\t17529152\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17529152\tlaanwj"}
{"comment_text": "I found a bug, which always displays the \"need to restart message\" even when chaning stuff that doesn't require a client restart... will look into this later.", "comment_meta": "2612\t17621866\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17621866\tDiapolo"}
{"comment_text": "I'm still working on the options dialog, currently it's looking like this:\r\n![options](https://f.cloud.github.com/assets/1419649/523468/ecbdabf8-c0bb-11e2-8ca7-87065ae4f9f6.png)\r\n\r\n@laanwj I intend to always show the real QSettings values without trying to mess around with showing the real state values. Reason is, it really sucks to try to allow changing a QSetting, which is overriden and whose saved state isn't even shown in the GUI.", "comment_meta": "2612\t18123486\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123486\tDiapolo"}
{"comment_text": "@Diapolo Needs rebase.", "comment_meta": "2612\t21091066\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091066\tluke-jr"}
{"comment_text": "@luke-jr And I need some feedback :)! Anyway, I currently don't intend to rebase but will rather update the whole pull. I just need some time and motivation to restart working on this.", "comment_meta": "2612\t21408562\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21408562\tDiapolo"}
{"comment_text": "I don't like that it requires a restart unnecessicarily.\r\n\r\nI didn't notice the rest of the changes.", "comment_meta": "2612\t21429933\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21429933\tluke-jr"}
{"comment_text": "@Diapolo could you rebase (if motivated again...). I could also check the changes and give you feedback.", "comment_meta": "2612\t24265242\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24265242\tjonasschnelli"}
{"comment_text": "@jonasschnelli Yeah I can rebase and I really would love to get some help with this also :). I'm just taking my current code without doing the commit-msg now and will base it on top of my core proxy pull, as this is also used in the options rework.", "comment_meta": "2612\t24442021\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24442021\tDiapolo"}
{"comment_text": "Rebased and updated to include all changes I had in my local build for some months now. Needs feedback and a careful review, so please help me dear core-devs and others :).", "comment_meta": "2612\t24442984\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24442984\tDiapolo"}
{"comment_text": "recommended graphical/UI changes:\r\n\r\n![bildschirmfoto-2013-09-25-um-09 39 16](https://f.cloud.github.com/assets/178464/1207390/56a746f0-25b6-11e3-8fc9-7d86b37c39cb.png)\r\n", "comment_meta": "2612\t25067501\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25067501\tjonasschnelli"}
{"comment_text": "because i'm not a proxy/tor guy as well as i have not enough understanding of the cache / verification thread mechanism, i can't give you a ACK on that.", "comment_meta": "2612\t25067567\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25067567\tjonasschnelli"}
{"comment_text": "after building and starting bitcoin-qt i've got a -paytxfee warning (see picture).\r\nBut my txfee set in QT perfs pannel is 0.00000005.\r\n\r\nCheck:\r\n![bildschirmfoto 2013-09-25 um 09 48 26](https://f.cloud.github.com/assets/178464/1207408/082b52fe-25b7-11e3-97ef-539f158933a3.png)\r\n![bildschirmfoto 2013-09-25 um 09 49 29](https://f.cloud.github.com/assets/178464/1207409/0c1c4990-25b7-11e3-8f57-6aa6bcc3e2d6.png)\r\n\r\n", "comment_meta": "2612\t25067719\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25067719\tjonasschnelli"}
{"comment_text": "Thanks for your comments, I will take a look into your UI suggestions. Have you a bitcoin.conf in use? I never got that -paytxfee warning and will take a look there too.\r\n\r\n@jonasschnelli Can you do a configuration reset and see if that removes the txfee warning?", "comment_meta": "2612\t25072086\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25072086\tDiapolo"}
{"comment_text": "@Diapolo yes bitcoin.conf in use. But only rpc/testet settings there.\r\nThe warning popped up after building with your pull. But did some other related testing some minutes before. So it might be another thing.", "comment_meta": "2612\t25072720\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25072720\tjonasschnelli"}
{"comment_text": "Updated: Removes Apply button from optionsdialog as requested in #3030.", "comment_meta": "2612\t25318392\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318392\tDiapolo"}
{"comment_text": "@jonasschnelli \r\n![options](https://f.cloud.github.com/assets/178464/1207390/56a746f0-25b6-11e3-8fc9-7d86b37c39cb.png)\r\n\r\nI changed the lower part of the UI to be not special anymore (it's a seperate frame but has no special UI style set). It's not part of the tab element, because I wanted it to be visible everytime, no matter, which tab is activated. Can you perhaps post a screen of the current pull?\r\n\r\nEdit: I'm not sure about the expert tab, as this 2 options were requested by @sipa for general availability ;).", "comment_meta": "2612\t25318485\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318485\tDiapolo"}
{"comment_text": "@jonasschnelli ping", "comment_meta": "2612\t25516356\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25516356\tDiapolo"}
{"comment_text": "some screenshots on mac osx 10.7 qt 4.8\r\n\r\n![bildschirmfoto 2013-10-03 um 11 21 06](https://f.cloud.github.com/assets/178464/1260793/3c8e3cd8-2c19-11e3-8e97-6972f1bea02e.png)\r\n\r\n![bildschirmfoto 2013-10-03 um 11 21 14](https://f.cloud.github.com/assets/178464/1260794/43a5b8ac-2c19-11e3-981b-42f278b6023c.png)\r\n\r\n\r\n![bildschirmfoto 2013-10-03 um 11 21 10](https://f.cloud.github.com/assets/178464/1260791/1c25245c-2c19-11e3-813d-2f78db828c77.png)\r\n\r\n", "comment_meta": "2612\t25611211\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25611211\tjonasschnelli"}
{"comment_text": "There is still a problem with the unit...\r\nsee:\r\n\r\n![bildschirmfoto 2013-10-03 um 12 19 45](https://f.cloud.github.com/assets/178464/1260795/593e73c0-2c19-11e3-80af-598807d564a0.png)\r\n\r\n![bildschirmfoto 2013-10-03 um 12 20 16](https://f.cloud.github.com/assets/178464/1260796/a53657a2-2c19-11e3-867a-17a6d2db4742.png)\r\n", "comment_meta": "2612\t25611244\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25611244\tjonasschnelli"}
{"comment_text": "Thanks for the screens, UI looks good IMHO, but I have NO idea, about the -paytxfee problem currently. As requested, what happens without bitcoin.conf and after an options reset? I'll investigate further...", "comment_meta": "2612\t25619149\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25619149\tDiapolo"}
{"comment_text": "used a fresh datadir,... same problem (txfee in preference window is 0.0001, but seams to be 5BTC internally).\r\nLooks like that the default tx fee is somehow wrong and are not corresponding to the UI settings value.\r\n\r\nIf i set the -paytxfee=0.0001 by cmd line, ... all good.", "comment_meta": "2612\t25619601\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25619601\tjonasschnelli"}
{"comment_text": "The default tx fee is 0 in the core code AFAIK.\r\n\r\nSetting paytxfee=0.0001 via bitcoin.conf is working here, same for -paytxfee=0.0001 via cmd line.\r\nThe UI value is only used, if there is no paytxfee in .conf or cmd line anyway and is NOT synced with the current state! When you change the tx fee in the UI you will need to restart currently, because of ``ParseMoney()`` in init.cpp. Perhaps I have some brain-fuckup in there currently.\r\n\r\nGot it, there IS currently a bug with conversion from UI setting 0.001 to used tx fee I need to investigate! Thanks for bringing me on the right track!\r\n\r\nI'm going to guess, before my changes it was possible to change tx fee on the fly because UI settings don't need ``PareseMoney()`` to work and I'm going to restore the previous behaviour to fix that...", "comment_meta": "2612\t25620175\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25620175\tDiapolo"}
{"comment_text": "Updated:\r\n- save and restore optionsdialog window position\r\n- update nTransactionFee in QSettings with a set -paytxfee value when opening optionsdialog (I'm not sure about this yet, perhaps revert to not updating QSettings and just display current -paytxfee value in optionsdialog.)\r\n\r\n@jonasschnelli Can you retest current code and see if this fixes the tx-fee problems :).", "comment_meta": "2612\t25631966\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25631966\tDiapolo"}
{"comment_text": "@Diapolo paytxfee issue is fixed. Works as expected now.\r\nBut can't give you an ACK because i don't have the time and experience to test the proxy, etc. settings.\r\n\r\nThe visual part (UI) looks good for me.", "comment_meta": "2612\t25679362\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25679362\tjonasschnelli"}
{"comment_text": "@jonasschnelli Thanks for testing! There were reports of misbehaving options in our Github issues, can you report if these are fixed or if something has changed on that part?", "comment_meta": "2612\t25682766\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682766\tDiapolo"}
{"comment_text": "@diapolo, @jonasschnelli  great work here\r\n", "comment_meta": "2612\t25687007\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687007\tlaanwj"}
{"comment_text": "Needs rebase for -tor -> -onion change in init.cpp.\r\n\r\n", "comment_meta": "2612\t26712367\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26712367\tlaanwj"}
{"comment_text": "Needs rebase after coin control features introduction.\r\n\r\n@Diapolo Can you make a list of what needs to be tested here?\r\nIt's too bad that this contains so many core changes and isn't just a GUI refactor, this makes it harder to merge and test.\r\n", "comment_meta": "2612\t28791111\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28791111\tlaanwj"}
{"comment_text": "Indeed it sucks that this is dependend on core changes... I thought about reworking it or splitting it up into smaller GUI changes, but had not time for this recently :-/. Main stuff that needs to be tested is IMHO the proxy code and restart message handling. The 2 other new core options should just work :).", "comment_meta": "2612\t28896126\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28896126\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/f873f7abb8ebf4774b53275aa9c0b5f907130730 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2612\t28911277\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28911277\tBitcoinPullTester"}
{"comment_text": "Yes it would be good to split it up. As the release of 0.9 is planned in January, let's not have any functional changes to proxy handling for 0.9. There are just no good tests for that.\r\n\r\nOn the other hand, a lot of fixes to the dialog itself are very welcome and I'd love to have them in 0.9.\r\n", "comment_meta": "2612\t28976849\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28976849\tlaanwj"}
{"comment_text": "Removed some ``.c_str()`` which were unneeded.", "comment_meta": "2575\t17082968\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17082968\tDiapolo"}
{"comment_text": "I left out changes needed in optionsmodel.cpp, that's why build fails...", "comment_meta": "2575\t17089153\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17089153\tDiapolo"}
{"comment_text": "updated optionsmodel.cpp", "comment_meta": "2575\t17089621\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17089621\tDiapolo"}
{"comment_text": "Use ``GetArg(strArg, 0)`` instead of ``mapArgs.count(strArg) && !(mapArgs[strArg] == \"0\")``, thanks sipa :).", "comment_meta": "2575\t17119469\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17119469\tDiapolo"}
{"comment_text": "Update name proxy setup to use ``GetArg(\"-proxy\", 0)``.", "comment_meta": "2575\t17136285\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136285\tDiapolo"}
{"comment_text": "@sipa Further thoughts about this?", "comment_meta": "2575\t17430825\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17430825\tDiapolo"}
{"comment_text": "Needs a test plan to test all the combinations, then needs testers to, you know, actually test them all.\r\n", "comment_meta": "2575\t19764281\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19764281\tgavinandresen"}
{"comment_text": "@gavinandresen I'm fine with a test plan, as long as this has a real chance of getting merged. Is the code okay now or is ths not wanted anyway?", "comment_meta": "2575\t19799899\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19799899\tDiapolo"}
{"comment_text": "Updated to include changes to ``getinfo``. I have not yet had the time to work out a test-plan, but everyone, who helps testing is welcome anyway :).", "comment_meta": "2575\t20029697\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20029697\tDiapolo"}
{"comment_text": "Anyone willing to help me doing that test-plan stuff and/or check out if it works like it should :)?", "comment_meta": "2575\t22821740\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22821740\tDiapolo"}
{"comment_text": "I am the last guy who should be checking GUI changes, but I will gladly follow a test plan and report back on it. (Though I can only easily test Linux, and windows builds under wine).\r\n", "comment_meta": "2575\t22847156\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22847156\tgmaxwell"}
{"comment_text": "@gmaxwell I'm glad you are interested in helping me with this one. You currently don't need to start Bitcoin-Qt to do so, as this can be tested completely via bitcoind. The only Bitcoin-Qt change is to make it compatible with a changed datastructure.\r\n\r\nShould I start by listing possible combinations of all proxy switches and how they should behave?", "comment_meta": "2575\t22851767\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22851767\tDiapolo"}
{"comment_text": "I'm going to describe the pull with some more details here.\r\n\r\nMost proxy-setup is now done using the new ``ProxyInit()`` function.\r\n\r\n``ProxyInit(Network net, const std::string& strArg, int nSocksVersion, bool fIsBase)`` parameter description:\r\n``net`` = network to setup proxy for (NET_IPV4, NET_IPV6 or NET_TOR)\r\n``strArg`` = command-line argument to get values from (-proxy, -proxy6 or -tor)\r\n``nSocksVersion`` = SOCKS version of the proxy\r\n``fIsBase`` = is that proxy a base (true) or separate proxy (false)?\r\n\r\n``ProxyInit(Network net, const std::string& strArg, int nSocksVersion, bool fIsBase)`` does the following:\r\n-pre-check, if ``net`` is not limited and -no{proxy/proxy6/tor} was NOT specified\r\n--pre-check passed: try to ``SetProxy()`` and return ``false`` on error\r\n---pre-check passed: only for ``net == NET_TOR`` call ``SetReachable();``\r\n---pre-check passed: return ``true``\r\n--pre-check failed: for base proxy (``fIsBase == true``) a failed pre-check is okay, return ``true``, otherwise ``false``", "comment_meta": "2575\t23252009\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23252009\tDiapolo"}
{"comment_text": "base proxy = ``-proxy``\r\nseparata IPv6 proxy = ``-proxy6``\r\nseparate Tor proxy = ``-tor``\r\n\r\nProxy initialisation flow (happens via ``ProxyInit()``, just name proxy is special cased in the code):\r\n-try to setup base IPv4 proxy\r\n--if SOCKS4:\r\n---try to setup separate Tor proxy, on failure disable Tor via ``SetLimited()`` (SOCKS4 = no Tor support)\r\n---try to setup separate IPv6 proxy, on failure disable IPv6 via ``SetLimited()`` (SOCKS4 = no IPv6 support)\r\n--if SOCKS5\r\n---try to setup separate Tor proxy, on failure try to setup Tor proxy via base proxy\r\n---try to setup separate IPv6 proxy, on failure try to setup IPv6 proxy via base proxy\r\n---try to setup base SOCKS5 name proxy\r\n\r\nErrors initialising base proxy or Tor/IPv6 proxies via base proxy lead to exit!", "comment_meta": "2575\t23260013\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23260013\tDiapolo"}
{"comment_text": "@gmaxwell Perhaps you could take a look at what I've written, if the current proxy handling of this pull sounds correct, before I start doing the test-plan.", "comment_meta": "2575\t23260171\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23260171\tDiapolo"}
{"comment_text": "Updated: Included suggestions from @sipa and introduced ``getproxyinfo`` and made ``ProxyInit()`` return ``fBase``.", "comment_meta": "2575\t25767583\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767583\tDiapolo"}
{"comment_text": "Still needs a test plan.", "comment_meta": "2575\t26688611\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688611\tgavinandresen"}
{"comment_text": "Updated:\r\n- greatly improved ``getproxyinfo`` call\r\n- rename fIsBase to fIsDefault and call -proxy the default proxy instead of the base proxy\r\n- add some missing ``#ifdef USE_IPV6`` guards in the code", "comment_meta": "2575\t28617612\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28617612\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/1b495f5ec27f2b8095dd8798e33ff6a158ee1ef3 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2575\t28617943\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28617943\tBitcoinPullTester"}
{"comment_text": "The feature was suggested earlier in issue #1958 and may also alleviate some problems from #273.", "comment_meta": "2412\t15437779\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15437779\tjonls"}
{"comment_text": "Nice feature, but for the GUI I think it should a) show the current state in the debug window and b) allow a click or double-klick on the connection symbol in the main window, instead of a new button in the debug window. What do you think?", "comment_meta": "2412\t15443198\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15443198\tDiapolo"}
{"comment_text": "Regarding a: The debug window actually shows the state (but maybe not in the best way), in that it appends \"(Disabled)\" to the number of connections when network activity is disabled. Are you suggesting a row in the debug window showing for example \"Network state:  <state>\"?\r\n\r\nI think double clicking on the connection symbol could also be a solution. I'm wondering though if the feature will be too hard to discover in that case, since it is not apparent that the symbol can be clicked. Also, if somebody clicked it by accident (maybe not likely?) they would not know how to get connected again.", "comment_meta": "2412\t15448961\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15448961\tjonls"}
{"comment_text": "The button ``Toggle Network activity``(activity lowercase IMO) is fine, perhaps the toggle could just also be added to the connection symbol in the main window + a tray message that gives a small warning (use BitcoinGUI::message() for that), when the state is changed.", "comment_meta": "2412\t15452540\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15452540\tDiapolo"}
{"comment_text": "I've updated the patches: 1) ToggleNetworkActive() renamed to SetNetworkActive(). I think this name makes more sense and is more consistent with naming of other functions. 2) SetNetworkActive() prints log ouput if fDebug is set, 3) ClientModel now has a method to control network activity state setNetworkActive(). This is used by RPCConsole. 4) The string in RPCConsole is the same as the string in the status bar tooltip so they can share translations.\r\n\r\nI'll look into the rest of the suggestions on the gui later.", "comment_meta": "2412\t15462624\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15462624\tjonls"}
{"comment_text": "I'm no core-developer, but did some Qt things, so thanks for your update. I like the pull and when I have more time I'll compile it and see how it feels when using it :).\r\n\r\n@laanwj What do you think?", "comment_meta": "2412\t15463122\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15463122\tDiapolo"}
{"comment_text": "I'm OK with the GUI code changes -- nice work.\r\n\r\nAbout the general idea:\r\n\r\n- Can you give a use case for this? What are you using this for?\r\n\r\n- I am not sure about the consequences for the network of accepting connections but immediately dropping them, and what would be proper behavior in this case. I *think* closing the socket so that clients get \"connection refused\" is preferable. Maybe @sipa or @gavinandresen could comment.", "comment_meta": "2412\t15632632\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632632\tlaanwj"}
{"comment_text": "Use case: Sometimes the bitcoin client can put a lot of load on the internet connection of the user resulting in a high latency for other internet activities. This may be acceptable for the user most of the time, but in some cases the user temporarily needs a low latency connection. In this case the only option currently is to close the client and reopen it later, which can take quite a while and create a lot of disk activity when the block chain is reloaded. Being able to temporarily close all connections provides a solution for this.", "comment_meta": "2412\t15635717\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15635717\tjonls"}
{"comment_text": "Update: 1) RPC commands togglenetwork and getinfo return info on current network state. 2) Signal about network active state change is sent with a separate signal NotifyNetworkActiveChanged. This means that the gui will update immediately when the button is clicked.\r\n\r\nI've looked into adding the suggestion of having the connection symbol toggle the network state as well, however the Qt label does not allow mouse clicks to be detected. This could be worked around by implementing a custom subclass of label.", "comment_meta": "2412\t15648518\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15648518\tjonls"}
{"comment_text": "I also think this is nice during IBD to get a new peer from which the client is downloading it's blocks.", "comment_meta": "2412\t15659416\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15659416\tDiapolo"}
{"comment_text": "Can transactions still be sent while the network activity is switched off? It might be nice to be able to do this still at least, and optionally download new blocks too. (I recently added an \"-antisocial\" command line option which stops transaction relaying due to using a limited internet connection here which charges per MB, but a toggleable version of this would be much nicer - for when I switch to a different internet provider).", "comment_meta": "2412\t15666732\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15666732\trebroad"}
{"comment_text": "@rebroad Ok, but that seems to require a different implementation. This patch simply cuts all connections, so I think your proposal is better suited for another issue. Also it seems that any kind of throttling or filtering of the connections eventually end up being too controversial to get anywhere (e.g. #273).", "comment_meta": "2412\t15672261\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672261\tjonls"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b1ff0108f94a2a6365f9957708041269c63a351c for binaries and test log.\nThis is an automated test script which runs test cases on each commit every time is updated.\nIt, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nand contact BlueMatt on freenode if something looks broken.", "comment_meta": "2412\t15673069\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15673069\tBitcoinPullTester"}
{"comment_text": "IMO the current implementation of simply cutting the whole connection is best. It is also clearest to the user. Once you start making exceptions there's a large chance of introducing bugs or even network-breaking bugs, which are why such features are unlikely to make it into the reference client.", "comment_meta": "2412\t15687162\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15687162\tlaanwj"}
{"comment_text": "@sipa @gavinandresen I'm asking myself, if the core-devs are willing to pull such a thing or if this should be GUI-only?", "comment_meta": "2412\t15762518\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15762518\tDiapolo"}
{"comment_text": "Needs rebase.", "comment_meta": "2412\t16033275\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033275\tluke-jr"}
{"comment_text": "@luke-jr I will be happy to do rebases if this has a chance of actually being pulled but so far I'm not sure. Whet do you think?", "comment_meta": "2412\t16041969\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16041969\tjonls"}
{"comment_text": "Testing is our bottleneck.\r\n\r\nThis gives use Yet Another State to test, which is a bad thing because it just makes one more thing that can break.\r\n\r\nI'm against it.\r\n", "comment_meta": "2412\t16050450\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16050450\tgavinandresen"}
{"comment_text": "Haven't tested but the code changes to core look sane to me.", "comment_meta": "2412\t16317518\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317518\tsipa"}
{"comment_text": "I still like the idea!", "comment_meta": "2412\t16323023\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16323023\tDiapolo"}
{"comment_text": "Rebased.", "comment_meta": "2412\t16749799\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16749799\tjonls"}
{"comment_text": "@gavinandresen What do you think about that? Would be sad to just forget about it :).", "comment_meta": "2412\t17570929\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570929\tDiapolo"}
{"comment_text": "I missed the rebase, I'll test it some.", "comment_meta": "2412\t17571065\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/17571065\tgmaxwell"}
{"comment_text": "@jonls could you rebase once more?", "comment_meta": "2412\t24265042\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24265042\tjonasschnelli"}
{"comment_text": "@jonasschnelli done", "comment_meta": "2412\t24367295\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24367295\tjonls"}
{"comment_text": "What is the current state for this?", "comment_meta": "2412\t26662382\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26662382\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/22570316ad74df51e459c17d72e02ce76e03751d for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2412\t26662456\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26662456\tBitcoinPullTester"}
{"comment_text": "Needs testing, and a test plan that has tests like:\r\n\r\nToggle networking on and off as rapidly as possible eleven times using the GUI. EXPECT: no crashes, always ends up in properly connected or disconnected state.\r\n\r\nToggle networking on and off using the JSON-RPC call. EXPECT: no crashes...\r\n\r\nToggle networking off, send a transaction. EXPECT: ??? what is reasonable to expect here? Message to user? Transaction gets broadcast when network is turned on or client restarted ???\r\n", "comment_meta": "2412\t26688550\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688550\tgavinandresen"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/74c341604961ea9611a6c024c0bdecb573f2361a for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n", "comment_meta": "2407\t15376395\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15376395\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/f48ace32517880418420f45e51b9a97caaa33ce8 for binaries and test log.\nThis is an automated test script which runs test cases on each commit every time is updated.\nIt, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nand contact BlueMatt on freenode if something looks broken.", "comment_meta": "2407\t15673451\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/15673451\tBitcoinPullTester"}
{"comment_text": "This pull request has been refactored and reworked a little to improve error messaging.", "comment_meta": "2407\t20259465\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20259465\tCodeShark"}
{"comment_text": "If you add a dependency on a boost library, please add it to the gitian descriptors too (though it seems overkill to me ofr this purpose).", "comment_meta": "2407\t20570409\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570409\tsipa"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/19f569cdd364592d91453fd246b11e44cef3940e for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2407\t20754841\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20754841\tBitcoinPullTester"}
{"comment_text": "Not sure if this is the appropriate place for this comment, but one feature request I wanted to recommend was to allow for the dynamic creation of wallets via RPC. That way you could add new ones without having to restart the daemon. I think people writing wallet interfaces might find that handy.", "comment_meta": "2407\t22057551\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22057551\tkyledrake"}
{"comment_text": "Also, this is great work, happy that you're tackling this hard problem. Thanks!", "comment_meta": "2407\t22057559\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22057559\tkyledrake"}
{"comment_text": "@Kyle r.e. dynamic creation of wallets via RPC: that was one of the main objectives of #2124 \r\nI think I've found a better approach to wallet management which I've been pursuing separate from these pull requests. I'll publish something on it soon.", "comment_meta": "2407\t22321099\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/22321099\tCodeShark"}
{"comment_text": "Needs rebase and response to code review comments.\r\n", "comment_meta": "2407\t26688398\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688398\tgavinandresen"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/67c7dab125e98a0c7b5e55035ddc5c90ab3b369d for binaries and test log.", "comment_meta": "2342\t14378195\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/14378195\tBitcoinPullTester"}
{"comment_text": "I like this idea, but it does need unit tests and some investigation for potential effects, as noted in the message.", "comment_meta": "2342\t16317892\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317892\tsipa"}
{"comment_text": "Here's a list of all effectively-height-locked transactions in the main chain (that means: excluding those where all inputs have nSequence=UINT_MAX): http://bitcoin.sipa.be/lockheight.txt - It seems the inclusion height is always at least two more than the number in nLockTime - one more than strictly required.", "comment_meta": "2342\t16321979\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16321979\tsipa"}
{"comment_text": "Not many people uses nLockTime; about 75% of those transactions are mine.\r\n\r\nCan you run your script on testnet? I did one \"min-height\" tx myself, I wonder if anyone else did any.\r\n\r\nMainly I think that BlueMatt's tests need more nLockTime stuff, IE the https://github.com/TheBlueMatt/test-scripts stuff. I don't think I'll have time to write any myself until after the conference.", "comment_meta": "2342\t16344248\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16344248\tpetertodd"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/1a3c922979dbe040d632e84f2da0e7055cc77009 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2342\t16344398\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16344398\tBitcoinPullTester"}
{"comment_text": "Status?  Still has a FIXME.  Let's close this or get it updated and merged.", "comment_meta": "2342\t18693290\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693290\tjgarzik"}
{"comment_text": "@jgarzik Updated, removed FIXME.\r\n\r\nMin-height nLockTime has been tested on testnet without any issues.", "comment_meta": "2342\t18795499\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18795499\tpetertodd"}
{"comment_text": "Thinking about this some more.  Regardless of the correctness, I don't like the addition of magic numbers (+1, +2) in various code locations.\r\n", "comment_meta": "2342\t19706920\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19706920\tjgarzik"}
{"comment_text": "The +1 isn't a magic number; note how in one place the patch removes a +1. Rather it's there from how nBestHeight is the height of the current best block, and in some places we want to check IsFinal() against the next block.\r\n\r\nI'd argue the +2 isn't a magic number either, as it's a combination of +1 to get the next block, and another +1 from the assumption that no-one controls >50% of the hashing power as the comment mentions.\r\n\r\nSpeaking of, while I was thinking about this and working on my mempool rewrite, it occurred to me that given that nBestHeight can decrements under the highly unusual condition of a re-org right on a re-target boundary passing around not quite yet final tx's might help exercise mempool and related code dealing with non-final txs. Not a particularly strong argument, but it's worth thinking about.", "comment_meta": "2342\t19729352\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/19729352\tpetertodd"}
{"comment_text": "@petertodd Needs rebase.", "comment_meta": "2342\t21090344\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090344\tluke-jr"}
{"comment_text": "Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/c7776e0ac141324ea7295834eb0bd9dfa2ae5d01 for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2342\t21291759\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21291759\tBitcoinPullTester"}
{"comment_text": "Rebased and added CreateNewBlock() unittests", "comment_meta": "2342\t23232337\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23232337\tpetertodd"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/07478aa23e59c44525a30b874d6799e2ede703ec for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2342\t23232850\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23232850\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/fe32957f89f12d8c83eaa81e656c6f52dbe152e3 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2342\t23233922\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233922\tBitcoinPullTester"}
{"comment_text": "I did another scan of the blockchain looking for nLockTime using transactions: https://s3.amazonaws.com/peter.todd/nLockTime.log\r\n\r\nStill none mined at the minimum possible heights, and very few that have used lock-by-time. However this has been tested on testnet.", "comment_meta": "2342\t23237836\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23237836\tpetertodd"}
{"comment_text": "ACK", "comment_meta": "2342\t23237990\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23237990\tsipa"}
{"comment_text": "@sipa I looked into it and I think we don't need to worry about nBestHeight decreasing on a retarget reorg. Anything already in a node's mempool stays there and will be mined once the chain height catches upl so it would be extremely rare for that to take more than an extra block or two.", "comment_meta": "2340\t14323157\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/14323157\tpetertodd"}
{"comment_text": "Coinbase got back to me and they've now fixed the issue - they're using the same IsFinal() logic as the reference client.", "comment_meta": "2340\t14351041\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/14351041\tpetertodd"}
{"comment_text": "Re-based on top of the \"fix off-by-one errors\" fix, which unfortunately means this has to be weakened until the network upgrades. It'll still at least shake out bugs in the meantime.", "comment_meta": "2340\t14376659\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/14376659\tpetertodd"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/745083a87c9e8b42e472b1d232d68bb332a86bc1 for binaries and test log.", "comment_meta": "2340\t14379062\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/14379062\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/903fec9192e71b9734388f5d951a7163dee5b852 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2340\t16344713\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16344713\tBitcoinPullTester"}
{"comment_text": "@petertodd Needs rebase.", "comment_meta": "2340\t21090359\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090359\tluke-jr"}
{"comment_text": "This seems nice to have.\r\n", "comment_meta": "2340\t23221185\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221185\tjgarzik"}
{"comment_text": "@jgarzik @luke-jr Updated and tested it against inputs.io, Coinbase, EasyWallet, SatoshiDice and the Android Bitcoin Wallet. It may make zero-conf tx's take a little longer to show up for SatoshiDice, but other than that possible issue I didn't have any problems. (the android wallet seems to have been updated to never show unconfirmed tx's so that's a non-issue) I couldn't test inputs.io properly because right now they aren't showing *any* transactions as confirmed for my account, nLockTime or not.\r\n\r\nNote that this version is still the weaker one compatible with the current off-by-one behavior of the rest of the network that https://github.com/bitcoin/bitcoin/pull/2342 fixes.\r\n\r\nWhat does BitPay do with nLockTime-using transactions?", "comment_meta": "2340\t23233615\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233615\tpetertodd"}
{"comment_text": "@luke-jr You added this patch to next-test - any related bug reports?", "comment_meta": "2340\t23233618\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233618\tpetertodd"}
{"comment_text": "Without getting into too much public detail:  BitPay uses stock bitcoind as boundary nodes if at all possible.\r\n", "comment_meta": "2340\t23233737\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233737\tjgarzik"}
{"comment_text": "Well if you trust those bitcoind's 100% for what is or isn't a real transaction then this patch won't cause any problems for BitPay customers.", "comment_meta": "2340\t23233800\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233800\tpetertodd"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/50e84e991d30ae86a40603cf8de5b7ac35734dad for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2340\t23235527\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23235527\tBitcoinPullTester"}
{"comment_text": "@petertodd \r\n> the android wallet seems to have been updated to never show unconfirmed tx's\r\n\r\nWhy do you think so? That's certainly not the case. However it will display a warning if lockTime > 0, and it also checks the unconfirmed dependency chain.", "comment_meta": "2340\t23236328\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23236328\tschildbach"}
{"comment_text": "I've been using this as part of next-test for months now and haven't encountered any problems as a result.", "comment_meta": "2340\t23236979\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23236979\tluke-jr"}
{"comment_text": "@schildbach Actually seems that Android Wallet has a number of issues:\r\n\r\n8f8dee4bbd74b573c324745d9d23938a1e4d12f269f9afca022224cf740f16aa - This tx has nLockTime=1, but nSequence=int max so it is a final tx. Instead the wallet shows a big read \"this transaction is non-standard and should not be trusted\" until it confirmed - kinda silly.\r\n\r\nfdb100df609349802c90dee38c694f3626b6c1f62a20ba92603ad17202b09322 - nLockTime=1, and nSequence set so nLockTime is active, but the tx is locked. It eventually showed up in my wallet, but only after a confirmation. It didn't show up immediately.\r\n\r\na4cceb4df7db3507966e57aea6d8f7b21ceabee55bac573e9b9590229fde6a3f - This one, and a few like it, are the worst though: they are time-locked transactions, and every one of them not only didn't know up prior to being confirmed, but even after being confirmed they still didn't show up in my wallet. tx 6ed945173e1455edf09931b4c7caac165c7d834ddc1ea296a24b9213a45cf24d is a particularly extreme example, having the minimum possible \"lock-by-time\" nLockTime.\r\n\r\nCuriously if nLockTime > the \"lock-by-time\" range, but all the sequence numbers are set so the tx is locked, the transaction also never shows up and doesn't display that \"this transaction is non-standard\" error message. For example: 8100cb9c84cf2f9c78ab2e6b488feb0a531e2ef88a1d1d28243a9e8361a433a7\r\n\r\nFinally after re-scanning the chain all the tx's showed up in my wallet.\r\n", "comment_meta": "2340\t23238887\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23238887\tpetertodd"}
{"comment_text": "@petertodd Thanks for your detailed tests. I'll investigate.", "comment_meta": "2340\t23247554\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23247554\tschildbach"}
{"comment_text": "@schildbach any results?", "comment_meta": "2340\t26240512\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26240512\twtogami"}
{"comment_text": "@wtogami I fixed the UI so that the first case should not show up as timelocked any more.\r\n\r\nThe other cases should not show up in their unconfirmed state. However, they will show once they're blockchain confirmed.", "comment_meta": "2340\t26240928\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26240928\tschildbach"}
{"comment_text": "@schildbach What's blocking showing those tx's in their unconfirmed, but final, state?", "comment_meta": "2340\t26361751\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26361751\tpetertodd"}
{"comment_text": "I think the rationale is those transactions currently do not constitute a usecase that is supported by bitcoinj, so for safety reasons they are not allowed into the wallet. I believe this will change in future, probably with the introduction of more complex payment types (consisting of more than one tx). Probably @mikehearn can tell more.", "comment_meta": "2340\t26398951\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26398951\tschildbach"}
{"comment_text": "Using the nLockTime feature is the business of the sender; the receiver has no reason to care about whether or not that feature was used if the transaction is now final and can be mined.\r\n\r\nThis is just another example of the \"death-spiral\" of feature disablement that we keep seeing in Bitcoin where because we disable features based on nothing more than a suspicion that they might somehow be used for something nefarious, which in turn makes it impossible to develop anything useful using that feature because wallet software interacts badly with it.\r\n", "comment_meta": "2340\t26525800\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26525800\tpetertodd"}
{"comment_text": "Hmm, that argument sounds familiar :)\r\n\r\nThis came out of the conclusion that people could create time-locked transactions that people would think would confirm quickly, then wouldn't, making it easier to double spend. I think it was you that brought that up originally actually. Anyway it was a fair point so those transactions just don't get accepted into the wallet by default. And nowadays they're non standard anyway so they shouldn't even propagate to those wallets.\r\n\r\nPeople upgrade SPV wallets fairly fast, so we can certainly change that for a subset of cases if it's important and won't increase risk to merchants.", "comment_meta": "2340\t26553847\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26553847\tmikehearn"}
{"comment_text": "@mikehearn The problem right now is that they don't show up in android wallet even after they're locked. Those transactions are not non-standard, they propagate fine, and other wallets (most?) display them okay too.", "comment_meta": "2340\t26554040\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26554040\tgmaxwell"}
{"comment_text": "I'll re-review that code, but I think final transactions are allowed, or are supposed to be. There was an issue with the Android UI checking if there was a time lock rather than if it was final, but I thought that was fixed. I filed bug 469 to investigate:\r\n\r\nhttps://code.google.com/p/bitcoinj/issues/detail?id=469", "comment_meta": "2340\t26554464\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26554464\tmikehearn"}
{"comment_text": "I fixed the bitcoinj side issue. It may require a quick new API to make the UI do the right thing though. Andreas, let me know when you have time to retest this.", "comment_meta": "2340\t28487890\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28487890\tmikehearn"}
{"comment_text": "@schildbach @mikehearn Current version of the Android wallet is rejecting all using txs with nSequence != max and/or nLockTime != 0 even once they are confirmed.", "comment_meta": "2340\t28960090\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28960090\tpetertodd"}
{"comment_text": "@petertodd If you have a test script, can you publish that so I can reproduce?", "comment_meta": "2340\t28967418\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28967418\tschildbach"}
{"comment_text": "The current version of the app is not using bitcoinj 0.11-SNAPSHOT which is where I made the fixes. So that would be expected.", "comment_meta": "2340\t28971405\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28971405\tmikehearn"}
{"comment_text": "@schildbach I don't have a test script; I used the raw tx API and just edited the hex manually.", "comment_meta": "2340\t29011654\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/29011654\tpetertodd"}
{"comment_text": "It's a work in progress and can certainly be improved. I welcome all comments, suggestions, criticisms, and witty insults.", "comment_meta": "2124\t11646195\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646195\tCodeShark"}
{"comment_text": "Would it be better or possible to use references instead of pointers in your code?", "comment_meta": "2124\t11646362\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646362\tDiapolo"}
{"comment_text": "Possible, sure. Better, why?", "comment_meta": "2124\t11646657\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646657\tCodeShark"}
{"comment_text": "The sanity test failed because the test suite uses the old RPC function prototype. I was still able to build and run using\r\n\r\n- make -f makefile.unix bitcoind", "comment_meta": "2124\t11646687\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646687\tCodeShark"}
{"comment_text": "This may be an opportunity to move away from the wallets being called \"wallet.dat\", which makes it all the more easier for malware to steal the contents.", "comment_meta": "2124\t11646770\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646770\trebroad"}
{"comment_text": "You can now specify additional wallets in the config file or via command line arguments:\r\n\r\n\tusewallet=foo\r\n\r\nor\r\n\r\n\tbitcoind -usewallet=foo\r\n\r\nA default wallet called \"\" in the RPC and using file \"wallet.dat\" is always loaded, as to not break compatibility with the master branch. Therefore, additional wallets should neither be called \"default\" nor \"wallet\".\r\n\r\nThe wallet will be stored in a file called wallet-foo.dat. If the wallet doesn't yet exist, it will be created the first time the wallet is loaded.\r\n", "comment_meta": "2124\t11653964\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11653964\tCodeShark"}
{"comment_text": "The getinfo RPC method now returns an array of wallets each with wallet-specific information. This change is, unfortunately, not backwards compatible. However, it doesn't really seem to make sense to make this call wallet-specific. And returning an array of wallets seems to be a very useful feature.", "comment_meta": "2124\t11663549\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11663549\tCodeShark"}
{"comment_text": "An alternative would be to move that data out of getinfo and into a getwallet info. Part of the reason to do that is that the wallet outputs in getinfo can be rather slow already, and doing them for N wallets won't help matters.  (Though lets see if anyone else has an opinion, I could be on drugs here)", "comment_meta": "2124\t11664914\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11664914\tgmaxwell"}
{"comment_text": "I was thinking listwallets should maybe show all this information with a verbose option. Without the verbose option, it would just give a list of the wallet names.", "comment_meta": "2124\t11664968\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11664968\tCodeShark"}
{"comment_text": "Hm. From the perspective of the RPC as a CLI the use of verbose flags isn't especially discoverable\u2014 for something basic like 'get your balances' that is probably worth exposing at the top level. ::shrugs::", "comment_meta": "2124\t11665363\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665363\tgmaxwell"}
{"comment_text": "What about making the full info the default and having an option to shorten it? That way interactive users get relevant information while application developers seeking to improve performance have an option to do so if they don't need all that information. Of course we can just have two distinct RPC methods...but I'd rather avoid having too many RPC calls when the semantics are similar.", "comment_meta": "2124\t11665402\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665402\tCodeShark"}
{"comment_text": "I do think that the wallet information should be completely removed from getinfo, though.\r\n\r\nAnyhow, this is the kind of stuff that's really easy to implement and change up front but becomes a serious problem to change once people start using it to build applications. I'd also like to hear several more opinions on this before committing to anything specific.", "comment_meta": "2124\t11665446\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665446\tCodeShark"}
{"comment_text": "Another issue I'm wondering about is programmatic access to the config file. We could just append the new wallets to the end of the file whenever they are created - but it would be nice to be able to have tags for sections. Presumably whenever a user creates a new wallet they want it to be loaded at next startup unless they explicitly remove it from the config file.", "comment_meta": "2124\t11665629\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665629\tCodeShark"}
{"comment_text": "Multiple wallet support came into my head as I was doing https://github.com/bitcoin/bitcoin/pull/2075 but I left it aside in favor of trying to move the code in the direction of further modularization improvements between the RPC interface and the wallet and the wallet database as a prerequisite. I put off coding there since I expected something like this to come along and because commentary on the pull request died away.\r\n\r\nI can't review the code in detail now but this capability needs to happen. Passing CWallet * around is an improvement for sure, definitely better than another global. I'm finding it kinda cringeworth-brittle from an OO perspective, though. It would be lovely to see new RPC functions implemented in ways that drag suitable amounts of code that depends strongly on the wallet's internal representation out along with them the appropriate changes to the wallet object.\r\n\r\nHave you tried merging my code? I'll have to look at that later. Multiple wallets are useful for any number of reasons. Certainly the Bitcoin-only accountants and would-be tax collectors of the future aren't going to be running *n* instances of bitcoind on their desktops.\r\n\r\nUltimate I think the wallet should be decoupled from the rest of the satoshi client. Pushing standarized interfaces down to wallet-object level is somewhere on the road to getting there. You seem to be addressing some modularization issues in other areas though, too.", "comment_meta": "2124\t11667374\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11667374\tmikegogulski"}
{"comment_text": "As for the OO stuff, I would like to abstract things further and define a listener interface, a transaction store interface, and a key store interface. Technically speaking, a signing agent doesn't even need to store complete transactions. Private keys and unspent outpoints are all it needs. Furthermore, a listening agent could send alerts to other components without the need to store any transactions. For instance, it could just provide filtering.\r\n\r\nHaving said that, in the interest of seeing these pull requests merged with bitcoin/bitcoin master ASAP, I'm willing to do things incrementally and use whatever structures already exist for now. However, I'd be very interested in giving all this some deeper thought and coming up with a serious reorganization for some later version.\r\n\r\nAs for now, at the very least it is possible to encapsulate the existing CWallet class much better - and I applaud your efforts.", "comment_meta": "2124\t11669414\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11669414\tCodeShark"}
{"comment_text": "In general: I'm very much in favor of having native support for multiple wallets. Wallet stuff hasn't been a priority for some time, but if necessary I'd like to help to get this working.\r\n\r\nRegarding the idea of separating wallets for block chain processing: sure, that's definitely where we need to go in the future. Ideally, I think the code evolves to separate wallet and the rest along a clean interface in a first step indeed. In a second step, we can maybe make them separate processes started from the same binary or even just separate binaries with shared codebase. The final aim should be entirely separate things, either communicating via some private \"wallet interconnect protocol\" (where several wallets on a trusted network connect to a single validation service), or even turning the wallet processes into standalone SPV clients (with their own blockheader-chain), that can either connect directly to the network, or can connect to a server provide block/tx validation service, simply via the P2P protocol.", "comment_meta": "2124\t11674953\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11674953\tsipa"}
{"comment_text": "On the wallet site of things, IMHO, we could think about switching the interface to JSON-RPC for all interaction with the wallet object(s) and database(s), which would eventually enable bitcoin-qt to talk to wallets on report machines over SSL/TLS. That's painful to tackle all at once, though, since there's plenty of code outside the RPC bundle right now that depends on wallet internals and a while lot of methods sticking off of CWallet.", "comment_meta": "2124\t11676540\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11676540\tmikegogulski"}
{"comment_text": "This pull request is confusing me as it's raised by a different user to the user making the commits.. (or maybe I don't understand github correctly). Also, I'm wondering if such a thing as a \"roadmap\" exists for bitcoind/bitcoin-qt. I'm thinking that perhaps the project could be split into two binaries, one that deals with the P2P stuff and sending/receiving tx/blocks, and the other that deals with purely wallet stuff. Currently bitcoind is slowly becoming bloated with both, and a focus on making the split possible might be useful.", "comment_meta": "2124\t11678261\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11678261\trebroad"}
{"comment_text": "Both users are me. I don't use my CodeShark identity for pushes, though. CodeShark is reserved for github.", "comment_meta": "2124\t11678294\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11678294\tCodeShark"}
{"comment_text": "Dynamic wallet loading is essentially complete. An important issue that needs to be resolved prior to any integration is making sure its use of LOCKs on threads is ok. Error handling on initialization is also not super smooth, but that's more an issue with AppInit2 generally. At this point I mostly just want to polish up what's there, fix any potential bugs or serious issues, leave this branch alone, and go work on other features.", "comment_meta": "2124\t11712207\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11712207\tCodeShark"}
{"comment_text": "Hmm, still having some issues with the default wallet not unloading at shutdown. Will need to go over the shutdown sequence to make sure all threads relinquish their pointers to it.", "comment_meta": "2124\t12208298\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12208298\tCodeShark"}
{"comment_text": "Just to set expectations:\r\n\r\nThis big a change, in this critical a part of the codebase, will need:\r\n\r\n+ A comprehensive test plan, that exercises all the things that have changed.\r\n+ Testing by at least two different people who aren't developers, on Windows and either Linux or Mac\r\n\r\nSee https://github.com/bitcoin/QA  for the lastest QA process.\r\n", "comment_meta": "2124\t12225200\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12225200\tgavinandresen"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/1c45edce2fbe76f7e146ee12c1df80c66c5fa8f9 for binaries and test log.", "comment_meta": "2124\t12638631\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12638631\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/6c7f86ae371f955371fba05c7f747e4659cd39c8 for test log.\n\nThis pull does not merge cleanly onto current master\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "2124\t24548265\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/24548265\tBitcoinPullTester"}
{"comment_text": "How i can install bitcoind whit Dynamically Loadable Multiple Wallet ?\r\n", "comment_meta": "2124\t25714323\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25714323\tMrLei"}
{"comment_text": "Rebase needed.", "comment_meta": "2124\t26687961\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687961\tgavinandresen"}
{"comment_text": "This is awesome work. I hope it makes it way to BTC soon.   I've been playing with it for a bit now. Here are the issues I am working through. \r\n1) Export doesn't work. ( Tried making BitCoinGui exportAction public and referencing it in WalletView::gotoHistoryPage but that only gives me default wallet) Still working on different methods to fix this.\r\n2) The RPC commands loadwallet and unloadwallet do not reflect in gui. I think the gui needs a connect to rpc commands.\r\n3) When clicking on the transaction on the right side of the gui, the transaction button doesn't get focus.\r\n4) The gui can't create a new wallet. using loadwallet then unloadwallet rcp, then load button in gui works, but..\r\n\r\nSo far these are the only issues I have found.  \r\n\r\nThanks again for the hard work. I'll share what I can when as I work through these changes. I am still new and trying to catchup as quick as possible. Any hints are appreciated it.\r\n\r\nHappy Bitcoining!\r\n\r\n\r\n\r\n", "comment_meta": "2124\t28362140\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28362140\tTranz5"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/c077555c77dd1a58bedd6466a086c4f116fd0e57 for binaries and test log.", "comment_meta": "1816\t8421578\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/8421578\tBitcoinPullTester"}
{"comment_text": "Nested-three-deep reject(DoS(error(...))) with two different error strings seems kinda crazy. If I wasn't familiar with the history of how that came to be I'd be befuddled.\n\nCould it be simplified to just:\nreturn reject(errorMessage, int nDoS=0) ?\n\n... where reject prints errorMessage to debug.log and saves it in the block, and then does the DoS thing if nDoS > 0. Then returns false.\n", "comment_meta": "1816\t8424448\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/8424448\tgavinandresen"}
{"comment_text": "I'll flatten this later and collapse the 3 levels of function wrappers, just needed to get something working for Eligius...", "comment_meta": "1816\t8444452\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/8444452\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/8f976aaa862c933c41c153007d0ffe3093ff475b for binaries and test log.", "comment_meta": "1816\t8477180\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/8477180\tBitcoinPullTester"}
{"comment_text": "Rebased and implemented @sipa 's CValidationResult solution.", "comment_meta": "1816\t10392472\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/10392472\tluke-jr"}
{"comment_text": "Automatic sanity-testing: FAILED MERGE, see http://jenkins.bluematt.me/pull-tester/212089d306d351e63111e91a969e9da1b1920cbc for test log.\n\nThis pull does not merge cleanly onto current master", "comment_meta": "1816\t10684867\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/10684867\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/46888e6abca27dd6d2132aab7cd63f25363057c6 for binaries and test log.", "comment_meta": "1816\t10770788\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/10770788\tBitcoinPullTester"}
{"comment_text": "No objections to the code.  Driving use case?\r\n", "comment_meta": "1816\t18694614\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694614\tjgarzik"}
{"comment_text": "Ability to test block templates before putting the effort into mining them.", "comment_meta": "1816\t18695132\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18695132\tluke-jr"}
{"comment_text": "That's a use case.  What size user constituency is *driving* this?  Do multiple pools want this?\r\n", "comment_meta": "1816\t18695846\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18695846\tjgarzik"}
{"comment_text": "As far as I know, only Eligius and EclipseMC are actively using this today. Any pool using Eloipool for their poolserver would be able to immediately take advantage of it in the simplest case. It is also necessary for both a multiple-validating-node-implementation economy, and miner-chooses-his-own-transactions GBT-based pool mining.", "comment_meta": "1816\t18697341\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18697341\tluke-jr"}
{"comment_text": "@jgarzik I don't think that's a requirement (though certainly something to take into consideration).\r\n\r\nI like the idea of such functionality, as it allows miners to validate their work against multiple implementations. Especially with alternative full node implementations becoming available, having something like this may be inevitable. Plus it's a good debugging tool for checking whether new (unreleased) versions can accept the best chain.\r\n\r\nOn the other hand, I don't like the evolution that may follow from this, where miners become required to validate against a dozen implementations that may or may not differ in validation rules... that has nothing to do with this PR though.", "comment_meta": "1816\t18697600\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18697600\tsipa"}
{"comment_text": "@sipa A good example where the validation is extremely useful is a safety net for bitcoin changes that could potentially create invalid blocks. For instance in discussions with pools and miners something that comes up with implementing replace-by-fee and the child-pays-for-parent code I'm working on is the danger that there will be some kind of bug that leads to an invalid block. (let alone a delibrate exploit) Sure you can test all you want on testnet, but it's impossible to be 100% sure, and any orphan costs ~$3000USD; I've got one pool that wants to implement replace-by-fee that has said they are going to wait until it's been tested on Eligius first.", "comment_meta": "1816\t18771491\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18771491\tpetertodd"}
{"comment_text": "@petertodd Sure, I agree it's a very good way to debug and test potentially forking changes. I just don't like what it may lead to.", "comment_meta": "1816\t18785624\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18785624\tsipa"}
{"comment_text": "@sipa I agree it is good to be wary of where this may lead to. Are you meaning to imply that leaving things as they are may be a better alternative to the proposed solution made by Luke?", "comment_meta": "1816\t18801469\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18801469\trebroad"}
{"comment_text": "I would like to have block proposal functionality for BitMinter as well.", "comment_meta": "1816\t18942190\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18942190\tDrHaribo"}
{"comment_text": "I'd very much like this for my new pool (currently in private testing), if another \"driver\" is needed :)", "comment_meta": "1816\t20738783\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/20738783\thrabbach"}
{"comment_text": "Rebase needed.\r\n", "comment_meta": "1816\t26687926\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687926\tgavinandresen"}
{"comment_text": "Rebased.", "comment_meta": "1816\t27046226\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27046226\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/f7078ca741b5ed1d799ecbab1ad7e89b2d98013b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "1816\t27046984\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27046984\tBitcoinPullTester"}
{"comment_text": "Should this be closed now that #3185 is in?", "comment_meta": "1816\t28204541\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28204541\tlaanwj"}
{"comment_text": "No, #3185 is entirely unrelated.", "comment_meta": "1816\t28231466\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28231466\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/162d57776f40fe05d3df512ca021bc0c3865c970 for binaries and test log.", "comment_meta": "1674\t7725627\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7725627\tBitcoinPullTester"}
{"comment_text": "I tried the version from @BitcoinPullTester and it starts just fine, no crashes related to stack-protector on Win7 x64 here.", "comment_meta": "1674\t7737457\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7737457\tDiapolo"}
{"comment_text": "Have you tried some actual stack-smashing fun yet?\n", "comment_meta": "1674\t7778056\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778056\tlaanwj"}
{"comment_text": "@laanwj No I did not investigate further, until now I just enabled it. Have you got some links for stack-smashing fun :)? Forget my question, I'm going to test it now :).", "comment_meta": "1674\t7778875\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778875\tDiapolo"}
{"comment_text": "Well the idea is to make a buffer on the stack and write more into it and than the size of the buffer (ie, char buffer[1024]; buffer[1025]=0xff;  .. and so on the values don't really matter ) \n\nAdd a button that does that , click the button, and see if it gets detected (make sure you don't write too far outside the buffer, maybe make sure there is a variable after it, otherwise you'll always trigger a crash).\n\nWe'll also have to investigate the performance impact. I'm not sure how this protection really works, but if it continuously checks every buffer on the stack I can see it become lots slower.\n\n", "comment_meta": "1674\t7779243\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7779243\tlaanwj"}
{"comment_text": "<pre>\n    char buffer[1024];\n    buffer[1025]=0xff;\n\n    printf(\"%s\", buffer);\n</pre>\n\nThe above code seems to trigger SSP detection, see this where ``libssp-0.dll`` is mentioned. Well now I need to check if the application is halted and aborted or executes further ... before crashing.\n\n<pre>\n Problemereignisname:\tAPPCRASH\n  Anwendungsname:\tbitcoin-qt.exe\n  Anwendungsversion:\t0.6.99.0\n  Anwendungszeitstempel:\t502cb87a\n  Fehlermodulname:\tlibssp-0.dll\n</pre>", "comment_meta": "1674\t7780283\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7780283\tDiapolo"}
{"comment_text": "I tried the same code without SPP enabled and the applications simply continues, which is what malicious code should do, right ;)?", "comment_meta": "1674\t7780722\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7780722\tDiapolo"}
{"comment_text": "Yes, that's expected", "comment_meta": "1674\t7786618\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7786618\tlaanwj"}
{"comment_text": "Having SSP in windows is great news!   Should also make sure bitcoind gets built with it.\n\nCan you time a blockchain sync with and without (perhaps on testnet?) to make sure it's not slaying it? ", "comment_meta": "1674\t7786671\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7786671\tgmaxwell"}
{"comment_text": "What was the command line again? Something like:\n\n* remove blkindex.dat\n* bitcoin-qt -loadblock=blk0001.dat\n\n", "comment_meta": "1674\t7787767\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7787767\tlaanwj"}
{"comment_text": "Move the databases out of the way then bitcoin-qt -loadblock=notblk0001.dat  (needs to be a separate file)", "comment_meta": "1674\t7787837\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7787837\tgmaxwell"}
{"comment_text": "In that case I guess it it easiest to pass -datadir= a new, empty directory, then -loadblock= your current blk0001.dat into it. \n\nThen time how long the AppInit2() call takes (or even better, change the  debug log line in LoadExternalBlockFile to state how long it took).\n", "comment_meta": "1674\t7788447\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7788447\tlaanwj"}
{"comment_text": "@laanwj You want me to use ``-loadblock=`` as benchmark if I understand you correctly?", "comment_meta": "1674\t7792891\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7792891\tDiapolo"}
{"comment_text": "@Diapolo that's correct", "comment_meta": "1674\t7794866\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7794866\tsipa"}
{"comment_text": "I'm currently benchmarking ... one thing, Bitcoin-Qt shows just \"Loading Wallet...\" message, which I think is missleading when doing a block-file import, no?", "comment_meta": "1674\t7812502\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7812502\tDiapolo"}
{"comment_text": "Yes it is probably missing an initmessage somewhere.", "comment_meta": "1674\t7812727\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7812727\tlaanwj"}
{"comment_text": "@laanwj Where is that part located in the code?\n\n1st result without this patch:\n08/17/12 09:59:28 Loaded 188524 blocks from external file in 5399340ms\n\n2nd result with this patch:\n08/17/12 11:49:21 Loaded 188524 blocks from external file in 5398498ms\n08/17/12 13:44:26 Loaded 188524 blocks from external file in 5425789ms (verification run)\n\nTo me this looks like SSP is no bottleneck, when importing block-files.", "comment_meta": "1674\t7814487\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7814487\tDiapolo"}
{"comment_text": "Looks good to me.", "comment_meta": "1674\t7816511\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816511\tsipa"}
{"comment_text": "This currently seems to be not working with Gitian or @BitcoinPullTester builds, as the RELEASE=1 scope seems to be not taken into account (see #1673).", "comment_meta": "1674\t7837946\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7837946\tDiapolo"}
{"comment_text": "Alright, #1673 is working now, as we enabled the flags there for both RELEASE and DEBUG builds now, but what about the stack protector? We have 2 options, do the same here or ensure RELEASE=1 get's passed to qmake to ensure the block where the SPP flags reside is processed, comments?", "comment_meta": "1674\t7843060\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843060\tDiapolo"}
{"comment_text": "Just enable it always. It's nice to find stack overwrite bugs while debugging.\n", "comment_meta": "1674\t7843086\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843086\tlaanwj"}
{"comment_text": "Updated to be enabled for RELEASE and DEBUG builds.", "comment_meta": "1674\t7843135\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843135\tDiapolo"}
{"comment_text": "Ok, now the upcoming executable created by bitcoin pulltester needs to be carefully tested, to see if it doesn't crash. After all, previous experiments with the cross-compiled executable are probably invalid as the flags weren't really passed.\n\n", "comment_meta": "1674\t7843147\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843147\tlaanwj"}
{"comment_text": "What about 2 flags for the UI client ``-test-dep`` and ``-test-ssp``, which would use our small test codes for verifiying the feature is working. We should perhaps not extend the help message, but it would help testing the official client without the need to do an own build?", "comment_meta": "1674\t7843171\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843171\tDiapolo"}
{"comment_text": "NACK putting those in the official client. \n\nThat's what the autotesters are for. Though testing these might turn out to be tricky, as you want to reproduce crash behavior and somehow find out what caused the crash.\n\nAlso, mind that BlueMatt's pulltester was never meant to enable testing \"without the need to do your own build\". It is just a final acceptance test. Not a way to get your stuff built for free.\n", "comment_meta": "1674\t7843222\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843222\tlaanwj"}
{"comment_text": "I can do own builds, which are not comparable with official release builds. I just thought about a possibility to verify such features in official client versions :).", "comment_meta": "1674\t7843268\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843268\tDiapolo"}
{"comment_text": "Is anyone able to comment, why the latest build fails (http://jenkins.bluematt.me/pull-tester/9ad1341d46851020b2342670fb73004b909fc80b/test.log)?\n\nThese are the errors I can see, but I'm not sure if or how thay relate to SSP:\n<pre>\nERROR: mempool transaction missing input\nERROR: ConnectInputs() : 39393b8fd0 P2SH VerifySignature failed\n</pre>\n\nand\n\n<pre>\n+ ./release/bitcoin-qt_test.exe\nwine: Unhandled page fault on write access to 0x00000014 at address 0x530b17 (thread 0009), starting debugger...\nApplication tried to create a window, but no driver could be loaded.\nMake sure that your X server is running and that $DISPLAY is set correctly.\nerr:systray:initialize_systray Could not create tray window\nApplication tried to create a window, but no driver could be loaded.\nMake sure that your X server is running and that $DISPLAY is set correctly.\nUnhandled exception: page fault on write access to 0x00000014 in 32-bit code (0x00530b17).\n</pre>\n\nEdit: Could be a problem of the cross-compile or the tests in Wine?\n\nEdit 2: Found this one:\n<pre>\nwine (0.9.19 uploaded to edgy) does not work with stack-protection. Compiling with -fno-stack-protected solved this problem temporarily. (see: https://launchpad.net/distros/ubuntu/+source/wine/+bug/56965) \n</pre>\n\nEdit 3: Some Wine bugs related to stack protection: http://bugs.winehq.org/buglist.cgi?quicksearch=stack+protector", "comment_meta": "1674\t7844488\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7844488\tDiapolo"}
{"comment_text": "I somehow think this is not a wine problem, but the same bug that got us to disable stack-protector on windows before. Looks like corruption.\n\nHave you tested the resulting executables in windows?", "comment_meta": "1674\t7845077\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7845077\tlaanwj"}
{"comment_text": "@laanwj I would have tested the executable, but @BitcoinPullTester did not generate any bitcoin-qt.exe.", "comment_meta": "1674\t7845677\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7845677\tDiapolo"}
{"comment_text": "Hmm, even the autotester executable is not downloadable. I guess it doesn't give you those if the test fails.", "comment_meta": "1674\t7846347\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7846347\tlaanwj"}
{"comment_text": "The mempool error is expected; some of the code in the testcases intentionally causes errors, and checks whether they do occur.\n\nRegarding the Edit2 above: seems to only way to get this accepted by pulltester is to disable SSP specially in the pulltester builds...", "comment_meta": "1674\t7848001\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7848001\tsipa"}
{"comment_text": "Would it be possible to compile a bitcoin-qt.exe before doing any tests? It would be nice to know if just the automatic sanity tests fail or if the exe-file is really not running under Windows (which I can only check if it get's compiled). I'm willing to do some further testing and investigation here...", "comment_meta": "1674\t7848800\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7848800\tDiapolo"}
{"comment_text": "I dont see why the bugs linked above would be the cause here, they effected wine version 0.9.N, the version running on jenkins is 1.2.2.  All files which were built before a failure are on the site (including test_bitcoin.exe, which is in src), and if that's failing, there is no reason bitcoind.exe would work, so that would need fixed first anyway\n\nEdit: sorry, didn't catch that its actually bitcoin-qt_test.exe which is failing, that should be there as well, see release/, and, again, if bitcoin-qt_test.exe is failing, there is no reason bitcoin-qt.exe would work.", "comment_meta": "1674\t7849607\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7849607\tTheBlueMatt"}
{"comment_text": "@TheBlueMatt I'll try one more rebase with --fstack-protector (instead of -fstack-protector-all) and if that fails the problem with SSP on Windows is still there (IMHO caused by the cross-compilation somehow as my own build runs just fine).\n\nCurrent bitcoin-qt_test.exe crashes for me too.", "comment_meta": "1674\t7854876\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7854876\tDiapolo"}
{"comment_text": "I'm really super doubtful that cross-compilation would be the issue, though different GCC versions might be. The crash thats being reported\u2014 a dereference of a near-null pointer sounds like a bug to me; one that may go unnoticed on windows because page 0 is mapped on windows.", "comment_meta": "1674\t7854981\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7854981\tgmaxwell"}
{"comment_text": "Now that is interesting with just -fstack-protector as flag, the @BitcoinPullTester build passes the sanity-testing, BUT when testing it with testnet it leads to missbehaviour (blkindex.dat could not be loaded or with a clean datadir it shows wallet.dat corrupted / damaged).\n\n@gmaxwell Any idea how to track down your idea further, that this could be a bug? I think it's rather strange that -fstack-protector leads at least to a valid executable...", "comment_meta": "1674\t7856753\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7856753\tDiapolo"}
{"comment_text": "@gmaxwell might be on to something.  mingw builds against binary libs whose ABI occasionally changes due to C++ ABI changes etc.", "comment_meta": "1674\t7907168\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7907168\tjgarzik"}
{"comment_text": "Could well be. What are the gcc versions involved? What gcc version do you use Diapolo? And which one for Bitcoin Pull tester by @TheBlueMatt? I suspect TheBlueMatt uses the version included in ubuntu lucid (4.4.x), Diapolo is using a more recent one included with mingw (4.6.x?).\n", "comment_meta": "1674\t7908383\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7908383\tlaanwj"}
{"comment_text": "ii  mingw32                          4.2.1.dfsg-2ubuntu1                      Minimalist GNU win32 (cross) compiler\nii  gcc                              4:4.5.2-1ubuntu3                         The GNU C compiler", "comment_meta": "1674\t7908561\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7908561\tTheBlueMatt"}
{"comment_text": "I'm currently using ``g++ (GCC) 4.7.0``, but I used -fstack-protector-all with the stock minGW version (which is 4.4), that ships with the Qt Windows SDK and SSP was working and not causing any issues.\n\nWhat more can I do to further assist here?\n\nAll dependency libs used by Bitcoin-Qt are compiled with ``gcc 4:4.5.2-1ubuntu3 The GNU C compiler`` before building our Windows executable?", "comment_meta": "1674\t7909482\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7909482\tDiapolo"}
{"comment_text": "@diapolo: I suppose mingw32 4.2.1 is actually using gcc 4.2.1 for the cross compile, not 4.5.2.", "comment_meta": "1674\t7910350\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7910350\tlaanwj"}
{"comment_text": "Well IMHO gcc 4.2.1 is old as the hills ... any chance to upgrade the used compiler?", "comment_meta": "1674\t7911182\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7911182\tDiapolo"}
{"comment_text": "The pull tester should be running the same version as gitian.  If you want to use a newer version, test gitian (or run its build script in an Ubuntu VM if you don't feel like doing a physical install for gitian itself) and get that upgraded.", "comment_meta": "1674\t7912780\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7912780\tTheBlueMatt"}
{"comment_text": "@TheBlueMatt You are right, that @BitcoinPullTester and Gitian should use the same compiler versions. I was just asking, if someone is able to test-compile with a more current minGW version (at least 4.4) in Gitian or your setup. It drives me mad, that such a security mitigation is not working for Windows, as I'm sure Windows users are far more at risk to encounter an attack in comparison to other OSes.", "comment_meta": "1674\t7924630\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7924630\tDiapolo"}
{"comment_text": "More arguments for your amusement: http://lists.cypherpunks.ca/pipermail/otr-dev/2012-August/001373.html", "comment_meta": "1674\t7926892\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7926892\tgmaxwell"}
{"comment_text": "Even on Ubuntu Precise (12.04) the mingw g++ version is still `i586-mingw32msvc-g++ (GCC) 4.2.1-sjlj (mingw32-2)`.  To use a newer cross-compiler we'd have to build it ourselves.\n\nLooks like ioerror (tor dev) got stack-protector-all to work with mingw cross compile by adding -lssp, though I'm not sure for what version:\nhttps://twitter.com/ioerror/status/238197005946593280?uid=272871165&iid=am-212786989413456255665797433&nid=27+234", "comment_meta": "1674\t7928472\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7928472\tlaanwj"}
{"comment_text": "Is ``-lssp`` a library we need to add? If you find some documentation about it please link that here, I didn't yet manage to find out anything about that flag.\n\nEdit: I asked ioerror directly via Twitter, let's see...", "comment_meta": "1674\t7930930\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7930930\tDiapolo"}
{"comment_text": "@laanwj precise has two sets of mingw packages - the regular mingw is the same old version, but there is now a mingw-w64 (the 64-bit part is optional) which is gcc 4.6.3.", "comment_meta": "1674\t7932871\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932871\tTheBlueMatt"}
{"comment_text": "@Diapolo I'll look into compiling it myself later today if I get a chanace.", "comment_meta": "1674\t7932892\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932892\tTheBlueMatt"}
{"comment_text": "@TheBlueMatt I greatly appreciate your efforts here :) (that goes to all others, who participate here).", "comment_meta": "1674\t7932913\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932913\tDiapolo"}
{"comment_text": "I've set up a cross-compile environment with i686-w64-mingw32 (gcc version 4.6.3), outside of gitian, eventually I managed to build a static bitcoin-qt.exe that works well. With `-fstack-protector-all` enabled.\n\n- I did have to add `windows:LIBS += -Wl,-Bstatic -static-libgcc` to bitcoin-qt.pro to succesfully build a static bitcoin-qt.exe\n- I had to upgrade boost to 1.51.0 to be compatible (otherwise I'd get the error reported here: https://svn.boost.org/trac/boost/ticket/4258 )\n  - also needed to add `LIBS += ... -lboost_chrono$$BOOST_LIB_SUFFIX`, as boost::thread uses boost::chrono::system_clock::now()\n- I did have to comment out the `ipcThread`; for some reason I get a `Expression: &get_map_unlocked() ==m` assertion in `windows_intermodule_singleton.hpp` line 145 at startup. This does not seem to be related to the stack protector but to the new boost version. I have no idea what this code is doing, not in the least: http://www.boost.org/doc/libs/1_51_0_beta1/boost/interprocess/detail/windows_intermodule_singleton.hpp .\n  - The new boost version is no longer using the monkey patch. This could be the problem?\n\nWith this mingw version, `test_bitcoin.exe` and `bitcoin-qt_test.exe` also check out fine with `-fstack-protector-all --param ssp-buffer-size=1`.\n\n", "comment_meta": "1674\t7944708\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7944708\tlaanwj"}
{"comment_text": "@laanwj Great work and I have some comments to make to your findings.\n\n1. I'm asking myself, how Gitian creates a static bitcoin-qt.exe as I was never able to achieve this with my local setup. The current project file has ``windows:LIBS += -Wl,-Bstatic -static-libgcc`` not included, so where is the magic here?\n2. I'm currently using Boost 1.50 and in comparison to 1.49 no monkey patch was needed or active, as the Boost devs changed the parts of the interprocess code.\n3. Yes, Boost > 1.49 needs the compiled Chrono lib included, which is what I also observed.\n4. I didn't need to change any IPC code, but needed to remove ``typedef HANDLE pthread_t;`` from util.h and change ``pthread_t`` into ``HANDLE`` in ``CreateThread()``, perhaps that is also of help for your build.\n5. I'll compile the Boost 1.51 libs and see if I encounter additional errors.\n\nCan you upload your compiled version, I'm gona give it a run on a native Win7 x64 to verify it's working.\n\nIn the end I'm not sure what your findings are worth in terms of getting SSP to work with our official client builds, but a big thank you for your effort and time to investigate :).\n\nEdit: The switch to Boost 1.51 caused no further compilation errors here.", "comment_meta": "1674\t7947359\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7947359\tDiapolo"}
{"comment_text": "1. I don't know. As long as things work, we don't ask questions :-) As I'm not building in gitian, it might be that my setup is slightly different, making this necessary. You do need to build Qt yourself to make a static executable, the pre-packaged Qt will not do this.\n\n2. I don't currently have time to dive deep into boost::ipc, It's a strange place full of magic to make objects behave as normal in shared memory, which seems overkill for something like sending URLs :/\n\n3. OK\n\n4. Didn't need to do that. I compiles with latest master with the changes I mentioned.\n\n5. Thanks\n\nYou can download the produced executable here (with commented out ipcInit, otherwise it's a pretty useless file :):\nhttps://download.visucore.com/bitcoin/bitcoin-qt-20120823.zip\n\nI also still intend to update the Qt version to 4.8.1. And integrate my findings back in gitian again. But not in time for 0.7rc1.\n", "comment_meta": "1674\t7960312\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7960312\tlaanwj"}
{"comment_text": "@laanwj I tried your version and it's working, no crash and no strange errors after startup, looks good.", "comment_meta": "1674\t7970222\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7970222\tDiapolo"}
{"comment_text": "Last failure is expected, as I reverted to -fstack-protector-all.", "comment_meta": "1674\t7985339\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7985339\tDiapolo"}
{"comment_text": "Any reason why merging this would be a problem?", "comment_meta": "1674\t8762416\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762416\tsipa"}
{"comment_text": "We can merge this pull after MingGW version used for Windows cross-compile is at least 4.4, preferably 4.6. The currently used version is 4.2 which has corruption problems if this is enabled!\n\nOf course, if diaplo updates this to only affect non-windows it can be merged.\n\n", "comment_meta": "1674\t8762633\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762633\tlaanwj"}
{"comment_text": "I would be rather sad if I update this to be mergeable, as I think it loses attention for Windows then.\nI can for sure create a new pull, which does this for all OSes expect Windows and leave this as is, to keep the discussion present.", "comment_meta": "1674\t8762857\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762857\tDiapolo"}
{"comment_text": "@laanwj Any idea, why we need this (https://github.com/bitcoin/bitcoin/blob/master/bitcoin-qt.pro#L37) in the pro-file, but such a linker flag is not needed in makefile.unix (https://github.com/bitcoin/bitcoin/blob/master/src/makefile.unix#L71) for SSP?\r\n\r\nI tried to remove the linker flag for bitcoin-qt, as I was somehow sure it is no linker flag, but that creates a ton of errors (doesn't work and needs to be in place).", "comment_meta": "1674\t9394262\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9394262\tDiapolo"}
{"comment_text": "@diapolo The security options need to be passed to the linker as well as compiler. Note that at the bottom of makefile.unix we pass xCXXFLAGS as well as xLDFLAGS to the linker, at different positions in the argument list.", "comment_meta": "1674\t9980890\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9980890\tlaanwj"}
{"comment_text": "I also found out that this option is needed for both (linker and compiler), as you said ;). But this just fails, because of the old GCC version or did I miss something new?\r\n\r\nEdit: I closed this by mistake, clicked too fast :-D.", "comment_meta": "1674\t9995262\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9995262\tDiapolo"}
{"comment_text": "@laanwj So, ACK on this after #2106?", "comment_meta": "1674\t11906476\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11906476\tsipa"}
{"comment_text": "@sipa That GCC version should be safe to use, but to be sure I asked you, if you could do a little test build with this pull included :).", "comment_meta": "1674\t11907096\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11907096\tDiapolo"}
{"comment_text": "@Diapolo It's included in http://bitcoin.sipa.be/builds/pre-0.8/2013-01-05-turbo-ldb17/", "comment_meta": "1674\t11907393\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11907393\tsipa"}
{"comment_text": "@sipa Works just fine, startup, IBD, create a TX... all things that couldn't even be tested with the old compiler suite :).", "comment_meta": "1674\t11913454\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/11913454\tDiapolo"}
{"comment_text": "Added a -static switch (after @gmaxwell suggested that), which works for my local build. Perhaps @sipa could integrate that into the leveldb17 test builds to see if the libssp-0.dll dependency is gone.\r\n\r\nEdit: @laanwj What about adding ``CONFIG += static`` to the project file? Seems also right :).", "comment_meta": "1674\t12122405\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12122405\tDiapolo"}
{"comment_text": "Too bad @BitcoinPullTester didn't yet build a binary...", "comment_meta": "1674\t12143789\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12143789\tDiapolo"}
{"comment_text": "@TheBlueMatt \r\n\r\n<pre>\r\n/usr/bin/ld: cannot find -lQtTest\r\ncollect2: ld returned 1 exit status\r\nmake: *** [bitcoin-qt_test] Error 1\r\n</pre>\r\n\r\nI'm not sure if this is related to my pull, any idea?", "comment_meta": "1674\t12175925\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12175925\tDiapolo"}
{"comment_text": "I need a little help over here :D, my own build is not working like expected with this pull included, I have to say I'm not using a static Qt, as I never managed to set that up for Windows. The dependency for ``libssp-0.dll`` is gone, when using ``QMAKE_LFLAGS *= -static``, which was intended.\r\n\r\nThe observed problem is happening with the RPC console, let's say I just input ``foo``, it crashes with am MSVC++ exception / APPCRASH, before printing out ``Method not found``. I was able to debug this down to ``CRPCTable::execute()`` function and the crash is happening right after ``throw JSONRPCError(RPC_METHOD_NOT_FOUND, \"Method not found\");``. Any ideas for this?\r\n\r\nAlso doing an ``QMAKE_LFLAGS -= -static`` after the stack-protector flag does not seem to change that.", "comment_meta": "1674\t12191857\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12191857\tDiapolo"}
{"comment_text": "Check latest build here: http://bitcoin.sipa.be/builds/pre-0.8/2013-01-13-turbo-ldb17/", "comment_meta": "1674\t12197733\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12197733\tsipa"}
{"comment_text": "@sipa Your linked build does not contain the described error. I wonder how we can now check, that the stack-smashing protection is really still working.\r\n\r\nI had code to trigger it, which caused a crash with a clear reference to libssp-0.dll on Windows. I wonder what it would look like with the recent static-change...\r\n\r\n<pre>\r\nchar SPP_buffer[1024];\r\nSPP_buffer[1025]=0xff;\r\n\r\nprintf(\"%s\", SPP_buffer);\r\n</pre>", "comment_meta": "1674\t12199405\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12199405\tDiapolo"}
{"comment_text": "@Diapolo it appears to be an issue with this pull, it appears to be making the default -static instead of it being dynamic as it used to be.  ", "comment_meta": "1674\t12201978\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12201978\tBitcoinPullTester"}
{"comment_text": "Also: can you make this change also for the daemon builds?", "comment_meta": "1674\t12202617\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12202617\tsipa"}
{"comment_text": "@sipa Yes, I'll make that Windows only and add a commit, which also enabled this for bitcoind.\r\n\r\nStill the open question, how can we verify what happens on Windows, when a SSP problem is caught and the app get's terminated with -static beeing active.", "comment_meta": "1674\t12207710\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12207710\tDiapolo"}
{"comment_text": "@BitcoinPullTester Is the pull tester still using that ancient compiler suite or are you now using the same as @sipa in the leveldb17 pull?\r\n\r\nI updated the pull to use -static only for Windows and extened the Windows makefiles for bitcoind to be equal feature-wise.", "comment_meta": "1674\t12208319\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12208319\tDiapolo"}
{"comment_text": "@Diapolo The issue is on the linux side, not the MinGW side, I dont believe the leveldb17 pull changes that?", "comment_meta": "1674\t12228058\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12228058\tTheBlueMatt"}
{"comment_text": "@Diapolo I included these changes in the leveldb17 branch (#2106), as it conflicted with other changes there.", "comment_meta": "1674\t12243278\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243278\tsipa"}
{"comment_text": "@sipa Can you do a testbuild for me with that code in init.cpp, to see what happens with -static keyword? It will crash, but I would like to know if there is a chance to see the process got terminated by GCCs stack protector.\r\n\r\nI think we need to ensure we don't break it...\r\n\r\n<pre>\r\nchar SPP_buffer[1024];\r\nSPP_buffer[1025]=0xff;\r\n\r\nprintf(\"%s\", SPP_buffer);\r\n</pre>", "comment_meta": "1674\t12243519\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243519\tDiapolo"}
{"comment_text": "@Diapolo create a branch with the code you want to test, and point me to a commit id.", "comment_meta": "1674\t12243607\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243607\tsipa"}
{"comment_text": "Thanks, will do this tomorrow :). Hope we get that sorted out, would be nice to have leveldb17 branch + stack protector in and working, so we can look at other things.", "comment_meta": "1674\t12243718\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243718\tDiapolo"}
{"comment_text": "@Diapolo ping?", "comment_meta": "1674\t18694427\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694427\tjgarzik"}
{"comment_text": "@jgarzik As we are still using the same ancient GCC version I can't do anything here :-/.", "comment_meta": "1674\t18787199\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18787199\tDiapolo"}
{"comment_text": "Is there any current progress in switching to a newer compiler version for our Gitian builds?", "comment_meta": "1674\t21293937\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/21293937\tDiapolo"}
{"comment_text": "Can be done after merging #3029.\r\nAlthough the patch has to be completely reworked for the new build system.\r\n", "comment_meta": "1674\t25294202\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25294202\tlaanwj"}
{"comment_text": "This should finally be possible now thanks to our new build system :).", "comment_meta": "1674\t25746384\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25746384\tDiapolo"}
{"comment_text": "Where do I find the resulting Windows binaries within http://jenkins.bluematt.me/pull-tester/807ec70b377086ac8b19cc2629b967b02c0263e4?", "comment_meta": "1674\t25767323\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767323\tDiapolo"}
{"comment_text": "I'm working on having the pull-tester compile mingw/windows this afternoon. The pull-tester environment uses:\r\n\r\ni586-mingw32msvc-g++ (GCC) 4.2.1-sjlj (mingw32-2)\r\n", "comment_meta": "1674\t25784121\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25784121\tgavinandresen"}
{"comment_text": "@gavinandresen I didn't know we haven't yet upgraded pull-tester environment. This patch should at least result in working Windows executables for official Gitian builds.", "comment_meta": "1674\t25786646\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25786646\tDiapolo"}
{"comment_text": "I re-ran the pull-tester with windows builds enabled; the qt .exe is in win32-build/src/qt/\r\n\r\nOddly, the pull-tester passed it, although the Qt unit tests fail to run. I guess it crashes in a way that looks like the unit tests succeeded?\r\n", "comment_meta": "1674\t25860679\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25860679\tgavinandresen"}
{"comment_text": "@gavinandresen As long as we use this ancient ``i586-mingw32msvc-g++ (GCC) 4.2.1-sjlj (mingw32-2)`` compiler with pull-tester, we can't rely on it for creating or testing this pull I guess. Will download the qt exe and try it, it should crash or misbehave, as that was what happened before with pull-tester builds.", "comment_meta": "1674\t25867218\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25867218\tDiapolo"}
{"comment_text": "Gavin, the resulting executables are crazy in size bitcoin-qt.exe has over 120MB and bitcoin.exe over 60MB.", "comment_meta": "1674\t25867309\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25867309\tDiapolo"}
{"comment_text": "Also the bitcoin-qt.exe doesn't show an icon + it doesn't contain any meta-data (from bitcoin-qt-res.rc), wherars bitcoind.exe DOES contain that meta-data (from bitcoind-res.rc).", "comment_meta": "1674\t25873434\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/25873434\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/4c29cad3ceeb462b08e59f0ad83f656fc0d567a4 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "1674\t26328684\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26328684\tBitcoinPullTester"}
{"comment_text": "@Diapolo : re executable size: they are not stripped (contain debugging symbols).  I assume they crash because pull-tester is using an ancient mingw?\r\n", "comment_meta": "1674\t26687889\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687889\tgavinandresen"}
{"comment_text": "@gavinandresen Yes, they crash because of the ancient mingw version, so this is still pending on a pulltester mingw update. \r\n", "comment_meta": "1674\t26697226\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26697226\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/27b24244c4d1f97690d5908e3412ac5306920281 for binaries and test log.", "comment_meta": "1647\t7590124\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7590124\tBitcoinPullTester"}
{"comment_text": "Gavin, any thoughts on this?", "comment_meta": "1647\t9963221\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9963221\tmikehearn"}
{"comment_text": "@mikehearn :  needs unit tests, in my humble opinion. It is a very good candidate for \"needs 100% code coverage from tests\", because transaction selection is such a key piece of the Bitcoin infrastructure.\r\n\r\nAlso needs thorough code review, with an eye towards \"Could I construct a series of transactions that made the selection algorithm take O(N^2) time ?\"", "comment_meta": "1647\t9983542\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9983542\tgavinandresen"}
{"comment_text": "@gavinandresen What kind of unit tests would you like for this? I already dealt with the O(N^2) problem a while back on Eligius, though of course more reviews are always welcome.", "comment_meta": "1647\t9985286\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9985286\tluke-jr"}
{"comment_text": "My suggestion would be start with a bunch of \"random\" mempools and them making sure that the selections it makes are valid (no mistaken dependencies) and actually get the most fees possible (e.g. by externally precomputing the correct answers).  I'd also include cases designed to trigger complexity attacks (mempool with a 2 groups of 100 long chains or whatever).\r\n\r\nAfter that I'd run lcov with the test and look and make sure every conceivably reachable branch (e.g. all except the invisible boost added heap allocation failure tests) is hit by the tests. If not, add tests that trigger them.\r\n\r\nAfter that the code should be intentionally broken (e.g. by randomly removing some statements and/or turning some if() to if(!())) and make sure the tests fail.  I volunteer to do this kind of testing (plus some basic smoke tests) once regular unit tests for this are written.\r\n", "comment_meta": "1647\t9985591\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9985591\tgmaxwell"}
{"comment_text": "Thanks @gmaxwell , those are exactly the types of tests I think this needs!\r\n", "comment_meta": "1647\t9995865\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/9995865\tgavinandresen"}
{"comment_text": "Update: It seems since rebasing this, new performance problems have cropped up. :(", "comment_meta": "1647\t10315914\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/10315914\tluke-jr"}
{"comment_text": "Update: False alarm, I debugged the performance problem and it was a result of a poorly thought-out merge of this with #1648 (which elevated priority of transactions that benefit the miner directly). This seems to still perform well without that change (or with it done once).", "comment_meta": "1647\t10684223\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/10684223\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/56c7ea61d70d4a6699f1a53b9d03eb803a9c58c7 for binaries and test log.", "comment_meta": "1647\t10772536\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/10772536\tBitcoinPullTester"}
{"comment_text": "Fixed a bug triggered by today's onslaught of !IsFinal transactions...", "comment_meta": "1647\t12172359\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/12172359\tluke-jr"}
{"comment_text": "Rebase needed.\r\n\r\nAlthough I think this needs a re-think/rewrite:\r\n\r\nWhen we have a memory-limited mempool (needed for anti-DoS), we'll run into a chicken-and-egg problem:  parent transaction may be evicted from mempool, child will get stuck (and eventually evicted) from the orphan pool. Seems to me what is needed is a new protocol message that is \"here is a bundle of dependent transactions, with children that pay for their parents.\"\r\n", "comment_meta": "1647\t26687849\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687849\tgavinandresen"}
{"comment_text": "Rebased. I agree it isn't perfect, but this is 1) better than nothing, and 2) well-tested. If anyone wants to put the effort into a rewrite, I'd be glad to defer and give it testing.. but I think everyone's busy enough already.", "comment_meta": "1647\t27047126\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27047126\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/43fccb09cc43c6ce4c76791d7b7f297bf0ed6c1c for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "1647\t27049061\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27049061\tBitcoinPullTester"}
{"comment_text": "Code seems ACK-worthy.\n\nUse cases?\n", "comment_meta": "1583\t6916444\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/6916444\tjgarzik"}
{"comment_text": "Various people (@gmaxwell and @gavinandresen included) expressed interest in this - one example was to allow captcha-solving as an alternative to fees.", "comment_meta": "1583\t6916602\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/6916602\tluke-jr"}
{"comment_text": "Re: Ignoring minfee: This call is by txid. If you don't like the fee, don't call it on the transaction.  Ignoring minfee is the right thing to do here.\n\nThough this should also have a fee delta, because we now prioritize above minfee txn by fee per KB. If someone is paying you behind the scenes to mine a transaction you should be able to add the amount you're being paid (or whatever) to the fee used in that calculation.  e.g. prioritizetransaction <txid> <priodelta> <feedelta>.", "comment_meta": "1583\t7678848\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7678848\tgmaxwell"}
{"comment_text": "Updated with suggestions. Also, is it intentional that GetMinFee with GMF_BLOCK is *never* used anymore?", "comment_meta": "1583\t7683936\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7683936\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/2c63ef9156288b3cc72668fdb6ce44ec3a440076 for binaries and test log.", "comment_meta": "1583\t7686779\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7686779\tBitcoinPullTester"}
{"comment_text": "@luke-jr Which commit removed the call to GetMinFee with GMF_BLOCK?", "comment_meta": "1583\t7696109\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7696109\tsipa"}
{"comment_text": "@sipa c555400ca134991e39d5e3a565fcd2215abe56f6\n", "comment_meta": "1583\t7696169\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7696169\tluke-jr"}
{"comment_text": "Needs a rebase", "comment_meta": "1583\t7967960\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/7967960\tgmaxwell"}
{"comment_text": "rebased", "comment_meta": "1583\t10378973\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/10378973\tluke-jr"}
{"comment_text": "Ok, finally redid this using a map.\r\n\r\n@gavinandresen , look good?", "comment_meta": "1583\t16275637\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/16275637\tluke-jr"}
{"comment_text": "No objection...  though I still prioritize with the 'z' :)  Who the heck uses an 's'?  :)", "comment_meta": "1583\t18694252\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694252\tjgarzik"}
{"comment_text": "It occurs to me that the map should be cleaned at some point. Any opinions on when to remove a txid from it?", "comment_meta": "1583\t23022296\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23022296\tluke-jr"}
{"comment_text": "Check it when removing transactions from the mempool?", "comment_meta": "1583\t23027788\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23027788\tgmaxwell"}
{"comment_text": "Probably don't want to lose priority adjustments if your block gets knocked off the main chain...", "comment_meta": "1583\t23034706\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23034706\tluke-jr"}
{"comment_text": "@luke-jr Set a expiry height after they get knocked off the main chain and remove them from the map after n blocks? If n=100 is reached we have bigger problems...", "comment_meta": "1583\t23118644\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/23118644\tpetertodd"}
{"comment_text": "Rebase needed.", "comment_meta": "1583\t26687769\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687769\tgavinandresen"}
{"comment_text": "Rebased. For purging from the map.. how about when we see a block confirm a transaction using it as an input?", "comment_meta": "1583\t27047527\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27047527\tluke-jr"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b01f11bd58a5114e6cf00423e66f4f3c2d5667b3 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "1583\t27049542\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/27049542\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ef1e984eade3166f807197eccba378fa937b6f88 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3293\t28949144\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28949144\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/67448b245c0931c2bf721389ef7aa5f3933da937 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3287\t28896993\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28896993\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/480e75ceabdf83438023d066ed494c371fcef239 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3283\t28866291\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28866291\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3283\t28870812\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28870812\tlaanwj"}
{"comment_text": "Merging because I need this now for some regression tests I'm writing.\r\n", "comment_meta": "3283\t28951839\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28951839\tgavinandresen"}
{"comment_text": "I still think the proposed description would be somewhat better, as it doesn't only wait for start, but also when the server becomes unreachable for other reasons. Oh well...", "comment_meta": "3283\t28962277\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28962277\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ea89d521d604b6fa81cfe881313d8845a5f4f30c for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3278\t28695009\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28695009\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/cc3b0dddbc981a3e7d7c577f939af661d6316b85 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3275\t28667575\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28667575\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/0e165b97d97e76e2fd3a6e78306e78121dd74bd2 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3272\t28648593\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28648593\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/79fac3f427da4ac3376b5c3a8a638ad579da8594 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3268\t28631022\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28631022\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/0689f46cc7f0939c0b52560954a3a210cbad053a for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3267\t28680408\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28680408\tBitcoinPullTester"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/415b30e602502842caf640b220c148929f67b697 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3264\t28565688\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28565688\tBitcoinPullTester"}
{"comment_text": "because is the failure? I do not understand.", "comment_meta": "3264\t28566595\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566595\tdertin"}
{"comment_text": "http://jenkins.bluematt.me/pull-tester/415b30e602502842caf640b220c148929f67b697/test.log\r\n\r\nStrange. Seems like the block chain handling verification in the pulltester is failing, but I don't see how any of the changes here could cause that. Maybe something wrong with the tester. @thebluematt?\r\n", "comment_meta": "3264\t28566901\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566901\tlaanwj"}
{"comment_text": "Perhaps it is the -Werror testing that is problematic\r\n", "comment_meta": "3264\t28575337\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575337\tjgarzik"}
{"comment_text": "I added information about the change.\r\n\r\n- Add support for Clang\r\n- Further details can be found at http://savannah.gnu.org/patch/?8186.\r\n", "comment_meta": "3264\t28576413\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28576413\tdertin"}
{"comment_text": "Thanks.\r\nHowever, you changed the pull request description but not the commit message :)  (changing the commit message would also make the pull-tester rerun)\r\n", "comment_meta": "3264\t28621533\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28621533\tlaanwj"}
{"comment_text": "Merged into #3278", "comment_meta": "3264\t28692972\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692972\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/51f4fe48df4d65903a2e35f9b6f3f5fc12e704ca for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3263\t28566120\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566120\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3263\t28566748\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566748\tlaanwj"}
{"comment_text": "ACK. Need a better commit message than \"upgraded to serial X\" Describe the changes we are importing.", "comment_meta": "3263\t28575382\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575382\tjgarzik"}
{"comment_text": "I added information about the change.\r\n\r\n- Use 'ls -r' in order to try newer version before older ones. Simplify ls pattern so also dylibs are detected.", "comment_meta": "3263\t28577184\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577184\tdertin"}
{"comment_text": "Merged into #3278", "comment_meta": "3263\t28692984\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692984\tlaanwj"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/cf84c1b10c4ea507cd929315cf7685fe50e0cc68 for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3262\t28566535\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566535\tBitcoinPullTester"}
{"comment_text": "ACK. Need a better commit message than \"upgraded to serial X\" Describe the changes we are importing.", "comment_meta": "3262\t28575411\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575411\tjgarzik"}
{"comment_text": "I added information about the change.\r\n\r\n- Use 'ls -r' rather than non-portable tool 'tac'. Simplify filepattern in ls expression so dylib (on OSX) are also detected.", "comment_meta": "3262\t28577413\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577413\tdertin"}
{"comment_text": "Merged into #3278", "comment_meta": "3262\t28692989\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692989\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/ae4733fb9d85dfca8f62cd4accbf576d2354765a for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3261\t28566994\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566994\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3261\t28567422\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567422\tlaanwj"}
{"comment_text": "ACK. Need a better commit message than \"upgraded to serial X\" Describe the changes we are importing.", "comment_meta": "3261\t28575432\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575432\tjgarzik"}
{"comment_text": "I added information about the change.\r\n\r\n- Fixed detection of dynamic libraries on Mac OS X (*.dylib)\r\n- See http://savannah.gnu.org/patch/?7719 for further details.", "comment_meta": "3261\t28577770\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577770\tdertin"}
{"comment_text": "Merged into #3278", "comment_meta": "3261\t28692996\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692996\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/91345e41c60eeab14675b82560509d02bafcdb28 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3260\t28567464\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567464\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3260\t28567642\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567642\tlaanwj"}
{"comment_text": "ACK. Need a better commit message than \"upgraded to serial X\" Describe the changes we are importing.", "comment_meta": "3260\t28575282\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575282\tjgarzik"}
{"comment_text": "I added information about the changes.\r\n\r\n- Fixed cut-and-paste error.\r\n- See http://savannah.gnu.org/patch/?7576 for further details.\r\n\r\n- Use 'ls -r' rather than non-portable tool 'tac'.\r\n- Simplify filepattern in ls expression so dylib (on OSX) are also detected.", "comment_meta": "3260\t28578507\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28578507\tdertin"}
{"comment_text": "Merged into #3278 ", "comment_meta": "3260\t28693017\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28693017\tlaanwj"}
{"comment_text": "BTW, for next time: for some straightforward change like this it's better to combine the commits into one pull request", "comment_meta": "3259\t28567495\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567495\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/5fd8db3ac28e244d042aa46dfef2a8513b4b657b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3259\t28568021\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28568021\tBitcoinPullTester"}
{"comment_text": "I'm just not working on my computer, and I did it the easy way. sorry.", "comment_meta": "3259\t28568093\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28568093\tdertin"}
{"comment_text": "ACK\r\n", "comment_meta": "3259\t28568366\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28568366\tlaanwj"}
{"comment_text": "ACK.  Need a better commit message than \"upgraded to serial X\"  Describe the changes we are importing.\r\n", "comment_meta": "3259\t28575247\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575247\tjgarzik"}
{"comment_text": "I added information about the change. \r\n\r\n- Add aarch64 to the list of lib64 architectures", "comment_meta": "3259\t28576922\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28576922\tdertin"}
{"comment_text": "What a cool commit-msg battle ^^, great you are supplying autotools updates :).", "comment_meta": "3259\t28589117\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28589117\tDiapolo"}
{"comment_text": "BTW, if aarch64 is a goal, last I checked protobuf lacks aarch64 support.   Fedora has patches for it.", "comment_meta": "3259\t28623003\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28623003\twtogami"}
{"comment_text": "And yes, these commit messages need to be more descriptive of what it actually does, and it is annoying to have it split into multiple commits and separate PR's.", "comment_meta": "3259\t28623015\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28623015\twtogami"}
{"comment_text": "I don't think aarch64 is the goal per se, but it doesn't hurt keeping the m4's up to date with upstream.\r\n", "comment_meta": "3259\t28623508\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28623508\tlaanwj"}
{"comment_text": "Merged into #3278", "comment_meta": "3259\t28693003\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28693003\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/fabba0e6cc08af2b6ff651c5f16b55ffbee9c45b for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3258\t28563487\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28563487\tBitcoinPullTester"}
{"comment_text": "`git diff -b` output is empty, merging\r\n", "comment_meta": "3258\t28567014\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567014\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/379778bde61f8589988cf113ec4c3961b8155b0a for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3257\t28563880\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28563880\tBitcoinPullTester"}
{"comment_text": "@laanwj Can you re-merge this, sorry for the confusion. Ping :).", "comment_meta": "3257\t28615671\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28615671\tDiapolo"}
{"comment_text": "This shouldn't be open for so long, as it is uncontroversial IMHO...", "comment_meta": "3257\t28895949\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895949\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/309f796b39d4ae7694c3f37a681c1ebcd1f58eda for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3255\t28513284\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28513284\tBitcoinPullTester"}
{"comment_text": "Still need to test this but code changes ACK\r\n", "comment_meta": "3255\t28555193\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28555193\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/6a86c24db146d9ca5d1d5c83099d935c3feb63bb for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3253\t28488330\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28488330\tBitcoinPullTester"}
{"comment_text": "Regarding watch-only addresses: \r\nI would suggest to merge watch-only first, then I could maybe add watch-only-support to coin control. \r\nDepending on whether this is an easy change or not, \r\nI would like to have watch-only also visible in coin control. Maybe with a checkbox \"show watch-only\".\r\nI would add my brainwallet outputs as watch-only. It would be nice, if I could see those outputs in the coin control popup. Maybe even enabled, so I can play around with them. CreateTransaction should just fail, I guess, if you try to spend watch-only. Coin control is an expert-only feature anyway.\r\nThose outputs could be marked with an \"eye-icon\" for example. What do you think?", "comment_meta": "3253\t28507891\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28507891\tcozz"}
{"comment_text": "I rebased this to run through the test plan one last time and collect a last round of ACKs then finally get this merged (before a 0.9 feature freeze).\r\n\r\nAre you sure you want to postpone this further? Watch-only does not have a consensus to be merged. Though I think the functionality is extremely useful, my main user-facing nit with the current implementation is that it shows one balance that includes both spendable and unspendable coins. This has the potential for confusing users.\r\n", "comment_meta": "3253\t28550975\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28550975\tlaanwj"}
{"comment_text": "Watch-only, as it currently is implemented, is not fit for merging ever... I agree with @laanwj , let's get this in now.", "comment_meta": "3253\t28551459\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28551459\tluke-jr"}
{"comment_text": "ok then, I just thought watch-only will be merged soon. \r\n\r\nI can also submit follow-up coin control pull requests to add more features like \"add watch-only support\" later.", "comment_meta": "3253\t28558823\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28558823\tcozz"}
{"comment_text": "Yes, you can always make changes again later after other things have been merged.", "comment_meta": "3253\t28564315\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28564315\tlaanwj"}
{"comment_text": "@cozz Thanks for all the work on this. I've been following this ever since I first heard about it.", "comment_meta": "3253\t28592467\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28592467\tkuzetsa"}
{"comment_text": "ACK changes to core; haven't tested or looked at GUI changes.", "comment_meta": "3253\t28608637\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28608637\tsipa"}
{"comment_text": "Thanks @sipa\r\nGUI can always be improved (but it works and is pretty nice already), it's mostly the core changes that need to be fool proof.\r\nGoing to merge this now, license headers can be added in a seperate pull.\r\n", "comment_meta": "3253\t28622605\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28622605\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/22d1ac44dc57fa4e1f9cad3512cc139986b4f3fe for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3252\t28489076\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28489076\tBitcoinPullTester"}
{"comment_text": "ACK of course (we need to ensure this time we push another master file update before RC phase starts).", "comment_meta": "3252\t28519438\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28519438\tDiapolo"}
{"comment_text": "Thanks, but please do language changes on Transifex: https://www.transifex.com/projects/p/bitcoin/\r\nIt's easier to coordinate there.\r\nThey'll  be merged here periodically.\r\n", "comment_meta": "3251\t28484639\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28484639\tlaanwj"}
{"comment_text": "Thanks for the comment about Transifex.", "comment_meta": "3251\t28485143\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28485143\tdertin"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/79afdd1869b71060481f92284f6e01dd1010516f for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3248\t28468498\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28468498\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3248\t28519484\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28519484\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/6ad44f569335d57a56e5b28582255439980f9b73 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3247\t28514712\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28514712\tBitcoinPullTester"}
{"comment_text": "Weird, seems I mixed up my branches as this pull is empty... see #3257 for new try ;).", "comment_meta": "3247\t28562278\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28562278\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/a6099ef319a73e2255dca77065600abb22c4f5f8 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3246\t28397834\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28397834\tBitcoinPullTester"}
{"comment_text": "Checked the test_bitcoin.exe produced by the pull tester on WinXP: no errors in sprintf_tests.\r\n", "comment_meta": "3244\t28389999\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28389999\tlaanwj"}
{"comment_text": "@laanwj continuing dicussion about using iostreams, would there be any known cross-compatibility issues with the switch?", "comment_meta": "3244\t28390939\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28390939\tbrandondahler"}
{"comment_text": "@brandondahler This should be safe, and is only a very small change. As it works with the ancient mingw that pulltester uses (and on windows XP, which is the minimum Windows version that we support), it certainly works with latter ones.\r\n\r\nA later patch could switch to using boost::format and/or iostreams, but that would be a huge patch and touch every file and function in the core (breaking all other pull requests to boot!). So I'd prefer to leave it at this for now and focus on more important issues.\r\n", "comment_meta": "3244\t28391736\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28391736\tlaanwj"}
{"comment_text": "Tried it, still results in the compiler spaming warnings for me...", "comment_meta": "3244\t28405343\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28405343\tDiapolo"}
{"comment_text": "@Diapolo but does the resulting bitcointest work?\r\n\r\nI guess the reason that you get warnings is that the ATTR_WARN has to be changed to use C99 conventions too on WIN32:\r\n\r\n    #define ATTR_WARN_PRINTF(X,Y) __attribute__((format(printf,X,Y)))\r\n\r\nCan you try changing it to?\r\n\r\n    #define ATTR_WARN_PRINTF(X,Y) __attribute__((format(gnu_printf,X,Y)))\r\n\r\nEdit: already pushed this, works on other OSes too, yippie, no need for win32-specific exception\r\n", "comment_meta": "3244\t28406047\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28406047\tlaanwj"}
{"comment_text": "Let me check the executable...", "comment_meta": "3244\t28406202\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28406202\tDiapolo"}
{"comment_text": "<pre>\r\nRunning 103 test cases...\r\n\r\n*** No errors detected\r\n</pre>\r\n\r\nWin7 x64 with the test_bitcoin.exe from pulltester above. Still weird...", "comment_meta": "3244\t28408124\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28408124\tDiapolo"}
{"comment_text": "Your latest change leads to this warnings:\r\n\r\n<pre>\r\nC:\\Users\\Diapolo\\bitcoin.Qt\\src\\util.h: Warnung:format '%d' expects argument of type 'int', but argument 3 has type 'int64_t {aka long long int}' [-Wformat=]\r\n #define strprintf(format, ...) real_strprintf(format, 0, __VA_ARGS__)\r\n                                                                     ^\r\n</pre>\r\n\r\nor\r\n\r\n<pre>\r\nC:\\Users\\Diapolo\\bitcoin.Qt\\src\\util.h: Warnung:format '%u' expects argument of type 'unsigned int', but argument 4 has type 'uint64_t {aka long long unsigned int}' [-Wformat=]\r\n #define LogPrintf(...) LogPrint(NULL, __VA_ARGS__)\r\n                                                  ^\r\n</pre>\r\n\r\nEdit: Wait... this was with my former patch applied, trying a new compilation...", "comment_meta": "3244\t28408364\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28408364\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/c82788effffda0758de20880b2925b42044ce08d for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3244\t28409911\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28409911\tBitcoinPullTester"}
{"comment_text": "ACK", "comment_meta": "3244\t28410112\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28410112\tDiapolo"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/b3e579713f14309a330a44171abd47c2e851a7b0 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3241\t28306935\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28306935\tBitcoinPullTester"}
{"comment_text": "Removed the faux progress message.\r\n\r\nI also want to get the GUI working in a limited way (or if not possible, at least non-crashing).\r\n", "comment_meta": "3240\t28292687\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28292687\tlaanwj"}
{"comment_text": "Voila\r\n![nowallet](https://f.cloud.github.com/assets/126646/1522105/205eb652-4ba2-11e3-97fd-02aa2f288357.png)\r\n\r\nYes, I know the window title still has \"Wallet\" in it, but apart from that nothing wallet-related is shown and all wallet-related actions and menu options are disabled (which means that apart from Quit and About and such only the Options and Debug Console commands are active, but those could be useful... :pizza:)\r\n", "comment_meta": "3240\t28294708\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28294708\tlaanwj"}
{"comment_text": "https://github.com/litecoin-project/bitcoinomg/tree/bitcoin-0.8.5-OMG4\r\nDisable Wallet for Bitcoin 0.8.5.\r\n\r\nhttps://github.com/litecoin-project/bitcoinomg/commit/f937ef838bf34d083b73564543a4951f1db17eb9\r\nBackported the -disablewallet GUI support.", "comment_meta": "3240\t28368770\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28368770\twtogami"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/146ba964e4b784171c29600e959a0fae3e2e0c03 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3240\t28378067\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28378067\tBitcoinPullTester"}
{"comment_text": "Thanks for pushing this over the finish line.  I just got back into the office from family stuff.\r\n", "comment_meta": "3240\t28392487\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28392487\tjgarzik"}
{"comment_text": "Automatic sanity-testing: FAILED BUILD/TEST, see http://jenkins.bluematt.me/pull-tester/4f7d496b82210bf3235c1f8b41bfa821bfbfc54f for binaries and test log.\n\nThis could happen for one of several reasons:\n1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester)\n2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time\n3. It does not build on either Linux i386 or Win32 (via MinGW cross compile)\n4. The test suite fails on either Linux i386 or Win32\n5. The block test-cases failed (lookup the first bNN identifier which failed in https://github.com/TheBlueMatt/test-scripts/blob/master/FullBlockTestGenerator.java)\n\nIf you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.\n\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3238\t28245304\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28245304\tBitcoinPullTester"}
{"comment_text": "Seems unrelated:\r\n<pre>\r\ntail: write error: Broken pipe\r\ntail: write error\r\n</pre>", "comment_meta": "3238\t28245874\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28245874\tDiapolo"}
{"comment_text": "@TheBlueMatt Can you take a look?", "comment_meta": "3238\t28273257\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28273257\tDiapolo"}
{"comment_text": "Just curious: why not add a default arguments to getOpenFileName, that'd be a smaller change?", "comment_meta": "3238\t28274464\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274464\tlaanwj"}
{"comment_text": "IMHO it's too easy to rely on default args, so I thought removing them would be better here.", "comment_meta": "3238\t28274533\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274533\tDiapolo"}
{"comment_text": "Meh, the default arguments also don't really make sense (why would you want to provide empty messages), except for the final output argument.\r\n", "comment_meta": "3238\t28276451\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28276451\tlaanwj"}
{"comment_text": "Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/387f2c5e7a14f7d8773dda0d72d85f5563c7347d for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/current/\nContact BlueMatt on freenode if something looks broken.", "comment_meta": "3237\t28246004\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28246004\tBitcoinPullTester"}
{"comment_text": "Please verify that it continues to build and work as expected with the Precise 12.04-based win32 gitian which has mingw based on gcc-4.6.x.", "comment_meta": "3237\t28265240\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28265240\twtogami"}
{"comment_text": "@diapolo If I understand this correctly you're giving yourself too little credit. This does not only silence warnings, but it *fixes printf format strings throughout the source code* for Windows builds.\r\n\r\nACK in any case\r\n", "comment_meta": "3237\t28274159\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274159\tlaanwj"}
{"comment_text": "Maybe we should add some sprintf tests to catch problems with this in the pulltester.\r\n", "comment_meta": "3237\t28276499\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28276499\tlaanwj"}
{"comment_text": "@diapolo Can you try removing the inttypes.h include completely on WIN32? I think it's only used for PRId64 (and friends) at this point and we shouldn't use C99 headers on WIN32.\r\n", "comment_meta": "3237\t28287549\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28287549\tlaanwj"}
{"comment_text": "I'll check this out tomorrow... thanks for helping out.", "comment_meta": "3237\t28312005\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28312005\tDiapolo"}
{"comment_text": "@Diapolo this only coincidentally fixes most instances of the warning because util.h is depended on by almost every file (indirectly at least). The inttypes.h include is spread across all of the files that use PRI[xdu]64 directly.\r\n\r\nI would rather spend some time getting rid of all of the *printf functions and replace them with [i,o][,f,string]streams where appropriate.  Once that is done, there will be no dependence on inttypes.h anywhere. ", "comment_meta": "3237\t28364678\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28364678\tbrandondahler"}
{"comment_text": "It is quite urgent to fix this because it breaks strprintf on Windows XP and earlier (see http://sourceforge.net/apps/trac/mingw-w64/wiki/gnu%20printf)\r\n\r\n@brandondahler have you checked how much strprintf is used? There's at least 130 direct usages. Converting that all to iostreams would be a massive endavour. Had I realized that inttypes.h was C99 I would not have ACKed your refactor :/ `\r\n\r\nSo unless we revert all those changes it forces us into the C99 route for the short term even on Windows. Thus to define `__USE_MINGW_ANSI_STDIO` and use the mingw C99 equivalent functions. I'd rather not have because this burns all the bridges to MSVC support, but no one cared about that anyway so it's not much of a loss.\r\n\r\n*In the longer term* `boost::format` is a typesafe printf-backward-compatible function that natively uses std::strings, so I think that would be the way to go to replace strprintf. The syntax is different though (http://www.boost.org/doc/libs/1_55_0/libs/format/doc/format.html) so this still implies quite a lot of work.", "comment_meta": "3237\t28372327\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28372327\tlaanwj"}
{"comment_text": "Continued in #3244", "comment_meta": "3237\t28384587\thttps://api.github.com/repos/bitcoin/bitcoin/issues/comments/28384587\tlaanwj"}
