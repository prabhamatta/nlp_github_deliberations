3297	29005179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29005179	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3296	28985917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28985917	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3295	28975802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28975802	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3294	28958081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28958081	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3286	28897913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28897913	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3286	29006854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29006854	Diapolo	Am I right that MaxAddressLength is not the MinAddressLength ;)? And if this is the case, what is the minimum length of a BTC address? This is not yet mergable in the current state ^^.
3285	28910487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28910487	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3285	29007831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29007831	Diapolo	I have more string and translations updates, but dont want to bloat this pull, so it gets merged faster. Can you take a look please?
3284	28965276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28965276	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3284	28979434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28979434	laanwj	Can I get some acks here please?
3284	28983010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28983010	sipa	ACK design. The code looks good, but I havent checked all moves in detail.
3281	28788339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28788339	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3277	28703086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28703086	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3276	28793347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28793347	laanwj	Code changes look good
3276	28943815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28943815	sipa	Rebased to trigger pulltester evaluation.
3276	28948690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28948690	sipa	I missed the should-not-disconnect-localhost behaviour, thanks pulltester!
3276	28949618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28949618	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3273	28649263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649263	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3273	28983865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28983865	Diapolo	ACK to the idea, didnt test the code... but looks sane :).
3271	28642450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28642450	jgarzik	While the motivation is appreciated... meh, a bit disinclined to stir every printf line, and break tons of other patches, for this.
3271	28644305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28644305	laanwj	Thats also why I have discouraged doing this. On the other hand, it appears pretty trivial to rebase patches to this and it mostly (only) affects debug printing.
3271	28645089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28645089	laanwj	Apart from the above nits I think this is overall a good idea (printf is ugly and un-typesafe after all, so getting rid of it in favor of a safer method reduces risks. Also depending on C99 as well as C++ was a bit weird), but we may want to merge other pull requests first to prevent conflicts.
3271	28649395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649395	sipa	Id prefer a `CLogStream("class") << ...`, with "class" optional as well. Since this is something that is often written during debugging, maybe just call it `Log()`?
3271	28649428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649428	sipa	Why remove errors return type?
3271	28649828	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28649828	brandondahler	Because error always returned false, which made the fact that it returns anything confusing (until you looked up the definition). Error was a subroutine acting like a function. > On Nov 17, 2013, at 8:29 AM, Pieter Wuille <notifications@github.com> wrote: > > Why remove errors return value? > > > Reply to this email directly or view it on GitHub.
3271	28677269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28677269	brandondahler	and following your suggestions, I have created the Log class (log.h and log.cpp). At its core it works by multiplexing an input to multiple outputs. Since generally flags wont change after instantiation of the class (except for changes from other threads), the constructor of the instantiation reads the different flags and decides what streams to send the data to. For all types except strings and const char*s, the data is just passed along to the streams below (manipulators work too). For strings and const char*s, we do a little processing based on what stream it is, specifically seeing if/when we are writing new lines. For the error function, I removed it all-together and replaced them with log calls ("ERROR: " prepended, "\n" appened). If we want to make it so the "ERROR: " part is configurable, I would recommend a public static const char* on Log instead of making a wrapping function.
3271	28757904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28757904	brandondahler	Fixed problems hopefully, rebased.
3271	28857110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28857110	gavinandresen	I prefer printf-style syntax over << " " << etc, so I dont like this pull. It is 700 extra lines of code for approximately zero practical benefit that I can see.
3271	28858928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28858928	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3271	28862460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28862460	brandondahler	I understand feeling that there is a lot of one-time risk involved in moving from printf to stream style conversion; however, I completely disagree that there is no practical benefit. 1) This makes maintenance easier The code is much less complex overall. This removes some ugly compatibility #defines, attribute markings, and even hacks. 2) Platform independence We are no longer relying on the platform to have a correct/compliant printf function. Instead we are relying on the C++ standard library implementation which we already rely on since we use C++ in the first place. This is specifically a problem for int64_t since Windows doesnt use the same syntax as Linux unless you use some compatibility defines. 3) The way it reads Streams read fluently instead of requiring the user to place the parameters in the correct place. Consider: return strprintf( "HTTP/1.1 %d %s\r\n" "Date: %s\r\n" "Connection: %s\r\n" "Content-Length: %"PRIszu"\r\n" "Content-Type: application/json\r\n" "Server: bitcoin-json-rpc/%s\r\n" "\r\n" "%s", nStatus, cStatus, rfc1123Time().c_str(), keepalive ? "keep-alive" : "close", strMsg.size(), FormatFullVersion().c_str(), strMsg.c_str()); Becomes ossReply << "HTTP/1.1 " << nStatus << " " << cStatus << "\r\n" << "Date: " << rfc1123Time() << "\r\n" << "Connection: " << (keepalive ? "keep-alive" : "close") << "\r\n" << "Content-Length: " << strMsg.size() << "\r\n" << "Content-Type: application/json\r\n" << "Server: bitcoin-json-rpc/" << FormatFullVersion() << "\r\n" << "\r\n" << strMsg; return ossReply.str(); Likewise logging lines stand out just like normal cout lines (given the new Log class). ____ All of this being said, I will agree that the shorter changes, such as: std::string tmpfn = strprintf("peers.dat.%04x", randv); Becoming std::ostringstream tmpfn("peers.dat."); tmpfn << std::hex << std::setfill(0) << std::setw(4) << randv << std::dec << std::setfill( ); Would probably work better off as a boost::format. The reason I started out with not using boost::format more is because I personally prefer to keep dependence on boost to a minimum. If yall disagree I do think it could make things less cluttered when making simple, smalls strings. Likewise creating formatting functions for specific types of data would allow us to change the output formatting of the data in one place instead of across a bunch of files, while fitting in with the stream style. Using the above function again, having a static call makes things cleaner all-together: ... std::string tmpfn = CAddrDB::PeersFilePath(randv); ... std::string CAddrDB::PeersFilePath(unsigned short randv) { std::ostringstream tmpfn(); tmpfn << "peers.dat." << std::hex << std::setfill(0) << std::setw(4) << randv; return tmpfn.str(); } Further we can make custom manipulators to reduce duplication of code: ios_base& hex04(ios_base& ib) { ib << std::hex << std::setfill(0) << std::setw(4); return ib; } std::string CAddrDB::PeersFilePath(unsigned short randv) { std::ostringstream tmpfn(); tmpfn << "peers.dat." << hex04 << randv; return tmpfn.str(); }
3271	28862686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28862686	brandondahler	On another note, does anyone have any idea why pull tester is failing? The only lines that look bad are: ============= 1 test passed ============= make[4]: Leaving directory `/mnt/bitcoin/linux-build/src/test make[3]: Leaving directory `/mnt/bitcoin/linux-build/src/test make[2]: Leaving directory `/mnt/bitcoin/linux-build/src/test make[1]: Leaving directory `/mnt/bitcoin/linux-build/src make check-local make[2]: Entering directory `/mnt/bitcoin/linux-build /bin/mkdir -p qa/tmp make[2]: *** [check-local] Killed make[2]: Leaving directory `/mnt/bitcoin/linux-build make[1]: *** [check-am] Error 2 make[1]: Leaving directory `/mnt/bitcoin/linux-build make: *** [check-recursive] Error 1 tail: `/mnt/bitcoin/linux-build/.bitcoin/regtest/debug.log has become inaccessible: No such file or directory From . Whereas a successful one shows the following at the same spot: ============= 1 test passed ============= make[4]: Leaving directory `/mnt/bitcoin/linux-build/src/test make[3]: Leaving directory `/mnt/bitcoin/linux-build/src/test make[2]: Leaving directory `/mnt/bitcoin/linux-build/src/test make[1]: Leaving directory `/mnt/bitcoin/linux-build/src make[1]: Entering directory `/mnt/bitcoin/linux-build make check-local make[2]: Entering directory `/mnt/bitcoin/linux-build /bin/mkdir -p qa/tmp tail: write error: Broken pipe tail: write error
3271	28867775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28867775	laanwj	Agreed, the problem isnt with printf-style *syntax*, its with the printf function - which (in our usage) isnt part of the C++ standard, so we had a dependency on C99-like formats that broke down on Windows without special mingw defines. Also its not type safe, easy to mess up the stack with some wrong % char, and uses a variable-number-of-parameters hack which breaks down for std::string so a dummy 0 argument is inserted with a macro (the `real_strprintf` etc...). Many reasons to get rid of the sprintf hacks. But boost::format would be better in that regard as it mostly keeps printf syntax but is typesafe and has none of those mentioned drawbacks. I dont think the actual risk is that large, at most some debug messages will be formatted differently. It could map pretty much one-on-one. Could we do this without adding (so many) lines?
3271	28867859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28867859	laanwj	Also -- do we really need our own class for handling time? (bitcointime.cpp/h) How is this related to the subject of this pull? Reducing depenency on boost is not a goal! If boost offers some functionality, please use that instead of rolling our own. This changes way too many things, please keep it focused.
3271	28887312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28887312	brandondahler	I would not consider the use of ostringstream as "rolling my own", namely because that is the only way provided by the C++ standard library to convert random types to strings and vice versa. If you are talking about the Log class, the first commit started off without it, but it was added because it simplifies the actual logging process (the business logic that goes in to putting type T data into X, Y, and Z streams) and it makes reading the actual print lines prettier: Log() << something << " something else"; vs LogPrint(str(boost::format("%d something else") % something)); ).
3265	28616175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28616175	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3265	28616760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28616760	Diapolo	<pre> tail: write error: Broken pipe tail: write error </pre> Once more an unrelated error.
3265	28895900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895900	Diapolo	Agreed, will rework this.
3254	28515712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28515712	Diapolo	Any idea what is causing this build error, I dont understand the problem. Edit: Was caused by paymentservertest.cpp, because Gavin called eventFilter() directly, which isnt possible anymore after this pull.
3254	28684037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28684037	Diapolo	Damn: <pre> paymentservertests.cpp: In function SendCoinsRecipient handleRequest(PaymentServer*, std::vector<unsigned char, std::allocator<unsigned char> >&): paymentservertests.cpp:49: error: no matching function for call to QCoreApplication::sendEvent(QObject&, QFileOpenEvent&) /usr/include/qt4/QtCore/qcoreapplication.h:214: note: candidates are: static bool QCoreApplication::sendEvent(QObject*, QEvent*) paymentservertests.cpp:49: error: return-statement with no value, in function returning SendCoinsRecipient </pre> My fault, the function wants a pointer not an object ^^.
3254	28700606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28700606	Diapolo	I hope this is the last time now -_-.
3254	28704118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28704118	Diapolo	Wohoooo :)
3254	28895984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895984	Diapolo	Merge-ready or anything more to be done here?
3254	28906703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28906703	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3242	28334203	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28334203	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3239	28261928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28261928	luke-jr	The verbose flag seems needlessly redundant with getblocktemplate...
3239	28261988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28261988	jgarzik	getblocktemplate always produces a subset of mempool
3239	28262223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28262223	luke-jr	Not always...? Wouldnt the goal of a good mempool be to only keep transactions youd be putting in templates?
3239	28262901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28262901	jgarzik	Yes, always. Sometimes subset == set, but usually not. The mempool will always store more than **one** blocks worth of transactions. getblocktemplate only returns up to 1MB, etc.
3239	28264035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28264035	luke-jr	Could just add some non-standard extensions to bitcoind getblocktemplate to request more, but meh.
3239	28273393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28273393	Diapolo	Nit: CTxMemPoolEntrys should be CTxMemPoolEntries
3239	28300218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28300218	petertodd	Remove EraseTransaction() while were at it; only tx replacement uses that code. I dont see any way it could have gotten much if any testing in the past.
3239	28300759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28300759	petertodd	Itd be better if ComputePriority() was not a part of CTransaction - priority calculations are node policy rather than consensus critical and wed be better off if such code was kept out of the core data structures to make code review easier in the future.
3239	28455681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28455681	gavinandresen	Rebased, extended the help, and tweaked to rename verbose output dependson to depends to be more consistent with getblocktemplate, and to always output a depends key (will be an empty array if no dependencies). RE: getblocktemplate: I seem to remember having the same argument when getrawmempool was pulled, and the decision remains getrawmempool is valuable. RE: removing EraseTransaction/moving ComputePriority: another clean-up pull request would be fine, Im busy working on higher priorities. RE: CTxMemPoolEntries: please read the code, and ideally compile and test it, before commenting.
3239	28576085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28576085	laanwj	ACK apart from that, appears to work as expected, and code changes look good
3239	28864476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28864476	gavinandresen	good catch, using ValueFromAmount to report fees now.
3239	28865423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28865423	gavinandresen	Testing on my smartfee branch (which save/restores the mempool), I noticed transactions with repeated txids in the depends array because they depends on multiple outputs from previous transactions. I decided to fix that by unique-ifying the depends array. The alternative would be to report "txid:vout" or something more complicated/verbose like [ { "txid: " .... ", "vout" : 11 }, { ... } ] But I think just pointing to the unconfirmed parent txids is the right thing to do. You can use getrawtransaction for the child to work out exactly which txins are unconfirmed.
3239	28866572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28866572	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3229	28165258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28165258	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3229	28190386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28190386	laanwj	Id propose to implement this slightly differently, more straightforward: set the default to invalid values (such as `-1` or MAXINT or `0`, whatever is most useless) then check for valid values in IsMiningSetup() instead of probing the arguments.
3229	28230109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28230109	luke-jr	Thatd probably make it clearer too, okay...
3229	28233487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28233487	luke-jr	Thatd need making the variables globals again.. so maybe this is better after all?
3229	28236085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28236085	laanwj	Ugh, yes I now see that CreateNewBlock also queries and parse the arguments every time. Thats the same as using globals, just in a hidden way. At least I now understand your reasoning for doing it that way in IsMiningSetup.
3229	28314793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28314793	mikehearn	The obvious downside of this approach being ..... once a miner has set them, we lose the ability to select smarter defaults, because whatever they pick could end up being used indefinitely.
3229	28320534	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28320534	luke-jr	"We" shouldnt be setting defaults anyway. Thats the point.
3229	28321718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28321718	gmaxwell	If we think that the common settings become wrong for an option there is always the possibility of just renaming the option to force resetting it.
3207	27799039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27799039	Diapolo	Nice work, but I tend to disagree storing in QSettings, as this is at least on Windows stored in the registry. Would be ugly and bad practise to do this IMHO.
3207	27834202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27834202	sipa	I dont see why this would not be stored in the wallet? EDIT: misread, this is about requested payments - not sent ones.
3207	27842886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27842886	gavinandresen	The wallet stores both "from" and "to" transactions, so storing both "from" and "to" payment requests makes sense to me (I believe were storing neither right now).
3207	27847653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27847653	laanwj	I guess it could be stored in the wallet, but that means there will need to be a core interface for storing arbitrary data (that the core doesnt know the format of) in the wallet. Yes, storing incoming payment requests would make sense too, and could be done in a similar way but somewhere else in the UI
3207	27864089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27864089	laanwj	Thinking about it, we should store *incoming* payment requests in the transaction metadata and simply show them in the transactions list. We cant do the same for *outgoing* payment requests at least until the recipient pays them, maybe they could be correlated and stored in the transaction list then, but until the request is paid it must be in this separate list.
3207	28790786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28790786	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3178	28312917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28312917	Diapolo	This should be rather uncontroversial, no?
3178	28509890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28509890	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3178	28511577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28511577	sipa	ACK
3157	27153603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153603	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3157	27468012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27468012	laanwj	As I mentioned somewhere else: AddressBookPage is supposed to be a standalone dialog that can be launched from anywhere, so Id prefer not making it dependent on connecting signals.
3157	27502703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27502703	Diapolo	Yeah, Im going to rework this, to not use ``mesage()``, that way as it seems impossible to do it in a clean way and its a standalone dialog, as you also said. Its a tad sad that my invention breaks the coding-rules somehow, but Im happy you appreciated this :-). What about a ``message()`` function (not signal) in GUIUtil, perhaps nearly a copy of the one in BitcoinGUI (so we have a unified user experience and API)? Just a quick thought...
3157	28200589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28200589	laanwj	I suppose what could work is pass in the Notificator object, and move the message() function/slot there. A global function in GUIUtil would not work, it wouldnt have access to the Notificator.
3157	28411342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28411342	Diapolo	How should I access the notificator pointer, its included in BitcoinGUI also :-/.
3147	27037944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27037944	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3147	27041594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27041594	jgarzik	Looks pretty good, based on a 60-second, untested review ;p
3147	27079808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27079808	laanwj	Agree with the first two commits; --with-system-leveldb is a bit controversial, as it may nudge distro packagers the wrong way. Theres a good reason that we include our own copy of leveldb.
3147	27124773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27124773	wtogami	I have to agree that --with-system-leveldb sends the wrong message to distributions.
3147	27127144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27127144	luke-jr	Perhaps an AC_WARN would be appropriate.
3147	27192595	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27192595	laanwj	you know just as well as us that theyll just ignore that
3088	26229036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229036	gmaxwell	This is _not_ ready for merging yet. Ive done some basic testing instrumenting announcement and seeing that it worked like expected, but before I put a lot more time into testing it (setting up a simulated network and such) I wanted to get some feedback on the general approach of giving the peer back the address it told us. (also, this patch was bluntly forward ported from the older version that I tested Ive not run this particular version, though it does build) There is a bunch of code motion Ive included here for some of the heuristics in deciding to use the our current estimate vs the peers report. Im not married to it, and perhaps it would be better removed and a more simpler behavior adopted.
3088	26229349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229349	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3088	26229726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229726	super3	This seems like a priority because of the privacy and reliability implications. Will donate boxes and/or cloud time for testing. Is there anything in the request that lets the service know that its a Bitcoin node asking for an IP? What will happen if both of the listed services checkip.dyndns.org and www.showmyip.com are down?
3088	26229849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229849	sipa	Bitcoind advertizes as Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1), so no - it doesnt really let the site know anything. Of course, there could be other data that gives it away (combination with protocol, closing of connections, timings, ...). If the external ip services are down, then we dont know our own IP and cant advertize it. No big deal, but makes your node hard or impossible to find for others.
3088	26230098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230098	super3	Well since these seem to be well used services that should make it fairly difficult. Volunteer services wont help either because they will only be used Bitcoin (which makes it easy to just run some honeypot nodes), and will require maintaining some sort of list of available look-up services. Seems like the immediate band-aid would be adding some more services until this method is readying for merging.
3088	26230868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230868	gmaxwell	We havent considered it super high priority in the past because there are many other signals that give away a Bitcoin node on the network... and if you turn off listening or switch to using tor you turn off most (all in the case of Tor, hopefully) of them as as well as this one. There were several other points of network centralization before, and weve been chewing away at them. This is the next obvious one to get rid of...
3088	26230885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230885	sipa	I need to look closer at the code changes, but I have little doubt this will be ready for 0.9.
3088	26327878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26327878	laanwj	This is nice to have, if we dont need to depend on centralized services we shouldnt.
3088	26386367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26386367	gavinandresen	Approach sounds good. Can you write a test plan?
3088	26507993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26507993	mikehearn	Lying about a user-agent isnt gonna help anyway (trust me, I spent years shooting ua-forging fish in a barrel). The decentralisation aspects are more important.
3088	26526820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26526820	petertodd	ACK on approach. Though its worth considering how we could have had a system of signed per-node identities where you would sign your advertisement - including what you think is your IP/tor/whatever - and in addition to that nodes that relayed your advertisement could sign their own messages saying what they thought your globally reachable address was. But thats just food-for-thought - what youre doing is the right thing to do for now.
3088	26596329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26596329	laanwj	Why would one want signed per-node identities? For what would nodes want to identify themselves at all, isnt the idea that nodes are as indistinguishable and exchangeable as possible?
3088	26607973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26607973	petertodd	One example is for anti-sybil protection by associating an identity with p2pool proofs-of-work, or by simply purchasing a fidelity bond. Once you make the identity expensive to obtain, you can then use fraud proofs - for instance rather than having an expensive UTXO commitment system and associated soft-fork you can just as easily ask nodes to make signed statements as to what transactions match a given filter, and if a different peer gives a different answer, construct a compact proof that one of them was lying and thus destroy that identity. This will work particularly well in conjunction with micropayment systems for SPV node services.
3088	27144211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27144211	wtogami	Would this be more informative if it logged when it transmits an advertisement? Otherwise it is difficult to tell if it is working at all. The log could also be informative in showing you if a peer lied to you. Does bitcoin currently handle multi-homing? The logging would also be informative here to show advertisements of multiple external IPs. Backport to Bitcoin 0.8.5.
3088	27159683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27159683	wtogami	```receive version message: version 70001, blocks=266272, us=XX.XX.XX.XX:8333, them=0.0.0.0:0, peer=YY.YY.YY.YY:60127``` The ```0.0.0.0``` is expected and seemingly harmless when the remote host is using the externalip patch. But if they explicitly set their own public address with externalip= it continues to be self-reported as 0.0.0.0. Harmless but expected?
3088	27159709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27159709	gmaxwell	Both. The design here is specifically to not start advertising whatever addresses untrusted peers give us to other peers.
3088	27354043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27354043	wtogami	If end-users want to help testing of this patch, a backport is included in this build of Bitcoin 0.8.5
3025	24959971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24959971	sipa	This would constitute a soft-fork, as IsPushOnly is called by P2SH VerifyScript. Closing until I find a workaround.
3025	24962556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962556	petertodd	Why not make a generic "IsCanonicalPushDatas" that just checks arbitrary scripts for pushdata canonicality and apply it to both scriptPubKey and scriptSig?
3025	24962718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962718	sipa	You basically mean applying the canonicality test to output scripts as well, without enforcing it being push-only. Sounds reasonable.
3025	24962988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962988	petertodd	Yup, and the same function can be used for scriptSigs because other mechanisms force them to be only pushdatas anyway.
3025	25044403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25044403	sipa	Done.
3025	25045309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25045309	sipa	Nice catch. I removed it while investigating a tester error, that lead to discovering IsPushOnly() was used in P2SH VerifyScript. I shouldnt have left that change in, though. Removed.
3025	25046914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25046914	petertodd	Cool. Fix the OP_n case and add more tests and I think this is done.
3025	25320576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320576	sipa	If we both allow OP_n and single-byte pushes, malleability will remain (at least for non-P2SH multisigs with less than 17 keys). Is it really a problem?
3025	25321242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321242	petertodd	As I said in my comment before IsStandard() tests that OP_n is used where appropriate, so there isnt any way to use a non-standard pushdata anyway. Just leave that decision until later - mark it with a "TODO" for now, and do note in that comment that OP_1NEGATE and OP_RESERVED would have to be handled correctly in addition to the more obvious OP_{0,1-16} Besides, what do you mean by "malleability" in your comment about non-P2SH multisigs anyway? The scriptPubKey is hashed; no-one other than the sender can change it.
3025	25679118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25679118	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3025	26673298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26673298	sipa	Right now, this is just an IsStandard() test as a first step, but my intention is certainly to try to get this (or something similar) as a network rule (requiring a soft fork). Together with a few other changes, I believe its possible to kill malleability entirely (only for transactions that dont choose to give it up through different hashtypes, of course). From that perspective, I dont think there is any way around making sure that every potential data push has exactly one representation in the script language. If we cant accept such a strict rule even for just IsStandard(), then there is certainly no way to get it as a network rule, and this whole effort becomes less useful.
3025	26685857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26685857	petertodd	I know that, Im just saying that in this case the rule is meaningless for now because its a case that cant happen in a standard transaction scriptSig, and we should at least update the rest of the reference client source code to follow this new standard first.
3025	26761908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26761908	sipa	Trying to implement a "pushing a byte between 0x00 and 0x10 uses OP_n, rather than 1-byte data pushes" rule, I hit an odd problem: the coinbase genesis is non-canonical...
3025	26834021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26834021	petertodd	Heh, I was waiting for you to notice that. :)
3005	24557386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24557386	theuni	Summary fail. This attempts to fix an issue in bitcoin-qt where checking or unchecking the "Connect through SOCKS proxy" box does not work as expected. Its easily reproduced by enabling/disabling and clicking apply.
3005	24558368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24558368	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3005	24565713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24565713	Diapolo	That whole proxy stuff in current Bitcoin-Qt settings is IMHO a mess, because we try to change it on the fly, which doesnt even work for bitcoind, you may want to take a lookt at #2612.
2975	23810843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23810843	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2975	24034666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24034666	jgarzik	Note that was unable to get this PR to work for him, so there is a bug in there somewher. CTransaction method works
2966	23631269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23631269	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2966	25320852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320852	sipa	Ive forgotten what weve discussed related to this. Do you remember, and is this still the suggested change?
2966	25677418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25677418	gavinandresen	Can you elaborate on "For various reasons it doesnt actually accomplish this goal" ? I worry that this pull will break a coinjoin implementation that uses the raw transactions API, but from your comment it sounds like that might be broken anyway ( : have you done any testing with using other peoples unconfirmed inputs to build a coinjoin transaction? )
2966	25683726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683726	sipa	and I discussed this prior to this pull request. It seems that currently, vtxPrev is only ever pulled from your wallet, meaning there is no way that something in vtxPrev is something you dont already have. After some digging, we found out this was likely because of the original pay-to-IP protocol, so that unconfirmed dependencies get sent out to receivers automatically (mental note: the payment protocol could use this too). In its current state it is both useless and inefficient (there is a degree of duplication, if you have wallets with many unconfirmed transactions). The solution was to remove it altogether now, and perhaps later re-introduce it when its useful, in a saner way (without duplication, for starters).
2966	25683876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683876	pstratem	this is still the suggested change, however at least one bug was revealed and there are likely more that I have not noticed getbalance conf=0 can be negative if you have transactions which pay to an IsMine address
2966	26006682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26006682	pstratem	I just noticed that bug above is actually currently possible to trigger if you happen to have a wallet where vtxPrev has at least one correct entry. Assuming this worked correctly at some point that would be something to fix also.
2966	27571913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27571913	mikehearn	> mental note: the payment protocol could use this too The payment protocol was designed with this in mind from the start :) Thats why you are allowed to submit multiple transactions in a Payment message submission.
2910	22871772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22871772	ashleyholman	This is my first time doing a patch for bitcoin, so please scrutinise and tell me if Ive done something wrong :) Thanks
2910	22874576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22874576	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2910	22876870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22876870	luke-jr	NACK, this makes Bitcoin centralized. Edit: Nevermind, misread.
2910	22877260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22877260	sipa	Isnt there a rule already that prevents storing blocks before the last checkpoint? Luke: if the rule was "Do not send blocks in a forked chain more than 2016 blocks behind the main chain", would that also be centralized?
2910	22877843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22877843	luke-jr	Nevermind, I misread this. Thought it was non-sending/storing pre-checkpoint blocks *even in* the main chain.
2910	22878172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22878172	ashleyholman	There is no prevention to stop the storing of blocks prior to last checkpoint. The closest thing is a check to see if the blocks proof-of-work could possibly be valid given the time elapsed since last checkpoint, which allows for a worst case 4x dropoff in difficulty for every 2 weeks since the checkpoint. does this introduce any centralisation thats not already there? See these lines that are already in the AcceptBlock() code: ```C++ // Check that the block chain matches the known block chain up to a checkpoint if (!Checkpoints::CheckBlock(nHeight, hash)) return state.DoS(100, error("AcceptBlock() : rejected by checkpoint lock-in at %d", nHeight)); ``` so any attempt to extend a fork prior to a checkpoint will hit up against that check anyway, and wont be able to continue.
2910	22879387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22879387	ashleyholman	I have done a test and confirmed that you can send a min difficulty block of height 1001 to a node who is on block 167000 and it will store it. For a fully synced node, it looks like you would need to generate a block of difficulty ~68000, and they would accept it at height 1001 also, but I havent generated a block that hard in order to test it. In a couple of weeks, it should only require 17000 difficulty to fingerprint an up-to-date node, so I could try to gen one on my GPU at that point and test.
2910	22879582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22879582	ashleyholman	PS. another way to test this is to set your clock forward a few years, and then your client will happily store a min difficult block prior to checkpoints (if the blocks timestamp is also in the future).
2910	22879755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22879755	sipa	Regarding storing blocks, that problem will disappear once we switch to headers-first syncing (where only blocks along the known best header chain are fetched anyway). I have no objection to not serving pre-checkpoint sidechain blocks, though. I prefer decreasing the reliance on checkpoints, but that would mean we need to come up with a criterion that will eventually limit how deep reorgs the network supports; so for now, I think using the last checkpoint is fine. Ill review the code later.
2910	22880300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22880300	jgarzik	+1
2910	22882230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22882230	ashleyholman	Something else that may be of relevance here: currently a node does not need to first request a block in order to store it. You can just connect to it and send a block message and it will process it and store it as if it asked for it. Likewise, in response to a getdata request, you can send a different block and it will process it and store it as per normal, providing it passes the checks.
2910	22892973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22892973	sipa	It is relevant, and right now, thats perhaps unwanted (though in case of a freshly-mined block, it is even distributed that way). But again headers-first sync will solve that, as any block received that is not part of the known best chain, is just dropped.
2910	23220699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220699	jgarzik	ACK
2910	23240834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240834	ashleyholman	patch now amended to use CBlockIndex::IsInMainChain()
2910	23241696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23241696	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2910	24474736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474736	ashleyholman	anything else you need from me on this one?
2910	24964031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964031	sipa	Id like to postpone this until after headers-first is merged, as: * The problem with storing blocks will be solved in a very natural way then already (by only fetching blocks we already know we want) * My current headers-first patch (#2964) removes GetLastCheckpoint, and Id like to keep it that way; we should reduce relying on checkpoints to the extent possible. However, theres no need to use the checkpoints in this case. In headers-first, the best chain is always known, and we can simply refuse to serve non-main-chain blocks as soon as the main chain has N blocks more than the fork (with N=144, a day, for example).
2906	22977179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22977179	wtogami	This is highly desirable.
2906	23220737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220737	jgarzik	ACK. Please collapse last commit into previous one.
2906	23225251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23225251	wtogami	ACK after the aforementioned squash.
2906	24138710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24138710	wtogami	What do we need for this to move forward?
2906	24552596	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24552596	gavinandresen	Either the help should make it clear that the banned list is cleared on restart, or the banned list should be saved at clean shutdown and read in at startup (either is OK with me, saving/restoring could be a future pull request).
2906	24556034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24556034	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2906	26237259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26237259	wtogami	Is this even working? I see it add IP addresses to listbannednode, but I now realize that the IP address remains connected.
2906	26689466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689466	gavinandresen	Needs rebase, test plan, and somebody to run through the test plan to make sure it works for somebody other than CodeShark.
2900	22710734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22710734	petertodd	The alert tests are protocol version specific; what would be best way to work around this? Id say just set PROTOCOL_VERSION for testing, but its a #define rather than a mutable variable.
2900	22712679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22712679	mikehearn	What DoS attacks? Why not post them to the security list so we can look at how to fix them (ignoring for now the fact that bitcoin is full of DoS attacks so this would not make much difference). Anyway, I think this pull request is a bad idea. I do not wish to have to support this in bitcoinj as it would complicate things significantly to have to search out nodes that properly support bloom filtering. Basically any feature in Bitcoin can be DoS attacked, thats not a good reason to just switch things off.
2900	22714363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22714363	petertodd	For instance this one posted to the email list: All of the devs, including you, are aware of a second and more serious non-public vulnerability. bitcoinj added a protocol version test to find bloom capable peers in revision 2c44a4fad7faccfe9b1392c67f60d21b25703bde; add a second test to check for the NODE_BLOOM bit. In the future DNS seeds can be updated to let you ask for peers with specific service bits set, but theres no rush as bloom filtering is left on by default for now.
2900	22718867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22718867	gmaxwell	I asked Peter to open this pull. Service bitting bloom makes sense to me it increases nodes control over the granularity of the services they are providing the public, should it be needed I have no clue why I didnt ask for this to begin with. The primary risk I see with this is that it will potentially result in increased levels lazy alternative node implementers not implementing the bloom server side functionality, but at the same time at least those nodes will be identifiable and avoidable (as opposed to them simply not implementing and making your connecting life hard). So I do not believe it would be useful to protocol-version-suicide-pact the bloom functionality. If were concerned that ignorant node operators may turn off bloom when they dont need to, we could remove the hidden switch, but Im not especially concerned about that as bloom saves a lot of bandwidth when not being abused. Separately, this is what litecoin has implemented since they had the benefit of later knowledge when they did their protocol update that added bloom support. So anything that supports litecoin would have the service bit testing in any case.
2900	22720055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22720055	petertodd	Keep in mind that if an alternative node implementation doesnt want to put in the relatively small amount of effort to implement bloom filters, what makes you think they are going to put in the much larger amount of effort required to really get Bitcoin semantics exactly right regarding convergence? Given that SPV nodes are relatively dependent on their peers - especially if users are accepting zero-conf transactions in any way - its reasonable to only want to connect to peers running the satoshi codebase rather than some other implementation.
2900	22723770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22723770	mikehearn	So the argument is that because you can ask a peer to use *less* bandwidth, that makes dos attacks *worse*? You cant fix a denial of service by denying service. Thats backwards, especially as I dont recall the last time I saw a DoS attacker who actually paid for his own bandwidth. The only way to fix it is to figure out who should be getting service and ensuring they get it first. So why dont you fix it by allowing nodes to prioritise inbound connections?
2900	22728664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22728664	petertodd	As you know the DoS attacks identified are not attacks on bandwidth, but rather other resources. Those attacks are significantly easier to pull off if the attacker can reduce the amount of data the targets send back to them; bloom filters do exactly that by reducing the INV messages the attacker receives, allowing one computer to attack a very large number of nodes with very little bandwidth consumption. It would be helpful if you responded on the email list with what types of prioritization you would consider most useful for SPV clients - attempted to start that discussion but I havent seen you reply. Disabling bloom filters is a form of prioritization in of itself of course, as SPV nodes do not contribute back to the network by relaying data. It is much better for them to have temporary issues connecting in an attack than for relaying in general to fail, something that could lead to a dangerous fork due to convergence failure. Regardless as pointed out aside from attacks, the protocol should allow for nodes to advertise whether or not they support bloom filters as a matter of good protocol design - it is after all a service. Its telling that when I mentioned that NODE_BLOOM didnt exist, was surprised.
2900	22740077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22740077	jgarzik	ACK NODE_BLOOM and ACK the entire patch, though myself, I probably wouldnt have added an option to disable bloom filters in the reference impl A minor BIP would be nice (like to document every protocol change in a BIP, even though this is terribly minor)
2900	22742635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22742635	petertodd	Good idea re: BIP.
2900	22746389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22746389	wtogami	Note: When you bump the protocol version it breaks the alert tests. Your options are then to either generate new signed test data every time the protocol version is bumped, or rather fix the alert tests so the protocol version does not matter. Litecoin chose the latter option as the alert notify codepath is still sufficiently tested without hard-coded protocol versions within signed test data. We feel it is better to minimize the risk of exposing the alert key, and as a matter of policy it seems ideal to allow protocol bumping without the centralized approval of the alert key signer.
2900	22746762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22746762	gavinandresen	Im curious to see what thinks of this patch. My concern is that if there IS a valid DoS attack on bloom-filter nodes (the "attack", as I understand it, is supposed to cause excessive disk seeking looking for transactions, yes? "meh" -- worst case is "node gets slow" if it isnt running with big disk cache buffers or from an SSD), then adding a NODE_BLOOM bit will just make it easier for attackers to find them and attack them.
2900	22749513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22749513	luke-jr	We only have 64 service bits. It would make sense to only use them when nodes benefit from not implementing features. On the other hand, having a separate service bit means notes can support bloom filters, but *not* NODE_NETWORK...
2900	22752833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22752833	petertodd	uint64 nServices; Weve got 64 of them - I dont think were about to run out...
2900	22753140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22753140	petertodd	"node gets slow" is a potentially serious problem. "making it easier for attackers to find them": Serving SPV nodes is far less important to the health of the network than ensuring relaying works and consensus is maintained. Next time Id suggest letting people finish exploring the issue before you assume revealing the exploit publicly wont do any harm.
2900	22759172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22759172	mikehearn	Can we cut it out with "revealing the exploit" stuff? Its trivial to find DoS attacks on bitcoind. I did it for fun last time this came up and it took about 45 minutes. I was going to post about it (its a memory bloat issue) and then got distracted with the RNG stuff. Why would we make bloom filtering optional? Theres no benefit to be had from that at this point. If somebody wants to reimplement the protocol for some reason, they can reimplement that too. No big deal. Clients that rely on it are not dramatically less important than other nodes. Theyre called "end users" and theyre extremely important! You can force nodes to do arbitrary amounts of disk seeking with or without Bloom filtering. Just ask for random blocks in the chain. Asking them to filter the blocks adds some CPU load, but that just multiplies resource exhaustion dimensions from 1 to 2. Recall that most average hard disks can only manage about 100 seeks per second. Connect 100 times, request one random block per second per connection and all the seeks are gone. Bandwidth usage is hardly a problem. Nodes dont remember what data elements they already served so you can just do that forever, but even if they did you could just reconnect every so often to make them forget. I think Ive explained how to implement a working anti-DoS strategy several times by now. If I didnt reply to John its only because this issue keeps coming up and I feel like Im repeating myself. First step - make nodes understand their own resource limits. This is useful anyway because an operator may not want bitcoind to eat all available machine resources, and currently it will just if it legitimately gets busy. Second step - implement handlers that run when the node is running out of resources, that perform load shedding. For example, throwing out low priority transactions in the mempool, disconnecting peers that score badly (idle for long periods of time, use lots more memory than would be expected, etc). Coming up with good scoring functions is a big part of the art of DoS defence. This is where youd score transactions before signature checking as well. Third step - once you force attackers to basically act just like regular network nodes, you can introduce an optional cookie mechanism so if there are suddenly thousands of clients that appear to be well behaved, clients that have a long history get priority over clients that appeared 5 minutes ago. This also helps in the case where Bitcoin "suffers" a sudden spike in popularity. Established users take priority over new users. Final step - optimise everything so the amount of load you can handle before falling over gets pushed higher and higher. The wrong strategy is the one being pursued here: 1) Find a feature that uses resources 2) Panic and disable it 3) GOTO 1 The last time this happened I described the strategy as a "death spiral" and I wasnt joking.
2900	22761634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22761634	petertodd	Mike, enough with the overheated rhetoric. Occasionally nodes will have reasons not to offer the bloom filter service, while still having block data. (NODE_NETWORK) Right now the protocol doesnt give any way to say that, adding the NODE_BLOOM service bit lets you do that. Of course, if you are going to have NODE_BLOOM, its useful to be able to disable the bloom service for testing SPV clients, hence the undocumented command line flag. The code implementing the feature also shows what should happen if a node doesnt support bloom filters: kick peers requiring that feature so they wont waste their bandwidth. Itd also be useful as a temporary emergency measure if a DoS attack is launched, but in the meantime we dont have any reason to expect users to use the flag. It is unfortunate that Gavins revealed a particularly effective one, but thats life. In any case, finding DoS attacks may be trivial for you, but our attackers dont seem to find them on their own and seem to only launch them after they have been revealed publicly prior to a patch. If you want to talk about priority schemes, move it to the email list and reply to thread rather than cluttering up this pull-req with off-topic discussion. Your ideas only work against some types of attacks in any case.
2900	22761718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22761718	petertodd	I suggested awhile back to make it easy to set the alert keys locally for testing - maybe thats the way to handle testing them? Youd still have to regenerate the test cases every time the protocol version was changed, but that could be turned into a simple script using a known privkey. Might be a better idea in general: because the key is whats non-standard, you can have test cases that use times that are standard without risking re-use of the test alerts on the network.
2900	22776227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22776227	SergioDemianLerner	I dont have access to the DoS report of issue its been discussed, but I can imagine. Any tool (or NODE_ bit) that gives the users the ability to mitigate an eventual DoS attack would be welcomed by the community. Bitcoin network protocol is not "fair", peers do not send the exact amount of useful information they receive. This is a true altruistic network, so I think people wont use these bits to discriminate peers.
2900	22776705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22776705	SergioDemianLerner	Regarding using the bit NODE_BLOOM maliciously to detect "vulnerable" nodes, I dont think this ease much an attack, since bloom enabled nodes can been detected by many different ways indirectly. (e.g. connecting to the victim with two peers, and testing if txs are filtered or not).
2900	22776898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22776898	petertodd	Another way of looking at it is Gavin is worried about NODE_BLOOM making it easier to detect "vulnerable" nodes, and his solution is to make all nodes vulnerable.
2900	22810433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810433	wtogami	ACK to NODE_BLOOM and this particular patch. We will however need a solution for the broken alert tests, preferably one that does not require the alert key signer to have de facto centralized control over any protocol version bumps.
2900	22810556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810556	gmaxwell	change your test to run with a throwaway key which is only used in testing mode if thats your concern.
2900	22810585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810585	wtogami	Does that mean you suggest that be added as a second commit to this PR?
2900	22810860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810860	gmaxwell	No, I dont care, updating the protocol version is infrequent enough that we can just fix the test after doing so. "Defacto centeral control" is not a concern there, if you are having trouble getting the test updated you just make the change I suggested, remove the test, or remove the alert key entirely.
2900	23229946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23229946	sipa	I dont really follow your reasoning; assuming an attack exists (ignoring whether it does or not for now), then forcing everyone to be vulnerable is certainly worse than making it optional and advertizing it (perhaps combining it with stronger anti-DoS measures, knowing that it may reduce availability of other offered services). I do agree with that a decent resource-limitating implementation is necessary as a generic solution against DoS attacks. I do believe thats orthogonal to the approach taken by this change, though. The services offered by P2P nodes to the network (for free!) are quite distinct, and have different use cases, different clients, and different attack models: * (unfiltered) old blocks are only necessary for full nodes that are synchronizing. The only thing that matters is bandwidth really (latency is only important in so far that extreme degradation would increase sybil-vulnerability). * (unfiltered) recent blocks are only necessary for full nodes keeping up with the chain, and mostly need low latency to keep the convergence speed of the network fast. Bandwidth is only important when it starts influencing latency. * (filtered) blocks are only necessary for SPV nodes, and the same old/new distinction exists (old blocks need bandwidth, new blocks need latency). * lone transactions are only necessary for distribution to miners and (to the extent possible) aim of the network to prevent 0-conf double spending. Until the payment protocol takes off, it also matters for distribution to receivers, but this isnt necessary IMHO. I believe all this is mostly best-effort in any case, and secondary to the other services offered. In my opinion, these are sufficiently independent from each other that they should be easily isolatable. Were relying on charity of those running full nodes to provide these services, and which of these they consider important for the survival of the network may differ. Additionally, not all of these are necessarily present to the same extent in the network - there may be more demand for some than for others. This all speaks in favor of having separate services bits for them. Maybe at some point more specialized and separately-maintained software for each exists, though thats probably not for soon. On the other hand, requiring full node implementations to support SPV functionality probably benefits the popularity of Bitcoin as a payment system, and may improve its usefulness to the economy. "Surviving" up to the point where were worried about certain attacks may be more important than dealing with those attacks in the first place. Still, ultimately this is about whether alternate full node implementations are allowed to not implement SPV services, and they may have reasons not to (perhaps because they offer a competing lightweight client model). If the choice is between them not implementing Bloom filtering (and ignore requests, or disconnect in case of such requests), and them being able to advertize not supporting it in the first place, I certainly choose the latter. I lean towards ACK, but this discussion probably belongs elsewhere (its not entirely specific to the reference client), and certainly warrants a BIP. The implementation looks good in any case.
2900	23274616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23274616	petertodd	A good example where the very different requirements of the different types of nodes matters is for anyone with a lot of bandwidth available to them, but not a lot of disk io or memory, a common scenario for servers in datacenters. The most efficient way to push blocks over the wire for such a server would be to use sendfile() to do a direct copy from the blockchain data on disk to the network interface - behind the scenes Linux will use direct zero-copy DMA transfers of the data from the disk interface to the network interface, or system memory to the network interface, using almost no CPU in the process. On the other hand that means the blocks have to be sent unfiltered, which is fine if my peer needs the whole block. This arrangement uses the resources I have available most efficiently for the sake of the network. But if I start accepting SPV clients I cant use sendfile() anymore, and even worse is that because Im serving those SPV clients filtered blocks Im using up far more disk IO than network bandwidth, when what I have available to me is the opposite. Interestingly the opposite case is common too: lots of home users running nodes have plenty of disk IO available, especially if they have SSDs, but very poor upload capacity. It would probably make sense for full nodes to prefer to connect to nodes without NODE_BLOOM set, especially if they are syncing a lot of archival history, leaving capacity on the NODE_BLOOM capable nodes for SPV clients that need it.
2900	23276995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23276995	petertodd	Also, here is my draft BIP:
2900	26689385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689385	gavinandresen	Needs rebase and a test plan. But I still think this is a bad idea....
2900	26690423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690423	petertodd	rebased Current test plan and results has been as follows: 1) Bloom filters enabled, NODE_BLOOM set, protocol version bump (default settings) Peers connect normally, no observed changes: PASS Android Bitcoin Wallet connects successfully: PASS Android Bitcoin Wallet connects as only peer: PASS 2) Bloom filters disabled, NODE_BLOOM unset (-bloomfilters=0) Non-bloom-using nodes connect normally: PASS Bloom-using nodes kicked: PASS No bloom-using nodes seen in getpeerinfo (which would indicate they dont give up): PASS Android Bitcoin wallet w/ !NODE_BLOOM peer set as trusted peer and with DNS peer discovery enabled: PASS (fails to connect to the peer, but behaves normally otherwise) Android Bitcoin wallet w/ !NODE_BLOOM peer as only peer: PASS, although the wallet code never gives up, connecting multiple times a second. But thats a bug in the Android wallet that should be fixed. 3) DNS seeds implementation ignores NODE_BLOOM: PASS implementation ignores NODE_BLOOM: PASS Note that I only checked that the source code for both tests for NODE_NETWORK with an and, and thus will ignore other service bits being set. We can modify the dns seeds to filter requested service bits later if required; useful later for other things like the proposed NODE_ARCHIVAL_BLOCKCHAIN_DATA-type stuff.
2900	26690505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690505	petertodd	Note that the alert tests need to be fixed because the protocol version was incremented, as discussed above; if disabled manually all other tests run fine.
2900	26706681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26706681	wtogami	The current Android Wallet logic is to determine if a peer does bloom only from the protocol version. bitcoinj would need to learn how to to read service bits.
2900	26706931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26706931	petertodd	Sure, but thats not something that prevents merging this patch; its compatible with older SPV implementations. More to the point, those implementations arent going to change until this patch is merged.
2900	26707029	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26707029	wtogami	Sorry, I didnt mean that is a blocker for this patch, it was meant as a FYI.
2900	26716129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26716129	mikehearn	Um, old SPV implementations are not compatible with this patch - it is inherently impossible for them to be so. A node that opts out of a previously mandatory feature will still be expected to provide it by old software. If an old client connects to a new server that has the feature disabled, it will hang as it waits for a response to a message that the remote server has ignored. This patch is just all kinds of bad news. Please stop it. People who want to serve the chain but not do computational work on behalf of clients can just seed the chain torrent instead.
2900	26717023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26717023	petertodd	Read the patch prior to commenting about it; it automatically kicks older peers so they wont waste their bandwidth and my draft BIP says that behavior is a must. Also, the requirements of serving archival and bloomfilter-using nodes are very different and can productively be optimized differently:
2900	26717448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26717448	mikehearn	Yes, I read that comment. Thats why I suggested serving the chain torrent if you have lots of bandwidth and not much CPU. Or heck, just serve snapshots of the chain via HTTP. Then you have a piece of software and protocol actually designed for serving large files, instead of bitcoin+p2p protocol which simply isnt.
2900	26718181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26718181	petertodd	So you agree that its backwards compatible with older SPV implementations? Any other issues? I dont see why we want to depend on a clunky system of requiring separate manual torrent/HTTP downloads, especially given ideas like partial UTXO mode to transparently bring nodes from SPV security to full over time in the background.
2900	26719432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26719432	mikehearn	Your patch is "backwards compatible" as long as most nodes dont use it, which is not the meaning most people would associate with the term. Worse, you implemented this by DoS banning the IP address, which fails to take into account that many users (especially on mobile) sit behind giant NAT boxes. A single user who didnt upgrade could get their entire local cell tower or even city banned from every node with your patch activated, even for clients that are upgraded. You could make it backwards compatible by not having such nodes take part in the regular P2P network at all and provide a separate DNS seed for them, so old clients would never see them at all, but then if youre going to have a separate P2P network why not use a P2P system thats actually designed for file distribution, like BitTorrent? Ignoring for now that Bitcoin-Qt doesnt have any SPV support and nobody is working on any, fancy automatic migration of SPV nodes to full nodes doesnt make sense from a user experience perspective - the requirements are just so different, such arguments dont persuade me. As it is, the maintainer of the serving side says this patch is a bad idea, the maintainer of the client side says this is a bad idea, so what do you hope to achieve by keeping this issue open? It gets quite frustrating when the people who are actually maintaining the code bases that are affected by this patch both say "this is a bad idea" and you just plough on regardless.
2900	26721635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26721635	petertodd	Ah good, finally you looked at the code. Anyone have any comments re: the DoS behavior? I could potentially change it to simply close the associated connection. Service bits are meant to advertise services, and performing computations on behalf of clients who dont serve other clients sounds very much like a service to me. That said Id be very surprised to see many nodes operators disabling bloom filters as the command-line switch to do so is undocumented, so weve got plenty of time to upgrade DNS seeds to let nodes pick service bits they want, or just require NODE_BLOOM to be set if protocol version >=70002. (DNS seeds are just for bootstrapping after all and nodes should use them infrequently; no sense putting too much effort into them vs. decentralized peer discovery) Im sure more people would run Bitcoin-QT full-nodes if it was useful immediately, albeit with reduced SPV security. We could certainly use more full nodes. You like to say how businesses will "obviously" run full nodes - maybe we can make it easier for them by getting their nodes up and running as fast as possible. An attractive alternative is to just use a central service immediately rather than waiting after all. Note the positive comments and ACKS from gmaxwell, sipa, jgarzik, and wtogami - the reference client is maintained by a group of people, not just one guy who calls the shots.
2900	26721860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26721860	TheBlueMatt	I think it may make more sense to start advertising NODE_BLOOM before we add a (even undocumented) option to disable it. That could ease the transition significantly
2900	26723942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26723942	petertodd	If the sticking point for people is the fact that there is that option, Ill remove it.
2900	26744037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26744037	wtogami	> our patch is "backwards compatible" as long as most nodes dont use it NODE_BLOOM enabled-by-default with 0.9 combined with always-enabled with 0.8.x means most nodes will use it. > I think it may make more sense to start advertising NODE_BLOOM before we add a (even undocumented) option to disable it. That could ease the transition significantly Please. No. Removing the option would mean other clients can entirely opt out of paying attention to the service bit, thereby rendering it pointless. The option being widely deployed at least makes it very easy to tell the world how to defend against a particular type of problem if it were to happen, which may be enough to discourage that problem from happening as they would know the network can bounce back very quickly without any software update. In retrospect, the 24 hour ban was too heavy handed. Mike is right about it being too easy to ban an entire IP.
2900	26762842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26762842	gavinandresen	The "sticking point" for me is practical: every service bit adds complication-- another possible configuration that should be tested, but probably wont be (which makes attacks more likely). I have seen zero evidence that requiring that every NODE_NETWORK node support bloom filters causes anything more than temporary denial-of-service problems for under-powered full nodes, and I see large benefits to requiring that all full nodes support SPV clients.
2900	26771832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26771832	TheBlueMatt	On Mon, 2013-10-21 at 11:39 -0700, Warren Togami wrote: > I think it may make more sense to start advertising NODE_BLOOM > before we add a (even undocumented) option to disable it. That > could ease the transition significantly > > > Please. No. Removing the option would mean other clients can entirely > opt out of paying attention to the service bit, thereby rendering it > pointless. The option being widely deployed at least makes it very > easy to tell the world how to defend against a particular type of > problem if it were to happen, which may be enough to discourage that > problem from happening as they would know the network can bounce back > very quickly without any software update. > Umm...what? people will refuse to implement a new standard because its not actively used but will break their apps in the future if they dont? Somehow I dont see why this would be true.
2900	27140402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140402	petertodd	Updated to use CloseSocketDisconnect() rather than a 24-hour DoS-ban. Tested with my Android wallet, which happily successfully connects then is disconnected about five times a second forever... Off-topic here, but Id suggest some kind of back-off algorithm, or at least waiting a second or two. It even does that on a cellular data connection, which could get rather expensive.
2900	27140472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140472	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2900	27141167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27141167	schildbach	Yes, thats a well known regression in bitcoinj:
2861	21591431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21591431	sipa	Note: untested for now.
2861	21601833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21601833	kyledrake	**THANK YOU SO MUCH!** you are my hero (and probably a bunch of other peoples too)! I will pull this and test it tomorrow, and try to do a more extensive test this weekend. Ill report back if I find any issues. Again, you are awesome, and I think this is hugely important for bitcoin. Thank you, thank you, thank you.
2861	21601944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21601944	kyledrake	is there any chance this could make it into master for the next release? Im not sure if its out of scope for the next release or not, just curious on timing so I can plan accordingly. I would love to see in the next release of course, but I dont want to derail all the other important stuff you guys are working on.
2861	21608666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21608666	CodeShark	Thanks for giving this pull request some love, sipa! I think having both spendable and watch-only accounts in the same wallet is problematic. For instance, how do we deal with getbalance, account labels, etc...? I had delayed attempting this merge until multiwallet capability had been merged, where we could simply have a wallet be entirely watch-only or entirely spendable. Im glad some people are finding it useful as it is, though.
2861	21611891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21611891	sipa	The approach that this pullreq takes is that for almost everything, watch-only is considered equal to normal keys. Youll see it in getbalance, in listtransactions, in listunspent, ... However, these are not considered when creating a transaction. Presumably well need a getspendablebalance too, and some GUI special-casing (perhaps only shown when watch-only addresses are present at all).
2861	21708762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21708762	deweydb	Thanks and others who have contributed to this! I am so insanely happy to see this functionality get added.
2861	21791384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21791384	runeksvendsen	I have tested this patch by importing an address with`importaddress`, and `getbalance`, `listtransactions`, `getreceivedbyaddress`, `listreceivedbyaddress` work as expected (and they agree with blockchain.info). `sendtoaddress` from a wallet that contains only a single watch-only address fails gracefully with: error: {"code":-4,"message":"Signing transaction failed"}
2861	21793339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21793339	sipa	One interesting thing to test would be having a mixed wallet, and checking that you can spend the amount in normal keys, but not more.
2861	21794114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21794114	jgarzik	Summarizing IRC review comments: * AvailableCoins() needs an additional arg. It now takes two optional bool args. * Would be nice if listunspent indicated watch-only or not * Agree that testing a mixed wallet would be useful ACK once issues are fixed
2861	21802217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21802217	runeksvendsen	I just tested sending transactions on testnet. Sending amounts higher than the balance available for spending (from non-watch-only addresses) results in a "Signing transaction failed" error. `mq7se9wy2egettFxPbmn99cK8v5AFq55Lx` is the watch-only address and `mv7VTUiBNmNSNrWaXrySbZcEzQ9C6ZNTNu` I have the private key for: rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind listunspent [ { "txid" : "98278b9eb6cde5d3124ffc6c0ff75fa1d813b41383c35414315ce47f85fc45cc", "vout" : 1, "address" : "mv7VTUiBNmNSNrWaXrySbZcEzQ9C6ZNTNu", "scriptPubKey" : "76a914a019eab435cd509dce95353febe6b48e7b15075388ac", "amount" : 0.39800000, "confirmations" : 5 }, { "txid" : "bd9a149d58d9d2eff00e9bb1c0f463a2ce213f99affa8261bdbe8e85d60f5158", "vout" : 1, "address" : "mq7se9wy2egettFxPbmn99cK8v5AFq55Lx", "account" : "", "scriptPubKey" : "76a9146953ce65058e5e68125a9163d74b277d6a7f4a9e88ac", "amount" : 23.49990000, "confirmations" : 101 } ] rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind sendtoaddress mq7se9wy2egettFxPbmn99cK8v5AFq55Lx 0.4 error: {"code":-4,"message":"Signing transaction failed"} rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind sendtoaddress mq7se9wy2egettFxPbmn99cK8v5AFq55Lx 0.398 error: {"code":-4,"message":"Signing transaction failed"} rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind sendtoaddress mq7se9wy2egettFxPbmn99cK8v5AFq55Lx 0.397 14ce96d4809b18a7a7bc7f6501801572d3e673f6eb2ea645ad731a056e953221 rune@rune-desktop:~/Programming/bitcoin-sipa/src$ ./bitcoind getbalance 33.69660000
2861	21824880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21824880	sipa	Significant changes, re-testing would be welcome :) Instead of fRequireSpendable, the IsMine family of functions now return MINE_NO, MINE_WATCH_ONLY or MINE_SPENDABLE (instead of a boolean). `listunspend` should show whether a coin is spendable.
2861	21832372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21832372	jgarzik	Overall ACK of updated code. Did not test, just code review. Minor taste-based nits: * RPC: true seems a better return value than null * perhaps due to my b/g I prefer the "_t" suffix to the more verbose "type". POSIX standard naming for such situations.
2861	21930967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21930967	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2861	21935228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21935228	sipa	Some changes: * Fixed a bug that caused rescans to sometimes be skipped. * Adapt the output of validateaddress for watch-only addresses.
2861	21937206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21937206	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2861	22244904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22244904	runeksvendsen	I just tested the new changes and now re-scanning works both on testnet and mainnet for me. I can send and receive on testnet, and I get a error: {"code":-4,"message":"Insufficient funds"} error message when I try to send more than I have in spendable funds (according to `listunspent`) but less than I have in unspendable funds. On mainnet, the `listransactions` output agrees with blockchain.info for the tested address.
2861	22257253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22257253	sipa	Youve voiced some objections to this on IRC, and prefer watch-only wallets over individual watch-only addresses IIRC, care to mention them here? I dont feel like working on this further if it is controversial, but I think its extremely useful and pretty much necessary to enable managing P2SH addresses without having all keys available. To get that same functionality with watch-only wallets, this becomes dependent on multiwallet, which doesnt seem to be making any progress.
2861	22257476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22257476	jgarzik	IMO there is a strong user-based case for merging. There is clear user interest. People are building websites based on this branch, among other things.
2861	22258333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22258333	runeksvendsen	Id like to add that it increases decentralization, thus increasing the resilience of the Bitcoin ecosystem. Instead of having to rely on blockchain.info to get information about addresses not owned by myself, I can monitor these addresses using my own node. The same goes for other Bitcoin services. I suspect a lot of people depend on the blockchain.info JSON API simply because they have no other option right now. I know at least one service whose developer I spoke with using the blockchain.info API because theyre the only ones offering a way to pull data about addresses for which one doesnt own the private key. Every time blockchain.info has problems, or gets DDOSed, my service is unable to continue because I have no way of retrieving this information in a decentralized manner. It becomes a single point of failure for many of the smaller Bitcoin-related services. I agree that separate, watch-only wallets would be preferable, but at the same time I dont see why it has to be an either-or issue.
2861	22259075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22259075	jgarzik	It might be useful to have getinfo or another RPC return a boolean indication of watch-only addresses in the wallet.
2861	22260388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22260388	keo	Wed love to have this feature. It is nonsense that we have to rely on blockexplorer.com and blockchain.info while having the entire blockchain stored on our own node. Currently bitcoind doesnt have a friendly API for merchants and payment services providers. It is crucial to be able to handle tens of thousands of addresses for which we dont want to share the private keys with a certain copy of bitcoind. It would be really cool to have this merged ASAP without creating dependencies on other not yet developed features. To show how people overcomplicate this: The best would be to simply have an RPC call which queries the database for a certain address, as a one-off query. No need to add it to any wallets, manage it, etc. Just query the database for it. Make getreceivedbyaddress work with _any_ address. Thats all we need. I really appreciate the work put into this branch, in fact we live off it for quite some time now. Would love to see this merged. Thanks for listening!
2861	22261093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22261093	jgarzik	It also seems opportune, with mentions of blockexplorer/blockchain, to plug my related pull request, "Add unauthenticated HTTP REST interface" (req #2844 )
2861	22284428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22284428	kyledrake	is the importaddress code expected to update the account balance when a transaction goes out? I just dropped a generated raw transaction onto blockchain.infos tx send with one of the unspent transactions, and it removed the unspent from `listunspent`, but it didnt change the balance for the account that the address is associated with. I didnt send it through my bitcoind instance, so that may be why thats happening, I need to do another test and send through my local bitcoind. Just wanted to mention incase it was a bug: ``` ~ $ bitcoind listunspent [ { "txid" : "d266240586fc70f4e3927f3b0a70351179a5f2dbd189aecd31907f8596f0ffc3", "vout" : 1, "address" : "134GKGyWFftj2m4ZFKsBuCbm3GgXfDmuxX", "account" : "RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=", "scriptPubKey" : "76a914168e48aa5551a3ce7339dd55048b976edea3687288ac", "amount" : 0.06000000, "confirmations" : 2668, "spendable" : false } ] ~ $ bitcoind getbalance 0.06000000 ~ $ bitcoind getbalance RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I= 0.12000000 ~ $ bitcoind listaccounts { "" : -0.06000000, "RErMnwLZqmdGXIiWeJ83frHs+FG/CVCQhPXZ14USk9I=" : 0.12000000 } ``` And the transaction that was sent:
2861	22285171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22285171	sipa	Accounts are not addresses, and do not have _anything_ to do with the coins available to an address. The abstraction provided by the reference client has at no point any concept of a "balance of an address", only "balance of a wallet". Addresses are associated with accounts, and coins received by those address will credit the account. For debits, you need to explicitly use "sendfrom". Accounts are just virtual counters, and they can even go negative. I dont see a useful way to combine them with watch-only addresses. I think in general that their use is very limited, and in most cases what people really want is multiple individual wallets.
2861	22285332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22285332	gavinandresen	Ill be happy with watch-only addresses in the wallet if their meaning is clear and that meaning doesnt break peoples existing code. If I understand, as implemented their meaning is "Exactly like any other address in your wallet (shown as part of total balance, shown in listtransactions, ??shown in listunspent??), except you cannot spend them without constructing a raw transaction yourself". That breaks two assumptions people may have: 1) getbalace shows the total number of bitcoins available to spend. I think that is an important assumption not to break. 2) If all your receive transactions are confirmed, sum(listtransactions) == getbalance * == sum(listunspent) . -- -- Gavin Andresen
2861	22286490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22286490	sipa	They are included in listtransactions, listreceivedbyaddress, and balances. They are also included in listunspent, but marked as watch-only there. Adding a flag to balance, or a separate RPC to query only spendable / watch-only addresses is probably useful.
2861	22293831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22293831	gavinandresen	More thoughts: I agree that there is consensus that SOME solution is needed. Ill (grudgingly) go along with a watch-only address breaking the "getbalance == coins you can spend" assumption, as long as that is well documented. RE: flag to balance or separate RPC: "meh" -- if people want to keep track of watch-only balances separately, they should give them all a "watchonly" label. In fact, Id vote that the default label for importaddress be "watchonly" (or "imported" -- dont care about the name) instead of "". RE: documentation: How about: importaddress help says something like: Adds an address that can be watched as if it were in your wallet, but cannot be used to spend. Transactions to or from watch-only addresses will appear in listtransactions and listunspent and will be counted in getbalance, but are not spendable without the private key. Watch-only addresses may be made spendable by importing the corresponding private key using importprivkey.
2861	22294149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22294149	gavinandresen	One more random thought: Will the typical use case be a merchant importing a bunch of addresses? If yes, maybe this should be: importaddresses [address1,address2,...] &lt;label&gt; &lt;rescan&gt;
2861	22297093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22297093	jgarzik	"six of one, half-dozen of the other" -- JSON-RPC 2.0 batches work just as well, for multiple importaddress.
2861	22297719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22297719	luke-jr	Do they? (considering imports rescan the blockchain..) Reminder that the original author of this pull request has abandoned it in favour of watch-only wallets. IMO, it makes a lot more sense to approach this after HD wallets are merged, as then theres a clear use-case that doesnt violate the no-address-reuse principle.
2861	22311416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22311416	runeksvendsen	`importaddress` doesnt do a rescan if you pass "false" as the third (rescan) parameter. So the approach for batch imports of watch-only addresses would be to add all your addresses except the last one with rescan=false, and add the last one with rescan=true. Thinking about my use cases, I dont think I would have any use case for a mixed watch-only/regular wallet. Ie. I wouldnt have a need for a wallet containing private keys that can spend money, *and* a wallet containing watch-only addresses. To me, the whole point of watch-only addresses is not letting bitcoind manage private keys for added security. Either for use with a web service (which can be a blockchain.info-style site, or a web wallet), or a local Armory-style wallet, where an external program handles the wallet, and only uses bitcoind to maintain the blockchain and query it about relevant transactions. As Armory functions now, it uses bitcoind to maintain the blockchain, but not to query information from it. Armory scans the entire blockchain (loads the raw "blkxxxxx.dat" files) on startup, and to deduce the balance for the wallets maintained by Armory. If these watch-only extensions were to become available, Armory could add the relevant addresses using the `importaddress` function, and let bitcoind gather information on these addresses. To me this would be the first step in separating the wallet functionality from bitcoind. I agree that mixing these two address types can be confusing - even though it has to be done manually - so I would much rather have the ability to have either a watch-only wallet or a wallet with private keys than nothing at all, although Im not sure how much work that would be to implement. Another solution would be to add watch-only versions of the relevant affected RPC calls. Ie. using `wogetbalance` to get the balance of watch-only addresses, `wolistunspent` to list unspent transactions for watch-only addresses etc. Another option would be to include an optional [includewatchonly=false] parameter to the relevant RPC calls, as another solution to make sure we dont break existing installations. I agree with Gavin that this is an important concern.
2861	22344871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22344871	kyledrake	FYI I have worked around the `getbalance` issue by calling `listunspent` for the addresses I am watching and looping to calculate the balance. The wiki page on raw transactions doesnt yet document this, but theres an optional array of addresses you can add to the end: ``` listunspent [minconf=1] [maxconf=9999999] ["address",...] ``` I believe this solves the balance calculation for me!
2861	22348369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22348369	kyledrake	Another issue Im running into is that `listtransactions ACCOUNT` doesnt show sent transactions anymore when I send via `sendrawtransaction`. I can use `listtransactions` to see them, but I cant filter it on bitcoind itself using an array of addresses, so I would have scaling issues after a certain point if I used it for a site running a lot of transactions. Ideally it would be nice to see a list of transactions filtered by an array of addresses, similar to how listunspent can be used. Im not saying this is a problem for this commit (and you mentioned this issue above), Im just adding this info incase anyone was interested. I will work around this by scanning the transactions manually for now, and try to come up with a longer term solution later on. Update: Actually I wont be able to do a listransactions dump either, because there isnt really a way to see the source of the sends in the output except via the transaction id. Ill probably have to keep track of transactions/txids on my end.
2861	22368905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22368905	sipa	The _only_ way to have a transaction debit an account, is by using sendfrom. Im not sure how youd expect sendrawtransaction to interact with this. Accounts are not about address balances, and any application that tries to do so will likely have a hard time working around the abstraction that the wallet provides: * A wallet is a bunch of transactions and keys * A wallet has a number of addresses, which are entry points into the wallet. * Afterwards, the wallet is a black box that manages your coins. * When sending coins, they are sent from your wallet - there is no concept of a "from" address.
2861	22990583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22990583	ephraimb	Just wanted to chime in to say Id love watch-only functionality. IMO, its the best way to go for server security, and Id love to be able to do this without using a 3rd party service like blockchain.info. For me, it doesnt matter whether its a separate watch-only wallet or integrated into the regular wallet, although Id agree with runeksvendsen that I cant think of any cases Id want to use them together. It would also probably keep things simpler to have them separate, but Im not at all against the idea of combining them, either.
2861	24471648	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24471648	ntom	Im also coming in with a +1 on this. Echoing earlier comments, for merchants this feature is an absolute must. Having the ability to listunspent for a watch only address is IMO, essential for merchants and developers of BTC applications. Currently the only way to get unspent is with blockchain.info /unspent api ~ having this feature locally would obviously be a massive improvement.
2861	24632095	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24632095	kyledrake	I have been using this in testing for Coinpunk and havent run into any problems yet. Would love to see it get merged to master!
2861	24636856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24636856	petertodd	You know, the P2SH support just added could work well with Coinpunk: store funds in a 2-of-2 multisig P2SH addresses (including change) and have both the server and the users client-side wallet sign transactions. Because both parties need to be involved youd be able to implement useful features like daily spending limits, 2-factor-authentication to keep coins safe even if the users computer is completely compromised, and safe instant transfers between users, while still preventing coins from being stolen if the server itself is hacked.
2861	24806243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24806243	SzymonPobiega	Whats the safest (least amount of changes compared to a stable version) version containing this patch? Are there any binaries available? I tried getting them from jenkins from last auto sanity check but it returns 404.
2861	25215075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25215075	ntom	very quiet here.. How far is this from going into the 0.9 release ?
2861	25579094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25579094	kyledrake	Would also like to see this merged in for an upcoming release! Let me know if I can help. I have been using this functionality extensively with Coinpunk. I have refactored the service so that it now depends on nothing but the watch only address functionality, and have figured out how to deal with the transaction management without using the bitcoind wallet. It would be great to not require users to compile an older custom version of bitcoind to use Coinpunk. I have been testing the watch address functionality extensively over the last month and have not run into a single issue with it.
2861	25972349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25972349	laanwj	Ill try merging this into master and doing some testing. Edit: though on second thought Id prefer a solution in which an entire wallet is made watch-only, instead of adding watch-only keys to an existing wallet and creating two classes of IsMine. This feels error prone somehow.
2861	25980110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25980110	sipa	A recent suggestion by gmaxwell is to make coins received through watch-only function as if they were automatically (and irreverisbly) marked locked. Not much would change in practice, though.
2861	26014195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26014195	kyledrake	Im not sure what the benefits are of using this over the current implementation (which appears to work very well under testing), but Ill defer to the experts. How long do you think it will take to make that change? Is it a candidate for making it into 0.9? Not trying to pushy, just need to provide information to people using Coinpunk. Thanks for the feedback!
2861	26016778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26016778	sipa	Its not about implementation - I expect that little would change. The reason to suggest it, is because the main controversy seems to be what the semantics of unspendable coins would be. If they behave identically to an already existing concept (lockunspent), the semantics are clear. And Im working on other things first.
2861	26661566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26661566	sipa	I do agree that having entire wallets be watch-only or not would certainly be an easier abstraction, but IMHO that means we need multiwallet as well.
2861	26661771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26661771	jegz	Just want to give my love to thanks for the feature! Hope it gets merged soon. +1
2861	26710932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26710932	laanwj	Yes, lets just go ahead with this. Even with watch-only wallets well need "importaddress" and unspendable outputs. ACK; tested and it works as expected
2861	26719836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26719836	jgarzik	+1 Thats the bottom line ACK, did a quick test and re-review
2861	26745272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26745272	kyledrake	Just to add to the testing reports: I havent found a single error using importaddress and listunspent using this code so far, and Ive used it quite a bit. Its been working great in testnet and production for me.
2861	26758690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26758690	sipa	It seems I never replied to your comment, but what may seem as overcomplication is rather the opposite. Being able to always query information about any addresss history, requires a rather large index to be maintained (multiple gigabytes). Using that for a simple wallet service means you become dependent on such an index, and your system will for example not be compatible with block chain pruning (not storing old parts of the block chain on disk). And most of all, it isnt needed for normal operation. Contrary to how many people see the system, internally it doesnt work with addresses at all - those are just part of an authentication layer on top of transactions (implemented through scripts). For anyone just needing information about some wallet, where potentially not all keys are known, this is a much more efficient and scalable solution.
2861	27273212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27273212	luke-jr	It doesnt really make sense for address-watching to add outputs to the wallet in the first place, since the outputs arent really related beyond the receive notification.
2861	27464246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27464246	wtogami	My testing indicates that Coin Control #2343 and Watch Only operate fine independently, but the combination has issues. Here is my branch of Bitcoin 0.8.5 where I initially tried to add watchonly to coin control by filtering out the watchonly outputs in AvailableCoins(). That succeeded in excluding the unspendable coins from the selection dialog, Coin Control appears to calculate the tx size and fee correctly, but then things go wrong after you Send. One transaction I attempted had 67 inputs and was just under 10KB qualifying for free with a sufficiently high priority. After send, the client ended up failing with the "Transaction too large" error, meaning the client thought the transaction was in excess of 100KB. Another attempt with a 2KB transaction failed with an insufficient fee as the client thought the actual size was much larger than what Coin Control believed it to be. The way Coin Control is currently structured it is uncertain if it can use watchonlys fSpendable as intended. I also wonder if it would be useful to anything for it to be tri-state like IsMIne() instead of a boolean.
2861	27477678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27477678	wtogami	I forgot to mention, Coin Control + Watch Only exhibits this strange erroneously large transaction behavior even if you have zero watchonly addresses.
2861	27671538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27671538	wtogami	Would Coinpunk be usable with a fully watch-only wallet? It would be a lot safer and less confusing to allow watch-only addresses only if a wallet does not mix with privkey addresses. I have to admit while testing this earlier that the user experience with the current watchonly implementation is very confusing when you have a mixed wallet. The "fake-encrypted" wallet approach would allow a watch-only wallet to happen safely and easily.
2861	27703385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27703385	kyledrake	Coinpunk would be usable with a watch-only wallet, correct. Im not sure if others would like to have the private key addresses for other purposes, but for me, private key addresses are not needed.
2861	27874594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27874594	wtogami	Given the current conflict Watch Only will not improve until Coin Control #2343 is first merged. CC is pretty much done except people need to step through the Test Plan in that ticket. Could you please direct people to participate in that?
2861	27964917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27964917	sipa	I fully agree that having a mixed wallet, with both spendable keys and other unspendable addresses, leads to a more complex and potentially confusing interface. However: * As long as we dont have multiwallet, I believe that forcing an entire wallet to be spendable or not makes this less useful. This is arguable a problem on its own that needs fixing, but work around multiwallet support seems to have declined. * For effectively dealing with multisig transactions where you only have some of the required keys, you inevitably need some form of watch-only (in a wallet with actual keys) to use the raw transaction API, unless youre implementing an entire wallet from scratch * We effectively already have non-spendable coins in wallets, through `lockunspent`
2861	27966370	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27966370	laanwj	I agree. IMO the complication of the current solution would be less if it was more visible to the user through the interface; for example if getinfo and such were to return two balances: a spendable and a watch-only balance. Internally this could be implemented by making GetBalance take an IsMineType. This would also fit better into the overview page in the GUI.
2861	27967829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27967829	jgarzik	+1
2861	28142876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28142876	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2844	21370296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21370296	luke-jr	I dont see the need for a non-standard "bitcoin-format" header... Accept: application/x-bitcoin-block, application/json Accept-Encoding: hex
2844	21371668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21371668	petertodd	I agree, and make the default for Accept: \*/\* be to output json so curl usually works the way people expect.
2844	21374823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21374823	sipa	I think passing the requested format as an HTTP header is awkward and hard to use. Id say either a /rest/tx/<txid>/<format> or ?format=<format>. This also allows us to for example at some point build a minimal HTML interface that links to it, without breaking compatibility or changing the earlier interface.
2844	21376342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21376342	maaku	Yes, please dont invent a new HTTP header: this is exactly what the `Accept` is for. Allowing a `?format=` GET parameter alternative covers cases where specifying headers is inconvenient or impossible. Using Accept-Encoding for hex struck me as a little weird, but having read the spec again it appears to be correct. Im not sure why youd ever use hex though when sending raw binary data over HTTP is fine, and when that is not an option the less verbose base64 is commonplace.. If this were me writing the patch, Id support the following formats: **Raw/binary** Accept: application/octet-stream ?format=raw **Base64-encoded binary** Accept: application/octet-stream Accept-Encoding: base64 ?format=base64 **JSON** Accept: application/json ?format=json **XML** Accept: application/xml ?format=xml Note that with `Accept-Encoding` the server notifies the client that the requested encoding was honored by including a `Content-Encoding` in the response.
2844	21376404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21376404	maaku	Also, I would suggest using the base url `/api/v1/`, for hopefully obvious reasons.
2844	21386251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21386251	jgarzik	The Accept/Accept-Encoding feedback seems to be in line with HTTP spec, and widely requested. On the version number in API: its already there, in one sense. The API *major* version number will change very infrequently -- perhaps once a decade, if the bitcoind JSON-RPC compatibility is any guide. As such, it is trivial to direct API version 2 callers to /rest2/ Any change outside a major compatibility break may easily be handled within the /rest/ namespace. If people want to bikeshed and strongly prefer /rest1/ thats fine. Just pointing out how infrequent are major version number changes, and the fact that the current scheme already handles major version changes.
2844	21388441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21388441	jgarzik	Added: In the past, /api/v1 has been suggested for the *RPC* interface. At this point, "api" is too generic I think.
2844	21417535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21417535	jgarzik	makes a fair point about requiring a header being a bit more difficult. Software such as dumb browsers do not permit easy HTTP header modification. However, query strings are bloody ugly. github.com-style clean URLs seem like a smart way to go, e.g. ``` GET /rest/tx/TX-HASH/json ``` to get the non-default JSON output. Easy enough to add modifiers after the TX-HASH.
2844	21419762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21419762	jgarzik	Updated commits and pull req description to indicate use of "clean" URLs. Non-standard header "Bitcoin-Format" removed.
2844	21432492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21432492	maaku	> GET /rest/tx/TX-HASH/json Is that actually how github does it? `TX-HASH.json` might be a better choice, I think. Dumb clients which ignore the headers will assume its json from the extension.
2844	22262030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22262030	keo	thank you! This is the beginning of a usable, clean API which appeals to merchants and PSPs. agree on providing .json instead of /json - seems to be the way everyone does it (without saying anything about whether this is good or bad).
2844	22262583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22262583	runeksvendsen	Excuse me if this is out of place, but why implement this in bitcoind? Writing an external program that wraps bitcoind RPC calls and allows HTTP querying makes much more sense to me. As far as I can see this adds no new information retrievable from bitcoind, it only changes the protocol/format. A simple Python script should be able to do this, no?
2844	22446819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22446819	runeksvendsen	Just for fun, I created a simple Python script that does this: It only supports JSON right now, but should easily extensible.
2844	22447903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22447903	gavinandresen	+1 for : Id rather ship a version of his btchttp.py in contrib/ than make core bitcoind bigger.
2844	22449659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22449659	rebroad	The risk in moving this to contrib is that the majority of peers wouldnt use it, and then when ISPs start blocking the original bitcoin protocol the network is more likely to die. What we really need is HTTPS so that its harder to block. On Sunday, August 11, 2013, Gavin Andresen wrote: > +1 for <https://github.com/runeksvendsen> : Id rather > ship a version of his btchttp.py in contrib/ than make core bitcoind bigger. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2844#issuecomment-22447903> > . >
2844	22454377	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22454377	sipa	This is not an interface intended to be exposed to the internet. You can do so of course, but its not a replacement for the P2P system (its more an addition to RPC). Its just an interface to ease debugging, or help other local applications that need access to raw block/transaction data. Regarding whether this belongs in bitcoind, Im in the middle. I understand the concern about not bloating bitcoind even further, but if such a feature means more people running a local bitcoind instead of relying on some centralized webservice, Im all for it. The same goes for an address index, and a potential minimal built-in block explorer. However, Im not sure what this adds that isnt available already. Humans will not use this interface, IMHO, and external applications can already use getblock/getrawtransaction.
2844	22459961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22459961	jgarzik	I fear several commenters here read the pull request title, and did not examine what the code actually *does*. Some salient points: * Dramatically easier interface for developers and general queries * Out of the box SSL support, already built into bitcoind * This pull adds functionality not available via RPC (there is no getrawblock) -- thus the btchttp.py example does not provide what this pull request provides. * Wider selection of command line tools work out of the box with HTTP REST, versus JSON-RPC * Nobody will write their own proxy to accomplish this * A contributed proxy, shipped with bitcoind, might be used -- but it is obviously a fragile, two-process unsupported solution
2844	22460346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22460346	sipa	Its clearly a compromise between usability and bloat, which may or may not be worth it (see my other comment regarding that), however, there IS a getrawblock, its called getblock [hash] false.
2844	23218677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23218677	jgarzik	Rebased. The first commit is a cleanup candidate for immediate inclusion, too.
2844	23220357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220357	jgarzik	Updated for s suggestion of HASH.EXTENSION, where the extension (.json, .txt, .dat) selects the format. Updated OP examples.
2844	23230413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230413	sipa	ACK
2844	23241002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23241002	jgarzik	Rebased for CreateNewBlock() update.
2844	23241581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23241581	jgarzik	JFYI: Since it was easy, I implemented the following on a side branch: ``` GET /rest/block/template.(dat|txt) ``` to download the binary (/hex) encoding of a miner block template. No fee or sigop information is provided, just straight CBlock and nothing else. It seems nice and efficient for a pool server to simply request the binary block from a trusted node, and vary bits of the header and coinbase from there. As noted at top, this is on a side branch, and will not be added to this pull req.
2844	23310170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310170	jgarzik	Merge-ready
2844	25549364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25549364	jgarzik	Rebased. Merge-ready. Note: I also have a HTTP REST interface for "getblocktemplate" on a local side branch.
2844	26310428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26310428	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2844	26310500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26310500	gavinandresen	Pull-tester error: rest.h is mentioned in the Makefile.am, but there aint no rest.h committed. Also, when testing: Is it supposed to be ...TXHASH.json or TXHSAH/json ? The former complains "invalid hash", the latter works.
2844	26315587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26315587	laanwj	I like the interface. Regarding bloat/redundancy, is this going to deprecate the JSON API calls for doing non-authenticated, non-wallet queries eventually?
2844	26697462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26697462	laanwj	It also makes sense to have a different interface for block chain data if we want to split the wallet off into another executable eventually. The "block chain daemon" part wouldnt need a JSON RPC interface at all.
2841	21348723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21348723	jgarzik	1) Feature request seems sane. 30 second glance did not turn up any bugaboos. 2) Mild conflict with #2776 but easily resolved. 3) Waiting to see if pulltesters likes these new commits. A bit worried that the first commit breaks git bisect?
2841	22747391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22747391	gmaxwell	needs rebase
2841	24572269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24572269	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2841	25493614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25493614	wtogami	needs rebase again
2841	26689264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689264	gavinandresen	I aint never seen a double-negative I didnt disapprove of. Option should be -autofillkeypool, default should be 1, set it to 0 to turn it off. And needs rebase and a test plan.
2841	26783720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26783720	laanwj	I like this feature, as Id like to have more control over when and whether it refills the key pool, so that I know exactly when there are new keys in the wallet and I need to make a new backup. It just feels safer.
2841	26784884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26784884	sipa	Maybe I/someone should just implement very basic BIP32 key generation instead :)
2841	26789927	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26789927	laanwj	Thatd be a good option too. But as long as we have a keypool option (and I dont think its wise to completely do away with the keypool as soon as introducing deterministic wallet support) having more explicit control over it would be useful. And this code is already written...
2841	27010572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27010572	luke-jr	I wonder if it should be -generatekeys=0/1 instead, so it covers any future cases where keys might be created.
2841	27014361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27014361	laanwj	Ive rebased it: yes, it should block all the cases in which keys are added to the wallet automatically. But in the (future) case of HD wallets it could "generate" new keys from the seed even with this option on.
2839	21302121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21302121	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2839	21302247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21302247	gmaxwell	Could also be used for whitebox test instrumentation: E.g. have a table with the proper utxo state for every height, and use blacklisting to walk all the way back while checking it.
2839	21347973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21347973	jgarzik	ACK
2839	21793211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21793211	mikehearn	I was thinking itd be better to allow tx hash blacklisting. To blacklist a block youd blacklist its coinbase. TX blacklisting would allow app developers to more easily test double spend and reorg handling in regtest mode.
2839	21794032	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21794032	sipa	Makes sense, but thatd be more work, as there is no transaction index (and the optional one isnt used for validation). For blocks, there is already a mechanism for marking them invalid in the block index db.
2839	21873450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21873450	mikehearn	Bitcoin already re-validates the last N hundred blocks on startup, right? Do you imagine your patch ever being used to blacklist a block more than a few hundred blocks deep? If not, then it would still seem to be possible.
2839	21938028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21938028	sipa	Not sure how that is related. This is not something that happens at startup - it can mark a block invalid during execution, and it will reorganize away from it instantly. If anything, this is very useful to test edge cases in the block connection logic. For blacklisting transactions that are in the blockchain already, youd need a transaction index anyway, and if you do, its easy enough to look up the block your transaction is in, and blacklist that. For blacklisting mempool transactions (which is more useful, I think - its unlikely that you hate a transaction that much that you want to cause a hardfork over it), a different approach is needed, but itd very simple to do: just call mempool.erase from an RPC call.
2839	22095477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22095477	gavinandresen	Just to clarify: blacklistblock permanently blacklists a block; the only way to undo it is to -reindex the block chain. I think that should go in the blacklistblock help message; people might assume that the blacklist state is memory-only and can be reset by restarting. Otherwise: ACK.
2839	22233193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22233193	K1773R	ACK (even it isnt up to me), this could save us alot of time if we run in the same trouble again
2839	23380430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23380430	wtogami	It sounds like people are in favor of this but only want the help message to more explicitly explain what it does and the danger of misusing it?
2839	24918412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24918412	sipa	I wrote this pull request as preparation for headers-first sync, and the current headers-first sync pull request still includes it, but most of the code touched here (except the actual RPC implementations) is rewritten for headers-first anyway.
2839	24918661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24918661	mikehearn	Maybe it should be closed then.
2839	26237871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26237871	wtogami	Close?
2834	21210309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21210309	gmaxwell	Any ideas on how this could be usefully automatically tested?
2834	21229609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21229609	luke-jr	- Fetch a template with getblocktemplate() - Spawn a second thread which simulates a new block on the network after 5 seconds - Time a request to getblocktemplate with longpollid set to the value provided by previous reply - Ensure time is within 4-6 seconds. - Spawn a second thread which increments the "new transactions counter" after 5 seconds - Time a request to getblocktemplate with longpollid set to the value provided by previous reply - Ensure time is within 59-61 seconds. - Spawn a second thread which increments the "new transactions counter" after 65 seconds - Spawn a third thread which requests a new template (no longpollid) after 5 seconds, and ensure it returns immediately (to check longpoll doesnt block RPC completely) - Time a request to getblocktemplate with longpollid set to the value provided by previous reply - Ensure time is within 64-121 seconds.
2834	22233078	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22233078	K1773R	how about making changes so you can specify after which time X you get a new template?
2834	22234309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22234309	luke-jr	That might make sense for a future pull request.
2834	23220849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220849	jgarzik	Quick review seems OK... wants testing and additional review at a minimum
2834	26689128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689128	gavinandresen	Rebase needed.
2834	27043633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27043633	luke-jr	Rebased.
2834	27045376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27045376	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2784	19861397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19861397	sipa	Would this interact badly with BitcoinJ wallets? How frequently do they send pings? (or anyone with an alternate implementation)
2784	19874318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19874318	mikehearn	bitcoinj sends pings every two seconds, its much more aggressive than this patch. We could certainly reduce it. Ping times are used to pick which peer to download from.
2784	19879931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19879931	jgarzik	The disconnect logic seems like it would negatively impact testnet.
2784	19882740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19882740	sipa	Inverted the logic, so it now becomes a ping if nothing has been received for a while, rather than sent. Tested that it indeed detects broken connections within one minute.
2784	20512785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20512785	mikehearn	Change looks good to me, although it will have the effect of disconnecting any nodes that dont respond to pings with pongs (or some other message). As pong messages were added in protocol version 60000 it would effectively EOL clients older than that and this may deserve an announcement somewhere. However bitcoinj clients will be fine with it.
2784	20573463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20573463	gmaxwell	So, this causes nodes to impose an upper bound on their peers response latency. Effectively, someone who will take a minute to respond cant participate in the network at all. This may adversely impact some anonymity protocols which cause high latency for many kinds of Bitcoin usage the latency isnt all that critical. Id suggest that such users should be using an alternative transport, except the bitcoin p2p protocol is already reasonably well designed for high latency usage (at least its highly asynchronous). Some of the other side effects of timeouts is that they can reduce link stability during a DOS attack, and they can preclude some kinds of node high availability schemes which might cause tens of seconds of unresponsiveness (e.g. during a state resync or hardware migration). Connection slot filling attacks are more effective if you can overload a peer temporarily and make them drop all their good connections. Some other protocols, like BGP, negotiate the heart-beating 30, 90 being a common set of parameters in that case to address the problem of potentially imposing too fast a response requirement. But since our network protocol is _mostly_ stateless (though it has become less so with bloom-filtering, and never was completely: e.g. inv caching) there is less of an issue as restarts arent so bad. Id instead prefer a longer timeout and _separately_ having peer rotation code that periodically slays the least recently active node from node out of the set which been heard from in >60 seconds. E.g. imposing the shorter timeout but only when we could potentially better use the slot. TCPs design targets a maximum segment lifetime of 2 minutes. Many operating systems have an SO_KEEPALIVE timeout of around 10 minutes. Somewhere in that range
2784	20603317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20603317	mikehearn	It would be easy to adjust the timeout for onion addresses, but really, Im not sure we want nodes in the network that cant respond within a minute. Slow nodes can have terrible effects on the user experience for SPV wallets. They will automatically drop to the bottom of the preference list in bitcoinj and not be used for much except observing broadcasts, for that reason. That said, just dropping the slowest peer when we run out of slots on the bitcoind side indeed sounds reasonable.
2784	23220987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220987	jgarzik	How about a 5-minute timeout, and get this merged? Maybe 1 minute is too short, but 90 is far too long.
2784	26230542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230542	sipa	Suggestion: send pings _every_ 2 minutes (even in case something was received recently, with the new ping-response-time-measurement that means we always get some useful latency information), and disconnect after receiving nothing for 5 minutes.
2784	26272177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26272177	gmaxwell	ACK unconditional 2 minute ping plus 5 minute disconnect.
2784	26295067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26295067	sipa	Rebased & updated.
2784	26296509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26296509	gavinandresen	ACK.
2784	26297069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26297069	sipa	There may be a bug in this code; will investigate later. EDIT: fixed.
2784	26304885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26304885	jgarzik	ACK Optional nit: "5 * 60" is more self-documenting than "300", and the previous code used the "M * 60" notation. All modern compilers will automatically convert the more human-readable M*60 at compile time, so there is no added runtime cost.
2784	26367710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26367710	sipa	Moved/added the ping/timeout constants to net.h (where they can be accessed by both net & main), and changed the timeout logic a bit: either there is an unanswered ping >5 minutes old, or there has been no message received at all for 5 minutes.
2784	26375968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26375968	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2784	26444184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26444184	sipa	Currently running this patch myself on bitcoin.sipa.be. I see a surprisingly high number of ping timeouts and inactivity timeouts (every 10 minutes or so, very irregularly). Ill investigate whether these are actual connections that go dead (in which case this patch is actually useful...) or a problem with the disconnection logic.
2612	17431185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17431185	Diapolo	I tested the pulltester executable and it does what it should :).
2612	17454939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17454939	Diapolo	Updated: - re-work handling of language settings and move default language code into OptionsModel::getLanguage()
2612	17526432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17526432	Diapolo	Did you yet test this pull?
2612	17529152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17529152	laanwj	No, not yet
2612	17621866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17621866	Diapolo	I found a bug, which always displays the "need to restart message" even when chaning stuff that doesnt require a client restart... will look into this later.
2612	18123486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123486	Diapolo	Im still working on the options dialog, currently its looking like this: ![options](https://f.cloud.github.com/assets/1419649/523468/ecbdabf8-c0bb-11e2-8ca7-87065ae4f9f6.png) I intend to always show the real QSettings values without trying to mess around with showing the real state values. Reason is, it really sucks to try to allow changing a QSetting, which is overriden and whose saved state isnt even shown in the GUI.
2612	21091066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091066	luke-jr	Needs rebase.
2612	21408562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21408562	Diapolo	And I need some feedback :)! Anyway, I currently dont intend to rebase but will rather update the whole pull. I just need some time and motivation to restart working on this.
2612	21429933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21429933	luke-jr	I dont like that it requires a restart unnecessicarily. I didnt notice the rest of the changes.
2612	24265242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24265242	jonasschnelli	could you rebase (if motivated again...). I could also check the changes and give you feedback.
2612	24442021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24442021	Diapolo	Yeah I can rebase and I really would love to get some help with this also :). Im just taking my current code without doing the commit-msg now and will base it on top of my core proxy pull, as this is also used in the options rework.
2612	24442984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24442984	Diapolo	Rebased and updated to include all changes I had in my local build for some months now. Needs feedback and a careful review, so please help me dear core-devs and others :).
2612	25067501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25067501	jonasschnelli	recommended graphical/UI changes: ![bildschirmfoto-2013-09-25-um-09 39 16](https://f.cloud.github.com/assets/178464/1207390/56a746f0-25b6-11e3-8fc9-7d86b37c39cb.png)
2612	25067567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25067567	jonasschnelli	because im not a proxy/tor guy as well as i have not enough understanding of the cache / verification thread mechanism, i cant give you a ACK on that.
2612	25067719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25067719	jonasschnelli	after building and starting bitcoin-qt ive got a -paytxfee warning (see picture). But my txfee set in QT perfs pannel is 0.00000005. Check: ![bildschirmfoto 2013-09-25 um 09 48 26](https://f.cloud.github.com/assets/178464/1207408/082b52fe-25b7-11e3-97ef-539f158933a3.png) ![bildschirmfoto 2013-09-25 um 09 49 29](https://f.cloud.github.com/assets/178464/1207409/0c1c4990-25b7-11e3-8f57-6aa6bcc3e2d6.png)
2612	25072086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25072086	Diapolo	Thanks for your comments, I will take a look into your UI suggestions. Have you a bitcoin.conf in use? I never got that -paytxfee warning and will take a look there too. Can you do a configuration reset and see if that removes the txfee warning?
2612	25072720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25072720	jonasschnelli	yes bitcoin.conf in use. But only rpc/testet settings there. The warning popped up after building with your pull. But did some other related testing some minutes before. So it might be another thing.
2612	25318392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318392	Diapolo	Updated: Removes Apply button from optionsdialog as requested in #3030.
2612	25318485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318485	Diapolo	![options](https://f.cloud.github.com/assets/178464/1207390/56a746f0-25b6-11e3-8fc9-7d86b37c39cb.png) I changed the lower part of the UI to be not special anymore (its a seperate frame but has no special UI style set). Its not part of the tab element, because I wanted it to be visible everytime, no matter, which tab is activated. Can you perhaps post a screen of the current pull? Edit: Im not sure about the expert tab, as this 2 options were requested by for general availability ;).
2612	25516356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25516356	Diapolo	ping
2612	25611211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25611211	jonasschnelli	some screenshots on mac osx 10.7 qt 4.8 ![bildschirmfoto 2013-10-03 um 11 21 06](https://f.cloud.github.com/assets/178464/1260793/3c8e3cd8-2c19-11e3-8e97-6972f1bea02e.png) ![bildschirmfoto 2013-10-03 um 11 21 14](https://f.cloud.github.com/assets/178464/1260794/43a5b8ac-2c19-11e3-981b-42f278b6023c.png) ![bildschirmfoto 2013-10-03 um 11 21 10](https://f.cloud.github.com/assets/178464/1260791/1c25245c-2c19-11e3-813d-2f78db828c77.png)
2612	25611244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25611244	jonasschnelli	There is still a problem with the unit... see: ![bildschirmfoto 2013-10-03 um 12 19 45](https://f.cloud.github.com/assets/178464/1260795/593e73c0-2c19-11e3-80af-598807d564a0.png) ![bildschirmfoto 2013-10-03 um 12 20 16](https://f.cloud.github.com/assets/178464/1260796/a53657a2-2c19-11e3-867a-17a6d2db4742.png)
2612	25619149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25619149	Diapolo	Thanks for the screens, UI looks good IMHO, but I have NO idea, about the -paytxfee problem currently. As requested, what happens without bitcoin.conf and after an options reset? Ill investigate further...
2612	25619601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25619601	jonasschnelli	used a fresh datadir,... same problem (txfee in preference window is 0.0001, but seams to be 5BTC internally). Looks like that the default tx fee is somehow wrong and are not corresponding to the UI settings value. If i set the -paytxfee=0.0001 by cmd line, ... all good.
2612	25620175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25620175	Diapolo	The default tx fee is 0 in the core code AFAIK. Setting paytxfee=0.0001 via bitcoin.conf is working here, same for -paytxfee=0.0001 via cmd line. The UI value is only used, if there is no paytxfee in .conf or cmd line anyway and is NOT synced with the current state! When you change the tx fee in the UI you will need to restart currently, because of ``ParseMoney()`` in init.cpp. Perhaps I have some brain-fuckup in there currently. Got it, there IS currently a bug with conversion from UI setting 0.001 to used tx fee I need to investigate! Thanks for bringing me on the right track! Im going to guess, before my changes it was possible to change tx fee on the fly because UI settings dont need ``PareseMoney()`` to work and Im going to restore the previous behaviour to fix that...
2612	25631966	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25631966	Diapolo	Updated: - save and restore optionsdialog window position - update nTransactionFee in QSettings with a set -paytxfee value when opening optionsdialog (Im not sure about this yet, perhaps revert to not updating QSettings and just display current -paytxfee value in optionsdialog.) Can you retest current code and see if this fixes the tx-fee problems :).
2612	25679362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25679362	jonasschnelli	paytxfee issue is fixed. Works as expected now. But cant give you an ACK because i dont have the time and experience to test the proxy, etc. settings. The visual part (UI) looks good for me.
2612	25682766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682766	Diapolo	Thanks for testing! There were reports of misbehaving options in our Github issues, can you report if these are fixed or if something has changed on that part?
2612	25687007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687007	laanwj	great work here
2612	26712367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26712367	laanwj	Needs rebase for -tor -> -onion change in init.cpp.
2612	28791111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28791111	laanwj	Needs rebase after coin control features introduction. Can you make a list of what needs to be tested here? Its too bad that this contains so many core changes and isnt just a GUI refactor, this makes it harder to merge and test.
2612	28896126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28896126	Diapolo	Indeed it sucks that this is dependend on core changes... I thought about reworking it or splitting it up into smaller GUI changes, but had not time for this recently :-/. Main stuff that needs to be tested is IMHO the proxy code and restart message handling. The 2 other new core options should just work :).
2612	28911277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28911277	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2612	28976849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28976849	laanwj	Yes it would be good to split it up. As the release of 0.9 is planned in January, lets not have any functional changes to proxy handling for 0.9. There are just no good tests for that. On the other hand, a lot of fixes to the dialog itself are very welcome and Id love to have them in 0.9.
2575	17082968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17082968	Diapolo	Removed some ``.c_str()`` which were unneeded.
2575	17089153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17089153	Diapolo	I left out changes needed in optionsmodel.cpp, thats why build fails...
2575	17089621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17089621	Diapolo	updated optionsmodel.cpp
2575	17119469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17119469	Diapolo	Use ``GetArg(strArg, 0)`` instead of ``mapArgs.count(strArg) && !(mapArgs[strArg] == "0")``, thanks sipa :).
2575	17136285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136285	Diapolo	Update name proxy setup to use ``GetArg("-proxy", 0)``.
2575	17430825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17430825	Diapolo	Further thoughts about this?
2575	19764281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19764281	gavinandresen	Needs a test plan to test all the combinations, then needs testers to, you know, actually test them all.
2575	19799899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19799899	Diapolo	Im fine with a test plan, as long as this has a real chance of getting merged. Is the code okay now or is ths not wanted anyway?
2575	20029697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20029697	Diapolo	Updated to include changes to ``getinfo``. I have not yet had the time to work out a test-plan, but everyone, who helps testing is welcome anyway :).
2575	22821740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22821740	Diapolo	Anyone willing to help me doing that test-plan stuff and/or check out if it works like it should :)?
2575	22847156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22847156	gmaxwell	I am the last guy who should be checking GUI changes, but I will gladly follow a test plan and report back on it. (Though I can only easily test Linux, and windows builds under wine).
2575	22851767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22851767	Diapolo	Im glad you are interested in helping me with this one. You currently dont need to start Bitcoin-Qt to do so, as this can be tested completely via bitcoind. The only Bitcoin-Qt change is to make it compatible with a changed datastructure. Should I start by listing possible combinations of all proxy switches and how they should behave?
2575	23252009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23252009	Diapolo	Im going to describe the pull with some more details here. Most proxy-setup is now done using the new ``ProxyInit()`` function. ``ProxyInit(Network net, const std::string& strArg, int nSocksVersion, bool fIsBase)`` parameter description: ``net`` = network to setup proxy for (NET_IPV4, NET_IPV6 or NET_TOR) ``strArg`` = command-line argument to get values from (-proxy, -proxy6 or -tor) ``nSocksVersion`` = SOCKS version of the proxy ``fIsBase`` = is that proxy a base (true) or separate proxy (false)? ``ProxyInit(Network net, const std::string& strArg, int nSocksVersion, bool fIsBase)`` does the following: -pre-check, if ``net`` is not limited and -no{proxy/proxy6/tor} was NOT specified --pre-check passed: try to ``SetProxy()`` and return ``false`` on error ---pre-check passed: only for ``net == NET_TOR`` call ``SetReachable();`` ---pre-check passed: return ``true`` --pre-check failed: for base proxy (``fIsBase == true``) a failed pre-check is okay, return ``true``, otherwise ``false``
2575	23260013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23260013	Diapolo	base proxy = ``-proxy`` separata IPv6 proxy = ``-proxy6`` separate Tor proxy = ``-tor`` Proxy initialisation flow (happens via ``ProxyInit()``, just name proxy is special cased in the code): -try to setup base IPv4 proxy --if SOCKS4: ---try to setup separate Tor proxy, on failure disable Tor via ``SetLimited()`` (SOCKS4 = no Tor support) ---try to setup separate IPv6 proxy, on failure disable IPv6 via ``SetLimited()`` (SOCKS4 = no IPv6 support) --if SOCKS5 ---try to setup separate Tor proxy, on failure try to setup Tor proxy via base proxy ---try to setup separate IPv6 proxy, on failure try to setup IPv6 proxy via base proxy ---try to setup base SOCKS5 name proxy Errors initialising base proxy or Tor/IPv6 proxies via base proxy lead to exit!
2575	23260171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23260171	Diapolo	Perhaps you could take a look at what Ive written, if the current proxy handling of this pull sounds correct, before I start doing the test-plan.
2575	25767583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767583	Diapolo	Updated: Included suggestions from and introduced ``getproxyinfo`` and made ``ProxyInit()`` return ``fBase``.
2575	26688611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688611	gavinandresen	Still needs a test plan.
2575	28617612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28617612	Diapolo	Updated: - greatly improved ``getproxyinfo`` call - rename fIsBase to fIsDefault and call -proxy the default proxy instead of the base proxy - add some missing ``#ifdef USE_IPV6`` guards in the code
2575	28617943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28617943	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2412	15437779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15437779	jonls	The feature was suggested earlier in issue #1958 and may also alleviate some problems from #273.
2412	15443198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15443198	Diapolo	Nice feature, but for the GUI I think it should a) show the current state in the debug window and b) allow a click or double-klick on the connection symbol in the main window, instead of a new button in the debug window. What do you think?
2412	15448961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15448961	jonls	Regarding a: The debug window actually shows the state (but maybe not in the best way), in that it appends "(Disabled)" to the number of connections when network activity is disabled. Are you suggesting a row in the debug window showing for example "Network state: <state>"? I think double clicking on the connection symbol could also be a solution. Im wondering though if the feature will be too hard to discover in that case, since it is not apparent that the symbol can be clicked. Also, if somebody clicked it by accident (maybe not likely?) they would not know how to get connected again.
2412	15452540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15452540	Diapolo	The button ``Toggle Network activity``(activity lowercase IMO) is fine, perhaps the toggle could just also be added to the connection symbol in the main window + a tray message that gives a small warning (use BitcoinGUI::message() for that), when the state is changed.
2412	15462624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15462624	jonls	Ive updated the patches: 1) ToggleNetworkActive() renamed to SetNetworkActive(). I think this name makes more sense and is more consistent with naming of other functions. 2) SetNetworkActive() prints log ouput if fDebug is set, 3) ClientModel now has a method to control network activity state setNetworkActive(). This is used by RPCConsole. 4) The string in RPCConsole is the same as the string in the status bar tooltip so they can share translations. Ill look into the rest of the suggestions on the gui later.
2412	15463122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15463122	Diapolo	Im no core-developer, but did some Qt things, so thanks for your update. I like the pull and when I have more time Ill compile it and see how it feels when using it :). What do you think?
2412	15632632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632632	laanwj	Im OK with the GUI code changes -- nice work. About the general idea: - Can you give a use case for this? What are you using this for? - I am not sure about the consequences for the network of accepting connections but immediately dropping them, and what would be proper behavior in this case. I *think* closing the socket so that clients get "connection refused" is preferable. Maybe or could comment.
2412	15635717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15635717	jonls	Use case: Sometimes the bitcoin client can put a lot of load on the internet connection of the user resulting in a high latency for other internet activities. This may be acceptable for the user most of the time, but in some cases the user temporarily needs a low latency connection. In this case the only option currently is to close the client and reopen it later, which can take quite a while and create a lot of disk activity when the block chain is reloaded. Being able to temporarily close all connections provides a solution for this.
2412	15648518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15648518	jonls	Update: 1) RPC commands togglenetwork and getinfo return info on current network state. 2) Signal about network active state change is sent with a separate signal NotifyNetworkActiveChanged. This means that the gui will update immediately when the button is clicked. Ive looked into adding the suggestion of having the connection symbol toggle the network state as well, however the Qt label does not allow mouse clicks to be detected. This could be worked around by implementing a custom subclass of label.
2412	15659416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15659416	Diapolo	I also think this is nice during IBD to get a new peer from which the client is downloading its blocks.
2412	15666732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15666732	rebroad	Can transactions still be sent while the network activity is switched off? It might be nice to be able to do this still at least, and optionally download new blocks too. (I recently added an "-antisocial" command line option which stops transaction relaying due to using a limited internet connection here which charges per MB, but a toggleable version of this would be much nicer - for when I switch to a different internet provider).
2412	15672261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672261	jonls	Ok, but that seems to require a different implementation. This patch simply cuts all connections, so I think your proposal is better suited for another issue. Also it seems that any kind of throttling or filtering of the connections eventually end up being too controversial to get anywhere (e.g. #273).
2412	15673069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15673069	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2412	15687162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15687162	laanwj	IMO the current implementation of simply cutting the whole connection is best. It is also clearest to the user. Once you start making exceptions theres a large chance of introducing bugs or even network-breaking bugs, which are why such features are unlikely to make it into the reference client.
2412	15762518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15762518	Diapolo	Im asking myself, if the core-devs are willing to pull such a thing or if this should be GUI-only?
2412	16033275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033275	luke-jr	Needs rebase.
2412	16041969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16041969	jonls	I will be happy to do rebases if this has a chance of actually being pulled but so far Im not sure. Whet do you think?
2412	16050450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16050450	gavinandresen	Testing is our bottleneck. This gives use Yet Another State to test, which is a bad thing because it just makes one more thing that can break. Im against it.
2412	16317518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317518	sipa	Havent tested but the code changes to core look sane to me.
2412	16323023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16323023	Diapolo	I still like the idea!
2412	16749799	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16749799	jonls	Rebased.
2412	17570929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570929	Diapolo	What do you think about that? Would be sad to just forget about it :).
2412	17571065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17571065	gmaxwell	I missed the rebase, Ill test it some.
2412	24265042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24265042	jonasschnelli	could you rebase once more?
2412	24367295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24367295	jonls	done
2412	26662382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26662382	Diapolo	What is the current state for this?
2412	26662456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26662456	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2412	26688550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688550	gavinandresen	Needs testing, and a test plan that has tests like: Toggle networking on and off as rapidly as possible eleven times using the GUI. EXPECT: no crashes, always ends up in properly connected or disconnected state. Toggle networking on and off using the JSON-RPC call. EXPECT: no crashes... Toggle networking off, send a transaction. EXPECT: ??? what is reasonable to expect here? Message to user? Transaction gets broadcast when network is turned on or client restarted ???
2407	15376395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15376395	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2407	15673451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15673451	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2407	20259465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20259465	CodeShark	This pull request has been refactored and reworked a little to improve error messaging.
2407	20570409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570409	sipa	If you add a dependency on a boost library, please add it to the gitian descriptors too (though it seems overkill to me ofr this purpose).
2407	20754841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20754841	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2407	22057551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22057551	kyledrake	Not sure if this is the appropriate place for this comment, but one feature request I wanted to recommend was to allow for the dynamic creation of wallets via RPC. That way you could add new ones without having to restart the daemon. I think people writing wallet interfaces might find that handy.
2407	22057559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22057559	kyledrake	Also, this is great work, happy that youre tackling this hard problem. Thanks!
2407	22321099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22321099	CodeShark	r.e. dynamic creation of wallets via RPC: that was one of the main objectives of #2124 I think Ive found a better approach to wallet management which Ive been pursuing separate from these pull requests. Ill publish something on it soon.
2407	26688398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688398	gavinandresen	Needs rebase and response to code review comments.
2342	14378195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14378195	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2342	16317892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317892	sipa	I like this idea, but it does need unit tests and some investigation for potential effects, as noted in the message.
2342	16321979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16321979	sipa	Heres a list of all effectively-height-locked transactions in the main chain (that means: excluding those where all inputs have nSequence=UINT_MAX): - It seems the inclusion height is always at least two more than the number in nLockTime - one more than strictly required.
2342	16344248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16344248	petertodd	Not many people uses nLockTime; about 75% of those transactions are mine. Can you run your script on testnet? I did one "min-height" tx myself, I wonder if anyone else did any. Mainly I think that BlueMatts tests need more nLockTime stuff, IE the stuff. I dont think Ill have time to write any myself until after the conference.
2342	16344398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16344398	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2342	18693290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693290	jgarzik	Status? Still has a FIXME. Lets close this or get it updated and merged.
2342	18795499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18795499	petertodd	Updated, removed FIXME. Min-height nLockTime has been tested on testnet without any issues.
2342	19706920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19706920	jgarzik	Thinking about this some more. Regardless of the correctness, I dont like the addition of magic numbers (+1, +2) in various code locations.
2342	19729352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19729352	petertodd	The +1 isnt a magic number; note how in one place the patch removes a +1. Rather its there from how nBestHeight is the height of the current best block, and in some places we want to check IsFinal() against the next block. Id argue the +2 isnt a magic number either, as its a combination of +1 to get the next block, and another +1 from the assumption that no-one controls >50% of the hashing power as the comment mentions. Speaking of, while I was thinking about this and working on my mempool rewrite, it occurred to me that given that nBestHeight can decrements under the highly unusual condition of a re-org right on a re-target boundary passing around not quite yet final txs might help exercise mempool and related code dealing with non-final txs. Not a particularly strong argument, but its worth thinking about.
2342	21090344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090344	luke-jr	Needs rebase.
2342	21291759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21291759	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2342	23232337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23232337	petertodd	Rebased and added CreateNewBlock() unittests
2342	23232850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23232850	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2342	23233922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233922	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2342	23237836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23237836	petertodd	I did another scan of the blockchain looking for nLockTime using transactions: Still none mined at the minimum possible heights, and very few that have used lock-by-time. However this has been tested on testnet.
2342	23237990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23237990	sipa	ACK
2340	14323157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14323157	petertodd	I looked into it and I think we dont need to worry about nBestHeight decreasing on a retarget reorg. Anything already in a nodes mempool stays there and will be mined once the chain height catches upl so it would be extremely rare for that to take more than an extra block or two.
2340	14351041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14351041	petertodd	Coinbase got back to me and theyve now fixed the issue - theyre using the same IsFinal() logic as the reference client.
2340	14376659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14376659	petertodd	Re-based on top of the "fix off-by-one errors" fix, which unfortunately means this has to be weakened until the network upgrades. Itll still at least shake out bugs in the meantime.
2340	14379062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14379062	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2340	16344713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16344713	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2340	21090359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090359	luke-jr	Needs rebase.
2340	23221185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221185	jgarzik	This seems nice to have.
2340	23233615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233615	petertodd	Updated and tested it against inputs.io, Coinbase, EasyWallet, SatoshiDice and the Android Bitcoin Wallet. It may make zero-conf txs take a little longer to show up for SatoshiDice, but other than that possible issue I didnt have any problems. (the android wallet seems to have been updated to never show unconfirmed txs so thats a non-issue) I couldnt test inputs.io properly because right now they arent showing *any* transactions as confirmed for my account, nLockTime or not. Note that this version is still the weaker one compatible with the current off-by-one behavior of the rest of the network that fixes. What does BitPay do with nLockTime-using transactions?
2340	23233618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233618	petertodd	You added this patch to next-test - any related bug reports?
2340	23233737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233737	jgarzik	Without getting into too much public detail: BitPay uses stock bitcoind as boundary nodes if at all possible.
2340	23233800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233800	petertodd	Well if you trust those bitcoinds 100% for what is or isnt a real transaction then this patch wont cause any problems for BitPay customers.
2340	23235527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23235527	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2340	23236328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23236328	schildbach	> the android wallet seems to have been updated to never show unconfirmed txs Why do you think so? Thats certainly not the case. However it will display a warning if lockTime > 0, and it also checks the unconfirmed dependency chain.
2340	23236979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23236979	luke-jr	Ive been using this as part of next-test for months now and havent encountered any problems as a result.
2340	23238887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23238887	petertodd	Actually seems that Android Wallet has a number of issues: 8f8dee4bbd74b573c324745d9d23938a1e4d12f269f9afca022224cf740f16aa - This tx has nLockTime=1, but nSequence=int max so it is a final tx. Instead the wallet shows a big read "this transaction is non-standard and should not be trusted" until it confirmed - kinda silly. fdb100df609349802c90dee38c694f3626b6c1f62a20ba92603ad17202b09322 - nLockTime=1, and nSequence set so nLockTime is active, but the tx is locked. It eventually showed up in my wallet, but only after a confirmation. It didnt show up immediately. a4cceb4df7db3507966e57aea6d8f7b21ceabee55bac573e9b9590229fde6a3f - This one, and a few like it, are the worst though: they are time-locked transactions, and every one of them not only didnt know up prior to being confirmed, but even after being confirmed they still didnt show up in my wallet. tx 6ed945173e1455edf09931b4c7caac165c7d834ddc1ea296a24b9213a45cf24d is a particularly extreme example, having the minimum possible "lock-by-time" nLockTime. Curiously if nLockTime > the "lock-by-time" range, but all the sequence numbers are set so the tx is locked, the transaction also never shows up and doesnt display that "this transaction is non-standard" error message. For example: 8100cb9c84cf2f9c78ab2e6b488feb0a531e2ef88a1d1d28243a9e8361a433a7 Finally after re-scanning the chain all the txs showed up in my wallet.
2340	23247554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23247554	schildbach	Thanks for your detailed tests. Ill investigate.
2340	26240512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26240512	wtogami	any results?
2340	26240928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26240928	schildbach	I fixed the UI so that the first case should not show up as timelocked any more. The other cases should not show up in their unconfirmed state. However, they will show once theyre blockchain confirmed.
2340	26361751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26361751	petertodd	Whats blocking showing those txs in their unconfirmed, but final, state?
2340	26398951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26398951	schildbach	I think the rationale is those transactions currently do not constitute a usecase that is supported by bitcoinj, so for safety reasons they are not allowed into the wallet. I believe this will change in future, probably with the introduction of more complex payment types (consisting of more than one tx). Probably can tell more.
2340	26525800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26525800	petertodd	Using the nLockTime feature is the business of the sender; the receiver has no reason to care about whether or not that feature was used if the transaction is now final and can be mined. This is just another example of the "death-spiral" of feature disablement that we keep seeing in Bitcoin where because we disable features based on nothing more than a suspicion that they might somehow be used for something nefarious, which in turn makes it impossible to develop anything useful using that feature because wallet software interacts badly with it.
2340	26553847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26553847	mikehearn	Hmm, that argument sounds familiar :) This came out of the conclusion that people could create time-locked transactions that people would think would confirm quickly, then wouldnt, making it easier to double spend. I think it was you that brought that up originally actually. Anyway it was a fair point so those transactions just dont get accepted into the wallet by default. And nowadays theyre non standard anyway so they shouldnt even propagate to those wallets. People upgrade SPV wallets fairly fast, so we can certainly change that for a subset of cases if its important and wont increase risk to merchants.
2340	26554040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26554040	gmaxwell	The problem right now is that they dont show up in android wallet even after theyre locked. Those transactions are not non-standard, they propagate fine, and other wallets (most?) display them okay too.
2340	26554464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26554464	mikehearn	Ill re-review that code, but I think final transactions are allowed, or are supposed to be. There was an issue with the Android UI checking if there was a time lock rather than if it was final, but I thought that was fixed. I filed bug 469 to investigate:
2340	28487890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28487890	mikehearn	I fixed the bitcoinj side issue. It may require a quick new API to make the UI do the right thing though. Andreas, let me know when you have time to retest this.
2340	28960090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28960090	petertodd	Current version of the Android wallet is rejecting all using txs with nSequence != max and/or nLockTime != 0 even once they are confirmed.
2340	28967418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28967418	schildbach	If you have a test script, can you publish that so I can reproduce?
2340	28971405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28971405	mikehearn	The current version of the app is not using bitcoinj 0.11-SNAPSHOT which is where I made the fixes. So that would be expected.
2340	29011654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/29011654	petertodd	I dont have a test script; I used the raw tx API and just edited the hex manually.
2124	11646195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646195	CodeShark	Its a work in progress and can certainly be improved. I welcome all comments, suggestions, criticisms, and witty insults.
2124	11646362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646362	Diapolo	Would it be better or possible to use references instead of pointers in your code?
2124	11646657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646657	CodeShark	Possible, sure. Better, why?
2124	11646687	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646687	CodeShark	The sanity test failed because the test suite uses the old RPC function prototype. I was still able to build and run using - make -f makefile.unix bitcoind
2124	11646770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646770	rebroad	This may be an opportunity to move away from the wallets being called "wallet.dat", which makes it all the more easier for malware to steal the contents.
2124	11653964	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11653964	CodeShark	You can now specify additional wallets in the config file or via command line arguments: usewallet=foo or bitcoind -usewallet=foo A default wallet called "" in the RPC and using file "wallet.dat" is always loaded, as to not break compatibility with the master branch. Therefore, additional wallets should neither be called "default" nor "wallet". The wallet will be stored in a file called wallet-foo.dat. If the wallet doesnt yet exist, it will be created the first time the wallet is loaded.
2124	11663549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11663549	CodeShark	The getinfo RPC method now returns an array of wallets each with wallet-specific information. This change is, unfortunately, not backwards compatible. However, it doesnt really seem to make sense to make this call wallet-specific. And returning an array of wallets seems to be a very useful feature.
2124	11664914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11664914	gmaxwell	An alternative would be to move that data out of getinfo and into a getwallet info. Part of the reason to do that is that the wallet outputs in getinfo can be rather slow already, and doing them for N wallets wont help matters. (Though lets see if anyone else has an opinion, I could be on drugs here)
2124	11664968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11664968	CodeShark	I was thinking listwallets should maybe show all this information with a verbose option. Without the verbose option, it would just give a list of the wallet names.
2124	11665363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665363	gmaxwell	Hm. From the perspective of the RPC as a CLI the use of verbose flags isnt especially discoverable for something basic like get your balances that is probably worth exposing at the top level. ::shrugs::
2124	11665402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665402	CodeShark	What about making the full info the default and having an option to shorten it? That way interactive users get relevant information while application developers seeking to improve performance have an option to do so if they dont need all that information. Of course we can just have two distinct RPC methods...but Id rather avoid having too many RPC calls when the semantics are similar.
2124	11665446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665446	CodeShark	I do think that the wallet information should be completely removed from getinfo, though. Anyhow, this is the kind of stuff thats really easy to implement and change up front but becomes a serious problem to change once people start using it to build applications. Id also like to hear several more opinions on this before committing to anything specific.
2124	11665629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11665629	CodeShark	Another issue Im wondering about is programmatic access to the config file. We could just append the new wallets to the end of the file whenever they are created - but it would be nice to be able to have tags for sections. Presumably whenever a user creates a new wallet they want it to be loaded at next startup unless they explicitly remove it from the config file.
2124	11667374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11667374	mikegogulski	Multiple wallet support came into my head as I was doing but I left it aside in favor of trying to move the code in the direction of further modularization improvements between the RPC interface and the wallet and the wallet database as a prerequisite. I put off coding there since I expected something like this to come along and because commentary on the pull request died away. I cant review the code in detail now but this capability needs to happen. Passing CWallet * around is an improvement for sure, definitely better than another global. Im finding it kinda cringeworth-brittle from an OO perspective, though. It would be lovely to see new RPC functions implemented in ways that drag suitable amounts of code that depends strongly on the wallets internal representation out along with them the appropriate changes to the wallet object. Have you tried merging my code? Ill have to look at that later. Multiple wallets are useful for any number of reasons. Certainly the Bitcoin-only accountants and would-be tax collectors of the future arent going to be running *n* instances of bitcoind on their desktops. Ultimate I think the wallet should be decoupled from the rest of the satoshi client. Pushing standarized interfaces down to wallet-object level is somewhere on the road to getting there. You seem to be addressing some modularization issues in other areas though, too.
2124	11669414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11669414	CodeShark	As for the OO stuff, I would like to abstract things further and define a listener interface, a transaction store interface, and a key store interface. Technically speaking, a signing agent doesnt even need to store complete transactions. Private keys and unspent outpoints are all it needs. Furthermore, a listening agent could send alerts to other components without the need to store any transactions. For instance, it could just provide filtering. Having said that, in the interest of seeing these pull requests merged with bitcoin/bitcoin master ASAP, Im willing to do things incrementally and use whatever structures already exist for now. However, Id be very interested in giving all this some deeper thought and coming up with a serious reorganization for some later version. As for now, at the very least it is possible to encapsulate the existing CWallet class much better - and I applaud your efforts.
2124	11674953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11674953	sipa	In general: Im very much in favor of having native support for multiple wallets. Wallet stuff hasnt been a priority for some time, but if necessary Id like to help to get this working. Regarding the idea of separating wallets for block chain processing: sure, thats definitely where we need to go in the future. Ideally, I think the code evolves to separate wallet and the rest along a clean interface in a first step indeed. In a second step, we can maybe make them separate processes started from the same binary or even just separate binaries with shared codebase. The final aim should be entirely separate things, either communicating via some private "wallet interconnect protocol" (where several wallets on a trusted network connect to a single validation service), or even turning the wallet processes into standalone SPV clients (with their own blockheader-chain), that can either connect directly to the network, or can connect to a server provide block/tx validation service, simply via the P2P protocol.
2124	11676540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11676540	mikegogulski	On the wallet site of things, IMHO, we could think about switching the interface to JSON-RPC for all interaction with the wallet object(s) and database(s), which would eventually enable bitcoin-qt to talk to wallets on report machines over SSL/TLS. Thats painful to tackle all at once, though, since theres plenty of code outside the RPC bundle right now that depends on wallet internals and a while lot of methods sticking off of CWallet.
2124	11678261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11678261	rebroad	This pull request is confusing me as its raised by a different user to the user making the commits.. (or maybe I dont understand github correctly). Also, Im wondering if such a thing as a "roadmap" exists for bitcoind/bitcoin-qt. Im thinking that perhaps the project could be split into two binaries, one that deals with the P2P stuff and sending/receiving tx/blocks, and the other that deals with purely wallet stuff. Currently bitcoind is slowly becoming bloated with both, and a focus on making the split possible might be useful.
2124	11678294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11678294	CodeShark	Both users are me. I dont use my CodeShark identity for pushes, though. CodeShark is reserved for github.
2124	11712207	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11712207	CodeShark	Dynamic wallet loading is essentially complete. An important issue that needs to be resolved prior to any integration is making sure its use of LOCKs on threads is ok. Error handling on initialization is also not super smooth, but thats more an issue with AppInit2 generally. At this point I mostly just want to polish up whats there, fix any potential bugs or serious issues, leave this branch alone, and go work on other features.
2124	12208298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12208298	CodeShark	Hmm, still having some issues with the default wallet not unloading at shutdown. Will need to go over the shutdown sequence to make sure all threads relinquish their pointers to it.
2124	12225200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12225200	gavinandresen	Just to set expectations: This big a change, in this critical a part of the codebase, will need: + A comprehensive test plan, that exercises all the things that have changed. + Testing by at least two different people who arent developers, on Windows and either Linux or Mac See for the lastest QA process.
2124	12638631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12638631	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2124	24548265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24548265	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2124	25714323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25714323	MrLei	How i can install bitcoind whit Dynamically Loadable Multiple Wallet ?
2124	26687961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687961	gavinandresen	Rebase needed.
2124	28362140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28362140	Tranz5	This is awesome work. I hope it makes it way to BTC soon. Ive been playing with it for a bit now. Here are the issues I am working through. 1) Export doesnt work. ( Tried making BitCoinGui exportAction public and referencing it in WalletView::gotoHistoryPage but that only gives me default wallet) Still working on different methods to fix this. 2) The RPC commands loadwallet and unloadwallet do not reflect in gui. I think the gui needs a connect to rpc commands. 3) When clicking on the transaction on the right side of the gui, the transaction button doesnt get focus. 4) The gui cant create a new wallet. using loadwallet then unloadwallet rcp, then load button in gui works, but.. So far these are the only issues I have found. Thanks again for the hard work. Ill share what I can when as I work through these changes. I am still new and trying to catchup as quick as possible. Any hints are appreciated it. Happy Bitcoining!
1816	8421578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8421578	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1816	8424448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8424448	gavinandresen	Nested-three-deep reject(DoS(error(...))) with two different error strings seems kinda crazy. If I wasnt familiar with the history of how that came to be Id be befuddled. Could it be simplified to just: return reject(errorMessage, int nDoS=0) ? ... where reject prints errorMessage to debug.log and saves it in the block, and then does the DoS thing if nDoS > 0. Then returns false.
1816	8444452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8444452	luke-jr	Ill flatten this later and collapse the 3 levels of function wrappers, just needed to get something working for Eligius...
1816	8477180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8477180	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1816	10392472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10392472	luke-jr	Rebased and implemented s CValidationResult solution.
1816	10684867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10684867	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1816	10770788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10770788	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1816	18694614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694614	jgarzik	No objections to the code. Driving use case?
1816	18695132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18695132	luke-jr	Ability to test block templates before putting the effort into mining them.
1816	18695846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18695846	jgarzik	Thats a use case. What size user constituency is *driving* this? Do multiple pools want this?
1816	18697341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18697341	luke-jr	As far as I know, only Eligius and EclipseMC are actively using this today. Any pool using Eloipool for their poolserver would be able to immediately take advantage of it in the simplest case. It is also necessary for both a multiple-validating-node-implementation economy, and miner-chooses-his-own-transactions GBT-based pool mining.
1816	18697600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18697600	sipa	I dont think thats a requirement (though certainly something to take into consideration). I like the idea of such functionality, as it allows miners to validate their work against multiple implementations. Especially with alternative full node implementations becoming available, having something like this may be inevitable. Plus its a good debugging tool for checking whether new (unreleased) versions can accept the best chain. On the other hand, I dont like the evolution that may follow from this, where miners become required to validate against a dozen implementations that may or may not differ in validation rules... that has nothing to do with this PR though.
1816	18771491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18771491	petertodd	A good example where the validation is extremely useful is a safety net for bitcoin changes that could potentially create invalid blocks. For instance in discussions with pools and miners something that comes up with implementing replace-by-fee and the child-pays-for-parent code Im working on is the danger that there will be some kind of bug that leads to an invalid block. (let alone a delibrate exploit) Sure you can test all you want on testnet, but its impossible to be 100% sure, and any orphan costs ~$3000USD; Ive got one pool that wants to implement replace-by-fee that has said they are going to wait until its been tested on Eligius first.
1816	18785624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18785624	sipa	Sure, I agree its a very good way to debug and test potentially forking changes. I just dont like what it may lead to.
1816	18801469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18801469	rebroad	I agree it is good to be wary of where this may lead to. Are you meaning to imply that leaving things as they are may be a better alternative to the proposed solution made by Luke?
1816	18942190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18942190	DrHaribo	I would like to have block proposal functionality for BitMinter as well.
1816	20738783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20738783	hrabbach	Id very much like this for my new pool (currently in private testing), if another "driver" is needed :)
1816	26687926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687926	gavinandresen	Rebase needed.
1816	27046226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27046226	luke-jr	Rebased.
1816	27046984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27046984	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
1816	28204541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28204541	laanwj	Should this be closed now that #3185 is in?
1816	28231466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28231466	luke-jr	No, #3185 is entirely unrelated.
1674	7725627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7725627	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1674	7737457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7737457	Diapolo	I tried the version from and it starts just fine, no crashes related to stack-protector on Win7 x64 here.
1674	7778056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778056	laanwj	Have you tried some actual stack-smashing fun yet?
1674	7778875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778875	Diapolo	No I did not investigate further, until now I just enabled it. Have you got some links for stack-smashing fun :)? Forget my question, Im going to test it now :).
1674	7779243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7779243	laanwj	Well the idea is to make a buffer on the stack and write more into it and than the size of the buffer (ie, char buffer[1024]; buffer[1025]=0xff; .. and so on the values dont really matter ) Add a button that does that , click the button, and see if it gets detected (make sure you dont write too far outside the buffer, maybe make sure there is a variable after it, otherwise youll always trigger a crash). Well also have to investigate the performance impact. Im not sure how this protection really works, but if it continuously checks every buffer on the stack I can see it become lots slower.
1674	7780283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7780283	Diapolo	<pre> char buffer[1024]; buffer[1025]=0xff; printf("%s", buffer); </pre> The above code seems to trigger SSP detection, see this where ``libssp-0.dll`` is mentioned. Well now I need to check if the application is halted and aborted or executes further ... before crashing. <pre> Problemereignisname: APPCRASH Anwendungsname: bitcoin-qt.exe Anwendungsversion: 0.6.99.0 Anwendungszeitstempel: 502cb87a Fehlermodulname: libssp-0.dll </pre>
1674	7780722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7780722	Diapolo	I tried the same code without SPP enabled and the applications simply continues, which is what malicious code should do, right ;)?
1674	7786618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7786618	laanwj	Yes, thats expected
1674	7786671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7786671	gmaxwell	Having SSP in windows is great news! Should also make sure bitcoind gets built with it. Can you time a blockchain sync with and without (perhaps on testnet?) to make sure its not slaying it?
1674	7787767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7787767	laanwj	What was the command line again? Something like: * remove blkindex.dat * bitcoin-qt -loadblock=blk0001.dat
1674	7787837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7787837	gmaxwell	Move the databases out of the way then bitcoin-qt -loadblock=notblk0001.dat (needs to be a separate file)
1674	7788447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7788447	laanwj	In that case I guess it it easiest to pass -datadir= a new, empty directory, then -loadblock= your current blk0001.dat into it. Then time how long the AppInit2() call takes (or even better, change the debug log line in LoadExternalBlockFile to state how long it took).
1674	7792891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7792891	Diapolo	You want me to use ``-loadblock=`` as benchmark if I understand you correctly?
1674	7794866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7794866	sipa	thats correct
1674	7812502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7812502	Diapolo	Im currently benchmarking ... one thing, Bitcoin-Qt shows just "Loading Wallet..." message, which I think is missleading when doing a block-file import, no?
1674	7812727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7812727	laanwj	Yes it is probably missing an initmessage somewhere.
1674	7814487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7814487	Diapolo	Where is that part located in the code? 1st result without this patch: 08/17/12 09:59:28 Loaded 188524 blocks from external file in 5399340ms 2nd result with this patch: 08/17/12 11:49:21 Loaded 188524 blocks from external file in 5398498ms 08/17/12 13:44:26 Loaded 188524 blocks from external file in 5425789ms (verification run) To me this looks like SSP is no bottleneck, when importing block-files.
1674	7816511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816511	sipa	Looks good to me.
1674	7837946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7837946	Diapolo	This currently seems to be not working with Gitian or builds, as the RELEASE=1 scope seems to be not taken into account (see #1673).
1674	7843060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843060	Diapolo	Alright, #1673 is working now, as we enabled the flags there for both RELEASE and DEBUG builds now, but what about the stack protector? We have 2 options, do the same here or ensure RELEASE=1 gets passed to qmake to ensure the block where the SPP flags reside is processed, comments?
1674	7843086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843086	laanwj	Just enable it always. Its nice to find stack overwrite bugs while debugging.
1674	7843135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843135	Diapolo	Updated to be enabled for RELEASE and DEBUG builds.
1674	7843147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843147	laanwj	Ok, now the upcoming executable created by bitcoin pulltester needs to be carefully tested, to see if it doesnt crash. After all, previous experiments with the cross-compiled executable are probably invalid as the flags werent really passed.
1674	7843171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843171	Diapolo	What about 2 flags for the UI client ``-test-dep`` and ``-test-ssp``, which would use our small test codes for verifiying the feature is working. We should perhaps not extend the help message, but it would help testing the official client without the need to do an own build?
1674	7843222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843222	laanwj	NACK putting those in the official client. Thats what the autotesters are for. Though testing these might turn out to be tricky, as you want to reproduce crash behavior and somehow find out what caused the crash. Also, mind that BlueMatts pulltester was never meant to enable testing "without the need to do your own build". It is just a final acceptance test. Not a way to get your stuff built for free.
1674	7843268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843268	Diapolo	I can do own builds, which are not comparable with official release builds. I just thought about a possibility to verify such features in official client versions :).
1674	7844488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7844488	Diapolo	Is anyone able to comment, why the latest build fails (http://jenkins.bluematt.me/pull-tester/9ad1341d46851020b2342670fb73004b909fc80b/test.log)? These are the errors I can see, but Im not sure if or how thay relate to SSP: <pre> ERROR: mempool transaction missing input ERROR: ConnectInputs() : 39393b8fd0 P2SH VerifySignature failed </pre> and <pre> + ./release/bitcoin-qt_test.exe wine: Unhandled page fault on write access to 0x00000014 at address 0x530b17 (thread 0009), starting debugger... Application tried to create a window, but no driver could be loaded. Make sure that your X server is running and that $DISPLAY is set correctly. err:systray:initialize_systray Could not create tray window Application tried to create a window, but no driver could be loaded. Make sure that your X server is running and that $DISPLAY is set correctly. Unhandled exception: page fault on write access to 0x00000014 in 32-bit code (0x00530b17). </pre> Edit: Could be a problem of the cross-compile or the tests in Wine? Edit 2: Found this one: <pre> wine (0.9.19 uploaded to edgy) does not work with stack-protection. Compiling with -fno-stack-protected solved this problem temporarily. (see: </pre> Edit 3: Some Wine bugs related to stack protection:
1674	7845077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7845077	laanwj	I somehow think this is not a wine problem, but the same bug that got us to disable stack-protector on windows before. Looks like corruption. Have you tested the resulting executables in windows?
1674	7845677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7845677	Diapolo	I would have tested the executable, but did not generate any bitcoin-qt.exe.
1674	7846347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7846347	laanwj	Hmm, even the autotester executable is not downloadable. I guess it doesnt give you those if the test fails.
1674	7848001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7848001	sipa	The mempool error is expected; some of the code in the testcases intentionally causes errors, and checks whether they do occur. Regarding the Edit2 above: seems to only way to get this accepted by pulltester is to disable SSP specially in the pulltester builds...
1674	7848800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7848800	Diapolo	Would it be possible to compile a bitcoin-qt.exe before doing any tests? It would be nice to know if just the automatic sanity tests fail or if the exe-file is really not running under Windows (which I can only check if it gets compiled). Im willing to do some further testing and investigation here...
1674	7849607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7849607	TheBlueMatt	I dont see why the bugs linked above would be the cause here, they effected wine version 0.9.N, the version running on jenkins is 1.2.2. All files which were built before a failure are on the site (including test_bitcoin.exe, which is in src), and if thats failing, there is no reason bitcoind.exe would work, so that would need fixed first anyway Edit: sorry, didnt catch that its actually bitcoin-qt_test.exe which is failing, that should be there as well, see release/, and, again, if bitcoin-qt_test.exe is failing, there is no reason bitcoin-qt.exe would work.
1674	7854876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7854876	Diapolo	Ill try one more rebase with --fstack-protector (instead of -fstack-protector-all) and if that fails the problem with SSP on Windows is still there (IMHO caused by the cross-compilation somehow as my own build runs just fine). Current bitcoin-qt_test.exe crashes for me too.
1674	7854981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7854981	gmaxwell	Im really super doubtful that cross-compilation would be the issue, though different GCC versions might be. The crash thats being reported a dereference of a near-null pointer sounds like a bug to me; one that may go unnoticed on windows because page 0 is mapped on windows.
1674	7856753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7856753	Diapolo	Now that is interesting with just -fstack-protector as flag, the build passes the sanity-testing, BUT when testing it with testnet it leads to missbehaviour (blkindex.dat could not be loaded or with a clean datadir it shows wallet.dat corrupted / damaged). Any idea how to track down your idea further, that this could be a bug? I think its rather strange that -fstack-protector leads at least to a valid executable...
1674	7907168	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7907168	jgarzik	might be on to something. mingw builds against binary libs whose ABI occasionally changes due to C++ ABI changes etc.
1674	7908383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7908383	laanwj	Could well be. What are the gcc versions involved? What gcc version do you use Diapolo? And which one for Bitcoin Pull tester by I suspect TheBlueMatt uses the version included in ubuntu lucid (4.4.x), Diapolo is using a more recent one included with mingw (4.6.x?).
1674	7908561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7908561	TheBlueMatt	ii mingw32 4.2.1.dfsg-2ubuntu1 Minimalist GNU win32 (cross) compiler ii gcc 4:4.5.2-1ubuntu3 The GNU C compiler
1674	7909482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7909482	Diapolo	Im currently using ``g++ (GCC) 4.7.0``, but I used -fstack-protector-all with the stock minGW version (which is 4.4), that ships with the Qt Windows SDK and SSP was working and not causing any issues. What more can I do to further assist here? All dependency libs used by Bitcoin-Qt are compiled with ``gcc 4:4.5.2-1ubuntu3 The GNU C compiler`` before building our Windows executable?
1674	7910350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7910350	laanwj	I suppose mingw32 4.2.1 is actually using gcc 4.2.1 for the cross compile, not 4.5.2.
1674	7911182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7911182	Diapolo	Well IMHO gcc 4.2.1 is old as the hills ... any chance to upgrade the used compiler?
1674	7912780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7912780	TheBlueMatt	The pull tester should be running the same version as gitian. If you want to use a newer version, test gitian (or run its build script in an Ubuntu VM if you dont feel like doing a physical install for gitian itself) and get that upgraded.
1674	7924630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7924630	Diapolo	You are right, that and Gitian should use the same compiler versions. I was just asking, if someone is able to test-compile with a more current minGW version (at least 4.4) in Gitian or your setup. It drives me mad, that such a security mitigation is not working for Windows, as Im sure Windows users are far more at risk to encounter an attack in comparison to other OSes.
1674	7926892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7926892	gmaxwell	More arguments for your amusement:
1674	7928472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7928472	laanwj	Even on Ubuntu Precise (12.04) the mingw g++ version is still `i586-mingw32msvc-g++ (GCC) 4.2.1-sjlj (mingw32-2)`. To use a newer cross-compiler wed have to build it ourselves. Looks like ioerror (tor dev) got stack-protector-all to work with mingw cross compile by adding -lssp, though Im not sure for what version:
1674	7930930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7930930	Diapolo	Is ``-lssp`` a library we need to add? If you find some documentation about it please link that here, I didnt yet manage to find out anything about that flag. Edit: I asked ioerror directly via Twitter, lets see...
1674	7932871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932871	TheBlueMatt	precise has two sets of mingw packages - the regular mingw is the same old version, but there is now a mingw-w64 (the 64-bit part is optional) which is gcc 4.6.3.
1674	7932892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932892	TheBlueMatt	Ill look into compiling it myself later today if I get a chanace.
1674	7932913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932913	Diapolo	I greatly appreciate your efforts here :) (that goes to all others, who participate here).
1674	7944708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7944708	laanwj	Ive set up a cross-compile environment with i686-w64-mingw32 (gcc version 4.6.3), outside of gitian, eventually I managed to build a static bitcoin-qt.exe that works well. With `-fstack-protector-all` enabled. - I did have to add `windows:LIBS += -Wl,-Bstatic -static-libgcc` to bitcoin-qt.pro to succesfully build a static bitcoin-qt.exe - I had to upgrade boost to 1.51.0 to be compatible (otherwise Id get the error reported here: ) - also needed to add `LIBS += ... -lboost_chrono$$BOOST_LIB_SUFFIX`, as boost::thread uses boost::chrono::system_clock::now() - I did have to comment out the `ipcThread`; for some reason I get a `Expression: &get_map_unlocked() ==m` assertion in `windows_intermodule_singleton.hpp` line 145 at startup. This does not seem to be related to the stack protector but to the new boost version. I have no idea what this code is doing, not in the least: . - The new boost version is no longer using the monkey patch. This could be the problem? With this mingw version, `test_bitcoin.exe` and `bitcoin-qt_test.exe` also check out fine with `-fstack-protector-all --param ssp-buffer-size=1`.
1674	7947359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7947359	Diapolo	Great work and I have some comments to make to your findings. 1. Im asking myself, how Gitian creates a static bitcoin-qt.exe as I was never able to achieve this with my local setup. The current project file has ``windows:LIBS += -Wl,-Bstatic -static-libgcc`` not included, so where is the magic here? 2. Im currently using Boost 1.50 and in comparison to 1.49 no monkey patch was needed or active, as the Boost devs changed the parts of the interprocess code. 3. Yes, Boost > 1.49 needs the compiled Chrono lib included, which is what I also observed. 4. I didnt need to change any IPC code, but needed to remove ``typedef HANDLE pthread_t;`` from util.h and change ``pthread_t`` into ``HANDLE`` in ``CreateThread()``, perhaps that is also of help for your build. 5. Ill compile the Boost 1.51 libs and see if I encounter additional errors. Can you upload your compiled version, Im gona give it a run on a native Win7 x64 to verify its working. In the end Im not sure what your findings are worth in terms of getting SSP to work with our official client builds, but a big thank you for your effort and time to investigate :). Edit: The switch to Boost 1.51 caused no further compilation errors here.
1674	7960312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7960312	laanwj	1. I dont know. As long as things work, we dont ask questions :-) As Im not building in gitian, it might be that my setup is slightly different, making this necessary. You do need to build Qt yourself to make a static executable, the pre-packaged Qt will not do this. 2. I dont currently have time to dive deep into boost::ipc, Its a strange place full of magic to make objects behave as normal in shared memory, which seems overkill for something like sending URLs :/ 3. OK 4. Didnt need to do that. I compiles with latest master with the changes I mentioned. 5. Thanks You can download the produced executable here (with commented out ipcInit, otherwise its a pretty useless file :): I also still intend to update the Qt version to 4.8.1. And integrate my findings back in gitian again. But not in time for 0.7rc1.
1674	7970222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7970222	Diapolo	I tried your version and its working, no crash and no strange errors after startup, looks good.
1674	7985339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7985339	Diapolo	Last failure is expected, as I reverted to -fstack-protector-all.
1674	8762416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762416	sipa	Any reason why merging this would be a problem?
1674	8762633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762633	laanwj	We can merge this pull after MingGW version used for Windows cross-compile is at least 4.4, preferably 4.6. The currently used version is 4.2 which has corruption problems if this is enabled! Of course, if diaplo updates this to only affect non-windows it can be merged.
1674	8762857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762857	Diapolo	I would be rather sad if I update this to be mergeable, as I think it loses attention for Windows then. I can for sure create a new pull, which does this for all OSes expect Windows and leave this as is, to keep the discussion present.
1674	9394262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9394262	Diapolo	Any idea, why we need this (https://github.com/bitcoin/bitcoin/blob/master/bitcoin-qt.pro#L37) in the pro-file, but such a linker flag is not needed in makefile.unix (https://github.com/bitcoin/bitcoin/blob/master/src/makefile.unix#L71) for SSP? I tried to remove the linker flag for bitcoin-qt, as I was somehow sure it is no linker flag, but that creates a ton of errors (doesnt work and needs to be in place).
1674	9980890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9980890	laanwj	The security options need to be passed to the linker as well as compiler. Note that at the bottom of makefile.unix we pass xCXXFLAGS as well as xLDFLAGS to the linker, at different positions in the argument list.
1674	9995262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9995262	Diapolo	I also found out that this option is needed for both (linker and compiler), as you said ;). But this just fails, because of the old GCC version or did I miss something new? Edit: I closed this by mistake, clicked too fast :-D.
1674	11906476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11906476	sipa	So, ACK on this after #2106?
1674	11907096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11907096	Diapolo	That GCC version should be safe to use, but to be sure I asked you, if you could do a little test build with this pull included :).
1674	11907393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11907393	sipa	Its included in
1674	11913454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11913454	Diapolo	Works just fine, startup, IBD, create a TX... all things that couldnt even be tested with the old compiler suite :).
1674	12122405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12122405	Diapolo	Added a -static switch (after suggested that), which works for my local build. Perhaps could integrate that into the leveldb17 test builds to see if the libssp-0.dll dependency is gone. Edit: What about adding ``CONFIG += static`` to the project file? Seems also right :).
1674	12143789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12143789	Diapolo	Too bad didnt yet build a binary...
1674	12175925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12175925	Diapolo	<pre> /usr/bin/ld: cannot find -lQtTest collect2: ld returned 1 exit status make: *** [bitcoin-qt_test] Error 1 </pre> Im not sure if this is related to my pull, any idea?
1674	12191857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12191857	Diapolo	I need a little help over here :D, my own build is not working like expected with this pull included, I have to say Im not using a static Qt, as I never managed to set that up for Windows. The dependency for ``libssp-0.dll`` is gone, when using ``QMAKE_LFLAGS *= -static``, which was intended. The observed problem is happening with the RPC console, lets say I just input ``foo``, it crashes with am MSVC++ exception / APPCRASH, before printing out ``Method not found``. I was able to debug this down to ``CRPCTable::execute()`` function and the crash is happening right after ``throw JSONRPCError(RPC_METHOD_NOT_FOUND, "Method not found");``. Any ideas for this? Also doing an ``QMAKE_LFLAGS -= -static`` after the stack-protector flag does not seem to change that.
1674	12197733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12197733	sipa	Check latest build here:
1674	12199405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12199405	Diapolo	Your linked build does not contain the described error. I wonder how we can now check, that the stack-smashing protection is really still working. I had code to trigger it, which caused a crash with a clear reference to libssp-0.dll on Windows. I wonder what it would look like with the recent static-change... <pre> char SPP_buffer[1024]; SPP_buffer[1025]=0xff; printf("%s", SPP_buffer); </pre>
1674	12201978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12201978	BitcoinPullTester	it appears to be an issue with this pull, it appears to be making the default -static instead of it being dynamic as it used to be.
1674	12202617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12202617	sipa	Also: can you make this change also for the daemon builds?
1674	12207710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12207710	Diapolo	Yes, Ill make that Windows only and add a commit, which also enabled this for bitcoind. Still the open question, how can we verify what happens on Windows, when a SSP problem is caught and the app gets terminated with -static beeing active.
1674	12208319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12208319	Diapolo	Is the pull tester still using that ancient compiler suite or are you now using the same as in the leveldb17 pull? I updated the pull to use -static only for Windows and extened the Windows makefiles for bitcoind to be equal feature-wise.
1674	12228058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12228058	TheBlueMatt	The issue is on the linux side, not the MinGW side, I dont believe the leveldb17 pull changes that?
1674	12243278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243278	sipa	I included these changes in the leveldb17 branch (#2106), as it conflicted with other changes there.
1674	12243519	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243519	Diapolo	Can you do a testbuild for me with that code in init.cpp, to see what happens with -static keyword? It will crash, but I would like to know if there is a chance to see the process got terminated by GCCs stack protector. I think we need to ensure we dont break it... <pre> char SPP_buffer[1024]; SPP_buffer[1025]=0xff; printf("%s", SPP_buffer); </pre>
1674	12243607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243607	sipa	create a branch with the code you want to test, and point me to a commit id.
1674	12243718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12243718	Diapolo	Thanks, will do this tomorrow :). Hope we get that sorted out, would be nice to have leveldb17 branch + stack protector in and working, so we can look at other things.
1674	18694427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694427	jgarzik	ping?
1674	18787199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18787199	Diapolo	As we are still using the same ancient GCC version I cant do anything here :-/.
1674	21293937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21293937	Diapolo	Is there any current progress in switching to a newer compiler version for our Gitian builds?
1674	25294202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25294202	laanwj	Can be done after merging #3029. Although the patch has to be completely reworked for the new build system.
1674	25746384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25746384	Diapolo	This should finally be possible now thanks to our new build system :).
1674	25767323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767323	Diapolo	Where do I find the resulting Windows binaries within
1674	25784121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25784121	gavinandresen	Im working on having the pull-tester compile mingw/windows this afternoon. The pull-tester environment uses: i586-mingw32msvc-g++ (GCC) 4.2.1-sjlj (mingw32-2)
1674	25786646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25786646	Diapolo	I didnt know we havent yet upgraded pull-tester environment. This patch should at least result in working Windows executables for official Gitian builds.
1674	25860679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25860679	gavinandresen	I re-ran the pull-tester with windows builds enabled; the qt .exe is in win32-build/src/qt/ Oddly, the pull-tester passed it, although the Qt unit tests fail to run. I guess it crashes in a way that looks like the unit tests succeeded?
1674	25867218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25867218	Diapolo	As long as we use this ancient ``i586-mingw32msvc-g++ (GCC) 4.2.1-sjlj (mingw32-2)`` compiler with pull-tester, we cant rely on it for creating or testing this pull I guess. Will download the qt exe and try it, it should crash or misbehave, as that was what happened before with pull-tester builds.
1674	25867309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25867309	Diapolo	Gavin, the resulting executables are crazy in size bitcoin-qt.exe has over 120MB and bitcoin.exe over 60MB.
1674	25873434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25873434	Diapolo	Also the bitcoin-qt.exe doesnt show an icon + it doesnt contain any meta-data (from bitcoin-qt-res.rc), wherars bitcoind.exe DOES contain that meta-data (from bitcoind-res.rc).
1674	26328684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26328684	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
1674	26687889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687889	gavinandresen	: re executable size: they are not stripped (contain debugging symbols). I assume they crash because pull-tester is using an ancient mingw?
1674	26697226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26697226	laanwj	Yes, they crash because of the ancient mingw version, so this is still pending on a pulltester mingw update.
1647	7590124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7590124	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1647	9963221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9963221	mikehearn	Gavin, any thoughts on this?
1647	9983542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9983542	gavinandresen	: needs unit tests, in my humble opinion. It is a very good candidate for "needs 100% code coverage from tests", because transaction selection is such a key piece of the Bitcoin infrastructure. Also needs thorough code review, with an eye towards "Could I construct a series of transactions that made the selection algorithm take O(N^2) time ?"
1647	9985286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9985286	luke-jr	What kind of unit tests would you like for this? I already dealt with the O(N^2) problem a while back on Eligius, though of course more reviews are always welcome.
1647	9985591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9985591	gmaxwell	My suggestion would be start with a bunch of "random" mempools and them making sure that the selections it makes are valid (no mistaken dependencies) and actually get the most fees possible (e.g. by externally precomputing the correct answers). Id also include cases designed to trigger complexity attacks (mempool with a 2 groups of 100 long chains or whatever). After that Id run lcov with the test and look and make sure every conceivably reachable branch (e.g. all except the invisible boost added heap allocation failure tests) is hit by the tests. If not, add tests that trigger them. After that the code should be intentionally broken (e.g. by randomly removing some statements and/or turning some if() to if(!())) and make sure the tests fail. I volunteer to do this kind of testing (plus some basic smoke tests) once regular unit tests for this are written.
1647	9995865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9995865	gavinandresen	Thanks , those are exactly the types of tests I think this needs!
1647	10315914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10315914	luke-jr	Update: It seems since rebasing this, new performance problems have cropped up. :(
1647	10684223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10684223	luke-jr	Update: False alarm, I debugged the performance problem and it was a result of a poorly thought-out merge of this with #1648 (which elevated priority of transactions that benefit the miner directly). This seems to still perform well without that change (or with it done once).
1647	10772536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10772536	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1647	12172359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12172359	luke-jr	Fixed a bug triggered by todays onslaught of !IsFinal transactions...
1647	26687849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687849	gavinandresen	Rebase needed. Although I think this needs a re-think/rewrite: When we have a memory-limited mempool (needed for anti-DoS), well run into a chicken-and-egg problem: parent transaction may be evicted from mempool, child will get stuck (and eventually evicted) from the orphan pool. Seems to me what is needed is a new protocol message that is "here is a bundle of dependent transactions, with children that pay for their parents."
1647	27047126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27047126	luke-jr	Rebased. I agree it isnt perfect, but this is 1) better than nothing, and 2) well-tested. If anyone wants to put the effort into a rewrite, Id be glad to defer and give it testing.. but I think everyones busy enough already.
1647	27049061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27049061	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
1583	6916444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6916444	jgarzik	Code seems ACK-worthy. Use cases?
1583	6916602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6916602	luke-jr	Various people (@gmaxwell and included) expressed interest in this - one example was to allow captcha-solving as an alternative to fees.
1583	7678848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7678848	gmaxwell	Re: Ignoring minfee: This call is by txid. If you dont like the fee, dont call it on the transaction. Ignoring minfee is the right thing to do here. Though this should also have a fee delta, because we now prioritize above minfee txn by fee per KB. If someone is paying you behind the scenes to mine a transaction you should be able to add the amount youre being paid (or whatever) to the fee used in that calculation. e.g. prioritizetransaction <txid> <priodelta> <feedelta>.
1583	7683936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7683936	luke-jr	Updated with suggestions. Also, is it intentional that GetMinFee with GMF_BLOCK is *never* used anymore?
1583	7686779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7686779	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1583	7696109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7696109	sipa	Which commit removed the call to GetMinFee with GMF_BLOCK?
1583	7696169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7696169	luke-jr	c555400ca134991e39d5e3a565fcd2215abe56f6
1583	7967960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7967960	gmaxwell	Needs a rebase
1583	10378973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10378973	luke-jr	rebased
1583	16275637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16275637	luke-jr	Ok, finally redid this using a map. , look good?
1583	18694252	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694252	jgarzik	No objection... though I still prioritize with the z :) Who the heck uses an s? :)
1583	23022296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23022296	luke-jr	It occurs to me that the map should be cleaned at some point. Any opinions on when to remove a txid from it?
1583	23027788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23027788	gmaxwell	Check it when removing transactions from the mempool?
1583	23034706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23034706	luke-jr	Probably dont want to lose priority adjustments if your block gets knocked off the main chain...
1583	23118644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23118644	petertodd	Set a expiry height after they get knocked off the main chain and remove them from the map after n blocks? If n=100 is reached we have bigger problems...
1583	26687769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26687769	gavinandresen	Rebase needed.
1583	27047527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27047527	luke-jr	Rebased. For purging from the map.. how about when we see a block confirm a transaction using it as an input?
1583	27049542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27049542	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3293	28949144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28949144	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3287	28896993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28896993	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3283	28866291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28866291	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3283	28870812	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28870812	laanwj	ACK
3283	28951839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28951839	gavinandresen	Merging because I need this now for some regression tests Im writing.
3283	28962277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28962277	laanwj	I still think the proposed description would be somewhat better, as it doesnt only wait for start, but also when the server becomes unreachable for other reasons. Oh well...
3278	28695009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28695009	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3275	28667575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28667575	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3272	28648593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28648593	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3268	28631022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28631022	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3267	28680408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28680408	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3264	28565688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28565688	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3264	28566595	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566595	dertin	because is the failure? I do not understand.
3264	28566901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566901	laanwj	Strange. Seems like the block chain handling verification in the pulltester is failing, but I dont see how any of the changes here could cause that. Maybe something wrong with the tester.
3264	28575337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575337	jgarzik	Perhaps it is the -Werror testing that is problematic
3264	28576413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28576413	dertin	I added information about the change. - Add support for Clang - Further details can be found at
3264	28621533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28621533	laanwj	Thanks. However, you changed the pull request description but not the commit message :) (changing the commit message would also make the pull-tester rerun)
3264	28692972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692972	laanwj	Merged into #3278
3263	28566120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566120	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3263	28566748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566748	laanwj	ACK
3263	28575382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575382	jgarzik	ACK. Need a better commit message than "upgraded to serial X" Describe the changes we are importing.
3263	28577184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577184	dertin	I added information about the change. - Use ls -r in order to try newer version before older ones. Simplify ls pattern so also dylibs are detected.
3263	28692984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692984	laanwj	Merged into #3278
3262	28566535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566535	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3262	28575411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575411	jgarzik	ACK. Need a better commit message than "upgraded to serial X" Describe the changes we are importing.
3262	28577413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577413	dertin	I added information about the change. - Use ls -r rather than non-portable tool tac. Simplify filepattern in ls expression so dylib (on OSX) are also detected.
3262	28692989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692989	laanwj	Merged into #3278
3261	28566994	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28566994	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3261	28567422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567422	laanwj	ACK
3261	28575432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575432	jgarzik	ACK. Need a better commit message than "upgraded to serial X" Describe the changes we are importing.
3261	28577770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577770	dertin	I added information about the change. - Fixed detection of dynamic libraries on Mac OS X (*.dylib) - See for further details.
3261	28692996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28692996	laanwj	Merged into #3278
3260	28567464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567464	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3260	28567642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567642	laanwj	ACK
3260	28575282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575282	jgarzik	ACK. Need a better commit message than "upgraded to serial X" Describe the changes we are importing.
3260	28578507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28578507	dertin	I added information about the changes. - Fixed cut-and-paste error. - See for further details. - Use ls -r rather than non-portable tool tac. - Simplify filepattern in ls expression so dylib (on OSX) are also detected.
3260	28693017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28693017	laanwj	Merged into #3278
3259	28567495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567495	laanwj	BTW, for next time: for some straightforward change like this its better to combine the commits into one pull request
3259	28568021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28568021	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3259	28568093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28568093	dertin	Im just not working on my computer, and I did it the easy way. sorry.
3259	28568366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28568366	laanwj	ACK
3259	28575247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28575247	jgarzik	ACK. Need a better commit message than "upgraded to serial X" Describe the changes we are importing.
3259	28576922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28576922	dertin	I added information about the change. - Add aarch64 to the list of lib64 architectures
3259	28589117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28589117	Diapolo	What a cool commit-msg battle ^^, great you are supplying autotools updates :).
3259	28623003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28623003	wtogami	BTW, if aarch64 is a goal, last I checked protobuf lacks aarch64 support. Fedora has patches for it.
3259	28623015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28623015	wtogami	And yes, these commit messages need to be more descriptive of what it actually does, and it is annoying to have it split into multiple commits and separate PRs.
3259	28623508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28623508	laanwj	I dont think aarch64 is the goal per se, but it doesnt hurt keeping the m4s up to date with upstream.
3259	28693003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28693003	laanwj	Merged into #3278
3258	28563487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28563487	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3258	28567014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28567014	laanwj	`git diff -b` output is empty, merging
3257	28563880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28563880	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3257	28615671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28615671	Diapolo	Can you re-merge this, sorry for the confusion. Ping :).
3257	28895949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28895949	Diapolo	This shouldnt be open for so long, as it is uncontroversial IMHO...
3255	28513284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28513284	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3255	28555193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28555193	laanwj	Still need to test this but code changes ACK
3253	28488330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28488330	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3253	28507891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28507891	cozz	Regarding watch-only addresses: I would suggest to merge watch-only first, then I could maybe add watch-only-support to coin control. Depending on whether this is an easy change or not, I would like to have watch-only also visible in coin control. Maybe with a checkbox "show watch-only". I would add my brainwallet outputs as watch-only. It would be nice, if I could see those outputs in the coin control popup. Maybe even enabled, so I can play around with them. CreateTransaction should just fail, I guess, if you try to spend watch-only. Coin control is an expert-only feature anyway. Those outputs could be marked with an "eye-icon" for example. What do you think?
3253	28550975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28550975	laanwj	I rebased this to run through the test plan one last time and collect a last round of ACKs then finally get this merged (before a 0.9 feature freeze). Are you sure you want to postpone this further? Watch-only does not have a consensus to be merged. Though I think the functionality is extremely useful, my main user-facing nit with the current implementation is that it shows one balance that includes both spendable and unspendable coins. This has the potential for confusing users.
3253	28551459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28551459	luke-jr	Watch-only, as it currently is implemented, is not fit for merging ever... I agree with , lets get this in now.
3253	28558823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28558823	cozz	ok then, I just thought watch-only will be merged soon. I can also submit follow-up coin control pull requests to add more features like "add watch-only support" later.
3253	28564315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28564315	laanwj	Yes, you can always make changes again later after other things have been merged.
3253	28592467	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28592467	kuzetsa	Thanks for all the work on this. Ive been following this ever since I first heard about it.
3253	28608637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28608637	sipa	ACK changes to core; havent tested or looked at GUI changes.
3253	28622605	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28622605	laanwj	Thanks GUI can always be improved (but it works and is pretty nice already), its mostly the core changes that need to be fool proof. Going to merge this now, license headers can be added in a seperate pull.
3252	28489076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28489076	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3252	28519438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28519438	Diapolo	ACK of course (we need to ensure this time we push another master file update before RC phase starts).
3251	28484639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28484639	laanwj	Thanks, but please do language changes on Transifex: Its easier to coordinate there. Theyll be merged here periodically.
3251	28485143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28485143	dertin	Thanks for the comment about Transifex.
3248	28468498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28468498	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3248	28519484	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28519484	Diapolo	ACK
3247	28514712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28514712	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3247	28562278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28562278	Diapolo	Weird, seems I mixed up my branches as this pull is empty... see #3257 for new try ;).
3246	28397834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28397834	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3244	28389999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28389999	laanwj	Checked the test_bitcoin.exe produced by the pull tester on WinXP: no errors in sprintf_tests.
3244	28390939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28390939	brandondahler	continuing dicussion about using iostreams, would there be any known cross-compatibility issues with the switch?
3244	28391736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28391736	laanwj	This should be safe, and is only a very small change. As it works with the ancient mingw that pulltester uses (and on windows XP, which is the minimum Windows version that we support), it certainly works with latter ones. A later patch could switch to using boost::format and/or iostreams, but that would be a huge patch and touch every file and function in the core (breaking all other pull requests to boot!). So Id prefer to leave it at this for now and focus on more important issues.
3244	28405343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28405343	Diapolo	Tried it, still results in the compiler spaming warnings for me...
3244	28406047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28406047	laanwj	but does the resulting bitcointest work? I guess the reason that you get warnings is that the ATTR_WARN has to be changed to use C99 conventions too on WIN32: #define ATTR_WARN_PRINTF(X,Y) __attribute__((format(printf,X,Y))) Can you try changing it to? #define ATTR_WARN_PRINTF(X,Y) __attribute__((format(gnu_printf,X,Y))) Edit: already pushed this, works on other OSes too, yippie, no need for win32-specific exception
3244	28406202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28406202	Diapolo	Let me check the executable...
3244	28408124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28408124	Diapolo	<pre> Running 103 test cases... *** No errors detected </pre> Win7 x64 with the test_bitcoin.exe from pulltester above. Still weird...
3244	28408364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28408364	Diapolo	Your latest change leads to this warnings: <pre> C:\Users\Diapolo\bitcoin.Qt\src\util.h: Warnung:format %d expects argument of type int, but argument 3 has type int64_t {aka long long int} [-Wformat=] #define strprintf(format, ...) real_strprintf(format, 0, __VA_ARGS__) ^ </pre> or <pre> C:\Users\Diapolo\bitcoin.Qt\src\util.h: Warnung:format %u expects argument of type unsigned int, but argument 4 has type uint64_t {aka long long unsigned int} [-Wformat=] #define LogPrintf(...) LogPrint(NULL, __VA_ARGS__) ^ </pre> Edit: Wait... this was with my former patch applied, trying a new compilation...
3244	28409911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28409911	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3244	28410112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28410112	Diapolo	ACK
3241	28306935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28306935	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3240	28292687	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28292687	laanwj	Removed the faux progress message. I also want to get the GUI working in a limited way (or if not possible, at least non-crashing).
3240	28294708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28294708	laanwj	Voila ![nowallet](https://f.cloud.github.com/assets/126646/1522105/205eb652-4ba2-11e3-97fd-02aa2f288357.png) Yes, I know the window title still has "Wallet" in it, but apart from that nothing wallet-related is shown and all wallet-related actions and menu options are disabled (which means that apart from Quit and About and such only the Options and Debug Console commands are active, but those could be useful... :pizza:)
3240	28368770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28368770	wtogami	Disable Wallet for Bitcoin 0.8.5. Backported the -disablewallet GUI support.
3240	28378067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28378067	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3240	28392487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28392487	jgarzik	Thanks for pushing this over the finish line. I just got back into the office from family stuff.
3238	28245304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28245304	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3238	28245874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28245874	Diapolo	Seems unrelated: <pre> tail: write error: Broken pipe tail: write error </pre>
3238	28273257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28273257	Diapolo	Can you take a look?
3238	28274464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274464	laanwj	Just curious: why not add a default arguments to getOpenFileName, thatd be a smaller change?
3238	28274533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274533	Diapolo	IMHO its too easy to rely on default args, so I thought removing them would be better here.
3238	28276451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28276451	laanwj	Meh, the default arguments also dont really make sense (why would you want to provide empty messages), except for the final output argument.
3237	28246004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28246004	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3237	28265240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28265240	wtogami	Please verify that it continues to build and work as expected with the Precise 12.04-based win32 gitian which has mingw based on gcc-4.6.x.
3237	28274159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274159	laanwj	If I understand this correctly youre giving yourself too little credit. This does not only silence warnings, but it *fixes printf format strings throughout the source code* for Windows builds. ACK in any case
3237	28276499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28276499	laanwj	Maybe we should add some sprintf tests to catch problems with this in the pulltester.
3237	28287549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28287549	laanwj	Can you try removing the inttypes.h include completely on WIN32? I think its only used for PRId64 (and friends) at this point and we shouldnt use C99 headers on WIN32.
3237	28312005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28312005	Diapolo	Ill check this out tomorrow... thanks for helping out.
3237	28364678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28364678	brandondahler	this only coincidentally fixes most instances of the warning because util.h is depended on by almost every file (indirectly at least). The inttypes.h include is spread across all of the files that use PRI[xdu]64 directly. I would rather spend some time getting rid of all of the *printf functions and replace them with [i,o][,f,string]streams where appropriate. Once that is done, there will be no dependence on inttypes.h anywhere.
3237	28372327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28372327	laanwj	It is quite urgent to fix this because it breaks strprintf on Windows XP and earlier (see have you checked how much strprintf is used? Theres at least 130 direct usages. Converting that all to iostreams would be a massive endavour. Had I realized that inttypes.h was C99 I would not have ACKed your refactor :/ ` So unless we revert all those changes it forces us into the C99 route for the short term even on Windows. Thus to define `__USE_MINGW_ANSI_STDIO` and use the mingw C99 equivalent functions. Id rather not have because this burns all the bridges to MSVC support, but no one cared about that anyway so its not much of a loss. *In the longer term* `boost::format` is a typesafe printf-backward-compatible function that natively uses std::strings, so I think that would be the way to go to replace strprintf. The syntax is different though (http://www.boost.org/doc/libs/1_55_0/libs/format/doc/format.html) so this still implies quite a lot of work.
3237	28384587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28384587	laanwj	Continued in #3244
3235	28210420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28210420	laanwj	ACK (no code changes)
3235	28212504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28212504	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3235	28235369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28235369	wtogami	ACK
3234	28243866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28243866	Diapolo	If wallettools folder is empty, that should also be removed, didnt look into it ^^.
3234	28255590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28255590	super3	I believe it has, or at least in my repo it is.
3234	28274669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274669	laanwj	Im fine with removing them. Indeed, bitrpc.py provides the same functionality with regard to `walletpassphrase` / `walletpassphrasechange`. pwd = raw_input("Enter wallet passphrase: ") access.walletpassphrase(pwd, 60) IMO what would be nice functionality is parsing rpcuser/rpcpass from the bitcoin.conf like bitcoind/bitcoin-cli does, instead of asking for it every time or having to put it in the script. In any case thats not related to this issue :)
3234	28274932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28274932	super3	Noted. Will take a look at that when I throw in my bitrpc changes.
3234	28405174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28405174	laanwj	I wonder how many people are using these utilities actively, and if they know they can use bitrpc.py for the same. I find only one mention of the utilities in a 2011 topic on bitcointalk, by Gavin: See also issue #2318
3234	28432088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28432088	super3	To avoid any confusion, I will add this info to the README in the next commit. On Wed, Nov 13, 2013 at 10:44 AM, Wladimir J. van der Laan < notifications@github.com> wrote: > I wonder how many people are using these utilities actively, and if they > know they can use bitrpc.py for the same. > > I find only one mention of the utilities in a 2011 topic on bitcointalk, > by Gavin: > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/3234#issuecomment-28405174> > . > -- Shawn Wilkinson Student, Morehouse College Bitcoin Developer/Entrepreneur/Enthusiast (1P4QkLsujBPBZyUwDezikL4fUSs7JvFhPv) me@super3.org
3234	28577296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28577296	super3	Fixed. Have explicit instructions to use bitrpc.
3234	28590157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28590157	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3233	28188364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28188364	laanwj	Hm - some problem with dbus in the pulltester results.
3233	28194998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28194998	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3232	28180650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28180650	imton	:+1:
3232	28181609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28181609	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3231	28172804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28172804	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3231	28178125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28178125	laanwj	ACK Edit: not sure either whether the instructions for (for example) Windows are correct (can you comment but its more useful than what there is now.
3223	28082603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28082603	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3222	28046696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28046696	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3215	28199460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28199460	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3211	28026949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28026949	brandondahler	Renamed leveldb.{h,cpp} to leveldbwrapper.{h,cpp}, rename class CLevelDB to CLevelDBWrapper. Reverted original Makefile.am change, updating it with the new file names.
3211	28028817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28028817	sipa	ACK on changes. Please squash the commits.
3211	28033210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28033210	brandondahler	Rebased, squashed, fixed problems.
3211	28109380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28109380	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3209	27799996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27799996	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3209	27959894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27959894	laanwj	Its not duplicated: event() detects a capslock key press in the dialog, whereas the eventFilter (which subscribes to events from the QLineEdits) uses a rough heuristic to detect characters that cannot be produced with/without shift. ACK otherwise
3208	27800394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27800394	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3208	28040806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28040806	Diapolo	Closing in favor of #3215.
3205	27789172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27789172	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3204	27790164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27790164	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3204	27798514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27798514	Diapolo	Guess it could be good in the future to keep it anyway, closing!
3204	27882398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27882398	laanwj	Yes, seems like a useful signal to keep around
3199	28121100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28121100	gavinandresen	These should move to coins.cpp, too, I think: ``` main.cpp:const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input) main.cpp:int64 CCoinsViewCache::GetValueIn(const CTransaction& tx) main.cpp:bool CCoinsViewCache::HaveInputs(const CTransaction& tx) ```
3199	28131884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28131884	sipa	Nice catch, done.
3199	28139227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28139227	sipa	Rebased.
3199	28139349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28139349	gavinandresen	ACK assuming pull-tester is happy.
3199	28148010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28148010	sipa	Lets delay this until #2767 is merged.
3199	28157139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28157139	sipa	Rebased on top of #2767.
3199	28157687	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28157687	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3199	28167941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28167941	gavinandresen	ACK; re-tested running -debug=mempool on the main network, with additional testing running a couple of -regtest peers (creating blocks, sending transactions back and forth, etc).
3198	27723210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27723210	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3198	27737921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27737921	sipa	ACK
3197	27696756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27696756	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3197	27701303	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27701303	sipa	ACK
3197	27709578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27709578	Diapolo	ACK
3196	27685887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27685887	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3196	27700731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27700731	sipa	ACK
3193	27624752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27624752	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3193	27627281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27627281	sipa	ACK
3193	27637396	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27637396	wtogami	ACK
3192	27599260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27599260	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3192	27601605	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27601605	gavinandresen	It is a reasonable belt-and-suspenders sanity check; we dont want to call ::GetSerializeSize if vtx.size() is something ridiculous. So NACK from me.
3192	27617234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27617234	sarchar	How about this: Define another constant MAX_TRANSACTIONS_PER_BLOCK and give it the same value as MAX_BLOCK_SIZE? Doing this would give this code a more natural reading..
3192	27622313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27622313	sipa	Id rather not have an explicit constant, but instead compute it on the fly if it is needed for belt-and-suspenders. e.g.: ``` static const int MINIMUM_TRANSACTION_SIZE = ::GetSerializeSize(CTransaction(), SER_NETWORK, 0); static const int MAXIMUM_TRANSACTIONS_PER_BLOCK = (MAX_BLOCK_SIZE - ::GetSerializeSize(CBlockHeader(), SER_NETWORK, 0)) / MINIMUM_TRANSACTION_SIZE; ```
3191	27546766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27546766	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3191	27957185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27957185	laanwj	I did a full windows+linux+deps build with this, and it worked. Ive also tried "corrupting" inputs/openssl-1.0.1c.tar.gz by gunzipping and gzipping it, and this caused the build to fail with the following in build.log: + echo 2a9eb3cd4e8b114eb9179c0d3884d61658e7d8e8bf4984798a5f5bd48e325ebe openssl-1.0.1c.tar.gz + sha256sum -c openssl-1.0.1c.tar.gz: FAILED sha256sum: WARNING: 1 computed checksum did NOT match ACK.
3189	27396495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27396495	laanwj	ACK otherwise
3189	27407449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27407449	Diapolo	Updated: - add new parseWalletModelSendCoinsReturn() function, which parses the status of WalletModel::SendCoinsReturn and generates a pair consisting of a message and message flags - result is we only need one emit message() call
3189	27411155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27411155	Diapolo	So, time for review ;).
3189	27440325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27440325	Diapolo	Updated: - renamed new function - re-add explicit check for ``WalletModel::OK``
3189	27444629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27444629	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3188	27464508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27464508	wtogami	ACK
3188	27573291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27573291	petertodd	ACK
3188	27622356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27622356	sipa	ACK, though Id go further and remove -logtimestamps entirely. Rebase please.
3188	27633343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27633343	Diapolo	Rebased...
3188	27633730	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27633730	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3188	27643113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27643113	mikehearn	As an interesting bit of history, IIRC the reason they were off by default is that Satoshi had a paranoia attack and was worried about someone gathering logs from lots of nodes to correlate timestamps. In a world where intelligence agencies tap major fibre backbones and other people simply connect to every node and time relays, it seems clear to me that the value of having more useful logs massively outweighs that concern.
3188	27644136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27644136	sipa	Agree with here.
3188	27644686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27644686	laanwj	ACK
3187	27467673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27467673	laanwj	I think we should aim to get initNetManager() up as soon as possible, if possible as soon as PaymentServer is created, not postpone it further. As I see it: The sooner it can process incoming URIs and payment requests and save them up in savedPaymentRequests, the sooner it will no longer launch a new GUI when a new URI is clicked. But I may be wrong...
3187	27503193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27503193	Diapolo	AFAIK, I think you are wrong here. URIs are pre-processed and stored in ``savedPaymentRequests`` via ``ipcSendCommandLine()``. Which is done early in init. ``initNetManager()`` on the other hand isnt even used for sending saved requests to a local TCP server (nor is a proxy used for this), but for fetching payment requests from remote servers. So I see no reason to not do it like in this pull. No cons, but a few pros (saved ``assert()``, possibility to use ``message()``).
3187	27504056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27504056	laanwj	I know it is used for receiving requests from remote processes. However, lets say that the user does not have a bitcoin client running then clicks on two bitcoin: URIs in a short timespan. What happens? The first click will start bitcoin-qt adn queue the first URI. However, the second click will start a second bitcoin-qt, which will continue because there is no server listening yet, and then fails due to the data directory lock. The second URI is probably lost. By starting the payment server as soon as possible, the second click would be queued in the first process and simply be processed when possible when the first instance reaches uiReady.
3187	27506418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27506418	Diapolo	It all depends on ``QTimer::singleShot(100, paymentServer, SLOT(uiReady()));`` in bitcoin.cpp anyway?
3187	27687648	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27687648	Diapolo	I still think this is valuable ;).
3187	27882113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27882113	laanwj	Agreed; initNetManager does something else than I thought it does Nit: you can make initNetManager private after this
3187	28040221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28040221	Diapolo	Updated: - make initNetManager() private
3187	28041085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28041085	Diapolo	Updated: - update paymentservertests.cpp
3187	28200792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28200792	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3185	27488114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27488114	petertodd	Can you explain what actions you expect implementations to take in response to a block rejection message?
3185	27530058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27530058	gavinandresen	once an implementation is mature, I expect it would do nothing in response to a block rejection message, because false-positives (attackers being annoying) will be more common than true positives. While an implementation is being developed, I expect the developers will investigate every rejection message. I thought I was pretty clear in the gist that is the purpose of this message: "In short, giving peers feedback about why their blocks or transactions are dropped or why they are being banned should help interoperability between different implementations"
3185	27568931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27568931	mikehearn	Looks good to me. Thanks for doing this.
3185	27569097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27569097	jgarzik	Looks easy to fill up the disk with a stream of remote reject messages.
3185	27570084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27570084	mikehearn	If youre thinking of logs, theyre rotated anyway, I thought (or could be). Anyway making log rotation work nicely is an unrelated change.
3185	27571797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27571797	jgarzik	Thats a dodge. Theres no rate limiting, youre still streaming from remote -> local disk.
3185	27572075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27572075	petertodd	Right, so youre basically saying block rejection messages could be useful for an alt-implementation thats being used for mining. We know that the state of computer science isnt close to the point where we can do that safely; I personally a half-dozen forking bugs across a few alt-implementations the other week after an hour or two of work spent auditing them. We dont want to encourage that, and giving them handy rejection messages does. When it comes to blocks, the only useful feedback you can give them is "stop doing that". We dont need rejection messages for that; blocks get orphaned says that just fine already.
3185	27572266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27572266	petertodd	Looks to me like you could dump a 32MiB rejection message into your remotes logs, and whats worse is that I dont see anything stopping you from making fake logs by putting newlines in that rejection message. Ugh.
3185	27572417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27572417	mikehearn	Its not a dodge. You can fill up the logs just by connecting repeatedly as well, or sending messages that cause a Misbehaving(0) to be hit, or lots of other things. Thats just not something thats currently in our threat model. If you want to strengthen the bitcoind threat model to include "attacker filling up logs" then go ahead and do that on a new set of changes. Its just irrelevant to this change. But Id suggest working on the more problematic DoS attacks first. Being able to make fake logs is perhaps more of an issue, but that can be resolved just by forbidding newline characters (or heck, spaces) in the messages.
3185	27573153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27573153	petertodd	Should be forbidding anything non-ascii-standard, newline and carriage return, and limit messages to, say, 256 characters. (we did something similar with alert messages right?)
3185	27589382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27589382	gavinandresen	: Reject messages are only logged if you are running -debug=net (or -debug which means "everything"). I am assuming that you will only run -debug=net when you are, you know, debugging, and probably controlling who you are connecting to. Ill add a "print out only the first 111 bytes", that should be sufficient belt-and-suspenders.
3185	27590628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27590628	petertodd	I run all my nodes with -debug=net all the time so that if something odd happens with the network (e.g. the chain fork) I can debug it; Ive got stacks of disk space and io bandwidth. Filtering out garbage, especially newlines, is an absolute must. Also, still NACK on block messages.
3185	27591220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27591220	gavinandresen	duly noted. Everybody else: any objections? If pull tester is happy, Im going to pull.
3185	27592756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27592756	gmaxwell	We probably shouldnt allow control characters in printfs from the network. I dont believe we do anywhere else (and Id looked some back when the OSX unicode crasher happened). Beyond log entry emulation free access lets you trash peoples terminals. Running the text through a URL encode would probably be a trivial way to avoid trouble.
3185	27594574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27594574	gavinandresen	: good point RE: -printtoconsole. Two commits now-- the first refactors the code we have in alert for sanitizing a string into a util.h SanitizeString method. Please dont suggest super-optimizing it with a lookup table, this is not performance-critical code. The second limits the text printed to debug.log if -debug or -debug=net to 111 safe characters. : Id get less annoyed if you made helpful observations like "dont we do something like that processing alerts..." up front. Maybe it is just me, but I constantly get the feeling you are trying to torpedo other peoples ideas instead of trying to work together to be helpful.
3185	27594805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27594805	petertodd	I hadnt read the code until today. Also, limit the string to 111 characters first, then sanitize it.
3185	27597490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27597490	gavinandresen	: I think Ive addressed all your concerns, Id really like to move on to bigger and better things (almost have a relay-first-doublespend pull ready), can I get "good enough to pull" ACKs ?
3185	27664061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27664061	gavinandresen	Rebased to fix conflicts with mempool refactor. Fixed the alert unit tests so bumping protocol version doesnt make them break any more, and bumped the protocol version to 70002.
3185	27674594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27674594	laanwj	ACK Implementation nit: in all call sites the reject reason message is kind of duplicated in the logged error message, the the point of both simply being reworded versions of each other. It may make sense to reuse the same message except where two different messages are really needed (ie for privacy/security concerns).
3185	27675171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27675171	mikehearn	Looks good to me
3185	27679329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27679329	Diapolo	I thought the same, many strings seem just to be small modifications and tend to be dups even in some cases.
3185	28165720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28165720	gavinandresen	Rebased. RE: duplicating strings for debug.log and the reject message: I decided a fix would be worth than the disease. Cant resist: "A foolish consistency is the hobgoblin of little minds, adored by little statesmen and philosophers and divines." -- Ralph Waldo Emerson
3185	28166122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28166122	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3185	28178040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28178040	laanwj	right, if it were translated messages itd be different
3184	27298622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27298622	laanwj	Looks good
3184	27298775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27298775	laanwj	ACK, this is certainly an improvement over what is there
3184	27308824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27308824	sipa	There seems to be a lot of duplication (the example command lines in particular). Mind moving the generation of those to a common method?
3184	27366087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27366087	sje1	Thanks for the comments. I have done a few updates. I had done this on the 0.8.5 branch and tested the output, but havent been able to figure out how to build the head to verify it (on centos 5)
3184	27366560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27366560	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3184	27369520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27369520	laanwj	what problem do you have building head on centos 5?
3184	27457440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27457440	sje1	i was building 8.0.5 by building each dependency (boost, db, openssl), then setting the paths in the Makefile. on centos 5, not sure how to update or install the latest autoconf > ./autogen.sh > configure.ac:2: error: Autoconf version 2.60 or higher is required on centos 6, autoconf is ok, i couldnt get it to use my boost but it worked with the built-in one, but key.cpp fails with lots of undefined references > key.cpp:184: undefined reference to `EC_KEY_set_conv_form
3184	27686682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27686682	laanwj	The key.cpp errors could have to do with Centos not including the ecc parts of OpenSSL? I remember there was the same issue with Fedora due to patents. Though this would be nothing new with autoconf. Edit: But is this ready for merging otherwise?
3184	27700816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27700816	sipa	Sounds like youre building against a non-ECC OpenSSL build, indeed.
3184	27882852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27882852	laanwj	You need to use fully qualified std::string in the .h file, hence the pull tester errors: In file included from noui.cpp:8: bitcoinrpc.h:155: error: string was not declared in this scope bitcoinrpc.h:155: error: string was not declared in this scope bitcoinrpc.h:156: error: string was not declared in this scope bitcoinrpc.h:156: error: string was not declared in this scope make[3]: *** [noui.o] Error 1
3184	28182266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28182266	laanwj	any luck yet? If not, mind if I take over this pull request and get it merged before other RPC changes?
3184	28395610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28395610	laanwj	Continued in #3246
3184	28560832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28560832	sje1	thanks for taking over, i havent figured out how to build yet :)
3180	27267607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27267607	gmaxwell	Id really rather be never sleeping (except when waiting for IO, then event driven). Otherwise the delay will still delay block propagation.
3180	27267970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27267970	pstratem	The problem is this isnt entirely about IO. SendMessages is actually largely a polling function with timers and other logic not dependent on IO.
3180	27282153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27282153	cjdelisle	I understand this is important and it should be validated and pulled. I took a look at the code and as I understand it, it does the following: 1. If a single getdata contains multiple requests, only the first those up to and including the first request for a block will be serviced. 2. ProcessMessages will only process one message at a time so one message will be parsed from each node with outstanding messages to process rather than processing all outstanding messages from each node before moving on the the next. 3. Dont sleep if there are still outstanding messages to be processed, this alone should improve performance. Although Im not particularly well versed in the bitcoin codebase this commit has my ACK on a code basis. I have built and tested it on my laptop and a vm which I -connect=<my laptop> and it synced the chain just fine. My laptop is showing surprisingly high processor load but its also serving a lot of block downloads on the order of 100kB-1500kB/s upload speed. Does anyone know if 100% processor load on one core is normal for bitcoin under these circumstances? I want to be sure there is no perf regression in the ProcessMessages codepath since it drops out of the function for each message when there are multiple messages stacked.
3180	27287037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27287037	cjdelisle	My assumption 1. turns out to have been wrong. This does not actually change the behavior of the node WRT how it handles requests with multiple getdata(block) in them. It simply drops out and leaves the balance of the requests till later which will be at most 100ms later when ProcessMessages() is next called. In ``` if (!pfrom->vRecvGetData.empty()) ProcessGetData(pfrom); ``` Youll want to add another `if (!pfrom->vRecvGetData.empty()) return fOk;` so that it doesnt try to continue parsing until the previous getdata is completely parsed.
3180	27346328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27346328	pstratem	The goal here is for the loop to process 1 item from vRecvGetData and/or 1 item from vRecvMsg per peer. Probably ProcessGetData should be moved outside of ProcessMessages entirely, but that is outside the scope of this patch (I think).
3180	27353282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27353282	pstratem	I see what youre getting at, I have made the suggested change.
3180	27353668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27353668	gavinandresen	ACK on the general idea of round-robin-processing requests. I havent had time to code review or test.
3180	27356634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27356634	sipa	ACK on approach and implementation. Havent tested. Some commits can be squashed together. In particular 3rd, which is a bugfix for the second.
3180	27378066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27378066	cjdelisle	Tested the patched version, still getting occasional 100% CPU. I think perhaps we should return a different value from ProcessMessages() if we do not want the calling routine to sleep, that allows us to be more explicit than checking that the queues are not empty. Its just difficult to reliably prove that there is no other way out of ProcessMessages() which leaves non-empty queues.
3180	27447743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27447743	pstratem	There are only 2 paths where ProcessMessages can run without consuming a message in vRecvMsg. Either the send buffer is full or the next message in the queue is not complete. I agree that a more general solution should be applied, but probably later as part of a larger reorganization of the networking code.
3180	27622551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27622551	sipa	Rebase please?
3180	27664928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27664928	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3180	27665608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27665608	gavinandresen	Tested on OSX, behaves properly. Message-handling should be eventually be reworked to use boost:asio (never sleep, be I/O event driven as suggests) and to use some sort of active queue management to mitigate denial-of-service attacks. But this code is better than what weve got, so I am going to merge.
3180	27681800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27681800	darkhosis	Ah, I already had a similar change in my bitcoind for a year or so (though in my case, I simply reduced this 100ms to 10ms). I guess thats why blockchain.info always picked up so much stuff. I thought it may be because of the 20ms latency.. It would explain the four blocks picked up by blockchain.info from 198.12.127.2, which Im running w/ similar settings (just sending out far fewer transactions).. didnt think itd have such an impact
3179	27234074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27234074	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3179	27236069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27236069	laanwj	Im not sure that I understand -- why not simply fail if a bitcoin URI contains an invalid address or the payment request cannot be read?
3179	27358005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27358005	gavinandresen	NACK, subtle behavior like this is fertile ground for security issues. If the address or request isnt valid then an error is the right thing to do.
3179	27372314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27372314	Diapolo	See, the problem is, if I supply an invalid address in an URI, but have a running Bitcoin-Qt instance a new one is started, which wont work, because there is one running already ^^. This patch tries to deliver the faulty bitcoin: URI and THEN displays a nice warning message.
3179	27374489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27374489	laanwj	Itd be better to shortcut this. Display the error message immediately without launching or dispatching anything.
3179	27376865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27376865	Diapolo	Good idea, but this is not possible, as ``GUI hasnt started yet so we cant pop up a message box.``.
3179	27378176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27378176	laanwj	I know, but there are ways around that; for example you could remember the error, then show it and exit after the GUI is initialized (but before spinning any core stuff).
3179	27379278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27379278	Diapolo	Tell me, is it easier/better UX wise to (try to) send an invalid URI to a running server and get a nice error message or show a saved error that the URI could not be parsed (via QMessageBox in init.cpp) and then another error, which tells that you already have a running instance, because when ipcSendCommandLine() fails we try to start a new instance (which also is not recommended to let an instance start by clicking an URI, because of missing command-line switches ^^).
3179	27380101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27380101	laanwj	Eh, I just checked bitcoin.cpp and PaymentServer::ipcSendCommandLine is called *after* the GUI initialization. The QApplication object is created and translations are loaded, which is far enough along to show a dialog box and exit. Whats the problem? Theres no need to let it come as far as creating an actual instance. Exit before the second error.
3179	27380869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27380869	Diapolo	I relied on Gavins comment I quoted above ``GUI hasnt started yet so we cant pop up a message box.``. sorry.
3179	27382927	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27382927	laanwj	Hehe, yeah, sometimes no comments is better than an outdated, no longer valid comment
3179	27390617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27390617	Diapolo	Can we exchange a few more thoughts on this Please? Take another look at ``ipcSendCommandLine()``. Currently we have 2 checks for normal URIs that can fail ``GUIUtil::parseBitcoinURI()`` and ``CBitcoinAddress::IsValid()``. Both of which are used _just_ to detect the active network (for sending the received URI to the TCP local sever), we currently dont use them to reject invalid URIs or show any message. Now add my change, which just first tries to send to the mainnet TCP local server and if that fails tries testnet TCP local server and if that fails client associated with bitcoin: is started (which, as I said is not recommended). IMHO its ugly and unneeded to use static QMessageBox calls to show messages to the user in ``ipcSendCommandLine()``, if we would just say try mainnet first and testnet otherwise and remove the pre-checks (which are done later in the client again, if we parse the URIs for real usage) this would reduce code complexity and allows us to handle all URI or payment-request related checks later when client is fully initialized.
3179	27392684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27392684	laanwj	I understand what you mean but this is a weird edge case anyway: ideally, users should not encounter malformed URIs and payment requests. We shouldnt be spending this much time on it. The only thing that matters here security, and clear feedback that something is wrong. A simple QMessageBox does as well as anything here. The pre-check here would try to figure out whether the URI/payment request is testnet or mainnet, *only* if it cannot figure out it should error out prematurely. It does not need to do further checking on the URI, as that can happen later on. Its not really a problem if some input checking happens in two places. Better be safe than sorry.
3179	27396842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27396842	Diapolo	Closed until further notice ^^.
3177	27204242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27204242	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3176	27203869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27203869	Diapolo	Updated: - add a check for CKey::size() of a and b (size can be 0 or 32)
3176	27204030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27204030	laanwj	ACK
3176	27206411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27206411	laanwj	Looks like something is wrong with the pull tester.
3176	27206636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27206636	Diapolo	Indeed can you take a look?
3176	27229564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27229564	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3176	27232054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27232054	jgarzik	Why change hardcoded 32 to size check + variable size memcmp? Defeats compiler builtins, but meh, ACK anyway I suppose.
3176	27233352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27233352	laanwj	agreed, though this has the advantage that it (indirectly) compares the valid status of the key, which was not considered before. And in any case this is a function thats not used at all so its not exactly performance critical, could even argue for removing it.
3176	27242114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27242114	sipa	ACK
3176	27247745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27247745	jgarzik	If its dead code, remove it.
3176	27358038	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27358038	gavinandresen	Agree with remove the dead code entirely, dont try to fix it.
3176	27370552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27370552	Diapolo	Ouch, Im sorry to say but this code IS used in:
3176	27371028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27371028	gavinandresen	... which is used by the bip32 unit tests. Got it. ACK.
3176	27374395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27374395	laanwj	Is it? I made all those functions private once, and managed to compile everything including the tests. Maybe it was introduced recently? In any case, keeping a == operator around is sane, even if it isnt used.
3175	27194556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27194556	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3174	27193444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27193444	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3173	27192285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27192285	laanwj	I agree that this is useful. However Im not sure whether we should include test/fuzzing/stresstest code in the core. If we want this we should put it in #ifdefs, add a configure option to enable it and not ship it in gitian builds (IMO).
3173	27192916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27192916	Diapolo	I tend to agree, I remember I wanted to include an GCC stack smashing protection test via a switch, which seemed not like a good idea in the end. A guard via ``#ifdef ALLOW_FUZZTEST`` and a compiler option would be good IMO.
3173	27193912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27193912	gmaxwell	make it only fuzz localhost peers? :)
3173	27203419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27203419	petertodd	ACK Lets not make barriers to this kind of testing like having to compile it in; implementations should be robust enough to handle junk getting sent at them from the occasional buggy peer. If they arent that robust, they need to be improved frankly. edit: been running this for a few hours, and it looks like Bitcoin itself can be crashed due to the fuzz-tester...
3173	27208210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27208210	jgarzik	ACK.. no objection to it being a runtime feature.
3173	27208902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27208902	laanwj	At least keep it undocumented in `-help` then. There is already such a huge list of command line options, lets not add options that are not useful for 99.9% users and will cause them to be banned if they add it by accident.
3173	27266317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27266317	gavinandresen	Added a comment to make it clear the -*messagestest options are not documented on purpose, since they are for implementors, not end-users. I do think this should be a built-in run-time feature, it should be very helpful to re-implementors who are likely to be programming in a different language and might not want to bother setting up a dev environment to build themselves. Tweaked with suggestion to use GetArg instead of atoi (made it default to 1-of-10 messages fuzzed because that seems about right). please file a bug or send an email to bitcoin-security@lists.sourceforge.net if you found a bug or a vulnerability.
3173	27272198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27272198	gavinandresen	Rebased; fixed a crashing (assertion failed) bug caused by the fuzz-tester deleting at the beginning of the CDataStream (normal bitcoin usage never does that).
3173	27273652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27273652	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3173	27367469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27367469	petertodd	Been running this for about a day with the crash fix and -fuzzmessagestest=100 No problems found.
3169	27180070	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27180070	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3169	27191992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27191992	laanwj	It makes conceptual sense for Wallet*View* to subscribe to the Wallet*Model*. I dont really like this change, sorry.
3164	27165209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27165209	TheBlueMatt	Its testing now, I think it will come through, but I need to throw some tmpfs on the server to make it run in reasonable time...so dont merge anytime soon.
3164	27190280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27190280	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3164	27190535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27190535	gavinandresen	ACK
3163	27154905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154905	sipa	Tested it myself. I can reproduce the failed disconnect at startup in master, but no problem appears with this patch.
3163	27155235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27155235	gmaxwell	I can also confirm that it makes the startup problem go away. Perhaps we should add a couple of test cases with these in a reorg in pulltester before we call it cured? (E.g. four transactions: 1 op_return, 2 op_return, 1 op_return and one regular, in both orders. Mine them, reorg them out, put them back in later.)
3163	27156326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27156326	sipa	PullTester doesnt seem to be running the comparison tool anymore.
3163	27188408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27188408	petertodd	Odd, I tried to reproduce the problem in git master with ./bitcoind -checkblocks=10500, which is more than enough to check the failing block, but Im not seeing the error. Tried default checklevel, and checklevel=4 as well.
3163	27188535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27188535	gmaxwell	not odd at all, the reorg test is memory limited and only goes as far back as the dbcache size allows. Effectively the checklevel is lower for blocks further back than that.
3163	27188960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27188960	petertodd	Ah. With -dbcache set appropriately I can reproduce the bug on master, and this pull-req fixes it. I think this patch needs some comments explaining whats going on re: the immediately pruned case, but otherwise looks good. Maybe something like the following: Check that all outputs are available and match the outputs in the block itself exactly. Note that transactions with only provably unspendable outputs wont have outputs available even in the block itself, so we handle that case specially with outsEmpty. Finally itd be ideal if GetCoins() had an assert checking that the database never had an empty CCoins structure in it, although youd need to either do this three times: CCoinsViewCache::GetCoins(), CCoinsViewDB::GetCoins() and CCoinsViewMemPool::GetCoins() or make a wrapper function in CCoinsView()
3163	27211942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27211942	jgarzik	ACK... lets get this merged. This fixes testnet for me.
3163	27213186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27213186	sipa	An empty CCoins cannot even be serialized - there is no storage format that corresponds to. Enough as a guarantee that it doesnt occur in the database? :)
3163	27213484	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27213484	sipa	Updated with peters suggestions.
3163	27214065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27214065	petertodd	Thats a pretty good guarantee! ACK
3163	27214294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27214294	Diapolo	Currently integrating this in a local build to also see if it helps :).
3163	27214315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27214315	jgarzik	retested and re-ACK w/ updated equality check
3163	27221314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27221314	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3163	27222254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27222254	gmaxwell	ACK
3162	27152766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27152766	jgarzik	ACK
3162	27152786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27152786	sipa	Updated, this will not fix #2806. There is an additional problem with datetime/locale conversion.
3162	27153022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153022	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3162	27223799	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27223799	laanwj	ACK
3161	27153229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153229	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3161	27178121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27178121	Diapolo	I messed up the pull, will re-open when I fixed it ^^. Edit: I killed it and created a new one -_-!
3160	27178253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27178253	Diapolo	This one should be save to merge, no "weird" changes to signals and slots :-D.
3160	27180263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27180263	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3159	27442106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27442106	Diapolo	Updated: - moved connect() to WalletView :)
3159	27445278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27445278	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3158	27151921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27151921	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3155	27143135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143135	sipa	ACK
3155	27143276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143276	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3155	27177389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27177389	jgarzik	ACK
3155	28047767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28047767	wtogami	Anything stopping this? We have two core ACKs.
3154	27144149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27144149	Diapolo	Is it good / wise or just unneded to enable the -checkmempool with a normal node? Do we work towards enabling this as default in the future? Just want to get some insight on it :).
3154	27144971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27144971	jgarzik	Looks mostly OK. One issue: the locking for the mempool lookup inside ProcessMessage() seems to have changed.
3154	27145188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27145188	sipa	I like the idea of moving this out, but this doesnt really encapsulate it cleanly. A suggestion to obtain that: * CTxMempool should just be a data structure with associated logic to remain consistent, and not contain part of the validation logic. So, CTxMempool::accept should remain in main (as a function, not a CTxMempool method). * That means no forward declaration of CValidationState in txmempool.h. * Also no need to move the EraseFromWallets callback from main to txmempool (that certainly doesnt belong there). * The mempool object should remain inside main, and not move to txmempool (main just becomes a client that uses one instance of it). * txmempool.h/.cpp can just include core.h then, which means no circular dependencies at all.
3154	27145198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27145198	jgarzik	+1
3154	27184461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27184461	gavinandresen	: good idea.
3154	27189086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27189086	petertodd	Agreed. FWIW I wound up implementing a CTxMempool style thing myself when I was looking at doing a child-pays-for-parent mempool, so I think thats the right general direction to go in.
3154	27356567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27356567	gavinandresen	Rebased and updated as per suggestions. locking has changed, but should be safer than before because there are many fewer cases of "reach inside and LOCK(mempool.cs)". Id like to make the mempool critical section private, but I think that should be done in a future refactor (we will probably need a "give me a snapshot copy of the memory pool"; but that should wait until after implementing a memory-limited mempool, I think).
3154	27382502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27382502	sipa	ACK design and implementation. Havent tested, and havent checked that the moves are really move-only.
3154	27622529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27622529	sipa	An alternative and perhaps cleaner solution to passing the LookupFromTip pointer: * Move CCoinsView, CCoinsViewBacked and CCoinsViewCache to core * Pass a CCoinsViewCache object (pcoinsTip) to CTxMempool::check (which the caller knows the corresponding lock is held for). * CCoinsViewMempool can then move to txmempool as well
3154	27640074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27640074	petertodd	ACK I checked that the moves were all really move-only.
3154	27660608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27660608	gavinandresen	Rebased, and renamed AcceptToMempool to AcceptToMemoryPool for consistency. Moving CCoinsView/etc to core is non-trivial; CBlockIndex (at least) would have to move also. Lets save that for a future even-more-perfect refactor.
3154	27660814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27660814	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3153	27139368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27139368	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3153	27140637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140637	petertodd	ACK
3153	27141272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27141272	laanwj	Looks like a sensible change, ACK
3152	27118941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27118941	petertodd	ACK FBI: Now can I have my kids back?
3152	27120863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27120863	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3152	27121288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27121288	wizkid057	ACK ... this is a must
3152	27122570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27122570	sipa	NAK, please resubmit in 158 days.
3152	27138698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27138698	gavinandresen	Needs a test plan, and should be tested by at least three law enforcement agencies in two legal jurisdictions.
3152	27139999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27139999	gmaxwell	This functionality seems a little amerocentric.
3152	27140049	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140049	luke-jr	Im sure contributors in other jurisdictions can add support after the basic PR is merged...
3152	27140115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140115	petertodd	I have vague memories of S.H.I.E.L.D. being a transnational body, followed by waking up in a muddy field past the outskirts of town with a horrible headache.
3152	27140920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27140920	laanwj	Looks good, but theres still a lot of work to be done, Countries should be allowed to load locale-specific binary modules to extend the functionality.
3152	27141109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27141109	SomeoneWeird	We need a way for intelligence agencies to request that their addresses are added.
3152	27153286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153286	jgarzik	Just awoke in a muddy field, in the middle of a crop circle. Closing without further elaboration.
3151	27097420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27097420	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3151	27113474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27113474	Diapolo	Looks sane, cant test today.... we are on a good way cleaning up that kind of stuff :-).
3150	27090987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27090987	laanwj	Im going to wait a day or so before merging this, otherwise we keep creating small pull requests :-)
3150	27143982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143982	Diapolo	Upated: - cleanup some unneeded .cpp/.h includes and class usages
3150	27153113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153113	Diapolo	Updated: - use a more generic string for clearing sendcoinsdialog and requestpaymentdialog
3150	27153828	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153828	Diapolo	Updated: - edit 2 strings in BitcoinGUI and replace "edit" with "show" as this seems more clear in the context where it is used
3150	27154577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154577	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3146	26998898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26998898	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3145	27015421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27015421	laanwj	Havent tested yet, but screenshots look good.
3145	27020463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27020463	mikehearn	You might want to write "verified" vs "unverified", its a bit closer to the truth.
3145	27031245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27031245	gavinandresen	Yay! Thanks for tackling this!
3145	27084963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27084963	Diapolo	Agreed, thanks.
3145	27179058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27179058	Diapolo	Updated: - re-worked some UI tooltips to better understand (secure -> verified and insecure -> unverified) - changed code to use SendCoinsRecipient.message for storing the memo
3145	27219591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27219591	laanwj	Ive tested a bit, works great. Next thing we need to deal with is how payment request-generated transactions are shown in the transactions list. We ought to show the name of the merchant and the memo instead of bare addresses/labels.
3145	27228874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27228874	Diapolo	Thanks for testing, Im with you, we should rework how pr are shown in the tx list. But that should be part of another pull request then. My roadmap with this is to re-add the delete button for prs and then re-check the issue for what is left to be done here, before this needs testing by some other devs.
3145	27229432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27229432	laanwj	Eh yes, I certainly am not proposing that you add that to this pull req, it was just a general remark :) (BTW as unverified payments requests dont really have a recipient name/label, just the memo, this makes it challenging to show them in the transaction list in the same way as other transactions) And indeed a delete button would be useful, currently the only way to get rid of payment requests in the send list is the Clear button.
3145	27230304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27230304	Diapolo	A further thing to consider is our baloon pop-up when a transaction is detected. I mainly use 3 addresses I sent coins to when testing a payment request. This is really ugly with the pop-up, as we only show 1 a time, but the 3 are practically created right in a row... any idea here?
3145	27230970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27230970	laanwj	It should really show only one popup per transaction, not per output. For the transaction list some kind of grouping makes sense too. Right now we always generate one record per output. Grouping on transaction level would be too coarse, but it should ideally show paid payment requests (which can involve multiple consecutive outputs) as one row and not multiple.
3145	27506353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27506353	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3145	27685433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27685433	laanwj	do you intend to make further changes here or is this ready for merging?
3145	27687040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27687040	Diapolo	I currently have no working local build environment (tried to upgrade to a newer MinGW version, which caused troubles ^^). I intended to add back the delete button for payment requests, but this can be done in another pull. If there are no show-stoppers or bugs in here this can be merged. Can you perhaps check this out and give an ACK?
3144	26999367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26999367	Diapolo	It also seems to make no sense, as you already use gui->message() anyway, why should we add a connect for message() here? Im so much confused, need a break.
3144	27083393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27083393	Diapolo	I upated the pull with your recent suggestion and moved ``handlePaymentRequest()`` main functionality back to BitcoinGUI. Perhaps you can take another look.
3144	27088377	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27088377	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3143	26993099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26993099	sipa	I believe the issue and the solution is correct, but this patch seems over-complicated. Ill look at it later today. As we do not have any releases with the pruning code enabled, this is not urgent.
3143	27096017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27096017	gmaxwell	I think its slightly urgent as my analysis was that this issue is fork forming, and people do mine on git code. (The conclusion I reached while investigating this was that it would cause reorgs to fail, though I havent attempted a test)
3143	27143543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143543	petertodd	Fixed nits from
3143	27143646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143646	sipa	Alternative with less code changes: move outsBlock construction to before the test, and then use outsBlock.IsPruned() instead of the loop to check whether all outputs are unspendable.
3143	27143675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143675	petertodd	Note though I havent actually changed much at all - all the lines changed are just due to an indent.
3143	27143709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143709	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3143	27144757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27144757	sipa	Sure, but it avoids adding the extra loop for detecting the all-prunable case (and the duplicate work that is associated with it)
3143	27145837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27145837	Diapolo	Seems this _is_ urgent, I had to reindex now 2 times on my mainnet wallet using current master and 5 times my testnet wallet.
3143	27153819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153819	sipa	I sent a simpler pullreq (#3163) that should accomplish the same. Care to test it?
3143	27153924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153924	sipa	A reindex does not fix this (but that will let you temporarily avoid it); using -checklevel=2 is an easier workaround.
3143	27154652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154652	gmaxwell	A checklevel 2 is not really a workaround here, since we still cant disconnect the block if it ends up orphaned.
3143	27154702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154702	sipa	An alternative to reindexing. In case we need to reorganize away from such a block, there is indeed a problem. Though both this and #3163 should fix it.
3143	27189032	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27189032	petertodd	FWIW looks like is the better solution here. Will close once that gets merged if nothing else comes up.
3139	26971015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26971015	gmaxwell	Thanks for catching this. It didnt occur to me to even check the strings, though I did some grepping for +20.
3138	28199604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28199604	super3	Addressed both your suggestions.
3138	28202322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28202322	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3137	26912563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26912563	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3137	26959856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26959856	gavinandresen	Havent tested, but looks good to me.
3137	26969380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26969380	laanwj	ACK apart from minor nits mentioned
3137	26970586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26970586	Diapolo	Updated: Fixed nits.
3135	26905874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26905874	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3134	26899388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26899388	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3133	26887775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26887775	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3133	26892382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26892382	laanwj	Going to make a test the other way around (rpc_parse_monetary_values) too.
3130	26884114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26884114	laanwj	Havent looked at it in detail yet, but moving the message to PaymentServer makes sense as it only re-emits a message.
3130	26971397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26971397	laanwj	I dont think we should make the paymentack message a tray message. As we are not storing it anywhere for later reference at the moment (or are we?), its good to give the user some time to read it or even copy it.
3130	26972201	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26972201	Diapolo	Thats fine with me... perhaps there are better methods for handling this message, but thats out of the score of this pr.
3130	26972554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26972554	Diapolo	Updated: - make paymentACK message a modal information dialog
3130	26993217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26993217	Diapolo	Updated to reflect suggestion: - add new slot handlePaymentACK() to paymentserver, which handles paymentACK messages (currently we just display them)
3130	26993536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26993536	laanwj	ACK
3130	26995444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26995444	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3128	26793858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26793858	petertodd	I suspect broke the pull-tester.
3128	26875366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26875366	gavinandresen	Do we need both TX_NULL and TX_NULL_DATA? Seems to me it should just be TX_NULL_DATA, and supporting that would (I think) be a one-line change: ``` mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN)); ``` If we ever write higher-level code that extracts the data from a TX_NULL_DATA, that should be trivial-- remove the first byte/opcode from the ScriptPubKey, execute whatever remains (empty CScript in the case of no SMALLDATA), and data is whatever is left on the execution stack.
3128	26875413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26875413	gavinandresen	... wait, no, Im wrong, mTemplates is a map, not a multimap... Maybe it should be a multimap, though.
3128	26875522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26875522	jgarzik	Regardless of map/multimap, I had the same thought. TX_NULL_DATA can be defined as OP_RETURN, with optional trailing pushdata <= 80 bytes.
3128	26895529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26895529	petertodd	Well if we want to do that itll need a separate code path in Solver(), similar to how P2SH is handled specially. I think you can make a (weak) argument that NULL and NULL_DATA make lives a little easier, because you always know that only the latter has data that your app should try to parse. (remember that its legal to make a zero-byte PUSHDATA with 0x00) You know, its unfortunate that Satoshi bizarrely counts sigops in scriptPubKeys, the only time the protocol looks at them when a block is processed. If not for that Id just say make a two line test that scriptPubKey[0] == OP_RETURN and len(scriptPubKey) < 81 (a scriptPubKey thats invalid due to invalid PUSHDATAs is allowed into blocks and would save a byte; e.g. ebc9fa1196a59e192352d76c0f6e73167046b9d37b8302b6bb6968dfd279b767) Anyway, verging towards shed-painting IMO.
3128	26960098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26960098	gavinandresen	Huh? This two-line change seems to work properly: ``` From d485640daee9ecbbdd3f39ca7ab1cda83b99c4a5 Mon Sep 17 00:00:00 2001 From: Gavin Andresen <gavinandresen@gmail.com> Date: Thu, 24 Oct 2013 11:20:23 +1000 Subject: [PATCH] 0-byte OP_NULL_DATA --- src/script.cpp | 3 ++- src/test/transaction_tests.cpp | 4 ++++ 2 files changed, 6 insertions(+), 1 deletion(-) diff --git a/src/script.cpp b/src/script.cpp index 63f6327..79d0b2c 100644 --- a/src/script.cpp +++ b/src/script.cpp -1195,7 +1195,7 bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubK bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsigned char> >& vSolutionsRet) { // Templates - static map<txnouttype, CScript> mTemplates; + static multimap<txnouttype, CScript> mTemplates; if (mTemplates.empty()) { // Standard tx, sender provides pubkey, receiver adds signature -1208,6 +1208,7 bool Solver(const CScript& scriptPubKey, txnouttype& typeRet, vector<vector<unsi mTemplates.insert(make_pair(TX_MULTISIG, CScript() << OP_SMALLINTEGER << OP_PUBKEYS << OP_SMALLINTEGER << OP_CHECKMULTISIG)); // Empty, provably prunable, data-carrying output + mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN)); mTemplates.insert(make_pair(TX_NULL_DATA, CScript() << OP_RETURN << OP_SMALLDATA)); } diff --git a/src/test/transaction_tests.cpp b/src/test/transaction_tests.cpp index 5dfb67c..5b69e64 100644 --- a/src/test/transaction_tests.cpp +++ b/src/test/transaction_tests.cpp -274,6 +274,10 BOOST_AUTO_TEST_CASE(test_IsStandard) t.vout[0].scriptPubKey = CScript() << OP_1; BOOST_CHECK(!IsStandardTx(t, reason)); + // 0-byte TX_NULL_DATA (standard) + t.vout[0].scriptPubKey = CScript() << OP_RETURN; + BOOST_CHECK(IsStandardTx(t, reason)); + // 80-byte TX_NULL_DATA (standard) t.vout[0].scriptPubKey = CScript() << OP_RETURN << ParseHex("04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef3804678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38"); BOOST_CHECK(IsStandardTx(t, reason)); -- 1.8.4 ```
3128	26960416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26960416	petertodd	Oh, doh, yeah lets just do that + the bugfix and ScriptSigArgsExpected() change I made.
3128	26975289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26975289	petertodd	Now using multimap so theres just TX_NULL_DATA
3128	26977191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26977191	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3127	26790385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26790385	laanwj	ACK
3127	26791997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26791997	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3127	26792322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26792322	gmaxwell	ACK (untested, but its just a revert)
3127	26792909	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26792909	laanwj	I guess we should add a test to prevent this from happening in the future.
3127	26793016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26793016	jgarzik	Do we have any way to test RPC in the current codebase?
3127	26795558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26795558	laanwj	Well, there is rpc_tests: But there is nothing that tests the JSON parsing / formatting explicitly.
3125	26781583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781583	laanwj	Ack, this is after SelectParamsFromCommandLine so Testnet() calls work.
3124	26780587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26780587	gavinandresen	Warning: Im extra grumpy today for no good reason. I still hate these types of pulls, they just create merge conflicts for no good reason in my opinion. It is fine to cleanup code as it is rewritten...
3124	26781276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781276	Diapolo	Im fine with you beeing grumpy, if you are fine with me beeing grumpy on devs that dont care about cleaning up left-over spaces and such (not specific to anyone, just to be sure ^^).
3124	26781477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781477	laanwj	Ive never really understood the whitespace shuffling all over the codebase either. Though "cute" space-aligned tables like in getinfo() invite this kind of behavior. Hey, one of the keys it too long, lets shift all the others!
3124	26781496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781496	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3124	26781811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781811	jonasschnelli	On the other side, most of use likes when the code is clean and well structured. It protects the general quality of the code. Its like entering a very clean house. You will automatically take more care about stuff in it. Maybe someone take a closer look at cURLs build process. There is a check for empty lines and uncommon source formatting during the make process. In our case PullTester would blame you if you would add some uncommon code structure. But i agree. No empty-line-syntax-changes during unfinished developments.
3124	26782136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26782136	laanwj	I prefer people to focus foremost on clean semantics, interfaces and data structures. Sure, the formatting should not be a mess, but we shouldnt be extremists about it. I certainly dont want a commit hook or pulltester that looks at formatting. Its better to be accommodating of peoples slightly different tastes with respect to code formatting (try to ignore it and see the meaning beneath it) than be a jerk about it. It just distracts from what were trying to do.
3124	26782173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26782173	Diapolo	Obviously too controversial again...
3123	26768771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26768771	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3123	26781382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781382	laanwj	ACK
3121	26744933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26744933	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3121	26761801	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26761801	sipa	The makefile buildsystem has since been replaced by autotools in git master. Does autotools do this right, or do we need an equivalent fix there?
3121	26782232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26782232	Diapolo	Can you take a look?
3121	26798910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26798910	laanwj	I suppose this is useful for for his stable branch. As for the autotools build system this change is not needed. mingwthrd is detected and -D_MT is added:
3121	26860313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26860313	theuni	yes, autotools should be handling this correctly already.
3121	26860427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26860427	theuni	Note that I could not find any testers for native win32+autotools. If youd be willing to be a guinea pig, Im happy to get it working there.
3121	26883803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26883803	phelixbtc	Ill try my very best. Should I start out with current master?
3121	27022777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27022777	theuni	Yes. Are you available to hop on freenode for a realtime hack-a-thon?
3121	27179556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27179556	phelixbtc	tried to email you... contact me at blockchained.com I assume this will not go into 0.8.5 then...
3121	27179635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27179635	luke-jr	0.8.5 is already released weeks ago. Itll probably be in 0.8.6, but that may be after 0.9.0
3121	27543671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27543671	gavinandresen	Closing; makefile.mingw is no more.
3119	26680999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26680999	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3119	26681423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26681423	sipa	ACK
3119	26681439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26681439	jgarzik	To be legally correct, I think we want to only update copyright for files modified in year 2013... ACK general concept
3119	26682122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682122	laanwj	I think he checked that
3119	26682211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682211	sipa	I verified it before merging: ``` $ for A in *.cpp *.h; do if [[ "$(git log --no-merges --since=1 jan 2013 -n 4 --pretty=format:%ad "$A")" == "" ]]; then echo "$A"; fi; done bitcoin-config.h mruset.h threadsafety.h ``` Neither of which is touched by this pullreq.
3117	26665862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26665862	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3117	26671378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671378	sipa	ACK
3115	26665663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26665663	gavinandresen	ACK concept, and code looks good to me. Needs at least a sketch of a test plan that exercises all of the signals.
3115	26670132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26670132	laanwj	Havent tested yet, but code lookg good and I like the approach.
3115	26671293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671293	sipa	The reasoning is that there are callbacks from the node/validation to the wallet; theyre really just notifications in general, as the node code shouldnt care about what the wallet does with it (in fact, the signal names shouldnt contain "wallet" even, though I chose not to change them here). As EraseFromWallet was _only_ called as a callback, I just simplified the method here. In the case of AddToWalletIfInvolvingMe (which is called internally inside the wallet as well, with a relevant return code), I added a wrapper to use as signal handler.
3115	26671932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671932	laanwj	Ok, thanks, that makes it clear, I was just not sure if it was overlooked or on purpose. I like the idea of renaming the signals to be more general (so that theoretically non-wallets could also use the API to keep track) SyncWithWallets -> SyncTransactions EraseFromWallets -> EraseTransaction SetBestChain -> stays the same UpdatedTransaction -> stays the same Inventory -> stays the same ResendWalletTransactions -> ResendTransactions
3115	26674796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26674796	sipa	Modified the signal names a bit, and added comments.
3115	27145711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27145711	sipa	Rebased.
3115	27146331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27146331	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3115	27151500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27151500	sipa	Test plan: * Create a transaction in the GUI, and check whether the number of peers that have seen it goes up. This exercises the Inventory signal. * Leave the client open until it confirms. This exercises the SyncTransaction signal. * Every at most 30 minutes, ResendWalletTransactions should be called (LogPrintfed). This exercises the Broadcast signal. * Mine a block yourself, and wait until another on top is mined, while leaving the GUI open. The blocks payout should appear only when the second block is mined. This exercises the UpdatedTransaction signal. * After being fully synchronized, wait for a block whose height is a multiple of 144, and forcibly kill the client. At startup, the automatic rescan shouldnt go back beyond that 144-multiple block. This exercises the SetBestChain signal. * Alternatively, do a -reindex, and wait until a block whose height is a multiple of 20160 is crossed, and do the same kill/restart cycle.
3115	27357628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27357628	gavinandresen	ACK. Ran through test plan with a Bitcoin-Qt in regtest mode and two -regtest bitcoinds, all tests passed.
3114	26884870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26884870	laanwj	ACK
3114	27145537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27145537	sipa	Rebased to make pulltester run again.
3114	27145694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27145694	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3109	26650837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26650837	Diapolo	I think this is the right thing to do, I didnt yet check the code though.
3109	26650958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26650958	Diapolo	If I remember we have a file in doc, which needs to get a small update after this merge also?
3109	26652430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26652430	laanwj	Ok, updated for your comments
3109	26652698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26652698	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3109	26666491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26666491	gavinandresen	ACK, compiles and runs nicely on OSX.
3108	26651151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26651151	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3108	26663267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26663267	Diapolo	As Im working on fixing current problems with payment request handling it would be cool to quickly merge this, if ACKed.
3106	26562473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26562473	super3	Stolen from the original pull for these files #549 from
3106	26563776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26563776	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3106	26662122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26662122	sipa	ACK
3104	26510649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26510649	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3104	26672002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26672002	laanwj	Agree with the idea of using better ciphers if available. However, I would first like to understand what "!AH" means (its impossible to google for) before we just throw it out.
3104	26672316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26672316	fanquake	Reading from the OpenSSL cipher [docs](https://www.openssl.org/docs/apps/ciphers.html). If ! is used then the ciphers are permanently deleted from the list. The ciphers deleted can never reappear in the list even if they are explicitly stated. However, AH isnt listed as one of the permitted [CIPHER_STRINGS](https://www.openssl.org/docs/apps/ciphers.html#CIPHER_STRINGS), could it be a typo for aDH/DH/ADH ?
3104	26690078	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690078	gavinandresen	I dont remember why I specified !AH -- it is very possible it was a typo. Merging before the shed gets more paint on it.
3103	26469692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26469692	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3102	26431838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26431838	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3102	26432994	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26432994	laanwj	How is someone supposed to drop a URL into the client without it being shown already? :p
3102	26581469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26581469	Diapolo	LOL, right!
3101	26428217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26428217	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3099	26425325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26425325	Diapolo	Can you give a screen how it looks when clicking on ``Used sending/receiving addresses...``?
3099	26425990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26425990	laanwj	Same as before really, ![addresses](https://f.cloud.github.com/assets/126646/1343477/2c70707c-3674-11e3-95eb-3c11caeb3209.png) **Edit: send/verify message has been removed**
3099	26426327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26426327	Diapolo	Didnt test, but looks very nice :). Hope you re-enable sign/verify message links and all is fine.
3099	26508151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26508151	mikehearn	If its ready only, its kinda weird to have widgets that look editable for the info. Also, this dialog would be a great place to save a PaymentRequest message to a file! Although the payment protocol is probably going to be used mostly by servers, being able to save to a file and/or drag/drop into an email/IM window would be a nice step forward as well, because the payment protocol is not only for web servers and online shops but is useful for everyone.
3099	26509940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26509940	Diapolo	At least for copy&paste reasons text from that window should be selectable, dunno if there is a way to make clear UI-wise its read-only.
3099	26524215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26524215	laanwj	Agreed on generating a payment request. That was one of my ideas behind this, but Ill leave implementing that to a later pull. As for the fields, yes its not ideal like this. Id like to make it a text that can be copy/pasted in one go, not multiple fields. And as says there is not really a way to show readonly-ness in Qt, beyond making the field disabled but thats ugly.
3099	26575517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26575517	laanwj	I think Im going to remove the sign/verify message buttons from the address lists. After this, they can be launched from the menu directly more quickly. And confusion such as in #3105 will no longer happen then. Edit: I also want to make it possible to copy/paste or drag/drop the QR code. Hopefully thats just a matter of enabling the right flags.
3099	26582140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26582140	Diapolo	Im fine with removing them.
3099	26587880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26587880	laanwj	Ive added a context menu to QRcode, and it now supports dragging ![qrcode_context](https://f.cloud.github.com/assets/126646/1359772/1ae56574-37e6-11e3-8065-a717e15b6b02.png) As it can all be done through the context menu (which people expect from saving images in browsers) Im not sure whether to keep the "Save Image..." button (in that case, Ill need to add a "Copy Image" button too, and having a button is probably more explicit/clear). Any opinions?
3099	26591051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26591051	laanwj	Ive made the URI look like an URI and added a button to copy it. Also Ive merged everything into one HTML area to simplify the dialog and make it possible to copy/paste everything at once. ![newreq](https://f.cloud.github.com/assets/126646/1360439/c9ac093c-37f5-11e3-972e-81ddc0b1102d.png)
3099	26609268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26609268	gmaxwell	Whats the rational for even having the reuse box? The only thing I could come up with was trying to avoid adding state to a wallet and breaking backups, but change is going to do that silently in any case (and if were going to worry about that we should probably just do a fast determinstization of the wallet)
3099	26610749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26610749	laanwj	I cant really imagine either what its useful for. But Im sure people will complain if we actually make it impossible. We could go even further to obscure the checkbox, but removing the feature completely is a step too far (maybe in 0.11 :-).
3099	26611323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26611323	gmaxwell	Really? Hm. I think the thing people will miss is not that, but theyll want a reasonably easy way to get a list of previously used addresses. E.g. "What address did I just give bob?" So why not add a request history button/page/tab and then something to click on there to repeat/edit/etc one of the prior ones? From the UI screenshots its not clear to me what I should do when I want an address to receive an unspecified amount, which is a common thing to do.
3099	26611954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26611954	laanwj	Yes, a request history would be a good idea too. It could simply store the last N generated bitcoin URIs. Im not going to add that in this pull, though. If you want an address to receive an unspecified amount you can just leave the amount and other fields empty (except for possibly the label). It mentions on the receive page that all fields are optional, thats not a lie. I could add a "copy address" button to the dialog to make it easier to copy only the address. Or alternatively go to the "Used received addresses..." and add a new receiving address directly. Thats still possible like before.
3099	26877420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26877420	gavinandresen	Nice! Compiles and runs on OSX, and I like the functionality.
3099	26897468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26897468	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3098	26391411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26391411	gavinandresen	ACK; good enough to merge in my opinion, but : any objections to moving linearize tool from misc/ ?
3098	26391722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26391722	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3098	26396552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26396552	laanwj	ACK
3098	26413712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26413712	jgarzik	ACK no objections
3097	26387830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26387830	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3094	26334804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26334804	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3094	26393345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26393345	gavinandresen	ACK, tested and works nicely.
3093	26365272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26365272	Krellan	Good catch!
3092	26331847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26331847	Diapolo	ACK
3092	26332085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26332085	schildbach	I am testing the new build instructions with Ubuntu 13.04. - Figuring out the dependencies is hard, given that different Ubuntu version schemes are used (sometimes Ubuntu Precise, sometimes Ubuntu 12.04). Its sometimes not clear if the doc implies "and later" or "and earlier". - $ ./autogen.sh Cant exec "libtoolize": No such file or directory at /usr/bin/autoreconf line 195. Use of uninitialized value in pattern match (m//) at /usr/bin/autoreconf line 195.
3092	26332782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26332782	laanwj	For libtoolize, can you try to install "autotools-dev"?
3092	26333330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26333330	schildbach	autotools-dev is already installed.
3092	26333405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26333405	laanwj	"libtool" then
3092	26334045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26334045	schildbach	package libtool is fine, autogen succeeded. Now ./configure fails at checking for Berkeley DB C++ headers... no configure: error: libdb_cxx headers missing I assume this is due to libdb* packages missing, however none of the alternatives worked for me: Package libdb4.8++-dev is not available, but is referred to by another package. This may mean that the package is missing, has been obsoleted, or is only available from another source Same for libdb4.8-dev.
3092	26334233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26334233	laanwj	Youre using these? db4.8 packages are available [here](https://launchpad.net/~bitcoin/+archive/bitcoin)
3092	26334447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26334447	schildbach	No, I was hoping I can satisfy all dependencies from the Ubuntu repositories. Is this possible?
3092	26334797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26334797	laanwj	Thats not possible, there are no bdb 4.8 packages in the repository for 12.04 and later. You can use a newer bdb but once you use that you break binary wallet compatibility thus is not recommended (thats literally in the build instructions).
3092	26335172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26335172	sipa	If you were already compiling bitcoin(d/-qt) before on ubuntu, you were likely using bdb 5.1 anyway, and you already lost that compatibility. In any case, nothing a db_dump + db_load cant solve if you really need to downgrade bdb.
3092	26335490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26335490	schildbach	Yes, for now I installed bdb 5.1 from the Ubuntu repositories again. Also, I needed to install "libprotobuf-dev" (missing in the doc).
3092	26335672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26335672	schildbach	Now, I get checking if qt should be enabled... configure: error: "qt support requested but qt could not be located. use --without-qt" I have installed libqt5gui5 libqt5core5 libqt5dbus5 qttools5-dev-tools as documented. Did not try the qt4 path.
3092	26335754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26335754	laanwj	Ill add libprotobuf-dev. Ok so it seems that is right and Qt5 is no longer supported at the moment :(
3092	26336195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26336195	schildbach	Ok, going the qt4 route then. Is "checking if ccache should be enabled... configure: ccache not found. Falling back to default CC no" expected?
3092	26336326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26336326	laanwj	Yes, ccache is not necessary for a build but can be used.
3092	26338186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26338186	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3092	26340336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26340336	schildbach	what would be the package for ccache? I managed to build bitcoin-qt using the instructions. Thanks for your help!
3092	26349601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26349601	laanwj	I think the package is simply ccache.
3092	26349975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26349975	schildbach	Yes, that works.
3092	26386902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26386902	super3	Missed the index link in the /doc readme. See #3097
3091	26323978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26323978	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3089	26282457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26282457	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3087	26230573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26230573	sipa	Added a commit that makes some validation globals static (and private).
3087	26305306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26305306	jgarzik	ACK
3087	26454237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26454237	sipa	removed the superfluous comment.
3087	26876844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26876844	gavinandresen	I think "we" should get Matts blockchain tester tool working with the pull-tester again before merging this.
3087	27042092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27042092	sipa	What is broken?
3087	27538924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27538924	sipa	Rebased to trigger PullTester rerun.
3087	27540289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27540289	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3087	27622442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27622442	sipa	Any objections?
3087	27622469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27622469	gmaxwell	ACK. (Now that it has a comparison tool pass!)
3086	26205788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26205788	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3086	26209957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26209957	dalrax	I performed sudo add-apt-repository ppa:bitcoin/bitcoin and sudo apt-get update commands prior to my attempt to grab the bitcoin source code with apt-get source bitcoin. I was able to grab the source code fine, but the sub command gpgv reports it cant check the signature since the public key is not found. Will this pull request fix this error? If not, can someone kindly tell me how or point me to the documentation on how to get/import the correct public key for gpgv verification on Linux Mint 15 Olivia Xfce. Thanks! ![screenshot - 10122013 - 09 29 39 pm](https://f.cloud.github.com/assets/4543661/1321277/9f5de114-33a9-11e3-8bff-2c16d3c8303e.png)
3086	26212935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26212935	Michagogo	This is not at all even remotely related to your problem. Adding the PPA is supposed to get the key automatically, though I have no idea how Mint does things differently -- anyway, if you go to the page on Launchpad, the key should be there somewhere. On Sunday, October 13, 2013, dalrax wrote: > I performed sudo add-apt-repository ppa:bitcoin/bitcoin and sudo > apt-get update commands prior to my attempt to grab the bitcoin source > code with apt-get source bitcoin. I was able to grab the source code > fine, but the sub command gpgv reports it cant check the signature since > the public key is not found. > > Will this pull request fix this error? > > If not, can someone kindly tell me how or point me to the documentation on > how to get/import the correct public key for gpgv verification on Linux > Mint 15 Olivia Xfce. > > Thanks! > > [image: screenshot - 10122013 - 09 29 39 pm]<https://f.cloud.github.com/assets/4543661/1321277/9f5de114-33a9-11e3-8bff-2c16d3c8303e.png> > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/3086#issuecomment-26209957> > . >
3086	26219931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26219931	dalrax	Thanks for responding Michagogo, you kept me from going down the rabbit hole and forced me to Google deeper to find the solution. I am still wrapping my head around this, but I was able to get rid of this error by grabbing the key for Matt Corallo (BlueMatt) <matt@bluematt.me>, from the keyserver and adding it as a gpg trusted key. Thanks!
3085	26202183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26202183	Michagogo	On my phone, so havent reviewed this thoroughly nor can I add a comment directly on the diff, but the bump of version numbers wasnt an oversight or anything -- master was built on top of 0.8.2, and 0.8.(3-5) were branched off of there. If youll look at the tags, the last (or one of the last) commits before the release is tagged tends to be a version number bump across multiple files. Whats more, by the time this commit makes it into a release, it wont be 0.8.5, it will most likely be 0.9.0, but we dont know yet. Not that it hurts to make this change per se, but its not necessary.
3085	26202486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26202486	sipa	Maybe this helps illustrating: ``` 0.8.0 -- 0.8.1 -- 0.8.2 ---------------------------------- HEAD (-- 0.9.0) \ \- 0.8.3 -- 0.8.4 -- 0.8.5 (-- 0.8.6) ```
3085	26207310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26207310	super3	Gotcha and reverted. Anything else?
3085	26207973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26207973	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3085	26227442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26227442	sipa	ACK
3084	26201313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26201313	sipa	ACK
3084	26322543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26322543	Diapolo	Rebased, should be merge-ready.
3084	26323771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26323771	laanwj	ACK, good catch
3084	26324413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26324413	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3083	26305261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26305261	jgarzik	untested ACK. ACK, presuming getblocks and getheaders style downloads from older clients has been tested.
3083	26321693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26321693	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3083	26370768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26370768	sipa	We should test that, indeed. Feel like testing sync by/from a node with this patch? :p
3083	26371125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26371125	Diapolo	Sometimes I miss the practical pros such pulls give, like 5% faster in IBD or something easily understandable. Can you give an insight if this is the case here :)?
3083	26373684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26373684	sipa	Theres two improvements here. The first is just a cleanup. The CBlockLocator datastructure is part of the P2P protocol (so something very basic), but its methods directly refer to some of the validation engines globals. Thats really ugly, as a user of that class you wont expect that using some of its methods imply you need to do locking on cs_main, or that it would depend on global data in the first place. In short, it doesnt belong there - and now that we have a CChain data structure that explicitly encapsulates the block chain, its much more natural to ask the chain "give a locator that points to you", rather than asking locator "make yourself into something that points to... well, you know". The advantage is really just making the code easier to understand and reuse. The second is an actual performance improvement. Currently, when constructing a CBlockLocator, we iterate the entire block chain index in memory (just benchmarked that, takes ~20ms), just to find the few ones we need. Since we have CChain that allows looking up entries by height, this becomes trivial (i expect a few microseconds). 20ms may not seem much, but we do this any time were asking for blocks from a peer, and its really just silly not to use the height-index now that it exists. EDIT: It also reduces the number of lines of code!
3083	26374637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26374637	Diapolo	ACK description wise, sounds like a very good idea! And thanks for taking the time to explain it to me :+1:.
3083	26380080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26380080	gavinandresen	ACK. Code changes look good, and I tested following combinations against new code: old code, partial chain, main network old code, partial chain, test network old code, fresh sync, test network
3082	26201614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26201614	sipa	Some comments on the help output: Usage: bitcoin-rpc [options] <command> [params] Send command to -server or bitcoind Not sure if it was introduced by this commit, but I have no idea what "sending to -server" would mean. -rpcport=<port> Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332) For bitcoin-rpc, that should probably read "Connect to" instead of "Listen for" -rpcsslcertificatechainfile=<file.cert> Server certificate file (default: server.cert) -rpcsslprivatekeyfile=<file.pem> Server private key (default: server.pem) -rpcsslciphers=<ciphers> Acceptable ciphers (default: TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH) These arent relevant for RPC clients.
3082	26207209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26207209	laanwj	Not sure if it was introduced by this commit, but I have no idea what "sending to -server" would mean. That was not introduced in this commit. It is also in bitcoind, I literally took that over. I suppose it means "a bitcoin-qt started with -server". Agree on the rpcport having different meaning for the client than for the server, and indeed the SSL server settings can go.
3082	26216766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26216766	laanwj	Updated the help message accordingly, and added mention in bitcoind help message that using it as client is deprecated.
3082	26219652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26219652	sipa	ACK. One nit: -rpcsslciphers isnt used by the RPC client either.
3082	26229337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229337	super3	Good work. Any stats on the performance over Bitcoind? Any idea on the time period for deprecation and drop of RPC from Bitcoind? A fair amount of codebase in based on Bitcoind, so that might cause some breakage even if it is deprecated for a while.
3082	26229504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26229504	sipa	I expect performance to be exactly identical to bitcoind for now. Once we can create a stripped-down version with less dependencies, startup time may be reduced a bit. But really, its just thin wrapper to expose an interface intended for computers to humans. If performance matters to you, you should be sending JSON-RPC directly instead of exec()ing a binary for every call.
3082	26234368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26234368	super3	Just curious. Thanks for clarifying. On Sun, Oct 13, 2013 at 7:17 PM, Pieter Wuille <notifications@github.com>wrote: > I expect performance to be exactly identical to bitcoind for now. > > Once we can create a stripped-down version with less dependencies, startup > time may be reduced a bit. But really, its just thin wrapper to expose an > interface intended for computers to humans. If performance matters to you, > you should be sending JSON-RPC directly instead of exec()ing a binary for > every call. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/3082#issuecomment-26229504> > . > -- Shawn Wilkinson Student, Morehouse College Bitcoin Developer/Entrepreneur/Enthusiast (1P4QkLsujBPBZyUwDezikL4fUSs7JvFhPv) me@super3.org
3082	26239184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26239184	laanwj	Performance wasnt the concern here, just sanity. Why would you need bitcoind on a system that only does requests? And good luck browsing through the bitcoind help message to find options that concern the client. Even as bitcoin developer I needed three reworks to get those right. There is just no excuse in the world to merge the client and server into one executable. IMO the deprecation time period should be 0.9 to 0.10 or 0.11. Looking at the large time window between major releases, and the carefulness that merchants already have to switch to new major releases, thats enough. In any case that decision is for later, we dont need to make it now. shouldnt the ciphers be used for the client as well? As I understand it, with SSL both the client and server have their say in what cipher is used? Or is that only with SSH?
3082	26324716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26324716	laanwj	Ok Ive hidden -rpcsslciphers for the client. I still think it would be useful to have it in the client as well (SSL_CTX_set_cipher_list isnt even called in the client), but that is off-topic for this pull.
3082	26670150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26670150	laanwj	In case we agree with adding a seperate RPC client, can we please merge this soon? Every change to the help message results in an ugly merge in init.cpp.
3082	26671252	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671252	sipa	Any general opinion about this? IMHO, the fact that bitcoind is both a client and a server is confusing, and that alone warrants separating them (though certainly not instantly, too much legacy code relies on bitcoind for now).
3082	26671772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671772	laanwj	Right, a lot of code relies on bitcoind being a client, thats why this doesnt disable or change the functionality in bitcoind, it just adds a new executable with only the RPC functionality. Removing is completely separate and should be left to a further future release when people had the chance to switch over.
3082	26673388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26673388	sipa	If we ever choose to actually separate the code, there is always the option to make bitcoind exec() bitcoin-cli in case some command is provided still.
3082	26673898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26673898	jgarzik	ACK, with optional, feel-free-to-merge-without-this comments, 1) I would name it "bitcoin-cli" or "bitcoin-remote" mirroring some existing practices. 2) Remove, rather than deprecate, "bitcoind <command>" usage. Will break some scripts, but so what. Im more willing to break stuff like this, as 1.0 approaches.
3082	26674010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26674010	luke-jr	Is there any reason this should be Bitcoin-specific? Couldnt a generic-JSON-RPC CLI client (perhaps written in Python?) work just as well, without complicating the codebase unnecessarily?
3082	26674284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26674284	laanwj	Bitcoin-cli/remote is fine with me, I dont have any opinion on the name. I still prefer a two-step deprecation process though. How is this complicating the codebase? If anything, this is the beginning of a clean-up. I did some code movements in the original commit to separate different concerns into different files, which Ive left out here for easier review, but they can still be done later. It needs to be bitcoin specific because of the argument parsing. Only a bitcoin-specific client knows to parse argument 2 of sendtoaddress as a double (for example). Sure, it could be done in a Python script, but that complicates usage on windows or other systems that dont come with Python interpreter by default. And we have the C++ code already...
3082	26676366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26676366	super3	I like the idea backward compatibility using exec() to call bitcoin-cli. I assume care of course must be taken to prevent malicious injection via Bitcoind. I agree that it needs to removed, but Id rather devs have at least one release cycle to use bitcoin-cli and change their core code to match. Then you can remove on ~1.0. Deprecation give devs a fair warning. Removing is just kinda ripping the Bitcoind rug out from under them.
3082	26676733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26676733	luke-jr	Complication, for example see all the different conditionals in strUsage now. Argument parsing might be an issue, I suppose - are there any cases where a Number might be confused with a String or vice-versa? JSON doesnt have doubles or integers, just Numbers - a client or server that makes a distinction is a bug. As long as were modularising the code, it makes the most sense to *actually* modularise it IMO. Separate git repository and all.
3082	26681172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26681172	laanwj	yes, the helpmessage function is complicated somewhat by this, but thats the only one. To make it more readable it could be formatted as a table with a bitfield per option (which client kinds it applies to), if anyone cares enough to do that. A seperate git repository sounds pointless. Its useful to be able to build everything at once. A different directory within src/ would make sense tho.
3082	26681993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26681993	sipa	Well I guess actual separate repositories is one potential future, but I doubt well get to the point with the current codebase where that makes sense. I am in favor of a nice and shiny python RPC client, which supports things like tab completion, and inline help, and batch processing, and pipelines of queries. and unicorns. As long as nobody creates one, I think this will do just fine. If someone ever does create a better RPC client in Python (or another language), Im sure we can replace the bitcoin-cli/remote binary with a self-contained executable compiled from it in distribution packages.
3082	26682228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682228	super3	That kinda sounds like a fun project for me, after I do a few more documentation sweeps. I can add unicorns as long as you dont mind them being [green](http://gunicorn.org/).
3082	26682344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682344	laanwj	Wouldnt tab completion ideally be something in the shell instead of in the executable itself? Ie, bash has extensible command completion.
3082	26682386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682386	sipa	Fair enough- I wasnt entirely serious of course. I just mean that a featureful RPC client sounds useful, and Python (or any script language) sounds more appropriate for developing that than C++ - and easier to review.
3082	26682718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26682718	wtogami	A python RPC client would definitely have benefits except for ease of cross platform distribution. For example, it appears that py2exe cant be cross-compiled from a Linux host and also relies upon Microsoft DLLs.
3082	26683496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26683496	super3	Which is why I said it would be a fun project. One or two of those features would be really easy to hack together using existing libs. Hmmm. Didnt know that py2exe had that limitation. Perhaps an alternative might provide the needed cross platform distribution. A quick google search reveals [cx_freeze](http://cx-freeze.sourceforge.net/) as a possibility.
3082	26691897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26691897	luke-jr	FWIW: At least my Python install (on Linux) has a bunch of exes for building Windows stuff with.
3082	26692092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26692092	jgarzik	Any sort of python clientage is outside the scope of this pull request. This PR is fine *right now*, even if a future decision replaces the C++ client with something else down the road.
3082	26695157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26695157	laanwj	I now understand, youre thinking of some kind of interactive client, not so much the rpc client it is now that is used from the shell or shell script. Sure, thatd be a useful project. I played with that idea while making the debug console, but it stayed at that as we dont want a scripting language (js, python) in the main client :-) Lets open a new issue for that. Itd be a complement to this and not a replacement. For lightweight interaction from shell scripts, a small executable (yes, well make it small eventually...) would still be preferable to a py2exe wrapped "monster". Rebased and renamed to bitcoin-cli.
3082	26697663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26697663	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3081	26139049	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26139049	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3081	26169729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26169729	sipa	ACK
3080	26135772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26135772	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3080	26329630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26329630	Diapolo	Could you check= Should be just a bunch of non-controversial changes :).
3078	26114425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26114425	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3077	26129497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26129497	laanwj	Encapsulating some of the global state is a great idea either way.
3077	26135767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26135767	jgarzik	Seems OK except for some English that bugs me: "tip" does not necessarily imply "best tip" to me.
3077	26139826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26139826	sipa	If youre talking about CChain, thats intentional: its just a chain of blocks, and a chain has a tip. It has no concept of "best". One particular (and for now, only) instance of CChain, chainBlocks, represents the currently active (=synchronized) block chain, which indeed follows the notion of best chain (but during a reorganization for example, its not "best" either). More generically, the word "best" is just ambiguous. In headers-first mode, another CChain instance is added (the headers chain), and it also follows its own notion of best. Its better to just talk about the "currently active" chain (for what is currently called the best chain).
3077	26140666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26140666	jgarzik	In the local context of the CChain class itself, "tip" makes sense. In the wider context of the entire codebase, it makes the code less readable, because our blockchain can have multiple tips, only one of which is active/best.
3077	26140936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26140936	sipa	I see what you mean. I think part of the problem is that many people use the term "block chain" to in fact refer to the entire block tree, which consists of many chains - while in this context it actually refers to just the active chain within it. Suggestion: call it chainActive or chainSynchronized instead of chainBlocks? chainBest is a possibility as well, but equally ambiguous imho.
3077	26141505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26141505	jgarzik	Youve got it. Any of those suggestions is fine.
3077	26151319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26151319	Cryddit	On 10/10/2013 02:10 PM, Pieter Wuille wrote: > This removes several globals (pindexBest, hashBestChain, nBestHeight, nBestChainWork, vBlockIndexByHeight), and turns them into an instance of a CChain class, chainBlocks. > > This is a preparation for a second iteration of headersfirst which I&#39;m implementing, which will add a second instance (chainHeaders). This pull request shouldn&#39;t change any functionality. > You can merge this Pull Request by running: > Im starting to worry that the blockchain is too much bandwidth and computer power to keep up with. A more distributed architecture is possible, where multiple "branches" can be adding blocks of transactions independently, and then the branches are joined to the blockchain (or to another branch) with a single transaction. Yes, I know there are "orphan block" problems between chains competing for transactions, if you do it the most obvious way; there are ways to avoid that, but this message is not about the strategies for avoiding that. The savings is because people neednt necessarily download and check the branches unless their own wallet has a transaction in that branch. In that case they can check to make sure that the stream of transactions is in fact represented by the "diff" applied to the main blockchain. Anyway, all this is a lead-up to one question; how much of a pain in the tush do you think it would it be to adapt the class youve created here to work with a branching chain? I mean, is it roughly interface- compatible? Interface-compatible with some added methods? Or is it, including interface, all stuff youd have to rip out and do again? Bear
3077	26151839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26151839	sipa	That is completely outside of the scope of this (or any single) pull request, and requires pretty much a full redesign of how Bitcoins consensus mechanism works. If you dont want to download or process the whole blockchain, run an SPV client (multibit, bitcoin wallet for android, ...). There are proposals that would enable non-full nodes to contribute back to the network, but they are far more invasive than what you make it seem (conflicts between chains is a detail you seem to consider trivial here, but it is ultimately the only reason why we need a chain in the first place: to reconsile conflicts). In any case, this is a discussion for the mailing list and not this refactoring-only pull request in a single client.
3077	26152995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26152995	sipa	Updated the variable name to chainActive.
3077	26153246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26153246	jgarzik	ACK
3077	26197113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26197113	sipa	(moving some extra commits to another pullreq)
3077	26197281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26197281	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3077	26305185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26305185	jgarzik	re-ACK
3077	26307214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26307214	gavinandresen	ACK
3076	26091009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26091009	laanwj	phexdigit is used in bignum.h too, this can share the same definition now
3076	26114705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26114705	lano1106	if you like the idea of this pull request, Ill create a v2 that makes bignum use the same array.
3076	26672133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26672133	laanwj	Some further comments then IMO this can be merged uint256.h: inline signed char HexDigit(unsigned char c) extern const signed char p_util_hexdigit[256]; * this function and data structure declaration should be moved to `util.h`, because `util.c` is where the implementation is. Any reason you did this differently? * the argument can be a normal `char` instead of `signed char`, so the cast is done inside the function instead of on all call sites. Return type should remain `signed char` as you said.
3076	26915390	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26915390	lano1106	Wladimir, I agree with changing input param type. However, the function cannot be moved in util.h Why? Because this would create a circular dependency. uint256.h would need to include util.h and util.h already include uint256.h. This is arguable that in that case, the array definition could then be moved into a new cpp file uint256.cpp which do not exists right now. I have decided to not go there but feel free to ask if you feel that this would be important. Another option is to create 2 new files just for that: hexdigit.h/cpp
3076	27070656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27070656	laanwj	I understand... bitcoin has always been rife with circular dependencies and I wouldnt want to reintroduce one. Creating two new files is overkill, most of the core devs dont like to have many small header files (though it would be more modular, it would also be harder to remember where things are, and increase the file-to-file switching needed during development). ACK after squashing into one commit
3076	27187377	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27187377	lano1106	Wladimir, thanks for contributing to my git education. It has been my first commit squashing ever :-)
3076	27187848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27187848	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3074	26115142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26115142	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3074	26226274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226274	sipa	ACK unless there is someone depending on this. Perhaps some people are - I dont know. As this is one way through which "no key reuse" was encouraged, Im sort-of sad to see this go, though its unlikely to be a big deal, as the default key isnt shown anywhere.
3074	26246977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26246977	laanwj	It wasnt a good feature against key reuse. - There are concurrency problems waiting for anyone relying on this in larger sites (that means -- anyone waiting for more than one transaction at a time) - As this is only active in bitcoind and there is no way to interact with the default key at all I doubt anyone is depending on this.
3074	26673233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26673233	sipa	ACK
3073	26033269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26033269	Diapolo	Im fine with that change, I remember it was a pain to see some issues raised, because of wrong data-dir paths because of caching etc.
3073	26115339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26115339	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3073	26226402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226402	sipa	OpenDiskFile() calls GetDataDir, so during IBD and initial startup it is called many times. Its unlikely to be a performance burden, but it seems silly to make that many system calls (yes, I realize we call open() and read() and gettimeofdate() much more...) over and over again, trusting that it will never change. Id be fine with just storing the block directory once in main, and reusing that, instead of having a cache at the GetDataDir level.
3073	26312043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26312043	laanwj	I think its silly to use this kind of caching logic for what is a simple string operation that is only invoked before opening a file. With the system call you mean the fs::create_directories (as getenv is not a system call)? I agree thats a bit silly to do every time. It would be better to create the directories at some sane point in the initialization process and not every time before returning. Hmmm maybe the directory could be stored at that point too, avoiding the computation in GetDataDir completely AND any caching logic, and also the dependency on `Params().DataDir()`.
3073	26647452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26647452	laanwj	I dont care enough about this to keep it open.
3072	26133588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26133588	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3072	26153505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26153505	laanwj	According to the pull tester this has a build problem on win32, though I but have no clue why. Im missing some include in bitcoinrpc.h, but which one?
3072	26153905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26153905	jgarzik	This seems relevant: Review comments: It would be nice if this were split into smaller chunks. At a minimum, I would recommend two commits: * Code movement of existing RPC client code to new .h and .cpp locations. No external behavior changes. * The rest of the changes, adding bitcoin-rpc.exe. Overall the changes look pretty straightforward and correct.
3072	26162172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26162172	laanwj	Ok, thanks for a the link re: boost. Smaller chunks? Usually the question is to squash together the commits not the other way around.
3072	26163174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26163174	jgarzik	Sure. It is also possible to go too far with "everything in one patch" :) The ideal is a progression of logical code transformation steps, much like the steps in transforming an algebraic equation or math proof. Each step must be buildable and testable, so as to not break "git bisect." Code movement is an easy thing to separate out, easy to test as a separate commit, and the commit that follows is much smaller and easier for a human to review and test. In the event of a difficult to discover bug, "git bisect" will tell you precisely which commit contains the bug, proving with 100% accuracy that certain commits are OK, or not.
3072	26171621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26171621	laanwj	Ill make a version without any code movement. That part was an attempt to split off the parts that dont rely on the database/block chain code, but it turned out pointless anyway.
3072	26174852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26174852	laanwj	Closing in favor of #3082
3072	26201830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26201830	sipa	Hmm, in what way does chainparams depend on leveldb/bdb? EDIT: transitive dependencies from chainparams I can find: bignum, uint256, util, core, protocol, netbase, sync, version, ui_interface, serialize, script, compat, hash, clientversion, allocators, keystore, key, crypter.
3072	26207009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26207009	laanwj	Through chainparams it pulls in almost all the implementation files. The only way to solve this would be to make util no longer depend on chainparams, or split up util into a part for the rpc client and a part for the server (after all, the rpc client doesnt even need the network-specific directory or any other part of util.cpp that depends on the chain params).
3072	26217760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26217760	sipa	Ok, with two simple modifications (adding a dummy main(), and moving uiInterface from init.cpp to noui.cpp), the following compile succeeds: g++ -o blah noui.o allocators.o netbase.o script.o core.o version.o keystore.o key.o util.o \ protocol.o sync.o chainparams.o hash.o crypter.o -lcrypto -lboost_system \ -lboost_thread -lboost_program_options -lboost_filesystem The resulting (stripped) binary is "only" 614 KiB here (a significant improvement, compared to bitcoind, which is 3525 KiB). Also note that it doesnt need leveldb, bdb and several boost dependencies. I guess that means that we could try (as a first step), to separate those objects into a libbitcoincore.a or something, which bitcoin-rpc could link against; bitcoind and bitcoin-qt would use both libbitcoincore.a and libbitcoin.a then. Arguably, the core should be smaller. Splitting up util into some components (I think e.g. logging and options-handling can be split off) would certainly help. In any case, netbase doesnt belong in core. The more awkward dependencies are the result of script having both core, validation and wallet logic. I think script should be separated into script-core (the datastructure/serialization definitions), script-eval (used by the validation engine) and script-sign (used by the wallet). That should allow us to drop the dependencies on keystore, key and crypter in core.
3072	26218440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26218440	laanwj	But thats still way too much for the bitcoin-rpc client. There is no way in which the RPC client needs the core, script, key, hash, chainparams, sync, protocol or even allocators. The client part doesnt depend on that, it does no handling of keys or blocks. The only thing it needs is part of the RPC stuff (what I had split into rpcprotocol.cpp and rpcclient.cpp in this commit), and part of util.cpp that has to do with finding the data directory and parsing the options file. But lets first ACK and merge #3082 and then worry about splitting things up.
3072	26218472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26218472	sipa	Agree its still way too much, and lets merge #3082 first. I was just thinking about modularizing the source code in general :)
3072	26219461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26219461	Cryddit	Maybe Im dim, but how can RPC-client live without protocol? I mean, isnt that what it has to use when it asks a remote bitcoind to do anything?
3072	26219496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26219496	sipa	protocol is the P2P protocol nodes talk to eachother. RPC clients just use JSON over HTTP.
3071	25951625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25951625	laanwj	ACK
3071	26115592	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26115592	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3071	26127338	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26127338	Diapolo	Seems reasonable and passes tests, get it in :).
3069	25949844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25949844	Diapolo	Can you take a look at the failure, seems unrelated to my pull.
3069	25950202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25950202	laanwj	Thanks for cutting this down to one change
3069	26032940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26032940	Diapolo	Is currently broken again? Would be nice if this (now small ^^) pull can come to an end.
3069	26101328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26101328	gavinandresen	Pull-tester *is* broken, Im poking at it to figure out why. RE: coinsSent: I think intuition is right, adding to the address book should ideally be done as a coinsSent signal handler. I can imagine some future change where we want to add a coinsSent signal handler that does... something... that would like to know if the address we just sent to is in the address book. And the way youve rewritten the code, that potential future programmer will spend a bunch of time in a debugger trying to figure out why their code is broken (itll be broken because their signal handler will be called BEFORE the address is added to the address book).
3069	26137319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26137319	Diapolo	I changed the code back to emit coinsSent() AFTER the addressbook code was done or skipped, so this can be merged soon. As for the other suggestions to implement another coinsSent signal handler for adding to the addressbook, Im still not sure how do do this, but can now be done in the future anyway :).
3069	26139699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26139699	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3069	26255777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26255777	laanwj	ACK
3068	25881182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25881182	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3067	26033357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26033357	Diapolo	Comments?
3067	26132536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26132536	Diapolo	Updated: - remove fDebug ONLY in code which is NOT performance-critical
3067	26176839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26176839	gavinandresen	I dont think I like the "-debug means -debug=all". I run with debug=1 in my bitcoin.conf, and will add temporary LogPrintf() statements as I develop code (and will remove them or change them to LogPrint("category"...) before pull-requesting). Just like I used to add printf() statements during development that Id remove. If -debug means "print everything", then that doesnt work-- my log messages will get lost in the blizzard of messages. I suppose I could switch to -debug=temp and always LogPrint("temp", ...), but thats more typing and Im lazy.
3067	26177496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26177496	sipa	So what would you like -debug to mean then?
3067	26193843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26193843	gavinandresen	-debug is the same as -debug= which has empty-string for the category. So Logprintf equals Logprint("",...) etc. -- Gavin Andresen On Oct 12, 2013, at 7:55 AM, Pieter Wuille <notifications@github.com> wrote: > So what would you like -debug to mean then? > > > Reply to this email directly or view it on GitHub.
3067	26194361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26194361	laanwj	I understand how logging with an empty category can be useful for temporary debugging, but from a user/external developer viewpoint, is it logical behavior? What would you expect plain -debug to do on a package that you dont know deeply yet and are trying to debug? In any case Id be fine with -debug=all as well instead of -debug to enable all categories. But there needs to be a way (and clearly documented in the help message).
3067	26204384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26204384	sipa	I agree with here - having a "" debug category seems counter-intuitive.
3067	26395016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26395016	Diapolo	Ill summarize, what I think should be default behaviour (I dont say the pull is currently doing this already ^^): Using ``-debug`` sets fDebug and we display ALL categories (``LogPrint()``). Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories. Perhaps we should re-work ``LogPrint()`` to prepend the category in the log-entry, as this will make searching the log MUCH easier!
3067	26400131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26400131	gavinandresen	-debug and -debug= are the same. They both will set mapArgs["-debug"]=std::string("") Changing that so -debug and -debug= sets mapArgs["-debug"] to two different things is likely to break things in unexpected ways. EDIT: just realized Im probably misreading, and you mean -debug being different from -debug=&lt;some_category&gt;. EDIT2: aha! Bitten by github removing stuff in &lt;&gt; .... Ok, I can live with -debug meaning -debug=all. Ill just set my default to -debug=none to get the default behavior I want.
3067	26400848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26400848	sipa	Sounds good to me. Related, but outside of this pullreq: Ive been wondering whether categories shouldnt just correspond to threads, and indeed, whether we shouldnt just print them by default. Also, do we really worry enough to make -logtimestamps non-default anymore?
3067	26403021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26403021	laanwj	when learning a codebase or trying to find a problem in an otherwise unknown codebase I usually find it useful to enable all debug information, to get some idea what it is doing. Its of more limited usability once you have a better idea what youre looking for.
3067	26508301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26508301	Diapolo	Can you take another look? I added some suggestions from above and as I wrote earlier, this is achieved now: Using ``-debug`` or ``-debug=1`` sets fDebug and we display ALL categories (all ``LogPrint()``). Using ``-debug=<category>`` sets fDebug and we display ONLY the speciefied categories (only ``LogPrint(<category>)``). It would be still fine, if we could add category in front of the log entries e.g. ``[net] blabla happened``.
3067	26508400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26508400	Diapolo	Agreed, ``-logtimestamps`` should be default, as its much more readable IMO.
3067	26781141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26781141	Diapolo	Rebased, fixed a merge-conflict. Can I get some final ACKs or futher comments?
3067	26786152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26786152	Diapolo	Great suggestions, re-working...
3067	26787547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26787547	Diapolo	Updated: - help message - special-case -debug=0/-nodebug - replace my checks with generic checks (thanks and ``-debug`` overrides ``-debug=<category>`` and ``-debug=0`` or ``-nodebug`` override all others! I hope this is now just a final review!
3067	26795879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26795879	Diapolo	Failure because of the json-pull...
3067	26970159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26970159	Diapolo	Updated and removed an unneeded ``\n`` in ``InitWarning()``.
3067	27143766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27143766	Diapolo	Can I get some ACKs :)?
3067	27153373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27153373	sipa	ACK apart from the nit above.
3067	27154547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154547	Diapolo	I reworked the help-message for -debug once more, it reads now: bitcoind: ``Output debugging information for <category>. Output all possible debugging information if <category> is not set. <category> can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net.`` Bitcoin-Qt: ``Output debugging information for <category>. Output all possible debugging information if <category> is not set. <category> can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net or qt.``
3067	27154768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27154768	sipa	Its stil an extremely long line :)
3067	27177300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27177300	Diapolo	Like this? <pre> Output debugging information for category. Output all possible debugging information if category is not set. Category can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net. </pre> Or feel free to just suggest a string, so we can merge this :).
3067	27204638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27204638	Diapolo	New string with new-lines :-D. bitcoind <pre> Output debugging information for category. Category can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net. Output all possible debugging information if category is not set. </pre> Bitcoin-Qt <pre> Output debugging information for category. Category can be addrman, alert, coindb, db, lock, rand, rpc, selectcoins, mempool, net or qt. Output all possible debugging information if category is not set. </pre>
3067	27377314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27377314	Diapolo	I hope is now happy again and or can give a final ACK.
3067	27398728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27398728	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3067	27444504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27444504	sipa	ACK
3066	25876677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25876677	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3065	26116242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26116242	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3065	26170442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26170442	sipa	Are you sure the leveldb flag is needed, and not just rebuilding? You may need to clear your leveldb subdir after upgrading to post-autotools code.
3065	26689833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689833	gavinandresen	Closing; compilation flags are passed down into leveldb by the autotools-generated upper-level Makefile. And readme-qt.md is gone (see doc/build-unix.md).
3061	25785533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25785533	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3061	25792037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25792037	laanwj	My main gripe here is that youre making the code longer instead of shorter. Have you benchmarked the improvement in any way?
3061	25792589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25792589	Diapolo	That is really the sort of code I dont like to read, before AND after ^^.
3061	25863055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25863055	lano1106	laanwj, what metric are you using to make the statement that the code is longer? Line code count may be misleading. Out of the 26 new lines, 9 are empty lines or lines only having brackets. Also consider that previous statement: int64 n_abs = (n > 0 ? n : -n); is in fact a packed if else block. fair enough. Ill produce a small benchmark program and report back the result here.
3061	25863484	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25863484	gavinandresen	I find the old code easier to read, and ease of reading is more important than performance. Especially for a routine like this, which I strongly doubt is on any critical code paths.
3061	25864581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25864581	lano1106	Ok. it is not a good pull request. Hell is paved with good intentions. I have benchmarked my modifs and the results are almost identical between old code and proposal. Any memcpy avoided by new code is offseted possibly by the fact it has now 2 string object. local str and strprintf return value whereas the old code benefit from RVO (Return Value Optimization). Thanks for your time guys. Im learning and improving myself. Ill eventually come up with a good pull request!
3061	25880294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25880294	laanwj	thanks for trying to help anyway!
3060	25857069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25857069	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3060	25858285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25858285	gavinandresen	Merged.
3059	25782818	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25782818	gavinandresen	How did you test the if (!fRet) case (that is, the case of an error during the startup process)? I tested an alternative version of this patch that just does a join_all in the clean shutdown case by starting up / shutting down 100 times, so ACK on that part. But Im not willing to spend the time testing all of the startup-failure cases to make sure they dont result in a hang due to some thread-blocking-waiting-for-another-thread-during-startup case.
3059	25786745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25786745	Diapolo	Gavin, I didnt test them, as this patch is based on an observation (missing ``join_all()``) and your comment in my issue-ticket. Im fine with removing it for ``if (!fRet)`` and just placing a comment there instead.
3059	25786897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25786897	Diapolo	Updated based on Gavins comments.
3059	25787640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25787640	gavinandresen	Nit: its not true we "cant" test all of the startup failure modes, I actually DID test them all (by simulating all the failure cases with hacked versions of the code) when I did the thread work originally. Absolutely clean shutdown when there is an error starting up is just too low a priority to justify taking all that time.
3059	25788105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25788105	Diapolo	Updated comment, to address the nit :).
3059	25805790	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25805790	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3057	25747084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25747084	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3057	26031884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26031884	laanwj	As I understand it according to the C standard, this changes nothing. : 714 Otherwise, if the operand that has unsigned integer type has rank greater or equal to the rank of the type of the other operand, then the operand with signed integer type is converted to the type of the operand with unsigned integer type. `int` and `unsigned int` have the same rank, so the result of the all the operations in this function is `unsigned int` exactly as we want.
3057	26032008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26032008	Diapolo	Yeah, even if it doesnt change behaviour, as was intended, it allows at first look what is done there IMO. If this is unneeded, just close the pull :).
3057	26032628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26032628	laanwj	It is important to specify `U` explicitly in cases where youre working with types of different rank, for example int and unsigned short. As the rank of the signed type is larger in that case the result will be a signed int, which might be not what you want. Whether it makes sense to do it here is a matter of taste / coding style. Usually its indeed better to be explicit to prevent bugs due to undefined behavior popping up. And for bitwise arithmetic you should use unsigned types. But this has its limits in practicality, its not like its necessary or more readable to add U behind half the values in the program :)
3057	26043371	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26043371	jgarzik	NAK, not needed
3056	25747426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25747426	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3056	25763763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25763763	laanwj	ACK
3055	25746023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25746023	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3055	25763794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25763794	laanwj	I feel somewhat safer if the .desktop specifies the whole path, at least for the executable.
3055	26102762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26102762	wtogami	The Icon change is fine. I would similarly suggest the full path for a distro package in order to guarantee that you are running the expected packaged binary instead of what may be installed elsewhere and earlier in $PATH.
3055	26226453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226453	sipa	Agree with and But perhaps these are more distro conventions than things we should be deciding?
3055	26227145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26227145	wtogami	My earlier point is that it is awkward to have a distro packaging be reliant on what upstream is willing to include. I would be in favor of complete removal of all distro-specific things. There is a similar issue in the always out-of-date Ubuntu build instructions included in Bitcoin. Let distros bikeshed all they want, outside of Bitcoin.
3055	26244584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26244584	prusnak	Distro packaging is of course not reliant on what upstream is willing to include. Its very hard to find upstream that is able to create a valid desktop file (categories are usually the biggest culprit), so distributions keep patching that stuff all the time. At the same time it is nice not to carry a lot of patches in distribution packages, because it enhances upstream codebase and simplifies maintenance of the packages. Thats why I sent this pull request, but feel free to decline it if you see it doesnt fit.
3055	26246115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26246115	laanwj	The summary is that were ok with the change in the image file name, but not with the change of the executable to a non-absolute path.
3055	26247027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26247027	wtogami	> At the same time it is nice not to carry a lot of patches in distribution packages, because it enhances upstream > codebase and simplifies maintenance of the packages. Thats why I sent this pull request, but feel free to decline it if > you see it doesnt fit. Broader discussion: Any distro-specific packaging or build instructions does not belong in upstream at all. They do not match distro conventions, they often become obsolete, and you to jump through hoops to get them updated. How is going through this hassle "simplfying the maintenance of packages"? You dont see Fedora or Gentoo demanding distro-specific stuff to be included into Bitcoin for these reasons. Narrow issue: I would ACK changing the image file name but not the executable path. As long as upstream has any say we do not want to encourage the possibility of running the wrong binary. Want to avoid this hassle? Stop relying on upstream for distro-specific things.
3055	26248048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26248048	prusnak	Desktop file is not distro specific stuff. DSC, "debian" directory or SPEC file is. Please stop mixing two quite different things for the sake of your arguments (with which I do agree).
3055	26249626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26249626	wtogami	I would agree with you except for contrib/**debian**/bitcoin-qt.desktop
3055	26253187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26253187	laanwj	Right, ignore the "debian". It grew from debian a long time ago but the stuff inside the directory (like the desktop file and man page) is pretty much generally usable.
3055	26705731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26705731	laanwj	Closing this, nothing constructive is happening. Distributions are free to do whatever they want with the .desktop file that makes sense in their specific environment.
3054	25736597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25736597	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3054	25737552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25737552	gavinandresen	NACK from me. Compilers are very good at optimizing away creation of temporary objects, and Im against this kind of "worry about micro-optimizations that used to matter in some compiler somewhere but arent relevant any more" change.
3054	25742924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25742924	lano1106	g++ 4.8.1 isnt that good then as I have verified that the generated binaries after the patch were smaller. I have seen computation programs execution time reduced from 2 hours to 25 mins by doing just that. Granted bitcoin is probably more io bounded than it is doing heavy STL iterations but why doing gratuitous pessimization when a better form that does not affect readability or code complexity exist is offered? I want to contribute to your project and before taking on more ambitious tasks, I want to slowly gain your trust by doing small improvements. Greetings,
3054	25743331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25743331	gavinandresen	Our bottleneck is testing and review, so the best way to slowly gain our trust is to help test and review existing pull requests, before adding to the general workload by submitting small improvements that must still be tested and reviewed. RE: generated binaries are smaller: how much smaller for release builds? Eleven bytes or eleven-hundred K? Significantly smaller binaries would be a good reason to accept this patch (and should have been mentioned at the start as a reason to accept).
3054	25750200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25750200	gmaxwell	> I have seen computation programs execution time reduced from 2 hours to 25 mins by doing just that. And the improvement here was?
3054	25762528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25762528	lano1106	Gavin, We are talking about 10KB on the 64-bits build but I think that you were right and I must say that this is before stripping the exec. After stripping they have the same size. I have explored the question further with these small test program lano1106@Wailaba2 ~/dev/test :( $ cat pre.cpp #include <iostream> #include <map> int main( int argc, char *argv[] ) { std::map<int,int> m; for( int i = 0; i < 10; ++i ) m[i] = i; for( auto it = m.begin(); it != m.end(); ++it ) { std::cout << it->first << : << it->second << \n; } return 0; } lano1106@Wailaba2 ~/dev/test $ cat post.cpp #include <iostream> #include <map> int main( int argc, char *argv[] ) { std::map<int,int> m; for( int i = 0; i < 10; ++i ) m[i] = i; for( auto it = m.begin(); it != m.end(); it++ ) { std::cout << it->first << : << it->second << \n; } return 0; } lano1106@Wailaba2 ~/dev/test $ g++ -S -std=c++11 pre.cpp lano1106@Wailaba2 ~/dev/test $ g++ -S -std=c++11 post.cpp lano1106@Wailaba2 ~/dev/test $ diff pre.s post.s The output is significantly different but as soon as you put a -O switch the difference goes away. I have learn something from this discussion. Thanks
3054	25763768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25763768	laanwj	Were not a big fan of commits that make changes all over the place. If you want to optimize, its better to pick a function thats used a lot, benchmark it, then re-benchmark it after the changes.
3053	25700283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25700283	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3053	25703598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25703598	laanwj	According to Wikipedia (https://en.wikipedia.org/wiki/List_of_IPv6_tunnel_brokers) youre correct. ACK
3053	25705171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25705171	petertodd	Heres the address assignments page from IANA: As you can see 2011: isnt a valid prefix. whois says hurricane electric has 2001:470::, and my IPv6 tunnels I have with them are all in 2001:470:: ACK
3053	25746015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25746015	Diapolo	2 dev ACKs with valid sources should lead to immediate merge for such small pulls IMHO :).
3053	25763926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25763926	laanwj	it would have been even better if the submitter of the pull request cites sources
3053	25766986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25766986	Diapolo	You are right, perhaps the sources should have been mentioned in the commit-msg also.
3048	25675839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25675839	gavinandresen	NACK. listunspent currently sorts by transaction id, because that is the key used to index the wallet database. If you want sorted listunspent, heres a little python code that will do it ( ./bitcoind listunspent | python sortunspent.py ) ``` #!/usr/bin/env python # # Reads a JSON array, sorts by item["amount"] # import operator import json import sys json_string = sys.stdin.read() json_array = json.loads(json_string) array_sorted = sorted(json_array, key=operator.itemgetter("amount")) print json.dumps(array_sorted, indent=1) ```
3048	25677437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25677437	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3048	25706092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25706092	petertodd	Keep in mind that the RPC interface is intended for software to use, not people. Speaking of Python, Jeff Garziks python-bitcoinlib library now has a decent RPC interface - you might find it useful to use it to write code to automate whatever tasks you find the RPC interface useful for. Im working on "pythonizing" it further to make using it more Pythonic, see my pythonize branch: Jeff has said that he sees my work as the direction the library will go in the future, so feel free to write code against it; that branch isnt going to be rebased prior to merging at this point. A small and easy to understand example of it being used for a real-world task is my dust-b-gone program: Hope that helps!
3048	25788206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25788206	kybl	Thank you very much, both of you. Gavins Python program works perfectly for me, and I like how it is trivial. Thanks for it, now is my problem solved :-) And yes, I agree that RPC commands should be processed by software, not people. Actually, this is only command that I feel necessity to use (so something in the GUI is missing). When coin control will be released, I think that this will be solved definitely. Peter, thank you for interesting branch, I look into it deeper. So thanks again, problem is solved for me :-)
3047	25676018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25676018	gavinandresen	NACK on the else if (howmuch == 0). That is dead code, because the only two places Misbehaving(0) can happen are the two places where you put checks to not call Misbehaving in the first place. Either keep the checks, or just have Misbehaving(0) simply do if howmuch == 0 return;
3047	25682584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682584	Diapolo	Updated and removed the ``else if (howmuch == 0)``. Should be fine now.
3047	25683522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683522	sipa	ACK
3047	25688582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25688582	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3047	25688776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25688776	laanwj	ACK Though I must say the code is a bit confusing to read. The argument of state.IsInvalid(nDoS) is an inout argument which is then checked in the same if() clause.
3047	25767071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767071	Diapolo	You were thinking of this? <pre> int nDoS = 0; if (state.IsInvalid(nDoS)) if (nDoS > 0) pfrom->Misbehaving(nDoS); </pre> Yeah would be easier to read...
3047	25787604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25787604	laanwj	Yes, Id prefer something like that, as it gives more of a signal to the reader that nDOS is the result of the state.IsInvalid() call. Now they could think hey, its never >0, lets cut that code out!, but never mind this is just bikeshedding...
3047	25788243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25788243	Diapolo	You know I take such comments very seriously and created #3064 to address it :).
3046	25467161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25467161	sarchar	Changed to a thread-safe version.
3046	25676213	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25676213	gavinandresen	Please add a comment explaining why a simple static instance doesnt work, or somebody not running on Windows is likely to simplify this code in six months by reverting it to what we have now. Also: what other initialized-at-startup-time objects do we have that use the LockedPageManager and tickle this bug? Perhaps it would be better to initialize those at startup (and explicitly delete them at shutdown). In any case, two commits should be squashed and the TODO done before merge.
3046	25745581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25745581	sarchar	I added comments and addressed destruction. The objects types using the secure_allocator are SecureString, CKeyingMaterial, and CPrivKey. SecureString is used as a parameter to some functions that could be used during object construction (or could end up being used by someone else in the future). It would be non-trivial to make sure these objects are not used in staticly constructed objects. In the long run, I think the best solution is to eliminate all staticly-initialized objects entirely and instead explicitly create the objects at init and free them in shutdown. If thats something you want, I can start working on that...
3046	26226567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226567	sipa	Managed instances are generally better practice than globally-contructed objects, as construct/destruct order isnt guaranteed between them. Also, if there are objects that have overhead in constructing, doing so lazily (=upon first use) is better for modularity (dont waste time/memory on stuff that a user of your code doesnt use). General ACK on the idea, though Id feel more comfortable if the page manager would also get destructed again. Do you know if theres a best-practice idiom for that? Also needs rebase.
3046	26227524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26227524	sarchar	> General ACK on the idea, though Id feel more comfortable if the page manager would also get destructed again. Do you know if theres a best-practice idiom for that? From what I understand (about C++), local-statics are destructed in the reverse order theyre constructed before program exit. So the destructor is indeed called at exit. Also, rebased.
3046	26227602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26227602	sipa	```LockedPageManager::_instance``` is indeed destructed at shutdown, but it is a pointer; the object it points to isnt destructed. One option would be using a ```boost::scoped_ptr<LockedPageManager>``` instead of a ```LockedPageManager*``` EDIT: I misread, youre not constructing it on the heap, but in a method with a local static.
3046	26227932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26227932	sarchar	> EDIT: I misread, youre not constructing it on the heap, but in a method with a local static. Yeah, it gets destructed in the atexit() code of the standard C++ runtime. You can put a breakpoint in the base classes destructor to verify. Ill fix up those other notes you mentioned.
3046	26666736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26666736	sarchar	Removed "initialized in util.cpp" comment.
3046	26667538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26667538	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3046	26671354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26671354	sipa	ACK
3045	25432728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25432728	wtogami	ACK to this complex code change. =P
3042	25343607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25343607	laanwj	ACK, good thing to get rid of wine here
3042	25347641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25347641	sipa	Also, why not wait with bumping the version until we actually do update the sources (to 1.8, or whatever is decided). It shouldnt matter for now.
3042	25347861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25347861	wtogami	I bumped the .zip revision because the payload actually was different. Good catch, I forgot to s/1.8/1.6/ with this PR that doesnt actually upgrade miniupnpc yet. Should we do the same thing as the previous PR, one commit for the wine removal, and another to upgrade to 1.8?
3042	25349888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25349888	wtogami	Fixed the patch to have 1.6 instead of 1.8. I dont have time to test 1.8 right now, so lets limit this PR only to wine removal for now.
3042	25376841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25376841	theuni	Since there are a few of us working on build/gitian related changes, Id recommend not merging these right away, just let them stack up. Maybe give them some kind of tag on github. Itll only serve to confuse to bump the version numbers a half-dozen times before settling down.
3042	25432803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25432803	wtogami	VERSION file now supplies the string to the patch file. This is now ready for commit. This will be the last gitian change in the next few days to stop the churn and allow cfields to do the cleanups he wants.
3041	25328903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25328903	Michagogo	Ive tested and confirmed that the dependency descriptor does complete without error and produces the zip -- tomorrow Ill be able to verify that this does, in fact, build bitcoin for win32 successfully.
3041	25329753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25329753	wtogami	While this patch works, cfields has a better idea. Closing this PR. Something else will come soon.
3041	25343378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25343378	wtogami	This has been superseded by #3042.
3040	25356066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25356066	laanwj	Fine with removing the debug message, but please dont remove the NULL pointer check.
3038	25312376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25312376	wtogami	This looks very helpful in debugging our shutdown issues, although does the completely unrelated spelling fix belong in this PR?
3038	25317721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25317721	Diapolo	OT: It has proven to be effective to add small style or spelling fixes to other pulls as otherwise no dev ever ACKs such pulls in a reasonable amount of time.
3038	25317997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25317997	wtogami	Certainly we can come up with a fast track procedure to accept obviously correct style/spelling fixes. That would be better than the inability to ask people to keep changesets limited to a particular purpose because we dont do so ourselves.
3038	25318048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25318048	Diapolo	I couldnt agree more :).
3038	25320506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320506	sipa	I often ignore Qt-related pull requests, as Im not interested or familiar with that code; perhaps several others have the same tendency, which results in fewer people looking at your pull requests. Maybe that gives you an impression that they are overlooked. Id rather not mix unrelated typo fixes with actually functional commits though. On the other hand, I think that if I see pure comments/typo changes that seem uncontroverial, I just merge them.
3038	25348093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25348093	wtogami	Please remove the spelling fix from this PR and submit it separately, then lets start a policy discussion on the dev list on fast tracking such obviously correct meaningless fixes, pointing at that PR as an example of why it is needed.
3038	25431028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25431028	Diapolo	Updated to reflect our discussion :).
3038	25516090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25516090	Diapolo	Updated to fix a merge-conflict.
3038	25616153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25616153	Diapolo	Any reason not to merge this?
3038	25616464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25616464	sipa	ACK
3038	25619178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25619178	jgarzik	ACK
3034	25186619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25186619	Diapolo	We should use where available and I tried which works. ACK if you update to
3034	25217547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25217547	fanquake	Updated.
3034	25225286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25225286	Diapolo	ACK
3032	25146017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25146017	Diapolo	NACK, please use for updating translations. We wont merge language updates via pull-requests, sorry.
3032	25170409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25170409	laanwj	yes, please upload this to transifex and it will be included automatically
3032	25208221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25208221	timsk	Ah OK, no problem, Ill upload it there instead. Thanks for your swift replies.
3032	25228852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25228852	timsk	Im not an expert in Transifex Ive just uploaded my file there as requested, but Id be grateful if you could have a quick look there and confirm to me that everything seems to be in order to have the new localisation included in the next version. (And roughly how long is the wait for that to happen?) Thanks in advance.
3032	25295123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25295123	laanwj	looks fine to me, esperanto is at 100% now
3031	25088851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25088851	sipa	ACK if pulltester is happy
3031	25089828	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25089828	jgarzik	ACK
3029	25132234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25132234	wtogami	cfields indicated this ar is not deterministic by default so the hacks need to remain. The next update will include this commit to make all mingw builds static. Discussion in #bitcoin-dev seems to indicate general agreement on upgrading all gitian win32 library deps to stable versions that several distros already ship. To make it easier to review, I will separate the commits to working precise 12.04 gitian with the previous boost-1.50 + build patch, and another commit that upgrades all the libraries. Before adding this to the next PR update, please provide feedback to indicate that this would be accepted. It is a non-trivial amount of effort to test all this.
3029	25145916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25145916	gavinandresen	We currently require 2 VM images to create a release (10.04 32-bit used to compile linux 32-bit and windows binaries, and 10.04 64-bit used to compile linux 64-bit). Ideally, a single 12.04 64-bit VM could compile everything; if you can get that to work, and produce binaries that work for Windows XP+ and (whatever the equivalent version is for Linux) then Im all for it, and will gladly do the (not trivial) work of creating a 12.04-based VirtualBox VM for gitian-building. Im less enthused if this means anybody who gitian-builds has to create THREE virtual machine images. RE: updating library dependencies: same criteria, and "widely distributed, not bleeding-edge" is a good guideline, unless, of course, there are critical security fixes that might affect us.
3029	25147320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25147320	wtogami	The added storage requirement for base-precise-amd64.qcow2 is only 739M. That is necessary to modernize the toolchain, enable more hardening and possibly performance optimizations later. The mingw back in the 10.04 era was pretty dire compared to what shipped in 12.04. There was a productive discussion about improvements to the Linux deterministic binary process in #bitcoin-dev today. Some interesting options there were proposed. I would warn however to keep this PR solely on the needs of the win32 build. "widely distributed, not bleeding-edge" seems to be the reasonable consensus for dep upgrades. I will look at various distros along with patched CVEs if they exist, and pick an appropriate version and patches.
3029	25159926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25159926	wtogami	Each commit here results in a working win32 build. * cfields commit allows the new mingw32 to build without errors and has no effect on the old mingw. * Upgrading to precise 12.04 is literally only that plus the mingw32 compat patch that was later added to boost-1.51. * The following commit upgrades to boost-1.54 and demonstrates a very simple method to check the integrity of source inputs. Unless there are more improvements to be suggested I believe this is ready for commit. The next step after commit would be to research the "widely distributed, not bleeding-edge" dep versions, verify that the source tarballs used by multiple distros are identical, then verify that Bitcoin win32 remains working with all those upgrades. I suggest michagogo, with his interest in gitian and learning, to work on that next step as it is time consuming but achievable by someone who is learning software development.
3029	25168861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25168861	laanwj	Changes ACK (though release-process.md has to be updated to download the new dependency boost-mingw-gas-cross-compile-2013-03-03.patch ) - havent tested yet
3029	25170501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25170501	wtogami	release-process.md has been updated for boost-mingw-gas-cross-compile-2013-03-03.patch
3029	25170871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25170871	sipa	ACK on upgrading win32 gitian to mingw-w64 and upgrading boost. We probably want to converge to a single VM for everything, with ideally the following properties: * Old glibc, so that the resulting binary works on many systems. * Modern g++, so we can start using for example C++11 features and -flto * Mingw-w64 to have a modern win32 (and perhaps one day win64) environment. For now, there dont seem to be any readily-available options that combine all properties, so lets stay on Lucid for linux builds for now.
3029	25205036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25205036	wtogami	OFF-TOPIC for this PR but responding anyway. Regarding "Ideally, a single 12.04 64-bit VM could compile everything", consensus is that it is infeasible as its built binaries would be incapable of running on RHEL6, a major server platform on which it is quite difficult to build Bitcoin from source. It would also drop 10.04 which is still supported as a server platform. The more recent conversation wandered into the desire to have modernized toolchains building to a target old glibc. If that is the case, then we are better off keeping Linux gitian as-is for 0.9 (as it works just fine right now) and looking at future available options. The ideal future single VM would cross-compiling everything from a long-term supported distro that maintains modern toolchains for us. This would allow us to maintain only minimal toolchain additions ourselves, themselves deterministic built on the underlying OS. On whatever future platform that is chosen we can build deterministic Linux binaries for i686 and x86_64 against a particular target old glibc ABI. Whenever a mac cross-compile toolchain happens, it can be built and deployed there too.
3029	25300947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25300947	sipa	Agree with merging this now, so we dont have to rely on an ancient GCC with limited hardening anymore for Win32, and postponing the discussion about what to do for the linux build environments later?
3028	25320537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320537	sipa	ACK changes, but needs rebase.
3028	25320927	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320927	Michagogo	Rebased (I hope I did that right) and added one more small fix.
3028	25476312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25476312	Michagogo	Switched from to for those downloads that support it, and rebased (a second time, onto Jeffs null wallet commit)
3028	25657912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25657912	Michagogo	Re-rebased.
3027	25063522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25063522	Diapolo	Can you post a before / after comparison, Im not sure what this fixes ;).
3027	25088660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25088660	cozz	There is a huge gap between "Label:" and "Amount:" Before: After:
3027	25100825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25100825	Diapolo	ACK, I confirmed this fixes the issue!
3027	25110463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25110463	cozz	Someone should test, if this change affects the payment protocol design.
3027	25146045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25146045	Diapolo	Secure payments ui looks good, will post a screen in a sec... ![secure payment ui](https://f.cloud.github.com/assets/1419649/1215800/65b258c4-2674-11e3-8fd6-8328db10f883.png) So still ACK!
3026	25009018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25009018	jgarzik	ACK
3026	25077882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25077882	Diapolo	Seems I ran into this after compiling latest master and started a reindex after the check failed... if this helps fixing this Im for merging this asap.
3026	25079367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25079367	gavinandresen	Untested, but looks good to me-- ACK.
3024	24920395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24920395	petertodd	I wrote up that proof-of-tx propagation idea we talked about a few weeks ago and posted it to the email list. Given that fee estimation is still going to result in users getting their transactions stuck with few ways to fix the problem I think wed be much better off pursuing tx-replacement first rather than easily sybilled fee estimation. Replacement can be implemented in a zero-conf safe way if desired (albeit at the cost of occasionally failing due to a lack of txouts) and would make wallets and other software across the whole Bitcoin ecosystem more resilient to the replacement-related errors that wed see anyway with memory limited mempools. (never mind people exploiting tx mutability, or CoinJoin, or a zillion other ways)
3024	24947299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24947299	gavinandresen	re: replacement: I havent seen any reports of people using un-hacked reference code having transactions permanently stuck, so I dont see any need for transaction replacement yet. And this code should be strictly better at getting the fee or priority right the first time than the hard-coded rules we have now. a txrejected message when refusing to relay a transaction sounds reasonable to me, although youll of course have to be careful about peers that lie or peers that send you a flood of txrejected messages.
3024	24961518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24961518	petertodd	Ive seen them get stuck for a dozen blocks - pretty poor user experience. No amount of fee estimation can predict the future, IE the network getting backlogged due to a string of bad luck.
3024	24961638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24961638	sipa	I think getting wallets to deal well with non-confirming transactions is required for this anyway. We should detect conflicts of wallets with the mempool and the blockchain, and be able to mark non-confirming transactions as dead. If we have that, well have much more freedom to experiment with things like this.
3024	24962258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962258	petertodd	was going to be able to better handle those cases, although I havent seen any action on that patch lately. I think the correct logic is for the wallet to replace any existing transaction it sees with another transparently provided that at least one input is conflicting (making it not possible for both to be mined) and all outputs with scriptPubKeys in the wallet are greater or equal in value. Otherwise continue broadcasting the version we wanted mined. The actual mempool replacement code I wrote awhile back: if at least one input conflicts, no new inputs are already spent, no output is already spent and new outputs are a superset of the old (txout value may be increased) replace the transaction.
3024	24962486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962486	luke-jr	Is there a summary of the logic used? How does it handle out-of-band mining arrangements, spam filters that use different logic than its own, etc?
3024	24962795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24962795	sipa	Thats the reason for suggesting looking at transaction remaining in the memory pool, rather than transactions being accepted. See it this way: the P2P network is one way to distribute transactions to miners, but we shouldnt assume its the only one. The memory pool is how we observe this distribution channel specifically. The block chain is the result of all miners transactions combined.
3024	24963784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24963784	petertodd	Thats not what this patch implements: and - tx estimate data is added when a transaction is included in a block. Any miner who is accepting out-of-band payment for transactions previously broadcast will seriously mess up the estimates, driving required fees/priority down and getting users transactions stuck. (though oddly it seems that txs with both positive fees and priority are ignored: - this ignores data from wallets that dont do priority calculations, probably the majority of transactions) One really ugly thing about the out-of-band payment case is by driving down apparent fees it wastes network bandwidth relaying transactions that as little as a single miner can profitably mine. NACK
3024	24964095	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964095	sipa	Oh, I didnt claim this patch did. Just explaining why I suggested using not-included-transactions (which Gavin mentioned in the pullreq).
3024	24964200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964200	sipa	Maybe looking at mined transactions gives a bit better estimation than by looking at those that dont, but if that means a system that is more easily gamed (which is what it seems, to me), thats not necessarily worth it.
3024	24964444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24964444	petertodd	Oh, sorry. Agreed on disliking easily gamed systems, especially given that weve got some fairly large transaction makers like bc.i who might very well have enough volume to create large amounts of out-of-band payments. (@luke-jr eligius has an agreement with mt. gox or something to mine txs right?) Anyway, the txs getting stuck by accident problem is a good enough reason to do things differently.
3024	24965097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24965097	petertodd	Also come to think of it the estimation code cant handle child-pays-for-parent properly either, particularly cases where one child pays for multiple parents. Similarly it doesnt properly handle anomalies in the average fee-per-kb paid by larger transactions compared to smaller ones, which will be the case given the tendency for wallets to apply minimum fees for small transactions. (a single large transaction has the same statistical sample weight as a single small one)
3024	24966361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24966361	luke-jr	On the other hand, only looking at not-included-in-blocks fails to account for better spam filters on miners (for example, many miners filter out DP spam using non-mainline algorithms). So we definitely need to consider both sides of the spectrum. I think you have a good case that we need transaction replacement, but we also need to get away from hard-coded fees too. Until wrote this, I dont think anyone was actively working on either problem. So this is definitely a step forward - someone just needs to get the other foot to move forward along with it. The current algorithms already dont work nicely with CPFP, so I dont think that should be considered a blocker.
3024	24983496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24983496	mikehearn	Were not going to do anything that breaks unconfirmed transactions. bitcoinj already has some support for dead tx handling, although its incomplete/buggy. However its for double spends. We dont have reports of transactions getting stuck due to lack of fees from people using un-modified bitcoinj based wallets. When transactions dont go through for some reason it tends to be for other reasons (flaky network etc). However, a part of that reason is that we never generate free transactions. If we tried to do that, then transactions *would* get stuck due to the entirely arbitrary 27kb limit. Regular bitcoind nodes know when its got full because they have the mempool, but other types of wallet dont. Removing the 27kb limit is an obvious and simple way to solve that.
3024	24989399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24989399	gavinandresen	: I am not claiming that this is the perfect solution. I am claiming that it is strictly better than the code that exists in the reference implementation today. You have a habit of claiming that things are "impossible" and simply being wrong (estimating can easily be extended to related-groups-of-transactions instead of single transactions for parent-pays functionality, for example). RE: off-blockchain side-deals : please tell me more about how those actually work (@luke-jr : what is CPFP????).
3024	25003508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25003508	gmaxwell	"Regular bitcoind nodes know when its got full because they have the mempool, but other types of wallet dont.", no they dont they dont make use of the knowledge. I suspect it wouldnt be super useful... Ive never seen a stuck report that I could attribute to that. (ah, I was busily typing out saying that I couldnt believe you werent getting stuck reports But android wallet doesnt support importing keys, does it? I think a majority of stuck reports Ive gotten are not fee related, but are due to things like importing keys from bc.i wallets in an attempt to unstick a transaction there, and only ending up with more things stuck)
3024	25005323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25005323	petertodd	Any users of bitcoinj out there who are often making large (1K+) transactions? Because the default rules are to have a minimum absolute transaction fee most people are paying at least twice the minimum fee/KB, and theres lots of traffic paying absolute minimums. In any case "stuck" is relative: if a transaction wont confirm for a few hours because everything else is paid more fees than me Id very much call that stuck if Im trying to buy some Bitcoins in person - that there is no way to set fees in the Android wallet is a complaint Ive heard from people doing trades at the local Bitcoin meetup. How do you feel zero-conf safe version of replacement breaks unconfirmed transactions? Rather than trying to make this personal and putting words in my mouth, how about you just respond as to why you think this patch as it stands doesnt have cases where it will get peoples transactions stuck due to bad fee estimation? If it does, how are you going to fix that before we merge it? I wouldnt say the current algorithms dont play nice with CPFP, rather Id say they dont take advantage of it. The wallet doesnt re-spend unconfirmed transactions other than your own anyway, so the parent tx will always have what the wallet considers sufficient fees.
3024	25005800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25005800	gmaxwell	"Child pays for parent" you sure about that? CPFP means that a block may contain a bunch of too-low-fee transactions which just got accepted because of a high fee parent. This means that CPFP will also distort the metric here.
3024	25006014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25006014	petertodd	I pointed out that problem above; by "current algorithms" luke and I mean what is in the current version, not this patch.
3024	25042780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25042780	luke-jr	"Stuck" means never confirming, not merely delayed (as is the case with no-fee transactions that dont meet the 27kB limit - eventually, theyll get to be in the highest priority 27 kB!). The delay for no-fee transactions is by-design and intentional. Its fine for mempool-less nodes. Off-chain side deals: for example, MtGox publishes a list of their outstanding txids, and Eligius uses the prioritisetransaction RPC call to give them priority over others, including when they might have otherwise failed to meet minimum fee rules. CPFP is ignored by relay nodes already, thus a parent may not get relayed despite having children that make it worth mining.
3024	25047743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25047743	petertodd	You know, given you already do this for MtGox itd be really useful if Eligius had a program that used the inputs.io API to accept off-chain payments to artificially add priority to a given txid. At the simplest youd just have to publish an inputs.io account name ("prioritize_tx@eligius.st") and tell people to put the txid in the "notes" field; pass whatever amount they pay as the argument to prioritizetx. The hardest part would probably be that people would want you to implement logic to give people their money back if you dont have the tx and/or it gets mined by another pool.
3024	25683827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683827	mikehearn	Mempool-less (i.e. SPV/ultralite) clients arent going to create transactions that routinely take hours or days to confirm, thats not what users want. I dont know who or what is using the free area right now, but I guess its not smartphone clients.
3024	25947703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25947703	gavinandresen	Anybody have a good theory for why the win32 pull-tester build is breaking: ``` In file included from /usr/lib/gcc/i586-mingw32msvc/4.2.1-sjlj/../../../../i586-mingw32msvc/include/windows.h:50, from allocators.h:23, from serialize.h:22, from core.h:9, from main.h:12, from txmempool.cpp:11: /usr/lib/gcc/i586-mingw32msvc/4.2.1-sjlj/../../../../i586-mingw32msvc/include/winbase.h:1142: error: PVECTORED_EXCEPTION_HANDLER has not been declared ``` My sleuthing: allocators.h include windows.h. windows.h includes windef.h (unles RC_INVOKERC is set) windef.h include winnt.h ... and PVECTORED_EXCEPTION_HANLDER is typedefed in winnt.h, so I have no idea what is wrong...
3024	25948290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25948290	wtogami	Perhaps look into conditional situations from other preprocessor variables that cause PVECTORED_EXCEPTION_HANDLER to be defined or not. ```i586-mingw32msvc-g++ -E -dM $(mktemp --suffix=.h)``` You can read the actual preprocessor defines from here. Add more compile flags to match the exact build environment.
3024	25948333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25948333	wtogami	I believe the concerns above pertaining to the real potential for stuck transactions from fee misestimation have not been adequately addressed.
3024	25949898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25949898	gavinandresen	RE: stuck transactions: Ok, let me see if I can address those concerns. Before this pull request, clients assume that if a transaction has a fee greater than 0.0001 XBT or a priority greater than 54million then it will be confirmed. So, before this pull request, if transaction volumes goes up, those assumptions break, and people will see transactions never confirm. I believe all of the concerns discussed in this pull request fall into the "perfect is the enemy of the good" category, and that is why I claim that this pull request, while not perfect, is much better than the code that exists in the tree today. As block space becomes scarce, the code in this pull request will give a BETTER estimate than the hard-coded rules we have now. Anybody who commented above: please let me know if I missed some subtle interaction that makes you think that this pull request will be worse than the code in the tree before this pull request.
3024	25951201	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25951201	wtogami	i586-mingw32msvc? Should pulltester be using that when the official win32 gitian binary will be built by 12.04s i686-w64-mingw32 instead?
3024	25961045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25961045	Diapolo	I agree and Im sure Gavin and Matt are working on upgrading the build environment. It should match the one in our release process as close as possible IMHO.
3024	25961921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25961921	petertodd	My point was the mining code still has fixed CTransaction::nMinTxFee and CTransaction::dMinFreePriority logic; the fee estimator will happily estimate fees that are less than those minimums and transactions will get stuck in that case. If you make the fee estimation have a fixed lower bound then youd have a system thats strictly better than the current one. Anyway right now there is the opposite problem: Ive been testing the code on one of my nodes and right now estimatefees calculates the 1% cut-off used for relaying to be 0.23mBTC/KB, lower than the 0.1mBTC/KB hardcoded default. At initial startup after upgrading or if the mempool data is wiped for any reason estimateFees falls back to the hardcoded values until the estimates get enough data, which would mean that transactions created by the user in that time-frame would have fees so low they wouldnt even get into the mempool and thus would get stuck. Anyway without the ability to actually change the fee on a transaction after the fact were always going to run into cases like that - whats your plan to fix this?
3024	25968848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25968848	gavinandresen	RE: fixed lower: that would ruin the entire point, which is to let fees float up or down based on miner behavior. RE: "we have the opposite problem now" : EXACTLY MY POINT. The hard-coded fees are not high enough to guarantee speedy transaction confirmation. RE: what to do if a transaction doesnt get relayed/mined: I like Mikes idea of a "txrejected" message from your peers if they reject your transaction, that is then plumbed up to Do The Right Thing. The Right Thing is complicated, though-- for example, if the wallet is locked then the wallet code cant just create a higher-fee version of the transaction and try again. What do you suggest?
3024	25970908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25970908	petertodd	Both cases where I show estimatefees being fooled into a too low fee are things that can happen without actual transaction volume pressure, and result in worse outcomes than the current code; add a fixed minimum and estimate fees will never make a worse decision than the current code. Once thats done we can consider merging. Long term as I said before we need to have the ability to increase the fees on a transaction after the fact - replace-by-fee does that efficiently, and replace-by-fee+txouts are a strict superset maintains the current zero-conf behavior. Sure, the right thing is a bit complicated, but start moving in that direction now - replacement will break all kinds of really badly written merchant code, but the longer we wait the more of that code will get written. (e.g. BIP70 doesnt make it clear as I suggested before that a payment should be considered valid if a given scriptPubKey:value pair exists, so people will write code that assumes a given txid) re: txrejected, thoughts on tx propagation proofs?
3024	26028815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26028815	petertodd	Also, this patch is broken right now on my system and always creates transactions with no fee at all, even on low priority coins, and even when the paytxfee option is set. (estimatefees returns fee value estimates, so I dont think its a startup issue)
3024	26037354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26037354	mikehearn	I think it might be time to introduce a more general error message construct into the protocol. TX rejection is just one way that nodes can choose to drop or reject messages. Theres also block rejection, command rejection, etc. Although its a little bit more work (sorry Gavin!) its probably not a big piece of code to spec and write. Just a new "error" message with some appropriate fields to help the receiving node categorise. Perhaps if were feeling adventurous a protocol version bump so messages can have sequence numbers and errors can be linked back to the message that caused them.
3024	26116316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26116316	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3024	26176003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26176003	gavinandresen	Im going to close this as "not ready for merge." My TODO before bringing it back: 1) Test plan 2) Figure out some way to unit test CreateTransaction and the should-a-transaction-have-a-fee logic. 3) "error" protocol message
3023	24888205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24888205	petertodd	$ gpg --list-sigs 9692B91BBF0E8D34DFD33B1882C5C009628ECF0C pub 2048R/82C5C009628ECF0C 2013-05-23 uid Michagogo <michagogo@server.fake> sig 3 82C5C009628ECF0C 2013-05-23 Michagogo <michagogo@server.fake> sub 2048R/BC00347E7874C406 2013-05-23 sig 82C5C009628ECF0C 2013-05-23 Michagogo <michagogo@server.fake> Id be more comfortable if your key at least had some signatures on it, and/or you had some git commits in the Bitcoin git repository that were signed by your key. (via git commit -S) You should also have your full name on the key and a real contact email. As it stands a third-party like myself has no evidence that youre actually a person.
3023	24888997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24888997	luke-jr	Nobody has signed git commits in our repos right now... I agree with the name/email, though I dont think it defines who you are as a person. ;)
3023	24889330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24889330	petertodd	I have: ```git log --show-signature | grep Good\ signature``` Discussed it with michagogo on IRC: we think setting weight=1 is reasonable, and would allow setting "minimumweight=121" to say that a build requires three core devs + 1 additional sig. (or something similar)
3023	24889531	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24889531	Michagogo	When you said it should be eleven, was that serious? Was there an actual reason behind that?
3020	24736766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24736766	jgarzik	I do not see any LogPrint() nor LogPrintf() in the tests... printf may be intentional.
3020	24737164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24737164	Diapolo	Indeed, perhaps or can comment. At least the comments and the change in wallet.cpp seems still be needed :).
3020	24793065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24793065	gavinandresen	ACK on the wallet.cpp and main.cpp fixes. Unit test should not LogPrint or printf at all, the test-runner gathers output.
3020	24793598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24793598	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3020	24794428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24794428	laanwj	ACK after getting rid of the tests/ changes
3020	24797268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24797268	Diapolo	Reverted the test changes... I dont want to touch the tests, you are free to remove any output related stuff that shouldnt be in there.
3020	24797329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24797329	sipa	ACK
3019	24729101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24729101	Diapolo	ACK
3016	24708319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24708319	gmaxwell	Pieter and I had discussed this a few weeks ago before his vacation. ACK code, also, I ran 30,000 signatures through this and confirmed that the average signature size is reduced by 0.5 byte, the maximum is reduced by 1 byte, and all 30,000 resulting signatures validated.
3016	24708824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24708824	gavinandresen	ACK
3016	24786146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24786146	gavinandresen	Ignore pull-tester errors for now, Im debugging it...
3016	24903615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24903615	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3015	24700489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24700489	jgarzik	untested ACK
3015	24702020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24702020	theuni	Fixed cosmetics and added a change to fail if windres isnt found for win32 build, since its needed for bitcoind.exe now.
3015	24702267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24702267	Diapolo	Untested ACK, but I prefer if you could fix my nits ;).
3015	24703612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24703612	theuni	Nits fixed, last time I hope :) Uploaded here if youd like to verify, I have no win32 machine:
3015	24722392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24722392	Diapolo	ACK to the Win32 version info change. I verified the executable, looks great, thanks. ![bitcoind](https://f.cloud.github.com/assets/1419649/1171245/4cea8402-2100-11e3-8d56-87c6ef190f4d.png)
3015	24791738	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24791738	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3015	24792227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24792227	laanwj	ACK
3015	24797443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24797443	Diapolo	ACK
3014	24693253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24693253	jgarzik	ACK
3014	24695076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24695076	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3011	24667278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24667278	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3009	24656223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24656223	jgarzik	Agree 100% that calling this printf() causes no end of a annoying problems and minor confusions. Went ahead and merged this, because otherwise it will quickly and perpetually be out-of-date. If anybody thinks this is NAK-worthy, still speak up, and we can back it out (though I hope not).
3009	24656883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24656883	sipa	Posthumous ACK.
3009	24657212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24657212	laanwj	ACK, finally!
3009	24779176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24779176	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3008	24918744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24918744	mikehearn	The free transaction area is still useless because in reality if you create free transactions, you never know when they will confirm. So I dont see why we even bother keeping the "free area" at all.
3008	24919650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24919650	petertodd	Getting rid of free transactions and hence priority would simplify a lot of the codebase - my child-pays-for-parent mempool patch ignored priority for that reason.
3008	24920631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24920631	mikehearn	That wasnt what I meant. Free transactions are good. People like free transactions. But free transactions that are in practice useless and never generated by real-world wallets are bad. They give an easy ride to people doing custom stuff and ordinary users lose out. Itd be better if there was a single ranking of all transactions that acted as if free transactions had a fee attached equivalent to their days destroyed or something like that. The current system isnt conceptually wrong, its just got this bizarre 27kb limit that in practice makes the entire feature worthless.
3008	24921014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24921014	petertodd	Before you try to propose that get some good figures on the marginal cost each KB of transactions costs miners, particularly smaller ones, in terms of increased orphans. I did a rough estimate and came up with IIRC 0.00025 BTC/KB myself. FWIW thats exactly what I had in mind with my mempool rewrite for the mining code: a simple priority->BTC conversion ratio and a setting for how many BTC worth of free transactions you were willing to donate per block.
3008	24921554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24921554	petertodd	Its also worth considering that allowing unlimited free transactions is basically saying that owning BTC is a right to use up a certain amount of blockchain space per block indefinitely. Thats the kind of thing that will give an easy ride to people doing custom, and undesirable, stuff like dumping data and timestamps into the blockchain at the expense of people using Bitcoin as it was intended.
3008	24926581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24926581	jgarzik	We are not getting rid of free transactions until blockchain evidence proves it is pointless. e.g. if no non-free transactions are mined in a 3 month period, the code is clearly pointless. We are nowhere near that point yet. Miners appear to currently be happy with free transactions, as long as they receive their block reward. It brings new users into the system.
3008	24927864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24927864	mikehearn	Currently fees arent funding hashpower, were a long way from that day, so they act just as an anti-flooding mechanism. Using up coin days is just as good a method for that as using up bitcoins themselves, hence the desire to keep free transactions - its a HUGE draw for merchants and a free tx is much simpler for users.
3008	24931535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24931535	petertodd	cost-vs-benefit: given how almost all third-party wallets ignore priority in favor of adding minimum fees obviously there isnt much demand for the feature; while that isnt a reason to remove the code immediately, it is a reason to not bother re-implementing it in a rewrite. If free transaction was such a huge draw wallets would implement them, but they dont bother. Secondly using up coin days is not just as good a method, because owning coins give you a steady supply of new coin days. Its rather obnoxious that I could, for instance, create a timestamping app that made timestamps for free using whatever high-priority coins you had lying around using a bare/p2sh CHECKMULTISIG txout; individually timestamping every single Bitcoin git commit as they were created would only require a BTC or two.
3008	24933321	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24933321	gmaxwell	I would agree with what youre actually saying, except I dont see how it wouldnt just result in every block being the maximum size miners are willing to create. This size is rationally smaller than the size theyre willing to create full of free stuff because a lot of free stuff is DOS attack cruft (e.g. the millions of correct horse transactions) or just due to the increased orphaning risk Hes not suggesting we get rid of free transactions, hes suggesting that for the purpose of prioritizing transactions we convert priority into an "equivalent fee" and just have one list and no separate free transaction limit.
3008	24933992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24933992	jgarzik	Oh, ok, thats more reasonable. Overall the issue will sort itself out once blocks regularly hit 1MB, and a real pricing market emerges. Right now many of our signals are artificial and hardcoded, rather than dynamic and market-driven.
3008	24935339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24935339	petertodd	Yup. Converting everything to BTC makes things like artificial priority modifications, perhaps due to an out-of-band fee payment promise or just because the tx one of yours, easier to reason about as well. Anyway essentially all of this stuff is us saying "We know the technical limits are 1MB/10minutes, but we know there isnt actually that much genuine blockchain demand yet so wed rather set artificial limits so we dont waste our startup capital on spam too soon." Not to mention that we really want people to get used to the idea that transaction have some kind of cost associated with them, however minor, so apps and business plans arent written with bad assumptions baked in.
3008	24948076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24948076	gavinandresen	All this talk about free transactions is lovely... ... are there any comments relevant to this PARTICULAR baby-step change?
3008	24993334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24993334	mikehearn	The change is OK as long as you realise it only helps people using Bitcoin-Qt. Other kinds of wallets wont be generating free transactions even with this modification, because theyll continue to be too unreliable.
3008	25023164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25023164	petertodd	(responding to some concerns Ive seen elsewhere) The first commit does make sending small utxo-spamming transactions cheaper, but thats such a niche case I think simplifying wallet code is more important. (Ive had txs get stuck on testnet at least because I forgot that case while writing wallet code that calculated fees on a per/kb basis) The other commit will help prevent free txs getting stuck, and the overhead added when youre just cleaning up inputs is insignificant. ACK
3008	25205750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25205750	cozz	Instead of removing the "CENT-output free transaction rule" you may want to consider doing this: if (GMF_SEND && nMinFee < nBaseFee) So only remove for gmf_relay. Otherwise you still have the risk of people creating never confirming free txs. The code could then be removed completely in the future after most people have this new relay rule.
3008	25685227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25685227	mikehearn	Putting aside the strategy discussions: LGTM, this change looks good to me.
3008	25687079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687079	wtogami	I am in agreement with in that the network needs a way to smoothly transition into this.
3008	25687577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25687577	petertodd	There are very few >1000byte free transactions being created, and nearly only the Bitcoin reference client creates free transactions; the network doesnt upgrade to new versions overnight giving a transition period anyway.
3008	25689220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25689220	wtogami	I was thinking about the other removed requirement, > 0.01 BTC, which is very common.
3008	25690366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25690366	petertodd	The wallet doesnt use GetMinFee() to determine if nMinTxFee must be paid so itll continue to create nMinFee-paying transactions when there is a subcent output; see CWallet::CreateTransaction()
3008	25694142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25694142	gavinandresen	: good idea. I updated the first commit with your suggestion, and added comments on two places in the code that can be simplified once the network upgrades. : I think youre confused by the code that avoids creating a free transaction with a change output less than 0.01. The edge case is a user who creates a high-priority transaction (maybe a 10 BTC, well-aged input) with a sub-CENT output (maybe theyre sending 0.001 BTC, so have a 9.999 BTC change output) during the transition period when most of the network hasnt upgraded to 0.9 yet. The first version of this pull would send that without a fee, and their transaction would likely never confirm.
3008	25694419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25694419	petertodd	Yeah, I think youre correct there, my mistake.
3008	25697058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25697058	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3008	26796282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26796282	wtogami	I was surprised that this was merged without any explicit ACKs. It isnt necessarily bad, I am just curious why 1KB was chosen as opposed to any other arbitrary size?
3001	24490451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24490451	gmaxwell	Ive seen this too. ACK.
3001	24491564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24491564	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3000	24487171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24487171	gmaxwell	I have no ability to test this.
3000	24487521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24487521	gmaxwell	Direct apple specific test for now so that this is easily backported, though it should be generic enough to apply to all darwin, I think?
3000	24487528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24487528	jgarzik	untested ACK
3000	24487986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24487986	gavinandresen	ACK. Stepped through in the debugger on OSX to make sure the #ifdef is correct.
3000	24488879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24488879	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
3000	24493232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24493232	intelliot	This is probably a dumb question but what exactly is meant by "untested ACK"?
3000	24498770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24498770	mikehearn	It means the code was reviewed by reading it, but not actually trying to see if it works. In this case the fix is obviously correct. I wonder where else fsync might be lurking.
3000	24503194	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24503194	sipa	ACK. Didnt test either.
3000	24510172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24510172	gmaxwell	in our codebase that appeared to be it.
2999	24476725	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24476725	TheBlueMatt	(Note that this only works for the 0.8.X branch, the build files need rewritten for autotools, but Ill do that when 0.9 is released/rcd)
2999	24476859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24476859	TheBlueMatt	Oh, and threw in commit to remove the annoying "warning: typedef Char_type locally defined but not used [-Wunused-local-typedefs]" warnings while I was at it
2999	24477189	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24477189	prusnak	+1. I carry the same desktop file patch for openSUSE packages. Also dont use absolute paths in executable/icon file and no file extension for icon. (If these are in standard paths - and they are - the desktop environment will find them). ``` -Exec=/usr/bin/bitcoin-qt %u +Exec=bitcoin-qt %u -Icon=/usr/share/pixmaps/bitcoin128.png +Icon=bitcoin128 ```
2999	24623615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24623615	sipa	The typedef remove is being bikeshedded in #2980, so please dont duplicate it here. Also, if this only works on 0.8.5, why is this being pullrequested into master?
2999	24637503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24637503	TheBlueMatt	Heh, can I vote for red? I prefer red bikesheds over all other colors. Because contrib/debian is always out-of-sync and I usually update it on here after upload when something other than version numbers change. The 0.9 update will probably come after 0.9 releases when i get a chance to code it up.
2999	24639254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24639254	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2999	24651732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24651732	prusnak	please also include suggested changes from my comment above (icon+executable in desktop file).
2999	25320793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320793	sipa	Im not very familiar with this, but request seems reasonable.
2996	24451696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24451696	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2996	24460852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24460852	jgarzik	ACK
2996	24461077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24461077	gavinandresen	ACK. Worked for me on OSX/qt4.
2996	24657573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24657573	laanwj	Works for me. Though this doesnt work at the top level, but only in src/qt, is this on purpose? $ ./autogen.sh $ ./configure $ make translate make: *** No rule to make target `translate. Stop.
2995	24450459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24450459	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2995	24857192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24857192	laanwj	ACK
2994	24584016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24584016	Diapolo	Updated to prefer user-defined labels over supplied ones, so saved labels in the users address book are not overwritten.
2994	24859789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24859789	Diapolo	Rebased to fix a merge conflict.
2994	25199892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25199892	Diapolo	ping
2994	25293759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25293759	laanwj	Im not so sure about this. Id like it to show the merchants specified information at least in the payment form. When will this be triggered? The merchant shouldnt be reusing addresses in the first place for *secure* payments. Also how does this fit into avoiding address reuse and deprecating the address book into a list of historically used addresses? We should not provide any special conveniences for reused addresses (and later on, probably associate labels with specific transactions not addresses).
2994	25298116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25298116	Diapolo	This change just ensures that address labels, that ARE in our address book are shown, when using a normal bitcoin: URI or insecure payments. And because of that ensures we dont overwrite labels in the users address book. So for secure payments there is no change at all, we will see the merchant displayed and no address or label in the sendcoinsdialog. Im not sure if Im with you, that this change is related to address re-use at all, it just brings our normal sendcoins mechanism (chose address -> label from address book is displayed in sendcoins) into play when using URIs or insecure payments.
2994	25516219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25516219	Diapolo	Rebased and fixed a merge-conflict.
2994	25924566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25924566	Diapolo	I would love to get an agreement on this pull, see my comments above :).
2994	25965278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25965278	laanwj	Im just not happy that this adds more special cases, more complexity to the address book code, even though nothing is really broken.
2994	25965701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25965701	Diapolo	So to be clear, you think its fine if some URI or payment-request is overwriting your user-defined labels? Its also fine to not recognize its an address that is in your addressbook? The other way around, if an URI doesnt specify a label currently our addressbook isnt even searched for a label ;). Thast is what I could change this pull to, so we have at least same functionality as when using sendcoins ourself.
2994	25965957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25965957	laanwj	Yes, I think the two should be separate. When opening a bitcoin URL, the program should display the information from the URL. After selecting an address from the address book, it should display the label from the address book. These are disparate sources of recipient information, so trying to combine them will only confuse things.
2994	26134409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26134409	Diapolo	Would you agree to display our user-defined label, if the URI or payment-request doesnt contain any information?
2994	26334424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26334424	Diapolo	Updated: Changed back so that supplied labels override user-defined ones, but displays user-defined labels, if there are any and none was supplied.
2994	26338958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26338958	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2994	26396253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26396253	laanwj	agree to close this one? As we want to reduce interaction of payment requests with labels, it makes no sense to show user-defined labels with payment requests in any circumstances.
2994	26397346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26397346	Diapolo	Yes thats fine then, Ill perhaps just introduce the ``updateLabel()`` function in another pull, because I remember it was a pain looking for that code ^^.
2994	26408429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26408429	laanwj	Yes, thats fine -- though be careful touching any of the address book view stuff, as Im now working on reorganizing it as I planned before. Finally making a real ReceiveCoinsDialog that doesnt show a list of receiving addresses but a form to request payment.
2991	24443297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24443297	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2991	25298188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25298188	Diapolo	This should be looked at before the next translations update, so as you seem to be active today you can perhaps review it :).
2991	25315718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25315718	laanwj	Why go that far to remove the %1s from the translation strings? Having them in the translation string gives translators more flexibility where in the translation to put the values. In some languages with other word orderings that may be useful. Breaking up the strings means that translators get to translate a lot of small nondescript fragments.
2991	25317918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25317918	Diapolo	I reverted the changes for ``Total Amount %1`` and ``Invalid payment address %1``.
2991	25448971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25448971	Diapolo	Updated, so we now have a ``tr("%1 to %2")`` instead of different translatable strings for sendcoins.
2991	25450695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25450695	Diapolo	Updated to use monospace for addresses and remove the fixed font-size.
2989	24293538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24293538	theuni	Whoops, this wasnt ready yet.
2988	24280270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24280270	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2988	24284858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24284858	theuni	ACK
2988	24285059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24285059	gavinandresen	Why do we need a stopgap?
2988	24285619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24285619	theuni	this was a bug that slipped in, -O2 was supposed to be in the original autotools PR. Apparently some of the hardening options create strange warning/errors when combined with no optims. I proposed that now was a good time to evaluate how debug/release usage should work (or if the distinction even needs to be available via configure options) now that were beginning to deviate from the old build. A good example is OSX, which is currently (as it was before) vastly different between debug/release builds, meaning that devs rarely see what end users will see. Stopgap is just to put the old behavior back rather than having fishy builds in the meantime.
2988	24288755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24288755	gavinandresen	"some of the hardening options create strange warnings/errors with no -O" : that makes me nervous. Is that documented behavior? A bug in some version of gcc? Are we using that gcc for pull-tester or gitian? Sorry for being grumpy, but thats why I dont like stopgap solutions; they tend to become "Oh, we fixed that" when really it is "Oh, we swept that problem under the rug so we didnt have to figure out what is really broken."
2988	24289108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24289108	sipa	-> YOU MUST TURN ON OPTIMIZATION -01 OR GREATER FOR FORTIFY_SOURCE TO WORK.
2988	24289195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24289195	theuni	stopgap is really not the right description here. This returns us to the previous working behavior. Its only stopgap in that I have a desire to change that previous behavior. From gcc man pages: NOTE: In Ubuntu 8.10 and later versions, -D_FORTIFY_SOURCE=2 is set by default, and is activated when -O is set to 2 or higher. This enables additional compile-time and run-time checks for several libc functions. To disable, specify either -U_FORTIFY_SOURCE or -D_FORTIFY_SOURCE=0.
2988	24290035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24290035	gavinandresen	Seems wrong to add -O2 to ./configure --enable-debug. I know Ive had issues in the past trying to step through -g -O2 compiled code in the debugger. Is the real issue that --enable-debug and --enable-hardening are incompatible? Itd be fine with me if the default was release builds, and if you want a debug build you must --enable-debug --disable-hardening.
2988	24290746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24290746	theuni	I would agree with that, yes. Hardening and debugging pretty much conflict as concepts. But if we go that route, I would go further as to say that theres no longer any need for the hardening option, its simply always on in release mode and never in debug.
2988	24291518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24291518	gavinandresen	ACK from me on always-harden-release and removing the --enable-hardening option. Good Idea.
2988	24291914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24291914	theuni	ok, then the last hurdle is figuring out what to do with OSX, since debug/release vary so much. I was hoping to bite this off in different chunks, but I suppose its better worth doing as a whole. OSX is currently back-compat to 10.5. As youve mentioned, this should change to 10.6. Unfortunately, 10.6 still supports 32bit cpus, so release builds will need to remain 32bit. And in that case, debug should be 32bit as well. So that means that the following move from release flags to always-on flags: -mmacosx-version-min=10.5 -arch i386 -> -mmacosx-version-min=10.6 -arch i386 Additionally, osx has historically built with -O3 for release. For the sake of consistency, Id prefer to move all release to -O2 or -O3 (no preference which).
2988	24293293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24293293	gavinandresen	I think it would be better to drop -arch and -mmacosx-version-min entirely from the mac builds. Ill still build releases on my 32-bit OSX 10.6 machine. Eventually maybe well cross-compile releases in a gitian VM. (both of those cases will likely need their own wacky flags). In any case, I dont want to make it difficult for OSX developers by having them either constantly overriding the default ./configure settings or recompiling all of their dependencies -arch i386.
2988	24294869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24294869	theuni	I disagree very strongly with that. That means that every dev is targeting different architectures and sdks with their builds, meaning that the release binary will be completely different (read: different compiler, min sdk, target sdk, and architecture) than what devs have tested. That is a huge amount of trust to be putting into toolchains and compliant code, doubly so given Apples whimsical replace-the-build-stack-for-each-release nature. If the reason for not building with the release-platform by default is because its too inconvenient for devs to be bothered, then in my opinion the correct question to ask is: should we support that platform? If so, then I think its crucial for devs to be targetting it, otherwise it would be a stretch to call it supported. For a bit of perspective, this would be equivalent to most devs working on win7/win8 building for native 64bit with msvc++ and backwards compatibility off, but releasing relatively untested 32bit binaries built by mingw in XP. I realize that our hand is somewhat forced with compilers, but I think we should mitigate as much as possible with regards to arch and sdk.
2988	24298739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24298739	gmaxwell	I dont think this is the best place to discuss alternative toolchains on OSX. Please just make the default release builds. Hardening enabled by default, I dont even care if there is a disable hardening but since there has to be detection to make sure the options dont break the build its probably easy to keep a disable flag. A make debug should build a binary the same as release but with -O0 (and -g cranked up) by default. If people want other optimization options in a debug build they can override the cflags. Sound good?
2988	24386016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24386016	sipa	So your suggestion is: * Debug is "-O0 -g2 -ggdb" * Release is "-O2 -g0 + hardening" * Default is release Or do I miss something? I think Id prefer -O1 for debug builds, and having hardening enabled there too, as it doesnt interfere that much with debugging, but has a large performance impact (which matters in particular when running under valgrind).
2988	24389836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24389836	gavinandresen	NACK from me on -O1 debug builds. Just today I ran into odd issues with lldb I suspect are caused by -O1 debug builds... (might not be, but "principle of least surprise" would be no optimizations at all for debug builds).
2988	24390180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24390180	laanwj	Many programs have a "release with debug symbols" mode for building, maybe thats a useful compromise for the people that want to debug/valgrind a hardened and optimized build.
2988	24393393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24393393	jgarzik	A **lot** of work has gone into making "-O2 -g" a sane and workable default, in the upstream compiler and packaging world. Obviously it is not *perfect* for debugging, as the compiler may transform a statement you wish to debug, but literal man-years have gone into making it as usable as possible. Fedora builds debug info for all packages, and uses special tools to gather the debug info into a separately-installable, optional "foo-debuginfo" package.
2988	24393514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24393514	jgarzik	Further, I really see no point in separate "debug build" and "release build" concepts. We should always build with a default, -O2 -g + hardening. If the default is not suitable -- I often disable -O for serious debugging too -- then we can add "--disable-opt" or "--enable-debug" if the developer really cannot be bothered to override on the configure command line.
2988	24395382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24395382	luke-jr	IMO overridding CXXFLAGS on configure is easy enough. I also find -O2 makes debugging impractical, but not a huge deal if it can be overridden.
2988	24405711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24405711	gmaxwell	I have never seen hardening interfere with debugging, so I think it should always be on. (though perhaps we turn off the couple things that cause warnings at O0 just to remove the noise. Jeff is right that a lot of work has gone into making debugging work at O2 -g. make debug is for when that fails. I too would prefer O1 for make debug, but since I consider make debug for the case where release breaks debugging so O0 is safer and it can be overridden easily. Yes, release should be default. Does anyone here know how the split debugging stuff works? Id like it if we could ship production binaries that have the debugging removed (I think it makes them a zillion mb smaller for us) but still have the symbols around to correlate when we get reports.
2988	24409007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24409007	jgarzik	Some numbers, on x86-64/Linux: CXXFLAGS="-O2 -Wall -g" ./configure --without-qt --with-incompatible-bdb ``` jgarzik@hum:~/repo/bitcoin/src$ ls -l bitcoind -rwxrwxr-x 1 jgarzik jgarzik 63680406 Sep 13 12:52 bitcoind jgarzik@hum:~/repo/bitcoin/src$ strip bitcoind jgarzik@hum:~/repo/bitcoin/src$ ls -l bitcoind -rwxrwxr-x 1 jgarzik jgarzik 3777696 Sep 13 12:54 bitcoind ``` CXXFLAGS="-O2" ./configure --without-qt --with-incompatible-bdb --disable-debug ``` jgarzik@hum:~/repo/bitcoin/src$ ls -l bitcoind -rwxrwxr-x 1 jgarzik jgarzik 5227662 Sep 13 12:59 bitcoind jgarzik@hum:~/repo/bitcoin/src$ strip bitcoind jgarzik@hum:~/repo/bitcoin/src$ ls -l bitcoind -rwxrwxr-x 1 jgarzik jgarzik 3777696 Sep 13 13:00 bitcoind ```
2988	24409280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24409280	jgarzik	Starter links, Though I think that the size of our executables is a low priority [unless its a fun project you just want to obsess over ;p] Shipping debug info in production executables should be just fine. The compiler puts the debug info in separate sections, so it should not pollute instruction/L1/L2 caches if unused.
2988	24409766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24409766	luke-jr	FWIW, if we ship with debug symbols, I also have a backtrace.dll (mostly written be other people) that can be used with a simple LoadLibrary call and dumps a backtrace to stderr (which we could reopen to debug.log if desired) on crash. The only downside (although my users thing its a good thing) is that Windows no longer displays a crash dialog (ie, the program "silently" exits).
2988	24410646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24410646	jgarzik	Another note too, lets examine the problem a bit at a higher level: work *with* autotools not against it. Remember that many platforms will go ahead and override CFLAGS / CXXFLAGS with the platform standard during the Red Hat / SuSE / Debian package build process. All this work trying to find the perfect build flags for various releases will be scrapped, ignored or worked around by many, regardless of what you pick. Use the autotools default. 1) Scrap the concept of "debug version" or "release version" entirely. 2) Stop messing around with non-standard "--enable-debug" flags. The standard is to provide anything *not already provided by default* via environment variables passed at configure time: CFLAGS, CXXFLAGS, LIBS, LDFLAGS, ... 3) Stop messing around with -O2 in configure.ac, and just go with the default. 4) Only modify flags when *required*, such as in the hardening case (an obvious exception to case 3).
2988	24412569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24412569	theuni	Split debug stuff is no problem, I can create a target for those once the dust settles here.
2988	24421255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24421255	theuni	fwiw, "-g -O2" is the autoconf default. Thats what most would expect to see as a result of a vanilla "./configure".
2988	24466663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24466663	wtogami	Could we please restore the default behavior of pre-autotools (-O2) then proceed with the bikeshedding? I dont care how -O2 is restored, just do it and decide how to do do it "proper" later?
2988	24471805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24471805	sipa	ACK - this or just reverting to autotools default. We can bikeshed later.
2988	24659869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24659869	jgarzik	Upstream now does -O2, superceded, closing.
2987	24267672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24267672	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2987	24282703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24282703	gavinandresen	Related: Ive been working on un-hardcoding fees, and part of that work is an estimatefees RPC call. I think that is really what people want to know, not after-the-fact whether or not the fee paid was voluntary or mandatory. See my smartfee branch for details (but beware it is a work in progress, and will be constantly rebased):
2987	24308822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24308822	jonasschnelli	Yes. estimatefee RPC call looks great (not checked in detail). This pull does mostly change the QT behavior. 1) create a transaction and "read out" if a fee was applied and if the fee was added because a voluntary fee was set or because the added fee was required. 2) display the transaction (and info about if the fee was required or voluntary) to the user 3) get yes/no from user 4) commit transaction
2987	26689645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689645	gavinandresen	Needs rebase, although Im not convinced this change is worth the cost of making all of our translators tweak all the language strings just to tell the user a piece of information that might be interesting but is not useful.
2987	28146486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28146486	laanwj	Agreed with gavin here. As the client currently has no way to compute or negotiate what is a required to get into a block, making a voluntary/required split in this way only adds to confusion. We can update the GUI again after smart fees have been merged. What would be ideal is a user-settable transaction priority that is used to compute the fee, instead of a "voluntary" fee.
2986	24209521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24209521	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2986	24662234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24662234	jgarzik	Rebased needed.
2986	25320833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320833	sipa	Is this still needed?
2986	25323907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25323907	luke-jr	At least parts. I need to rebase it.
2986	25676501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25676501	gavinandresen	Closing to clean up pull request clutter. Re-open when youve rebased / pulled out the parts still needed.
2985	24192139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24192139	laanwj	Im a bit divided on this; on one hand, this is very useful if the tests are to be distributed/installed. On the other hand is that a common use case? I always run them within the build directory. What if one wants to edit the test data while testing? One of the advantages of data-driven testing is not having to recompile every time after changing the test data.
2985	24196048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24196048	theuni	Its common for me, as Im usually doing cross/gitian builds. This would encourage devs to use tests when interacting with users, as-in: "please post the output of the tests", which can now be easily run by users and trusted by the bug-hunter.
2985	24215422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24215422	laanwj	But you could also do that by making the tests expect the data in a subdirectory of the executable, and then send a package with tests + data together. In any case Im not against this, but in my own projects I usually do testing with a python harness and having to compile as little as possible while designing tests is a great advantage (faster test cycle). So some way I feel this is a step in the wrong direction. But lets see what the other devs think. Edit: a compromise would also be possible, allow overriding the data directory on the command line and default to built-in data. The qt resource system allows this as well IIRC.
2985	24215796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24215796	gavinandresen	I think this is a step in the wrong direction. I have never wanted to give an end-user unit tests, but found it incredibly helpful to be able to rapidly run tests by just editing a .json file and then re-running ./test_bitcoin.
2985	24286505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24286505	theuni	Fair enough. Different perspectives I suppose, and ease of use by the devs trumps everything else for sure. But just to throw out a data-point from my desktop: ``` #change the test cory@cory-i7:~/dev/bitcoin/src/test(included-tests)$ touch data/base58_encode_decode.json #make check will rebuild as necessary and run cory@cory-i7:~/dev/bitcoin/src/test(included-tests)$ time make check Generated data/base58_encode_decode.json.h make check-am make[1]: Entering directory `/home/cory/dev/bitcoin/src/test CXX test_bitcoin-base58_tests.o CXXLD test_bitcoin make check-TESTS make[2]: Entering directory `/home/cory/dev/bitcoin/src/test Running 95 test cases... *** No errors detected PASS: test_bitcoin ============= 1 test passed ============= make[2]: Leaving directory `/home/cory/dev/bitcoin/src/test make[1]: Leaving directory `/home/cory/dev/bitcoin/src/test real 0m2.895s ```
2985	24386363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24386363	sipa	With such small build times, I dont really care about it. I dont think this is really a problem, but avoiding the absolute paths mess is certainly an advantage.
2985	24461742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24461742	gavinandresen	Data is a very good way of making me change my mind. Recompiles are fast enough, so ACK after rebase and making pull-tester happy.
2985	24489721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24489721	theuni	Could you please install bsdmainutils in the pull-tester? After that ill rebase on master and push for a new test.
2985	24491556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24491556	gavinandresen	I installed bsdmainutils in the pull-testers chroot environment.
2985	24532388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24532388	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2985	24552854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24552854	gavinandresen	Where are we on updating documentation for autotools? The new bsdmainutils apt-get dependency needs to be documented. FYI: /usr/bin/hexdump seems to be standard on OSX.
2985	24553019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24553019	theuni	I think after the debug/release stuff gets fixed up, that marks a good time to do the thorough docs overhaul. Ack on OSX, it seems to be standard (and compliant for once, woohoo!) from at least 10.6-10.8.
2985	24556530	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24556530	sipa	ACK; seems to build and run fine.
2982	24058724	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24058724	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2982	24059408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24059408	gavinandresen	ACK: tested on OSX.
2982	24062059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24062059	laanwj	ACK: works for me on Ubuntu 12.04 64 bit
2982	24062976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24062976	wtogami	Testing backport to litecoin-0.8.4.1. Assuming I did it correctly, your bitcoin-0.8.x backport will be slightly different from this.
2982	24065829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24065829	jgarzik	ACK
2982	24067199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24067199	wtogami	ACK
2982	24081480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24081480	runeksvendsen	I can confirm that this patch fixes the issue for me, and tests run without errors.
2982	24085189	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24085189	sipa	ACK code changes; didnt test.
2981	24020103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24020103	gmaxwell	Limited testing on IRC indicates that -onion may be misunderstood as enabling accepting hidden service connections. This is strictly less dangerous than the current misunderstanding, but perhaps some other flag would be better. Pieter suggested -onionproxy but Im hesitant due to proxy perhaps getting peoples attention.
2981	24033126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24033126	gavinandresen	Logic would be cleaner if you use util.h SoftSetArg; e.g. if (mapArgs.count("-tor")) SoftSetArg("-onion", mapArgs["-tor"]);
2981	24033171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24033171	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2981	24065236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24065236	laanwj	I agree with renaming it
2980	24016495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016495	jgarzik	ACK, though ideally a better solution could be found. I think there is another pull req for updating json_spirit, and this sort of thing needs coordination with that PR.
2980	24019045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019045	Diapolo	NACK, we should not change code here. As far as I remember this is under some license, which permits it? There was a discussion about this some months ago.
2980	24019643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019643	wtogami	If bitcoin relies on code that doesnt permit changes, then we need a policy discussion.
2980	24019868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019868	laanwj	Its not a license problem . We just dont like json spirit changes that diverge further from upstream.
2980	24020861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24020861	gmaxwell	ACK if and only if these changes have been submitted upstream (assuming theyre still relevant upstream). The warning noise has been an irritation for me to.
2980	24033226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24033226	gavinandresen	I have a pet peeve for commenting out code; remove it if it should be removed. Or use a #pragma to suppress the warning if youre worried some obscure use of json_spirit might need the typedef.
2980	24033762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24033762	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2980	24386430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24386430	sipa	Some time ago, there was a suggestion in a discussion to move json_spirit to a separate repository (like LevelDB), so such changes could be made outside the Bitcoin tree. Having this submitted upstream sounds like the best solution here though.
2980	28200236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28200236	laanwj	On the other hand we dont really keep up with upstream (http://www.codeproject.com/Articles/20027/JSON-Spirit-A-C-JSON-Parser-Generator-Implemented). Last time we tried to upgrade json spirit was a horrible fail that we had to revert immediately. Whats the verdict here? In general I agree with the "lets not diverge further from upstream" however seemingly weve already diverged and its only a single line change so Im fine with merging it (or deleting the line as prefers).
2980	28220308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28220308	Diapolo	Im doing this also, so perhaps we should just merge it.
2980	28261137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28261137	gavinandresen	Tired of talking about this....
2979	24012386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24012386	wtogami	Please add libdb4 to the db4 search paths.
2979	24012827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24012827	wtogami	Please also search for lrelease-qt4 and lrelease-qt5 instead of just lrelease.
2979	24015563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015563	wtogami	"configure: Prefer specific known-good versions of Qt metacompiler tools" Please add the -qt5 equivalents after the -qt4. It works for me if I completely remove the qt4 headers and tools. Yes, it needs more work so it isnt confused when both are installed.
2979	24015590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015590	luke-jr	Qt5 support can be something for a future pull request. As long as it doesnt build correctly (I dont think having to remove Qt4 counts), configure should fail.
2979	24015733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015733	Krellan	Nice improvements to the configure script! When trying the current master, I found that ./configure --enable-hardening would not build unless I added -fPIC option to CXXFLAGS. Should the configure script be made aware of this, and automatically add -fPIC if needed? Or is this just a local symptom of some bug/misconfiguration on my system, and so wouldnt be needed by anybody else?
2979	24015780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015780	gmaxwell	We should be enable hardening all the time, with an AC test to make sure the hardening flags work, and whining at you if they dont. ACK on the BDB changes, though Ive not tested yet.
2979	24016142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016142	Krellan	I also wondered why that wasnt already the default, as it seems like a good idea. Perhaps --disable-hardening for those who explicitly wish to disable hardening for whatever reason (old build tools, debugging, etc.)?
2979	24016182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016182	wtogami	If your build tools are that old, your OS likely lacks dependencies needed by Bitcoin anyway. For now please focus on getting this to build on all common operating systems, every typical variant of Linux, and all gitian targets.
2979	24016332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016332	wtogami	I strongly recommend two more "fixes" in order to prevent confusion and many useless bug reports from hundreds of future builders. 1) Automatically remove the old leveldb.a from pre-autotools builds. If necessary name the new target something else so it is easy to distinguish the old leveldb.a from new. 2) Automatically remove the old bitcoind, or print something at the end of each frontend build where the binary is located. Right now it is easy to mistake the old bitcoind in the base directory as the output.
2979	24016477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016477	jgarzik	The proposed solutions are largely an artifact of transitional code. New checkouts should not see the problem, and pre-autotools builds will quickly plunge in frequency, in a few months after release. Seems like an issue for release notes, something easily grep-able and google-able for people finding common pre->autotools transition issues.
2979	24018222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24018222	Krellan	Speaking of release notes, an easy documentation bug to fix. In doc/build-unix.md where it says `CXXFLAGS="-i/usr/include/db4.8"` The -i should be -I (capital I, as in India).
2979	24019217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019217	Diapolo	I feel like i now never could contribute again to compiler switches, hardening or whatever. That autotools stuff looks like magic an I miss my .pro file ^^. I have yet to try builing bitcoin-qt with this. I whish Qt5 support is working as I dont use Qt4 anymore.
2979	24019265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019265	gmaxwell	The secret of autotools is that no one else in the world understands it either. Really you just randomly poke at it until it works. Once youve done this long enough everyone will assume that you actually know what youre doing, and you can smirk quietly and carry on the great secret. :) Dont worry, if you get stuck everyone will help you. Autotools is like a big hazing as part of the initiation into the free software brotherhood. At conferences we all sit around over beer griping about how much autotools stinks. :)
2979	24019700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019700	wtogami	`<gmaxwell>` ... this is being compiled without optimization 0_o `<warren>` gmaxwell: yeah, I complained about that. -O1 is needed at least for hardening to work `<warren>` gmaxwell: our old default was -O2 right? `<gmaxwell>` we absolutely shouldnt be compiling with just O1. `<gmaxwell>` right.
2979	24021412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24021412	luke-jr	Programs are not supposed to be built with -fPIC (its for shared libraries only), so Im not sure where your problem is coming from. Ill make a note to remove the CXXFLAGS from build-unix.md (its no longer necessary). bitcoind was never built in the base directory, so the location is already the same.
2979	24021473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24021473	wtogami	Oops, I meant bitcoin-qt.
2979	24027314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24027314	Krellan	As for -fPIC, nonetheless, it seems to be required. Can you compile on your system with `--enable-hardening` without adding -fPIC? I cant, without getting the error message about relocation and the reminder to use -fPIC. With ASLR hardening, the address space is randomized, so position-independent code would already be a necessity, right? On my system, a hardened executable shows up as "shared object" (ET_DYN) instead of "executable" (ET_EXEC) in the `file` and `scanelf -e` commands respectively. So, although -fPIC is for shared libraries only, as you said and I agree with, maybe a hardened executable counts as a shared library for this purpose?
2979	24027665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24027665	luke-jr	Does it work with -fPIE (and not -fPIC)? Thats what some hardening systems use (I dont know what --enable-hardening is supposed to do)
2979	24028003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24028003	jgarzik	Perhaps a hardened executable requires a randomized address space, rather than compiler-chosen static offsets.
2979	24033280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24033280	gavinandresen	NACK. Breaks on my macports/OSX machine: checking for db_version in -ldb_cxx-4.8... no checking for db_version in -ldb_cxx... no configure: error: libdb_cxx missing Compare with master: checking db_cxx.h usability... yes checking db_cxx.h presence... yes checking for db_cxx.h... yes checking for main in -ldb_cxx... yes
2979	24044505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24044505	theuni	Please hold off on these for a day or two, I have portability concerns with many of them. Ill be back in the office on Mon/Tues.
2979	24044682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24044682	theuni	Hardening should be on by default already, the help string is just backwards.
2979	24045518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24045518	theuni	I have patches for enabling qt5, and it builds fine. But I excluded it from the initial autotools pull to avoid overcomplicating it.
2979	24047880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24047880	theuni	Id like to point out that I made a big effort to make this functionally the same as the old build (Im not claiming that I succeeded, far from it Im sure). But the old build was very static and manual, so new options open up now that users can easily configure the build. If the behavior doesnt make sense, lets fix the core issues. For example, the old system had a notion of debug/release builds, and hardened/unhardened builds. I tried to match those for the sake of feature-parity, but thats not to say they make sense anymore. Id prefer to have a good discussion/debate about what actually needs to be configurable, and what are sane defaults.
2979	24054963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24054963	laanwj	Hardening definitely requires some form of position independent executable, for address space randomization. And I think PIE only applies to libraries. Not sure tho, the difference between PIE/PIC is a bit hazy to me.
2979	24062045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24062045	Diapolo	I agree that we should harmonize hardening options and review them for all OSes. Also there is still my old pull I remember, which activates ``-fstack-protector-all`` for Windows, which never worked because of our ancient compiler suite. Shouldnt we now switch to something newer in order to allow this for Windows builds also? Maybe we can now also start looking in hardening our used libs? Im looking forward to your Qt5 fixes :) and would suggest we also start looking into dependency lib versins, as some are rather out of date and may contain serious bugs or security issues!?
2979	24067599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24067599	wtogami	Is the mingw Ubuntu 12 toolchain new enough?
2979	24067793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24067793	theuni	hardening flags can be seen here: For the most part, each one is tested and applied wherever possible, to avoid the need to specify per-toolchain.
2979	24069511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24069511	laanwj	yes,the mingw-w64 (dont mind the name, its for 32 bit as well) cross compilation stuff in Ubuntu 12.04 is new enough for hardened builds (w/ stack-protector-all) to work correctly on Windows.
2979	24200015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24200015	theuni	ACK.
2979	24204165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24204165	gmaxwell	ACK. Builds for me now.
2979	24204404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24204404	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2979	24204715	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24204715	wtogami	This seems to lack -O by default. gmaxwell says it will probably be in the next pull though.
2979	24205957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24205957	luke-jr	Yep, its part of my autoconf_pt2 branch (out of 4).
2978	23914357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23914357	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2977	23864321	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23864321	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2977	23867896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23867896	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2977	24016669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016669	wtogami	How did it work without an "unzip" dependency before?
2977	24019837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019837	laanwj	I dont think it ever did. Is anyone else doing gitian builds from the current master?
2977	24020133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24020133	wtogami	My mistake. It exists in 0.8.x. It was removed? Yes, needed. ACK
2976	23929212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23929212	Diapolo	ACK, nice you removed those ``c_str()`` calls.
2976	23932775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23932775	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2973	23926255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23926255	Diapolo	Alright, should be complete and I removed all ``()`` like you suggested. An additional idea now would be to send all these to our debug window, what do you think?
2973	23929971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23929971	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2973	23931346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23931346	laanwj	I dont think it is useful to send all the logging to the debug window, Ive thought about that in the beginning but we simply log so much for that it would bog down the GUI and it would not be useful either. At least with the current console widget. I guess itd be possible to add a tab "logging" with a hyper-optimized scrolling widget, but I doubt its worth the trouble and extra code.
2970	23769332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23769332	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2970	23776475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23776475	Diapolo	Did you check that ``TransactionRecord::getTxID()`` is ONLY used for copying the TxID (to clipboard)?
2970	23785076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23785076	luke-jr	This loses information for received transactions. Maybe it should be shown in the details?
2970	23807635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23807635	aceat64	It appears to only be used for the copy-to-clipboard and CSV export functions. Yeah, I think the details window is the appropriate place for the subtransaction index. It should probably also be included in the CSV export as its own column.
2970	23853017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23853017	laanwj	Not sure that I agree with this. Only when the subtransaction (output) id is added, the identifier uniquely identifies a transaction record. If you change this, only change the "copy" and not the other functionality such as CSV export.
2970	23854325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23854325	gmaxwell	The inability to get a vout at all on blockchain.info was seriously screwing with me earlier. Why would we want to exclude the vout index here?
2970	23857308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23857308	laanwj	Ok, consensus seems to be not to merge this as-is, so Im closing this. Adding the subtransaction to the details window is still a good idea though.
2970	23881969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23881969	aceat64	Is appending a hyphen and the subtransaction ID considered the "standard format"? If so, why doesnt getrawtransaction support it? > $ bitcoind getrawtransaction a642029ef09d7780c9e13fea3ad8706098f919cb4174870b6284e27353ab1aa7-000 1 > error: {"code":-8,"message":"parameter 1 must be hexadecimal string (not a642029ef09d7780c9e13fea3ad8706098f919cb4174870b6284e27353ab1aa7-000)"}
2970	23884695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23884695	laanwj	Because all the bitcoind RPC functions work on whole transactions, not sub-transactions. Only the GUI has that distinction. Getrawtransaction on one output would mean nothing.
2970	23885300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23885300	aceat64	Right, thats my point. Everything that refers to the transaction ID specifically does not include the subtransaction index. I believe we are going to confuse users by muddling the term transaction ID to sometimes mean the entire transaction and other times mean the transaction ID with the subtransaction index appended.
2970	23925320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23925320	laanwj	I think the txid-vout format is pretty clear. It specifies a hierarchical subdivision with -, and the user can delete the part after - easily if he doesnt need it. As there is not a standard format, I think it will do as well as any other. In the details window I could call it TxID-vout instead of just TxID, but in the context menu there is no space for further elaboration. Simply dropping the vout index loses information that is needed to drill down to that specific subtransaction [From user viewpoint, the subtransaction is the transaction]. And indeed the RPC does not accept TxID-vout format, but thats mainly because the need has never arisen to point at specific subtransactions (AFAIK) so one should remove the subtransaction before submitting it through RPC (which is just deleting the last 4 characters). Im really not convinced that there is a problem (apart from lack of documentation/explanation) here. Unless you have a much better proposal Id like to keep it this way.
2970	23925765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23925765	gmaxwell	Createrawtransaction and signrawtransaction take a vout, though they take them as separate vout arguments. Having the vout is _essential_ to authoring transactions. Its also important when handling payments in order to prevent duplicate keys on the txid when youre paid multiple times in a single transaction. When I write them together I normally use txid:vout, Im not sure where this form comes from. Its a little annoying that the raw transaction api breaks out the vout, but oh well.
2969	23768041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23768041	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2969	23776367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23776367	Diapolo	NACK, please only use for translation updates. Can be closed.
2969	23778979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23778979	soroush	OK. Please consider adding guidelines for translators in project wiki page.
2969	23779309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23779309	Diapolo	
2968	23761711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23761711	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2968	23762919	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23762919	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2968	23776398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23776398	Diapolo	Seems reasonable...
2968	23862789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23862789	laanwj	This will hide the warning, but is that the entire problem? will the block chain download continue?
2968	23869413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23869413	TheBlueMatt	The warning doesnt effect the download at all, and is generated sometimes when a "fork" is detected because we get blocks while we were in initial download.
2968	23871942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23871942	laanwj	ACK in that case
2968	24012627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24012627	wtogami	ACK
2967	23668014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23668014	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2964	23623187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23623187	gmaxwell	Pulltester where are you?
2964	23624496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23624496	sipa	Dang. how does pulltester send/announce blocks, does it answer getheaders, and how does it know a block was received?
2964	23743916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23743916	TheBlueMatt	Currently block-tester doesnt support getheaders requests, so that needs fixed
2964	24288529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24288529	theuni	fyi, now you can easily run the same scripts as pull-tester to check locally, in case youre looking into fixing up the block-tester. Just add --with-comparison-tool to your configure, and this test will be enabled during make check: ``` ./configure --with-comparison-tool=/tmp/BitcoindComparisonTool.jar make make check ``` If you replace the .jar, just make check again.
2964	24387506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24387506	sipa	Rebased, though I havent investigated the pulltester failure further. I assume it has to do with actually changed semantics, as the best known not-known-to-be-invalid header chain is always considered the main chain, and pindexBest is always within this chain. As the decision is not just made per-received-block, you could have a valid chain A-B-C, and another chain A-B-C-D, where D is invalid, in which case C is reported as best chain instead of C (assuming they have the same amount of work, so the choice should be just as good). Reverting to the old behaviour here would require a hack like reducing the scoring of blocks that have invalid successors for example, but that seems pointless to me, and there are likely other differences as well. I suppose that during reorganizations, pulltester should just accept any not-invalid block chain with maximum PoW as correct?
2964	24443561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24443561	sipa	Any help decoding pulltesters output?
2964	24452034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24452034	TheBlueMatt	Have you tried the latest comparison tool jar from ?
2964	24623948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24623948	sipa	(as discussed on IRC) Yes, this gets us further already, but it seems the getheaders implementation in the comparison tool is too incomplete to do a successful multi-block reorg with headers-first. So this means fixing that becomes sort of a blocker for this; unfortunately, I dont have the time any time soon to look into that.
2964	25679852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25679852	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2964	28630661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28630661	sipa	Closing. This is outdated, as Ive been reworking this as more managable patches/pull requests.
2963	23607365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23607365	laanwj	Mind that we call OutputDebugStringF directly in some places, in transactiontablemodel.cpp, for example. These would need to be replaced with qDebug() as well for this to work.
2963	23624078	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23624078	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2963	23633393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23633393	Diapolo	Yeah I have another pull ready, which changes all usages of ``OutputDebugStringF()`` into ``qDebug()``.
2961	24047466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24047466	laanwj	Needs rebase
2961	24061707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24061707	Diapolo	Rebased
2961	24065172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24065172	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2958	23601721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23601721	laanwj	Im following the payment request testplan: "Unsigned payment request" - OK "Signed payment request" - OK "Signed payment request, multiple addresses" - Overview is correct, sent transactions are correct - Strange: no label is added for the second address when doing this. Not sure this is a regression though. "PaymentACK message" - OK (paymentack received message displays) "Expired payment request" - OK (payment request expired dialog pops up)
2958	23604964	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23604964	Diapolo	I didnt try to compile, but you can get a looked-at-the-code ACK. We should merge and improve the rest afterwards.
2958	23625014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23625014	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2956	23577233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23577233	Diapolo	I dont like this, as I remember we had such a discussion some months ago an decided to leave it as is. If we change things everytime a user complains, we should immediately restart to work on the progressbar :-D.
2956	23578976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23578976	gmaxwell	I saw a really interesting multi-step failure from an experienced Bitcoin user: They imported a private key from some third party (I didnt ask I assume it was a contest or something). Much later they needed to receive some Bitcoin so they picked an address of their receive page. Sometime after that they noticed a transaction they didnt make taking some of their bitcoin. They eventually figured out that theyd picked that imported key and send coin there and someone else eventually noticed and spent it. Discussion about this ("Why would someone pull an address from the list??") resulted in me discovering that we were prompting for a password on new addresses (now fixed). But just another point to confirm my agreement with that we should probably bury the lists as historical data, and have a receive page like Armorys.
2956	23606536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23606536	Diapolo	Can you also make a small comment here?
2956	23607250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23607250	laanwj	WTF, I thought I already replied here. NACK. This was rejected before, mainly because Address Book is too long in some languages. I agree with though. We need to get rid of receiving and sending addresses and bury them as historical data. The current process encourages address reuse. See #2383.
2956	23611440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23611440	Michagogo	Is there something else that we could change it to that wouldnt be too long? I agree that it should be (re)moved, but having it just say "Addresses" seems like a bad thing -- IMO it needs to be made clearer that these addresses are addresses that youve saved for sending. On Saturday, August 31, 2013, Wladimir J. van der Laan wrote: > WTF, I thought I already replied here. > > NACK. This was rejected before, mainly because Address Book is too long in > some languages. > > I agree with <https://github.com/gmaxwell> though. We need to > get rid of receiving and sending addresses and bury them as historical > data. The current process encourages address reuse. See #2383<https://github.com/bitcoin/bitcoin/issues/2383>. > > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2956#issuecomment-23607250> > . >
2956	23619783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23619783	laanwj	Sure if you can think of something better to change it to, be my guest. Tho Id prefer to not change the string before they get removed anyway, as this will only get the translators more work.
2956	23619884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23619884	Michagogo	How about "Other peoples Bitcoin addresses that you have saved in order to send Bitcoins to, even though you shouldnt save and reuse these addresses"? ;-) Seriously though, Ill think about it and if I think of something Ill come back.
2952	23625501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23625501	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2952	26212386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26212386	pstratem	is the preferred solution
2951	23496004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23496004	Diapolo	Was this necessary because of the payment-request pull? Code looks good (didnt try to compile), Im just asking myself, what rule is used to indent over-lenght function calls :).
2951	23499158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23499158	laanwj	Yes, it was introduced with payment requests. No specific rule, but once lines get crazily wide I think its a good idea to split them...
2951	23622470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23622470	laanwj	but ack otherwise?
2951	23626077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23626077	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2951	23634076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23634076	Diapolo	Compiles fine, code looks correct, no strange behaviour observed, so ACK!
2950	23476503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23476503	gmaxwell	Cool. This is interesting because on a wallet with lots of keys the initial startup is shockingly slow.
2950	25677739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25677739	gavinandresen	Please add a comment to the "key" / "wkey" case statement that explains the old/new data schema. Maybe: ``` // Old wallets store keys as "key"[pubkey] => [privkey] // ... which was slow for wallets with lots of keys, because the public key is re-derived from the private key // using EC operations as a checksum. // Newer wallets store keys as "key"[pubkey] => [privkey][hash(pubkey,privkey)], which is much faster while // remaining backwards-compatible. ```
2950	26212584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26212584	pstratem	comment added
2950	26212841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26212841	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2950	26381977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26381977	gavinandresen	ACK. Tested loading old wallets with the new code, and loading new wallets with the old code, all was good.
2949	23455566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23455566	jgarzik	ACK
2949	23505045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23505045	luke-jr	Instead of a bool, how about an amount of fees? If provided and the transaction fees dont match the value, fail. (This can be in addition to the default rejection, for backward compatibility)
2949	23507854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23507854	petertodd	Good idea, although I wont make it a <= test, not a == test. Actually, no, Im going to take that back: app developers are just going to call sendrawtransaction with their nFees, which is likely to be calculated wrong anyway... So stick with the hard sanity limit.
2949	23627125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23627125	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2949	24497974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24497974	DannyHamilton	Sanity testing on fees would certainly have helped me. Ive been using sendrawtransaction in a variety of circumstances for 5 months now. I was pretty confident with the raw transaction tools, and (until today) had created over 200 transactions without any issues. Then while creating a raw transaction today, I accidentally included vout=0 when I intended to include vout=1 in the input. The result was accidentally paying a fee of 3.78843458 BTC. I had thought that I had calculated a fee of 0.0001 BTC (if I had used the intended vout). Any of the following would have prevented the issue: A hard coded sanity check of 1 BTC maxFee A bitcoin.conf entry of maxFee set by me before I started using raw transactions (I would have set it to 0.0003 BTC) An "intended fee" parameter in any of createrawtransaction, signrawtransaction, or sendrawtransaction that I would have set to 0.0001 BTC which can be compared to the actual fee in the transaction. Issue reported at bitcointalk.org here: Transaction example can be seen here:
2949	24519574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24519574	Diapolo	Any reason to merge this?
2948	23571853	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23571853	gmaxwell	I wonder if createrawtransaction shouldnt support something like {"1aaaa":1.0,"change":1.0} and {"1Aaaa":1.0,"fee":1.0} the latter failing if the inputs are not known to it.
2948	23627702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23627702	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2948	23630608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23630608	sipa	Id like to see such "magic" targets (fee, change) as well. I suppose the logic would be: if change is specified, its replaced by a random change address pulled (and marked) in your wallet. If fee is present, it must be the exact different between inputs and outputs.
2948	23631279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23631279	jgarzik	+1
2948	23680240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23680240	gavinandresen	Another +1 This pull: looks good to me, ACK.
2948	23688005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23688005	gmaxwell	ACK.
2947	23461533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23461533	petertodd	ACK
2947	23628240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23628240	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2946	23439286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23439286	laanwj	Why? Wouldnt it be better to specify declaratively what can be specified declaratively?
2946	23471871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23471871	Diapolo	I dont like that we currently have mixed ways of using these Qt signal stuff. If we define "its okay to use connections specified via the Qt Designer" that is fine with me, but then we should rework the code to move this into the .ui files. Perhaps that would also remove some of the on_XYZ_clicked() stuff from our code, which Qt handles then declaratively :). What do you think?
2946	23481594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23481594	laanwj	The on_XYZ_clicked stuff is generated by Qt creator as well, ie when you click on a widget and then add an event handler. In a way it is declarative, the name of the function declares what it should be bound to.
2946	23488218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488218	Diapolo	Wait :), I always manually added these on_XYZ_stuff ^^, didnt even know this can be achieved via Qt Creator ^^. Holy fuck... Anyway, should we define devs have to use connections() via .ui files, if possible then?
2946	23491695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23491695	laanwj	Sure... I dont really mind that much, devs can use them if convenient, no need to either forbid them or mandate them.
2946	23492455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23492455	Diapolo	If you dont care, I have no chance forcing them :-P, so closed ^^.
2945	23401735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23401735	gmaxwell	For some discussion. This is, I believe, a really modest change. Some may favor more extensive revamps, and I wouldnt disagree but I think we should do at least this much to stop some of the bad incentive bleeding. Making this change, or one like it, is an item on on my personal UTXO spring cleaning checklist: and fits into a larger plan to help reduce the size and growth of the UTXO set.
2945	24576023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24576023	gavinandresen	Ive been playing with variations of this for a couple hours, and wrote a unit test (Ill email you the patch). ACK in general, with one nit: It looks like 109 isnt the right number, Im getting P2SH signatures that are 108-110 bytes big. : what is the maximum DER-encoded signature plus compress public key size?
2945	24608419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24608419	petertodd	Signatures can be up to 73 bytes long,(1) so that gets you 73+1 for the signature, and (33+1)+1 for the scriptPubKey, and another byte for the length of the scriptPubKey, 110 bytes in total. 1) <- I wrote this after checking with
2945	24608664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24608664	sipa	The average should be 109 though, and in fact, we could change the negate-S anti-malleability rule in a way that guarantees its at most 109, and on average 108.5.
2945	24612501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24612501	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2945	24615453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24615453	gmaxwell	I think exact size doesnt matter too much, so long as its not so big that people have no disincentive to start stashing a bunch of junk in their scriptsigs, and not so small that people shy away from cleaning up. 109 was entirely too prime, so I put in 110.
2945	24620084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24620084	petertodd	Note that right now you can do the following: scriptPubKey: 1 (pubkeys) m CHECKMULTISIG scriptSig: (37 bytes of garbage) (73-byte signature) thus inserting ~37 bytes of garbage for free because we dont actually check that the CHECKMULTISIG dummy PUSHDATA is equal to zero in IsStandard() - do we have agreement this should be fixed? I can write a patch; its a source of tx malleability too. Other than that I think weve stamped out any other way to put garbage in scriptSigs re: the IsStandard() rules already. (though of course if the limit was >110+33 bytes you could do so via invalid pubkeys in a P2SH CHECKMULTISIG)
2945	24621225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24621225	cozz	From coin control, I know that the biggest txin is 149 bytes. To verify, I have printfed some ::GetSerializeSize(txin, SER_NETWORK, PROTOCOL_VERSION), the values are from 147 to 149. We have now 41 + 110 = 151. This is 2 bytes too much. I have printfed this: (unsigned int)txin.scriptSig.size() and it spits out values from 106 to 108. We already had 109 and 110 in the lottery, I would say the correct value should be 108.
2945	24621383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24621383	gmaxwell	... you were testing P2SH?
2945	24622000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24622000	cozz	no, I am talking about a default tx, sorry for bothering.
2944	23386128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23386128	jgarzik	<vendor hat: on> ACK <vendor hat: off>
2944	23628863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23628863	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2944	23705823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23705823	laanwj	ACK, sounds sensible
2943	23311069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23311069	jgarzik	ACK
2943	23397139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23397139	theuni	I believe Ive whipped the gitian weirdness into shape enough for initial merge. Only real blockers as I see now are acks from various platform devs (osx, win32 cross, win32 native), and docs to accompany. Im afraid Ive reached my limit now, as far as those things are concerned. Awaiting some input, though theres no hurry from my side.
2943	23535952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23535952	gavinandresen	Doesnt work for me on OSX 10.7.5 with MacPorts autotools: ``` tully:bitcoin gavin$ autoreconf --version autoreconf (GNU Autoconf) 2.69 tully:bitcoin gavin$ autoreconf -vif autoreconf: Entering directory `. autoreconf: configure.ac: not using Gettext autoreconf: running: aclocal --force -I src/m4 autoreconf: configure.ac: tracing autoreconf: configure.ac: not using Libtool autoreconf: running: /opt/local/bin/autoconf --force autoreconf: running: /opt/local/bin/autoheader --force autoreconf: running: automake --add-missing --copy --force-missing configure.ac:624: warning: INCLUDES is the old name for AM_CPPFLAGS (or *_CPPFLAGS) configure.ac:624: warning: INCLUDES is the old name for AM_CPPFLAGS (or *_CPPFLAGS) configure.ac:624: warning: INCLUDES is the old name for AM_CPPFLAGS (or *_CPPFLAGS) /opt/local/share/automake-1.14/am/depend2.am: error: am__fastdepOBJCXX does not appear in AM_CONDITIONAL /opt/local/share/automake-1.14/am/depend2.am: The usual way to define am__fastdepOBJCXX is to add AC_PROG_OBJCXX /opt/local/share/automake-1.14/am/depend2.am: to configure.ac and run aclocal and autoconf again src/qt/Makefile.am: error: Objective C++ source seen but OBJCXX is undefined src/qt/Makefile.am: The usual way to define OBJCXX is to add AC_PROG_OBJCXX src/qt/Makefile.am: to configure.ac and run autoconf again. configure.ac:624: warning: INCLUDES is the old name for AM_CPPFLAGS (or *_CPPFLAGS) configure.ac:624: warning: INCLUDES is the old name for AM_CPPFLAGS (or *_CPPFLAGS) autoreconf: automake failed with exit status: 1 ``` If I ignore the failed with exit status 1 and run ./configure, I get configure: error: "Big Endian not supported"
2943	23539033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23539033	theuni	I grabbed automake 1.14 and tested locally. I just veified/pushed the fix for that problem. New parts for my Macbook should be here tomorrow, Monday at the latest. I can test definitively then if you dont feel like being a guinea pig.
2943	23540212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23540212	theuni	Looks like the problem is trying to build for osx 10.5 from 10.7, which isnt going to happen without a good amount of local fiddling (likely installing xcode 3). You might be able to get past it for now by disabling the release compatibility flags: ./configure --enable-debug
2943	23605354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23605354	fanquake	Do you use MacPorts, HomeBrew or something else on OSX?
2943	23620407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23620407	theuni	Just pushed a boatload of fixes. Sorry for yet another round of changes, but this has turned out to be much more complicated than originally anticipated. I can squash down before merge, but I decided to push individual changes in case anyone is following the progress. Fully verified on osx now that my macbook is up and running again (yay!). I also scrapped the windows-deploy target and replaced it with the generic deploy one. make deploy on osx will produce a fully-functional dmg. When building for windows, make deploy will create a fully-functional win32 installer. At this point, its feeling very very solid. That said, I only have osx 10.6 at my disposal currently, so it hasnt been tested on 10.7/10.8 yet. Tested extensively with macports and homebrew after todays changes. The build procedure is pretty much: install macports/homebrew depends as before, but with automake/autoconf added. Additionally, you can install qt directly from macports/homebrew and it should just work (tm). After that, standard configure+make should be all it takes. Ill try to get the osx docs written+pushed tomorrow.
2943	23621849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23621849	sipa	ACK code changes, and seems to work fine on Ubuntu (13.04). still wanted some improvement to the .pro file, though?
2943	23641487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23641487	gavinandresen	So... ... how do I tell autogen.sh and/or configure to use MacPorts? Just running autogen.sh then configure I get: ``` checking for SSL... no configure: error: openssl not found. ``` ... with MacPorts openssl in /opt/local/{include,lib}
2943	23641552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23641552	jgarzik	Usually I do something like CXXFLAGS="-O2 -Wall -g -I/opt/local/include" LDFLAGS="-L/opt/local/lib" ./configure
2943	23641585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23641585	theuni	Still working on the osx docs.. I spent all day working out possible configs from 10.6-10.8 (managed to get my hands on a 10.8 macbook), both macports and brew. Short answer: sounds like you need to sudo port install pkgconfig. After that, it should find everything for you.
2943	23678394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23678394	wtogami	10.5 is officially dropped? (Apple has.)
2943	23678627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23678627	theuni	No, I dont have a 10.5 machine at my disposal. However, release binaries are still built as 32-bit 10.5 compatible after my changes. Dropping 10.5 would make lots of things much easier, but I dont wish to mix a policy change (which OSs are supported) with a technical change (buildsystem switch) for fear that this would needlessly delay the process.
2943	23682205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23682205	gavinandresen	port install pkgconfig worked nicely. Id volunteer to help write documentation, but, as you can tell, I dont know enough about autotools to be helpful.
2943	23682627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23682627	theuni	No worries. The reason Im hesitant to do the docs is because it essentially needs a rm -f *. The point of autotools is abstraction, so theres really no need for platform-specific instructions. Theres also really no need for distinction between qt/non-qt builds anymore. My intention is essentially: - Platform-specific dependencies. A readme for each platform detailing what needs to be done before ./autogen.sh. Basically documenting the part you just went through. - Building bitcoin. How to bootstrap and configure. See ./configure --help for options. Pitfalls. What do I do when X? - Distribution notes. How to package, release, etc. - Testing. The problem with the above is that I need a good bit of feedback. Ive been looking at this (and working on other autotools projects) for so long that its become hard to tell whats non-obvious. I dont think Ill receive much feedback until its merged and there are more devs exposing its warts. So my proposal is to do a quick readme with monkey-style copy/paste commands for the various platforms, and let that suffice until merge. Post-merge, the above outline could be much more easily worked out. Thoughts?
2943	23682838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23682838	jgarzik	I would propose low merge hurdles, namely * builds qt and daemon on at least one Linux OS * builds qt and daemon on at least one OSX version * builds qt and daemon on Windows, or has a clear path to doing so * pulltester Anything else can and should be resolved in-tree. Once the system is working "en grosse" merge it, leaving sector experts and motivated parties to hammer out the final details. In particular, Qt will likely need additional attention after merge, it sounds like. Thats OK. We are not going to have 0.9-rc1 tomorrow or next week. The first three seem to be well on their way to being completed. The last is the toughie, IMO: need to get our pulltester back in working order almost immediately after merge, so we need to beg BlueMatt for some time or hopefully grow some more pulltester experts (I am entirely hands-off Java, not being a fan of the language). tl;dr: Lets not endlessly iterate this outside of master. Merge it.
2943	23682936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23682936	theuni	Whew, thats great to hear. Getting it merged will will really help. Ive been working on pulltester actually, and I"m nearly there. Ive add lcov support to the buildsystem, as well as support for the java test that pulltester runs (side-rant: I find it troubling when these things are out-of-tree and firmly believe that they should be testable by every dev). So Pulltester essentially becomes a few configure/make and thats it. I believe I can have that pushed up tonight.
2943	23695701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23695701	theuni	Ok, that should do it for the pull tester. Ive integrated lcov and the java test into the build. Also added a set of scripts for contrib that pull-tester can run from jenkins. The big benefit is that everything is now in-tree, so if they change in the future, theres no worry of getting out of sync with the build procedure. Additionally, devs can run the script and yield the same result as the bot. ping. With any luck, the bot just needs to run test-scripts/pull-tester.sh . That in-turn kicks off which is as close to the old behavior as I could get it.
2943	23696107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23696107	gavinandresen	Nice! If Matt doesnt get to it before me, Ill teach the pull-tester machine to Do The Right Thing (if test-scripts/pull-tester.sh exists, run it. Else do what we do now).
2943	23696498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23696498	theuni	Sounds good. It will need a little more love, as it will fail until the win32 deps are updated to the new version. The old ones were scattered around, the new ones are in a prefixed layout. IMO, that should wait until after this is merged, and just let it fail until then. The old/new win32 deps can coexist to facilitate build-testing of the old kind. There will just need to be 2 copies, one in /mnt/mingw as they currently are, and another set somewhere else. If running the new script, it should be executed as: contrib/test-scripts/pull-tester.sh /path/to/new/mingw/deps 6 (where 6 is the current make -jX value)
2943	23760958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23760958	theuni	If/when you go to update the bot, the params have changed to accommodate the out-of-tree java tool. It should now be invoked as: ``` contrib/test-scripts/build-tests.sh /path/to/win32/deps /mnt/test-scripts/BitcoinjBitcoindComparisonTool.jar 6 ```
2943	23763886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23763886	theuni	Ok, Ive pushed the last of my changes. I now consider this to be complete. Im sure its full of bugs and facepalms, but I think it now meets criteria above. pull-tester should be working pending teaching the bot its new tricks, and a rebase of this branch. The win32 build will fail until it gets updated deps, so Ive disabled that build in the test-scripts for now. Any objections to squashing this down now and rebasing to master?
2943	23769820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23769820	theuni	Squashed down and ready from my side, with the understanding that it will probably require some patience for a few days/weeks. The individual commits (plus a few fixes related to rebasing to master) can be seen here if needed: I need to step away from this for the rest of the week, but Im happy to answer any questions that arise.
2943	23860573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23860573	laanwj	Nice work, I tested around a bit and it worked wonderfully. One remark: Building from a different directory makes it croak on leveldb, ie. bitcoin$ ./autogen.sh bitcoin$ cd ../bitcoin-build bitcoin-build$ ../bitcoin/configure bitcoin-build$ make -j6 .... Building LevelDB ... /bin/bash: line 0: cd: leveldb: No such file or directory make[3]: *** [leveldb/libmemenv.a] Error 1 make[3]: *** Waiting for unfinished jobs.... Building LevelDB ... /bin/bash: line 0: cd: leveldb: No such file or directory I first thought it was caused by parallel build, but it happens with single-threaded build as well.
2943	23861500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23861500	theuni	Yea, out-of-tree builds cant really work without some serious hackery, which Ive declined to add so far. You can see how it _would_ work with make distcheck, which runs an out-of-tree build. The "solution" applied there is to copy leveldb to the build dir.
2943	23914192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23914192	theuni	squashed with the pull-tester updates and 2 additional fixes: - use c++ for all tests (means that osx framework checks get cxxflags) - bail if pkg-config is needed but not found
2943	23916063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23916063	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2943	23980939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23980939	shripadk	Wont work for me on OSX 10.7.2, get an error in configure. bitcoin git:(master) ./configure checking build system type... i386-apple-darwin11.2.0 checking host system type... i386-apple-darwin11.2.0 checking for a BSD-compatible install... /usr/bin/install -c checking whether build environment is sane... yes checking for a thread-safe mkdir -p... src/build-aux/install-sh -c -d checking for gawk... no checking for mawk... no checking for nawk... no checking for awk... awk checking whether make sets $(MAKE)... yes checking whether to enable maintainer-specific portions of Makefiles... no checking if compiling with debugging symbols... checking for g++... g++ checking for C++ compiler default output file name... a.out checking whether the C++ compiler works... yes checking whether we are cross compiling... no checking for suffix of executables... checking for suffix of object files... o checking whether we are using the GNU C++ compiler... yes checking whether g++ accepts -g... yes checking for style of include used by make... GNU checking dependency style of g++... gcc3 checking for gcc... gcc checking whether we are using the GNU C compiler... yes checking whether gcc accepts -g... yes checking for gcc option to accept ISO C89... none needed checking dependency style of gcc... gcc3 checking how to run the C preprocessor... gcc -E checking for a BSD-compatible install... /usr/bin/install -c checking for gcc... gcc checking whether we are using the GNU Objective C compiler... no checking whether gcc accepts -g... no checking dependency style of gcc... gcc3 checking for a thread-safe mkdir -p... src/build-aux/install-sh -c -d checking for a sed that does not truncate output... /usr/bin/sed checking for ar... /usr/bin/ar checking for ranlib... /usr/bin/ranlib checking for windres... no checking for strip... /usr/bin/strip checking for gcov... /Users/shripadk/gcc-4.8/bin/gcov checking for lcov... no checking for java... /usr/bin/java checking for genhtml... no checking for git... /usr/bin/git checking for moc... /usr/local/bin/moc checking for uic... /usr/local/bin/uic checking for rcc... /usr/local/bin/rcc checking for lrelease... /usr/local/bin/lrelease checking for protoc... no checking for ccache... no checking for pkg-config... /usr/local/bin/pkg-config checking pkg-config is at least version 0.9.0... yes checking for port... port checking for brew... brew checking whether the linker accepts -framework Foundation -framework ApplicationServices -framework AppKit... yes checking whether C++ compiler accepts -mmacosx-version-min=10.5... yes checking whether C++ compiler accepts -arch i386... yes checking how to run the C++ preprocessor... g++ -E checking for grep that handles long lines and -e... /usr/bin/grep checking for egrep... /usr/bin/grep -E checking for ANSI C header files... yes checking for sys/types.h... yes checking for sys/stat.h... yes checking for stdlib.h... yes checking for string.h... yes checking for memory.h... yes checking for strings.h... yes checking for inttypes.h... yes checking for stdint.h... yes checking for unistd.h... yes checking whether byte ordering is bigendian... no checking whether pthreads work with -pthread... yes checking for joinable pthread attribute... PTHREAD_CREATE_JOINABLE checking if more special flags are required for pthreads... -D_THREAD_SAFE checking for PTHREAD_PRIO_INHERIT... yes checking for special C compiler options needed for large files... no checking for _FILE_OFFSET_BITS value needed for large files... no checking whether the linker accepts -Wl,--large-address-aware... no checking whether C++ compiler accepts -Wstack-protector... yes checking whether C++ compiler accepts -fPIE... yes checking whether C++ preprocessor accepts -D_FORTIFY_SOURCE=2... yes checking whether the linker accepts -Wl,--dynamicbase... no checking whether the linker accepts -Wl,--nxcompat... no checking whether the linker accepts -Wl,-z,relro... no checking whether the linker accepts -Wl,-z,now... no checking whether C++ compiler accepts -fno-stack-protector... yes checking whether C++ compiler accepts -fstack-protector-all... yes checking whether the linker accepts -pie... yes checking whether the linker accepts -Wl,-dead_strip... yes checking stdio.h usability... yes checking stdio.h presence... yes checking for stdio.h... yes checking for stdlib.h... (cached) yes checking for unistd.h... (cached) yes checking for strings.h... (cached) yes checking for sys/types.h... (cached) yes checking for sys/stat.h... (cached) yes checking for MSG_NOSIGNAL... no checking db_cxx.h usability... yes checking db_cxx.h presence... yes checking for db_cxx.h... yes checking for main in -ldb_cxx... yes checking for main in -lminiupnpc... yes checking for boostlib >= 1.20.0... yes checking whether the Boost::System library is available... yes checking for exit in -lboost_system-mt... yes checking whether the Boost::Filesystem library is available... yes checking for exit in -lboost_filesystem-mt... yes checking whether the Boost::Program_Options library is available... yes checking for exit in -lboost_program_options-mt... yes checking whether the Boost::Thread library is available... yes checking for exit in -lboost_thread-mt... yes checking whether the Boost::Chrono library is available... yes checking for exit in -lboost_chrono-mt... yes checking whether the Boost::Unit_Test_Framework library is available... yes ./configure: line 13446: syntax error near unexpected token `fi ./configure: line 13446: ` fi
2943	23981175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23981175	luke-jr	Also not working for me, as it isnt looking for bdb headers in the standard paths :(
2943	23981350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23981350	jgarzik	"standard path" varies even between Linux OSs, because BDB 4.x by default just installs into /usr/include/db.h.
2943	24011659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24011659	theuni	I think I see it. (Also, you need to install pkg-config from ports). Could some committer kill the extra ] that snuck in here:
2943	24012941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24012941	wtogami	/usr/include/features.h:330:4: warning: #warning _FORTIFY_SOURCE requires compiling with optimization (-O) [-Wcpp] This warning prints very often with a plain ./configure. The default builds without any -O. Is this intended? > jgarzik said: AFAIK the default is -O2 -g > warren said: confirmed, plain "./configure" lacks -O or -g
2943	24015342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015342	theuni	Not intended. Now that this has been merged, its worth a bit of debate as to what reasonable defaults should be for debug/release configurations should be. Before, they were different per OS. Id say that for debug, "-g -O2" probably makes sense.
2943	24015558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015558	luke-jr	I find -O2 makes debugging impractical, so I personally prefer "-ggdb -O0", but if -O1 is needed for security thats probably good enough (besides, -O0 doesnt even inline :p).
2943	24167856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24167856	jonasschnelli	Getting error while trying to build with Qt. ```checking if qt should be enabled... configure: error: "qt support requested but qt could not be located. use --without-qt"``` How can i define the QT dir to use? I tried ```--with-qt-incdir=, --with-qt-libdir=, --with-qt-bindir```. Would it not be more practical to support ```--with-qt=/path/to/your/qt/dir```?
2940	23226456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23226456	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2940	23228169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228169	sipa	ACK
2940	23475261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23475261	Diapolo	Should be save to merge IMO.
2939	23226819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23226819	gmaxwell	No, this isnt what we want. This will break hidden services. See doc/tor.md. Normally you set -proxy= when you want to use the proxy exclusively, and that disables listening by default. #2927 already has listen=0 in any case.
2939	23226864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23226864	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2939	23228181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228181	sipa	NAK. Just -tor shouldnt disable UPnP; -nolisten and -proxy should, but already do, AFAICS.
2939	23246165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23246165	Diapolo	Just to get this clear, when I use -tor this is for reaching Tor addresses (hidden services) and this patch would disable listening, if not explicitly enabled and would also lead to disable -upnp and -discover (if not explicitly enabled). How does this break hidden services? I guess the patch should be changed to do this for -onlynet=Tor then?
2939	23246270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23246270	gmaxwell	because you could no longer receive incoming connections from other hidden service peers. If you intended to have no non-tor connectivity at all you should instead be using proxy. Perhaps this could be better documented. No, this shouldnt disable listening for onlynet=tor either, since that will break hidden service inbound too. It should probably disable UPNP when onlynet=tor, however.
2939	23247378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23247378	Diapolo	Right, incoming connections would be disabled that way. When I setup Tor and want bitcoin to only use Tor I do this via ``-proxy=127.0.0.1:9050 -externalip=XYZ.onion -onlynet="Tor" -bind=127.0.0.1`` (perhaps that configuration should be mentioned in tor.md?), which explicitly ENABLES incoming connections.
2939	23250492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23250492	Diapolo	Ill close this, would be nice if you could comment my above posting.
2938	23221501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221501	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2938	23228222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228222	sipa	ACK
2938	23230872	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230872	petertodd	Minor update: fixed two incorrect comments.
2938	23231787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23231787	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2938	23239626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23239626	gavinandresen	ACK
2937	23220118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220118	Krellan	Weve been having a fine discussion here:
2937	23220591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220591	jgarzik	Seems like an awful lot of code for one simple feature... no technical objection but... meh. I would rather a simple hook system (boost signals?) that delivers a pong response, to anyone who pre-registers a pong handler for nonce X. That would keep most of the code more in the RPC side of things.
2937	23224822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23224822	Krellan	Thanks for the feedback. It did end up being more code than I thought it would. Reason is, theres 3 different protocol variations to contend with (no nonce, zero nonce, matching nonce). Also, there was no pong receiver at all, so had to add that as well. I added a good amount of debug text in "if (fDebug) ..." blocks, which is rather verbose. Im surprised theres no dprintf() or similar macro, perhaps theres something I missed. Every debug line adds another possible code path, because of that if statement. Probably the lowest-hanging fruit is to jettison those. I wonder how a hook system would work? Registering a handler would seem to complicate things even more. The ping and pong messages have to be sent/received anyway, that would just add another layer of indirection to shift the processing elsewhere, unless theres something Im missing here.
2937	23228769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228769	sipa	ACK. Its perhaps slightly over-complicated (rate-limiting user-requested pings?), but its otherwise pretty much how Id have suggested implementing it. One nit: the ping RPC command could be a separate commit from the rest of the logic, but I dont feel strongly about this.
2937	23228789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228789	sipa	Agree that a hook-mechanism for dealing with incoming commands is probably the future, but we dont do that right now for other messages, and its unreasonable to demand that in a pullreq like this.
2937	23239127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23239127	Krellan	Thanks for the feedback. I will remove the ratelimit for user-requested outbound pings, since youre right, that does seem rather overcomplicated. Also, good catch on indentation, I didnt see that. Darn editor :) It is strange to see a ping with a valid nonce be replied to with a pong with a nonce of 0. However, this is very common on the wire, I have noticed. I looked through the history but could not find it. Im guessing its another implementation that has this bug? I like the idea of only accepting these weird pong replies (nonce of zero) if that implementation can be detected. What distinguishes it? Unfortunately, I dont think its protocol version gives it away.
2937	23245689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23245689	Krellan	I updated the commit. Got rid of the idea of rate-limiting user-requested RPC pings, that simplifies a chunk of code. Cleaned up indentation. The "pingtime" field shows only completed pings. I took the liberty of adding a second field, "pingwait", that will only appear during the time a ping is in flight. It will show you how long we have been waiting for that ping to complete. This gives a window of visibility into noticing a sudden increase in lag (perhaps a newly solved block just arrived), or a peer that is so burdened that it is having trouble responding to pings. I could put this patch on a diet by jettisoning the debugging/error messages for various things that can happen. Good or bad idea? The messages were useful during testing but its pretty much solid now.
2937	23246945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23246945	gavinandresen	Why reinvent /sbin/ping ? Why not just a little shell script that calls getpeerinfo, then uses the system ping to determine ping times? Im a less-code-is-better kinda guy.
2937	23247313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23247313	sipa	There are many factors that affect Bitcoin P2P latency which you wouldnt notice through network-level ping (application throttling, peer having an overloaded receive queue, peer being DoSed, implementation problems...), and it will not work for every type of connection (incoming peers that are firewalled, or onion peers for example). Additionally, having ping statistics inside the program can be useful for future heuristics when picking peers to sync/download from.
2937	23248106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23248106	Krellan	Thanks sipa, very well said. Thats the key reasons to have a ping at the Bitcoin layer, not just at the OS networking layer.
2937	23396736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23396736	Krellan	I have put the ping/pong handlers in main.cpp on a diet. Removed the printf statements, they have proved their usefulness during testing, but dont need to be in there permanently.
2937	23397555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23397555	gmaxwell	>future heuristics when picking peers to sync/download from. Also for picking peers to keep/discard when our connection slots are full: Low latency is something that a sibyl attacker cant just fake he actually has to get close to you, so it makes sense to full to reserve some slots for the lowest latency, apparently healthy peers.
2937	23457819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23457819	Krellan	Thanks. As talked about on IRC the other night, I restored some code that was in the before, to drop pong messages if they are received with a nonce of zero. I am unsure what clients are sending these. Their version string comes across as "0.8.99" but I havent found any version history that would ever send a pong (not a ping!) with a nonce of zero. While running it overnight, I noticed yet another bad client pong behavior. The peer is sending me pong messages with no payload at all (zero bytes). This causes an exception during unserialize, which is caught so nothing harmful happens, but its unclean.
2937	23575074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23575074	mikehearn	What are the subVers of the bad clients?
2937	23601453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23601453	Krellan	Investigating that now. Frustratingly, it isnt happening anymore with my current set of peers that Im connected to.
2937	23631057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23631057	Krellan	Made some changes. 1) Added more instrumentation to catch all of the anomalies that weve seen so far, in the pong handler. Instead of previous bloat, they are all now unified into a single printf statement. 2) Incoming pong message size is now checked. Unfortunately, I did not find any more peers who were giving me those empty-payload pong messages, but if they show up again, they will be cleanly logged this time, instead of throwing the exception. I noticed in_avail() in serialize.h returns an int. Shouldnt it be a size_t? There are no other users of it in bitcoind, I have noticed. 3) I just now call RAND_bytes() for each peer, instead of trying to save random entropy by only calling it once per overall ping request and then just incrementing it for each peer. Should now never be guessable, but at the cost of burning the entropy pool. Perhaps use RAND_pseudo_bytes() instead? Also, this pull request is getting somewhat long in the tooth. I ran it against the latest top of tree, and it still applies cleanly and works just fine. Should I close this pull request and make a new pull request from a branch closer to the very latest, or keep this pull request open?
2937	23774758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23774758	Krellan	Tested against latest top of tree and patch still applies cleanly.
2937	24010723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24010723	Krellan	Rebased the branch to catch up to latest master.
2937	24963496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24963496	sipa	ACK
2937	25320951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320951	sipa	Any further comments? Id like this merged, to be able to add some automatic latency measurement on top.
2937	25411179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25411179	gavinandresen	s/printf(/LogPrint("net"/ and Im OK with merging.
2937	25418235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25418235	Krellan	Great idea to use LogPrint instead. Made that one-line change. Also rebased it against the latest master.
2937	25683054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25683054	Krellan	Fixed the merge. The "ping" command doesnt require access to the wallet, of course, so the new column is false for it.
2937	25689615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25689615	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2935	23217438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23217438	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2935	23220825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220825	gavinandresen	ACK. Candidate for a 0.8.4rc2, if we do one (not a critical DoS issue only because creating an invalid block is so expensive).
2935	23225500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23225500	gmaxwell	ACK. (Without an extranonce, I was having a hard time producing a block just for testing)
2933	23215883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23215883	sipa	This obviously depends on the LevelDB 1.13 changes being merged in the LevelDB repo first, but having it in a pullreq here already makes it easier to test.
2933	23216543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23216543	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2933	23220570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220570	jgarzik	ACK
2933	23225472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23225472	wtogami	You mentioned adding this to 0.8.4 too. Is that safe?
2933	23226110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23226110	Diapolo	I think it would be nice to have a reference to the LevelDB changelog in the commit-msg.
2933	23228861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228861	sipa	Actually, it is there. Unfortunately, there is only a single commit in the upstream LevelDB repo from 1.12 to 1.13 ("LevelDB 1.13"), and its listed in the squashed subtree commit. If you want to see the full commit message, look at the leveldb repo (http://github.com/bitcoin/leveldb), in the bitcoin-fork branch. EDIT: Its not yet merged there, look at pullreq 1 in that repo.
2933	23228895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23228895	sipa	Theres always some risk, and we should be careful when making changes to the leveldb subtree, as it may affect convergence in case of bugs. In this case, I think the potential benefit is worth the risk, and the changes look safe.
2933	23230960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230960	petertodd	"This obviously depends on the LevelDB 1.13 changes being merged in the LevelDB repo first" <- by that do you mean this pull-req might be changed again if LevelDB changes what they decide to merge? Id spend an hour or two to go through the actual changes manually, but its not worth it unless were sure this is what we would want to merge.
2933	23231021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23231021	sipa	I mean in our LevelDB repo, (http://github.com/bitcoin/leveldb). Upstream LevelDB 1.13 is released, so no worries there. Reason for this is that its not entirely clear to me how we want to manage our leveldb repository, depending on whether we want to merge upstream changes before or after testing them in Bitcoin. In any case, this pull request serves as a preview to the actual changes, but may change if we for example wish to make some changes in our leveldb repo before merging the upstream changes.
2933	25320969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320969	sipa	Opinions? Do we need some testing before or after merging this in the bitcoin/leveldb repo?
2933	25321172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321172	gmaxwell	Ive given it some fairly basic testing now: ran the node under it, reindexed under it, and switched back to the old one. Everything seems okay.
2933	25321812	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321812	sipa	I went ahead and created merge commits in the bitcoin/leveldb repo for 1.13 and 1.14 (and a signed tag for 1.13). 1.14 only has non-relevant changes for us, afaict.
2933	26226797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226797	sipa	Anyone object to merging?
2933	26305142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26305142	jgarzik	ACK
2933	26305551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26305551	gmaxwell	ACK (if my prior soft nod wasnt enough)
2932	23475306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23475306	Diapolo	Any comments?
2932	23481851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23481851	laanwj	Sounds sensible to do all the parsing of parameters in ParseParameters. Maybe store the URL as well, and not only signal a boolean? This avoids having to scan the arguments again to find out what exactly the URL was.
2932	23490095	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23490095	Diapolo	Nice suggestion, but what happens, if the parameters would contain multiple bitcoin: URIs or is that even a possible condition?
2932	23496403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23496403	laanwj	Yes, I think thats a possible condition. You could make it store a vector of strings instead of one string. A length of zero would then mean "no URL".
2932	24801258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24801258	Diapolo	Changed to a vector of strings and modified paymentserver to benefit of the changes. Can you take another look?
2932	24859658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24859658	Diapolo	Can you restart a build if the pulltester errors are fixed?
2932	25063488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25063488	Diapolo	Im still rather sure this is a related error, can some core-dev take a look at
2932	25297998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25297998	Diapolo	Can you have another look, I updated the code in bitcoind.cpp to what you had suggested :). Also ``fCommandLine`` is no longer a global now.
2932	25315810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25315810	laanwj	Yep, havent tested it though! In time itd be better to split off the RPC client to a seperate executable and remove the hack. Likely wed need to do this in two steps 0.9.x) add rpc client executable (I leave it to other people to bikeshed the name), support rpc client in bitcoind for backwards compatibility but deprecate it 0.10.x) remove backwards compatibility in bitcoind
2932	25320988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25320988	sipa	Im very much in favor of splitting off the RPC client into a separate binary.
2932	25433542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25433542	Diapolo	Your suggestions are good but far beyond the scope of this pull :). Any final comments/nits/ACKs?
2932	25467025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25467025	laanwj	Code changes are ACK, but anything that affects command line parsing needs to be extensively tested. So Id like to see test reports from a few people (that bitcoin URLs still work, and other options still work, that the rpc client still works, and combinations...) before merging.
2932	25676894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25676894	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2932	25677241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25677241	gavinandresen	util.cpp ParseParameters is the wrong place to look for bitcoin: URIs, in my opinion. It should just return an array of strings that it could not parse. The payment server code can then look through that array and pull out any bitcoin: URIs. The payment server code currently looks for two things: bitcoin: URIs, but also filenames to files that contain payment requests. It is important to keep the filename functionality, because with the right registry entries that will let users drag and drop payment requests sent as (for example) email attachments.
2932	26497136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26497136	laanwj	Agreed, checking for bitcoin: in the core makes little sense as it has no knowledge of bitcoin URIs. Returning all non-parseable arguments is more flexible too.
2932	26499518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26499518	Diapolo	Indeed, Ill close this and return to the garage ^^.
2931	23209140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23209140	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2931	23439991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23439991	laanwj	ACK
2930	23209565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23209565	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2930	23440892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23440892	laanwj	ACK on the paymentserver part
2929	23208822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23208822	Diapolo	You should squash into one single commit.
2929	23216823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23216823	Krellan	Thanks for the feedback! Done. Nicely squashed now.
2929	23220619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220619	jgarzik	ACK the code change... what is the use case? How is this useful?
2929	23224873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23224873	Krellan	Thanks! Use case is to help network troubleshooting. In my example, I was having a tough time because I couldnt tell if my external IP address was being seen correctly by the outside world. Bitcoin exchanges this information during the "version" command handling, and stores it in the "addrLocal" member of CNode, but doesnt expose this to the user, so unless the user is lucky and sees the debug text scroll by at the moment a connection is made, the user wont be able to easily learn this information. Also, it might be nice in the future to have a table of network connections in Bitcoin-Qt or something like that, and this would make it easy to have both local and remote addresses appear in the table (for completeness).
2929	23229004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23229004	sipa	ACK
2929	23233971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23233971	Krellan	Thanks. I found the methods worked the same when simply reusing the existing CService, so theres no need to construct a CAddress here. I updated the commit, removing that CAddress.
2929	23774716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23774716	Krellan	Found and removed a needless usage of c_str().
2929	24011560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24011560	Krellan	No change made, just rebased this branch to catch it up to the latest master.
2929	26689502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689502	gavinandresen	Rebase needed again.
2929	26703987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26703987	Krellan	Rebased! Thanks for the reminder.
2929	26705948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26705948	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2928	23203321	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23203321	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2928	23219423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23219423	gavinandresen	ACK
2928	23229058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23229058	sipa	ACK
2928	23239350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23239350	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2928	23240227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240227	jgarzik	Fixed nit.
2926	23158914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23158914	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2924	23110628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23110628	luke-jr	Nice. But I worry that people might start getting antsy about bandwidth usage more than they already have...
2924	23111042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23111042	sje397	Thats exactly why I wanted it - because I had moments of antsy-ness about network usage :) I think its better to be transparent.
2924	23113576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23113576	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2924	23118459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23118459	petertodd	Get rid of the tnow() function and use GetTimeMillis() or GetTimeMicro() instead. Also add a "getnetrates" RPC call that dumps this data; itd be useful for node-monitoring purposes. Specifically it should return the following: totalin = nTotalBytesIn totalout = nTotalBytesOut timemillis = (double)GetTimeMillis()/1000 The time variable lets the callee accurately determine the actual bandwidth rate even if the RPC call has some latency. Also change size_t to uint64 - on 32bit machines size_t is 32-bits which is too small for the total bytes variable. Other than those issues I like the idea and will review the code later.
2924	23122030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23122030	gmaxwell	Very very cool. It would be nice if there were some way to break it down "hey, this one peer is eating all my bandwidth" vs "Bitcoin is eating all my bandwidth, Ill have to stop running Bitcoin" or "Hey, these inbound peers use a lot of bandwidth".
2924	23134739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23134739	sje397	I was sure thered be a better time func in there somewhere - cheers. Thanks. Yeah, would be good to take it further.
2924	23137899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23137899	sje397	The problem with those time functions is that they use wall-clock time. Is it possible to use boosts steady clock or we need to support versions of boost that are too old for that?
2924	23145103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23145103	petertodd	Im not familiar enough with boost to answer that. Would someone else please answer his question.
2924	23149775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23149775	gavinandresen	: Looks like we gitian-build against boost 1.40. Updating the version of Ubuntu we use for deterministic building and updating dependencies is on my want-to-happen-for-0.9 list...
2924	23150664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23150664	laanwj	Looks very nice. If you intend to keep tnow (I can see why, as you need monotonic time here, and AFAIK neither Qt nor Boost offers such a function) please move it to either util.cpp or guiutil.cpp.
2924	23259555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23259555	sje397	Thanks Diapolo.
2924	23267735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23267735	sje397	I think steady_clock is available in boost >= 1.47, and QElapsedTimer supports monotonic time in Qt >= 4.7 - both unfortunately recent.
2924	23270573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23270573	sje397	Maybe it would be better to make the total byte counts static members of the CNode class, and do the timing on the gui side.
2924	23274333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23274333	sje397	Sorry for the late refactor, but I think this cleans things up significantly.
2924	23336537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23336537	Diapolo	Qt code looks much better now, good job and thanks for listening :).
2924	23337408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23337408	sje397	No probs. Thanks for your time and patience.
2924	23338000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23338000	Diapolo	I would say some core-devs should comment on the core changes and RPC stuff now and should review the Qt code. If I find the time Ill try to compile your patch also if you consider it test-ready :). One feature request, maybe you could add a clear button?
2924	23338457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23338457	sje397	Yeah sure, please try it out. It does get boring pretty fast :) Along the way I added a couple of coloured lines next to the in and out labels to explain the graph a bit.
2924	23340401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23340401	Diapolo	Alright, compiles fine and is working. A few comments: 1. I think its better readable when you place a space between the values and the unit on the right (dunno if this is a locale thing, Im just offering just my personal impression). 2. When changing the slider the graphs are reset, guess this is normal? 3. When changing the slider it can give numers like 13.75h any way to make this depend in users locales or perhaps split hours and minutes at least? 4. Cant say why, but 15 minutes resolution sounds too large, graphics look not sharp or clear, Im missing my wow-factor when looking at it ^^. 5. I wonder why the graphs are only drawn if there is traffic, perhaps Im missunderstanding something, but if I select 15mins the graph should be pretty much moving steady from right to left?
2924	23342427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23342427	sje397	Thanks again Diapolo. Yep, changing the slider clears the graph because I didnt want to get complicated with resampling or storing timestamps etc. I moved the units into the translated string - that should make it more adjustable, e.g. for locales that might put the unit before the number etc. I put the spaces in, and dropped the resolution down to 5 mins.
2924	23342717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23342717	sje397	Im not sure whats up with your #5 - I get the graph moving steadily, even with no network connection.
2924	23405868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23405868	Diapolo	You were right, it is moving, sorry :). Thanks for the other changes! One nit, I saw you connected the clicked() signal to clear() via .ui file, whereas I would prefer: ``connect(ui->btnClearTrafficGraph, SIGNAL(clicked()), ui->trafficGraph, SLOT(clear()));`` in the RPCConsole constructor. I know its THAT easy to connect signals and slots via Qt Designer, but most of the .ui stuff is setup in the code and not in the .ui files. My personal oppinion is that such connections get lost, when browsing code and forgetting about .ui files.
2924	23441147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23441147	laanwj	Getting build errors here: projects/bitcoin/src/rpcnet.cpp:214: error: conversion from uint64 {aka long long unsigned int} to const Value_type {aka const json_spirit::Value_impl<json_spirit::Config_vector<std::basic_string<char> > >} is ambiguous projects/bitcoin/src/rpcnet.cpp:215: error: conversion from uint64 {aka long long unsigned int} to const Value_type {aka const json_spirit::Value_impl<json_spirit::Config_vector<std::basic_string<char> > >} iambiguous projects/bitcoin/src/rpcnet.cpp:216: error: conversion from int64 {aka long long int} to const Value_type {aka const json_spirit::Value_impl<json_spirit::Config_vector<std::basic_string<char> > >} is ambiguous
2924	23466558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23466558	sje397	Will look tonight. Odd that it passed the auto tests, and I didnt see it on osx or linux...will have to get my win build working I guess.
2924	23499838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23499838	Diapolo	I would LOVE to be able to get graphs like Tor/Vidala for Windows allows (solid with mild transparency): ![tor](https://f.cloud.github.com/assets/1419649/1050949/6fc57228-10c2-11e3-917a-f6c4ea065554.png)
2924	23503879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23503879	Diapolo	After removing the default string for the time window, you need to make sure the ``on_sldGraphRange_valueChanged`` code is called during init, because if not the initial display of selected slider value is missing.
2924	23879900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23879900	sje397	Please try again - I think Ive resolved those errors. I added the alpha background and fixed the issue with the slider value display.
2924	23984110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23984110	laanwj	Yep, builds now,thanks! Edit: this is wicked cool, definitely want this in
2924	24400893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24400893	Diapolo	Looks much better with the alpha background, if you now rebase (because of that autotools stuff) and fix my minor nits, you have my ACK.
2924	24733532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24733532	sje397	Done. Thanks again, Now to figure out how to build the thing without a pro file :)
2924	24734117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24734117	Diapolo	You dont need to build it for yourself without the .pro file (I also dont do this) you AFAIK just need to make sure you add the new .cpp and .h files in ``src/qt/Makefile.am`` to make pulltester happy and have this mergeable.
2924	24734438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24734438	sje397	Grr. Autotools is complaining about missing libdb_cxx headers - looking for version 48 and I have version 46 and version 53... Ill fix that makefile. Thanks.
2924	24734597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24734597	sipa	This is intentional. Use --with-incompatible-bdb if you want to use a different version than 4.8.
2924	24735245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24735245	sje397	Thanks - no worries installing db48... I just thought it was going to be a 5 min fixup, thats all... now it cant find Qt... Ill figure it out.
2924	24737672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24737672	sje397	Got it *almost* building, and modified src/qt/Makefile.am to moc and compile the new widget... Any ideas about this build error? OBJCXX libbitcoinqt_a-macdockiconhandler.o In file included from /System/Library/Frameworks/Foundation.framework/Headers/Foundation.h:123:0, from /System/Library/Frameworks/Cocoa.framework/Headers/Cocoa.h:12, from /opt/local/include/QtGui/qmacdefines_mac.h:113, from /opt/local/include/QtGui/qwindowdefs.h:99, from /opt/local/include/QtGui/qwidget.h:46, from /opt/local/include/QtGui/qmainwindow.h:45, from /opt/local/include/QtGui/QMainWindow:1, from macdockiconhandler.h:5, from macdockiconhandler.mm:1: /System/Library/Frameworks/Foundation.framework/Headers/NSTask.h:69:24: error: expected unqualified-id before ^ token /System/Library/Frameworks/Foundation.framework/Headers/NSTask.h:69:24: error: expected ) before ^ token
2924	24740707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24740707	sje397	Nevermind, it seems setting macports to use the llvm-gcc compiler works much better :)
2924	24806380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24806380	Diapolo	ACK to current UI and Qt changes. I would love to see some core devs comment on the naming of ``getnettotals`` and its fields (``totalbytesin`` and ``totalbytesout``) or even get ACKs now! Im happy to see this evolving even further :).
2924	25078798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25078798	Diapolo	ping
2924	25763825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25763825	laanwj	If this was a GUI-only change Id have merged it quite some time ago. Maybe split adding the RPC call into a different commit so it gets more review by the other devs?
2924	25767031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25767031	Diapolo	Well even if leaves out the rpc-call, there are still changes to the core (at least adding some vars for counting the traffic), which needs core-devs ACK :-/. Im fine with your split idea, if this helps speed things up...
2924	25821312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25821312	laanwj	Yes thats true, its not possible to entirely split it into core + GUI parts. So dont do the split. Lets just get at least one more ACK on the core changes. what do you think about the network changes? Your per-peer comment is not addressed yet but that could be done in a later pull, I think we should merge this if there are no blocking issues.
2924	26226944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26226944	sipa	ACK on the changes to core (didnt look at the GUI), apart from a few nits above. Needs rebase, though.
2924	26241760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26241760	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2924	26324694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26324694	sje397	Thanks guys!
2924	26325326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26325326	laanwj	Thanks to you for making this
2923	23074970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23074970	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2923	23086111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23086111	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2923	23109347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23109347	Krellan	Unfortunately, two different features got mangled together in the same pull request. My bad. Will close and resubmit separately.
2922	23016815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23016815	Diapolo	Please merge before the final 0.8.4 is built :-).
2922	23017473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23017473	Diapolo	Can someone take a look at and make this compatible with my MinGW shell :-)? I dont want to update bitcoin.qrc by hand anymore.
2922	23019343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23019343	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2922	23065989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23065989	wtogami	# Unmerged paths: # (use "git add <file>..." to mark resolution) # # both modified: src/qt/locale/bitcoin_en.ts Please update and rebase against 0.8.4rc2.
2922	23068905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23068905	Diapolo	I have no idea what you are talking about? Perhaps 0.8.4 was not based on current master.
2922	23069125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069125	gavinandresen	0.8.4 is 0.8.3 plus a few bug fixes. It has nothing to do with current master, and contains no new translatable strings.
2922	23069246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069246	wtogami	0.8.2 on May 25th was the last release tagged from master branch. 0.8.3 and 0.8.4 diverged from master after that point, and master is quite different now. It may be possible for you to generate updated translations for 0.8.4 branch specifically, although I am not sure how accurate it would be if Transifex was working from master all this time.
2922	23069638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069638	laanwj	merging: its still a valid translations update, it just wont make it into 0.8.4
2922	23069807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069807	Diapolo	It would still be a good thing, to get current translations into releases, which are not based on current master, but I cant think of a clean way to do this. As 0.8.4 may contain old strings that are not recent in current master anymore and as such are removed on Transifex and would then be untranslated... Right, there is no good way to achieve this.
2921	22996457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22996457	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2921	22997322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22997322	gavinandresen	NACK on the TimingResistantEqual optimization-- new version lets an attacker determine the length of the password. RE: optimizations in general: NACK unless you have a use case where performance matters. If you do, then please share what is sped up, and by how much.
2921	22997500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22997500	Enelar	Got it. What about my commentary about the reset of the median filter. Is this a bug?
2921	23000807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23000807	gavinandresen	CMedianFilter works correctly for me (patch for the median filter unit test): ``` diff --git a/src/test/util_tests.cpp b/src/test/util_tests.cpp index abfd882..be4b2d3 100644 --- a/src/test/util_tests.cpp +++ b/src/test/util_tests.cpp -32,6 +32,12 BOOST_AUTO_TEST_CASE(util_criticalsection) BOOST_AUTO_TEST_CASE(util_MedianFilter) { + CMedianFilter<int> filter2(2, 0); + BOOST_CHECK_EQUAL(filter2.median(), 0); + filter2.input(10); + filter2.input(20); + BOOST_CHECK_EQUAL(filter2.median(), 15); + CMedianFilter<int> filter(5, 15); BOOST_CHECK_EQUAL(filter.median(), 15); ```
2921	23069407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069407	laanwj	The median filter is only used on new connections and is used with very small filter sizes. Its deliberately very simple in implementation.
2920	22997226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22997226	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2920	23042188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23042188	gmaxwell	Thanks for taking the time to try out something here, but Im going to have to decline this optimization. The timing resistant equal is used to avoid leaking information about the length of RPC passwords in timing, your optimization would restore that information leak. If youre interested in working on improving performance, I suggest doing some profiling on Bitcoin and working on things that show up high in the profile.
2919	22989553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22989553	gavinandresen	Looks good to me-- compiles and runs on my OSX machine.
2919	22990362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22990362	petertodd	ACK
2919	22990886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22990886	gavinandresen	ACK: tested by importing a private key into a MultiBit connected to bitcoind running this patch, it synced correctly and ended up with the correct balance.
2919	22992788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22992788	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2918	22952462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22952462	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2918	23488526	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488526	Diapolo	Should be re-worked or closed, as we chose to keep the internal miner.
2918	26236992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26236992	wtogami	Please close.
2917	22993547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22993547	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2917	23008527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23008527	Diapolo	NACK, as the internal miner is of great use in testnet.
2917	23010972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23010972	luke-jr	You can just as well use a normal miner for testnet, which reduces the differences from mainnet and probably finds blocks faster too.
2917	23064598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23064598	wtogami	If poolers CPU minerd grows GBT support, and both it and bfgminer and reads bitcoin.conf to find the RPC auth mining details, then the lazy should have no problem with the testnet use case.
2917	23069564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069564	laanwj	Ive never used the internal miner, not even on testnet. It would be nice to still have a simple CPU miner in the bitcoin repository somewhere as example and for testnet, but I very much agree with removing it from the main executable.
2917	23073891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23073891	gmaxwell	Im in favor of this, even as a test the integrated one is not good because its ~entirely different code than anyone uses to mine the mainnet, and IIRC has previously had different bugs. I also however, strongly feel that we should also package a usable miner, because thats part of a complete network node... and its needed for testnet in any case. But it could be, and I think should be, a separate executable that uses the GBT RPC like all miners use these days.
2917	23126434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23126434	gavinandresen	NACK from me on removing the internal miner. I use it all the time to test stuff.
2917	23200041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23200041	gmaxwell	If someone really wants to keep it, I see no enormous gain in removing it either. Though if this is closed, please split the wallet dependency removal. I think we do want that regardless.
2917	23220660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220660	jgarzik	Pull #2928 addresses the wallet dependency removal, as that was needed for no-wallet mode. Closing due to several NAKs (myself, gavin, Diapolo, TD). The internal miner is used with regtest mode, notably, in addition to testnet.
2916	22944227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22944227	gmaxwell	I cant test, but the change looks fine to me. ACK.
2916	22944325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22944325	jgarzik	ACK
2916	22945754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22945754	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2916	22977012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22977012	wtogami	We did test this on Bitcoin and Litecoin builds. Should the commit credit go to Dana Powers, and perhaps include a link to the leveldb bug something like this?
2916	22983232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22983232	gavinandresen	Running with no issues on my Mac.
2915	22940748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22940748	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2914	22931419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22931419	gmaxwell	Tested multibit and full node sync as well as a number of hours of regular network operation. More testing with spv nodes would be helpful.
2914	22931444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22931444	mikehearn	Code looks good to me. I havent tested it in practice yet.
2914	22932210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22932210	sipa	Looks good in general to me, but go fix the tests :)
2914	22932615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22932615	gmaxwell	::nods:: As you wish. :) (where is my brown paper bag?)
2914	22935084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22935084	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2914	22977130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22977130	wtogami	FWIW, to help with sanity testing, Litecoin deployed this in testing on nodes with hundreds of of peer connections, both with and without bloom enabled.
2914	22983762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22983762	gavinandresen	ACK, ran this overnight on my Mac with no drama.
2913	22927641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22927641	gmaxwell	"confirmations" : 3158, $ for i in {250000..250011} ; do bd getblock `bd getblockhash $i` | grep time; done "time" : 1375533383, "time" : 1375534052, "time" : 1375534117, "time" : 1375534811, "time" : 1375535273, "time" : 1375535332, "time" : 1375535598, "time" : 1375536016, "time" : 1375536096, "time" : 1375536720, "time" : 1375536820, "time" : 1375538522, ACK.
2913	22929075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22929075	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2913	22936716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22936716	sipa	ACK
2913	22937149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22937149	jgarzik	ACK. Time to regenerate the torrent...
2911	22883647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22883647	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2911	22915662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22915662	gavinandresen	Next time, a better pull request comment would be welcome. E.g. "makefile.mingw-linux already has these fixes, just porting them to makefile.mingw."
2911	22926166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22926166	phelixbtc	OK
2908	22832734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22832734	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2908	22833304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22833304	sipa	Please fix this on transifex: Translations are pulled into this repository before releases.
2907	22819865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22819865	gavinandresen	ACK
2907	22820902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22820902	sipa	Updated the leveldb repo to a rebased version of our tree, on top of upstream LevelDB.
2907	22821515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22821515	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2907	22822105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822105	jgarzik	ACK
2907	22822216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822216	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2905	22772478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22772478	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2905	23012254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23012254	gavinandresen	This breaks contrib/pyminer/, yes? Porting contrib/pyminer to use getblocktemplate would be spiffy.
2905	23012436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23012436	luke-jr	Good point. Does anyone object if I use my python-blkmaker module for the port?
2905	23064122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23064122	wtogami	Just do it.
2905	23230189	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230189	sipa	Unless serious objections are raised by the community, ACK. A python reference miner sounds good, but can wait, I guess. We should probably at least remove contrib/pyminer in this pullreq too, though.
2905	23240825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240825	jgarzik	Rebased, and fixed a couple comment bugs. Considered removing contrib/pyminer, but decided that was best left for a separate commit. I agree it would be nice to update pyminer, or another simple reference miner, to use getblocktemplate. Maybe cpuminer, with all assembly, 4way, etc. stripped out would fit the bill better than updating pyminer. The person who does the work will decide, I imagine :)
2905	23242258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23242258	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2905	23243152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23243152	gavinandresen	From the poolowners mailing list: "My pool still uses getwork for some miners..." Im not plugged into the mining world, so Ill let yall figure out whether or not it is ok to obsolete those miners.
2905	23243480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23243480	doublec	That comment was from me. Im not opposed to getwork being removed although I do currently use it. If I choose to continue supporting getwork I can back it with GBT. Ill need to stick to an older bitcoind until I get this done of course but I backport security issues to what Im running when I can.
2905	23310100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310100	jgarzik	Well, based on the latest comments, it is easy to be safe and paitent and use 0.9 release as the opportunity to announce that getwork is being removed. Add "deprecated" to the help text. Therefore, closing this pull req.
2905	23313545	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23313545	wtogami	I am neutral on removing getwork, although there seem to be scattered reports of getwork on 0.8.2+ causing RPC problems? I am not sure if this has been filed somewhere.
2905	23498764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23498764	luke-jr	I dont see any reason to try to put everything into a single git repository. libblkmaker already has a simple C example that can be used as a GBT reference.
2904	22747734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22747734	gmaxwell	So, the design choices here were to reuse or prompt when the keypool ran dry. Reuse has the advantage that the behavior would never change even when the pool empties, but it would reuse a previously assigned address, which is really surprising. There would also be an option to reuse after prompting if the wallet didnt unlock. Codeshark, said prompt on empty. I agree. If someone wants to reuse when they dont have the key the list is there. I tested this by starting up with an encrypted wallet and hitting new address until the keypool ran out and it promoted me. I dismissed the dialog and retried a few times before finally letting it unlock and confirming it worked as expected.
2904	22748512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22748512	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2904	22810137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810137	gmaxwell	Any comments? I dont normally change GUI code.
2904	22810466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810466	Diapolo	I took a quick look at ``GetKeyFromPool()`` and AFAIK we want to get rid of that default address/kay anyway, right? That pull could also remove the fAllowReuse parameter from that function, as its false after this pull everywhere in the code. Code looks good and does what it sais, no need to enter the passphrase when requesting a new receiving address.
2904	22810891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810891	gmaxwell	Good observation on default, I hadnt thought to check to find out if that were the last user of it.
2904	23069801	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23069801	laanwj	Good change. Agree with with regard to default key and allow reuse.
2904	23157291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23157291	Diapolo	AFAIK GetKeyFromPool() is now true at least once after paymentrequest pull was merged. Can you guys have a look into if this makes sense.
2904	23187437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23187437	gmaxwell	fAllowReuse gone and rebased post paymentrequests so I could remove the flag there too.
2904	23190464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23190464	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2904	23203398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23203398	laanwj	ACK
2904	23230226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230226	sipa	ACK core changes.
2903	22732671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22732671	sipa	ACK
2903	22734496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734496	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2902	22721329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721329	Diapolo	I agree with here, its hard enough sometimes to remind devs to add new options in the help message in the code ^^.
2902	22721469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721469	Michagogo	I think I also agree with petertodd and Diapolo -- Ive seen this stuff be out of date in other places, such as the wiki, and I think that in this case its best to simply direct users to one central place.
2902	22721590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721590	super3	Figured that would be a point. As a developer I though it would be helpful to have the API commands in file, so I could load them up in my editor. But I see what you are saying on how the probably will not get updated as they should. I think I will make it a shortlist instead with the most important commands with some explanation. And have them -? and google the rest.
2902	22721683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721683	Michagogo	If you want to have the commands in a list, its as simple as `bitcoind --help >> switches` for the command line switches, or `bitcoind help >> commands` for the RPC commands.
2902	22721856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22721856	super3	Well the plan was to go a little further than just listing them, but providing examples of usage as well. Should that be thrown into the /docs or the wiki or both?
2902	22722354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22722354	Michagogo	Oops, didnt know those comments would actually post to the PR.
2902	22722674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22722674	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2902	22724697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22724697	super3	Should be a little bit better now.
2902	22728612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22728612	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2902	22733051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733051	gavinandresen	Agreed that running_bitcoin.md is a bad idea; just direct people to the command-line help and the wiki (having two places that are always out of date is better than three).
2902	23307989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23307989	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2902	23488681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488681	Diapolo	You should squash into a single commit. I have no big tendendy towards or against this pull, its fine to merge it from my side.
2902	26198341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26198341	super3	Too minor of a change to do a pull. Closing and will add the good stuff to my next pull request.
2901	22718790	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22718790	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2901	22724581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22724581	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2901	22726418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22726418	jgarzik	Completed review of all RPCs for require-wallet status, and fixed a couple bugs found in testing. disable-wallet mode should be working in bitcoind now. These are the RPCs that remain available: ``` addnode <node> <add|remove|onetry> createmultisig <nrequired> <["key","key"]> createrawtransaction [{"txid":txid,"vout":n},...] {address:amount,...} decoderawtransaction <hex string> getaddednodeinfo <dns> [node] getbestblockhash getblock <hash> [verbose=true] getblockcount getblockhash <index> getconnectioncount getdifficulty getgenerate gethashespersec getinfo getmininginfo getpeerinfo getrawmempool getrawtransaction <txid> [verbose=0] gettxout <txid> <n> [includemempool=true] gettxoutsetinfo help [command] sendrawtransaction <hex string> signrawtransaction <hex string> [{"txid":txid,"vout":n,"scriptPubKey":hex,"redeemScript":hex},...] [<privatekey1>,...] [sighashtype="ALL"] stop submitblock <hex data> [optional-params-obj] validateaddress <bitcoinaddress> verifychain [check level] [num blocks] verifymessage <bitcoinaddress> <signature> <message> ```
2901	22726492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22726492	jgarzik	Updating CreateNewBlock() to take a script, rather than a CReserveKey, should make it possible to enable getblocktemplate RPC.
2901	22730662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22730662	jgarzik	disable-wallet mode now skips BDB environment setup, reducing startup RSS here by over 40MB (h/t
2901	22730900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22730900	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2901	22732801	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22732801	sipa	Interesting how little code changes were necessary.
2901	22735704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735704	sipa	Is there a good reason why this isnt intended to be merged? :p
2901	22736006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22736006	jgarzik	Cannot be merged... as-is. I wouldnt mind merging a cleaned up version, which attention paid to indentation and such.
2901	22736068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22736068	gmaxwell	Only argument I can make against it is that its more configurations to test and getting the 40mbytes back from BDB on walletless nodes would be nice.
2901	22736133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22736133	jgarzik	Also, my paranoid fear is that I missed a spot in review and testing, and someone will figure out a way to crash a node by triggering a wallet lookup somehow, somewhere.
2901	22736172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22736172	sipa	All P2P-induced calls from main to wallet should go through the registration interface.
2901	22738594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22738594	jgarzik	Code cleaned up, and perhaps merge-worthy.
2901	22738786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22738786	jgarzik	TODO list: * getblocktemplate should be re-enabled, in some form (requires a key for the default txout script, due to CreateNewBlock calling convention) * I thought of another TODO item, then promptly forgot. Nevertheless, a bullet point list is not a list without at least two items.
2901	22749394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22749394	luke-jr	Thoughts on just removing getwork, since its useless with mainnet and getblocktemplates use of CreateNewBlock doesnt need a generation transaction at all?
2901	22749559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22749559	gmaxwell	Internal miner needs a generation transaction. :-/ But yea, removing getwork sounds great to me, except for the whole not solving the needing a generation transaction bit...
2901	22810648	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810648	wtogami	Why are we keeping the internal miner at all?
2901	22810877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810877	gmaxwell	Because we have not provided an adequate replacement with the package, and its commonly used and perfectly reasonable on testnet.
2901	22811064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22811064	Diapolo	Agreed, its the only miner I use with Testnet as its so damn easy to use and JUST works.
2901	22825235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22825235	wtogami	With getblocktemplate and submitblock working, this type of node could still be used for p2pool or pools, with the payout address arbitrarily elsewhere for security. That is already possible today with normal nodes with a wallet, but this at least shrinks the memory requirement per p2pool node, which is great.
2901	22939051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22939051	jgarzik	The mining-removal discussion is outside the scope of this pull request, and is better discussed in active mailing list threads or pull req #2905 getblocktemplate can work just fine in disablewallet mode; just needs additional work appended here. Hence "TODO"
2901	23070340	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23070340	laanwj	Nice. Incidentally this would also be the "no wallets loaded" case for multi wallet support. Havent tested yet, but from looking at the code: validateaddress does a IsMine check (dereferencing pWalletMain) when the address is valid. Will this crash?
2901	23221635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221635	jgarzik	Rebased on top of #2928 and fixed s nit. getblocktemplate now works in no-wallet mode. OP updated accordingly. Should be merge ready, modulo another IsMine() review. I reviewed quickly based on s comment, but did not see the case. Will look more closely with brain fully engaged before saying it is 100% merge-ready :)
2901	23240506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23240506	jgarzik	Rebased, and fixed the bug found by
2901	23310148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310148	jgarzik	no-wallet mode is now ready for reviewing and merging.
2901	23382090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23382090	gavinandresen	Nit / pet peeve: negative options, because I hate double-negatives (-disablewallet=0 means "yes I want a wallet please"). Suggest that the option be: -wallet= to mean "no wallet, please." (default right now is -wallet=wallet.dat).
2901	23482335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23482335	laanwj	What about "-nowallet"?
2901	23489967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23489967	Diapolo	``-wallet=0`` IS ``-nowallet``, which I would vote for as a name for the switch.
2901	24018808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24018808	wtogami	I change my mind. I like -disablewallet the way it is now. -disablewallet is best as a distinct parameter for a specific purpose. It is more confusing to overload -wallet= with another possible meaning, and you dont want it to attempt load a wallet file of that name if you have a typo. Bleh, before we bikeshed on the name, could folks please review the actual code?
2901	24019089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24019089	Diapolo	As I said, -foo=0 is -nofoo for every parameter we use, why special case this one?
2901	24022976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24022976	jgarzik	-nowallet is fine with me, as long as it does not break, or otherwise require contortions of, the existing wallet pathname support. "-nowallet" seems quite natural, but a concern is that people were discussing -wallet=foo.dat -wallet=bar.dat and similar extensions for multiple wallet support. Im happy to go with whatever most people prefer.
2901	25308046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25308046	sipa	Code looks good, apart from a few nits (see inline), needs rebase though. I dont feel strongly about -disablewallet or -nowallet or -wallet=. We just need to know how it may later integrate with multiwallet (which naturally extends nowallet).
2901	25547670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25547670	jgarzik	Rebased. This is merge-ready, except for option-naming shed-painting.
2901	25680620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25680620	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2901	26960224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26960224	gavinandresen	-disablewallet is a fine shade of paint for the shed; I think you should rebase, sanity test one last time, and merge.
2901	27182021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27182021	wtogami	Disable Wallet for Bitcoin 0.8.5 Please ```s/Wallet disabled.../Wallet disabled!/```
2901	27354062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27354062	wtogami	If end-users want to help testing of this patch, a backport is included in this build of Bitcoin 0.8.5
2901	27606892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27606892	wtogami	* Rebase * disablewallet=1 needs a GUI error message if someone tries it with bitcoin-qt * ```s/Wallet disabled.../Wallet disabled!/```
2901	27617571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27617571	KobuderaRoninShinobi	s/Wallet disabled.../Wallet disabled!/
2901	28132274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28132274	sipa	Can you rebase please?
2901	28294938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28294938	laanwj	See #3240
2899	22684196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22684196	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2899	22706472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22706472	super3	Thanks!
2898	22678310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22678310	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2898	22680965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22680965	gavinandresen	The gitian build process uses README_windows.txt, as does the NSI installer: contrib/gitian-descriptors/gitian-win32.yml: cp $OUTDIR/src/doc/README_windows.txt $OUTDIR/readme.txt share/setup.nsi: File /oname=readme.txt ../doc/README_windows.txt ACK on removing the others.
2898	22682564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22682564	super3	Thanks for pointing that out and all the great work you do. Git issues. See #2899 for a squashed commit.
2898	22682707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22682707	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2897	22676208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22676208	super3	Ugh interface change. Let me try this again.
2892	22500045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22500045	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2891	22481044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22481044	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2891	22732843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22732843	sipa	ACK
2890	22440585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22440585	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2890	22454398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22454398	sipa	ACK
2888	22382150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22382150	sipa	This can be implemented much more accurately by computing the nChainWork difference divided by time difference.
2888	22385340	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22385340	wtogami	Should this also be squashed into a single commit for Bitcoin?
2888	22941689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22941689	luke-jr	I think the commits here look logical (and dont need to be squished)
2888	22977265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22977265	wtogami	Does insist on the rewrite to use nChainWork difference?
2888	23194907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23194907	sipa	Yes, I think its trivial to do right.
2888	23195736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23195736	gmaxwell	Beyond also sharing pieters concerns wrt doing the calculation with pow() instead of directly. I think the default (no parameter) call having a variable integration window is weird. This means if you call it right after a difficulty change youll get some insane random number. Had I implemented this I likely would have just had a default of 2016 blocks and no options.
2888	23220758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220758	jgarzik	Agree w/ feedback. Would like to see this merged, after revision.
2888	23490300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23490300	Diapolo	Any progress on this? Seems to be a nice feature.
2888	23499458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23499458	coblee	I will get to it in a few days. Thanks for all the feedback.
2888	23528039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23528039	wtogami	has implemented sipas requested change. coblee wants to write tests before submitting this to Bitcoin. I suggest squashing it a bit to have fewer, cleaner commits for Bitcoin.
2888	24384876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24384876	coblee	Sorry for the delay, the change is tested and pushed. Please take another look. thanks for the suggestion. the default behavior is to use the previous 120 blocks. Thanks for the fix.
2888	24386588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24386588	sipa	Code change looks good. One idea (to be discussed, perhaps): shouldnt be use max(block.time for block in blocks) - min(block.time for block in blocks), to avoid weird edge cases with small numbers of blocks and non-causal timestamps?
2888	24390220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24390220	coblee	Thats a fair point. I will make that fix. Will also need to handle a divide by zero edge case
2888	24413957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24413957	coblee	Hmm, I made the change, but looking at it now, Im not sure its a good change. Making sure we get correct results for weird edge cases is probably not worth the extra cost in keeping tracking of a min/max over all the blocks, since people wont be calling this method with a small number of blocks. what do you think? We can always just do a sanity check to make sure min < max.
2888	24474173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474173	sipa	Another idea (just up for discussion, dont rush implementing this): use the median-of-11 as timestamp for the begin and end block, which guarantees monotonicity (by network rule) and is likely a better estimator for actual time as well. The question is of course which window-of-11 to use; if you use 5-before-until-5-after, its not usable for the last 5 blocks, but likely unbiased. If you use 10-before-0-after, you get a slight bias if blocks are speeding up/slowing down, but I doubt thatd be noticable on such a short time frame.
2888	24486943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24486943	gmaxwell	How does the estimator you use on sipa.be work?
2888	24561302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24561302	coblee	I still think theres no need to be so precise with getting the time right since this is just an estimate. With a large enough block count, the difference between each of these solutions (just GetBlockTime, min/max, median-of-11) will be minimal. So not worth the extra cpu cycle to get it "right".
2888	24562854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24562854	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2888	25321329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321329	sipa	Exponential window that measures rate and average timestamp of past blocks (which seems to be what you need for a most likelyhood estimator for an poisson process whose rate is an exponential function; Im certainly not able to do the math for that again, but the resulting formulas became ridiculously simple), which is used to guess the parameters of the hashrate growth curve in every point, which on its turn is used to extrapolate the the speed at the current time. Way too complex (and probably too unstable) for using inside the program.
2888	25435765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25435765	sipa	ACK
2886	22318126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22318126	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2886	22435911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22435911	laanwj	ACK
2886	22733277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733277	sipa	ACK
2886	22733617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733617	gmaxwell	ACK. This does leak some timing data if bsize==0 or not, but I think this is inconsequential, Im only mentioning it in case others didnt realize it and might care.
2885	22300720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22300720	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2885	23230316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230316	sipa	ACK but needs rebase.
2885	23488734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488734	Diapolo	ping Wasnt this included in your paymentrequest-pull?
2885	23534800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23534800	gavinandresen	: yes, this was part of the paymentrequest pull. Closing.
2884	22327044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22327044	petertodd	+1 > "Old clients that receive non-canonically-encoded transactions or blocks deserialize them into CTransaction/CBlock structures in memory, and then re-serialize them before relaying them to peers." What do you mean by "old" here?
2884	22354879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22354879	gavinandresen	: for "block" messages, old means "previous versions of the reference implementation." For "tx" messages, old means "versions that have commit Simplify storage of orphan transactions". Rejecting non-canonically-encoded "tx" messages should have no ill effects-- well, beyond creating Yet Another Way to craft 0-confirmation transactions that are accepted by un-upgraded nodes and rejected by newer nodes. Ill make the CHECK_THROW for the unit tests message specific.
2884	22733448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733448	sipa	Strange that pull tester succeeds - IIRC there was a test that used an incorrectly-encoded vtx size in a block, to push it over the 1 MB limit?
2884	23220783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220783	jgarzik	ACK
2884	23230355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23230355	sipa	ACK. In a later version we probably want to make it a DoSable offence to use these non-canonical encodings, but right now that would cause network fork risk for pre-0.8.3 nodes.
2884	23231179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23231179	petertodd	ACK FWIW if anyone wants to see it in action, heres block 100 with the compact int for the length of the transaction list changed to non-canonical format: 0100000095194b8567fe2e8bbda931afd01a7acd399b9325cb54683e64129bcd00000000660802c98f18fd34fd16d61c63cf447568370124ac5f3be626c2e1c3c9f0052d19a76949ffff001d33f3c25dfd010001000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d014dffffffff0100f2052a01000000434104e70a02f5af48a1989bf630d92523c9d14c45c75f7d1b998e962bff6ff9995fc5bdb44f1793b37495d80324acba7c8f537caaf8432b8d47987313060cc82d8a93ac00000000
2884	23231197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23231197	petertodd	With the pull-tester I suspect what happened was it just expected the block to fail, so this patch just makes it fail for a different reason.
2884	23238187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23238187	gavinandresen	: Sipa is right, this should have made the blockchain tester fail at block b64: ``` // Check that a block which is (when properly encoded) <= MAX_BLOCK_SIZE is accepted // Even when it is encoded with varints that make its encoded size actually > MAX_BLOCK_SIZE // -> b39 (11) -> b42 (12) -> b43 (13) -> b53 (14) -> b55 (15) -> b57 (16) -> b60 (17) -> b64 (18) // ```
2884	23306364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23306364	gavinandresen	There is a bug in the blockchain tester code; running under the debugger, Im getting: ``` 02:47:47 10 BitcoindComparisonTool.<init>: Block "b63" completed processing ... I had a conditional breakpoint set to trip with messages > 900,000 bytes, and on b64 I get: (gdb) p nMessageSize $6 = 999999 ``` : Ill need help figuring out how to fix and then recompile the .jar.
2884	23461936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23461936	TheBlueMatt	My usual method is to import bitcoinj into eclipse and use the export menu from there. It would be easier if it worked in IntelliJ but I have yet to get IntelliJs jar export to work.
2884	23883126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23883126	TheBlueMatt	oh, Read the next comment, the signature size is non-deterministic, so try running it again and see if you get it over 1m (I believe youve got a 1/3 shot IIRC).
2884	23993267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23993267	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2884	25321366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25321366	sipa	This still needs some work to understand the pulltester output, I guess?
2884	25411020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25411020	gavinandresen	: I still think there is a bug in pull-tester. Im torn on whether or not that bug should be fixed before this change goes in, because accepting this pull would just mean removing that pull-tester test (since the purpose of this pull is for the network to reject the thing pull-tester is testing).
2883	22173924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22173924	Diapolo	You need to be more detailed with the commit-msg, as no core-dev will merge such pulls...
2883	22175123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22175123	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2883	22220486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22220486	gavinandresen	A better commit message would be: Use existing RPC_INVALID_PARAMETER constant
2883	22236249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22236249	codler	I changed commit msg now :)
2883	22238219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22238219	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2883	22239373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22239373	Diapolo	ACK
2882	22173900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22173900	Diapolo	ACK, if you change the commit-msg to ``fix typo in README.md`` :).
2882	22174423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22174423	codler	I changed now
2882	22174899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22174899	Diapolo	ACK
2882	22178327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22178327	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2881	22167435	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22167435	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2880	22161782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22161782	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2880	22715156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22715156	petertodd	ACK
2880	22733525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733525	sipa	ACK
2879	22096705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22096705	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2877	22087766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22087766	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2876	22061434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22061434	sipa	Small update: made -checkmempool default in regtest mode.
2876	22062048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22062048	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2876	22063706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22063706	gavinandresen	ACK; logic looks good, compiles and runs on OSX.
2876	22733772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733772	sipa	Rebased.
2876	22734086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734086	gmaxwell	ACK. I think we should pull this, but I also think pulltester should gain a reproduction of it. where are we keeping issues for the pulltester?
2876	22740841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22740841	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2875	22057923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22057923	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2875	22091519	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22091519	gavinandresen	NACK. First: Berkeley DB doesnt give any guarantees that removing a key/value pair will actually remove it from either the .dat file, the journal file(s), or the hard disk. I dont want to repeat the wallet encryption fiasco we went through, where private keys remained on disk unexpectedly. Second: I believe the tentative plan for a future wallet format is an append-only format, because append-only tends to be more reliable than read/write. Erase private key breaks the append-only property. And finally: we dont remove private keys because we dont want to make it any easier for users to lose bitcoins. If you REALLY want to remove private keys from your wallet, I think shutting down bitcoind and using a tool like pywallet is the right way to do it, because only the most tech-savvy users will do that.
2875	22116343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22116343	jgarzik	Agree w/ Gavin, NAK
2874	22056487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22056487	gmaxwell	Please dont describe fee policy changes as "fixing a bug". I dont think we should make this change. Further penalizing >0.01 BTC outputs seems unnecessary in light of the fact that very tiny outputs are not allowed, and really large dust paying transactions will not qualify as free.
2874	22056639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22056639	fcicq	or only apply this check for incoming (mode == GMF_RELAY) tx? I think for relaying, (1+nsize/1k) * nMinRelayTxFee should be required.
2874	22056644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22056644	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2874	22058770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22058770	gmaxwell	the size per KB _is_ required for relaying, except for transactions which are small enough and have high enough priority to qualify as free.
2874	22941033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22941033	luke-jr	This code and change are pretty hard to follow, but I think the end result here isnt especially unreasonable.
2874	23220794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220794	jgarzik	At a minimum this needs a lot more documentation, either in commit message or code comments or both. No ACK without that.
2874	23223030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23223030	fcicq	I no longer expect this to be merged. It may be still useful for pool operators as a new rule for tx relaying and should help reduce the mempool size, and not affecting most of legitimate normal tx that is smaller than 1k bytes. Thanks for reviewing.
2873	22013403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22013403	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2873	22733811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733811	sipa	This seems like huge code duplication. Perhaps a bool to dumpwallet to hide private keys?
2873	22746044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22746044	gavinandresen	NACK. It is easy to remove the private keys from dumpwallet output, e.g. ``` mkfifo /tmp/foo && (bitcoind dumpwallet /tmp/foo &) && cut -d -f2- /tmp/foo && rm /tmp/foo ``` Closing.
2872	22004217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22004217	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2872	22325930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22325930	Diapolo	Can you take a look?
2872	22439249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22439249	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2872	23147116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23147116	Diapolo	Updated to revert the removal of NULL pointer checks to comply with :).
2872	23148674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23148674	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2871	21988981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21988981	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2871	22006926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22006926	SergioDemianLerner	Seems ok to me.
2871	22009502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22009502	gavinandresen	mapOrphanTransactions[hash] cannot be null; it will be initialized to an empty (default constructor) CTransaction when referenced. That should be impossible, because addOrphan/EraseOrphan keeps mapOrphanTransactions and mapOrphanTransactionsByPrev in sync. But even if some bug caused it to happen, if that default CTransaction made it out of the orphan list it would be rejected by the memory pool. If it got stuck in the orphan list... no big deal, it will eventually be evicted.
2871	22097343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22097343	sipa	Havent tested, but looks good to me.
2868	21885917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21885917	jgarzik	prefers not to put this in wallet.cpp, closing (the ancestor pull req, miner separation, remains open and valid)
2868	21896491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21896491	sipa	Wow, I have influence! Just to be clear, I do agree with the underlying issue of separating the wallet from the validation core, but IMHO the right way to do so is either by turning the wallet registration functions into boost signals, or by providing a CValidationEventListener in main.h that gets implemented in wallet. Perhaps has an opinion about this?
2868	21916627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21916627	CodeShark	Heh, this sounds a little familiar. Indeed I do have an opinion about this! There is only one standard set of messages in bitcoin at present: the p2p protocol. The p2p protocol is the backbone of the network and crucial for the tasks of validation and relay - but it is far too low level for pretty much any other kind of application (including big backend apps like block chain databases as well as wallet apps). A far better architecture would be to have a validation service running on a device which then can have other applications subscribe to it for updates. It would then be simple to insert filters, queues, etc... in order to provide client apps high-level structures that make the client-side logic as simple as possible and can guarantee proper synchronization and push notifications. I believe it would be worthwhile to define some high level message types (and support serialization using protobuf, json, and perhaps other standards) and abstract some interfaces for pushing and subscribing to high level messages (i.e. block added to best chain, block removed from best chain, transaction in block with header and merkle path, etc). Ive been working on something along these lines using a library I wrote - however, it would be far more powerful if we could standardize a set of message structures and interfaces. From within the same process we could use something like signals (whether boost or otherwise, boost signals are quite resource-intensive but provide a lot of thread-safe features). But exactly how its implemented is not nearly as important to agree on as the types of messages and the interfaces we use. On Jul 31, 2013, at 2:18 PM, Pieter Wuille <notifications@github.com> wrote: > Wow, I have influence! > > Just to be clear, I do agree with the underlying issue of separating the wallet from the validation core, but IMHO the right way to do so is either by turning the wallet registration functions into boost signals, or by providing a CValidationEventListener in main.h that gets implemented in wallet. > > Perhaps has an opinion about this? > > > Reply to this email directly or view it on GitHub. >
2867	21888551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21888551	sipa	ACK ACK ACK
2866	21839607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21839607	petertodd	ACK
2866	21841958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21841958	Diapolo	ACK
2865	21725712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21725712	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2865	21824532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21824532	sipa	ACK
2865	21835357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21835357	gavinandresen	Does .arg take either %1 or %s ? You changed %1 to %s ...
2865	21841901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21841901	Diapolo	Damn, I updated this on my local machine, but didnt push to this branch, sorry. AFAIK it needs to be %1. Dont merge until I update the pull.
2865	21857452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21857452	Diapolo	Now its ``%1`` again, should be ready to merge.
2865	21929956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21929956	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2865	22090505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22090505	Diapolo	Verified the patch by running the pulltester-executable, can someone merge this so I can generate a new translations update?
2864	21704939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21704939	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2864	21723176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21723176	jgarzik	This adds a poor layer of security on top of an RPC layer that we already recommend to *not* be exposed to the public Internet. Even seemingly harmless RPC commands might stress the wallet and delay other RPCs commands, hold important locks, etc. If you want to do this, the best suggestion is to create a proxy on top of bitcoind, much like a pool server (which is nothing but an HTTP proxy).
2864	21738715	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21738715	dan-da	Thanks for the suggestion. If core devs dont want the patch, no problem. I am curious where this recommendation is to not expose RPC layer. I dont see it on the wiki jsonrpc pages, <a href="https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_calls_list">here</a> or <a href="https://en.bitcoin.it/wiki/API_reference_%28JSON-RPC%29">here</a>. Can you provide me a pointer? thanks.
2864	22685561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22685561	gavinandresen	Closing. I updated the <a href="https://en.bitcoin.it/wiki/API_reference_%28JSON-RPC%29">JSON-RPC wiki page</a> with a warning about exposing the RPC port.
2857	21485209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21485209	Diapolo	Seems it is not ^^... will take a look!
2857	21490316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21490316	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2856	21474594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21474594	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2856	21514322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21514322	Diapolo	Strange Im missing your comment... anyway, this now only removes windows.h.
2856	21516904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21516904	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2856	21694084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21694084	sipa	ACK
2855	21471999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21471999	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2855	21482011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21482011	Diapolo	This should fix problems some people with mingw-64 compilers have. <pre> In file included from alert.h:13:0, from alert.cpp:11: util.h:211:57: error: pid_t has not been declared void CreatePidFile(const boost::filesystem::path &path, pid_t pid); </pre> I know error and fix seem not to match, but as we dont ever user CreatePidFile() on Windows it seems cleaner to avoid compilation of that function as to define pid_t for Windows.
2855	21482051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21482051	sipa	ACK
2852	21467308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21467308	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2852	22733996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22733996	sipa	Given that the only work-related RPC output is already measured in difficulty, perhaps use the same unit? Another related and useful unit for transactions and blocks, is depth measured in "equivalent current blocks", namely the difference between chainwork of the tx/block under consideration and the chainwork of the tip, divided by the chainwork of the tip block.
2852	22743697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22743697	petertodd	I used the raw hex value as the units for chainwork so that alt-implementations could use it as a way of double-checking their calculations - right now if you write your own chainwork calculating implementation there isnt a convenient way of ensuring your results match the reference implementation binary form exactly. Having said that other than verbosity I dont mind creating a "chainwork" and "chainworkhex" or something if people feel it is important, similar to how we have "bits" and "difficulty" re: "equivalent current blocks" Sounds reasonable for a subsequent pull-req, especially after headers first is merged.
2852	22749754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22749754	luke-jr	The internal encoding of chainwork isnt relevant to implementations, just the relative measurement...
2852	22752789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22752789	petertodd	Youre not going to get consensus-level behavior unless you use the same arithmetic as Bitcoin, which uses bigints, so you have no choice but to export an integer; thats exactly what my implementation exports.
2852	22756225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22756225	luke-jr	Youre exporting an integer as a hexified String, rather than a JSON Number, which I think is what was suggesting.
2852	22757528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22757528	petertodd	Right, but the problem there is that JSON numbers are kinda-sorta double-precision floats - matching Javascript semantics - and support for bigints is pretty spotty in libraries. Also sipa was talking about making the number in "difficulty" units, with has a 2^32 factor, so youd always wind up with floating point numbers. I havent worked it out, but I wouldnt be surprised if double-precision floats arent precise enough for consensus purposes.
2852	22757755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22757755	luke-jr	Already some libraries have issues with bitcoinds output. I dont think trying to workaround bugs that might or might not exist in other software should be a concern...
2852	22757900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22757900	petertodd	Its not a bug, its just a limitation of JSON - bigints just arent standard JSON. Bitcoin internally uses a uint256, so Im not worried about exporting exactly that even if its in hex. (like uint256 digests...) Anyway, as I said above: "Anyone who tries to bikeshed either the name or the format the value is returned in will regret it - Im warning you." ...apparently Im not threatening looking enough. Maybe I need a leather jacket and a motorcycle?
2852	22758444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22758444	luke-jr	JSON doesnt place any precision limits on Numbers.
2852	22808353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22808353	sipa	Do you have an actual use case where the full-precision chainwork is useful?
2852	22822367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822367	petertodd	Testing alt-implementations. chainwork is nasty, because subtle arithmetic mistakes in calculating it that only affect low-order bits are easy to not notice if any rounding is done anywhere, yet still can cause an (unlikely) fork. In addition it lets us easily compare different bitcoin versions to make sure we ourselves dont introduce any subtle mistakes.
2852	22822485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822485	sipa	ACK
2852	23220809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220809	jgarzik	ACK
2851	21428006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21428006	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2851	21694102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21694102	sipa	ACK
2850	21408925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21408925	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2850	21604729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21604729	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2850	21605290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21605290	Diapolo	Can you take another look, Im now checking for progress.
2850	21606601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21606601	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2849	21402657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21402657	sipa	ACK if pulltester likes it.
2849	21406609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21406609	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2848	21399491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21399491	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2847	21397379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21397379	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2845	21386657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21386657	gmaxwell	Can you also make the short password delay into an unconditional delay on failure? Your current code timing-leaks the length, but I dont know if I care. You could avoid this by only comparing the input number of characters every single time, with a min() on the offset (take care to avoid a fence post error) on the actual password. Then compare the lengths.
2845	21387068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21387068	grayleonard	Woops, didnt mean to close it. And I was thinking along the same lines, but with something a little simpler. If the lengths dont match, you can just compare the actual password with itself (to get the timing right), but add 1 to nReturn also so it returns false.
2845	21387134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21387134	gmaxwell	The only reservation I have with that is that, depending on how you write it, it is code that the optimizer is very likely to optimize out. E.g. if it were if(len1==len2){} else {selfcompare} that will quite probably get optimized.
2845	21387464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21387464	grayleonard	I updated it to fix the length-leaking, seems like the simplest way to do it.
2845	21389160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389160	gmaxwell	The extra loop with the "return ++nResult == 0;" is ... a little perplexing. The % that sipa proposed (or the min) should actually result in simpler looking code. Just move the length check to the end, and use the % to make sure that both only access valid indexes. Care to give it a shot?
2845	21389330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389330	theuni	Theres no telling what compilers will do to this. If youre that concerned about timing attacks, why not just do something like this pseudocode? ``` const minwait = 50; //msec timeBefore = GetCurrentTime(); result = val1 == val2; sleep(minwait - (GetCurrentTime() - timeBefore)); return result; ```
2845	21389344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389344	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2845	21389421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389421	gmaxwell	Jeff argues that we should probably just drop basic auth entirely and require digest auth, which would solve this as a side effect.
2845	21389784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389784	gmaxwell	were deep in pedantry land, but expecting very high accuracy sleeps results in sadness. Its perfectly possible to leak data through a sleep like that.
2845	21389930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21389930	theuni	fair point on pedantry, but if youre on a system with <50msec sleep precision, id guess youd have bigger concerns. In this case, itd likely even spoil the very attack the evildoer is attempting.
2845	21390005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21390005	jgarzik	Also -1 on convoluted schemes that the compiler might try to micro-optimize, or might impact the authentication result. Heck, even unconditionally sleeping for a random interval would be better. Remove the if check on password size. But yes, approaching 1.0 it is reasonable just to require Digest auth.
2845	21394416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21394416	grayleonard	From what Ive read it seems like there are two ways to mitigate timing attacks - one can hold all responses with a constant delay, say 50ms. The other returns faster, Ive seen ~10ms in this instance from tests Ive run, with a constant-time comparison algorithm. Either one works. Im not sure how soon 1.0 is going to be available, but if we are treating this as a vulnerability instead of a bug its important we get it out as soon as possible, regardless of the technique we use.
2845	21421606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21421606	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2845	22734102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734102	sipa	Superceded by #2886
2842	21312830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21312830	petertodd	Why not copy the SSL instructions into a doc/ssl-setup.txt?
2842	21313163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21313163	luke-jr	Dunno, seems like a topic for a different pull (as it would no longer be just a fix). Devils advocate: Because SSL is unsupported-ish (because only localhost is really supported for RPC).
2842	21331436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21331436	Diapolo	ACK
2842	21340438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21340438	petertodd	Fair enough, ACK.
2840	21526573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21526573	sipa	Added a few more lock improvements.
2840	22735325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735325	sipa	Rebased.
2840	22810513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22810513	Diapolo	Does this make the code more stable or is it a performance-improving patch? That locking stuff isnt my main expertise ^^.
2840	22822345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22822345	sipa	It improves performance/throughput, by allowing more code to run without needing the cs_main lock, and conversely, holding that lock for a shorter time, so more other code can run in parallel. At this point the improvements may not be noticable, but if we ever want a decently parallellizable core, we cant avoid doing this everywhere its possible.
2840	26296967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26296967	sipa	Rebased. PS: the first commit may look large, but it really just changes some indentation. If needed, I can make a version that keeps the indentation identical for now.
2840	26306508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26306508	gavinandresen	Looks good to me except for an errant printf (reviewed using a graphical diff tool-- opendiff on the mac-- using its "compress whitespace" preference).
2840	26318652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26318652	sipa	Modified to not do indentation changes for now.
2840	26373128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26373128	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2837	21249103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21249103	jgarzik	It is disappointing that this moves away from the init.cpp section used specifically for command line parameters.
2837	21284631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21284631	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2837	21284943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21284943	gavinandresen	RE: moving away from init.cpp : Bitcoin-Qt and bitcoind startup are different, and I think it is cleaner to acknowledge that and have init.cpp be only the shared startup code. I had to make similar changes for the payment protocol work, where Bitcoin-Qt checks command-line arguments and sends a payment request to an already-running instance OR starts itself up in either -testnet or main net mode depending on the contents of the payment request. But bitcoind doesnt know nuthin about payment requests....
2837	21292243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292243	sipa	I would actually like having the payment protocol functionality be available via RPC - like sending a (potentially unsigned) payment request to bitcoind and asking it to give you a payment/signed transaction back. Theres no need for having that in a first release though. I havent tested this yet, but looks good and if pulltester is happy, its likely to be right. Ill try it soon.
2837	21293701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21293701	Diapolo	Updated to include a proper commit message and harmonize the used error messages.
2837	21302379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21302379	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2837	21331279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21331279	Diapolo	Fixed a missing ``.c_str()``, thanks
2837	21385019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21385019	gavinandresen	I broke pull-tester, Ill fix...
2837	21386101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21386101	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2837	21396665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21396665	Diapolo	Updated to include ``- use TestNet() call in splashscreen.cpp``.
2837	21400598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21400598	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2837	21857884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21857884	Diapolo	Can you take a look, perhaps you can then remove the similar commit in your paymentrequest pull. ping
2837	21931953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21931953	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2837	23210382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23210382	Diapolo	Closing as this was included in the payment request pull.
2836	21285997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21285997	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2836	21293992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21293992	Diapolo	ACK
2835	21231229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21231229	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2835	21231694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21231694	Diapolo	AFAIK -s is need because we have a static boos library, -d of course seems wrong. From boost-win32.yml: ``./bjam toolset=gcc target-os=windows threadapi=win32 threading=multi variant=release link=static --user-config=user-config.jam --without-mpi --without-python -sNO_BZIP2=1 -sNO_ZLIB=1 --layout=tagged --build-type=complete $MAKEOPTS stage``
2835	21237182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21237182	phelixbtc	>AFAIK -s is need because we have a static boos library, -d of course seems wrong. --build-type=minimal outputs only a single library version with the -s- oppressed - at the advantage of being a little faster. It seems the library is identical. The cost is less clarity without the -s- tag so I will close this pull request and create a new one with -s- b2.exe --build-type=minimal --with-chrono --with-filesystem --with-program_options --with-system --with-thread^ --layout=versioned^ -sNO_BZIP2=1^ -sNO_ZLIB=1^ variant=release^ toolset=gcc^ link=static^ threading=multi^ target-os=windows^ threadapi=win32^ cxxflags="%ADDITIONALCCFLAGS%"^ cflags="%ADDITIONALCCFLAGS%"^ stage
2832	21013616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21013616	sipa	It would seem that things work fine without boost/version.hpp in walletdb.cpp?
2832	21015241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21015241	luke-jr	Probably some other boost header (currently) includes it. Better to follow the docs and include the headers we want, though..
2832	21211448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21211448	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2832	21292071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292071	sipa	ACK
2830	21350404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21350404	jgarzik	ACK
2830	21647960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21647960	petertodd	Note: should be merged after sipas watch-only address stuff is merged, and modified to work with it.
2830	21694224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21694224	sipa	Related to that, is addredeemscript useful, if bitcoind has no logic to actually spend coins sent to anything but what is creatable through createmultisigaddress?
2830	21694235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21694235	sipa	ACK on the other changes.
2830	21696294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21696294	petertodd	Actually bitcoind can spend any P2SH-encoded scriptPubKey that it knows how to spend, so you can (currently) put a pay-to-pubkey or a pay-to-pubkey-hash in redeemScript and things will work fine. In any case I think the feature of adding arbitrary redeemScripts makes the most sense in the context of watch-only-wallets where the actual mechanism to spend the coins can be handled elsewhere.
2830	24370141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24370141	gmaxwell	Can you remove addredeemscript for now since it seems like the watch stuff is currently delayed?
2830	24371319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24371319	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2830	24371567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24371567	gmaxwell	ACK, changes look good and I tested all 0,1, and 2 byte scripts in decodescript and tried out validateaddress on some p2sh and non-p2sh addresses.
2829	21214833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21214833	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2829	21662583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21662583	simondlr	Do you plan on eventually implementing full BIP 32 support into Bitcoin-QT?
2829	21664080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21664080	sipa	Of course.
2829	21664672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21664672	simondlr	Awesome! Looking forward to it.
2829	22735127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735127	sipa	Opinions?
2829	22735696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735696	gmaxwell	ACK. On the basis that this has already been used to validate other implementations and has even turned up some bugs, I think it would be good to include this.
2829	22735887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735887	jgarzik	ACK
2828	20934982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20934982	sipa	Two comments: * Shared locks are not recursive, so if any of these wallet callbacks causes a call to main, which causes a new callback, you have a deadlock. I dont believe such cases occur, but its worth making a comment about it in the code. * There is still a potential deadlock when callbacks are combined with modifications to setpwalletRegistered. This is not a problem for now, as such modifications only happen at startup, but we need to think about this before fully-fledged multiwallet is added. In general, it will probably mean that RPC calls cannot gratuitously lock the wallet anymore - only those that need access to a wallet, and only the one the need. In particular, anything modifying the set of registered wallets will need a lock on setpwalletRegistered without locking any of the wallets in it. ACK though.
2828	21284075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21284075	gavinandresen	This pull seems to reliably cause the pull-tester bot to hang, I dont know why (maybe deadlock is being triggered by these changes, or maybe theres a bug in the pull-tester script).
2828	21287999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21287999	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2828	21351645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21351645	jgarzik	Agree, we cannot merge this and leave pull testing broken :/
2828	21362245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21362245	Diapolo	Perhaps another Boost bug related to an old version we use?
2828	21609156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21609156	CodeShark	Well, Im glad at least this pull request did something interesting :p
2828	23220889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220889	jgarzik	Closing... re-open if/when issues are fixed.
2827	21232413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21232413	laanwj	Id prefer factoring out this code to utility functions or an utility class, instead of just copying it.
2827	21232475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21232475	Diapolo	That IS a good idea, thanks.
2827	21244463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21244463	Diapolo	Can you take another look :)?
2827	21288231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21288231	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2827	21293973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21293973	laanwj	ACK on code changes, havent yet tested
2827	21723224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21723224	Diapolo	Updated commit-msg and also removed <QSettings> and <QDesktopWidget> include from bitcoingui.cpp.
2827	21933145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21933145	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2827	22090543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22090543	Diapolo	Did you test the patch yet?
2827	22091772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22091772	gavinandresen	ACK: tested on OSX.
2826	21288441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21288441	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2826	21292120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292120	sipa	ACK
2825	20931315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20931315	wtogami	ACK Reviewed patch, tested and confirmed in limited cherry-picks to 0.8.3. I did not test master.
2824	20907699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20907699	gmaxwell	Hm. Does pywallet not correctly handle the height records? If its adding a key to a wallet it should zero it out.
2824	20907757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20907757	sipa	I suppose it does not, but even then - there shouldnt ever be a need to rescan except when loading a wallet, so this should be done via the command-line (-reindex) instead of via RPC? Or is there a reason why an RPC is preferrable?
2824	21288660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21288660	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2824	22232835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22232835	K1773R	its only usefull if you forgot to run with -rescan so you dont have to stop + start again, anyone editing the wallet while bitcoind is running is stupid. id say this new RPC call would atrract alot of ppl exactly doing this, therefore its not a that good idea.
2824	22735308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735308	wtogami	NACK
2824	22745854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22745854	gavinandresen	NACK from me, too. Closing.
2823	20885663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20885663	gmaxwell	Misplaced.
2820	20727650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20727650	jonasschnelli	ACK
2820	20728979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20728979	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2820	20729329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20729329	gavinandresen	ACK
2818	20607374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20607374	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2818	21091327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091327	luke-jr	IMO, either the weight needs to be increased or it should wait until there are enough other keys that this makes a difference. At weight 1, I dont think its possible for gitian-downloader to ever act on it.
2818	21091775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091775	Michagogo	What weight would you suggest? I just didnt really know how much the community feels that my signature would be meaningful. (note that an updated PR would need to wait until my computer is back from repair, about a week or so) On Wednesday, July 17, 2013, Luke-Jr wrote: > IMO, either the weight needs to be increased or it should wait until there > are enough other keys that this makes a difference. At weight 1, I dont > think its possible for gitian-downloader to ever act on it. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2818#issuecomment-21091327> > . > -- Sent from Gmail Mobile
2818	21091942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091942	luke-jr	Im not sure. Just wanted to point that issue out.
2818	21092038	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21092038	Michagogo	That did occur to me when I submitted this PR, but I dont really know how much my signature is worth to you guys... If anyone has a suggestion, Id like to hear it (if you think I should be in there at all). On Wednesday, July 17, 2013, Luke-Jr wrote: > Im not sure. Just wanted to point that issue out. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2818#issuecomment-21091942> > . > -- Sent from Gmail Mobile
2818	24857222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24857222	laanwj	ACK with adding Michagogo, I have no idea what weight to assign either though.
2818	24857306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24857306	gavinandresen	Michagogo should have weight eleven. Because it is my favorite number.
2818	24870334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24870334	Michagogo	Ive updated with Gavins suggestion, but it looks like its not showing up here? The commit is at
2818	24877638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24877638	Michagogo	Recreated as #3023 because of the issue with the commit not appearing on this PR.
2817	20573210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20573210	TheBlueMatt	Same thing, ACK
2817	20609056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20609056	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2816	20570907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570907	luke-jr	Verified key AEC1884398647C47413C1C3FB1179EB7347DC10D with freenode NickServ user "Warren" (hostmask fedora/wombat/warren) registered 2002-12-13.
2816	20571000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20571000	wtogami	If folks want to call to verify me, ping me on IRC first, then get my phone number from <obvious public lookup service>. I am willing to provide GPG signed and encrypted government issued photo ID to other trusted Bitcoin devs upon request. My old GPG key. My new GPG key.
2816	20603163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20603163	mikehearn	Looks good to me. I remember Warren from the Fedora-as-a-repo days.
2816	20605970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20605970	petertodd	ACK Warrens convinced me of his identity nearly to the point where Id go ahead and sign his key.
2816	20610748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20610748	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2814	21288669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21288669	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2814	23533982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23533982	luke-jr	bitcoin-qt.ljr20130721: src/main.h:1204: double CMemPoolTx::FeesPerKB() const: Assertion `nSumTxSize >= 0 failed.
2814	23534691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23534691	petertodd	FWIW sipa has told me that his headers first patch changes a lot of the code that this mempool patch touches, so Im going to wait until hes done that before working on this further.
2814	26689104	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26689104	gavinandresen	Closing; please open a new pull request after headers-first has been merged. Im trying to clean up the open pull requests to "things ready for testing and merging right now."
2812	20428527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20428527	luke-jr	If roundabout methods are good enough for getting the full data for a block (all the transactions), why not this too? At the very least, it would seem to me to make better sense as an interface, to use getblockhash with negative indexes (eg, -1 = last block).
2812	20428647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20428647	jgarzik	That is actually another todo item. Getting an entire, raw block is difficult, potentially impossible without -txindex. This is frustrating, because the data is certainly available to bitcoind. Ive been planning a getrawblock <hash> RPC pull request for this reason.
2812	20429787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20429787	luke-jr	Well, getting the raw data is already possible with getblock. But getting the fully detailed data for all the transactions was removed back after getblock got added...
2812	20429971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20429971	jgarzik	...due to the txindex issue previously mentioned. But it need not be that way.
2812	20612713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20612713	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2812	20717431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20717431	gavinandresen	ACK. Compiled and run on the Mac, tested with half-downloaded testnet chain and with a new, zero-connections, zero-blocks bitcoind.
2809	20314295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20314295	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2809	20329924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20329924	laanwj	Dont forget to update doc/assets-attribution
2809	20333857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20333857	wlch	In response to earlier comment, the last bar in the connection icon has been tweaked to make it appear less dark against the gray status bar.
2809	20472237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20472237	wtogami	Why closed? I like it.
2809	20483127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20483127	wlch	Closed just until Ive had the time to make a few more modifications; Ill re-open once Ive done.
2808	20315480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20315480	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2808	20383652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20383652	sipa	Funny, 3 pull requests which fix the same issue open at the same time (#2804 does this also).
2808	22435996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22435996	laanwj	None of the three ever got merged, though :package: Shall we merge this one or close it in favor of autotools when it becomes mergeable? (as I remember autotools was about ready to merge, only needs a final squash, OKs and maybe support from pulltester)
2808	22438713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22438713	Diapolo	Do we still maintain bitcoin-qt.pro after that autotools stuff got merged? Im a bit sceptical about it, because I never worked with it and I feel comfortable with our .pro file ^^.
2808	23150806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23150806	laanwj	Yes, well keep the bitcoin-qt.pro, at least as long as needed (the automake plugin for qt creator isnt up to level yet with .pro, for example it doesnt show a nice tree anymore). Well have to maintain it ourselves, though, we cannot rely on anyone else keeping it up to date as others will build with automake.
2808	23220902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220902	jgarzik	ACK
2808	26050410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26050410	Diapolo	Obsolete because of Autotools?
2808	26054744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26054744	laanwj	AFAIK autotools has fixed this, so it can be closed
2807	20288194	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20288194	sipa	Please do translation updates via transifex (https://www.transifex.com/projects/p/bitcoin/). We pull changed translations from there before release.
2807	20316526	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20316526	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2807	20321315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20321315	speirs	Ok, I understand very well.
2805	20533093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20533093	theuni	ping. Any comments?
2805	20570245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570245	sipa	Changes look good to me, except that I do not want to maintain two build systems in parallel. If we switch to autotools, we switch, and the existing makefiles go away. Gitian determinism can be fixed later (though just builds should be verified to work). Unfortunately; I cant test myself now (Im not at home). About -Qt, youll want an ACK from I have no opinion about recursive makefiles or not.
2805	21093468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21093468	luke-jr	I dont see any code to look for bdb headers, much less figure out whether theyre in the standard /usr/include/db4.8 path or somewhere else common...
2805	21093588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21093588	theuni	Hmm, youre correct on bdb headers, Ill add the check. As for uncommon paths, itll be up to the user to add it to cppflags.
2805	21162280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21162280	theuni	Ive pushed the obvious fixes to your comments above. Thanks for the review. These will of course be squashed when ready. I didnt add the --with-frontends because with only 2 (tests would be separate), I think that is quite confusing. I hope youll agree and that can be addressed if/when a new frontend is added. Waiting on replies to my comments on the rest.
2805	21162626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21162626	luke-jr	Addressed later means builders need to change their configure lines based on the version they are building, even if both versions support the same features. Better to have something extensible from the start IMO.
2805	21162850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21162850	theuni	Fair enough. But with 2 frontends, and 1 required, theres no way to avoid an awkward syntax. Compare: Disable qt: --with-frontends=bitcoind Some future (non-auto-enabled) thing: --with-frontends=bitcoind,bitcoin-qt,bitcoin-foo vs. Disable qt: --without-qt Some future (non-auto-enabled) thing: --with-bitcoin-foo Imo, with-frontends is not extensible, its just a complicated syntax for saying enable/disable that forces far more parsing.
2805	21163212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163212	luke-jr	Disable qt: --without-frontends=bitcoin-qt Some future (non-auto-enabled) thing: --with-frontends=bitcoin-qt
2805	21163477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163477	theuni	--without-frontends sets the withval to no. afaik --without-frontends=foo has no meaning, or at best would not be portable. Is there some magic Im not aware of for determining that a withval was also negated? Regardless of that, even if it is valid somehow, Ive never seen that syntax, and a quick google search shows no results either. So I cant imagine any user stumbling upon it...
2805	21163603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163603	luke-jr	Hmm, Ive seen this kind of thing before with KVM/qemu. They do "all targets" by default (and --target-list overrides entirely), nor use autoconf. How about just building bitcoind by default and just --with-frontends=bitcoin-qt?
2805	21163810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21163810	theuni	So then you still have to add it for each one you want to build, but youve disabled the default for what (arguably) most builders will want. I still dont see how its a step up in any way from --with-qt (or --with-bitcoin-qt) or --without-qt. If were talking >5 or so front-ends in the future, sure. But presumably at that point theyd have to be split into separate projects by then anyway. This whole discussion smells of an over-engineered bikeshed to me ;)
2805	21164453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164453	luke-jr	--with-qt implies its the same client being built with or without Qt, which isnt exactly the case here. You may have a point with regard to prioritizing splitting up the repositories before too many implementations grow on it.
2805	21164493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164493	theuni	Compromise at --with-qt-frontend ?
2805	21164657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164657	theuni	or even --enable-qt-frontend, since qt-frontend would be a feature in this case rather than a library for inclusion.
2805	21164702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164702	luke-jr	Would it be hard to leave it out entirely so the builder just does: make bitcoin-qt make bitcoind make all ?
2805	21164910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164910	theuni	Sure, those already work. Theyre awkward with the recursive makefiles, which is one of the reasons I was against. You have to be in the correct dir for them to work: make (makes all) cd src; make bitcoind cd src/qt; make bitcoin-qt But some phony targets would be no-brainers to add, then theyd work anywhere. However you still need to be able to check for things. If you didnt, you could try to make bitcoind, only to find qrcode missing, and we wouldnt know if that was on purpose or an error. Then youve just negated the purpose of the buildsystem :) So the options and checks in configure need to stay. As implemented, theyre what any package maintainer would expect to see.
2805	21164991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21164991	luke-jr	If qrencode is missing, it should be a warning (and disable itself), not an error, unless --with-qrencode is specified ;)
2805	21165320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21165320	theuni	It is, but qrencode is never checked unless qt is enabled. Nor should it be. This discussion has gone way off track, and this is the kind of thing I was afraid of. This thing will never be merged if the points of contention are cosmetic. Im happy to change those to whatever makes you guys happy and argue them post-merge.
2805	21166438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21166438	luke-jr	I dont think anyone considers this an obstacle to merging. I believe that is just waiting on at this point.
2805	21365418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21365418	laanwj	I preferred a non-recursive makefile as well, but I dont want to bikeshed about this. ACK after squash
2805	21498157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21498157	jgarzik	Looks really, really good. The only issue I found during review: bitcoin-config.h should normally be the -very- first include, because it may need to change the behavior of certain includes that follow. This may or may not be needed with bitcoin, but it is general practice when coding autotools code. Also, make sure bitcoin-config.h includes the standard header #ifndef FOO_H ... guard at the top and bottom. Google claims AH_TOP and AH_BOTTOM may be used for this. ACK once these issues are resolved. Pull tester want any changes for this?
2805	21519185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21519185	theuni	good suggestion on bitcoin-configh.h, thanks. Done. As for the header order, Ive changed it as requested, though I would disagree and say that if (in-project) include order matters, something else is broken somewhere. But thats way out of scope here :)
2805	21519668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21519668	theuni	as for BitcoinPullTester, Im not sure. It seems to have a hard-coded build process. If thats the case, it should change to: ``` ./autogen.sh && ./configure && make check ```
2805	21533832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21533832	gavinandresen	RE: the pull tester: The pull tester build/test script lives at: A patch that checks for configure.ac (or whatever) and Does the Right Thing in the right places would be nifty.
2805	21594611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21594611	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2805	22825319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22825319	wtogami	What needs to be done to move this forward?
2805	22831012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22831012	sipa	I believe all that is left is rebasing, squashing, removing the old makefiles, and updating some documentation? Fixing determinism can be done after merge, IMHO, but the build should work on all supported environments. Fixing pulltester can only be done after merging as well.
2805	22902506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22902506	theuni	I have a bunch of work in a local branch that needs to be cleaned up and pushed here. Ill have this merge-ready without fail by this time next week (my schedule is back to normal then).
2805	23310487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310487	theuni	Closing in favor of a new (final) PR.
2805	23310937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23310937	theuni	Edit: Whoops, fixed link. Continued at
2804	20230949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20230949	sipa	Tested that an (Ubuntu) build of the resulting tars content works, and results in a meaningful version being reported.
2804	20232809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232809	johndillon	Will the resulting tarballs be generated deterministically by the gitian build process as well so we can get signatures that the tarball matches the git tag?
2804	20233639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233639	sipa	The tar file is generated by git, and theres no source of randomness (the owner is set to root, the timestamps are equal to that of the last commit, and files are sorted alphabetically) as far as I can see - though this can obviously change in newer git versions. So it could be done inside gitian, I suppose, as that guarantees a consistent version of git to generate it.
2804	20234132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20234132	johndillon	Provided that is true Ill ACK this patch. In some ways making it easier for distribution managers to distribute Bitcoin anything bothers me in that they represent a very real risk of compromise with very high rewards, but if they are going to do so this is a reasonable thing to provide.
2804	20246227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20246227	sipa	Ok, Ive moved the construction of the tar file inside gitian, so hopefully it is deterministic now. A few notes: * Currently, the gitian build script doesnt know the "name" of the version being built, so the tarball uses a subdir bitcoin/ rather than bitcoin-$VERSION/; I dont know how much that is uncommon/unexpected. * Ive put it inside the Windows build, as I didnt want to create a full separate gitian build for just the source, and the Linux build gets run twice (32-bit, 64-bit) so it would be double work and the result would perhaps depend on the order in which you run the builds.
2804	20246542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20246542	robbak	Thanks for taking this on. It would be best for a number of reasons if the sourceforge download was identical to the github generated file, at least at the time of release. We can then use github as a backup to sourceforge, or vice versa. If the files are different, then we have to choose between the two. Sourceforge is faster and way more reliable, with their endless array of mirrors. Mind you, I am torn on this one - not having the github hash in the directory makes things a lot simpler where I am concerned - although most of that complexity is managed by someone else. On 30 June 2013 22:15, Pieter Wuille <notifications@github.com> wrote: > Ok, Ive moved the construction of the tar file inside gitian, so > hopefully it is deterministic now. > > A few notes: > > - Currently, the gitian build script doesnt know the "name" of the > version being built, so the tarball uses a subdir bitcoin/ rather than > bitcoin-$VERSION/; I dont know how much that is uncommon/unexpected. > - Ive put it inside the Windows build, as I didnt want to create a > full separate gitian build for just the source, and the Linux build gets > run twice (32-bit, 64-bit) so it would be double work and the result would > perhaps depend on the order in which you run the builds. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2804#issuecomment-20246227> > . >
2804	20246651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20246651	sipa	With the current pullreq, there is no way that the hash will match what github builds. They have the tag name in the directory, and their compression seems worse (even for .tar.gz). However, you do get signed hashes of the tarball from every gitian builder.
2804	20247302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20247302	luke-jr	Currently, even our binary tarballs and ZIPs are outside the signature mechanism, so I dont know how important doing a source tarball deterministically is. The end-user can always compare with the signed git tag, after all. In any case, I think deterministically having gitian generate the same tar.gz as github is possible anyway.
2804	20249229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20249229	sipa	But the released .zip and .tar.gz files have hashes signed by gitian. True, the entire source tree is signed as well, but being able to just compare the hash on a single .tar.xz is certainly easier.
2804	20250732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20250732	sipa	Updated again. The created tarballs should now be identical to githubs at the tar level. Im not able to produce a binary identically .gz file, however.
2804	20250837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20250837	sipa	Got it, added -cn to gzip, and now they match the github .tar.gz files.
2804	20363222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20363222	theuni	Note that handles bootstrapping and tarball generation, which I believe should make this PR unnecessary. Instead, gitian would have a separate descriptor for source generation (running make dist) which is then fed into the other builds.
2804	20383697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20383697	sipa	Closing in favor of #2805 or its successor, as the plan seems to be to generate a source tarball through make dist running in gitian.
2803	20230011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20230011	gavinandresen	ACK
2802	20191275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20191275	mikehearn	Im sure youll hate this idea even more, but why not expose searchrawtransactions via P2P and advertise it in a service bit? "fast import of a private key" is a pretty common feature request for SPV wallets. I dont think its particularly useful myself, but apparently other people do and they go and use blockchain.info currently.
2802	20192016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20192016	sipa	Weve had this discussion. #2168
2802	20210653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20210653	petertodd	There needs to be some way to find out how many entries are matched by a given address to allow blockexplorer appss to skip to the most recent transactions and display them first if requested. Failing that, at least have Python-style index ranges to allow you to start from the last entry. Yes, address reuse sucks etc. etc. but its a feature blockchain.info has and people will want it. I like the search by PUSHDATA; nice to be able to search for 13MH4zmU4UT4Ct6BhoRFGjigC8gN9a9FNn and see all my multisig addresses. It may be worthwhile to also add scriptSigs to the database as well so that spent multisig P2SHs can be identified. EDIT: interesting, looks like we have a ExtractDestination() or similar failure with bare OP_CHECKMULTISIG...
2802	20210877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20210877	sipa	Thanks for catching those two comments. There is a count and a skip argument, so you can paginate results (the database is queried each time, but the relevant transactions are only read from disk when actually requested).
2802	20210973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20210973	petertodd	I know you can paginate; Im saying that you need to be able to paginate in reverse direction. (my understanding is the results are in order of confirmations right?)
2802	20211322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211322	sipa	They are in increasing position on disk, which for now corresponds to number of confirmations (except for transactions in sidechains - yes, those are returned too). I could just reverse the order, I guess. One problem for the future is that when well have headers-first sync and parallel block downloading, block order on disk wont be necessarily consistent anymore with chain order. A solution is of course fetching all blocks, and sorting them by confirmations before pagination, but thats a very significant overhead. Another solution is storing the height of each entry in the index...
2802	20211468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211468	petertodd	re: sidechains, interesting! That should be documented... Gah, that does add a decent amount of complexity, although users are going to see it as important that they can see their latest satoshidice crap. :( I dont have a great solution here, although I would lean towards storing height if thats what it takes.
2802	20211593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211593	sipa	I dont mind the complexity of adding that (though it probably adds several 100 MiB right now already), but Im really against using an address index as a way to *track* new payments (which is what this basically boils down to, right?) - you should just have a wallet that watches the chain for that...
2802	20211714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211714	petertodd	Well, maybe this index is actually slightly premature, and what we need more immediately is a way to search just the UTXO set?
2802	20211770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211770	petertodd	Or, think in terms of searchrawtransactions should have UTXO-only and full-chain modes?
2802	20211821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20211821	sipa	What I want it for is an easy local blockexplorer. And the nice thing about the block tree (and all its indexes) is that theyre append only, which is easy implementation-wise. I agree an address index to the UTXO is useful too, and probably less controversial. Its not implemented however :)
2802	20212066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20212066	sipa	Also, searching the UTXO set by address would have a very different interface anyway, as its a set of transaction outputs, not a set of transactions. It wouldnt make sense in the same RPC command, IMHO.
2802	20213052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20213052	petertodd	Good point. Well, seems to me that for a blockexplorer simply being able to iterate forward and reverse should be enough for the UI, and at worse you can add the height index later when the order guarantee breaks. In that case: ``` searchrawtransactions <address> [skip=0] [count=100] [verbose=1] Return count transactions with <address> present in their scriptSig, skipping skip at the beginning. The ordering is oldest transaction first; if skip is negative the order returned is newest transaction first and skip+1 transactions are skipped. If verbose=0 only txids are returned rather than the full transactions. ```
2802	20215463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20215463	luke-jr	How about using a 64-bit hash of the full script instead?
2802	20215589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20215589	sipa	Use the source, Luke!
2802	20226989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20226989	sipa	More seriously, every index entry adds around 10 bytes, and given the current amount of address reuse, those constitute the majority of the database. Ive considered adding the entire script too, but that would mean a 50% increase (or more) because of that reason. Plus, if you know the full script, just pick the largest data push in it, and search for that.
2802	20228344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20228344	sipa	There is an alternative implementation possible, where we store (height, txoffset) for each index entry instead of (filenum, blockoffset, txoffset) - Thats smaller too, and allows consistent ordering. The downside is that it cant support side-chain matches, as heights are not unique.
2802	20232409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232409	mikehearn	Yes, I know we had the discussion before. Once again, Ill remind us all that we dont have any real power in this. If people cant get the features they need in a decentralised way theyll create a centralised way instead, hence, blockchain.info API. The idea that people will say "oh theres no P2P command to read a blockchain index, guess I wont write that app after all" doesnt seem right to me.
2802	20232937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232937	luke-jr	I meant the 64-bit hash *instead* of the current 64-bit key. Any address can be converted to a script and hashed just fine.
2802	20232958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232958	johndillon	If you cant offer a feature in a decentralized way with reasonably low resource consumption you should be happy that centralized services pop up and offer it instead. If you want to be useful design an API that allows you to pay via micro-transactions those resources you are using by querying a node that has gone to the expense of using code to maintain a blockchain index. It would be easy to add this as a service bit and use preferential peering to make it possible for nodes to find peers supporting that API. Such a system would still be decentralized and resource consumption would be paid for in a fair and equitable way. You do after have a brand new micro-transactions system...
2802	20233027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233027	sipa	That doesnt allow you to query pay-to-pubkeys given the corresponding address.
2802	20233092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233092	sipa	Ill agree to have an address index exposed to the P2P network if it can be done in an authenticated way, like Alan Reiners proposal for exposing an address-indexed committed merkle tree, and even then only for the UTXO set, and not the entire history. Im completely opposed to providing any service on the P2P network that requires the entire history being available, except bootstrapping a new full node.
2802	20233111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233111	johndillon	My preference would be to support the full (filenum, blockoffset, txoffset) set myself. Whatever the additional space used is it doesnt seem like a big deal once youve decided to go to the effort of creating the index in the first place. Hard-drive space is cheap. Incidentally, it does speak to how it would be useful to be able to iterate over every block stored, *including* orphans, and be able to deliberately add orphans to your database even after the fact. Heh, timestamp your orphan blocks and it would even be reasonable to maintain a set of every orphan ever created after the fact *while* allowing users to submit new blocks to this database even far into the future. (the timestamp is the anti-spam measure)
2802	20233141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233141	luke-jr	Neither does the specialized form youre suggesting...?
2802	20233169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233169	johndillon	It does because every PUSHDATA > 20 bytes is indexed by first computing Hash160(data). Even individual multisigs in a bare OP_CHECKMULTISIG can be searched for as pointed out.
2802	20233312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233312	petertodd	Ill second thoughts on the full (filenum, blockoffset, txoffset) index. Clever idea re: an orphan database... Itd be useful to have an index of all children for a given block too, but that can be a different pull-req; by that point well have a -all-blockchain-indexes flag...
2802	20233406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233406	luke-jr	Aha, missed that part.
2802	20233493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20233493	sipa	To have a consistent ordering, wed need (filenum, blockoffset, txoffset, height) even.
2802	20500374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20500374	imton	This is awesome :+1: please, merge it
2802	20928364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20928364	sipa	Rebased, and added a stable ordering (height-based) and negative offsets, to simplify backward pagination.
2802	20961418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20961418	imton	I agree, verbose is not working.
2802	21288888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21288888	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2802	21293216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21293216	sipa	Rebased and fixed the bugs reported by
2802	21302646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21302646	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2802	21643695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21643695	sipa	Feel free to test the pageability now.
2802	21647791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21647791	petertodd	Will do after my litecoin audits done.
2802	21841017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21841017	petertodd	searchrawtransactions 1111111111111111111114oLvT2 doesnt work - looks like the issue is the first few lines in FindTransactionsByDestination() because the keyid is 0, which is correct in that case.
2802	21841317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21841317	petertodd	Im having good luck with the code otherwise - matches results on blockchain.info, and non-standard oddities like searching for OP_RETURN data work fine. Also results returned appear to all be in correct order.
2802	21842344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21842344	petertodd	Getting some weird results with mwy5FX7MVgDutKYbXBxQG5q7EL6pmhHT58=Hash160() on testnet, and the equivalent on mainnet. Im seeing testnet txids a1f6a4ffcfd7bb4775790932aff1f82ac6a9b3b3e76c8faf8b11328e948afcca and 75f7d5e99912875e88d667afb48021b0b74916539c518618a8db4966661509df returned in the results - the former has a standard scriptPubKey, and a nonstandard scriptSig of "1", or hex "51". (IE push the number 1 to the stack) The latter has a totally empty scriptPubkey. Opcode 51 isnt within the range of opcodes 0 to PUSHDATA4, so BuildAddrIndex should have gone to the !fHaveData branch, but that returns Hash160(script), which is definitely not empty. A search for a script of just opcode 52, Hash160(\x52) doesnt show this problem, (returns empty) and searching for scripts without pushdatas like Hash160(\x61) (op_nop) also works as expected. Oddly though Hash160(\x51\x51), two pushes of the constant 1 to the stack, doesnt work and returns nothing even though there is a script exactly equal to that. Ill be honest, Im a bit mystified, although I havent delved into a debugger yet.
2802	21843182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21843182	imton	I just wanted to thank all of you for this implementation. Specially sipa who hates it and he did wrote it :) Here you can see my work in progress from my Rails App, I do all the parsing and get the balances. Thank you all. Ton
2802	22545830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22545830	gavinandresen	ACK from me. I think we should pull; edge-case bugs with weird, non-standard transactions I dont care about.
2802	22546569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22546569	gmaxwell	Only reason I see to delay the pull is that any fixes to address misindexing pointed out above may require a complete reindex.
2802	22551854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22551854	petertodd	I disagree given the reason why these txs arent working isnt understood yet - could be a symptom of a subtle bug.
2802	23220926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220926	jgarzik	ACK
2802	26709471	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26709471	63	Would we be able to see this merged? Theres no outstanding issues in it (Ive run it for literally months now), and thered be considerable benefit in having this in the master.
2802	26709584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26709584	sipa	Seems there is a not-understood problem at least (as reported by and I dont plan to work on this any time soon.
2802	26709893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26709893	sipa	In any case, I want to have watch-only wallet support before this, as it is a much more scalable solution for many problems that you would use an address-based index for. Im closing this for now.
2802	26712372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26712372	63	This did however allow for some quite handy local block explorers. Between Abe and BlockExplorers respective database messes, youre looking 100+ GB of external databases and literally weeks of CPU time. Those not being an option, Im back forced to query Blockchain.info and Blockexplorer for my data; which is slow and somewhat demonstrates the links between the various addresses to a third party. It also means that Im reliant on two extremely unstable and latent services for something which -addrindex would have allowed locally. I realise that I can still just continue on using -addrindex as my own patch, but it would be of benefit to others to have something like it available in the main builds for developers who arent aware it exists.
2802	26712590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26712590	sipa	Yes, I understand - that was mostly the reason for writing it. If the choice is between people using centralized indexing services and being able to run their own, I certainly would encourage the latter. But on the other hand, if the choice is between people building infrastructure that relies on such indexes being available for wallet services (preventing pruning later on), I certainly would encourage watch-only wallets. In any case, Im just closing it to clean up the pull request list. Ill probably get back to it at some point (or someone else may).
2802	26713080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26713080	laanwj	if you care a lot about this, why not pick it up yourself and try to resolve the remaining issue and submit a pull?
2801	20245108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20245108	laanwj	ACK
2801	20334846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20334846	mikehearn	Looks good
2799	20074874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20074874	jgarzik	This has been discussed in the past. The conclusion was: too high volume for this. Youll be constantly executing new processes. Better solutions include things such as behind a trusted node. This is essentially "drinking from the firehose."
2799	20081284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20081284	sipa	The ZeroMQ patch would also make things like this possibe
2799	20093901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20093901	bitkevin	There is no performance problems, bitcoin avg receive transaction number is less than 7 per second, top is less than 100 per second. Script can easy hold this. Enabling this option who must understand its potential performance problems. Its simpler than 0mq and easy to use.
2799	20094641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20094641	gmaxwell	A trivial fork-bomb attack for anyone who hypothesizes a node is using this feature.
2799	20094766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20094766	jgarzik	Nod. Unlike blocks it is relatively easy to trigger via remote. -walletnotify is IMO borderline, even, but much harder to attack absent additional knowledge of the victim (what keys might be in wallet). -memtxnotify makes a big, easy attack surface.
2798	20067292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20067292	TheBlueMatt	ACK
2798	20573047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20573047	Michagogo	Closing this and recreating on a branch, rather than master.
2798	20573480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20573480	Michagogo	Recreated as
2797	20012854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20012854	sipa	Validateaddress already provides this.
2797	20012978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20012978	CodeShark	oh, doh! youre right.
2796	20570351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570351	TheBlueMatt	Huh? The removes the tests that are deterministic and leaves only the ones that cause spurious errors on pull-tester every once in a while.
2796	20571985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20571985	gmaxwell	No it doesnt. I promise.
2796	20572089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20572089	TheBlueMatt	Ahhh, yes...can you add (fixes #2714) to the commit message so it gets closed on merge?
2796	20573559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20573559	TheBlueMatt	ACK
2795	20618114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20618114	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2794	19965237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19965237	sipa	Duplicate of #2702
2791	19933264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19933264	sipa	Tested by running a -reindex on mainnet.
2791	20038134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20038134	Mazo	What kind of effect does this have on the blockchain size?
2791	20041961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20041961	jgarzik	None. The blockchain continues to store every single transaction, from 2009 through eternity.
2791	20512612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20512612	mikehearn	It looks good to me. Are there any unit tests for blocks and UTXO set changes? If so itd be good to add a test for this.
2791	20570406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570406	TheBlueMatt	/me votes new tests be added to
2791	20570436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570436	sipa	How would you test it? There is no observable difference. You can try to create OP_RETURN outputs and try to spend them, and see that fails, but thats true before and after this PR (which doesnt mean its a useless test).
2791	20570479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20570479	TheBlueMatt	Well, yes, testing this properly probably cant be done out-of-process (maybe over rpc, though), but adding some OP_RETURN scripts to the block test-set (and some that look semi-unspendable, eg OP_RETURN in an IF) would be really nice.
2791	20614082	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20614082	petertodd	I added tests for attempting to spend OP_RETURNS, including with IFs and similar, to the unit tests actually. I agree there should be tests to ensure they dont end up in the UTXO set though.
2791	20711011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20711011	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2791	20711109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20711109	sipa	I agree we need tests to verify that such unspendable outputs dont end up in the UTXO set, but I disagree it should be part of pulltester. This does not affect network interaction, but is a client-side optimization.
2791	20732918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20732918	TheBlueMatt	The point of adding it to pull-tester is that if it is done wrong, it is network interaction. Pieter Wuille <notifications@github.com> wrote: >@petertodd I agree we need tests to verify that such >unspendable outputs dont end up in the UTXO set, but I disagree it >should be part of pulltester. This does not affect network interaction, >but is a client-side optimization. > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/2791#issuecomment-20711109
2791	20774728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20774728	sipa	Just to be clear: Im all for adding tests to pulltester intended to trigger edge cases related to handling of provably-unspendable outputs. Im just not in favor of making pulltester use more than the P2P interface for testing (i.e., making it a whitebox rather than blackbox test) - tests for checking that unspendable outputs do not end up in the UTXO set are for unit tests, not for network interaction testing.
2791	20794259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20794259	petertodd	Over the network how would you know if a peer wasnt doing OP_RETURN pruning properly anyway if their script implementation was correct?
2791	20935344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20935344	sipa	Thats my point - anyone in the network only cares whether your script/verification implementation is correct. Only you care about whether its not using more storage than necessary. I prefer the block-acceptance tests to remain implementation-independent, so it can remain as generic as possible, and be used to find bugs that could lead to non-convergence - not only for bitcoind/bitcoin-qt. If another implementation chooses not to implement pruning, thats their choice. Sure, it would change the economics of the system as a whole, but its not a network rule violation to do so. Of course, if a some form of committed-UTXO-set-in-coinbase is ever added, the actual UTXO set becomes observable to the network rules, and this changes of course. We need unit tests for verifying that provably-unspendable outputs do not end up in the UTXO set though.
2791	21255851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21255851	jgarzik	ACK
2791	21256241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21256241	gmaxwell	So this will make the gettxoutsetinfo on existing nodes diverge until everyone does a -reindex. Likewise, gettxout will return different results. Is this a problem? One possibility would be to write a small piece of code that checks at startup to see if a particular OP_RETURN output is in the UTXO set, and if it is, traverses the set to remove all of them. At a minimum there should likely be a comment stuck someplace in the code to remind us if we ever make the utxo set normative that we need traverse it and prune these transactions first.
2791	21257372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21257372	petertodd	sounds like a good idea to me. The canary txout should be the first op_return in the chain of course.
2791	21257403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21257403	petertodd	Oh, and dont forget test net...
2791	21292138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292138	sipa	How about only enabling this when a "prune_op_return" flag is set in the database, which can only be set/changed at initial creation/reindex, and outputting this flag as part of gettxoutsetinfo?
2791	21295037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21295037	jgarzik	ACK. Definitely output the flag via gettxsetinfo.
2791	21340353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21340353	petertodd	A flag sounds like less work, and few people would be affected, so go ahead and do it that way. The important thing is to give users an understanding of why two different UTXO hashes dont match. Maybe add a UTXO version number, and just increment it every time we change something? IMO its fine to have a meta version -1 that gets set if you run some dev code that puts the UTXO database in a bad state or have a flag called "utxo-consistent" that is unset in that case.
2791	21347176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21347176	jgarzik	Either a version number or simply list of flags that might permute the output.
2791	23192625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23192625	gmaxwell	Perfect is the enemy of good. I think the inconsistent values here can be resolved by anyone who wants to create UTXO tree hashes for proofs, and otherwise by reindexing. I think we should just take this as is.
2791	23220931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23220931	jgarzik	Lets get this merged.
2789	19882835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19882835	sipa	It used to be every 100s, but the thread refactor (presumably unintentionally) made it every 10s. I think every 15 minutes is more than enough.
2789	19883752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19883752	jgarzik	ACK
2789	19883855	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19883855	gmaxwell	ACK.
2789	19892986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19892986	laanwj	ACK Minor nit: maybe use a constant for the value instead of a direct magic number
2789	19897767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19897767	sipa	Ok, introduced a DUMP_ADDRESSES_INTERVAL in net.cpp. Made it sleep once before the first execution.
2789	19907912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19907912	jgarzik	Where is the discussion for the sleep change? For a general facility, such as the one you are changing, it seems a valid use to directly begin execution. Putting the sleep first strikes me as a hack-y approach to a problem, that does not belong in a generic facility. People in the Linux kernel routinely jigger sleep delays to paper over driver problems ;p
2789	19908018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19908018	sipa	Its the only place where LoopForever is used. So yes, Im changing its semantics, but I think both cases are meaningful, and only the one actually used is implemented.
2788	19876528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876528	sipa	This wont work. Bitcoind wouldnt ever call SelectParamsFromCommandLine() anymore?
2788	19876591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876591	Diapolo	What about this?
2788	19876686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876686	sipa	Ah, thats for the RPC client, not for bitcoinds normal functions.
2788	19876867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876867	Diapolo	Could we then place that call (``SelectParamsFromCommandLine()``) here for bitcoind to work in all vairants?
2788	19877259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19877259	sipa	No, not before ReadConfigFile.
2788	19894322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19894322	Diapolo	Doesnt yet do, what it should ;) -> closed.
2787	19876047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876047	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2783	19876364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19876364	Diapolo	Yeah, seems like a better place for the check.
2783	19879886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19879886	jgarzik	ACK
2781	19722896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19722896	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2781	19723868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19723868	jgarzik	Looks good at first glance. Will test tomorrow. Nit: Thought it was the commit msg that needed the "fixed XXX issue" text, rather than the pull req msg.
2781	19724258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19724258	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2781	19775888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19775888	jgarzik	ACK
2781	19783462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19783462	sipa	Commits exist at the git level, pull requests at the github level. A commit referring to something in github namespace makes no sense to me.
2778	19695270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19695270	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2778	19706790	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19706790	sipa	Code looks good, havent tried.
2778	19857134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19857134	sipa	ACK, seems to work fine.
2776	19649881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19649881	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2776	20004477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20004477	jgarzik	Updated per suggestion.
2776	20621556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20621556	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2775	19602102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19602102	fanquake	You need to make any translation changes on Transifex, they are then merged before every release.
2775	19602116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19602116	sipa	Please use transifex (project name: bitcoin) for translation improvements. We pull all translations from there before release.
2771	19650100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19650100	super3	Everything should be fixed now. Any more comments/suggestions?
2771	19650796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19650796	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2769	19449861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19449861	sipa	ACK
2769	19453358	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19453358	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2769	19457959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19457959	jgarzik	ACK
2769	19470928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19470928	petertodd	ACK In my mempool rewrite work I also implemented this change and havent found any downside to doing so. The wallet code is perfectly ok if there are txs in the wallet that dont make it to the mempool for whatever reason.
2769	20469717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20469717	petertodd	Actually you broke transaction resurrection in the event of a multi-block re-org with this patch because transactions get added back to the mempool in the wrong order, the correct order within a block, but newest block first. See SetBestChain() for details.
2768	19451191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19451191	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2767	19439426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19439426	gmaxwell	And how do you prevent very bad thing from happening when one of the many duplicated definitions gets desynchronized?
2767	19439617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19439617	brandondahler	Rebasing conflicts on the actual code changes made (one actual, moving some definitions from a header to the code file). Due diligence was taken on my part to ensure that the conflicts were resolved correctly, I would still recommend someone bite the bullet and look at all the changes that are not adding/removing/reordering header files. Rebasing additionally conflicted on include files being added/removed usually because most of the includes were re-ordered, these were easy to resolve.
2767	19445776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19445776	laanwj	From what I understand this does not duplicate anything. It does pre-declare classes, but that only consists of the name and nothing more. At first glance this seems like a lot of changes, but its almost entirely restricted to the #include portion of files. The only substantial code move is moving WalletDB.h functions to its implementation file. Theres problems with compiling the tests after this, though (see pulltester output). test/script_tests.cpp: In function CScript ParseScript(std::string): test/script_tests.cpp:47: error: replace_first was not declared in this scope
2767	19448075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19448075	sipa	Im generally in favor of cleanups like this, and it indeed seems pure code movement + include changes. However: * Some changes seem not up-to-date with recent refactors (see inline comments) * Im not sure I like the increased use of forward declarations. They dont remove actual code dependencies, but they hide them. Of course were already using them, and the compilation performance improvements it gives may be worth it. Other devs opinions? * Regarding uint64 and int64: Id prefer including stdint.h and using int64_t and uint64_t instead, over redeclaring them all over the place. Mind taking a look at this? Does it interfere with the dependencies cleanup?
2767	19451029	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19451029	laanwj	Getting rid of code dependencies is even better, but in the general case if it is possible do forward declarations instead of an #include in a header Im in favor of that. It generates a flatter include hierarchy, lets not give the C++ compiler more work than need be. Re: uint64_t/int32_t I agree. If available, they should be used, as they take the burden of determining data type sizes from us, at least on most platforms.
2767	19499331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19499331	brandondahler	Addressed the specific problems references inline. Hopefully should pass build, dont know why it built on my machine to be honest.
2767	19525309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19525309	brandondahler	Delt with cstdio problems. Also normalized all [u]int64 types to [u]int64_t values from stdint.h, alongside replacing PRI64[xdu] with PRI[xdu]64 from inttypes.h .
2767	19525341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19525341	luke-jr	Simply replacing [u]int64 types with stdint will probably break something - we tried this like a year ago and had to revert it :(
2767	19525403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19525403	brandondahler	It was a non-negligable change, but it did compile and pass tests on my linux machine. Was the issue with compiling on other architectures?
2767	21076670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21076670	luke-jr	Reviewing logs, it looks like it didnt build on 64-bit Fedora. I dont believe we ever fully diagnosed the reason, but: ``` [Wednesday, December 21, 2011] [3:15:25 PM] <jgarzik> serialize.h: In function unsigned int GetSerializeSize(int64 _t, int, int): [Wednesday, December 21, 2011] [3:15:26 PM] <jgarzik> serialize.h:139:21: error: redefinition of unsigned int GetS erializeSize(int64_t, int, int) [Wednesday, December 21, 2011] [3:15:26 PM] <jgarzik> serialize.h:137:21: error: unsigned int GetSerializeSize(lon g int, int, int) previously defined here [Wednesday, December 21, 2011] [3:15:38 PM] <jgarzik> tree is full of broken [Wednesday, December 21, 2011] [3:16:18 PM] Join larsivi has joined this channel (~quassel@188.113.74.106). [Wednesday, December 21, 2011] [3:16:25 PM] <jgarzik> luke-jr: ^^ [Wednesday, December 21, 2011] [3:16:29 PM] <luke-jr> jgarzik: works fine here [Wednesday, December 21, 2011] [3:16:56 PM] <jgarzik> luke-jr: totally broke Fedora build (g++ 4.6.1) [Wednesday, December 21, 2011] [3:17:05 PM] <jgarzik> luke-jr: on 64-bit [Wednesday, December 21, 2011] [3:17:32 PM] <jgarzik> luke-jr: breakage is obvious. 64-bit platforms define int64_t==long int [Wednesday, December 21, 2011] [3:17:49 PM] <luke-jr> jgarzik: 4.5.3 here [Wednesday, December 21, 2011] [3:18:31 PM] <jgarzik> int foo(int64_t) is the same as int foo(long) ```
2767	21694280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21694280	sipa	I think most other refactors that were in the pipeline are merged now. Care to rebase this?
2767	21698075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21698075	brandondahler	Rebased branch onto master.
2767	23221054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221054	jgarzik	It would be nice to collapse the commits, and merge in the [u]int64_t change first. Looks pretty good overall, though I do worry there is a subtle compiler detail being missed in the int64/int64_t type changes. Very much like seeing use of stdint.h and int64_t, rather than using our own type.
2767	23488877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23488877	Diapolo	I also like the intention of this pull, can you rebase and perhaps follow so we can differentiate the type-changes and the cleanup changes :). Edit: Also a merge-speedup is possible, if you create a Qt-only and a core-only pull, as is able to merge Qt-pulls much faster than core changes. Edit 2: Any objection, to start using quint64 or qint64 in Qt code? Perhaps that could also be a scope of a separate Qt pull.
2767	23992274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23992274	Diapolo	I really hope to see PullTester happy and some final ACKs for your great work here.
2767	24015037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24015037	brandondahler	Rebased and squashed small commits (made sure that the resuting rebased version is equivalent to the previously merged version). I plan on going over the source again to re-alphabetize etc.
2767	24034437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24034437	gavinandresen	Pull-tester is fixed, so if it is complaining there is something wrong with your pull. See the test.log to debug.
2767	24034659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24034659	brandondahler	Are you sure? First two errors for last log are: leveldb.h:11:24: error: leveldb/db.h: No such file or directory leveldb.h:12:33: error: leveldb/write_batch.h: No such file or directory I think I kicked off the last update by updating my original comment.
2767	24035486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24035486	gavinandresen	Am I sure pull-tester is working? Yes, see a successful pull-test from 2 hours ago. On Mon, Sep 9, 2013 at 11:41 AM, Brandon Dahler <notifications@github.com>wrote: > <https://github.com/gavinandresen>: Are you sure? First > two errors for last log are: > > leveldb.h:11:24: error: leveldb/db.h: No such file or directory > leveldb.h:12:33: error: leveldb/write_batch.h: No such file or directory > > I think I kicked off the last update by updating my original comment. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2767#issuecomment-24034659> > . > -- -- Gavin Andresen
2767	24405579	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24405579	sipa	I started going through the changes, and noticed several missing dependencies, but maybe this is intentional, relying on indirect dependencies? Im very much in favor of cleaning up our dependencies, but hiding things further by making them implicit only worsens understanding the dependency graph, makes things break when you reduce actual dependencies, and has no speed benefit.
2767	24474405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474405	brandondahler	It is not intentional at all. The idea is that if and only if we can replace a header dependency with a forward declare, do so. Additionally (and this is harder to do), if there are indirect dependencies, add them to be a direct dependency. My method to find direct dependencies has been to remove the header(s) that resolve the dependency (using doxygen to find indirect includes of a given header), and analyze the error messages to see if the file actually uses the header. If so see if we can optimize the header out with forward declares, and if not make sure we #include it directly. The method to find indirect dependencies has been to assume they will show up as un-related build errors and make them work. All of this being said, I dont know the project well enough to know exactly where things are, so my methods have a certain amount of flaws in them. This is one of the reasons why I say that there will be a major need to review the changes I make. I will do my best to resolve the issues you mentioned above and squash any others that come up.
2767	24474505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474505	sipa	Ok, great! I understand finding indirect dependencies is hard, and the code certainly already has a ton of them, so anything is an improvement. Ill review it some more, if youre willing to address the comments.
2767	24474635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474635	brandondahler	Without a doubt, ideally there are no indirect dependencies anywhere, but that would take a lot of knowledge about all files dependency fulfillment and usage.
2767	24474671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24474671	sipa	Sure, no need to fix everything. But Ill help avoiding introducing more of them.
2767	24487263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24487263	brandondahler	I am going to need some help fixing the build error the pull tester is encountering. It looks like the tester is trying to build without setting HAVE_CONFIG_H. On Sep 15, 2013, at 9:51 PM, BitcoinPullTester <notifications@github.com> wrote: > Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. > > This could happen for one of several reasons: > 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in qa/pull-tester) > 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time > 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) > 4. The test suite fails on either Linux i386 or Win32 > 5. The block test-cases failed (lookup the first bNN identifier which failed in > > If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. > > This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at > Contact BlueMatt on freenode if something looks broken. > > > Reply to this email directly or view it on GitHub. >
2767	27665255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27665255	brandondahler	Rebased to current master and squashed all commits to single one.
2767	28049279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28049279	laanwj	If we intend to merge this, I think we should merge it as soon as possible. Keeping a patch this size up to date must be frustrating. After squashing this you seem to have introduced some merge commits into the pull request, can you make it one commit again? (easiest way to get rid of merges is to merge the branch using `git merge --squash`)
2767	28081206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28081206	laanwj	Ive read through the entire patch and verified code movement and renames. ACK apart from the above minor nits
2767	28109400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28109400	brandondahler	Replied to/fixed nits, rebase onto master, squash all but #3211 merge.
2767	28120644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28120644	laanwj	Another nit: the commit messages that we use are of the format (see subject line (~50 chars) (empty line) longer description... You left out the empty line for commit 0de9da2, which causes git tools to merge your entire message into one line.
2767	28137826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28137826	brandondahler	Rebased, addressed nits.
2767	28139444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28139444	gavinandresen	Has anybody tested if the int64 changes run properly on Windows 32/64 machines ? UPDATE: I downloaded the pull-tester-created bitcoind.exe into a Windows XP, 32-bit virtual machine and it seems to be running -testnet just fine.
2767	28141877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28141877	gavinandresen	ACK from me.
2767	28144493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28144493	brandondahler	Address comments. I think most of the main.h problems were caused by rebasing/merging so many times.
2767	28147331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28147331	sipa	ACK, apart from my nits above.
2767	28148542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28148542	sipa	Some suggested changes, which seem to work: sipa/bitcoin@0762f57854af54d08c969c029f629c9741e79e64
2767	28152944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28152944	brandondahler	Merged sipa/bitcoin@header-cleanup (sipa/bitcoin@0762f57)
2767	28153285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28153285	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2767	28156606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28156606	sipa	ACK. Thanks a lot for the effort of writing this, and maintaining it.
2766	19440124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19440124	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2766	19444539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19444539	theuni	did a quick test with this and confirmed that it solved the hang. Could you please verify that its completely fixed?
2766	19445814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19445814	laanwj	ACK
2766	19447316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19447316	wtogami	Seems great in my Fedora native builds now. I enjoy not needing kill -9 to quit bitcoin-qt. Havent tested with gitian builds, but it seems from the simplicity of this patch that it shouldnt be a problem.
2766	19447556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19447556	sipa	ACK
2766	19449641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19449641	Diapolo	Very nice.
2765	19323636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19323636	jgarzik	ACK
2765	19359847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19359847	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2765	19449779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19449779	sipa	ACK
2763	19326245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19326245	jgarzik	ACK code change. Administrivia: 1) git commit message should include text such as "fixes #2534" or similar. Your pull request text included information that should be archived permanently inside the commit message. In general, commit messages should be more informative than this. 2) We are currently deployed with a buggy BIP 37 interpretation. We should consider whether it warrants bumping the protocol version, along with this patch. Otherwise, you have two different behaviors in the field, with the same protocol version.
2763	19362165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19362165	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2763	19387151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387151	mikehearn	Its not really a protocol change, is it? Its just a change in the reference client implementation.
2763	19387308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387308	bitsofproof	It is a bug fix but might answer the question if protocol > reference implementation :)
2763	19387381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387381	sipa	All fields in the version message except for the first ones are optional - clients need to be prepared for both missing fields or more fields than they know, as this is exchanged before the protocol version is negotiated. Because of that, it cannot be a protocol change, and its not a bug fix either. Im in favor of this however, it makes behaviour more consistent across clients.
2763	19387445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387445	bitsofproof	I doubt series of fields can be optional since they are not identified by the serialization. How to parse then if we add more?
2763	19387540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387540	mikehearn	LGTM Its in the code - you dont have to add the last field, but if you do, you have to add all the preceding fields too. Sipa is right, we should merge this, although its a fairly minor thing.
2763	19387592	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387592	sipa	This is how the reference client parses it: Essentially by checking whether were at the end of the message already. And yes it must be optional, as youre parsing/sending this before you know which version the peer supports.
2763	19388161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19388161	bitsofproof	Since the version number is preceding this in the message, optionality is not mandatory but chosen. I think it would be more future proof and flexible to decide on the structure by version read and not by checking the length. I believe the current way of parsing is ugly, but agree is sustainable.
2763	19388298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19388298	sipa	The version isnt acked by the peer yet, so you dont know whether theyll support it. But indeed thats just a problem in one direction, not both. And yes, its ugly. For more complex extensions later a separate message may be more appropriate...
2763	19449786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19449786	sipa	ACK
2763	19531424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19531424	mikehearn	This has two ACKs so should be mergeable now.
2763	19548658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19548658	jgarzik	IRC user reports this change causes a remote node (ver 32200) over Tor to drop them (socket error 104, connection reset by peer). Reverting this change fixes the issue.
2763	19550812	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19550812	mikehearn	Ver 32200 has been/will be hard forked off, so Im not sure why we should care?
2763	19551992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19551992	sipa	Yes, that is true, but because of a reason completely unrelated to the P2P protocol, so we should at least find out why this results in not accepting these version messages - who knows which other versions are involved?
2763	19552276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19552276	bitsofproof	It is wise to investigate, it however would mean that the flag would not be optional but must be absent to work.
2763	19552523	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19552523	gmaxwell	Or there is just some broken alternative implementation sending that version string which is intolerant of the flag.
2763	19552749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19552749	mikehearn	That sounds like a more reasonable explanation.
2760	19363956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19363956	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2760	19397798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19397798	sipa	ACK
2760	19601615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19601615	mikehearn	Looks good to me. Please merge. This confusion ust wasted a few minutes of my time :)
2760	19601626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19601626	TheBlueMatt	ACK
2759	19244686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19244686	Diapolo	AFAIK this json_spirit stuff was not written by us and I remember changes there are a problem license wise? I know there is some pull around here, which updates its version, dunno if that also fixes this warning...
2759	19249336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19249336	sipa	Hmm, what compiler warning is caused by this? I didnt know compilers complained about unused _type_ definitions. In any case, I prefer not to touch the json_spirit code.
2759	19261154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19261154	cozz	ok. I use archlinux PKGBUILD, maybe its their problem. As this is 3rd party code -> closed.
2758	19262120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19262120	jgarzik	Code appears correct to me. Conditional ACK -- ACK iff other devs agree that pulling this code out of CBlock is the right thing to do.
2758	19265989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19265989	sipa	Yes, I agree this code should be pulled out of CBlock. Reason: having a definition of a Bitcoin block available without needing to depend on all storage/validation logic (which on itself pulls in pretty much the whole project as dependencies). Agree with the less generic names. Longer term, this should be dealt with using namespace, but thats not something to do incrementally, IMHO. EDIT: Note, I havent actually checked the code of this pullreq.
2758	19365572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19365572	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2758	19858974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19858974	sipa	Code changes look good to me, and move-only + method/function conversions. Can you rebase? #2632 caused conflicts.
2758	19886975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19886975	CodeShark	Rebased
2758	19887391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19887391	jgarzik	ACK code changes; didnt build or test.
2758	19897544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19897544	sipa	ACK. Agree with code changes, individual commits look good, build works, tried unit tests, tried resync on testnet.
2758	19898081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19898081	sipa	Dependency improvements possible now: * bloom.cpp: main.h -> core.h * chainparams.cpp: main.h -> core.h, protocol.h
2758	19911178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19911178	jgarzik	Updated deps directly with push to master.
2756	19158391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19158391	sipa	I never considered this a mistake; 1 happens to be the encoded form of the base58 zero, but its still a zero in the sense that it represents value 0. The other interpretation is of course just as sensible :)
2756	19367282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19367282	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2756	19908213	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19908213	jgarzik	Closing, not considered a mistake
2754	19148929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19148929	sipa	ACK
2754	19149805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19149805	gavinandresen	ACK, assuming pull-tester is happy (I worry about boost::filesystem version incompatibilities...)
2754	19150473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19150473	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2750	19151265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19151265	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2750	19156405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19156405	gavinandresen	ACK
2750	19162813	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19162813	wtogami	+unsigned int nBlockMaxSize = MAX_BLOCK_SIZE_GEN/2; +unsigned int nBlockMinSize = 0; +unsigned int nBlockPrioritySize = 27000; Why are these defined here and the defaults again defined in init.cpp?
2750	19387291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387291	mikehearn	Could someone merge BlueMatts refactoring of the fee code and then rebase this on top of it? Matts pull makes things a lot easier to follow and removes some pointless duplication.
2750	19861456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19861456	sipa	Merged #2660, so this needs a rebase.
2750	20070978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20070978	wtogami	Possible bug: In our testing we found strange behavior when nBlockPrioritySize was set to 10000. Incoming zero fee transactions like 99XX bytes with sufficient priority would be accepted by nodes with nBlockPrioritySize 27000 but rejected by otherwise identical code with nBlockPrioritySize of 10000 with "not enough fees". The mempool in both nodes had a few small 225 byte high priority transactions. Wouldnt you expect the node with nBlockPrioritySize of 10000 to accept a 99XX byte transaction and keep it in the memory pool until there is room in a later block?
2750	23490233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23490233	Diapolo	Can you take a look at this again :)?
2750	25548993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25548993	jgarzik	Even though this was ACKd... dont care about this enough to continue rebasing and maintaining it. Closing.
2750	25549371	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25549371	mikehearn	:( it seems like this should be merged ... what happened?
2750	25550094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25550094	jgarzik	"dont care about this enough to continue rebasing and maintaining it" Following Gavins ACK, more work was piled on top. Not interested in constant rebasing on top of someone elses code as suggested up-thread.
2750	25616057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25616057	Diapolo	I think this is an example, where our merge-process could be smoother, so devs do not get frustrated with constant rebasing...
2749	19097642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19097642	Diapolo	ACK, nice addition :).
2749	19109566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19109566	subSTRATA	Total balance would be useful on Transactions tab as well. For example, if one filters transactions to some specific address, date or both address and date, there is no sum function anywhere and there is no Total row at the bottom of the list so it is not easy to quick-check totals.
2749	19117633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19117633	sipa	Looks good. Havent tested or checked the code.
2749	19144754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19144754	laanwj	Its only one line of code change, the rest is ui markup :smile: yes it could be useful to query the total of subsets of transactions, this is also requested in #627
2749	19152044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19152044	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2748	19111626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19111626	jgarzik	Looks mostly OK, well done. Comments: 1) MSG_NOSIGNAL cleanup should be a separate commit, but the rest should be collapsed into a single commit. e.g. "add gitignore" logically belongs with the "add autotools files" commit. 2) use SUBDIRS, multiple Makefile.am files, and avoid relative paths, particularly for the test data.
2748	19114186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19114186	laanwj	Looks good. One question: why is the configure script and autogen.sh in src/, and not in the root of the project like most projects do?
2748	19117292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19117292	sipa	One (potential) nit: several of the M4 files are GPL licensed (with a special exception); I dont know enough about licensing issues, but perhaps this impacts our source distribution? comments?
2748	19135561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19135561	theuni	1. Sure, Ill squash down if/when reviewers sign-off. It was pushed this way so that the code-changes are easy to review separate from the buildsystem ones. 2. I used a single makefile in order to make life easier for qt-creator users. How firm are you on the split? Agreed about the test-data. Will change it.
2748	19135674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19135674	theuni	I suppose theres no real reason, it just made more sense to me this way. One current issue with moving to the top would mean that the .pro file would have to move (if its kept around after autotools merge), since it produces a Makefile that would conflict.
2748	19135941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19135941	theuni	the gpl in those files is effectively meaningless. Since theyre always distributed in source-form, and resulting scripts are exempt from infection, the only way to violate would be to strip the attribution (which would violate MIT as well). So the net effect here is effectively nil.
2748	19138492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19138492	laanwj	just assume that either the .pro will be used or the autotools build system, not both in parallel, so the makefiles wont get in each others way. Id prefer the configure script to be at the top level, but others may disagree...
2748	19152555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19152555	sipa	I have a slight preference for configure in the top level, but I dot feel strongly about it.
2748	19152802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19152802	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2748	19497533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19497533	sipa	Just a generic comment: Im strongly in favor of moving towards a real build system, but under the condition that we switch entirely. I wouldnt want to retain both the old and the new, and needing to maintain them both. So, as soon as this can be used to build on linux/linux-mingw/osx/win32, and the gitian builds work, Im fine with merging. Perhaps wants to retain the .pro file, but assuming the autotools plugin to Qt Creator is powerful enough, Id rather get rid of it.
2748	19501389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19501389	theuni	Ok. Im working on the reorg concerns above, I didnt have much time to get to it this week. In the meantime, though, has helped me to get the gitian descriptors up and running for win32, and linux should be easy after that. Ive gotten the same vibe from the others, so Ill finish up with the impression that back-compat is not needed. Also, said he is ok with figuring out some solution for himself for the .pro file, so Ill not concern myself with that either.
2748	20231511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20231511	sipa	Hi, any updates about this? There have been a few refactors lately, which may impact this work (core.cpp/h and chainparams.cpp/h were added), but I think the largest changes are over now. Id really like to see this merged.
2748	20243679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20243679	theuni	Hi Ive been very occupied for the last few weeks, sorry for the lack of updates here. I have a branch that splits out the makefiles as requested. Personally I think its a sizable regression, but Im ok with that if its what it takes to get it merged. Ill try find some time tomorrow to push up a rebased branch for review round2.
2748	20249291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20249291	sipa	Great, no actual hurry - I just wouldnt like this work to get lost.
2748	20263843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20263843	theuni	Closing in favor of round 2:
2747	19090621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19090621	SomeoneWeird	tested, ack.
2747	19104718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19104718	jgarzik	Looks pretty good. Please use bool for boolean choices (example: gettxout). ACK if that is fixed.
2747	19117836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19117836	sipa	Agree with ACK otherwise. EDIT: hmm, it seems getrawtransaction uses 0/1 for verbose... meh
2747	19120821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19120821	luke-jr	Indeed... Boolean does make more sense, but usually consistency wins so far. Otherwise, we should be using Satoshi values everywhere... Any further thoughts? Agree/disagree?
2747	19120909	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19120909	jgarzik	Be consistent with gettxout, and use a boolean/get_bool()... :)
2747	19121995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19121995	luke-jr	Done
2747	19122226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19122226	jgarzik	ACK
2743	19292524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19292524	petertodd	Good idea, needs a rebase due to #2154
2743	19861514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19861514	sipa	ACK, but needs a rebase.
2743	19869649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19869649	jgarzik	Rebased.
2743	19966582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19966582	mikehearn	LGTM You could check the reason code in the unit tests to ensure the transactions are being considered non-std for the right reasons. But its a minor thing.
2743	20512824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20512824	mikehearn	Lets merge this?
2741	18954342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18954342	theuni	ping for review
2741	18955152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18955152	jonasschnelli	ACK
2741	18955561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18955561	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2741	18960075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18960075	laanwj	Eek, mind your null pointers/uninitialized variables. ACK
2741	18960125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18960125	jonasschnelli	Yes. My fault. Sorry guys. thanks
2740	18991545	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18991545	laanwj	Im all for supporting UTF-8, but *raw utf8* is non-standard JSON and will likely break compatibility with some parsers. Escaping using \uNNNN is the norm. Im not convinced we should enable it: raw_utf8 = 0x02, // This prevents non-printable characters from being escapted using "\uNNNN" notation. // Note, this is an extension to the JSON standard. It disables the escaping of // non-printable characters allowing UTF-8 sequences held in 8 bit char strings // to pass through unaltered.
2740	18993602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18993602	luke-jr	How is it non-standard? The specification seems to say raw UTF-8 is standard and parsers must handle it...
2740	18995351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18995351	constantined	JSON Spirit without raw_utf8 escapes every byte as UTF-8 character. For example, U+0432 will be escaped as \u00D0\u00B2. raw_utf8 is solution.
2740	18999288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18999288	laanwj	Well the help text said it is non-standard, and I was going on that, but according to All Unicode characters may be placed within the quotation marks except for the characters that must be escaped: quotation mark, reverse solidus, and the control characters (U+0000 through U+001F). So, as long as it still escapes those characters it is OK.
2740	19006665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19006665	constantined	> commented on 370df18 >"now builds on unix" tells us nothing about the commit: why it was needed -- because it builds on "unix" here, what needed changing etc. Suggested commit message: >makefile.unix: link with boost_chrono to fix build on [your platform] Sorry, it was my own issue. Solved by upgrading boost libs from v1.52 to v1.53.
2740	19245446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19245446	fanquake	Changelog for 4.04 to 4.06 Version 4.04, 8 January 2011 Added the raw_utf8 feature to the write functions Added a << std::dec before writing to a stream to ensure that integer variables appear in base 10 notation Added additional .h files to CMakeLists.txt Output doubles using precision of 17 instead of 16 Added option to remove trailing zeros when outputting doubles Ensures that write functions return the state of a given IO stream to its original state on completion Version 4.05, 12 September 2011 Added a new output option for single line arrays Fixed non-standard zero digits following decimal point with "remove trailing zeros" output option Reduced build times with new JSON_SPIRIT_VALUE_ENABLED type #defines Added a constructor for variant types Added a constructor for container iterators Version 4.06, 14 May 2013 Added support for Javascript type comments, i.e. // and /* */ Added json_spirit_writer_options.h to CMake install Improved error message on attempt to extract the wrong type of data from a value Correct bug that reduced write performance Added always_escape_nonascii writer flag
2740	19252272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19252272	Diapolo	Any reason not to update?
2740	21352661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21352661	jgarzik	Id like to see json_spirit update separate from any UTF8 fixes. i.e. two commits: update json spirit, then switch raw_utf8
2740	21362098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21362098	Diapolo	Seems like a good thing to do. Also I hope the new json_spirit version fixes a compiler warning I get: <pre> \src\json\json_spirit_writer_template.h:31: Warnung:typedef Char_type locally defined but not used [-Wunused-local-typedefs] typedef typename String_type::value_type Char_type; ^ </pre>
2740	21390018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21390018	constantined	Done. Cant reproduce this warning on master branch. gcc-4.7.3, GNU/Linux.
2740	21391216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21391216	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2740	21395714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21395714	Diapolo	I also did not have that error with MinGW < 4.8.1, but perhaps latest json_spirit fixes this anyway :).
2740	23221096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221096	jgarzik	Looks pretty good. Made one inline comment. Do Qt guys agree that RPC console should pretty print?
2740	23490751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23490751	Diapolo	Did a quick web search, but perhaps you can tell me what pretty-print means for RPC console or perhaps give a formated example?
2740	23543107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23543107	laanwj	I tried this out and didnt see any change to the JSON as printed in the console before/after this patch. So its ACK by me.
2740	24016652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24016652	wtogami	If this happens, please be sure that #2980 is fixed.
2740	26697330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26697330	laanwj	Is there anything blocking this?
2740	26784838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26784838	gavinandresen	Works for me.
2740	26807478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26807478	jgarzik	Had to revert this -- it broke JSON-RPC values. See #3126
2738	18937000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18937000	jgarzik	This is along the same vein as #1809 except this is per-transaction, not per-TxOut.
2738	18940841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18940841	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2738	18976852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18976852	TheBlueMatt	Concept/Code skim ACK, after payment protocol gets merged - too much ability to take the path of least resistance and just use OP_RETURN for adding data to a txn because there is no alternative.
2738	19009171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19009171	petertodd	The current UI has no mechanism to show the user any messages in any OP_RETURN outputs, so I dont think well see people using OP_RETURN for stuff that would be better done with the payment protocol. What we do need is an alternative to data and hashes in unspendable outputs so we can nudge the users using Bitcoin for timestamping and similar things towards methods that are less harmful. Im still of the opinion that using OP_RETURN should always be as easy and cheap as creating an unspendable txout. That would mean allowing as many OP_RETURN outputs in a transaction as you want, and allowing up to 192 bytes of data per one. (OP_CHECKMULTISIG equivalent, either bare or with P2SH) There should never be an excuse to use an unspendable UTXO rather than OP_RETURN and pressuring people into not doing it via social means isnt working. Still, if a compromise is what it takes, its a good step forward. Once implemented widely, something suggested was to change the UI so that creating a zero-value out transaction actually creates an OP_RETURN with the digest as the data. I think we should also see if we can convince blockchain.info to implement this on their API in some way. All the timestamping sites and phone apps that have popped up recently seem to use blockchain.info so itd be great to use that as a way of pushing people onto OP_RETURN. In particular itd be great if blockchain.info could make 20-byte out OP_RETURN txouts be indexed in their database as though they were addresses to give users a way to look up their timestamps, thus making the overall experience of doing the better thing strictly easier than harming the network. Ill review/test code later.
2738	19181009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19181009	petertodd	FWIW I did take a careful look at the code and found some minor issues, but Id like to hear more about peoples thoughts on the idea in general - some of the issues are fairly specific to implementation.
2738	19928669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19928669	jgarzik	Rebased, and fixed issue
2738	19928819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19928819	gmaxwell	Should this be merged prior to OP_RETURN UTXO being excluded from the coinstate being widely deployed?
2738	19929049	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19929049	sipa	I agree with that this shouldnt be deployed before theres a alternative for cases where itd otherwise just be used a communication through the blockchain. Im working on a patch that prunes OP_RETURN-starting pubkeyscripts.
2738	21091219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091219	luke-jr	Rebase needed again.
2738	23221351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221351	jgarzik	Rebased.
2738	24537508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24537508	dacoinminster	MasterCoin may end up being the first real-world usage of this. Im currently discussing with Jeff what would be involved:
2738	24537740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24537740	gmaxwell	There is already usage of this.
2738	24942422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24942422	M4v3R	Is there any target client version for this?
2738	24947219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24947219	jgarzik	Mainly, people do not want this to go in before #2791 which seems like a reasonable request.
2738	25015272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25015272	M4v3R	It seems that #2791 got merged, so I guess we have green light here? As for the size, 40 bytes is probably enough to contain a 256 bit hash plus some additional data.
2738	25015736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25015736	gmaxwell	See my above comment. Being merged wasnt the bar I was suggesting. Whats your interest / application here?
2738	25015747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25015747	sipa	Im still in the middle here. Ideally, there is just no intent of using the blockchain as a storage mechanism for arbitrary data at all. Unfortunately, it there seems such ridiculous demand for it, that it happens anyway - costly or not, as weve seen in the past. Given that this is inevitable, the choice is whether such usage should have a way to not burden the UTXO set, which is what this proposal does. The problem is that people may see this as a legitimation of the storage in the first place, and encourage doing so even more.
2738	25016149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016149	gmaxwell	> "May see" I dont think there is any ambiguity there, "will see". But is it worth the trade off to shape it towards less harmful forms when it happens? needs? Is this just because they want to store _more_ than 80 bytes?! (Incidentally, I still think 80 bytes is too much, but I do find PTs existence of alternatives argument relatively convincing on that point)
2738	25016350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016350	petertodd	Ooops, deleted my comment accidentally, reproduced below: I think MasterCoin shows that you cant stop datastorage in the blockchain via social means, only technical ones. (or occasionally the threat of a technical change) Their protocol needs the ability to store more than one data txout per transaction, which means they have reasons to ignore OP_RETURN as implemented here (because you are limited to one OP_RETURN txout) in favor of sticking with CHECKMULTISIG.
2738	25016593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016593	petertodd	Who cares? Its easy for them to make a protocol that does what they want with CHECKMULTISIG, so thats what theyll do.
2738	25016848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25016848	petertodd	IMO what we should do is alongside this patch make anything other than P2SH and pay-to-pubkey-hash in a scriptPubKey non-standard and make OP_RETURN be allowed to be present as often as you want, with a data payload size calculated to be a bit cheaper than the alternative possible by P2SH w/ inner CHECKMULTISIG data payloads. Thats the right solution because it gives the correct economic incentives with a solid technical implementation.
2738	25017368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25017368	gmaxwell	In your second to last comment didnt you just propose limiting bare multisig? That removes datastorage in utxos in that case too. WRT who cares part of the idea here is shaping behavior towards conservative needs. For many abuses of bitcoin you only _need_ a hash, and that carries a lot less risk for the system. So I care about the motivation because I want to know if enabling this is going to signal to people that this makes non-hash data "kosher".
2738	25018894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25018894	petertodd	Oh, yeah, thats correct, so once you limit the UTXO-usage by getting rid of everything but P2SH and pay-to-pubkey-hash making your OP_RETURN be cheaper than either mechanism is what we want. Given that each 20-byte-hash output has a cost in terms of Bitcoins burned (due to the dust rule) itd be enough to make the data allowed in an OP_RETURN be equal to 20 bytes, and either require the rest to destroy Bitcoins, or just make all OP_RETURNs not subject to the dust rule to make it clear that implementing OP_RETURN in your shitty app is worth the trouble. (note how in this case relative to the data storage required by legit financial transactions youre paying a large premium per-byte because you cant make use of the 8-byte txout value while they can, and eventually we can even mandate its actually a hash a-la P2SH^2) Anyway my point is that you dont shape behavior by just telling people, you have to actually force them through incentives and limitations.
2738	25021353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25021353	M4v3R	I already stated that on the mailing list. My interest is to attach an additional signature to transactions generated by my service, so anyone receiving the transaction can see that it came from the service. This would allow merchants or exchanges to safely accept Bitcoins after zero confirmations, because then know theyll coming from my service, which acts as an escrow and will never double spend.
2738	25021713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25021713	petertodd	Given that the additional OP_RETURN data will make your transactions easily identifiable anyway why not just use a single green address and send all transactions from it? Or just provide a way to query your server over SSL to just ask if a particular transaction is from you?
2738	25022277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25022277	petertodd	BTW if youre working to make a business based on securing zero-conf, I should warn you that weve got a way of making them fairly secure that could make your business plans obsolete:
2738	25071236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25071236	M4v3R	If thats the case then this is great news. No, my business model is not based on securing zero-conf, I just thought it could be a valuable addition to the business, but if that will be solved another way Im all for it.
2738	25071574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25071574	M4v3R	My service is based on giving the service operators as little trust as possible (ideally, no trust at all). That means that at any point I dont want to be in 100% control of users coins. This is implemented by using multi signature transactions. With that in mind I cant use a single green address because it would require me to route all transactions to that address first, thus getting in control of the coins for that moment, which I dont want. I could provide an SSL API for asking for transaction ownership, but that creates an additional step for receiving clients to implement, and relies on the API having very high uptime, and on the network itself. Whereas signature checking can be done without any network requests, so its more reliable. PS. This could start a discussion whether the above goal is possible, but please leave that discussion for another time, as this has nothing to do with the issue were discussing.
2738	25550408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25550408	jgarzik	Rebased. Code-wise it is merge-ready now, though illustrated the current merge decision factors.
2738	25680563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25680563	gavinandresen	How should I test this?
2738	25681500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25681500	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2738	25682033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682033	petertodd	Seems to me that we should have an -accept-nonstd option that -testnet soft-sets to true so that -accept-nonstd=0 can be used easily to test mainnet behavior exactly. (or conversely, -reject-nonstd) Ive seen multiple people get confused by that difference when testing their code, usually when debugging nLockTime-using protocols where propagation differs. is up to date IIRC and could be easily modified for that purpose.
2738	25792402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25792402	jgarzik	I made hand-created outputs using For python this should work, Then I pushed to TNIAB setup and manually observed.
2738	25792537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25792537	jgarzik	Im fine with (1) a chain param indicating accept-nonstd, and (2) a command-line param enabling alteration of that default. Current default behavior must be preserved of course.
2738	26688233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688233	petertodd	We should allow a bare OP_RETURN scriptPubKey - no data payload - to IsStandard() as well; sometimes its useful to simply send Bitcoins to fees with no message or data at all. Example, which creates coinjoin txs that destroy dust by spending inputs to fees with a single OP_RETURN txout.
2738	26690096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26690096	jgarzik	Agreed. I actually think it should be valid to have zero outputs (100% fee), but as that is a hard forking change, a dummy output is about as good as it gets.
2738	26778668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26778668	gavinandresen	... mumbles about the perfect being the enemy of the good then merges....
2735	18911698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18911698	fanquake	Does this include everything from doc/coding.md? Which I assume its trying to replace.
2735	18911867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18911867	jgarzik	Leaning towards general NAK. This is imposing one coders view of how code should be written, when we already have another coding style doc that originated from coders with heavy bitcoin.git contributions.
2735	18911888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18911888	vinniefalco	This is not supposed to be a replacement for doc/coding.md
2735	18912260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18912260	jgarzik	In general, dont overburden anywhere with rules. The main GUIDELINES (not rules) are: make new code look like existing code, and follow project developer consensus on any style changes.
2735	18913103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18913103	laanwj	While rules/tips to avoid shooting yourself in the foot can be welcome and even necessary in language such as C++, I dont like how this starts off with a screenful of rules about formatting. Just use the same convention as the code youre editing. As for the rest, there would have to be developer consensus on a rule by rule basis. It looks like this came from some other project? (If so; which?)
2735	18913934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18913934	jgarzik	I believe Gavin or Mike H or similar pointing to Googles C++ coding conventions as some good rules to follow. They seemed pretty sane, also.
2735	18915061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18915061	gavinandresen	tl; dr closing
2735	18915638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18915638	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2733	18883041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18883041	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2733	19498612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19498612	sipa	Would you mind if I rewrote this a bit, by simultaneously changing how keys are stored in the wallet file (using a serialized CKey, instead of CPrivKey, and combining it with the new CKeyMeta)?
2733	19502773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19502773	pstratem	That sounds like a good idea.
2733	20493830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20493830	pstratem	Im closing this pull request. sipas suggestion is a better long term solution.
2731	18843374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18843374	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2730	18839295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18839295	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2730	18989622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18989622	laanwj	NAK, I prefer to keep this explicit.
2728	18814192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18814192	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2728	18814501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18814501	petertodd	Thanks. The other thing to do is squash those two commits together - we dont like having excess commits in the tree without a good reason. If you arent familiar with git look up the git-rebase command (specificially the -i interactive flag) for how to do this.
2728	18832522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18832522	runeksvendsen	Done. I *think* I did it right. I messed up the rebase so I had to go back. But it looks right to me now.
2728	18835672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18835672	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2728	19205420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19205420	sipa	meh
2728	19205572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19205572	runeksvendsen	After speaking to sipa on #bitcoin-dev I think it would be appropriate to add a warning to the readme about the consequences of using this script. Perhaps that its advisable to only use this script with the -nolisten option, as you otherwise risk feeding someone the blockchain *really* slowly.
2727	18812732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18812732	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2722	18746488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18746488	jonasschnelli	ACK I will also take care of the icons soon.
2722	18746751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18746751	fanquake	ACK
2721	18799710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18799710	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2718	18723784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18723784	laanwj	Make translation changes on Transifex: they will be merged from there every release.
2718	18787527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18787527	Diapolo	As said, we wont merge such translation pulls, make the changes via Transifex and well update translations before a new release or from time to time. Can you close this please?
2713	18659018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18659018	gavinandresen	ACK
2713	18660114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18660114	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2705	18593879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18593879	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2705	18633969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18633969	sipa	This seems harmless.
2703	18588753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18588753	luke-jr	NACK. This design is intentional.
2703	18588781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18588781	paraboul	oh, can you elaborate? Edit: Cant we mix that intentional design and the one that check the balance by something like : * No [minconf] provided : no balance check * [minconf] provided : actually using it (and therefore check the balance accordingly) I see no reason why one would provide [minconf] and intentionally dont want to actually check the balance.
2703	18590412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18590412	sipa	This is how it was originally implemented. However, as negative balances cannot be entirely prevented anyway (a crediting transaction gets reverted, for example; or you used a lower minconf value when spending), the responsability of checking for negative account balances was moved to the caller (f they desire that functionaliy).
2703	18590512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18590512	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2703	18590561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18590561	sipa	I have no problem with optionally enabling balance checking, but it should be consistent... so send* commands should have similar functionality in that case.
2703	18591065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18591065	paraboul	I agree. Thing is its currently not consistent -- and worse, [minconf] despite being an argument supposed to prevent some damage, is not used. However I dont see why one would use send* (that is : externally) without checking the balance. What happen to other accounts if one account become negative? A positive account will not be able to spend his funds because another is indebted? Family drama!
2703	18591105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18591105	sipa	Account balances are just bean counters; they have nothing to do with the actual amount of coins available to the wallet. They can go negative without affecting your ability to spend, as long as the wallet itself has enough funds available.
2703	18591232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18591232	paraboul	So its possible (even counting the noname account (default)) that the sum of "listaccounts" is not equal to the wallet balance?
2703	18592124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18592124	sipa	Well, in theory: no. The sum of all accounts should match what you have in your wallet. In practice, it may differ because theres some known small difference in how the balances are calculated in case of unconfirmed or immature transactions afaik.
2703	18616813	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18616813	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2703	18617206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18617206	paraboul	What about this? * No [minconf] same behavior than before * [minconf] provided : using it. I know that its still not consistent with send*, but its IMHO still better than silent fail though.
2703	18617461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18617461	gavinandresen	: what are you trying to do that you cannot do with the way it is implemented now?
2703	18618401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18618401	paraboul	moving funds from one account to another without having to "getbalance account minconf" in order to check the sender balance. The current move command has a "[minconf]" argument which is not used. WIth the current implementation I would have to : * balance = getbalance accountA 6 * if amount <= balance : move accountA accountB amount * else not enough funds With this patch : * move accountA accountB amount 6 It just save up one RPC call and do it atomically
2703	18618846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18618846	gavinandresen	confirmation tracking through moves is non-trivial. E.g. lets say I send 11 BTC to an address associated with account A, and it gets 1 confirmation. Then I: move accountA accountB 3 move accountB accountC 1 6 <-- does this succeed or fail ?
2703	18619699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18619699	paraboul	If tracked correctly, it should indeed fails. It remains solid if you always use the same minconf though.
2703	18620116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18620116	gavinandresen	... should fail until the original coins get 6 confirmations. There is no code to track which inputs are moved by a move. And, actually, the code would have to track partial inputs. And what happens if you setaccount the address that originally received the coins away from accountA ? Changing this would require a ton of work and a long QA test plan to get it all correct. I dont think it is worth it.
2703	18620277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18620277	paraboul	You had me :) Multi-wallet would be great. Are there plans for this?
2703	18633717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18633717	sipa	Yes! However note that multiwallet and accounts are completely separate solutions that arent likely to solve the same problem...
2703	18634447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18634447	paraboul	better coin control. Im just looking for a solution to sandbox every accounts so that they cant interfere to each other (e.g. not using addr/funds/unspentoutput from AccountA when AccountB spends funds). Multi walltet would solve this problem if you consider one wallet per account.
2703	18635859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18635859	sipa	My point exactly. Accounts (as they currently) exist do NOT provide any coin control at all. Thats why I say they solve a different problem.
2703	18643499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18643499	luke-jr	Multi-wallet is planned, but Im not sure its really something targetting your use case. There should be no reason to isolate coins per-user. That just creates higher transaction fees for your users, prevents you from implementing proper security (an offline wallet), and propagates harmful myths about Bitcoin (such as that transactions have "from" or "return" addresses). What real problem are you trying to solve here, that you think needs each user to have isolated coins?
2703	18647008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18647008	paraboul	My original idea was just to use "account" as a ledger. That is : using the balance of each account in order to implement a simple exchange system. My idea was : if two users are on the same wallet : do the transaction off-the-network (move) instead of a regular sendfrom(). For this I needed to check that the sender has enough funds confirmed by 6 blocks (hence the move [minconf]). But I guess that writing my own ledger/account system is a better idea.
2702	18553293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18553293	vinniefalco	Heres a decent comparison highlighting the benefits of git-subtree over submodules: This blog post describes my experiences with submodules:
2702	19857537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19857537	sipa	This pull request still contains a "Remove leveldb in preparation for git-subtree", which was already done. Can you rebase this, and only include relevant commits? Code changes look good to me otherwise.
2702	19858933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19858933	vinniefalco	Roger that, I have rewritten the branch. It will need to pass through the automated testing again, although in theory the files are still the same. But dont take my word for it! I rewrote public history.
2702	19859196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19859196	vinniefalco	As per sipas comments, if you want individual leveldb commits to appear in the bitcoin commit log instead of a squash, that can be done. But the price is that first the entire leveldb commit log must be merged into bitcoins commit log once. After that, new commits to leveldb will appear incrementally.
2702	19859277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19859277	sipa	Id prefer to have access to the individual changes that were made to the leveldb subtree. Ideally, the leveldb changes appear as individual commits in our repository, but that may be hard (Im not familiar enough with git-subtree yet). An alternative is having a leveldb branch (or separate) repository under the bitcoin project, and occasionally pull changes from there through such a squashed commit as exists in this pullreq now. Other devs opinions?
2702	19863013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19863013	vinniefalco	Updated the version of leveldb to 1.12.
2702	19966507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19966507	mikehearn	LGTM. I didnt notice this pull also updated the version, my mistake. The diff is identical to what I got doing it the old fashioned way, so it seems like the upgrade is a no-brainer. To copy what I wrote before, the fix for CompactRange() would be security sensitive if we ever used that call anywhere. Given the risk of someone introducing a call to that in future, we should ensure this upgrade does take place. I dont care how the commits are represented one way or another. LevelDB is stable and doesnt change much. It hardly seems worth worrying about the optimal arrangement given that fact.
2702	19970400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19970400	Diapolo	I vote for upgrading to the latest LevelDB also, as we seem to have quite a few strange related DB-corruption issues.
2702	19988402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19988402	luke-jr	Has anyone done the necessary audit to be sure there arent some uncontroversial bugfixes which could affect Bitcoin network behaviour?
2702	20158124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158124	vinniefalco	The repository for Ripple and Bitcoins fork of LevelDB has been moved to the Ripple organization:
2702	20158535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158535	sipa	Are you in favor of having a bitcoin/leveldb repository?
2702	20158666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158666	jgarzik	/me rather liked the in-tree attributes. That was one of the selling points in moving to leveldb from BDB: it would be in-tree, so no crazy version troubles due to strange linking.
2702	20158952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158952	vinniefalco	Yes, note that what you have now is "in-tree." What is asking is if you want to also have as a public repository, your fork of leveldb. I say, why not add bitcoin/leveldb? Theres no downside to it. You can either fork the one from ripple, or create your own empty repository and push to it like this: # From your local bitcoin repository # add a remote for bitcoins fork of leveldb git add leveldb git@github.com:bitcoin/leveldb.git # add a remote for ripples fork git add ripple git@github.com:ripple/leveldb.git # bring the ripple forks ref into the local repo, so subtree-split can find it git fetch ripple # split out the commits to leveldb into its own branch git subtree split -P src/leveldb -b leveldb # push the recreated branch to bitcoins repository. # it will be called bitcoin-fork git push leveldb leveldb:bitcoin-fork You should try these steps anyway. You can always throw away the branch or repository. Get some practice with git-subtree, its great!
2702	20158988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20158988	sipa	No one suggests changing that. This is using git-subtree, so a copy of the LevelDB source is still inside our code, but theres a separate repository where development of our LevelDB tree can happen (it has significant changes, including a non-upstream Windows port with some patches by us). This way, the LevelDB code can live somewhat independently, but we can easily synchronize the in-repo copy. One of the nice things about git-subtree is that it doesnt matter where that extra repository is maintained - its only identified using commit ids. In a previous patch, we switched to a tree that extracted from our LevelDB history, and this commits pulls in changes that have been made there. My question is whether we wouldnt rather have such a LevelDB tree under github.com/bitcoin.
2702	20159092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20159092	sipa	No need to yell.
2702	20159155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20159155	vinniefalco	Yeah yeah, I forgot to mark those commands as "code" in GitHub flavored markdown so they became section headers in large bold text. Anyway, heres a simple improvement for bringing in LevelDB that lets you trim it from the Makefile or whatever and also will speed up your build: At some point I will make it work without the fancy macros and put it in our fork so anyone can use it.
2702	20177346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20177346	mikehearn	To answer Luke, yes, I audited the changes and didnt see anything that could cause desynchronization or other security issues. The FD limit was raised but we did that already, I think. On Fri, Jun 28, 2013 at 12:21 AM, Vinnie Falco <notifications@github.com>wrote: > <https://github.com/sipa> Yeah yeah, I forgot to mark those > commands as "code" in GitHub flavored markdown. > > Anyway, heres a simple improvement for bringing in LevelDB that lets you > trim it from the Makefile or whatever and also will speed up your build: > > > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2702#issuecomment-20159155> > . >
2702	20289935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20289935	vinniefalco	Ive amended the pull request to include Vaclavs changes from 6/12/2013: **Added GNU/kFreeBSD kernel name (TARGET_OS)**
2702	20624770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20624770	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2702	21323642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21323642	vinniefalco	Should I rebase this? Its been 2 months...
2702	21436265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21436265	mikehearn	It seems like a simple merge, not sure why its not done yet. Theres no changes in the new leveldb that could cause problems.
2702	21436587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21436587	vinniefalco	FYI, in Ripple we are trying out HyperLevelDB and it is looking pretty awesome.
2702	21446175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21446175	gmaxwell	Okay, I did a coinstate rebuild at height 248116 with this code and got a bit identical UTXO set at the end. I had a little concern about the level 0 compaction fix because it looked like under some corner case conditions (and not just making a compact call) that it could screw up and lose some modifications to the database. Even if thats true, that kind of corruption hasnt happened for at least my node. I do think we should just setup a bitcoin/leveldb and subtree that though. It looks like reparenting it is kind of obnoxious (creates a big diff), so when we do need to apply some leveldb patch it would better be a tree we control. Am I missing something here?
2702	21681833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21681833	sipa	I think this code has had sufficient review, so Im merging this. Ive since setup a bitcoin/leveldb repository, but Im not familiar enough with git-subtree to set up things properly.
2702	21682120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21682120	vinniefalco	You have my contact info, whenever you want I can teach you On Sun, Jul 28, 2013 at 4:01 AM, Pieter Wuille <notifications@github.com>wrote: > I think this code has had sufficient review, so Im merging this. > > Ive since setup a bitcoin/leveldb repository, but Im not familiar enough > with git-subtree to set up things properly. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2702#issuecomment-21681833> > . > -- Follow me on Github:
2702	22849947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22849947	vinniefalco	To apply a patch to leveldb all you need to do is split the subtree out of Bitcoin using "git subtree split", and it will become an orphaned branch in your local repo (a branch that doesnt share any history with bitcoin). Then you apply the level db patches to that branch. Finally, use "git subtree pull" or "git subtree merge" (preferably with --ff-only) on your local orphaned leveldb branch to bring the changes back in. Once you have split your leveldb branch using "git subtree split" you can push it to your own remote leveldb repository and maintain it as a fork. Or not. Whatever you want to do. The files will still always exist as normal files in the bitcoin repo. As usual contact me if you have questions.
2702	22859390	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22859390	mikehearn	> I had a little concern about the level 0 compaction fix because it looked like > under some corner case conditions (and not just making a compact call) that > it could screw up and lose some modifications to the database. I had the same concern when I saw it, so I checked with Sanjay and he said it could only occur if you manually used CompactRange. I guess hed know, so I left it at that.
2702	22859450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22859450	sipa	Note that the changes in this pull request have been superced by #2907 .
2700	18468130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18468130	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2700	18469401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18469401	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2700	18499731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18499731	jonasschnelli	Whats the benefit of this refactor? I like ifdefs. This change will mean we have GUI only code in the non-GUI binary (and vicaversa).
2700	18501757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18501757	laanwj	Compilation speed and sanity. This allows compiling the core objects only once and storing them in an archive (library) to be used by the all of bitcoin-qt, bitcoind and the tests. There are only very few differences left under QT_GUI defines (some help messages, and the default key which is going away anyway) so I honestly dont see the "GUI code in non-GUI" problem.
2700	18502766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18502766	sipa	Any QT_GUI ifdef in the core code means that the core <-> GUI split wasnt done correctly in the first place. The core semantics shouldnt depend on whether there is a GUI on top of it or not...
2700	18510763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18510763	gavinandresen	ACK on the concept; I havent compiled/tested.
2700	18511115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18511115	jonasschnelli	ACK compile and run (Bitcoin-Qt.app and bitcoind) smooth on osx 10.8.
2700	18513128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513128	theuni	you said: "I like ifdefs". If thats the resounding attitude here, Ill need to reevaluate my autotools work. Ifdefs are a portability nightmare if used to control runtime behavior. In this case, depending on the compiler/linker/settings used, the unreachable paths might be stripped away just as if ifdefs had been used. Would you mind explaining your position, and if its common for bitcoin development? I have no problem adapting (even if i disagree), but it may negate the reasoning for my work.
2700	18513680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513680	luke-jr	I dont think s ifdef love is representative of most developers here. It makes sense for some optional build-time features (UPnP, IPv6), but not so much in this case.
2700	18513701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513701	jonasschnelli	no. just go on (even when i generally like #ifdefs). I just like binaries that only containing code which will be runned through. But for this case ifdefs are not the right thing.
2700	18513998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18513998	theuni	Roger, thanks. I have more to say on the subject, but Ill do it in code/PR form as I go rather than discussing vague concepts here.
2700	18549718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18549718	jgarzik	#ifdefs are evaluated on a case-by-case basis, if they make sense. If the GUI supports a runtime switch that forces daemon mode, then "#ifdef GUI" construct is not applicable for that build. It depends on the build and platform. Clearly, #ifdef GUI is applicable to a bitcoind-only build. Thus, just giving that one example, you can see where #ifdef is, and is not, applicable. Personal preference never enters into the equation. If #ifdef is applicable, it is used. Otherwise it is not.
2700	18549741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18549741	jgarzik	ACK on the general concept
2700	18576315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18576315	theuni	Ok, Ive pushed changes to address comments here. Ill squash it down if everyone is ok with the above.
2700	18579388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18579388	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2700	18658528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18658528	sipa	Any reason why the init_noui code isnt just in noui?
2700	18665129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18665129	laanwj	Agree with We could call the resulting file `bitcoind.cpp`, which is more descriptive than `noui.cpp`.
2700	18665158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18665158	sipa	Good idea.
2700	18665159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18665159	theuni	yep, makes perfect sense. will do.
2700	18894308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18894308	theuni	renamed init_noui.cpp to bitcoind.cpp, rebased to current HEAD, and squashed logically. Anything else needed?
2700	18894412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18894412	theuni	Grr, I just reread the comment above and realized I didnt make the change you guys were after. doing now.
2700	18894825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18894825	theuni	Actually, the noui stuff cant move into bitcoind.cpp, as that would defeat the purpose of this rework. That would mean that test_bitcoin would have to link in bitcoind.o for noui_connect(), while also pulling in a conflicting main(). The object containing main() needs to stay as thin as possible.
2700	18896467	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18896467	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2700	18951572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18951572	sipa	ACK
2700	18989866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18989866	laanwj	ACK
2700	18993190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18993190	jgarzik	ACK Coordination note: Recommend waiting until #2154 is merged, to merge this.
2700	18993907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18993907	theuni	This is holding up my autotools pull request (it depends on this work), and it looks like #2154 could be a while. Could i convince you to change your mind on that?
2700	18994551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18994551	jgarzik	#2154 wont be a while. See that pull req already discussing a hold on other pull reqs.
2700	18994693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18994693	sipa	Just tested: #2700 and #2154 do not conflict with each other, so this can be merged independently.
2700	18995190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18995190	jgarzik	Great, best of all worlds :)
2700	18995827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18995827	theuni	great, thanks
2697	18454185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18454185	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2697	18461524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461524	Diapolo	ACK
2697	18461755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461755	laanwj	The reason for being overly specific is to show the *exact* format in which the version has to be given. I have been known for adding vs in front where there should not be, for example. If you do this, specify exactly what format is expected.
2697	18461795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461795	Diapolo	Well you are right, perhaps add a line describing what (new version) needs to be via an example or such.
2697	18461834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461834	Michagogo	Ah, I see what youre saying. When I get back to my computer Ill take a look and see if I can think of a way to demonstrate... The fact that it can be more than just numbers (i.e. 0.8.2rc3, not just 0.8.2) is important to clarify, IMHO. Also, I agree with you that it can be confusing regarding where you should and shouldnt prepend a `v -- Im not sure why it belongs in some places and not others. If you have any suggestions in the meantime regarding how to phrase it, Id be glad to hear them. Sent from Mailbox for iPhone On Sun, May 26, 2013 at 2:39 PM, Wladimir J. van der Laan <notifications@github.com> wrote: > The reason for being overly specific is to show the *exact* format in which the version has to be given. I have been known for adding vs in front where there should not be, for example. If you do this, specify exactly what format is expected. > --- > Reply to this email directly or view it on GitHub: >
2697	18461880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461880	laanwj	For me the current phrasing is fine, as it says "for example" and 0.8.0 is just an example. You could make it 0.8.0rc3 to show that the rc, if relevant, also needs to be added.
2697	18463419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18463419	Michagogo	The current phrasing doesnt say "for example", it provides values. IMHO, it should be like with the "export SIGNER=" line, making it clear that this is somewhere to fill in your own file. Ive tweaked it a bit. What do you think?
2697	18464149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18464149	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2697	18660588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18660588	sipa	ACK
2697	18669508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18669508	fanquake	Can you squash this into a single commit?
2697	18669611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18669611	Michagogo	I apologize for my ignorance, but how exactly do I do that?
2697	18671421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18671421	Michagogo	Okay, I *think* I just did that...
2697	18675507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18675507	laanwj	ACK
2696	18446962	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18446962	jgarzik	ACK
2696	18448122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18448122	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2695	18446947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18446947	jgarzik	ACK
2695	18447228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18447228	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2695	18658537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18658537	sipa	ACK
2693	18416533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18416533	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2693	18416837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18416837	sipa	ACK
2693	18418102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18418102	laanwj	ACK
2688	18363174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18363174	gmaxwell	Fixes #2687
2688	18365283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18365283	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2688	18393462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18393462	wtogami	I am seeing a different assertion failure during bitcoind "stop" both before and after this patch. /usr/include/boost/thread/pthread/recursive_mutex.hpp:105: void boost::recursive_mutex::lock(): Assertion `!pthread_mutex_lock(&m) failed. I am able to reproduce this easily with my native build on Fedora 18 x86_64 with boost-1.50.0-5.fc18.x86_64, but after 20 attempts it didnt seem to happen with the gitian build. Should I open a new issue?
2683	18327897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18327897	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2682	18301419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18301419	gmaxwell	Mostly I think its essential that we do a release with a forced rescan prior to doing a release that supports turning on pruning that will make rescans infeasible (or at least a slow network traffic generating event).
2682	18302284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18302284	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2682	18303074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18303074	gavinandresen	ACK. Synced testnet chain while watching bestblock record in wallet.dat, it changed at the right times.
2682	18307631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18307631	gmaxwell	ACK. In valgrind, tried three different wallets, including old ones with no bestblock record and a empty one. Tested starts and stops, and a reindex. Looks okay and does not rescan on a new wallet.
2681	18270410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18270410	luke-jr	ACK: I can confirm the problem and fix.
2681	18271096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18271096	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2681	18271496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18271496	laanwj	ACK, also noticed this problem before
2680	18257645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18257645	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2679	18601349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18601349	super3	Can you mash these into one commit?
2679	18602889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18602889	vhf	: Sure. Done.
2679	18678318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18678318	laanwj	Works for me (TM) ACK
2679	18775418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18775418	Suffice	This is the one of the most arbitrary and needless things Ive seen to be implemented. Its so incredibly unlikely that anyone will ever have even 10 million, let alone all 21 million. Whats the point in setting a hard input limit to that? Or any limit for that matter? If someone wants to try to send a bazillion bitcoins, let them. They should have the freedom to try that, no harm will come of it. Altcoin clients with higher limits will then be easier to set up as well.
2679	18775952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18775952	vhf	> Whats the point [...] They should have the freedom to try that, no harm will come of it. Well, there you have your reason. They should have the freedom to try, and have the chance to spot where it went wrong by seeing a highlighted field. I dont really see a 21000000 limit on a field supposed to be limited to 21000000 as *arbitrary*. As I stated before, this feature is not of first importance. But its not arbitrary. And I count on altcoin clients dev to be smart enough to grep 210 -R * (and all other btc-specific numbers, there are plenty) and replace this value here and there. There was two occurrences, now theres three, no big deal. Its just some trivial changes in response to a two month old issue. If the main devs were seeing this as completely pointless, I suspect they would have closed #2401 by now. If not, now would be a good time to do it. :)
2679	18777241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18777241	Suffice	I think I misunderstood what this was to do slightly. So long as a person can still functionally type in 99,999,999,999 Im fine with it. (But still personally think there shouldnt be an input limit.) Yet an unobtrusive notice that they exceeded the limit is an alright feature. Perhaps something more useful would be to show a highlighted cautionary field if a person is trying to send more than certain percentage of what is in their balance. Or some feature like that. Many have accidentally sent 10x or more of what they meant to send because of some extra digits, or miscalculated denominations. Most understand about what percentage of their balance they want to send, and they can then check that to be sure that its not excessive.
2679	18777902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18777902	vhf	No input limit is not an option, not possibly doable. At the moment, the field is limited to 8 digit btc amounts, meaning 99999999 is fine but 100000000 is not. What this PR does is limiting to 21000000, because unlike 99999999, 21000000 is not arbitrary. Your suggestion goes way further. You could open an issue, but it will probably raise much more discussion than this PR. The percentage should at least be configurable, but here is not the place to discuss this.
2679	18815100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18815100	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2678	18225305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18225305	sipa	ACK; tested in combination with #2645 as well.
2678	18244615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18244615	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2677	18185364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18185364	sipa	test conditions: on my VPS, a bitcoind patched to ignore the dust filtering and free relay limiting, and sending a "mempool" to every peer at connect time, waited until poolsz >5000, then measure getblocktemplate RPC latency. Result: 10-20s without this patch, 0.5-0.7s with this patch. EDIT: up to 1.0-1.5s after running for several hours (poolsz still ~5000).
2677	18185669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18185669	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2677	18242132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18242132	gyver	Im not familiar enough with the code and the template structure to know what is possible so please bear with my uneducated suggestion. Would it make sense to have part of the template being computed asynchronously? Have a thread wake up regularly and build a base structure with a snapshot of the tx available. When a call to getblocktemplate or other RPC functions scaling in o(nb_tx) or worse is done, use the precomputed structure instead of the available tx. When a new block is known update the structure right away and/or swap with a temporary "quick to compute/0 tx" one until the thread can catch up and build one with available tx. I see params of getblocktemplate that obviously wont allow using this optimization (passing the transactions for the most obvious) but my lack of knowledge of the actual template format and build process makes me wonder what other params could prevent this kind of optimization to be useful. At least it seems to me that with no params the optimization should work and allow for o(1) scaling for getblocktemplate. In the end my suggestion only makes sense if most pools could benefit from it and arent forced to use params that prevent it from being useful.
2677	18242271	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18242271	gmaxwell	Thats what miner software should and (some) does do. .. but at some point you need to compute the data... and its good if its not a slow and expensive operation.
2677	18243098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18243098	jgarzik	ACK
2677	18243282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18243282	gyver	of course I agree speeding up the actual computation is desirable. I was wondering if it wouldnt make sense to implement this async technique in bitcoind itself. For example I suspect (again: uninformed guess) that slow calls to getmininginfo and getblocktemplate use the same access pattern to an internal tx structure and could benefit from the same optimization (at least they became slow on my node when the number of tx started to grow). At some point when multiple tools all implement the same algorithm on top of another tool the question of integrating this algorithm in the common tool becomes valid (the answer isnt always obvious though). It could become more obvious when the heavy client only makes sense for pool owners/miners (and most end-users have migrated to lightweight clients). Its just an idea to test the waters (mainly to avoid wasting time with it if the template build process intrinsically cant benefit from this approach), its far from a feature request. Im more and more interested by the nodes source code and how I could play with it but I just scraped the surface...
2677	18245264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245264	gyver	still thinking about your suggestion and focusing on how miner software can optimize their latency when a new block is accepted by the local node. The miner doesnt want to use an old cached template to avoid wasting work but cant simply call getblocktemplate naively if it wants a fast reply (event after a new block there can be and often is a lot of transactions to include in a template). It can receive a notification from the node (there are already interfaces for that). I assume that to minimize latency it can call getblocktemplate with an emplty tx list to get a fast reply and immediately call it again without specifying the list to include txs as soon as possible. As many pools have closed source software Im not sure if they really implement this kind of behaviour. Latency issues may be solved by simply publishing recommendations for miner software instead of modifying bitcoind itself. As p2pool is probably the most likely to benefit from this, Ill link this post in the p2pool bitcointalk.org thread and continue there to avoid deviating even more from the subject here.
2677	18245577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245577	gmaxwell	Eloipool is free software an implements the optimizations you appear to be describing there. (precomputed empty templates and such).
2677	18245961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245961	gyver	thanks for the pointer. Was already in my large bag of source code to read but moved near the top of the pile :)
2672	18123657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123657	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2672	18134764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18134764	jonasschnelli	ACK looks good on mac. Started Bitcoin-Qt with -testnet. TN-Icon showed up simultaneous with the splashscreen.
2672	18140793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18140793	laanwj	Works for me. ACK for after 0.8.2 release Sidenote: This is all great and al, but can we start focusing on normal users again. Only a very small percentage of users will ever even see the testnet.
2672	18153356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18153356	Diapolo	Im fine with your sidenode, but as I use Testnet even more often than Mainnet, I wanted to make this "perfect" ;).
2672	18800682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18800682	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2671	18121198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18121198	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2671	18121759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18121759	Diapolo	Can you be more detailed with your commit message like ``fix memory leak in CKey::SetCompactSignature()``?
2671	18122550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122550	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2671	18122718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122718	Diapolo	Alright, can you now please also squash those 3 commits into one.
2671	18122787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122787	bytemaster	Dont know how to do that... On May 19, 2013, at 2:53 PM, Philip Kaufmann <notifications@github.com> wrote: > Alright, can you now please also squash those 3 commits into one. > > > Reply to this email directly or view it on GitHub. >
2671	18122815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122815	Diapolo	``git rebase origin -i`` replace ``pick`` with ``reword`` for the first commit and edit the commit message replace ``pick`` with ``squash`` for commit 2 and 3 ``git push origin master -f`` Im just ensuring with my comments, that core devs will merge your commit :).
2671	18123194	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123194	jgarzik	Seems correct at first glance. Id have to review the functions called in SetCompactSignature() before ACKing, to be 100% certain
2671	18123291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123291	sipa	ACK
2671	18123317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123317	bytemaster	I believe there is also a memory leak on Line 331 (same issue). I can roll that into this patch or create a new one. On May 19, 2013, at 3:29 PM, Pieter Wuille <notifications@github.com> wrote: > ACK > > > Reply to this email directly or view it on GitHub. >
2671	18123522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123522	Diapolo	If there are more leaks in key.cpp it would be fine to have fixes in this pull for them IMHO.
2671	18124031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18124031	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2671	18124640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18124640	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2671	18140930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18140930	laanwj	ACK (though ideally we should be using RAII so that these kind of mistakes cannot be made)
2671	18153974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18153974	Diapolo	How did you find these problems, just by browsing the code of via some tool?
2671	18160074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18160074	bytemaster	I was using the source code as an example for creating my own ECC library. The real question is what kind of security implications are there? Could someone construct transactions to exploit these leaks? I doubt anyone could lose coins, but you could crash all of the nodes on the network with the right kind of trx spam. On Mon, May 20, 2013 at 11:34 AM, Philip Kaufmann <notifications@github.com>wrote: > <https://github.com/bytemaster> How did you find these > problems, just by browsing the code of via some tool? > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2671#issuecomment-18153974> > . >
2671	18160733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18160733	gmaxwell	We only use key recovery for verifymessage (the manual message signing stuff), and we only sign in response to user/rpc request, never P2P. Unless Im missing something here there is no such risk in these cases. (None the less the fixes are fantastic and also point out the memleak testing Ive been doing recently, which hasnt involved using sign message or creating transactions while under instrumentation, is inadequate. thanks!)
2671	18163212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18163212	sipa	CompactSignature is indeed only used for message signing, so there is no remote vulnerability. Also, see #2600, which does a large refactor of the key.cpp code (it moved EC_KEY into an internal RAII wrapper, though not EC_SIG)
2671	18326242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18326242	Diapolo	Wouldnt have hurt to pull this for 0.8.2 RC2 ;)?
2671	18381392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18381392	gmaxwell	Im not eager to pull a fix for a non-network triggerable leak that I cant (easily) reproduce right before a release.
2670	18123544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123544	Diapolo	Im going to take a look next week, can you post a screen until I do :)?
2670	18140343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18140343	laanwj	OK selection ![x01](https://f.cloud.github.com/assets/126646/537622/9d0cacce-c176-11e2-9d9d-1e085fe11936.png) Warning when directory already exists, user can still click OK ![x02](https://f.cloud.github.com/assets/126646/537629/d36f0366-c176-11e2-87f9-a421fe9f4958.png) Invalid or unreachable path ![x03](https://f.cloud.github.com/assets/126646/537630/d68c936a-c176-11e2-9d3c-b8fb7a1150b6.png) Too little free space on device ![x04](https://f.cloud.github.com/assets/126646/537632/d93101dc-c176-11e2-843f-60f549005a1d.png)
2670	18147751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18147751	laanwj	Changed Gb -> GB, checking now happens in separate thread to prevent blocking the GUI thread.
2670	18153882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18153882	Diapolo	Just some small comments: - Do you allow OK even when low disk space was detected, looks like OK is available there. - Do you intend to show this even for existing installations or just new ones (and for existing ones when supplying ``-choosedatadir``)? - What happens when a user supplies ``-choosedatadir``, will you copy old to new or just switch from old to new? - Do we want to place a clickable URI to official Bitcoin site here or anywhere else in the client? I think that would be a good addition. - Perhaps display ``none`` for available space when case "Invalid or unreachable path" - Perhaps we could also add a clickable button for launching ``-choosedatadir`` into the options dialog, when I finish my work there?
2670	18154547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18154547	laanwj	<i>&gt; Do you allow OK even when low disk space was detected, looks like OK is available there.</i> Yes. The user can choose OK in all cases where its possible to create the directory. They may plain on cleaning up the drive immediately (ie, deleting one blueray image should be enough to make space). In the end its their own responsibility. <i>&gt; Do you intend to show this even for existing installations or just new ones</i> Only for new installations (when the default data directory doesnt exist). Otherwise it will confuse users into making a new data directory and they will wonder where their block chain / wallet will have gone. <i>&gt; Do we want to place a clickable URI to official Bitcoin site here or anywhere else in the client? I think that would be a good addition.</i> Im not sure why, unless it links to an explanation about data directories. But feel free to add more flair to the window later. Im just focusing on the functionality for now. <i>&gt; Perhaps display none for available space when case "Invalid or unreachable path"</i> Yeah... or N/A <i>&gt; Perhaps we could also add a clickable button for launching -choosedatadir into the options dialog, when I finish my work there?</i> I dont want to support changing the data directory while the client is running. If the user wants to move the data directory they can do so themselves while the client is not running, and the "choose data directory" dialog will automatically pop up on next run as the software notices that the data directory does not exist.
2670	18159921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18159921	gmaxwell	ObUIshedpaint (feel free to ignore): The first "Warning:" is perhaps a bit intense and should probably be more reserved for things with risk of irreparable harm (encrypting wallets, deleting wallet directories, sending a 1000 BTC fee, etc.). Using space is just a fact of normal software operation and is nothing to be concerned about... unless you dont have enough so I think its okay in a low/insufficient space case...
2670	18161639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18161639	laanwj	fixed that, all the warnings was indeed a bit over the top
2670	18165028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18165028	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	18187291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18187291	rebroad	"official bitcoin site"?! I suspect you mean "original satoshi client site"... > Do we want to place a clickable URI to official Bitcoin site here or anywhere else in the client? I think that would be a good addition.
2670	18190661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18190661	jbreher	Just a question. When you write GB, do you really mean GB - i.e. 10^9, or do you instead mean GiB - i.e. 2^30 ? On May 20, 2013, at 7:41 AM, Wladimir J. van der Laan wrote: > Changed Gb -> GB, checking now happens in separate thread to prevent blocking the GUI thread. > > > Reply to this email directly or view it on GitHub. >
2670	18190705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18190705	laanwj	No, he means the Armory site obviously... GB as in 10^9. This is Bitcoin, we use SI units.
2670	18190863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18190863	Diapolo	I really hate that GiB stuff, for me all units are 1024 based but I would never use GiB, KiB or such nonsense ^^.
2670	18191512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18191512	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	18192258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18192258	laanwj	Ugh, Im trying to find out the OS path separator using make_preferred() for a message but this doesnt exist on the ancient boost used by pulltester.
2670	18192350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18192350	laanwj	Should be solved now.
2670	18192352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18192352	Diapolo	I also think we should drop support for ancient Boost version. I never understood, why it is a problem to do so anyway.
2670	18193146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18193146	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	18247220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18247220	jbreher	I understand that many hate it. However, your insistence on casually using units which never had any standards organization bless them in any way leaves you perpetuating a needless ambiguity, and in conflict with SI, ANSI, NIST, ISO, IEC, ITC, IETF, BSA, and just about any accredited standards organization one might care to name. All of whom have issued clear guidance that (e.g.) GB _always_ refers to 10^9, and GiB _always_ refers to 2^30. On May 21, 2013, at 12:07 AM, Philip Kaufmann wrote: > I really hate that GiB stuff, for me all units are 1024 based but I would never use GiB, KiB or such nonsense ^^. > > > Reply to this email directly or view it on GitHub. >
2670	18252993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18252993	rebroad	As someone who has been using computers since 1979, I can confirm that KB always referred to 1024 and only recently did I notice that people confusingly started using KB to refer to 1000, and this confusion has been further compounded by the addition of the term KiB. On May 22, 2013 5:58 AM, "Joe Breher" <notifications@github.com> wrote: > I understand that many hate it. However, your insistence on casually using > units which never had any standards organization bless them in any way > leaves you perpetuating a needless ambiguity, and in conflict with SI, > ANSI, NIST, ISO, IEC, ITC, IETF, BSA, and just about any accredited > standards organization one might care to name. All of whom have issued > clear guidance that (e.g.) GB _always_ refers to 10^9, and GiB _always_ > refers to 2^30. > > > > > > On May 21, 2013, at 12:07 AM, Philip Kaufmann wrote: > > > I really hate that GiB stuff, for me all units are 1024 based but I > would never use GiB, KiB or such nonsense ^^. > > > > > > Reply to this email directly or view it on GitHub. > > > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2670#issuecomment-18247220> > . >
2670	18255963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18255963	laanwj	Can you take the units discussion elsewhere please? These kinds of discussions can go on for centuries (lets settle imperial versus metric first when were at it) and still go nowhere. We dont have time for that.
2670	18724042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724042	Suffice	Perhaps have two choices when the client starts up for the first time, the first to download the block chain with all the defaults, and the second being to change the data directory or whatever. This will alleviate the technicality of it for non-technical people, and make the first dialogue screen more welcoming. Something maybe like: Start Block Chain | Change Directory
2670	18724174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724174	sipa	As a follow-up, maybe there can be some menu option "Move datadir", which requires a restart immediately afterwards (or not, but thats definitely a lot more work). I think thats independent from this pullreq, which already improves 99% of use cases.
2670	18724463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724463	laanwj	yeah maybe... but I *do* want to make sure people see the warning about downloading 10Gb, as one of the reasons for this is that people dont get freaked out later when they see their harddisk being filled up. In any case they already accept the default by clicking "OK" immediately. On a fresh install, it will initially show the default data directory. Could be useful option. But I feel better about that once block chain dir != wallet dir. No problem with moving the block chain, it can be redownloaded if the user makes a mistake, but as moving implies a delete I dont really want to "move" the wallet.dat. Copy at most. Let people that know what theyre doing do this manually for now.
2670	18724649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724649	sipa	ACK, separating datadir from wallets must happen first.
2670	18730089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18730089	laanwj	![default](https://f.cloud.github.com/assets/126646/589677/2f89fd14-c9c8-11e2-9485-2118c7a87dd8.png) this is better I think. It makes clear that the initially selected directory is the default, and requires an extra radio button click to change it to prevent it from being changed cluelessly. And it still shows what the default data directory is (though disabled), and whether there is enough space there.
2670	18764306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18764306	Suffice	I dont know anymore. . Pulling this off in best way possible is tricky. This is how most program installs look: ![capture](https://f.cloud.github.com/assets/1063102/592594/c0ef55aa-ca1e-11e2-8b17-5af8f888d2cb.png) Perhaps something like this: Some concise text here for an explanation of something The block chain and your wallet files will go here... [ C:\Program Files (x86)\Bitcoin ] [ Browse... ] Space required: 10.3 GBs Space available: 32.4 GBs The space required for the block chain will increase over time as the chain grows. (The block chain is essentially a ledger of every bitcoin transaction ever.) Some buttons here I noticed that the block chain is currently stored in the AppData directory on Windows, will that change? It would be nice if the wallet auto purged parts of the block chain that are no longer needed, and perhaps requests parts of the chain that it needs again, like in the event of importing addresses. (Tricky) New clients could start from the near end of this chain, as they wont likely need the whole chain.
2670	18770290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18770290	laanwj	<b>I noticed that the block chain is currently stored in the AppData directory on Windows, will that change?</b> After this pull it will be possible to change that, at least on new installs, thats the point of it.
2670	18801158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18801158	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	18833985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18833985	jonasschnelli	Thats how it looks on mac with Qt 4.8.4: ![bildschirmfoto 2013-06-03 um 12 55 00](https://f.cloud.github.com/assets/178464/598893/4cb5f656-cc3c-11e2-9c5c-d482fc0185af.png) ![bildschirmfoto 2013-06-03 um 12 54 31](https://f.cloud.github.com/assets/178464/598894/4cf245de-cc3c-11e2-9c63-0bc0a73dd458.png) ![bildschirmfoto 2013-06-03 um 12 54 16](https://f.cloud.github.com/assets/178464/598895/4cf0a06c-cc3c-11e2-945a-e0545d153ddd.png) Maybe the button for opening the file dialog must be rearranged a little bit?
2670	18836291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18836291	Diapolo	Can you display the path for the default data directory behind option one or as tooltip :)?
2670	18837130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18837130	laanwj	eh Ill take a look when you click the first option, it shows the default directory greyed out in the input field.
2670	18842006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18842006	Diapolo	Im currently trying to build and got 2 conflicts while rebasing to current master, can you take a look :).
2670	18852456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18852456	laanwj	Rebased, and ... changed to untranslatable. I still dont understand the macosx problem. The button is simply in a horizontal box layout (with no special settings) with the input field.
2670	18856094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18856094	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	18891373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18891373	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	19027981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19027981	Diapolo	It behaves a little weird, let me explain: - default selected (``C:\Users\Diapolo\AppData\Roaming\Bitcoin``) -- message ``9GB of free space available (of 10GB needed).`` displayed - switching to custom, message is the same -- it doesnt show that this directory already exists -- adding a ``\`` leads to ``Directory already exists...`` -- adding a ``\test\ leads to ``Warning: Low disk space on device`` Edit: Sorry, I didnt have the recent rebase changes in my local branch... will test again! Edit 2: Behaviour is the same, I would await, that ``C:\Users\Diapolo\AppData\Roaming\Bitcoin`` is detected as existing path already, even without the ``\`` at the end. Did you take a look at this comments yet?
2670	19217341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19217341	Diapolo	Can you test if you are able to use a non-default language (no english) and that this is loaded? Either there is a bug in this pull or I have a problem with my local build related to this in combination with my QSettings work (or a problem with this and #2700?).
2670	19264212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19264212	laanwj	Rebased, and language problem solved (the QTranslators were getting freed).
2670	19370158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19370158	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	19445886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19445886	laanwj	does it still show the strange behavior on Windows? If so, any idea what causes that?
2670	19451069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19451069	Diapolo	Sugestion: Can you make the info/error messages selectable and show the beam-cursor? I also think the dialog could be a little smaller in height. Translations are working again! Anyway, Ill report what is happening, my default datadir is: ``C:\Users\Diapolo\AppData\Roaming\Bitcoin``. Start with -choosedatadir and default selected: 8GB free of 10GB needed message shown. Change from default to custom: 8GB free of 10GB needed message shown. Change path into ``C:\Users\Diapolo\AppData\Roaming\Bitcoi``: 8GB free of 10GB needed message shown. Warning: Low disk space on device shown. Change path into ``C:\Users\Diapolo\AppData\Roaming\Bitcoin\`` 8GB free of 10GB needed message shown. Directory already exists. Add \name... and so on, shown. ---- I think the default detected path ``C:\Users\Diapolo\AppData\Roaming\Bitcoin`` should show the Directory already exists message but the current implementation does this only after applying the ``\``, which I dont expect.
2670	19509451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19509451	laanwj	Should be solved now.
2670	19514254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19514254	Diapolo	The directory things and disk-space stuff is fixed, great :). Only thing left is the layout / size, I still think the dialogs height is too large and I would perhaps align the input field for the path and the message labels with the left border (like the selection boxes).
2670	19515842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19515842	laanwj	Feel free to play with the layout a bit...
2670	19517099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19517099	Diapolo	GUI can be improved later :-). ACK
2670	19651776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19651776	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2670	20918424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20918424	Diapolo	Can we perhaps merge this now :)?
2670	20935122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20935122	sipa	ACK - seems to work fine.
2669	18109952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18109952	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2669	18110685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18110685	Diapolo	This will not show up for Bitcoin-Qt as your code is in between ``#if !defined(QT_GUI)``. For Qt you would need such a thing in bitcoin.cpp via a to be defined ``GUIUtil::VersionMessageBox``.
2669	18111046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18111046	nmarley	It is compiled into Bitcoin-Qt as well. It is in the same place as the `--help` option in the code. The output below is from Bitcoin-Qt on OSX. You can see from the output the `--help` option exists there. This change will do the same thing, except show only the version. ``` ~ % /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt --help Bitcoin-Qt version v0.8.1-beta Usage: bitcoin-qt [command-line options] Options: -? This help message -conf=<file> Specify configuration file (default: bitcoin.conf) -pid=<file> Specify pid file (default: bitcoind.pid) ```
2669	18111069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18111069	Diapolo	See
2669	18257439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18257439	luke-jr	-v should be some kind of verbose flag usually... -V seems better for --version
2669	18396310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18396310	laanwj	Agree with here
2669	18399976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18399976	schildbach	Agree also with . "-v" should be reserved for "--verbose".
2669	18401579	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18401579	Diapolo	I still think this wont work for Bitcoin-Qt, see my comments above about ``--help``.
2669	18407219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18407219	nmarley	I had to get my development environment setup to compile Bitcoin-Qt. I have now verified this wont work for Bitcoin-Qt. Thanks Philip. I am closing this pull request.
2669	18407959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18407959	laanwj	no need to close the issue, you can re-push to the same branch after youve fixed it and it will show up here
2666	18097372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18097372	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2666	18108993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18108993	sipa	ACK Some of the the documentation is actually outdated, but fixing that is not in the scope of a formatting update.
2666	18109037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18109037	super3	Yeah, it was pretty crazy in there for some of the files. Can you point out some of the stuff that is outdated or needs work? I kinda want to start at the build notes first.
2666	18125362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18125362	laanwj	ACK after squash into one commit
2666	18128697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18128697	super3	All in one commit now.
2666	18129129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18129129	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2666	18132441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18132441	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2665	18089495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18089495	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2665	18089602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18089602	gmaxwell	I dont know what this is, but it doesnt belong here. :)
2663	18075646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18075646	gmaxwell	This is the wrong thing to do. We need specific sizes for specific normative behavior in many places, not all systems use the same sizes for primitive types. The stdint.h _t named size types are standards specified by SUS and in C++11.
2663	18076819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18076819	pshep	Ah right. Compiling for another platform and these arent defined - throws errors. Searched the rest of the bitcoin code and saw no other instances of *_t being used. Its unique to this file (well, aside from LevelDB)
2663	18077321	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18077321	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2663	18081749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18081749	luke-jr	Eventually, it would be nice to migrate everything bit-specific to the standard [u]intN_t types, but the last attempt to do so had some issues. In addition to C++11, stdint.h was also part of C99 (1999, over 13 years ago) - perhaps you can get the header that way somehow?
2661	18063746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18063746	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2661	18083698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18083698	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2661	18087395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18087395	rdponticelli	The error on pulltester doesnt seems to be related to these changes, right?
2661	18099344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18099344	laanwj	Im a bit wary of merging fixes that I dont understand, although it would be ok for 0.8.2. Can you debug where it crashes when the premature returns are not done? Candidates are: clientModel->getLastBlockDate() clientModel->getVerificationProgress() If clientModel would not be set at all it would crash with a SIGSEGV so I dont think that could be it. For the rest the function only updates Qt controls, a very unlikely cause of crashes.
2661	18101732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18101732	rdponticelli	Yes, Im trying to debug this further. But at least if 0.8.2 have to come out quick, this hotfix might be better than nothing...
2661	18104826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18104826	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2661	18106048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18106048	rdponticelli	Meh, it doesnt fix it. It just bypasses it in that special case... Looks like in that environment it always crashes when it tries to show the progress bar... Now it hangs when I launch it with reindex, and it does it too in 0.8.1...
2661	18106140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18106140	rdponticelli	Adding a -noprogressbar option would be overkill, right?
2661	18110646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18110646	Diapolo	So are we facing a Qt bug here? What Qt version is your version of Bitcoin-Qt using?
2661	18114064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18114064	laanwj	I really doubt its a Qt bug. That kind of isolates it to clientModel->getVerificationProgress() (as this is new in 0.8.2) Should be pretty easy to find out. Can you try commenting it out and replacing it with a fixed number and see if it still hangs? Edit: and yes, a `-noprogressbar` option is out if the question :)
2661	18116432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18116432	Diapolo	What is that magic number here telling? ``progressBar->setMaximum(1000000000);`` Did you try yet what laanwj suggested above?
2661	18118014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18118014	rdponticelli	Replacing clientModel->getVerificationProgress() by a constant it works. Might be the problem that on this setup the only block available is the genesis block?
2661	18120046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120046	laanwj	just an arbitrary number AFAIK Good, that at least isolates the issue. So that function has a bug that makes it crash with only the genesis block. At least on your setup. I have not noticed this myself, when starting with an empty data directory. Im unable to reproduce it.
2661	18126154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18126154	rdponticelli	and/or Is it intended and correct that BitcoinGUI::setNumBlocks is called twice at startup?
2660	18054881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18054881	TheBlueMatt	Rebased on gmaxwells remote may 15th stuff since the test-patches otherwise conflict
2660	18056004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18056004	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2660	18242810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18242810	TheBlueMatt	Pushed a new commit to fix the obvious GetMinFee bug I missed the first time, probably at least cherry-pick that for 0.8.2
2660	18245800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245800	gmaxwell	"if (txout.nValue < CENT)" is guarded by "if (nMinFee < nBaseFee)" thus the max is unneeded.
2660	18245907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18245907	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2660	18262674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18262674	TheBlueMatt	Hah, well I suppose thats what happens when you skim...sorry for all the confusion.
2660	19013009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19013009	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2660	19452311	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19452311	TheBlueMatt	Rebased and updated to remove the redundancy with MAX_STANDARD_TX_SIZE.
2660	19497578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19497578	sipa	ACK
2660	19531529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19531529	mikehearn	ACK
2660	19653346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19653346	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2658	18032219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18032219	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2658	18045139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18045139	Diapolo	I think it would be nice to not just use our default cryptic message, but provide some details (not only for this new condition).
2658	18089071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18089071	mikehearn	Overall looks good to me. Agree with Diapolo that the log message could be more helpful, like by including the fork block hash and stating why transactions may be incorrect.
2658	18093162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18093162	TheBlueMatt	OK, rewrote the alert messages, now you get: Warning: Large-work fork detected, forking after block $HASH for %s in -alertnotify "CheckForkWarningConditions: Warning: Large valid fork found\n forking the chain at height %d (%s)\n lasting to height %d (%s).\n" in debug.log for large valid-work fork "CheckForkWarningConditions: Warning: Found invalid chain at least ~6 blocks longer than our best chain.\n" for the previous warning condition. and translated versions of either "Warning: We do not appear to fully agree with our peers! You may need to upgrade, or other nodes may need to upgrade." for large, valid fork or "Warning: The network does not appear to fully agree! Some miners appear to be experiencing issues." for the previous warning condition. in getinfo/status bar.
2658	18093475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18093475	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2658	18966187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18966187	mikehearn	Looks good to me.
2658	19863626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19863626	sipa	I think this code belongs in main rather than alert (rationale: it needs access to the current chainstate, which is maintained by main - alert shouldnt need a dependency on that). Code in general looks good, but needs a rebase. Also, I expect the most common case for a message like this to be a locally corrupted database. Maybe that is worth mentioning is the text?
2658	20469689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20469689	wtogami	Interesting ... "CheckForkWarningConditions: Warning: Large valid fork found\n forking the chain at height" can happen with a daemon that does not fail if your database is corrupted in just the right way. Sorry I dont have a copy of the corrupted database to demonstrate this. I can imagine this will be a false alarm for someone in the future, and it would be ideal if the daemon had a way to differentiate between database corruption and a genuine problem on the network.
2658	20551510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20551510	wtogami	Also note that this puts lots of needlessly scary-looking warnings in debug.log during a reindex. Perhaps it should be silent during a reindex if prior to the last checkpoint?
2658	21091143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091143	luke-jr	Rebase needed.
2658	21334120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21334120	TheBlueMatt	Hmm...I dont see any fork messages during -reindex, are you talking about a -reindex on a corrupted chainstate?
2658	21335281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21335281	TheBlueMatt	Rebased, moved code to main.cpp, because its not like that file isnt already too full.
2658	21386907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21386907	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2658	21435281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21435281	mikehearn	LGTM. Can we merge this now?
2658	21465367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21465367	wtogami	Is the patch intended to warn about forks during the -reindex process where it is unnecessarily scary? Can it be somehow silent about forks until after the last checkpoint?
2658	21465993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21465993	gmaxwell	Please do not further overload checkpoints. ... but yea, warning during reindex is obviously not good. :)
2658	21466257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21466257	luke-jr	Probably a condition of this should be "at least one block in the fork must have been rejected by us"?
2658	21535251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21535251	gavinandresen	RE: warning during reindex: suppressing the alert if best-other-tip-time is more than a day (a week? or maybe if max(other-tip-time, best-tip-time) is...) in the past is probably the right thing to do: reasoning would be we dont care about old fork events that have long-since been resolved. But before implementing that, can we get a block index that demonstrates false positives during a reindex? (Ive got a corrupt chain that Ill copy and then reindex if somebody else doesnt beat me to it).
2658	21537259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21537259	wtogami	I removed these three patches from litecoin-0.8.x not because it was broken, but from concern that it would unnecessarily scare people with false positives that appeared to me during a normal reindex. Although I am not entirely certain it was the type of false positive you are asking for. I didnt investigate too hard as it seemed best to simply remove the patches for the upcoming release meant to minimize risk. litecoin-0.8.3.6 is comprised of a merge of the following two branches litecoin specific commits on top of bitcoin-0.8.3 Select bitcoin-0.9 cherry-picks applied on top of bitcoin-0.8.3 Add these back to litecoin-0.8.3.6 and -reindex to see noisy warnings.
2658	22385254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22385254	wtogami	FYI: I tested it yesterday after re-applying the three patches above (an older version of this PR that applied cleanly to bitcoin-0.8.3, prior to the recent rebase). A fresh Litecoin blockchain sync and a subsequent -reindex both were uneventful. A month ago I saw loud and scary warnings during -reindex twice in a row. I dont know what is different now. Would a fresh sync with additional checkpoints result in a different local blockchain sans historic forks? Whatever the issue, I am unable to reproduce it with this freshly synced chain now. A month ago I had a corrupted database that exhibited a great many errors in the log but did not crash. sipas post immediately before it said, "Also, I expect the most common case for a message like this to be a locally corrupted database. Maybe that is worth mentioning is the text?" Was his question addressed?
2658	22545695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22545695	gavinandresen	ACK. I re-indexed an old chain that has lots of forks and got no scary warnings.
2658	22551666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22551666	mikehearn	I updated BIP50 with the fact that this is done. Great work Matt!
2657	18027469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18027469	gmaxwell	I assume wed pull this after 0.8.2.
2657	18027910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18027910	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2657	18030121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18030121	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2657	18031075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18031075	TheBlueMatt	What? you couldnt just use the commits in those patches? ACK
2657	18659282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18659282	sipa	ACK
2657	18664972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18664972	laanwj	ACK
2655	17919676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17919676	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2655	19873364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19873364	fanquake	Decided that this is essentially two separate issues that should be in separate pulls. Going to close this and open separate ones in the future.
2652	17819608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17819608	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	17813956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17813956	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	18409772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18409772	jonasschnelli	can you review again? Now the transaction gets prepared and the instance will be used to commit the transaction.
2651	18412766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18412766	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	18461525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18461525	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	18776129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18776129	laanwj	Looks like the correct way forward! I wonder about one thing, though: As the wallet lock is released in the time between the creation of the prepared transaction and committing it (which in principle is a good thing, otherwise everything using the wallet will hang), it seems possible for another spend in the background (for example, through RPC) to spend the inputs used by the transaction. Im not sure what would happen in this case. An error would be fine, but crashing out or creating an invalid/double spend transaction is not. Well have to check and test this case carefully.
2651	18824958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18824958	jonasschnelli	good catch. The QMessageBox can stay open till infinity (it needs user action). So,... the missing wallet locking can be quite a problem. I do test now what happens when i keep open the message box and trigger another payment with rpc.
2651	18827324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18827324	jonasschnelli	Did some testing. When spending the coins (whole wallet balance) in background using RPC sendtoaddress during the open QMessageBox (asking for confirmation), i get a correct error when trying to spend the prepared transaction (`WalletModel:sendCoins`) `TransactionCommitFailed`. Error handling is fine in my eye. I focus now on the string generation for informing the user about the fee.
2651	18828534	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18828534	jonasschnelli	squashed and ready for ACKs :)
2651	18830246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18830246	Diapolo	I think the dialog boxes look a little disturbed and should be perhaps a little more tidy. My idea would be to design it as a list to be more easily readable and the fee display as an addittional sentence at the end. <pre> Are you sure you want to send? XY BTC to: %LABEL% (%ADDRESS%) XY BTC to: %LABEL% (%ADDRESS%) ... ---------------------- This transaction requires a fee of %FEE%. </pre>
2651	18830350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18830350	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	18833096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18833096	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	18835314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18835314	rebroad	Please bear in mind people who use high contrast themes who are visually impaired. The OS needs to be able to use the correct colour in this situation.
2651	18835699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18835699	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	18836226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18836226	Diapolo	Looks very nice :), if you only could change ``this transaction requires a fee of XYZ BTC`` into ``This transaction requires a fee of XYZ BTC.`` (uppercase start and ``.`` to make it a sentence) ^^. I hope people dont mess with the HTML stuff when translating on Transifex...
2651	18836926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18836926	jonasschnelli	Will fix the typo. what do you think if we take the html stuff into separates stings. Goal: exclude html from tr stuff. It might be then a bit a string gluing battle. But prevents us from messed up transiflex sources.
2651	18837166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18837166	Diapolo	Lets see what thinks, but if possible I would prevent big HTML stuff in translatable strings if possible, like you suggest.
2651	18837785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18837785	laanwj	I agree, better to let people translate only the messages and keep the surrounding html fixed.
2651	18837965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18837965	jonasschnelli	okay. Let me slice the strings...
2651	18840114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18840114	jonasschnelli	did some string slicing. But im not sure if its still readable like this and might also leads to transiflex problems. Id prefer the previous version...
2651	18841128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18841128	laanwj	IMO this is not much better, instead of html the translation messages now contain lots of %%%. If you want to slice the strings, why not use concatenation (+) instead of all the interpolation? Or maybe well just have to accept a little html in the translation strings if its the least worst option...
2651	18846896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18846896	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	19002133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19002133	wtogami	Could you please squash the commits, rebasing on top of master?
2651	19099969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19099969	jonasschnelli	rebased, squashed, updated. - Added new string recommended by - overhauled string gluing like recommended. Now it looks like: single no fee (std case): ![bildschirmfoto 2013-06-07 um 12 31 40](https://f.cloud.github.com/assets/178464/623262/5ce7181e-cf5e-11e2-9fcc-5cb8fdd13f0a.png) single with fee: ![bildschirmfoto 2013-06-07 um 12 32 13](https://f.cloud.github.com/assets/178464/623264/6855a300-cf5e-11e2-8a91-ed5e0aeb3bb2.png) multiple recp. no fee: ![bildschirmfoto 2013-06-07 um 12 31 48](https://f.cloud.github.com/assets/178464/623265/733f93c0-cf5e-11e2-822b-5f3d70fb3182.png) multiple recp. with fee: ![bildschirmfoto 2013-06-07 um 12 32 22](https://f.cloud.github.com/assets/178464/623266/7c2d6dd6-cf5e-11e2-9b17-043ac6c3ad92.png)
2651	19100254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19100254	Diapolo	Looks really nice now, just add a little ``!`` after fee to make it a sentence and you have my design ACK (Im not deep enough into Tx-code to ACK that part)!
2651	19100408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19100408	jonasschnelli	agree for the "!". Added, commited, pushed.
2651	19100488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19100488	Diapolo	ACK
2651	19117789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19117789	sipa	Looks good. Havent checked the code or tested. One question: what does a voluntary fee look like?
2651	19123165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19123165	jonasschnelli	It does look the same (check screenshot with voluntary 0.1BTC fee): ![bildschirmfoto 2013-06-07 um 20 03 04](https://f.cloud.github.com/assets/178464/625337/a6e8cdc0-cf9c-11e2-83fe-6ef6db740474.png) Maybe the sentence need to be changed. What do you think?
2651	19123315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19123315	PRab	Just changing "required" to "added" makes it sound good to me.
2651	19123370	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19123370	jonasschnelli	okay. sounds good. Let me check how i can detect if vol. or req. fee.
2651	19124726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19124726	wtogami	+1 to "required" or "added" depending on if it is required or voluntary.
2651	19129672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19129672	cozz	I am trying to merge this in coin control, there seems to be a serious bug in how you handle CReserveKey keyChange. If you send a transaction which creates change, the wallet gets permanently locked. Simply send 2 transactions in a row, to test this, but you must have change. You can also send a transaction and then try to create a new address in the receive tab -> runtime error. bitcoin-qt: /usr/include/boost/thread/pthread/recursive_mutex.hpp:107: void boost::recursive_mutex::lock(): Assertion `!pthread_mutex_lock(&m) failed. Would you mind to take a look at this? Besides that, good job man, looking great.
2651	19138661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19138661	laanwj	I like this. One nit though: I think highlighting the fee in red as well as adding an exclamation mark is over the top. Thats only warranted if the fee is high compared the the amount to be sent. Otherwise, just use a period, no need to scream.
2651	19141802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19141802	rebroad	I agree. It also potentially discriminates against visually impaired people if it cannot be overridden by the operating systems theme. On Jun 8, 2013 6:40 AM, "Wladimir J. van der Laan" <notifications@github.com> wrote: > I like this. > > One nit though: I think highlighting the fee in red as well as adding an > exclamation mark is over the top. Thats only warranted if the fee is high > compared the the amount to be sent. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2651#issuecomment-19138661> > . >
2651	19144191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19144191	laanwj	Thats a subject for another pull request. We have quite a few hardcoded colors at the moment. It would be nice to be able to override them with a theme for example with a css file. But to keep the scope of this pull request limited, red will do for now.
2651	19144273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19144273	wtogami	Although please look into the issue identified by cozz.
2651	19164925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19164925	jonasschnelli	Thanks for the report. The problem might be, that the `return` of the new `prepareTransaction` method is within the `LOCK` block. I will clean this up and move the return out of the LOCK block.
2651	19165001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19165001	jonasschnelli	Updated. Exclamation mark is removed. Voluntary gets detected. LOCK problematic "could" be fixed. can you retest? Can somebody have a closer look into the `prepareTransaction` and `sendCoins` methods? Especially the locking, etc.?
2651	19234518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19234518	cozz	I still have the lock-problem. I have tested on linux and windows. I think the problem is that CReserveKey keyChange(wallet); is defined in the function. I can fix the problem when I define CReserveKey as a pointer, but then it may be memory leaked I guess, if not deletes added. So you could do this or you could define CReserveKey in sendcoinsdialog and pass it as a parameter. But there you cant call CReserveKey keyChange(wallet); because wallet does not exist. So you could define a pointer here and then call "new CReserveKey" in prepareTransaction. And then cleanup CReserveKey in sendcoinsdialog after it is not needed anymore. Maybe its just me, but whenever I try to send 2 transactions with change in a row it crashes.
2651	19237945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19237945	cozz	To determine whether a fee is added or required in the case where you have set a voluntary fee is not possible, createTransaction does not tell you that. It tells you how much fee has been added, but not why. So to provide really accurate "added/required" message, we would have to add a boolean return fForcedFee to createTransaction. Or we could simply write "added" in all cases to make it simple here.
2651	19249409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19249409	sipa	Im fine with just saying "added" here. About CReserveKey: would it help to remove its dependency on CWallet, and have the CWallet passed explicitly when needed (when getting a pubkey, or when keeping/returning)?
2651	19249536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19249536	jonasschnelli	I do compare the requiresFee from createTransaction with the possible voluntary fee from the settings. If the value is the same, it must be a voluntary fee. Or not?
2651	19251183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19251183	laanwj	Its a possible check - but just that the value matches does not provide certainty. For now I strongly prefer always using "added" to prevent unneccesary complexity. Such checking could always be added in a later pull and reviewed and tested separately.
2651	19252993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19252993	jonasschnelli	We could change to "added" in all cases. But my understanding is that the user should be happy when he set (example) a 0.001BTC vol. fee in settings and then read "added" (even when the tx would require 0.001BTC as fee). When the tx fee would be higher, it would then be "required".
2651	19260459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19260459	laanwj	Yes -- but mind that the fee set in configuration is per KB, so at least youd have to do some computations as well. Im not comfortable with the UI making guesses based on the amount. That logic doesnt belong there. On the other hand Im fine with a solution in which CreateTransaction returns a flag whether the fee was voluntary or not (as suggest), but it should not be in this pull request. Lets just try to get this merged with the current functionality, as its very nice to have.
2651	19260716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19260716	jonasschnelli	Okay. Lets move the added/required distinction to a possible upcoming pull. I will just change it to "added". I try now to fix the CReserveKey thing...
2651	19371257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19371257	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	19377310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19377310	jonasschnelli	ive updated the CReserveKey handling. The CReserveKey will now no longer be passed around. I decided to keep it as a instance var of walletmodel (including a new cleanup transaction method). If you could review it.. would be appreciated. if you find time: Could you do a retest (it sounds that you have a proper test-setup).
2651	19379206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19379206	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	19381566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19381566	laanwj	I dont like the temporary state in WalletModel. This is a similar concern as I have with the coin control patch (which, last time I checked, added output selection state). Such state causes possible concurrency issues, what if a new transaction is created before the old one is cleaned up. At least a leak. Id prefer the transaction object returned from preparetransaction to be self-contained,and not leak its implementation to clients. Maybe create a WalletModelTransaction class?
2651	19382110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19382110	jonasschnelli	yes. These states are really not easy to handle. They need a very clear work to avoid leaks, etc. The problem is, that im going deeper than i should. :) I do not see the root cause of the CReserveKey problem as i also do not have a test setup to debug it. The WalletModelTransaction class sounds after a good idea. For now it looks a bit overheaded but its extendable and its a good base for other "changes" (CoinControl) in that area.
2651	19385042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19385042	laanwj	Yeah, point on overdesign taken. My initial design idea was to keep the UI and core as separare as possible, so all communication and usage of core data structures happens through models (signmessafe was the first to break this). It thus makes me a bit sad to see more and more includes of core headers leaking into non-model UI files, and core data structures there being used directly. In any case, good work here!
2651	19414686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19414686	cozz	It works for me now.
2651	19529826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19529826	jonasschnelli	Update code, moved transaction-stuff to a own class. could you please re-test one more time? code-review?
2651	19654782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19654782	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	20239417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20239417	cozz	tested again, seems to work, just some minor things I have noticed: - required/added still there - remove file src/walletmodeltransaction.h, it doesnt belong there, accident I guess. model and qt code should not be in src-folder anyway - you forgot transaction.setTransactionFee(nFeeRequired); in walletmodel.cpp line 196 before the return same thing line 168 transaction.setTransactionFee(nTransactionFee); before the return - uint64 totalTransactionAmount in sendcoinsdialog.cpp, I would remove this and make a get-method in class WalletModelTransaction instead, thats what the class is there for
2651	20298556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20298556	jonasschnelli	Thanks will have a look at it soon/tmr
2651	20724560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20724560	jonasschnelli	cleaned up and fixed issues reported by Ready for some final ACKs.
2651	20725588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20725588	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	21288897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21288897	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	22095550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22095550	Diapolo	What is the current state for this pull?
2651	22097413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22097413	jonasschnelli	Sorry. Didnt realize that my turn is missing... will check it and give response soon. thanks for the reminder!
2651	22101242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22101242	Diapolo	No problem, I was just wondering, why that one isnt merged yet and saw there is an open feedback from and you surely need to rebase.
2651	22436205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22436205	laanwj	Yes, lets try to get this merged.
2651	22439288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22439288	jonasschnelli	Okay. Fixed the "amount plus fee exceeds balance" issue while setting the transaction fee in the transaction model to always 0. Some final ACKs?
2651	22439684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22439684	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	22439888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22439888	jonasschnelli	hmm... need to rebase.
2651	22440847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22440847	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	22474957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22474957	jonasschnelli	did cleanup the code (fixed your pointing) and also got rid of the setOptionsModel in sendCoinsDialog.
2651	22475839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22475839	Diapolo	Thanks for your hard work here, I have to say sorry, but IMHO we need to check the data types for fee variables once more. In the core we use ``int64 nTransactionFee``, so AFAIK we should then match this in our Qt code by using ``qint64``, right? So places which you recently changed to ``quint64`` should be ``qint64`` to match core.
2651	22475993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22475993	jonasschnelli	yes. Ive also thought we should not use unsigned vars. I also prefer qint64. Let me change this.
2651	22476054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22476054	jonasschnelli	Now i use qint64 for fee "holders". Should now corespondent with the non-qt code where we use int64.
2651	22476394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22476394	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	22476508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22476508	Diapolo	Looks good now, lets see what thinks about the general idea now (use qint64 etc. in Qt code).
2651	22478480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22478480	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2651	23158321	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23158321	wtogami	ping
2651	23489900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23489900	Diapolo	Dunno if it needs another rebase, but ping :).
2651	23509006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23509006	laanwj	Looks good, ACK. Seems there are some minor conflicts with the payment request changes.
2651	23544540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23544540	jonasschnelli	Ill do a rebase soon...
2651	23548857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23548857	laanwj	I can do it too if you want
2651	23549008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23549008	jonasschnelli	If you have time, would be nice! Im busy with other stuff right now...
2651	23557143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23557143	laanwj	Will give it a try, though it seems more work than expected. Some areas (such as on_sendbutton_clicked) are pretty heavily hit by both your patch and paymentrequest.
2651	23579626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23579626	laanwj	See #2958 for rebased version.
2650	17798089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17798089	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2650	17805135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17805135	TheBlueMatt	If you want the debian packages to be updated to include new images (I dont really care), please also update the debian package scripts in contrib/debian (and probable email the debian maintainers afterwards to notify them that stuff should be changed, since they decided to use their own package scripts)
2650	17809734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17809734	jonasschnelli	Okay. Did change the script. I assume for the upcoming 0.8.2 release you will do the PPA lanuchpad package?
2650	17813898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17813898	TheBlueMatt	Please also update the changelog...and yes, Ill upload the debian stuff to launchpad when 0.8.2 is tagged.
2650	17814260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17814260	jonasschnelli	i have no deb experience. Hopefully the changelog is right now...
2650	17816787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17816787	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2650	17829359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17829359	TheBlueMatt	Aside from the above, ACK Oh, and please squash commits.
2650	17830248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17830248	jonasschnelli	okay. Changed ("Mo" => "Mon") and squashed.
2650	17831803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17831803	TheBlueMatt	ACK
2650	17832109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17832109	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2650	18414458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18414458	gavinandresen	I need help; the new icons break the win32 gitian build. The problem: Now, every time I run the NSIS installer to create the windows -setup.exe file, the sha checksum on the .exe is different. I havent been able to figure out why. I am guessing it is the bitcoin.ico file that is the problem, because that is the only file referred to by the .nsi script. Did the resolution or color depth or something change? Maybe NSIS is rescaling the image and using a randomized dithering algorithm or something ????
2650	18414794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18414794	jonasschnelli	Hmm.. the .ico file has changed and yes, I think there are different resolutions which the nsi script might cant handle. I will check it in the next hours and give you a feedback.
2650	18415577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18415577	gavinandresen	In case it helps, I tweaked the installer to do file-by-file zlib compression (instead of compressing the whole thing) and there is a 4-byte difference: (and another 4-byte difference at the very end of the file, which I think is a CRC checksum)
2650	18417291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18417291	sipa	Just the fact that the file has changed is not a problem: it doesnt explain why nsis deals with it in an indeterministic way. I checked nsiss source, and there are no rand() or random() calls except in their unit tests. Perhaps its related to the order in which files are returned by readdir() or something like that?
2650	18417394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18417394	jonasschnelli	you could also try to replace the .ico file with the old one and try again. Just to make sure its the .ico file... or something else like idea with the readdir order.
2650	18418215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18418215	gavinandresen	Replaced it with the old .ico, and makensis results are predictable again. Shouldnt be readdir() order, Im logged into my gitian VM and re-running the makensis command on exactly the same filesystem (not moving files around or anything). ALSO: FAKETIME is set, so any call to time() in makensis (I dont see any) shouldnt matter. PS: using version MakeNSIS v2.46-1 (subversion version 6009 I believe).
2650	18422258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18422258	jonasschnelli	I just re-created the .icon file. It was lacking of 3 resolutions. 20x20, 64x64 and a 32x32 256 color. The problem maybe is, that the required resolution was always generated (with somehow random elements). You might try again with the .ICO file:
2650	18425487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18425487	gavinandresen	All-resolution .ico seems to fix the problem. Go figure.
2650	18425558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18425558	jonasschnelli	Need another pull request with the new .ICO?
2650	18425862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18425862	gavinandresen	I can just push the new pixmap. Is src/qt/res/icons/bitcoin.ico used any more ?
2650	18426101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18426101	jonasschnelli	Im not sure which ico file is used for Win builds. src/qt/res/icons/bitcoin.ico was there when i started redesigning.
2650	18442230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18442230	laanwj	The icons in `src/qt/res/icons` are used during build of the executable itself.
2650	18445367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18445367	jonasschnelli	Can we not use the `share/pixmaps/bitcoin.ico` for the executable build and remove the `src/qt/res/icons/bitcoin.ico`?
2650	18449174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18449174	laanwj	I guess so. Youd also have to move the testnet icon there, and change the following file:
2649	17796578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17796578	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2649	17867572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17867572	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2649	18045669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18045669	Diapolo	No new translations available, so no update today :).
2649	18116954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18116954	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2648	17795309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17795309	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2648	17825071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17825071	laanwj	What dialog? I dont see any GUI changes :) Can you explain when this is useful?
2648	17826185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17826185	Diapolo	This is now shown, when you first-time add ``-txindex`` or when you first remove that comman-line option. ![txindex](https://f.cloud.github.com/assets/1419649/497008/f32b5dc0-bbf0-11e2-8e91-a2ff7c90750d.png) Clicking OK will directly start the reindex, without the need to supply ``-reindex``.
2648	18045678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18045678	Diapolo	What do you think?
2648	18226029	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18226029	sipa	What happens with bitcoind with this?
2648	18277984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18277984	Diapolo	Nothing (exit)? It prints to the console just like when a DB corruption is detected, which already is a dialog for Bitcoin-Qt and just a message for bitcoind.
2648	18659326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18659326	sipa	ACK. Right, that should be changed (weve had console users type ye in the terminal after bitcoind exits with "Do you want to reindex now?"), but thats outside of the scope of this PR.
2648	18691105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18691105	jgarzik	ACK
2648	18750888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18750888	laanwj	ACK
2648	18787183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18787183	Diapolo	Rebased, fixes merge-conflict.
2648	18805635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18805635	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2648	19372331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19372331	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2648	19450586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19450586	Diapolo	Any reason to not merge this?
2648	22697510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22697510	wtogami	Please note that this patch added an unintended error message in Issue #2893.
2647	17783244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17783244	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2647	17785042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17785042	luke-jr	Seems pointless. 1 cBTC is already part of the BTC range.
2647	17827090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17827090	laanwj	Im against adding more units at the moment. BTC, mBTC, muBTC provides enough for the full 8-decimal range. Sure, cBTC would give a sort of dollar parity right now, but that may have changed again by the next release and once added were stuck with it forever...
2647	17846121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17846121	semibiotic	I see. Personally, I dont see any technical difficulty to have even all of exponent units from satoshi up to MBTC, except a bit of bitcoinunits.* refactoring need (that is needed anyway) - all code outside bitcoinunits.* is seems to be unit-independed.
2647	17861176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17861176	laanwj	Right, no technical difficulty. That was also not my point. Id like to standardize on a few units and the current ones are fine. Wake me up when we need nanobtc.
2647	17877395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17877395	petertodd	NACK mBTC seems to be what has caught on rather than cBTC; I second laanwjs thoughts.
2647	17879071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17879071	gavinandresen	Anti-consensus here, closing.
2645	19510401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19510401	sipa	Anyone interested in this? ?
2645	19543415	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19543415	jgarzik	So, its one of those things :) It is a good change, and something my python code should probably emulate to boost python speed. Technical review yields an ACK. The main issues are external: the area of code being touched is a critical component, and this totally rewrites the component [in a positive way], in a slightly more complex way. That increases the risk profile. It correspondingly lacks a driving use case, making this is a very high risk, useful cleanup. Your inclusion of the old code as a test was an excellent move, and does serve to help mitigate this change risk.
2645	19568087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19568087	petertodd	Are the code paths independent enough to run them side-by-side on live data? If so we could do exactly that and have bitcoind quit if they disagree. Youd then want to enable this behavior probabilistically so that at any time a small subset of the network is using the new code, say 1/8th. If a bug or exploit starts getting used hopefully bug reports will start flowing in. The reason why you would do this probabilistically, as opposed to just enabling side-by-side checking for everyone, is to ensure that a failure resulting in a crash/exploit will not affect the majority of the network either. Of course, prior to doing that, run such a side-by-side node yourself, which implies step zero should be just a command line option defaulting to off.
2645	19568299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19568299	sipa	If it takes that much effort to convince you this is safe, Id rather just close this pull request. (note: this isnt a argument to convince you otherwise in any case; its just not worth that much effort). Ive of course already run this on testnet and mainnet without problems, but that doesnt mean anything for potential false positives.
2645	19568454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19568454	laanwj	I agree with this change as it makes what happens more explicit. On the other hand it seems risky as its very hard to verify or prove that the hashed parts stay exactly the same.
2645	19570323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19570323	petertodd	I havent reviewed the code carefully enough to be convinced one way or the other technically - I just wanted to float the idea given its an option we havent used yet. That said inline signature serialization helps most with the largest transactions; I dont think we know much yet about what the advantages and disadvantages of allowing really large and complex transactions actually are yet and there are a whole lot of tradeoffs between networking, UTXO proofs, distributed verification etc. On that basis Im slightly inclined to say NACK for possible premature optimization, but do keep the code around for later.
2645	22734284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22734284	sipa	Id like some opinions about this. Im not going to work on this further, but I believe it is sufficiently tested. If its not considered useful or too risky, Id rather close it.
2645	22735284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735284	gmaxwell	ACK. Im happy with this, and the randomized unit tests builds confidence. I was running it on a live node for a while, fwiw.
2645	22735932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735932	jgarzik	Nothing to add beyond my above comments, which still apply.
2645	22738570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22738570	gavinandresen	I spent some time this morning trying to break this; the good news is I couldnt, so ACK overall. I did find some weaknesses in the unit test, though; the same 20,000 random transactions were being tested every time, not all possible SIGHASH values were being tested (only "reasonable" ones), and you werent testing some ==0/empty edge cases (important to test invalid transactions as well as valid ones). Suggested patch: ``` diff --git a/src/test/sighash_tests.cpp b/src/test/sighash_tests.cpp index cf1f486..fd2ab30 100644 --- a/src/test/sighash_tests.cpp +++ b/src/test/sighash_tests.cpp -70,13 +70,13 uint256 static SignatureHashOld(CScript scriptCode, const CTransaction& txTo, un void static RandomScript(CScript &script) { static const opcodetype oplist[] = {OP_FALSE, OP_1, OP_2, OP_3, OP_CHECKSIG, OP_IF, OP_VERIF, OP_RETURN, OP_CODESEPAR script = CScript(); - int ops = (insecure_rand() % 10) + 1; + int ops = (insecure_rand() % 10); for (int i=0; i<ops; i++) script << oplist[insecure_rand() % (sizeof(oplist)/sizeof(oplist[0]))]; } void static RandomTransaction(CTransaction &tx, bool fSingle) { - tx.nVersion = (insecure_rand() % 2) + 1; + tx.nVersion = insecure_rand(); tx.vin.clear(); tx.vout.clear(); tx.nLockTime = (insecure_rand() % 2) ? insecure_rand() : 0; -93,7 +93,7 void static RandomTransaction(CTransaction &tx, bool fSingle) { for (int out = 0; out < outs; out++) { tx.vout.push_back(CTxOut()); CTxOut &txout = tx.vout.back(); - txout.nValue = (insecure_rand() % 100000000) + 1; + txout.nValue = insecure_rand() % 100000000; RandomScript(txout.scriptPubKey); } } -102,8 +102,10 BOOST_AUTO_TEST_SUITE(sighash_tests) BOOST_AUTO_TEST_CASE(sighash_test) { + seed_insecure_rand(false); + for (int i=0; i<20000; i++) { - int nHashType = 1 + (insecure_rand() % 3) + (insecure_rand() % 2)*0x80; + int nHashType = insecure_rand(); CTransaction txTo; RandomTransaction(txTo, (nHashType & 0x1f) == SIGHASH_SINGLE); CScript scriptCode; ```
2645	25301283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25301283	sipa	Rebased and incorporated Gavins suggested changes.
2645	25682326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25682326	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2645	26364716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26364716	sipa	Care to have another look?
2645	26470891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26470891	SergioDemianLerner	As far as I can see by inspection, both functions are equivalent. Is the OP_CODESEPARATOR removal part tested by test cases? (e.g. OP_CS xx OP_CS OP_CS yy OP_CS -> xx yy)
2645	26471808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26471808	gavinandresen	: yes, the unit test creates 50,000 random, 10-opcode-long scriptPubKey transactions, many of which will contain multiple OP_CODESEPARATORs.
2644	17782490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17782490	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2644	17782949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17782949	jgarzik	Code looks sane and ACK-worthy. The concept is similar to something I did in pynode. Did you actually instrument "no effect on memory usage", or is that a guess? I would like to see before and after numbers proving that :)
2644	17784069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17784069	sipa	Just reasoning. For each CBlockIndex representing a node in the active chain, we remove 8 bytes from the CBlockIndex, and add 8 bytes to vBlockIndexByHeight. Actually, it should reduce memory usage slightly, as non-best-chain nodes also lose 8 bytes.
2642	17776802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17776802	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2642	17781205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17781205	TheBlueMatt	ACK
2638	17732408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17732408	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2638	17735373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17735373	Crinklebine	Is there a less expensive way to build qmake on OS X? Building Qt in its entirety is quite time consuming and I think we just need qmake. I have a version of the rst file here for editing:
2638	21091099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091099	luke-jr	Will you be fixing the above concerns and rebasing this?
2638	23221118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221118	jgarzik	Closing. Feel free to reopen, if feedback is addressed.
2636	17699688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17699688	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2636	17707456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17707456	jonasschnelli	hmm... ```port install qt4-mac``` will probably install the whole qt4 package. On line 47 of readme-qt.rst we write ```- Download and install the `Qt Mac OS X SDK`_. ...``` So then the user might have qt installed twice?! Could we not just tell the users to install qt through macports? And yes. Its true. The Qt Creator downloadable from qt-project.org is only 64bit (even when its labeled as 32/64 universal).
2636	17707650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17707650	Crinklebine	My pull was derived from building bitcoin and bitcoin-qt on a newly installed Snow Leopard hackintosh in Virtualbox. I did not download the `Qt Mac OS X SDK`. What worked for me was downloading Xcode 3.2 (the latest version I could find for Snow Leopard) and "sudo port install qt4-mac". Perhaps the readme for Mac OS X should be split into OS X 64 bit and OS X 32 bit instructions? (It seems much easier to virtualize the 32 bit Mac OS X). ![capture3](https://f.cloud.github.com/assets/4390399/486966/29ec2a0c-b943-11e2-9900-f3430421a026.png)
2636	17707704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17707704	jonasschnelli	i recommend not to split. Because the SDK downloadable from qt-project does not work out of the box (i always had to compile qt sdk) i would also say, remove the parts of Line 47 and change it with your information (install through port). Then we can also avoid making differences between 32 and 64 bit.
2636	17707771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17707771	fanquake	Wed also want to look at including the instructions for users using brew instead of macports, if necessary.
2636	17707971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17707971	Crinklebine	There does appear to be some brew instructions in the current readme-qt.rst . If using HomeBrew, edit `bitcoin-qt.pro` to account for library location differences. Theres a diff in `contrib/homebrew/bitcoin-qt-pro.patch` that shows what you need to change, or you can just patch by doing patch -p1 < contrib/homebrew/bitcoin.qt.pro.patch
2636	17708031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17708031	fanquake	Those instructions are only for correcting dependancy include paths. They dont have anything to do with installing Qt.
2636	17708488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17708488	Crinklebine	I see what you are saying. This should work on brew? brew install qt Your recommendation seems right as MacPorts and HomeBrew both support QT install. P.S. This is my first pull so please bare with me. :-)
2636	17708669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17708669	jonasschnelli	your pull is great (even when we bother you with details)! :)
2636	17729935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17729935	Crinklebine	I will close this pull request and reopen a new pull to incorporate the suggestions from and .
2636	17730428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17730428	sipa	You dont need to close the pullreq. You can just push to the associated repo/branch, and it will be updated.
2636	17733289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17733289	Crinklebine	Thank you for the help. I have already opened a new pull request. Im still learning the Git development process and will do it correctly next time.
2636	18241451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18241451	geocoin	Any help? I have set up a new 10.6.8 VM, fresh install. I installed XCode 3.2.6 and then MacPorts--next I did: sudo port installl boost db48 miniupnpc openssl qt4-mac Then I did basic qmake/make from the command line yet it errors out EVERY DAMN TIME with this: Undefined symbols: "MapPort()", referenced from: OptionsModel::setData(QModelIndex const&, QVariant const&, int)in optionsmodel.o "_fUseUPnP", referenced from: OptionsModel::setData(QModelIndex const&, QVariant const&, int)in optionsmodel.o ld: symbol(s) not found collect2: ld returned 1 exit status I have tried qmake with "USE_UPNP=-" and make with the same USE_UPNP=- and neither seem to work. It always errors out when it gets to: /opt/local/bin/rcc -name bitcoin src/qt/bitcoin.qrc -o qrc_bitcoin.cpp PLEASE! I know this has to be something simple, Im dying here, have tried 2 different VMs, one with Ports and one with Homebrew, and Im still not able to build a darn -QT of my own!!
2635	17691998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17691998	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2635	17695524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17695524	sipa	Boost_chrono seems to exist as of Boost 1.47. I suppose that means we want to link against it anywhere were on Boost 1.47 or higher.
2633	17666961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17666961	Diapolo	You should perhaps also add this for bitcoin-qt.pro I guess.
2633	17667257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17667257	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2633	17668369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17668369	jgarzik	Please paste the compiler error into the commit. The details about what this solves remain vague.
2633	17668385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17668385	sipa	do these error messages mean that -DBOOST_CHRONO_HEADER_ONLY doesnt work on Windows? We can just disable it there, as we link with boost_chrono on Windows anyway.
2633	17671026	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17671026	TheBlueMatt	Hmm... "error: WinError.h: No such file or directory" maybe a mingw issue?
2633	17671183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17671183	TheBlueMatt	In any case, it did try to use ERROR_NOT_SUPPORTED, so I suppose it may be trying to call some error handler...
2633	17680615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17680615	gavinandresen	Bah. Linking against the boost chrono library on all platforms is another option; we should be consistent. FYI: error is: Undefined symbols: "boost::chrono::steady_clock::now()", referenced from: boost::cv_status boost::condition_variable::wait_for<long long, boost::ratio<1ll, 1000000000ll> >(boost::unique_lock<boost::mutex>&, boost::chrono::duration<long long, boost::ratio<1ll, 1000000000ll> > const&)in bitcoinrpc.o boost::cv_status boost::condition_variable::wait_for<long long, boost::ratio<1ll, 1000000000ll> >(boost::unique_lock<boost::mutex>&, boost::chrono::duration<long long, boost::ratio<1ll, 1000000000ll> > const&)in bitcoinrpc.o "boost::chrono::system_clock::now()", referenced from: boost::cv_status boost::condition_variable::wait_for<long long, boost::ratio<1ll, 1000000000ll> >(boost::unique_lock<boost::mutex>&, boost::chrono::duration<long long, boost::ratio<1ll, 1000000000ll> > const&)in bitcoinrpc.o
2633	17687272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17687272	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2633	17689622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17689622	gavinandresen	frickin frackin.... Ok, so -DBOOST_CHRONO_HEADERONLY breaks the Windows build. Linking against boost_chrono breaks the Linux build. I suppose well have to live with being inconsistent, and link boost_chrono on Windows/OSX but not Linux.
2632	17615232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17615232	mikehearn	The pull tester fails because I deleted the now obsolete patch file it relies on. Matt said hell update pull tester after its merged to use the new flag.
2632	17668331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17668331	sipa	ACK on the general idea, but if were going this way, we should probably do it all the way. Given that 0.8.2 becomes sort-of urgent, Id rather pull this afterwards.
2632	17668467	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17668467	mikehearn	Thats fine, I can finish it off in the coming weeks.
2632	17681060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17681060	petertodd	Nice! An option to set the network magic bytes would be good to allow you to setup a temporary private testnet easily if you are doing something that shouldnt be broadcast to testnet main. (like creating large bloat-blocks that you dont want to burden everyone else with) I found out the hard way a while back when I was playing with max-sized blocks that information is easy to spread and difficult to stifle - Id firewalled bitcoin but forgotten my tor daemon still had a hidden service running. Also we need a way to set the keypair alerts are signed with on the command line. Ill look at the patch more after the conference.
2632	18088549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18088549	mikehearn	Maybe too many little commits here, but essentially this completes removal of fTestNet. You can still find out if youre on testnet (or a derivative) with a simple if test, so its not any less convenient, but most of the variable stuff has moved to CChainParams. The few places that didnt move are things like the alternative block rules for testnet or the checkpoint definitions, where trying to refactor that out didnt seem appropriate.
2632	18970888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18970888	mikehearn	Rebased onto latest master.
2632	19035701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19035701	mikehearn	Ugh. It looks I screwed up with a force push and the work I did on another machine got lost. The last commits I worked on in the states are gone and I cant find a way to get them back. So dont review or merge this right now. Ill have to redo the last parts of removing fTestNet again :-(
2632	19039663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19039663	laanwj	Nothing left of it in your local git reflog? That usually saves me in cases like this.
2632	19046059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19046059	mikehearn	Unfortunately the work was done on a laptop I dont have access to anymore and was since wiped. If theres no copy retrievable from github servers then the work is gone :-( It was only a few commits extra to clear out the last uses of fTestNet, nothing I cant quickly reproduce. But its annoying.
2632	19118334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19118334	sipa	If you dont expect this pull to be ready soon, youll likely need to rebase on top of #2154.
2632	19447864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19447864	mikehearn	Ive rebased this and finished off the whole thing. Could I get a review for the last set of commits and some LGTMs/ACKs please?
2632	19498146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19498146	sipa	ACK apart from a few minor nits (see inline).
2632	19531355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19531355	mikehearn	Thanks. Looking for one more ACK. Gavin/Jeff?
2632	19538047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19538047	mikehearn	Sorry Pieter, two more commits to look at. First fixes a bug I introduced and I could squash it back down. The second is new - I noticed that "bitcoind -regtest help" didnt work any more and noticed that chain params were never being configured properly for sending RPCs. The reason it used to work is that in my old code regtest mode used the mainnet rpc port. Seemed better to configure params properly in command line mode too.
2632	19543161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19543161	mikehearn	OK, replaced the last commits with one that fixes the unsigned warning, fixes a bug with repeated spamming of fixed seed nodes I noticed whilst testing regtest mode and makes "./bitcoind -regtest help" work by using the params for command line rpcs too.
2632	19552965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19552965	jgarzik	ACK, with some taste complaints
2632	19555051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19555051	petertodd	ACK, though all I did was review the code line-by-line - no testing.
2632	19673598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19673598	sipa	Youll need to fix the Qt code too: src/qt/clientmodel.cpp: In member function bool ClientModel::isTestNet() const: src/qt/clientmodel.cpp:113:12: error: fTestNet was not declared in this scope
2632	19677606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19677606	mikehearn	Oops, how did I forget that? It turns out that the Qt code not only uses fTestNet, but in some places also just calls GetBoolArg as well. What a mess. Will work on it.
2632	19678972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19678972	mikehearn	OK, I tested the gui in main and testnet mode, it seems to be working. Probably now the reviews are done, its simpler to squash all the commits before merging. Otherwise the Qt GUI will be broken between some range of the commits and its a pain to go back and fix that.
2632	19679513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19679513	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2632	19680804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19680804	laanwj	The only place it just calls GetBoolArg should be in main, on purpose: to show the right icon immediately it needs to know whether the program is starting in testnet mode before the fTestNet flag is set in Init.
2632	19681748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19681748	sipa	Yes, please try to keep every commit a usable state - otherwise you risk breaking git bisect. Also can you have a look at nits? After that, I think we can merge.
2632	19687648	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19687648	mikehearn	OK, I addressed Peters comments and squashed into one commit. Thanks for the reviews, everyone.
2632	19688320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19688320	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2632	19688539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19688539	jgarzik	ACK Note that only said each commit needs to build on its own -- which does not necessarily imply all commits must be squashed together, only that commits should each be able to exist on their own, buildable and testable.
2632	19689764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19689764	sipa	Well, "move chain-specifc stuff to separate class" is reasonable to have in one commit - it could be multiple as well, I dont care. I only asked that the CBlockLocation move to .cpp remained separate as its not related.
2632	19690176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19690176	sipa	ACK You have any comments still?
2632	19690312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19690312	mikehearn	Note that the pull tester will need fixing after this goes in.
2630	17590573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17590573	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2630	17655815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17655815	laanwj	Thats a good idea, to keep this updated and merge this just before the 0.8.2 release. It prevents superfluous updates to the translation files (ie all those pesky +122/-231 and "untranslated" messages) in git and still allows having the latest translations in the release. So just in case: before tagging/packaging 0.8.2, please merge this pull first
2630	17720327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17720327	gavinandresen	Pulling, Im going to tag 0.8.2rc1 this morning.
2629	17582459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17582459	gmaxwell	ACK. Lots of other size assumptions in the code. No harm in fixing some.
2629	17583209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17583209	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2629	17594482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17594482	sipa	This class can probably be easily rewritten to use GMPs mpn library (making it use 64-bit limbs on x86_64 for example), but thats a much larger change. ACK this.
2629	17596147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17596147	TheBlueMatt	ACK
2625	17549390	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17549390	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2625	17550080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17550080	jgarzik	ACK
2625	17553395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17553395	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2625	17563988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17563988	laanwj	Still have to test, but code changes are OK, nice cleanup
2625	17568564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17568564	gmaxwell	So one consequence of this is: #task 1 walletpassphrase foo 3600 // I need this for a long time sleep 3000 signrawtranaction .. #task 2 walletpassphrase foo 30 //I dont need this for long signrawtransaction .. Now depending on how these tasks race the second kills the first. This seems bad and I thought avoiding this was previously intentional. I think instead it should be doing max(new_unlocked_until, old_unlocked_until), and if someone wants to lock an unlocked wallet they can explicitly call walletlock.
2625	17570373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570373	gavinandresen	: previously the second tasks walletpassphrase would fail with "error: wallet already unlocked." If you REALLY want the max() behavior, then I say have the tasks call getinfo to get unlocked_until and do that calculation yourself. Im very much in favor of the RPC having the most obvious implementation, and strongly feel that "do the last thing I told you to do" is the most obvious behavior.
2625	17575288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17575288	gmaxwell	You cant do that calculation yourself though, because there is a potential race if you have multiple callers calling the RPC at once. E.g. if the shorter unlock calls getinfo first then the longer unlock happens before the shorter unlock the longer unlocks request will get ignored... and we have no way to facilitate exclusive access to the RPC. "Do the last thing" starts losing its meaning when there is concurrent access. Its not the end of the world dont make concurrent accesses with different unlock lifetimes is also an answer... Im just generally uneasy about behavior that may expose racy behavior in callers because its really hard to debug.
2625	17596081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17596081	TheBlueMatt	re: fixes #1961 were you able to reproduce the original issue to begin with?
2624	17547125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17547125	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2624	17566365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17566365	Diapolo	AFAIK we ARE currently using Boost 1.50 for the Windows build.
2624	17574382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17574382	phorensic	Then should we edit line 24 of src/makefile.mingw to reflect proper version? e.g. replace "BOOST_SUFFIX?=-mgw46-mt-sd-1_52" with "BOOST_SUFFIX?=-mgw46-mt-sd-1_50"? I guess it doesnt matter too much, because you still have to insert all your INCLUDEPATHs and LIBPATHs. Might as well edit line 24 while you are in there?
2624	17583040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17583040	phorensic	This is my first pull request. I dont know how my recent merge upstream/master ended up in this pull request. Sorry.
2624	17583549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17583549	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2624	17583611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17583611	phorensic	Undid merge. Yes, I am a noob. However, I still believe my original pull request should be reviewed.
2623	17528437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17528437	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2622	17465743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465743	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2622	18806246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18806246	laanwj	As mentioned, you cannot change the versions like this without updating the gitian build. If you want to do an update, replace the URLs with ones for the existing versions that work. Closing this issue.
2621	17459164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17459164	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2619	17447386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17447386	luke-jr	Devils advocate: whether a wallet is encrypted or not is not a state, but a nearly-fixed attribute of the wallet itself. But I dont really care.
2619	17447797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17447797	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2619	17451980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17451980	laanwj	If youre doing this I think you should update the help messages to explicitly mention in what wallet states the commands can be used. Currently this is implicitly done by showing only appropriate commands.
2619	19911495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19911495	jgarzik	Agree w/ Please update help text to reflect his suggestions, and we can merge this.
2619	23221122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221122	jgarzik	Closing. Feel free to reopen, if feedback is addressed.
2618	17447465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17447465	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2618	18419042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18419042	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2618	18443943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18443943	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2618	18691382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18691382	jgarzik	Mostly ACK. Need rebase + resolving the fcntl.h question.
2618	18702814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18702814	fcicq	rebased.
2618	18703430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18703430	jgarzik	Comments: * ACK current commits * Windows supports fcntl.h, so no need to guard with #ifdef. Just make sure that file includes fcntl.h [unless were all missing some detail RE sys/fcntl.h]. * Test plan: ideally, at a minimum an "it builds" test on our primary platforms (linux/win/osx)
2618	18703755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18703755	fcicq	so just wait the pull tester :)
2618	18806127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18806127	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2618	19205825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19205825	jgarzik	ACK
2618	19879400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19879400	sipa	Id like confirmation that this doesnt break OSX builds, but ACK otherwise.
2618	21090285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090285	luke-jr	Needs rebase again.
2618	21289105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21289105	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2617	17431678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17431678	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2616	17426674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17426674	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2616	17432513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17432513	laanwj	I see the advantages of this. But one question, will the subtree automatically be cloned when cloning the bitcoin repository? Or does this add extra steps or even need extra tools?
2616	17433274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17433274	vinniefalco	Yes, it will be cloned. The files in the subtree are plain, ordinary repository files. You can modify and commit them, rename, them, delete them, etc... What git-subtree does is create a special merge commit that ties in the commit log from the source repository (https://github.com/vinniefalco/LevelDB in this case) so that later on, you can pull a newer version of the subtree. And you can also split any changes that are made to the LevelDB files and push them back to the original repository. Its the ideal alternative to the mess that is git-submodule. No tools or steps are needed (although note that git-subtree is part of the official Git distribution now). I plan on integrating Bitcoins LevelDB changes into the latest tip of the LevelDB master branch so once thats ready, it will be possible to bring Bitcoins version of LevelDB up to date. Heres a little promo for git-subtree:
2616	17433421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17433421	sipa	We considered putting the LevelDB code in a separate repository, before switching to it. I believe people complained about submodules back then, though I cant remember the reasons. Im using submodules in another project, and though Im not too comfortable with it, it seems to work. I dont know about subtrees - will read - but if it requires separate tools (at least Ubuntu doesnt seem to have it), it will complicate our deterministic build environment. EDIT: as subtree seems to leave a copy of the code inside the including project, it shouldnt cause any build issues.
2616	17433750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17433750	vinniefalco	No separate tools are needed, the files are ordinary files. Use of "git-subtree" will only be required if someone wants to pull a newer branch from a LevelDB repository, to bring Bitcoins version of it up to date. Or if someone wants to split Bitcoins changes out so they can submit a pull request to the LevelDB repository. "git-subtree" is part of Git now so if its missing in someones Ubuntu they only need install the latest Git (git-subtree is just one shell script). But this is only if they want to do the two things I mentioned - for normal development it is not needed.
2616	17437788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17437788	gavinandresen	Nifty! I think we should pull this soon after releasing 0.8.2.
2616	18521256	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18521256	vinniefalco	Note that this pull request can be skipped if you accept number #2702 , which does everything this one does and also brings LevelDB up to 1.10.0, and fixes a deadlock scenario on Windows.
2616	18553300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18553300	vinniefalco	Heres a decent comparison highlighting the benefits of git-subtree over submodules:
2616	18554107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18554107	luke-jr	A one-sided comparison...
2616	18554618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18554618	vinniefalco	This blog post accurately summarizes my bad experiences with git submodules. Note that I have used both so I am speaking directly from experience:
2616	18555277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18555277	Diapolo	Just to understand, are we then using a location for all this, which is then not inside bitcoin/bitcoin anymore?
2616	18556329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18556329	vinniefalco	No. git-subtree does not store the location of the repo. The foreign repo is only accessed at the time you issue the appropriate git-subtree command. Other than when you are running a git-subtree command, the files are normal repository files like everything else. There is nothing magical or special about them, other than they have a few extra lines in the commit message that help the git-subtree script figure things out. Git-subtree only does things that you could do manually yourself, the structure of the repository is not hacked. The reason that I have created my own LevelDB repo (at is so that I could recreate the "bitcoin-fork" branch, which includes all of the changes made by the Bitcoin developers replayed on top of the commit log from the original LevelDB (stored at google code). You can see this recreated history here: Notice how sipas changes are all there, and if you keep going back in time you will find the place where Bitcoin forked LevelDB. When LevelDB was added to bitcoin, they did it by just manually plopping the files into the source code hierarchy and making a commit. By doing so, the history of LevelDB was not carried over and therefore it is difficult to submit changes back to the upstream (the google code repo in this case). What I have done is to recreate the commit log including bitcoins changes, and turn it into a proper branch called bitcoin-fork located in my repository (URL above). Then I used git-subtree to replace the detached LevelDB sources in the bitcoin repo with an identical set of sources that also carries the history with it. This allows me to recreate the fork with any new changes that you guys make to LevelDB, so that I can submit it to the upstream. The repository here: Is not needed by the bitcoin developers. You can simply continue on the way you did before, editing LevelDB sources as needed. At any time, I can pull your changes and split them into my bitcoin-fork branch. I can also cherry pick commits from the upstream LevelDB repo, commit them to my bitcoin-fork branch, and then submit a pull request so they can get into Bitcoin. This is how I brought in the 1.10.0 update as well as the fix for the Windows deadlocking. If you guys want to do this yourself I can show you how to use subtree. It is quite easy. If you want to use your own repository to store your fork of leveldb (e.g. at bitcoin/leveldb) you could fork mine, or clone mine and push it to your own empty repo (at bitcoin/leveldb) so that it appears as an original and not a fork (at which point I can delete my repo and fork yours). Its worth repeating that none of this affects the subtree, because the repo URI is not stored anywhere. Its just a remote in your local repo (on any developers computer who wants to issue git-subtree commands). You dont need to use git-subtree to edit the resulting files. You only need to use git-subtree if you want to do the following: 1) Pull in commits from the external repository 2) Submit a pull request for local changes to the upstream (i.e. the google code repo or bitcoins fork of it) Or you could just continue on and pretend that LevelDB has no external repository, making changes to the sources as if they were your own - I can always step in and maintain the bitcoin-fork branch no matter what you do, no action is required on your part unless you want to learn git-subtree and maintain the fork branch yourself.
2616	18556431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18556431	laanwj	thatd be the case with submodule. With subtree, all the files are still in this repository, there is simply a link back to the original repository to make it easier to stay up to date (merging) or push changes back upstream.
2616	18556665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18556665	vinniefalco	No thats not quite right. The URI / URL to the external repository is not stored anywhere in the bitcoin repository. Only the hashes of the commits are referenced, since thats all that matters for having an intact commit log. Anyone who wants to stay up to date / merge, or push changes back to the external repository needs to first git fetch from the external repository to bring all the refs in locally. It does not matter from which repository they come from as long as it contains the appropriate objects - they are referenced by hash.
2616	18692787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18692787	laanwj	Ok, thanks for explaining. ACK in any case
2616	18693170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693170	sipa	ACK
2616	18700680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18700680	gavinandresen	ACK
2616	18701198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18701198	vinniefalco	If you guys make changes to the level DB sources in the future, let me know and I can either split the changes out and push them to my LevelDB repo in the bitcoin-fork branch, or I can show you how to do it yourself using either my repo or your own.
2616	18714778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18714778	gmaxwell	Uh. I merge this, and I get a repository with no leveldb in it and no ability to build Bitcoin.
2616	18714895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18714895	vinniefalco	Note sure how you merged it. Im in #bitcoin-dev to help you diagnose it. I will attempt to merge it myself and see if I run into problems. I did the following: git checkout master git pull # bring my local master branch up to date git merge leveldb-as-subtree # merge the pull request The output should appear as follows: sh-3.1$ git merge leveldb-as-subtree Already up-to-date! Merge made by the recursive strategy. sh-3.1$ git log -1 commit c1dd3db5dd62a53d4cf45f715f60481ff75e00bf Merge: 3fbd87e 80744b3 Author: Vinnie Falco <vinnie.falco@gmail.com> Date: Thu May 30 16:32:44 2013 -0700 Merge branch leveldb-as-subtree
2615	17399443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17399443	jonasschnelli	![unbenannt-2](https://f.cloud.github.com/assets/178464/459533/785e68b6-b403-11e2-9304-d6fbc6635024.png) thats how it looks.
2615	17399554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17399554	jonasschnelli	It would also be possible to add a settings flag where the user can switch between growl and 10.8+ user notification center.
2615	17403300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17403300	laanwj	Dont add an option for trivial stuff such as this, if you think this looks better or is more useful (as you say, its integrated and free), go for it.
2615	17403774	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17403774	gavinandresen	I vaguely recall us having issues with growl notifications in the past. Did you test this on OSX 10.5 ?
2615	17411331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17411331	jonasschnelli	No. Its not yet tested on 10.5 to 10.7. Ill do that in the next days. I also fix the pull-tester-report issue.
2615	17597378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17597378	jonasschnelli	getting crazy while building on 10.6/32bit. :) After a proper qmake/make and fancy build (dmg) i try to run Bitcoin-Qt on 10.5 but get: ``` dyld: Library not loaded: Referenced from: /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Reason: no suitable image found. Did find: /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/../Frameworks/libssl.1.0.0.dylib: unknown required load command 0x80000022 /Volumes/Bitcoin-Qt 1/Bitcoin-Qt.app/Contents/MacOS/../Frameworks/libssl.1.0.0.dylib: unknown required load command 0x80000022 Trace/BPT trap ``` libssl looks okay: ```lipo -info Contents/Frameworks/libssl.1.0.0.dylib Architectures in the fat file: Contents/Frameworks/libssl.1.0.0.dylib are: i386 x86_64``` any ideas?
2615	17742461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17742461	jonasschnelli	puh.. had to grab out a old mac mini to do 10.6/32bit builds. Testes on 10.5 (VM) and 10.6. After some changes it worked perfect.
2615	17743631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17743631	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2615	17757837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17757837	Diapolo	Is this also Qt5 compatible :)?
2615	17758004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17758004	jonasschnelli	yes. I initially wrote this patch for Qt5 compatibility because it can handle growl without qt platform functions.
2615	18121734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18121734	laanwj	ACK (on code changes, cannot test Mac changes)
2615	18398360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18398360	jonasschnelli	fixed some minor code-style related things. can you do a test on mac and give a final ACK? other final ACKs?
2615	18400352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18400352	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2615	18444767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18444767	fanquake	Ill test it this weekend
2614	17399309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17399309	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2614	17405344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17405344	Diapolo	Idea is good, but I dislike the fact that this is a) Mac only and b) we have that stuff as duplicate in ``void BitcoinGUI::setClientModel(ClientModel *clientModel)``. Even on Windows we first have that normal tray icon and after loading it switches to testnet. I think its worth to think about a better solution that covers all OSes and directly displays the correct icon. We currently set the default icon in the BitcoinGUI constructor, where we dont have acces to clientmodel, which is used to query for testnet later... see the problem? Do you have a good idea?
2614	17413516	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17413516	laanwj	The reason for this appears to be that on MacOSX it shows the dock icon already before the main window (and tray icon) is created, immediately at the start of the process. This has no analog in any other OS. It is usually desirable to move the common code to a function, but in this case its only one line (and result purely visual) so Im not so sure. On windows/linux it would be possible to change the icon a little bit sooner (ie, immediately when creating the main window) but mehh. Its only testnet, only developers get to see it anyway. Dont obsess about it too much.
2614	17428933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17428933	jonasschnelli	As said: its devs only stuff. But I also agree with we should also take a look at win and Linux. I do not have a win toolchain,... so your probably the right guy for a win optimization of that issue.
2614	17431133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17431133	Diapolo	At least on Windows I get a tray-icon directly when the splashscreen is doing its work and have our mainnet icon, before it gets switched to the testnet one... I think that is rather ugly ;) or at least not perfect ^^. So I asked for a global solution :).
2613	17393582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17393582	jonasschnelli	launch at startup can easily be tested while having the mac settings app open (show at your users startup items while checking/unchecking the start-at-login setting).
2613	17393668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17393668	jonasschnelli	Proxy un-setting is still a issue. Will also analyze the proxy-unsetting-bug...
2613	17395225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17395225	jonasschnelli	I would say that SOCKS proxy unsetting works as expected. If you unset them, the app warns you that you have to restart Bitcoin-Qt to make use of your new settings. When you restart the app, SOCKS proxys are off as expected. When you not restart the app, SOCKS proxys are still "enabled" in the settings (so you can uncheck them again and again). Placing an additional text ("your need to restart,...") in the settings window looks like an overhead. Showing the proxy in off state (while the app current acts over the proxy) sounds also as a no-go.
2613	17395334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17395334	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2613	17456077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17456077	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2613	17468547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17468547	Diapolo	Looks good now, but I obviously cant test the code ;). Btw. pulltester failure is unrelated to the pull: ``test/util_tests.cpp(308): error in "util_seed_insecure_rand": check count>=10000/mod-err failed``
2613	18123358	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123358	laanwj	ACK after 0.8.2 release
2613	18398802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18398802	jonasschnelli	fixed last minor issue (unused line `ui->tabWindow->setVisible(false);`). Final ACKs?
2613	18402991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18402991	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2613	18832851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18832851	jonasschnelli	merge?
2613	18835731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18835731	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2613	18840283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18840283	jonasschnelli	rebased with master
2613	18851815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18851815	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2610	17367167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17367167	luke-jr	Any reason not to remove the definitions of OP_disabledops entirely?
2610	17367728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17367728	sipa	The only reason to keep them would be backward compatibility for the decoded version, I guess, and then even only for very weird scripts...
2610	17368860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17368860	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2610	17379685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17379685	laanwj	Good. The code is unused and there is no reason to keep it like this. *If* it is ever decided to bring the opcodes back, it can be done with better designed semantics w.r.t signed/unsigned handling.
2610	17395086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17395086	petertodd	The code that actually disabled those OPs *is* executed, so Id be inclined to leave that in place out of paranoia, at least for now. FWIW, I manually reviewed the change.
2610	17397643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17397643	gavinandresen	RE: remove opcodes entirely: I thought about removing the OP_ enum constants, but then wed just have to use hard-coded 0x constants in a couple of places (the early if statement, and the opcode-to-string map so unit tests continued working) which would be uglier and more error-prone.
2610	17417712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17417712	sipa	ACK
2609	17366545	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17366545	sipa	Closing in favor of #2610, which removes even more!
2609	17366958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17366958	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2608	17355045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17355045	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2608	17355863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17355863	gavinandresen	ACK, fixes the issue.
2608	17357480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17357480	sipa	Looks good, but didnt test.
2608	17379707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17379707	laanwj	ACK
2607	17351231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17351231	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2607	17357942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17357942	sipa	ACK
2606	17352723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17352723	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2606	17418381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17418381	sipa	ACK, tested an artificial error in Bitcoin-Qt under valgrind.
2606	17432878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17432878	laanwj	ACK BTW I dont remember before that Shutdown() was called when AppInit2 fails, was this changed in init.cpp recently?
2606	17434251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17434251	sipa	This commit added that Shutdown() call?
2606	17448203	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17448203	laanwj	thats not what I meant. When I initially wrote bitcoin-qt Im pretty sure that Shutdown() was not called (in the bitcoind case, in init.cpp) in case AppInit2() failed. At least I remember checking this. So it must have been added in the meantime.
2604	17307003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17307003	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2604	17350447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17350447	gavinandresen	OP_SUBSTR is one of the disabled opcodes. I think it is time to remove all code for the disabled opcodes. If we ever bring them back, we can resurrect the code from git history after writing extensive unit tests and looking for issues like this.
2604	17352030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17352030	gmaxwell	Agreed. It cant simply be brought back in any case, since they cant just be turned on without it being a hardfork relative to currently deployed nodes. (e.g. theyd have to be brought back inside a script v2 that looked like a NOOP to existing nodes)
2604	17354991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17354991	petertodd	ACK
2604	17357563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17357563	sipa	ACK on removing them. Indeed, all these opcodes are effectively identical to immediate failure anyway, and nothing except a hard fork can change that, and at that point, there is no reason why they should get a meaning identical to what is (was) implemented.
2604	17419746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17419746	sipa	Closing this as superceded by #2610
2603	17296681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17296681	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2603	17356234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17356234	gavinandresen	ACK. Tested by removing the bestblock record from a -testnet wallet.
2603	17418035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17418035	laanwj	ACK
2603	18136356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18136356	petertodd	Looks like if you delete your wallet after Bitcoin creates the new one it triggers a rescan of every block.
2603	18177957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18177957	sipa	Indeed, Ill look at this. Its not a regression though, before there was just a chance of missing stuff, as no accurate bestblock was written either. The solution is doing an explicit write of the bestblock record at wallet unload/exit time.
2603	18178278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18178278	gmaxwell	If we knew the bestblock at the time we created the wallet (I dont think weve loaded the chain at that point) it would be simple to just have it set the best block to be the current best block when creating it.
2603	18183116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18183116	gmaxwell	Another possible fix is doing the key birthday thing and using the min(birthday) to control the rescan.
2603	18183493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18183493	sipa	Thatd be a nice improvement, but doesnt change the fact that we need to write updated bestblock records more frequently to avoid spurious rescans.
2602	17287070	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17287070	jgarzik	ACK
2602	17288885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17288885	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2602	17291159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17291159	gmaxwell	ACK.
2601	17285030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17285030	jgarzik	This was cherry-picked from #1982.
2601	17286583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17286583	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2601	17287069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17287069	sipa	ACK.
2601	17296736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17296736	sipa	If we ever revamp the RPC interface, Id suggest a stronger separation between modules, like /rpc/v$VERSION/{wallet/$WALLETNAME}, blockchain, network, misc}, for example.
2601	17307093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17307093	luke-jr	In that case, this patch would break clients trying to use /rpc/v0/blah Perhaps an alternative to / should be allowed within some criteria?
2601	17357555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17357555	gavinandresen	ACK. Tested with the python and curl examples on our JSON-RPC wiki page.
2600	17269590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17269590	jgarzik	Seems correct at first glance. Would prefer init-to-zero over init-to-0xFF but thats nit picking.
2600	17371917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17371917	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2600	17421372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17421372	sipa	0x00 is a valid serialized EC point (though not a valid ECDSA public key), so I prefer using a certainly-invalid data there, to trigger more errors in case of some out-of-bounds access.
2600	17421430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17421430	jgarzik	Fair enough. ACK.
2600	17434445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17434445	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2600	17579744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17579744	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2600	18659581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18659581	sipa	Rebased.
2600	18685550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18685550	jgarzik	Wanted to get this one in sooner rather than later, so that other work may be based on top of it (it stirs a lot of code)
2599	17239103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17239103	sipa	Tested with -maxreceivebuffer=3 (yes, that means 3 kilobytes).
2599	17241017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17241017	jgarzik	It seems like this creates a remotely trigger-able state, whereby someone would not be selected for read or write, yet the socket and CNode would remain, using system resources.
2599	17241260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17241260	sipa	How so? There is always progress: * Because there is a message in the send buffer left (so we send) * or there is no complete message in the receive buffer (so we receive) * or there is a complete message in the receive buffer (so we process)
2599	17298878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17298878	sipa	It seems the current code actually has a minor bug, as it means not setting have_fds / hSocketMax if the lock on cs_vSend cannot be acquired. I restructured the flow a bit, so now send and recv locks are both tried separately, and only as long as necessary. I also added some comment explaining the reasoning and why it cannot cause a deadlock.
2599	17301575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17301575	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2599	17357970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17357970	sipa	Mind taking another look at this?
2599	17364346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17364346	gmaxwell	ACK.
2599	17419848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17419848	laanwj	ACK (code looks ok, and tested downloading the testnet block chain using a very small receive buffer)
2599	17421068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17421068	jgarzik	ACK
2598	17239586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17239586	sipa	ACK if pulltester is happy with this.
2598	17243727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17243727	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2598	17249193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17249193	gmaxwell	On the winsock version check, this isnt creating a gratuitous incompatibility with a "future" version is it?
2598	17249432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17249432	sipa	Winsock 2.2 was released in 1996, and doesnt seem to have changed much. I doubt the version will change much still. The API specifies that if you request a lower version than the latest one supported, you still get the one you requested. So it shouldnt matter much, but it should be safe.
2598	17273083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17273083	laanwj	ACK I dont see this check actually failing in the life of the universe, but better to have too many sanity checks than too few.
2598	17273663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17273663	Diapolo	Just updated the commit-msg: ``remove -par=0 from help-message as this is default`` replaced with ``remove -genr=0 from help-message as this is default``
2598	17274441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17274441	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2598	17336129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17336129	Diapolo	As pulltester is happy, can you merge it, so I can create another translations update :).
2596	17232764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17232764	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2596	17232800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17232800	schildbach	That sounds pretty cool if it works (is not exploitable).
2596	17233831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17233831	gmaxwell	Looks like signature malleability will trip this up, e.g. anyone can trigger this on anyones transactions.
2596	17235905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17235905	gavinandresen	I love the idea of this. The transaction malleability problem needs to be solved (it shouldnt count as a double-spend if the second transaction contains all of the outputs of the first). And this should be combined with a "relay first seen double-spend" patch, so you have a good chance of actually seeing double-spends.
2596	17246056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17246056	jevonx	- good catch, Im working on a fix.
2596	17252622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252622	luke-jr	Unless you get nodes to relay double spends they see, this isnt going to work... Also, instead of hiding blocks until 200, the status should simply not be Confirmed until 200 more. See how generated coins work (120 blocks before Confirmed) for example.
2596	17255325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17255325	jevonx	Now it ignores double spends if everything is identical except the sigs. I think we probably dont want to allow different inputs for same outputs, because independent transactions can have identical outputs. Take this transaction triangle... T1: in=A+B, out=X // thank you T2: in=C+D, out=X // more money, thank you T3: in=A+C, out=X // benign double spend? ...if T3 gets mined, then T1 and T2 cant. Even without relaying double spends yet, this already works most of the time. If you have 20 connections, you have 20 chances to get the double spend. If none of your peers gets the double spend, it probably didnt reach very many nodes. It also scans transactions in blocks, so you know immediately if your transaction loses, instead of wondering if its staying at 0 conf because it just got passed over. If theres a fork, it scans other forks blocks too.
2596	17255661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17255661	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2596	17256710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17256710	petertodd	Nice! Im working on replace-by-fee code right now, so the changes youre making to the wallet code will be really useful as part of my patch. You should make your code a bit more sophisticated so that you only care about double spends if the amount of Bitcoins being transferred to you changes, IE any changed output that goes to an address in your wallet. (assuming you didnt send the transaction yourself) That way you wont get false positives when the sender uses tx-replacement to add more fees to a transaction after the fact.
2596	17258237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17258237	gmaxwell	Well, Id want to allow changes like increasing fees (which might require adding a change output that wasnt there before. Id prefer it to be something like "doesnt pay _me_ any less", can you suggest a reason to be more restrictive than that? We should still not show _both_ of a benign double spend, but we should probably not penalize the one we are showing.
2596	17326973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17326973	mikehearn	The current double spend rules are pretty simple. Jevons patch should be good as is (I mean conceptually). Then later changing what happens on double spend can update this code as well. bitcoinj has code that does something similar, though unfortunately I only ever unit tested it (and its not really complete).
2596	17458150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17458150	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2596	19966709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19966709	mikehearn	jevonx, could you rebase and squash your commits? There are several now and a few are fixups for others. Itll be a bit easier to review then.
2596	21091054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091054	luke-jr	Poke, please rebase and squash...
2596	21317140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21317140	luke-jr	Looking at this, the methods really dont belong on CTransaction either. Feels like they should be part of the wallet.
2596	26688719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688719	gavinandresen	Closing due to inactivity and need for rebase. Please open a new pull request (and link to this ones discussion, if relevant) if you have time to create a pull that will merge cleanly.
2595	17235245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17235245	laanwj	ACK
2595	17236846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17236846	sipa	is there a problem with pulltester here?
2595	17238850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17238850	Diapolo	Looks like this is the cause but perhaps just related to some pulltester work. ``Blocks which should/should not have been accepted but werent/were: 9``
2595	17239111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17239111	Diapolo	ACK, I can confirm this fixes #2587.
2595	17240804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17240804	jgarzik	ACK
2595	17247714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17247714	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2595	17247844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17247844	gmaxwell	ACK
2592	17199069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17199069	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2592	17451024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17451024	laanwj	A very useful feature to have, which removes the need for external scripts such as pywallet in many cases. Ive played with this a bit and I wonder: would it make sense to add a way to output the dump over as well, in addition to exporting to a file on the server? This would make it possible to pipe the output of dumpwallet to something else without making a temporary file, ie bitcoind dumpwallet | pgp -e | mail my@walletbackup.org (vice versa with importwallet)
2592	18126058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18126058	soundasleep	Is there any ETA on when this may be included? Im looking for a way to export all of my public addresses, both created normally and those in the keypool, without having to parse wallet.dat manually. It would be fantastic if the dumpwallet command had an argument to suppress output of private keys.
2592	18257504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18257504	luke-jr	Hopefully 0.9 will be replacing bdb with a new append-only format. It makes sense to use the same format for dumps/imports, IMO.
2592	18257707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18257707	sipa	I disagree. For a wallet format you mainly want strong consistency guarantees and easy updating. An export/import format is write-once anyway, and is preferably compatible with other clients and transparent.
2592	18667347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18667347	laanwj	ACK
2592	18685046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18685046	jgarzik	ACK. How does this intersect with #1863 ? Should #1863 be merged first, or this?
2592	18694908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694908	sipa	Rebased. I dont think this will conflict (much) with #1863, they will only interact via future functionality building on both (use GetKeyBirthTimes to fill in unknown birthdates, use known birthdates when dumping, ...).
2592	18806657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18806657	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2592	19858648	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19858648	sipa	Rebased after merging #1863/#2781: dumpwallet now dumps creation times (from key metadata), and importwallet restores it.
2592	19858836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19858836	sipa	I dont think that functionality belongs in this command, as it exports to an already-defined format designed for key backups. I would have no problems with a separate command that just lists all wallet keys, though.
2590	17164347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17164347	jonasschnelli	MacOSX: after pulling i get a SIGABRT somewhere in boost::filesystem::detail::canonical. Question: when i create a "ln -s" the current stable client works perfect without this fix (testes MacOSX). Do you say, till now it was not possible to symlink "ln -s" the .bitcoin directory on linux?
2590	17164425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17164425	sipa	My .bitcoin directory is symlinked on Linux.
2590	17165294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17165294	mcdee	It looks like the specific situation which the patches address is when the link points to an NTFS filesystem. When the link points to an EXT3 filesystem it works without the patch. which version of boost are you using?
2590	17165802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17165802	jonasschnelli	boost Revision 1 (devel)
2590	17177575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17177575	Diapolo	Can you squash your 2 commits into one please.
2590	17192623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17192623	gavinandresen	NACK on adding more code just to support a weird configuration like a symlink pointing to a NTFS filesystem.
2590	17386520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17386520	mcdee	Well the configuration in this case is a dual-boot desktop for both Windows and Linux, attempting to share the blockchain between the two installs. Not sure if it counts as "weird" but Im happy to accept that this is a non-supported setup.
2590	17452038	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17452038	laanwj	I dont think you have a weird configuration, and dont see any harm in supporting it. However, I dont think this is the right solution to your problem. Looking at the root of the issue: why is `fs::create_directory` called when the symlink already exists?
2590	17453249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17453249	mcdee	`fs::create_directory` is designed to return without error if the directory already exists. So it works fine in the situations where a directory already exists, or a directory doesnt already exist. However when there is a symlink in place of the directory which points to the NTFS partition it throws an error. Resolving the path prior to the call to fs::create_directory avoids the issue as it reverts to one of the first two mentioned cases.
2590	17733803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17733803	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2590	17772636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17772636	rebroad	Why do you consider this a "weird" configuration? I suspect its a fairly common one. Certainly a symlink to a NTFS partition should be supported, IMHO. Why shouldnt it be?
2590	17774778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17774778	sipa	In any case, this patch looks pretty safe to me.
2590	17806147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17806147	Diapolo	I also think there is no real maintain-cost here. What I would like is a little comment, what this does in the code.
2590	17809836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17809836	jonasschnelli	just for the records: `fs::canonical(path);` does crash with SIGABRT on my mac. So we might wrap the new code with some #ifdefs for linux.
2590	18691933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18691933	jgarzik	Ouch. Can you confirm this happens on HEAD + this patch? In general, "meh" Symlinks currently work. Some people might notice that their $datadir as applied differs from the one specified, e.g. /home/real/path/to/my/data rather than /my/data.
2590	18701248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18701248	jonasschnelli	ACK - checked out HEAD + this commit - having `boost (devel)` (installed trough port) - running standard 10.8.3 runs smooth But i didnt test against a symlink pointing to a NTFS drive (NTFS connection are very rare on mac).
2590	18724318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18724318	goldbit89	could this be the reason im getting error : error opening file for writing: c:\program files (x86)\bitcoin\bitcoin-qt.exe in issues 2707 and 2712. i found a lock i thought was holding the bitcoin folder and sub folders along with files but i do not know how to proceed from here and pondering if i should uninstall 8.1 and also wondering if i uninstall if i will lose my database and wallet? Thanks.
2590	20801388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20801388	Diapolo	Im still supporting that change, as the configuration seems more common, than we thought.
2590	26688666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688666	gavinandresen	Closing due to inactivity, and because were using create_directories now this may no longer be an issue. If it is still an issue, feel free to open a new pull request.
2590	27633981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27633981	laxris	Since I moved the Bitcoin folder from %appdata%\Roaming and junction-linked it, I receive a MS Visual C++ Runtime Library error stating: "This application has requested the Runtime to temrinate it in an unusual way. Please contact the applications support team for more information." Can other junction users confirm this issue?
2589	17136725	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136725	Diapolo	Currently testing this, I did a full IBD from one of sipas nodes, now a -reindex is running and Ill do another -reindex with a -dbcache of 1024! Will report my findings here and on IRC.
2589	17137209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17137209	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2589	17137762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17137762	Diapolo	First -reindex finished without errors, now a reindex with -dbcache=1024 is running.
2589	17140234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17140234	Diapolo	Second -reindex finished without errors :), ACK from my side.
2589	17166366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17166366	gavinandresen	Changes look good to me, ACK (I didnt test, though).
2589	17177264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17177264	Diapolo	Any chance this can be pushed upstream into the main LevelDB code? Perhaps Google is interested ^^.
2589	17201399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17201399	sipa	The win32 env code is not part of upstream LevelDB. If it matures a bit more, we may try to get it merged though.
2588	17136259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136259	sipa	Im not sure I like that - it makes code more readable to have the default listed explicitly, imho.
2588	17136323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136323	Diapolo	I just tried to harmonize the code once more, perhaps we should stop defining the default for GetBoolArg() then, which means we HAVE to specify what we want as default.
2588	17136411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136411	laanwj	I agree with Sipa. Explicit is better in this case, and its not like `, false` adds a lot of ugly code. Personally Id be fine with removing the default argument and specifying the default value on all GetBoolArg.
2588	17137559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17137559	Diapolo	Updated and removed the default for fDefault paramter.
2588	17138596	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17138596	Diapolo	Updated to include missing changes to util_tests.cpp.
2588	17142336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17142336	Diapolo	Reverted some changes, that led to wrong testnet detection because of init order (fTestNet).
2588	17142824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17142824	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2588	17237929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17237929	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2588	17273931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17273931	Diapolo	Anything more to be done here?
2588	17393457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17393457	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2588	17431250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17431250	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2588	17563534	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17563534	Diapolo	Removed from pull: - use fTestNet instead of GetBoolArg("-testnet", false), if possible (hint: needed to take care of init order)
2588	17565316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17565316	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2588	17567750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17567750	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2588	17589609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17589609	Diapolo	Its ugly to keep this updated, any meaning if this should be merged now or not?
2588	17591035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17591035	laanwj	There is no point in trying to rush core changes. They have to be carefully reviewed and as this does not close a bug, there is not really a hurry.
2588	18123523	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123523	laanwj	ACK after 0.8.2 release
2588	18434430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18434430	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2588	18787068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18787068	Diapolo	Rebased, fixes merge-conflict.
2588	18807237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18807237	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2586	17130100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17130100	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2586	17134877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17134877	Diapolo	Compiled in and still working :), so ACK.
2583	17116766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17116766	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2583	17123008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17123008	sipa	Wow, apparently introduced by a commit of mine in 0.3.23. I cant even remember I wrote that code or the comment with it... ACK
2580	17108037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17108037	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2580	17112931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17112931	laanwj	ACK
2580	17118924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17118924	sipa	This is not necessary, as status.ToString() is already printed out in all places that call HandleError in the first place. Closing.
2579	17104825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17104825	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2579	19205698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19205698	jgarzik	Technical comment: is it better to iterate through one block, checking IsMine(), than all transactions in wallet? Non-technical: is there a compelling use case? Ignored the solvable code objection, Im tempted to close until a compelling need for this arises.
2579	19208875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19208875	shufps	technical: Iterating through the block would only give me txids of all transactions within a block. With IsMine() I could check if this transaction belongs to my addresses. Then, I would have to to query the wallet to give me all transaction details for every transaction which is mine in the block I currently processed. Im not sure if this would be more efficient because I thought json-rpc-calls are more expensive. So I thought, one single RPC-call would be better than lots of them ... non-technical: I tried to find a method for reliably receive confirmations about sent and received payments. I wanted to process every block exactly once and Im working with a database which supports transactions, so everything happens within a single sql-transaction. My solution is absolutely bullet-proof and repeatable in case an Exception in my java code occures. So I dont lose/oversee anything and I can easily debug my errors. I invested almost a week and tried almost everything until I implemented it this way. There is another method which is called listtransationssinceblock but it mostly gives unconfirmed transactions over and over again (with each call) back to my java-class. I was not interested in unconfirmed transactions but the method couldnt be restricted to only give back confirmed txs. I also tried what you suggested but there was the issue with lots and lots of rpc queries ...
2579	19911764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19911764	jgarzik	Thats not a compelling use case. If you are having problems with lots of RPC queries, then send a batch of them together as a JSON-RPC 2.0 batch. The problem with this method is that it causes over-reliance on a broken assumption that block == totally confirmed transactions. This is not true. You might have a chain reorganization at any time, which would invalidate any queries based on a specific block height/hash, and move transactions from one block to another.
2577	17078118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17078118	laanwj	Wed also want to change #2576
2577	17080862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17080862	jgarzik	ACK
2577	17081066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17081066	gmaxwell	Gavin, Can you make IsDust() return true for zero no matter what value MIN_RELAY_TX_FEE is or just make the ==0 test separate? I dont want to open up zero value floods for people who decide that they want to lower mintx/mintxrelay and find that 0 is easier to type than 0.0000001.
2577	17081941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17081941	gavinandresen	It wont open up flooding if the rest of the network refuses to relay or mine those transactions. And I hate making code that Im planning on replacing soon more complicated.
2577	17086536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17086536	gavinandresen	Rebased to make the qt an Error as suggested by and tell the user they screwed up if they give bad -mintxfee/minrelaytxfee values. Dont know why github is confused about the commits...
2577	17087393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17087393	gmaxwell	ACK on approach now. Will test.
2577	17098732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17098732	petertodd	You still need to change CWallet::CreateTransaction() so it doesnt create dust change txouts; see EDIT: no, actually thats specific to the way my patch works, because in it dust could be defined as greater than nMinFee, so you are correct.
2577	17099888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17099888	luke-jr	Will this prevent *spending* from transactions with dust outputs as well (since we now check that inputs are standard)?
2577	17100027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17100027	petertodd	No. See CTransaction::AreInputsStandard()
2577	17107596	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17107596	gavinandresen	: I added belt-and-suspenders code, since we dont have good CreateTransaction unit tests. why not indeed. Ill squash the two commits before final pull.
2577	17108482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17108482	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2577	17136310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136310	mikehearn	What is the longer term plan for this? 0.007 dollars is not very small. It only takes one doubling of the price to mean you can no longer send a payment of 1 cent, which is pathetic, even physical cash can handle that. And in the past weve seen 10x increases in price happen extremely fast. 1 cent isnt even a micropayment, thats just "payment". Whatever the ultimate plan is, it doesnt seem like this intermediate state is going to be very helpful. Itll just result in the same problem we have today, hard-coded magic numbers that become inappropriate much faster than they can be changed. Do you really see node operators changing the command line flags? I really think we should scrap the word "dust". It implies some kind of constant valuation, which Bitcoin doesnt have. What looks pointless today can look useful tomorrow.
2577	17136706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17136706	mikehearn	OK, to clarify, I agree that this change is an improvement over the old state in that it at least reduces the quantity of magic numbers and makes them derived from a single value. But itd be nice to know the roadmap here.
2577	17138223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17138223	johndillon	Ack Yesterday the fingerprints of every key in the PGP strong set as well as every key on bitcoin-otc were timestamped permanently in the blockchain for a cost of only $150 or 0.3 cents per timestamp. (I also paid 1.5BTC to the person who did it for me for their time) 50,000 new entries in the UTXO set that all validating nodes will forever have to have a copy of unless Bitcoin develops centralized blacklisting schemes. (yes I know you can use the data to prove it doesnt belong in the blockchain, they are SHA1 hashes so have fun if SHA1 is broken) According to my PGP keyserver data dump there are 3.2 million PGP keys floating around on keyservers. Timestamping every last one of them would just cost about $32,000 at a penny each for fees and vanished bitcoins, and add 120MB to the txout set. $32k may buy a lot of harddrives, but it doesnt buy enough harddrives to really pay the cost of storing those transactions forever. Notice how I didnt say "attacker". Timestamping is just one of many reasons why demand for transactions is unlimited. The developers are absolutely right to price such junk out of the blockchain but arent going far enough.
2577	17138242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17138242	MeniRosenfeld	This will make it impossible to use Bitcoin for colored coins, and some other applications which have information content beyond the mere transfer of value. I am of the opinion that people should be able to do what they want in the transaction, as long as they pay for the resources consumed.
2577	17138244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17138244	gavinandresen	Road map: Re-implement the memory pool, and keep statistics on transactions that enter and then leave by being included in a block. Protect CTransaction::nMinFee/nMinRelayFee with a mutex, and modify those by that memory pool code. So IsDust() will be based on what is actually being accepted into blocks, and will adjust appropriately. Do the same for free transactions (estimate priority needed to get included in block). Modify the RPC code to either send for free (if priority is high enough, based on estimate) or send with reasonable fee (based on fee estimate). And modify GUI code to either just send for free or recommend sending with a fee.
2577	17140050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17140050	johndillon	Nice technical details. But how expensive do you expect a transaction to be? That is the real issue and that is the one that drives scalability. What are you going to tell the people doing tiny transactions like tipjars, just leave Bitcoin?
2577	17141937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17141937	gavinandresen	: Bitcoin is not appropriate for transactions less than a penny or three. If Moores Law continues to hold, then one day it might be. That is all out of scope for this pull request; if we do nothing, then we are stuck with MIN_RELAY_TX_FEE=0.0005 BTC.
2577	17142014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17142014	jgarzik	ACK general roadmap
2577	17148144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17148144	johndillon	Good to hear. When people try to get the blocksize raised for the sake of penny transactions Ill be able to tell my fellow investors that people are trying to fundamentally damage Bitcoins decentralization for the sake of penny bets. Moores law doesnt apply to bandwidth, and Moores law is on its last legs anyway.
2577	17148811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17148811	petertodd	Seriously, take politics off github.
2577	17157953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17157953	mikehearn	Sounds good to me. Minor detail: the formula doesnt take into account that pay-to-pubkey outputs can be spent with smaller inputs, but I suppose it doesnt matter at this point given the dominance of pay to address. Could we bump the protocol version too? I know its kind of a hack but it might make it easier during the deployment period - otherwise wallets might create transactions too small to get relayed if theyre newer than most of their peers. Ill file a bug in bitcoinj to implement these rules.
2577	17158555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17158555	simondlr	Question. If I understand this correctly. Acceptable mintxfee/minrelayfee will now be determined by the miners (default is 0.0001 BTC)? However, currently, there would be no way to know whats the minimum fee to be reasonably included (http://bitcoin.speedstats.org/) in the next block? I see thats on the roadmap. But for now, it would just be best to stick with 0.0001 BTC/KB for doing transactions?
2577	17164832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17164832	luke-jr	It makes no sense to bump the protocol version, as there are no protocol changes here...
2577	17175496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17175496	petertodd	is quite wrong. The cost to send a transaction is related to its size, not its value. (there are some exceptions to deter abuse of free or spam transactions) Transaction fees are a process where you bid for a limited amount of blockchain space, so we cant tell you an exact number and demand for blockchain space changes day by day and hour by hour. Bumping the protocol version doesnt help much because nodes can only use that information with a code change, in which case they should just follow the new rules instead.
2577	17177555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17177555	simondlr	ah yes. Of course. Thanks! Isnt the plan with the memory pool to dynamically check what tx fee (per kb) is needed to be included in the block? Thus you will know by the hour (or per block)? Or am I getting it wrong? I tried finding the discussion on the memory pool, but couldnt find it. Can someone link it to me please?
2577	17179612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17179612	mikehearn	The protocol *is* changing because the IsStandard rules are changing. The problem is version skew. We dont know when this new code will be released and we dont know how fast people will upgrade. So my problem is, lets say we release new Android apps tomorrow that think the fee is now 0.0001/kb. People will start complaining that their sends dont go through. If theres a new protocol version the app can just measure the majority version and when it seems most nodes have upgraded, switch to the new rules and assume that 50% nodes will allow good enough propagation to the miners.
2577	17180671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17180671	petertodd	I think wed all prefer that nodes just follow the new rules regardless of what the majority are doing... That said does bitcoinj and by extension the Android wallets have any mechanism to tell the user when the majority of bitcoin nodes they are connected to are of a higher protocol version number than expected? Itd be a perfectly good "you might want to upgrade your software" mechanism, albeit one that can have false positives. In general though we should not bake in an assumption that propagation of any given transaction is reliable enough to just send and forget. Watching for transactions coming back to you from other nodes is a very good practice. For instance, send the transaction to one peer first, and see if your other peers broadcast it to you before you try them as well.
2577	17182087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17182087	schildbach	Nothing like that yet in Bitcoin Wallet. It updates when a new version is uploaded to the market. So this 50% switch thing could be implemented manually by uploading the right version at the right time.
2577	17184673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17184673	mikehearn	Yeah, we already watch for propagation which helps, but if it doesnt propagate then the user is still out of luck. We can indeed do what we did fore bloom filtering and just wait, but even for that we had version gating because the peer selection is sort of random. Bumping the version doesnt cost anything so why not do it? On 29 Apr 2013 19:20, "Peter Todd" <notifications@github.com> wrote: > I think wed all prefer that nodes just follow the new rules regardless of > what the majority are doing... > > That said does bitcoinj and by extension the Android wallets have any > mechanism to tell the user when the majority of bitcoin nodes they are > connected to are of a higher protocol version number than expected? Itd be > a perfectly good "you might want to upgrade your software" mechanism, > albeit one that can have false positives. > > In general though we should not bake in an assumption that propagation of > any given transaction is reliable enough to just send and forget. Watching > for transactions coming back to you from other nodes is a very good > practice. For instance, send the transaction to one peer first, and see if > your other peers broadcast it to you before you try them as well. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2577#issuecomment-17180671> > . >
2577	17184962	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17184962	petertodd	Among other things it makes it easy for implementations to find nodes that *dont* follow the new rules to try to get their non-compliant transactions propagated. Just follow the new rules and be done with it.
2577	17213502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17213502	jspilman	No response to MeniRosenfelds comment about colored coins? IsDust -> NonStandard ban-hammer seems unnecessarily opinionated when you can just directly charge for the resources being consumed. If cost is a factor of bytes and UTxO, it seems reasonable that fee should be based on bytes and the UTxO growth (OutCount - InCount). Yes, if InCount > OutCount then it could offset the the byte fee. For example, donating spare change to miners is still a good idea if you pay less overall fees for having one less output.
2577	17214638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17214638	petertodd	You know, if the colored coin people cant figure out how to make colored coin systems work with this patch, screw them. Ive told them how to do it right multiple times and they dont listen, which is plenty enough evidence that theyre amateurs who dont understand what theyre doing. So why let their lack of imagination threaten Bitcoin?
2577	17216366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17216366	mikehearn	Huh? If an implementation wants to try propagating a non-standard transaction it can just blast it out to half its peers and see if it hears it back on the other half. Or it can time how long it takes for those transactions to appear in the chain, or submit directly to a pool that accepts them, or many other things. Its not like were going to run out of version numbers. As a client implementor, Im saying it would help in the case where release schedules arent aligned.
2577	17240779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17240779	petertodd	Tell you what, lets go a little farther with your idea and add a new service bit NODE_RELAYCOST. Nodes with that service bit set will also advertise the minimum txout value they will propagate, as well as the minimum fee/KB or priority/KB required for them to relay a transaction. We can then hardcode the current defaults as the assumption for nodes that do not have that bit set.
2577	17244334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17244334	BlueMeanie	, with all due respect, could you please link us to your proposal re. Colored Coins? I have been participating in the discussion on the [Google Group](https://groups.google.com/forum/?fromgroups=#!forum/bitcoinx), and I pointed out the problem re. Microtransactions about a week ago. I agree with many of your stated frustrations. Thanks.
2577	17247171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17247171	dacoinminster	Please dont treat micro-transactions as non-standard. A small amount of bitcoins can represent large amount of value in higher protocol layers. Colored coins is just one example. Could we perhaps just raise the suggested fee on transactions which contain "dust"?
2577	17247336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17247336	gmaxwell	instead of raising the fee funds you lose forever just increase the value of the tracking txouts you use. This avoids the problem of creating perpetual txout set data-bloat which will never be swept up because doing so costs more than the redeemed output yields. No amount of txfee increases can approximate that.
2577	17248557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17248557	petertodd	Sure: Its from my fidelity bonds stuff, but the mechanism is just a way of doing colored coins really. The advantage is that because value isnt a fixed ratio of shared to satoshis you can divide however much you want and still avoid dust rules, and its friendly to SPV nodes. Now if your bond value is smaller than a tx fee, well, use a off-chain tx system thats compatible with Bitcoin transactions, basically a blockchain whos contents is guaranteed by a third party. commented on the forums that miners can sybil the network and create nodes that lie about RELAYCOST to, say, drive up fees, but equally miners can create nodes that just dont relay transactions with low fees to others with the exact same effect.
2577	17248741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17248741	gmaxwell	I think the motivational structure about lying about relay cost is different than actually not relaying. The issue is one of market segmentation, e.g. by actually not relaying you block all stuff, vs lying about costs you get all that are willing to pay to pay it. Observation is better than announcement. OTOH it may be possible to only have relay cost _lower_ some sane default.
2577	17252019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252019	katuma	Impact on colored coins does not really belong here, [this has been brought up a week ago on the mailing list you mention](https://groups.google.com/d/msg/bitcoinx/-b6XC4nUdYo/khkO7YHXBxwJ), without any satisfactory answer. Peters way seem plausible on paper, but its yet to be seen about implementation. After all, when you see reteps code, its christmas.
2577	17252734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252734	BlueMeanie	, thank you. There is some follow up on your ideas and their relevance for Colored Coins [here](https://groups.google.com/forum/?fromgroups=#!topic/bitcoinx/eBvfvlZZcig)
2577	17252857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17252857	petertodd	Thats a good point, although Im also thinking farther into the future where transaction replacement may mean that nodes want to limit the traffic from replacements that theyre getting. Um, no, thats not what Im suggesting, just a part of it. Read that paper please...
2577	17257981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17257981	killerstorm	I dont think this change will create significant problems for "colored coins". I mean, its strange that youre doing this, but I guess we can live with it. Your mechanism cannot handle more than one color in one transaction without mandatory tagging, which adds to blockchain bloat. I see no advantages over order-based coloring. We considered odd-even, tagging and similar ideas. Order-based scheme is the most straightforward and carries minimal overhead.
2577	17259454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17259454	petertodd	I outlined a mechanism where the tagging is integrated into the pubkey; no extra bytes at all in the blockchain. If thats too complex you can use a OP_RETURN <20 bytes> txout to mark txouts with data that can be immediately pruned.
2577	17268179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17268179	BlueMeanie	I do agree that the concept they are currently running with Coins ignores the economics of transaction processing. Its exploiting the fact that transactions of any size are processed without discretion. The points made in this thread show that this model is not viable, and not acceptable for the Bitcoin community. There is more detail in my posts on the Google Group.
2577	17271042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17271042	killerstorm	LOL. You failed to understand that Peters contract value accounting also uses satoshi value of unspent transaction outputs. It is just that it uses a different encoding scheme, a scheme which provides better divisibility. I dont think there is a problem with "the economics of transaction processing" in either of these schemes. Thats just your opinion, do not pretend that it is widespread. Lets close this discussion here (I mean discussion of colored coins and related), there is a mailing list or a forum for that.
2577	17278414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17278414	BlueMeanie	seems the discussion on that list involves those who are invested in particular ideas about colored coins. I reviewed idea, personally I think that a colored coin solution lies in alt-chains and using the main BTC block chain is not appropriate for this application. If someone can convince me otherwise in a credible way, Im all for it. I have yet to see that. This is the place to raise these points because the plan that currently dominates on the list affects the issue of Coin Dust and Tx fees directly. Personally I think most are avoiding the topic on the list.
2577	17398590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17398590	gavinandresen	Rebased and picked a couple of nits. Can I get some final ACKs ?
2577	17399785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17399785	jgarzik	ACK
2577	17402747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17402747	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2577	17420838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17420838	sipa	Code ACK; I havent thought enough about the policy itself to comment, but dont let that stop you.
2577	17421680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17421680	gmaxwell	ACK. Even if the exact policy turns out to have been ill-advised in retrospect the threshold is so small that its unlikely to cause substantial harm, and the increase in cost for flooding is a nice result.
2577	17456868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17456868	pentarh	Guys, you are breaking the bible. "Completely non-reversible transactions are not really possible, since financial institutions cannot avoid mediating disputes. The cost of mediation increases transaction costs, **limiting the minimum practical transaction size and cutting off the possibility for small casual transactions**, and there is a broader cost in the loss of ability to make non-reversible payments for non-reversible services. " Satoshi Nakamoto whitepaper
2577	17458696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17458696	gmaxwell	I disagree. Sending a flood of femtocents at someone isnt a "transaction". Bitcoin has long had limitations on the sending of very tiny transactions the original ones added by satoshi himself.
2577	17458980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17458980	pentarh	I agree that spam is an issue, but it should be changed in different way. Breaking fundamentals is a bad way IMHO, because its a precedent for further breaking. Does youtube banning out small and not popular videos? No. Youtube just extending storage. I think Bitcoin needs scalable distributed DHT-like block chain storage.
2577	17459216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17459216	gmaxwell	Perhaps you misunderstand what this does. This is not a protocol-rule change. Miners can still include the same transactions they can now, though this pull makes picocent payments not get included by default unless they change a threshold setting (useful if the value of Bitcoin changes greatly). "scalable distributed DHT-like" is a total arm-wave. DHTs are not strongly attack resistant and are generally not very suitable for the interesting challenges in the Bitcoin system. In order to be a decenteralized system all full nodes must inspect all transactions and have rapidly reliable access to the set of spendable outputs. You can make various storage vs bandwidth tradeoffs, but were constrained on both. The obvious alternative to abuse based on tiny worthless outputs is to add fees, which was satoshis solution. But with sendmany Satoshis solution was obviously not aggressive enough (youd send one fee and N junk outputs). Litecoin addressed that by multiplying the fee by the number of outputs but this quickly becomes obnoxious and still doesnt prevent the abuse. Better to address the creation of worthless tx outputs _directly_ and better to send most of your anti-abuse fee to your destination in order to make the abuse not abuse rather than give it away to a third party.
2577	17459403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17459403	jgarzik	It is not breaking fundamentals -- bitcoin has never ever been a micro-transaction or micro-payment system.
2577	17459769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17459769	johndillon	> It is not breaking fundamentals -- bitcoin has never ever been a micro-transaction or micro-payment system. Good, but we need Gavin to explain that publicly, explain what kind of fees he is expecting in the future and why, and explain what trade-offs he is willing to make between decentralization and low fees. Or, if you want, all core developers can make some public statements about this. But to just surprise people with a change with no warning or any sense of what they should be doing to keep their businesses running isnt acceptable.
2577	17461469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17461469	awishformore	Im currently starting a company that I hoped would bring innovation and diversity to the landscape of the Bitcoin economy, and this comes as a *huge* shock to me. Neither this, nor the MIN_RELAY_TX_FEE=0.0005 BTC are required, Gavin. Its ridiculous that you claim they are. If people agree the dust transactions are a problem, then find a *real* solution. An effortless one, that is as well designed as Bitcoin itself. This is something that should be 100% up to the miners to decide on. If you go through with this, you join the game of doing politics, and its not your place to do so. Its not up to you to decide whether Bitcoin is a micro-transaction system. Its up to the users and the innovators. I swear, if this happens, Bitcoin is dead to me. I will direct all efforts and all capital of my company onto an alternative crypto-currency the second this is released as standard in any Bitcoin version.
2577	17461969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17461969	cjdelisle	ACK The code looks good, this is a reasonable approach to preventing dust spam and raising the bar for people crapping up the chain with arbitrary data. This does not materially affect "deterministic satoshi tracking" colored coin implementations, which is IMO the only sane design for a number of reasons.
2577	17462033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462033	gmaxwell	uh. Perhaps you too are confused. This is not a protocol rule, its a default behavior which is configuration adjustable. Miners can still happily mine transactions not meeting this rule if they choose to. Weird to here you talk about other cryptocurrencies, as many (most? all?) have much more aggressive anti-dust rules than Bitcoin. We previously declined to merge the ones from litecoin.
2577	17462077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462077	awishformore	then it should be *off* by default, not on. Yes, you dont change the protocol. What you do is even worse - you pretty much disable something that is considered legal and valid by the protocol. If you declined to merge the Litecoin approach, I really dont get how you can even consider implementing such an ill-conceived dirty fix into Bitcoin, which should be the flagship crypto-currency.
2577	17462109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462109	petertodd	We do need better communication of this stuff, and that includes doing things like taking "Low or zero processing fees" off of bitcoin.org and not talking about microtransactions. Just the other day I was on the phone with an investor working on some payment system thing who had never heard of the blocksize limit at all.
2577	17462158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17462158	robbak	If you are creating a business that relies on creating many unspendable outputs, and this patch persuades you not to do so, then Id say it has done its job. The growth of unspendable and near unspendable outputs is a real and growing problem. On 06/05/2013 9:31 AM, "awishformore" <notifications@github.com> wrote: > Im currently starting a company that I hoped would bring innovation and > diversity to the landscape of the Bitcoin economy, and this comes as a * > huge* shock to me. > > Neither this, nor the MIN_RELAY_TX_FEE=0.0005 BTC are required, Gavin. > Its ridiculous that you claim they are. > > This is something that should be 100% up to the miners to decide on. If > you go through with this, you join the game of doing politics, and its not > your place to do so. > > I swear, if this happens, Bitcoin is dead to me. I will direct all efforts > and all capital of my company onto an alternative crypto-currency the > second this is released as standard in any Bitcoin version. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2577#issuecomment-17461469> > . >
2577	17463037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463037	ghost	Why are you leaving it undocumented? Everything should be documented. People should know what is going on and change what behavior they dont find acceptable.
2577	17463246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463246	mikegogulski	Fuck the "bible". Even Satoshi, peace be upon Him, can be wrong, mistaken or can fail to anticipate certain aspects of things. In any event, He is not here to guide us, so we must to the job ourselves, with all of our own faculties. My trust level toward you is extremely high. I see a lot of rubbish in this thread that unjustly questions your judgement. Even so, your initial comments are a bit worrying to me, and make me dream of a better reality. That is, when we recognize that what we have now is rather screwed up, we are best served in the long run by fixing the problem at its root rather than hacking at the branches; antivirals and antibiotics, not analgesics and Band-Aids(TM). I feel youre probably right going this way now on this decision. Its more or a less a "gotta be done" thing. But I really wish that folks who are submitting and committing new code will devote equal energy to deeply examining and then refining old code so that the kind of dilemma you faced here doesnt occur. (topically tangent aside: I wrestled for a couple of weeks in January refactoring parts of the RPC code, including where it touches the interfaces to the CWallet object. I got some great feedback from but not much more attention to my diffs, and I gave up a bit later on when other changes to the RPC code broke the build on my branch. I am not a coder on the level of any of the core devs, but I do know well how to look at a code base that Ive come to understand and then identify and fix problems around unit tests, modularity and separation of concerns. I have zero animosity about "wasted" work or whatever, but I feel very strongly that not enough attention is being paid to those kinds of issues in the existing codebase. I imagine, given your statement above, that you share the same sort of feeling.)
2577	17463281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463281	felipelalli	This is sad. Goodbye Satoshi. Agreed
2577	17463586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463586	luke-jr	The Satoshi-is-God voices here, besides being fundamentally flawed in reasoning, seem to be confused in some other way(s) as well. Satoshi himself approved the "valid but non-standard" exclusionary function originally, for exactly problems like this. Since 0.3.18, bitcoind has refused to relay (or mine) transactions not matching a set of well-defined attributes; this pull request just extends that to include the latest problems.
2577	17463796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17463796	BlueMeanie	The kind of *transaction discrimination* reflected in this recent merge is inevitable. Its important to note however, that many ideas for the future of bitcoin rely on a flexible policy regarding what makes its way into the block chain. I agree with - these new measures are required.
2577	17464042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464042	johndillon	> So IsDust() will be based on what is actually being accepted into blocks, and will adjust appropriately. How is this going to work given that miners only have an incentive to charge per KB? (using UTXO space after all is treated no differently than using blockchain space)
2577	17464257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464257	drwasho	receives the prize for the most intelligent comment: "Perhaps you misunderstand what this does. This is not a protocol-rule change. Miners can still include the same transactions they can now, though this pull makes picocent payments not get included by default unless they change a threshold setting (useful if the value of Bitcoin changes greatly)." This doesnt seem to be the Bitpocalypse that people are making it out to be. To Bitcoin miners thinking of boycotting the new version, a better way to protest would be to change your default settings to process these microtransactions. If most of the miners make these changes, then this controversy truly becomes irrelevant.
2577	17464302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464302	johndillon	> To Bitcoin miners thinking of boycotting the new version, a better way to protest would be to change your default settings to process these microtransactions. If most of the miners make these changes, then this controversy truly becomes irrelevant. Its interesting to watch the developers continually overlook the fact that without relay nodes the transactions will never get to the miners regardless of what settings they use, and there is no way to find nodes to relay your transactions. As I have said before I agree with the patch, but the subterfuge used to get it implemented is worth noting.
2577	17464455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17464455	mikegogulski	No, and screw you for demanding. We will not leave politics off GitHub. Subterfuge? ORLY? WTF? (My apologies if I am not reacting to the comment you were reacting to. I hope that folks will find this useful in any case.) In the late 1950s to late 1970s, The Establishment, aka The Man, aka The Conspiracy, aka the FBI (Fucking Bavarian Illuminati) and the CIA (Cocksucking Illuminati Assholes) identified, targeted and destroyed the leading lights of a nascent, shining shining movement toward global illumination: MLK. Leary. JFK. Morrison. Malcom X. Lennon. and on and on. The dawning of the Age of Aquarius was strangled in the crib. The failure of that time, which culminated worldwide in 68, was that the movement had FACES, and faces are targets. Destroy the faces, destroy the movement. Take all of the trappings of the new consciousness and recast them as cheap marketing gimmicks: subversion complete. The Hippie pioneers did not drive Volkswagen Beetles because they were some kind of status symbol or mass-consumer-culture signifier. They drove them because they were cheap, simple, minimalistic, trivial to repair and infinitely customizable. It was only later that the cultural imperialists sucked everything good out of the times and pushed it through the marketing meat grinder, until: Fahrvergngen. Today, I believe, a few of the surviving "secret chiefs", if you will, who were active back in 68 and before are working as cleverly as they can, before they die, to levitate the Pentagon^w^w^wshift global consciousness in much the same way, but with a fundamentally different and more effective strategy: No more faces. Anonymous. Alan Moores Guy Fawkes mask. The unknown hero, the nameless brother, the faceless Samaritan. When The Man cant target a Face, it doesnt know what to do, and the field is open for massive gains on the side of the regular people. Today, we dont venerate the Faces. We don the mask. And this Face Book? Oh! Do you jest, or do you not feel the power you have lost? Whoever or whatever Satoshi is or was knew this, and acted right from the start on that knowledge. No face, no target. Produce brilliance, show some people, fade away into legend. There is a teaching in Zen Buddhism which I will paraphrase here: If you meet Satoshi on the road, KILL HIM.
2577	17465224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465224	BlueMeanie	also: I do agree with , I think we need some innovation in the storage technology. All transactions should be accessible on some level of resolution, but really these problems are outside the scope of Bitcoin and is doing the right thing. Just because some parties want Colored Coins or Distributed Exchanges to work with the existing block chain does not mean it must be worked into the core code, certainly not at the expense of basic features. I think all this discussion points to some goals for Bitcoin 2.0. Having *multiple user-defined asset types* is really a very valuable use case and opens up a whole world of possibilities for finance, truly **making money accessible for everyone**.
2577	17465310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465310	gmaxwell	Im hurt. The accusation of subterfuge is misplaced. In the same breath Ive been talking about this Ive talked about the other kinds of non-standard transactions which work exactly the same way. If you dont think Ive been clear enough about it okay, so point it out to me and Ill fix it. I certainly have no reason to deceive anyone. None of us in support of this change profit from it beyond the hope that it stops some of the abusive use and keep bitcoin humming nicely. Presumably anyone agreeing to process a non-standard transaction will direct you to addnode something that will take them for them (https://en.bitcoin.it/wiki/Free_transaction_relay_policy), which can now even be added without restarting the software .
2577	17465313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465313	josephagoss	Couldnt you finally increase the divisibility of Bitcoin down to a larger amount of decimal places, making a "Satoshi" divisible would help make that unit useful and no longer dust. If a Bitcoin could be split into a trillion places, and define dust as being several digits from the new smallest unit, this would leave all the units we deal with as useful, including the "Satoshi" unit.
2577	17465552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465552	johndillon	I am of the position that I solidly think the change is a good thing, but I also feel that it is simply not communicated to the wider community at all. That my little post on the forums lead to 7000 views in just a few hours shows how little people know and understand about these changes even taking trolls into account. is right to point out how few people understand these issues in the wider community and how we still present this misleading "low or no fees" message without any plan for how that will actually be achieved. If investors are putting money into Bitcoin thinking it is something it is not, this is a serious problem. What I see is people sinking money into Bitcoin assuming it will be a cheap payment platform, and people sinking money assuming it will be decentralized, and the way things are going with the foundation and Gavin I do not see how it will be both, but none of this is being effectively communicated outside of a small number of developers and the occasional interested person like myself. Also without a way for nodes to relay dust transactions, given that 0.8.2 nodes will not identify themselves, yes, the change really is blocking dust entirely. I think that is a good thing to do, but dont go off on forums soothing peoples feelings by telling them untruths like its just a miners choice. Consider this very wrong post byTradeFortress : Even isnt really being honest here: Again, if the network is ignoring your transaction, from the users point of view it is a protocol change.
2577	17465748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465748	BlueMeanie	, it is entirely true that Bitcoin should not be seen as no-transaction-fee technology, although it appears that way because the incentive is(temporarily) coming through an inflation vehicle(the coins created with each block in the chain). Obviously problems arise when, in the case of color coins, they are actually multiplying the BTC value of a very small amount(ie. 0.000001 BTC is colored to be worth 1 silver gram which has its own BTC value of 0.2039 - at the time of writing) - this will clearly have fatal effects on the mining economy because **you have detached real value from BTC units**. Various ideas have been proposed to circumvent any kind of regulations, but no proposals offer a way to create a long-term viable transaction economy that reflects the actual consent of the users.
2577	17465794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17465794	gmaxwell	I agree it could be communicated better. I didnt realize that it was pulled already until mid-discussion today, and I thought it had been posted (thus the discussion above about colored coins), or I would have prodded for it to be more widely advertised myself. I pointed out in the threads someplace that you cant tell when its being dropped. I do think you need to be careful with "blocked". "You have to change the setting, and addnode a cooperating miner, and then it works fine", its not the same as blocked. We probably need better language to discuss this, as there are absolutely people thinking that its blocked in a protocol rules sense (saying miners have no choice because they can only run bitcoind and such) and I dont think its wrong or misleading to respond to that saying its not blocked.
2577	17466019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17466019	petertodd	Points for a proper press release about this: Main thing driving this: make data spam more expensive in a way that doesnt make regular transactions more expensive. The minimum output does this because data spam doesnt spend outputs. Options for affected businesses: combine payments together so that the lump sum is >54uBTC or connect directly to a miner willing to mine your transactions. Off-chain is possible too with something like EasyWallet, but then your customer needs an easywallet account. (they have an API) Consider that Bitcoin may not yet be right for you. Long-term outlook: We dont really know yet. If tx fees rising can threaten your business take into account that they may be more expensive in the future (10x is quite possible) and there may be very little you or the development team can do about it. Ive got better things to do than post it though:
2577	17468052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17468052	jgarzik	1) I note the distinct lack of discussion surrounding and its pull request. 2) This issue certainly deserves better communication, but think the trolling (reddit/bitcointalk) by was premature and exaggerated, because there is still plenty of time and opportunity in the release cycle for comments. Usually the time prior to -rc1 release is used to write the communications that appear in -rc1. The -rc1 release announcement then describes the changes, including rationale and impact. -rc1 release initiates a phase of public testing and comment. If the community really dislikes a particular change, this testing phase is yet another opportunity to make that known. 3) Most importantly... The vast majority of remote workers (miners) do not seem to care at all about mining policies, in practice. Pools mining policies are incredibly opaque, few miners show deep interest in mining policy, and few pool operators show much interest in deep thinking about mining policies, transaction selection, and various economic incentives. Even a lot of smart, engaged pool operators wind up preferring unmodified (or close to it) bitcoind for reasons of reduced complexity. Therefore, just wanting -- quite rationally -- to get paid for mining, it is the sad reality that the block subsidy (currently 25.0 BTC) reduces transaction fees to the economic equivalent of statistical noise. The long term cost of generating and storing economically worthless transaction outputs is simply not transmitted to users or miners. Nor, really, is the short term cost. The economic signalling of the block subsidy drowns the rest out. The cost is currently borne entirely by "the cloud", the all-volunteer P2P network of full nodes. The only modicum of behavior signalling we see there is a decreasing number of full nodes, and an increasing amount of P2P traffic. What does all this add up to? The answer is lies in the free market. Move transaction fees away from hardcoded limits, and towards something more dynamic, with economic feedback between merchants, users and miners. These hardcoded anti-spam limits have existed for years, originally starting out at 0.01 BTC. Transactions have always been filtered. Anything outside a small set of "standard" transactions are deemed "non-standard", and will be filtered (not relayed). Again, policy has been in place for years. The fee limits were lowered over time, but still hardcoded. This latest change makes this limit configurable, moving one step closer to the goal of users being able to react rapidly to changes in miner policy or bitcoin value. One step closer to a freer market. Also introduced is an anti-spam rule that avoids relaying transactions whose value is below that of the transaction fee required to send it. This rule self-adjusts over time, as the "tx fee required to send" changes over time. In a dynamic fee market, it might change a lot. It is unavoidable that tiny transactions worth fractions-of-a-penny may be easily abused for data transmission and storage. We have already been burdened with megabytes worth of wikileaks data, GPG encrypted data, and the PGP fingerprint strong set, so this is not a theoretical problem. These files are stored as bitcoin transactions with values around 0.00000001.
2577	17468564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17468564	petertodd	1) That discussion was on the development forum, around the holidays. As I said above, Ive run into people putting serious effort into starting payment-dependent Bitcoin businesses who dont even know that there is a blocksize limit. 3) If the block subsidy was not statistical noise, transactions would have to cost something more like $1 each for 1MB blocks, $10 each to equal the block subsidy. On the other hand, if transactions were still cheap, say a penny each, well, youve just made the data storage problem something like 100 to 1000 times worse. If you dont want the blocksize to grow at the maximum rate possible, 52GB/year, the answer does *not* lie in the free market until genuine economic activity is such that transaction fees are expensive. It relies on taking advantage of miner persuasion, as we already do. Anyway users *cant* react rapidly to changes in miner policy or Bitcoin value without reasonable alternatives. I suspect *without* alternatives blockchain space is more like diesel and gasoline in terms of supply and demand - you absolutely need it and if you cant get it you just close up shop instead and that section of the economy goes out of business. (FWIW why I think calling a troll is over-simplifying things)
2577	17468943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17468943	jgarzik	A big blaring "WARNING" on multiple fora is definitely trolling, particularly when it lacks any companion effort to figure out a better method of communication.
2577	17469259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17469259	jgarzik	The *goal* is a free market. It is a long road to get there, and we dont ultimately get there until the block subsidy is tiny, years from now. This change is one small constrained step, not the end goal itself.
2577	17469641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17469641	petertodd	Thats not true either. Provided there is genuine economic demand for 100% of the blockspace available the mining-side code implements a perfectly reasonable free market as-is, and that demand could show up tomorrow for all we know. Client-side needs fixing, but thats another matter. The block subsidy has nothing to do with that - while hashers dont care much, mining pool operators care a lot about that extra percentage point that fees can get. Of course, they also care about orphans, so with the big subsidy economically rational fees are actually going to remain high for most miners no matter what, especially if Bitcoin mining is as decentralized as it should be.
2577	17470186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470186	jgarzik	"Client-side needs fixing, but thats another matter" -- That is precisely the matter at hand. The individual miner market is already done, but the client side necessarily proceeds in fits and starts.
2577	17470202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470202	killerstorm	Can you please explain how "deterministic satoshi tracking" colored coin implementations are not affected? I think I know what youre talking about, but I dont see how they are not affected. If possible, please reply in "colored bitcoin tech discussion" on forum. (I know that coloring schemes which will work fine despite this change are possible, but I dont see how it applies to "deterministic satoshi tracking".)
2577	17470372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470372	awishformore	My business would not rely on micro-transactions at all, and the fact that no one is getting why Im *still* going to move away from Bitcoin if this goes through is what should worry everyone All you are discussing and discussing is whether this change is sound technically. Since you already admitted in your own words that this change is supposed to be temporary and should be replaced by a solid system later on goes to show that no, its not. Its a dirty, quick fix for a problem that goes way beyond a simple quick change - and it should never be approached in such a half-arsed way. However, this is not even relevant. What is relevant here is that you both suffer from something I like to call "developer-blindness". You think you know better than anyone else, and maybe you do, but that does not matter. The majority of users does *not* want this change. In fact, the majority of users are opposed to this change citing various real arguments. Arguments you might not agree with. Arguments you might consider less relevant than your own. Arguments nonetheless. It is not and should never be your place to impose a change on the community that is clearly not wanted. Again, if miners would have such huge trouble with these transactions, they would end up implementing their own filter. What you are doing is to massacre the protocol for everyone. Even worse, by dictating such an unpopular change, you kill the credibility of Bitcoin as a whole. I, personally, will never trust the potential, aspiration and philosophy behind Bitcoin again if this gets implemented, and Im not the only one. I dont need to tell you how vulnerable Bitcoin still is. Right now, Bitcoin is growing tremendously, not because the software behind it is mature in every possible way, but because of the idea behind it. You are risking to put this idea in danger.
2577	17470518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470518	awishformore	And I would beg everyone here to stop acting like the average user is somewhat capable of still using micro-transactions. Bitcoin is getting closer and closer to mass adoption. Unless you are a developer yourself, you wont be able to use micro-transactions anymore, which *de facto* eliminates them from use. Now *that* is trolling.
2577	17470703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17470703	mikehearn	This thread is (once again) devolving into uselessness. If you dont like the decisions Gavin makes about this codebase, please fork it. Arguments that arent rooted in technology like "this isnt what the majority of users want" arent likely to have much impact. This is the first change of several related to fees. Its not the end state. Rest assured, there are plenty of people who want to see Bitcoin scale as effectively as possible, and with a market-based solution to fees we will eventually find out how scalable it can be.
2577	17471010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17471010	awishformore	This change should *already* be a fork, not the reference implementation.
2577	17471229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17471229	petertodd	Client side fee stuff is just a few months of work. Its really not a big deal technically, the issue is the politics of accepting that fees and limits are a necessity. What will probably be very interesting is watching all the deliberate attacks that will come from people like and evorhees (hi luke!) to show anything but fixed limits are insane.
2577	17482645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17482645	ripper234	colored coins is a side project, its not something that Bitcoin should necessarily support. Still, trading colored coins is still possible, it just possibly gets a bit more expensive. As much as my opinion counts for anything here, I think we should consider Bitcoin and Bitcoin dust/fees first, and as it is know that Bitcoin was never meant to handle microtransactions ... go forward with this pull request & Gavins roadmap.
2577	17495465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17495465	cjdelisle	As a proud non-member of the forum (because of threads like this) I wont be able to post about it. I did just subscribe to the bitcoinX google group (the subscribe email bitcoinx+subscribe@googlegroups.com should be prominently displayed) and I will write my understanding there.
2577	17499133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17499133	patcon	:+1: looks good :)
2577	17570133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570133	petertodd	Huh? You can spend transaction inputs regardless of how small they are with this patch, and we have every reason to make that possible, even easier, to try to reduce the UTXO set size. The only time what you are suggesting might apply is if we were desperate enough to reduce the UTXO set size that we were willing to make old coins unspendable, and were literally multiple orders of magnitude away from even considering that step. Not to mention you said "store coins forever"... Dont confuse people.
2577	17570148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570148	gmaxwell	This doesnt inhibit spending in any way. It inhibits the creation of new dust outputs paying. Spending them is important, in part, because its important that they get swept up. Im not sure what youre talking about here, but its not this pull.
2577	17570631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570631	SergioDemianLerner	My post was not strictly related to the patch and does not belong here probably.
2577	17650499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17650499	satoshiroulette	As a casino operator that creates dust I have mixed feelings about this. I have to comment the litecoins anti dust patch can EASILY be worked around as we have done for [our own casino](http://satoshiroulette.com/?mode=LTC) and we would have applied the same hack to the bitcoin casino were you to use their patch. The end result being is that normal users are discouraged from sending dust and automatic services simply work their way around the new rules. I do not see this patch reducing spam for games like satoshidice and our own reverse dice as operators are likely to increase the loss payout multipler to be higher than 0.000055 btc. The main game that it will effect (for us) is our roulette game, if this is the way forward for bitcoin then we shall have to adapt.
2577	17650803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17650803	gmaxwell	I had no idea that you still created outputs smaller than this. Satoshidice does not (their smallest is right on the boundary). Creating very tiny outputs independently of how many are created is harmful because it costs users more in fees to clean them up then they yield, so they never get cleaned up. Actual economic transactions are not intended to be effected by this, so I think your commentary about "I do not see this patch reducing spam" is confused. This change in behavior targets exactly the specific activities it is intended to target. The intended effect is to decrease the amount of outputs which are too worthless to redeem (negative-effective-value-payments) and the unredeemable data storage transactions. Services which simply inefficiently generate large numbers of transactions (I assume this is what you mean by spam?) get to compete with fees and priority for space in the blockchain. This patch isnt intended to do anything with respect to that.
2577	17654676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17654676	satoshiroulette	we wont be creating them for much longer ;) Previously we used to reforge our dust into a whole piece of bitcoin again by using raw transaction api and sending to a new address in the same wallet with no fees. Thanks for the early warning, we shall get to work updating our game configs so we are ready for this change.
2577	17731259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17731259	paraipan	NACK, you dont solve the spam problem by including more "magic" numbers
2577	17736410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17736410	gmaxwell	There are no more magic numbers.
2577	17737211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17737211	paraipan	Well that is strange, I though you guys called "magic" all arbitrary values in bitcoin source code.
2577	17737518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17737518	petertodd	We already have a "magic" number for minimum allowed txout value, and that magic number was 1 satoshi. This patch changes that magic number to 5430 satoshis; no new magic numbers are being added. edit: as sipa and gmaxwell point out, this isnt strictly correct. I should have said "This patch changes the default setting of that magic number to 5430 satoshis, and additionally lets you easily change it with a configuration setting. (although, please dont unless you know what youre doing)"
2577	17738411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738411	cjdelisle	If you read the patch, youll see that the 5420 number is not actually hard coded ("magic"), it aims to prevent payments where spending that payment requires a fee of more than 1/3 of the payment itself. Since "typical fees" are based on the number of bytes of transactions which bid for the 1MB per block limit, the number is arguably *less* magical than it was before. <small>Yes gmaxwell, I know that minimum fees are hardcoded but when we reach a point where there are more transactions than there is block space, those hard numbers will become meaningless as transactions which pay the minimum begin to be delayed/dropped.</small>
2577	17738507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738507	gmaxwell	No, not even that. The patch replaces a hardcoded base fee value with a _configurable_ one, and makes the hardcoded dust value just be a fraction of the base fee value. So nothing is hardcoded except a fraction off a configured value...
2577	17738577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738577	sipa	I On 10 May 2013 20:44, "Peter Todd" <notifications@github.com> wrote: > > We already have a "magic" number for minimum allowed txout value, and that magic number was 1 satoshi. This patch changes that magic number to 5240 satoshis; no new magic numbers are being added. Thats not even true. It changes the minimum output side to whatever is at least 3 times the fee necessary according to the active policy to spend it. For a fee rule of 0.0001/kB, this results in 5240 satoshi. This 5240 itself is not a constant. And even better, this patch makes the fee policy rule configurable. So no, this patch strictly reduces the magic numbers.
2577	17738580	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738580	paraipan	Thank for clearing it out guys.
2577	17738953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17738953	petertodd	Sorry, I should have taken the time to write a more detailed response than my quick approximation.
2577	17744646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17744646	jspilman	> It aims to prevent payments where spending that payment requires a fee of more than 1/3 of the payment itself. > It changes the minimum output side to whatever is at least 3 times the fee necessary according to the active policy to spend it. Yes, and yes. Well sort of... IsDust = 1000 * TxOutAmount / (3 * (TxOutBytes + 148)) < MinRelayFeePerKB Easier on my eyes this way: IsDust = TxOutAmount < 3 * MinRelayFeePerKB / 1000 * (TxOutBytes + 148) Given nMinRelayFeePerKB of 10,000, that makes IsDust 4680 Satoshi, plus 30 Satoshi / byte for the ScriptPubKey. Standard ScriptPubKey is 25 bytes, resulting in minimum output of 5430. But hey, a P2SH output would save you 2 bytes and lower the minimum by 60 Satoshi to 5370! However, if I understand correctly, minimum actual fees paid still assumes transactions are at least 1KB: Line 600: int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee; So in practice, the minimum standard outputs will actually cost ~2x their value in fees in order to spend them. Is there any plan to update Line 600 as follows for 0.8.2: nMinFee = (int64)nBytes * nBaseFee / 1000;
2577	17748821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17748821	petertodd	By "cost to spend" we mean the marginal bytes required to spend a transaction input * the fee/kb when added to an existing transaction, like one combining a whole bunch of dust outputs together, not the cost to simply create a transaction re-spending the dust output with a single input and single output.
2577	18113905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18113905	idiotsabound	Let me lay it down for , , , and all you others who thought you could hammer this out on github over the holidays, close it, and then not get any objections, you know, like this: Some bazillion (thats not a real number) of posts later, you get the gist: People are looking at what youve done, and they are saying: WTF? It doesnt matter what nice formulas youve come up with. It doesnt matter if you are going to justify it by saying that this avoids the problem of bitcoin getting DDOSd. It doesnt matter if you felt it needed to be done for some other purpose, like "to increase potential investors confidence" or something, ahead of #Bitcoin2013. None of this matters. What does matter is that this is not truly open and that there are literally millions of users (estimate, but not a bad guess) you are closing out of the system who have, and always will have, a lower figure in their bitcoin wallet that hovers somewhere between .01 BTC and .003 BTC, because they have started with a small amount from faucet and used bitcoin primarily for transaction (not for storage) and / or because they access and use sites that pay in uBTC for site visits or microtasks. I dont think you did any kind of epic polling of the millions of users or, for that matter, the many thousands of businesses / website owners that have sprung up who pay based on bitcoin microtasks or views. I would submit that most of us who are on bitcoin today have obtained their first portion of a bitcoin not because they mined it straightaway, but because they obtained it through a BunnyRun or a website visit that paid out in uBTC for visits, views, or microtasks performed. Speaking on the latter, whether or not you consider them a significant part of the bitcoin economy is irrelevant. You have disregarded their voices by acting in an "open" forum to act in this way without a more open consultation. Github is not a proper forum to discuss this kind of matter. It is the place where changes are ultimately made that affect the code, yes. But when such changes are so large as to concern the manner in which an entire user base can utilize an increasingly trusted method of transaction, and the development under discussion is a surprise or even completely unknown to many who are about to be affected by it, in no small part because of the behavior of the developers, this is entirely unacceptable. The behavior I am seeing here in the development of this pull request, is reminiscent of the behavior not of the open community of coders and innovators, but rather reminds me of the ITU (International Telecommunication Union), the closed-door body for which only governments have a vote. No, this is not an issue of numbers, or formulae, or how to best prevent bitcoin from being DDOSd. The issue here, at its core, is was this a legitimate way to address the microtransaction issue? Was Github truly used to solicit views and ideas of Bitcoin users? The answer is no. A small group of developers huddled together and pushed this through. This change should be pulled back until the larger communitys views can be taken into account and votes on the matter can be taken outside of Github. There are a number of online deliberative tools that are available to perform such tasks. Solicitation of ideas from a larger community, prioritization of appropriate solutions, and larger community selection through ranking or vote on which solutions are the best to address a problem facing the community, this must always come before decisions are made. This is not like other things. You are not developing a fix for Cryptocat or talking solutions for libpurple problems in Pidgin / OTR. There is a larger community, whose voice must be heard, outside of Github. This is Bitcoin.
2577	18114301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18114301	paraipan	Me and my social network will not upgrade the client, because I oppose this arbitrary change. Youre losing it Gavin! Let users control the limits from the GUI and the network will find its equilibrium, youre not the one who has to make these decisions.
2577	18118612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18118612	sipa	I am somewhat surprised by the outcry against this, and I wonder whether it is because of the way this decision was made, or because you believe Bitcoin should support output coins that cost ~ as much to spend as they are worth. In any case, please realize that this is just a policy change. There are no network rules affected, and everyone is free to set whatever relay fee price they believe is right for the network. I encourage you to do (and if that means not upgrading, so be it) - thats exactly something this patch makes configurable. However, it is just a stopgap solution and the intention for the near future is replacing it with a mechanism to detect what fees get confirmed and which dont and set the relay policy based on that, so we can evolve towards a free market where users bid for space in blocks.
2577	18120113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120113	paraipan	in Bitcoin policy change=network rules change if Im not mistaken. I would support said "mechanism to detect what fees get confirmed" though.
2577	18120173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120173	gmaxwell	You are mistaken. I thought you understood it after this discussion with you:
2577	18120432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18120432	paraipan	I understood your position then and stopped pushing the patch based on your analysis. I didnt agree with your point though as I see personal preference as more important than maintaining a predictable fee level in the protocol.
2577	18122002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122002	idiotsabound	you just dont get it. Re-read my original comment above. Read it again if necessary for effect. This is reminiscent of the efforts I had (with many others) to get the International Telecommunication Union to come out into the open. (They didnt.) It was a effort of over a year resulting eventually in #OpWCIT and later which spawned #OpWTF - a smaller and more focused effort of awareness about the problems associated with closed-minded organizations and groups. I have the feeling that just such an effort is needed to shove this development group out in the open and ensure that not only this issue is dealt with but all future issues involving bitcoin developers are not pushed in this nontransparent and backchannel way that does not take into account the voices of the internet. This is Bitcoin.
2577	18123275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18123275	jgarzik	The public website containing public source code changes cannot be considered a back channel. It is already very much out in the open. All discussions occur in public, and are publicly logged and google-able. I agree that a continual effort is needed to educate users like yourself on how open source engineering works, and how open source engineering differs from other engineering efforts.
2577	18125249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18125249	n074v41l4bl34u	First, thank you for your hard work on Bitcoin protocol. Secondly, you write "All discussions occur in public" then I ask you where was this change discussed? To me and most other people supporting Bitcoin, the problem with this change is not only about the code itself but mostly about unilateralism with which the decision was made. I am, as a Bitcoin user and as a Bitcoin trader, wholeheartedly against such quick-fix changes. It seems Bitcoin is becoming just a replacement for Western Union type of transfers instead of being a full-fledged currency of the Internet with some unique features - where are contracts? The decision making process regarding Bitcoin development is becoming a problem. It is too centralized and not democratic/market driven enough. Fees should be determined by market so developers should focus on features relating to fee management rather than hardcoding another magic number. As Bitcoins value is ultimately set by the market, I am personally taking some money out of Bitcoin until some long-term market solution for fees management is proposed.
2577	18126491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18126491	jgarzik	This change moves towards making fees more market driven. They were hardcoded constants before. Now users may much more easily select their desired fee level for relaying and mining with a simple configuration file change.
2577	18149435	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18149435	cjdelisle	What a mess! Let me first state that my opinion is my own, I am not a bitcoin developer and I have essentially no influence within the community, my opinion is worth just as much as yours; nothing. Furthermore, I have no interest whatsoever in getting involved in the dev community until people start getting serious about user-terrorists holding the development process hostage by throwing temper tantrums. "This is Bitcoin." Wrong, this is one bitcoin client maintained by The Bitcoin Foundation, unless you are a member of that foundation you are not a stakeholder and your opinion is worth just as much as mine; nothing. BIP-16 was a change of network rule which required consent of the miners, this is just a change in client behavior. If you want your bitcoin client to behave differently you can use a different client, create a fork of The Bitcoin Foundations client or [bother](http://litecoin.org/) [someone](https://ripple.com/) [else](http://solidcoin.info/). Developers, your patience and your desire for community process is like that of a saint, you are all wonderful people. Right now though, your good will is becoming part of the problem. Any time there is public disagreement between developers over any technical detail, someone is going to use that issue as a wedge to divide the dev community and tie up the process. In regards to developer back-channels, this is something we need more of, not less. It doesnt have to be a dark room with cigar smoke and plush curtains, a real-names-only mailing list should be more than adequate to maintain civility. Every time you so patiently try to explain the reality of the issue to the same person one more time around, you miss the point. This is not a misunderstanding, it is a negotiation and you are letting these people run roughshod over you! What does the development process need? We needs a charismatic leader. We need someone who can source ideas and opinions from users, developers, and stakeholders alike, merge them into policy and then defend that policy with religious zealotry. We need someone with the programming skill to command respect from all developers for it is the master who leads from the front. We need someone with the credibility to arbitrate disagreements between developers without allowing them to bubble up into public view where idlers will no doubt incite them further. We need a Linus. Thanks, Caleb
2577	18150061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18150061	BlueMeanie	I dont see the developers arguing over anything. The people with a bone to pick appear to be largely uninformed, uninvested end users who are upset that their particular usage scenario might be at risk. As many have already suggested, if you dont like the changes, FORK and do what you will. If you get enough people to adopt your interpretation of the rules, then it will become block chain policy. I think what the core devs understand is that without these rules, there will be no Bitcoin. btw- a [paper I recently wrote](https://docs.google.com/file/d/0BwUFHE6KYsM0ZkxLVmFwbXQ3ck0/edit?usp=sharing) in response to some of the color coin issues.
2577	25945095	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25945095	gavinandresen	this pull request is an inappropriate place to discuss the NSA/etc. Im deleting your comment, please stay on-topic, there are plenty of places to speculate about bitcoin in general (e.g. bitcointalk forums, reddit /r/bitcoin, bitcoin.stackexchange.com, #bitcoin channel in IRC).
2577	26214362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26214362	jgarzik	Deleted off-topic comment, and blocked user (though that may just be a jgarzik-block and not a project-wide block).
2572	17060843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17060843	Diapolo	ACK
2569	17083713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17083713	gavinandresen	Is there a good way to test this? It is simple enough that Id be satisified with a link to (say) a MSDN page that says this is what you do to select() up to 1024 file descriptors on windows....
2569	17084866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17084866	jgarzik	agreed,
2569	17088967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17088967	Diapolo	See - Maximum Number of Sockets an Application Can Use
2569	17090337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17090337	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2569	17135432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17135432	laanwj	ACK
2569	17141904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17141904	Diapolo	For Windows ``An application should make no assumptions about the availability of a certain number of sockets.``, so I hope we dont rely on the number set here in any way?
2569	17166472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17166472	gavinandresen	ACK as "better than the code we have now."
2569	17167162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17167162	sipa	This is really just about how many sockets we watch simultaneously. If not enough sockets are available for what the user requests, opening them will just fail.
2569	17177451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17177451	Diapolo	ACK
2568	17046528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17046528	gmaxwell	We should probably be clamping max connections at FD_SETSIZE-MIN_CORE_FILEDESCRIPTORS otherwise you get fun stuff like select becoming crashy.
2568	17046681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17046681	jgarzik	ACK
2568	17071033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17071033	gavinandresen	ACK
2568	17071510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17071510	sipa	Have you tested whether this compiles on OSX?
2568	17083117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17083117	gavinandresen	: yes, compiles fine, unit tests run, bitcoind -testnet runs on OSX
2568	17083541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17083541	gmaxwell	can you try running (for i in {1..220000} ; do export bh=`./bitcoind getblockhash $i` ; for tx in `./bitcoind getblock $bh | grep " | cut -d" -f2` ; do ./bitcoind getrawtransaction $tx > /dev/null ; done ; done) On a OSX mainnet node with this patch and txindex=1 when you get a chance? It should causes about 500 FDs to be used.
2568	17125478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17125478	sipa	Refactored the code into a RaiseFileDescriptorLimit in util, and added a windows implementation. Also added Gregorys suggestion to clamp maxconnections, according to the size of FD_SETSIZE. Minimal test plan: * Start the client with increasingly higher -maxconnections=X values * Look for the line "Using at most Y connections (Z file descriptors available)" in debug.log * Without specific hard ulimits, requests for up to ~1000 connections should be granted (X=Y), and Z should always be at least 150 higher than Y. Id like to see at least some proof that this works on Windows on OSX. For Windows, #2569 is needed to get more than 63 connections.
2568	17145999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17145999	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2568	17169878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17169878	gavinandresen	ACK. : successfully ran (a modified version of) your stress test on OSX with this patch and -txindex=1.
2568	17190035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17190035	gmaxwell	ACK.
2566	17094265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17094265	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2566	17379870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17379870	laanwj	ACK
2566	17418553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17418553	jgarzik	ACK
2564	17095617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17095617	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2559	16940452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16940452	gavinandresen	ACK
2559	17056262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17056262	laanwj	ACK
2559	17096899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17096899	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2558	17098257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17098257	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2558	17113132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17113132	laanwj	ACK
2558	17142872	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17142872	Diapolo	Looks good and should make it for 0.8.2 IMHO.
2558	17418486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17418486	jgarzik	ACK code Id say it needs testing on Windows, to make sure the looks-right-on-Unix code works there. Or maybe Im just being paranoid.
2558	17418778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17418778	gavinandresen	ACK. Compiles and works as advertised on OSX.
2557	16890393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16890393	gmaxwell	ACK. Reduces FD usage in my torture test from 500 to 112. However, 112 + 125 is awful close to 256, so Im still concerned about OSX.
2557	17015367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17015367	Diapolo	This seems to cause massive issues for me on Win7 x64, I often get the message that I need to reindex because of a broken database or sometimes only ``Database I/O error``. I now removed that patch and start over to see if that is helping me.
2557	17043425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17043425	sipa	That would be bad and unexpected news. I dont see how that could cause/worsen that, but we never know of course. Can you confirm its related to this?
2557	17060345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17060345	Diapolo	I sent a copy of my coinstate folder, with which I had the problem. Currently Im 73 weeks behind with a client that doesnt have this patch active. After it synced without error Ill restart with this patch applied and a bootstrap (which contains 50% of the current blocks on the net) + re-sync.
2557	17079981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17079981	Diapolo	No crashes without the patch... testing with it again now.
2557	17083613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17083613	Diapolo	Again, ``Database I/O error`` with the patch applied... ``2013-04-26 16:02:19 LevelDB read failure: IO error: C:\Users\Diapolo\AppData\Roaming\Bitcoin\chainstate\000223.sst: Could not create random access file.``
2557	17089040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17089040	Diapolo	Perhaps we should just remove that patch for Windows, as per "Up to 2,048 files can be open simultaneously at the lowio level (that is, opened and accessed by means of the _open, _read, _write, and so forth family of I/O functions). Up to 512 files can be open simultaneously at the stdio level (that is, opened and accessed by means of the fopen, fgetc, fputc, and so forth family of functions). The limit of 512 open files at the stdio level can be increased to a maximum of 2,048 by means of the _setmaxstdio function."
2557	17090146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17090146	sipa	Id rather find the reason for this crash, as this patch should not have any difference at all during IBD.
2557	17107487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17107487	sipa	Can you retry with #2580 compiled in?
2557	17113710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17113710	Diapolo	Sure, Ill take a look later...
2557	17114093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17114093	Diapolo	Seems the error was the same as I posted in the chat yesterday: 2013-04-27 10:15:34 LevelDB read failure: IO error: C:\Users\Diapolo\AppData\Roaming\Bitcoin\chainstate\000446.sst: Could not create random access file. 2013-04-27 10:15:34 LevelDB error encountered: IO error: C:\Users\Diapolo\AppData\Roaming\Bitcoin\chainstate\000446.sst: Could not create random access file. 2013-04-27 10:15:34 *** Systemfehler: Database I/O error
2557	17120541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17120541	sipa	Feel like retrying with the commits in ?
2553	16848871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16848871	Diapolo	Error seems unrelated to my changes! <pre> Exception in thread "main" java.lang.reflect.InvocationTargetException at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57) at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) at java.lang.reflect.Method.invoke(Method.java:616) at org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader.main(JarRsrcLoader.java:58) Caused by: java.lang.OutOfMemoryError: Java heap space at com.google.bitcoin.core.FullBlockTestGenerator.getBlocksToTest(FullBlockTestGenerator.java:1335) at com.google.bitcoin.core.BitcoindComparisonTool.<init>(BitcoindComparisonTool.java:77) at com.google.bitcoin.core.BitcoindComparisonTool.main(BitcoindComparisonTool.java:50) ... 5 more </pre>
2553	16858649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16858649	TheBlueMatt	Oops, false-positive, sorry, retesting... also, tagging doesnt email me, please tag instead
2553	17099563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17099563	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2553	17118512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17118512	Diapolo	Any further comments on this?
2553	17239497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17239497	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2553	17273840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17273840	Diapolo	Fixed your nit ;) and you were absolutely right.
2553	17274451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17274451	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2553	17274574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17274574	Diapolo	``fatal: 1f52db4fdd3641e2c0ebbc2355ccc27547eaded7 does not point to a commit`` I updated this 2 times in a row, guess pulltester was too slow ^^.
2553	17275482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17275482	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2553	17300023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17300023	sipa	ACK
2553	17555418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17555418	gavinandresen	The wallet passphrase bits of this are unnecessary after
2553	17569863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569863	Diapolo	I will update after your patch was merged or you just merge this an rebase your pull :). That way the other changes in this pull can get in now. As #2625 seems a little controversial, what is your oppinion on this now Gavin?
2553	18692446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18692446	laanwj	Needs rebase as #2625 was merged
2553	18815941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18815941	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2552	16844699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16844699	laanwj	Lets see if gitian/pull tester agrees with this being deprecated :)
2552	16844942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16844942	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2552	16845218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16845218	Diapolo	Seems that one is caused by ^^, I hope Matt can take a look.
2552	16858656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16858656	TheBlueMatt	Oops, false-positive, sorry, retesting...
2552	17008544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17008544	Diapolo	Its still not building it seems?
2552	17033521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17033521	TheBlueMatt	Yep, sorry...pull-tester is now undergoing upgrades to handle new dependencies for payment protocol...
2552	17100810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17100810	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2552	17115706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17115706	laanwj	Maybe this is needed for MSVC? I really wonder why we added this...
2552	17117886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17117886	Diapolo	Im not aware of anyone doing MSVC builds recently. Ill take a look what commit added this. Edit: Damn ^^
2552	17408184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17408184	Diapolo	Anyone?
2552	19191709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19191709	nbelikov	This commit breaks cross-compiling Windows client from Linux: ``` i686-w64-mingw32-g++ -c -pipe -isystem /usr/i686-w64-mingw32/include/ -frandom-seed=qtbuild -D_FORTIFY_SOURCE=2 -msse2 -O2 -frtti -fexceptions -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -DBOOST_THREAD_USE_LIB -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DSCRYPT_CHACHA -DSCRYPT_KECCAK512 -DUSE_UPNP=1 -DSTATICLIB -DUSE_IPV6=1 -DBITCOIN_NEED_QT_PLUGINS -DHAVE_BUILD_INFO -DWIN32 -D_MT -DQT_THREAD_SUPPORT -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_NETWORK_LIB -DQT_CORE_LIB -I../deps/qt/include/QtCore -I../deps/qt/include/QtNetwork -I../deps/qt/include/QtGui -I../deps/qt/include -I../deps -Isrc -Isrc/json -Isrc/qt -I../deps -Isrc/leveldb/include -Isrc/leveldb/helpers -I../deps/boost_1_53_0 -I../deps/db-5.3.21.NC/build_unix -I../deps/openssl-1.0.1e/include -I../deps/qt/include/ActiveQt -Ibuild -Ibuild -I../deps/qt/mkspecs/unsupported/win32-g++-cross -o build/bitcoin.o src/qt/bitcoin.cpp In file included from ../deps/boost_1_53_0/boost/thread/shared_mutex.hpp:18:0, from ../deps/boost_1_53_0/boost/thread/detail/thread_group.hpp:9, from ../deps/boost_1_53_0/boost/thread/thread.hpp:26, from ../deps/boost_1_53_0/boost/thread.hpp:13, from src/util.h:23, from src/bignum.h:12, from src/main.h:8, from src/wallet.h:13, from src/init.h:8, from src/qt/bitcoin.cpp:13: ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp: In constructor boost::shared_mutex::shared_mutex(): ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:98:33: warning: missing initializer for member boost::shared_mutex::state_data::shared_waiting [-Wmissing-field-initializers] ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:98:33: warning: missing initializer for member boost::shared_mutex::state_data::exclusive [-Wmissing-field-initializers] ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:98:33: warning: missing initializer for member boost::shared_mutex::state_data::upgrade [-Wmissing-field-initializers] ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:98:33: warning: missing initializer for member boost::shared_mutex::state_data::exclusive_waiting [-Wmissing-field-initializers] ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:98:33: warning: missing initializer for member boost::shared_mutex::state_data::exclusive_waiting_blocked [-Wmissing-field-initializers] In file included from src/bignum.h:12:0, from src/main.h:8, from src/wallet.h:13, from src/init.h:8, from src/qt/bitcoin.cpp:13: src/util.h: At global scope: src/util.h:220:57: error: pid_t has not been declared In file included from ../deps/boost_1_53_0/boost/thread/shared_mutex.hpp:18:0, from ../deps/boost_1_53_0/boost/thread/detail/thread_group.hpp:9, from ../deps/boost_1_53_0/boost/thread/thread.hpp:26, from ../deps/boost_1_53_0/boost/thread.hpp:13, from src/util.h:23, from src/bignum.h:12, from src/main.h:8, from src/wallet.h:13, from src/init.h:8, from src/qt/bitcoin.cpp:13: ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp: In member function T boost::shared_mutex::interlocked_compare_exchange(T*, T, T) [with T = boost::shared_mutex::state_data]: ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:124:103: instantiated from here ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:52:99: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing] ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:52:99: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing] ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:53:52: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing] ../deps/boost_1_53_0/boost/thread/win32/shared_mutex.hpp:53:52: warning: dereferencing type-punned pointer will break strict-aliasing rules [-Wstrict-aliasing] ../deps/boost_1_53_0/boost/system/error_code.hpp: At global scope: ../deps/boost_1_53_0/boost/system/error_code.hpp:214:36: warning: boost::system::posix_category defined but not used [-Wunused-variable] ../deps/boost_1_53_0/boost/system/error_code.hpp:215:36: warning: boost::system::errno_ecat defined but not used [-Wunused-variable] ../deps/boost_1_53_0/boost/system/error_code.hpp:216:36: warning: boost::system::native_ecat defined but not used [-Wunused-variable] make[1]: *** [build/bitcoin.o] Error 1 make[1]: Leaving directory `/home/creator/code/onecoin-builder/onecoin make: *** [release] Error 2 ```
2546	16772234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16772234	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2541	16884811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16884811	sipa	Any reason not to just call the variables nNextTime/nLastTime, or rename their usages to nNextRetry/nLastRetry? That reference looks like a hack to avoid code changes :)
2541	16884824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16884824	sipa	ACK otherwise, by the way.
2541	17102335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17102335	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2541	17452062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17452062	laanwj	ACK (after squashing into one commit) Edit: and I agree with on the use of references, please just rename the variables.
2541	18693005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693005	jgarzik	ACK, once and comments applied
2541	21089220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21089220	luke-jr	Rebased with requested refactor.
2541	21291285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21291285	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2540	16607512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16607512	jgarzik	ACK
2540	16611594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16611594	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2540	16646559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16646559	gmaxwell	ACK.
2539	16637262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16637262	laanwj	Nice, Ill do some testing with it over the weekend.
2539	16657706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16657706	gavinandresen	Pull-tester failure is because I didnt update the unit test data when I changed the PaymentRequest protocol buffer format...
2539	16668106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16668106	gavinandresen	Unit tests fixed, but I bet the mingw-Windows build will not work because well need a mingw-compiled -lprotobuf
2539	16726211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16726211	laanwj	Im had some issues building in qt creator (qt creator builds to a different directory than the source directory). I get the following error: .../bitcoin/src/qt/paymentrequest.proto: -1: error: File does not reside within any path specified using --proto_path (or -I). You must specify a --proto_path which encompasses this file. Note that the proto_path must be an exact prefix of the .proto file names -- protoc is too dumb to figure out when two paths (e.g. absolute and relative) are equivalent (its harder than you think). On first look this is weird because --proto_path is provided, and points to the src/qt directory. However, this fails because it is not an exact match. The command line becomes: protoc --cpp_out=build --proto_path=src/qt ../bitcoin/src/qt/paymentrequest.proto So, proto_path is relative to the current working directory (which is the output directory) whereas the proto file is in the source/input directory. I tried to do: PROTO_PATH = $$PWD/src/qt However, this doesnt solve the problem. It changes the command line to: protoc --cpp_out=build --proto_path=/store/orion/projects/bitcoin/bitcoin/src/qt ../bitcoin/src/qt/paymentrequest.proto So PWD is an absolute path; not the relative path as used for the source files. `protoc` is still too dumb to understand this. The only way I could solve this is by changing the line in `protobuf.pri` to: protobuf_decl.commands = $${PROTOC} --cpp_out="$${PROTO_DIR}" $${PROTOPATHS} --proto_path=${QMAKE_FILE_IN_PATH} ${QMAKE_FILE_NAME} This is pretty much a hack but heh...
2539	16923587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16923587	mikehearn	OK, I finally made a payment. Even though I have a fresh wallet that contains only a single output, I was told my tx was over the size limit and Id have to pay a fee. But it was only 227 bytes. Not sure whats going on there. My address book has a new address in it, "Refund from bitcoincore.org". Nice! Perhaps those addresses should be treated like change addresses and hidden unless you actually receive money to them. Otherwise the address book will end up quite cluttered.
2539	17104112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17104112	SergioDemianLerner	Check my proposal "Merchant-pays-fee proposal for Bitcoin Payment Messages" in It could be scheduled for the next hard-fork.
2539	18966374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18966374	mikehearn	Whats the next step for this - another review pass? It seems my previous commit comments vanished, not sure if they were addressed or not.
2539	18977137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18977137	gavinandresen	: I fixed the bug you found (handling multiple pay-to addresses). Next steps are: + Do the bitcoin-qt-handles-payment-request-mime-type thing on Linux + Finish writing a test plan + Bribe some people to test on windows/linux/osx + Assuming successful testing, merge into master + Turn the gist document into BIPs
2539	19387663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19387663	mikehearn	BTW Gavin, shouldnt you create a separate address+cert for your test server? Otherwise you might find people signing payment requests as yourself or bitcoincore.org ....
2539	20230443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20230443	gavinandresen	Status update: Works for me on Mac, Linux (fixed bitcoin: URI handling for gnome) and Windows (figured out how to compile a static Qt that does not expect to dynamically load openssl). There is a showstopper bug on Windows-- Im seeing crashes on exit (looks like another global destructor being called after exit() issue). Still needs doing: + Install the static-openssl-Qt libraries in the pull-tester environment + Improve handling of refund addresses; creating a new, labelled, appears-in-the-address-book refund address for every payment protocol transaction is bad.
2539	20232551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20232551	mikehearn	Couple of other things: * Needs a rebase, at least fTestNet -> TestNet(), but better, a new CChainParams field with the payment request protocol code that is expected. * Tor users will be surprised that payment submissions dont go via Tor due to the missing net manager proxy code.
2539	21167938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21167938	gavinandresen	Loose ends tied up: -proxy settings are used for payment requests, so Tor users dont reveal their IP addresses. Tested by running over Tor and watching the IP addresses in the ssl_access.log on the server. Refund addresses are not shown in the GUI (unless you receive a refund, in which case they will be properly labelled). I added a backwards-compatible change to the wallet; "purpose&lt;address&gt;" entries are written to wallet.dat, with values of "send" "receive" "refund" or "unknown" ("unknown" the default, and all old address book entries will be "unknown"). This is backwards-compatible because old code just ignores keys it doesnt recognize in wallet.dat (old versions of Bitcoin will show refund addresses as "receive" addresses). One last TODO: fix the pull-tester Windows/mingw Qt libraries so theyre statically compiled with OpenSSL, so Windows binaries from the pull-tester machine will work properly.
2539	21364170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21364170	luke-jr	Gitian build error with protobuf: ``` + ./configure --enable-shared=no --disable-dependency-tracking --with-protoc=/home/ubuntu/build/protobuf-2.5.0/host/protoc CXX=i586-mingw32msvc-g++ CC=i586-mingw32msvc-gcc CXXFLAGS=-frandom-seed=11 AR=i586-mingw32msvc-ar STRIP=i586-mingw32msvc-strip RANLIB=i586-mingw32msvc-ranlib OBJDUMP=i586-mingw32msvc-objdump LD=i586-mingw32msvc-ld checking whether to enable maintainer-specific portions of Makefiles... yes checking build system type... i686-pc-linux-gnu checking host system type... i686-pc-linux-gnu checking target system type... i686-pc-linux-gnu checking for a BSD-compatible install... /usr/bin/install -c checking whether build environment is sane... yes checking for a thread-safe mkdir -p... /bin/mkdir -p checking for gawk... no checking for mawk... mawk checking whether make sets $(MAKE)... yes checking for gcc... i586-mingw32msvc-gcc checking whether the C compiler works... yes checking for C compiler default output file name... a.exe checking for suffix of executables... .exe checking whether we are cross compiling... configure: error: in `/home/ubuntu/build/protobuf-2.5.0: configure: error: cannot run C compiled programs. If you meant to cross compile, use `--host. See `config.log for more details ```
2539	21365655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21365655	luke-jr	gets protobuf building.
2539	21382478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21382478	gavinandresen	Thanks, Luke. Status: Ive been setting up a debug environment on a Windows 7 machine to figure out why jenkins binaries arent working properly (signed payment requests are being treated as unsigned).
2539	21435999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21435999	mikehearn	I dont think its important for v1, but here are some notes on how to do EV cert matching (so the user sees "MtGox Co Ltd. [JP]" as with Chrome instead of mtgox.com). An EV cert is identified by the contents of the "Certificate Policies" field in the X.509 cert. Each issuer sets the value to be different, unfortunately. The values are OIDs. I *think* just checking against a hard coded list is sufficient - CAs should not sign certificates that contain other issuers OIDs. There is a list of OIDs considered valid for marking EV certs here: (also, on Wikipedia). I believe just having an array in the source would be sufficient to verify this. When you see the magic marker, its OK to use the O field instead of the CN field of the subject, giving a friendly name instead of a domain name.
2539	21659797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21659797	gavinandresen	Note to self: secure requests showing as insecure on Windows7 is this Qt bug, I believe: See QWindowsCaRootFetcher class in qtbase/src/network/ssl/qsslsocket_openssl.cpp in the Qt5 source code for the fix; if were going to move to Qt5 soon then I would rather not add an #if QT_VERSION < 0x050000 variant on that code.
2539	21709781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21709781	mikehearn	I think a better fix would be to go with the original suggestion of shipping a set of trusted root CAs with the app. Otherwise this kind of random platform inconsistency risks undermining the whole initiative. Upgrading to Qt5 simply in order to work with just-in-time root cert downloads sounds like a big effort.
2539	21710762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21710762	Diapolo	Our Qt code is Qt5.1 compatible, should be no problem to upgrade to Qt5 code-wise, but "only" Gitian wise IMHO.
2539	21711640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21711640	mikehearn	If Qt5 didnt have any API breaks, then sure, why not do the upgrade. But it doesnt change my view that we should be shipping a set of root certs. Its crazy not to - otherwise the first thing that will happen is people who try and use this will discover that some random subset of wallet apps cant verify their payment requests, and someone else will have to do a long and painful process of manually intersecting the root cert set for every platform where Bitcoin wallets might run. Then that manually intersected set will become the canonical root CA cert set. Gavin can avoid all that pain and misery by just generating his own set of root CAs and shipping them. It will never make sense to rely on the OS provided stores, IMO.
2539	21767835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21767835	gavinandresen	I *really* dont want to take responsibility for keeping an up-to-date list of root certificates that all bitcoin wallet implementations are encouraged to support. And having a different set of root certificates supported in the users web browser and bitcoin wallet seems like a really bad idea, too-- "what do you mean the payment request from foo.com is insecure, I GOT IT DIRECTLY FROM THE WEB PAGE AT AND GOT THE GREEN PADLOCK !!!!"
2539	21769398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21769398	luke-jr	Well, in this case, as long as the browser and wallet are using the OSs cert store (even with the Microsoft-downloaded root certs), we can be sure that if the user went to he also has the cert for it. I agree that software (including browsers, sorry has no business overriding/ignoring the OSs cert store and using their own.
2539	21776614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21776614	mikehearn	I already spelled out the alternative - merchants will just have to do the same work instead, and youll get the same situation with browsers where people rely on apocryphal and unverifiable claims like "our certs have a 94% acceptance rate". Also, in the absence of guidance hardware devices like the Trezor will still have to make up their own lists, and those may or may not usefully overlap with peoples platform of choice. So *someone* will have to make and maintain a list. It might as well be standardised upstream and save everyone redundant work and pain. This really isnt hard. Use the list Firefox ships with, done:
2539	21841939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21841939	gavinandresen	Merged with s changes so it compiles with Qt 5. I think this is ready to be pulled; gitian changes to compile releases with Qt5 can happen after merge.
2539	21989748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21989748	luke-jr	Suggestions from testplan: - Make Bitcoin-Qt visible when a URI is opened (it just remains hidden or in the background at present; this bug is in master already) - Allow user to add a label to signed payments. - Allow cancelling/removing signed payment requests individually (without Clear All). - Italicise or otherwise make the merchant name stand out in send confirmation dialog. - Store and show memo (possibly overridden by optional label) and merchant information in transaction list/details. - Store and make available the signed request, so you can prove the merchant authorized it. - Show a progress or waiting status after confirmation, until response is received. - Expired payment requests should do something (I got no result at all). - If multiple signed payment requests attempt to use the same address, the user gets an error about duplicate addresses despite never seeing the address. This message should be improved. - PaymentACK messages need to be escaped. - Multiple addresses in a single payment request error - possibly related to #1850 I also skimmed over the code, and merged it with a bunch of other pullrequests (for next-test). Nothing stood out as obviously wrong or odd.
2539	21991062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21991062	Diapolo	- Make Bitcoin-Qt visible when a URI is opened (it just remains hidden or in the background at present; this bug is in master already) That is a bug, which seems to be introduced by the GUI refactoring and was not spotted. Im looking into this.
2539	21996012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21996012	gavinandresen	Expired payment requests: agreed, user should ALWAYS get some result when clicking on a URI link. Escaping PaymentACK messages: nice catch, Ill fix. Multiple addresses is a regression Ill fix again. All the rest: improvements that I think should happen after pulling. Some of them (like where/how to story PaymetnRequests) should probably wait until after other high priorities like reimplementing the wallet code.
2539	22002077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22002077	Diapolo	#2872 contains the fix, which currently prevents the main window to showup after clicking a valid bitcoin: URI.
2539	22050475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22050475	gavinandresen	Expired payment requests now show an error. PaymentACK messages are properly HTML-escaped. Sending to multiple addresses works properly. And I verified that it communicates through Tor if youre running proxied through Tor.
2539	22296575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22296575	gavinandresen	: Id guess there is an operator+(char*, QString) that produces a QString, and the QString serializer adds the double-quotes. Couple more bug reports from a tester: 1) PaymentACK dialog box should say "Payment Acknowledged", since "Received" might imply that the payment is confirmed already. 2) Payment requests asking the user to create dust TxOuts should be rejected right away with a message to the user; otherwise, transaction creation fails. If transaction creation DOES fail for some reason (e.g. insufficient wallet balance), theres a question of whether or not the payment request should be automatically cleared. Im not sure of the right answer-- maybe the user just received some bitcoins and just has to wait a few minutes for them to confirm, so leaving the payment request is the right thing to do. And it is easy enough to push the clear button on the Send tab...
2539	22297759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22297759	luke-jr	IMO "acknowledged" implies confirmation more than "received" does O.o
2539	22680043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22680043	sipa	I havent had the time to look through this in detail, but it seems that when processing a payment request, a normal transaction is created and sent, and when this completes, the paymentACK is fetched, without even retrying if the connection failed? IMHO, the makes the entire second step (notifying the merchant of the transaction, with metadata, refund, memo, ...) useless, as it becomes entirely unreliable. I understand you cant always guarantee everything, but can we at least: * Not store or broadcast the transaction if the connection to the payment_uri fails. * If no paymentACK is received (but the connection did succeed, so the merchant may or may not have gotten the transaction), keep retrying to get it.
2539	22680275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22680275	gmaxwell	The obvious way to make sure the the back-channel had atomic reliability would be a flag in the request to only submit a transaction inside the response, not via the network. Then you could be confident that either it would be successful or the transaction would fail. (Or the client did something wrong, but a client could send funds into a black hole without the payment protocols help)
2539	22680382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22680382	sipa	My idea would be to store the payment request in a wallet transaction field, and give it a flag not to broadcast. Seeing the transaction on the network would remove the flag, as would receiving a paymentACK. I dont think there is any use case for wanting the transaction broadcast before the receiver confirms receiving it (and him broadcasting it, is a form of confirming).
2539	22684536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22684536	gavinandresen	: "... makes the entire second step useless, as it becomes entirely unreliable" ? In the normal course of events, the user clicks on link, their wallet fetches a payment request from the merchants server, and then a minute or two later (after user inspect transaction details and unlocks wallet) the Payment message is sent to the merchants server. So it will only be unreliable if the merchants server or users internet connection goes down in that minute or two. I REALLY dont think that will happen often enough to justify the added complexity of marking transactions as "dont broadcast/rebroadcast", modifying the GUI to show the user that theyre "pending submission", locking the inputs, giving the user some way of double-spending a "pending submission" transaction or automatically double-spending after some period of time with retries has passed, etc etc etc. If Im wrong, then Ill write that code. But Id really like to move on to higher priorities.
2539	22686102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22686102	luke-jr	Probably easier to implement suggestion after were able to replace transactions generally.
2539	22690858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22690858	sipa	What if as a gambling site, your server goes down for a minute. If you have high traffic, youll have many users making bets for which they were still able to fetch the payment request. You have no way of paying them without knowing a refund address, and you have no way to contact them. Of course you can wait for them to contact you, but if that is necessary for every minute of downtime, youll need very high reliability of your service (DoS attacks, anyone?), or poor customer support. It is true that the locked funds issue right now makes this harder, as we cannot deal well with non-confirming transactions. I consider that a separate issue, but it makes an optimal implementation difficult now. But if you cant do that, please at least save the payment request, and retry getting PaymentACKs for some time, just like we retry broadcasting normal transactions. And put a suggestion in the BIP that this is recommended. Even if you cant implement it yourself now - in some environments it may be significantly easier to do.
2539	22736592	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22736592	gavinandresen	: Youre right, that use case works much better if it is "merchant broadcasts first". Ill look into rebroadcasting. I suspect it will be easier to just lock the inputs for the estimated worst-case Payment-->PaymentACK round trip, and broadcast the transaction when the PaymentACK is received. If Payment->PaymentACK succeeds, then broadcast the transaction; if it fails, then just unlock the inputs and tell the user "error communicating". Ive been putting off writing code to save the PaymentRequest/Payment/PaymentACK messages in the wallet, because adding more stuff to wallet.dat when were likely to rewrite it soon for HD support might make the upgrade harder, and because Im not planning on implementing any GUI for looking at old PaymentRequests. But I should probably save the data anyway.
2539	23066915	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23066915	gavinandresen	Rebased (needed to fix conflict in bitcoin-qt.pro). And made a functionality tweak: PaymentRequests are now written to wallet.dat, using the (formerly unused and always empty) vector&lt;pair&lt;string,string&gt;&gt; vOrderForm field in CWalletTx. Each PaymentRequest satisfied by the transaction has key="PaymentRequest" value=...serialized PaymentRequest protocol buffer message. The transaction details information also now shows the Merchant (or merchants) associated with a transaction. since one transaction can satisfy several PaymentRequest messages, locking the inputs until we get a PaymentACK doesnt work; e.g. if a transaction satisfies requests from merchants A and B, wed send Payment messages to both A and B. If one of them fails, then we cant cancel the transaction-- the other merchant will go ahead and broadcast it for us. Rebroadcasting the Payment message if the merchants site goes down would be nice to have. "patches welcome"
2539	23071843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23071843	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2539	23082651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23082651	mikehearn	Congrats everyone. This is a big step forward for the Bitcoin world!
2538	16576429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16576429	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2538	18221241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18221241	laanwj	Ive had to fix this at well in the Qt5 stream, its indeed another Satoshi-ism in util.h that gets in the way: Do you need this for Qt4?
2538	18278241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18278241	Diapolo	Wow, nice find... rather ugly though ^^. You mean if I need ``loop`` defined for Qt4?
2538	18280624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18280624	laanwj	You need to undefine it.
2538	18281618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18281618	Diapolo	Sorry, I meant your question ``Do you need this for Qt4?``, because Im not sure what you mean. Need the undef for Qt4? Need ``loop`` for Qt4? Perhaps we should just replace ``loop`` in the core files with ``while(true)``?
2538	18283034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18283034	laanwj	Maybe. I dont like that loop macro at all either. But I dont want to change the core files for what is a qt compatibility fix. My question meant "do you need this fix to build for qt4 on windows as well". Otherwise we can just close this issue here.
2538	18302781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18302781	Diapolo	I didnt try with Qt4 for some time now, let me see if my Qt4 build is still working... It IS working and I can confirm this patch or your is not needed for Qt4. Do you intend to fix the includes I changed and replace with that #undef then in our Qt files?
2538	18741016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18741016	laanwj	closing this, it will automatically be fixed when qt5 branch merged
2537	16496092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16496092	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2537	16497162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16497162	laanwj	Cannot test it on windows, but the linux screenshots look great.
2537	16509426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16509426	laanwj	ACK
2536	16487754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16487754	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2535	16468203	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16468203	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2535	16468286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16468286	luke-jr	PEBKAC. To build without UPnP support, you need USE_UPNP=- as documented. USE_UPNP=0 means its compiled but disabled by default.
2535	16469612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16469612	jcalvinowens	Hmm, would you be opposed to adding a comment in the makefile clarifying that? I see it in /doc/build-unix.txt now, but I think most people would just read /INSTALL and /README and if nothing special was mentioned there expect make to build the thing. Also, why is libupnp linked by default? The average person looking to build this would very likely not have that on their machine, no?
2535	16469984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16469984	luke-jr	More comments cant hurt, at least. miniupnpc is a pretty standard part of most desktop OS these days, at least.
2532	16387320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16387320	jonasschnelli	Should then look like: ![Bildschirmfoto 2013-04-15 um 16 00 36](https://f.cloud.github.com/assets/178464/381016/24532674-a5d7-11e2-8089-54121e76b394.png)
2532	16420304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16420304	gavinandresen	pull-tester failure looks like a false-positive; the unit test failing is one I wrote, that tries to test some multi-threading stuff; Ive had trouble with them occasionally running on a heavily-loaded machine.
2532	16581373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16581373	laanwj	Can anyone on Mac test this please?
2532	17550035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17550035	gavinandresen	Works nicely.
2530	16420524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16420524	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2530	16592912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16592912	laanwj	ACK after squashing into one commit
2530	17065706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17065706	Diapolo	ping :)
2528	16357930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16357930	laanwj	ACK
2528	16358748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16358748	Diapolo	You need to squash the 2 commits into one and I still see the indentation issue?
2528	16415061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16415061	sipa	ACK, if you squash the commits together.
2528	16421268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16421268	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2528	17116582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17116582	laanwj	See #2584
2527	16359751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16359751	ptrckbrwn	Sorry, it was my first commit description: Any tips for the future?
2527	16359863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16359863	sipa	Something more descriptive :)
2526	16356376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16356376	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2526	16394315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16394315	laanwj	ACK
2526	16844023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16844023	Diapolo	ping :) I want to do another translations update.
2526	16844313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16844313	laanwj	I delayed on this as I thought the 0.8.2 release was going to be really soon thus to prevent any last-minute message changes. There is no reason for this commit to be urgent. But I guess that one translation message doesnt matter so much. ACK.
2525	16354775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16354775	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2525	16355121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16355121	Diapolo	Did my hint draw your attention on this? Nice finde anyway :).
2525	16356216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16356216	laanwj	yes, and that it was not the diskspace warning but a leveldb error (likely in the network thread while accepting a block). Its still strange that it sometimes worked (like for askFee) and sometimes did not, but this should solve it for good.
2524	16348606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16348606	sipa	It looks like this for me: The image is nice, but is it intended that the text overlaps with the (B)?
2524	16348865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16348865	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2524	16349033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16349033	laanwj	Theres an interesting unicode character in there :) ![splash](https://f.cloud.github.com/assets/126646/377803/de3b48c6-a4ee-11e2-9dcd-afddf295cef7.png)
2524	16349990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16349990	jonasschnelli	Okay. I would had been to nice to have no platform differences on font rendering. :) Let me adjust some things and it then probably needs a re-test on your side. Because get the toolchain and build process running on my win/linux vm is currently not possible. But should all be fixable (remove \n, remove "Helvetica" and take Arial instead.).
2524	16352093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16352093	laanwj	Hm it should be possible to get roughly the same font on all platforms by specifying multiple font names.
2524	16357992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16357992	jonasschnelli	I just changes to "Arial" and fixed the newline issue. Can someone retest on linux and win? This is how it looks an my mac (retina - 10.8) with Qt4.8.4: ![Bildschirmfoto 2013-04-14 um 21 43 00](https://f.cloud.github.com/assets/178464/378417/26a3625e-a53c-11e2-8a1a-4e16a8cdfbae.png) ![Bildschirmfoto 2013-04-14 um 21 43 00](https://f.cloud.github.com/assets/178464/378410/fae9c090-a53b-11e2-8a66-51825fccf298.png)
2524	16358849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16358849	Diapolo	That is really looking beautiful :)!
2524	16360477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16360477	burger2	Nice changes!!!
2524	16399335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16399335	laanwj	Looks good now. However I do not see any progress messages (such as "Verifying wallet...") with the new splash screen. Is this also a Linux specific problem?
2524	16421809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16421809	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2524	16431249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16431249	jonasschnelli	strange. The messages is written by a standard QT command: QSplashScreen::showMessage(QString::fromStdString(message), Qt::AlignBottom|Qt::AlignHCenter, QColor(55,55,55)); Let me install the toolchain/src on my ubuntu vm and try to debug it..
2524	16433559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16433559	laanwj	Ill also try to debug it
2524	16492797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16492797	jonasschnelli	found the problem source. Ubuntu has no Arial and has also different font rendering. I did update the code so now, the font-size will be increased with factor 0.75 when the calculated text width goes over 160px (which would mean it then would go over the "B" in the splashscreen). Works for mac and linux (ubuntu). How about windows? The missing status text at the bottom was my fault. Did not update the textcolor. Now fixed.
2524	16493855	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16493855	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2524	16506150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16506150	laanwj	ACK ![testnetsplash](https://f.cloud.github.com/assets/126646/391404/ce27df80-a764-11e2-90d3-ba86ce41e1a7.png)
2520	16342482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16342482	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2520	16343077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16343077	jgarzik	ACK
2520	16347751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16347751	laanwj	ACK
2520	16362481	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16362481	petertodd	ACK One reason Id love to see canonical encodings mandated sooner rather than later is because they are going to make it a lot harder to write software for some of the really stripped down secure hardware stuff Id like to see happen eventually. Many of these environments are downright anemic, smartcards for instance, so any fixed dependencies are a big problem.
2519	16335170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16335170	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2519	16355903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16355903	Diapolo	``fatal: cant open patch src/../contrib/test-patches/temp-revert-1.patch: No such file or directory`` is unrelated to this pull :). Can you squash the commits or somehow remove that merge-commit?
2519	16358091	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16358091	jonasschnelli	squashed.
2519	16358860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16358860	Diapolo	ACK
2516	16302924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16302924	TheBlueMatt	False negative...sorry, Ive reset this pull so it should come back with a new test
2516	16302934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16302934	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2516	16303124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16303124	TheBlueMatt	This pull needs rebased to get the updated contrib/ before it will test
2516	16344319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16344319	petertodd	NACK without anti-DoS measures and a discussion on the email list about how to price network bandwidth. Note Gavins relevant discussion about non-chain messages attached to txs.
2516	16418736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16418736	sipa	How about: keep a counter in the mempool, remembering the sum of the sizes of all replacements a transaction has had. When deciding whether to accept a transaction as a replacement, increase this number and then check whether its fee is enough for that size. Thats certainly overkill, as it will correctly count network and processing overhead, but not blockchain or UTXO burdening (as those only happen after finalizing). In any case, its easy to implement, seems safe to me, and would at least allow experimenting with this on testnet.
2516	16433933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16433933	mikehearn	Im quite aware of the DoS and other issues, thats why this pull is only for the testnet. Obviously we cant prove we made the feature safe without actually being able to demo failed attacks. Re-enabling on the testnet doesnt have any downsides, and has some upsides. The fixes to make it workable on the main network can come later.
2516	16441320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16441320	petertodd	replied on bitcoin-dev mailing list
2516	16446979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16446979	qubez	As one relay anti-DOS mechanism, the minimum increase in fee to replace an existing mempool transaction could be set to minrelayfee. This would mean a languishing zero fee transaction could only be replaced if its total fee was increased to at least 0.0001 (or 0.0001 per KB). The replacement transaction could only be again replaced if all *its* previous ins/outs are unchanged and the total fee is increased by at least another 0.0001 more. The resending client must also ensure that besides this resend increase, the priority-required fee is also added or increased if the transaction gains a KB or drops out of free priority, and the relay node enforces this correctly. This gives the ability to increase pending transaction fees, but makes continued replacement not get beyond relays without spending more each time (and using up unspents). This also would discourage adding new non-change payment outputs to an existing transaction instead of creating a new transaction. Also at the relay level, replacements should be bounced if existing ins/outs are altered, so 0-conf transactions are still as trustable as before: ![modtransaction](https://f.cloud.github.com/assets/1425520/386166/452ef3c8-a69f-11e2-9628-18f65e4cffd9.png)
2516	16448647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16448647	mikehearn	Guys, your enthusiasm is commendable but can we please keep the "redesign Bitcoin" discussions on the mailing list or forum please. This pull is very simple and is not the right place to discuss strategies for re-enabling on the main network - the goal is simply to enable on the testnet so we can experiment and try different things there without needing to run locally patched testnet-in-boxes all the time.
2516	16449784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16449784	qubez	OK, this wont destroy testnet as we know it. I just wonder if a 0.9 testnet could actually be testing something instead of allowing testing of anything. Would this impact testing of double-spend resistance or formulas, such as people who may want to test their "dice" or commerce 0-confirmations sites with testcoins first?
2516	16451455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16451455	mikehearn	Sure. I think its clear that whatever is implemented would be deployed first on testnet before the line that disables it is removed.
2516	16451620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16451620	petertodd	We already know we have to test DoS behavior, and fix that behavior, so we already know the code will need to be changed a few times. Under those circumstances I see no reason to put that code into the client everyone is going to be running, potentially disrupting their testing activities for no good reason. (enabling long-disabled code is essentially the same thing as adding new code) Setting up a dozen nodes for testing isnt a big deal - Id be happy to run one or two with the tx-replacement patch if you want. FWIW what you wrote is probably the fourth or fifth re-invention of those ideas - a good sign! Also, how did you do that graphic BTW? We could use more graphics on the wiki explaining transactions, among other things, just saying... :)
2516	16451795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16451795	mikehearn	There are already lots of ways to practically DoS the testnet, for instance, by draining all the coins from the faucet or by finding the nodes and DDoSing them, or bringing up lots of dummy nodes. Im not sure we should be trying to optimise the testnet for robustness against malicious attackers, except in the sense that its useful to test that. Yes I know its possible to run private testnets. I just dont see why this is a big deal. Forward progress is important.
2516	16455525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16455525	petertodd	Seems to me that everyone who commented has proposed something similar to requiring the fees of the replacement transaction be higher than the original. Requiring an increase of txsize * MIN_RELAY_FEE for each replacement has been proposed multiple times and would require just one or two lines of code. Its important that the design accept that network bandwidth isnt free, and that rule matches the same rule elsewhere for accepting transaction to the me pool Ill ACK that.
2516	16455716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16455716	mikehearn	I havent commented because this is the wrong place for the discussion. Suffice it to say, that is not how the system was designed to work and that change would make it fairly useless, so I will not be doing it that way. Once again, if you want to propose a re-design that doesnt meet Satoshis original goals, go ahead and do that - on the forum or mailing list.
2516	16456233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16456233	petertodd	huh, so I guess you are expecting replacements are free? what are your thoughts on how dos protection might eventually work?
2516	16456332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16456332	mikehearn	Ill send a mail to the list with my overall plan in it.
2516	16456723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16456723	petertodd	post first next time
2516	16457400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16457400	mikehearn	What Im going to post is not anything new, you just werent there for the original discussions (theyre buried on the forum somewhere). But I will happily repeat and elaborate on the topic.
2516	16457975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16457975	petertodd	fwiw, Ive been around bitcoin a lot longer than you might realize
2516	16459917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16459917	sipa	Please, lets keep it on topic. As long as it is about a proof-of-concept DoS protection mechanism as long as this in testnet-only, I see no problem discussing it here. Before enabling it on the main network we can have a broader discussion, but that shouldnt prevent experimenting with the technical infrastructure for transaction replacement first. The easiest solution is certainly requiring that every replacement adds MIN_FEE. I think thats overkill, but it should work. It means you have to keep enough change around for all times you may need to replace, and forgetting this would in practice result in your non-final transaction not being replaceable. So what I suggest is requiring that every replaced version pays for its size and the size of all its previous versions together, using whatever the fee policy is at that time. You can pay the fee once in advance, or increase it along the way if needed. This is still trivial to implement, IMHO, and one only pays for replacements effectively broadcast on the network. EDIT: Even better, you can retain this "summed seen size" of transaction versions, and use it in priority calculations when constructing blocks. This gives you an automatic prioritization for block inclusion based on the load youve caused to the network.
2516	16460398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16460398	jgarzik	Taking a higher level view: There are two conflicting, equally valid goals: 1) Mimic mainnet rules as closely as possible 2) Provide an avenue for testing new features, enabling and testing them on testnet before doing so on mainnet Existing members of the ecosystem probably value 1) more highly. Unless its a feature they want to see added/enabled. In which case, they would value 2) more highly. Neither is the "wrong" answer. Enabling a new feature may inhibit testing of an existing feature, thereby hiding bugs. Maybe testnet (existing feature testing) needs a sister coin nextnet?
2516	16460590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16460590	jgarzik	So, I would NAK this pull req on testnet, and ACK this pull req on nextnet, using that logic.
2516	16461714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16461714	gmaxwell	Adding some color (or perhaps another take on it) to jgarziks position, Id say that to whatever extent we enable things on testnet they should be of a form and character that we at least believe wed _eventually_ implement on mainnet. E.g. testing not pure research. So Im okay with testnet being "nextnet" to a degree pulling in features weve basically agreed to for mainnet but feel need more testing... Im less okay with it being "perhapsnet".
2516	16464735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16464735	petertodd	I dont think we should stress too much about implementing a maybe net. Lots of options like vps servers exist for people to try their new concepts. Anyway according to my seed usually only thirty to flirty test net nodes are ever running.
2516	16465058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16465058	petertodd	tax replacement can only replace outputs and scriptsigs, not inputs. You already have to pick in advance your max fee and gradually increase it by replacing outputs.
2516	16465177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16465177	sipa	I know. I dont see how that conflicts with my proposal? You have to pick a maximum change in advance indeed, but youre not required to actually use more and more of it at every step. You can, if you want to compensate for the decreased priority, though.
2516	16465337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16465337	petertodd	Ah good. See I think the next question is do inputs really have to be locked? Whats wrong with adding to the input set? Pieter Wuille <notifications@github.com> wrote: >@petertodd I know. I dont see how that conflicts with my proposal? You >have to pick a maximum change in advance indeed, but youre not >required to actually use more and more of it at every step. You can, if >you want to compensate for the decreased priority, though. > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/2516#issuecomment-16465177
2516	16496750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16496750	mikehearn	Re: nextnet. Im agnostic. Having a public testnet is convenient but indeed not technically necessary. Having a third "researchnet" is probably overkill though, theres overhead involved and given there arent many testnet nodes to start with I guess a researchnet/nextnet would have even fewer. So Id prefer to just re-use the testnet. The cost/benefit tradeoff there feels right. But as Jeff says, its something reasonable people can disagree on, neither position is obviously the best.
2516	16562376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16562376	petertodd	With the recent -development mailing list [post](http://sourceforge.net/mailarchive/message.php?msg_id=30738521) pointing out how the "[rapidly-adjusting micropayments](https://en.bitcoin.it/wiki/Contracts#Example_7:_Rapidly-adjusted_.28micro.29payments_to_a_pre-determined_party)" use on the Contracts page in the wiki doesnt even work due to a bug that would be obvious to anyone who actually wrote an implementation Im also going to amend my NAK to include the requirement for a toy-implementation. At least tx-replacement example should be implemented, but ideally a few use-cases. you could have easily done that on a single machine with a modified bitcoind and determined if a fix is or is not possible, and what changes (if any) need to be done with tx replacement without wasting everyones time. Of course, I too am guilty of advocating stuff without writing any code...
2516	19916704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19916704	jgarzik	Closing; no clear consensus and this never really moved forward. It is a trivial patch and we can re-open in an instant, if there is consensus that we want this. Revisiting the discussion, Im more agnostic: if other devs think there is value in this feature on testnet, ok. Otherwise, not. I tend to prefer testnet stay as close as possible to mainnet rules, but it is a philosophical point.
2515	16286735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16286735	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2515	16287738	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287738	laanwj	both fixed
2515	16288395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16288395	laanwj	Hmm this doesnt seem to be caused by my changes: + LD_PRELOAD=/usr/lib/jvm/java-6-openjdk/jre/lib/i386/jli/libjli.so java -Xmx5G -jar /mnt/test-scripts/BitcoinjBitcoindComparisonTool.jar 8333 Invalid maximum heap size: -Xmx5G The specified size exceeds the maximum representable size. Could not create the Java virtual machine.
2515	16302917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16302917	TheBlueMatt	Indeed, false negative...sorry, Ive reset this pull so it should come back with a new test
2515	16304250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16304250	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2515	16314820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16314820	sipa	Sounds like a good idea.
2515	16322173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16322173	Diapolo	Code looks good, but havent tested.
2514	16266200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16266200	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2514	16269316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16269316	sipa	ACK
2514	16270156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16270156	sipa	Id like to have this merged quickly, as it would allow patches like #2418 to be pulltested correctly.
2513	16261529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16261529	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2513	16287487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287487	Diapolo	ACK
2513	16287530	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287530	sipa	ACK
2508	16226161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16226161	jonasschnelli	close?
2503	16195082	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16195082	laanwj	ACK
2503	16197527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16197527	sipa	ACK
2503	16217515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16217515	jgarzik	ACK
2502	16176190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16176190	jonasschnelli	In my eye and also after tests there is no need for that. It was somehow a hack which had set a empty dock menu. Ill also wrote a info to the dev who did code this why he did that (for 2 days)... no response yet.
2502	16176300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16176300	jonasschnelli	or... is there a chance that the client switches during the runtime from testnet to prod-net?
2502	16176345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16176345	sipa	No, thats not possible.
2502	16176474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16176474	jonasschnelli	then i dont see a need for that line.
2502	16177104	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16177104	Diapolo	But is the icon set as default anywhere then or can we remove the one for testnet?
2502	16177494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16177494	jonasschnelli	the "normal" icon is set by the application bundle. But when the user start the app with -testnet, the icon will then be changed by QT (mac bridge code) in runtime. So the "testnet line" we need. But we once need it at another point in code (but this will be a new pull request once).
2502	16178229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16178229	Diapolo	Okay, closing this then :).
2501	16239083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16239083	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2501	16317433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317433	sipa	ACK. Tested and code changes look fine to me.
2501	16333578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16333578	Diapolo	I would love to see this in 0.8.2 :).
2501	16335130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16335130	laanwj	ACK
2501	16572545	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16572545	Diapolo	ping :)
2498	16138005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16138005	gavinandresen	Perfect, thanks for the quick fix!
2497	16135521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16135521	laanwj	Can you rebase? Github doesnt want to merge it for some reason.
2497	16136195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16136195	jonasschnelli	Somehow the pull request is closed.. ill create a new one soon.
2497	16136860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16136860	laanwj	This pull request is still open, its #2494 that is closed (which has the same title, which is strange).
2497	16166952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16166952	jonasschnelli	lets ignore #2494 ...
2497	16167134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167134	Diapolo	ACK Edit: Is there any chance we could include this new testnet icon into bitcoin-qt.exe? I know the mainnet icon is embedded, but to have both would be really nice. Edit 2: Ah this is happening in bitcoin-qt.rc. So Could you integrate a bitcoin_testnet.ico into this pull :)?
2497	16167517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167517	laanwj	ACK would make sense, I suppose, as the other icon could be selected for shortcuts that start testnet. I dont think it is necessary for this pull though. Its extra functionality that wasnt there before.
2497	16168072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16168072	Diapolo	Yeah sure, could be a separate pull, so this one can be merged.
2497	16171640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16171640	jonasschnelli	also added a new windows ico file (better quality for <256px resolutions). Reported by Diapolo (https://github.com/bitcoin/bitcoin/pull/2477#issuecomment-16167568)
2497	16173074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16173074	Diapolo	Thanks for looking into this :). Are you able to also create a bitcoin_testnet.ico (as mentioned above)?
2497	16173158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16173158	jonasschnelli	Yes. Can do. But currently the icon is changed by QT with a 256x256px PNG replacement. Would you then change the code to support ICO files? Or is the 256x256 PNG testnet file not in appropriate quality?
2497	16173551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16173551	Diapolo	Im talking about the icon file Windows is using to display when using shortcuts and the one the bitcoin-qt.exe is using. The code is here in the ressource file: Dunno if this supports png files. Edit: It seems the bitcoin.png is JUST used 2 times in bitcoingui.cpp via ``:icons/bitcoin`` (see file bitcoin.qrc)!
2497	16173892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16173892	jonasschnelli	Hmm.. i hope i still see through. :) The file "icons/bitcoin.ico" is updated (multi-resolution ICO file) and looks fine if it comes to the render of the .exe file as well as of the shortcut version (48x48). Currently there is no bitcoin_testnet.ico and as far as i can see (in the Windows land) theres no code or buld-process script using a such bitcoin_testnet.ico. But i can just create you a bitcoin_testnet.ico (multiresolution windows icon) and you will look for the rest.
2497	16174151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16174151	Diapolo	I would add that icon to bitcoin-qt.exe via another pull :).
2497	16174265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16174265	jonasschnelli	i know and im sorry,.. was to lazy to create another branch.
2497	16174336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16174336	Diapolo	No problem, Im fine with fixing small stuff to make that client more perfect!
2497	16216964	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16216964	laanwj	Manually merged: there was a trivial conflict in assets_attributions.txt
2497	16219003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16219003	Diapolo	Can you create a branch with a bitcoin_testnet.ico update? But dont yet open a pull-request here, because Im trying to create a pull for YOUR branch, which you can then merge and create a pull for us here which includes my change :).
2497	16219747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16219747	jonasschnelli	will do that asap
2497	16220341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16220341	Diapolo	I want to thank you, I really like he new icon set, good job and keep it up!
2497	16233659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16233659	jonasschnelli	branch with new tn ico file:
2495	16112246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16112246	jonasschnelli	If the new splash screen will be accepted, i will update the build process so that the splash.png text (version, copyright) gets automatically "written" with imagemagick like the gui about screen.
2495	16114718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16114718	laanwj	I like the splash screen. However we should add the version and copyright information text programmatically from qt. It does not need to be in the image. Otherwise theres yet another place to update copyright and version numbers.
2495	16117919	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16117919	Diapolo	ACK, I thought the same. We dont want to update that screen with every new year or relase. Looks very nice, I like it.
2495	16133375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16133375	jonasschnelli	as a coder, i would also recommend the option of placing the text on the splashscreen by code. As a designer i would avoid this. Why: text placed by Qt will look much more sharp and somehow crispy. Text placed as image on a template image by imagemagick (or other command-line capable gfx tool) will look much better and can use non-standard fonts. It might sounds crazy for you (coders), but in my eyes, the splash screen is the first contact with the enduser and when it come to the point where the Bitcoin-Qt client gets "mainstream", first contact is very important. Thats why i would go with the pre-generated png in the build process with imagemagick. Its more work for us, but more quality for the enduser. And i kind of like this.
2495	16135637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16135637	laanwj	Qt supports various text rendering options as well. And TBH its our time that is very limited at the moment, I really dont mind text quality to be somewhat less for that.
2495	16135820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16135820	laanwj	Maybe theres another option: make building the image part of Bitcoin-Qts build process. That makes it automatic, which is fine with me as well. Non-standard fonts be a problem in any case though: everyone needs to be able to build the image, so it cant rely on certain fonts to be installed.
2495	16136174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16136174	jonasschnelli	yes. Include into bitcoin-qts build process. Font: i would just place a ttf or otf file (open source fonts) into the qt/src folder. The font must not be installed on the build-system.
2495	16136591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16136591	laanwj	would calling imagemagick in the build process work on windows? I suppose itd be more difficult...
2495	16157860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16157860	jonasschnelli	i thought the same. Imagemagick is probably a overkill. Has also huge dependencies (Ghostscript, freetype). And yes: windows user would hate me. ;) I think I try to create a solution with qt only (runtime). Let me try to play with Will push something soon.
2495	16157977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16157977	gmaxwell	meh. I love the image, but it seems like such a small thing to need to invoke imagemagick for... Im sure that QT can be made to do this.
2495	16158864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16158864	laanwj	Agreed gmaxwell. Especially as Qt has a quite advanced rendering backend (QPainter). I daresay it can do most that imagemagick can do, rendering-wise. Lets do this the proper way :)
2495	16167175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167175	Diapolo	Ive never heard of ``imagemagick``, but as we want to do it the Qt way I wont even google it ^^.
2495	16175761	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16175761	jonasschnelli	Just pushed some code which places the infos by Qt. In development, the version string is much longer and a smaller font will be used. Releases would look like this (1:1 screen from the splash screen drawing by qt): ![Bildschirmfoto 2013-04-10 um 15 52 38](https://f.cloud.github.com/assets/178464/362364/165a7ed0-a1e7-11e2-8574-059bca400941.png) Question: - Where should we place the 2013 ( end year)? - Is there a nice way to get the app name dynamically? Could someone test this on Qt4.7/4.8?
2495	16176166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16176166	Diapolo	You could use QApplication::applicationName() for the name, but be careful, as it would be ``Bitcoin-Qt-testnet`` for testnet currently.
2495	16177576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16177576	jonasschnelli	- App name is now dynamic ("-testnet" will be replaced with " (tn)" for a better style). - When on testnet, the splash screen contains also a "green" bitcoin logo.
2495	16178387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16178387	Diapolo	We currently use [testnet] appended to ``Bitcoin-Qt`` to indicate testnet usage (see bitcoingui.cpp -> ``setWindowTitle(windowTitle() + QString(" ") + tr("[testnet]"));``), which I would like to keep (with equality and translation stuff in my mind).
2495	16179139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16179139	jonasschnelli	the testnet splash png is 45.37kb. When you compare it against the blockchain size... but yes: it will increase the bin size. I still recommend to have it (the new testnet splash).
2495	16179541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16179541	Diapolo	I also like the new testnet splash :) and 46KB is fine with me!
2495	16179807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16179807	sipa	Im fine with 46kB extra.
2495	16182018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16182018	laanwj	46k is much less than I had estimated, Im fine with that.
2495	16190498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16190498	qubez	splash screen in <3k: ![splash-3k](https://f.cloud.github.com/assets/1425520/363622/ca0f2496-a208-11e2-830c-db38ea13d462.png) ![splash-3k-testnet](https://f.cloud.github.com/assets/1425520/363704/00d3c390-a20b-11e2-80cd-832ae6267fd1.png) (I <3 Bitcoin)
2495	16219190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16219190	Diapolo	Can you please squash all commits into one after we have the final ACK for this :).
2495	16232560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16232560	jonasschnelli	squashed and ready to test on Qt4.8. Anyone?
2495	16232584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16232584	jonasschnelli	Pulltester might also do a check...
2495	16234077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16234077	fanquake	I can test for you. Have one comp running 10.7.5
2495	16234177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16234177	jonasschnelli	do you can build from the source (take master and pull from jonasschnelli/bitcoin new_splash_screen)?
2495	16240167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16240167	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2495	16240414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16240414	jonasschnelli	Oh... Hmm.. "src/qt/bitcoin.cpp:205: error: COPYRIGHT_YEAR was not declared in this scope" Wasnt it merged in a PR to the master in #2503?
2495	16240777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16240777	Diapolo	You can rebase to current master and update this pull, perhaps was doing its work with a not up-to-date version :).
2495	16249457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16249457	sipa	I like the splash screen image :)
2495	16250737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16250737	Diapolo	Same here, I really love it, great looking! Dont think my many comments lower that feeling :) .
2495	16282083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16282083	jonasschnelli	my contributions are for the blockchain and not for my ego. :) so keep on finding details to make it better!
2495	16317265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317265	sipa	Seems to work fine. I havent checked the code changes, but can you at least squash them?
2495	16331842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16331842	jonasschnelli	will finish the splash screen soon (1-2 days) then i try to squash. I once pulled/updates from master, ... i think i cant squash over the merge of the master? Can i?
2495	16332361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16332361	laanwj	it is possible, but more difficult, and not simply with git rebase -i (I think. Thats why you should ideally not merge in these cases, but always rebase); easiest may be to start from a new branch with master, then git cherry-pick the non-merge commits.
2495	16348493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16348493	jonasschnelli	fresh and clean pull request is #2524
2495	16348650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16348650	sipa	You can just do a force push to the branch associated with the old pullrequest. You dont have to create a new one.
2495	16349945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16349945	jonasschnelli	i did a --force push but the "old commits" where still in the commit list. The branch on my github repo was completely different to what i had localy (and pushed with --force). Thats why i then restarted the whole thing. Hope you excuse. :)
2495	16351974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16351974	laanwj	Yes its not a problem, hes just saying that in general you never need to re-create a pull request. Force pushing something new will override anything that is currently in the pull request. Sometimes, the old commits stay there for a while ~ 5 minutes but thats just github in the process of updating.
2494	16110095	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16110095	Diapolo	I like that green now :), ACK from me.
2494	16110147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16110147	jonasschnelli	finaly made the Diapolo happy. :)
2494	16116766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16116766	fanquake	Looks like you accidentally pushed your splash screen changes into this pull?
2494	16117764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16117764	Diapolo	Indeed :)
2494	16130618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16130618	jonasschnelli	grml.... i love git,.. but sometimes i get lost between branches, repositories and commits. :) New PullRequest here:
2493	16240309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16240309	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2493	16317293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317293	sipa	Im afraid this will have to be conditional on the version of Boost used.
2493	16318171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16318171	robbak	Ok. Ill look at this further. Is the reason for the windows inclusion of this library also because of boost library version? On 13/04/2013 6:59 AM, "Pieter Wuille" <notifications@github.com> wrote: > Im afraid this will have to be conditional on the version of Boost used. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2493#issuecomment-16317293> > . >
2493	16318706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16318706	luke-jr	Note the pullreq to upgrade boost to 1.53 removed the chronos lib.
2493	16322747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16322747	Diapolo	I know that my dependecy lib pull needs updates to reflect this.
2493	16322763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16322763	Diapolo	Windows needed the chrono lib because we use Boost 1.50.
2493	16327593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16327593	robbak	> > On 13/04/2013 6:59 AM, "Pieter Wuille" <notifications@github.com> wrote: > >> Im afraid this will have to be conditional on the version of Boost used. >> >> >> Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2493#issuecomment-16317293> >> . >> > Time for a silly question: How do we make this conditional on library version? We arent doing this anywhere else in the makefile or .pro file, and the documentation doesnt seem to advertise a method. For my purposes on FreeBSD, I can easily handle this in our port makefile - its easy to add it to LIBS or QMAKE_LFLAGS until we get an updated boost.
2493	16327982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16327982	luke-jr	This is why automake was invented... :p
2493	16330177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16330177	laanwj	Configure script: I think were going to need it.
2493	16348351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16348351	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2493	16348397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16348397	robbak	OK, that was jut me doing a merge. Sorry for the noise. Ill close this. By the time we have a configuration script, Well have an updated boost, and will no longer need it. There is someone else on the mailing list that has had the same problem on a linux variant, too. Another work-around may be adjusting the code to not use boost_chrone below boost version 5.3. I personally would rather add the lib for boost 5.0~5.3. Maybe a note in the makefile, like the notes we have for other boost versions.
2492	16218864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16218864	Diapolo	Updated to reflect suggestions.
2492	16242354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16242354	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2492	16317317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317317	sipa	ACK
2491	16098500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16098500	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2490	16099655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16099655	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2487	16036592	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16036592	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2487	16169521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16169521	Diapolo	Can we get this in, perhaps I can do another Transifex pull before 0.8.2 release :).
2483	16014220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16014220	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2483	16017341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017341	sipa	Meh, I dont really care about the built-in mining code. Dont object to changing this either.
2483	16017462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017462	Diapolo	I always use it for Testnet mining.
2483	16031383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16031383	jgarzik	Well, * I do care about the internal miner, it definitely has several users on testnet * however, this patch breaks an existing interface * however, not sure we really care about such breakage
2483	16057529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16057529	gavinandresen	NACK, I dont like breaking RPC interfaces. I would ACK adding this information to getmininginfo if it is not already there.
2483	16061332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16061332	jgarzik	NAKd, closing. I agree that adding to getmininginfo would be fine.
2482	16014694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16014694	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2481	16012986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16012986	Diapolo	While you are on it, can you perhaps also change my "hotfixes" for getXYZAction into Qt signals :)?
2481	16013262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013262	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2481	16014015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16014015	laanwj	Ill take a look...
2481	16040225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16040225	Diapolo	ACK for the current version :), I compiled and tested it.
2479	16010497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16010497	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2479	16010605	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16010605	brandondahler	Build failure above appears to be a false-positive--the patch "bitcoind-comparison.patch" needs to be updated to be able to apply to commits after 8c222dca4f961ad13ec64d690134a40d09b20813.
2479	16010890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16010890	K1773R	this is just fking awesome! thanks :)
2479	16010963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16010963	gmaxwell	Very cool that youre working on this. But unless Im reading this wrong, it looks like when it hits the limit it will just stop sending messages to peers. This would break the network and its not something we can merge. As you note in your spreadsheet, virtually all the bandwidth usage is relaying blocks and I expect that if you instrumented for it youd find it was from relaying historic ones. This is why Ive been recommending to people that they make their nodes not listen to inbound connections when they want to limit their usage. (nodes dont accept inbound connections until they have most of the chain, so a node you connect out to will almost never pull any of the history from you) What Id suggest here is that you instead close inbound peers and refuse non-localhost p2p connections once the limit is hit, and dont do addr broadcasts when the limit is anywhere close. This wont help for the minute/hour timescales, however but we cant take limiting on those timescales until the initial block download process is changed so that having limits on those scales wont break node initialization. (though that may happen soon) Make sense?
2479	16017106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017106	mikehearn	Yeah, you cant just not respond to getblocks requests, that will break things (today). Even just serving it very slowly wont work well (the peers wont switch to a faster node). Long term we need some better mechanisms for network load balancing. If a node is running out of resources, itd be good if it could redirect peers to other nodes that have more capacity. For that we need an upgrade to the protocol though, so nodes can advertise their available capacity. Its a harder change. Just closing connections like gmaxwell suggests is a good start. Of course, if everyone uses this feature, then we run the risk of the network running out of upload bandwidth!
2479	16017154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017154	mikehearn	You could also stop setting the version services bit indicating you can serve the chain. That way peers will think youre an SPV node and wont ask for the chain.
2479	16020079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020079	brandondahler	: Is there currently a proper way to refuse a getblocks request? Right now there is a mechanism that will allow callers of the PushMessage functions to see if they failed to be sent or not, having them send a different response based on that is trivial. It sounds like closing all connections will be a good idea for nodes that have met their overall max bandwidth. I will look in to getting that added in the next weeks.
2479	16020892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020892	sipa	I think the only current way to not respond to getblocks (and getdata, which is the actual expensive part) is not advertizing that you do in the first place. Which indeed means disconnecting or not setting NODE_NETWORK, right now. This discussion will probably be needed soon anyway, if we want to move forward with pruned nodes (which only store part of the block chain, and may only relay parts or nothing at all).
2479	16032987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16032987	jgarzik	Bandwidth limits are a common P2P knob, well within reasonable user expectations. It has been said for years, in the Linux kernel, that it was awful to put bandwidth limits inside each application, when instead smarter, higher level layers such as cgroups and tc/qdisc would be far more appropriate. In theory, that is true. In practice, it is easier to deploy immediately in a user application. In-app limits do not require modifying kernel or firewall configuration -- which the user may not have rights to access anyway. Therefore, I respectfully disagree with Closing inbound peers is a very poor solution, and it is disappointing to see that as a recommendation -- when the alternative is to enable users with a limit commonly found in other P2P applications. RE *"Even just serving it very slowly wont work well (the peers wont switch to a faster node)."* is already starting to address this, by scoring peers in #2461. As such, serving slowly is preferred to serving nothing. That enables 50% of the solution -- with the other 50% of the solution being better seeking/scoring of peers for getblocks requests. That sets up a natural ecosystem: peers do what they can, and other peers seek the best behaving peers. At times when our popular peers are over-loaded, the less able peers automatically step in and provide some level of service.
2479	16033046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033046	jgarzik	Also, bandwidth limits simply makes the local nodes behavior more predictable. You can guarantee that your VPS does not exceed its bandwidth budget. You may guarantee that bitcoind will never burst sufficiently to disrupt your game of Star Wars: The Old Republic. There is nothing wrong with users that want this accounting ability. See Tors torrc for one very flexible method of specifying bandwidth contributions.
2479	16033183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033183	jgarzik	To be clear, NAK on anything that drops getblocks requests, or similar. As said, "you cant just not respond to getblocks requests, that will break things"
2479	16033801	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033801	gmaxwell	I am absolutely not opposed to having bandwidth limits (in whatever structure people want them in Tor has both short timescale and long term accounting limits). I have no idea how Jeff got the idea that I (or anyone else here) doesnt fully support having them. We just cannot have them yet, as I said: "but we cant take limiting on those timescales until the initial block download process is changed so that having limits on those scales wont break node initialization. (though that may happen soon)". For the monthly accounting limits switching out of listening/node-network state is a possible viable option. Though it only works for the long timescale limits (Similar to the AccountingMax setting in Tor), not the "keep traffic down to avoid messing up my games". I dont see why Jeff would consider that disappointing, its certainly not something complete but its also something that could be deployed in todays network. Any other limits will need to be at least two versions out (the version after IBD loadbalancing is fixed).
2479	16034131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034131	jgarzik	Even a simple kb/sec upload limit would be fine. There is no need for that to be N versions out. Bandwidth limiting occurs naturally on the Internet. Therefore, it seems exaggerated to suggest that an optional limit, mimicing a found-in-nature condition, will *break* much of anything.
2479	16034175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034175	gmaxwell	Right now "bitcoin took two (or more) days to synchronize" is _the_ most common complaint I hear about the software. This is a direct result of fetching from low bandwidth peers. I do not think that we can afford to make that worse before we make it better.
2479	16034473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034473	jgarzik	"make that worse" is a severely constrained point of view. Blocking a user from better control over their own private property (by arguing against bandwidth limits commits) is the wrong way to achieve that goal. The net result discourages people from running peers at all, because the default software is less predictable, more susceptible to the whims of remote peers. "make that worse" implies selection bias and ignores opportunity cost -- excluding the bandwidth contributed by discouraged peers, and focusing mainly on the *existing* set of peers on the network as if a static entity.
2479	16034613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034613	gmaxwell	I fully support people controlling their own systems. **[Edit: Ive toned this down a bit. I know Jeff doesnt intend to insult me, and if Ive some how left him thinking that I want to restrict choice then Ive been doing a very poor job expressing myself, and thats my fault not his]** Right now users can stop the high bandwidth usage by simply disabling listening. _At the moment_, because of the way nodes select and use peers, this is preferable to having listening enabled but artificially rate limited" dont advertise a capacity you dont have because your peers arent smart enough to figure out that you dont and cope with it". Its not ideal but it will prevent the IBD badness. A limiter that also turned off node-network when set under some value would likewise by completely fine. Since you used Tor as an example it would be useful to consider all the work the Tor project has put into load-balancing: Tor nodes report their configured/observed bandwidth to Tor directory authorities, the bandwidth authorities (https://gitweb.torproject.org/torflow.git/blob/HEAD:/NetworkScanners/BwAuthority/README.spec.txt) periodically test nodes to make sure their bandwidth claims are honest, and then only the top 7/8ths of nodes get the flagged ("fast") for primary use. There used to be a minimum bandwidth threshold under which nodes were ignored because they degraded the network, but that become superfluous to the 7/8ths test. Load balancing is then linear on bandwidth. But linear load-balancing doesnt actually achieve the best utilization, so theyve experimented with things like using a PID controller (https://lists.torproject.org/pipermail/tor-relays/2011-December/001039.html) to weigh the bandwidth amounts to achieve better utilization, but it seems theyve given up on this particular mechanism I mention it as color for how complicated a problem this is, especially when you need to be attack resistant. Fortunately, our application is not quite as sybil vulnerable as Tor... but unfortunately we dont get to have central authorities telling people validated bandwidths. Its also interesting to note that Tor has seen some parallel arguments to the ones made against my recommendation to turn off listening that its demotivating to people who want to contribute see the last comment (By cyberpunks/paul) at
2479	16039010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039010	sipa	I think youre talking about different things. Nobody is saying that bandwidth control in general is a bad idea. Its a common expectation from P2P software, and a very reasonable one. However, with the current software, effectively the first peer connected to is being used to fetch blocks from. I consider that a bug, and it needs fixing independently from this issue. Nonetheless, it means that even when (from what I can tell) more than enough fast upload capacity is available from the network, users face horribly slow block download because they randomly connect to a peer who probably doesnt even like the fact that hes serving the historic chain in the first place. Right now, with the state of the current software, and without changing the protocol, I do agree that simply dropping the connection is the best throttling mechanism we have, as that will result in the peer (eventually, but see #2461) finding a new peer instead of waiting days before every block is uploaded through - who knows - perhaps a GPRS connection. Dropping the connection results in a better experience for both parties.
2479	16039035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039035	mikehearn	Yeah, Im all for a smarter networking protocol too - its just that this patch doesnt do that, as is. Also, bear in mind that if the networking protocol changes, everything that talks it has to be upgraded. Currently bitcoinj scores peers by ping time (amongst other things), because peers that are very slow/busy serving the chain to someone else/overloaded/bandwidth-saturated tend to have high ping times. If a peer has low ping times but still responds to getblocks slowly, then thats fine but Ill have to update that code and users need to be updated.
2479	16129105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16129105	gavinandresen	No consensus. Closing.
2478	16007828	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16007828	gmaxwell	ACK ACK ACK ACK ACK (I carry a patch on and off that does this, but it breaks from time to time and I get lazy and dont forward port it... and then regret it when something weird happens)
2478	16008123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16008123	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2478	16008873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16008873	jgarzik	ACK -- although I think it is a symptom of lacking a partial hash search ability, such as that is built into git.
2478	16008956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16008956	gmaxwell	Partial has searching requires a more expensive index than exact matching and isnt needed for any of the network protocol or basic functionality of the software. Though what we use today can support it, getting stuck with it would be unfortunate when it only saves us some space in logs.
2478	16054508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16054508	rebroad	Can this be implemented as a command line option to either display the full hash or an abbreviated hash please? I far prefer block hashes to be 15 characters long i.e. substr(5,15), and txs to be 10 chars long.
2478	16054568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16054568	sipa	I personally dont care about the esthetics of the debug.log layout. What do others think?
2478	16057116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16057116	gavinandresen	ACK
2477	16005214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16005214	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2477	16011198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16011198	laanwj	Cute!
2477	16013094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013094	Diapolo	I think the bitcoin_logo_doxygen.png looks a little blurry compared to the former version. Im not yet sure if I like the new testnet color, I will wait for pull-tester to build and then try it out :). Very nice work, I have no passion to be a graphics-artist and love that work you show use here.
2477	16033451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033451	laanwj	I also liked the darker testnet color a bit better. Having said that, its only the testnet, the poison green is meant to be kind of a warning color :) In Andreas Schildbachs bitcoin-wallet client a different take on the warning pattern is used: ACK, we should certainly merge this for 0.8.2
2477	16034025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034025	Diapolo	Im fine with testnet, if you are... ACK for the mainnet icon ;).
2477	16035771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16035771	jonasschnelli	In my eye, the testnet color should just be "visible" somehow. Because mostly devs are using the testnet icon, it has in my eyes not the same quality requirements. But nevertheless, the quality is good. :)
2477	16038680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16038680	jonasschnelli	right, the doxygen icon was blurry. Its fixed and pushed now.
2477	16040021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16040021	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2477	16098261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16098261	Diapolo	Im now using your current icons with my local build and I think you should also update the toolbar.png and toolbar_testnet.png versions. Specially on testnet the combination of the new color with the old one in the Windows system-tray looks really weird/ugly :). Also I still think the old color was a little more friedly, the new one doesnt fit into the color scheme (at least on Windows). ![testnet](https://f.cloud.github.com/assets/1419649/355649/8c469364-a0e7-11e2-860c-4e8d6660c2c8.png)
2477	16098771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16098771	jonasschnelli	your right. I did not take care of the testnet toolbar. I will no update the color more according to the old testnet color (was more warm) and also take care of the testnet toolbar.
2477	16167568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16167568	Diapolo	Can you take a look? I think the new icon is missing a little transparency or fading on the outer ring and seems smaller (Or is this intended?) for me on Windows. (left old / right new) ![Icon](https://f.cloud.github.com/assets/1419649/361693/b8e5db5a-a1cd-11e2-85c1-8610c917b47e.png)
2477	16169866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16169866	jonasschnelli	let me startup my Windows WM...
2477	16171651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16171651	jonasschnelli	fixed and placed in PR #2497 preview: ![preview](https://f.cloud.github.com/assets/178464/362032/7cb57294-a1dc-11e2-92c6-8b4143747083.png) ... and the remove of the transparency was a conscious decision.
2474	15999537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15999537	Diapolo	What is the schedule for 0.8.2? Im asking because of translation related pulls and a fetch from Transifex ;-). ACK of course
2474	16001785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16001785	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2470	16002348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16002348	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2469	16002917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16002917	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2469	16097483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16097483	Diapolo	Can this also make it into 0.8.2?
2469	16098901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16098901	laanwj	ACK
2465	15962841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15962841	Diapolo	That was, what this pull is for afaik :).
2465	15964989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15964989	petertodd	Oh of course. ACK
2461	15940635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15940635	Diapolo	Does this fix the non-working IBD after importing blocks from disk (but not up to the height the network currently has - so after disk we need to switch to network)? Edit: Im creating a build with that patch and will see ^^. Edit 2: Very nice, it immediately switches to network sync, when import was finished, GREAT!
2461	15946557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15946557	sipa	Indeed, thats what it should do :)
2461	15994137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15994137	Diapolo	What about an information, what the current sync node is? Perhaps in getinfo or getpeerinfo (isSyncNode or something) RPC?
2461	15999002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15999002	sipa	I think that can be added to getpeerinfo, indeed.
2461	16003420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16003420	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2461	16019318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16019318	sipa	New commit: add bytessent, bytesrecv and sync to the getpeerinfo output.
2461	16019942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16019942	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2461	16032727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16032727	jgarzik	ACK
2461	16039376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039376	sipa	To comment on a remark you made in another pullreq: this patch effectively only uses the scoring mechanism when the current sync node goes away, even though it may not be the "node in practice being synced from" anymore. When IBD is complete, and a node (different from the designated sync node) announces a new block, we will fetch it from him. This patch does not switch the sync node to that peer then, though that could be improved in further revisions (see #2034). All this does is make sure there is always at least one node weve asked about new blocks.
2460	15921225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15921225	sipa	Id rather try to fetch this from Checkpoints::
2460	15921611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15921611	Diapolo	How would I do that? I thought about a global constant somewhere, to not have that value in different places, but that was also not done while the mainnet Genesis blocks time was added there ;).
2460	15921923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15921923	sipa	Oh, Im wrong- I think the genesis time was already in checkpoints. Lets ignore it for now, and fix it later.
2459	15944032	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15944032	laanwj	Maybe this will solve some duplicated error/warning messages about the translations as well
2459	15944349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15944349	Diapolo	Best thing is you try that before merging it :).
2459	15972367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15972367	laanwj	Works fine for me, waiting for pull testser before merge.
2459	15985853	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15985853	sipa	Works fine here.
2457	15889141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15889141	Diapolo	Lets see if pull-tester is happy with that :).
2457	15890796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15890796	laanwj	Hah, finally a reason for me to install qt5 :)
2457	15971397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15971397	laanwj	Still waiting for pulltester... ACK from my testing
2457	15974562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15974562	jonasschnelli	build is broken on mac because Qt5 5.0.x has no longer platform dependent function. There functions make problem: - qt_mac_execute_apple_script - qt_mac_set_dock_menu - pixmap.toMacCGImageRef()
2457	15987135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15987135	Diapolo	Can you give some more details in which file the compilation fails and what the exact errors are? I can only talk about the Windows build, which should compile just fine.
2457	15993712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15993712	jonasschnelli	i try to analyse it more clear and maybe im capable to offer you a pull request with some fixes.
2457	15993805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15993805	Diapolo	Sounds good :). Linux doesnt suffer any compilation problems?
2457	16002513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16002513	jonasschnelli	should we not create a Qt5 branch for Qt5 support? On the mac side, there are some changes to do: - testnet (green) doc icon ("switch icon" is broken in Qt5) - Growl support (needs some code fixes) - x86 support My recommendation would be to drop Growl support and add support for the new Notification Center (OSX 10.8+). Growl is no longer opensource and must be purchased. If someone runs <10.8, notifications are not supported. I have some commits ready to fix certain things. But im not sure where i should open the pull request. I think a Qt5 branch in the main repo. would make sense. If not, i can also open a PR at Diapolos repo.
2457	16002559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16002559	jonasschnelli	And some screens from mac client with qt5. ![Bildschirmfoto 2013-04-06 um 21 34 03](https://f.cloud.github.com/assets/178464/347750/137fd528-9ef1-11e2-980d-8fa15a1dc713.png) ![Bildschirmfoto 2013-04-06 um 21 34 14](https://f.cloud.github.com/assets/178464/347751/1e65d992-9ef1-11e2-9b0e-e5f74fa1fb9d.png) btw: your 440BTC balance is nice. :) I have to recover somehow.
2457	16003935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16003935	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2457	16012908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16012908	Diapolo	I think you can base your pull request on this one, as I dont yet know how I could add your pull-request into my repository (was never the case before ^^). But its rather GREAT, that you are able to help with Mac GUI wise! I dont think we need a Qt5 branch, as long as Qt4 compatibility is still persistent. Oh and that BTC is a testnet wallet ^^. I lost all my coins with a scam a few months ago, but I dont care :).
2457	16012944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16012944	Diapolo	At least is happy, does he also build Mac binaries? Perhaps not ^^.
2457	16013025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013025	laanwj	Well Id prefer not to have a separate Qt5 branch. As long as there are no critical issues with Qt4 compatibility, Id like to merge it. But it would be possible to do it temporarily... Pulltester doesnt build on/for Mac at the moment. Cross-building for Mac would be nice but is hard to do, and we dont have any dedicated Mac developers on the dev team.
2457	16013113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013113	Diapolo	I would also love to see that merged, perhaps can then create pulls based on current master :). How far is 0.8.2 away, as we need to fix the Mac stuff after merging it. Edit: That Mac look is quite nice, but I really fell in love with Fusion ^^.
2457	16013685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013685	laanwj	[misinformation deleted]
2457	16013734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013734	Diapolo	I think we need to think about translations for that intermediate releases, which are based on own branches then!? But at least this means we can safely pull Qt5 and iron it out for 0.9?
2457	16013773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013773	laanwj	Id be for a "no message changes in intermediate releases" policy, to prevent that from being a problem. And yes, if there are only superficial issues on Mac that can be resolved along the way, nothing wallet-eatingly bad, I think we can merge this (as soon as youve rebased).
2457	16013885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16013885	Diapolo	Rebased! Edit: I think that "no message changes in intermediate releases" policy is a good one! Any idea, if this should be written down somewhere?
2457	16014067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16014067	laanwj	OK I am sorry to disappoint you but just heard on IRC that we *are* going to spin off a 0.8.2 from HEAD. Severe case of miscommunication here :( So, lets make a Qt5 branch, then... When you make a pull request, be sure to select branch Qt5 of repository laanwj/bitcoin as target branch. Ill see if I can make it the default there. Thanks. Edit: its the default branch on now.
2457	16015372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16015372	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2457	16015885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16015885	Diapolo	So I need to add your remote repo via ``git remote add laanwj git://github.com/laanwj/bitcoin`` and push my Qt5 branch to your master via ``git push origin laanwj/master``?
2457	16017289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017289	laanwj	Diapolo: yes to the "remote add", but you cant currently directly push to it; if you have qt5 specific changes you can create pull requests to my repo instead of the main one, so I (or you, when I give you commit access) can merge them there. (and eventually Ill merge it here upstream all at once, once 0.8.2 is out)
2457	16017514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017514	Diapolo	How do I create a pull-request via the git command-line? Normally I push to my repo and create a pull-req for Bitcoin master directly via Github website. Edit: Nevermind I got it, I can chose you as base repo to open pull-requests via Github, so no need to fiddle around with the command-line :D. Currently your branch is up-to date, so nothing to do now.
2457	16017731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16017731	laanwj	I am not aware of any method to create a pull request on the command line. Indeed, you can simply push to an own branch and use the github interface :)
2457	16038744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16038744	jonasschnelli	As soon as has open a push request on Qt5 branch and has merged, i will create also a PR with my mac QT5 changes.
2457	16039288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16039288	jonasschnelli	i think cross-platfrom builds are not possible. The apple frameworks are only available on Mac OSX. I can try to set up a hackintosh on one of my debian-servers with VMWare and give you a jenkins node. How does the pull tester works? Manually executed? Or does the tester search for new PR and auto-tests them?
2457	16040716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16040716	Diapolo	laanwj already has this Qt5 branch in his repo, which is also the master repo. So you can start supplying patches and even Im allowed to merge them in his repo.
2457	16042578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16042578	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2457	16046429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16046429	laanwj	One small correction: its not the master branch in my repo but the Qt5 branch (which is the default branch) that you should send pull requests to.
2457	16085056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16085056	qubez	The last pull-tester has a display problem on win32 - the transaction history tab has all columns collapsed to the left, so only "Address" is showing. They can be expanded, but the column width is not a saved setting and the issue occurs again upon next start. Pull-tester uses Qt v4.8.2, whereas the last release was built with 4.8.3, and 4.8.4 is out. (Also tabs are called tabs but they still dont look like tabs...)
2457	16287203	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287203	luke-jr	This screws up transactions display with Qt4 because resizeSection(..., QHeaderView::ResizeToContents) doesnt behave reasonably...
2457	16287335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287335	Diapolo	Can you check if this also happens with Qt 4.8.3 / 4.8.4? AFAIK I never had this problem with the Qt4 version of my local build.
2457	17570583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17570583	Diapolo	AFAIK there were not that many changes to the Qt5 branch or did add further commits to your branch? Im asking in the light how we intend to behave with Qt5 available now as 5.0.2, which seems rather mature.
2457	17588062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17588062	laanwj	Yes, there have been further commits to the branch. It will be merged after 0.8.2 is released.
2457	18741150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18741150	laanwj	Superceded by #2721
2456	15985394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15985394	sipa	ACK apart from one nit.
2456	15987722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15987722	Diapolo	Nit was fixed :).
2453	15875348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15875348	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2452	15846426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15846426	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2452	15846519	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15846519	laanwj	Thanks for the fixes! Next time you should fix your own bugs :p
2450	15838945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15838945	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2449	15834223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15834223	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2448	15791573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15791573	gavinandresen	deleted pull-tester comment, Im working on the pull-tester machine...
2448	15815862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15815862	laanwj	FYI the two are equivalent so effectively this changes nothing; #define qApp QCoreApplication::instance() Merging it for consistency.
2444	15770956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15770956	laanwj	I like it ![Alt desc](https://dl.dropbox.com/u/7383846/new_bitcoin_qt_mac_icon.png) ![Alt desc](https://dl.dropbox.com/u/7383846/new_bitcoin_qt_mac_icon_white.png)
2444	15771076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15771076	laanwj	What license is it under? You should likely update doc/assets_attribution as well
2444	15772005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15772005	jonasschnelli	License: i would say MIT. If MIT is a problem, then public domain is also fine for me. When the pull request should be fine, then i also will update the assets-attribution as well as other icons/graphics.
2444	15772375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15772375	laanwj	MIT is best, as its the same license as the code, thanks.
2444	15774341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15774341	laanwj	ACK
2444	15774744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15774744	qubez	The "B" of the original art is white instead of transparent (rendering from vector art): ![bitcointranslogo](https://f.cloud.github.com/assets/1425520/328398/983ccb38-9b98-11e2-86fd-8ab3e3fab570.png) It was released into the public domain; although this is not a legal construct, it means that relicensing when needed or creating derivative works are not a problem with the author.
2444	15775268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15775268	jonasschnelli	I would also prefer a "white" version. But its might make those transparency-lovers feel bad? My recommendation: white version according to this mockup:
2444	15775675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15775675	schildbach	I went through this process with the icon of Bitcoin Wallet about 2 years ago. I added a subtle gradient and drop shadows. Maybe you just want to use that? ![market-app-icon](https://f.cloud.github.com/assets/743306/328468/743e23aa-9b9b-11e2-9dbf-3bb4f8650a89.png)
2444	15775921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15775921	jonasschnelli	My opinion on: - Outer-Shadow to "strong" - same shadow-cut problem as current icon (must be scaled) - B letter shadow looks like "b" and "coin-background" are not well "integrated" and its a bit over-3d-effected I still would go for the white-version according mockup:
2444	15776123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776123	laanwj	having a svg version is nice; if its decided to use your icon, would you be willing to license it under MIT or public domain? (I vaguely remember the one in Bitcoin Wallet is LGPL)
2444	15776410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776410	schildbach	You can adjust everything by parameters in the SVG. See the viewBox comment. I deliberately chose "0 0 1 1" as the normal size, because thats easier for embedding. The icon is adapted from the original by BitBoy. See this thread for the original: Currently my version is under the same license as the original, whatever that is (it did not get clear to me I must admit). Is that suitable?
2444	15776709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776709	laanwj	Yes, from what I understood bitboys license is public domain, so thats ok.
2444	15776962	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15776962	jonasschnelli	ill recommend a inverse shadow for the "B Letter" because then it looks more integrated and also more near to the current, transparent version. Ill try now to create a SVG version (or optimize the current one). If LGPL, i recommend to create a new SVG under MIT or as public domain. but: somehow it must also be translated into PNG and a ICNS (as well as a .iconset) where it then depends whenever the shadow looks nice or not. The SVG can replace the committed PSD (makes it more open-source like and avoid Adobe stuff). But: SVG has limitation in effects and will reduce the graphical/design potential.
2444	15777138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15777138	Diapolo	I still like the idea to have one icon for all OSes ^^ is that a whish only ;)?
2444	15777219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15777219	jonasschnelli	for sure. But i think its more efficient to first agree on a icon design (SVG, hires). If done, ill then can create all necessary sub-icons (rendered icons). Thats why the commit only includes the mac icon (my starting point)
2444	15791632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15791632	gavinandresen	deleted pull-tester comment, Im working on the pull-tester machine...
2444	15798784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15798784	jonasschnelli	ive just added a SVG file. The svg is a overhauled version of bitboys file. I did some vector combinations. The shadow is very light. The "b" is no longer transparent. Ive also added the white version of the mac osx icon. License of SVG and rendered icon version: MIT (as source code)
2444	15807198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15807198	schildbach	Nice work!
2444	15811899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15811899	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2444	15816213	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15816213	laanwj	Very nice! Agree with getting rid of the transparency.
2444	15943811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15943811	laanwj	Just going to merge this. I look forward to the Windows/Linux icons.
2444	15944470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15944470	Diapolo	Im also looking forward to see updated icons for Windows and Linux :).
2444	15944678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15944678	jonasschnelli	coming within the next days
2444	15948539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15948539	jonasschnelli	new pull request for the misleading PSD file in the assets-sttribution.txt file.
2443	15772221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15772221	laanwj	ACK on most changes, but I think you should leave on_XXX_clicked() slots for the automatic signal/slot assignment by Qt designer, otherwise its pretty confusing. For manual assigned slots, just use lowerCamelCase.
2443	15774940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15774940	Diapolo	My fault, I fixed the renaming stuff :). What you observed was a thing I intended to avoid ^^.
2443	15813042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15813042	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2443	15862472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15862472	Diapolo	Updated to ``receiving address`` :).
2443	15870402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15870402	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2442	15779268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15779268	Diapolo	I reverted the qApp thing, should be fine now :).
2442	15813997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15813997	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2441	15774501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15774501	Diapolo	Removed the #ifdef and added info in the comment that QClipboard::Selection is a NOP on Windows.
2440	15718060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718060	laanwj	Good catch
2432	15692512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15692512	jgarzik	This is the URL for preferred python jsonrpc:
2432	15721622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15721622	laanwj	bitcoin-python includes your changes to jsonrpc, it is a bit thicker wrapper that pythonizes the API and adds some convenience features (converts error codes to specific exceptions, parses the bitcoin config file, etc)
2432	15721755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15721755	jgarzik	Can it be merged into ? IRC discussion seemed to favor folding the most popular python RPC module, whatever it is, into that larger library.
2432	15814012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15814012	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2432	16866705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16866705	aviad	test.log says: + cd .. + git apply /mnt/test-scripts/patches/temp-revert-1.patch + git apply /mnt/test-scripts/patches/temp-revert-2.patch + git apply /mnt/test-scripts/patches/temp-revert-3.patch + git apply /mnt/test-scripts/patches/temp-revert-4.patch + git apply /mnt/test-scripts/patches/bitcoind-comparison.patch error: patch failed: src/main.cpp:3007 error: src/main.cpp: patch does not apply does anyone have an idea what this means?
2432	19911858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19911858	jgarzik	python-bitcoinlib and python-bitcoinrpc should be used, rather than supporting a third, new library.
2431	15687829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15687829	sipa	ACK if this doesnt conflict with Gavins thread cleanup.
2431	15718121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718121	laanwj	ACK
2431	15762460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15762460	Diapolo	ACK
2431	15779182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15779182	jgarzik	Ping
2430	15686585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15686585	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2430	15687106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15687106	laanwj	I think this may be useful addition. Can you squash into one commit?
2430	15690613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15690613	Aeyoun	Of course, Ive done so now.
2430	15701190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15701190	rebroad	Isnt it better to use umask first so that its created with the correct permissions from the start, rather than creating it with the wrong permissions and then chmodding it (as this pull currently does)?
2430	15709814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15709814	Aeyoun	the patch continues to use Boost for creating the directory cross-platform. What is added is for Unix systems to set the permissions more restrictive after creating the patch. This should also upgrade permissions for existing users, where as doing a new `mkdir` will not.
2430	15712856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15712856	Diapolo	You mention ``boost::filesystem::permissions()`` why not include code with ``#if BOOST_VERSION >= 104900``?
2430	15718013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718013	laanwj	This is strange. We *are* setting the umask (in init.cpp). Also my .bitcoin filter has the right permissions even without this patch. Are you sure it manages to create the directory with wrong permissions? Can you reproduce this?
2430	15814030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15814030	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2430	16057062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16057062	laanwj	So is there any reason why we would need this? Why would the umask call not be enough?
2430	16057835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16057835	gavinandresen	Closing this, because init.cpp already sets: umask(077);
2428	15670896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15670896	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2428	15671706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671706	r000n	Probably, rename it to "Addresses"? If its not a real address book :)
2428	15718307	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718307	laanwj	ACK
2428	15756007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15756007	Diapolo	ACK If you get this in today, Ill create another translations update for this. Also, I remember I asked about a better general translations process in line with release cycles and whether we should drop languages, that are below a certain percentage translated, what do you think?
2428	15772630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15772630	laanwj	yes I agree. Is updating translations something that could be made part of the release process in doc/release-process.txt? I suppose so? With regard to dropping translations, I dont know. I suppose below a certain % you could just as well have no translation. Do you know how other projects using transfex handle this, and if so what threshold they use?
2423	15677633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677633	sipa	Can you drop the #2409 included code, or switch to its latest version? They should combine cleanly anyway.
2423	15678887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15678887	TheBlueMatt	No longer depends on #2409
2423	15701804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15701804	rebroad	How about separating askedfor blocks and askedfor transactions? That way, one growing large wont affect downloads of the other.
2423	15716596	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15716596	TheBlueMatt	meh, that just sounds like useless duplication...in that case, anyone will just send block invs so that you re-request blocks more often, sounds like a better way to let an attacker be more targeted.
2423	15721394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15721394	TheBlueMatt	OK, switched to MAX_INV_SZ for the maps limit...Im not a huge fan of such a big number, but since its already a protocol rule it makes more sense to use that.
2423	15795943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15795943	gmaxwell	This has passed a couple days of in-valgrind production testing, but I think the new limited map needs some unit tests. OTOH, Id like this merged ASAP for previously discussed reasons.
2423	15796920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15796920	sipa	If my understanding of how maps are represented at runtime in STL is correct, this should mean at most ~6.2MB of memory for 50000 invs (with 8-byte pointers, with 4-byte pointers is 4.4MB).
2423	15797235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15797235	jgarzik	what are the previously discussed reasons? I dont see them in this pull.
2423	15797495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15797495	sipa	ACK, but unit tests for the map would be nice indeed. Has been running for several days for me without problems (together with #2419 #2418 #2422 #2420 #2409)
2423	15814991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15814991	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2422	15625866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15625866	jgarzik	Does init.cpp want updating, too?
2422	15626106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15626106	sipa	Not that know of?
2422	15655067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15655067	gavinandresen	ACK
2422	15659718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15659718	Diapolo	Perhaps was talking about the help message? ``Set database cache size in megabytes (default: 25)``
2422	15661920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15661920	sipa	-dbcache is still the intended database cache, but we shouldnt use that number both for the coincache/leveldb AND bdb.
2422	15670706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15670706	TheBlueMatt	ACK
2422	15671363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671363	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2422	15686582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15686582	jgarzik	ACK
2421	15625353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15625353	gmaxwell	You know if you set txindex=1 this works without the blockhash, right? I guess this isnt so bad its incompatible with pruning but so is txindex=1.
2421	15625496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15625496	silvioq	Ok. But txindex requires reindex and its bad for me (now). "If you need that functionality, you must run once with -txindex -reindex to rebuild block-chain indices (see below for more details)"
2421	15625637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15625637	sipa	Im unsure about this. On the one hand, the blocks are available, and getblock() exists- its stupid that it cannot give you the transactions in it. On the other hand, I really dont want to encouraging services that depend on the presense of (indexable) block chain data in the first place.
2421	15626140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15626140	silvioq	Well ... Maybe you must check this addon with the user community and decide if this is useful/compatible/promotable or not. Meanwhile, as I say, the fork is fine for me now and I can use it. Regards (and sorry by my basic English!)
2421	15655273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15655273	gavinandresen	I dont feel strongly one way or the other; code looks fine, I havent tested (only question: do you get a reasonable error message if you specify an invalid block hash?)
2421	15671601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671601	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2421	15815379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15815379	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (you can find the patches applied at test-time at 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2421	18232670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18232670	runeksvendsen	Im interested in this feature as well. I like being able to parse transaction data, regardless of whether it has been spent or no. silvioq, do you know why it failed to build? I cant access the build log.
2421	19497727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19497727	sipa	So, some more thoughts. The generic problem this pullreq tries to solve is very worthwhile: right now, we have the full blocks stored and indexed, but retrieving anything more than the headers and the txids in them is not possible without txindex=1. This shouldnt be necessary - just a sequential scan through the blocks is perfectly meaningful. Im still unconvinced about the implementation though. Doing such a sequential scan using this code here results in every block being read from disk and parsed N times, with N the number of transactions in it - only to fetch a single one from it. I have some suggestions for alternatives, but neither is perfect imho either: * Add a mode to getblock to inline the full transactions (efficient, but huge RPC replies, and unable to filter transactions you dont care about) * Add a mode to getblock which adds opaque transaction pointers to the output (e.g. block file number + position + size encoded in some form, or block hash + offset, or even just txids itself). The client isnt supposed to interpret these transaction pointers in any way, but pass them on to getrawtransaction. Ugly, but efficient and flexible. * Cache the last block read through getblock, so getrawtransaction (which takes the block hash, as implemented here) can just scan through it. Nice solution, but what if access isnt entirely sequential? * Cache the positions of transactions of the last few blocks read through getblock, so they can be read directly. Not a trivial change anymore though, ...
2421	19912040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912040	jgarzik	Agree w/ This functionality is OK to have, but in a different form. The first suggestion is the most powerful, and would seem to solve many common requests: getblock simply returns a full block, including all transactions. Closing, as consensus seems to point elsewhere.
2420	15624726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15624726	jgarzik	Nice! FWIW, In my own programs, I usually add a "--free" command line option, which optionally cleans up on exit (slowing down exit), rather than the rapid exit(0). Similarly, since freeing the block index and other numerous structures is a lot of pointless work at shutdown for 99.9% of users, I would suggest something similar for bitcoind.
2420	15624814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15624814	sipa	I certainly dont notice it, but if you want it optional, sure, that can be arranged.
2420	15671882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671882	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2420	15783508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15783508	Diapolo	How much extra time does that cleanup take? If its not a huge increase in shutdown time, why make it optional?
2420	15788309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15788309	gavinandresen	Very nice. We can make this optional later, if needed, Im going to pull now.
2419	15672232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672232	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2419	15686553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15686553	sipa	Rebased.
2419	15690004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15690004	laanwj	ACK BTW maybe we could use RAII or even one of the boost reference counting pointers here, instead of explicit AddRef/Release, as that tends to be somewhat more robust.
2419	15816464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15816464	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2419	15896104	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15896104	sipa	Rebased.
2419	15904952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15904952	gmaxwell	ACK. This has survived several days of testing and abuse.
2419	16004482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16004482	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2419	16024722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16024722	sipa	Ive been testing this with an extra commit that prints out vNodesDisconnected.size() at shutdown, and this seems to be always 0. That means that the refcounting is indeed working as intended: it doesnt go too low (tested by the assert), and not too high (as that would mean they linger in vNodesDisconnected until they reach 0).
2419	16051076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16051076	gavinandresen	ACK
2418	15670510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15670510	laanwj	Are these numbers always guaranteed to fit in a uint256? A more general solution may be to change CBigNum to store numbers <2^256 inline, and only allocate for larger ones, like with some optimized string implementations.
2418	15670759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15670759	TheBlueMatt	Our current work (printed as a uint256 with this patch) is 00000000000000000000000000000000000000000000003256b810087da1a920, assuming every 600MH card on the network is replaced with a 60GH ASIC and then we multiply that by 1000 for network growth, we get a network rate of 100,000x current, we are safe for another 92 septillion*time since genesis, so...I think we are safe.
2418	15670760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15670760	TheBlueMatt	ACK
2418	15674097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15674097	laanwj	ok, ACK
2418	15677600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677600	sipa	When 2^256 hashes are exceeded, its quite likely well have found a preimage for double-SHA256, and Bitcoin is broken in the first place.
2418	15677614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677614	sipa	I believe this will require a different pulltest, as I presume it tries to modify the global BigNums.
2418	15678962	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15678962	TheBlueMatt	Yea, this tries to modify the mindiff stuff so breaks on this pull. Ignore pulltester output for now and ping me before merge so I can update the patch.
2418	15896094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15896094	sipa	Rebased.
2418	16007451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16007451	sipa	Added a commit that prints the 2-log of nChainWork instead, which is somewhat more useful for human eyes.
2418	16071124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16071124	gmaxwell	ACK. (Needs pulltester)
2418	16130575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16130575	sipa	Rebased. This will need manual pulltester changes before it will succeed.
2418	16285742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16285742	sipa	Ive added a patch to your patch in this pullreq. If you update pulltester to use the tests in contrib, this *should* apply cleanly.
2418	16305410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16305410	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2415	15556682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15556682	gmaxwell	I certainly like stuff like this over the forking... What is the usecase for the IP addresses? This removes the fIsInitialDownload test around the forking blocknotify that test is incorrect to begin with (it can make you miss reorgs if the blocks have particular weird times), but without it blocknotify is a forkbomb. :)
2415	15557336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15557336	fredan	The IP address is just to tell when the Bitcoin client has gotten a new IP address from the network. I moved the test for fIsInitialDownload so it only evaluates once.(two times in the master code at the moment if you take a look). Hmm. There will be scenarios were you would like to have the blocks announced during fIsInitialDownload and when you dont. Will make an parameter for that.
2415	15557563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15557563	gmaxwell	Ah, missed that curly removal. In any case that doesnt change the point that IsInitial is not a reliable test, go look at how its implemented. The way that its setup there in theory a miner could construct a reorg that doesnt trigger the notice. This might be bad if youre depending on being told about the reorg in order to abort shipping a good or whatever.
2415	15560172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15560172	jgarzik	+1 for 0mq support in general. Reading now...
2415	15580166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15580166	laanwj	I like this. Delivering events over 0mq for block/transaction/etc notifications is much more elegant and efficient than launching commands.
2415	15585826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15585826	petertodd	Note that 0mq is LGPL, which is a bit more restrictive than the MIT/BSD license that bitcoin-qt is currently licensed under. Specifically LGPL requires you to distribute binaries that can be relinked if the user decides to change the source of the LGPL library. Not an issue with dynamic linking, but static linking is problematic. Other than some graphics assets - see assets-attribution.txt - this would be a new requirement for bitcoin-qt. Having said that, personally Im happy to ACK the change; users should not be using a copy of bitcoin-qt if the source code isnt available to them.
2415	15592572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15592572	gavinandresen	Nice! Can you put the trivial python client in contrib/0mq/ ? Also: 0mq is available in MacPorts, does version matter? zmq devel/zmq zmq20 devel/zmq20 zmq22 devel/zmq22
2415	15597704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15597704	gmaxwell	I was aware of the licensing I dont think its problematic. We have LGPL (QT) and advertising-clause BSD (OpenSSL) in parts of the system which are more essential... ZeroMQ can at least just be left out by someone practicing extreme licensing confusion. GMP for modular inversion will be a bigger question in the future.
2415	15598501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15598501	fredan	Yes, the version does matter. Use the version 3.2.2 (which is the latest stable one). Quote from 0mq: "We recommend this release to anyone developing new applications with MQ" I will include example client(s) under contrib/0mq in later commitments.
2415	15598559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15598559	petertodd	Yup, its a niche case for it to actually matter, but we should document it clearly for the lawyers; might as well put the info about our dependencies and associated license obligations in assets-attribution.txt or a similar file. (yes, Im volunteering to write that up)
2415	15672530	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672530	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2415	15677339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677339	fredan	BitcoinPullTester You need to build with make -f makefile.unix USE_ZMQ=1 to actually know if this pull request builds or not. You do need to have libzmq installed before that.
2415	15721285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15721285	mikehearn	The idea is neat, but there doesnt seem to be much documentation on how to use it or what form the messages take. For instance you call the message "new block" but thats not correct is it, its "new best block" - you wont see blocks that connect to a side chain and if a re-org happens (I think) you will only see the new top block and not the intervening blocks published on the queue. Or did I misunderstand the code?
2415	15722511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15722511	fredan	What the publisher does is to send new messages when something happens in the bitcoin client. You dont have to ask if something has happened, you already know that. Under contrib/0mq/bitcoin-zmq.py is an example client of how the publisher part works and their filter defined. Please run this and take a look of what the output is. (Hint: all json) To your other questions that depends on where in the source code that happens. If its in the main.cpp - SetBestChain, then yes if not, tell me where and I will add that as well.
2415	16033280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033280	luke-jr	Needs rebase.
2415	16038833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16038833	mikehearn	Dont get me wrong, new best block isnt a bad thing to notify on. New side blocks probably arent that interesting for most users anyway. Just pointing out that the naming/docs could be updated.
2415	16316589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16316589	TripleSpeeder	This makes a LOT of usecases possible. I use an older fork of bitcoind, based on even older implementation by Gavin, exactly for this purpose - Have an automatic callback whenever a transaction and/or block is coming in (See my fork on github). One suggestion: Add an option to get the "incoming transaction" notification only when it is for the own wallet. I think this would be a frequent usecase, so the receiving end does not need to do boilerplate code, probably involving additional rpc calls, to find out if the tx is actually interesting.
2415	16393896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16393896	laanwj	Some comments after code review: - There is no authentication for requests over ZMQ, do I get this right? - When compiling with USE_ZMQ, enabling it should be an option, not be done by default. This allows builders of Linux distributions (for example) to build an executable with all options enabled, and leaves it up to the end user to enable it or not.
2415	16395222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16395222	fredan	The usleep is only running if there is nothing for the thread to do. If we have a lot of request coming in, we will process this until the queue is empty. The reason why I have done this is to be able to shutdown the bitcoin process. 0mq does not any authentication method. Thats correct. Only allow it from trusted sources. The default value for USE_ZMQ is zero (0) in the makefile.unix. Thats why you need USE_ZMQ=1 to be able to compile it with 0mq support.
2415	16398766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16398766	laanwj	You seem to be completely misunderstanding me 1) I know why you added the usleep, so my suggestion is to use a "blocking read" for the same time instead of an usleep (which doesnt process messages when they come in). Not an unbounded blocking wait, of course, that would indeed make it impossible to exit the client. 2) I agree with "allow it from trusted sources only". How does this work? Is there some form of access control at all? Or can everyone on localhost connect to it by default? 3) I understand that. My suggestion is to make it possible to compile with USE_ZMQ=1 but disable zeromq, so that it is possible to compile binaries with zeromq support compiled in, distribute them, and leave it up to the user to enable it or not. Enabling it should not only depend on a compile-time option.
2415	18693102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693102	jgarzik	Agree with comments. Lets go those addressed, and get this merged.
2415	18779696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18779696	doublec	Would it be faster to split this into two pull requests? The first to do the pub/sub notifications of transactions, blocks and ip addresses. The second for the zmq based RPC server. The reason for splitting the latter is there is likely to be much discussion over authentication which would bog down the acceptance of the notification patch, Ive been using my own zmq patch for notification of blocks in my mining pool which works very similar to this one and it has been operating well for the past couple of years.
2415	21090391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090391	luke-jr	Are you going to fix this up?
2415	23221167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221167	jgarzik	Ping Also, ping in case you are motivated to split this up, and get 0mq support moving again.
2415	23482490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23482490	laanwj	Splitting it into two sounds like a good idea. I suppose the notifications can be unauthenticated.
2415	26688588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688588	gavinandresen	Closing this because of inactivity. If you have time to rework this so it merges cleanly against the current tree, please open a new pull request (and link to the discussion in this closed request, if it is relevant).
2414	15523820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15523820	Diapolo	Any comments on this are welcome :). While Im on it should I also update or look after zlib, libpng and miniupnpc?
2414	15524417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15524417	Diapolo	Seems libpng also has some security problems in 1.5.9: zlib seems to be safe, but there is also a 1.27. miniupnpc is up 2 versions: May 2012 : release of MiniUPnPc-1.7 and MiniUPnPd-1.7. More work on IPv6 and IGDv2. MiniUPnPd now implements WANIPv6FirewallControl. February 2013 : release of MiniUPnPc-1.8 and MiniUPnPd-1.8. Improvements to UPnP standards compliance, especially when MiniUPnPd is compiled with the UPNP_STRICT config option. For better security, HTTP peer and SSDP source IP are checked to belong to a LAN. It should help to avoid SSDP and SOAP services to be exposed to the internet.
2414	15534718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15534718	gavinandresen	Can one of you please setup a gitian build environment (VirtualBox works nicely now) and test?
2414	15534845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15534845	gavinandresen	Also: itd be great if we could get people to volunteer to review the changes to our dependencies; after all, it is theoretically possible that somebody could try to slip through a patch in something we depend on intended to compromise bitcoin, since everybody knows our dependencies.
2414	15572532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15572532	Diapolo	Is there a more recent version of available or shall I try to use that to setup a Gitian box? ping :)
2414	15672706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672706	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2414	16287682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16287682	luke-jr	The boost 1.53 update doesnt build:
2414	16335199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16335199	Diapolo	I have no idea what ``Error: junk at end of line, first unrecognized character is `m`` means, can you help?
2414	19912312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912312	jgarzik	Closing. Feel free to reopen after verifying that it works across all supported platforms.
2411	15372941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15372941	petertodd	ACK for the technical changes. Tested on mainnet and testnet and peer finding works as expected; with the DNS seeds disabled the pnSeed table finds a seed correctly so I dont think you made any mistakes. If we do this we should create a pnTestnetSeed table. I also like the suggestion that came up on IRC of making an addnode UI eventually. Strange, it must be dusty in here or something...
2411	15374918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15374918	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2411	15632653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632653	laanwj	ACK
2411	15632789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632789	gmaxwell	ACK.
2410	15375487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15375487	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2410	15379745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15379745	Diapolo	How can I start aggressive mode? Or is the client doing this for me, if "normal" mode fails?
2410	16020543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020543	sipa	This is one change for which Id like to see a test plan, and what behaviour changes compared to before...
2410	16712554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16712554	sipa	It seems there are several issues with salvaging wallets, and some can perhaps be fixed. This may seem pointless, as we want to move away from BDB for wallets anyway, but well still need conversion tools (either built-in, or as separate applications) that can reliably import wallets. First of all, were not dealing at all with environment errors, which actually seem to be the most common. As wallets are detached from the env at shutdown anyway, they really serve no purpose except crash recovery. And even when the detaching failed, almost always the actual data is written to the wallet file anyway. If opening an environment fails, I wonder whether we can just play safe, and delete database/* before trying anything else. In addition, I think the database dir could just be deleted after a clean detach of the wallet too. That would reduce problems when files get moved without their environment. Then regarding the wallet database file itself, Ive frequently seen people who were unable to open their wallet file, while a simple db4.8_dump old.dat | db4.8_load new.dat fixed the problem completely. That suggests to me that we should try the salvaging code, without removing all transactions, and only when importing fails or corrupted keys are found, do an implicit rescan. Even then, Im not sure theres a need for completely resetting the other entries.
2410	17433720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17433720	sipa	Ok, Ive only tested this superficially, but the worst case side effect seems to be continuing a salvage operation that would fail anyway. ACK.
2409	15362000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15362000	jgarzik	ACK
2409	15376090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15376090	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2409	15386672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15386672	sipa	Dont merge this yet; an instance of this segfaulted for me.
2409	15600195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15600195	sipa	Ok, fixed an obscure bug: ProcessMessages (while holding cs_vRecvMsg) sometimes calls PushMessage, which since Jeffs patches sometimes calls SocketSendData, which can fail and cause the connection to be closed. Closing the connection however wipes vRecvMsg... while ProcessMessages is still iterating over it, invalidating its iterator, and eventually trying to remove the entries it already processed, causing a double free. Seems to be running smoothly now.
2409	15664665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15664665	sipa	Added a commit, which breaks up the processing of getdata requests when the send buffer size limit is exceeded. This results in far smaller send buffers being allocated for peers downloading blocks from us, and doesnt seem to have a noticable impact on performance/bandwidth (I can still download blocks from my VPS running this, at ~6 MiB/s, same as before).
2409	15673076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15673076	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2409	15677693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15677693	sipa	can you put a link to the patches applied for pulltester in the produced message?
2409	15678324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15678324	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2409	15679006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15679006	TheBlueMatt	Updated the message, it now links to
2409	15683135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15683135	mikehearn	Im testing this+Matts patches now - 231 connections with only 193mb RSS. Pretty fantastic results. Before this my node was running out of memory in less than 24 hours.
2409	15685427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15685427	TheBlueMatt	This plus other recent network pulls has been stable for many hours under high load (150-200 connections). ACK
2409	15782698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15782698	Diapolo	Is there a 0.8.2 planned in the near future? What will be in, was that yet decided?
2406	15376955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15376955	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2406	16020529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020529	sipa	Sounds like the compiler is quite broken in this case... I prefer not messing with the leveldb config script too much. If its accepted upstream, no problem of course.
2406	16022590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16022590	sander-kleykens	Yes, ultimately its a gcc issue. One that appears to have been resolved in newer versions. Its also pretty easy to work around the issue by simply building the project as a user that cant remove /dev/null. I only came across the problem because FreeBSD requires, by default, root privileges when building a port in the ports directory. Ill just notify the port maintainer.
2406	16025317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16025317	robbak	And thats me. I saw your bug report, and decided Id look into it when I next get it updated. Ill check how the leveldb port handles this and copy their patches, I think. What is the schedule for the 0.8.2 update? On 8 April 2013 06:03, Sander Kleykens <notifications@github.com> wrote: > Yes, ultimately its a gcc issue. One that appears to have been resolved > in newer versions. > > Its also pretty easy to work around the issue by simply building the > project as a user that cant remove /dev/null. I only came across the > problem because FreeBSD requires, by default, root privileges when building > a port in the ports directory. Ill just notify the port maintainer. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2406#issuecomment-16022590> > . >
2406	19912219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19912219	jgarzik	Closing. (1) Dont build with root, thats insanely dangerous. (2) Sounds like this issue is already fixed upstream, and will be pulled in via leveldb update. (3) An issue external to us.
2403	15328267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15328267	gmaxwell	Id thought about doing recently but concluded that since there was a lot of transaction pressure that lowering a fee wouldnt help users. But I checked and at the moment the mean and median blocksizes are around 130k and there are a lot of free transactions.
2403	15328550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15328550	gavinandresen	ACK. At current price of $70/BTC, thats $0.007 per kilobyte, which is reasonable. If the price crashes before next release, we should re-visit this. I really want to get rid of hard-coded fees soon, though. The memory pool should be size-limited to a small multiple of the recent median block size, the include-in-mempool rules should be the same rules as the include-in-a-block rules, and the relay rule should be "only relay it if it makes it into the memory pool."
2403	15332353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15332353	petertodd	ACK This will make my timestamper a lot cheaper to run.
2403	15348877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15348877	qubez	A better patch if you arent going to call the pull request "Change minimum fees to 0.0001 BTC": +static const int64 MIN_RELAY_TX_FEE = 50000; Disclosure of S.DICE interests by a certain MH and other bloat lobbyists would allow detection of individual profit motive before any further implementation of a tragedy of the commons. Spam rules should not be "6MB of spam an hour allowed at any price. A user interface recommending an elevated fee based on network activity (and setting the minimum fee to apply to all transactions) would be prudent before further mucking with fees, relay rules, block sizes.
2403	15349268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15349268	gmaxwell	While I share your concerns, you may note that the current most conspicuous bloat sources are paying more than 0.0005 BTC in any case. What youre asking for would just upset people who do not understand these concerns and would not differentiate traffic. I also agree with the UI recommendation path, but it appears that at this time changing the behavior here should be harmless e.g. doesnt make anything worse. Its a one byte change.
2403	15349453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15349453	qubez	>> "Its a one byte change." Its just an 80% fee discount on a company that uses 80% of the blockchain. Dont expect that people wont change to the minimum when MIN_TX_FEE is what Bitcoin includes by default. To clarify, if everyone else is paying 0.0001, then why bother paying more; 0.0001/KB fees will get your transactions in. This patch IS effectively reducing the minimum fee, with no justification of why this is a good idea. I was going to support these assertions by demonstrating how fast fees dropped after 0.3.24 and block ~140000, but hardly any transactions were paying fees anyway due to priority > 57M being commonplace - people werent sending new inputs to a gambling site dozens of times an hour.
2403	15349544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15349544	gmaxwell	What the network imposes is min _relay_ fee, which is unchanged here. The users you are concerned about do not run bitcoind, and do not care what MIN_TX_FEE is because its not imposed on the network. (and, as I mentioned, they are already paying more than MIN_TX_FEE in any case, because their software is stupid and cant cope with fee/kb and forces them to pay a static fee large enough for the largest txn they would create)
2403	15377477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15377477	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2403	15402387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15402387	petertodd	re: S,DICE while its true that they are using software that cant calculate per-kb fees properly, remember that they were initially paying a 0.5mBTC fee on every transaction and later upped it to 1mBTC. To me that says theyre paying the fees they do to have a competitive bid for limited block space more than anything else, and are just being a bit lazy on the per-kb aspect of it. That said, there is a short-term problem with changing MIN_TX_FEE, which is that its used in GetMinFee(), called by CreateNewBlock(), to determine eligibility for tx inclusion in a new block. How much hashing power will accept these new fees right now?
2403	15404860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15404860	gavinandresen	The relevant CreateNewBlock code is: // Fee-per-kilobyte amount considered the same as "free" // Be careful setting this: if you set it to zero then // a transaction spammer can cheaply fill blocks using // 1-satoshi-fee transactions. It should be set above the real // cost to you of processing a transaction. int64 nMinTxFee = MIN_TX_FEE; if (mapArgs.count("-mintxfee")) ParseMoney(mapArgs["-mintxfee"], nMinTxFee); ... so asking some of the big pools if they will run with -mintxfee=0.0001 before pulling this is a good idea.
2403	15406100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15406100	gmaxwell	::sigh:: For some reason I thought changing mining criteria to be MIN_TX_FEE instead of min_relay_fee got NAKed. I suspect that there is a some amount of mining happening with the lower setting, since there are many transactions meeting that criteria, but its hard to tell. If so, that makes this pull much less of an obvious win.
2403	15406417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15406417	qubez	I just sent out 0.0005 -> 0.0004 + 0.0001 fee at 17:00 UTC to five nodes, well see how many blocks this doesnt make it into as anecdotal evidence of the default user experience expected from this pull: f996fc4ec5bc8ae92d15ce18530f827095b370bd3bbc4a4ff1a885f52fbad64c - transmitted with 1216 and 1MB of other unconfirmed transactions pending. The answer: 15 blocks - 227995 by BTCGuild
2403	15406999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15406999	petertodd	If anything it basically says the pull itself isnt whats required, its talking to the pools. Ive already told bithits and similar people if they want theyre low-value transactions mined, the network will relay them, so ask a pool to change their defaults and accept their transactions. Look at it this way: if a miner fills a block to the 1MB limit with 0.1mBTC/KB transactions, that nets them just 0.1BTC of fees. Why risk orphaning your $1875 subsidy for the sake of $7.5? For that matter, why waste a bunch of expensive skilled labor doing the analysis to determine if thats a good trade-off?
2403	15748001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15748001	rebroad	Where does the $1875 come from?
2403	15989611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15989611	sipa	25 BTC subsidy * exchange rate
2403	16020487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020487	sipa	ACK
2403	16032737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16032737	jgarzik	ACK
2403	16105971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16105971	qubez	This has been ack ackd and merged, but I think it needs one more thing - the default voluntary fee, if no command line, config, or options dialog has been set, should be set to 0.0005. This restores todays operation as default, while allowing reduction for those who will understand the effect of sending with a lower fee. This will also fix a problem that has been posted on the forum, allowfree transactions are now taking hours due to limited free transaction space and block competition; a fee is no longer dust spam discouragement, its a near-requirement for block inclusion. main.cpp: // Settings -int64 nTransactionFee = 0; +int64 nTransactionFee = 50000; However, the send dialog does not indicate the voluntary fee, it should before mucking with things. It looks like the easiest would be another argument in sendcoinsdialog.cpp to show transaction fee too (but Im no coder to be able to find where to get the Per KB transaction fee; it looks like its not calculated yet at this point): ![transfeesimple](https://f.cloud.github.com/assets/1425520/356345/e3231a3e-a102-11e2-8025-dee27511d592.png)
2403	16115204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16115204	gmaxwell	> the default voluntary fee, if no command line, config, or options dialog has been set, should be set to 0.0005. This restores todays operation as default, That is most definitely not the behavior prior to this patch.
2396	15303885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15303885	laanwj	ACK
2396	15377936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15377936	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2393	15254099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15254099	r000n	Updated
2393	15270128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15270128	Diapolo	Ill compile these patches tomorrow and try everything, thanks for updating :).
2393	15284338	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15284338	Diapolo	I tried them and they work, I just want to mention one more thing with the Window geometry. You are writing the setting when the destructor of BitcoinGUI is called. So when one wants to reset the Window position it is not possible to use the Options reset button, as the destructor call comes after and overwrites the cleaned settings with the modified Window position. 2 options: a) Dont use the destructor but perhaps an event filter. b) Modify the Options reset to also reset the Window position to the center of the screen to have initial defaults.
2393	15304147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15304147	laanwj	I agree with these changes. One question though: what happens if the window coordinates in the settings get corrupted so that they are outside the screen area? This may sounds like a weird concern, but I had this problem once with an application that started on the second monitor, which was no longer there. There was no way to get at it anymore and it took me a while to figure out what was happening.
2393	15331700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15331700	r000n	In worst cases window will attached to screen corner (position corrupted) or maximized (size corrupted)
2393	15331985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15331985	r000n	Window should be changed before it becomes visible. So these settings are "special" and separated from others. Im not sure that user want reset window size when pressing on Reset . For me, for example, its will an unexpected behavior
2393	15332790	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15332790	laanwj	I agree that resetting the window position when pressing Reset is not really necessary, people can always move the window to where ever they want anyway. Its also very hard to solve; moving saveGeometry call to another place than the destructor for example will not solve it, as long as it is still called every time the application quits.
2393	15334703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15334703	Diapolo	ACK
2393	15378391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15378391	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2387	15378934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15378934	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2386	15158293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15158293	L2G	Ive built this in Mac OS 10.7.5, but Im afraid I cant see any visible effect it has. Im going to poke at it a little more, though.
2386	15160312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15160312	Nerzahd	Do you right click on the icon? Should look like ![Ohne Titel](https://f.cloud.github.com/assets/901234/279445/260e8f36-9127-11e2-9391-72b13e88c2ea.png)
2386	15160699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15160699	Diapolo	So you say it is working with this patch? Or was that just a screen from when it worked ^^.
2386	15161000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15161000	Nerzahd	yes. it works with your patch.
2386	15171360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15171360	Diapolo	Thanks for testing :). Seems we have a working patch now, can you review?
2386	15181521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15181521	L2G	I was confused, sorry. Still learning Qts terminology as it relates to Mac OSs terminology, so I mistakenly thought the "tray icon menu" would be associated with the menu-bar icon and not the dock icon. But since the menu-bar icon is `#ifndef`d right out of the build at present, I dont know why I thought that. Well, here, just in case someone cares whether more than one person could make it work. :smile_cat: ![dock icon menu](https://f.cloud.github.com/assets/106988/281168/5f8468aa-9170-11e2-8a5f-a0e6d08c433b.png)
2386	15305739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15305739	laanwj	ACK
2386	15379498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15379498	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2386	15379699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15379699	Diapolo	Does this collide with the GUI refactoring, if no we should pull this now :). Edit: ping ^^
2386	15675206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15675206	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2385	15136181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15136181	petertodd	We really need a -setalertkey option to use a non-standard alert key for testing, along with tools to create alert messages. Make CAlert::CheckSignature() use a single pszAlertKey and then set that key appropriately at startup, as well as have a contrib/alerts directory with some simple Python scripts to create alerts. Itd let the unit tests include actual alerts with a known testing key too.
2385	15137036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15137036	gavinandresen	: good idea. That can be done in a subsequent pull. Reworked/rebased to whitelist the characters in the alert message, as suggested by
2385	15137152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15137152	jgarzik	ACK, though I wonder about the conditions of when fThread is true or false (and alertnotify will be in a free thread, or not)
2385	15138666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15138666	gavinandresen	fThread == false was implemented just so the unit test doesnt have to Sleep() and keep its fingers crossed that it waited long enough for the thread to finish. Normally fThread is true, so the main event processing loop doesnt wait.
2385	15235387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15235387	mikehearn	You should mention it in the warning thats printed if you dont have a bitcoin.conf (with a username/password). That way people who are setting up Bitcoin for the first time are guaranteed to see it and consider using it.
2385	15380079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15380079	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2385	15632907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632907	laanwj	ACK
2384	15141544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15141544	Diapolo	Makes sense and good thing is your patch doesnt cause the need to re-translate :).
2383	15089759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15089759	paraipan	Needed feature, Bitcoin developers please review.
2383	15090826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15090826	gruez	DO WANT even if we need to make it a .conf option, this will be much better than manually patching the client with each build.
2383	15092875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15092875	PartTimeLegend	I love you! No homo.
2383	15101191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15101191	petertodd	NAK Dont encourage censorship based on where Bitcoins are going rather than the technical details about how they are being transferred. My patch is an example of a way to approach the issue based on politically neutral technical metrics rather than singling out any particular entity. A "dust limit" is fine. Building ways to block specific addresses into the client itself isnt. Additionally any "dust limit" should be written in a way that the behavior is predictable; end users are harmed when they dont have any idea what the dust limit might be set to.
2383	15102440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15102440	ghost	Address filtering is a DEFINITE no. Do not forget that addresses are disposable.
2383	15147695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15147695	luke-jr	Looks good visually and functionality-wise. Ill have a look at the code when I get home.
2383	15152130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15152130	Amarite1	Definitely needed as part of the client!
2383	15152341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15152341	gruez	I dont see whats wrong with giving people a *choice* to ignore transactions. Anyone can implement their own address filtering by editing the source code, so what do we gain by adding a technical barrier?
2383	15182536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15182536	petertodd	Including such a mechanism in the official Bitcoin reference client implies we support censorship; an obvious extension of this patch is supporting automated blacklists.
2383	15183280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15183280	gmaxwell	"Anyone sufficiently motivated could build a chemical weapon, what do we gain by not equipping every adult with one?" Having to modify the software gives people enough friction to think over their change. Not just "I should do this because some website said to click here for awesomeness". ... though my level of horror at this pull request is somewhat tempered by the fact that its easily avoided by someone using Bitcoin properly (not reusing addresses). Still, NAK. Its also worth noting that inconsistent forwarding rules created by the dust setting makes it much harder to write reliable wallet software... since the software doesnt actually know when its peers are going to forward the transaction or not (and your peers dont tell you when they dont). Ultimately wallets will need to deal with that, but they dont currently. Id prefer to see a pull request that depriortizes all address reuse, as that will allow reusers with standing relationships to opt into lower priority handling and it encourages blacklisting resistant behavior in our ecosystem.
2383	15632861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632861	laanwj	GUI looks good. But NAK on the filtering. This is a censorship measure, and an ineffective one at that.
2383	15638914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15638914	paraipan	I beg to differ I dont understand your point in not letting me control my own resources. Did someone put you there to decide over what bitcoiners have to have in their client software?
2383	15642602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15642602	paraipan	Lets see what the community has to say about this
2383	15673850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15673850	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2383	17148336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17148336	gmaxwell	We wont be adding any blacklisting functionality at this time. There are some other active pull requests on dust relay limiting which should generally address the rest of the concerns here. Thanks to all involved to actually putting code on paper and making a concrete proposal.
2383	17515284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17515284	paraipan	
2383	18966168	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18966168	paraipan	This patch is a potential solution to MAX_BLOCK_SIZE limit give it permits Bitcoin users to ignore spam transactions under set limits.
2378	15043953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15043953	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2378	15082983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15082983	Diapolo	and other core devs: I dislike the fact that we release versions with unfinished translations, IMHO our release process should cover these things much better. Id like to vote for a central place where a release schedule is maintained, so that I can sync these translation update pulls with them. If we want our client to become (even more) widely accepted, we should at least cover 100% of the "main" supported languages. We should even consider to drop translations below a certain percentage of completeness. Im fine with emergency releases, that need to get out the sooner the better, but even 0.8 didnt have full german translation coverage for example.
2378	15083768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15083768	sipa	v0.8.1 is branched directly from v0.8.0, and not from git HEAD. It has only 4 commits and no changes to translatable texts. In general, I agree with your comment about a better process for translations though, but I really dont have the time to work on that.
2376	15028387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15028387	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2376	15040487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15040487	laanwj	That link says that _FORTIFY_SOURCE is a glibc feature; and glibc library is only used on Linux. So this is pretty much a no-op.
2376	15041209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15041209	Diapolo	Really? I tried to websearch it and found it in quite a few obviously Windows based open-source programs.
2376	15088268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15088268	Diapolo	``Use of this macro requires compiler support, available with gcc(1) since version 4.0.`` Hmm...
2376	15089054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15089054	gavinandresen	gcc header files on my mac do have #if _FORTIFY_SOURCE .... so it is gcc, I think, not just gcc on Linux. So ACK from me on pullling this; an extra #define wont hurt if youre compiling with something other than gcc. Would be nice to add a comment explaining that _FORTIFY_SOURCE is a gcc-compiler-specific thing so we dont have this discussion again.
2376	15099572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15099572	Diapolo	I updated the comment to reflect its GCC compiler-specific.
2373	15013306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15013306	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2373	15013608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15013608	gavinandresen	Pull-tester is upset because it creates a block (b39) that violates the new rule (it fills the block up to 1MB with abnormally tiny transactions that have scriptSig OP_1 and scriptPubKey OP_1). : easiest fix, I think, would be to have pull-tester create blocks with timestamps from the past.
2373	15015520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15015520	luke-jr	4,500 txids can easily break pre-0.8 clients if theres even a 1 block deep reorg, right? Since it isnt for very long, might it make sense to use a lower limit? (If this has already been discussed and resolved in my semi-absense, just let me know and Ill drop it)
2373	15015587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15015587	gavinandresen	No, not easily, because most transactions are duplicated between the two legs of most forks. Longer forks are a risk, but are (happily) rare.
2373	15015628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15015628	luke-jr	AIUI... even if both competing blocks were EXACT duplicates in terms of included transactions, they would still get a pre-0.8 node stuck in a reorg if the conflict-resolving block contained even as few as 165 transactions...?
2373	15015750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15015750	gavinandresen	I dont believe so: sipas re-org code tries to resolve the conflict using as few blocks as possible. Pre-0.6? 0.5? (I forget when the re-org code got smarter about making smaller transactions) nodes may get stuck; that is a good reason for them to patch or upgrade or workaround sooner rather than later.
2373	15018286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15018286	petertodd	> I intend these three commits, applied on top of the v0.8.0 tag, to be the 0.8.1 release. Whats the third commit?
2373	15024559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15024559	luke-jr	A 1-block-deep reorg requires 3 blocks in a single commit (not 100% sure on the last one): 1) undo stale block, 2) apply winner block, and 3) apply conflict-resolving block
2373	15026573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15026573	gavinandresen	: third commit just bumps version numbers to 0.8.1, I removed it from this pull only because it doesnt merge cleanly with git HEAD. : deep re-orgs are definitely a theoretical problem, but we have to weigh two months of chronic unconfirmed transactions if we set the block size too small versus coddling people/services who wont upgrade or set their DB_CONFIG. Based on IRC conversation, I think the right thing to do is recommend setting DB_CONFIG for 120,000 locks instead of 50,000, although even that will cause problems for people running on low-memory VPSes. But they should upgrade to 0.8 anyway to get much better performance...
2373	15027297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027297	luke-jr	I doubt 2,000 txids would cause much unconfirmed transactions, but whatever. ACK 120k locks DB_CONFIG, but think perhaps we should give a simple formula so admins can make their own informed decision. Obviously upgrading to 0.8 is the way forward, but a lot of people still have custom patching that may take a while to adapt.
2373	15034822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15034822	rebroad	Re the plan, I understand the 1st bullet point, but not the 2nd.. What is the reason for the 2nd please?
2373	15035036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15035036	gmaxwell	Yea, the pulltester test was designed to trigger this case, I suppose it should be switched to do two such blocks, a must accept with a past timestamp and a must reject with a timestamp that triggers this rule.
2373	15041654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15041654	Diapolo	When is 0.8.1 scheduled? Im asking, because we should update translations, if there is time left.
2373	15141700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15141700	Diapolo	If these are IN 0.8.1 why not merge it to current head?
2373	15143785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15143785	gavinandresen	Closing; I cherry-picked the final 0.8.1 versions of these.
2366	14883520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14883520	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2366	14885662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14885662	gavinandresen	You should just remove setAddress entirely. NACK on doing it that way though, it violates the JSON-RPC standard: Section 2.2 : "...names within an object SHOULD be unique."
2366	16317635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317635	sipa	Closing until a JSON-compliant solution exists.
2364	14865140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14865140	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2364	15270347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15270347	Diapolo	As long as this consists of that many commits Im rather sure no core dev will give you an ACK, so you should squash everything into one commit.
2364	15362226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15362226	gavinandresen	RE: "Is there a good reason not to implement this?" The attitude for the core client is the the opposite: Is there a good reason TO add this? Unless you have a compelling use case for this, Id rather leave it out. Less is generally better, less code to review for security issues, fewer bugs, ...
2364	15362669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15362669	gmaxwell	Can you walk me through what problem this solves that isnt solved equally well by just polling once a second (to a few seconds)?
2364	15368712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15368712	jgarzik	Per-tx events are going to average at least once per second. For this patch -- yuck -- you are continually running new OS processes. It is far more efficient to combine stock bitcoind with if you simply want to see all transactions that are accepted (and relayed) by bitcoind. Therefore this patch and polling are both the wrong solutions IMO.
2364	15369061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15369061	gmaxwell	My point about polling was that new transactions are coming in at more than once per second, so simply polling every few seconds will be less work, no dos exposure, and can still give acceptable responsiveness.
2364	15674169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15674169	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2364	15953334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15953334	Bobalot	I guess youre right, launching a new process is a terrible thing to do on every transaction. This was really just an ugly hack, having found mini-node it seems using that would be a much easier and safer way to achieve what I wanted. it isnt really a good idea to implement this, but the same can be said for -blocknotify and -walletnotify, if they only create further code to review. youre right this would be easier by polling, but ive found using pynode is even easier.
2364	15985502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15985502	sipa	Yes, I consider -blocknotify and -walletnotify also borderline ugly and inefficiently, but this is just too resource-intensive for what it gains. The 0mq support could do things like this much better, imho.
2364	16317662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317662	sipa	No consensus, closing.
2361	14828290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14828290	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2361	14828339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14828339	Diapolo	With fontsize 13 it is consistent with what other elemts? Sorry I dont get it ^^.
2361	14883204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14883204	L2G	"Wallet" at 11 points was smaller than "Recent transactions" at 13 points. It seemed like a typo, and when I changed it to 13 points, it looked nicer to me. I can post some before-and-after screenshots. (Not sure why I didnt, to be frank and honest.)
2361	14890989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14890989	Diapolo	Would be nice to see your screenies, as I seem to see something different :).
2361	14945128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14945128	laanwj	I think the problem is that "Wallet" has a fixed font size, whereas "Recent Transactions" has not. So, depending on your system font size, it may be either larger or smaller. Hardwiring it to 13 is not a general solution either. Maybe remove the font size override for wallet completely?
2361	14945894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14945894	Diapolo	Im also for removing that special casing there. Perhaps its sufficient to leave it just bold then.
2361	14947096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14947096	laanwj	Fine with me too. Or maybe a relative font size that is specified in em will work, like in CSS? Ie being able to say "I want this 1.2 times bigger than normal letters" would be nice.
2361	14987675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14987675	L2G	Im happy with all of these ideas. I didnt realize "Wallet" was being set to an absolute size while other text was being set to a relative size. As the ticket title indicates, "consistency" is the key! :smile_cat:
2361	15151243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15151243	L2G	Heres the problem I was originally trying to fix. Note how "Wallet" on the left is smaller than "Recent transactions" on the right. ![Screen shot demonstrating the original problem on Mac OS](http://i.imgur.com/Csftn0p.png)
2361	15151714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15151714	L2G	By the way, Im looking at this in the design window in Qt Creator 2.6.2, and it looks like both labels specify a fixed point size. Moreover, I dont see how its possible to define relative sizes. Im still very much a rookie with this Qt stuff, so your patience and understanding is appreciated. :grin: Im just trying to help out from the Mac side.
2361	15305911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15305911	laanwj	If there is no way to set relative sizes (I dont know of one, either) I recommend removing all explicit font sizes from the xml. Setting absolute sizes is a bad idea these days.
2361	15378100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15378100	L2G	Sounds like there is a bigger discussion to be had here, with a broader scope than what this ticket covers.
2361	15379683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15379683	Diapolo	IMHO we can pull this if you just remove ``<pointsize>11</pointsize>`` from the .UI file instead of changing it to 13 :).
2361	15440769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15440769	L2G	OK, or I could create a new branch so you dont have an extra, vestigial commit in there.
2361	15441152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15441152	L2G	Heres how it looks on Mac without a font size specified for the "Wallet" label: ![No font size for "Wallet"](https://f.cloud.github.com/assets/106988/301403/a6a7e01c-95d1-11e2-80a8-0f4d803f21d3.png)
2361	15443139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15443139	Diapolo	You can squash the 2 commits into one, so that you dont need to create a new branch. Use ``git rebase origin -i`` when you are on this branch. You will then see the 2 commits an can replace ``pick`` for the first with ``reword`` and ``pick`` for the second with ``squash``... just save then and edit the commit-msg and do an ``git push origin YourBranchName -f``. Edit: Is there no text on that progressbar on Mac? Never or just in your screenshot?
2361	15506034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15506034	Diapolo	If it is easier for you to create a new branch just do that and reference this old pull in the Github description of the new pull :).
2361	15567735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15567735	L2G	are you talking about the progress message that says "Processed X blocks of transaction history"? That doesnt show up for me unless I hover over the sync status indicator in the lower-right corner; then it shows up as a tool tip.
2361	15572452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15572452	Diapolo	I was talking about the text on the blueish progressbar, which should read something like "x blocks remaining". Is that uncommon on Mac to have text on progressbars?
2361	15572459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15572459	Diapolo	ACK
2361	15590216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15590216	L2G	I think its pretty uncommon. I dont know whether its failing to show up because Qt wont do it or because someone just commented it out with `#ifndef Q_OS_MAC` like they did with the system tray icon ("status menu icon" in Apple parlance). Id have to do some digging. I have another idea for something to do with the progress bar anyway, so we could continue that discussion in that future ticket where itll be more on topic. **UPDATE:** See my new comment under #2103.
2361	15674556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15674556	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This is an automated test script which runs test cases on each commit every time is updated. It, however, dies sometimes and fails to test properly, if you are waiting on a test, please check timestamps and if the test.log is moving at and contact BlueMatt on freenode if something looks broken.
2357	14848430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14848430	gavinandresen	Rebased, and added -rpcthreads to --help output. But the SIGTERM handler is not working properly, which is why the pull tester is upset...
2357	15148140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15148140	Diapolo	I really like the reduced complexity of the code, I didnt test it out yet though.
2357	15200339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15200339	gavinandresen	I cant reproduce the pull-tester issue in an Ubuntu VM, but I did fix a compiler warning.
2357	15204077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15204077	Diapolo	Lets see what pull-tester is doing now, seems the old entries are gone and I wanted to also take a look :).
2357	15311905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15311905	jgarzik	ACK (with some inline minor nits mentioned)
2357	15328020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15328020	sipa	I really like this change (except the polling to check whether someone interrupted... i wonder if one can call a condition variables notify in a signal handler...). I havent gone through the code in detail, but I see nothing terrible. Ive tested both bitcoind and bitcoin-qt under valgrind, with several ways of causing exit. All seems good.
2357	15330882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15330882	denis2342	I tested it under OSX 10.8.3 with a command line build of bitcoind and it does not stop when I send the "stop" rpc command.
2357	15341449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15341449	gavinandresen	There is definitely a bug with the signal handler / RPC stop on OSX at least, if I try to stop shortly after startup the "stop" get swallowed and further stops have no effect.
2357	15348823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15348823	gavinandresen	Fixed two issues, and made one improvement: 1. Running -daemon, the shutdown detection thread was being started before the fork(). Oops. I moved the -daemon code to run earlier, in AppInit() (which has the added benefit of simplifying the code a bit). 2. A request to shutdown during AppInit2() startup could get lost. I fixed that by making the detect shutdown thread run and repeatedly interrupt the main thread group until it, itself, is interrupted. Improvement: Simplified the Qt code by using a QTimer to look for fRequestShutdown getting set, instead of the more complicated boost signal --> slot --> Qt signal --> slot.
2357	15635977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15635977	denis2342	on freebsd I needed to the add boost_timer lib to the linker
2357	15648266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15648266	denis2342	right now I got this while closing with "stop": Assertion failed: (!pthread_mutex_lock(&m)), function lock, file /usr/local/include/boost/thread/pthread/recursive_mutex.hpp
2357	15651219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15651219	gavinandresen	: when you say "right now", do you mean with this patch or without it?
2357	15672363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672363	denis2342	yes, with the patch. sorry for the delay, I am on the road. denis Sent from my iPhone On 29.03.2013, at 18:29, Gavin Andresen <notifications@github.com> wrote: > : when you say "right now", do you mean with this patch or without it? > > > Reply to this email directly or view it on GitHub.
2357	15689983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15689983	sipa	No, Sleep() (as opposed to sleep()) was an own function in util.cpp that takes milliseconds as argument. Im in favor of renaming it to MilliSleep() to reduce confusion.
2357	15690227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15690227	laanwj	Yes, agreed. This is certainly an improvement in naming, then.
2357	15739635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15739635	gavinandresen	Squashed a few commits, rebased, and changed unsigned constants from u to U. Im still puzzled as to why shutdown isnt happening immediately on the pull-tester machine, I cant reproduce that problem on either my Mac or a debian VM. Ill debug directly on the pull-tester machine next.
2357	15778996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15778996	denis2342	got it again with the latest changes while using "stop": > ./bitcoind stop Bitcoin server stopping > Assertion failed: (!pthread_mutex_lock(&m)), function lock, file /usr/local/include/boost/thread/pthread/recursive_mutex.hpp, line 105.
2357	15784574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15784574	gavinandresen	can you run under a debugger and get a call stack for that assertion? Im guessing something is being called after main() exits, but Im just guessing...
2357	15851107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15851107	gavinandresen	Sigh. That took way too long to figure out. Boost 1.40 (running on pull-tester) versus 1.53 (running on my machine) difference; boost 1.40s thread_group cannot interrupt_all() if another thread is waiting on join_all(). Ill rework the code to be boost 1.40-compatible.
2357	15863195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15863195	Diapolo	Why are we supporting such an ancient Boost version anyway? I dont get that :).
2357	15874183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15874183	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2357	15875391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15875391	gavinandresen	Im going to pull this, I suspect is seeing the same intermittent crash-at-shutdown problems that we saw before on OSX (or are you seeing them on freebsd?)
2352	14706315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14706315	Diapolo	NACK, it was my intention to have the current alignment, as OpenSSL is used as part of the client and shouldnt ne aligned to client version.
2352	14748821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14748821	gavinandresen	Agree NACK: I like Before better.
2351	14674419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14674419	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2351	14674878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14674878	gavinandresen	Needs unit tests and a thorough test plan. If you want this to be pulled, youll also need a user-friendly discussion of what this changes and how it affects SatoshiDice, how it affects users who might already have coin dust in their wallets, etc. Or, in other words: writing the code is the easy part...
2351	14675031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14675031	petertodd	Oh, frankly Im surprised you think the issue is settled enough to be writing that stuff at that stage; I wasnt expecting this to be anywhere close to being pulled yet.
2351	14675100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14675100	gavinandresen	If it isnt anywhere close to being pulled, why did you submit it? I dont like "Pull Request As A Forum For Discussion" ...
2351	14675116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14675116	gavinandresen	(oh, WHY I dont like pull-request-as-a-forum-for-discussion: because it make my job harder, and wastes people time reviewing code that may never have a chance of being pulled)
2351	14675263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14675263	petertodd	Oh, I see you just want pull-reqs saved for code that has already had the initial discussion about it specifically done elsewhere; the pros and cons of the basic idea and varients have been discussed endlessly elsewhere.
2351	14675333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14675333	gavinandresen	Closing; please re-open when this is ready for pulling into mainline.
2351	16089443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16089443	jgarzik	Recent data spam seems to make this worth revisiting, and re-opening.
2350	14660451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14660451	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2350	14761166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14761166	comboy	Ive been waiting for this one.
2350	14762301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14762301	laanwj	ACK, good catch
2349	14639738	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14639738	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2349	14748806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14748806	gavinandresen	ACK
2349	15985558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15985558	sipa	ACK; needs a rebase, though.
2349	15993643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15993643	Diapolo	What about ``-rpcthreads``, does this make sense there too? Or for ``-genproclimit`` (which seems missing from our help message in init.cpp?)?
2349	16317722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16317722	sipa	As long as we dont have good lock isolation, RPC processing is effectively single-threaded anyway. I dont even think theres any good reason for more than 2 RPC threads right now.
2349	16322940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16322940	Diapolo	AFAIK we currently use 4 RPC threads as default ;). I just was asking if these changes could be valuable for other thread-related command-line parameters also.
2349	17165571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17165571	dserrano5	Re "needs a rebase", am I supposed to do that? (my knowledge of git/github is pretty basic still)
2349	17180931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17180931	dserrano5	Ok, did the rebase, with help from
2349	17181063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17181063	sipa	Thanks. If you can squash the two commits together also, Ill merge.
2349	17181752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17181752	dserrano5	twas easier to reset both diffs and commit a new one again ("easier" == "Ive done it in the past" :)).
2349	17182623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17182623	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2348	14552754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14552754	luke-jr	Suggest renaming "unlocked" at the same time, since it can be confused with wallet encryption lock/unlock.. "threadsafe"?
2348	14554084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14554084	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2348	14555868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14555868	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2343	14403837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14403837	gmaxwell	Im generally in favor of this sort of thing, in that it helps foster understanding of the system (e.g. understanding that it spends coins and not accounts) and avoids people getting pushed to webpages to get similar functionality. Im not keen on the "back to input" change option, its not obvious to some people why they shouldnt reuse addresses and it shouldnt be something the system encourages, its also not obvious what it means when there is more than one input selected. It would be nice if fees were computed as soon as inputs are selected as it would make it easier to construct changeless transactions. One way to do that may be to just assume that there is always a change output while computing a conservative size.
2343	14407850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14407850	cozz	update: removed "back to input" I am actually already computing the fees while selecting inputs assuming 2 outputs
2343	14409147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14409147	cozz	sorry guys, the build issues are because I never tested this with Qt 4.7, I will commit an update in the next days.
2343	14413208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14413208	eldentyrell	Please merge this. For many users, having this feature in the client (and not some external utility) is a higher priority than anything else that has happened since the 0.6 release. Consider how that affects their incentive to upgrade.
2343	14417181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14417181	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2343	14417799	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14417799	gavinandresen	How was this or should this be tested? Can you write up (or, better, get somebody to write up) a test plan? See for how. This is definitely a large enough feature with enough possibility of disastrous consequences if there is a bug (people sending coins to /dev/null) to spend some good solid time testing carefully.
2343	14419157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14419157	rebroad	I concur with - if this isnt merged then a fork will occur, which may potentially be more popular than this one - some diversity of this client is probably a good thing though to maintain what bitcoin is meant to be about - decentralised.
2343	14419205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14419205	eldentyrell	Actually Im not worried about a fork so much as people simply using increasingly-ancient versions of the client. Right now there are a bunch of people who will simply keep using coderrrs 0.6-based binaries forever if they arent offered something strictly more useful.
2343	14419206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14419206	gmaxwell	Im wondering why you think its appropriate to use threatening language over code that doesnt currently compile? Good luck with that fork.
2343	14419417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14419417	eldentyrell	> This is definitely a large enough feature with enough possibility of disastrous consequences if there is a bug (people sending coins to /dev/null) to spend some good solid time testing carefully. Keep in mind that the people who use this feature will choose an older guaranteed-to-be-more-buggy-since-other-bugs-have-been-fixed-since-then client if the latest bitcoin.org client doesnt offer this. Testing is great, but merging this produces a net decrease in user bug exposure even if it isnt perfect. Alternatively: since this functionality is hidden from the user by default, put a "WARNING: alpha quality" next to the checkbox they need to check in order to enable it.
2343	14419862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14419862	cozz	If someone is eligible and wants to write such a test plan, please contact me. I can help with some coins for the work, just in case they end up in /dev/null while testing:)
2343	14420378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14420378	luke-jr	They could always merge coincontrol with the relevant stable branch (not to dissuade merging this..) I didnt interpret as threatening at all O.o
2343	14421643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14421643	eldentyrell	Im talking about non-{template-heavy-C++}-programmers (the majority of bitcoin users).
2343	14421793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14421793	gmaxwell	CNF shouldnt be a check, it should be a count. (if you want to make it change color when IsConfirmed() thats fine with me too). This is because it influences priority, which perhaps should be shown, as well as security confirmation isnt a binary state and the coincontrol interface should be upfront with that.
2343	14421897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14421897	gmaxwell	If youve selected a bunch of coins in a bunch of different groups its not easy to unselect them. There should probably be some discoverable way to select all / unselect all.
2343	14422138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422138	gmaxwell	Shows transactions which are currently in listlockunspent. These should be greyed out. (perhaps with a padlock on them, bonus if the gui gets the ability to lock and unlock them)
2343	14422152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422152	cozz	confirmations are shown with tooltip. priority does not matter in my version of coin control. ALL SELECTED INPUTS ARE GOING INTO THE TRANSACTION FOR SURE. If you select 100BTC but only send 1 satoshi, still all 100BTC will be inputs, rest will send back as change. Also there is already select all / unselect all, you have to click on "*" (left table header).
2343	14422352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422352	gmaxwell	Uh. Priority has nothing to do with which selected inputs go into the transaction. Its one of the factors that determines if the transaction can be free or not, and influences how fast it can be mined. I am totally confused as to what youre thinking there. A tooltip is effectively hidden, especially one that takes a half second hover on a tiny icon. Why not make it the number? The asterisk fails on discoverability: I couldnt find it and I looked (tried left and right clicking in several places but not your ~~ symbol~~ * symbol. :P If I cant figure it out, knowing that it should have something there might want to consider another approach.
2343	14422455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422455	cozz	actually I am using the listlockunspent methods to realize coin control, so combining the GUI and cli methods is not possible with this. The GUI would delete your locks, if set by cli. if you guys think this is no good, I need to change this.
2343	14422549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422549	gmaxwell	The lockunspent code is trivial, so if we want to go that route we could basically duplicate it for this. Ill have to contemplate and look through your code. Still just doing really basic tests right now.
2343	14422710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422710	cozz	ah Im sorry with the priority thing, now I know what you mean, youre right, showing this in an extra column could be useful.
2343	14422816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14422816	gmaxwell	Yea, fee behavior is misleading, it fails to override it. Reproduction: Select 50 BTC input. Shows fee: 0. Send 49.99999999 BTC. Produces a transaction that pays 1e-8 in fees. or, Select 50 BTC input. Shows fee: 0. Send 1e-8 BTC. Prompts to charge for a 0.0005 fee. abort. or, Select 50 BTC input. Shows fee: 0. Send 49.99999999 and second output of 1e-8. Insufficient funds. These are all because the coin control doesnt override the normal fee logic, which is good and fine, overriding it would result in stuck coins. I was using tiny outputs to trigger fees but the same should probably crop up for low priority. But the fact the it claims to display the fees but doesnt really is super confusing. I might suggest that the fee display actually be brought onto the main send coins display in the panel with the send button. When coins are selected it should show the fee, size, and priority (turning red for low priority, making the fee in the case explicable), and change amounts for the selected inputs and specified outputs.
2343	14462951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14462951	cozz	![screenshot8](https://f.cloud.github.com/assets/2814559/224452/557b10f8-85d5-11e2-9934-a3e147e63a30.png) just want to say, that Im working on this, update in 2 or 3 days. gmaxwell made some good points. Added screenshot, what do you think?
2343	14485414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14485414	rebroad	Looking good - I notice commented on the bitcointalk thread about RPC functionality - but I wasnt quite sure of the relevance - is he implying some duplication of effort as a result of this pull?
2343	14495285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14495285	cozz	- does not want to patch Bitcoin-Qt but instead provide this functionality through another external app. You could realize this through the lockunspent methods. (except the extremely important feature that all selected should go into the transaction for sure, you have to patch bitcoin source for this, otherwise selected only maybe included in the transaction) But I am not interested in this, I will maintain this patch anyway, because I am doing it for myself. If you guys then include this upstream or not is up to you.
2343	14933788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14933788	tobypinder	Just want to chime in that this functionality is very cool and also very powerful. I hope this can get sufficiently tested and included (even some reduced subset if necessary).
2343	14966206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14966206	rebroad	Id like to install this Perhaps you could include instructions for the novice github users for downloading it..? (including me!)
2343	15009975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15009975	Nothing4You	Could you rebase this so it can be tested with current master?
2343	15016740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15016740	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2343	15016784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15016784	cozz	UPDATE: ![screen_shot5](https://f.cloud.github.com/assets/2814559/267707/5d4c5480-8eb4-11e2-8003-5aec5404477f.png) ![screen_shot6](https://f.cloud.github.com/assets/2814559/267709/91555b14-8eb4-11e2-973a-45d4a630ca6a.png) code-cleanup and rebase - address-label is now shown, if you enter a change address; also warning if change address is not in wallet or invalid address - you can now lock/unlock per right-click in the GUI (same as the new cli method "lockunspent") - (un)select all is now a button to be easier recognizable - confirmations is now a number, no more icons - the calculation labels are now on top and also shown in send coins dialog (see screenshots) - "priority" added (very low - very high) - fee is now calculated for real (before it did not take min-fee into account) In order to be able to send a free transaction, you need to follow the rules: - transaction size must be < 10000 bytes - priority must be at least "medium" - any recipient must receive at least 0.01BTC - change must be either zero or at least 0.01BTC If you violate one rule you will see a min-fee and also the labels turn red: Bytes.Priority,Low Output,Change. Depending which rule you violated. Those 4 labels also have tool tips explaining this. Also remember that violating one of the first 2 rules means 0.0005 PER kilobyte min-fee, while violating one of the last 2 means 0.0005 min-fee only.
2343	15017240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15017240	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2343	15019576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15019576	pera	Sorry for interrupting this pull request but imo those are almost essential features that should be included in the official client, please merge :>
2343	15020219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15020219	cozz	I have published binarys also:
2343	15053826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15053826	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2343	15054517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15054517	cozz	UPDATE: rebase
2343	15055105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15055105	laanwj	Im not opposed to merging this (for 0.9). Code changes look sane in general, and as it is disabled by default casual users wont be overwhelmed. More advanced users get some control over change, priority, fee etc which is good. Of course it all needs to be well tested, and conflicts with other coming features such as multi-wallet support should be checked.
2343	15145690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15145690	Nothing4You	Could you make the values selectable (so its possible to copy them)? Also, this need a rebase (again :( )
2343	15236268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15236268	rebroad	Ive been testing this, and I seem to be having some crashes with wallet.db being unable to be read. So far its not happened on the build that didnt have this coincontrol merged. Will explore further...
2343	15718515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15718515	laanwj	sounds like a very serious problem; did you manage to get more information from the crashes?
2343	15768408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15768408	cozz	You you dont need to select you can direct right click and copy to clipboard if you cant reproduce the error I cant help you here. From my standpoint its not possible to create a corrupt wallet with the coin control patch. I guess the changes are less critical than some people think. The only critical code is in wallet.cpp thats 2 if-statements and some get-set methods. It is only tampering with inputs and outputs of transactions thats it, its not touching the wallet directly. Anyway I hope I can kick myself in the ass and create a testing plan this week, I will send this gavin for review and then publish if he says testing plan is ok. Then I will test the new multi-wallet commit with this and then publish testing plan and rebase this, to get this finally merged. Until then theres no sense rebasing this all the time.
2343	15816612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15816612	luke-jr	Does this correctly calculate fee/kB in the case of unconfirmed (change) inputs? More specifically, does it include the size of unconfirmed "parent" transactions in the calculation? If not, should it?
2343	15986182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15986182	sipa	The changes to core look very sane (I havent looked at the Qt code), but one thing Im unconfortable with: coin control settings effectively become per-wallet state. That means that when using coin control from within Qt, it will also affect transactions created via RPC (which doesnt have the same feature at all). Ideally, Id say the coin control capabilities are abstracted into a separate class, an instance of which can be passed to the sendtransaction & co methods.
2343	16000873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16000873	laanwj	Agreed it should not be state but an extra input to the sendtransactions
2343	16465721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16465721	luke-jr	Bug: Clicking on any part of the list other than the checkbox column (eg, clicking on an items Confirmation count) sets the focus to that column, and the space-bar cannot be used to check/uncheck the checkbox.
2343	16692473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16692473	luke-jr	Why is change grouped in with other addresses? Seems to me as change is only every used as an input once, it should never be grouped...
2343	16709367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16709367	eldentyrell	> Seems to me as change is only every used as an input once, it should never be grouped I think the grouping is by output, no? A change address appears grouped with the wallet address which was used as an input to the transaction which has the change address as an output. Of course, this isnt the only way in which a change-address and non-change-address might be "related" in the blockchain, and its possible for two non-change-addresses to be "related" this way. The addresses wont appear "related" in the tree view in these situations. But both of these situations arise as the result of some deliberate action on the users part (or some other users part), so I think the tree view is just showing you address relationships that arise as a result of the clients automatic change-management decisions rather than the users deliberate transaction requests.
2343	16710725	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16710725	luke-jr	I dont see how a relationship is inferred to an output (that it is change is not represented in the transaction itself).
2343	16712270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16712270	leijurv	Just chiming in, this all sounds like a great idea.
2343	16712295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16712295	sipa	Without special measures to try to make the change look like a regular output (try to mimic precision/patterns in amount values, for example), I think its safer to assume that change can be inferred.
2343	16715772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16715772	eldentyrell	> that it is change is not represented in the transaction itself do you mean: 1. In the blockchain? Of course not. 2. In a clients local transaction records? The client can make note of the purpose for which a private key was created (to receive change or not) at the time of its creation. 3. In the bitcoin-qt client implementation in particular? See wallet.cpp, bool CWallet::IsChange() -- its essentially doing (2) using the "address book" part of the wallet to determine the creation purpose. If the user created the address for non-change purposes it gets put in the address book. If its not in there, the cilent assumes it was created in order to receive change.
2343	17505574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17505574	luke-jr	Thought: it would be nice if the coin control had a way to run the coin auto-selector, and display the choices in the coin control screen for any changes/review.
2343	18480273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18480273	ahdinosaur	can this please be implemented in RPC too? <3
2343	18659631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18659631	sipa	You can do coin control using the raw transaction api in RPC.
2343	18664208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18664208	laanwj	Wed like to merge this ASAP, but it really needs comment fixed (no per-wallet state, use CTxDestination) before it can be merged.
2343	18720595	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18720595	sipa	I have rebased this branch here: It misses: * Updates to the new dust logic * The coincontrol settings class I suggested instead of wallet state * CTxDestination instead of CBitcoinAddress
2343	18737682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18737682	cozz	I only did not submit any more updates, because I thought you guys require a testing plan for merging. Anyway I will look at this and push either an update or the current state after the weekend.
2343	18862897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18862897	cozz	update: - new class CCoinControl in wallet.h class has - CTxDestination for change - Coin Control Methods - Lock Unspent Methods I have merged lockunspent - methods into this class, because otherwise we would have again same state for gui and rpc for lockunsppent. There are 2 instances of this class created, 1 in walletmodel for gui and 1 in wallet for rpc. I have not implemented rpc, but would be trivial now. CCoinControl class is passed as parameter into createTransaction() also in AvailableCoins(). In AvailableCoins() this is where the actual coin control is done, its the same line of code where you asked if isLockedUnspent before - dust logic - at least in my tests it turned out that dust is actual 5460 satoshis, not 5430 - if you enter dust as recipient Amount the label Low Ouput shows "DUST" - fee is calculated correctly according to dust, this is when change would be dust, its added to the fee - fixed a (for me) very annoying compiler warning in a separate commit - some minor improvements, not really worth mentioning, like improving start-up time of the popup if you had a lot of outputs selected, change address warnings are now red etc. sry, your spacebar-bug would require to create a separate treewidget class and overwrite keypressevent, so I leave this unfixed for now
2343	18865005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18865005	sipa	Maybe my comment wasnt clear, but this isnt what I meant at all. Youve now moved the coin control logic to a separate class, but its still kept as state in CWallet (and in addition, it holds a backreference to the wallet it is part of...). The idea was to have something like CCoinControl, but just use it as a optional argument passed to CreateTransactions & co, not to store it in the wallet itself. RPCs that call createtransaction wouldnt pass it, normal GUI transaction wouldnt pass it, but creating a transaction using coin control would construct such an object from what is set in the GUI, and pass it along. If youre storing it in the wallet itself, it may interfere with other calls to CreateTransaction that dont want coin control. Also, I dont think the CoinControl object needs methods that interfact with the wallet; it should just group some settings. In short: dont let coin control be part of the wallet state, just make it an optional argument. Apart from that, thanks for rebasing and updating. Id really like to see this get merged.
2343	18866958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18866958	cozz	thx for quick response. ok, I kinda see. I will give this another shot. Are you fine with merging the lockunspent into the class? Should I create a new file src/coincontrol.h for the class?
2343	18867086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18867086	sipa	Yes, I think the lockunspent stuff much more belongs in CCoinControl than in CWallet - I disliked it being there in the first place. But then that means that the RPC module gets its own CCoinControl instance, to maintain the lockunspent data.
2343	18908805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18908805	jgarzik	Although I do agree w/ RE lockunspent data, it was an open question at the time whether it should be stored in the wallet or not. Some people requested a second iteration of lockunspent store the lock list in stable storage, thereby solving an issue with the current implementation: one must reload the lock list the first time the wallet is used, post-bitcoind-restart. That is a window for errors, that storing the locks in stable storage would solve.
2343	18981046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18981046	cozz	update: - I have not merged lockunspent into coincontrol now, to not complicate things - class CCoinControl is now in src/coincontrol.h and independent from wallet - the class is optional parameter to createTransaction,AvailableCoins,SelectCoins,sendCoins - class is only passed in GUI coincontrol case
2343	19071850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19071850	wtogami	Yes, jgarzik agreed, put these into other pull requests unless they are directly related to Coin Control. BTW, it seems that some incarnation of #2651 will likely happen. Your patches have incompatibilities. Would you consider rebasing on current master and checking if things remain compatible with #2651?
2343	19078156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19078156	wtogami	I rebased your Coin Control on top of master and #2651 "display txfee in first sendCoinsDialog message box". When used in combination, "display txfee in first sendCoinsDialog message box" selects from available coins which do not include the inputs chosen by the user using Coin Control. Work would be necessary to allow the two patches to work together.
2343	19092973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19092973	jonasschnelli	is right. If the pull gets ACKed and merged, pull #2651 needs overhaul and some merge effort.
2343	19100038	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19100038	wtogami	It seems #2651 is closer to acceptance than #2343 Coin Control, so Coin Control should rebase on master with #2651 as a dependency.
2343	19161931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19161931	sipa	The changes look good overall to me (though I havent checked the GUI code or whether the creation logic matches the current filtering policies), apart from two nits I left inline. I think its likely #2154 gets merged before this, so you may need some rebasing, but I dont think itll be particularly hard (#2154 is just code movement and dependency changes). No need to rebase right now, though.
2343	19228329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19228329	cozz	update: sipa changes
2343	19268576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19268576	wtogami	Is anyone else seeing this layout problem? Ive seen it with at least the past two versions of Coin Control, including the current master plus the latest commit. Fedora native and gitian linux builds are equally affected. ![cc-layout-problem](https://f.cloud.github.com/assets/93665/637707/4fbfb462-d2aa-11e2-85d1-cb6da55918c5.png)
2343	19277762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19277762	cozz	update: solve layout issue. I had used fixed heights at some point, which was no good.
2343	19310204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19310204	wtogami	Hi cozz, did you see my email? My team would like to make a donation to you for this work.
2343	19333802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19333802	cozz	update: Diapolo changes I am using labels now, instead of index numbers.
2343	19368034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19368034	wtogami	**Space Bar Bug** It seems spacebar often fails to check/uncheck. Not sure what causes the instances where it does not work. Clicking and moving around a bit sometimes restores the spacebar ability. **Isolated Cause** Clicking on the column titles like Priority to sort causes the spacebar to fail to check/uncheck.
2343	19368705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19368705	wtogami	**Move OK button to bottom right** Could you also please move the OK button on the input selection dialog to the bottom right? That seems to be where other dialogs have their button when the user wants to "continue".
2343	19368841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19368841	wtogami	**s/Minus Fee/After Fee/** Would you consider renaming the "Minus Fee" label? It is currently a bit confusing. Perhaps "After Fee" would be more understandable?
2343	19370633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19370633	wtogami	**Possible bug with priority calculation.** I have sent a few Coin Control transactions to combine tiny p2pool dust. On the 5th attempt, the input selection dialog has dust listed as "low-medium". I sort by Priority and manually select the 67 lowest of the low-medium inputs, keeping the tx size below 10KB. Priority: at the top says "medium" and Fee: is zero. This should not be possible right? I then closed and re-opened the client, selected the same 67 low-medium inputs, and now the aggregate Priority: is low-medium with a fee. **Update** I am not sure whats going on here. With 45 low-medium inputs the aggregate priority is low-medium. When I add one more low-medium input, the aggregate priority becomes medium and the fee drops to zero. Is this expected behavior?
2343	19370676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19370676	wtogami	**Possible bug with byte size calculation** The "Bytes:" of a 67 input transaction in Coin Control is 9994, but after confirmation, ABE block explorer shows those txs with byte sizes like 9955 or 9962. **Update** I might have figured out the cause. The byte calculation is assuming non-compressed key when in fact it is compressed? Not sure if theres an easy way to fix your calculator to be more accurate.
2343	19386785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19386785	wtogami	**Escape button bug** This may be related to the spacebar bug above. Often the Escape button fails to dismiss the CC input selection dialog.
2343	20270507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20270507	wtogami	**More regarding byte size calculation** I now realized, is the discrepency really about leaving room for a possible change output? What happens if there is a change output and the target address is uncompressed? Will the actual tx size be in excess of the estimate in that case?
2343	20422144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20422144	cozz	update: - labels are now selectable, because people often ask "how to copy to clipboard?" - fix spacebar/esc bug, I had to subclass the treewidget for this - s/Minus Fee/After Fee/ - s/nBaseFee/nFee/ - remove (nAmount - nPayFee) parenthesis - added a "~" before bytes and say "Can vary +/- 1 Byte per input" in tooltip, this is because ecdsa signature for a uncompressed public key is: with a 25% chance 179 bytes, with a 50% chance 180 bytes, with a 25% chance 181 bytes. I simply assume 180 bytes for all. Same for compressed, but with 32 bytes less. The only way to give 100% accurate bytes would be to actually create and sign the transaction for every click in coin control, which would be overkill in my opinion. So bytes is just an extreme good guess. - I put the OK button on the left on purpose, because checkboxes are on the left, otherwise my mouse ways were to long, I had to move mouse from left to right all the time, I hated that - I have tested some compressed/uncompressed inputs, I can not say more than "It works for me". In your case it really looks like there has been a false detection of compressed/uncompressed. But I dont know what else to test. - your phenomenom with the 45 low-medium switching to medium is correct behaviour. This is because if you only select 1 input, I have to add 78 bytes for the output here. This is 2 * 34 + 10. 2 outputs and 10 bytes transaction overhead. Now if you select 45 inputs, also I only add 78 bytes, because selecting more inputs does not mean you have more outputs, you still have 2 outputs. So the more inputs you select, the less "meaningful" are 78 bytes for the math-calculation. This means you can actually "cheat" your priority up, by selecting more inputs. But thats not my fault, thats how bitcoin priority calculation works. I mean with the power of coin control you can always cheat up your priority, simply by selecting a huge input, although it is not needed and then send this coins back to yourself as change. - Your last question above does not really make sense. An output is always 34 bytes, its a ripe160 hash, there is no compressed/uncompressed. Only the input is either 180 or 148 bytes, depending on compressed/uncompressed.
2343	20427175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20427175	wtogami	Sounds great! Could you please provide this new version rebased to 0.8.2 as well?
2343	20431575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20431575	cozz	
2343	20453629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20453629	wtogami	We are testing it in this side-branch. Im liking the improvements over the previous version! Not Bitcoins problem, but I am not sure if I got the 4x faster blocks priority threshold correct here. I am looking forward to this and #2651 to be merged.
2343	20453813	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20453813	wtogami	a tiny request. Could you please push each new revision of Coin Control to a new branch on your github? It is difficult to compare the changes to previous versions when the earlier versions are gone.
2343	20454477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20454477	luke-jr	Its not difficult at all. Pushing to the same branch is necessary to update the pull request.
2343	20457505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20457505	wtogami	I may be mistaken, but isnt what he is doing push --force, which wipes access to the previous revisions?
2343	20457553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20457553	luke-jr	Presumably. Dont you have a local copy?
2343	22451445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22451445	luke-jr	This has been stable for a while now, and Im not aware of any unaddressed concerns. Time to merge?
2343	22451681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22451681	gmaxwell	ACK behavior, just tried it out some, and Im very happy with how it behaves now.
2343	22454294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22454294	sipa	ACK on the code changes to core. I didnt check the GUI code in detail, but it seems theres a lot of duplication of fee logic there.
2343	22466293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22466293	cozz	Yes, there is some duplication of fee logic. The stuff hardcoded in CreateTransaction(..) in wallet.cpp is not so easy to get rid of. But we could change the GetMinFee(..) method in main.cpp, so that it takes a parameter nBytes, and then do not serialize the CTransaction in this method, but use this parameter nBytes as size. When we call GetMinFee(..), we serialize the transaction anyway, and have nBytes available, so actually we serialize the transaction again all the time in GetMinFee(..) which is not really necessary. If you want I can change the GetMinFee(..) in main.cpp, this would then remove like 8 lines of fee logic in coin control. Maybe in a separate pull?
2343	22466627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22466627	luke-jr	That sounds like a good idea. But I would to it in a separate commit, not pull. So it would be part of this pull request, but also clearly distinguishable from the coin control functionality in git.
2343	22507252	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22507252	cozz	update: - added second commit "pass nBytes as parameter to GetMinFee(..)" - remove some duplicated fee logic and use GetMinFee(..) instead - sipa nits - change context menu order "Copy address,..." to match order from the Transactions tab
2343	22534163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22534163	gavinandresen	Id still be much more comfortable ACKing this if there was a written-up QA test plan. I see a lot of ad-hoc testing (e.g. testing priority calculations sweeping up dust) which is fine, but the purpose of thorough testing is to find edge cases that arent tested because "it works for what the developer uses it for."
2343	24274890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24274890	wtogami	What sort of test plan? Completely automated is necessary?
2343	24275028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24275028	wtogami	Needs rebase.
2343	24281264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24281264	gavinandresen	: no, completely automated is NOT necessary. The kind of test plan described here: e.g.
2343	25031273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25031273	cozz	update: - rebase/fix merge conflicts - replace hardcoded 57600000 with AllowFree(..) - minor fee bug: occured for sub-cent change and unusual fee setting, 0 < fee < 10000 - minor gui: hide change label when checkbox unchecked Testplan: What do you think about the testplan?
2343	25066480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25066480	gavinandresen	Excellent test plan! The only section missing is interaction with JSON-RPC -- e.g. could things break in weird ways if a JSON-RPC send is done while the input selection dialog is up?
2343	25108354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25108354	cozz	Not break, but the rpc scenario to consider is: Coin control thinks the selected output is spendable, while actually the output is spent. This can happen if you spent an output with rpc while working around in the sendcoinsdialog. So you select an output with coin control, then spend it with rpc. The selected spent output is then stucked in the coin control selection, because it is selected, but does not appear in the popup anymore. Worst case here is getting a weird "Amount Exceeds Balance" and you dont understand why. A clear() which would remove the stucked output and solve the problem is triggered by: - click unselectAll - disable coin control - sending a succesful tx in gui. This happens if the balance of the other selected was enough to satisfy the transaction. Of course the spent/locked output would not be part of the transaction. If stucked is the only one, you would get "Amount Exceeds Balance" all the time. The scenario is unlikely and uncritical, but maybe I should write a simple check function, which checks if all selected are still unlocked and spendable, and then call this on popup open and before click "Send". If you click "Send" and there had been a stucked output, I would return "transaction creation failed" and the coin control labels would refresh, so one can see, that someting has changed, like the output has been spent in the meantime. What do you think?
2343	25116179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25116179	petertodd	That kind of thing can probably even happen in the regular wallet with co-current RPC operations, so yeah, if you could think it through carefully and come up with a good solution and user experience thatd be quite valuable. Just make sure the error message you got is reasonable friendly - "TRANSACTION CREATION FAILED!!!!!" isnt, but something along the lines of "Sorry, looks like some coins you wanted to spend were spent elsewhere. Retry?" is good. FWIW keep in mind what you described can also be thought of as a double-spend, and we dont handle them well in general.
2343	25415418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25415418	cozz	update: - selected but spent outputs are now automatically removed from the coincontrol-selection on label update (which is also triggered just by opening the dialog) This is now a simple solution to the problem described above, solved with one if-statement. test-plan update: - added 12. Double Spend (the weird "Amount Exceeds Balance" I was talking above is also part of this) - added lockunspent interaction with rpc
2343	25491339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25491339	mumblerit	Great work! Could you please post a new backport to 0.8.5? You have many testers there that would help to validate the recent changes.
2343	25756894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25756894	cozz	
2343	26240566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26240566	wtogami	Any remaining concerns blocking this merge?
2343	26681569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26681569	HostFat	"Transaction times shown on CC window are not equal to times shown on Transactions tab. They are -2 hours off in my case (GMT +1 zone)." Im not sure if its already fixed, Im just reporting it ...
2343	26688367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688367	gavinandresen	How is the test-plan testing going, or how did it go? Has anybody run through the entire test plan on both Windows and Linux and yet? (ideally, it would be tested on OSX also).
2343	26905257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26905257	cozz	update: - fix transaction times bug reported by - because of #3008 - change labels from 10000 to 1000 bytes (I did not have to change fee-logic, only tooltip label and label turn red threshold) - testplan: change from 10000 to 1000 bytes - because of #2945 - ignore bytes from the inputs for priority calculation - adjusted getPriorityLabel(..) thresholds (because priorities are higher now and they just add up now when selecting more inputs, this resulted in getting "highest" priority label too quickly) Testplan still the same link:
2343	26922513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26922513	mumblerit	Can we have this backported to bitcoin-0.8.5 please?
2343	26970088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26970088	laanwj	Apart from some minor nits the code looks good enough for merging now. How is the testing coming along?
2343	26971797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26971797	Diapolo	How does this interact with payment requests, when they show up in sendcoinsdialog?
2343	26972122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26972122	Diapolo	Do all labels in your GUI honor changed display units?
2343	27092736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27092736	cozz	update: - code nits - introduced GUIUtil::setClipboard - calling getBalance(coinControl) now in walletmodel.cpp - replaced "WARNING" with "Warning" - added notr="true" to ui non translatable strings - added "coinControlUpdateLabels();" at the end of SendCoinsDialog::pasteEntry(..). This is because payment-request did not trigger label refresh. - reverted some changes from the last commit for #2945: I forgot uncompressed keys are over the limit. The ignore limit introduced by #2945 is 151 bytes. An input with uncompressed key is 180 bytes. So I credit 29 bytes per uncompressed input. This is priority calculation only. yes, I honor display units Tested payment request. No problems found, besides the "coinControlUpdateLabels();" call mentioned above. Latest 0.8.5 backport: Testplan still the same:
2343	27098135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27098135	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2343	27273316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27273316	luke-jr	ACK, whether the code is perfect yet or not, it works and isnt hacky or crazy.
2343	27337571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27337571	wtogami	ACK after rebase. Please just merge. Litcoin has found no show-stopping bugs in the past few months of testing while this patch has continued to receive polish and tiny fixes. Litecoins Coin Control had this simple debug patch to help verify the priority threshold where the fee is allowed to be zero.
2343	27338178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/27338178	gmaxwell	"Please just merge" is not helpful. "Mr. Foo. Went through the test plan and completed all the tests successfully" is.
2343	28052736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28052736	luke-jr	Coin Control tells me 3 inputs and 1 output uses 618 bytes, but this doesnt seem to be the case?
2343	28106326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28106326	cozz	618 = 3 * 180 + 2 * 34 + 10 This would be 3 inputs from uncompressed keys and 2 outputs. 590 = 3 * 148 + 4 * 34 + 10 This would be 3 inputs from compressed keys and 4 outputs. Calculation depends on how many inputs/outputs and also if inputs are from compressed or uncompressed ecdsa public key. If it is unknown how many outputs, I assume 2 outputs. Is this a question in general or did coincontrol actually show you 618 bytes and when you sent the transaction, it only had 590?
2343	28476817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28476817	laanwj	Rebasing this now... See #3253
2343	28506052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28506052	cozz	Closing this then. We dont need to have two coin control pull reqs open.
2338	14022177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14022177	TheBlueMatt	I figure I get this simply included in the protocol so that we can later bother with the actual download optimizations.
2338	14023600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14023600	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2338	14034730	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14034730	mikehearn	Hah, neat. Do the merkle blocks generated by such a filter have much overhead for the representation vs just a generic list of hashes?
2338	14037030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14037030	sipa	8 bytes + 0.25 byte/tx + overhead of sending the transactions in separate messages instead of inline in a block.
2338	14047166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14047166	mikehearn	Actually 32.25 bytes per tx (we chatted about it offline)
2338	14064677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14064677	TheBlueMatt	Yea, I think thats pretty good considering you have to atleast transfer the 32-byte sha256 hash of the tx (atleast given that youve already received most, if not all, of the txn in question).
2338	14065572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14065572	gmaxwell	not horrible, though a protocol made just for this could transmit say 8 bytes instead, and then just pull the whole block in the insanely rare case that there is a collision. Probably not worth doing inside the bitcoin p2p protocol however.
2338	14082448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14082448	TheBlueMatt	Yea, absolutely could do better, but since this is already in the protocol, I figured I might as well enable it without wasting tons of CPU cycles hashing.
2337	14019067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14019067	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2336	14020107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14020107	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2336	14020489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14020489	gmaxwell	LOL. Should he write a unit test for the unit test?
2336	14021196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14021196	petertodd	"Yo dawg..." Of course, I did test that those unittests fail if you invert the logic...
2336	14276624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14276624	petertodd	Changed to RETURN from 0xff as per IRC discussion.
2336	14348626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14348626	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2335	14020679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14020679	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2335	14020719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14020719	luke-jr	Uh, how?
2335	14030145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14030145	Diapolo	That message is posted everywhere, dunno if Gavin paid Matt some Coins for it ^^.
2333	14020928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14020928	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2333	14029933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14029933	Diapolo	How can my change here cause this: ``test/util_tests.cpp(307): error in "util_seed_insecure_rand": check count<=10000/mod+err failed``?
2333	14829844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14829844	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2333	15222891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15222891	Diapolo	Can any core-dev confirm this is okay? I know that recently changed that message with another pull, but perhaps didnt see that duplicate, which used the same string. Edit: It was #2384.
2333	16033267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033267	luke-jr	Needs rebase.
2333	16034077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034077	Diapolo	Rebased!
2333	16035233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16035233	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2332	14021283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14021283	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2332	14028230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14028230	laanwj	Ugh, how can this reduce total test coverage?
2332	14829256	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14829256	Diapolo	I updated the pull, should be better now :).
2332	14831443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14831443	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2332	15027278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027278	Diapolo	Perhaps you consider this also mergable then :)?
2331	13999199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13999199	Diapolo	Please dont create pulls for translations! If you want to contribute to the current translations just do this via as we fetch our translations in intervals from there. Can you please close this pull :).
2331	14000305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14000305	starius	Thank you, I try to fix translation via transifex
2325	13840793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13840793	Diapolo	This needs to be retranslated and an update for bitcoinstrings.cpp (which I do from time to time, just wanted to mention) and I remember that the "block" in front of database was added, because we have a similar message for the wallet db :).
2325	13844009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13844009	Diapolo	Sometimes I feel my comments are getting ignored ^^.
2325	13844342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13844342	laanwj	Sorry, its probably because were mostly used to responding to comments we *dont* agree with I agree that this will have to be retranslated (though with 0.8 final being out of the door theres a lot of time for that). And for wallet/block database, yeah, Id say leave out "database" for the wallet and make the message "Verifying wallet".
2315	13666192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13666192	sipa	From what I can see, this also fixes the crash-at-shutdown issue.
2315	13674336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13674336	gavinandresen	Nice! Ill try to find time to test it a bit later tonight or early tomorrow.
2315	13677976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13677976	gavinandresen	Im getting an assertion failure after saying "Yes, please re-index"; chainstate/blocks data uploaded to: Assertion failed: (dummy_versions_.next_ == &dummy_versions_), function ~VersionSet, file db/version_set.cc, line 715. 4 org.bitcoinfoundation.Bitcoin-Qt 0x0000000103030e5f leveldb::VersionSet::~VersionSet() + 111 5 org.bitcoinfoundation.Bitcoin-Qt 0x0000000103030de5 leveldb::VersionSet::~VersionSet() + 21 6 org.bitcoinfoundation.Bitcoin-Qt 0x000000010301114e leveldb::DBImpl::~DBImpl() + 286 7 org.bitcoinfoundation.Bitcoin-Qt 0x0000000103011025 leveldb::DBImpl::~DBImpl() + 21 8 org.bitcoinfoundation.Bitcoin-Qt 0x0000000103010fd8 leveldb::DBImpl::~DBImpl() + 24 9 org.bitcoinfoundation.Bitcoin-Qt 0x0000000102ff8877 CLevelDB::~CLevelDB() + 71 10 org.bitcoinfoundation.Bitcoin-Qt 0x0000000102d6a5a6 CBlockTreeDB::~CBlockTreeDB() + 38 11 org.bitcoinfoundation.Bitcoin-Qt 0x0000000102d46033 CBlockTreeDB::~CBlockTreeDB() + 35 12 org.bitcoinfoundation.Bitcoin-Qt 0x0000000102d41ca1 AppInit2() + 24769 13 org.bitcoinfoundation.Bitcoin-Qt 0x0000000102b28520 main + 6160
2315	13678609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13678609	sipa	Hmm, I just get the question, and reindex works. A no results in an exit... and a exception thrown at shutdown. The reason is that Shutdown() isnt called if AppInit2() exits in an abnormal way, and thus ThreadScriptCheckQuit() isnt called, thus the script check threads just keep running.
2315	13698379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698379	sipa	I added a very simple destructor to CCheckQueue that calls Quit(), which should take care of taking down the sigcheck threads during shutdown. I have no explanation for your assert error, though.
2315	13700374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13700374	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2312	13700715	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13700715	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2312	13736269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13736269	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2312	13746088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13746088	gmaxwell	Because you asked so nicely
2312	13747344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13747344	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2312	13955651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13955651	Diapolo	Really, I can be a fucking damn nit-picker, but that indentation thing could have been fixed. Im thinking about never doing anything coding style related in core (if that is what you guys want, then win-win :-P).
2312	13956558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13956558	gmaxwell	I _did_ change the indentation. Please dont be rude about it, I am listening and I do care... but as much as people shouldnt be offended when you make nits, you shouldnt be offended by peoples responses. Personally, Im fine to have your style nits, my preferred style is something else no one here wants and sometimes a bit of it leaks through, so Im happy to have people point it out and Ill change it. (which I did here!)
2312	13956686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13956686	laanwj	Thats probably best for your heart-rate Diapolo :) Learn to stop worrying and love the inconsistent indentation. On the other hand, if you submit a pull that only fixes the indentation on those few lines Ill merge it for you.
2312	13958158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13958158	Diapolo	No offence to anyone :), I just though out loud ^^. I think your suggestion to keep a look at my blood-pressure and heart-rate is the best I can and will do :D.
2311	13637313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13637313	luke-jr	ACK: tested clean builds of both bitcoin-qt and bitcoind individually with custom CXXFLAGS.
2311	13730121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13730121	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2310	13580101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13580101	sipa	(added an own pull so I can try fixing the pulltester build issue)
2310	13581187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13581187	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2310	13600250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13600250	qubez	Interesting, I had a idea about five days ago of how to improve estimation (which can be network-bound or cpu-bound): -Include with each checkpoint the size of the blockchain at that checkpoint (which will loosely correspond with CPU work as well as download bandwidth) -Include with the last checkpoint a multiplier to estimate additional CPU expense per block to do full verification after last checkpoint (i.e. blocks will take 3x more time to verify with signature checking). This can also be a guess of future network growth: "how many more transactions per block will we see than between the last two checkpoints". then: -Obtain estimated (or actual) blockchain size at the current block, from interpolation between known sizes at checkpoints, -Estimate the total size/cpu_work of the current blockchain by extrapolating beyond the last checkpoint to the current height, -Progress bar percentage is current blocks estimated size, divided by total estimated size. ![progressbarformula](https://f.cloud.github.com/assets/1425520/160100/dffeae00-7758-11e2-82cb-e084a6481a70.png) More advanced than I could write: curve fitting. The blockchain growth looks pretty darn exponential! Checkpoint blockchain sizes: block, size (0, 293) 011111, 2569495 033333, 7820351 074000, 28029745 105000, 69840955 134444, 341554543 168000, 1032555361 193000, 2491771562 210000, 4099216740 216116, 4855459871
2310	13615350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13615350	gavinandresen	nit: compiling with clang 3.3 on my Mac: src/qt/bitcoingui.cpp:534:9: warning: unused variable totalSecs [-Wunused-variable] int totalSecs = genesisBlockDate.secsTo(currentDate); And running against a pre-0.8 datadirectory gets a crash, passing a NULL *pblockindex to GuessVerificationProgress from BitcoinGUI::setNumBlocks
2310	13616045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13616045	sipa	updated
2310	13626942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13626942	schildbach	Some feedback: There is a space (or LF) missing before "Transactions after this will not yet be visible." Id prefer proper plurals. Using workarounds like "day(s)" are looking unprofessional. Easy fix: Drop to the next lower unit just before the switch from 2 to 1 would occur.
2310	13627168	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13627168	qubez	I ran the win32 pull-tester build without issue, but was taken aback by the new message. "six hours behind" looks like its going to take six hours to do something. I dont know if this is the way forward as this communicates even less information. I would rather have an estimate of how long its going to run before its caught up. This would be more useful information to end users, they want to know how long until they can use Bitcoin.
2310	13627204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13627204	luke-jr	Qt will automatically change "day(s)" to "day" or "days" as appropriate.
2310	13627729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13627729	schildbach	Hu? Im almost sure I saw "day(s)" in the actual running software. Im running Ubuntu Linux 12.10 in case this matters.
2310	13629695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13629695	laanwj	This isnt based on the last version of my commits. I fixed the totalSecs already, along with some other changes such as the LF before the transaction message. in Qt that is avoided by adding the correct plurals in the english translation file, no need to hack around in the source code. if you know better just submit a pull request to improve it, Im pretty darn sick of all the complaining, whatever we change to the progress bar (or something else) there is at least someone that complains that the old situation was better. Thats why I was reluctant to touch it, or do much development on bitcoin at all anymore for that matter.
2310	13632926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13632926	sipa	In that case, pull my commits into your pullreq and Ill close this?
2310	13646360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13646360	laanwj	Yep good idea
2310	13647874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13647874	schildbach	I just retested this on latest sipa/progressbar and I am definately seeing the "(s)" in day(s) and hour(s). Im trying to do a screenshot.
2310	13647915	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13647915	schildbach	![Screenshot from 2013-02-16 11:40:50](https://f.cloud.github.com/assets/743306/163359/e6f4230c-7825-11e2-91ce-af9ff8b2b183.png)
2310	13650028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13650028	sipa	Updated to your latest pulls code (I think...) If youre keen on making graphs, can you compare with the method implemented in this pullreq? Its fairly similar to what you propose, except it uses transactions and not blockchain size, as transactions are already computed (so dont require extra checkpoints data)... Or, as said, feel free to write a patch yourself. I still see week(s) in the current code. You say that is fixed by adding it to the translations - that isnt done yet then?
2310	13650757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13650757	Diapolo	As long as the english translation master file is not updated in the correct way, you will see this generic string. Most of the time I update these file or laanwy does. This is a non-issue, really :).
2310	13653022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13653022	laanwj	yes this is the last version, and indeed the translations still have to be updated
2310	13678644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13678644	schildbach	There is more. Sometimes it says phrases like "and 0 day(s)". Will the whole phrase also automagically get cut by the translations?
2310	13682372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13682372	laanwj	Im pretty sure you cannot get 0 day(s) as under 2 days it shows hours, but its possible to get 0 hour(s) if secs < 90*60 *but* count < nTotalBlocks. I suppose something less than an hour could be displayed as an hour.
2310	13683237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13683237	schildbach	emphasis on the "and". Probably it was "and 0 hours", I just wanted to describe the scheme. Could in future as well happen with "and 0 years" if you decide to add centuries.
2310	13683294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13683294	laanwj	Fyi the "and" has been gone for a while.
2310	13684671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13684671	schildbach	Ok thanks for fixing. With the current version, there is another problem: The progress bar does not appear to progress well. It started with about 100 week(s) behind, and the bar was nearly empty. Now Im at 29 week(s) behind, and the bar is filled by perhaps 15%. Id expect to be filled either at about 70% or at about 85%, depending on if the progress is relative to genesis or to app start. Actually Im not convinced that a progress bar is a suitable metaphor for blockchain download at all, because a) download never finishes and b) the blockchain is not a chain.
2310	13684889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13684889	laanwj	The progress bar *was* relative to app start a few versions ago, and that confused people, as they thought the download restarted every time. The code in this pull request displays the absolute progress, in verification cycles computed from the number of transactions, from the genesis block to now. This is as precise as it gets: if it is 50% full then this means there is 50% download/verification time still to go. Anyway, we had that discussion many times already. Believe me, its a fruitless waste of time, better spent on things like payment protocols/workflows. Lets keep this thread restricted to concrete issues/showstoppers with the current code.
2310	13686666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13686666	schildbach	Please read my report. My arguement is that about 15% fits neither calculation. Genesis was 210 weeks ago, in my test case I had 29 weeks to go. In terms of time, I had 86% done, yet it showed only about 15%. In terms of transaction I cannot say, but if you look at its pretty clear visually that the integral before "29 weeks ago" is more than 15% compared to the integral after.
2310	13686761	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13686761	sipa	That is because signature verification is only enabled after the last checkpoint, so transaction after that are given much higher weight in the calculation (15 times more). Feel free to suggest a better factor (or heuristic for determining it), but for a test I did, this resulted in a very accurate measurement of processing time.
2310	13691552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13691552	qubez	Signature verification gets "turned on" only for the last 5000 blocks - the problem is describing is that most of the download time is downloading blocks 0-216116, the progress of which is figured as 50% by 108058, but the actual percentage of blockchain size/transactions downloaded and processed by then is only about 2% - (see area under curve in my graphic above). Thats the problem which my big unacknowledged post describes a way to fix. Such a fix needs to mess with checkpoints.cpp; youre messing with checkpoints.cpp... This pull is two things: 1 - bar wording changed ("blocks remaining" -> "days behind") 2 - post-final-checkpoint "correction factor" "# 2" being here has made it a place to discuss the other missing code: 3 - correction of progress bar percentage to reflect actual download progress (size MB) instead of block number. If you had just changed the wording with this pull, then "lets also fix # 3" likely wouldnt be bikeshedded here (I searched instead of filing a new issue.) I figure I could do # 3 with one very long weighted sum, but Im at the "build env, installed git, now..." part of being able to code/submit.
2310	13694929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13694929	sipa	Using block chain size or transaction count shouldnt matter much - they are very correlated. What this pull does is change the progressbar to reflect "verification time progress". Effectively, it counts/estimates transactions, weighing those after the last checkpoint higher, as those require higher much more CPU. The factor used to scale post-checkpoint transactions should reflect the time factor (download + process + sigcheck) / (download + process). The factor that is currently hardcoded (15.0) was determined by running on some system, and indeed not taking download time into account. Doing so would probably result in a lower number. Feel free to do benchmarks so the factor can be improved. If I understand you correctly, you suggest that your method (using block chain size, and hardcode sizes in the checkpoints) will better account for download time? Im not sure about that - assuming transactions have a constant size (which, on average, is true) and the post-checkpoint time factor is reasonably, the estimation implemented here should be very accurate.
2310	13697114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13697114	qubez	I have no problem believing that sipafactor(tm) is correct for your system and for a reindex or import of blocks already downloaded. However: 1: a. verification up to last checkpoint is not well multithreaded, vs b. signature verification is well multithreaded result: end user reindex on 1 core vs 16 core will have a very different "time factor" correction. and 2: end user initial blockchain download may have p2p network speed as a limiting factor, not CPU, in which case block number + correction factor after checkpoint will be completely incorrect - the progress bar should be the percentage of blockchain data estimated to have been downloaded (where 100% is an estimate of the current total size). combined with: 3: The progress bar is only useful for initial blockchain download - any other time, the progress bar is 99% when you restart Bitcoin the next day. Therefore, the progress bar should be accurate for initial blockchain download. Storing the known size of the blockchain at several points makes for better estimation that the "factor" kicking in at one point near the end of the download: ![sipapercent](https://f.cloud.github.com/assets/1425520/165453/ee8966a8-7948-11e2-97cd-c8116a3e28fb.png) There undoubtedly is room for some kind of factor, since we wont be storing and cant retrieve the exact size of the blockchain after the last checkpoint. Instead of simply using the same calculated block size from the last checkpoint interval, estimating data after the last checkpoint could have a factor like yours where we guess both additional CPU cost and future growth of block size.
2310	13698102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698102	sipa	I think you misunderstand this patch, given the graph above. I do not have a constant time per block (with a different speed before/after the checkpoint) - its a constant time per _transaction_ (with a different speed before/after the checkpoint), and transactions have a pretty constant size on average, so its proportional to the size in bytes of the chain. Also, I do not claim the current implementation is correct for everyone. Thats not possible with a constant slowdown factor after the checkpoint. For it to be exact, this factor would depend on whether or not your downloading (or reindexing from disk), the degree of parallellism you have for script validation, and a few other things probably. What I do claim, is that given a good factor (specifcally for the users system - abstracting from how that factor is obtained), it is accurate in the general case. For example, if download time dominates everything and local processing/verification can be ignored, setting the factor=1 should result in more or less the same progress youd calculate.
2310	13698250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698250	gmaxwell	Please dont post graphs which are pure conjecture. If youre going to go through the trouble of making a graph please make it on an actual measurement. What youre proposing is actually just a less accurate version of what Sipa already implemented his change uses the transaction count which is very closely related to size and more strongly correlated with the work than size is).
2310	13701235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13701235	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2309	13579907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13579907	sipa	Hmm, why is this a pull of a specific commit? I wanted my branch...
2308	13575613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13575613	gmaxwell	ACK
2308	13576654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13576654	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2299	13411697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13411697	gmaxwell	Suggested additional test: Click multiple links in rapid succession, does it break, can the user accidentally confirm the wrong payment?
2299	13420555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13420555	laanwj	This needs some testing, but it is absolutely the right way forward.
2299	13434492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13434492	gavinandresen	Ill make the server its own class. And Ill use QString::number (I missed that method reading the QString docs). I should have this working on the Mac, too soon.
2299	13459679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13459679	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2299	13526169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13526169	gavinandresen	Updated / rebased. Im happy with this code now.
2299	14005003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14005003	laanwj	ACK
2297	13362380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13362380	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2295	13359965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13359965	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2295	13360568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13360568	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2294	13358295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13358295	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2294	13358438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13358438	Diapolo	This change seems to require some small re-translations, is this intended for 0.8 or for 0.8.x? As translators need time, we should be sure when to pull this. I dont want to argue over the pull itself ^^, didnt yet try it anyway. I would also feel better, if the testnet todo could be fixed before pulling it.
2294	13358973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13358973	schildbach	If you want to mimic the behaviour of Bitcoin Wallet, you should have a look at (lines 145-169). First of all, it does not show seconds or minutes. It starts with "1 hour behind." 1-48 hours: x hours behind 2-14 days: x days behind 2-xx weeks: x weeks behind Im thinking of even allowing months.
2294	13359922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13359922	gmaxwell	> It starts with "1 hour behind." Its important to not start reporting as soon as an hour. Otherwise users start freaking out and corrupting their installs whenever there is a 1 hour block gap (plus the timestamps can pretty easily be an hour behind).
2294	13359940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13359940	laanwj	Diapolo: At first I simply re-used the "XXX ago" messages, but I think it was a bit confusing and "behind" indicates better what is the case. Yeah it will cause some translations. Im not sure about testnet. I suppose its not really that important what date is used there for the genesis block. Schildbach: I dont really like to use weeks or months, its very hard to see progress that way. Seconds are never shown, as it starts showing the progress bar at 90 minutes behind. It may be that showing only whole hours is better though, showing minutes pretends to be too precise.
2294	13360047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13360047	schildbach	I had these thoughts as well about 18 months ago. Back then I was seeing max 45 minutes gap, and I thought timestamps are not off more than 15 minutes. Note that I have a separate warning for when your system clock is off. So how many minutes of threshold would you suggest?
2294	13360079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13360079	schildbach	Its probably shed-painting, but people start to think in weeks, months or even years if you have larger timespans. Nobody has got a feel of how much 1237 days actually are.
2294	13375850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13375850	laanwj	Ok but apart from small details, perfect being the enemy of good and such, is this a step forward compared to the current implementation?
2294	13376024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13376024	sipa	I agree with that when numbers get too large, they become hard to interpret. I wonder if using more decimals just to show progress would be useful. For example: X hours (2-48 hours), X.X days (2-14 days), X.XX weeks (14-60 days), X.XXX months (>60 days). Certainly the decimals dont really convey any actual information anymore, but as a whole its easy to interpret and does show progress.
2294	13377259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13377259	laanwj	Decimals imo have the same problems as large numbers, its still a garble of numbers youre just adding a point somewhere in the middle. Another option would be to convey "liveness" in another way than global progress so that it doesnt matter that large time units are used. For example a lowtech way would be to add/remove a dot to the label for every N blocks that comes in, or an icon that animates one step,etc...
2294	13378259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13378259	sipa	Yeah, just brainstorming - Im not convinced about the many decimals idea either. Adding dots sounds like an easy and useful way to convey progress as well.
2294	13378987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13378987	laanwj	Ill give that a try...
2294	13418966	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13418966	laanwj	Ok I changed the time units to and for the first time in history the spinner does something useful: it spins a frame every time setNumberOfBlocks is called with a changed number of blocks. So both liveness and progress is covered again.
2294	13419213	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13419213	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2294	13419805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13419805	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2294	13420973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13420973	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2294	13481088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13481088	sipa	Here is a commit that changes the progressbar logic to use (projected & corrected) transaction counts for progress:
2294	13481919	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13481919	laanwj	Cool, so I understand that makes the progressbar better match the part of total time spent acquiring the block chain?
2294	13481983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13481983	sipa	Yes, it actually seems to speed up a bit, as the very early blocks have almost no transactions in them, but still require a per-block processing time. Only disadvantage is that it requires 4 measured/guessed control parameters. Guessing them wrong doesnt result in worse behaviour than we already have, but it does require some extra work when adding a checkpoint.
2294	13482201	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13482201	laanwj	With the current code in the pull request, usig secs, it looks like the first half-ish goes really fast, and after that it almost grinds to a halt (but that was the same when still using blocks).
2294	13482244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13482244	sipa	Yes, this fixes that very nicely. I mean this almost reverts it: it seems the very first "blocks" go very slowly, and it speeds up slightly along the way. Try it :)
2294	13482303	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13482303	laanwj	I will once I get home :) was just trying to get the gist of it
2294	13521815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13521815	sipa	Added a commit to improve testnet support:
2294	13574673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13574673	sipa	Heres a graph of block-based progress vs my branchs code during a reindex on my VPS: The last checkpoint is at 0.299252 progress, so slightly before the strange 2-minute gap (i have no clue what happened there, perhaps an I/O hiccup at the hosting provider).
2294	13576080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13576080	laanwj	Looks good! Ive just merged your changes into this pull.
2294	13576304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13576304	sipa	In the added refactor commit, Ive added some comments.
2294	13577506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13577506	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2294	13577675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13577675	sipa	Anyone an idea why pulltester fails to compile?
2294	13578025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13578025	sipa	Heres another graph, on a fast 6-core machine. The slowdown factor of 15.0 in the current code is clearly way too much here...
2294	13578774	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13578774	laanwj	I dont understand the pulltester failure either, it gives a warning then bails out.
2294	13578818	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13578818	sipa	Scroll up: checkpoints.cpp:45: error: too many initializers for const Checkpoints::CCheckpointData checkpoints.cpp:53: error: too many initializers for const Checkpoints::CCheckpointData
2294	13579066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13579066	sipa	More seriously: Ill add some comments :)
2291	13341063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13341063	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2291	19706187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19706187	jgarzik	Your output is superior to the existing output. However, I am forced to NAK because it breaks the existing API. Given the lack of interest in this pull request, inclined to close for lack of interest plus API issue.
2291	21071737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21071737	luke-jr	How does this break the existing API? From a readover, it seems to behave the same when called without options...?
2291	21090367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090367	luke-jr	BTW, this needs a rebase.
2291	25786018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25786018	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2291	26688273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688273	gavinandresen	NACK: jgarzik is correct, this changes the RPC API, which is unacceptable: Output of listaddressgroupings before: ``` [ [ "miD5tprKXUrU97H5fK7pKfwyTH9aDgi5vd", 50.00070000 ] ] ``` After: ``` [ { "address" : "miD5tprKXUrU97H5fK7pKfwyTH9aDgi5vd", "balance" : 50.00070000 } ] ``` Closing. Please open a new pull request if you come up with a backwards-compatible solution.
2289	13336143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13336143	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2289	13353205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13353205	Diapolo	So is this a compilation fix for Debian Squeeze, did I get that right? If yes I would say kick it in before 0.8 RC ;).
2289	13356346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13356346	laanwj	Yes, this helps compatibility with older Qt versions and is perfectly fine with me, I wish the debian folks would simply submit their changes as pull requests instead of sending a link with a list of patches though.
2286	13270631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13270631	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2283	13224262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13224262	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2283	13595121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13595121	Diapolo	ping
2282	13211397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13211397	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2282	13329412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13329412	fanquake	Youll probably want to squash this into two commits for a better chance of getting it merged.
2282	13329874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13329874	Diapolo	Yeah this for sure needs to be squashed to have a merge-chance :).
2282	13330040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13330040	sipa	ACK if you squash the two commits together.
2282	13336914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13336914	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2282	13338141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13338141	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2282	13339942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13339942	mb300sd	Think I did it right, still getting used to git.
2282	13343263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13343263	fanquake	Looks good. You got an ACK from one of the core devs so this will be merged when there ready.
2282	14022121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14022121	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2282	14215349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14215349	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2282	14216597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14216597	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2282	16020449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020449	sipa	Anyone an objection against this?
2282	16024708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16024708	gmaxwell	Does use of pwalletMain here to get the account gum up the mult-wallet support?
2282	16024773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16024773	sipa	All wallet RPCs receive an extra parameter pointing to the wallet, that will indeed need to be adapted for this method too, but its a trivial change.
2282	16024965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16024965	gmaxwell	ACK then. This works fine for me.
2281	13195525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13195525	gmaxwell	I dont think that will give you a useful error message when you need one but dont provide it.
2281	13195813	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13195813	gavinandresen	Excellent point, gmaxwell. ACK on 2264 over this one.
2279	13191066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13191066	gavinandresen	For belt-and-suspenders sanity, I think places where we rely on other methods to set state.Invalid should have asserts; e.g.: // Check it again in case a previous version let a bad block in if (!CheckBlock(state, !fJustCheck, !fJustCheck)) { assert(!state.IsValid()); // Rely on CheckBlock to set invalid state return false; }
2279	13197845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13197845	gavinandresen	After more code review: ACK for 0.8 But I think some deeper thought would be good for a better approach to handling database corruption/loss. For example: if CBlock::DisconnectBlock() returns error("DisconnectBlock() : no undo data available"); ... then SetBestChain() will return false-but-with-a-valid-state ... so ConnectBestBlock() will return etc... ... so AddToBlockIndex() ... ... so AcceptBlock() ... ... so ProcessBlock() will return false-but-with-a-valid-state ... which looks like the right thing to do in all the cases where ProcessBlock() is called.
2279	13198418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13198418	luke-jr	I suppose an advantage of the return-CValidationResult model would be that wed get the compiler yelling at us for any missing states...
2279	13203888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13203888	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2277	13162060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13162060	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2277	13184403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13184403	gavinandresen	Not the right fix according to -- instead, need to make sure that invalid blocks always return an invalid CValidationState.
2275	13138138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13138138	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2275	13466153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13466153	gavinandresen	: RE: nSigHT & 0x83 : good idea. RE: why not extend to OP_CHECKSIG: the cache only exists during the execution of a single OP_CHECKSIG, because standard transaction types only contain either a single OP_CHECKSIG or an OP_CHECKMULTISIG in each scriptPubKey. If we ever have lots of transaction scriptPubKeys with multiple OP_*SIGs, then it would make sense to extend the cache to any signature operation. Note that this is not intended to help with attackers who might create blocks full of non-standard transactions; I believe that is expensive enough (attacker has to be willing to create blocks that are very likely to be orphaned) that it isnt a problem.
2275	16086333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16086333	gavinandresen	Implemented and suggestions, and rebased to master so pull-tester is happy.
2275	16087788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16087788	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2275	16353840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16353840	sipa	Sorry, this was a dangerous suggestion of mine: the sighash depends on the position of the CHECKSIG in the script, when there are OP_CODESEPARATORs present. You should probably index the map by pbegincodehash as well.
2275	16362890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16362890	gavinandresen	Bah. OP_CODESEPARATOR is evil and should be abolished. This optimization isnt high on my list of things to fix, and before pulling we should create some tricky OP_CODESEPARATOR unit tests, so if anybody else is motivated, feel free to do that (Im buy with payment protocol stuff).
2275	16404771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16404771	SergioDemianLerner	First, good to know Sipa catched the problem before it was too late. Excellent job! Ive been pushing to remove OP_CODESEPARATOR and adopt a simpler verification system with a hard-fork in many forum posts, showing strange uses of it. Its clear than it can make enormous damage and makes no good at all. Weve experienced that programmed hard-forks can be carried out without much danger. I Suggested putting a single "*" in the script to be verified and ban OP_CODESEPARATOR for ever.
2275	16409536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16409536	sipa	Im in favor of removing OP_CODESEPARATOR, but I think you mean a soft fork. As far as I know, there has never ever been a hard fork in Bitcoins history (but well do one in 1 month...). Also, theres no need for one here. Simpy turn OP_CODESEPARATOR into a return false - no need to add new semantics. What do you mean by putting a "*" in the script?
2275	16467404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16467404	SergioDemianLerner	Nothing really important, any opcode could be used. Just a way to mark which script is the one being signed. The idea is not to insert parts of the script of the previous output in the scriptsig for verification. Currently to explain to a new user how a transaction input is verified we need 200 words. It could be simplified to "insert * in the scriptsig, clear all other scriptsigs and hash" (well, sort of).
2275	16467590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16467590	sipa	If were going to do an actual hard fork for the script language, give me a few days and I can come up with tons of small fixes. If were not scared of redoing the scripting language from scratch (I am, however), I think we can come up with something vastly better (except for being tested). However, removing the atrocity that is OP_CODESEPARATOR is as easy as replacing it with "return false;", and can be done with a simple soft fork like weve done several times already now.
2275	16467707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16467707	SergioDemianLerner	If ever the signature verification procedure is changed, I would simplify it more: Let T0 be the original transaction. T1 = T0 with all scriptsigs cleared. Let X = SHA-256 ( SHA-256 ( T1 ) ) Then HashTransaction(T) = SHA-256 ( X || n )) ) Where n is the input number to be verified. Then X could be cached and computed only once for the whole transaction (here Im not taking into account the SIG_ flags) But this is only a dream. I doubt the the signature verification system would ever be changed.
2273	13103351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13103351	gavinandresen	FYI: In the last 1,000 blocks, there was exactly 1 transaction larger than 100,000 bytes:
2273	13103535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13103535	gmaxwell	ACK. ... that >100k example is a nice utxo set cleaner, Im sad to not see more of those!
2273	13111240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13111240	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2273	13121465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13121465	sipa	ACK
2273	13133485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13133485	gavinandresen	Updated to add a comment as suggested by Mike Hearn.
2272	13103446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13103446	Diapolo	Does this affect Bitcoin-Qt in a way we need to take care of? Just asking without any research...
2272	13111498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13111498	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2272	16020348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020348	sipa	ACK
2272	16034852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16034852	Diapolo	Can you comment to my question above ;)?
2272	16051844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16051844	sipa	I dont think this influences the GUi in any way.
2266	13042666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13042666	jgarzik	ACK, though dont see the need for two commits, rather than one.
2266	13042810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13042810	interfect	I did the first edit with the Github editor, before I knew how many files there were to change. Once I understood the scope of it, I had to clone it locally and bust out sed. On Sat, Feb 2, 2013 at 9:27 PM, Jeff Garzik <notifications@github.com>wrote: > ACK, though dont see the need for two commits, rather than one. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2266#issuecomment-13042666>. > >
2266	13046674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13046674	Diapolo	NACK, please never ever touch the translation files ;), see #2251.
2266	13056985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13056985	interfect	Alright, it looks like theres a better pull request open anyway thats going to solve the problem with all the translations needing to be changed anyway.
2264	13024368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13024368	gmaxwell	Marked as 0.8 milestone because its a pretty irritating regression. (I hadnt noticed until now because my normal offline signer is offline and thus isnt running the very latest bitcoind)
2264	13026087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13026087	petertodd	ACK Thanks, I ran into this myself a few times. Note for anyone testing this the bug is only a problem when a txin is unknown to bitcoin, IE not in the mempool or blockchain, and therefore the scriptPubKey has to be provided explicitly.
2264	13111831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13111831	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2259	12991132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12991132	sipa	ACK
2259	13132470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13132470	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2259	13133633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13133633	gavinandresen	ACK. There will be a lot of reindexing with 0.8, so Im inclined to pull this sooner.
2259	13138687	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13138687	gmaxwell	Agreed on the 0.8 reindexing However, I suggest this also be guarded by IsInitialBlockDownload (I actually thought we were already doing that) so that we minimize spamming the content of an old wallet while syncing up a node from the network (a very common 0.8 install pattern, I expect).
2259	13153861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13153861	rdponticelli	Added suggestion, and a comment on the source.
2259	13187103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13187103	sipa	ACK; before 0.8
2259	13192277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13192277	Diapolo	Is that logical && correct?
2259	13193516	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13193516	gavinandresen	Yes, it is logical and correct. Pulling.
2255	12991158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12991158	sipa	you can just push to a branch already associated with a pull request to update it.
2255	12991368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12991368	rdponticelli	Yeah, I know. But that would have left 2 commits for a trivial change, right? Or a history rewrite, if I would have amended the commit, no problems with that? Anyway, I thought it would be cleaner this way...
2255	12991570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12991570	sipa	Inside you own branches you can amend/rebase/rewrite as much as you want. In public branches such as bitcoin/bitcoin, it isnt.
2253	12973551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12973551	sipa	ACK
2253	13014326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13014326	gavinandresen	ACK. I tagged this for 0.8.
2253	13017200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13017200	Diapolo	What about that Genesis block after -reindex with empty datadir thing? Is that on track for 0.8 final (just not for the first RC)?
2252	12926250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12926250	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2252	12926331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12926331	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12926547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12926547	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12926706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12926706	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12927733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12927733	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12928064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12928064	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2252	12954129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12954129	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2252	12954162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12954162	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2252	12955121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12955121	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12956034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12956034	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12957174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12957174	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12957470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12957470	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12958489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12958489	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12959190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12959190	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12959945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12959945	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12960726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12960726	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12961468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12961468	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12962178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12962178	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12962888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12962888	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12963565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12963565	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12964131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12964131	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12964388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12964388	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12965159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12965159	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12965696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12965696	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12970297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12970297	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12971222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12971222	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	12971441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12971441	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12971720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12971720	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12972177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12972177	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12972754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12972754	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12972983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12972983	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12973269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12973269	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12973474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12973474	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12973755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12973755	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	12973958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12973958	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13585022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13585022	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13585499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13585499	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13585904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13585904	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13586348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13586348	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13587456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13587456	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13588205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13588205	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	13588919	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13588919	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	13589644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13589644	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	13590089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13590089	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13590740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13590740	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13591281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13591281	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13591485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13591485	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13591884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13591884	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13592263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13592263	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13592616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13592616	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	13592969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13592969	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2252	13593135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13593135	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13593861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13593861	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests pertaining to the genesis block, which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13594134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13594134	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13594375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13594375	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13698272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698272	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13698846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13698846	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13699107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13699107	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	13699870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13699870	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2252	14825401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14825401	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	14825532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14825532	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	14825710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14825710	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2252	14826638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14826638	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	15096414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15096414	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2252	15096843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15096843	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2252	16947101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16947101	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2252	16953914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16953914	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2252	16957299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16957299	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2252	16961039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16961039	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2252	17085766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17085766	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2251	12925661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12925661	colindean	For the omissions, can obviously update them to increment the years or add The Bitcoin developers where necessary. Your wish is my command, haha.
2251	12930004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12930004	Diapolo	Sorry, but this does not fix #2217 completely, as I intended to add copyright info to all Qt files also and harmonize the used format to that of the core. Im also not sure about changing translations here, as they need to go to Transifex then and overwrite the current state there. Please leave that out IMHO.
2251	12970461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12970461	colindean	Shall I 1. Back out the changes to the translation files other than English? 2. Find where suggestion should be inserted into the code and change the English translation to match it? 3. Add the copyright notice to all of the Qt files? I unfortunately am going out of the country for the next week and wont likely be near an Internet connection until the evening of Thursday, 2/7. If whatever action is recommended is timely (I dont recall when 0.8 is due, or if this is even fodder for it), someone else is welcome to take my work and build on it.
2251	12982191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12982191	Diapolo	I suggest to remove all changes to translation files (and the .ui file) and if you want add our copyright header to all Qt files. Im going to implement Lukes suggestion.
2251	13240357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13240357	gavinandresen	Relevant: Updating every single copyright is not the right thing to do. And there is a good reason NOT to: it messes up the change history.
2251	13342561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13342561	colindean	That makes a whole lot more sense. I guess then I/we need to determine what files have changed thus far in 2013 and simply ensure that those have had the copyright updated. Do I correctly assess this?
2251	13383911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13383911	gavinandresen	See: In particular: "If the work is a derivative work or a compilation incorporating previously published material, the year date of first publication of the derivative work or compilation is sufficient." I say we treat edits to source code files as creating derivative works, and leave the copyright year alone. If you create a new source file then put the correct copyright date on it. Simply changing the year from (say) 2010 to 2013 is definitely the WRONG thing to do. Doing nothing most of the time seems to me to be the right thing to do, and has the HUGE advantage of also being the easiest thing to do.
2251	13399671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13399671	colindean	So the resolution is not to do anything, and simply have some kind of a policy to update the copyright information when a file is updated?
2251	13402202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13402202	laanwj	Even better, hes proposing to only update the year on creating a new file.
2251	13413144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13413144	colindean	Ah, OK. Upon re-reading, I understand that sentiment better. If its so resolved, well, I guess this can be closed!
2250	12924236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12924236	gavinandresen	ACK
2250	12926929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12926929	luke-jr	ACK with exception for comments.
2250	12927041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12927041	colindean	I pulled that block from bitcoin.org with the intention of keeping the text consistent. ![](http://i.imgur.com/DmqNrRP.png) Perhaps both should be changed. Or should README.md lead the way?
2250	12927106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12927106	luke-jr	Probably both should be changed, but given that its on bitcoin.org already, thats probably not a topic/discussion/blocker for this pullreq and should be fixed independently. ACK
2249	12912739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12912739	gavinandresen	ACK. Tested; fixes #2228 and #2239
2249	12912815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12912815	sipa	No way this fixes #2228 ...
2249	12912967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12912967	gavinandresen	: I stand corrected: it fixes a variant of #2228 where no IBD was done if you start with an empty data directory and -reindex.
2249	12913017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12913017	sipa	Ok, that seems plausible.
2249	13014195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13014195	gavinandresen	I take back my ACK: this breaks unit tests. TestingSetup() in test/test_bitcoin.cpp needs to call InitBlockIndex, I think.
2249	13017771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13017771	sipa	Fixed.
2249	13133174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13133174	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2248	12911638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12911638	sipa	Havent tested, but looks good. A constant for that timestamp would be nice, though...
2248	12912802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12912802	Diapolo	Agreed, dont we have one in main.h for this?
2248	12916682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12916682	laanwj	No, there is currently no constant for this. Lets leave that for a later improvement (the number returned isnt important at all, could even return 0, the null pointer check is).
2247	12911652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12911652	sipa	ACK (right before tagging rc1)
2247	12990421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12990421	sipa	Closed without merge?
2247	12990836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12990836	Diapolo	Perhaps sign of a delay?
2247	12991092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12991092	laanwj	Gavin dont close your pulls without merging them :P :P
2247	13013562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13013562	gavinandresen	Bah, thatll teach me to clean up my source tree late at night when Im tired... (I deleted the branch by mistake)
2246	12906177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12906177	petertodd	Looks like you closed the pull rather than merged it:
2246	12906285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12906285	gavinandresen	Ok, I poked the correct button this time.
2246	12906361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12906361	petertodd	Lol, this bug is cursed.
2245	12905109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905109	Diapolo	So can I have a checkpoint containing 38 in the future :)? We could devote checkpoints to devs ^^.
2245	12905445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905445	petertodd	ACK, timestamps and tx look pretty boring to me... Ha, and next a fundraising drive!
2244	12904222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12904222	luke-jr	ACK
2244	12905058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905058	Diapolo	ACK of course.
2243	12896817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12896817	sipa	ACK if pulltester & gitian are happy with this.
2243	13110559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13110559	gmaxwell	Ahh.. without this non-default cflags break the build. Whered pulltester go?
2243	13121496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13121496	sipa	can you force a pulltester run on this pullreq?
2243	13134398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13134398	gavinandresen	ACK. Although I think leveldb/libleveldb.a should probably depend on FORCE, so if bug-fixes are made to leveldb source files we dont have to make clean to pick up the changes.
2243	13135129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13135129	luke-jr	That sounds like a good idea to me. Shall I add it to this pullreq?
2243	13323983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13323983	luke-jr	Amended to fix gitian spec to use standard CXXFLAGS for -frandom-seed
2243	13337162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13337162	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2243	13621585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13621585	gavinandresen	Testing this... doesnt fix the problem, the -Qt build is non-deterministic. Also, I dont like the extensive changes to the leveldb/Makefile, it will make merging upstream changes harder. Im testing an alternative that cherry-picks some of the changes here, but doesnt touch anything in leveldb/ (passes CXXFLAGS in OPT; LDFLAGS is irrelevant, because were building leveldb .as).
2243	13637533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13637533	luke-jr	Closing, mostly superceded by #2311
2243	13757547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13757547	luke-jr	Reopening with one remaining fix that wasnt in #2311
2243	14022448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14022448	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2243	16086780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16086780	jgarzik	ACK
2241	14119293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14119293	maqifrnswa	Debian is at least looking at including memenv, wont happen until after Wheezy is released though:
2241	14121602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14121602	luke-jr	memenv is only needed for test_bitcoin.
2241	19705816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19705816	jgarzik	ACK Though this will certainly need updating, pending autotools work
2241	19707658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19707658	sipa	Id delay this until after autotoolification, as it would need to be redone from scratch otherwise anyway. However, all but test_bitcoin not linking against libmemenv.a seems meaningful by itself.
2241	21080560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21080560	luke-jr	In the meantime, I fixed a bug building test_bitcoin against system leveldb (memenv.h is not in a subdirectory)
2241	21306528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21306528	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts (please tweak those patches in contrib/test-scripts) 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2241	26050354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26050354	Diapolo	This needs rebase because of Autotools, dunno if its even required...
2241	26403300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26403300	laanwj	Closing this as autotools will need a completely different solution.
2237	12874537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12874537	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2237	12876089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12876089	jgarzik	No major objection, but it is unusual that there are two DNS seeds from one entity. Not typical policy.
2237	12876238	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12876238	petertodd	Thats actually just one seed, look at the comment above the seed defs, src/net.cpp:1147 "The first name is used as information source for addrman."
2237	12892563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12892563	jgarzik	Whoops, youre right. Comment rescinded.
2236	12872843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872843	sipa	Closes #2203
2236	12872874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872874	gavinandresen	ACK assuming pull-tester is happy.
2236	12873083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12873083	jgarzik	From reading the man page, it sounds like you want _LARGEFILE64_SOURCE too?
2236	12873262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12873262	sipa	_FILE_OFFSET_BITS changes the size of off_t, and makes fopen transparently support large files. _LARGEFILE64_SOURCE adds off64_t, fseeko64()... in addition to the normal ones.
2236	12873670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12873670	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2235	12872061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872061	sipa	ACK
2235	12872429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872429	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2234	12864300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12864300	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2234	12870276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12870276	jgarzik	I think said he was going to check in a script that would generate these from seeds.txt, so that at least the list is a little bit verifiable.
2231	12801973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12801973	sipa	See #2230
2231	12803217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12803217	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2231	12804453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12804453	gavinandresen	ACK
2229	12764742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12764742	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2229	12764789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12764789	sipa	Test plan: either (1) start syncing from scratch or (2) delete the blocks/rev* files and start a -reindex. In both cases, at any point in time, should the filesize of the blk* files be a multiple of 16 MiB and the rev* files a multiple of 1 MiB.
2229	12778996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12778996	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2229	12784498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12784498	CodeShark	The test succeeded under OS X Version 10.8.2
2229	12794774	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12794774	gmaxwell	Reindex test passes on Fedora 16/17. Needs windows testing.
2229	12797549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12797549	gavinandresen	This is just an optimization, yes? I think it can wait for 0.8.1.
2229	12798345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12798345	sipa	Indeed an optimization, but one that is easy to test. Ok for 0.8.1.
2229	12870340	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12870340	jgarzik	Nit: use #elif ACK
2229	12872277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872277	sipa	Added a commit to drop the pre-allocated padding when finalizing a block file (=moving to a next one).
2229	12872380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872380	gmaxwell	ah, good to not waste 30MiB...
2229	12872418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872418	sipa	Largest advantage is the ability to cat the files together to create a bootstrap.dat :) ... though Im sure people would otherwise complain about wasted disk space too :p
2229	12873950	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12873950	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2229	13093344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13093344	laanwj	ACK
2226	12761903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12761903	sipa	I have no idea what youre doing.
2226	12761965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12761965	Diapolo	Hey wow and I had no alcohol... okay, the GUI has 2 states, BLOCK_SOURCE_DISK for importing and BLOCK_SOURCE_REINDEX for reindexing. The core currently always sets fReindex and fImporting, when doing a reindex right? This pull changes this so we can differentiate these 2, that is all. Edit: Oh yeah and it moves a ``nBestHeight < Checkpoints::GetTotalBlocksEstimate()`` to the end of an if-clause as micro-optimisation.
2226	12762136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12762136	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2226	12762344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12762344	sipa	I dont think thats what youre doing. I havent tried, but I think this will cause a node to start IBD during reindexing or importing, as (!fReindex || !fImporting) is always true. So, to do what you want, those boolean conditions in the core testing for shouldnt be touched. Im not sure its safe to not set fImporting during reindex, though. It is not true that (in the current code) fReindex implies fImporting (fReindex just signifies that a reindex should be done; fImporting is only set while it is running). I think its safer to keep the code as it is.
2226	12762450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12762450	Diapolo	Seems my brain messed that up, so just closing this without further discussion-need ^^. Thanks for your time...
2224	12745685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12745685	luke-jr	Isnt this redundant with #1816 / 46888e6abca27dd6d2132aab7cd63f25363057c6 ?
2224	12745825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12745825	sipa	seems I completely forgot about that. Shouldnt be hard to integrate rejection reasons into this, though.
2224	12746090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12746090	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2224	12784712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12784712	sipa	This closes #2206
2224	12785654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12785654	Diapolo	Should also address #2146
2224	12796437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12796437	gavinandresen	ACK
2224	12814537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12814537	sipa	I added a commit to deal with LevelDB errors. It seems to work, but I dont like it. The exception is being caught in several places inside main to do be able to do a graceful shutdown, but its unclear if all cases are covered (though the worst case is a lesser clean shutdown...). The reported error on stderr can end up being "Error: Error: system error: Database corrupted", followed by shutdown. I guess some hint to try restarting with -reindex should be given. The GUI version relies on ThreadSafeMessageBox, and before the UI is loaded, this simply doesnt do anything, and the program exits without any hint. any way to improve that? All in all, this will indeed catch errors and cause a shutdown, but its ugly code and ugly reporting.
2224	12815123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12815123	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2224	12843002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12843002	gavinandresen	ACK if you also fix this bug in init.cpp (otherwise I get a core dump starting with a corrupted database):
2224	12872253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872253	sipa	Updated.
2224	12872489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12872489	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2223	12741129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12741129	gavinandresen	Tested with transaction id a0d85e45c4b54e98bb7c67044a88e20b434db58f75fad9dd4dac6d5ba215296f Created using createrawtransaction, then modified the input sequence number and lock time by tweaking the hex Attempted to send before the locktime using sendrawtransaction. RESULT: TX rejected Waited until after the locktime, sendrawtransaction again: Success Note: since this is an IsStandard() check, you cant test on -testnet...
2223	12741405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12741405	jgarzik	ACK
2223	12741468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12741468	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2223	12742273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12742273	luke-jr	Doesnt this defeat the whole point of non-final transactions? Feels more like were disabling a possibly-useful feature so that people can goof up and not be affected unless someone is trying (nothing stops them from relaying a non-final direct to the vulnerable service...). In any case, as long as bitcoind and Bitcoin-Qt clearly expose the non-final status, I dont think this is a vulnerability in this code...
2223	12742542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12742542	gmaxwell	Without TX replacement the purpose non-final transactions have is very limit the only difference this will make is that you have to transmit them out of band until they lock... which you already had to do if you wanted the ability to replace. What this fixes is that right now the wallet will display transactions that have no conceivable chance of confirming. Unless you have a more detailed understanding of the system and know to look for the impossibly far locktime youll think that it at least has reasonable odds. This is misleading and makes Bitcoin even more unsafe for people in practice. Limiting them also closes down some potential areas that DOS vectors could be found. The obvious alternatives to outright disabling them e.g. relaying transactions only x hours or less before they lock turn out to be pretty complicated to implement in the wallet (e.g. what do you do about txn whos parents were above threshold but later fall below it) and dont make an obvious improvement.
2223	12742796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12742796	schildbach	Do you also account for the fact that an attacker can send a timeLocked tx and then a plain normal tx that builds on the first one? The second one looks normal but in fact will also be timeLocked.
2223	12742861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12742861	gmaxwell	The non-final txn should not enter the memory pool, so its children should be treated as orphaned.
2223	12743900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12743900	luke-jr	I guess that makes sense... I suppose if someone comes up with other valid use cases, this can be reconsidered in the future anyway.
2223	12745143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12745143	petertodd	ACK Tested what Gavin did as well as tested various incoming transactions including chains. Also tested what happens with non-final txs already in your wallet; an error ends up in your logs and they dont make it into the mempool. Re-transmission does occur, and provided that a conflict is not out there, they will eventually be re-transmitted when they are final.
2222	12739442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12739442	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2221	12739704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12739704	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2221	12741417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12741417	jgarzik	ACK
2220	12737094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12737094	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2220	12738514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12738514	CodeShark	already implements dynamic loading and unloading of wallets. But in the interest of incremental commits that are easier to verify, I decided to open this new pull request with the idea of having a discussion on the UI design and merging in these changes first before attempting to merge in and
2220	12738949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12738949	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2220	13134889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13134889	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2220	14005170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14005170	laanwj	Can you rebase this? Now that 0.8.0 final is out, I intend to test and merge it soon.
2220	15306058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15306058	laanwj	I still plan to merge this as one of the next things, can you rebase please?
2220	15307963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15307963	CodeShark	Im on it...
2220	15310938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15310938	CodeShark	Let me fix up some whitespace issues before you merge.
2220	15311495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15311495	CodeShark	Allright, laanwj, its all yours :) Let me know if you need anything else.
2220	15312233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15312233	jgarzik	Fix the commit message, please
2220	15313861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15313861	Diapolo	The last rebase includes all current changes, i.e. the header and cpp cleanup pull? Then Im fine with starting the evolution ^^.
2220	15633224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15633224	laanwj	Merged (manually due to slight #include conflict that I introduced by merging another pull)
2220	15715787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15715787	Diapolo	Is it intended that bitcoingui.cpp and walletview.cpp seem to have quite much duplicate code in them? It would also be nice, if you could take a look at #2436. I created pulls for some other stuff that was not working, but perhaps there is more. We need to be really careful with such pulls IMHO.
2219	12735893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12735893	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2219	12737735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12737735	laanwj	I personally dont really like buttons appearing/disappearing while typing (causing layout changes). It might be better to use enable/disable?
2219	12738132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12738132	schildbach	Lets take this even one step further. If the user has already selected an address, why would she want to type another one? So Id suggest disabling the address field (meaning it is only used for display, editing is disabled) and remove the addressbook button in that case. No interactive layout changes necessary any more...
2219	12739421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12739421	laanwj	They may have selected the wrong one and want to change it...
2219	12739550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12739550	schildbach	In this case, go back and select the right one. Also, do you think a lot of people will even notice their mistake? They would need compare the hash value against a memorized value.
2219	12752371	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12752371	Diapolo	This discussion seems rather controversial, so would you ACK this, if I just disable the button on valid address entered? Im fine with such a solution. Edit: Changed to enable/disable instead of show/hide.
2219	12752690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12752690	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2219	12784395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12784395	laanwj	yes, disabling is fine
2219	12903876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12903876	luke-jr	I disagree with this change. I often sign a message, then want to change to another address later. Itd be annoying to have to edit the address to make it invalid just to change it...
2219	12903953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12903953	Diapolo	You are right, but you could also use the clear button ^^.
2219	15042124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15042124	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2219	21396466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21396466	Diapolo	Is there any interest in this? If no Im fine with just closing this pull.
2219	21602818	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21602818	laanwj	Im not really convinced this is an useful or expected behavior, to be honest. It arbitrary prevents the user from doing things (ie, select another address) without being clear what can be done to do override that. Hed have to jump through a hoop by deleting a character from the address. Usually I dont like when GUIs do that.
2219	21603749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21603749	Diapolo	Thats fine with me, closing this.
2215	12712971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12712971	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2215	12714247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12714247	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2215	12752391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12752391	Diapolo	It was one of your feature-requests, can you take a look if this does what you wanted ;)?
2215	13224184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13224184	Diapolo	Addressed your concerns :).
2215	13224913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13224913	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2215	13229036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13229036	laanwj	ACK
2215	15027292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027292	Diapolo	Ill rebase after the header / cpp cleanup got in, so perhaps we can also get this in soonTM.
2215	15042786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15042786	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2215	15044451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15044451	laanwj	Yes, this one should be merged asap
2213	12643249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12643249	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2213	12689181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12689181	Diapolo	Are you ok with the idea to have a fully translated RC ;)?
2213	12692511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12692511	laanwj	Yes!
2213	12727820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12727820	Diapolo	Updated to include new strings from #2168.
2213	12728529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12728529	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2211	12632070	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12632070	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2210	12623289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12623289	Diapolo	- fixed needed ``#include <QTextDocument>`` in sendcoinsdialog.cpp
2210	12632507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12632507	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2210	13135688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13135688	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2210	13209065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13209065	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2210	13223618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13223618	Diapolo	Seems to be a error...
2210	13359099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13359099	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2210	14022977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14022977	BitcoinPullTester	Automatic sanity-testing: WARNING, see for binaries and test log. This pull decreases total test coverage, please add unit tests to test all new code and help us add test cases for existing code. Coverage report can be found at
2210	15017999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15017999	Nothing4You	I just installed qt5 on my system (which is used as default qt now) and building bitcoin-qt no longer works. Merging this branch also isnt possible anymore. ``` [...] cd /home/rschwab/build/bitcoin-git/src/bitcoin-build; /bin/sh share/genbuild.sh /home/rschwab/build/bitcoin-git/src/bitcoin-build/build/build.h g++ -c -m64 -pipe -fstack-protector-all -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -D_REENTRANT -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -fPIE -DQT_GUI -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_UPNP=1 -DSTATICLIB -DUSE_IPV6=1 -DHAVE_BUILD_INFO -DLINUX -D_FILE_OFFSET_BITS=64 -DQT_NO_DEBUG -DQT_NETWORK_LIB -DQT_GUI_LIB -DQT_CORE_LIB -I/usr/lib/qt/mkspecs/linux-g++-64 -Isrc -Isrc/json -Isrc/qt -Isrc/leveldb/include -Isrc/leveldb/helpers -I/usr/include/qt5 -I/usr/include/qt5/QtNetwork -I/usr/include/qt5/QtGui -I/usr/include/qt5/QtCore -Ibuild -o build/bitcoin.o src/qt/bitcoin.cpp In file included from src/qt/bitcoin.cpp:4:0: src/qt/bitcoingui.h:4:23: fatal error: QMainWindow: No such file or directory compilation terminated. make: *** [build/bitcoin.o] Error 1 ```
2210	15023969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15023969	Diapolo	There is currently no Qt5 compatibility. I have the needed changes in my local build, but as long as this one is not merged, I dont want to open the Qt5 compatibility pull.
2210	15024040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15024040	Nothing4You	Im using arch linux, can you suggest me a better way than removing qt5 while building bitcoin-qt, then reinstalling it?
2210	15025632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15025632	Diapolo	Im no Linux guy, sorry... is there any way to point your compiler to the old Qt4 instead of Qt5? As long as doesnt merge this, because of other refactoring pulls you will be unlucky, sorry.
2210	15025710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15025710	Nothing4You	Im sure there is a way, ~~I just have no idea how I would do that~~, which is why I asked. Using `qmake-qt4` should be the solution, didnt test it yet though as I dont have the time to compile now.
2210	15026438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15026438	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It adds/modifies tests which test network rules (thanks for doing that), which conflicts with a patch applied at test time 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 5. The block test-cases failed (lookup the first bNN identifier which failed in If you believe this to be in error, please ping BlueMatt on freenode or TheBlueMatt here.
2210	15027043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027043	laanwj	Im fine with merging this now. Seems there is a merge conflict though: src/qt/paymentserver.cpp:122: error: invalid use of incomplete type struct QUrl /usr/include/qt4/QtCore/qmetatype.h:260: error: forward declaration of struct QUrl
2210	15027105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027105	Diapolo	Indeed, I removed QUrl from paymentserver.cpp by mistake. I hope is happy now after the last update.
2210	15027525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15027525	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2209	12632858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12632858	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2209	13136497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13136497	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2209	19705682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19705682	jgarzik	ACK
2209	19861244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19861244	sipa	Please rebase.
2209	19944933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19944933	sipa	ACK
2208	12622144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12622144	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2207	12622179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12622179	gmaxwell	Should we just take this before the 0.8 rc?
2207	12622359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12622359	Diapolo	/votes yes AFAIK the only changes between the tested 1.7 version are the last commits, right?
2207	12633240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12633240	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2207	12659292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12659292	gavinandresen	Yes, the only changes between the tested 1.7 version are the last commits.
2199	12561337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12561337	gavinandresen	NACK. Setting thread priorities is non-portable; the only reason the code did it originally was to de-prioritize the mining threads. Since we dont really support CPU mining any more, that reason has gone away. A pull to remove setting thread priorities entirely would be better.
2199	12562385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12562385	sipa	If this is true: it perhaps does make sense to define our own enum with priorities in util.h, and have CreateThread take such an enum value. It could be a no-op in all but WIN32.
2199	12564184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12564184	Diapolo	I think your point is valid in terms of CPU mining beeing unsupported (although I love to use it on testnet to quickly generate a block), but as pointed out there is that "issue" in Windows, that the whole OS is lagging, when the ThreadScriptCheck is run. Also there is ThreadMessageHandler2, which uses a non-default priority on Windows... dunno why, but that is the current state ;).
2199	12569499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12569499	laanwj	If were going to keep thread priorities I agree with this solution to pass the priority at thread creation. There is never a need to change it on the fly and Im happy to get rid of that inlined function in util.h.
2199	12583518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12583518	Diapolo	Added: - removes thread priority code for non-Windows OSes, so these will just get a no-op Still, I think it makes sense to evaluate if the current prios are chosen wisely or if there is room for improvement. Are you still on NACK or does it now seem to make sense for Windows :)?
2199	12633576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12633576	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2199	12633917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12633917	gavinandresen	My hidden agenda: Ive got "reimplement NewThread to use boost::thread and get rid of the ugly fShutdown and vnThreadsRunning[] nonsense" near the top of my TODO list. And last time I looked, boost::thread didnt expose a way to set thread priorities. An #ifdef WINDOWS in the Qt startup code that sets the initial process priority seems like a better approach, if running at lower priority makes sense.
2199	13580590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13580590	qubez	Current master can hit the CPU pretty hard with its multithreading, I caught up with 50 blocks and it pegged my quad core CPU at 100%, enough to stall my GPU miner. We would expect a similar hiccup about every 10 minutes. Reindexing or downloading blocks makes it hard to watch a video or other stuff without manually lowering priority or limiting processor affinity. Bitcoin could run with default lowered priority with little impact on its operation. Windows priority:
2199	14749939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14749939	gavinandresen	I finished my big thread cleanup: It replaces most calls to NewThread with calls to boost::thread_group::create_thread(), so is entirely incompatible with this pull. Instead of trying to tweak individual thread priorities, maybe it makes more sense to pull the -par=negative patch, and have Bitcoin-Qt SoftSetArg("-par", "-1") so Bitcoin-Qt users get a free core by default (since the common use of bitcoind is on a dedicated server doing nothing but bitcoin, I think current behavior is just fine there).
2199	14761582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14761582	Diapolo	I will take a look at your pull but agree, this one is obsolete and we should consider your next idea. IMHO it would be nice to still allow Bitcoin-Qt to use all cores, if a users explicitly wants that.
2199	14762365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14762365	laanwj	Agreed Gavin, good idea to keep a free core for the ui+os to prevent overall sluggishness.
2198	12555895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12555895	Diapolo	So this doesnt include the switch to Boost 1.52 and even doesnt rely on the static switches?
2198	12596880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12596880	gavinandresen	Test results, on a Windows XP SP3 virtual machine: Memory usage: 570MB peak during initial block download ~300MB typical usage during IBD ~200MB peak usage restarting fully synced
2198	12633881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12633881	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2195	12533700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12533700	laanwj	Nice, much better than a separate makefile for each platform Edit: we probably want to add mingw32 (crosscompile) to this as well
2195	12634213	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12634213	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2195	12748636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12748636	CodeShark	I added instructions for Ubuntu Precise users on how to install db4.8 using the steps you gave earlier.
2195	12749136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12749136	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2195	17360881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17360881	gavinandresen	bitcoin-qt.pro.temp is out of date (missing some changes to bitcoin-qt.pro). And should be named bitcoin-qt.pro.template.
2195	19705572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19705572	jgarzik	Closing, as an autotools effort is actively underway and preferred. Can reopen, if that effort fails or stalls insurmountably.
2194	12474608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12474608	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2193	12474678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12474678	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2193	12474855	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12474855	Diapolo	Seems this breaks the URI tests. I suppose we are allowing URIs, which contain no query?
2193	12486671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12486671	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2193	12494237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12494237	laanwj	I dont think a query is necessary. BIP 21 is the authorative source on what URIs we should accept or reject, maybe check there.
2193	12496977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12496977	Diapolo	Yeah, I checked there and we dont require a query in an URI, so I removed that check and updated this pull. As you can see pull tester is fine with it now :).
2193	12501612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12501612	laanwj	Ok, ACK
2192	12458630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12458630	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2192	12458893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12458893	jgarzik	This replaces a ping-after-getdata, correct?
2192	12458945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12458945	mikehearn	Yeah. I have code that can do both. Its a part of resolving the issues Peter Todd raised, from the bitcoinj side.
2192	12510115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12510115	gavinandresen	Could an attacker fill up memory using vNotFound?
2192	12510173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12510173	sipa	Theres no way for it to grow larger than the original getdata request, is there?
2192	12510248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12510248	gavinandresen	ACK, no vulnerability because the response will always be smaller than the request.
2192	12510319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12510319	gavinandresen	Quibble on the naming: "notfound" is pretty generic. Maybe "inv_unknown" ?
2192	12510512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12510512	mikehearn	Theres a limit on how long message IDs can be :( inv_unknown is 11 so it just fits, but that naming scheme would be constraining in future. Really, the whole protocol needs to get more explicit. This is just one example of a general problem. How about we introduce a convention for cases where a command results in an error. e:getdata?
2192	12511937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12511937	jgarzik	How about we introduce a convention where all situations that _might_ result in a response _do_ receive a response.
2192	12514150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12514150	mikehearn	Im all for that, but it has to be done piece-wise. This is one chunk of it.
2192	12540792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12540792	sipa	ACK on this change, but I disagree with requiring a response for everything. In its core, the P2P protocol is a gossip system. Nodes make sure they tell eachother about stuff they learn, and request what they dont know. This network layer caches and bundles requests, prevents duplicates, re-requests if necessary, .... Turning that into a request-response system would be wasting bandwith and performance. A fully fledged message-response system also needs things like request IDs that get repeated in responses, as otherwise an announcement can be confused to be a response to something else (for example, invs can be both sent as response to a getblocks, or as an announcement for a new best block - addr can be a response to getaddr or an announcement). I think theres just more to it than "making everything that might result a response do receive a response". On the other hand, for some things, this would make perfect sense. getdata obviously needs a response, and so does version (verack). It just needs to be dealt with on a case-by-case basis.
2192	12598411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12598411	gavinandresen	Merging now. Can tweak later.
2192	15669475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15669475	jgarzik	I still wonder if this wants a BIP.
2192	15748163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15748163	rebroad	This should certainly require a BIP. As a side note, I wonder if adding a timeout value to getdata is worthwhile also - i.e. most nodes wait 2 minutes before requesting a tx or block elsewhere. If a node responds more than 2 hours later its only likely to be sending something the node already has. a timeout would allow the node to decide whether the requesting node is still interested.
2190	12446349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12446349	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2190	12450039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12450039	jgarzik	ACK
2188	12436569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12436569	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2188	12509938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12509938	gavinandresen	ACK
2188	12539827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12539827	sipa	I have no problems with this change or its implementation specifically, but I think it shows how much the protocol locks us into a specific implementation. I think it would be cleaner if there was no special casing to work around the latency problem, and txids sent as filtered blocks were treated as normal invs, with their data being stored in the relay cache (ready to be getdatad the normal way). That doesnt have the latency advantages, though.
2188	12568248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12568248	mikehearn	Given that performance is the primary reason for this change, Im not very keen on adding latency for cleanness reasons. Anyway, this work is done for now. Better protocols can come in future. Lets get it merged and launched so end users can benefit.
2188	12568902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12568902	gmaxwell	this response make it feel to me that youre now railroading the change. Personally, this is triggering a reflexive negative reaction. I think the fact that you feel the need to defend it this way is a sign that it may be too immature to include. Better protocols can come in the future, but old ones need to be supported a long time. WRT latency, youre talking about 1x RTT for an event that happens once per ten minutes in the steady state. Or an overhead or a 0.01% performance difference for 100ms RTT. Am I missing something there?
2188	12571062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12571062	mikehearn	The standard way to use SPV clients, at least for now, is to start them up when you need them and shut them down when done. Keeping it running 24/7 doesnt make a whole lot of sense especially on a phone. So the steady state is synchronizing the chain as fast as possible. Thats why latency matters.
2188	12571490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12571490	TheBlueMatt	Im not so sure that the whole bloom filter stuff is/was railroaded...actually it was pretty well thought/implemented through. This pull itself one could argue is being railroaded, but only because it doesnt make sense for the bloom code as-is to be included in any releases (in part due to changes to bitcoinj that are also only just now happening). Also, the minute difference that this pull represents, IMHO, is really not something that merits a large discussion.
2188	12571525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12571525	gmaxwell	If youre bulk pulling the chain why do you need to serialize getting the transactions with getting the next block?
2188	12571951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12571951	mikehearn	It reduces memory requirements during chain sync. Anyway, I disagree that requiring a getdata is better. The node knows exactly what comes next after sending the filtered blocks. A getdata is superfluous. WRT "railroading". The code we have works fine. This tweak is not essential but simplifies the code on the client side when various changes that I just posted about to bitcoin-security are implemented. Theres no reason not to do it. More generally - perfect is the enemy of the good. Bitcoin does not have infinite time. It isnt something to polish in an ivory tower, after all, Bitcoin already came to the world in a far from perfect state. If SPV clients have acceptable performance 5 years from now it will be irrelevant, people will have either given up on Bitcoin or all be using ad-hoc protocols that talk to different kinds of servers, Electrum style. Forward progress is essential and these changes have taken too long already.
2188	12573412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12573412	sipa	As I didnt want to restart the discussion about this, I probably shouldnt have brought it up again. I believe the Bloom filtering was well thought-out, and the reason for sending transactions immediately was also clear. Reducing latency for mobile clients was a design goal, and that outweighs neatness. Im fine with this change (to be honest, I assumed this was how it was implemented in the first place). I just wanted to mention that the fact that we need to change something like this because of an implementation issue, makes me feel uneasy. But perhaps there are others who feel the same way...
2187	12427218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12427218	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2187	12611110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12611110	sipa	ACK
2186	12619413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12619413	Diapolo	I know that some core devs hate these pulls, but it contains only non-controversial changes and I see no reason to not pull it, as it cleans up some small (but real) glitches.
2186	12634515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12634515	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2186	12727928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12727928	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2186	12728782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12728782	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2186	12735292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12735292	sipa	ACK
2186	12735553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12735553	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2186	12752377	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12752377	Diapolo	Lets not discuss further, sipa ACKed, so just merge this, as there are 0 code-changes now :).
2186	12888249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12888249	Diapolo	Last rebase adds: - remove an unneeded MODAL flag, as MSG_ERROR sets MODAL - re-order an if-clause in main to have bool checks before a function call
2186	12888626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12888626	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2186	12889635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12889635	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2186	13210085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13210085	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2186	13999515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13999515	Diapolo	/merge me?
2184	12338010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12338010	laanwj	Nice! Its a huge pull request though; will take some time to look at it. BTW: seems there is a merge problem?
2184	12355424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12355424	CodeShark	The merge is actually not that horrible...
2184	12634817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12634817	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2184	24548230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24548230	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2184	24565969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24565969	Diapolo	Needs a rebase to keep up with autotools.
2184	24571959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24571959	CodeShark	Actually, I accidentally pushed this - I am no longer supporting this branch and will close the pull request.
2182	12251760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12251760	SergioDemianLerner	Line 3205 of main.cpp: if (tx.AcceptToMemoryPool(true, false, &fMissingInputs2)) doest look good. You are skipping any fee check for orphans to enter the memory pool. Then an attacker can easily penny-flood by creating a huge orphan transaction (with a single missing parent), and then releasing the parent transaction (that will pass the rate limit test because it is very small). It would be better to do: if (tx.AcceptToMemoryPool(true, true, &fMissingInputs2)). To keep a clear meaning, dFreeCount should be understood as the maximum OUTPUT bytes/second a peer can request from me, instead as maximum INPUT bytes/second a peer can send.
2182	12252556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12252556	luke-jr	You cant fee-check orphan transactions: without the parent, the value of the inputs are unknown.
2182	12267303	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12267303	SergioDemianLerner	When (tx.AcceptToMemoryPool(true, xxx, &fMissingInputs2)) is executed, then it means that at least one of their inputs have been received, so it may be complete. So it is correct to try to check the fees at that time.
2182	12267351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12267351	SergioDemianLerner	Look at the code surrounding line 3205.
2182	12268351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12268351	gavinandresen	Sergios correct, if we get a transaction that fulfills an orphans missing inputs, we should treat the orphan as if we just received it over the wire. Changed the true to a false, and fixed the comment and message for the "orphan now has all inputs, but is rejected by the free transaction ratelimiter" else clause.
2182	12622133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12622133	gavinandresen	Revised test plan: On PRE-PATCH bitcoind: Run testnet-in-a-box setup, with bc1 and bc2 nodes, both with -limitfreerelay=0 send a zero-fee transaction from bc2, sending coins to bc1 EXPECT: transaction ends up in bc1s memory pool (use getrawmempool to verify) Apply this patch, re-run test: EXPECT: transaction does not end up in bc1s memory pool or in bc1s listtransactions
2182	12632680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12632680	gavinandresen	Results of testing successful, but I did have to tweak the free-transaction code so limitfreerelay=0 did what I wanted it to do (it was letting the first free transaction into the memory pool).
2182	12637669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12637669	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2181	12242762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12242762	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2179	12229185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12229185	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2179	12236674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12236674	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2179	12283137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12283137	mikehearn	Nice. Should the cert/pubkey be in the source tree as well?
2179	12285768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12285768	gavinandresen	: good idea.
2179	12337087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12337087	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2179	12386957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12386957	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2179	12427917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12427917	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2177	12225380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12225380	laanwj	I didnt include any wallet statistics in the debug window (and didnt pass the walletmodel in) on purpose: to make it independent of any wallet, for example when multiple wallet support is added. Then again, if you think this is useful, these kind of things could be shown per open wallet, i guess...
2177	12226168	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12226168	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2177	12635489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12635489	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2177	15632989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15632989	laanwj	Btw, can anyone come up with something fun to add in the overview page? Were making it emptier and emptier, Maybe a graph or visualization or something? Or a minigame? (j/k on that last one)
2177	15659640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15659640	Diapolo	Agreed, the overview page could get some more details or new stuff... I have no great idea yet.
2177	15661708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15661708	schildbach	Less is more imho.
2177	15671682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671682	Diapolo	Your vote here, Just remove or move to debug-window?
2177	15671829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671829	schildbach	The main point is getting rid of useless (for the normal usecase) / confusing info on the main screen. Imho it can be useful on the debug window, but even then Id make it more clear that there are different ways to count transactions so the user needs to know which metric this is.
2177	15671997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15671997	Diapolo	The ``unique transaction IDs`` counts the IDs only once e.g. payments to yourself generate 2 transactions, but both share the same transaction ID. How is that metric called then ;)?
2177	15672072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15672072	schildbach	"Number of unique transactions" would make a good label for that imho. And I guess thats the number most developers (= users of the debug screen) will be interested in.
2177	15687308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15687308	laanwj	Im still for completely removing it, for the sake of minimalism (and due to conflicts with multiple wallet support).
2174	12202031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12202031	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2174	12203943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12203943	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2174	12335849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12335849	CodeShark	I was being facetious in my last commit, obviously...
2174	12337750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12337750	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2174	12635775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12635775	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2174	13121717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13121717	sipa	ACK if you squeeze the two commits together.
2174	16020325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020325	sipa	Can you please squeeze these together?
2174	18693407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693407	jgarzik	Poke
2174	19861256	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19861256	sipa	Please squeeze? *puppyeyes*
2174	19944985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19944985	sipa	ACK
2172	12191690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12191690	laanwj	ACK
2172	12199528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12199528	Diapolo	Updated to use just ``block database`` (instead block/coin database) to be better understandable for our users.
2172	12202263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12202263	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2172	12237370	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12237370	sipa	ACK
2171	12191646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12191646	laanwj	ACK
2171	12196482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12196482	sipa	ACK
2171	12202466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12202466	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2171	12455107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12455107	Diapolo	/merge me ;)?
2168	12133401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12133401	Diapolo	How much will this increase a nodes load / how much larger will the resulting database be?
2168	12141856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12141856	sipa	Around 500 MB extra in storage, and a lot of extra I/O. I didnt spend much effort optimizing this, as I dont consider this functionality a priority.
2168	12143294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12143294	Diapolo	Thanks, I was just interested in the technical base aspects :).
2168	12229257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12229257	mikehearn	Could you grab a service bit and make "getdata" use the new index too? Or is that too much additional work for this change?
2168	12229369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12229369	sipa	Im absolutely against making this available to the P2P network. If there is one thing I dont want services to depend on, then it is the availability of a fully indexed transaction history. If you really need one, fine, but maintain it yourself.
2168	12231368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12231368	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2168	12231508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12231508	mikehearn	Im not sure I see the issue. Yes you can make a node do lots of disk IO, but downloading the block chain does that too. Itd be nice to fix, but its not a new attack vector. Apps that need indexes like that will end up just using blockchain.info or various random other sites/protocols to get what they want. Its not like those apps will go away if the P2P network doesnt give them what they need.
2168	12236562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12236562	sipa	The only thing keeping history is necessary for, is bootstrapping fully validating nodes. However, that doesnt require an index (or even a Bitcoin node at all - it could be provided by an HTTP-based file service or other protocols - something that web has plenty of). Im sure that making a feature available on the P2P will result in infrastructure depending on it, something that would burden the nodes that provide archive data. Yes, making it an optional feature makes this much less of a problem, but I still prefer to be conservative with functions the P2P network provides unless there is a very clear use. As far as I know, all versions before 0.7.0 maintained a full tx-to-diskpos index, and there was no way at all to query it (not even RPC). Im quite sure this was a deliberate choice by Satoshi. In a mail about maintaining per-txout spendability of wallet transactions, he clearly said not to rely on the txindex for this, as it wouldnt always be available. EDIT: I dislike this feature as whole (even as RPC), as I think that services that are built not to depend on infinite history have better scalability. Its extremely useful for debugging though, so I added it. Im sure people will use it for other purposes as well, and thats clearly preferable to having them depend on a centralized service for it. Providing it via P2P doesnt add much to that, IMHO.
2168	12238992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12238992	mikehearn	OK, good points. Now I agree with you.
2168	12636041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12636041	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2168	12709241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12709241	gavinandresen	Test plan that Ill finish executing after lunch: Default arguments, getrawtransaction w. arbitrary old, not-in-your-wallet txid, fully-spent txn EXPECT: transaction not found Rerun with -txindex=1 EXPECT: startup fails with "must -reindex" message Note disk space used by blktree/ subdirectory Rerun with -txindex=1 -reindex=1 -logtimestamps=1 EXPECT: long background process to rebuild index (Q: how long?) Wait until "Reindexing finished" appears in debug.log, then: getrawtransaction <old txid> EXPECT: success Q: How much extra disk space ? Rerun with -txindex=0: EXPECT: startup fails with "must -reindex" message Note disk space used by blktree/ Rerun with -txindex=0 -reindex=1 -logtimestamps=1 EXPECT: long background process to rebuild index (Q: how long?) Wait until "Reindexing finished" appears in debug.log, then: getrawtransaction w. old txid EXPECT: transaction not found EXPECT: txindex disk space freed from blktree/
2168	12709506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12709506	sipa	RE test plan: * getrawtransaction without txindex should work for not-fully spent confirmed transactions, mempool transactions or transactions in the relay cache. For not-fully spent confirmed transactions, it may be slower than with txindex present. In general, without txindex I consider getrawtransaction to just work on a best-effort basis. * extra disk space caused by txindex will be in the blktree/ directory Otherwise the plan looks correct and complete to me. EDIT: -reindex doesnt cause a slow startup, the startup is always instant, but importing (and thus building the txindex) happens in the background.
2168	12720408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12720408	gavinandresen	Test results: success! Disk space: blktree/ 30M --> 600M Time to -reindex: (note: running -g build, no -dbcache set) 1 hour 50 minutes (same time, with/without -fullindex) Im going to pull.
2167	12097529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12097529	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2167	12196649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12196649	sipa	From what I read, this simply tells the OS that the application is prepared to deal with a >2GB address range. Not all Windows OSs/platforms support it, but enabling this flag should be a no-op for those. If someone can verify binaries built with this still work on a 32-bit XP, Im fine with merging this.
2167	12392222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12392222	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2167	12393361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12393361	Diapolo	Im going to try the pulltester binary with WinXP tomorrow :).
2167	12418847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12418847	Diapolo	Did an IBD with bitcoin-qt.exe, tried a wallet encryption and there were no errros, the client started and closed just fine as expected. Btw. it seems is using an older OpenSSL version then we do with Gitian.
2166	12096535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12096535	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2166	12197308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12197308	sipa	ACK
2165	12084503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12084503	laanwj	ACK on code changes, havent tested yet
2165	12084603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12084603	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2165	12093999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12093999	Diapolo	I intend to extend the addressbook context menu with an option to directly feed the send coins tab with address and label. This pull is nearly ready, but I thought it would be good to get this and the addrbook fixes merged before.
2165	12165196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12165196	Diapolo	added: - dont show QR Code context menu, when USE_QRCODE=1 was not specified when compiling the client This is related to #2170 and should fix that bug.
2165	12169156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12169156	Diapolo	added: - comments for all slots that are not related to a button (to ensure to not use a ``on_foo_clicked()`` format, which causes warnings from the Qt IDE)
2165	12202695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12202695	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2165	12543264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12543264	Diapolo	ping (seems 0.8 progress is speeding up, thats why Im pinging you more often ^^)
2165	12559014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12559014	Diapolo	This is the screen directly after starting the client and switching to the addressbook: ![1](https://f.cloud.github.com/assets/1419649/87452/4ffc9a72-64c2-11e2-9f23-28bc68c0fdc9.png) It seems like the first address is "somewhat" selected, so I tried to access the context menu via Keyboard, which works. Selected "delete" and nothing happened. This is really the only case, when I could create a "nothing is selected". When I delete an address there is indeed a situation, where really NOTHING is selected, but this case doesnt even allow to open the context menu. Now switching to send coins leads to his screen: ![2](https://f.cloud.github.com/assets/1419649/87454/9eafc1a8-64c2-11e2-9250-50ea63a30279.png) When I now try to access the context menu via keyboard there is NO "delete" action at all. So I really dunno how one can trigger a delete action for own addresses...
2165	12622513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12622513	Diapolo	My whish is to get your final decision on this, so we can get it into 0.8 RC :)! Your final vote counts.
2165	12623587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12623587	laanwj	I like to merge this because of the QR_CODE context menu... But Im still not really happy about the deleteAction. I dont see an obvious way to trigger it either, but explicitly disabling it is safer if, perhaps due to some other change, it suddenly becomes possible. Please try to make pull requests that solve reported issues, make the UI clearer/more pretty, etc, but not just massage and move around the code a bit, with the hope it will not introduce any new bugs.
2165	12623777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12623777	Diapolo	In that state I consider your vote a help, you say revert that deleteAction change and Ill do this asap :). Edit: I chose to revert that change!
2165	12625859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12625859	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2165	12626138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12626138	Diapolo	``cp: writing `out/test_bitcoin.exe: No space left on device`` seems not to be related to my last update!
2163	12066274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12066274	luke-jr	ACK
2163	12067044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12067044	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2163	12068216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12068216	gavinandresen	Fixed the misinformation about jenkins, added a link to Matts repo where the build scripts live (and rebased into one commit).
2163	12069764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12069764	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2162	12063301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12063301	gavinandresen	Tweaked based on tester feedback: output amounts with full 8-decimal precision, and support scripthash addresses.
2162	12409045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12409045	petertodd	Sent you a pull request for this,
2162	12683608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12683608	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2161	12060989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12060989	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2161	12066212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12066212	gavinandresen	ACK, but I think you should collapse the empty curly braces.
2161	12067863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12067863	sipa	done
2161	12068200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12068200	jgarzik	ACK
2161	12068251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12068251	jgarzik	I was thinking that we should archive satoshi code snippets somewhere, perhaps in contrib/ He did a bit of fClient work, emailed some code snippets to others, etc. Would be nice to collect the Not Used Yet ones, and not bury them in email boxes or git history.
2161	12068403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12068403	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2161	12235785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12235785	gavinandresen	: the fClient work is in the blockheaders branch here. The only code snippet I got from Satoshi is now merged (the signature cache).
2160	12038819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12038819	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2160	12058473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12058473	gmaxwell	Whats the motivation here? (I have no real objection to it its probably a good idea.. though our whole adjustedtime handling needs some love Im just curious what motivated it) (As far as love goes: we should probably forget adjustments from peers which we are no longer connected to and we should probably do something(???) to address the attack where we accept inbound and a hostile party makes 100 connections to us to push our adjusted time to the edge of the accepted window)
2160	12066773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12066773	gavinandresen	Here are the issues I think about for this seemingly trivial one-line change: Is adjusted time valid before youre connected to any peers? Check code: yes, will be current time. Are there any issues with calling GetAdjustedTime from multiple threads? Check code: nTimeOffSet in util is not protected by a mutex, so there could be an issue, although worst-case would just be an incorrect time reported fleetingly. Maybe we should protect nTimeOffset with a mutex; the assumption right now is probably that the only code that cares about adjusted time holds either the cs_main or a network mutex. Id have to spend a lot longer than Im willing to right now to figure out if that is true. Other than all that... seems like a good idea.
2160	12067823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12067823	sipa	Is the adjusted time that interesting? I think that the measured adjustment itself is more useful.
2160	12070411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12070411	petertodd	gmaxwell: I was just experimenting with nLockTime and noticed that there currently isnt any way to get the network adjusted time over RPC. (or even at all?) In theory a nLockTime-using application might care, but 1) none exist yet and 2) mining is too unpredictable for it to matter much and 3) whats more interesting is to know if your clock is probably way off. I added the data to getinfo simply because that seems to be the "general state overview" call, and it is in wallet.cpp so its at least vagely related to the end-user use-case. gavin: Whether or not the time is valid is irrelevant: the purpose is to know the value of GetAdjustedTime(). Regarding thread safety nTimeOffset is only ever set in two places in AddTimeData and in both cases its the correct value. On some 32-bit archs the two halves can be written separately, however the maximum range of nTimeOffset fits within 32-bits so it wouldnt be an issue except when transitioning from -1 to 0. (twos complement) Of course it could still be wrong, but with RPC latency youd still be wrong anyway. That said, its the kind of thing that could break in the future if the code changes. And yes, I should have thought about all of those issues first. :) sipa: Thats a good point and because it doesnt look like a time value people would be more likely to understand what the value actually meant before using it for something. I could just call it "timeoffset" and return nTimeOffset directly.
2160	12071381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12071381	petertodd	gmaxwell: Forgetting sounds reasonable. Regarding pushing: well, whats the big deal? The acceptance window is two hours, and AddTimeData doesnt allow nTimeOffset to be larger than +-70minutes. Lets suppose it gets pushed back as far as possible: on reception we reject a block with a time > 2 hours from now, thus so long as our clock is less than 50mins behind were ok. (the mining simply ensures the timestamp will be valid regardless) If the clock is pushed forward and were not mining nTimeOffset is irrelevant as the condition is for the block time to be simply > GetMedianTimePast(). If we are mining our blocks will be valid if our clocks are no more than 50mins ahead. Similarly that problem can be easily fixed by changing UpdateTime to never set the block time more than, say, an hour or something newer than the last block. (this assumes there isnt a large contingent of hashing power actually trying to increase the difficulty) Getting a bit off topic here, but I only just realized it... there isnt actually anything in Bitcoin preventing block timestamps from being too early other than collective miner self-interest... and while its a theoretical problem now, its conceivable that as the block reward drops to nothing the incentives to push the block timestamps backwards in time could get miners to do exactly that. Of course you just need one person to put a correct timestamp in, but it could make the trustworthiness of the timestamps more like within a day or two. It also could really throw a wrench in some of the niftier "item renting via the blockchain" schemes, although of course in that case you might see mining pools getting paid to put correct timestamps in the chain as well.
2160	12078086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12078086	gmaxwell	The timestamps must go forward eventually as they must be greater than the median of the last ten, and stacking them all up would make the difficulty skyrocket. Sadly, they cant really be /forced/ more tightly than that without endangering convergence. If it were ever an issue one could implement a soft (non-forking) that says nodes will delay forward a block from more than X minutes in the past for at least Y minutes or until buried by Z more blocks, causing delayed blocks to get orphaned. > whats the big deal? The acceptance window is two hours, and AddTimeData doesnt allow nTimeOffset to be larger than +-70minutes. Because abs(-70) + abs(70) = 140 which is greater than 120. This is a vulnerability. You can push a miner one way, and a merchant another way and make a merchant reject the longest chain to put them on a fork, a fork you can create by pushing a miner the same direction as the merchant (thus also rejecting the opposite sign miner). Its sort of a far out attack that isnt much worth worrying about, but it ought to be fixed.
2160	12141641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12141641	petertodd	Modified to return the offset itself.
2160	12636612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12636612	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2159	12037602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12037602	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2159	12039283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12039283	laanwj	Ack
2159	12045571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12045571	Diapolo	ACK
2157	11997697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11997697	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2157	11999520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11999520	Diapolo	Can you fix ``fatal error: error writing to /tmp/ccBCY0YL.s: No space left on device``
2157	12004064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12004064	laanwj	Cool btw: `add qSort() for cachedAddressTable, as qLowerBound() and qUpperBound() require the list to be in ascending order (see Are you sure this is needed? It should already stay in sorted order by picking the insertion positions carefully
2157	12006664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12006664	Diapolo	Take a look here, the unsorted list caused some weird issues for me. ![qSort](https://f.cloud.github.com/assets/1419649/50837/c9293020-59b6-11e2-8630-cc0b82c3b201.png)
2157	12013102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12013102	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2157	12043610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12043610	Diapolo	I consider this a rather important bugfix and would love to see it in 0.8. Ill try to get some bug-reporters, to test this.
2157	12050679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12050679	laanwj	Code changes are OK, but if some people can confirm that this solves their bug thatd be great :)
2157	12051772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12051772	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2157	12134122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12134122	Diapolo	Take a look at #1839, it seems this indeed fixes the problem.
2157	12390686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12390686	Diapolo	ping :-P
2156	11970649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11970649	luke-jr	NACK, this wastes screen space for no benefit (since values are always shown with the same unit). An option might be okay, but I cant imagine why it would be enabled unless/until Bitcoin-Qt supports displaying mixed units in the transaction list. Note that Spesmilo had options for these, so I am speaking here from personal experience having had these options available for months before Bitcoin-Qt was created.
2156	11970961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11970961	Diapolo	As always my pulls are offers, if they get discussed and NACKed / ACKed im fine, as long as there is some feedback :).
2156	11971130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11971130	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2156	11972022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11972022	laanwj	If you want to show units in a table, add (btc) to the header, dont repeat it every row thats very cluttered.
2156	11974811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11974811	Diapolo	You are absolutely right, bad idea here :).
2155	11958162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11958162	gmaxwell	In my own python scripts Ive never been clear about this and handt bothered to try to test it can the cast from Decimal to float and then transmission to bitcoind result in turning 1e-8 BTC to fees due to rounding?
2155	11960374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11960374	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2155	11960899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11960899	gavinandresen	Cast from Decimal to float will be safe as long as floats are 64 bits. Checking for that is a good idea: "information about the precision and internal representation of floating point numbers for the machine on which your program is running is available in sys.float_info." ... or maybe more straightforward (and more easily portable to other languages) would be a check routine that takes Decimal("20000000.00000003"), converts it to float, json encode/decode, and makes sure precision is not lost in the round-trip. mmm, yeah, json encode/decode definitely better, because the json float encoder might decide to round/truncate...
2155	11963999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11963999	gavinandresen	Closing this for now; I found a nasty bug doing more testing (on testnet-- using same address as input and output could lose coins to fees). Im going to rework to sanity-check fees on the final transaction and write a test plan.
2154	11954241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11954241	gavinandresen	Why namespace db_cpp ? Seems to me the database copy of pchMessageStart could be a static member of the DbEnv.
2154	11955199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11955199	CodeShark	Id rather avoid adding more dependencies in CAddrDB for something that isnt really used elsewhere.
2154	11955851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11955851	sipa	That doesnt make sense. This is for peers.dat, which doesnt use BDB at all, and I suppose CDbEnv will be gone as soon as we kick out BDB-based wallets.
2154	11958863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11958863	CodeShark	Im still not clear on exactly where in the code its best to: 1) set the magic bytes for CAddrDB 2) Set the call handlers for net.cpp I tried running and got this error: But tried restarting and it initialized correctly, and now it seems to be running fine.
2154	11961014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11961014	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2154	11974287	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11974287	gavinandresen	RE: namespace db_cpp: Fine, make it static in CAddrDB, I forgot that peers.dat is not a BDB file (and pass it into CAddrDB constructors? or is CAddrDB a singleton class? )
2154	11983843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11983843	CodeShark	Noted and done.
2154	11985144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11985144	CodeShark	cp: writing `out/bitcoind.exe: No space left on device cp: writing `out/test_bitcoin.exe: No space left on device WTF?!?!?! Shall we all chip in and get BlueMatt some more hard disk space?
2154	11995664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11995664	CodeShark	I am going to keep pushing commits as an extra backup despite BitcoinPullTester being out of disk space.
2154	11997567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11997567	Diapolo	I think you are doing good work, but Im sure you will get faster ACKs or merges, if you try to keep pulls smaller. Perhaps or other core devs can comment.
2154	11998020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11998020	gavinandresen	Our bottleneck is code review and testing. If you want your pulls to get merged, then you need to help fix that bottleneck-- either recruit reviewers/testers to review/test your own code, or volunteer to help review/test other peoples pulls. Or only refactor code that has good unit tests, so we can be more confident that nothing breaks on any of the three platforms we support. I am generally against refactoring just to improve the code, unless the refactoring comes with some significant benefit or unit tests.
2154	11998134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11998134	gavinandresen	Oh, also: you might want to help test or update which is a fully refactored version of the core code, that, last I checked, nobody used because nobody trusts it (because so many changes were made without thorough testing).
2154	12004408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12004408	CodeShark	The changes Im making will be well-documented and possible to rigorously review. And if more unit tests are needed, Id be glad to help write some up. Im making incremental changes, hopefully each change easy to understand and track. I havent changed any actual logic in the code nor implementation details - just moved code around - and in large chunks, not small pieces. As most of the significant changes thus far are things like moving methods from one class to another or turning them into regular functions, it should be possible to do a fairly comprehensive assessment by doing pattern matches on the codebase and making sure each usage was appropriately modified. i.e. tx.CheckTransaction() becomes CheckTransaction(tx); or tx.GetOutputFor(txin, inputs) becomes inputs.GetOutputFor(txin); etc...
2154	12005270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12005270	CodeShark	Also, Im willing to do comprehensive testing on earlier commits with the hope of getting them merged without having to merge everything at once.
2154	12016496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12016496	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2154	12017209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12017209	sipa	Just for the record: Ive been discussing these changes extensively with the past few days, and I think they are very valuable. They should make the code easier to understand and reuse. Getting 0.8 out now certainly has priority over refactorings, but as these are almost entirely just code-movement changes, merging them shouldnt be too hard.
2154	12024460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12024460	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2154	12033350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12033350	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2154	12610332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12610332	CodeShark	The core commits will be reorganized into four stages: - 1) move core class methods that should remain class methods implemented in main.cpp out of main.cpp and into core.cpp. (move) - 2) move core class method implementations in main.h that should not be part of core classes out of the class declarations in main.h. (move) - 3) turn methods that should not be part of the core classes into regular functions in main.h and main.cpp, get rid of the method prototypes in the classes, and add function declarations in main.h where necessary. (pattern replacement, add function declarations to main.h) - 4) move the core class declarations to core.h (move)
2154	12636618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12636618	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2154	12904904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12904904	luke-jr	Rebase needed
2154	12905016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905016	Diapolo	Im sure intents to rework this pull into smaller more logical pieces after 0.8 is final.
2154	18926011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18926011	jgarzik	OK, very much like where this code is going. ACK 90% of it, modulo inline comments made earlier. One specific criticism with this rebase: the rebase problems were all fixed in a final, appended commit. That does not work, because it breaks bisection properties. Each commit needs to produce a tree that is buildable and passes tests. Otherwise, "git bisect" will not work, and attempting to find a problematic commit in past history becomes more difficult. I know that makes rebasing more difficult for changes like this, sorry :( We cannot have: broken commit, broken commit, broken commit, commit that fixes everything.
2154	18926293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18926293	sipa	Im very much in favor of the code changes here (and they look move-only to, apart from the registration functions). Its only a first step, but its a very needed one IMHO. I agree with the comment about the last commit fixing everything, but apart from that, Id like to see this merged soon. Since now seems the ideal time for this, I dont mind holding up other pullreqs for a short time, so this can get reviewed and finalized.
2154	18926462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18926462	jgarzik	Agreed, RE holding other pullreqs, to avoid the endless rebase pain on s part.
2154	18953522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18953522	CodeShark	Ill try to get this done today.
2154	18968056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18968056	CodeShark	All the commits build with make -f makefile.unix now. Still left to do: - Move CBlock to core - Remove main.h include in net.cpp. - Unit tests
2154	18975027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18975027	CodeShark	The unit tests have run successfully on all the commits in linux. Need a few more eyes to review for correctness and some help with a few more tests on other platforms. As for the other two things I had listed as TODOs - moving CBlock to core and removing the main.h include from net - Id rather merge what we have now and do these things later.
2154	18975560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18975560	jgarzik	OK, looks pretty good. ACK everything except the indirect function pointer stuff. Definite NAK on the function pointers. Lets fix that up, and we can get this merged.
2154	18976753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18976753	CodeShark	What do you suggest in place of the function pointers?
2154	18977111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18977111	sipa	Not sure you see the reason for those indirect pointers. They are there to break the dependency of net on main, and seen as such it seems perhaps weird, if the only user of net is main for now. However, over time, net should turn into a class "CNetworkNode" or something, which exposes a way to listen for events. I suppose a boost::signal could be used right now instead, which more clearly shows its intention. And please, the overhead of a pointer indirection is few orders of magnitude lower than even just allocating the buffer in which a message being processed is read...
2154	18977190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18977190	CodeShark	If theres any reasonable critique of the function pointers its about style, not performance. A more general-purpose messaging system would be very nice - but in absence of a clear design, at least the function pointers avoid any dependencies on outside libraries.
2154	18977837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18977837	gavinandresen	Id also prefer boost::signals2 over registering function pointers. Were already using them elsewhere in the code, and it is exactly the type of decoupling they are designed for.
2154	18978497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18978497	laanwj	Agree with Gavin on boost::signal2, lets avoid raw function pointers in c++
2154	18978640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18978640	CodeShark	Very well, I agree its a cleaner solution.
2154	18983753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18983753	CodeShark	Ill add signals later today...
2154	18996278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18996278	sipa	Just so this isnt forgotten: just noticed this doesnt update makefiles (yet)
2154	19019106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19019106	robbak	ACK for FreeBSD - this branch builds and runs clean with the standard FreeBSD adjustments. On 6 June 2013 04:13, Pieter Wuille <notifications@github.com> wrote: > Just so this isnt forgotten: <https://github.com/TheUni> just > noticed this doesnt update makefiles (yet) > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2154#issuecomment-18996278> > . >
2154	19021448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19021448	CodeShark	I have deliberately avoided putting anything in core.cpp to avoid makefile issues for this merge. Eventually, it will probably make sense to move some of the code in core.h into core.cpp.
2154	19024477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19024477	CodeShark	When I had worked on this originally, net.cpp was calling StartShutdown directly. Happily, this has since been removed. I had overlooked the fact that ProcessMessages was still being called directly from net.cpp. Ill fix the appropriate commits once everyone agrees with the messaging approach.
2154	19024746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19024746	sipa	Youll still at least need to add core.h to bitcoin-qt.pro, and while youre on it, I dont see any harm in adding core.cpp to the other makefiles too - thatll make it easier to move stuff there in the future.
2154	19026897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19026897	CodeShark	done core.h/core.cpp will have to be considered in what youre doing
2154	19028913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19028913	CodeShark	Sorry, hit the close button by accident.
2154	19029536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19029536	CodeShark	Alright - code freeze until merge.
2154	19097651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19097651	sipa	ACK. Code changes look good to me, and Ive tested syncing/mining/receiving/sending on testnet. I have a few inline comments left, but those can be dealt with in follow-up commits, so we dont need to stall the merging process too long.
2154	19171474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19171474	laanwj	Ive tested this commit on testnet, no problems found.
2153	11927472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11927472	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2153	11928275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11928275	laanwj	wow, did this cause rendering issues?
2153	11928818	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11928818	Diapolo	AFAIK there were no rendering issues, at least I didnt observe any on Windows.
2152	11927219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11927219	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2152	11927258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11927258	petertodd	"sipa: leveldb is included in the bitcoin sources" <- closing
2151	11923860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11923860	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2150	11914145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11914145	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2149	11902239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11902239	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2149	11902736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11902736	luke-jr	This is changing things in the wrong direction. BTC values should be changed to amounts.
2149	11903436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11903436	gmaxwell	The non-integers in the API needing special json handling does stink wittness my complaints about the python modules inconsistent use of decimal... but that no reason to make the API inconsistent.
2149	11904428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11904428	sipa	I am all for using satoshis expressed as an integer, or amounts encoded as strings in the RPC interface. But consistency is more important. I hope we can one day do a nice "RPC v2" with consistent names, nicely separated calls for net/wallet/blockchain, with support for multiwallet and authentication, and amounts that dont rely on floats, though.
2149	12236030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12236030	gavinandresen	ACK
2148	11861995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11861995	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2148	11889630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11889630	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2148	11915429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11915429	laanwj	ACK
2148	12304731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12304731	luke-jr	Is there some background to this? I dont understand why...
2148	12305880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12305880	robbak	The client estimates the current block count by averaging the block counts of connected clients. When you have just received the latest one, then your block count can be above the average. Nothing to see here, move along. On 16 January 2013 14:43, Luke-Jr <notifications@github.com> wrote: > Is there some background to this? I dont understand why... > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2148#issuecomment-12304731>. > >
2147	11862529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11862529	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2147	11915472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11915472	laanwj	ACK (apart from my code comment)
2147	11923637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11923637	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2145	11848411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11848411	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2145	11849681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11849681	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2145	11851050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11851050	jgarzik	ACK
2145	11857317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11857317	gmaxwell	Some problems with making reindex automatic is that reindex is quite burdensome and intrusive so you may want to control when its run, and the other problem is that making it automatic may hide hardware or software errors that can also cause silent failures. A failure of this test is something which _should_ never happen, even if the user is randomly powering off their machine.
2145	11859424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11859424	gmaxwell	So, I see that setting dbcache really large doesnt check more than 2500 blocks by default. Thats good wouldnt want a long startup time. But setting dbcache to 0 results in it checking very few. Im not sure that this is a good idea. Im also seeing some odd memory usage behavior. Starting with -dbcache=4000 -checkblocks=0 results in an RES of 2.3 GiB once the check is finished. I also found 2013-01-03 20:18:52 Verifying last 215017 blocks at level 2 2013-01-03 20:23:16 No coin database inconsistencies in last 31137 blocks (6770582 transactions) a _little_ odd, since that its actually doing is checking 215017 at level 0/1 and checking 31137 at 2. Should the undo data also get checked at level 1? Obviously if its broken it will break the level 2 tests, but since we do the level 2 tests on fewer block, some specific undo tests might make sense? (e.g. we could count the txins in the block and the undo data)
2145	11869901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11869901	sipa	there is a trivial undo test possible: verify their checksums. However, how meaningful is it to check undo data without checking the coin state - there is no scenario in which you need undo data but not coin state. In way, the system is backwards. The coin state is by far the most important thing to verify, but unfortunately it is also almost the most expensive, and it already requires consistent blocks and undo data. Regarding only checking very few with low dbcache... what would you suggest? Also, the calculation for memory sizes based on transaction counts is only very approximately and spread over several types of caches (leveldb blktree, leveldb coindb, coins view cache). Doing the rollback pulls the transaction data in the global cache, and then changes to it in a memory-only cache on top of it, that is discarded. The transactions themself remain in the global cache though, afterwards.
2145	11869999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11869999	sipa	such a flag would be possible, but why add it? The next startup the database will most likely still be inconsistent, so it would be detected again (and if it isnt, maybe it was something temporary...). For GUI users, I would like to see something like "Your database is corrupted. Do you want to rebuild it now, or exit?". For bitcoind I think the right approach is indeed quitting immediately with an error message instructing the user to restart with -reindex, so they can run the rebuild on their own terms (or perhaps copy a database from another instance or backup they have running).
2145	11870019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11870019	sipa	Suggestions for better reporting are welcome :)
2145	11874343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11874343	gmaxwell	The reason I suggested a basic check of undo data is simply because unless dbcache is very large we test far fewer blocks at level 2 and there is currently no way to do even basic checking of all the undo data. This means that if dbcache is set small, we may not discover corrupted undo data which could be trivially discovered, until a reorg. For small dbcache values we could give it a minimum value... or could make it always some reasonable number even if we go over our coincachesize limit? I really wish there were a way to randomly test the coins database as I expect the leveldb disk layout probably ends up with old and new data being exposed to different errors. Oh well. In any case, tested with fuzzed undo (with and without undo checksums) and coins data. Its quite sensitive to errors. After running it some with a corrupted leveldb and corrupted undos, after restoring the non-corrupted files, Im getting 2013-01-04 07:09:47 ERROR: DisconnectBlock() : block and undo data inconsistent 2013-01-04 07:09:47 ERROR: VerifyDB() : *** irrecoverable inconsistency in block data So either I screwed up, or the corruption was somehow propagated to other files. I note that many of the error messages are repeated, so I cant easily tell which test failed. If giving them distinct messages is too much work, perhaps just slipping in __FILE__ and __LINE__ would be helpful. (though this isnt an issue in the codebase unique to the checking pull)
2145	11883622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11883622	sipa	Ive added a new level in between 1 and 2 (which verifies undo data). Ive also changed the heuristic for determining how far to roll back a bit - it now aims for using +- 5-10 MB extra for validation, even with very small dbcache.
2145	11884387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11884387	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2145	11894681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11894681	gmaxwell	ACK ACK ACK
2145	11922004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922004	sipa	Well the reported messages are still confusing. Its not actually checking 2500 blocks at level 3...
2145	12146073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12146073	gmaxwell	Because this increases our sensitivity to corruption so much, Id rather pull now and get the messages just right in another pull.
2143	11836352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11836352	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2143	11923977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11923977	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2143	11928273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11928273	laanwj	ACK
2142	11810765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11810765	Diapolo	Compiles fine, no obvious weird behaviour, while doing IBD and such.
2142	11812660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11812660	laanwj	ACK
2142	11836493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11836493	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2142	11922080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922080	sipa	ACK
2141	11836657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11836657	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2141	11913681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11913681	Diapolo	Can please some other core dev merge translations updates, as seems to have not that much time to participate. I dont want to get in a hurry before we do 0.8 RCs as translators need time to catch up!
2141	11913841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11913841	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2131	11734974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11734974	sipa	Updated.
2131	11836841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11836841	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2131	12422487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12422487	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2131	12598031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12598031	gavinandresen	I think this goes one step too far. Some almost-baked thoughts on the problem were actually trying to solve (wed like transactions ids to be immutable): I think this ties into a bunch of other almost-baked thoughts Ive had surrounding bumping the transaction.version. I think it might make sense to introduce transaction.version=2 messages onto the network, with additional rules for relaying/DoS-banning. In particular, Im imagining a signature from one of the keys used to sign the inputs (maybe.. . more thought needed on how the signing is tied to the transactions creator) that covers the transaction id and transaction fee paid. That should solve the "relayer modifies the signature to change the txid". (the transaction fee paid would be to help out SPV clients, which is a separate feature)
2131	12636926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12636926	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2131	12637027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12637027	gmaxwell	DOS rules dont prevent a miner from modifying a transaction. We really do need to actually remove the malleability. ... though the actual enforcement would need to be on a version=2 transaction.
2131	13121681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13121681	sipa	I really dont like the fact that this would mean rules at the transaction validation level would need knowledge about the precise inner script semantics. IMHO, we should just gradually introduce rules to remove malleabilities, and then perhaps use tx.nVersion==2 rule to enforce them in the block chain at some later point.
2131	21091621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21091621	luke-jr	Needs rebase (or close if it was merged in another form?).
2131	22735066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735066	sipa	Rebased. opinions?
2131	22735438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22735438	gmaxwell	Without this, or a substantially similar, change we cannot eliminate malleability attacks on unconfirmed transaction chains. Though I almost wish the evenness procedure had been specified in BIP32, as now were going to see hardware wallet deployed that produce odd signatures. They can be fixed with an after the fact mutation, so perhaps thats not the end of the world.
2131	22737406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22737406	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2131	22740291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22740291	gavinandresen	ACK.
2130	11837016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11837016	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2130	11922368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922368	sipa	Many of your TODOs look like todos for yourself rather than concrete plans for changes in the source code - leave those out. If there is a concrete plan, and its obvious: just add a commit that actually implements the change. If its something big youd rather leave for a follow-up pull request, a TODO in the code is fine. Also, squash some commits together. "Indentation fix" certainly doesnt require a separate commit.
2130	11922553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922553	mikegogulski	Okay, I stripped out the todos. Should I squash everything in this branch down to one commit in order to get it pulled? (total git noob here)
2130	11922709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922709	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2130	12636933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12636933	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2130	12904881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12904881	luke-jr	Rebase needed
2130	19703713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19703713	jgarzik	Poke The general sentiment towards these changes seems positive. Lets rebase and get this moving, or close.
2130	21090978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090978	luke-jr	Ive rebased this as my mikegogulski_walletencap3 branch. It does, however, create a dependency from wallet.cpp -> main.h; I dont see any obvious way to fix this, considering that IsFinalTx is not tied to any class.
2130	23221198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221198	jgarzik	Closing - non-responsive. Feel free to rebase and reopen.
2129	11692233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11692233	gavinandresen	ACK, but there should be a comment in the code explaining the +1
2129	11837172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11837172	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2129	11922383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922383	sipa	ACK
2128	11679669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11679669	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2128	11688501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11688501	Diapolo	I like the introduction of that variable, which holds the value ``Bitcoin``, Im unsure about the switch from local user to local machine. What is the benefit here? I also think NOT requiring Admin privileges is far more user friendly, as perhaps some use the client on machines, where they simply have none. Edit: Can you have a look at #993 while you are working on this :)?
2128	11688955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11688955	gavinandresen	Can you write up a test plan? Something like: Test installing on top of an old installation, and then uninstalling. EXPECT: all installed files and registry entries removed (but data directory: blockchain and wallet files: left intact). Note for testers: Run regedit and look for registry keys {....???....} to verify. Test installing a new version, then installing an old version on top. EXPECT: ... etc... Test: install as non-privileged user EXPECT: ... etc ... Test: install as admin, run as admin EXPECT: ... etc ... Test: install as admin, login as another user EXPECT: ... ??? ...
2128	11702445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11702445	da2ce7	Yes, having user local installs would be great. However to provide that functionally the nsi install scripts are much more complicated than what we have now. Ideally the installer will only as for permissions as it needs them. (For example a user local install will not require any escalation of privileges). Unlike an all-user install, that would escalate to admin. Unfortunately, making a nsi installer that provides that sort of functional is quite hard.
2128	11702478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11702478	luke-jr	Im not sure user-local installs are a real concern, considering that itd be a pretty bad idea to use Bitcoin on a system where anyone else has administrative controls...
2128	11746360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11746360	da2ce7	Is it possible for the build bot to create the nsi installers?
2128	11769639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11769639	Diapolo	We have no build bot (Gitian), which handles this nsi stuff AFAIK.
2128	11837388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11837388	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2128	11922395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922395	sipa	Ping me here, and Ill do a gitian build of your branch.
2128	12637245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12637245	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2128	12642212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12642212	qubez	Vista and after support %LOCALAPPDATA%, which is the non-roaming data store (on XP and prior NT-based OS, the corresponding local data is %USERPROFILE%\Local Settings\Application Data). As an example of use, this is where Google Chrome installs its program and user data. Google doesnt care about your admins silly "install program" policies or writing software that is Microsoft compliant, they are more than happy to install to and execute from this user-writable data store. As an aside, Bitcoin stores user data in the wrong location: To reduce exposure to "evil system admin" and make Bitcoin not break the enterprise environment, we must consider that %APPDATA% is a ROAMING profile location - when a domain controller is configured for roaming profiles (log into a different computer and your files are there too) all program data stored in this tree is replicated to the remote profile store. This creates two problems: -Replicating gigs of "roaming" blockchain and using up users quota, -Copying the wallet all over the network to other computers that the domain user logs in to. A wise Bitcoin would use the non-roaming directory if %APPDATA%\Bitcoin is not present, or even better, migrate if it is.
2128	18693744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693744	jgarzik	Rather than hardcoding the decision, can we ask -- as some installers do -- whether to install for (a) current user or (b) all users?
2128	18717404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18717404	da2ce7	Im not sure how to do that. However this pull request is better than the broken behavior that the current installer has on some windows environments.
2128	18725083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18725083	goldbit89	so is the pull request going to be a admin only install or will it be a multi-user or current user install only?
2128	18734922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18734922	da2ce7	Only the Administrator will be able to make changes to the Bitcoin install files. (Install, Update, Remove) However all users will be able to use bitcoin, and have their own interdependent %APPDATA% user files (Wallet, Blockchain).
2128	19703886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19703886	jgarzik	ACK changes conceptually. Lets get this tested, especially on multiple Windows versions.
2128	20862887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20862887	da2ce7	Rebased.
2128	21292039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292039	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2128	26688014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26688014	gavinandresen	Needs a rebase and a test plan written and tested on at least two versions of Windows (oldest we support and newest).
2128	28204997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/28204997	laanwj	Closing this pull as it has been inactive for a long time. I also dont really like requiring admin rights to install, this has always annoyed me for other software in the rare cases I had to use windows. In any case: please ping me or open a new pull request with a rebased version if anyone still wants to get this merged in some form.
2126	11649149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11649149	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2126	11649463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11649463	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2126	11948902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11948902	darkhosis	I like it. I already modified the source myself to include the IPs that were requesting blocks (so I could tcpkill the lunatic clients).... I remember asking about that in the dev channel and they prefer not to have the IPs show up. I run a bitcoind (or two) on my home connection from time to time & with my CPU and 32GB RAM, if I have 200 connections, I can see about 100 of those block requests... but with a max of 1536kbps upstream, they arent going anywhere.
2126	12637988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12637988	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2126	12901788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12901788	luke-jr	As darkhosis mentioned, logging IPs by default is a bad idea since it makes Bitcoin users targets for crackers who want to abuse the information.
2126	12905151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12905151	Diapolo	Agreed
2126	12924727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12924727	rebroad	Ill edit to remove the IP address logging... Will close until this is done.
2125	11646550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646550	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2125	12638323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12638323	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2125	16324499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16324499	sipa	Can you test whether this is still needed, after the recent network changes?
2125	16324526	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16324526	jgarzik	It seems unneeded, AFAICS
2125	16325446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16325446	sipa	Yes, I also dont see what this should help with, but rebroad seems to have unusual network problems of some sort, so I still wonder whether perhaps those improved because of the recent network changes.
2125	17772701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17772701	rebroad	yes, this still is useful after your network changes. This patch is still providing me with valuable functionality - especially when combined with #1382
2125	17774767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17774767	sipa	Can you explain what exact difference in behaviour you notice?
2125	18693941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18693941	jgarzik	Agree w/ Please explain *precisely* what behavior differences and problems are being seen. "still useful" is insufficient :)
2125	19703974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19703974	jgarzik	Closing. Happy to reopen, if behavior differences can be specifically quantified.
2123	11634441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11634441	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2123	11639160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11639160	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2123	11688846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11688846	Diapolo	Im interested in how that analyzer outputs found stuff, can you perhaps post that? As Im on Windows its not that easy to get such stuff working over here ;).
2123	11698994	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11698994	apoelstra	On Linux, you can get the analyzer to run by adding CXX=clang++ --analyze right above the "LINK=$(CXX)" line in makefile.unix, then do a full build. It will output its warnings as though it were a compiler (though it wont actually compile anything). Im not familiar with the Windows build process, sorry.
2123	11915547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11915547	laanwj	Ive also seen these warnings by the analyzer, but Im not so sure about removing the code. Its there to make maintenance easier (ie, will make it somewhat more robust when adding code by making sure hSOCKET will never have an invalid value, and nSize will always be up to date). Compilers are generally smart enough to remove dead code like this in the binary.
2123	11922670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11922670	sipa	agree with Being able to get useful information through a static analyzer is nice, though.
2123	11923600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11923600	Diapolo	It would be indeed better to keep these 2 and so Im fine with just closing this.
2123	12236472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12236472	gavinandresen	Closing this, I like the belt-and-suspenders easier-to-maintain code.
2121	11605549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11605549	CodeShark	Sorry, guys - I changed the branch names and it closed the original pull request The pull request remains open but under a new name.
2121	11654887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11654887	CodeShark	A multiple wallet version of bitcoind is underway: That branch will eventually be merged with this one. In order to distinguish spendable wallets from watch-only wallets, a new member will be added to the CWallet class as well as a new corresponding value to the database file. The CWallet methods as well as RPC calls will then be able to distinguish between the two cases and exhibit the correct behavior.
2121	11667391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11667391	mikegogulski	OMG this is great!
2121	12638905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12638905	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2121	16070503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16070503	jgarzik	Neat. Im surprised it was this easy.
2121	17119482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17119482	sipa	Just a remark so we dont forget (I havent checked whether its possible with this implementation): itd be nice to have a way to include arbitrary P2SH addresses as watch-only
2121	19705409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19705409	jgarzik	Looks pretty good. Minor nit: "label" is deprecated in favor of "account." The help text must be changed. And if you are going to change the help text, go ahead and name the var strAccount as other, new code does. Would like to see this merged.
2121	19707446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19707446	sipa	Yes, please rebase. Regarding labels vs. accounts - I consider them separate things, which incidentally (and regrettably) overlap (if an address A has label L, payments to A will credit the account also called L). In this case, similarity with the existing API (importprivkey) is more important in any case, so I prefer seeing it called label.
2121	20089823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20089823	ryny24	is it possible to download and test this modification? Id love to try it. Cant seem to select this branch
2121	20750593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20750593	kyledrake	I would love to see this rebased and merged! Im going to be using this functionality for an upcoming new version of [Coinpunk](http://coinpunk.org), to support client-side encryption for private keys, so that `bitcoind` becomes a listener, and cannot spend any of the users money. This is a huge linchpin in my new version, and it enables this capability for people developing web services and offline clients that use a central `bitcoind` instance to keep up with the blockchain while they are offline. And of course cold storage wallets that generate the private keys on their own end. I wont be able to release the new Coinpunk until this is released, so it would be amazing if this commit could get into the next release. I dont think its too dangerous, just because I believe its not handling anything that could potentially lose bitcoins, but I could be mistaken. But it would be awesome. Let me know if I can help in any way. Thanks, you guys are awesome. :-)
2121	20794229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20794229	kiaya	Id also love to see this make the next release. I have a project where I need to watch a large number of addresses without having the private keys on the server. I think the pull request would solve my biggest current development challenge.
2121	20794862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20794862	tstranex	Just thinking about an alternative to this: Set a wallet passphrase so that all the private keys are encrypted and then write a separate utility to overwrite the encrypted private keys with zeros in the wallet file. Since bitcoind is not going to access the keys anyway while theyre encrypted, it shouldnt matter that theyre actually zeros. So that will effectively produce watch-only addresses. However, it still wouldnt be possible to add new watch-only addresses via rpc, which this patch can do. By the way, could a slightly cleaner implementation of this be to store watch-only addresses as normal keys (except where the encrypted private key is cleared) instead of adding the new "address" data type in the walletdb?
2121	20795381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20795381	kiaya	Thanks for this, tstranex. I hadnt considered that. I might look into this as a fall back. In my case, Im using vanity addresses so actually dont need to create addresses via RPC.
2121	21090451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21090451	luke-jr	Needs rebase. Although I dont think this makes sense to merge until we have HD wallets and it can be an entire read-only address-chain...
2121	21094840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21094840	kyledrake	I compiled and tested this code, and it seems to work fine. Does it collide with HD wallets? If not, I would really like to advocate for getting this in. I strongly believe that this code solves a critically urgent security problem. Without this code, Im concerned that we may get more services that put private keys on servers simply because they have no choice, which could lead to more major thefts, which could contribute to undermining the soundness of the Bitcoin ecosystem. The last thing Bitcoin needs right now is another high profile wallet theft fiasco. This is a very important and very significant security upgrade, that I believe will dramatically lead to the improvement of security across the board, for many different types of applications. To provide analogies, this could be as important to bitcoind security as ProPolice was to buffer overflow prevention, or PBKDF2 was to password hashing. Please consider including this in the next release of bitcoind. Do it for the people that have lost a lot of money to server wallet thefts. *Do it for the children.* :wink:
2121	21095113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21095113	luke-jr	HD wallets should solve all of those issues, thats my point ;)
2121	21185979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21185979	kyledrake	Im cool with HD Wallets, but HD Wallets are a long way away. This is a light, simple patch to solve a very big problem, that enables some major new infrastructure for bitcoin. I tried to rebase it and I got very close, I think someone with knowledge of the bitcoin source would very easily be able to rebase this. The biggest hurdle was the (I think?) refactor of `keystore.cpp`. The rest was just really simple merges.
2121	21186922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21186922	kyledrake	So here is my rebase attempt: It fails to compile on this: ``` llvm-g++ -c -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -g -DMAC_OSX -DMSG_NOSIGNAL=0 -DBOOST_SPIRIT_THREADSAFE -DUSE_UPNP=1 -DUSE_IPV6=1 -I/Users/kyledrake/bitcoin/src/leveldb/include -I/Users/kyledrake/bitcoin/src/leveldb/helpers -DHAVE_BUILD_INFO -I"/Users/kyledrake/bitcoin/src" -I"/Users/kyledrake/bitcoin/src"/obj -I"/opt/local/include" -I"/opt/local/include/db48" -MMD -MF obj/keystore.d -o obj/keystore.o keystore.cpp keystore.cpp: In member function bool CBasicKeyStore::AddKey(const CKeyID&): keystore.cpp:34: error: CSecret was not declared in this scope keystore.cpp:34: error: make_pair was not declared in this scope make: *** [obj/keystore.o] Error 1 ``` Apparently CSecret has gone away.. any ideas on how to fix this?
2121	21188742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21188742	luke-jr	I think CSecret became CKey (and the old CKey become CPubKey). HD wallets IIRC are planned for the next release.
2121	21189019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21189019	sipa	CKey and CSecret were merged. CPubKey is still CPubKey but inherited some of the pubkey-only functionality of the former CKey. I consider this a very useful feature, and its orthogonal to HD wallets. Sure, BIP32 specifies a derivation that can be useful for watch-only wallets, but it still needs to be implemented.
2121	21190332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21190332	kyledrake	Do you have any free time this week to look at this? I think its a really super easy fix for you because you are very familiar with the code (and awesome). I think I got pretty close, I just dont know any C++ and Im completely unfamiliar with the bitcoin keystore plumbing.
2121	21193634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21193634	runeksvendsen	FYI this patch compiles successfully against ec0004aca0a2bf11f99c9587ddb2bf8ea818d3bb. Ive tested `importaddress` with `listtransactions` and `getbalance` and it agrees with blockchain.info.
2121	21292048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292048	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
2121	21562875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21562875	kyledrake	For those of us in the bitcoind camp using an old unstable master so we can get `importaddress`, I have merged `importaddress` with hint of ec0004a here: Since I posted on this pull request, I have gotten emails from people using this commit **in production**, because there is no other alternative. Which makes me excited about its potential to improve bitcoin security, but also terrified because they are using it with unstable bitcoind. It would be really great if someone was able to look at this, I really doubt it would take more than a few hours for a seasoned member of the glorious, highly talented bitcoin development team to resolve the merge conflicts on it (@sipa?
2121	21591425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21591425	sipa	Have a look at #2861.
2121	21666382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21666382	meighti	It would be nice to add a feature in the code to easily or automatically LOCKUNSPENT all unspent coins of the imported watch-only address. Not to mention that those coins are not spendable without privkey. In shell I run this: bitcoind lockunspent false $(bitcoind listunspent 0 9999999 ["12c6DSiU4Rq3P4ZxziKxzrL5LmMBrzjrJX"] |tr -d \n)
2121	21793102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21793102	jgarzik	Superceded by #2861, closing.
2120	11597904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11597904	gavinandresen	Tested in a testnet-in-a-box setup, sent 10 random 1-ouput transactions (sendtoaddress) and 10 random 2-output transactions (sendmany), then used getrawtransaction to make sure the change outputs were random.
2120	11598147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11598147	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2117	11555872	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11555872	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2117	11556493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11556493	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2117	11556803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11556803	luke-jr	How do you control whether the Bitcoin client includes the address in balances or not? I think it would be helpful to be able to watch addresses without considering them your own.
2117	11558519	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11558519	CodeShark	Right, so there are two solutions I see here: 1) Ignore nonspendable outputs from balance calculations for sending transactions and add an option to the getbalance method (or add another API call) to distinguish between total balance and spendable balance. 2) Add support for multiple wallets and require a wallet to either be 100% spendable or 100% unspendable. It will probably also be necessary to add another field to the returned JSON for certain calls that states whether the addresses are spendable or not. I would prefer to have a completely separate structure for verification/tracking/ultrapruning of transactions and have the wallet just deal with private key storage and transaction signing. But that would require too many changes to get it integrated quickly. I think either of these two solutions is a reasonable compromise for now, the second one perhaps being more powerful and simpler from a usage perspective.
2117	11558600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11558600	luke-jr	Probably option #1 is best, so there can be "this is mine, and I have the private key somewhere else (so prompt me for it when I need it)" too
2117	11558666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11558666	gmaxwell	Not just "prompt me" but we should actually store some kind of token which is returned. Unfortunately pretty much none of our private key using APIs are setup in a way that would reasonably work with them returning need private key with token foo.
2117	11568959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11568959	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2117	11569693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11569693	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2117	11578670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11578670	rebroad	I think a feature to have a number of balances would be ideal, and that way the user can choose which addresses to includes in which groups of balances. Either this, or just have a default separate balance for the offline (i.e. public only) addresses (well, two, one for unconfirmed, and one for confirmed).
2117	11579803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11579803	sipa	I think that would make things too complex for users. Ideally, wed just have multiwallet support and watch-only wallets, without per-address spendability.
2117	11600856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11600856	CodeShark	As to not break compatibility with the existing RPC calls, Im thinking we can have a main wallet which is always used as the default wallet. If the user wants to use a different wallet, the name of the wallet would have to be specified in the call. Unfortunately, it doesnt look like we can use many of the existing RPC calls (sendfrom, sendmany,sendtoaddress, etc...) since they all have optional parameters already and it would be awkward to just tack on the wallet name parameter at the end. Also, walletpassphrase is problematic as it is not stateless. So it looks like we need a whole separate set of calls which require a wallet name and passphrase (if the wallet is encrypted). For instance, walletsendtoaddress <walletname> <passphrase> <bitcoinaddress> <amount> [comment] [comment-to] This is one of the unfortunate things about relying on parameter order rather than key-value pairs.
2116	11527260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11527260	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2115	11522484	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11522484	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2115	11535582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11535582	sipa	I think it would be better to have CreateNewBlock construct some meta-data object with fees in it, which can be used by getblocktemplate. EDIT: this definitely needs fixing of course, but it seems silly to have GBT redo the fee calculation in an incomplete way, when CreateNewBlock perfectly knows all fees.
2115	11546446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11546446	luke-jr	No reason it cant be optimized after merging this fix, IMO.
2115	11546507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11546507	forrestv	/me is working on having CreateNewBlock return fee data in addition
2115	11548360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11548360	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2115	11548921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11548921	forrestv	Okay, CreateNewBlock now returns a CBlockTemplate struct that contains the block and fee and sigop data.
2115	11549482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11549482	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2115	11557268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11557268	sipa	Code looks good to me. Ill do some testing soon.
2115	11871204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11871204	sipa	ACK
2115	11871263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11871263	gmaxwell	Been running this for almost two weeks on a node. Did basic sanity checks. ACK.
2115	11871857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11871857	jgarzik	ACK
2115	11872928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11872928	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2114	11512769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11512769	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2114	11539679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11539679	petertodd	Is the specification of the format signatures follow easily available? I assume its an RFC or the like somewhere, (as well as whatever defines ASN-encoding) but what one? Itd be helpful if IsCanonicalSignature() had a comment directing people to what standard (and part of the standard) were trying to try to check against. The forum link goes into more detail of course, but its still not clear as to what standard exactly were talking about. I mean, normally its fine leaving this stuff as "to be understood", but script.cpp is one of the most important things defining what is or isnt Bitcoin, and Im sure there are a lot of people reading it and trying to understand it in detail. Making that easier to do doesnt hurt.
2114	11639671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11639671	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2114	11674823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11674823	sipa	Good idea. Ill try to add some references in comments soon.
2113	11503967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11503967	gavinandresen	ACK, compiles and runs nicely for me. You should add hash.h to bitcoin-qt.pro, though.
2113	11506759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11506759	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2113	11506965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11506965	laanwj	ACK, util.h has grown too large anyway
2113	11512111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11512111	sipa	Indeed; maybe Ill need to split off a few more things, but I think thats nice anyway (like moving the adjustedtime stuff to network, as its quite insane that util depends on netbase now...).
2112	11437044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11437044	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2112	11444059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11444059	Diapolo	ACK
2112	11465173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11465173	sipa	ACK
2110	11413163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413163	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2109	11413240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413240	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2109	12455211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12455211	Diapolo	I consider this a cleanup, which doesnt break a thing, I tried the resulting exe, which is working fine. We shouldnt use 2 different scopes, if win32 is sufficient IMHO!
2108	11413322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413322	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2108	12558641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12558641	Diapolo	Any reason not to switch to latest Qt version?
2108	12580134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12580134	gavinandresen	Yes, it is time-consuming to rebuild dependencies for gitian, so when we do, I would rather we upgrade QT and boost and openssl any other dependencies (and maybe the OS we build on and the version of the compiler we use) all at once. The pain of changing dependencies is, I think, the reason we have so few people gitian-building releases, and thats a real problem. I dont see any "must have" fixes in the QT 4.8.4 release notes.
2108	12582845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12582845	Diapolo	If you prefer batch dependency upgrades perhaps I should just include the latest Boost version also. Im fine with creating that pulls, because at least in the Win-world it is (most of the time) essential to stay up-to-date (security and performance wise). I took a look at Gitian also, but the howto setup was a real pain for me and I came to the conclusion that I currently dont want to spend too much time with it.
2108	12639183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12639183	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2108	15295160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15295160	Diapolo	So just to understand, when I create a patch to use Qt 4.8.4 does this require any manual or additional work for the core-devs who create the Gitian builds or does it just increase the compile-time once?
2108	15302811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15302811	gavinandresen	It requires manual/additional work. We have to rebuild our dependencies, and if the rebuilt dependencies have some non-determinism we have to spend time figuring out which of the dependencies is a problem and either fix it or just throw in the towel and trust one persons dependency to be correct.
2108	15508232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15508232	Diapolo	Closed in favor of #2414
2106	11359320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11359320	gavinandresen	(retracted ACK) Can you give step-by-step gitian building commands; e.g. make_base_vm ?something? ... and which dependencies will we need to rebuild?
2106	11359441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11359441	sipa	Theres no way that ACK can mean you tested it, given the followup question... ./bin/make-base-vm --suite precise --arch i386 Then rebuild Qt, Boost, and deps.
2106	11361964	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11361964	gavinandresen	mea culpa: ACK code changes. Im making-base-vm now... `./bin/make-base-vm --suite precise --arch i386` Fetch a new boost and qt for inputs: `cd inputs wget wget cd ..` Build dependencies: `./bin/gbuild ../bitcoin/contrib/gitian-descriptors/boost-win32.yml && mv build/out/* inputs/ ./bin/gbuild ../bitcoin/contrib/gitian-descriptors/deps-win32.yml && mv build/out/* inputs/ ./bin/gbuild ../bitcoin/contrib/gitian-descriptors/qt-win32.yml && mv build/out/* inputs/ `
2106	11381293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11381293	gavinandresen	Please update contrib/gitian-descriptors/README too (mention the new make-base-vm). Successfully gitian-built HEAD plus this pull. Running Bitcoin-Qt -testnet in a Virtual Box Windows XP service pack 3, 2GB memory VM: + Installer works properly + Runs, starts syncing with the chain ... but then crashes. Ill see if I can get a Windows debugging environment going to help debug the crash.
2106	11395155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11395155	gavinandresen	Results of running inside the mingw gdb (binary cross-compiled on my linux machine -g, then copied over):
2106	11401803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11401803	Diapolo	If we have a new compiler ready with Gitian, #1674 should be tested also. Could you do a build with that integrated, as I guess pull-tester is not yet using the same compiler suite.
2106	11402905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11402905	laanwj	I suck at gitian (yes, I changed the yml to point to sipas repository, but somehow cant get it to work, I also tried `leveldb17` instead of the hex id) bin/gbuild --commit bitcoin=e65f01a ../bitcoin/contrib/gitian-descriptors/gitian-win32.yml fatal: ambiguous argument e65f01a: unknown revision or path not in the working tree. Use -- to separate paths from revisions bin/gbuild:204: error looking up commit for tag e65f01a (RuntimeError) from bin/gbuild:191:in `each from bin/gbuild:191
2106	11404844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11404844	sipa	Ive given up trying to make gitian fetch what I want by itself. I have a wrapper script at which injects the commit you ask for from a local repository into gitian. It also does some other things like singing and packaging.
2106	11408253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11408253	sipa	I added a commit that changes the Logv implementation (to something based on our util.cpps strprintf). Its not very efficient, but maybe this works better (strange va_list semantics?). Can you try again?
2106	11413357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413357	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2106	11616723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11616723	gavinandresen	Okey dokey... Ive been working through this in two Windows virtual machines, one mingw32 and one mingw64, and having trouble with both-- mingw32 with the new code, mingw64 with building dependencies properly. But, I think Im one issue away from getting the mingw32 build working; see for the diff. The last issue is to write a replacement for the DbgHelp librarys MakeSureDirectoryPathExists function. I dont think relying on the DbgHelp library is a good idea; I doubt it is a part of a non-developers environment, so wed have to ship the DLL and install it, which is always painful.
2106	11639315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11639315	sipa	Added your patch to this pull request, rebasing it after removing my alternate Logv inplementation. Is removing -O2 from the command line options accidental?
2106	11639378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11639378	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2106	11788925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11788925	Diapolo	Im currently taking a look at this and try to build it with my IDE... will report back later. Edit: Got an error, during linking: ``d:/mingw/bin/../lib/gcc/mingw32/4.7.2/../../../../mingw32/bin/ld.exe: cannot find -ldbghelp`` I fetched your leveldb17 branch, does this include Gavins last commit?
2106	11791832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11791832	Diapolo	Thanks for fixing. Can you now also remove that line, as we dont need Boost chrono with Boost 1.52. Edit: What is the main benefit of this pull, does it fix certain known issues with Windows or should it be faster? A few more details would be very nice. Im currently doing an IBD with test- and mainnet.
2106	11793304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11793304	sipa	Done (hope you didnt mind me modifying your commit). Did you see ?
2106	11794378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11794378	gavinandresen	: dont mind at all; I was lazy and didnt compile Qt libraries (or Bitcoin-Qt) on my Windows VM. RE: leveldb port using a ton of disk space on Windows: yes, saw that, it makes me want to cry... I do now have a VM that can run the mingw gdb, so hopefully "we" can reproduce/fix it, but Im not looking forward to learning about the details of how leveldb works to figure out what is broken.
2106	11794546	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11794546	sipa	Well, the filenames are blahblah.(null), and as those names are constructed using snprintf (see db/filename.cc), Id say theres something wrong with snprintf still. Sure that #define _snprintf you changed was harmless?
2106	11794933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11794933	sipa	* The native windows backend for leveldb should be faster than the boost one. * Keeping up with more recent (and less-patched) LevelDB versions seems a good idea for future extensibility. * A more recent VM image to build with also means a more recent compiler, and things like link-time optimizations may gain us some performance as well. In any case, in theory, none of these should cause a degradation. Again has been proved however that the difference between theory and practice is that in theory there is none, but in practice there is :)
2106	11795064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11795064	gavinandresen	Oh, thats the issue: snprintf(%llu) wont work on 32-bit windows / mingw32 ... (at least, I THINK thats the issue) Needs more research thought; what did the other windows leveldb port do?
2106	11795387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11795387	sipa	It uses the exact same snprintf construction - as this is not code that is specific to the Windows port at all. Then again, we have no reason to assume that the issue reported in that forum post doesnt already exist in the current git master...
2106	11795627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11795627	sipa	Maybe the solution is just replacing the %llus in the current leveldb code by macros like PRI64u in the core code. I hate maintaining such patched trees though...
2106	11797969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11797969	gavinandresen	Summarizing discussion from IRC: mingw and *printf and 64-bit formats are complicated; see: Compiling leveldb -posix works for me in a 32-bit Win XP mingw32 environment. Patch:
2106	11810805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11810805	Diapolo	I found which mentions a few things about static linking with Qt. Perhaps its at least a little interesting for you. When did you update your commit? Im asking because I need to fetch the changes then :).
2106	11837510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11837510	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2106	11847111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11847111	gavinandresen	I ran latest gitian-compiled binary overnight in an XP VM on -testnet with no issues.
2106	11870352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11870352	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2106	12099211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12099211	Diapolo	Just a small feedback, Im testing another IBD with this (emtpy datadir) and now have ~54000 blocks to download. Bitcoin-Qt is currently using ~745MB of RAM, which seems to be a quite high number. Ill take a look and see how this progresses now. 28000 Blocks to go and now its using ~1GB RAM. 14000 Blocks to go and now its using ~1.1GB RAM.
2106	12202788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12202788	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2106	12244345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12244345	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2106	12422700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12422700	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2106	12639191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12639191	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2106	12659654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12659654	sipa	closing, as #2198 is merged
2104	11343527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11343527	gavinandresen	Please add txids to the lisreceivedbyaddress help text, and can you write up a little test plan for how this should be tested? (e.g. expected results passing the minconf param, if includeempty=true do you get [] for "txids" (preferred) or is that field just missing, etc).
2104	11403202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11403202	al42and	Okay, no problem with help text, but Im slightly unsure about tests: currently, for example, adding following tests to `rpc_rawparams` routine: BOOST_CHECK_NO_THROW(r=CallRPC("listreceivedbyaddress")); BOOST_CHECK(r.get_array().empty()); does not result in failed test, though, of course, it depends on wallet state. Should I just add tests for correct handling of parameter types (like is done for `getrawtransaction` and some other RPC functions), or can I rely on wallet having some predefined state during tests?
2104	12599509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12599509	gavinandresen	Still needs a test plan; see for how to write one.
2104	12639502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12639502	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2104	12665699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12665699	al42and	What is the preferred way to create test protocol for RPC calls? For most users the easiest way, in mu opinion, would be to use Debug window in Bitcoin-Qt. Or is it better to create some script (in e.g. Python) which does all necessary calls via network (purely automatically or may be interactively)?
2104	12670884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12670884	gavinandresen	I think it would probably be best to give testers a script to follow. Install THIS executable, then run it like THIS, then open the Debug window and execute the following RPC commands: .... If you write a Python script to try to test this, a bug in THAT code might hide a bug in your code. And testers often notice things that you didnt as they are testing.
2104	12900822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12900822	luke-jr	This txids will grow indefinitely... not sure its a good idea.
2104	16020292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020292	sipa	ACK. They shouldnt, as address reuse is discouraged. If you know you are reusing addresses, youre taking the performance penalty here too.
2103	11322850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11322850	laanwj	The progress bar itself is meant to give a rough visual indication of the sync progress. We used to have a percentage in the progress bar in the past, but it was removed and replaced by a number of blocks because the percentage gave a sense of precision that is not there.
2103	11323386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11323386	ayanes	IMHO the percentage really helps the user to estimate the pending blocks, the number is too messy. Check the example:
2103	11323476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11323476	laanwj	Another thing is that when the client is restarted after some time of inactivity, it will have fallen a few blocks behind but always show 99.X% done, which is confusing (99% of what?).
2103	11323585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11323585	Diapolo	I support no changes there, as we had more than 1 discussion on that progressbar. I consider the current look and feel as the best compromise.
2103	11368144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11368144	ayanes	The 99% issue then must be present at: Probably it gets calculated wrongly when the client continues syncing. Anyway, closing it.
2103	11369569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11369569	laanwj	No, it doesnt get computed wrongly. The underlying (psychological) issue is that the progress bar makes the sync look like a normal linear download of a fixed-size file in the mind of users. Adding a percentage adds to this illusion. Even though in reality it fetches a growing tree structure of uncertain (at least to any one observer) size, of which only the longest path is significant. So there is a cognitive gap, and I would applaud efforts to visualize the progress in an intuitive way that doesnt cause this inherent confusion. However this is likely much more complex than can be solved by hair splitting over whether to show a percentage or not, or where to start counting. Quite possibly effort is better spent solving the underlying issue that frustrates users: having to wait at all! For example, developers are working on making the client start in SPV mode, so it is immediately usable, then fetching the block chain in the background.
2103	12900654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12900654	luke-jr	Maybe using a logarithm for the visual bar would make sense. For text, counting the nines might work: "4 nines up to date!" :P
2103	15590921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15590921	L2G	Forgive me if this is a repeat, but Im still new here. :-) Did anyone ever talk about just starting the progress bar over at the left whenever a resync of more than two or three blocks has to happen? If someone has Bitcoin-Qt running continuously, I dont think it can get out of sync more than two or three blocks, can it? But if its more than that (10 blocks, 50 blocks, 500 blocks...) then putting up the progress bar and starting from empty again is more what a user would expect, IMHO (I know its what I would expect). I know the 100% point is unpredictable and there will be cases where the bar fills up all the way, then has to change to a valueless active state, but its still better than throwing up a bar that always looks like its a pixel short of being full, every time.
2103	15591580	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15591580	laanwj	Yes, that has been discussed many times. It has even been implemented for a while, because I thought it was a good idea back then, but it made users complain that the sync had restarted from scratch. So it was reverted.
2103	15592612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15592612	Diapolo	The next version will not meassure in blocks anymore on the progressbar anyway, it is a time-based solution, that tells how many weeks, days, hours your client is behing the network. It will be included in 0.8.X. Sorry to be OT, but any news about the refactorings or my small open pulls + the ones we ACKed :)?
2103	15679141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15679141	L2G	is that patch that you talked about still around somewhere? Id love to play with it!
2103	15679838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15679838	sipa	There is probably no feature that has caused as much discussion as that progress bar already. Different systems have been tried already, and been reverted. IMHO, it just shows that a progress bar is not the correct way to represent this information. Current git head shows "N days behind" for example, instead of a percentage, which is certainly more useful. It also bases the progress calculation on the number of (estimated) transactions, rather than the number of blocks (which is very fast initially, and very slow at the end).
2103	15699154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15699154	L2G	All I am talking about is this: (1) The app notices that data is out of sync. (2) It displays a progress bar that starts empty. (3) It syncs up and allows the progress bar to move from left to right. (4) When it is done, it hides the progress bar again. It doesnt matter to me whether it counts blocks, time, pink elephants, moonbeams, etc. I would like to see a bar that shows how much closer it is to being in sync from the time it started syncing. Surely that alone isnt a controversial feature?
2103	15699175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15699175	L2G	And if it is a controversial feature... why not just default to having it turned off, and give the user the option of turning it on?
2103	15699209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15699209	gmaxwell	I believe that adding an option, which must be maintained, tested, etc just to control how a confusing progress indicator is displayed would not be a good use of time or testing resources.
2103	15701957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15701957	L2G	I probably came off sounding like a snot about this, and I apologize. I wont belabor the idea.
2103	15702293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15702293	gmaxwell	Thanks for taking a step back there it can be hard working on this when there are so many LOUD opinions about. People do have your wishes in mind here and youre certainly not the only person who has expressed similar ones, and at least if someone sees a way to make this work better for everyone that theyre confident wont have issues, itll make its way in eventually.
2102	11349782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11349782	gavinandresen	ACK
2102	11351517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11351517	colindean	Anything else that youd like to see changed or added in it?
2102	11355881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11355881	gavinandresen	"ACK" means "acknowledged, looks good" The QA information is obsolete, but I think we should pull your changes and then make further edits.
2102	11358802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11358802	colindean	Sounds great.
2102	11413513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413513	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2102	11674888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11674888	sipa	ACK
2102	11786794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11786794	Diapolo	ACK
2102	12237308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12237308	gavinandresen	Sorry, I forgot this pull request existed when I rewrote the README.md a little while ago. Closing this, because at this point it should be easier to start from the README.md in the tree rather than this pull.
2102	12354932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12354932	colindean	Alrighty. Ill try to get to it at some point in the next day or two.
2100	11317423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11317423	luke-jr	$13 is a decrease from a previous $25, which used 0.01 BTC COIN_DUST-equivalent just fine.
2100	11379926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11379926	gmaxwell	Meh. Lets have some offline discussion. Having a back and forth argument in a pull request isnt going to be as productive as chatting on IRC some, when I think there is probably already agreement on this even if we dont know it yet.
2100	11413590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413590	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2100	11413669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413669	luke-jr	FWIW, I wasnt actually making an argument against the pullreq, just posting a (devils advocate style) comment.
2100	12639796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12639796	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2100	17080791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17080791	jgarzik	Superceded by #2577
2099	11317348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11317348	luke-jr	Looks good to me. Note, however, that ultraprune currently has problems in some cases with hard linked files. IMO those should be fixed regardless, so not a blocker for this.
2099	11317554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11317554	sipa	I only know of problems with read-only files. Whether a file is hard-linked shouldnt be even be observable by applications (except for the output of stat()).
2099	11356830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11356830	sipa	This is definitely the easiest solution imaginable, assuming it works for Windows users. Importing instead of reindexing is probably sometimes a better choice (it helps with heavily fragmented block files, for example, and results in the intended smaller files), but I suppose those cases can be handled manually.
2099	11413599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413599	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
2099	11420113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11420113	gavinandresen	Thanks -- updated to use string().c_str() and rebased.
2099	11420314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11420314	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2099	11646785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11646785	rebroad	If the linking fails, can it copy or move the file instead rather than download from the genesis block?
2099	11651295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11651295	luke-jr	I wonder how difficult it would be to have the code just use the old blk000?.dat files directly when they exist.
2099	11652244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11652244	sipa	The reason to move to a new naming scheme was: * to have them in a separate directory, so they can be moved more easily to a different volume * to make pruning easier eventually (as only being able to choose storage with 2 GiB accuracy is a bit crude). Hardlinking removes that second advantage, but by the time were actually going to support pruning, I suppose many setups will not be using an upgraded pre-0.8 datadir anyway. Regarding using the old files: currently, the block index encodes positions in files as filenum+byteoffset. I suppose using some trick like making negative filenums refer to old files, we can encode both, but the reindexing/loading code should be checked carefully... a dirty hack in any case.
2099	11652478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11652478	luke-jr	I was thinking more like "if blk000?.dat exist, start new files with the next number. when reading, if the blk0000?.dat is missing, check blk000?.dat" so the files would be stored as the same filenum :)
2099	11674879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11674879	sipa	In case hardlinking fails, I dont think theres any harm in adding the found source files automatically to the list of files to be -loadblock=ed. They will be downloaded anyway otherwise, and loadblock happens in a background thread anyway, so it can only speed things up.
2099	11998550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11998550	gavinandresen	RE: doing something smart if the hardlink fails: Im not planning on testing that, and I dont believe in adding untested code even if it should OBVIOUSLY work. If somebody wants to implement and test that as a separate pull, great, but it is not on my priority list because it would benefit so few (maybe zero) people.
2099	12061200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12061200	gavinandresen	Test plan with testing bounties: First bounty claimed.
2099	12062998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12062998	schildbach	Can you explain in the "build binaries yourself" case which branch we need to build? The main "bitcoin" repository does not appear to contain 0.8 related stuff.
2099	12064286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12064286	sipa	from the branch this pull request refers to. bitcoin/bitcoin.git master does in fact contain the code that will become 0.8 (its marked "0.7.99" now).
2099	12137312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12137312	schildbach	The hard-linking does not appear to work on my system (Ubuntu 12.10 64bit). In two different cases, my .bitcoin directory grew from 6.3 GB to nearly 12 GB and my df (disk free) significant reduced. The files in blocks are of different size than the blk*.dat files and have different inode numbers. The whole process tool several hours.
2099	12141832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12141832	sipa	Very strange. Which commit did you use (bitcoin reports this in the version string, see the first debug.log line printed)
2099	12142385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12142385	schildbach	2013-01-10 22:20:55 Bitcoin version v0.7.1-297-g429915b-beta (2013-01-06 07:26:43 -0800) Maybe I should mention that I was using the Ubuntu package (0.7.2-quantal2) before. which is a little bit different to the official build in its dependencies.
2099	12143160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12143160	sipa	Im afraid I confused you. You built from git head, it seems. This page is a pull request: a change requested to be merged in git head, but not yet there. The branch to pull from is in gavins repository (https://github.com/gavinandresen/bitcoin-git.git), in branch blkfile_upgrade. Its also included in my turbo branch (https://github.com/sipa/bitcoin.git, branch turbo), together with several other pull requests.
2099	12147250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12147250	schildbach	Ok, this time Im using v0.7.1-269-gf4445f9-beta. It looks like its using hard links in the blocks directory. It managed to reindex about 211700 blocks in 80 minutes. Then suddenly the status bar text disappeared. From the icons on the lower right and from debug.log I can tell its still accepting blocks, but at a relatively low rate of 1 block per second (still better than before).
2099	12151231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12151231	schildbach	Another issue: the "Show QR code" context menu option silently fails. I remember it was working before because I was using QR codes to scan with Bitcoin Wallet.
2099	12151573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12151573	gavinandresen	: context menu breaking wouldnt be a bug-- can you open a new issue about that?
2099	12159432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12159432	Diapolo	The GUI is using an estimated block count, which it gets from the connected nodes and the last checkpoint, to be able to compute a "Blocks left" number and to display the progressbar. If you have more blocks than the estimated block count there is nothing to predict anymore and so the progressbar gets hidden.
2099	12197801	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12197801	sipa	ACK
2098	11304647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11304647	sipa	Why do you keep insisting on having all block files in a single continuous chunk? I implemented pre-allocating specifically to address the excessive fragmentation the previous mechanism seemed to cause on some platform, but its unreasonable to want every file to only be one chunk. Ill consider this if you can show benchmark results that this helps. PS: block and undo files are almost never accessed in the new code, contrary to 0.7 which needed them all the time for validation. A patch to just implement AllocateFileRange specifically for Windows is no problem at all.
2098	11307634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11307634	Diapolo	Because I have the code and its working fine, as it does, what it is intended for. Why is something unreasonable, if its possible to do via some rather simple OS-calls? I added some code to print to the log when ReadFromDisk() and WriteToDisk() are called and at least ReadFromDisk() seems rather sequential during startup (talking about ``Verifying last 2500 blocks at level 1`` and ``Rescanning last 199 blocks...``). Even if it is not a big increase for the Bitcoin client, it helps to lower overall fragmentation of users disks. Edit: Can you tell me how big undo files can grow at max?
2098	11308362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11308362	gavinandresen	NACK. 88 more lines of code to maintain is a greater cost than the potential benefit here.
2098	11308525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11308525	sipa	First of all, dealing with fragmentation is a reasonable request. Its not Windows-specific by the way - if you dont allocate a file in one go, it will lead to fragmentation on just about every system and every filesystem. Pre-allocation is the solution to this, and its already implemented. If Windows has a better way for pre-allocating than writing zeroes, sure provide an optimized version for that specific function in util.cpp - thats what its there for. But please: * Dont put platform-specific stuff in the block management code because you fear 100 fragments will hurt you. If it does, we need to increase the pre-allocation size perhaps. * Dont allocate entire files without knowing youll need it. Thats just wasted space. For the block files this is limited (as they grow anyway, so youre on average only 64 MiB above needed), but for undo files its simply not known how large theyll grow (they contain the undo data corresponding to the block with the same number). Making them any specific size will either be a permanent waste, or not enough.
2098	11308767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11308767	Diapolo	At least you try to clarify your position... though I dont agree on the 100 fragments part. The undofile size is a reasonable comment, but for blockfiles a to be filled 128MB file is clearly not wasted space. Ill keep using this with my local build, but guess I wont create a pull for that CAutoFile thing as I dislike Gavins dictatorial nature on patches, I put quite some time in...
2098	11331735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11331735	sipa	my suggestion: 1) implement AllocateFileRange for Windows (just inside the function body, using macros) that doesnt try to do more than that function intends. 2) If, after benchmarking with 1) you can still observe a noticable slowdown, we can increase the chunk size for Windows - or make it configurable in the first place. That should have exactly the same effect as your current code, in something like 10 lines of code.
2096	11294808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11294808	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2096	11297400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11297400	gavinandresen	ACK
2096	11322906	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11322906	laanwj	ACK
2096	11356942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11356942	sipa	ACK
2095	11282453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11282453	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2095	11283241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11283241	laanwj	Yes good idea, ACK
2095	11289939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11289939	Diapolo	Yeah, good idea, ACK.
2094	11280307	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11280307	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2094	11281300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11281300	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2089	11211261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11211261	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2089	11211916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11211916	gmaxwell	I dont think disallowing IPv4 local connections (e.g. from mining daemons and monitoring tools) is a desired effect of onlynet. I suspect this will also block all onion peers even when onlynet tor, though I havent actually tried it.
2089	11216131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216131	Diapolo	IMHO when we have a switch to block certain networks, this should include ALL connections (in- and outbound). What did we intend with ``-onlynet`` otherwise? If people really want to explicitly allow IPv4 connections, they can use ``-bind`` (remember #1778, which is for such cases). As this network-block is not active for RPC-stuff AFAIK, I really see no problem here.
2089	11216186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216186	sipa	But the problem is that incoming onion connections come in as an IPv4 connection from 127.0.0.1. So -onlynet=tor would block incoming onion connections...
2089	11216236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216236	Diapolo	Right, so the user could just add -bind=127.0.0.1 :). This is from the commit message of #1778: ``usage case: specify -bind=127.0.0.1 -onlynet="Tor" to allow incoming connections to a Tor hidden service, but still dont allow other IPv4 nodes to connect / get connected``
2089	11216285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216285	sipa	Yes. but this very commit will still block such connections.
2089	11216323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216323	Diapolo	Then its not well implemented by me, I just want to know if the idea from the pull is worth further work on it :D.
2089	11216363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216363	sipa	In general, there is no knowing what network an incoming connections comes from (though perhaps some special cases can be made, meh).
2089	11216474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216474	Diapolo	Im not sure if that was a yes its worth further work or a no, we (core devs) dont like the general idea.
2089	11216569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216569	gmaxwell	I like the idea if it can be done without resulting in surprising misbehavior, though Im not convinced that this is possible. :)
2089	11216690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216690	Diapolo	Perhaps if Im thinking a few minutes longer and come to the same conclusion Ill just close this, but as always I like the valuable feedback :).
2089	11307879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11307879	Diapolo	As this just seems to cause weird behaviour Ill close this for now ... perhaps in the future we can re-think the idea and implementation.
2087	11198708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11198708	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2087	11207734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11207734	jgarzik	ACK
2087	11209679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11209679	gmaxwell	ACK Im glad the timestamps allowed setting one right at 210000. It shouldnt be merged until it is burred a little more.
2087	11212380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11212380	jgarzik	I dont see any harm in merging to HEAD (not 0.7.2) now, as 0.8 is still a long way off.
2087	11213498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11213498	gmaxwell	Oh is this just for 0.8? Yea I dont mind merging something early for a release thats a ways off.
2087	11216326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216326	sipa	ACK
2087	11216414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216414	gavinandresen	I created a 0.7.2 branch, with: 0.7.2rc2 a commit so gitian-descriptors point to github instead of gitorious this commit, to checkpoint 210,000 Im in the middle of sanity testing it by doing a complete blockchain re-download. If it is sane, and when yall are comfortable the checkpoint is buried deep enough (I think we said "past one difficulty adjustment", which was 14 blocks ago at 211,680), I want to tag and spin a 0.7.2 final release (I dont think we need a rc3 for those two trivial commits).
2087	11216498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11216498	gmaxwell	"One difficulty adjustment" being 2016 blocks, e.g. 212016, which should be in a couple days.
2087	11356960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11356960	sipa	Which would be now.
2080	11103468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11103468	Diapolo	Now you just need to merge your 2 commits into one.
2080	11104255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11104255	mcassano	Thank you for the feedback, I just rebased so I think its just one commit now with proper spacing.
2080	11110626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11110626	sipa	Now fix the commit message, and youre golden. ACK on the code change.
2080	11115857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11115857	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2080	11115869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11115869	mcassano	I removed the mention of the tabs and spaces from the commit, I assume that is what was wrong with the message. Thanks for the ACK.
2080	11118428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11118428	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2076	11054856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11054856	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2076	11297005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11297005	jgarzik	My default setting on command line flags tends to be "avoid, unless necessary" Is there a case where we would _need_ a flag? Ideally the default should just make sense, and users should not need to change anything.
2076	11297344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11297344	sipa	I dont think it should be a flag, but maybe a 7-day strict boundary between relay / norelay is too deterministic. I dont think we really want to make the network forget everything thats more than a week ago - except for crawlers, node connections are just not tried frequently enough to know that "not seen in a week" means "gone". I prefer something that just favors relaying recently-seen addresses.
2076	11299459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11299459	jgarzik	What are the value of old addresses, versus cost? Most other P2P networks and DHTs have a far shorter lifespan for addresses. As my testing showed, the _large majority_ of addresses we pass to other peers are 100% useless.
2076	11299514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11299514	sipa	Just saying there is a difference between "not having seen in the last week" and "having tried the last week and failed". IIRC there are more timestamps available to make a good decision.
2076	12640083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12640083	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2076	16084870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16084870	jgarzik	Closing. Not much interest, and comments suggest a desire for something else.
2075	11037936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11037936	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2075	11051683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11051683	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2075	11094711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11094711	mikegogulski	Thanks for the review, Diapolo. Latest commit closes all of that except the pass-by-reference question you posed.
2075	11116881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11116881	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2075	11150257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11150257	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2075	11151650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11151650	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2075	11152248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11152248	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2075	11164269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11164269	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2075	11655323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11655323	CodeShark	Nice effort. The Wallet interface could certainly use cleaning up. I would like to eventually merge this with and
2075	11667156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11667156	mikegogulski	Thanks. Im going to leave some comments over there.
2075	11674807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11674807	sipa	Looks good in general. Instead of comments in the code about what is supposed to be done, Id rather see a commit that actually does it. On the other hand, this is probably easier to explain what youre about to do, and get comments without actually coding it. One nit: I dont like the wallet code depending on base58 encoding stuff (its inevitable in some places because of backward compatibility with the wallet format on disk, but still try to avoid it)... so can you return a CTxDestination instead of a CBitcoinAddress from CWallet methods?
2075	11675105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11675105	mikegogulski	Hi Pieter, thanks for the feedback. Tagging here too. I laid off on turning comments into code simply for want of more feedback. Not too much sense in plowing ahead with a raft of changes which will get rejected for reasons I hadnt anticipated. I think your nit is a serious issue, actually. Just as the json stuff should be kept out of the wallet representation as much as possible, so the base58 stuff as well.
2075	11676296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11676296	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2075	11687122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11687122	mikegogulski	something tells me ive failed to do my first rebasing properly. Anyone got an education link that applies to this projects workflow?
2075	11688567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11688567	Diapolo	To which branch did you intend to rebase? To rebase to current master I normaly do this: git fetch upstream -p git rebase upstream git push origin %BRANCHNAME% -f
2075	11694118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11694118	mikegogulski	Closing this down in favor of
2075	11694427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11694427	sipa	You know you can push to a branch that is already pull-requested, to have the pull request updated?
2075	11694469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11694469	mikegogulski	*mumble* I guess. Im not over the learning curve in using git yet, by any means. In this case I wanted to rebase cleanly onto bitcoin/bitcoin, screwed it up here, so decided to try fresh on the new branch walletencap3.
2074	11021134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11021134	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2074	11034582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11034582	Diapolo	ACK Edit: Can you please take a look at #2063 and #2068 as I consider them "minor", too :).
2074	11062864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11062864	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2074	11117084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11117084	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2074	11120291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11120291	laanwj	ACK
2073	11015669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11015669	Diapolo	If you can change that to a little more descriptive commit message Im sure thats an easy ACK :). ``Update makefile.mingw to use libleveldb.a not .lib`` would be a suiting title I think.
2073	11016501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11016501	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2071	11006931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11006931	sipa	Im very much in favor of encapsulating the actual logic for many RPC methods to where it belongs. However, that doesnt mean that the conversion to JSON should happen there. For example, if CWallet and CWalletTx had a cleaner interface for requesting information, this could reduce duplication between RPC and GUI. However, that probably means something a thin layer in between of data structure to represent information extracted from and sent to the wallet. The GUI would inspect these structure and convert them to GUI elements, the RPC would inspent them and convert to JSON.
2071	11007093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11007093	mikegogulski	Yeah, Im going to back out the JSON stuff. My eventual goal for this is to make CWallet a fully-functional first-class object, hide CWalletDB entirely, and have the RPC methods talking strictly to the wallet object. In addition to the "standard" benefits of proper encapsulation, this will eventually allow the client to support, for example, multiple wallets.
2071	11007249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11007249	sipa	Sounds great, I think thats what we want. Note that there are some plans to move to another database backend for the wallets. Just so you dont waste effort on code thats going to be thrown out anyway.
2071	11007371	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11007371	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2071	11008492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11008492	mikegogulski	Got it. I think it should be no problem, since the model Im stumbling toward is like: ``` consumer(e.g. bitcoind, bitcoin-qt, others)->walletRPCinterface->walletobject->... ->...walletdbobject->nativedbobject ->...blockchainRPCinterface->blockchainobject->whatever ``` where walletRPCinterface is the one and only interface to the wallet object, nothing but the wallet object talks to the wallet database object, and the wallet interacts with the blockchain strictly via a (new) RPC interface.
2070	11006929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11006929	mikegogulski	closing per Sipas other NAK
2070	11007886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11007886	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2069	11006664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11006664	sipa	NAK. I dont think the wallet code should depend on a JSON library.
2069	11006902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11006902	mikegogulski	Hm, true.
2069	11008399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11008399	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2068	10986870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10986870	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2068	10987439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10987439	AlecWeigt	This seems like a much better way to do it.
2068	11042086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11042086	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2068	11063173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11063173	sipa	ACK
2068	11075406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11075406	laanwj	ACK
2066	10952201	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10952201	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2066	11014629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11014629	Diapolo	I reverted that reference change, its now the pointer again as we know that is working :).
2066	11015553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11015553	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2066	11075503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11075503	laanwj	ACK
2065	10951421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10951421	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2064	10948859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10948859	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2064	10975201	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10975201	sipa	ACK
2063	10946411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10946411	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2063	11040452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11040452	sipa	ACK
2062	10935647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10935647	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2062	11117289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11117289	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2062	11127207	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11127207	gmaxwell	Ive tested this about a zillion times now. ACK.
2061	10938112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10938112	gavinandresen	I dont think the 20% speedup is worth the extra code complexity. I could be convinced if there are some EC crypto experts hanging around who will chime in and say "oh, yeah, thats an obvious optimization and implementation looks correct...." It seems to me that this type of low-level speedup would be better implemented in OpenSSL. I dont know if they would accept a patch to speed up one curve or not, but ideally I think that is where this code belongs.
2061	10938336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10938336	gmaxwell	Hal claims that it can be increased to 40% with some other changes, but they werent immediately clear to me. I think Pieters plan was to get this in (as it has the structural changes) and then talk to an EC expert he may have access to about doing the rest. That might satisfy both your concerns. I would note that script checking all txn with Hal is similar in performance to script skipping before the checkpoint without Hal (if not faster). In terms of the uncertainty wrt security implications Id prefer the former.
2061	10941306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10941306	gmaxwell	I was a little over eager in my last claim there: syncing from start to 210000 the current parallel checking branch without hal is 23:58 while without checkpoints but with hal its 37:10 for me (47:21 hal-less).
2061	11075455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11075455	laanwj	If we decide to include low-level crypto code like this, we could just as well include all the ECDSA code (for the particular curve that we use) so that we can build with OpenSSL built without ECDSA.
2061	11159798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11159798	sipa	I believe there is quite some non-ECDSA-specific EC code left in OpenSSL that would need to be included in that case too...
2061	11174025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11174025	sipa	Refactored the optimized algorithm into an almost exact copy of OpenSSLs own ecdsa_do_verify() function, but using an optimized version of EC_POINT_mul().
2061	11223375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11223375	sipa	New commit: if compiled with -DVERIFY_OPTIMIZED_SECP256K1, checks will be compiled in that compare the generic OpenSSL code with the specialized one. Its not enabled by default, but I verified it for the entire current block chain & unit tests.
2061	11308007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11308007	Diapolo	This pull can be tested independently from your other one with parallel verification or do they depend on eachother?
2061	11308287	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11308287	sipa	Theyre independent.
2061	11406843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11406843	sipa	Added verification code for checking k == k1 + lambda*k2 and for checking p2 == lambda*p. Verified against unit tests and testnet. EDIT: and mainnet now as well.
2061	11675195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11675195	sipa	New commit: implemented a small improvement suggested by Hal.
2061	12661868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12661868	sipa	Added a commit to build the core .o files for tests separately, and add - DVERIFY_OPTIMIZED_SECP256K1 to them, so the unit tests now compare the internal values in ECDSA verification between optimized and non-optimized code.
2061	12874245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12874245	sipa	Added a fuzzer that compares intermediate values during validation in optimized and non-optimized code, for message hashes with a random 1-bit difference for every real check.
2061	12874862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12874862	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2061	13017997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13017997	SergioDemianLerner	It would be good if someone checks this new implementation against timing attacks. Systems that automatically sign transactions (like exchanges) may be vulnerable to key recovery using timing attacks.
2061	13018325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13018325	sipa	This code isnt used for signing.
2061	13020838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13020838	SergioDemianLerner	Ok, I will check against specially crafted pubkeys/signatures in a few weeks. Ive found bugs in other implementations.
2061	13022367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13022367	sipa	thanks!
2061	14015691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14015691	sipa	Rebased.
2061	14394283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14394283	sipa	Added precomputation of G (doable as a separate pull if necessary), which improves verify performance by 2-3% (consistently), and turn off Hals optimizations by default; -turbo turns them on.
2061	17363862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17363862	Diapolo	How do these pulls get tagged updated, when I see no changes here? Rebase?
2061	17364138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17364138	sipa	I dont intend to keep this updated, as Im working on a separately library that implements ECDSA directly, with much more optimizations than this pullreq does. See
2061	17364435	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17364435	Diapolo	You missunderstood my comment, this pull or issue was listed updated for me and I asked what made Github think it was updated. I think your work on this is great, but my intention was just to understand Github here.
2061	17364528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17364528	sipa	Github hiccup, I guess.
2060	10932035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10932035	sipa	Benchmark result: on my system (an i7-2670QM), a reindex of the first 210000 blocks, with script verification enabled everywhere, and -dbcache=900: * HEAD: 3h22m * -par=4: 1h14m With -par=4, CPU usage is around 350% (though the first ~100000 blocks cause lower CPU usage)
2060	10979285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10979285	sipa	* cleaned up the code * moved the job queue implementation to checkqueue.h * added comments * enabled by default (-par=0 autodetects)
2060	10988492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10988492	Diapolo	I love your comments, great work here. I still need to try out the code though :).
2060	11083829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11083829	laanwj	Nice!
2060	11084354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11084354	sipa	Ive been doing some benchmark, and it seems the contention on the (single) lock protecting the queue makes the throughput and contention overhead go rather high when using too many threads. At least extrapolating from what I see on my system. more than 8 or 16 threads will probably cause significantly degraded performance. Switching to a per-thread queue is probably better, with jobs assigned in a round-robin way to them, or something more intelligent That said, rebuilding the coindb from scratch (-dbcache=1000, -par=12, with #2061 and #2062, script checks only after block 193k) takes 13m51s on a hexacore E5-1650 3.2Ghz)...
2060	11117780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11117780	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2060	11164828	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11164828	sipa	Changes: * Access to the script check queue is now piped through a RAII CScriptCheckQueueControl, which guarantees the queue is fully processed before continuing * Print the number of threads used in debug.log * Dont store block validation results in signature cache (only mempool transactions are stored), but still use them. This allows multiple threads reading the cache simultaneously.
2060	11164998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11164998	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2060	11413748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413748	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2060	11538359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11538359	gmaxwell	Just a comment on negative testing results: Ive been running loops of par inside valgrind on fuzzed blockchains with an instrumented copy of Bitcoin that disables most of the block validity tests (so that the fuzzing doesnt cause the chain to be rejected). In 1000 runs, no errors so far but I did trigger invalid memory accesses after about 100 runs on this code prior to the RAII CScriptCheckQueueControl added in the last patch.
2060	11539429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11539429	sipa	Given that any non-trivial code has at least one bug (see this is indeed bad news :(
2060	11980472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11980472	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2060	12394056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12394056	gavinandresen	ACK. Benchmark results on my mac, testing by doing a fresh sync of the -testnet blockchain pulled over the LAN: Without this pull: 32-bit compile: 270 seconds 64-bit compile: 180 seconds With this pull: 64-bit, 4-CPU : 125 seconds
2059	10921117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10921117	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2059	10921554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10921554	sipa	Example output: - Connect 688 transactions: 758.16ms (1.102ms/tx, 0.623ms/txin) - Connect: 770.16ms - Flush 1455 transactions: 2.30ms (0.0016ms/tx)
2059	10921832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10921832	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2059	10924636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10924636	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2059	10927887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10927887	Diapolo	Should all used printfs honor the fBenchmark flag? And shouldnt microseconds use ``s`` instead of ``ms``?
2059	10934955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10934955	sipa	Ive changed the code to always report in ms, but sometimes with some decimals. Avoids the necessity for a mu symbol, and is more readable. All timing printfs should honor the fBenchmark yes - should be the case now.
2059	10935696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10935696	Diapolo	Thanks, Im fine with that benchmark stuff then. Edit: Seems the ``Make SetBestChain() atomic`` sneaked in here ^^.
2059	10937526	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10937526	sipa	Yes, since they touch the same code, I didnt bother writing them separately (I even mentioned it on the pullreq summart!). If theres an issue with the other pullreq, Ill rebase this one, and if the other gets NAKed or delayed, Ill separate them.
2059	10942490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10942490	Diapolo	I think your smaller pulls should make it much faster into master, so I have no problem with what I noted above :).
2059	11062988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11062988	sipa	Feel like testing this? Id like to know what kind of output you get on Windows.
2059	11063128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11063128	gavinandresen	ACK
2059	11074262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11074262	Diapolo	Yeah, will do that today :). Do I need to start an IBD or are you fine with just any occurance of that messages from the log?
2059	11075643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11075643	laanwj	ACK
2059	11076017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11076017	Diapolo	Here are a few examples with current master + some mods to block file pre-alloc and CAutoFile (dunno if these are related for the benches). 12/06/12 07:57:25 - Connect 293 transactions: 2776.80ms (9.477ms/tx, 3.644ms/txin) 12/06/12 07:57:25 - Connect: 2870.41ms 12/06/12 07:57:25 - Flush 976 transactions: 0.00ms (0.0000ms/tx) 12/06/12 07:57:25 - Connect 108 transactions: 686.40ms (6.356ms/tx, 3.556ms/txin) 12/06/12 07:57:25 - Connect: 702.00ms 12/06/12 07:57:25 - Flush 271 transactions: 0.00ms (0.0000ms/tx) 12/06/12 07:57:26 - Connect 106 transactions: 748.80ms (7.064ms/tx, 3.404ms/txin) 12/06/12 07:57:26 - Connect: 748.80ms 12/06/12 07:57:26 - Flush 283 transactions: 0.00ms (0.0000ms/tx) 12/06/12 07:57:38 - Connect 409 transactions: 3291.61ms (8.048ms/tx, 3.275ms/txin) 12/06/12 07:57:38 - Connect: 3322.81ms 12/06/12 07:57:38 - Flush 1209 transactions: 0.00ms (0.0000ms/tx) Is this a benchmark for LevelDB access and performance?
2059	11117977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11117977	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2059	11124220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11124220	Diapolo	Some values during IBD: 12/07/12 08:08:31 - Connect 60 transactions: 15.60ms (0.260ms/tx, 0.153ms/txin) 12/07/12 08:08:31 - Connect: 15.60ms 12/07/12 08:08:31 - Flush 146 transactions: 0.00ms (0.0000ms/tx) 12/07/12 08:08:32 - Connect 165 transactions: 31.20ms (0.189ms/tx, 0.092ms/txin) 12/07/12 08:08:32 - Connect: 46.80ms 12/07/12 08:08:32 - Flush 409 transactions: 0.00ms (0.0000ms/tx) 12/07/12 08:08:32 - Connect 240 transactions: 0.00ms (0.000ms/tx, 0.000ms/txin) 12/07/12 08:08:32 - Connect: 15.60ms 12/07/12 08:08:32 - Flush 530 transactions: 0.00ms (0.0000ms/tx) Btw. ACK
2059	11127710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11127710	sipa	Seems microsecond_clock on your system has a resolution of 15.6ms - what I assume to be 1/64 of a second. That makes the numbers -benchmark would report quite useless...
2059	11128004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11128004	Diapolo	I didnt even take a close look at the numbers, but your assumption makes sense, if I look at the numbers. Any idea for a working code-path for Win32 then? I could try with GetTimeMillis() instead and see if that numbers make more sense, as at least a ms timer-resolution should be possible (and not a 15.6ms res).
2059	11128104	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11128104	sipa	GetTimeMillis uses the same boost function to get the actual time, so I doubt that will make any difference. Up to you to find something that gives an accurate clock in Windows :)
2059	11128185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11128185	Diapolo	I had read some stuff a few days ago on that issue and it seems ... well hard to do it portable. Any the native WIN32 APIs for time stuff is a thing Ive never used ^^. Ill take another look. Edit: ``Note that the existence of the higher resolution classes (eg: nanoseconds) depends on the installation of the library. See Build-Compiler Information for more information. `` Any idea if that means we need to link against the ``boost_date_time`` library? Edit 2: I tested, which timer resolution is available via: <pre> secs = boost::posix_time::time_duration::num_fractional_digits(); printf("DEBUG: %u digits timer resolution available\n", secs); </pre> ``DEBUG: 6 digits timer resolution available`` So it seems Boost is believing its able to use microsecond resolution... which IS not true as we saw from the results ;). Edit 3: 12/07/12 13:06:13 - Connect 70 transactions: 444.03ms (6.343ms/tx, 3.442ms/txin) 12/07/12 13:06:13 DEBUG: 6 digits timer resolution available 12/07/12 13:06:13 - Connect: 451.03ms 12/07/12 13:06:13 - Flush 181 transactions: 1.00ms (0.0055ms/tx) Next weird thing is I now have such results in the debug.log...
2058	10919204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10919204	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2058	10919515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10919515	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2058	10920649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10920649	gavinandresen	ACK
2058	10924728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10924728	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2057	10915916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10915916	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2057	11075590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11075590	laanwj	ACK
2057	11077883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11077883	sipa	ACK
2056	10909101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10909101	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2056	10910537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10910537	sipa	Updated.
2056	10911188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10911188	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2056	10912073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10912073	gavinandresen	ACK
2056	11014827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11014827	Diapolo	Ive been using this for a while and did not observe strange things. But my observations (as always) should be considered just entry-level in terms of client-usage-and-test-scenarios ^^, sorry :D.
2056	11063094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11063094	jgarzik	ACK
2055	10901823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10901823	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2055	10909485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10909485	gavinandresen	ACK
2055	10910523	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10910523	sipa	Can you squash into one commit? Also maybe add a mention that if you build using a libdb++ version above 4.8, the compiled client will produce wallet.dat files that are incompatible with release binaries.
2055	10946761	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10946761	laanwj	Yeah, please dont recommend using libdb++ 5.x as long as were still using berkelydb for the wallets, as that causes format incompatibilities with binary installations. Apart from that, ACK after squashing to one commit.
2055	10951205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10951205	redshark1802	Squashed into one commit and added reference to the Berkely DB warning :).
2055	10951427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10951427	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2055	10952616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10952616	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2050	10822486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10822486	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2050	10824380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10824380	luke-jr	I dont think the importprivkey functionality should be exposed to normal users. Its really pretty dangerous. Instead, I would suggest implementing the sweepprivkey ("import" the key, flagged as "not part of my balance, but automatically move any funds seen to another address") functionality.
2050	10825545	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10825545	sipa	Im not sure about this. Its a feature many people will like, and it certainly has legitimate uses. On the other hand, I dont like encouraging moving private keys around or vanity addresses...
2050	10833738	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10833738	gavinandresen	I dont like encouraging moving private keys around either. Theyre called "private" for a reason. I agree that "sweep" (and "sweep again if more coins are received on the swept address") is a much better way to go, and useful in more cases.
2050	10836678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10836678	laanwj	What makes importing private keys so dangerous? I suppose its because it is a kind of trojan horse: 1. Other people could be spending coins from it. This is not a scenario currently supported by the client, and result in non-consisent internal administration (wrong balances, double spends, etc). 2. The client could potentially use the key as change address, after which the other person that have the key can steal a large part of your coins. 3. The user could accidentally use the public key associated to the private key as public bitcoin address, ask others to send to it, after which someone else can steal the coins like in 2. I suppose this could be worked around by marking the key as "foreign", not using it for change or showing the public key in the address book, and then either sweeping it or using it for spends only (while carefully monitoring others transactions so that no double spends happen).
2050	10836800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10836800	robbak	If people are importing private keys, then the private key is in two places. Well have people emailing private keys too themselves, private keys on every other USB stick on the planet, and people posting angry bugs about bitcoin loosing their coins and youd better compensate me!!!!! Private key is private. Two people can keep a secret if one of them is dead, and all that. On 29 November 2012 16:25, Wladimir J. van der Laan < notifications@github.com> wrote: > What makes importing private keys so dangerous? I suppose its because it > is a kind of trojan horse: > > 1. Other people could be spending coins from it. This is not a > scenario currently supported by the client, and result in non-consisent > internal administration (wrong balances, double spends, etc). > 2. The client could potentially use the key as change address, after > which the other person that have the key can steal a large part of your > coins. > 3. The user could accidentally use the public key associated to the > private key as public bitcoin address, ask others to send to it, after > which someone else can steal the coins like in 2. > > I suppose this could be worked around by marking the key as "foreign", not > using it for change or showing the public key in the address book, and then > either sweeping it or using it for spends only (while carefully monitoring > others transactions so that no double spends happen). > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2050#issuecomment-10836678>. > >
2050	10836802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10836802	laanwj	BTW your implementation looks very good, havent looked in full detail, but on a high level youre doing everything as its supposed it.
2050	10837627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10837627	Diapolo	I would like to only comment on some style stuff I saw. There are some places where you added unneeded line-breaks (2 in a row). I also think its much nicer to use speaking names for GUI elements like labels and such (eg: transactionFeeLabel or okButton). Consider this feedback constructive and its mostly nit-picking, but Im known to have eagle eyes for such small things, sorry ;).
2050	11032794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11032794	n1bor	Diapolo - thanks for comments happy to tidy them all up! Just not going to do till someone posts on here that they are going to merge the pull. As currently looks like the the consensus is against including this in the client.
2050	12640137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12640137	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2050	16033291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033291	luke-jr	Please rebase.
2050	16035564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16035564	n1bor	Luke - happy to rebase, but only if you are going to pull into client. Thought consensus was you did not want to encourage this sort of thing?
2050	16038655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16038655	sipa	Im personally much more in favor of exporting/importing entire wallets. It has much less risk for shooting yourself in the foot, and doesnt require micromanagement from the user. For that reason, its something I also would object less against to put in the GUI. I intend to work on that soon.
2050	19704866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19704866	jgarzik	Importing private keys really should include a sweep feature for safety. Creating a transaction immediately spending all coins associated with the imported key to a new address. It sounds like consensus is mixed, though Im a bit more friendly to privkey importing than other devs. But I dont want us to leave the poor pull requestor in limbo. We should ACK the general direction or close this.
2050	19706055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19706055	sipa	Im in favor of closing this. It may make sense to have a feature like this that is accessible through an expert mode (coin control comes very close to that), but if made generally available, it would lead to even more misunderstanding about wallets. However, I wouldnt be opposed to having the functionality of #2592 accessible through the GUI. If a sweepprivkey gets implemented, that would seem safe as well.
2049	10867702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10867702	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2049	10906635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10906635	jgarzik	Pretty decent. Only nit: Unix standard is $TMPDIR, and fall back to hardcoded /tmp if that fails. But maybe boost already covers that.
2049	10907020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10907020	gavinandresen	ACK
2049	10908177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10908177	sipa	boost::filesystem::temp_directory_path indeed tries that (and 3 other env variables), and falls back to /tmp afterwards. It is only available in boost filesystem v3 though (introduced in 1.44).
2049	10909012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10909012	jgarzik	ACK
2048	10811946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10811946	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2048	10815589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10815589	gavinandresen	ACK
2048	10815793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10815793	gmaxwell	ACK
2048	10817946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10817946	sipa	Do you mind adding a CheckPoints::fEnabled, and setting that from AppInit2(), instead of constantly reparsing the command-line flag?
2046	10779276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10779276	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2046	10946800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10946800	laanwj	ACK
2045	10778106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10778106	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2045	10780433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10780433	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2045	10952980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10952980	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2045	10986232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10986232	Diapolo	This should be sane now, it was rebased after the removal of the modal flag.
2045	11120386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11120386	Diapolo	Considered ready to get merged?
2045	11307896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11307896	Diapolo	ping
2044	10762163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10762163	laanwj	ACK Though I guess we still have to verify that backupwallet indeed returns false in the cant-overwrite case
2044	10762342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10762342	Diapolo	Yeah, this is not the fix for the underlying problem (if there is one), but an easy addition anyway :). So perhaps Boost is the problem here, Im thinking of the second path in BackupWallet(). <pre> #if BOOST_VERSION >= 104000 filesystem::copy_file(pathSrc, pathDest, filesystem::copy_option::overwrite_if_exists); #else filesystem::copy_file(pathSrc, pathDest); #endif </pre>
2044	10768426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10768426	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2044	10782403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10782403	Joukehofman	boost v1.42. I compiled your code and tested it on my case. It shows an error now :-) . I dont know what versions of libboost was used on 6.3 and 6.2, but I had the same problem with those precompiled versions.
2044	10793371	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10793371	laanwj	please make this end up in the stable release too
2042	10748502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10748502	laanwj	Need rebase already?!
2042	10755255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10755255	luke-jr	Oops yeah, Ill fix that in a bit. (I built it on top of ultraprunes branch)
2042	10768449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10768449	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2042	12660121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12660121	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2042	12899604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12899604	luke-jr	I think I was asleep when I wrote this. The fReadOnly bug is real, but isnt fixed correctly in this case and only matters for read-only blk*.dat files, which have other problems not addressed herein. When/if I take the time to correctly get read-only blk files working, Ill open a new pullreq..
2037	10769036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10769036	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2037	10870180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10870180	sipa	ACK - this seems pointless indeed.
2033	10684635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10684635	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2033	10686086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10686086	sipa	I just observed mempool transactions depending on spent inputs on v0.7.1 with this patch - maybe it doesnt work.
2033	10692632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692632	sipa	Ok, seems the implementation didnt actually remove recursively. Should be fixed now.
2033	10769681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10769681	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2033	10858013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10858013	gmaxwell	ACK. I note we do not yet have any mempool unit tests. But I did test it with a bunch of real mainnet reorgs.
2033	10909547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10909547	gavinandresen	ACK
2033	11579143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11579143	rebroad	did this fix a bug that had been present since version 1?
2033	11579731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11579731	sipa	Yes, indeed. Not a bad one, though.
2033	11582771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11582771	rebroad	it looks like it was a bug that could have successfully created a DOS attack that may even have broken the network - i.e. create loads of conflicting transactions so that the mempool fills up to its limit and then the nodes would have stopped passing on new transactions... yes/no?
2033	11582870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11582870	gmaxwell	No, not really because it requires mining blocks that have later spends than everyone else had accepted. So its naturally limited by the attackers ability to mine blocks.
2033	11589493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11589493	rebroad	Unless the attacker managed to attack a mining node so that they saw the later spends instead of the earlier ones. Or any pool mining owner who wanted to do this presumeably could.
2033	11589620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11589620	gmaxwell	Anyone who controls a large amount of hash power has much more potent attacks available to them than this. (E.g. orphan flooding)
2033	11613095	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11613095	rebroad	Why would orphan flooding be a more potent attack than filling the mempool? Id have thought the orphan pool filling up would be far less of a problem than the mempool filling up. Sorry, probably a discussion for #bitcoin...
2033	11613195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11613195	gmaxwell	Not orphan transactions. Orphan blocks.
2032	10657455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10657455	Diapolo	ACK
2032	10684780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10684780	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2032	11505631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11505631	burger2	Will this fix still work after all the commits done lately?
2032	11508443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11508443	Diapolo	Yes, as there were no recent changes to signverifymessagedialog.ui this commit will merge just fine to current master. Ping :)
2032	11786806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11786806	Diapolo	Can we get this merged please?
2032	11791381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11791381	sipa	This seems to change both sign and verify to alt-m ?
2032	11791798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11791798	Diapolo	Indeed, but they are on different tabs and each tab is reached by the now changed shortcut, so that we now have a shortcut to reach the tab and a shortcut to execute the sign or verify :).
2032	11792007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11792007	laanwj	Tested: indeed, typing alt-m triggers the shortcut in the current tab
2031	10610561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10610561	jgarzik	ACK
2030	10623009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10623009	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2026	10490823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10490823	colindean	Updated as suggested!
2026	10625139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10625139	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2026	11006080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11006080	gavinandresen	Question: why is openssl special with homebrew? Itd be really nice not to have to ship a Makefile.osx patch that is likely to break when we change Makefile.osx in the future, and it looks like openssl is the only change that couldnt just be made to Makefile.osx directly. Also: I think breaking the instructions into three sections: + Installing for development using MacPorts + Installing for development using HomeBrew + Special notes on creating release builds (that Id write) ... would be less confusing. Finally: can you squash all this into one commit?
2026	11029932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11029932	colindean	Homebrew doesnt link openssl like it does other packages because ["The OpenSSL provided by OS X is too old for some software."](https://github.com/mxcl/homebrew/blob/master/Library/Formula/openssl.rb#L9) It installs in "keg-only" mode, and has to be manually linked only if required: > **What does keg-only mean?** It means the formula is installed only into the Cellar, it is not linked into `/usr/local`. This means most tools will not find it. We dont do this for stupid reasons. You can link the formula in still if you need to with `brew link`. - [Homebrew FAQ](https://github.com/mxcl/homebrew/wiki/FAQ) I interpret this to mean that if we rely on openssl to be linked already or include an instruction to link it, things may break. Id rather not see Bitcoin as the cause of a broken dev system because a newer version of openssl is causing problems for Apples stuff. One can get the path to Homebrews installation of openssl with `brew --prefix openssl`. However, it appears that the current makefile.osx doesnt account for the possibility of multiple hierarchies to get the `include` and `lib` for all necessary libraries. It relies on [`DEPSDIR`](https://github.com/bitcoin/bitcoin/blob/master/src/makefile.osx#L10) to set [`INCLUDEPATHS`](https://github.com/bitcoin/bitcoin/blob/master/src/makefile.osx#L12) and `LIBPATHS`. This also exacerbates static building, because it, too, relies on `DEPSDIR` and everything being in the same hierarchy. Maybe static compilation as coded is not so much a problem if the releaser is always using MacPorts. That said, Id rather not see a separate makefile.osx just for Homebrew folk. The patch does *just enough* to make it work for now. I could further improve the patch and the instructions to allow passing of `brew --prefix openssl` at compilation time in order to eliminate the possibility of an openssl version bump messing up the paths added in the patch. If we* could alter `makefile.osx` to better account for the differences between Homebrew and MacPorts, and do so dynamically, we could remove the need for the patch *and* remove the need for a separate path of instructions for each packaging system. Unfortunately, I dont have access to a system with MacPorts installed and Im hesitant to introduce it onto mine for fear of messing up my own environment for other things ;-) If whats here now in this pull request is *good enough* for 0.8, Ill split the HOWTO into sections as suggested and squash these commits somehow (is there a way to do that without having to delete and recreate the branch? Ive only had to squash once and just ended up doing that and resubmitting a PR) and get them ready. Otherwise, perhaps a `makefile.osx` modification is in order for 0.9. *we = someone involved in the project with perhaps stronger Makefile kung-foo than I
2026	11069513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11069513	colindean	I note also that Ill need to remove the `USE_IPV6=1` from the make command, per #2064.
2026	11087387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11087387	gavinandresen	I just set up a machine to do a release build a couple of days ago for the 0.7.2 release, so I went through my bash history and updated the instructions:
2026	11186235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11186235	colindean	Ive not forgotten about this. I intend to get to it mid week.
2026	11297607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11297607	colindean	Ive incorporated the suggested changes and squashed everything together.
2026	11299009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11299009	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2026	12660154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12660154	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
2026	12904847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12904847	luke-jr	rebase needed
2026	12919365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12919365	colindean	I think I did it right...?
2026	13342539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13342539	colindean	I updated my branch to ensure that it merges cleanly with master.
2026	13645465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13645465	colindean	I just updated again, resyncing with master and with two optimizations: * OpenSSL 1.0.1c is no longer hardcoded * Static compilation now works (tested on another 10.8 machine without any of the dev dependencies) The makefile patch is still necessary. A future optimization would ideally remove this necessity, but I dont have another machine available running MacPorts on which I can test.
2026	13674372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13674372	colindean	Another update, after discovering a new formula in Homebrew for building berkeley-db4 without having to revert to an older version of the formula. Revised the makefile patch and the instructions to reflect this. Now, the only existing difference between the Homebrew and MacPorts instructions is the need to patch the makefile because of path differences between the two systems.
2026	13813147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13813147	colindean	Rebased to current master as of 0.8.0 release. anything else?
2024	10485027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10485027	laanwj	I dont understand how this can fix anything. The code should be equivalent. I suspect this is a memory corruption issue, and that by adding a variable youre moving some memory out of the way, probably moving the corruption issue to some place else.
2024	10485083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10485083	laanwj	~~I think I understand the problem: fDbEnvInit seems to be never initialized to false when CDBEnv is created. It should be initialized to false in the constructor.~~ ~~Otherwise, if the CDbEnv is created and destroyed without calling Open, something bad may happen in the destructor.~~ Edit: Hm no the CDBEnv object is created as global static object, so it should be zero-initialized. So thats not the cause either. Still, initializing it to false seems a good precaution to prevent problems in future refactorings.
2024	10485195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10485195	laanwj	Another possibility would be a static destructor order issue. Weve had those before with GetDataDir(). In which case this patch can actually solve the problem, by not calling GetDataDir()! But I thought that problem inside GetDataDir() was solved. ACK anyway, this change can never hurt, storing the path inside the object is better encapsulation too. Edit: But please also add the `fDbEnvInit` initialization.
2024	10485949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10485949	Diapolo	The last time my debugger was working correctly, I saw that inside the Boost .string() code it was crashing. So this patch solves that by preventing the use of Boost filesystem in the destructor.
2024	10486018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10486018	Diapolo	Could this be related Edit: Last rebase adds init of the private flags to false. Edit 2: It seems the crash is coming from path.hpp (Boost filesystem).
2024	10489717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10489717	sipa	Havent tested, but I dont expect to see any difference on Linux. ACK
2024	10598026	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10598026	luke-jr	Looked over the implications visually. This actually fixes a bug on all platforms in theory, though in practice has no effect (besides destructor safety) since we only use CDBEnv for the same path. ACK
2024	10628299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10628299	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2023	10468955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10468955	laanwj	never mind, seems that diapolo got his to work already
2022	10462034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10462034	Diapolo	These were the warning my patch fixes: src\main.cpp: In member function bool CBlock::ConnectBlock(CBlockIndex*, CCoinsViewCache&, bool): src\main.cpp:warning: unknown conversion type character l in format [-Wformat] src\main.cpp:warning: unknown conversion type character l in format [-Wformat] src\main.cpp:warning: too many arguments for format [-Wformat-extra-args]
2022	10463113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10463113	luke-jr	Looks like a bug in Microsoft printf family of functions :( ACK for 0.7.2 & master
2022	10463246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10463246	Diapolo	Thanks for taking a look and I wanted to clarify why I patched it :).
2022	10464805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10464805	sipa	ACK
2022	10468416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10468416	jgarzik	Please fix the commit message. The one-line summary of your change, as it appears in "git shortlog" and other tools, is wholly useless: "fix pull #2018" That is utterly meaningless without further research; it tells nothing about what code is modified, or how it was modified, or why it needed modification. We use "git shortlog" to generate summaries for release notes and other purposes. The first line is a summary of the change, and for this, probably should be something like "ConnectBlock: fix error() format to be unsigned" etc.
2022	10468996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10468996	laanwj	How is this a bug in the Microsoft printf function
2022	10469142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10469142	luke-jr	%lld is standard C printf format, but not supported by Microsofts printf:
2022	10469162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10469162	laanwj	Ooh, okay something made by MS is incompatible to the standards, now thats a now one, lets call the press :)
2022	10471842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10471842	laanwj	I still dont get those warnings though. We define: #ifndef PRI64d #if defined(_MSC_VER) || defined(__MSVCRT__) #define PRI64d "I64d" #define PRI64u "I64u" #define PRI64x "I64x" #else #define PRI64d "lld" #define PRI64u "llu" #define PRI64x "llx" #endif #endif Which means that in the case of MS, we use "special" retarded character sequences. The thing is, there is no l in any of those. So where does that warning come from?
2022	10471900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10471900	luke-jr	The original code which Diapolo is referring to used %lld; he replaced that with PRI64u, but it needs to be PRI64d since the argument is signed.
2022	10471969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10471969	laanwj	Right, I get it now, thanks
2022	10472051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10472051	Diapolo	Sorry, yes it was a weak commit message :), fixed it!
2019	10469261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10469261	laanwj	congrats on getting it to work :)
2019	10472089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10472089	Diapolo	In the end your patience to explain things made me want to get it working ^^.
2017	12666293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12666293	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2017	14008912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14008912	sipa	Id like to see this in 0.8.1.
2017	15362013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15362013	jgarzik	Superceded by #2409
2016	10432231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10432231	jgarzik	ITYM back(). Updated.
2016	10490659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10490659	sipa	I like the general design, but this pull mixes an client-side optimization with changing the network protocol policy. Im not against making it more strict and not trying to resync after a partial message or garbage data, but maybe that needs some discussion at least.
2016	10594689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10594689	mikehearn	When I didnt have resync after garbage data in bitcoinj I did see failures due to it, though it was long ago. BTW, is it possible now to send huge numbers of messages and cause OOM conditions? Previously if you did that the unread data would stick around in the kernels socket buffers and be discarded automatically. Now I guess the socket thread can read faster than the main thread can process.
2016	10598565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10598565	sipa	The last time I saw garbage occurring frequently was after the feb20 protocol upgrade. I suppose we can start requiring no garbage now... The is still a receive buffer flooding check, by the way.
2016	10641183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10641183	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2016	10669153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10669153	sipa	I wonder why we even need that flood protection. You could just as well stop polling sockets for read events if their receive buffer is above some threshold.
2016	10776200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10776200	sipa	For the record: I saw a node segfault with (among others) this patch, in the ~CNetMessage destructor (the CDataStream in it was not allocated, I assume uninitialized memory used as a CNetMessage).
2016	12735236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12735236	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2016	15362009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15362009	jgarzik	Superceded by #2409
2014	10399427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10399427	Diapolo	NACK
2014	10468959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10468959	laanwj	We had this discussion many times before, this is just not coming back
2014	10644359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10644359	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2013	10397634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10397634	jgarzik	ACK
2013	10399686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10399686	laanwj	Good idea.
2013	10647954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10647954	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2011	10372610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10372610	sipa	I think youre a bit over-eager, and missed the fact that mocking is only used in tests.
2011	10372825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10372825	Diapolo	Indeed... searched through the client source but didnt search within tests, sorry.
2010	10377374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10377374	jgarzik	ACK
2010	10398588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10398588	laanwj	ACK
2010	10430736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10430736	sipa	ACK
2009	10348938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10348938	luke-jr	ACK
2009	10356478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10356478	laanwj	Im probably overlooking something, but if the lock is grabbed twice in the same thread, how can that cause a deadlock with recursive mutexes?
2009	10358998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10358998	sipa	It would seem the BDB locks are not recursive.
2009	10359569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10359569	laanwj	Right,it wasnt clear to me that this concerns the bdb locks, thanks. ACK ofc.
2009	10380396	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10380396	sipa	Do you think this warrants a 0.7.2?
2009	10381969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10381969	gavinandresen	Yes, I think this is serious enough to warrant a 0.7.2.
2009	10385645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10385645	luke-jr	I have 0.7.x ready-to-tag as soon as this gets pulled in to master. Other fixes included: * faff50d Fixes a race condition in CreateNewBlock and a future null deref on testnet. * 4fbad91 Fix out-of-bounds read noticed by Ricardo Correia * bd2e140 CAddrMan: verify pchMessageStart file marker, before reading address data * 22bb049 Fix a use-after-free problem in initialization (#1920) * c4d884e No need for test fixture now that multisig is enabled on main network. * 128eefa Qt: small header changes / fixes * 6b3783a fix some double-spaces in strings * 83a3fb8 ensure AskPassphraseDialog::eventFilter forwards events * 0f8a647 dont use memset() in privacy/security relevant code parts * 39ad0aa Fixed 100% CPU utilization problem on FreeBSD 9
2009	10446350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10446350	Diapolo	I would not include as this needs the bitcoinstrings.cpp update (#1999) and a new master file on Transifex, which is what Im waiting for to start translating the german stuff, to have the changes in for all languages. Its clearly for 0.8 (and already merged in master) and non-critical + needs time to mature.
2009	10446893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10446893	gavinandresen	NACK on these, as I dont think they pass the risk/benefit test: > - 128eefa <https://github.com/bitcoin/bitcoin/commit/128eefa> Qt: > small header changes / fixes > - 6b3783a <https://github.com/bitcoin/bitcoin/commit/6b3783a> fix some > double-spaces in strings > - 0f8a647 <https://github.com/bitcoin/bitcoin/commit/0f8a647> dont > use memset() in privacy/security relevant code parts > > -- -- Gavin Andresen
2009	10447659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10447659	Diapolo	I disagree here, as I think is quite an important fix / change.
2008	10349891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10349891	jgarzik	99% ACK Prefer unsigned for flags-type variables...
2008	10350119	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10350119	luke-jr	Some reason not to use an enum type? :p
2008	10350150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10350150	sipa	You cannot OR enum type elements together without them degenerating to an integer type, I think.
2008	10351913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10351913	luke-jr	GCC doesnt warn about it, at least.
2008	10352454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10352454	jgarzik	is correct. Storage class for enum is int, unless greater size is needed (int -> unsigned int -> long -> unsigned long -> etc., IIRC)
2008	10356561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10356561	laanwj	Indeed, you can define flags using an enum, but you cant use the enum as parameter when you want to be able to specify multiple flags as its no longer an enumeration. I believe Qt has a typesafe flags type but that doesnt help us here :) I do think defining the flag values using an enum has a nicer syntax than a list of const XXX. And I agree with that its better to have anything that you manipulate bitwise be unsigned. It steers clear of crazy undefined areas of C++, such as overflows flipping the sign bit.
2008	10356826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10356826	jgarzik	This might work, too, IIRC: ```` enum my_foo_bits { FLAG_FOO = (1U << 0), FLAG_BAR = (1U << 1), }; ````
2008	10357651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10357651	Diapolo	Nice I observed the same problem with the client interface pull we are working on ^^. We should then change to ``unsigned int`` there, too, right? GCC warns about OR 2 enum flags, when the function parameter is expected to be an enum ;), tried it.
2008	10358469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10358469	laanwj	Yes, it applies there too :)
2008	10358918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10358918	sipa	Updated.
2008	10369014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10369014	gavinandresen	ACK
2008	10398577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10398577	laanwj	ACK
2008	10425348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10425348	Diapolo	Comments from are not in, so it would be nice if could update to these last 4 suggestions before this should get merged IMO.
2008	10427753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10427753	sipa	Updated.
2006	10434355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434355	jgarzik	ACK
2006	10649689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10649689	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2005	10398607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10398607	laanwj	Indeed: The behaviour of fclose() is undefined if the stream parameter is an illegal pointer, or is a descriptor already passed to a previous invoca tion of fclose(). ACK
2004	10349278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10349278	sipa	ACK on the code changes, but one nitpick: can you separate the git commit summary (the first line) and the rest? Some git tools assume everything up to the first empty line is the summary.
2004	10353655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10353655	alexanderkjeldaas	Done.
2004	10490692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10490692	sipa	ACK
2004	10492669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10492669	Diapolo	Compiles just fine on Windows and causes no obvious problems, cant really comment on the changes though.
2004	10651218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10651218	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2003	10264474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10264474	laanwj	ACK
2003	10265277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10265277	sipa	Regarding Begin/End/AbortMessage, wouldnt it be cleaner to introduce a CMessageBuilder class, which holds a scoped lock of a referenced CNode::cs_vSend, and forwards operator<< to the respective vSend? For example CNode::PushMessage(pszCommand, a1) could then become simply { CMessageBuilder m(this, pszCommand); m << a1; m.Send(); }.
2003	10434403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434403	jgarzik	How about just building unlocked, then copying the message into vSend. That adds a memory copy (potentially large for "block" messages), but it eliminates the locking mess, and also eliminates the whole nHeaderStart-then-back-out-if-we-abort stuff. Clean and simple, if the memory copy burden is OK.
2003	10655317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10655317	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
2003	11075710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11075710	laanwj	I like idea. Shared-nothing passing messages is a safe and elegant default, if it turns out to be a performance burden, which I dont believe so, it can always be optimized again **without** the locking mess.
2003	11094855	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11094855	alexanderkjeldaas	Hi, sorry I have not had time to follow up on these locking changes, but.. Actually locking and synchronous shared-nothing message passing are very similar from a theoretical point of view. To build an intuition for this, imagine that you create a thread for every set of locks that can be held in the program at the same time, by some thread. What does this mean? It means that you create a thread for every single "group" of data that is protected by a set of locks, much like in a fine-grained message-passing implementation. Also, for any two locks that can be held at the same time, define a lock acquisition order (so lock A must be taken before lock B, if they can both be held by the same thread at the same time). Now, imagine that every time you take a lock, you instead pass a message to the designated thread with a copy of "the environment" which consists of all variables visible in the lexical scope. This message is synchronous, so you wait until that other thread returns. Then this is equivalent to the synchronous shared nothing message passing implementation. Note that no other thread can legally modify "the environment" because that would require a lock, and thus execution of said modification would have to happen in a thread which is currently blocked. Anyways, what this means is that the process of annotating which data is protected by which locks is exactly the same information that one encodes when restructuring a program into message-passing style. However, message-passing style is a pretty heavy transformation, as it affects both performance and correctness. Lock annotation only deals with correctness. Also, for performance reasons, message-passing style in C++ is often not synchronous. Asynchronous message-passing can actually be a lot harder to do right than a lock-based implementation because the number of states that the program can be in is suddenly expanded over the lock-based implementation. So I would suggest that the bitcoin software is not rewritten to use message-passing. Rather, simply use lock annotations, and as a hygiene issue, limit the size of "the environment" typically by restricting the visibility of global variables. Also, try to get rid of TRY_LOCK. Alexander On 6 December 2012 04:44, Wladimir J. van der Laan <notifications@github.com > wrote: > I like <https://github.com/jgarzik>s idea. Shared-nothing > passing messages is a safe and elegant default, if it turns out to be a > performance burden, which I dont believe so, it can always be optimized > again *without* the locking mess. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11075710>. > >
2003	11098676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11098676	laanwj	Indeed, theoretically they are equivalent (still, in practice it is harder to mess up as subtly with message passing, as you can see in one glance what is passed instead of having to spend a lot of time carefully analyzing locks). But I think jgarzik was talking about one specific case, building a message thats going to go over a socket anyway to get rid of a TRY_LOCK, not rewriting the entire application.
2003	11100068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11100068	alexanderkjeldaas	Aha. Mea culpa. That does indeed seem like a good plan. On 6 December 2012 15:58, Wladimir J. van der Laan <notifications@github.com > wrote: > Indeed, theoretically they are equivalent. > But I think jgarzik was talking about one specific case, building a > message thats going to go over a socket anyway to get rid of a TRY_LOCK, > not rewriting the entire application. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/2003#issuecomment-11098676>. > >
2003	11298939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11298939	gavinandresen	Merging; Im excited about using clang to help us make sure locking is correct and efficient.
2002	10264697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10264697	laanwj	ACK
2002	10264978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10264978	sipa	ACK
2000	10256563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10256563	sipa	Those are artefacts from previous refactorings, in an attempt to prevent unreadable diffs in the first place. Its probably a good thing to fix those before release.
2000	10260847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260847	gavinandresen	ACK
2000	10264694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10264694	laanwj	ACK (long live `git diff -b`)
2000	10264971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10264971	sipa	ACK
1997	10254732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254732	sipa	ACK
1997	10260882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260882	gavinandresen	ACK
1995	10254336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254336	laanwj	Need to look at this in detail, but I certainly applaud the effort of improving the locking situation. I dread having to debug deadlocks in the current source. I also took a look at this in the past (see #1801), but I didnt have the patience at that time to unentangle the complex web of locks. Also the nested mutexes are indeed a bad idea. If you go through the difficulties of making sense of it all, it may be wise to switch from shared state completely and switch to a message-passing architecture. This will also allow running the different parts in different locked-down processs eventually, increasing robustness and security. But its a lot of work.
1995	10256133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10256133	alexanderkjeldaas	On 10 November 2012 08:41, Wladimir J. van der Laan < notifications@github.com> wrote: > Need to look at this in detail, but I certainly applaud the effort of > improving the locking situation. I dread having to debug deadlocks in the > current source. > > I also took a look at this in the past (see #1801<https://github.com/bitcoin/bitcoin/issues/1801>), > but I didnt have the patience at that time to unentangle the complex web > of locks. Also the nested mutexes are indeed a bad idea. > > If you go through the difficulties of making sense of it all, it may be > wise to switch from shared state completely and switch to a message-passing > architecture. This will also allow running the different parts in different > locked-down processs eventually, increasing robustness and security. But > its a lot of work. > > Actually what I am doing is a series of transforms. First I annotate data and locks based on evidence in the code. So I see that a given lock is taken before mutation of a variable, then that locks protects the variable. The annotations on functions are again just deduced from that. Then the compiler will prove inconsistencies, and that is when one either have to change the annotation, or change the locking code. The latter is not automatic but depends on knowing the code in question. I understand that the result of all of the above can be somewhat hard to digest as a patch. I can make it easier by splitting it into smaller pieces, but first Id like to get thumbs up for this kind of annotations. It really is a domain-specific type system available in clang. Ive done a large backend system at Google using this strategy, and not once did I have to debug locking issues. And this in a very popular product. Unfortunately, at this point in time I dont have much time to dedicate to this (Im doing a startup, so I need to be selective about my time). If you are interested, I can also insert TODOs for other developers to look at, for dubious locking/APIs that are too entangled. I have personally found that having a lot of TOODs in the code makes it easier for others to understand suboptimal code that they can reasonably try to fix when they refactor a piece of code, but others find that it makes the code look even more horrible than it is. YMMV. Smaller sized changes would be something like: 1. Add the annotation support 2. Do the necessary changes to sync.h to support annotations 3. Annotate most of the classes/interfaces and do transformations of methods that are involved in recursive locking. 4. Create a patch that does the actual locking changes, including the compler-deduced inconsistency at each point. 5. Remove the compiler comments from the code. Alexander > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/1995#issuecomment-10254336>. > >
1995	10257587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10257587	sipa	Im certainly in favor of improving the locking system. I didnt know about clangs -Wthread-safety, but it certainly looks like a nice way to improvements. If we go that way, Id like to see it completed as well, so that probably means rebasing from time to time, and following up. Unfortunately, refactoring patches are often not considered high priority, and they conflict easily with other patches. About the locks in general, I think most of the uglyness/entanglement is the result of lack of encapsulation. Many objects expose their inner state publically, and are also accessed/modified from almost everywhere. I think we made at least some improvement since Satoshis days (there wasnt even a CWallet or CkeyStore, and all was done from within main), but theres a long road ahead still. For the block chain, Ive been planning to add a class to separate the block tree (mapBlockChain, pblocktree & co) and the coin state (pcoinsTip, hashBestChain) entirely after ultraprune (which is now merged). Ideally, both get guarded by separate locks (so cs_main can go), and encapsulate them in well-behaved classes. Regarding callbacks, has worked on creating a message queue for the core before, so callbacks to wallet could run in separate threads. This never got merged, unfortunately.
1995	10259812	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10259812	laanwj	I agree that doing this in multiple phases is a good idea, and that adding the annotations would be a good first step, so that we can all get an idea of the kind of warnings that clang gives in this case.
1995	10260803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260803	gavinandresen	Thumbs up from me on improving the locking; ideas for how we can test to make sure were not making things worse as we improve the code are welcome.
1992	10201700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10201700	jgarzik	How about checking the core thesis -- that memset is wholly optimized out -- before proceeding? Im not sure gcc behaves this way.
1992	10203124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10203124	Diapolo	Even if GCC would not do this, there is such a wide number of used GCC versions or other compilers used by people, who compile our client, that IMO it makes sense to follow such a hint:
1992	10203156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10203156	laanwj	Not everyone is compiling with gcc, clang is also used, and maybe even MSVC. And if gcc is not doing this in the current version there is nothing preventing developers from adding it in a later version. As it is known that some compilers optimize out memset in some cases, and there is no disadvantage to doing this, I think this is a good precaution in any case.
1992	10207513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10207513	sipa	CBase58Data should probably just use zero_after_free_allocator, instead of doing wiping by itself.
1992	10223462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10223462	Diapolo	I updated the pull with your suggestion, can you please have a look.
1992	10254741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254741	sipa	ACK
1992	10254997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254997	laanwj	ACK
1992	10257417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10257417	gmaxwell	ACK.
1991	10115318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10115318	luke-jr	The problem you refer to was fixed in 0.7.1 already. Transactions received via block download are tagged with the block time now, except in unusual circumstances.
1991	10119014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10119014	znort987	Yes, but what you describe only affects new transactions. This pull request provides an RPC that cleans up all transactions, including older ones.
1991	10123138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10123138	luke-jr	The first time you run 0.7, it should import the older ones intelligently...
1991	10131755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10131755	gavinandresen	NACK: Im against one-time-use RPC commands, especially for problems that weve solved.
1991	10148403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10148403	laanwj	Agreed@gavin. One-time fixes should be automatic or if it really needs to be manual, a command-line arg. But this case should be already fixed...
1991	10164925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10164925	znort987	This is indeed fixed now, and the RPC is not useful anymore. Closing
1990	10254192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254192	Diapolo	You should not merge upstream changes but rebase your pull onto current master. The way this pull is now it wont be accepted I think. - ``git checkout "local branch"`` - ``git fetch upstream`` - ``git rebase upstream`` - ``git push origin "local branch" -f``
1990	10260902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260902	gavinandresen	Needs to be rebased into one commit, and the same change should be made to the other OSs Makefiles.
1990	10310368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10310368	robbak	Ive messed up my clone, so Ill do it again, the right way. Thanks.
1989	10080541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10080541	jgarzik	I understand the motivation -- I use the internal miner every day on testnet -- but this change would defeat anyone who scripts setgenerate-on-startup, because it does not automatically re-enable mining once IBD is complete.
1989	10082247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10082247	Diapolo	You are right, but to automatically enable the miner it would still be possible to use -gen or set it via the bitcoin.conf. But if you see no way that this options suffice, you are free to close the pull.
1989	10083466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10083466	gavinandresen	I agree with jgarzik. Closing.
1988	10062187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10062187	Diapolo	I suppose ui_interface.h - MessageBoxFlags could be cleaned up or the GUI part needs some reworking to make this options available (which seems not needed, as we only use MessageBoxFlags for displaying warnings / errors currently).
1988	10062429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10062429	laanwj	ACK! This needed to be done badly :) Indeed, the UI message interface has a lot of unused flags (inherited from Wx). Some of them could be implemented and used, others are completely useless and can be removed. Feel free to do so.
1988	10066418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10066418	Diapolo	If you are fine with the code please first merge this and Ill create another cleanup-pull afterwards? Edit: I also thought about changing the message box caption for InitError() and InitWarning() to ``Bitcoin - Error`` and ``Bitcoin - Warning``.
1988	10089714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10089714	Diapolo	Ill update this pull tomorrow :) did a litle more work here!
1988	10096508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10096508	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1988	10101054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10101054	Diapolo	Updated to not only fix the bug with always having an error icon, but to also extend the CClientUIInterface.
1988	10240492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10240492	Diapolo	Updated to just use masks, can you please take another look. Thanks for your time :).
1988	10318189	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10318189	Diapolo	Updated to make the MASKs part of the enums and now prepends "Bitcoin - " to the captions.
1988	10318427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10318427	laanwj	Sorry for being picky here, but Im trying to get this "perfect" in one go.
1988	10318475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10318475	Diapolo	Im the one who loves to do things perfect, so Im really fine with getting constructive feedback!
1988	10327841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10327841	Diapolo	Updated to allow more efficient usage of ThreadSafeMessageBox with predefined MSG_ERROR, MSG_WARNING or MSG_INFORMATION, which dont need a string for title/caption anymore. Example before and after: ``uiInterface.ThreadSafeMessageBox(strerr, _("Error"), CClientUIInterface::ICON_ERROR | CClientUIInterface::BTN_OK | CClientUIInterface::MODAL);`` ``uiInterface.ThreadSafeMessageBox(strerr, "", CClientUIInterface::MSG_ERROR);``
1988	10357289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10357289	Diapolo	Would it be better (typesafe) to directly use ``CClientUIInterface::MessageBoxFlags style`` instead of ``int style`` in the modified functions? Seems like a not well thought idea, as (ICON_ERROR | BTN_OK) are not recognized as enum but as integer...
1988	10362927	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10362927	Diapolo	Ill merge the last commit if you ACKed all changes and are fine with the pull as is now :).
1988	10363835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10363835	laanwj	Code/design ack - still need to test
1988	10364671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10364671	Diapolo	Good, merged commits, no code changes.
1988	10372889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10372889	Diapolo	Had to fix the connect() calls in bitcoingui.cpp as they still were using int instead of unsigned int.
1988	10532022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10532022	Diapolo	I would love to replace all direct ``notificator->notify()`` with ``message()`` in another pull. Are you fine with using ``message(tr("foo"), tr("foo"), false, CClientUIInterface::ICON_WARNING);`` to achieve this :)? Did you have the time try to test out this pull yet?
1988	10545571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10545571	Diapolo	Added a detailed comment for ::message() and added a missing unsigned ;).
1988	10659166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10659166	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1988	10692396	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692396	Diapolo	I need your help getting this in, any time-window :)?
1988	10749455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10749455	Diapolo	I would like to use the new interface for other pulls, so it would be great if you could prioritize the testing of this pull :).
1988	10749506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10749506	laanwj	I intended to merge it this morning but forgot. Ill try to do it in the evening today.
1988	10749645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10749645	Diapolo	Thats fine, thanks.
1988	10770223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10770223	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1987	10061829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10061829	Diapolo	ACK, security measures are always a nice addition.
1987	10083500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10083500	gavinandresen	ACK
1987	10092522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10092522	sipa	Im not sure this will help, but ACK.
1987	10098468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10098468	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1987	10163045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10163045	TheBlueMatt	Sorry, that was a timeout due to slow jenkins server..., Ill get this retested (and fix the false negatives here)
1986	10062557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10062557	laanwj	I agree this is useful, even with encrypted transport over SSL its a safe precaution to not use cleartext passwords. Its a pity though that we need to invent our own authentication scheme for this, but it looks like you evaluated the other options already. One question: taking a quick look at the code I dont see any challenge response code in there. How well does this withstand replay attacks? Does it check the embedded date/time?
1986	10078302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10078302	jgarzik	Your basic impression is sound. HTTP Digest was the preferred solution, but that introduces an additional round-trip to obtain a server nonce value, mitigating replay attacks. Lacking that round trip to gain additional protection, the best one can do is make sure the embedded time is within a certain window. Currently there are no time checks, because I wanted to get some feedback as to best time window. The server could demand that the HTTP request time be +/- five (5) minutes of its own system clock... or one hour? Which one takes into account broken clients etc. the best? What is a good time window? The smaller the window, the more secure.
1986	10081088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10081088	jgarzik	Just added a commit to clamp the timestamp to +/- 60 seconds. However, it is still open for discussion, because this is a usability issue: users with a drifting clock will get an unfriendly, vague "not authorized" error message. The window should be as small as possible... while still being wide enough to avoid most users hitting this issue. (of course, I think all users should be running or syncing with NTP, but thats an unrealistic opinion.....)
1986	10082143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10082143	gmaxwell	So why not use digest auth instead of something custom (and fragile) and solve the latency concerns by persisting the connection where youre concerned with that. The session bring up tear down has more of those nasty round trips in any case.
1986	10083046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10083046	jgarzik	"custom and fragile" is oversold, considering this is intentionally highly similar to Amazon S3s HMAC authentication scheme. S3 must even deal with the same issue: picking a time window encompassing average client clock drift, without shutting out too many. I think they chose 5 minutes.
1986	10083337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10083337	gavinandresen	RE: times: default should be as secure as possible. Users should sync their clocks (but an if (fDebug) printf("rpc timestamp out of sync...") would be nice to make it easier to debug but not open up non -debug usage to flood-of-bad-authorization DoS attack). RE: custom and fragile: This seems less fragile than the old, maybe-soon-to-be-broken, MD5-based HTTP digest authorization. Jeff: any reason this is highly similar to Amazons scheme and not exactly the same?
1986	10084019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10084019	gmaxwell	Im just concerned that were solving things that werent obvious a problem with novel cryptographic authentication protocols. Even with authentication it is still unacceptable to run RPC across an insecure network because an active attacker can just intercept and replace RPC calls (not to mention sniffing the content)... and without connection persistence anything latency sensitive will still suffer. And this will insert really confusing failure modes. I dont normally expect my clients clock to have to be in the right timezone.
1986	10260979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260979	gavinandresen	The DKIM RFC 6376 : ... also seems very similar. It uses an explicit expiration time, which seems like the right thing to do. It is overly complicated for this (e.g. we dont need multiple signature algorithms, dont need to specify which headers are part of the signature hash, etc), but I always like adopting or adapting an existing standard that experts have blessed instead of inventing our own.
1986	10316647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316647	luke-jr	Needs rebase
1986	10434614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434614	jgarzik	Rebased. Still need to address valid etc. comments.
1986	10663520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10663520	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1986	18694001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694001	jgarzik	Closing. Will reopen with closer integration with Amazon S3 spec, as per comments.
1986	22891796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/22891796	luke-jr	Found a bug. The initial request sends "Connection: close" header, but then if the server requests Basic auth instead, it sends the retry over the some socket (which is now closed).
1984	10061786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10061786	Diapolo	Ive been using a similar approach for months with my local Windows build, what wonders me is that the official build process seems to not need ``-loleaut32``, any idea for this? Otherwise I can confirm this change is needed to directly build on Windows! Lets see what our pull-tester is making from this ;).
1984	10092931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10092931	sipa	ACK. Does not break gitian build.
1984	10266179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10266179	Diapolo	ACK then.
1984	10268653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10268653	grimd34th	Diapolo, i had to add ```-loleaut32``` as per but i also shifted it around with the other deps
1984	10460564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10460564	luke-jr	Could you shed some light on whether 0.4.x - 0.6.x need this as well? Thanks
1984	10463432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10463432	Diapolo	I really cant comment for < 0.6 as I never compiled any versions below that for myself, but I remember that some Boost version update made me use a similar project-file. Dunno remember more details, sorry.
1983	10080914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10080914	jgarzik	I like the old, deprecated names much better than the new ones ;p
1983	10082363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10082363	Diapolo	IMHO, we should define, what deprecated means in that case and when it is considered safe to remove old naming conventions :). Perhaps add a date or version, when this is the case.
1983	10083144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10083144	gavinandresen	ENOCARE/ACK. (I dont really care, changes looks fine).
1983	10100479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10100479	laanwj	Have we really arrived at the point that we deprecate commands (and thus break backwards compatibility) for aesthetic reasons? This means well end up with duplicate commands for a long time, make it harder for people to google the commands. And communicating this to users is another problem, as we dont have an official API documentation to say "this will be deprecated in version XXX". Its not worth the trouble.
1983	10100621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10100621	Diapolo	I just wanted to ask :), your points indeed are clear and valid! As this pull renames without removing the old names that problem doesnt rise.
1983	10104504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10104504	sipa	I think the only RPC makeover worth doing is a much more fundamental one, where we normalize commands, separate them clearly into modules (as already reflected in the source code... but who would now guess that gettransaction is a wallet RPC, and getrawtransaction a blockchain one?), normalize the data types used (amount as strings/satoshis/floats, difficulty as targethash/hexbits/float), perhaps add support for multiple wallets, make the error codes consistent, ... That is much more work though, and probably means some RPC v2 mechanism like was already proposed before. About this... -ENOCARE
1983	10260993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260993	gavinandresen	: "setaccount" used to be called "setlabel", so there is a precedent for breaking compatibility (after maintaing the old names for a while) just for aesthetic reasons.
1983	10434460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434460	jgarzik	Consensus seems to be "dont care / meh / not worth the trouble"... closing. Perhaps put this on a list for a bigger RPC revamp, or right before RPC is locked in stone for version 1.0 (whenever that is).
1982	10057932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10057932	sipa	I like the idea of exposing certain data via HTTP instead of as RPC calls. Need to think about the format, though.
1982	10060796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10060796	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1982	10083819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10083819	gavinandresen	OK on the first two commits. What is the use case for dumping crypted wallet keys?
1982	10434635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434635	jgarzik	Rebased. wallet backup, that doesnt need to be encrypted yet again. has a fair point on format, though.
1982	10667286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10667286	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1982	16084814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16084814	jgarzik	Closing. Not much interest, and wallet dump format still an open question. Was originally at request.
1981	10053562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10053562	jgarzik	ACK
1981	10068475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10068475	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1981	10200605	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10200605	gavinandresen	ACK
1981	10205878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10205878	Diapolo	Im interested, what benefit does this induce performance wise? Any numbers or some more details?
1981	10207447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10207447	sipa	Before, the LevelDB write buffer was always 4 MiB, the LevelDB cache for both databases (one very small, one somewhat larger), and the coin cache was flushed everytime 5000 transactions changed. This commit makes the -dbcache value better respected, by splitting it over all types of caches, using a meaningful distribution (I tried a few variations). The result is far fewer flushes during IBD, lower memory usage (as its 25 MiB total now, instead of 2x 25 MiB in addition to the coin cache and write buffer) and the available cache size is used more evenly. Performance-wise: I got a 1.4x speedup for a -reindex to block 193000.
1980	10070463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10070463	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1980	10254749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10254749	sipa	/poke
1980	10434479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434479	jgarzik	ACK Seems somewhat important to merge this, yes?
1980	10438860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10438860	Diapolo	Guess there is no need to wait fot as it seems to be down?
1980	10441953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10441953	sipa	Yes, kinda. Reason I want is because Matt claimed it had tests for this issue in particular, though it seems to validate head just fine.
1980	10619071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10619071	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1980	10625345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10625345	Diapolo	It seems "he" is working again :), nice.
1979	10050509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10050509	laanwj	ACK!
1979	10081517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10081517	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1979	10082325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10082325	Diapolo	ACK
1979	11580000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11580000	rebroad	Bravo!
1978	10049978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049978	jgarzik	ACK
1978	10066551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10066551	Diapolo	ACK, makes sense and should not need deeper discussions ;).
1978	10087862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10087862	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1977	10049150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049150	sipa	Are you sure this is a no-op? Maybe one of the included header files between the undef and the define needs the original, or tries to define printf by itself?
1977	10049209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049209	Diapolo	It was this pull, who included this change but as you see between the #undef and the #define are only boost or std headers, well Im not sure its a no-op, but compilation and running the client is working fine. We include util.h quite often and its mostly before boost headers... It was your pull, perhaps you can enlighten this?
1977	10049324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049324	laanwj	That line is actually ancient. Its showing up the text as being from me because I renamed `src/rpc.cpp` to `src/bitcoinrpc.cpp`. However, the line was in there way before that. Some deeper git forensics shows that the first commit in which the printf redefinition was in `src/rpc.cpp` was 84c3fb0. This appears to be *also* a reorganization commit, in which `/rpc.cpp` was renamed to `src/rpc.cpp`. Digging even deeper, 22f721d was really the first commit in which it was introduced (by Satoshi himself). Looks like it was added for "MSVC 8 compatibility". FYI, the git command to grep a while throughout all commits: git grep OutputDebugStringF $(git log --pretty=format:%h) -- rpc.cpp
1977	10049364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049364	Diapolo	Thanks for digging, although Im still not sure if its needed there or not. MSVC 8 is ancient, also.
1977	10049397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049397	laanwj	No one knows. Im ok with removing it. After all, as you say, all the rpc*.cpp spinoffs work fine without it. Though my real preference would still be to remove the re-definition of printf, rename OutputDebugStringF to some sane name such as debug_log(), and use that throughout the source code. But I dont think everyone agrees.
1977	10052514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10052514	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1977	10057945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10057945	sipa	ACK
1976	10049366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049366	laanwj	Its too bad all this stuff needs to be included in the headers
1976	10056522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10056522	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1976	10057955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10057955	sipa	Meh. Minimizing includes is nice, but specifying your direct dependencies is also nice, as it reduces problem when refactoring things...
1976	10058054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10058054	robbak	Another point to remember- with other build systems, the order of includes can change. In freebsd we have to patch one of the source files, because the build system pulls in /usr/local/include/db4/db.h before is looks for ../db.h Sometimes, duplicate includes are needed. On 05/11/2012 10:45 AM, "Pieter Wuille" <notifications@github.com> wrote: > Meh. Minimizing includes is nice, but specifying your direct dependencies > is also nice, as it reduces problem when refactoring things... > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/1976#issuecomment-10057955>. > >
1976	10061364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10061364	Diapolo	My pulls are just an offer, if they dont make sense for all platforms we support, just comment and close them :).
1974	10044423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10044423	freewil	This is repetitive and doesnt add any new functionality. You can check for new incoming transactions after -blocknotify and obviously you will already know about outgoing transactions.
1974	10044686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10044686	kjj2	No, this triggers when a transaction comes in or goes out in any way, not just when blocks hit. And now that we have the raw transaction API and offline signing and transmission is relatively easy, it is no longer obvious when transactions go out.
1974	10057975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10057975	sipa	This is probably useful for a lot of people who would otherwise depend on polling (or using centralized services to know when to poll), but it hopefully doesnt inspire people to do 0-conf accepts. ACK.
1974	10434507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434507	jgarzik	ACK... with maybe some doc describing some usage issues like what Gavin raised.
1974	11655453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11655453	CodeShark	Ive had a need for this kind of alert in applications before and as a result ended up writing a custom bitcoin client with its own internal filtering. I would love to be able to attach a listener to the mempool (perhaps SyncWithWallets could be extended to this end) which can perform filtering beyond just CWallet::IsMine(). Perhaps we can also filter out transactions below a certain size threshold, for instance. The need for being able to monitor transactions actually motivated which combined with -walletnotify would allow realtime tracking of payments without having to store any private keys at all.
1974	11659181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11659181	rebroad	How about instead an option to output transaction information to a file instead? That way, a separate program can deal with the problem of flooding, etc, and triggering commands from output as it appears in the file.
1974	13954885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13954885	gavinandresen	Couple of ACKS... this is definitely better than what we have now. Im going to pull.
1973	10033311	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10033311	gavinandresen	ACK
1973	10033491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10033491	Diapolo	Thats a good thing!
1973	10035748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10035748	gmaxwell	Violations of MAX_INV_SZ get you DOSflagged. So it should get some "P2P node rule" flag, perhaps? MAX_MONEY is an implicit protocol rule. Kinda obvious though. ACK in any case.
1973	10036627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10036627	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1972	10001110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10001110	gavinandresen	ACK
1971	9987732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9987732	jgarzik	ACK
1971	9987962	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9987962	gmaxwell	running an iteration over all blocks for each transaction every time relay transactions is called may eventually become slow for wallets with a great many transactions. ACK though, since improving that sounds hard and I dont see it being an immediate issue.
1971	9988202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9988202	sipa	Its a loop over all wallet transactions, the transactions contain the hash of the block they are encoded in, and those just require a lookup in mapBlockIndex to know whether this means they are confirmed. So its a O(n_wallet_tx * log(blocks_in_history)) operation.
1971	9995816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9995816	gavinandresen	ACK
1971	10009051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10009051	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1970	10017175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10017175	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1970	10257387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10257387	sipa	ACK
1970	10260843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10260843	gavinandresen	ACK
1966	9851742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9851742	sipa	ACK; tested on gitian
1966	9853493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9853493	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1966	9857759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9857759	Diapolo	AFAIK there were problems with Qt 4.8.3 at least when using it on Windows due to problems with ressource-files and qmake, I hope they fixed that. And Im missing an updated download link for the updated Qt in:
1966	9861768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9861768	sipa	It seems gitian works with this (and already worked) because it first builds Bitcoin-Qt, which has some magic in its .pro file to build leveldb, and that leveldb built gets reused for the bitcoind build. That is fine of course, but we should make sure that building bitcoind separately also works, which probably means adding the ranlib magic to makefile.linux-mingw.
1966	9869958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9869958	TheBlueMatt	So should we downgrade to 0.8.1 then?
1966	9871325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9871325	laanwj	I dont know whats wrong with 4.8.3. Is it documented anywhere?
1966	9873070	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9873070	Diapolo	Im fine with 4.8.3 if it compiles just fine with Gitian, I only wanted to mention it is causing some trouble on Windows, when trying to build a project with that version. As this doesnt touch our builds dont weighten that info too much, as it was perhaps a missleading information, sorry then. See: Edit: It seems 4.8.4 is near, too
1966	9879907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9879907	TheBlueMatt	It compiled fine in gitian for me
1966	9880611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9880611	Diapolo	Okay, then if you update the 3 missing references to Qt 4.8.3, too, Im fine with that commit :).
1966	9882346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9882346	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1966	9882560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9882560	TheBlueMatt	OK, updated with the missing 4.8.3 updates, should be good to pull now.
1966	9882733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9882733	gmaxwell	ACK (untested but looks sane)
1963	9896928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9896928	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1963	9900527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9900527	sipa	Go BitcoinPulltester go!
1962	9903609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9903609	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1962	9992887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9992887	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1962	10069476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10069476	laanwj	ACK Op 1 nov. 2012 20:38 schreef "BitcoinPullTester" <notifications@github.com> het volgende: > Automatic sanity-testing: PASSED, see > binaries and test log. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/1962#issuecomment-9992887>. > >
1957	9766292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9766292	NaruFGT	Id love to see this functionality in the mainstream client. Does anybody know the history of the uint256 structure? Ive never heard of that type of hash. I know its used in signmessage and verifymessage but options for other hash types (possibly enumerated with another argument to sign/verify) might help more people trust the signatures.
1957	9767563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9767563	laanwj	Im not against this functionality per-ce, but I dont like to have it in the core. We already suffer from some feature bloat. I suggest implementing it as an external tool that hashes your file, then signs the resulting hash using the existing `signmessage` call. This keeps everything nice and contained.
1957	9767817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9767817	NaruFGT	Its a core feature and would benefit many transactions, with a fix on file size limitation (loading the entire file into ram isnt good for performance and scalability) this feature really deserves a position in the main branch. An external tool will lead to lack of addoption and frankly, this feature is far more critical in corperate and business enviroments than a message signature. Feature bloat is a problem but this isnt alot to maintain.
1957	9768187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9768187	laanwj	Its easy to hash a file in a streaming fashion, you certainly dont need to read it into ram. Also you dont need new RPC server calls for this. You can use the existing signmessage/verifymessage RPCs with the hash of the file (and maybe some added salt) as message. You could even generalize it to multiple files by signing a "manifest" (similar to how JAR files are signed). As an added bonus, you can choose any hash function you want to hash the files. This can all be implemented as client-only feature. We have the mantra that everything that can be done outside the core, should be done outside the core. The discussion isnt about whether this feature deserves including or not! *an external tool will lead to lack of adoption* that depends on how you market it. If you think it will fly in "corporate and business environments" then my advice is to try to sell it for big $$$ :money_with_wings:
1957	9769860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769860	NaruFGT	"Also you dont need new RPC server calls for this." We actually do, I personally wont trust a hash of a hash. Overloading the signmessage/verifymessage to have an option would be fine, but the feature has to implement the signature hash as a direct hash of the file. The signmessage/verifymessage can be done outside of the core as well. This feature needs to be included into the core because there needs to be a uniform RPC call defined that other bitcoin clients will adopt. I dont really know why an additional RPC call is met by a fear of the code maintanance overhead. This is pretty much just a wrapper function for signmessage. Its soo easy to maintain that I cant imagine the justification for NOT including it o.o If it was a security risk, or posed more maintainance, bloat, or other such problems I would understand, but on pius principle just isnt a valid reason to soo swiftly discount the inclusion. This isnt controversial, why is it being made so?
1957	9770048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770048	sipa	There is no security difference between using a hash, or using a hash of a hash (theres at most a 0.66 bit decrease in entropy, which makes brute-forcing a collision about 1.26 times faster on average). Given the fact that were already using double-SHA256 for POW and blockids and txids, you should start worrying about Bitcoins crypto in general then too.
1957	9770138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770138	NaruFGT	sipa do you have details about the signmessage/verifymessage uint256 structure and the hash function? Really the point is that its a messy implementation, and adds calculation overhead. It can and should be avoided, unless theres a reason we should use hash of a hash.
1957	9770244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770244	sipa	The hash function is double-SHA256("Bitcoin signed message: " + message). The result of this is stored in a uint256 data type (and unsigned 256-bit integer). It is signed using ECDSA, encoded in a 65-byte structure that allows recovery of the public key. This 65-byte structure is then encoded in base64.
1957	9770468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770468	robbak	On 25 October 2012 18:36, NaruFGT <notifications@github.com> wrote: > "Also you dont need new RPC server calls for this." > We actually do, I personally wont trust a hash of a hash. Overloading the > signmessage/verifymessage to have an option would be fine, but the feature > has to implement the signature hash as a direct hash of the file. > > The signmessage/verifymessage can be done outside of the core as well. > This feature needs to be included into the core because there needs to be a > uniform RPC call defined that other bitcoin clients will adopt. > > I dont really know why an additional RPC call is met by a fear of the > code maintanance overhead. This is pretty much just a wrapper function for > signmessage. Its soo easy to maintain that I cant imagine the > justification for NOT including it o.o If it was a security risk, or posed > more maintainance, bloat, or other such problems I would understand, but on > pius principle just isnt a valid reason to soo swiftly discount the > inclusion. > > This isnt controversial, why is it being made so? > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/1957#issuecomment-9769860>. > > When I saw all these message signing functions in the bitcoin client, the first thing I thought is "What is this doing in here?" If one wants to sign and authenticate message, well, there is PGP for just that. The fact that there is anything of this kind in there seems like kruft. IMHO, it should be reduced or removed, not increased and expanded. If anything could be added, it is a simple "signhash" RPC. Then all this message and digest signing can be removed from core. Or am I treading all over somones barely healed toes?
1957	9770535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770535	laanwj	In addition to that, the whole Merkle tree concept used throughout bitcoin is based on hashes of hashes (of hashes...). Also many code signing approaches rely on hashes of (groups of) hashes, such as the JAR signing I mentioned. Not trusting hashes of hashes is quite irrational. Thats ok, were all paranoid in our own way, but I do recommend learning somewhat more about how Bitcoin works before making judgements on relative security merits of different approaches.
1957	9770566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770566	sipa	The reason for this method was having the ability to sign messages with keys corresponding to Bitcoin addresses, so one can prove ownership of coins, or prove being the sender of a transaction. I do agree it doesnt need to do more than what it can already - it just has to core functionality, other use cases can be implemented on top of it.
1957	9770839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770839	dparrish	This is why I asked if this was the best way! Discussion is good. Id still really like to see a "standardized" way of signing files with my bitcoin key, but I agree the API doesnt really need to be any bigger than it is. How about keeping "signfile" and "verifyfile" as client-side calls that generate a hash of the file thats sent to the server for re-hashing and signing. I think *something* like this belongs in this client, as its basically the reference implementation of bitcoin, theres not much point signing files in a different way in each different client.
1957	9770890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9770890	NaruFGT	"It is signed using ECDSA, encoded in a 65-byte structure that allows recovery of the public key. This 65-byte structure is then encoded in base64." In this case can a file signature be done in openssl simply using the address private key? That would be standard easy to adopt.
1957	9849312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9849312	sipa	sorry, there are no standard encodings that have all necessary data for public key recovery from a signature, so we had to invent our own.
1957	9883090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9883090	gavinandresen	NACK. I agred that this is feature-creep. I think this would be much better implemented as a little python or shell script shipped in the contrib/ directory that computed a hash for the file and then called signmessage.
1957	9903634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9903634	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1957	10434566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434566	jgarzik	One explicit NAK, and two "OK but not in core" seeming NAKs. Closing. Perhaps consider an external utility that does this; look a "test_bitcoin" for an example of a non-bitcoind binary that uses core bitcoin data structures.
1956	9754611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9754611	gavinandresen	Please update doc/release-process.txt if this requires a change to the release process. Could this be automagically defined if git HEAD has a tag, so we dont have to remember to define/undefine it?
1956	9755295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9755295	laanwj	I thought about triggering it on minor=99, I think that would label "dangerous" versions automatically. As for git magic, I dont know.
1956	9762628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9762628	sipa	Sometimes the version number in merge windows is _._.99.0, and sometimes its _._._.99 - depending on what release were aiming at. Testing for this would be a way, but Im not sure. The question is where do you put the border between showing the warning and not. Final releases obviously not, within-merge-window code obviously does. But what about release candidate, for example? If almost all code has the warning, people may ignore it.
1956	9766655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9766655	laanwj	Ive updated the release process to set CLIENT_VERSION_IS_RELEASE to `true` before a release. We *do* know for sure that the current state is dangerous, so IMO we should merge this as soon as possible, and get the edge-cases clear later. Pragmatic solution: we could just set it to false next time we think the state of the tree is dangerous enough to warrant a warning.
1956	9767337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9767337	Diapolo	"Pragmatic solution: we could just set it to false next time we think the state of the tree is dangerous enough to warrant a warning." I really like that one! Btw. why are there so many changes in the UI file? Is it because of a different layout chosen? Edit: I seem to miss the bitcoind changes?
1956	9767627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9767627	laanwj	getinfo returns GetWarnings("statusbar"), so no special changes are needed for rpc There are really very few changes to the layout, try `git diff -b` (ignore whitespace changes) or use a character-wise diff tool instead of githubs line-based one. The only thing that happened is adding an outer element, so the whole thing got indented.
1956	9768869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9768869	Diapolo	I didnt look into the getinfo code, thanks for explaining :). ACK to get this in ASAP.
1956	9774934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9774934	sipa	Looks nice! ACK
1955	9774269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9774269	laanwj	ACK. Help message already specifies that the argument is optional, and the code itself checks whether the argument is present.
1954	9739324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9739324	sipa	If a -datadir is specified and theres a problem with it, you want to get an error, not a default.
1954	9739824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9739824	Diapolo	Well that is indeed also true but just leads to the command-line parsing discussion and silent errors. Perhaps I missunderstood what is causing the crash ... it was bitcoind and seems to be caused by the Shutdown() call. I guess there is no need for this patch then ^^, sorry.
1953	9728759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9728759	gmaxwell	Tested by reproducing both issues while syncing testnet under valgrind, and by mining on testnet.
1953	9728780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9728780	Diapolo	The part with the LOCK is also described in #1946. I can confirm this fixes the assertion I observed a few times while doing some testnet tests.
1953	9728976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9728976	laanwj	ACK
1953	9729005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9729005	gmaxwell	Duh, I should have paid attention to the issues, it would have saved me a few minutes. :P
1953	9729027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9729027	Diapolo	Perhaps it sunk in my pull-request spam :-D, but nice it gets fixed.
1953	9740949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9740949	gavinandresen	ACK
1952	9720127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9720127	sipa	The braces arent necessary, but nice catch. ACK on the change.
1952	9721064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9721064	tucenaber	Wasnt sure about the coding style ;)
1952	9728601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9728601	Diapolo	Can you please squash the both commits into one :). - git rebase origin -i - add squash in front of the second commit
1952	9729061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9729061	laanwj	ACK after squashing to one commit
1952	9736379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9736379	tucenaber	Diapolo: I did the rebase thing and git forced me to merge and now there are 4 commits... Should I just create a new pull request? Edit: never mind I get it now
1952	9737693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9737693	Diapolo	Its best to fetch upstream changes (current master ``git fetch upstream``), rebase to upstream (``git rebase upstream``) and afterwards rebase origin and squash your commits. You can kick unwanted commits out by simply removing their line while doing ``git rebase origin -i``.
1952	9789338	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9789338	sipa	Cherry picked cde4b11 as 3026baaa7c3.
1949	9675363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9675363	gmaxwell	I inserted a trigger case for this bug in testnet, confirmed that it failed, and then confirmed that this pull doesnt fail. The code also looks fine to me. ACK.
1949	9686163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9686163	jgarzik	ACK
1947	9675043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9675043	sipa	ACK
1947	9729048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9729048	laanwj	ACK (itd be nice to use something for IPC that doesnt have problems on so many platforms, see also #1719)
1945	9653904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9653904	robbak	I have the same issue patched in my preliminary port directory. I have used the solution chosen by the author of the databases/leveldb port: --- port/port_posix.h.orig 2012-05-31 00:56:59.000000000 +0800 +++ src/leveldb/port/port_posix.h 2012-06-15 15:07:41.274868153 +0800 -25,6 +25,11 defined(OS_DRAGONFLYBSD) || defined(OS_ANDROID) #include <sys/types.h> #include <sys/endian.h> + #ifdef _LITTLE_ENDIAN + #define PLATFORM_IS_LITTLE_ENDIAN true + #else + #define PLATFORM_IS_LITTLE_ENDIAN false + #endif #else #include <endian.h> #endif On a similar matter, have you had a look at the bitcoin FreeBSD port? Id like to get some input from the bitcoin community. There are bound to be some "but we do it this way" issues to compromise on, of course, but all comments are welcome.
1945	9654062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9654062	centromere	All I did was replace the port_posix.h file in bitcoin with the one from the latest commit of leveldb. It seems to me like the cleanest option.
1945	9654129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9654129	luke-jr	Note the bitcoin codebase doesnt work in big endian at all right now. Also note that despite many headers/software making the assumption that endian is fixed at build time, that assumption is apparently not necessarily true in theory. The cleanest option is to use a git submodule to embed LevelDB, at least until its possible to build/link with system LevelDB.
1945	9654329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9654329	sipa	Well, if anything, upgrading to a newer upstream version of the the port_posix.h file is no problem in my opinion, certainly if it fixes building for some people.
1945	9675053	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9675053	sipa	ACK
1945	9914409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9914409	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1945	9922526	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9922526	sipa	Alternatively, we could try updating to LevelDB 1.6 entirely?
1945	9922890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9922890	Diapolo	Is there a changelog fot that available? IMHO as long as there is no stable release available, we are free to do this whenever its needed / wanted :).
1943	9648458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9648458	jgarzik	Supercedes #1870
1943	9648629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9648629	jgarzik	ACK It would be nice if the code movement was pre-pended as a separate, first commit, but thats nit picking.
1943	9649455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9649455	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1943	9649538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9649538	gmaxwell	Works good for me.. I abused this a little bit (running in valgrind, aborted runs, concurrent RPC activity) and havent yet been able to break it. I havent yet reviewed the code. (I have a lot of reading to do to fully catch up with ultraprune)
1943	9649641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9649641	gmaxwell	Er. Perhaps I spoke a bit too fast. the reindex appears to have been aborted by recieving a new block from the network, which caused a wad of orpan blocks and then sync continued very slowly from a remote peer. Perhaps while reindex is active we should ignore new blocks from the network?
1943	9680007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9680007	sipa	split the commit in two
1943	9720210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9720210	sipa	Thats exactly what happens, by the way. While reindexing, fImporting is true, and the "block" message gets ignored entirely, and no IBD is initiated.
1943	9848841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9848841	sipa	Rebased on top of #1962
1943	9848874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9848874	sipa	By the way, this also swaps the order of -loadblocks and bootstrap.dat. Bootstrap.dat should be first.
1943	9916148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9916148	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1943	9922124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9922124	sipa	Rebased and tests fixed
1943	9954445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9954445	gmaxwell	Works for me, though Im still seeing it get disrupted by blocks on the network and end up taking forever.
1943	9960492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9960492	sipa	Added support for continuing reindex across restarts, and improved output.
1943	10001882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10001882	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1943	10049594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049594	sipa	Improved GUI feedback during reindex. Can you also have a look?
1943	10049775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049775	laanwj	GUI changes look good
1943	10093629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10093629	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1943	10200786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10200786	gavinandresen	ACK code changes (havent had time to test thoroughly, but that shouldnt hold up the pull).
1941	10069871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10069871	laanwj	You found a pretty bad bug there, good catch.
1941	10071294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10071294	Diapolo	Thanks mate :).
1940	9645026	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9645026	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1940	9922935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9922935	Diapolo	It would be nice if the one, who did the Windows port could comment. Problem is I dunno, who it was...
1940	10266253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10266253	Diapolo	It would be even nicer, if that Boost stuff could be auto-detected, but I dunno how that could be achieved here. At least the uses version stuff here should match that from bitcoin-qt.pro, so I propose ``-mgw44-mt-s-1_50``! That patch is clearly for users building LevelDB directly on Windows, which currently doesnt work with Qt Creator as (for MinGW) you need to build LevelDB separately via the MinGW shell.
1940	10267450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10267450	sipa	Or even nicer if the Windows port didnt depend on boost...
1940	10268626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10268626	grimd34th	Diapolo, i tried to make it like the
1940	11298655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11298655	gavinandresen	Merging on the assumption "better behavior than we had before"
1939	9646089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9646089	gmaxwell	Fixes it for me.
1938	9641313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9641313	gmaxwell	ah. Yea. Good call. We dont want current git bugreports confused with 0.7.1.
1936	9626006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9626006	jgarzik	ACK
1936	9631832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9631832	gavinandresen	ACK (but Im being lazy, I didnt run it against unit tests-- I assume you did?)
1936	9631935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9631935	sipa	Yes - I even tried changing it to return faulty results, to check whether the current unit tests catch it (they do).
1935	9589625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9589625	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1934	9448925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9448925	sipa	I dont see why this is a bugfix. The result of c_str is guaranteed to remain accessible as long as the backing string isnt modified.
1934	9449548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9449548	luke-jr	Hmm, didnt know that. Okay.
1934	9450768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9450768	laanwj	I agree that in general its bad form to store the result of c_str(), as it makes for fragile code, but in this case its a constant parameter so its ok.
1933	9449571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9449571	luke-jr	See #1932
1932	9595428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9595428	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1932	9928049	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9928049	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1931	9418514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9418514	xanatos	I had tested with the "inactive" bars but I wasnt sure what was better. Thanks for the removing of the commit.
1931	9418771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9418771	Diapolo	ACK, just wondering if the icon looks a little sharper, when you supply a higher resolution and let Bitcoin-Qt resize it?
1931	9420183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9420183	laanwj	Depends on what rescaling algorithm used, but usually manually controlling the scaling result gives a better result than qt does "realtime". Anyway, I dont think it gets any sharper than this.
1931	9420297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9420297	xanatos	If you want I have the 32x32 source. It is multilayer. It is in Paint.NET format.
1931	9421300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9421300	luke-jr	Why was this merged, considering it makes Bitcoin-Qt non-free? At least GPL is free.
1931	9424388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9424388	laanwj	Sorry, this has been reverted. We can only accept public domain and MIT (BSD/expat/...) licensed icons from now on.
1931	9424701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9424701	Diapolo	I think its rather good that we have some "eagle eye"-dev for such special thinks who watches and warns. What sometimes feels like nit-picking is wanting only the best for the client. So I would say is the guardian of licenses :-D.
1931	9434717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9434717	laanwj	On the other hand I wasted my sunday morning on these icons. And probably more time, so I wouldnt exactly call this a win. And if that wasnt enough, I spent part of the evening on IRC trying to dispell Luke-Jrs bullshit that Im some kind of dictator threatening to make Bitcoin non-free. Im really pissed at the moment.
1931	9437407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9437407	xanatos	I have to tell the truth, the position of Like-Jr feels a little Stallmanian, but in the end, this isnt a problem of mine. My part of work was done. Now someone else can redraw the icons. Can someone reopen my Issue and/or open a similar issue? The problem that those icons make the bitcoin-qt GPL still stand (and I think that at least as a stopgag the icons were ok, because its better to restrict a little the freedom of reusing bitcoin-qt as an "animated images generator applications" than going against the rights of the persons that drawed those GPL icons, because while using the GPL icons in bitcoin-qt you are infringing a right of a third party, if you restrict the use of bitcoin-qt and you are the author/maintainer, that is your right)
1931	9441634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9441634	luke-jr	Bitcoin-Qt is fully in compliance with the terms imposed by the GPLd icons.
1931	9442271	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9442271	xanatos	I hate hate hate myself. I just lost 30 minutes of my life, just to write this. NO NO NO Just to be sure I have just installed the bitcoin-0.7.0-win32-setup.exe from SourceForge. Now.... There isnt any GPL.txt file (or similar file with the license) (this makes bitcoin incompatible with both GPL and LGPL), there isnt any LGPL.txt file (or similar file with the license) (this makes bitcoin incompatible with LGPL). And point 2b of the GPL license: b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, ***to be licensed*** as a whole at no charge to all third parties ***under the terms of this License***. The subject is YOU. I dont think it is enough that the software is relicenseable because its MIT licensed. I think YOU (plural, not you luke-jr) would at least need to dual license it explicitly under MIT and GPL. And last, in the COPYING.txt file, the program is explicitly licensed under the MIT license. Now, morally you are perhaps fine with GPL because you are distributing the source code (its even included in the installer, but note that it isnt complete... For example the bitcoin-qt.pro file is missing, so that you cant build the QT project. Point 3 of the GPL license: "plus the scripts used to control compilation and installation of the executable" so this copy of the source isnt enough. But you can download the source from this site, right? A shame that in all the installed files there isnt a link to this site or an email address of a programmer. The only link is to
1931	9442488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9442488	luke-jr	I suppose technically speaking we need to include a copy of the licenses, but that is hardly a big deal. Since the MIT license allows anyone to relicense the work under more restrictive terms, the rest of the code *can be licensed by anyone* under the terms of the GPL *in addition to* the MIT license. If the bitcoin-qt.pro file is missing from the installed source code, I think that is a bug. The (L)GPL licenses further also consider publishing the source code - even if on a different server - with equivalent accessibility, to be identical to including it verbatim with the binary object: therefore we do not strictly require a link included (though it would be a good idea).
811	3884133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3884133	laanwj	Feel free to provide replacements with the right license...
811	9219820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9219820	xanatos	(the image is a gif, not a jpg, but the site changes the extension of the files). Generated through (license: from the same site, last line of the page, "Generated gifs are totally free for use"). If necessary I can convert the gif to a mng.
811	9220476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9220476	Diapolo	Best thing you can do is directly create a patch :).
811	9220979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9220979	laanwj	I like the image. I think converting it to mng and replacing the current spinner.mng is the quickest way to get it integrated. In my experiments back in the day qt had some problems with animated gifs.
811	9405116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9405116	xanatos	I cant compile the QT, so can anyone test the mng? Thanks! Ah... was forgetting... changed the spinner to one from
811	9407152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9407152	xanatos	Second push with the connect icons (it is a separate push so that they can be merged separately if the icons arent suitable)
811	9418408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9418408	laanwj	See #1931
1926	9394306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9394306	luke-jr	Actually, I dont think its this simple. With the new height-in-coinbase requirement, I expect either this can be left alone/null, or we need to put a height in there. I would have expected the latter, but its obviously working right now for some (unknown to me) reason...
1926	9394729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9394729	laanwj	It certainly cannot be left alone. Right now the dummy script is four bytes on 32 bit systems and eight bytes on 64 bit systems, and may contain undefined data (possible information leak or crash), which is obviously wrong. If two bytes is not the right size, what is? (If eight bytes is working, safest may be to just fix it to eight zero bytes)
1926	9395771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9395771	gavinandresen	RE: Luke-Jrs comment: Should be scriptSig = CScript() << (pindexPrev->nHeight + 1) I suppose...
1926	9396676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9396676	laanwj	This solution breaks the autotester: pblock->vtx[0].vin[0].scriptSig = CScript((short)0); With the following error: Running 70 test cases... unknown location(0): fatal error in "CreateNewBlock_validity": std::runtime_error: CreateNewBlock() : ConnectBlock failed test/miner_tests.cpp(58): last checkpoint So I went with: pblock->vtx[0].vin[0].scriptSig = CScript() << OP_0 << OP_0; This does pass all the tests. Adding the depth should IMO be another pull, this one just fixes the immediate reported issue.
1926	9605046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9605046	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1926	9617483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9617483	Diapolo	Its scary that only is active in the project, whats up? Did I miss something?
1926	9628533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9628533	laanwj	Everything (at least core changes) are in hibernation waiting for ultraprune (#1677) to be merged :smile_cat:
1926	9629237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9629237	Diapolo	That patch scares me even more ^^...
1926	9629392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9629392	laanwj	It is scary, but it is a necessity. It helps against some long-running performance issues and will allow for new features. We can make it somewhat less scary by testing and reviewing it extensively, thats why other things are on hold.
1926	9729145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9729145	laanwj	Rebased, can be merged again
1926	9732861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9732861	sipa	ACK
1926	9740991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9740991	gavinandresen	ACK
1925	9402073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9402073	Diapolo	Updated to remove the "--param ssp-buffer-size=1" flag from the project file, no changes to makefile.unix.
1925	9618767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9618767	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1925	9769119	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769119	Diapolo	Any reason to not merge this now?
1923	9401740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9401740	laanwj	To be more precise you removed "all tooltips from QActions"?
1923	9402086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9402086	Diapolo	No, not from all, just from the ones, which were only used for tray menus and in our main menu. The tooltips on toolbar buttons (e.g. QAction *overviewAction;) are still there. I verified which were safe to remove.
1923	9402281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9402281	laanwj	ok.. "except from the tab buttons". I agree they are pointless at the moment. But its a bit sad to throw these messages away, which have been translated into many languages. I wonder if there is another way to show a short help message for menu items? It appears that on the Qt documentation they recommend using status tips for menu items: openAct->setStatusTip(tr("Open an existing file")); I wonder if we can fit these in somehow, or use another way.
1923	9402995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9402995	Diapolo	You are absolutely right, it even looks nice to use tooltips for these :). Ill change this pull. Edit: Well it doesnt look nice, when hovering a menu item which has a tooltip during block-sync as the statusbar text gets garbelled pretty ugly (2 different texts displayed at the same place -> unreadable). ![garbelled text](http://i48.tinypic.com/wjf4i9.png)
1923	9403069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9403069	laanwj	Hm, indeed, as we use the status bar for different purposes, wed need to find a solution for that. I think most straightforward would be to hide status tips when something else occupies the status bar?
1923	9403131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9403131	Diapolo	Ive currently no idea how to do this ... but Ill try via an event filter :).
1923	9403366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9403366	Diapolo	I got it working, will update this pull later. I installed a global event filter on qApp and use this code to prevent the garbelled text: <pre> bool BitcoinGUI::eventFilter(QObject *object, QEvent *event) { // Catch status tip events if (event->type() == QEvent::StatusTip) { // Prevent adding text from setStatusTip(), if we currently use the status bar for displaying other stuff if (progressBarLabel->isVisible() && progressBar->isVisible()) return true; } return QMainWindow::eventFilter(object, event); } </pre> What do you think?
1923	9404188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9404188	laanwj	I think its a good solution!
1923	9417754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9417754	Diapolo	Updated with event filter, would be nice if could test it, too.
1923	9626047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9626047	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1923	9628594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9628594	laanwj	I cant get status tips to appear at all on Ubuntu. This is likely an Ubuntu problem :cry: (as it exports the menu), not a bug in the code. Edit: It works when disabling the "Native menubar": QT_X11_NO_NATIVE_MENUBAR=1 ./bitcoin-qt -testnet This proves that the problem is in and thus out of the scope of this issue. Even filed a upstream bug:
1923	9628637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9628637	laanwj	It works in windows! That means it will also work in other Linux distributions that dont hijack everything. ACK
1923	9629230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9629230	Diapolo	I think another pull should be made after this, to get a tooltip for every single item used in the main menu, which is currently not the case. It feels incomplete when we leave it that way IMO.
1923	9629359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9629359	laanwj	I recommend setting the status tip equal to the tooltip for all QActions by default. This keeps the amount of messages relatively small, and theyre never visible at once anyway (ie, tooltips show when the QAction is used for buttons and statustips when the same action is used for menu item).
1923	9654159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9654159	Diapolo	I updated this pull to now use statustips in addition to tooltips where it makes sense and added new descriptive texts for some elements that were missing these.
1923	9654558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9654558	laanwj	Instead of repeating the message, why not do: widget->setStatusTip(widget->getToolTip()) (or other way around) Otherwise theyre bound to diverge over time.
1923	9654664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9654664	Diapolo	Sure that is way better :).
1923	9655035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9655035	Diapolo	Updated to reflect your suggestion.
1923	9769376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769376	Diapolo	I guess this needs a rebase after your warning bar pull is in, but are you ok with it now? I have a question on our used eventFilter() functions. The Digia doc says: <pre> If all the event filters allow further processing of an event (by each returning false), the event is sent to the target object itself. If one of them stops processing (by returning true), the target and any later event filters do not get to see the event at all. </pre> Then why are we nearly everywhere doing something like ``return QObject::eventFilter(obj, evt);`` at the end of your eventFilter() instead of just false, to send the event to the target object?
1923	9769455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769455	laanwj	QObject is not the target object. It is the superclass, its customary to call the superclass method when overriding a method in Qt. It might well be implemented as "return false", but thats an internal implementation detail. Edit: yes this is ok with me now
1923	9769554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769554	Diapolo	Alright, but we also have some that use ``QWidget`` or ``QDialog`` and one that uses just false. I just want to understand, if we should harmonize that and what are the resons we did it like its now.
1923	9769759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9769759	laanwj	Yes, if your superclass is QFoo you should use QFoo. QObject is used for classes that derive from QObject. Etc. Using just false could cause bugs in event propagation in some cases, at least theoretically.
1923	9935281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9935281	Diapolo	Can I get an ACK?
1923	9935447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9935447	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1923	9936051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9936051	laanwj	ACK
1922	9394183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9394183	laanwj	I just tried importing from transifex myself and get the same result. So you did nothing wrong. I still cant explain it though. Edit: seems that the message was in the translations and one of the duplicates is now removed. OK.
1922	9397993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9397993	burger2	Good work guys!
1918	9626315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9626315	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1918	9637258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9637258	sipa	Any idea why BitcoinPullTester complains?
1918	10434666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434666	jgarzik	Closing, for now. Need to think more about s comments (see #1833, the previous version of this pull req) with regards to the proposed expiration of old, unconfirmed transactions in the memory pool.
1918	10697960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10697960	luke-jr	Also note this broke Bitcoin-Qt builds. Looks like we need that startup time variable suggested a while back...
1917	9237362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9237362	jgarzik	Seems sane, but incomplete: turning off exceptions implies you must run through the code, and replace all existing exception checks with return value checks. EnvShutDown is one obvious example, but there may be more that require converting, before exceptions are simply disabled.
1917	9238001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9238001	gavinandresen	EnvShutDown was the only place where exception error checking was expected. Everyplace else returns-error-code error handling was used.
1917	9238267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9238267	jgarzik	ACK
1916	9627663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9627663	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1916	9637253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9637253	sipa	ACK
1914	9423773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9423773	laanwj	I agree that it could be useful to show that its still doing something while shutting down, to prevent the user from shutting down his computer while its busy. However, Im not sure a notification is the right thing to do here. After all, we cant reliably control how long it is shown.
1914	9424652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9424652	Diapolo	Well it is shown as long as it takes to shutdown the client, which is a behaviour I like. When there is some DB work to do before we can shutdown, you clearly see the client is still working in the background. A quick shutdown means you just see this flash up and disappear. Did you try / test the patch?
1914	9628565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9628565	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1914	9852808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9852808	sipa	I tried to test this, but shutdown is too quick to see anything. What should happen?
1914	9857453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9857453	Diapolo	It should show a tray-notification (dunno how such a thing is called with Linux) as long as the client is shuting-down I found out, that after your Ultraprune-patch, the client is shuting down much more quickly than before, so perhaps this patch doesnt make sense anymore.
1914	9934442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9934442	laanwj	The problem is that notification behavior is OS dependent. On some OSes it might show until the program terminates, on others it may be gone before that, and on still others it could linger after the program died.
1914	9934931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9934931	Diapolo	Ill close this one, you are right.
1913	9209417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209417	Diapolo	This is the right thing to do and if it causes no compilation problems it should get into 0.7.1 IMO. We dont need unused / incpomplete stuff in the code.
1913	9241750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9241750	jgarzik	ACK
1913	9249414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9249414	laanwj	ACK, no need to keep half-finished stuff in
1911	9184357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9184357	gavinandresen	ACK. Will this break translations? So should it wait until after 0.7.1 ?
1911	9185000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9185000	laanwj	Yes, this will break translations. BTW how do you get signed/unsigned warnings for printf? Normally it only barks on data type width mismatches.
1911	9187359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9187359	Diapolo	Yes the wording of the pull is misleading, it should read "fix wrong (signed/unsigned) printf format specifier in bitcoinrpc.cpp", sorry. Should be merged after 0.7.1. Edit: Updated to clarify commit message!
1911	9241928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9241928	jgarzik	ACK
1910	9207528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207528	sipa	Well I suppose we do want consistency in exposed terminology...
1910	9208556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208556	laanwj	All these minimal changes to the translated messages over time cause lots of translations to be lost. See also #1796. And my replies in #1830. My opinion is still that we need a script to update all translations on Transifex when the English source message for a message changes only syntactically, i.e.. rename-source-message "Importing bootstrap blockchain data file." "Importing block chain data file..." Only then we can freely apply these kinds of pulls. Until then, we have to be really conservative in what messages we change, otherwise translators are going to get pissed (after translating a similar message a zillion times) and might stop doing their work entirely.
1910	9209263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209263	Diapolo	I agree, it would be nice to have such a command, on the other hand we have not such a thing (currently) and Im always going to point people at strings like these, which are not correct in the end ;). Have you got an idea for such a script?
1910	9241939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9241939	jgarzik	-ENOISE Surely there are better bike sheds to paint.
1910	9629609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9629609	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1910	9646557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9646557	Diapolo	This is now a NON translation changing patch.
1909	9173452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9173452	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1909	9242045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9242045	jgarzik	Yeah, it just seems terribly odd and possibly error-prone to allocate a lock... in a racy fashion. Just make the lock global and put it early in main, to make sure it is instantiated/initialized before anything else in the program. As it stands now, either this your change or without, the first-use occurs very late in the program, and that seems like a root cause (or at least contributing factor).
1909	9243705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9243705	gavinandresen	making it global and putting it early in main wont fix the problem; the order of global destructors is undefined in C++. As long as there is a printf/OutputDebugStringF before we start creating threads (and there is, early in AppInit2()) there is no race. Reworking logging should be done... someday... For now, I think this little change is the right thing to do.
1909	9244380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9244380	jgarzik	gcc has long followed the now defined C++0x order described here: _"If the completion of the constructor or dynamic initialization of an object with static storage duration is sequenced before that of another, the completion of the destructor of the second is sequenced before the initiation of the destructor of the first. If an object is initialized statically, the object is destroyed in the same order as if the object was dynamically initialized"_
1909	9249891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9249891	laanwj	I already acked this for 0.7.1 (assuming we want this out of the door soon), but it does need more thinking. If you make the pointer global (i.s.o static) and explicitly initialize it in an InitLogging() (called directly at the beginning of AppInit2) function you avoid the destructor trouble, plus you dont make the safety of initialization dependent on who-calls-first. Then add an assert() to printf that the lock is allocated, just in case. Another plus is that you can use the same lock in `#ifdef WIN32 if(fPrintToDebugger)`, where the issue still exists. After all, printf *does* have some prerequisite requirements: it needs the arguments to be parsed and DataDir to be set correctly, which is only guaranteed when entering AppInit2. What if someone accidentally adds a printf before this is done? (ie, in GUI initialization, after all a printf looks reaaallly harmless): - It logs to the wrong datadir (the default one). Not that big of an issue for a few log messages to end up in the wrong log. However, - It *caches* this datadir in cachedPath, and will return it every time GetDataDir is called. Uh oh! An explicit InitLogging() call would solve this, and trap all accidental calls to printf before everything is in order. Talking of GetDataDir, it has the same issue. Though we jump the shark as it will never enter the lock when the path is cached, which you expect by the time it reaches destructors :-) But I can see another subtle initialization race, I think.
1909	9267676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9267676	gavinandresen	Ok. I pinky-swear promise Ill rewrite this The Right Way for 0.8.
1909	9309099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9309099	sipa	Maybe The Right Way means using ?
1908	9136210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9136210	Diapolo	I love it as it makes the code so much more readable, great pull IMO.
1908	9157330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9157330	sipa	ACK.
1908	9157469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9157469	jgarzik	ACK
1908	9158204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9158204	gavinandresen	ACK
1907	9133099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9133099	Diapolo	ACK of course, the earlier the better :).
1906	9133176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9133176	Diapolo	ACK, seems the right thing to do!
1906	9183856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9183856	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1906	9184315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9184315	gavinandresen	ACK
1905	9133204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9133204	Diapolo	Also a good idea, but the strings could be translatable?
1905	9135274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9135274	laanwj	They cant. This check is done far before the translation system is initialized, as to support lang= in bitcoin.conf (which is in the data directory). The old message was also not translated, Ive just put it in useful form for windows users.
1905	9135497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9135497	Diapolo	Right, didnt have that in my mind! ACK then.
1905	9136160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9136160	laanwj	We could eventually decide that `bitcoin.conf` contains core options and not GUI options (as we store GUI settings in QSettings now its kind of pointless), but all changes in ordering have to be considered really carefully to not break anything.
1905	9136423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9136423	laanwj	Ive added a comment to make this clear.
1905	9193797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9193797	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1904	9115192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9115192	jgarzik	Good but incomplete. You should also remove: 1) "reply" message handling 2) mapRequests 3) PushRequest*() functions
1904	9116237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9116237	laanwj	Ok, even better, I think I got them all now.
1904	9116539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9116539	jgarzik	ACK
1904	9195730	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9195730	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1904	9207537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207537	sipa	ACK
1904	9209425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209425	Diapolo	Same here, I think such removal pulls should get into 0.7.1.
1904	9788702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9788702	gmaxwell	ACK.
1904	9788729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9788729	gavinandresen	ACK
1901	9095714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9095714	laanwj	Theyre str* now (interesting bit of oversight here, those psz* prefixes are to me like funny variable names, didnt even think for one second that they had meaning about the type. A possible relation between types and variable names just doesnt fit into my head :-) )
1901	9196636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9196636	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1901	9196802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9196802	laanwj	Seems that the windows build needed some boost headers headers in util.cpp: util.cpp: In function void ParseParameters(int, const char* const*): util.cpp:510: error: to_lower is not a member of boost util.cpp:511: error: starts_with is not a member of boost::algorithm Fixed, cross compile works again.
1901	9207550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207550	sipa	Can you also remove strlcpy.h from doc/assets-attribution.txt?
1901	9207586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207586	laanwj	Done
1901	9207693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207693	sipa	ACK
1901	9242084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9242084	jgarzik	ACK
1900	9068559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9068559	laanwj	OK to the changes, except the one that requires an "extern" global variable in the header file. The idea is to keep the communication with the bitcoin core limited to the *model.cpp implementation files.
1900	9069080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9069080	Diapolo	That one is easy to revert, I wasnt aware of the reason you mentioned above. Edit: Updated!
1900	9069263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9069263	laanwj	Its violated in a few places, for example signmessage.cpp directly uses core calls and data structures. Thats very low-priority, and its not worth adding too much code for, but when I can I try to prevent it.
1900	9077983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9077983	Diapolo	Thanks for explaining the idea to limit core access to *model.cpp, but I have to ask what makes the difference between having them in a .cpp or a .h only in the end?
1900	9079114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9079114	laanwj	Compilation time, and it makes it easier to separate out the UI code, for example if we make the UI a separate process.
1900	9198741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9198741	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1900	9204024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9204024	sipa	Any reason why having the getters in .h is preferrable?
1900	9205784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9205784	laanwj	Im neutral on this. This change is balancing on the ugly edges of C++, on one side this cuts down on the amount of boilerplate lines to compensate for the lack of properties, on the other hand this moves implementation details to the interface description which is also undesirable (but in many cases unavoidable, at least if you want to make full use of the language with templates and such).
1900	9207517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207517	sipa	Ok, good to know. There has been a general trend towards moving code to .cpp files, but I wasnt sure to what extent we want to pursue this. I dont care about having such oneliners in .h files.
1900	9207555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207555	laanwj	Right, in the case of non-type-parametrized and non-trivial code, the implementation should certainly be in the implementation file.
1900	9209356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209356	Diapolo	I found it rather hard to follow your discussion as Im missing some tech-english here. In the end is such a change wanted or should it be avoided (ACK / NACK)? Edit: And as a remainder, the getLanguage() function was already in the header :).
1900	9209379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209379	sipa	Yes, ACK.
1900	9209483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209483	laanwj	ACK
1899	9082868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9082868	TheBlueMatt	See-also: which was the first commit in #1453
1899	9084506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9084506	laanwj	why is that part of the windows upgrader pull? :)
1899	9084602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9084602	TheBlueMatt	Because there was discussion of the proxy stuff in that pull, so I coded it while I was on that branch...probably should have been separate, but...meh
1899	9085223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9085223	Diapolo	I didnt know that you had worked on that part, sorry. Apart from that I think my pull is smoother in the end, as we dont need a GetProxySocksVersion() function, which is the result from a discussion with and Im currently trying to overhaul the whole proxy stuff in the core and afterwards want to extend the Qt proxy / networking options with it. Btw. funny thing is, that the starting point for my work on that part was your issue that we miss a lock for proxy structures :-D.
1899	9085677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9085677	TheBlueMatt	No big deal, I just found it funny since IIRC that proxy stuff that I wrote was a result of a discussion with you on the auto-update thread.
1899	9086155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9086155	Diapolo	I have to admit I did not have that in my mind anymore :-/, sorry. But I want to support you, to get that Windows update stuff in before 0.8. I hope this proxy stuff gets in soon (unsure about 0.7.1 though), so you dont need to rebase too often as some other code parts that are touched by your pull have changed already. The more time Im working on Bitcoin-Qt and with other devs the more insight I get, which leads to question former views I had on certain pulls / ideas :).
1899	9117324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9117324	laanwj	yes we really need your help as windows dev to get that windows auto-updating stuff in :) Personally, I think thats more urgent than perfecting the settings dialog.
1899	9137992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9137992	Diapolo	The current proxy related pulls are not there, only because I have some GUI ideas in my mind, they make proxy usage better and extend it with nice new stuff + fix the missing lock. As you opened the proxy lock issue, can you perhaps take a look at the code and ACK or give a short feedback? Can you rebase your Windows-update pull to current master or (if you want to) onto this one? Ill then try that whole stuff out in the following days :). Edit: Btw., is the Pull tester offline?
1899	9157655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9157655	sipa	Didnt test, but ACK on changes to core.
1899	9164958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9164958	TheBlueMatt	Ill look at this in the next few days, and...not sure when Ill get around to updating the auto-update stuff... re: pull-tester, dont think so, but it seems like the jenkins server has mysteriously slowed down even more recently...not sure whats up with that (I chose to blame dnsseed, but I havent looked into it, so I cant blame for that)...Ive got some new hardware I may be able to throw into the mix, though, if I get the time to set up some sync mechanism...
1899	9201789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9201789	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1899	9630960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9630960	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1895	9114236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9114236	Diapolo	I know you will for sure dislike the following comment, but Ill try for the last time (you wont get any further comments on strings in your pulls, if you want) as the brave knight for unified string usage ^^. Can you change your Warning messages to the following format: "Warning: First sentence! Second sentence." - start with ``Warning:`` - First sentence (if a sentence) finished with a ``!`` - Further sentences finished with a ``.``
1895	9143425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9143425	gavinandresen	: good idea on the Verifying message. And ok, Ill change the first period to an exclamation mark. Im finding serious bugs doing more testing; writing here so I dont lose track of them: 1) Getting a crash on my main wallet, bdb complaining about out of memory (out of mutexes). 2) Getting this weirdness switching from newer bitcoind to older: 10/04/12 14:16:00 nFileVersion = 70003 10/04/12 14:16:00 Performing wallet upgrade to 60000 3) Crash-at-shutdown due to the printf-in-global-destructor bug
1895	9154474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9154474	gavinandresen	Updated to not "pre-verify" blkindex.dat which fixes the out of mutexes problem (looks like bdb does not clean up after a ->verify() ?), pick up some changes from version of DBEnv::RemoveDB (kept RemoveDB as the name, though, since it removes a database not a dbenv), and tweaked Warning! messages. Ill investigate the downgrade weirdness separately, Im afraid that might be another bug introduced in 0.7.0.
1895	9207890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207890	sipa	Do you consider this pull ready now?
1895	9209597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209597	gavinandresen	Yes, this is pull-ready now. Id like some help with more thorough testing.
1895	9210115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210115	gmaxwell	So, this can just cause your balance to go to zero with no notice if youre not watching the logs/console output carefully. Perhaps get getinfo error field should get something? Here is what I tested: Using gavins testnet-in-a-box wallet. zzuf -I wallet\.dat -s 0:1000 ./bitcoind -daemon=0 Seed 0 fails with Db::open: Invalid argument. In log I see Salvage(aggressive) found 2372 records. Restarting without fuzzing gives me a successful start but zero balance. Recover original wallet, then run starting with seed 1: zzuf -I wallet\.dat -s 1:1000 ./bitcoind -daemon=0 Fails at seed 1 with "DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery" No salvage run. Starting without fuzzing gives the correct balance. Starting again at seed 2: zzuf -I wallet\.dat -s 2:1000 ./bitcoind -daemon=0 Throws "Bitcoin: Warning: wallet.dat corrupt, data salvaged! Original wallet.dat saved as wallet.{timestamp}.bak in /home/gmaxwell/.bitcoin/testnet3; if your balance or transactions are incorrect you should restore from a backup." at the console. (first time Ive seen that) Log shows: Renamed wallet.dat to wallet.1349630310.bak Salvage(aggressive) found 2372 records And a bunch of nice addwallets. But calling getinfo triggers segfault. -- still, this pull is a massive improvement over default. Now that weve got a case where there could be backup wallet files laying around perhaps we should go all the way and keep a couple wallet rotation even when there isnt corruption? Perhaps the fuzzing is a little too nasty to be a realistic test. Though if we ever change to our own append only format, I absolutely expect it to survive this kind of test.
1895	9210153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210153	luke-jr	How does this handle encrypted wallets?
1895	9240885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9240885	gavinandresen	it handles encrypted wallets as well as might be expected. It works on the bdb level, salvaging as many key/value pairs as it can from the backed-up wallet.dat. If it encounters a database-level error reading keys (private keys, encrypted or not, or master keys) it tells the user to try to recover from a backup.
1895	9244733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9244733	gavinandresen	Rebased on top of #1917; changed error handling from bdb methods from exceptions to returned error codes.
1893	9027177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9027177	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1892	9035832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9035832	gavinandresen	Compiling on my Mac with llvm-g++, I get one warning: main.cpp: In function bool ProcessMessages(CNode*): main.cpp:3075: warning: format %zu expects type size_t, but argument 2 has type ptrdiff_t
1892	9040758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9040758	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1892	9042595	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9042595	laanwj	Thanks, seems that we also need a separate format for "ptrdiff_t". Should be fixed now.
1891	9012466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9012466	laanwj	ACK. These macros are currently unused (intended for #1885), so this pull is harmless.
1890	9012320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9012320	Diapolo	Idea is a good one, what I would love to see is avoid HTML-format tags in strings we use in translations. This is not always possible, but I would split that mega string into smaller pieces and use e.g. ``+ QString("<br>") +`` or `` + "<br>" + `` in between. Edit: What does the ``<qt>`` tag do or achieve there?
1890	9012496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9012496	laanwj	No comment on the message, though Id indeed suggest splitting it over multiple lines in the source code for readability. The `<qt>` tag marks the text as rich text (for Qt::AutoText). It is not always necessary, but its safe.
1890	9013037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9013037	runeksvendsen	Good point about HTML in translation strings. Ive removed the tags from the strings in tr(). And also made it somewhat more readable. Im wondering if we should include a more detailed description in the message, as previous backups dont exactly become useless as soon as the wallet is encrypted. Only when the user starts sending transactions, and the change is received by the encrypted addresses. But I figure it might just be better to not include that technicality.
1890	9013616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9013616	laanwj	ACK, please squash into one commit
1890	9042783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9042783	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1890	9048259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9048259	runeksvendsen	Cool that we have an automatic build and test bot! I dont quite get the error though: + cp bitcoind test_bitcoin out/ + git apply /mnt/test-scripts/bitcoind-comparison.patch error: patch failed: src/main.cpp:2368 error: src/main.cpp: patch does not apply since this patch doesnt touch main.cpp.
1889	9046636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9046636	gmaxwell	Eh. The functionality is desirable, but the ability to filesystem split the wallet and data dir is a surefire way to end up with a corrupted wallet. This is subtle and I suspect hard to warn people out of doing, esp since it would mostly work. (until it eats your keys for lunch).
1889	9056625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9056625	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1889	9207904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9207904	sipa	I agree with Can we add a check so only wallet names without / (or other filesystem separation character) are accepted? Maybe even limit to just alphanumeric names, and add ".dat" implicitly?
1889	9638381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9638381	gmaxwell	Now that ultraprune has taken everything else out of the BDB environment, we can now have pluggable wallet locations, but it needs to move the _whole_ db environment too, not just the wallet.dat location.
1889	9638427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9638427	tcatm	This patch was never meant to be used to access wallets outside $DATADIR. Ive written it to use multiple wallets within the same datadir.
1889	9638466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9638466	sipa	Maybe not, but then it should either enforce that requirement. Alternatively, it could allow accessing a wallet file anyway, as long as the BDB dir (not the entire datadir) is moved along.
1889	9638527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9638527	gmaxwell	Without one of enforcement or moving the datadir its a serious footgun that will result in permanent coin loss. I like moving the datadir, since its viable now and it would let you have your wallet file on a encrypted/removable volume while the chain resides on some less secure medium (or even a ramdisk).
1889	9948345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9948345	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1889	10316604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316604	luke-jr	Any update and/or rebase?
1889	11786817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11786817	Diapolo	I guess in the light of real multiple wallet support coming along, this is not needed anymore?
1889	18122993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18122993	laanwj	Agree with the other posts. This is very useful functionality, but this should either 1) Enforce the wallet.dat to be inside the data directory or 2) Open the database environment in the alternative path if a wallet in another path is specified. As the wallet database is the only thing that uses berkelydb now, there is no reason not to. Personally I like (2) most.
1889	18889691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18889691	laanwj	As for (2) we really need a way to set another wallet directory (ie, walletdir=...). There is no reason anymore why the wallet directory and block chain directory would need to be the same.
1889	18890033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18890033	luke-jr	Having been using this for a few months, I have to say I prefer (1).
1889	18890045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18890045	laanwj	Why? Are you against setting the wallet directory?
1889	18890079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18890079	luke-jr	Its easier and less disk-bloating to just use simple files, IMO.
1889	18890137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18890137	laanwj	How do you mean "just use simple files"? I dont understand you, we arent changing the wallet format here. BDB will still create a database environment, and it needs to be on the same disk as the .dat file (for reasons gmaxwell mentions). So if the user wants to store the wallet on say, a removable disk, he needs the database environment there as well. Option 1 would make this impossible (as the database environment is locked in place), and forces the user to always have the wallet in the same directory as the block chain.
1889	18890312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18890312	luke-jr	Different use cases / user preferences, I guess. Maybe if theres a "/" on the end, interpret it as a directory, and if there isnt, make sure theres no "/"s at all?
1889	18890365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18890365	laanwj	Or maybe two separate options, instead of trying to parse it from one value: -walletdir=/dir/etc/ directory of wallet and db env (defaults to datadir) -wallet=bla.dat name of wallet (defaults to wallet.dat). Within walletdir, cannot contain /.
1889	18890664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18890664	luke-jr	Too much shed painting; lets just merge it as long as the main concern is solved :) (prefer to append the file extension in code, to ease changing wallet formats later)
1889	18893002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18893002	sipa	I dont see the problem. Just allow specifying any filename, and use database/ in the directory that file is in as a database dir? If filename doesnt contain any /, use the datadir.
1889	18909640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18909640	laanwj	Agree with
1889	20245468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20245468	tcatm	Ive updated this request: 1. strWalletFile is now used for salvage/recover (previously those features were still using wallet.dat) 2. The supplied wallet file can not contain paths anymore so only plain filenames are allowed now. Even relative paths inside the data directory will be rejected.
1889	20249269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20249269	sipa	ACK on the semantics, but can you move strWalletFile from main.cpp to init.cpp? (the validation logic has no business knowing where the wallet file is located).
1889	20437874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20437874	tcatm	Any objections or ACKs?
1889	20438486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20438486	sipa	ACK, if you squeeze the commits.
1889	20482456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/20482456	sipa	ACK
1889	21292391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292391	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
1888	9009090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9009090	sipa	Very nice!
1888	9010375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9010375	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1888	9035665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9035665	gavinandresen	ACK, nice!
1888	9066147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9066147	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1886	9003796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9003796	laanwj	ACK Thanks for figuring this out!
1886	9009309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9009309	sipa	As 0.8.0 is probably not going to be ready anytime soon, maybe this warrants a 0.7.1?
1886	9010816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9010816	luke-jr	I could do a 0.7.1 if wanted, but I havent branched 0.7.x yet so let me know...
1886	9011760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9011760	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1886	9011812	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9011812	laanwj	I think its worth doing a 0.7.1 after merging this. AFAIK there have been no major or risky changes since the 0.7.0 release, so it could simply be spun off from master. But its his call...
1886	9011887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9011887	Diapolo	When we decide to do a 0.7.1 or similar, I vote for a small RC phase or at least I need an official Gitian installation package to test the new installer sets the key correctly and there is no escaping-stuff missing for ``"%1"``, before we release a new version.
1886	9018124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9018124	gavinandresen	ACK on this pull. RE: Id like the goal for 0.7.1 to be this fix and much more robust recovery of a corrupt blkindex.dat/wallet.dat. Ive been working on the wallet.dat problem (randomly corrupting wallets and then making sure as much of the wallet as possible is automatically recovered), the -reindex pull seems like it should be the basis for fixing the blkindex.dat problems we see (IF cannot load blkindex.dat: delete it, and automatically run -reindex on the blk000?.dat files to recreate it).
1885	9012292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9012292	Diapolo	Can another dev comment, if there are open warnings left that need fixing. My compiler is not giving me anymore warnings.
1885	9012609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9012609	laanwj	I think you get this few warnings because youre building on 32 bit?
1885	9013068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9013068	laanwj	Im going to have a shot at fixing the others
1885	9013379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9013379	laanwj	See #1892
1885	9014325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9014325	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1883	8990637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8990637	jgarzik	ACK
1883	8990675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8990675	gmaxwell	ACK
1883	8995936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8995936	laanwj	ACK
1883	8998231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8998231	Diapolo	ACK
1883	8998696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8998696	gavinandresen	ACK
1881	8981864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8981864	laanwj	ACK, I suppose this is a good start. Ideally, toHTML should take a `const CWalletTx &wtx` to prevent it from making any change. The current state is lazyness from my side, I just copied toHTML from Satoshis UI code.
1881	8998700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8998700	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1880	8978702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978702	Diapolo	Seems to be a valuable addition, but as we have ``IMPLEMENT_RANDOMIZE_STACK()`` I would like to see that used or want to question if we need it anyway.
1880	8978807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978807	sipa	I havent checked lately, but if I recall correctly, IMPLEMENT_RANDOMIZE_STACK was effectively compiled away in recent GCCs. Ive already argued for removing it, and still think we should - we have -fstack-protector to accomplish this now. I certainly wont implement it myself for new threads, though I womt stop anyone from adding it.
1880	8979637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8979637	Diapolo	Im not an in depth security guru, so if we are safe and the macro doesnt add anything to our security hull Im also fine with removing it entirely. Perhaps the person who introduced it can comment? Edit: When GCC optimises it away, that would be also a fact pro removal IMO. Edit 2: Other than that I like this patch :).
1880	8982060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8982060	laanwj	I remember we had this discussion before in #bitcoin-dev and decided were keeping the macro, but not adding it to newly introduced threads.
1880	8983752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8983752	Diapolo	Some decissions I dont understand ... the code could be a little easier to read without it and would be shorter. Did no one want to remove it (do the work)? Edit: I like that we now remove that thing :).
1880	9001414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9001414	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1880	9208019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208019	sipa	Updated; moved the management of fImporting to a RAII object.
1880	9402413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9402413	laanwj	ACK
1880	9632869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9632869	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1880	9634156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9634156	jgarzik	ACK
1880	9635696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9635696	gavinandresen	ACK
1879	8975943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8975943	laanwj	ACK (after comment fixed)
1879	8976102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8976102	Diapolo	Sorry, I dont get it.
1879	8976362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8976362	laanwj	Huh I thought you commented something about maxosx vs macosx. Never mind, must have been another issue.
1879	9122630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9122630	jgarzik	ACK
1878	8974906	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8974906	Diapolo	The patch makes absolutely sense and why not create a patch for your second suggestions, too :)?
1878	8976164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8976164	Diapolo	Can you squash the 2 commits into one please.
1878	8976683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8976683	xanatos	Aaaah... I hate github... I hate git... I was trying to rebase everything in local and I closed the pull...
1878	8978165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978165	Diapolo	``git fetch upstream`` ``git rebase upstream`` ``git rebase origin -i`` use ``squash`` before your 2nd commit ``git push origin patch-20 -f``
1876	8974677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8974677	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1876	8977048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977048	sipa	As far as I know, getheaders can be used like getblocks, and will only report blocks that are in the (senders) best chain already, so though that does technically not permit reverse-headers, it seems enough to get a fast header-only syncup. Nothing in particular against this command, but I dont like adding P2P commands without specific use case.
1876	9002293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9002293	laanwj	Please make a BIP and discuss it on the mailing list. I think that should be procedure for adding P2P commands. Granted, these commands are pretty trivial, but we should aim to keep protocol documentation, so that the developers of other clients can keep up.
1876	9122664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9122664	jgarzik	See OP, "Will BIP-ify if people like this." No big use case outside of diagnostics (probing network to see how many are stuck), so closing
1875	8965254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8965254	laanwj	ACK
1875	9006232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9006232	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1872	8958161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8958161	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1872	8977126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977126	sipa	Havent tested, but code changes look ok.
1872	9049957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9049957	gavinandresen	Sanity testing on a testnet-in-a-box "hell wallet", I get an extra empty array: Old: ``` gavin$ head /tmp/f2 [ [ [ "mmU33ZKwUkSoVSx8bHUnf2PmNosDMWvxsU", 17.93950000 ], [ "mzGzLeJA2up3VL4gW32x5hT5YvEaA7SnBh", 0.00000000 ], ``` New: ``` gavin$ head /tmp/f1 [ [ ], [ [ "mmU33ZKwUkSoVSx8bHUnf2PmNosDMWvxsU", 17.93950000 ], [ "mzGzLeJA2up3VL4gW32x5hT5YvEaA7SnBh", ```
1872	9069867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9069867	gmaxwell	Ah. Thanks. Im pretty sure thats just from adding an empty group after encountering a transaction where it cant add any linked ins or outs. Pushing a revised patch that I expect will fix that (though I dont have a reproduction setup right now). It might be helpful to encrypt that wallet with some impossible key and post it.
1872	9070910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9070910	gavinandresen	It is a testnet-in-a-box wallet, so it is not sensitive. Wallet and blockchain are at:
1872	9144172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9144172	gmaxwell	Indeed, the empty group is gone with the latest update.
1872	9269294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9269294	jgarzik	ACK
1872	9635001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9635001	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1872	11299097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11299097	gavinandresen	ACK if you remove the CWalletTx tx = .... dead line of code that sipa pointed out.
1872	11374904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11374904	gmaxwell	Yea, dunno how that made it into there.. cruft from an earlier version. Sorry about that. Fixed and tested.
1872	11413820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11413820	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1872	12138293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12138293	Diapolo	This one is lingering around for quite some time, I count 2 ACKs, any reason not to merge it or does it need a rebase?
1871	8927415	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8927415	laanwj	Im all for removing dead code. It will only bitrot if it is unused and untested. Maybe add a comment, that the Read* variants have been removed but can be found in git history. It is possible that eventually we dont want to read everything into memory anymore at startup. Edit: though on the other hand, we *do* really want to get rid of the random-access read methods, to support append-only wallet formats.
1871	8932228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8932228	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1871	8977206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977206	sipa	ACK. even with an append-only wallet format, I suspect (at least initially) well load the entire wallet into memory anyway. Either we do that at the application level (have an iterator process all entries in the wallet at startup, like now), or at a thin layer beneath it that stores the key-value pairs in memory.
1871	8995964	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8995964	laanwj	ACK
1871	8998732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8998732	gavinandresen	ACK. Yay less code!
1870	8919945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8919945	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1870	8977378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977378	sipa	Surprising how little code changes are necessary for this. Ultraprune already has a CDiskBlockPos however, which is also used inside CTxBlockPos, so maybe you can use that instead? I think you can just copy it, and remove the IMPLEMENT_SERIALIZE.
1870	9051844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9051844	sipa	I also wonder about this: what if the current best chain happens to be known in the new/repained blockchain? There should be no need to rebuild the entire index in that case, only the block positions. EDIT: right, you cant, as in the current database structure, transactions also contain disk positions. Its something that can be done post-ultraprune though.
1870	9119322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9119322	jgarzik	Updated with the following changes: * uses CDiskBlockPos from sipas ultraprune branch * calls our CDBEnv to perform database removal
1870	9208147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208147	sipa	Have you tested this? $ ./bitcoind -reindex DB_ENV->dbremove: method not permitted before handles open method
1870	9209689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209689	gavinandresen	I wrote up a 4-step test plan that Ive been working through. I also have a branch (not published) to reconcile this with my corrupt wallet handling pull; see The testplan I was working through: 1. Run new testnet3-in-a-box instance, let it IBD, shut it down. Remove testnet3/database/ directory. EXPECT: automatic re-index of blk0001.dat on startup. 2. Same a (1), but run with -detachdb. Corrupt blkindex.dat by truncating it by a few bytes, then restart. EXPECT: automatic re-index of blk0001.dat on startup. 3. Same as (2), but corrupt some bytes instead of truncating the file. EXPECT: automatic re-index. 4. Compile a bitcoind against a later version of BDB (e.g. BDB 5 instead of 4). Run without -detachdb. Then startup a bitcoind compiled against the earlier BDB version. EXPECT: Something Reasonable-- not a BDB_RUNRECOVERY uncaught exception/crash. 5. Same as (4), run with -detachdb. EXPECT: Same something reasonable as (4). I havent tested 4/5 yet, and dont know enough about BDB major version compatibility to know what is reasonable to expect.
1870	9249056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9249056	jgarzik	Doing the database remove in the environment definitely creates a super-large removal transactions, yet does not actually remove blkindex.dat. blk0002.dat is growing here, which should not be the case. Further debugging is needed.
1870	9265164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9265164	gavinandresen	Instead of: ```dbenv.dbremove(NULL, strFile.c_str(), "main", DB_AUTO_COMMIT);``` you might try ```dbenv.dbremove(NULL, strFile.c_str(), NULL, DB_AUTO_COMMIT);``` ... then re-create blkindex.dat using TxDb("cr") I think passing NULL as the third argument removes the file.
1870	9289231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9289231	jgarzik	Fixed a few bugs, and rebased on top of s ::RemoveDb(). blkindex.dat is now properly removed, and reindex proceeds as expected. Things appear to be working now. Caveat: a genesis block is newly stored to blkNNNN.dat, for each -reindex invocation. LoadBlockIndex() adds a new one to the (it thinks) newly created block file. All other blocks are properly read and processed in-place. -reindex highlights the poor speed of BDB indexing alone... and should provide a useful apples-to-apples basis for comparing the old BDB system with ultraprune.
1870	9637278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9637278	sipa	Needs rebase.
1870	9637578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9637578	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1870	9648465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9648465	jgarzik	Superceded by #1943, closing
1869	8902234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8902234	gavinandresen	NACK. Changing the behavior of VerifyScript in any detectable way is unacceptable, because of the risk of a blockchain fork.
1869	8906463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8906463	maaku	This cant lead to a blockchain fork. These opcodes arent on mainnet, and wouldnt be accepted on mainnet anyway by any existing client. They would be illegal before the change, and they would be illegal after the change. It only changes the behavior of a hypothetical client that relaxes IsStandard() script restrictions.
1869	8906613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8906613	jgarzik	IsStandard() is not relevant to this discussion. Transactions may appear in the blockchain, even if they fail IsStandard(). The set of acceptable behaviors is much larger than the set of relay-able IsStandard() behaviors.
1869	8907998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8907998	maaku	Ok understood.
1868	8881483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8881483	laanwj	Good catch
1868	8887353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8887353	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1868	8891932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8891932	gavinandresen	I dont like keeping dead code in source files, so I think the right thing to do is to remove MakeSameSize and the code for all of the disabled opcodes from the big switch() statement. If we ever resurrect them git will have the history, and, I assume, well write thorough unit tests to make sure they actually work correctly. So: Id be ok with pulling this, and then another commit that removed code related to all the disabled opcodes.
1868	8893268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8893268	jgarzik	Thats what I said on IRC: delete em. It is dead code that requires a hard fork to re-enable.
1868	8897047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8897047	laanwj	Agree with Gavin, lets pull this as a warning to people if theyll ever resurrect this code, and then in a later pull remove all the code related to disabled opcodes. At the moment, they are only confusing.
1868	8897486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8897486	gmaxwell	sounds like a plan.
1868	8897855	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8897855	maaku	I will create a new pull-request that surgically removes the disabled opcodes (they will now be caught by the ```default: return false``` catch-all). EDIT: Sorry for the messy commit references surrounding this comment. Github refuses to forget about amended/removed commits :\
1868	17057011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17057011	xanatos	Just a question... Isnt the proposed patch "wrong"? Negative numbers should be padded with 0xFF, not with 0. For example, in Little Endian, a 16 bit -1 is 0xFFFF, at 24 bits its 0xFFFFFF, at 32 bits its 0xFFFFFF. -2 at 16 bits is 0xFEFF, at 24 bits its 0xFEFFFF...
1868	17086029	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17086029	maaku	Bitcoin uses its own big-endian, explicit-bit semantics for BigNums.
1867	8866614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8866614	jgarzik	NAK, this breaks existing setups (its in released 0.7), and further it forces anybody wanting the raw form to perform extra parsing. Decomposition into readable form is an extra step, see e.g. "decoderawtransaction" RPC
1867	8866980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8866980	xblitz	Agreed about breaking existing setups.. maybe we can just add an address property instead
1867	8867012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8867012	jgarzik	just use decoderawtransaction, that is why its there ;p
1867	8867442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8867442	xblitz	meaning to find the addresses of the output it we need to do a getrawtransaction and then a decoderawtransaction for each output .. so why are the amounts and confirmations displayed.. you can also get them from decoderawtransaction ;p
1867	8868411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8868411	gavinandresen	You dont need to getrawtransaction then decoderawtransaction, you can do both of those in one step by passing 1 as the second argument to getrawtransaction. And if you have a bunch of transaction ids you can use the new batch JSON-RPC support to do it all in one round-trip. Closing.
1867	8876478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8876478	xblitz	Awesome thanks!... guess ill ask in the forum next time.. sorry :/
1864	8845123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8845123	laanwj	The version used for Linux builds is determined by the version shipped with Ubuntu Lucid. This is very unlikely to change. Edit: I dont think were using static linking for Qt at all on Linux. So it likely will just use the Qt version that is on the system.
1864	8847137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8847137	Diapolo	Okay, so did I miss a part I needed to update or does the pull look correct?
1864	8847264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8847264	laanwj	I think this is correct and that you didnt miss anything, but ofc it needs to be tested.
1864	8849175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8849175	fanquake	Do you need to change line 38 of release-process.txt from mv build/out/qt-win32-4.7.4-gitian.zip inputs/ to mv build/out/qt-win32-4.8.2-gitian.zip inputs/ ?
1864	8850625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8850625	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1864	8862971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8862971	Diapolo	Thanks for noticing, Ill fix that.
1864	8897164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8897164	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1864	8998462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8998462	Diapolo	The compiled bitcoin-qt.exe works, I tried it with a mainnet wallet. No errors were observed during startup and chain-sync.
1863	8845010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8845010	laanwj	I certainly think this is useful data to keep around. But, as precise time is a rare thing, for the wallet scan optimization to be exact (the "7200 seconds leeway" makes me a bit uneasy), would it maybe make sense to store a block chain height of first use? Now that we have key metadata anyway...
1863	8856026	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8856026	gavinandresen	7200 seconds is two hours, which matches the blockchain rules (new blocks must have timestamps no more than 2 hours in the future, if I recall correctly). And I think keys are properly thought of as independent of any one particular blockchain, so absolute time of creation is the right notion.
1863	8856578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8856578	laanwj	Yes, but you are using the local time of the machine that creates the key, at the time the key is generated. I dont think this should be ultimately trusted information (ie, reliable enough to base important optimizations on).
1863	8908142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8908142	jgarzik	&lt;shrug&gt; The rescan optimization can do "X - 24 hours" and still be quite effective. One secondary goal along with storing key time is running in client-mode may be optimized to ignore all blocks older than the wallet birthday.
1863	8977457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977457	sipa	Sounds like a good idea. I prefer keeping a timestamp + lee way, rather than storing blockchain height, as the latter is context that can change during reorganisations. For deterministic wallet, the meta data object could be extended. I havent tested this.
1863	9638847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9638847	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1863	9878750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9878750	kjj2	This is a very important feature for multisig. While you can do everything with the raw TX API, just importing the keys and spending from the wallet as usual is much easier, and will remain so for probably quite a while. For me, this patch would have saved a couple of hours worth of rescan time while I was testing multisig. One possible addition... When doing a rescan, can we detect the time or height of the first appearance of a key, and store that if the birthdate isnt already known? This will be useful when someone later dumps them or has to import a whole wallet. Oh, and maybe also change WIF to support metadata embedding.
1863	9886248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9886248	gavinandresen	RE: "just importing the keys and spending from the wallet..." : I think we should strongly encourage people to keep private keys private, and not get into the habit of exporting/importing them. If you are sending private keys around for anything other than backup then youre probably Doing It Wrong(tm).
1863	9904369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9904369	kjj2	I suspect that for a while to come, the most common usage of multisig will be one time cold storage wallets. You generate some keys, send coins to them, and then later, you redeem whatever is in them. Importing the privkey is the simplest way to do that, and however wrong it may be, Ill bet you a dollar that lots of people are going to do it.
1863	9904960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9904960	sipa	I think we need a standard way of encoding a private key + a txid for such purposes, as that is enough for instant spending without rescanning history at all (however long it is ago).
1863	9905436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9905436	schildbach	Bitcoin Wallet and MultiBit can already exchange private keys against each other by using a text based export format. Its basically one base58-encoded key per line, optionally with a key creation time in ISO8601 format. The whole file can be AES encrypted in a way that also openssl can be used to decrypt. I think its time that we document this format properly and maybe propose it as a BIP.
1863	9914307	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9914307	jim618	I am happy to write up the existing key exchange format Andreas and I are using as a BIP if someone gives me a number. It gives a concrete format to critique and improve upon as required.
1863	16020156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16020156	sipa	Hmm, mind rebasing this I think we forgot about this somehow.
1863	16024615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16024615	gmaxwell	Did this get derailed due to not having a serialization for it?
1863	16025014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16025014	sipa	Im planning to rebase my wallet JSON dump/import RPC patch from 2 years ago, given that theres apparently many people who feel the need to toy with wallets, but shoot themself in the foot by working with individual keys instead of whole wallets. Key birthdates could nice be serialized in that.
1863	16033425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033425	jgarzik	will put it on the todo list. No real blocker other than it seemed like grumped over this pull request in general. :)
1863	16050682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16050682	gavinandresen	Yeah, but I grump over everything, it is my Prime Directive.
1863	16084954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16084954	jgarzik	It looks like a rebase is not trivial, due to some wallet changes in the interim. Not difficult, but not trivial either.
1863	18424965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18424965	jgarzik	Rebased.
1863	18660207	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18660207	sipa	Apart from those static counter variables, ACK on the code changes. A more efficient wallet serialization format (where metadata is stored together with the keys) would be nice, but I guess that can easily be done together with a wallet format overhaul.
1863	18660363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18660363	jgarzik	agree that the static counters are ugly
1863	18750250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18750250	jgarzik	Added commit to encapsulate the static variables, and some existing variables held across invocations from multiple callers, into CWalletScanState.
1863	18750394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18750394	jgarzik	Also note that this pull request introduces an extensible key-metadata object in the wallet, fully versioned. It is now easier to add other metadata to each key.
1863	18764376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18764376	jgarzik	Merged with upstream
1863	18785787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18785787	sipa	ACK code changes; didnt test yet. Can you rebase instead of doing merges?
1863	18806305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18806305	laanwj	ACK on code changes
1863	19182448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19182448	sipa	Id like to merge this, can you squash the merge commit?
1863	19200529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19200529	jgarzik	Rebased
1862	8826655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8826655	jgarzik	ACK
1862	8833010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8833010	Diapolo	Looking good now :).
1862	8833268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8833268	gavinandresen	Squash them into one commit and it is perfect.
1862	8833368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8833368	kjj2	Done.
1862	8839253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8839253	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1862	8866727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8866727	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1862	8868151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8868151	Diapolo	ACK
1862	8881968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8881968	laanwj	ACK
1861	8809641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8809641	jgarzik	lockunspent does the minimum necessary to accomplish the use case at hand (protecting smartcoins from being spent), but Im open to other opinions, if people see other uses.
1861	8829423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8829423	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1861	8833698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8833698	gavinandresen	I like the simplicity; I vote for a listlockunspent to get the current list of locked inputs, which should at the very least be handy when debugging.
1861	8866380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8866380	xblitz	I would rather prefer that listunspent to have an option to filter which one we want ( locked || unlocked || locked && unlocked ) .. and both would be the default instead of having adding new rpc calls
1861	8866655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8866655	jgarzik	More, simple RPC calls are preferred over making existing RPC calls ever more complicated. "listunspent" displays the coins available for spending... lets not make it more complicated than that.
1861	8915161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8915161	jgarzik	Updated to add RPC "listlockunspent", and to use RPCTypeCheck()
1861	8935332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8935332	xblitz	would it be more proper for the command to be called "listlockedunspent" ?
1861	8939923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8939923	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1861	8963992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8963992	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1861	9638093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9638093	gmaxwell	Needs rebase
1861	9639854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9639854	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1861	10434604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434604	jgarzik	rebased
1861	10670299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10670299	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1861	10909457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10909457	gavinandresen	ACK
1860	8811401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8811401	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1860	8816527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8816527	mikehearn	Hmm, why set it by default? Presumably this new flag would indicate a disk-pruned node? I think it only makes sense to set this if the behaviour is non-default in some way, and this commit doesnt change behaviour.
1860	8818898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8818898	jgarzik	The roll out happens like 1) Set this by default 2) If you need validation but not block download, seek out NODE_VALIDATION nodes, otherwise seek out NODE_NETWORK 3) Later, non-archive nodes drop NODE_NETWORK
1860	8820719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8820719	TheBlueMatt	ACKACKACK.
1860	8820887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8820887	gmaxwell	So if we do this now, we lose the ability to make NODE_VALIDATION signify an ability to serve UTXO SPV tree fragments but not blocks. (Because we currently cant serve them). Otherwise, sounds good to me.
1860	8977769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8977769	sipa	I think a merkle-UTXO tree is further ahead than the need for separation between archive nodes and full nodes. I think the use case for those is separate from this issue, so Id leave that for another network service bit. service bits have to indicate (positive) support for a feature, as they are ORed together when storing in the address book. That can change too of course, but its certainly easier if that werent necessary. Originally, I thought about adding two separate bits, NODE_VALIDATION (validation/relay of blocks and transactions, maintaining a mempool, keeping UTXO set, serving (very) recent blocks) and NODE_ARCHIVE (providing old blocks), and have NODE_NETWORK imply both. This proposal accomplishes the same, but forces every archive node to be a validation node as well. Not a problem as such, but Im not sure thats necessary.
1860	9122778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9122778	jgarzik	If archive nodes will always be validating (which seems logical), one additional ```NODE_VALIDATION``` bit is sufficient. If archive nodes will sometimes _not_ validate, then yes, we need two bits.
1860	9161778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9161778	sipa	Yes, thats my point. I dont think it makes sense to have that distinction now, but Im not sure we should make it impossible to make that distinction in the future.
1860	9163970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9163970	TheBlueMatt	meh, I find that more protocol update than node service update...but I suppose leaving that up to the version king works best... Can always add a NODE_ARCHIVE later if we really need it to mean non-verified old block provider?
1860	9166007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9166007	jgarzik	Closing, no consensus
1860	9169273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9169273	sipa	Right, but at that point, an old client that needs to IBD and doesnt know yet about the new service bit will not be able to find the archive-only nodes.
1860	9179862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9179862	TheBlueMatt	No consensus? I think every comment has been generally positive, and this is something we really need in the near future (Id argue before ultraprune is merged).
1859	8818475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8818475	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1859	8825088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8825088	laanwj	ACK
1859	8965975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8965975	Diapolo	Im going to update this until early next week :).
1859	8974222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8974222	Diapolo	Updated to include 2 new functions to use local copies of the proxyInfo and nameproxyInfo objects in the time-critical functions, which removes the bad practise of holding the lock all through ConnectSocket and its subroutines, as Gavin suggested. I chose to add these 2 function (currently not exposed to netbase.h), because I think I need those when updating the GUI with extended proxy settings.
1859	9002422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9002422	Diapolo	I updated GetProxy() to fill a proxyType object and make that usable outsite of netbase.cpp (moved the typedef to netbase.h). Can you have a in depth look at the changes to optionsmodel.cpp, I included the use of GetProxy() for the SOCKS version, too, which was not in before (was read from the settings only).
1859	9013504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9013504	sipa	ACK on changes to core.
1859	9018021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9018021	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1859	9018066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9018066	Diapolo	Anything left for the Qt changes? I trie to not include feature-changes and will do that after this got merged.
1859	9059652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9059652	laanwj	ACK
1859	9089160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9089160	Diapolo	No code changes, only updated some code-layout in optionsmodel.cpp.
1859	9167912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9167912	Diapolo	Can we get this fix into 0.7.1?
1859	9168694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9168694	laanwj	Yes as I said on the mailing list, thats the goal. Avoiding corner-case random crashes is always good.
1857	8787747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787747	laanwj	Is someone testing all these mac changes on an actual mac?
1857	8787921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787921	fanquake	Yes.
1857	8790936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8790936	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1857	8793753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8793753	Diapolo	Failed because of ``Error: An error occurred while setting up the RPC port 8332 for listening on IPv4: Address already in use``, which is unrelated to this patch. Seems to be a problem with BitcoinPullTester.
1857	8877895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8877895	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1856	8794488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8794488	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1854	8795611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8795611	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1853	8787777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787777	fanquake	Fixed the other include and merged into one commit.
1853	8796802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8796802	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1852	8786815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786815	laanwj	ACK except for Qt version change
1852	8787012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787012	laanwj	Please squash into one commit
1852	8787366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787366	fanquake	merged into one :)
1851	8798842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8798842	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1851	8799239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8799239	laanwj	ACK
1851	8828196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8828196	Diapolo	ACK
1850	8785152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8785152	luke-jr	Needs to be addressed: when the address is unavailable, should the "address" key be absent, null, or something else? Current code here does the "absent" option.
1850	8803505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8803505	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1850	9050198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9050198	gavinandresen	This is high risk for breaking existing applications; in addition to careful code review I would really like there to be a test plan, or, even better, until tests that fully exercise all of the code paths in CWalletTx::GetAmounts.
1850	9637288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9637288	sipa	I hope no application depends on the random data being produced, so I think this should be treated as a bugfix.
1850	10392884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10392884	luke-jr	Fixed the bug found, and commented CWalletTx::GetAmounts better so the flow is more understandable. Ill get to tests later.
1850	10672201	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10672201	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1850	10777133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10777133	sipa	Looks like just code movement to me (except the address = CNoDestination()), ACK. I havent tested though.
1850	12599701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12599701	gavinandresen	Needs a test plan; see for a test plan skeleton.
1850	21089385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21089385	luke-jr	Fixed s nit and a bug I thought reported with it (though it seems to have vanished here...), and rebased. I am not sure how to create a test plan for these particular fixes. I believe the conditions to trigger the bug can only occur when some other (eg, newer) client has accepted wallet transactions that the currently running version does not understand.
1850	21292635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292635	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log. This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
1850	24722633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/24722633	Diapolo	Is this the last version and rebased to current master? If yes Im going to try if this fixes my problem in #3006.
1850	25802763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/25802763	Diapolo	Can you please rebase this or is it mergable?
1850	26050466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26050466	Diapolo	Are you still around here or dont you participate anymore?
1850	26771559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26771559	gavinandresen	This is on my list of old pulls to get resolved. After reviewing the code again, Im planning on: 1) Tweaking my handy-dandy payment request generator code so I have an easy way of generating transactions that pay to standard-but-not-expressible-as-an-address transactions (Ill teach it to take hex full public keys OR addresses and have it do-the-right-thing; Ive been meaning to do that for more payment protocol testing anyway). 2) Test this code. I waffle on whether it would be better to output "address" : null instead of leaving out "address" for outputs that cannot be expressed as an address. Certainly the current behavior is wrong...
1850	26778360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/26778360	gavinandresen	Pulled (after testing using and fixing the trivial merge conflict).
1847	8782895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8782895	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1847	8786130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786130	laanwj	ACK I dont understand the pull tester output "Error: An error occurred while setting up the RPC port 8332 for listening on IPv4: Address already in use". Seems that a previous test run was still running?
1847	8792570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8792570	TheBlueMatt	sorry, should be fixed now
1847	8807004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8807004	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1844	8785494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8785494	fanquake	There is another simple QT5 change that you could include in this pull. Line 5 of macdockiconhandler.mm can be changed from #include <QtGui/QWidget> to #include <QWidget>
1844	8786262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786262	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1844	8786463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786463	Diapolo	Pretty neat catch, I will update this pull :).
1844	8786856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786856	laanwj	ACK BTW you can get around the problem of displaying `<` and `>` on github by indenting code with four spaces :-) Ive edited your post to show this.
1844	8786990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786990	fanquake	ah, cheers for that. I couldnt figure out how to make it work.
1844	8787017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787017	laanwj	Oops seems I merged this without the include change, I think youll need a new pull for that
1844	8787064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787064	fanquake	I can do it if you want.
1844	8787347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8787347	Diapolo	Yeah thats fine with me!
1837	8680714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8680714	Diapolo	Ive been using 1.0.1c for my own Windows builds for months and have not found any problems with it.
1837	8684638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8684638	Diapolo	Thanks :), looks good.
1837	8705440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8705440	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1837	8722669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8722669	laanwj	Please increase the deps version number, ie to bitcoin-deps-0.0.5.zip (both in deps-win32.yml and gitian-win32.yml)
1837	8749785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8749785	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1837	8755568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8755568	laanwj	Ok great, Looks like has to install openssl1.0.1c in /mnt/mingw/openssl-1.0.1c, before the pull tester can test this.
1837	8778125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8778125	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1837	8786150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786150	fanquake	Closing this. Will merge all into a single commit in a new pull.
1837	8786167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786167	laanwj	You dont need to close your pull for that. You can just "rebase -i", squash the commits and push -f to the current branch.
1837	8786216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8786216	fanquake	I would have. But those commits were in the master branch, instead of a separate one. Ive been meaning to start using branches for pulls for a while now, so thought I might just sort myself out and do that instead.
1837	8792987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8792987	TheBlueMatt	1.0.0c build for pull-tester, should test properly now.
1836	8678111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8678111	jgarzik	Prefer "setdetach" to match the existing get/set naming scheme of RPC methods.
1836	8678388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8678388	kjj2	I thought about adding calls to get and set the state of the detach flag. In the end, it seemed a bit pointless. You really dont care about that flag except as your default (in the config file or start script) and when you are doing the actual stopping. (It occurs to me that it might not be clear that this actually performs the stop right away, just like the stop RPC call.) I did add a parameter to allow you to override the default in either direction, should someone ever need to, but I bet that about 95% of the use of this will be to force a full detach.
1836	8678472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8678472	jgarzik	Since it combines the stop action, thats fair...
1836	8680787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8680787	laanwj	What about adding an optional parameter to stop? Id really like to have only one termination command. Edit: and as I understand, this will be temporary at most, because when we switch to leveldb there will be no detach flag anymore. I guess it is easier to ignore an argument than deprecate a command.
1836	8714222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8714222	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1836	8736271	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8736271	gavinandresen	I like s suggestion, add an optional boolean param to stop.
1836	8763046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763046	sipa	Agree with in LevelDB we wont need this anymore.
1836	8775888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8775888	kjj2	Changed to an optional parameter to the stop RPC command. I also tested all 6 combinations of detachdb=0/1 and stop true/false/blank, and all worked as expected.
1836	8778844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8778844	gavinandresen	ACK
1836	8789724	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8789724	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1836	8793805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8793805	kjj2	Updated the help message, cleaned up spurious inserts/deletes
1835	8679397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8679397	gmaxwell	I dont think I get the point of this. Currently, well start fetching blocks as soon as one happens on the network. >1 hr blocks are fairly rare.. once per six days on average. So it would be quite infrequently useful. How about instead if we connect to someone, and it claims to have more blocks than we have, and we havent gotten a block in X time (e.g. were not currently getting them from another peer) then trigger it... and then we go add node rotation. This would work around our silly stuckness reasons, and would also help with stuckness due to idiot peers.
1835	8698830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8698830	jgarzik	It is a fair criticism that this change did not accurately capture the stuck condition. The "stuck" condition is defined as: new blocks arrive, but our hashBestChain does not change. Updated commit to record when the chain last advanced, and use that timestamp to trigger a "getblocks" for newly connected peers.
1835	8717905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8717905	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1835	8763148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763148	sipa	Have you actually observed this helps? If anything, Id do the re-requests for blocks outside of the "version" message handler, as frequently the connections are quite stable when this happens.
1835	8826754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8826754	jgarzik	Closing, hopefully can look at implementing suggestion
1834	8679441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8679441	gmaxwell	NAK. This potentially breaks the bitcoin distributed algorithm. (Ignore checkpoints for a moment.) I mine a long fork with 300,000 diff1 blocks. I feed it to you. Youll now never fetch the much longer real chain from honest nodes. Same problem exists later in the chain too, its just not trivial to pull off as an attack in that case. May also have some weird effects with forks around the retarget (you can have short competing forks with different difficulties, and because the maximum retarget change is >=2x a lower diff chain could have more blocks, even for a fork only a few blocks long)
1834	8679752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8679752	jgarzik	That case is nigh impossible given checkpoints. You ask to ignore this, to present a theoretical case that does not therefore apply to real world client releases. One case _obviously_ can lead to stuck downloads today. The client sends getblocks to a remote peer that we know in advance does not have the data we need. nAskedForBlocks is incremented, preventing further queries, directly and immediately leading to a stuck download.
1834	8679910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8679910	laanwj	It does seem a bit dangerous to rely on pfrom->nStartingHeight so completely. Its very hard to see what effect this will have in edge cases. Couldnt we address the "stuck downloads" problem in another place, ie by detecting stuck downloads actively and requesting from different nodes. After all, even if a node claims to have more blocks, it can still be stuck.
1834	8679990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8679990	gmaxwell	the download happily continues when we get another block from the network in an average of 10 minutes. I presented the toy example ignoring checkpoints because its easier to understand. The same exposure exists at retargets where a forks can be created that differ in difficulty by a factor of two, or if a non-majority but high hashpower (e.g. asics before they are widely adopted) attacker used timewarp to mine a fork down to low difficulty starting anywhere after the highest checkpoint. I dont think the exposure, even if it is fringe and unexciting is worth avoiding waiting for a block in the rare case that you get a peer which is stuck and behind the chain.
1834	8681098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8681098	gmaxwell	Gah, sorry, I read the title without actually reading the patch. My above concerns arent an issue here: even in those cases when the real network finds a block again itll still pull from them, which is adequate and fine.
1834	8728904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8728904	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1834	8763202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763202	sipa	Something like this is useful, but it will fail to fetch the new chain in some edge cases (I know, those will be fetched when a successor block is broadcast, but still). Maybe some flexibility, like (nStartingHeight > nBestHeight - 144) is more safe, and will still prevent against the majority of silly getblocks?
1834	8826997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8826997	jgarzik	Updated commit to offset height count by 144.
1834	8843020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8843020	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1834	8860632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8860632	laanwj	ACK with the 144 offset
1834	9208267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208267	sipa	ACK
1833	8674807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8674807	sipa	Good idea. Id disable such behavior during IBD.
1833	8677003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8677003	jgarzik	Updated to avoid sending "mempool" while in IBD.
1833	8679472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8679472	gmaxwell	Each seems a little excessive. Perhaps only do it on outbound ones and/or only if the nodes uptime is low? Its potentially a lot of extra data when youve got a hundred peers, and most of the data is redundant.
1833	8685102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8685102	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1833	8687555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8687555	darkhosis	I had approx. 3200 transactions in pool when I updated my bitcoind to the new git version. I decided to include this in the build... got back up to ~3100 transactions in pool immediately. The only ones I lost were the ones with the large orphans (Ill probably modify that and make it 20k or 30k). A tad more load at the very start, but it only takes a few minutes to get up to 600 or 700 peers.. after that, I havent noticed any difference (except more errors about how Tx is already used at x)
1833	8702044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8702044	jgarzik	Restricting "mempool" queries to outbound connections seems like a reasonable compromise ... change updated. I imagine hardcore miners would want to remove this condition, to guarantee they do not miss anything. But it seems like outbound-only should get 99%, while saving bandwidth.
1833	8728976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8728976	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1833	8755280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8755280	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1833	8763218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763218	sipa	ACK
1833	8816591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8816591	mikehearn	Cool. Restricting to outbound connections also means you wont send this command to SPV clients that dont track the entire mempool. It may be worth a comment that makes this explicit rather than a side-effect of checking for outbound-ness.
1833	8816713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8816713	gmaxwell	Hm. How do we prevent this from violating the (probably soon to be implemented) expectation that transactions will live in the mempools of the network for a particular amount of time? Esp once peer rotation is implemented?
1833	8827980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8827980	jgarzik	Two more added conditions: 1) Should have checked NODE_NETWORK (pfrom->fClient), which the BIP states, and unintentionally hinted at. 2) Only do this for the first two hours after node startup.
1833	8843472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8843472	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1833	8964010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8964010	darkhosis	Im guessing this might be related, Not sure what else it could be, as outside of testing this I havent modified the transaction code at all (I was planning on it, but...).. Ive changed the misbehaving threshold to 102 to avoid situations like this, which is why I didnt disconnect those two peers.... but, seems like nobody else has, as I was left with about 50 peers (though it gradually started increasing, up to 150ish, but I decided to restart bitcoind anyway). After that it only took about 10 minutes to get back up to ~800 (after restarting bitcoind), although about 80% of my addnodes were instantly disconnecting me. As the only reason I initially started running bitcoind on the server was for p2pool and I no longer use p2pool, I guess now is as good a time as any to shut it down. Id rather use that server for video encoding & torrenting anyway (gbit connection and all). Maybe mess around on my kimsufi pos. But, yeah... (oh, and I just included that first second... there were about 50 disconnects a second for another 10 seconds or so)
1833	9208279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208279	sipa	PullTester gives a compile error; can you look into that?
1830	8698850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8698850	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1830	9208291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9208291	sipa	ACK for 0.8
1830	9639963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9639963	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1830	9960389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9960389	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1830	10062211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10062211	Diapolo	IMHO the time to do such a pull is NOW, as we have much time left for translators catching up. If this pull is considered useless (which at least sipa doesnt think ^^) just close it.
1829	8659492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8659492	gmaxwell	Common autotools convention is make check. I dont know that it matters much, but might increase the likelihood of it being run. (But perhaps make test is more popular elsewhere?)
1829	8659786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8659786	gavinandresen	Ill make both "check" and "test" work...
1829	8660275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8660275	jgarzik	ACK either (or both) ways. autotools does "make check", therefore that is widely spread. "make test" is also quite common in hand-rolled makefiles.
1829	8674980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8674980	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1828	8628118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8628118	gavinandresen	My primary interest is neither simple code nor faster code. It is secure, backwards-compatible code. Given the level of scrutiny the existing bitcoin codebase has had so far, I am very reluctant to commit changes to core code unless the benefits of the changes clearly outweigh the risks that the changes will have unintended side effects or open up new security holes. Thats not a "no" for these changes, but I personally dont think the benefits outweigh the cost of the hour or so it would take me to thoroughly review these changes and convince myself theyre not dangerous. If you can get some other coders I trust to spend the time reviewing, then great...
1828	8636113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8636113	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1828	8642819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8642819	laanwj	Im divided on this one. Some changes do make the code shorter and easier to read / more maintainable, others are somewhat more doubtful shortcuts made for speed. But for example reducing the borderline-crazy loop in DecodeBase58 to: while ((v = pszRBase58[*p]) >= 0) { bn *= 58; bn += v; p++; } is a pretty nice feat. Is there a usecase for fast base58? BTW: thanks for adding tests, well surely pull that one
1828	8683878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8683878	roques	Thanks for the reviews! Based on them Ive pushed some improvements. * added a comment explaining base58-encoding and how leading 0-bytes are encoded to preserve them. (btw. should it be `base-58` or `base58` in comments?) * corrected Hungarian notation of `pszRBase58` to `rgi8RBase58` and declared it `const` (Is there a style guide? Im unsure when its OK not to use Hungarian notation) * synchronized `rgi8RBase58`s understanding of `isspace()` with Posix (`0xa0` does not count as space, whereas `"\f"` formfeed does) * fixed the `base59` typo
1828	8685694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8685694	roques	"Wladimir J. van der Laan" <notifications@github.com> writes: > Is there a usecase for fast base58? Not directly in bitcoind, unless the RPC-interface gets used heavily. However, mentions that it is a CPU hog and uses code, which due to some of its remaining quirks seems to be derived from Satoshis implementation. Christian.
1828	8744986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8744986	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1828	10316636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316636	luke-jr	Needs rebase.
1828	10341556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10341556	roques	Rebased on `master` as of a few minutes ago.
1828	10360827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10360827	sipa	I do appreciate the readability of the code, and to a lesser extent the possibility for optimization. But it seems youre trying to bypass CBigNum wherever possible, directly calling OpenSSL routines. I agree CBigNum is only a thin wrapper, though, so perhaps we should see it as "C++ interface for OpenSSLs bn" and not "abstract C++ bignum type".
1828	10434714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434714	jgarzik	agree w/
1828	10684861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10684861	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1828	12236808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12236808	gavinandresen	Closing this as "risks outweigh benefits"
1828	21326514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21326514	luke-jr	Might be good to dig the tests out of this at least.
1825	8589807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8589807	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1825	8607208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8607208	xanatos	I havent benchmarked it, but just to be sure, would it be possible to make a one-shot program to compare all the 4 billion possible compact value SetCompactOld() == SetCompactNew() and from the SetCompact() result GetCompactOld() == GetCompactNew()? (with possible I mean that I dont know how much fast are GetCompact and SetCompact. Being one shot I would find acceptable to take 24h, so it would need to do 50k compares/second.
1825	8609011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8609011	xanatos	And if you want to document the compact format (something very useful I think), please write in the "big comment" the endianness of the mantissa and if ABCD are the 4 bytes of the compact number, which one is the exponent (A?) and which one is the mantissa (BCD in ?endian). As it is I think the format seems still "black magic". Ill add that you havent really removed the internals of bignumber from the implementation: BN_num_bytes is based on the internal representation of BN. To make an example, BN_num_bytes of the 0 number is 0, while the .NET BigInteger serializes the 0 as a single { 0 } byte, and BN_num_bytes gives the length of the "internal" buffer of the BN, with the sign that is saved on another field, so BN_num_bytes(0xFF) == BN_num_bytes(-0xFF) == BN_num_bytes(0x7F) == BN_num_bytes(0x-7F) == 1.
1825	8616586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8616586	roques	Youre raising good questions and Ive thus pushed an updated "big comment". On testing the correctness of the implementation: Ive tested the equivalence of the old and new implementations for a reasonably big subset of all possible compact numbers. While doing so Ive benchmarked the new against the old implementation: For sizes relevant to bitcoin the new implementation is ~80% faster. For bigger sizes the speedup approaches ~900% due to the big intermediate value used by the old implementation. Compact numbers are such a small part of bitcoin, their speed is almost irrelevant; Im hoping the new implementation is easier to understand, the speedup is just a nice side effect. About endianness: The "compact" representation is not a serialization into bytes, but a mapping into and out of an unsigned 32 bit number. The endianness (= order of bytes when mapping a number to a sequence of bytes) is thus irrelevant. However, bitcoin serializes `CBlock::nBits` like any other `unsigned long`. The semantics of `BN_num_bytes(n)` is well documented and part of the interface of OpenSSL. It is *not* the number of bytes used in a serialization of `n`, but the position of the most significant non-zero base256 digit of `n`. It actually is implemented as `(BN_num_bits(n)+7)/8`. (`BN_num_bits(10)` = 4 because decimal 10 = binary 1010)
1825	8626864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8626864	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1825	8768541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8768541	laanwj	I really like that this defines the number formats without relying on OpenSSL internals. Ive checked all 32 bit numbers for SetCompact, comparing old and new implementations, with the following mismatches: * 0180xxxx returns -0 (old) versus 0 (new) * 80800000 returns -0 (old) versus 0 (new) * 028000xx returns -0 (old) versus 0 (new) * xx800000 returns -0 (old) versus 0 (new) Im not sure whether the distinction between +0/-0 is interesting, but there were no other differences. If you want to verify for yourself, the test code is here: . It takes about 20 minutes to run here. Ive also checked GetCompactNew(SetCompactOld(x)) == GetCompactOld(SetCompactOld(x)) using the same code. There I only find issues in handling signed/unsigned zero as well, for example: * SetCompactOld(01800000) produces GetCompactOld 0x00000000 and GetCompactNew 0x00800000
1825	8856180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8856180	roques	OpenSSLs `BN_set_negative()` can not be used to create a -0: `void BN_set_negative(BIGNUM *a, int b) { if (b && !BN_is_zero(a)) a->neg = 1; else a->neg = 0; } ` In fact, all of the OpenSSL basic arithmetic routines are careful not to create a -0. `BN_mpi2bn()` however can be used to create a -0. Ive looked at the uses of `SetCompact()` in bitcoind: They either are immediately followed by a `getuint256()` which ignores the sign, or a 0 instead of -0 does not make a difference. If we want `GetCompact(-0)` to be 0 instead of 0x00800000 I could add a special case for that, but I dont think thats necessary.
1825	9635727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9635727	xanatos	As another interesting sidenote, contrary to what its written in the documentation, bn_get_word ignores the sign. So -255 returns 255 (the documentation says "BN_get_word() returns the value a, and 0xffffffffL if a cannot be represented as an unsigned long." , but clearly -255 cant be represented as an unsigned long)
1825	10359490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10359490	sipa	ACK
1823	8531804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8531804	gavinandresen	Is there a standard for the compact number representation? (if there is, link please) If there is not (and, actually, maybe even if there is), then I would argue the implementation of BN_mpi2bn is the "bitcoin standard." Also, re-defining anything in the block or transaction data has to be done extremely carefully to avoid blockchain splits.
1823	8532257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8532257	sipa	The problem is not that it doesnt follow some specification (afaik Satoshi invented this compact format), the problem is that the encode and decode functions are inconsistent with each other. I agree we should think about changing functions involved in block validation very carefully of course...
1823	8537872	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8537872	roques	It is not even that bad: Currently `SetCompact()` produces negative results for compact numbers with `0x00800000` bit set, whereas other implementations leave the bit set in their interpretation of the compact number or fail during verification. If a Satoshi client gets such a compact number it will pass it to CBigNum.getuint256, which will ignore the sign and thus interpret the compact number `0x08812345` as `0x0123450000000000` instead of `0x8123450000000000`. However, none of the implementations Ive looked at actually generates such compact numbers and my proposed rewrite still makes sure not to generate them either. The effect of the rewrite is that if a future implementation would produce such a number it would be interpreted in the most likely intended way instead of effectively stripping the bit in a convoluted way. The reason for proposing this change is that Im going through the bignum and base58 implementation extending the test-suite and simplifying the implementation. This weird behavior of `SetCompact` was the first to trip-up my tests. If we come to the conclusion not to accept this change, Ill change the test-suite accordingly.
1823	8538923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8538923	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1823	10342325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10342325	roques	My current understanding is that backwards compatibility of the block chain is paramount, even in cases like this one where no known implementation would be incompatible, so Im retracting this pull request in favor of Pull Request #1825: Bignum2
1822	8497726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8497726	jgarzik	ACK
1822	8502052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8502052	jgarzik	Forum reports working test:
1822	8503965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8503965	gavinandresen	ACK
1822	8512463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8512463	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1821	8495109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8495109	laanwj	ACK, it can always be brought back when it is better tested
1821	8495274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8495274	gmaxwell	Has this been tested by someone who was experiencing the problem?
1821	8495705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8495705	gavinandresen	No, but it is basically the same fix suggested by one of the people who ran into the problem; see
1821	8497786	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8497786	jgarzik	Prefer #1822 fix
1821	8503957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8503957	gavinandresen	Closing, sipas fix is reported to work.
1821	8512530	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8512530	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1818	8467833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8467833	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1818	9861820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9861820	sipa	Code changes look good to me, but needs rebasing, and I understand there is some problems still reported in
1818	9878059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9878059	gavinandresen	Rebased, and fixed a crashing bug in signrawtransaction that I think was introduced with ultraprune (assigning coins.vout[nOut].scriptPubKey = scriptPubKey could crash if coins wasnot already in mempool/wallet). Testing TODO: + Make sure the right thing happens when signing a transaction with two inputs that are both from the same previous transaction which is NOT in the mempool/wallet.
1818	9879148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9879148	kjj2	The problem I had reported in that thread was totally on my end, the result of a failed (manual) merge left a line missing in my local repo, and it was the line that adds stuff to the tempkeystore, so it was kinda important. Ill pull the rebased version and do more testing, but I wont have time today, and possibly not tomorrow either.
1818	9882659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9882659	gavinandresen	Testing successful, Im going to pull.
1815	8427543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8427543	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1815	8447633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8447633	laanwj	I think its best to a OPENBSD=1 option to the makefile for the OpenBSD-specific changes (unless theres a way to detect that automagically...).
1815	8447674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8447674	jrmithdobbs	Theyre not openbsd specific, they apply to both (and probably netbsd) platforms. The db thing is weird and can occur on other platforms from what I can tell. I moved the AI_ADDRCONFIG def into compat.h where it should be. Nice catch.
1815	8447692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8447692	laanwj	BSD=1 then...
1815	8447702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8447702	jrmithdobbs	BSD is already a reserved define since BSD4.3. (Its a version number, i forget details of parsing it.)
1815	8447760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8447760	jrmithdobbs	The pthread_np.h header stands for "non portable," I know that function exists on those two platforms in the expected form, I dont know if theres something better to key off of for it.
1815	8448067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8448067	jrmithdobbs	Cleaned up and clarified some comments.
1815	8448162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8448162	laanwj	I dont really care *what* specific flag you use, but you should put the OBSD specific changes (especially the -ldl) behind some flag so that build on Linux is unaffected.
1815	8448266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8448266	jrmithdobbs	The stuff in the makefile doesnt have access to the things that define things like _____FreeBSD_____, etc since theyre in included headers is the bigger problem. Im trying to hack it in as cleanly as possible without resorting to autotools because thats a big change. (and last time that got left to rot when jaromil did it) Trying to make as few changes as possible to attempt to get this fixed, at least for freebsd (dont know that ill have time to track down the openbsd wallet issues), before 0.7 final.
1815	8481308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8481308	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1815	10434754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434754	jgarzik	ACK, seems sane, needs rebase. Maybe HAVE_CXX_STDHEADERS should be conditionalized for the platforms that need it.
1815	16033246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16033246	luke-jr	Needs rebase.
1815	18694319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694319	jgarzik	Closing due to inattention. If you want to rebase, feel free to re-open.
1814	8411050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8411050	gmaxwell	I tested by doing initial block downloads on Bitcoin and testnet. Also tested on bitcoin with each of the hashes broken to make sure it rejected the violators.
1814	8426047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8426047	gavinandresen	ACK
1814	8435391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8435391	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1814	8437321	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8437321	Diapolo	What happend to that 2 blocks, which forces you to special-case them? Perhaps an easy answer is possible ;).
1814	8437541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8437541	gmaxwell	The miner used an identical pubkey and extranonce, resulting in a duplicate coinbase transaction. (which replaced the prior one, making the earlier one effectively unspendable). This has happened twice... an expensive mistake.
1814	8463986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8463986	laanwj	Great idea, it minimizes the window in which exceptions to the rules are possible. ACK
1814	8495078	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8495078	sipa	ACK
1813	8426153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8426153	gavinandresen	I agree with the goto looks like spaghetti code to me.
1813	8441734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8441734	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1813	8667882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8667882	jgarzik	Looks like the consensus of wussy C++ programmers is to NAK the beautiful goto... closing
1813	8721164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8721164	luke-jr	Please dont close pullreqs just because they need a minor change. The goto has been replaced here.
1812	8426218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8426218	gavinandresen	ACK for after 0.7.0 final
1812	8445440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8445440	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1812	8464074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8464074	laanwj	ACK
1811	8409245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409245	luke-jr	As much as I prefer using historically-standard KB/MB units in general, this client has always used SI-standard kB/MB units consistently. So ACK changing it (ideally everywhere), and ACK leaving it alone too ;) On the new commandline option, I feel we are getting a bit too much code to configure a mere debug log. In this case, it should be just as easy to use your OSs rm/del command immediately before launching bitcoind. Is there any reason to have it builtin?
1811	8412065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8412065	laanwj	Removing debug logs is one of these actions that can easily be done in the script that launches bitcoin(d). Its not worth adding yet another command-line flag for. Lets keep command line options for bitcoin/network-related settings.
1811	8426243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8426243	gavinandresen	NACK. I agree with
1811	8434574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8434574	Diapolo	Closing for getting too much NACKs ^^.
1811	8445449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8445449	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1810	8426271	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8426271	gavinandresen	ACK for after 0.7.0 final
1810	8448360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8448360	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1810	8739089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8739089	Diapolo	ACK, works great (love it)!
1809	8407655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8407655	gmaxwell	NAK. The intended application doesnt currently exist, so we cant know that the change is necessary and sufficient to enable it or am I mistaken? Can you point to its transactions in the chain? Instead, this would enable a large amount of harmful usage while concurrently removing the incentive to develop and adopt the appropriate payment protocols and overlay networks which would enable them without selling Bitcoins future for some short term gains. Redone with more aggressive limits would probably elevate my opinion to MEH, but Id be concerned that theyd break the intended use case too.
1809	8408233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8408233	gavinandresen	NIT: youd save a byte by using OP_2DROP instead of DROP DROP Im torn on whether or not it is time to implement a standard OP_DROP transaction type. If we do, it feels to me like it should be: ..64-or-fewer bytes.. OP_DROP ..n.. ..pubkeys.. ..m.. OP_CHECKMULTISIG 64 bytes because 64-byte SHA3 hashes are likely to be common in the next ten years. CHECKMULTISIG instead of CHECKSIG because that gives the most flexibility. And pubkeys instead of a pubkeyhash because I suspect wrapping these in a P2SH transaction will be useful. You should be able to do whatever you need with one max-64-byte push instead of two max-32-byte pushes. E.g. for distributed bonds the transaction might be PUSH("ISSUE<32-byte-hash>") DROP 1 <pukey> 1 CHECKMULTISIG Services interested in bond transactions would look for ISSUE+exactly 32 bytes. RE: removing the incentive to adopt appropriate payment protocols: If there is no new bitcoin address type corresponding to this transaction type, then I dont think that is an issue. RE: limits: the intent has always been to move away from hard-coded limits and create a market for transactions based on size, priority and fees paid. Perhaps the right thing to do is allow these as standard transactions, but drop them if they dont meet the minimum fee threshold (disallow them as "free" transactions).
1809	8408353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8408353	gmaxwell	As I enumerated on Jeffs call out for mob support ( :P ) , the actually likely applications of this are instant messaging, txn source deanonymization, and timestamping. The first two should be correctly addressed by a payment protocol (optionally via a p2p network), the latter should be accomplished via coinbase timestamping. There would be no reason to develop either of those functions with this transaction type made standard, except preserving Bitcoins long term viability. I dont see how a new address type comes into play there. Disallowing them as free transactions is elegant. I do like that. I dont like that this incentivizes script pubkey bloat over scriptsig bloat, mostly because our priority calculation is currently inadequate (treats scriptpubkey and scriptsig size the same).
1809	8408858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8408858	jgarzik	Updated commit with the following changes: 1) Ditch previous made-standard transaction types 2) Make OP_DROP + multisig a standard transaction type 3) Permit up to 80 bytes of OP_DROP data. 80 bytes was chosen because OP_DROP + OP_DROP was intended to enable "hash + tiny bit of metadata" as shown in proposals. If the presumed hash size is 64, we want a bit extra.
1809	8408900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8408900	jgarzik	RE fees: great suggestion. I am now endeavoring to figure out how to disable free transactions for TX_MULTISIG_DATA, and will do so in a separate commit. RE use cases: as I stated in IRC, I am working on a basic version of TDs distributed bond proposal right now. I also feel quite strongly that the ability to attach a tiny bit of data to your own transaction should be a fundamental right of every bitcoin user, even unrelated to the distributed bond proposals. The use case crops up again and again, and people are doing to do it anyway, whether we like it or not. See Hals description of a standard transaction that _right now_ may be [ab]used for data storage, for example.
1809	8409045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409045	sipa	Sure the use case for attaching metadata to payments comes up, but in my opinion that is just because no infrastructure for negotiating a payment exists. I still havent seen a need for that metadata to be attached to the actual bitcoin transaction that is used to perform that payment. My opinion remains that only data necessary for the world to validate the transfer belongs in the transaction - anything else is private information between sender and receiver.
1809	8409081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409081	gmaxwell	You actually think that people have a fundamental right to force third parties to perpetually store information unrelated to securing and inflation proofing Bitcoin as a price of being able to contribute their participation to the decentralized trust the Bitcoin is secure and inflation proof. I dont agree. If you instead want to say that creating costs unrelated to operating the currency for users is regrettable but sometimes unavoidable, and that its better to enforce some least harmful methods in order to discourage some more harmful ones (e.g. paying to bogus pubkeys) I would agree.... but so long as the OP_DROP data is in scriptpubkey instead of scriptsig, its not really a least harmful method.
1809	8409341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409341	luke-jr	I agree this shouldnt be standard or encouraged until there is a strong use case for it. Is there a good reason this metadata cant be stored in a merged-mined block?
1809	8409619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409619	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1809	8409642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409642	luke-jr	Revising my comment with IRC input: probably ACK as soon as testnet-proven.
1809	8411017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8411017	mikehearn	Dropped data can be left out of the working set as it cant affect spendability, I think? That means the only cost is disk storage, not disk seeks or memory, and rarely accessed disk storage is cheap. You can buy a terabyte hard disk for almost nothing these days. This does remind me a lot of the DNS discussions. We definitely dont want totally random data-intensive applications to stuff data into the chain, for legal reasons if nothing else. On the other hand, financial applications that need to strongly associate data with a particular financial transaction dont seem unreasonable. Satoshi said once that he spent a long time trying to find a way to allow messages in transactions: "I badly wanted to find some way to include a comment with indirect transfers, but there just wasnt a way to do it. Bitcoin uses EC-DSA, which was essential for making the block chain compact enough to be practical with todays technology because its signatures are an order of magnitude smaller than RSA. But EC-DSA cant encrypt messages like RSA, it can only be used to verify signatures." Sometimes it makes me wonder ... if hed known how to do encryption using the same keys, would v0.1 of Bitcoin have allowed size-limited text messages? I think the restrictions Gavin proposes would mean any IM system (etc) would be uncompetitive with a well implemented payment protocol. Its possible to be too extreme about shrinking the chain. For instance, its technically possible to do threshold signatures without CHECKMULTISIG by using secret sharing (see Ibrahim, Ali and EI-Sawy). So maybe CHECKMULTISIG should be made non-standard to encourage somebody to implement that. Or ... maybe we should just accept the efficiency hit and get threshold signatures deployed earlier. In practice we chose the latter. You could make the same arguments for addresses (they mean long term storage of a hash, key and sig instead of just a key and sig). Lets see what Jeff comes up with. If he builds a really compelling bond market app on testnet and people want to use it, itll be easier to judge the costs and benefits.
1809	8412481	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8412481	laanwj	I agree with Only data that is strictly necessary for the world to validate a transaction has a place in the block chain. Thats the whole point of it. Everything that is only significant to the sender and receiver (or miner) should be between the sender and receiver (or miner) and doesnt need to be stored forever by every other full node in the world. Really Id love sending some metadata with transactions for UI purposes, or even messaging between users, but this data should ideally be transient and not carved in stone in the block chain. That just feels wrong. Would it be possible to have an expiration date on the information? So that the OP_DROP could truly be dropped after some time? I guess not, if theyre hashed into the transaction...
1809	8420449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8420449	mikehearn	Actually I remembered just after I posted my last message that you do need the entire script in the uxto set because of how the signature hash is calculated. OTOH I thought of something else - setting aside the uxto set, in terms of long term storage, this kind of thing is fairly neutral. <20 bytes of data> DROP 1 <key> CHECKMULTISIG + a scriptSig is a hash, a key and a sig .... same as a pay-to-address output. Is 20 bytes enough? Well, if its just a pointer to some other data store then its fine.
1809	8454956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8454956	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1809	9640838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9640838	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1809	10434759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434759	jgarzik	rebased
1809	10771376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10771376	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1809	16084769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16084769	jgarzik	Closing. It sounds like current consensus favors a slightly different approach, if small-data is ever accepted: a single TxOut per transaction may be obviously prunable, e.g. OP_RETURN.
1809	16104399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16104399	mikehearn	Theyre orthogonal - some use cases require spendable outputs that contain a hash as well.
1809	18937181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18937181	jgarzik	Renewed interested in this at the conference and elsewhere. We need to figure out a nice way to attach a hash to a transaction, given that people are already doing this in a not-nice way (unspendable addresses).
1809	18937708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18937708	luke-jr	IMO, this kind of thing really should have s hash preimage required-to-relay as a prerequisite...
1809	19537664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/19537664	mikehearn	Theres a lot of interest in oracles coming down the line, it seems, and thats a use case for this kind of transaction. If someone popped up with an actual working server that did this, I feel wed be able to justify the <hash> OP_DROP <keys> OP_CHECKMULTISIG form.
1808	8404739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8404739	jgarzik	ACK
1808	8411489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8411489	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1807	8404732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8404732	jgarzik	ACK
1807	8404768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8404768	gavinandresen	Can we get rid of the PRI64x macros by just not supporting older compilers? If I recall correctly, latest MSVC supports the standard %foo way of doing things.
1807	8405417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405417	laanwj	Youd hope so... But VC2010 size prefixes: VC2012: Seems that they still have no support for "ll" and "z", but only "I64" and "I". I dont think there is really a standard for these types, so every libc vendor kind of does what they want. Boost probably has some truly portable and type-safe solution for formatting...
1807	8405525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405525	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1807	8405548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405548	luke-jr	%zu is AFAIK standard C++, so is it confirmed to not work with MingW? PRI64x *is* the standard way of printing int64 types. %x, %lx, %llx all target implementation-dependent sizes for int, long, and long long.
1807	8405681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405681	laanwj	Well as I said, I cant find it in the list in the official documentation on the MS site, so if it works at all I dont think it is safe to use. Also Im pretty sure that C++ standard says nothing about printf, thats from the (Ansi/C89/C99) C standard. C++ has the funny `std::cout <<` formatting... Edit: I do read that %z is official C99 and quite some C++ compilers implement it. However, its still strange that its not in the documentation for MSVC...
1807	8405880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405880	luke-jr	Meh, its part of C99 (page 289), so if it works then I dont see any reason to avoid it.
1807	8406361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8406361	laanwj	printftest.c: #include <stdio.h> int main() { size_t size = 0x12345678; printf("%zu\n", size); return 0; } Compilation $ i686-w64-mingw32-g++ printftest.c -Wformat -o printftest printftest.c: In function int main(): printftest.c:6:25: warning: unknown conversion type character z in format [-Wformat] printftest.c:6:25: warning: too many arguments for format [-Wformat-extra-args] Result $ ./printftest zu So, no. Trying the same with %Iu (or the PRIszu macro that I defined) works.
1807	8416152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8416152	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1807	8460226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8460226	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1807	8738433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8738433	Diapolo	I would love to see this one getting in as afterwards we can start fixing all left signed/unsigned stuff.
1807	8757684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8757684	laanwj	AFAIK this does not help with signed/unsigned, just the width of data types to prevent segfaults and such.
1807	8868778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8868778	gavinandresen	ACK
1807	8903759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8903759	jgarzik	Gah! This adds well over 100 warnings to the build. Please clean up.
1807	8915959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8915959	laanwj	Yeah it sucks to be messenger of bad news, however it adds warnings for problems that were hidden before, not new problems. Having them visible is better IMO.
1807	8916073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8916073	jgarzik	A few, sure. Over a hundred, including several repeated each time main.h etc. was included? It is noise that obscures real warnings, and gets in the way of actual work. I am basing my current work off 1381ad2b21733071acb2a43c251dbecef524f110 as that is the last usable commit here.
1807	8916278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8916278	laanwj	Just remove -Wformat then for your build.
1807	8916483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8916483	jgarzik	Thats not usually how software development works. If you cause problems in the build, you fix it, or revert it. It is not the responsibility of each individual developer to work around the build noise added here. If you are not volunteering to fix it, lets revert the change until it is ready for prime time.
1807	8916565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8916565	jgarzik	You will recall, with the previous swath of warnings, that the warnings were fixed _before_ we adjusted the makefiles.
1807	8916703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8916703	laanwj	I have already volunteered to fix it, but I also have many other things to do. I actually *made -Wformat work*. Before, it was enabled but not doing anything in the bitcoin build (because of our custom printf redefine). If we dont like the warnings it creates, it should not be enabled in the first place. I think removing -Wformat for now is a better fix than reverting this commit, because people that *are* interested in the warnings can simply add it...
1807	8917312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8917312	laanwj	Voila 14ac0ad
1804	8401211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8401211	luke-jr	IMO, this should be optional, as no reasonable miner would want to have it on mainnet.
1804	8401843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8401843	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1804	8405206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405206	jgarzik	If miners want a knob to disable, thats easy to add... or, it is similarly easy to patch the source at the callsite. Ill wait and see what the other devs prefer... can add a command line argument to disable, if thats what people prefer.
1804	8405600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8405600	luke-jr	Maybe it would make sense to hard-fail on testnet, and set "errors" (getinfo etc) on mainnet (while still posting the block)?
1804	8407789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8407789	gmaxwell	Funny, I was just about to suggest "errors" too. In addition, it could submit the block like normal, but then refuse all further getblocktemplate calls until the process is restarted. dunno, perhaps over complexifying it. The current behavior is a bit dangerous, a widely used miner program could be getting this wrong and go along unnoticed right to the cutoff point, causing the majority of the hash power to be lost all at once.
1804	8409196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8409196	luke-jr	I like that idea about accepting the block internally yet giving the submitter a rejection anyway. Seems the ideal of both worlds and gets the message across clearly.
1804	8827112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8827112	jgarzik	Closing, not worth the effort of revision to suit the crowd
1803	8400554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8400554	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1802	8399211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8399211	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1800	8386923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8386923	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1800	8394157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8394157	gavinandresen	What is the severity of this bug? Does it prevent bitcoin from working at all when starting with an empty wallet?
1800	8395297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8395297	gmaxwell	The position counter is uninitialized. So far Ive never been able able to get it to a case where it happened to have any value other than zero, which is the correct and expected value for a new wallet. No matter what value it takes it should not be able to prevent bitcoin from working. The worst result would be some transactions appearing out of order. I found the issues while making a second code review of all the later pulls, I dont believe any problems have been reported related to this.
1800	8397685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8397685	luke-jr	In theory, a new wallet might put items out of order across restarts since they wont run the "process old data" function :/
1800	8447399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8447399	luke-jr	bump, rc3?
1796	8357149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8357149	laanwj	As the process is fully automated; is it possible to send the restored translations to transifex directly? Great work btw
1796	8357261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8357261	luke-jr	Its not *fully* automated, it does need the supervision or it will make bogus changes occasionally ;) I dont know anything about Transifex other than it being a website <.<
1796	8357358	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8357358	laanwj	Its a website with an API. But apart from that I dont know much about it ether. Merging between git and transifex is hard, this is why we usually encourage the one-directional workflow. The problem of directly uploading these .ts files to transifex could be that translations that have been made in the time between the last transifex->git import to disappear again. Im not sure though. Maybe there is an add new only command. Otherwise well need to find out the API and upload the restored translated lines one-by-one through that *sigh* :)
1796	8359386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8359386	Diapolo	Im not sure what would be invalid with such code: ``<translation type="unfinished"/>``?
1796	8359425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8359425	luke-jr	Nothing, Im sure. But my lupdate does the longer way
1796	8359465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8359465	Diapolo	What Qt version are you using In the end I dislike fixing stuff that way as our default process is to only update english-master and everything else happens via Transifex. It is indeed a time-consuming work youve started here, but Im not sure we should do it that way.
1796	8359487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8359487	luke-jr	4.8.2
1796	8359642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8359642	Diapolo	I have to clarify I guess, I dont want to stop evolution on the translation process, but at least we never uploaded so many changed translation files. IMHO before doing your work, the current Transifex state should be merged to current master, to not lose new translations and then disable TX translation for Translators. Then doing what this pull does, merging it, uploading files to Tx and then re-enable TX translation for Translators.
1796	8365196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8365196	laanwj	Yes, using tx push is too dangerous in this case: Heres how differences between the old and new source files will be handled: * New strings will be added. * Modified strings will be considered new ones and added as well. * Strings which do not exist in the new source file (including ones which have been modified) will be removed from the database, along with their translations. Ideally we only want to add strings that dont exist yet (anymore). Not to override current ones (which may have changed), or to delete anything. I do think this is important to do. If we wont, well lose more translations every time that we change English spelling/punctuation.
1796	8373611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8373611	luke-jr	Ive syncd my local copy of this branch with Transifex and updated the first 2 commits there. Will be working with to finish the rest.
1796	8378353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8378353	Diapolo	Can you give a status update? It seems you upped a new english master file to Transifex, but we have not the corresponding bitcoinstrings.cpp update here on Github, which sucks IMO. Edit: I somehow also missed the vote to declare you as a maintainer on Transifex.
1796	8379327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8379327	luke-jr	The updated bitcoinstrings.cpp will be in this pullreq when I finish updating it. Its trivial to update locally anyway...
1796	8380076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8380076	Diapolo	I read that Gavin wants RC2 to become final, in the Bitcointalk thread. The new translations should be in there... which means we need a bitcoinstrings.cpp update here and another TX update merged into current master. I really dislike the timing of this pull...
1796	8380430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8380430	luke-jr	RC2 is already done, so if it becomes final this is all too late anyway.
1796	8383275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8383275	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1796	8384193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384193	luke-jr	Finished via Transifax for all but 4 with under 10% coverage: ca_ES et eu_ES fr_CA (since less coverage means more work for me, these didnt seem worth it) Also did the necessary git<->transifax syncing, so the latest translations are in this too. Should be good to go!
1796	8384222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384222	luke-jr	Side note: I did NOT pull the new Japanese translation, since it has 0% coverage (what Transifax sees is from the translation I copied to make it). Eliel (who recently updated the Finnish translation) plans to also fill in this Japanese one in the coming days.
1796	8384501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384501	laanwj	ACK after rebasing into one commit
1796	8384630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384630	luke-jr	Squashed into a single commit.
1795	8384474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384474	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1795	8674203	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8674203	gavinandresen	Very exciting. Did you see this: He has a really interesting looking C++11 headers-only implementation here at github that might give you inspiration (e.g. I think he uses boost to do the hashing; he seems to get a ton done in a very small number of lines of code).
1795	8915356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8915356	jgarzik	implementation ACK, I like it a lot. This seems to match the initial sketch from and myself on IRC.
1795	9122833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9122833	jgarzik	Poke, lets get some additional review on this.
1795	9738630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9738630	mikehearn	Hey Matt, could you rebase this on top of ultraprune? Im ready to start merging the bitcoinj side but want to test this with the latest code. Will do a review now-ish.
1795	9739753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9739753	mikehearn	ACK on this. Most of my comments are purely cosmetic except for the unit test commit being in the wrong place (it wouldnt compile in the order given). I guess well need a BIP? Ill start on one that documents what weve come up with.
1795	10029681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10029681	TheBlueMatt	Thanks mike for the good review (as usual). I updated the code to addresses most of the issues you mentioned. Changes: * many additional comments * filteradd is now limited to 1MB, any larger and the node gets a Misbehaving(100). * fRelayTxn now defaults to false - this means we will no longer relay tx inv message before receiving the remote peers version message, if this irks anyone it can be discussed. More changes to come (sipas new merkle block stuff, more unit tests and a seed twiddle value for bloom filters)
1795	10030079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10030079	TheBlueMatt	there are a few comments which note what the protocol defines as spec (these are obviously up for discussion): * there is no formal definition for filter parameters for a filteradd command if no filter is loaded - it is up to the serving node (if the client doest care, why should the spec determine the parameters?) * as noted above, 1MB limit to filteradd * txes in MSG_FILTERED_BLOCK can be relayed even when a node already has seen it (the current code does this) however it MUST always forward txn that the node has not seen (I think the bip says this, but its not really clearly worded imho, I updated the BIP to make this more clear)
1795	10030478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10030478	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1795	10030614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10030614	TheBlueMatt	hey, I wasnt done yet!
1795	10038439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10038439	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1795	10274345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10274345	TheBlueMatt	Added the requested nTweak value and merged sipas work on partial merkle tree representations. The BIP now needs rewritten and this is ready for second (third?) round reviews.
1795	10490567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10490567	sipa	Mostly ACK; * Id prefer to have the Murmurhash3 implementation separate from CBloomFilter * The 0xFFFFFFFF/(n-1)*i seed value seems intended to result in large bit differences between the different hash functions seeds. Together with the tweak, however, the first and the last now get seeds tweak and tweak-1. I think something simpler like k1*i+k2*n+tweak is better (with k1 and k2 arbitrary large odd 32-bit integers). * I feel uneasy about the arbitrary filter parameters used for the implicitly created filter when sending filteradd without filterload. The server cannot be expected to make a reasonable guess how the client is going to use the filter, and the client still has to track how large the server-side filter grows anyway. Id prefer to make this simply illegal (DoS 100): filteradd always requires an active filter. Maybe the actual filter data in filterload can be made optional: if it is omitted, its assumed to be all zeroes (though that would mean the size has to be specified).
1795	10771393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10771393	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1795	11478680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11478680	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1795	12046488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12046488	mikehearn	Can you add a new feature that lets clients opt out of auto-adding? Sipa points out that its only necessary for wallets that contain outputs which dont require predictable data in the corresponding inputs, which (for now) is most of them. This should resolve the excessive expansion issues.
1795	12047118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12047118	gmaxwell	Kind of an an unfortunate privacy loss for ones who do set it, and it still leaves the feature potentially useless for any who set it. (But I agree on having the option, if for nothing else because it makes the load-balancing lark I suggested viable)
1795	12048198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12048198	mikehearn	Well not really, you can still set the FP rate to whatever you want. If all your outputs are pay-to-address then its a no-op functionality-wise, the auto-adding didnt buy you anything. For the case where you have pay-to-pubkey or other scripts, the client has to refresh the filter every so often .... it can be implemented in bcj later.
1795	12058432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12058432	gmaxwell	Setting that bit or not is still another anonymity set reduction, but Im splitting hairs there ignore it. I guess I dont have a good feel for how fast the filter fails and needs to be reset. If its too fast periodic refreshes wont be sufficient (E.g. will the size of the refresh plus the unwanted data end up being more than just not using the filter).
1795	12061642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12061642	mikehearn	I think we can explore different algorithms later. The exact choices will depend on the users privacy preferences and device situation anyway. On Wed, Jan 9, 2013 at 7:09 PM, Gregory Maxwell <notifications@github.com>wrote: > Setting that bit or not is still another anonymity set reduction, but Im > splitting hairs there ignore it. I guess I dont have a good feel for how > fast the filter fails and needs to be reset. If its too fast periodic > refreshes wont be sufficient (E.g. will the size of the refresh plus the > unwanted data end up being more than just not using the filter). > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/1795#issuecomment-12058432>. > >
1795	12130821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12130821	TheBlueMatt	Added a nFlags to let the peer pick how/when it wants the filter updated...also added a second two commits to make it possible to match an arbitrary script template as a discussion point (that second part is not yet tested). Would like comments.
1795	12326080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12326080	gavinandresen	Code review notes: I dont like the entire implementation of CPartialMerkleTree being stuffed into main.h, it should be its own .cpp/.h Message handling looks good from a potential vulnerability point of view. NACK on the script.cpp / script.h changes -- they are unused (yes? I dont see where MatchesTemplate is used outside of script.cpp/.h) and I dont see unit tests for the new features like OP_OPCODE.
1795	12328294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12328294	TheBlueMatt	Yes, after discussion I believe we are currently targeting skipping the 2 MatchesTemplate commits for 0.8 and maybe skipping those entirely depending on what we may need in the future.
1795	12336347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12336347	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1795	12336539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12336539	TheBlueMatt	moved it to main.cpp, is that ok for you?
1795	12339708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12339708	gavinandresen	ACK, looks good.
1795	15513639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15513639	rebroad	So.. what was the BIP for these protocol changes? It would be nice if it could be referenced in the pull requests.
1795	15515778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15515778	mikehearn	as was discussed on the mailing list. Regardless, this code was already merged and shipped months ago, its a bit late to be commenting on it now. You can always open up new pull reqs if you want to change how the protocol works.
1794	8349406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8349406	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1794	8389902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8389902	laanwj	ACK
1793	8352995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8352995	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1793	8449228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8449228	Diapolo	RC3 fix?
1793	8507062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8507062	Diapolo	Rebased fixing merge conflict.
1793	8518214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8518214	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1793	8738277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8738277	Diapolo	As this touches a part of your networking code, can you take a look here, too?
1793	8763708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763708	sipa	ACK
1787	8288760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8288760	jgarzik	Note _not_ intended for 0.7.
1787	8322854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8322854	laanwj	Investigating boost.asio sounds like a good idea, before we build it entirely from scratch.
1787	8355559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8355559	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1787	8978902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978902	sipa	Looks like a lot of code for a feature that should be standard. I assume it will be easier using boost::asio?
1787	8981310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8981310	jgarzik	Most likely we can use boost.asio deadline_timer... but that requires moving the "io_service" from RPC into the core code, so that non-RPC code may take advantage of the async I/O engine (and the timers that lie within).
1787	10316628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316628	luke-jr	Needs rebase.
1787	10434777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434777	jgarzik	closing, self-meh. should consider boost deadline timer, rather than creating threads for same.
1786	8288072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8288072	laanwj	Yes, adding an extra flag should solve the problem too. ACK
1786	8288796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8288796	Diapolo	This does not fix 10022 spam on Windows, as ``WSAEINVAL (10022) is caused by: The time-out value is not valid, or all three descriptor parameters were null.``. But I think it is another fix worth to merge in addition to #1772, so ACK.
1786	8288946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8288946	jgarzik	so you actually tested this on Windows, for the net and !net cases? Im not sure the Windows expected behavior matches what you describe...
1786	8289022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289022	laanwj	Indeed, that `WSAEINVAL: the time-out value is not valid, or all three descriptor parameters were null` comes from the MS documentation So yes on Windows you still need the check to prevent error spam. It appears that windows does not allow for using select as simply a timeout. However, now you can check for have_fds instead of hSocketMax!=0, which is at least correct.
1786	8289079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289079	jgarzik	Yes, I understand it comes from the documentation, but is it actually _seen_ after applying this patch?
1786	8289180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289180	Diapolo	The error 10022 is still logged with this and without my patch, as select() returns WSAEINVAL. I tried it :). Yes, a check for ``have_fds`` is working, I can update my pull after this one is in.
1786	8289642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289642	laanwj	It makes sense that it still occurs because windows ignores the nfds argument. So this change is a no-op from the viewpoint of winsock. We could spare ourselves worrying about all these kinds of low-level OS details if we used an abstraction such as boost::asio (which will also use more efficient mechanisms such as epoll on platforms that support them).
1786	8289850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289850	Diapolo	That is what I tried to say his patch does not prevent the 10022 spam, I read the select() documentation on MSDN more than once to understand what is happening ^^. I rather sure most part of that network code are still from Satoshi (at least he was the one who merged them to Github at first).
1786	8312039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8312039	jgarzik	1) Updated to always pass fd sets to select(), even when zero fds are set. 2) Use precise have_fds test before squawking on socket error.
1786	8312341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8312341	Diapolo	Verified to work and fix the 10022 spam on Windows, tried it and closed #1772 in favor of your patch.
1786	8322696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8322696	laanwj	ACK
1786	8358019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8358019	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1785	8285424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8285424	gavinandresen	Reading your comments out-of-order.... ACK on dropping the change. Closing.
1784	8263004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8263004	gavinandresen	NACK. I am against this type of nit-pick. There is a fixed cost to ANY change proposed, and if the benefit of the change is not greater than that fixed cost then the change is nothing but a denial-of-service attack on our collective attention.
1784	8266288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8266288	laanwj	In general, nitpick pull requests means that people are looking closely at the code and reporting issues and strange things, which is very good. This, of course, doesnt all proposed changes have to be accepted. In this case I agree with This makes the code longer, not shorter :p
1784	8266509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8266509	jgarzik	Agreed, closing
1782	8249695	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8249695	luke-jr	"real" is just short for "real number" in this context. I dont see any reason to make it less clear.
1782	8253967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8253967	Diapolo	ACK this patch is unneeded.
1782	8263044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8263044	gavinandresen	NACK. Please dont submit tiny, nit-picking pull requests like this, unless part of a larger change that actually has some positive benefit.
1781	8246691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8246691	Diapolo	Based upon this changes Im planning to extend the Bitcoin-Qt GUI with the same proxy network options, but I want the core to get those first.
1781	8284968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8284968	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1781	8313604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8313604	Diapolo	Updated and re-simplified the helptext for -proxy6 and -tor + disabled the usage of -proxy for Tor and IPv6, when SOCKS4 is used.
1781	8358035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8358035	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1781	8385406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8385406	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1781	9642039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9642039	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1781	9852993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9852993	sipa	This looks like a lot of code for something that will be rarely used. Cant you combine the tor/ipv6/ipv4 specific code into one loop over NET_TOR, NET_IPV6, NET_IPV4, with maybe a small bit of specific code for each?
1781	9857498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9857498	Diapolo	Did you look if the code-flow is valid? It took me quite some time, so it would be nice if feature-wise this could get an ACK and I try to compress the code, to shorten it :). Btw. Im using a client with this codebase since a few weeks with Tor hs enabled, looking good.
1781	9968205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9968205	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1781	10052253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10052253	Diapolo	I have re-worked this pull to be a little shorter, it contains no loop though. Can you have a look at the functionality now?
1781	10053824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10053824	sipa	I still dont really like this - it seems overly complex for functionality only a fraction of users will need. I wonder whether its not easier to have some way to overload -proxy if you really want network-specific rules. Something like -proxy ipv6:ip:port, maybe?
1781	10094222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10094222	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1781	10316623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316623	luke-jr	What said. Also, this needs a rebase.
1781	10317785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10317785	Diapolo	I have changes for this in the pipe, which greatly reduce the code complexity and special casing.
1781	10434818	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434818	jgarzik	Would rather wait for a use case, than preemptively add this now
1781	10438407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10438407	Diapolo	Im going to re-work and re-open when finished :).
1779	8245667	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8245667	sipa	ACK
1778	8289140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289140	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1778	8291252	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8291252	Diapolo	Updated to reflect suggestion to not pass multiple bools to Bind().
1778	8361683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8361683	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1778	8401926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8401926	laanwj	ACK for 0.8
1778	8738247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8738247	Diapolo	Any reason left to not merge from your point of view?
1778	8915385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8915385	jgarzik	ACK, if others see a need
1778	8965990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8965990	Diapolo	Im a little sad that does not comment, as we had the initial discussion. I still think this patch is valuable.
1778	8969624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8969624	sipa	sorry, Ive been very busy the past few days - Ill have a look soon.
1778	9020574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9020574	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1778	9643665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9643665	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1778	9853005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9853005	sipa	ACK
1778	10049235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10049235	Diapolo	Anything left to do here then?
1778	10248489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10248489	Diapolo	Rebased to fix merge-conflict.
1777	8239752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8239752	Diapolo	Is it possible to remove the use of sprintf here, too?
1777	8240146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8240146	laanwj	I thought I removed that sprintf months ago. At least I rewrote a similar function in util.cpp. That function should use the existing HexStr function. Edit: I see the reason now. uint256.h cannot include util.h, as util.h includes uint256.h, So uint256 cannot simply use HexStr unless we move that to a third .h file...
1774	8217135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8217135	gavinandresen	ACK. makes valgrind happy again.
1774	8219467	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8219467	laanwj	I agree that this would solve the immediate problem. std::list (unlike std::vector) does not invalidate iterators when items are added, so it is safe to keep pointers to items in it. I do think the solution is a bit strange, but maybe its just me. Why not return a type from OrderedTxItems that has the actual CAccountingEntry instead of one that has pointers to another (temporary) structure, which is being built at the same time?
1774	8219723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8219723	luke-jr	It does feel strange to me, but I failed to think up a better way short of trying to rewrite it in some other paradigm. Maybe boost::variant would work better (most of the CAccountingEntry pointers are NULL), but Im not comfortable with adding that into the mix myself this late in the release cycle.
1774	8219756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8219756	laanwj	Yes, this is the simplest solution for now, thats for sure. Maybe add a (doxygen) comment to CWallet::OrderedTxItems that warns of the dangers, instead of only at the callsite in wallet.h.
1774	8219849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8219849	luke-jr	Like that?
1774	8220626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8220626	laanwj	Yes. ACK
1774	8224051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8224051	gmaxwell	ACK. (oops. clicked the wrong button)
1772	8219507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8219507	laanwj	Maybe we should not call select at all when there is no work to do? (ie, hSocketMax == 0). Or am I overlooking something? Edit: I think I am. Select without fds should effectively be a sleep() of the specified duration. So why is it returning errors at all?
1772	8220433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8220433	Diapolo	select returns 10022, when the 3 fds parameters are 0, which is the case when we have no net or a faulty proxy was supplied.
1772	8220639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8220639	laanwj	But does it still pause for the "timeout" duration in that case? Or is it a busy loop, erroring out immediately and causing 100% CPU usage?
1772	8220879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8220879	Diapolo	``int nSelect = select(hSocketMax + 1, &fdsetRecv, &fdsetSend, &fdsetError, &timeout);`` The timeout parameter defines the maximum time for ``select()`` to wait, but when we have a failed net all fdsetX variables have their .fd_count set to 0 and so I assume select fails imediately. But we have a timeout some lines below ``Sleep(timeout.tv_usec/1000);``, which prevents a 100% CPU usage IMO. Edit: And I can confirm, that Qt nearly idles, when I have set a non working proxy.
1772	8220967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8220967	Diapolo	Perhaps can comment here and ACK or suggest a better solution?
1772	8221027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8221027	laanwj	Ok, the timeout is already OK. Hadnt seen that.
1772	8268668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268668	Diapolo	and others... Can another core dev please take a look and ACK this one? As a fix I would like to see it in the next RC.
1772	8286351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8286351	jgarzik	hSocketMax+1 is not valid, when zero FDs are in the fd set. hSocketMax+1 is valid when fds are set. We should not be passing "nfds == 1" to select, when that is clearly not the case. That is the bug that must be fixed here. We always pass a timeout, therefore select always has "work" even if zero fds are indicated.
1772	8286681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8286681	jgarzik	Can you test and verify that #1786 addresses your problem (or at least changes the behavior a bit)?
1772	8295696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8295696	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1772	8312313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8312313	Diapolo	Closing in favor of #1786!
1769	8246620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8246620	Diapolo	That looks like a mess ... will create new :-/ sorry!
1767	8210941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8210941	laanwj	Im not entirely sure about clearing history. When clearing screen in a terminal (ctrl-L), the history is not cleared. Then again I suppose clearing history in this case can help a bit with privacy, so it may be wise to do so.
1767	8211336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8211336	laanwj	BTW the CONSOLE_SCROLLBACK is there to remind that there is currently no scrollback limit. If you use the console very long without clearing, you can theoretically exhaust resources. Maybe this can be solved using `QTextDocument::setMaximumBlockCount` (but I somehow remember there was a counter-intuitive relation between the number of text document blocks and messages).
1767	8212391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8212391	Diapolo	I found it annoying to not be able to clear the history, but in the end it is your decission :). I could add a comment in ToDo to remind there is currently no scrollback limit?
1767	8289902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289902	Diapolo	Do you consider this a 0.7 patch? I updated it to reflect in a comment that we currently dont have a scrollback limit.
1767	8306378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8306378	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1767	8306493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8306493	gmaxwell	A little bit of a layering violation; but one possibility here would be to replace private keys and passphrases in the history with /*SECRET OMITTED*/ or hashmarks or whatever.
1767	8312068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8312068	Diapolo	I really had no privacy concern at first when opening this, I was just annoyed that the Up-/Down-Key history could not be deleted ^^. Im not sure about your idea, it is for sure some work and I also would like to be able to still do copy and paste (when not using the clear button).
1767	8384765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384765	laanwj	good idea, I guess this could be best done with a list of commands and parameter positions that contain secrets that should be "censored". Secrets nested deep in JSON data structures are too much bother IMO.
1767	8386575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8386575	Diapolo	Im not sure if I understand that discussion in the light of my small pull ;). When giving bitcoind commands they appear in the shell history, too, no?
1767	8386699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8386699	laanwj	*Im not sure if I understand that discussion in the light of my small pull* Itd be even better if the user would not have to think about manually clearing the history after handling secrets. That doesnt exclude being able to manually clear it, of course. *When giving bitcoind commands they appear in the shell history, too, no?* Yes, but how is that an argument for being just as insecure?
1767	8449276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8449276	Diapolo	If this one is of no interest just close it. But perhaps we can merge it for RC3 otherwise?
1767	8449510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8449510	laanwj	Im fine with merging this but it will be after 0.7.0 final.
1767	9367270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9367270	Diapolo	Can you still merge this for 0.7.1?
1767	10434832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434832	jgarzik	ping
1764	8183155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183155	jgarzik	Code change looks OK to my 1am brain. Commit description seems lame. I would say something like: "Using a byte-for-byte comparison excludes valid nHeight encodings. Replace with standard script method for decoding integer values on the script stack."
1764	8183176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183176	luke-jr	Comment updated, also fixed a bug in the error message
1764	8183200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183200	jgarzik	ACK... assuming it tests OK
1764	8190386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8190386	gavinandresen	NACK. The format should be strict/canonical. Changing the BIP to make that clear is the right fix, in my humble opinion.
1764	8193218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8193218	luke-jr	Encoding 24-bit heights instead of 32-bit isnt exactly cheap everywhere. :(
1764	8195023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8195023	jgarzik	&lt;shrug&gt; Satoshi created CastToBigNum() precisely for reasons like this...
1764	8198420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8198420	TheBlueMatt	I was under the impression we were gearing up to put a lot of effort into forcing scripts to be canonical, I dont see why we would not do that here, too.
1764	8198785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8198785	gmaxwell	Right. This should be forced to be canonical and the BIP should be fixed to make it clear that its specifying that. (Gavin pointed out that it already does; but it only does so in a fairly vague manner). Im glad that Luke caught the lack of clarity though.
1764	8198819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8198819	jgarzik	Well-formed scripts in the coinbase means it is parseable -- which is not the issue here in this thread. These scripts are parseable in both luke-jrs and gavins cases. BigNums may have multiple encodings, which is perfectly normal and accepted and supported in script for script stack values. Thus, universal use of CastToBool and CastToBigNum before calculating with a stack value. Not-well-formed coinbase scripts are ones which include invalid opcodes and other garbage. Well-formed coinbase scripts may have OP_PUSHDATA<garbage> but not simply <garbage>. Thats not at issue here.
1764	8203051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8203051	luke-jr	I ask that everyone reconsider their position based on a new reason: Bitcoin script number format is rather complicated, and could easily be vulnerable to subtle implementation bugs. My attempt to explain the format in the shortest possible terms: - Zero is special-cased to serialize to 00 regardless of everything else herein. - All numbers with a multiple of 8 bits are padded with an extra 8 bits to give them a sign bit, even if the number is unsigned; numbers with non-multiples-of-8 bits are simply padded to a multiple of 8. - If a number is signed, the absolute MSB (ie, including padding bits) is set. And hopefully I didnt miss anything in that rather complicated explanation of the number format. :(
1764	8203127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8203127	gmaxwell	that is a major reason to impose a strict canonicality requirement. If there is only one way to encode/decode each value then it is relatively simple and reliable to write tests cases that that show two implementations agree. If there are multiple ways then an attacker can exploit them to create network splits if there are subtle bugs in some implementation.
1764	8203288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8203288	luke-jr	Guess I didnt look at it from that perspective :) Fair enough, closing this.
1764	8203353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8203353	TheBlueMatt	Just to correct it if anyone else reads this thread and implements based on it: zero is not special-cased to 00, its a zero-length vector. See: the script test-cases which include a number of specific number tests.
1764	8203423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8203423	luke-jr	Right, by 00 I meant as a serialized script; ie, OP_0
1762	8178133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178133	luke-jr	NACK, shouldnt endorse any specific service like this, and theres no reason we couldnt display the details in the client itself.
1762	8178784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8178784	gmaxwell	Also, NAK, but I wanted to also thank for taking the time to actually implement something and write a pull request, even if this particular change isnt one we want. Generally prefer to keep functionality internal rather than direct people to centralized services, and we already have a pretty good transaction detail decoder in Bitcoin (e.g. open the console and run getrawtransaction).
1762	8181072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8181072	laanwj	Its a bit ironic, as we have all the information on every client. We could display it much faster and more secure locally, shouldnt need to link to a service such as block explorer. But thanks for actually implementing a solution instead of complaining!
1762	8182100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8182100	clopez	I see. I also think is better to keep the functionality internal. It would be awesome if someone writes a nice GUI to show the info that btcexplorer.com or blockchain.info actually shows. I am closing this pull request. Thanks for the comments.
1761	8180688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8180688	laanwj	Change is OK, Ideally, we should put the default values outside the translation message, so that we can change those without triggering retranslation.
1761	8183057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183057	Diapolo	I would like us to do your suggestion for the >0.7 release, as it makes senes, but would be bad translation wise in the current phase. That one is just a quick fix, while I was browsing that part of the code :). Edit: As we found out the idea to separate the default values from the translations takes to much time, this is now just a small fix.
1760	8181285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8181285	laanwj	Good idea, some comments though if were going to add this: - We should loop over *all* configured proxies (IPV4, IPV6 and .onion) and try to connect to them - *It should still set the proxy even though it doesnt manage to connect to it*. Keep it at a warning, assume the user knows what theyre doing. It can be an enormous security breach to connect directly outside the proxy. - Also remember that proxies can suffer from intermittent failures. One failed connection attempt doesnt tell that much. But a pop-up / warning in log is nice. - Should this be in the init() or in the network thread, or even in its own thread? After all, Im dont think that a slow proxy should hold up the startup process - Talking of slow proxies: is there a timeout? Or will specifying a non-existent host hold up the initialization forever?
1760	8183206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183206	Diapolo	Thanks for your feedback. - You are right, we should test every supplied proxy, but tell me how would I pass (command-line wise) more than 1 proxy as in current init code there is no loop for more than 1 proxy. - Yes it should leave the option active and just warn the user, to dont breach privacy, Ill change that. I see the current implementation just as a startup check, which could be extended to a proactive meassurement thread or sth. - As to init(), network or own thread I have no final belief, where this is suited best ... - There currently is just a 1sec timeout and if that passed the warning is shown.
1760	8186944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8186944	Diapolo	Updated to not disable the proxy, even if it is not reachable, which could be a temporary problem and to not leak information a user does not want to get leaked :). Im still asking myself, how I could supply a normal IPv4 proxy and one for IPv6 peers via -proxy? Take a look at init.cpp there is no loop so as far as I can tell we can only supply a single proxy via -proxy currently, which is used for IPv4 and IPv6 (if support is enabled).
1760	8189188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8189188	sipa	A separate proxy server for IPv6 was never implemented :)
1760	8207266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8207266	Diapolo	Not yet, but as you know #1769 just does that. Are you fine with the ``ConnectionTest()`` function?
1760	8208133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8208133	gmaxwell	Is there a need to explicitly test? Why not just observe where the failure happens when an outgoing connection happens? (e.g. did we fail connecting to the proxy, or did it return an error?). Also, simply opening up a tcp connection to the proxy isnt enough to know that its actually working. E.g. if you have a webserver on 80 and a proxy on 8080 and I erroneously specify 80 then itll connect but not actually work.
1760	8211234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8211234	Diapolo	Currently, when using or supplying a non working proxy, the client simply does not connect and tells the user nothing about it (which is worst case IMO). This one at least checks if a connection to the supplied IP:port combination can be made on startup. You are right the connection is not used as proxy connection currently, but I guess ``ConnectionTest()`` can be extended. I did not intend it as watchdog, but just to fix #763. I like your idea though and suggested something similar.
1760	8211281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8211281	laanwj	I like test-as-we-go approach. When the proxy is used, and it fails to connect to the proxy, show and log a warning (only once!). For this to work youd need to isolate cannot-connect-to-proxy problems from the-proxy-cannot-connect-to-target errors.
1760	8214082	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8214082	Diapolo	Ill close this for now and perhaps re-open in the future, when a better approach is ready :).
1758	8172803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8172803	gmaxwell	ACK. Works great for me. (tried a number of raw transactions on testnet with it)
1758	8174892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8174892	Diapolo	Ill take a look at this tomorrow and see if the Windows weirdness is solved by this.
1758	8183753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8183753	Diapolo	2 suggestions: 1. I would like to see a general comment in the code, which explains what is covered by parseCommandLine(). 2. I tried the code with the example from the issue thread. Works: ``addmultisigaddress 2 ["02404c0b780b0d3f70a57bccb0cac31c77e980d899db00f04a61052cf6500bde23","02092eb733ce9027fcddb9917e841057c747318ff973de7a7768da9b3f039d6892"]`` Fails: ``addmultisigaddress 2 [\"02404c0b780b0d3f70a57bccb0cac31c77e980d899db00f04a61052cf6500bde23\",\"02092eb733ce9027fcddb9917e841057c747318ff973de7a7768da9b3f039d6892\"]`` The problem I see here is the RPC error message, which says: ``Error: Error parsing JSON:[\"02404c0b780b0d3f70a57bccb0cac31c77e980d899db00f04a61052cf6500bde23\",\"02092eb733ce9027fcddb9917e841057c747318ff973de7a7768da9b3f039d6892\"]`` So when using an input exactly like shown in the error message the command should not fail or perhaps it would be better to update the RPC commands help and error messages. But I love the approach to dont need to escape on Windows :).
1758	8184121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8184121	laanwj	That is as expected. You must not escape within " and within ". The reason for having two types of quotes in the first place is that you can avoid escaping. Shells have the same behavior. Try in bash echo "\". It will print literally \. If there is a help message that makes you do differently thats a separate issue. Which help message is wrong? Btw this still has nothing to do with windows. All the code involved is platform independent.
1758	8184310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8184310	Diapolo	I was not quite sure, if the code was platform independent, that is why I mentioned Windows. Just enter ``addmultisigaddress`` for example and take a look at the message. It clearly mentions ``<[\"key\",\"key\"]>``, which makes users think they need to specify ``\"`` instead of just ``"`` (which works after your patch).
1758	8191017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8191017	gavinandresen	ACK. Help should be fixed (and we need a new syntax for specifying optional arguments), but thats a separate issue.
1758	8196136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8196136	laanwj	Help (as in the help X command) was already working. It seems that what was seeing is that error messages are dumped as raw JSON object, instead of formatted (and that you get help for free as error if you issue an command without the needed # of arguments). Ive added basic formatting for errors. Ive also added a doxygen comment to explain what `parseCommand` does.
1758	8196232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8196232	gmaxwell	ACK. Perhaps we should do the error formating for bitcoind output too?
1758	8210265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8210265	laanwj	Indeed, the error reporting there ( ) could be changed in the same way, to prevent similar confusion.
1757	8168704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8168704	laanwj	DelAddressBookName is used from the UI
1757	8170565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8170565	jgarzik	ok
1757	8171628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8171628	laanwj	EraseName isnt though...
1757	8171878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8171878	jgarzik	DelAddressBookName calls EraseName. One is required for the other.
1757	8172119	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8172119	laanwj	Oops, right, I see.
1757	8180352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8180352	laanwj	BTW this reminds me of issue #1213 -- RPC offers no way to fully delete a label / account.
1755	8149781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8149781	laanwj	Is this only for the bitcoind build? Or also bitcoin-qt? Because it includes libqrencode et al which are only used by the GUI. In that case you also need to add `qt4-qmake libqt4-dev`
1755	8150362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8150362	osmosis79	thats a good point. Yes, strangely bitcoind does require libqrencode...unless the disable flag is specified. I havent built bitcoin-qt.
1755	8150431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8150431	laanwj	You must be wrong. I cannot find any mention of even the word qr in `makefile.unix`.
1755	8150433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8150433	osmosis79	scratch that... I meant libminiupnpc-dev. No, libqrencode is not required. Ill go ahead and add the qt libs to the list.
1755	8150581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8150581	osmosis79	ok, removed libqrencode from build-unix.txt, and left other qt libs out. QR instructions are inreadme-qt.rst
1755	8159863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8159863	gmaxwell	Hm. Is it wise to add instructions that will have people building binaries which will write wallets the project builds cant read?
1755	8160335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8160335	laanwj	Afaik there is no other way on ubuntu 12.04. It doesnt have the 4.8 bdb / dbcxx package anymore. Edit: well, it still has libdb4.8-dev, but not libdb4.8++-dev
1755	8176169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8176169	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1755	8176628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8176628	osmosis79	I agree, there is no other supported way to build on ubuntu 12.04. For wallets the project builds cant read, do we fail sanely?
1755	8384747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8384747	laanwj	This change seems to be accepted apart from the dbc++ version change. If you remove that change for now (and squash into one commit), we can at least merge this.
1755	8451189	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8451189	osmosis79	added info for PPA and db compatibility. squashed changes to single commit. should be good to go.
1755	8468518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8468518	TheBlueMatt	ACK
1755	8481326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8481326	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1752	8119783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8119783	laanwj	Looks fine. Lets wait for the pulltester to see whether the linker args are really passed.
1752	8137618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8137618	laanwj	This will not work yet: LDFLAGS is not passed when linking. You need to add $(LDFLAGS) to the lines that build bitcoind.exe and test_bitcoin.exe, i.e. in makefile.mingw-linux these are i586-mingw32msvc-g++ $(CFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) and i586-mingw32msvc-g++ $(CFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework-mt-s $(LIBS)
1752	8139958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8139958	Diapolo	Can you verify tha I did what you suggested ;)?
1752	8149791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8149791	laanwj	Yes, looks OK now.
1751	8116236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8116236	jgarzik	ACK
1749	8115606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8115606	laanwj	What are the advantages and disadvantages of this? Im ok with the changes although I dont like "include three cpps in one cpp", as it adds an almost-empty cpp in src/. Id like it somewhat better if you moved the resulting jsonrpc.cpp to src/json instead. Also, I might misunderstand what youre trying to do but you should probably remove the individual files (`src/json/json_spirit_*.cpp`) from the build systems otherwise youll link them twice?
1749	8115728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8115728	jgarzik	This eliminates duplicating the templates in each *rpc*.o file. src/json/json_spirit_*.cpp are never built or linked.
1749	8115768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8115768	laanwj	OK I guess that will save some compilation time. I still dont like the almost-empty cpp though. They are linked individually in bitcoin-qt.pro... probably, that is a the mistake then.
1749	8115783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8115783	jgarzik	Sadly, bitcoinrpc.cpps requirement of templates kills this optimization. We can see that it makes a positive impact on compiled code size in several cases: ``` [jgarzik@localhost src]$ ls -l obj.vanilla/*rpc*.o -rw-rw-r-- 1 jgarzik jgarzik 9235016 Aug 29 00:52 obj.vanilla/bitcoinrpc.o -rw-rw-r-- 1 jgarzik jgarzik 2193688 Aug 29 00:53 obj.vanilla/rpcblockchain.o -rw-rw-r-- 1 jgarzik jgarzik 2427808 Aug 29 00:52 obj.vanilla/rpcdump.o -rw-rw-r-- 1 jgarzik jgarzik 3848484 Aug 29 00:53 obj.vanilla/rpcmining.o -rw-rw-r-- 1 jgarzik jgarzik 1433740 Aug 29 00:52 obj.vanilla/rpcnet.o -rw-rw-r-- 1 jgarzik jgarzik 4616688 Aug 29 00:54 obj.vanilla/rpcrawtransaction.o -rw-rw-r-- 1 jgarzik jgarzik 5919696 Aug 29 00:53 obj.vanilla/rpcwallet.o [jgarzik@localhost src]$ ls -l obj/*rpc*.o -rw-rw-r-- 1 jgarzik jgarzik 9235044 Aug 29 01:21 obj/bitcoinrpc.o -rw-rw-r-- 1 jgarzik jgarzik 2157036 Aug 29 01:22 obj/rpcblockchain.o -rw-rw-r-- 1 jgarzik jgarzik 2377376 Aug 29 01:21 obj/rpcdump.o -rw-rw-r-- 1 jgarzik jgarzik 3809184 Aug 29 01:21 obj/rpcmining.o -rw-rw-r-- 1 jgarzik jgarzik 1445256 Aug 29 01:21 obj/rpcnet.o -rw-rw-r-- 1 jgarzik jgarzik 4627340 Aug 29 01:23 obj/rpcrawtransaction.o -rw-rw-r-- 1 jgarzik jgarzik 5849288 Aug 29 01:22 obj/rpcwallet.o ``` However, due to bitcoinrpc.cpps templates requirement, and other caveats (SEE BELOW), the final size is worse: ``` [jgarzik@localhost src]$ size obj.vanilla/bitcoind obj/bitcoind text data bss dec hex filename 2688992 5368 7464 2701824 293a00 obj.vanilla/bitcoind 3987711 5508 8232 4001451 3d0eab obj/bitcoind [jgarzik@localhost src]$ ls -l obj.vanilla/bitcoind obj/bitcoind -rwxrwxr-x 1 jgarzik jgarzik 58337880 Aug 29 01:27 obj/bitcoind -rwxrwxr-x 1 jgarzik jgarzik 36560716 Aug 29 00:56 obj.vanilla/bitcoind ``` If we can eliminate the template usage from bitcoinrpc.cpp, then this solution becomes viable. Caveats: a) My i386 laptop does not work with -flto, which should dramatically improve the situation (but still the code is duplicated, due to bitcoinrpc.cpps use of templates) b) libjson.o would be better constructed as a library archive (libjson.a). However, as we use all the modules, this would probably not result in code savings.
1748	8111953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8111953	gmaxwell	I was troubleshooting the totally wrong end of this... You owe me a wig or something to replace all this lost hair. ;) ACK. And I think this will justify a new RC spin. This needs to go in 0.7.0.
1745	8109423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8109423	sipa	I completely forgot about the case where youd want IRC to find peers, instead of just advertizing yourself... ACK
1745	8109523	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8109523	jgarzik	ACK technical changes. ... but the comment style is wildly inconsistent.
1745	8113352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8113352	gmaxwell	De-psychoed comments, added an additional small fix.
1744	8136394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8136394	laanwj	ACK for 0.8
1744	8268457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268457	jgarzik	Why not ACK for 0.7?
1744	8269576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269576	laanwj	Because its a huge change between two rcs.
1744	8269732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269732	jgarzik	Seems like a two-one-liners change to me, which will eliminate the rebroadcast problem. Zero-change refactors during -rc do not seem like a big deal.
1744	8270019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8270019	gmaxwell	Id somewhat prefer to pull this in 0.7; but being that its an alert Im not able to test beyond just starting up a node with it. ACK in any case.
1744	8270709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8270709	gavinandresen	Ill send the testnet alert key to all the core devs. And will go with consensus on pulling / not pulling for 0.7rc2.
1744	8270829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8270829	laanwj	Ok I hadnt done a line-by-line comparison yet. If its just code movement, apart from the added key, its fine for me to merge it into rc2.
1744	8286836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8286836	jgarzik	ACK for 0.7, here
1744	8303247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8303247	Diapolo	Seems like a good thing for 0.7 IMO.
1744	8316430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8316430	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1743	8145447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8145447	sipa	ACK
1743	8240139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8240139	Diapolo	IMO such small fixes / patches, should get merged faster, even during RC-phase.
1742	8102942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8102942	gmaxwell	I reviewed the IsCanonicalSignature code with Pieter before he posted the pull request, so ACK on that much. Generally, with test cases we should be striving for tests that hit every path through the code where its reasonably possible to do so. For IsCanonicalSignature this would just require adding must-pass/must-fail cases right along the boundaries of each of the tests. See line 260 of this coverage analysis Testing this way has a two fold benefit: It makes it much more likely that future changes to the code which introduce errors are spotted, and the missing areas in the coverage report become indications of possible bugs. I believe you already have tests for each of the cases, but otherwise Ill make some if you dont.
1742	8103968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8103968	sipa	As a general comment about why not using the OpenSSL-based IsCanonical that is present in test/canonical_tests.cpp, I prefer to have a very clear set of rules to assess canonicality (is that a word?) with, as that is easier to port to other clients. One thing I havent tested yet, but we probably should: what if R or S is >= the field size? If OpenSSL allows that, we should make sure that its non-canonical. EDIT: no need, OpenSSL does bounds checks on R and S.
1742	8105324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8105324	Diapolo	Can (in short term) one of you explain to me, what the term canonical means in that context here?
1742	8105762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8105762	sipa	Bitcoin uses OpenSSL to encode public keys and signature. For public keys, one of encodings defined in the SEC specification is used, for signatures, DER encoding is used. The problem is that in both cases, OpenSSL supports several encodings for the same data. In particular, for public keys it supports the (standard) uncompressed (0x04 as first byte) and compressed (0x02 or 0x03 as first byte) encodings, but also the (non-standard) hybrid formats (0x06 or 0x07 as first byte). For signatures, it accepts every BER encoded value (of which DER is a subset), and even some exceptions that are not permitted by BER. There are some potential vulnerabilities with these, as people can change part of a transaction without invalidating it. Currently there are some high-profile sites which still create non-standard signatures, so the checks arent enforced yet.
1742	8106026	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8106026	gmaxwell	Imagine you were to send a number in the range -127 to 127 inclusive to someone using bits. You decide to send one bit to indicate positive or negative, then 7 more bits to signal 0-127. In this encoding there are two ways to send zero: +0 and -0. This can create problems if some series of calculations could result in +0 and some series of calculations could result in -0 and then you compare them naively. You can avoid this confusion by declaring +0 as canonical and either converting -0 to +0 whenever it shows up or catching it and treating it as an error. In Bitcoin we use OpenSSL to parse our signatures. A signature consists of a set of flags and some big numbers packed together. The signatures are supposed to be DER encoded, but OpenSSL supports BER (a superset of DER) and even parses some crazy invalid values as meaningful, like some negative values being treated as positive and you can even create valid signatures this way by depending on the details of OpenSSLs behavior behavior that wont hold true with other implementations or perhaps not in the future. In particular, for Bitcoin the validity of non-canonical signatures is problematic because tx ids are hashes over the whole transaction, including the signature. I can stick garbage at the end of your transactions signature resulting in a still valid transaction but with a different txid which your software may or may not recognize as being the same transaction.
1742	8106520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8106520	Diapolo	Thanks for both explanations, very informative! So this is a new enforced key / signature checking policy in the end ... would that require a new BIP?
1742	8106606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8106606	sipa	The plan is to initially just enable it for mempool transactions, which is technically not yet a protocol change. If wed ever enable it (after some point) for blockchain transactions, it would mean a protocol change, and certainly need a BIP.
1742	8106688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8106688	gmaxwell	At least for the near term future wed only enforce this as IsStandard() so unmodified clients wouldnt mine or relay them. Miners could, if they modify their code, still insert transactions which are not in the canonical form. If we wanted to add a new rule to Bitcoin it would need to be a BIP. It might get swept up with another change. For example, if wed done this with IsStandard some months ago, it could have been made a part of the HeightInCoinbase change. New rule events are dangerous: they crease increased risk of forks, so its good to minimize them. They also cant be undone without breaking clients, so they must be done fairly conservatively.
1742	8114134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8114134	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1742	8145470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8145470	sipa	Added more test cases. All reasons for non-canonicality should occur now.
1742	8321775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8321775	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1742	8749180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8749180	sipa	Rebased, and updated test cases. 100% coverage in the signature tests now.
1742	8755293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8755293	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1742	8765041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8765041	laanwj	I prefer to have a very clear set of rules to assess canonicality (is that a word?) with, as that is easier to port to other clients. 100% agree. It should be fully possible to write (or specify) a bitcoin client without relying on OpenSSL.
1742	8767638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8767638	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1742	8978659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978659	sipa	Can I get some ACKs on this? This pull request has no semantic effect, it just brings a test function into scope. I suppose the question is whether the code here reflects the actual standard for public keys and signatures we want. The test case does have a function to verify consistency with OpenSSL, and has 100% coverage (for signatures), though.
1742	8981552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8981552	jgarzik	As-good-as-youre-gonna-get ACK :) I cannot claim that I understand the problem enough to verify the correctness of IsCanonical{pubkey,signature}... however assuming they are correct, the rest of the code appears correct. As the earlier discussion indicated, this should not be applied strictly for blocks -- and indeed it is not.
1742	9633016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9633016	gmaxwell	This needs checks for flipped values. (Still ACK, though)
1742	9633166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9633166	sipa	I think we need code that enforces creation of strictly-even-s-value-signatures, and have some discussion with authors of other clients before we can even think about code to test for that...
1742	9634007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9634007	gavinandresen	ACK
1740	8100363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8100363	jgarzik	past tense is more accurate
1738	8098448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8098448	jgarzik	Good stuff. One nit: if we are touching this code, rename our CreateThread() to something not found in Windows or Linux standard libraries.
1738	8098535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8098535	laanwj	Yes, good point. Any suggestions? StartThread? SpawnThread?
1738	8098739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8098739	Diapolo	You are my hero :-D, what about just ``NewThread()``? Well your ideas are also fine and Im pro rename.
1738	8099615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8099615	jgarzik	Ill let others choose the color of the bike shed ;p Just want to avoid clashing with existing symbols. It certainly caused confusion in the past.
1738	8120691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8120691	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1738	8121093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8121093	Diapolo	I tried that patch with my local build, no compilation problems and the resulting exe starts just fine.
1738	8135920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8135920	laanwj	Rebased and renamed the function to NewThread
1738	8135980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8135980	jgarzik	ACK
1738	8145777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8145777	sipa	ACK
1736	8092588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8092588	jgarzik	Please separate into two separate commits. We do not put different logical changes (grammar changes + onlynet docs) in the same commit. In this case, your grammar changes are NAKd and your other changes are ACKd.
1736	8093287	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8093287	sipa	Please dont add I2P to the documentation. There is only support for it at the level of parsing them, and mapping the garlicat IPv6 range to it. For all other purposes, it is not functional. Furthermore, Ive recently learned that this way of implementation is not viable at all, as I2P needs longer addresses to be globally routable. The correct solution is removing it entirely from the source, and later re-add it correctly, Im afraid. That will be for after 0.7, though.
1736	8098886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8098886	Diapolo	Any reson to not remove a (currently) non working feature during RC-phase? Less code should contain less bugs ^^.
1736	8100349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8100349	jgarzik	closing, superceded
1735	8090850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8090850	freewil	LGTM but you should rebase so there isnt 5 commits
1735	8100893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8100893	gmaxwell	Indeed, this doesnt need three commits and two merges. Does this actually result in different code? The loops have no real side effects, I dont know how terribly the boost foreach is, but its not inconceivable to me that the compiler could already do this with these loops because theyre simple single assignment.
1735	8131685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8131685	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1735	8134497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8134497	laanwj	Would be ok with me if rebased into one commit
1735	8134916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8134916	gavinandresen	I dont like these kind of obsessive-compulsive source code changes, I think theyre a waste of time. If youre rewriting old code for some reason, then feel free to clean it up. Otherwise I think it is better left alone.
1735	8135138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8135138	jgarzik	Agree that it does smell like premature optimization, with zero proof of actual need or benefit
1735	8136431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8136431	xanatos	The objective isnt only a (probably null) optimization. I see it as "lets make it clear what is the meaning of the code". Is it "looking for at least one element with a condition" or is it "using an hidden side-effect of enumerating the collection/checking the condition"? The first time I watched the code I asked myself: why isnt it breaking if it is only looking for a single value? For the rebase... Im a noob of git... This evening Ill try to do it.
1735	8138309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8138309	xanatos	Rebased (I hope... In the end after fighting with the rebase -interactive I installed the TortoiseHg and, after fighting against its rebase I used the reset command)
1735	8268372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268372	jgarzik	Its still adding source code and binary code size without much benefit. We definitely appreciate people reading the source codebase this closely, though! It is this kind of attention to detail that benefits all bitcoin users.
1732	8144395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8144395	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1731	8149114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8149114	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1730	8064937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8064937	gavinandresen	ACK
1730	8065132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8065132	laanwj	ACK
1730	8068240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8068240	Diapolo	AFAIK we now need Chrono as lib starting with Boost 1.50, no?
1730	8068273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8068273	luke-jr	Yep, were dealing with the fallout from that missing on IRC now ;)
1730	8072379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8072379	Diapolo	As that is sorted out and already merged you can close this.
1729	8060138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8060138	jgarzik	ACK
1729	8060366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8060366	laanwj	ACK
1728	8054024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8054024	sipa	ACK.
1728	8136455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8136455	laanwj	ACK
1728	8152680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8152680	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1728	8240166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8240166	Diapolo	Same here, this fix should be RC-mergable?
1726	8035554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8035554	luke-jr	Should bump the version number too (eg, qt-win32-4.7.4-gitian.zip => qt-win32-4.7.4-gitian-r1.zip).
1726	8035664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8035664	laanwj	Done
1726	8035798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8035798	Diapolo	Nice small find :).
1726	8046451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8046451	laanwj	Are you sure? `-no-style-XXX` didnt work here, even causes an option parse error in configure, though it is mentioned in the online documentation: . `no-style-XXX` options are no longer mentioned in the configure documentation (configure --help) and the configure bash script that is used on unix-like systems. `-no-feature-style-XXX`, however works... both in Qt 4.7.4 and Qt 4.8.1, in cross-compile. This may be a difference with configure.exe that youre using to configure on Windows. Edit: now Im sure of this: `-no-dsp` and `no-vcproj` dont even exist in `configure`. The `-opengl no` seems to work, as Qt OpenGL is not built.
1726	8047544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8047544	Diapolo	Can for sure be a difference between configure and configure.exe and if it works everything is fine :). But at least the -no-opengl seems correct, when you use configure --help you should be able to verify that.
1726	8057581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8057581	laanwj	Yep, Ive verified, -no-opengl seems to be interchangable with -opengl no.
1726	8057739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8057739	Diapolo	Good to know :).
1726	8157780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8157780	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1726	8303243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8303243	gavinandresen	ACK. Should we pull this for 0.7rc2 ?
1726	8303856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8303856	Diapolo	The pull makes sense and I also used the switches in my own builds and they work (and do not harm bitcoin-qt.exe for me), so Ill vote ACK for 0.7rc2.
1726	8307577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8307577	laanwj	I think its safe to pull this for rc2. Though it means we all have to rebuild qt for the next release.
1726	8307674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8307674	gavinandresen	missed it by THAT MUCH ||
1723	8005275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8005275	Diapolo	Roger that ... currently building. Edit: No change in Win7, which is what you wanted!
1723	8020858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8020858	laanwj	Yep windows 7 should use the Vista rendering engine, which does not have the above-mentioned problem. Thanks for testing!
1723	8021028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8021028	laanwj	can you test that this also solves the problem in xubuntu?
1723	8022195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8022195	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1723	8022493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8022493	sipa	It looks fine here now, thanks.
1720	7999055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7999055	laanwj	ACK for 0.7.0rc2 (no more message changes for rc1)
1720	8023867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8023867	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1720	8117767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8117767	Diapolo	Can we get this in for RC2?
1720	8119732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8119732	laanwj	Yes
1718	7998373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7998373	sipa	Just verified: this does not make spending 0-outputs non-standard, as it should be IMHO.
1718	7999641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7999641	gmaxwell	ACK.
1718	8004494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8004494	jgarzik	ACK
1718	8007019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8007019	gavinandresen	ACK
1718	8013907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8013907	TheBlueMatt	ACK
1718	8014166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014166	mikehearn	There are contract protocols that use zero value outputs. Of course they can also be of 1 satoshi in value. I dont think the difference of 1 satoshi affects how likely they are to be reclaimed nor the real-world scalability of Bitcoin given the tiny values involved. Its sort of an academic argument, the apps would get implemented even if zero-value outputs are awkward to use. My problem with the reasoning in issue 1711 is that whilst you start with 1 satoshi being the minimum, you could use the same arguments to justify raising the minimum to 0.01 BTC or some other arbitrary value. It just doesnt seem very elegant to require a minimal sum on the output when that output is used for something other than re-allocating value. See here for what Im talking about:
1718	8014330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014330	luke-jr	ACK, though s point deserves some consideration.
1718	8014341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014341	mikehearn	That said, Im not against this change. I have no opinion one way or the other. Making these outputs non-standard might lead to weird hacks in future applications, but we can always make these outputs standard again once real apps have been implemented and the utility is proven. As Gavin already signed off on it, no problem.
1718	8014381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014381	sipa	Im certainly not going to argue for making 0-value amounts illegal, the protocol allows them, and I suspect for a reason. IsStandard() rules are still relatively simple to change, its ultimately not more than a proposed/default policy for miners.
1718	8014456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014456	gmaxwell	Well the reasoning on 1711 doesnt slippery slope like that; or at least I didnt intend it to. Let me retry: The number of txouts in the txset with 1e-8 minimum txout is 2100000000000000 outputs, or about 51 bits of index. Without a limit the maximum is infinite. Perhaps its a bit academic, but it makes it possible to write design which can be shown to always work (absent a hardfork that changes things around). (Also, arguably, bitcoin nodes dont have an incentive to actually validate against double-spend 0 value transactions because they dont risk inflation) With a value of zero, redeeming it gains you absolutely nothing (at least in the context of the system) redeeming it if its 1e-8 gets you something and is always rational to do so when you can do it for free (e.g. when there is space left over before the next increment). E.g. I can reasonably say that a feature that autosweeps 1e-8 dust when making transactions is clearly in the users direct best interest. I cant say that for 0. Thanks for the smart property example, getting that example was why I prodded you for your input. I dont think it changes my view at least in terms of non-standardness; though perhaps it will ultimately be a reason to not make them invalid.
1718	8014504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014504	mikehearn	Alright then, fair enough. ACK.
1718	8026081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8026081	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1717	7997808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7997808	laanwj	Hopefully people wont start crying that their transaction disappeared and such when their branch is orphaned...
1717	7997927	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7997927	Diapolo	IMHO we cant protect people from everything and should not special case too much (and that I learned from you ^^).
1717	8021358	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8021358	laanwj	Yes, I was just playing devils advocate. We dont have the immature balance for nothing, it means that the mined transaction is not yet set in stone. ACK
1717	8028325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8028325	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1716	7993551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7993551	Diapolo	IMHO it would be nice to only need the monkey-patch code in one place.
1716	8000776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8000776	laanwj	And if you move all message queue related code to qtipcserver.cpp, this workaround could be limited to one file, whichd be nice.
1716	8008411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8008411	luke-jr	Hows that?
1716	8013895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8013895	TheBlueMatt	Id highly prefer we just simply upgrade to boost 1.50 or later instead of continuing to use this patch.
1716	8014263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014263	luke-jr	No reason the Gitian build cant be updated to use 1.50 too, but it sounds non-trivial, and I think wants to do 0.7rc1 today.
1716	8020881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8020881	laanwj	I do like the de-duplication of code, even if were going to remove the workaround. Also, note that at least boost 1.51 has a new issue (#1719) which surfaces in Wine but may possibly trigger in other cases when NtQuerySemaphore fails. Be careful.
1716	8029574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8029574	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1716	8044806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8044806	sipa	Can this be merged, or are there still issues? Id be nice to do Windows gitian builds again...
1716	8044960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8044960	TheBlueMatt	ACK all except "Bugfix: Move boost::interprocess Win32 workaround to Bitcoin-Qt sourc ", Id really rather just switch to boost 1.50, I havent heard anything about bugs as a result, plus we havent started rc yet...
1716	8044982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8044982	luke-jr	Adjusted for comment. Whether we switch to boost 1.50 or not is another issue IMO, and the 1.49 build should still be fixed either way...
1716	8045745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8045745	laanwj	I think this should be merged nevertheless. If anything, it is harmless when 1.50+ is used because of the version check. Edit: btw now that youre changing the boost build, - can you add `runtime-link=static` to build only the mt-s variant that we use, instead of mt-s and mt? this just saves some compilation time. - also we need a `<ranlib>i686-w64-mingw32-ranlib` in user-config.jam so that the manual `ar xf`s (in both boost-win32.xml and gitian-win32.xml) can be skipped.
1716	8046075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8046075	TheBlueMatt	My point isnt that this shouldnt be merged (it should), but that Id rather see 1.50 in 0.7 than use any of these patches or odd headers in 0.7, ie dont merge this and do 0.7rc1 right away.
1716	8046185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8046185	laanwj	BTW I just verified: boost 1.50 does **not** suffer from #1719.
1716	8047323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8047323	Diapolo	I have to admit, I really like the idea of directly switching to Boost 1.50 and use that. Did you yet report that Boost 1.51 bug to the Boost devs? Would be nice to notify them. Just for comparison, my Boost command-line to build contains ``--build-type=minimal stage link=static runtime-link=static threading=multi variant=release -a -j 4 --with-filesystem --with-program_options --with-system --with-thread``
1716	8060398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8060398	gavinandresen	Compiling on the mac, I get warning: src/qt/qtipcserver.cpp:29: warning: void ipcThread2(void*) declared static but never defined
1716	8061694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8061694	Diapolo	Well ``ipcThread2()`` is currently unused on Mac, perhaps we should put the declaration into an else-branch here:
1710	7971314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7971314	gmaxwell	I dont disagree with doing this, but we should keep in mind that a slightly unfortunate result of this is that an attacker could network isolate old pre-bip16 nodes by constantly flooding invalid transactions. If there are any pre-bip16 miners remaining, the attacker will be able to force the creation of a forked network.
1710	7975698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975698	sipa	I was about to say: if there are any non-BIP16 miners left, I pity them. However, says 37% doesnt include the marker string?
1710	7975760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975760	gmaxwell	doesnt suggest that its anywhere near that many miners. I think those are mostly just ones not including it. Its probably only a very small amount without it.
1710	7977868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7977868	luke-jr	[19% dont enforce BIP16](http://luke.dashjr.org/programs/bitcoin/files/charts/security.html?16)
1710	7978009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978009	gmaxwell	Probably should defer to 0.8.
1710	7978087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978087	sipa	Agree, in that case.
1710	7989702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7989702	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1710	8402014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8402014	Diapolo	I saw another P2SH code part which could perhaps be removed, just want to mention, its in init.cpp: <pre> // Continue to put "/P2SH/" in the coinbase to monitor // BIP16 support. // This can be removed eventually... const char* pszP2SH = "/P2SH/"; COINBASE_FLAGS << std::vector<unsigned char>(pszP2SH, pszP2SH+strlen(pszP2SH)); </pre>
1710	8868801	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8868801	gavinandresen	ACK
1710	8868883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8868883	jgarzik	ACK
1710	9210237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210237	sipa	ACK for 0.7.1 or 0.8?
1710	9210991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9210991	gmaxwell	Lukes version tracker (http://luke.dashjr.org/programs/bitcoin/files/charts/BIP-0016.html) says 13.4% are non-P2SH. Thats now comparable to non-BIP30 (13%) so its probably not going to get much better count-wise by waiting.
1710	9853034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9853034	sipa	Rebased.
1710	9857574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9857574	Diapolo	As the discussion is over I would suggest to merge such a code-wise small pull. We have quite some pulls open so lets reduce their numbers, if they are non-controversial?
1708	7967726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7967726	gmaxwell	Have you tested bitcoin with more than 2^31 keys in the keypool?
1708	7975542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975542	gavinandresen	NACK. Better would be (pseudocode): int64 nUnchecked = max(GetArg(...)); // Make sure its not too big: nUnchecked = min(nUnchecked, setKeyPool.max_size()); size_type nKeys = (size_type)nUnchecked; Or maybe even better, a type-safe numeric version of GetArg. Something like template typename<T> T GetArg(std::string arg, T default, T smallest, T largest) { int64 n = GetArg(arg, default); n = max(min(n, largest), smallest); return static_cast<T>(n); }
1708	7994361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7994361	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1708	8268521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268521	jgarzik	NAK also. No demonstrated need for more than 4 billion keys etc.
1706	7969761	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7969761	jgarzik	Code change is correct. This change needs a better change description though. The one-line summary is "update src/wallet.cpp" which is not acceptable. Use something like "correct LoadWallet() return value"
1706	8001831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8001831	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1706	8268549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268549	jgarzik	Ping? Improve commit message, please?
1706	8276570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8276570	xanatos	woops... I corrected the name of the pull instead of the name of the commit :-)
1706	8291173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8291173	xanatos	Woops... Reopened another pull with the correct code :-(
1705	7973795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7973795	TheBlueMatt	Can we just remove all of FIRST_CLASS_MESSAGING? Last I checked it was just a luke-jr thing to move where the message signing stuff is in the gui, does anyone actually run builds with it for regular use?
1705	7974204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7974204	laanwj	Agree its only a lukejr thing, its fine with me to remove it. I remember some time ago there was a redesign that moved the tabs to the side; when there is a lot of space for tabs it makes sense to make even message signing, which is a rarely used feature, a tab in itself. But with so limited space for tabs it really makes no sense.
1705	7975017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975017	Diapolo	Im also fine with removing it entirely from the client, but I guess luke doesnt like that idea. This patch at least cleans up some stuff related to it.
1705	7975564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975564	sipa	No problem with removing it.
1705	7975849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975849	Diapolo	Alright, Ill update this pull to remove it then.
1705	7976713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7976713	Diapolo	Updated to remove it entirely.
1705	7977281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7977281	luke-jr	NACK. Dont remove it.
1705	7977654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7977654	luke-jr	To expound a bit: Recall that first-class messaging was the *default* in the original implementation, and was only made optional as a temporary compromise while sign/verify message was still an uncommon function. Nowadays it is used by various services, including Bitcoin OTC, so if anything it should be restored as the default.
1705	7978027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978027	sipa	Please Luke, thats like claiming browsers need a proxy server bar as prominent as the search or URL bar. Im sure various services use this, but making it so prominent just confuses people. I already see people assuming that they need to use that to manually confirm transactions. In my opinion, message sign/verification belongs in a "Tools" or "Utilities" menu option and nowhere else.
1705	7978171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978171	TheBlueMatt	IIRC, it was added not as a compromise not until it becomes a common feature, but to discourage it from becoming a common feature (which, IMHO, we should do more for, but probably first there is to create a good payment protocol)
1705	7978205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978205	Diapolo	I like the idea of a Tools / Utilities menu option, but that should go to another pull then :).
1705	7978220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978220	luke-jr	If there is still disagreement over this, then it should remain an option.
1705	7978278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7978278	sipa	No offence, but I see no reason for maintaining this if youre the only proponent.
1705	7982014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7982014	luke-jr	[Early poll results](https://bitcointalk.org/?topic=102761) suggest first-class messaging should be default.
1705	7983311	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983311	Diapolo	I had that feeling ... and I was right. Everytime a decision is made that differs from what you would like it to be, some arguments are constructed even if you would be the only person in the world as proponent. Shall I open a poll everytime I argue with over something... seems a little unconstructive in the end, sorry to say.
1705	7983662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983662	luke-jr	What is unconstructive is this removing of functionality people want for no reason.
1705	7985426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7985426	gavinandresen	ACK, including removing FIRST_CLASS_MESSAGING (GUIs should not be designed via forum polls).
1705	7987944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7987944	luke-jr	If FIRST_CLASS_MESSAGING is to be removed against consensus, could at least do it in a separate commit after the "re-order GUI code" so those of us who want it can revert in our own branches?
1705	7993639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7993639	Diapolo	As I have overwritten my former version of that pull, I cant seperate to fullfill your whish, sorry... most of the re-order is cosmetic, so if you want your own version with FIRST_CLASS_MESSAGING just dont merge that one.
1705	7993699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7993699	luke-jr	Check out .git/logs/refs/heads/cleanup_bitcoingui ;)
1705	8001890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8001890	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1705	8004534	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8004534	Diapolo	The last error was ``fatal: e3eb634e44f677d02a08ed5bbc0d7d3acc0db6c7 does not point to a commit`` and that should not relate to the contents of this pull, as current commit-ID is ``0b35903d75803eb983e6a4f4c3c888da5ae4e3d7``.
1705	8009314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8009314	TheBlueMatt	That probably means between the time pull tester got the list of pulls and the time it checked this pull, the commit that was this pulls head was removed from the git repo in question, it should give an update when it runs the new version. (also, please dont tag I wont see it, please tag me instead)
1705	8028858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8028858	Diapolo	Sorry, I dont know what you mean by ``Check out .git/logs/refs/heads/cleanup_bitcoingui`` and I dont want to spend too much time with this. I thought the change was ACKed and as I said you could just skip that pull?
1705	8029157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8029157	luke-jr	You cant just "skip" pulls. If you split it up, you can revert the commit removing it. I can walk you through it on IRC...
1705	8030603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8030603	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1705	8118347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8118347	Diapolo	To do a small favor, I split up that pull into 2 commits, one removes the 1stclass stuff and the other does the GUI re-ordering. I hope everyone is happy now and this gets in soon to not have the need to further discuss it...
1705	8326647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8326647	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1705	8738346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8738346	Diapolo	As this didnt make it into 0.7, can please a dev merge this now? I find it rather hard to keep track of that many small pulls, which leads to a slow down on my side ^^.
1700	7931774	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931774	Diapolo	ACK and not directly related question, version.h is not in the pro-file, whats the reason to hide it or is there one?
1700	7932229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932229	sipa	Seems version.h is indeed missing from the .pro file?
1700	7932243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7932243	laanwj	Yeah, lets add that one too, good catch.
1700	7933833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7933833	gavinandresen	ACK
1700	7942055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7942055	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1699	7931208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931208	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32
1699	7931308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931308	laanwj	Hmm this is interesting, CCrypter calls calls mlock / munlock directly. Its good that we have Windows. Will update these to use the LockedPageManager as well.
1699	7931319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931319	sipa	Nice, this was needed. You need to fix the mingw build issue, though.
1699	7931586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931586	laanwj	Should be solved now.
1699	7935040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7935040	gavinandresen	ACK from my Mac.
1699	7935633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7935633	gmaxwell	Should we do something useful with mlock failure? At least log something? I wonder how much of a lost cause this is as the encryption key gets handled by json or the GUI...
1699	7935888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7935888	laanwj	Re: mlock failure, maybe log a warning once, to prevent logspam. I dont agree this is a lost cause. Even though its not water tight yet in the case of wallet encryption, it is a move in the right direction. It does protect the wallet private keys in the case someone has the wallet on an encrypted volume or an USB stick, but hasnt encrypted swap...
1699	7937139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7937139	gmaxwell	Log once is better than not at all. Logspam would be bad too. Perhaps just log stats on shutdown?
1699	7949073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7949073	sipa	ACK as soon as BitcoinBuildTester confirms the mingw build is fixed.
1699	7958247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7958247	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32
1699	7963765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7963765	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1699	7987309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7987309	gmaxwell	Passes tests and WORKSFORME.
1698	7914993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7914993	gmaxwell	This is way too close to current right now. How long are we planning on staying in RC? (Not that Im aware of a fork this would conflict with, of course, but I like keeping the high ground of saying weve never released a checkpoint _remotely_ near the tip)
1698	7915231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7915231	gavinandresen	Its been a while (and quite a lot of code changes) since 0.6.3, so I assume well be in RC for at least two weeks. How far back is "long enough" for a checkpoint?
1698	7915301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7915301	jgarzik	3 months?
1698	7915712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7915712	sipa	Meh, Id say 1 or 2 difficulty-adjust-cycles (2 or 4 weeks)?
1698	7916159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7916159	gmaxwell	I think Id claimed "8000 blocks" in some discussion before, Im not seriously married to any specific value. I think it should be at least 1 difficulty cycle. 2 difficulty cycles sounds good. Sort of a bummer that we dont lock in the new difficulty when its increasing like now, but it doesnt really matter.
1698	7920568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7920568	gavinandresen	ok. Ill go ~2000 blocks (~2 weeks) back, and assuming were in RC for 2 more weeks thatll be ~2 difficulty cycles at release. So block 193,000 or thereabouts...
1698	7928770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7928770	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1698	8022629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8022629	sipa	ACK
1695	7909733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7909733	Diapolo	Does this cleanup orphan blocks stored in our block-files when re-importing them as new block-files?
1695	7909826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7909826	gavinandresen	ACK
1695	7910355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7910355	sipa	Normally, block files do not contain orphan blocks (by which i mean blocks that have no known parent), they do have chains of stale chains that got reorganised away (which is what I assume youre talking about). This only prevents real orphan blocks from being imported.
1695	7914429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7914429	jgarzik	ACK
1695	7920790	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7920790	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1694	7905543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7905543	gavinandresen	ACK
1694	7923466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7923466	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1694	7924649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7924649	Diapolo	What happens with your ``if (nTries > 100)``, when after that a node occurs in addrman, to which we can connect. Is there a retry timeout or a user feedback somehow?
1694	7931495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931495	sipa	Youre not the first to miss it, so I added a comment to clarify: that break does not stop trying new addresses, it just returns to the outer loop, which sleeps, recalculates allowed address ranges, adds seed nodes, ... before continuing.
1694	7935455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7935455	gmaxwell	ACK. Tests out okay to me.
1694	7955486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7955486	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1693	7904142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7904142	sipa	ACK
1692	7925448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7925448	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1692	8268630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268630	jgarzik	Why is this cache needed? Is it showing up on profiles? Remember, every static variable creates complications related to multi-threading. I think the change is a nice small cleanup... without the static variable-cache stuff.
1692	8269147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269147	Diapolo	I can remove the cache, as I did not profile :). Will update, just a few minutes...
1692	8269422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269422	laanwj	I dont see the point of creating an extra function here. Instead of the fairly simple expression `(GetDataDir() / strprintf("blk%04d.dat", nFile)).string()`, used in one place, you add a 20 line function that is only used in one place. Also, please dont introduce any snprintf and fixed buffers. `strprintf` exists for a reason.
1692	8269609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269609	Diapolo	Guys that pull was open for 2 weeks now, I got no feedback, then used feedback to update and now you tell me that thing is useless...
1692	8269659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269659	laanwj	Im fine with it if you have a reason to expose the functionality outside main.cpp (ie, because of the sipa pull you mention) or plan to use it in multiple places, but you can reduce the function to 1 line.
1692	8269863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8269863	Diapolo	Sorry for my over-reacting, had a little trouble at work today. You are right, it can be even shorter and if you want I can use strprintf (although snprintf() has a buffer-length check afaik).
1692	8270131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8270131	laanwj	No hard feelings. We all have that kind of trouble sometimes. snprintf checks the buffer length, thats right, but has some problems that can catch the unwary. Ie, the resulting buffer is not necessarily zero-terminated. And what if someone changes the filename and forgets to change the hardcoded 12... For a project like bitcoin we should prefer clarity and robustness to low-level fiddling. Especially if it results in shorter code as well. No need to be clever here. Just use strprintf where it can be useful.
1692	8270815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8270815	Diapolo	You are absolutely right then, ``strprintf()`` is the function to take ... Im just interested, was it deeply inspected for any faults / security flaws in its implementation, as I find it rather strange to trust a hand-made function that much :) or even more than standard functions.
1692	8271253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8271253	laanwj	We use strprintf all over the codebase, so it is fairly well-tested. Personally Ive looked at it many times and wasnt able to find issues with it. Internally it ofcourse simply calls (_v)snprintf, but handles all the edge cases as well. It is also the only place where we call the "evil" *snprintf directly, and Id like to keep it that way. If you dont trust strprintf please try to study it closely and fix the issues there (or write some testcases!). Using alternative functions in some parts of the program wont improve overall security.
1692	8271354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8271354	Diapolo	Its good to have an eagle eye who catches usage of unsafe functions and I can benefit from your comments nearly all the time, so thanks. I updated that pull to use ``strprintf()`` now.
1692	8285147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8285147	jgarzik	superceded in HEAD, closing
1692	8326682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8326682	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1691	7893039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7893039	luke-jr	ACK
1690	7884533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7884533	gmaxwell	ACK. This does exactly what I was looking for. Thanks.
1690	7900965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7900965	sipa	ACK
1690	7912346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7912346	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1689	7878318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7878318	jgarzik	ACK
1689	7879071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7879071	gmaxwell	ACK
1689	7879472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7879472	laanwj	ACK
1689	7880142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7880142	TheBlueMatt	ACK
1687	7878322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7878322	jgarzik	ACK
1687	7890175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7890175	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1687	7901613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7901613	TheBlueMatt	ACK
1687	7901975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7901975	sipa	ACK
1685	7846468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7846468	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1685	8757101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8757101	laanwj	my time is pretty limited, and I havent found time to test and look at this in further detail yet. It will be a while before 0.8.0 is released, I guess, so theres no need to hurry.
1685	9209901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9209901	Diapolo	I found a method to achieve what I wanted, without the need to change the detachDB stuff in OptionsModel::data().
1685	9972102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9972102	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1685	10247230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10247230	Diapolo	Updated and removed special casing for detachDB as that was removed entirely.
1685	10316005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316005	luke-jr	Does this correctly handle the Cancel case? That is, if I Reset and Cancel, no changes should be made (and making changes should require OK/Apply).
1685	10317478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10317478	Diapolo	No, when you use reset button, this is a non-reversible action. Its IMO not worth the trouble (perhaps not even possible the way this is working), but I could add a warning message where you need to confirm the process, would this be sufficient then? Making changes DOES already require OK/Apply.
1685	10771957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10771957	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1685	11906497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11906497	sipa	What is the status on this?
1685	11906764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11906764	Diapolo	Neither nor added further comments, but from my point of view this would be a nice little addition for 0.8. Edit: I tried it and still seems to work, but would of course need a little testing an feedback ;).
1685	11907634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11907634	luke-jr	I still think its a usability bug for it to conflict with the Cancel action, but I dont really care enough to argue over it.
1685	11913627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11913627	Diapolo	Updated to include a confirmation dialog before executing the reset.
1685	11915340	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11915340	laanwj	Much better with confirmation dialog, ACK
1684	7841151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7841151	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1684	7842544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842544	laanwj	Is this functionality currently safe enough to trigger automatically? What will happen in these cases: 1) Client stops before full import completes 2) User exits (after succesful import), then re-starts bitcoin Also, we probably want some kind of progress widget, as the process can take a few hours.
1684	7842599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842599	luke-jr	Right now, Bitcoin-Qt is fully interactive during IBD...
1684	7842609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842609	laanwj	So to decode that, you mean run this importing in a thread (after the Init succeeds), pretend that the blocks come in from the network, and use the current progress mechanism? I suppose that could work, if you block the real network for the duration that the file is being read. Also it doesnt address the above points. Does it somehow need to remember where it was with importing, between runs?
1684	7843040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843040	Diapolo	I recently added an info message when doing a -loadblock, so this needs a rebase + the shorter the message the better, because of the small splashscreen. When doing a -loadblock nothing is interactive, the client is just displaying the splashscreen and a message for ~1 hour or more.
1684	7844448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7844448	luke-jr	I guess that would keep the current IBD behaviour during a loadblocks. However, it seems like it has potential to slow things down, so should probably be tested.
1684	7844969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7844969	laanwj	It should not be used for the specific -loadblocks, which is also a benchmark. But for the automatic loadblocks for bootstrapping users (that jgarzik is proposing) itd be fine. Its fine if it is a bit slower as long as the user gets feedback and doesnt have the idea that his client crashed at the splash screen.
1684	7845009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7845009	Diapolo	So perhaps rebase and change the second InitMessage to ``Auto-Importing blocks...``?
1684	7847942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7847942	sipa	Im planning on writing a "reindexer" that takes an existing blk*.dat file (in the normal location for those), and rebuilds/updates the index with the found blocks, and afterwards reorg to a new best chain if one is found there. Thats maybe even preferable?
1684	7848017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7848017	jgarzik	Yes, a reindexer would absolutely be preferred. Should be faster, with less disk traffic, and no files left over at the end.
1684	7852991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7852991	mikehearn	A better way to reindex would be great, I already did some code for this (loading a blk?.dat files with a progress gui) in the leveldb branch but its not very good because I wanted the change as small as possible.
1684	7868811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7868811	gmaxwell	Am I misunderstanding this patch? It looks like it will reimport at every startup because it doesnt remove/move/flag the file when done. That seems pretty surprising.
1684	7870056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7870056	laanwj	Yes, I thought so. Thats why I asked what would happen in those cases.
1684	8266459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8266459	jgarzik	Rebased, and corrected the FMB (frequently mentioned bug): it now renames bootstrap.dat, after import, to prevent re-import. That should address all outstanding objections.
1684	8333833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8333833	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1684	8827353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8827353	jgarzik	Updated strings, addressing comments.
1684	8833440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8833440	Diapolo	Thanks, one last nitpick, we use ellipsis for every stage of the init and you make me happy, when you convert the ``.`` into ``...`` for both strings :-D. You are free to hate me a little afterwards ^^, but get my ACK then.
1684	8869164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8869164	gavinandresen	ACK. (and I think Diapolos nit-picking is excessive)
1684	8869431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8869431	Diapolo	I sometimes hate that character trait and so Im fine with other devs ignoring some of the nit-picks if they feel bugged.
1683	7841868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7841868	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1683	7843050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843050	laanwj	NACK until the version is determined automatically from version.h, we dont want to have to manually change the version number in another place for every release.
1683	7843064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843064	Diapolo	I know that you dont want this like it is now, but for reference and discussion it needs to be here, as Im unable to do Linux scripts or stuff like that :). Thats why I mentioned ``build.h``.
1683	7965011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7965011	Diapolo	A good new point was raised, which makes valid version information even more valuable. Security-Scanners like Secunia PSI rely on version information to determine if an application is secure or has known and reported security flaws.
1683	7965283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7965283	sipa	How about using gits export-substitution mechanism, which is also used in version.h, when build.h is unavailable? You could get the commit id, date, and in case of releases, tag name of the latest commit that way.
1683	7965741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7965741	Diapolo	I "only" need our version information in this format: <pre> #define VER_PRODUCTVERSION 0,6,99,0 #define VER_PRODUCTVERSION_STR "0.6.99.0" </pre> Tell me, do you think this is achievable via your suggestion?
1683	7966050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7966050	sipa	Do you think its possible to just #include "version.h" in that .rc file? If so, it isnt hard.
1683	7966158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7966158	Diapolo	I tried that, but the windres resource-file compiler doesnt like code other than a #define, which sucks in that case. If we could seperate out the pure version number stuff, which consists of only #define, into anoter small header, which we then include in version.h and the resource-file ... that could do the job. And we keep that 1 place, where manual changes need to be made.
1683	7966520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7966520	sipa	So what we can do, using export-subst, is have the unix timestamp as VER_PRODUCTVERSION, and the formatted data as VER_PRODUCTVERSION_STR, with the tag name after it. So VER_PRODUCTVERSION would be 1345657778, and VER_PRODUCTVERSION_STR would be "2012-08-22 10:49:38 -0700". When 0.7 is released, " (0.7.0)" could be appended.
1683	7966781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7966781	Diapolo	I guess I have found a solution, just need to verify it doesnt break version.cpp now :). Just a few minutes...
1683	7967300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7967300	sipa	Does it build/work now?
1683	7967392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7967392	Diapolo	It builds without errors (and thats the most important thing), but one of the version parts seems not working, I observed this after I updated the pull ... currently looking into that :-/.
1683	7969083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7969083	Diapolo	Updated, I needed to add the ``#define TOSTRING(s) STRINGIFY(s)`` macro for it to work (see for more information) and now its working like it should :).
1683	7970330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7970330	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1683	7975685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975685	laanwj	Great to see that this is solved.
1683	7975803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975803	Diapolo	Updated to include a comment for the macros, looks good to me. I just dont know how many messages will create now ;). I would like to take a look at it, after this last update, to be sure.
1683	7996496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7996496	Diapolo	Come on dear I want a build to get this in 0.7 :). Well there is no folder for commit-ID a5266398d88c6e596b91208eca0ce3aee5b5e3cb, so I guess I wont get one ^^. Well as I said on Windows everything is looking good, so it should be safe to give it a try before 0.7 RC?
1683	7999632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7999632	Diapolo	Well, I downloaded bitcoin-qt.exe from (last build mentioned above) and looked at the version information ... its in and looks like the screenshot in the first posting :). Edit: Yeah I remember, the last change was just a comment update!
1683	8003915	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8003915	laanwj	BTW, a bit off-topic but what is VERSION in bitcoin-qt.pro used for? I dont see it being passed to anything, and I think it can be removed without hurt now that we have version.h. I see it was added by Gavin in 0.5.0:
1683	8004569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8004569	Diapolo	I never understood, where the Qt version variable was used. I can do a diff of the makefiles WITH and WITHOUT ``VERSION`` and report back.
1683	8005145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8005145	Diapolo	I checked the makefiles, VERSION is nowhere used in it.
1683	8007574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8007574	gavinandresen	I think (but Im not sure) that the OSX create-a-dmg-package uses it.
1683	8031224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8031224	laanwj	Ok, good reason to keep it around.
1683	8031567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8031567	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1683	8031805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8031805	Diapolo	It seems the relative path I used in Windows format (in the .rc file) is incompatible with the cross-compilation. Ill update later with Linux style format. Edit: I changed ``#include "..\..\clientversion.h"`` into ``#include "../../clientversion.h"``, which still compiles just fine on Windows. Waiting now for a confirmation.
1683	8150316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8150316	laanwj	we could use another pulltester run here :-)
1683	8157809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8157809	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1683	8158605	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8158605	Diapolo	Once more it tried to use an old commit-ID, which isnt there anymore: ``fatal: 016649d8b83d0f64a0c1ccfe28719913c18a5e4c does not point to a commit`` So we need to wait a little longer for the most current one I guess ;).
1683	8175021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8175021	Diapolo	I had to rebase, as another small fix created a merge-conflict...
1683	8212421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8212421	Diapolo	Any idea, why refused to build anything for us? I would love to see this in 0.7 final.
1683	8215093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8215093	TheBlueMatt	Sorry, pull tester is currently paused pending an upgrade to the block tester. I should have time to get it back up today.
1683	8288676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8288676	laanwj	Its started testing again, but not here.
1683	8289144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8289144	Diapolo	I rebased to current master to create a new commit-ID, hope that helps.
1683	8305508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8305508	Diapolo	Rebased to match the 0.7rc2 version information. Still no sign from :-(. Can you check why this pull seems to be ignored by it?
1683	8305924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8305924	TheBlueMatt	calm down, this pull is pretty far down the list, there is quite a backlog, and each test takes a number of hours, it may be a few days...
1683	8333887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8333887	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1683	8339307	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8339307	Diapolo	It seems once more a no more existing commit ID was chosen. Any idea for this?
1683	8339477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8339477	TheBlueMatt	again, the backlog is pretty long, youll have to wait for it to finish its current run and start the next before it picks up the latest commit id.
1683	8365495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8365495	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1683	8366336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8366336	Diapolo	YES, it finally works, I downloaded bitcoin-qt.exe and can verify it works! The last rebase was needed to update to 0.7.0.2 for RC2. Sorry that I was so impatient ^^.
1681	7828155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828155	gmaxwell	ACKACKACK
1680	7816445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816445	sipa	ACK
1680	7827713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7827713	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1679	7815276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7815276	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1678	7804208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7804208	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1678	7809275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7809275	laanwj	ACK
1678	7816492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816492	sipa	ACK
1677	7794418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7794418	sipa	(EDITED) List of implementation changes: * new database layout: * 2 leveldbs (coins/ and blktree/ subdirs), replacing blkindex.dat * separate directory (blocks/) with block data (in the usual format, but smaller files) and undo data * database keys are of the form (char,key) instead of (string,key) for reasons of compactness * there is no txid-to-diskpos index anymore, only blkid-to-diskpos and txid-to-unspent-outputs * this makes getrawtransaction only work on unspent outputs (and slower) * an optional txid-to-diskpos index is planned * some new very specialized serializers are added (compact variable-length integer, compact amount, compact txout) * block index does not store hashBlockNext anymore - this is reconstructed from hashBestBlock at startup * at startup, automatically reorg to the best block in blktree/blocks * new RPCs: gettxoutsetinfo and gettxout operate on the coins database * no more CTxIndex in-scope: instead, a global pcoinsTip (representing the coin db) and pblocktree (representing the blktree db) * intended to be moved to separate modules/classes, properly encapsulated * blktree database contains statistics about the block file (size, which blocks in it, times, heights, undo stats, ...) * blktree database contains flag per block that determines the degree of validation it had, to allow future headers-first mode * block files are pre-allocated (in batches of 16 MiB, the files grow to max 128 MIB), to reduce fragmentation * transaction hashes are cached, and typically never calculated more than once Included in the pullreq, but technically separate: * do -loadblock= and bootstrap.dat import in a separate thread * add check for strict DER encoding for signatures, and standard public keys
1677	7899172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7899172	Diapolo	One question, our current AppendBlockFile() function takes MAX_SIZE into account and generates a new block-file if the space left in the block file (max allowed filesize) is < MAX_SIZE. So 128 MiB files would have a maximum of 96 MiB usage-data, right?
1677	7899296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7899296	sipa	not sure what you mean; I dont use AppendBlockFile anymore.
1677	7899334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7899334	Diapolo	I saw that and wanted to understand the change here, which condition is used to determine, if a new block-file needs to be created, where is the check in your new code for that and whats the space limit?
1677	7899397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7899397	sipa	The check is in FindBlockPos in main.cpp. And a new file is created if (old_used_size + new_block_size >= MAX_BLOCKFILE_SIZE).
1677	7991614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7991614	luke-jr	Does this break the ability to downgrade at all? (I expect it just means wasted "padding" space in the blk*.dat files?)
1677	8044737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8044737	sipa	Updated. Batch block connection now keeps a permanent cache, and modifies that (instead of delaying block connection until several blocks were available, which interfered with normal network-based downloading). Also added a commit that changes the block database format, in preparation of things like parallel signature checking and initial headers-only mode.
1677	8047427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8047427	Diapolo	With block database format you mean stored blocks in blk0000x.dat?
1677	8052173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8052173	sipa	how do you mean breaking the ability to downgrade? The blk000*.dat files remain exactly the same format, but the other databases are incompatible. No, it uses coins.dat (the unspent txout set) and chain.dat (the block index), in addition to the blk*.dat (and rev*.dat) files. Its the format of chain.dat that changed in the last commit.
1677	8062078	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8062078	luke-jr	If it interacts with downgrades in ugly ways, Id probably not want to put it into next-test.
1677	8062727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8062727	sipa	Shouldnt be a problem - the filenames are all different, so you can (almost) run ultraprune and non-ultraprune together in the same datadir independently. That said, its likely to conflict with a lot of other stuff, so decide for yourself.
1677	8157817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8157817	mikehearn	Could you provide a squashed version of the patch somewhere, for review? Its really hard to review as is because its just a record of how you implemented it over time.
1677	8158190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8158190	sipa	?
1677	8188081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8188081	mikehearn	Thanks, that looks useful.
1677	8189169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8189169	sipa	Seems that through rebasing I lost some comments you made earlier on the commits? Regarding the encodings, I plan to write some text about the final format for all datastructures, but I may change a few things still.
1677	8282968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8282968	sipa	Rebased/combined with LevelDB patch
1677	8730563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8730563	sipa	Rebased on 0.7, and moved the more experimental block caching and parallel signature checking to a separate branch. The code in here should be stable and can be tested. The only things that remain to be done are automatic import of old data, and more elaborate consistency checks at startup. I think those can be done in separate pull requests though. This branch has its own LevelDB glue, independent (though similar, but simpler) from the one in Mikes leveldb branch. As the coin and block indexes are only opened once, there was no need for a CDB-like wrapper and global CDBEnv to cache database accessors. If LevelDB is merged first, Ill add reverts for most of it here.
1677	8735305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8735305	mikehearn	I closed the LevelDB pull req. Lets merge it as part of this. Note that my LevelDB branch has code that does replay the blocks with some GUI progress. Its not great because it actually re-writes the block files in order to track the block offsets ... I didnt do any deep refactorings to fix that as I wanted it to be as easy/fast to merge as possible and its a one-off migration anyway. But as its now a part of ultraprune that bridge was crossed, so you could just re-use whatever GUI code is possible.
1677	8762537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762537	sipa	any way to disable the build tester here, as it seems to be incompatible with this anyway?
1677	8763731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8763731	laanwj	Ive tested this a bit on the testnet. No problems found, and synchronization is super-fast. One small comment: in your bitcoin-qt.pro, please use $(MAKE) instead of `make`. This prevents an annoying warning about a job server in Qt Creator.
1677	8764081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8764081	sipa	updated to use $(MAKE)
1677	8792615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8792615	TheBlueMatt	Id rather not, the patch is really quite simple (http://jenkins.bluematt.me/pull-tester/files/bitcoind-comparison.patch) , afaict, its only failing because setBlockIndexValid was added directly above hashGenesisBlock in main.cpp. Can you just move that line and see if it works?
1677	8851318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8851318	sipa	Changed the database/serialization format one more time: coins and undo data now contains the transaction version number. This may be necessary when new versions of transaction are defined that have an influence on their ability to be spent. ok, moved the setBlockIndexValid line in main.cpp.
1677	8938946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8938946	mikehearn	This does not build on MacOS X because there is no fdatasync on that platform.
1677	8978928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8978928	sipa	I wonder why it still complains? EDIT: Oh, just out of date with master. Lets wait for the next cycle.
1677	9002668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9002668	mikehearn	I just tried to start my client based on this branch and got: Loading block index... Opening LevelDB in /Users/hearn/Library/Application Support/Bitcoin/blktree Opened LevelDB successfully Opening LevelDB in /Users/hearn/Library/Application Support/Bitcoin/coins Opened LevelDB successfully LoadBlockIndex(): last block file = 23 LoadBlockIndex(): last block file: CBlockFileInfo(blocks=1572, size=132444896, heights=199237..200807, time=2012-09-17..2012-09-27) LoadBlockIndex(): hashBestChain=00000000000000e78688 height=200806 date=09/27/2012 21:08:42 Verifying last 2500 blocks at level 1 block index 36135ms Loading wallet... dbenv.open LogDir=/Users/hearn/Library/Application Support/Bitcoin/database ErrorFile=/Users/hearn/Library/Application Support/Bitcoin/db.log nFileVersion = 70099 wallet 1192ms REORGANIZE: Disconnect 1 blocks; 000000000000051dcdc2..00000000000000e78688 REORGANIZE: Connect 2 blocks; 000000000000051dcdc2..00000000000003d0a2b1 ************************ EXCEPTION: NSt8ios_base7failureE CAutoFile::read : end of file bitcoin in Runaway exception
1677	9003047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9003047	mikehearn	On investigation this failure can happen with both ultralevelprune and old bdb code, it happens when the block is not written but the db updates are. Typically if power is yanked at just the wrong time. As it is not a new failure mode, I guess it should not delay review/merge of this code.
1677	9356748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9356748	Diapolo	Did anyone build this directly on Windows with MinGW? I saw there was a cross-compile Windows flag in the pro file. Perhaps I should just fetch that branch and try in the next days.
1677	9357697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9357697	sipa	es, Ive done windows builds; I even had to backport the LevelDB env for windows from c++0x to c++, as gitian only has a gcc 4.2 mingw compiler which doesnt support c++0x.
1677	9496096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9496096	gavinandresen	Errors compiling on my Mac: makefile.osx has 4 spaces instead of a tab: ``` "Building LevelDB ..."; cd leveldb-1.5.0; make; cd ..``` And: ```txdb-bdb.cpp: In member function bool CCoinsDB::HaveCoins(uint256): txdb-bdb.cpp:10: error: make_pair was not declared in this scope```
1677	9502063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9502063	sipa	Why does it build the BDB version? Did you explicitly disable USE_LEVELDB, or is there a problem with the makefile that causes this?
1677	9631656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9631656	sipa	Some additional changes: reorganized the commits a bit, fixed a bug that caused unit tests to fail, removed some dead code, and added a lot of comments (mostly in main.h). Also see the list of implementation changes in the first comment here.
1677	9631794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9631794	gavinandresen	Design ACK; I reviewed all of the changes to main.h and about half of main.cpp, and had just a handful of tiny nits that arent worth picking. I feel comfortable pulling this as long as can commit to working through the remaining TODOs and help fix any bugs that crop up over the next month or so.
1677	9631861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9631861	sipa	By the way: this pull request is rebased on top of threadimport (#1880) and canonical (#1742). I suppose that means those require ACKs first. If there is a problem, Ill remove them from under this pull.
1677	9637115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9637115	gmaxwell	ACK. This appears ready for integration.
1673	7729383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7729383	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1673	7737505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7737505	Diapolo	I tried the version from and it starts just fine, but Process Explorer shows ASLR as Disabled, which it does not for my local build with the linker flags from this patch.
1673	7778072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778072	laanwj	Maybe the cross-compiler ignores the arguments?
1673	7778851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778851	Diapolo	Does use an official Gitian build setup? I observed, that it seems to use Qt 4.8.2 (which is nice), but Im not sure what causes ASLR not to work or how this can be fixed. I used the qmake ``*=`` operator, which only adds the options, if they are not present, perhaps I should try with default ``+=``?
1673	7816608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816608	sipa	using += wont hurt, but *= should work fine as well.
1673	7816668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816668	sipa	By the way, Im not sure whether the "win32:" qualifier means "building for win32" or "building on win32", the latter not being true for the jenkins build.
1673	7816931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816931	Diapolo	The official qmake docs only mention win32:, while we seem to use windows: quite a lot in the project-file, but that is not what you observed, it looks like you could be right, see this. <pre> win32 { SOURCES += paintwidget_win.cpp } The above code will add the paintwidget_win.cpp file to the sources listed in the generated Makefile if qmake is used on a Windows platform. If qmake is used on a platform other than Windows, the define will be ignored. </pre> From: But how can we enable linker-flags for Windows builds then? Would the condition be true for official Gitian builds?
1673	7817082	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817082	laanwj	Could be that we explicitly need to tell qmake that were cross building for windows. I think it would be pretty incredible though, if it had ignored the windows specific options all this time in gitian and we wouldnt have noticed it. What about the exceptions+threading fix, for example?
1673	7817179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817179	sipa	I just checked; all windows-specific stuff enabled in bitcoin-qt.pro ends up being passed as command-line options in jenkins build log. Can you try changing the win32: qualifier to windows: ?
1673	7817268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817268	Diapolo	Updated to ``windows:`` Ill also check my makefiles and will try ``windows:`` and ``win32:``.
1673	7817309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817309	Diapolo	On Windows it doesnt matter, if I use ``win32:`` or ``windows:``, all expected arguments are in the makefile after running qmake.
1673	7817926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817926	Diapolo	I also checked and did not find ``-Wl,--dynamicbase -Wl,--nxcompat``.
1673	7828349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828349	TheBlueMatt	I thought I grabbed the same versions of deps that the gitian file uses, but I might have just grabbed the latest Qt...However, I did use exactly the gitian script (minus a few faketimes, etc things that are only there to make it deterministic), so if you find the version it uses, running the same gitian scripts with that version should work fine.
1673	7828460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828460	Diapolo	Thanks for that information, btw. I think we should use latest Qt for official builds, but thats not the matter here :). How does check if a pull changed or how long does it take after a new build is started after a rebase. Just asking, as I want to get this issue sorted out (missing linker-flags).
1673	7828575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828575	TheBlueMatt	It just constantly loops and checks if the tip commit on a pull is in its list of already-checked commits. If you push an update (wait a few minutes, and its not already busy on another pull), you can see the test.log before the build is done by going to and finding your new commit.
1673	7836036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7836036	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1673	7837097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7837097	Diapolo	The useage of ``windows:`` doesnt change anything, still ``-Wl,--dynamicbase -Wl,--nxcompat`` is missing from Makefile.Release and the test.log. Ill now try with += instead of *= ... any other ideas are welcome. I just saw that the cross-compilation seems unsupported / unofficial, could this be the reason?
1673	7837306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7837306	Diapolo	It seems to me that ``RELEASE=1`` is missing in the test.logs qmake-calls, could this be true?
1673	7837817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7837817	Diapolo	Latest rebase moves the linker-flags out of the RELEASE=1 scope (for testing only, so DONT MERGE THIS YET). If the flags then occur in the makefile or test.log we know the missing ``RELEASE=1`` qmake-flag is the cause.
1673	7839902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7839902	TheBlueMatt	No, RELEASE=1 is not in the qmake spec that pull-tester calls...why do we need to only apply ASLR and DEP to RELEASE=1 binaries? Also, afaik, the only two options are RELEASE=1 or DEBUG=1, and RELEASE is the default (though not set if you check for it as a var) maybe there is a different way to check if you are doing a RELEASE build? (because it generally creates two makefiles, a Makefile.Release and Makefile.Debug, and by default, uses the Release version)
1673	7841046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7841046	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1673	7842062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842062	laanwj	I think its fine to enable the flags for both release and debug builds. Good to keep debug and release as close as possible to prevent surprises. Unlike some kinds of optimizations, debuggers dont choke on DEP and ASLR do they?
1673	7842611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842611	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1673	7842648	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842648	laanwj	bitcoin-qt.exe: DllCharacteristics 00000140 It worked!
1673	7842981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7842981	Diapolo	Verified to be active now, as the flags occur in the test.log and the running exe shows ASLR as Enabled now. ![ASLR working](http://i45.tinypic.com/23w08ko.png) The last rebase just removed the indention and updated the commit message and comment.
1673	7843262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7843262	Diapolo	If we want this for bitcoind.exe on Windows, where do we need to add the linker flags?
1672	7708407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7708407	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1672	7816868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816868	sipa	Id like to keep the Base58 dependency (CBitcoinAddress, storing destinations as strings) out of the core wallet code, and use the internal representation there (CTxDestination); that should be more efficient as well. Can you make the CWallet:: methods work with CTxDestination, and have the RPC code do the transformation to strings?
1672	7828295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7828295	gmaxwell	Sounds totally reasonable.
1672	7877261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7877261	gmaxwell	Rebased, switched to CTxDestination, added some help text. I have some code here from a fork that adds some filter argument to listaddressgroupings (e.g. to filter groups by available value), any opinions on it? (Id have to go cut it out, as the fork was a failed effort to generalize the grouping code that I gave up one once I realized I was adding an email client to it)
1672	7878859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7878859	gmaxwell	Denitted.
1672	7891969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7891969	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1672	7902621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7902621	sipa	Apart from that, ACK.
1672	7931733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931733	sipa	I dont really have a suggestion for making it less ambiguous, and its a problem that doesnt occur only here.
1672	7945829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7945829	gmaxwell	Perhaps [[optional_array_member,...]] ?
1672	7948554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7948554	gmaxwell	Rebased for the RPC reorg.
1672	7960461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7960461	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1672	7994042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7994042	luke-jr	Besides comment (on excluding unconfirmed stuff from algo), I didnt find any obvious issues. However, Im not familiar enough with the rawtx stuff that I place any significant meaning on my review.
1671	7691543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7691543	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1671	7708107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7708107	Diapolo	What is the sense of this all-in-one pull?
1671	7711107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7711107	luke-jr	requested it (or at least a build; not sure if he meant for a pullreq)
1671	7712290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7712290	gmaxwell	I just wanted it built. :) But the pull request is actually mildly helpful for documentation / tracking purposes.
1671	7715538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715538	laanwj	Its funny for this time, but Im not looking forward to everyone submitting their code as pull request just to get it built for free by BlueMatt :p
1671	7715560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715560	jgarzik	+1
1671	7716235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7716235	luke-jr	I built the real binaries with gitian anyway ;)
1671	7816972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7816972	sipa	You can request a view of changes from github without there being a pull request for it. The URL for this one would be: (where 63046fcf6 is the current master).
1670	7695014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7695014	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1670	7817221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7817221	sipa	I believe argued in an earlier request for just using the full string. I wouldnt mind, and it enables using getblock directly, for example, without extra lookup. Its still a debug log file, right?
1670	7879762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7879762	laanwj	How long is the full string? 64? I suppose so. This patch makes it print 48 characters, so I guess you could just as well go all the way print the full string.
1670	7880061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7880061	luke-jr	No, this patch *skips* 48 characters, so prints 16. I dont care either way, and it seems theres support for the full hash, so might as well do that anyway...
1670	7896204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7896204	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1670	8213729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8213729	rebroad	So.. this patch now makes the lines in debug.log longer instead of shorter?
1670	8268711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268711	jgarzik	ACK save for bikeshedding: "BlockSubstr" is a misleading name, because the end result of this changeset is not a substring, but rather the full hash string. Maybe "BlockHashStr".
1670	8277961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8277961	luke-jr	Renamed.
1670	8295829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8295829	rebroad	How long will the line in the debug.log file now be with this change? What width of window is needed for it to look sufficiently neat? Is it worth adding a command line option to specify the length or format of the block string perhaps?
1670	8297552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8297552	luke-jr	Its a debug log; it doesnt have to look neat. NACK on a command line option...
1670	8300753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8300753	laanwj	Agree with here. The point of the log is simply to give as much as possible info for debugging issues.
1670	8372209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8372209	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1670	8762323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762323	sipa	ACK
1670	9853043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9853043	sipa	Needs rebase.
1670	10344191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10344191	luke-jr	Rebased
1670	10345287	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10345287	sipa	Hmm just realized that this is only for blocks. Any reason not to print full hashes for transactions?
1661	7563762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7563762	luke-jr	Theres string changes already queued for 0.7 still... at least if you include JSON-RPC help (not sure if thats translated)
1661	7563824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7563824	laanwj	JSON-RPC stuff is not translated, so that should be no problem. My statement was primarily about the UI, and also command-line options, though those are less important to have translated so if ones added it doesnt matter...
1661	7574519	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7574519	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull passed automatic sanity-tests! This means it merges cleanly onto current master, builds and unit-tests pass You can find the test log and build output at
1658	7552956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7552956	TheBlueMatt	Please dont merge this yet, Im gonna use to it test Jenkins new pull-testing capabilities :) (this will fail because it makes bitcoin-qt_test compatible with Jenkins build script, and bitcoin-qt_test currently fails)
1658	7561006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7561006	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull failed automatic sanity-tests! This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not merge cleanly onto current master 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 You can find the test log and build output at
1658	7562948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7562948	laanwj	Cool, it works
1658	7563270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7563270	BitcoinPullTester	Well it identifies everything as invalid so far, but it should be good for the positive now...just have to keep running the several hour test each time...
1658	7565930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7565930	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull failed automatic sanity-tests! This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not merge cleanly onto current master 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 You can find the test log and build output at
1658	7568156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7568156	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull failed automatic sanity-tests! This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not merge cleanly onto current master 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32 You can find the test log and build output at
1658	7571448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7571448	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull passed automatic sanity-tests! This means it merges cleanly onto current master, builds and unit-tests pass You can find the test log and build output at
1658	7571854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7571854	BitcoinPullTester	Now it works :)
1658	7575476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7575476	laanwj	Woohoo!
1655	7575750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7575750	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull passed automatic sanity-tests! This means it merges cleanly onto current master, builds and unit-tests pass You can find the test log and build output at
1655	7591663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7591663	luke-jr	It looks reasonable, but what happens later if some inputs are missing?
1655	7591974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7591974	gmaxwell	Just skips signing them: // Sign what we can: for (unsigned int i = 0; i < mergedTx.vin.size(); i++) { CTxIn& txin = mergedTx.vin[i]; if (mapPrevOut.count(txin.prevout) == 0) { fComplete = false;
1655	7592158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7592158	luke-jr	ACK
1652	7474485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7474485	gmaxwell	Is this useful? IIRC a number of pools mine their own payouts. I expect it to mostly measure that.
1652	7487968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7487968	TheBlueMatt	Would be useful to measure the potential impact of forwarding blocks as header + vector\<tx hash> instead of header + vector\<tx>
1652	7577470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7577470	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull passed automatic sanity-tests! This means it merges cleanly onto current master, builds and unit-tests pass You can find the test log and build output at
1652	7833483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7833483	jgarzik	no ACKs gathered, closing
1651	7460118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7460118	jgarzik	quick ACK (== I scrolled through them for a sanity check, but did not stare hard at each one)
1651	7579636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7579636	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull passed automatic sanity-tests! This means it merges cleanly onto current master, builds and unit-tests pass You can find the test log and build output at
1651	7692100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7692100	TheBlueMatt	Temporarily closing to add more tests which are waiting to push.
1651	7900618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7900618	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1651	7910346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7910346	gavinandresen	ACK (compiles and runs nicely on my Mac)
1649	7581550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7581550	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull passed automatic sanity-tests! This means it merges cleanly onto current master, builds and unit-tests pass You can find the test log and build output at
1648	7468988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7468988	jgarzik	Accepting non-standard transactions has already been NAKd. Putting this into a new pull req doesnt change that.
1648	7472787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7472787	luke-jr	This has not already been NAKd. Please reopen so I dont need to keep resubmitting, and consider reading the change to review (this doesnt accept any old non-standard transactions, only ones you make yourself).
1648	7584062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7584062	BitcoinPullTester	The following is an automatic comment from the Bitcoin Pull Tester. If you believe it is in error, please contact jenkins@bluematt.me This pull passed automatic sanity-tests! This means it merges cleanly onto current master, builds and unit-tests pass You can find the test log and build output at
1648	7697975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7697975	SergioDemianLerner	This change is partially, if not totally, flawed. This change gives a tool for an attacker to increase considerably the attack surface! Any user can send a peer a transaction that returns IsMine() == true or IsFromMe() == true if he knows who the peer is (the peers public key). Creating transactions that return IsFromMe()=true the attacker can bypass penny flooding prevention and IsStandard() and go directly to the CPU-expensive ConnectInputs() code. This creates a perfect DoS attack. He can also skip IsStandard() and put non-standard txs into mapOrphanTransactions. Afterwards he can send a single tx that triggers the verification of thousands non-standard transactions at once, and Im almost sure this can be used to mount a DoS. Creating transactions with IsMine() = true is also dangerous. The attacker can create a non-standard tx and send 0.0000001 to the victims address and bypass penny flooding prevention and isStandard(). The peer would blindly relay that transactions to remaining peers. This could be used (although I didnt explore how to do it) to force the remaining nodes to block the victims node. I find this change very disturbing, from the security point of view.
1648	7698436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7698436	luke-jr	An attacker cant create transactions that return IsFromMe()==true unless they have already compromised your wallet. No anti-DoS rule should ever be made based on relaying valid transactions, though perhaps concern should be given to potentially filling the victims memory/wallet with spam.
1648	7700479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7700479	SergioDemianLerner	Why the attacker cant create transactions that return IsFromMe()==true ? The code IsFromMe(Tx) calls (GetDebit(tx) > 0) that calls GetDebit() from each txin, that finds the previous transaction and calls IsMine(prevout) which only checks that the recipient address is a specific key (only works for standard transaction templates). It does NOT check the signatures, just the template.
1648	7700723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7700723	SergioDemianLerner	Some time ago there was a discussion on about the purpose of IsStandard() check and its benefits
1648	7700979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7700979	luke-jr	If the signatures dont match, the transaction is invalid and wont even get this far.
1648	7702822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7702822	SergioDemianLerner	TRUE but you can create a VALID tx that sends 0 BTC to the victim and use the REMAINING previns/txouts to do nasty things. I cant find any way to attack now, but I dont like the idea of allowing the attacker to skip a check only by adding a few bytes to the transaction that sends 0 BTC to an specific address.
1648	7702928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7702928	sipa	I think is right here, though I havent looked closely enough to be sure, so thanks for raising the point. Anyway, this does raise another point: maybe IsFromMe() transactions should not be retransmitted unless they are really created by this instance (and not received from the network).
1648	7702939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7702939	luke-jr	If that really works, its a bug (in the existing code).
1648	7702959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7702959	SergioDemianLerner	Nevertheless IsFromMe()=true is just enough of a problem.
1648	7703030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7703030	SergioDemianLerner	If you want your client to allow a "fast track" for your transactions, then you can add some hidden message to the script of the transaction. The hidden message must be a MAC (Message Authentication Code) of your transaction using a secret key. Then you can check very fast that youre the sender of a transaction
1648	7703497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7703497	sipa	No need for something that complex. Wallet transactions already have a fFromMe field which can easily be used to track whether it is not only "from me", but also "created by this instance".
1648	7703714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7703714	luke-jr	That sounds like a good idea. How does it work with raw transactions (which are likely the common use case for this)?
1648	7703811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7703811	SergioDemianLerner	Great! (but maybe the luke-jr runs multiple instances in different computers, so fFromMe is not available)
1648	7705570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7705570	gmaxwell	If sendrawtransaction can be made to cause fFromMe to be set then it even covers the multiple instance case, so long as you do the work to trigger it from each instance. (Arguably better than the wallet duplication required to make input sniffing work)
1648	7725993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7725993	SergioDemianLerner	I found two new attacks that breaks pseudonimity and allows a node to discover the peers public address. With this information in hand (IP and Bitcoin pub address), a hacker may get the real identity and track the users payments. a) Wait to see if the peer relays a non-standard transaction, it it does, then the public key must be the one of the txins or txouts. b) 1) Send money to 60 different txouts (all owned by you, each one containing 0.000001 BTC) my( i ) 2) List the 600K current Bitcoin addresses in use. 3) Separate the addresses in 60 groups. For each group, create a non-standard tx with 1 input an 10000 outputs. Each tx input is one of your txouts [ my(i) ] 4) One at the time, send the 60 transactions to the peer. 5) Only the one with the victims public address in it will be relayed. (you can check that using the command "mempool"). This is because the victims node wont check the tx.GetMinFee(1000, true, GMF_RELAY) protection for that tx since IsMine() =true. 6) Then proceed recursively (binary search) to discover which of the 10K address is the victims pubkey. This is a classical side-channel attack. My opinion: Never branch the code checking IsFromMe() / IsMine() in CTxMemPool::accept() Note that the use of fFromMe does not posses any risks .
1648	7732345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7732345	luke-jr	"A" is not a real risk, since relaying the non-standard transaction is the only way to actually use it (so the only way to avoid this risk is to not use non-standard transactions at all). "B" seems like it could have some serious privacy implications, though - do you think it would work better if the client secretly held onto the transaction and only relayed it again later?
1648	7733493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7733493	SergioDemianLerner	"A" could be achieved by sending the transaction directly to the miners (I dont know how to achieve that) . Then only the miners will know who send it. Your idea to hide the transaction is interesting...The node should act exactly as if the transaction had been rejected. Also there should be no timing differences between rejecting and hiding. The only problem I see is that if the attacker has two connections to the victim, then he can monitor if the transaction goes out from the other end, so the attack it still possible... Anyway, why do you want to force to relay transactions that go to you? Your decision to relay/not-relay as a single node in the network has very little probability to influence the fact that the transaction will or wont be included in a block by a miner. It is only relevant if you own a high percentage of the nodes of the network, so you can chain transmissions until a miners node. Maybe what you want is to put the transaction into a special pool to monitor for 0-confirmations, but not for re-transmit. Could you explain what is the real benefit for you of this change? Whats the use case?
1648	7990631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7990631	luke-jr	After thinking about it more, this gains from this seem not worth the risks at this time.
1646	7442279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7442279	laanwj	ACK
1645	7469092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7469092	jgarzik	Closing, 1) requires nakd commit that accepts non-standard transactions 2) "status: deferred" could be for a long time 3) this is an active area of Gavin work too, and so I think it is fair to require some discussion (on bitcoin-devel?) before proposing fee calculation or fee RPC changes. You will note that #1647 is on the list for 0.7, so hopefully that illustrates we are being fair in this area, and merging discussed items.
1645	7472804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7472804	luke-jr	1) It was not NAKd. 2) So? 3) It was not at the time it was implemented, and still isnt really. Low-level tools are no substitute for the high-level ones.
1642	7432876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432876	gmaxwell	This is currently the unmodified listaddressgroupings RPC from the coincontrol patch. Its been tested for basic functionality. I observe that it misbehaves a little when you have transaction with some inputs which arent yours e.g.: [ "mgrxrEzVVvf5TDt4PVc3EpiJrJGt52RXfZ", 100.00000000, "" ] (the empty quote) But I expect thats easily fixed. The bigger question is do we want to change this to make it work better in the context of raw transactions? Listunspent gives txouts without addresses, so going from this list to a raw transaction doesnt quite work. Ideas?
1642	7433232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433232	jgarzik	ACK
1642	7433441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433441	gmaxwell	Perhaps when it cant decode an address it should return the txout? And the mismatch with listunspent should be fixed by allowing listunspent to take a list of addresses to filter with?
1642	7594083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7594083	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1642	7871206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7871206	gmaxwell	duplicated in another pull request (#1672) now.
1641	7436355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7436355	jgarzik	was asking about testing. This was tested successfully with a one-line pynode patch (pynode HEAD deb07f51435cd0d18596bddfee28e337a5a6454e). pynode issues mempool at startup, and fills its own mempool with the returned results. ``` --- a/node.py +++ b/node.py -238,6 +238,7 class NodeConn(asyncore.dispatcher): self.send_message(msg_verack(self.ver_send)) if self.ver_send >= CADDR_TIME_VERSION: self.send_message(msg_getaddr(self.ver_send)) + self.send_message(msg_mempool()) self.send_getblocks() ```
1641	7463024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7463024	jgarzik	Random thought: miners may want this, to "prime the pump" after restarting their bitcoind. There is the incentive to capture every fee-paying transactions, after all.
1641	7597554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7597554	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1641	7695802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7695802	sipa	ACK on the changes, but maybe there must at least be some discussion about adding this, and the protocol version change involved. An alternative would be using a service bit (I dont personally think that is preferable), but people may have other opinions. I would expect the startup sequence to also send a mempool command to another node, in case it reports protocol version 60002 or higher?
1641	7796148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7796148	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1641	7833558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7833558	jgarzik	Specification:
1641	7870408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7870408	sipa	ACK
1641	7870565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7870565	gavinandresen	ACK
1639	7363988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7363988	mikehearn	Thats great, but an option? Seriously? These are the kinds of options that dont really make any sense. Why not just make this the default? Does *anyone* find the current behavior useful?
1639	7364111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7364111	Diapolo	That whole progress bar think is very controversial and its hard to do it right as a change that some like other seem to hate. Thats why I chose the option way, set it like you want it to be. Im fine with some final decision to just change the default though.
1639	7364387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7364387	mikehearn	Yeah, I understand the appeal of an option in this case, but if we add an option every time developers cant get consensus on something trivial it just results in a nonsense UI. How many people will ever change that setting? The current setup means that for anyone who isnt a brand new user, the progress bar never moves and never indicates progress in any useful way. I dont understand how this can be controversial.
1639	7375759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7375759	gmaxwell	Its not about "developer consensus" its about real observed behavior: The relative indicator was frequently causing users to freak out, corrupt their chains by screwing around trying to fix things that arent broken, or uninstall the software and send angry email. Its a non-starter. (An example case study: A user installed bitcoin, couple hour sync time. Weeks later he restarted the client, and freaked out that it was back at zero thinking it meant another couple hours. To try to resolve this he downloaded a chain file from a website. But it still showed zero, so he downloaded another chain file and managed to mix up the blk/index files in the process... corrupting his database and then his client wouldnt start. While trying to fix it he followed some instructions and deleted his wallet. This is an extreme case, but we were getting complaints related to this behavior with fair frequency. Its objectively problematic. The relative indicator may be not very useful, but its the lesser evil.) The recommendation in the last discussion was to find an indicator which both prevents users from freaking out and is also useful and informative for short resyncs. I thought we achieved that already, but if not then we should keep grinding on it. I dont think an option makes sense.
1639	7378116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7378116	mikehearn	You could just provide an estimated time remaining indicator alongside the progress bar. Non-paranoid users would wait and see that it advanced faster than last time anyway though, I dont know that we should optimize for the case of users who try and download chain files from websites. That seems over the top.
1639	7398847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7398847	sipa	After all discussion about this apparent non-issue, Im starting to think that a progressbar is just not the right way to show the progress here. The bitcoin wallet on Android just tells you how far (months/weeks/days/hours) it is behind. Im starting to think that is enough...
1639	7418662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7418662	Diapolo	I was trying to get a time-left display implemented, Ill add that as seperate commit later, so perhaps that is better with a relative display.
1639	7420821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7420821	mikehearn	Yeah, but I asked Andreas to put a progress bar into the Android app too. Time by itself turns out to be less useful when youre far behind. I dont think progress bar+estimated time is a big deal. The code for it is quite straightforward. On 31 Jul 2012 15:54, "Pieter Wuille" < reply@reply.github.com> wrote: > After all discussion about this apparent non-issue, Im starting to think > that a progressbar is just not the right way to show the progress here. The > bitcoin wallet on Android just tells you how far (months/weeks/days/hours) > it is behind. Im starting to think that is enough... > > --- > Reply to this email directly or view it on GitHub: > >
1639	7425918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7425918	sipa	Yes, it is straightforward. But implementation is not the problem. Weve had both progress bars (one absolute, and one relative to the sync part since startup). As far as I remember, both were confusing and people complained in both cases to change it to the other. My conclusion is that a progressbar is not the right way to convey this information.
1639	7425982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7425982	Diapolo	That is, why I made it an option here ... some like this better, others like that better and now they can chose. I really like the progress bar. Give this patch a try and tell what you think afterwards?
1639	7426117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7426117	sipa	I dont really use the GUI myself, so Ill let others judge it. It just seems to me that after not having reached an acceptable solutions after so much discussion, we should try something else :)
1639	7432337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432337	laanwj	Well I have said before, I dont want an option, we just have to pick something and stick with it. And we did. Last time, most of the developers were for an absolute progress bar. But this has flip-flopped too many times I dont even want to discuss about it. Edit: of course, if you have an alternative that is even better (and noncontroversial too) thats great! But switching between two sub-par options is not an improvement.
1639	7434146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434146	Diapolo	Closed for now, problem with the timer was it only got updated when block count changes (void ClientModel::updateTimer()), so the timer stuck, when the block download was stuck ;).
1636	7331520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7331520	laanwj	ACK
1636	7398864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7398864	sipa	ACK
1636	7432720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432720	laanwj	Needs rebase, though
1636	7433514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433514	jgarzik	weak ACK, mostly dont care, needs rebase
1636	7434039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434039	Diapolo	Rebased and ready to merge.
1634	7291569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7291569	gavinandresen	ACK, with one quibble: could you explicitly say what previously-using-testnet3-users have to do to start fresh? e.g. "remove everything but wallet.dat from your .bitcoin/testnet3 folder."
1634	7291683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7291683	gmaxwell	Updated the commit message.
1634	7291808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7291808	jgarzik	ACK
1633	7289282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7289282	gmaxwell	Hm. Doesnt this break tools just as much as changing the magic would?
1633	7289694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7289694	gavinandresen	Depends on the tool; tools that read blk*.dat will not break with this change, but do break changing the magic bytes. Network-speaking tools will have to be up-to-date with PROTOCOL_VERSION.
1633	7289745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7289745	gavinandresen	PS: I dont want to spend a whole lot of time on this, because out-of-version testnet nodes is a problem that should eventually solve itself (people will eventually upgrade).
1633	7289787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7289787	jgarzik	Frankly, I like changing the protocol magic more than adding a minimum-version. Changing the protocol magic (a) guarantees only compatible test clients communicate, while (b) leaving open the possibility that testnet3 may appear in a private backport or luke-jrs public backports. Setting a minimum protocol version is easy, but the issue we are trying to solve is -wholly unrelated to protocol versioning-. A version-3 client with the latest genesis block should be able to talk testnet3, for example.
1633	7290402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7290402	gavinandresen	okey dokey. So.... we all have testnet3-with-existing-magic-bytes blk*.dats on our hard disks. Whats the migration plan if we change the magic bytes?
1633	7292267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7292267	gavinandresen	changing magic bytes it is.
1632	7269291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7269291	laanwj	Much better indeed
1632	7271703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7271703	Diapolo	Of course ACK to such a thing.
1632	7331525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7331525	laanwj	Oops, seems this needs rebase now, it conflicts with #1571.
1632	7432712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432712	jgarzik	sigh, weak ACK, needs rebase. a few quibbles, nothing NAK worthy: - I prefer "nIds" construction, as it separates the variables precise spelling. addrinfos etc. - "ciphertext" is valid and common - ditto "filename" - "cleanup" and "whitespace" are common even if invalid
1632	7434590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434590	luke-jr	Rebased and fixed s spelling qubbles. However, I left nIds and addrinfos, because: - "nIds" construction is invalid grammar - nIds is in fact used as a variable name already - addrinfo is not a variable name at all (CAddrInfo is a class)
1628	7202707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7202707	Diapolo	Looks like a lot of work :) and looks good. String was changed in the source, in the english master and all translation files. We just need to remember to push the new master to Transifex, before merging new translations from there.
1628	7267663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7267663	laanwj	A hint to save some work for next time: you only have to update the _en .ts file in the git repo. The rest comes from Transifex.
1628	7269734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7269734	glondu	I used sed. It was not that much work.
1623	7405392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7405392	sipa	Wont hurt, but not sure what the effect is, if nothing observable happens...
1623	7418647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7418647	Diapolo	The effect is we dont have an empty field there ;).
1623	7600624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7600624	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1623	7684190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7684190	laanwj	Im not seeing much of an advantage here either. But I suppose its good to be explicit (especially as the target name is overridden later for MACOSX).
1621	7166244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7166244	jgarzik	ACK
1621	7166453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7166453	Diapolo	ACK
1621	7166679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7166679	gavinandresen	ACK
1620	7166502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7166502	Diapolo	In general I like to put the name ``Bitcoin-Qt`` in place as official client name, I just think it needs a finer thinking about where it makes sense and how.
1620	7169342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7169342	laanwj	NACK. Ive been clear on this before. End users have no idea what "Qt" is, so it shouldnt appear that prominently in the interface. Its just a technical detail. Like putting the programming language in the title. The focus should be on "Bitcoin" itself, not that it is a UI or what library happens to be used to build it.
1620	7170805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7170805	luke-jr	Its the client name. How are users to differentiate Bitcoin-Qt from other clients they may have installed? Specific clients shouldnt claim to be "Bitcoin" or it will confuse users into thinking Bitcoin *is* the software.
1620	7170880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7170880	laanwj	Thats not the client name. I think thats where the confusion comes from. Bitcoin-qt is the name of the UI project before it got merged into here. And the focus should be on the underlying system, not the UI. If this client has any name beyond "Bitcoin reference client" its "Satoshi".
1620	7170918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7170918	laanwj	Anyway, Im fine with any name but I think naming should be s call as project lead.
1620	7171868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7171868	luke-jr	I guess I see it as the same Bitcoin-Qt project mainly by (ie, same maintainer = same project), and the project lead of bitcoin*d* (which happens to share the same git repository). I dont really care what you choose to name the client, but *some* distinction between Bitcoin and this Bitcoin client is needed.
1620	7174978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7174978	Diapolo	Just for clarification, bitcoind is also a Bitcoin client, yes? When someone talks about bitcoind my association is hey thats the official / reference command-line Bitcoin client. If one talks about Bitcoin-Qt I associate the official / reference GUI Bitcoin client with it. Thats no pro or con, I just want to understand what others read from a certain name. To summarize: Bitcoin as the concept / protocol / technique bitcoind as command-line client using Bitcoin Bitcoin-Qt as GUI client using bitcoind
1620	7180912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7180912	luke-jr	As I see it: - Bitcoin as the concept / protocol / technique / blockchain - "Satoshi" as the reference protocol implementation began by Satoshi Nakamoto, maintained by - bitcoind as the JSON-RPC server began by Satoshi Nakamoto, maintained by - Bitcoin-Qt as GUI client began and maintained by
1620	7186431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7186431	gavinandresen	I agree with laanwj, its fine the way it is.
1619	7155521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7155521	luke-jr	- LevelDB should not be forked unless absolutely necessary; try to get Win32 support upstream first - If it must be forked, the fork should have its own git repository, which can be embedded using git submodules (or just pulled in by gitian for Win32) - Dynamic linking to OS-provided LevelDB should be supported, especially since the fork is only needed for Win32
1619	7155550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7155550	luke-jr	Also, does LevelDB support in-memory db environments for the test suite?
1619	7157433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7157433	justmoon	> If it must be forked, the fork should have its own git repository, which can be embedded using git submodules (or just pulled in by gitian for Win32) Im maintaining the branch here, feel free to fork/clone: It should be pointed out that the "fork" doesnt actually modify a single line of code in LevelDB. LevelDB runs in Chromium (`env_chromium.cc`) on Windows and is heavily tested there, but of course those APIs are Chrome specific. For Mac, Linux etc. it comes with an `env_posix.cc`. For Windows, Edouard wrote an `env_boost.cc`. All I did then was to make the MSVC specific stuff MingW compatible. ([diff](https://github.com/justmoon/leveldb-mingw/commit/81b85db8bf6dde62d80ae5bed33a29ade27129fc)) Let me know if/how we should go about promoting this upstream. Wed probably have the best chances once we also test native compilation on Windows with both GCC and MSVC - which is on my todo list. > Dynamic linking to OS-provided LevelDB should be supported, especially since the fork is only needed for Win32 I agree, there are many bad, but also a few good reasons why people might want to link to their own LevelDB build, so there should be a clean, canonical way of doing it without having to edit build files.
1619	7157476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7157476	mikehearn	Ill wait for Gavin to give his opinion on this before doing any work. Honestly, I dont care about trying to get the Windows support into upstream. The authors/maintainers of LevelDB are some of the most senior engineers at Google. They are, to put it mildly, very busy. Nor do they particularly care about making LevelDB useful outside the Chrome context. As forks go, this one is likely to not be much of a hassle, but upstreaming the Windows/MinGW support likely is. I also dont see any benefit in depending on some other git repository via gitian, or making it easy for people to link against a dynamic libleveldb. There arent any reasons why youd have leveldb on your system. If somebody wants to modify the leveldb code, they could just as easily patch the version in the source tree. I think the whole libraries/dynamic/static/forking thing is a distraction. LevelDB is just code. There are no reasons youd want to have it split out from the main codebase. Nobody should be upgrading the version of LevelDB Bitcoin uses unless they have a good understanding of both codebases, its definitely not something that should just be randomly pulled in via an apt-get upgrade.
1619	7157567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7157567	Diapolo	So should this compile fine on Windows with MinGW and the default Qt SDK GCC (which is currently still 4.4) as it is? Just interested, how much longer takes a compilation with this patch?
1619	7157747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7157747	mikehearn	Try it and find out :-) LevelDB is a small library. It should only take a minute or two more.
1619	7159646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7159646	justmoon	> So should this compile fine on Windows with MinGW and the default Qt SDK GCC (which is currently still 4.4) as it is? LevelDBs build system uses a shell script (`build_detect_platform`) to create a `build_config.mk` file. To build natively on Windows, we would need some other way to generate that file. Other than that, the code should work with MSVC and MingW-GCC - though I havent tested it yet, so there may a few minor issues to fix. > Just interested, how much longer takes a compilation with this patch? On my Ubuntu system, Bitcoin-Qt takes 312.8s to compile (which doesnt change significantly with this patch) and LevelDB takes 13.5s to compile. So the overall increase of the compile time is about 4-5% for me. Note that LevelDB is not currently included in a `make clean`, so you dont rebuild it very often. Maybe it should be though?
1619	7160205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7160205	mikehearn	make clean should work. If you look at the makefile diffs then I tried to ensure itd be run at the right times, at least for the makefiles in src/. Is there a case where that doesnt work?
1619	7160437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7160437	justmoon	``` moon@clymene:/home/ubuntu/bitcoin$ make clean [...] moon@clymene:/home/ubuntu/bitcoin$ ls src/leveldb-1.5.0/libleveldb.a src/leveldb-1.5.0/libleveldb.a ```
1619	7160509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7160509	justmoon	Oh I see what you mean - I think you added it to the makefiles, but not to `bitcoin-qt.pro`, so when using qmake if you do a make clean, LevelDB wont be included.
1619	7364545	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7364545	mikehearn	Ive just seen the same issue as Stefan reported, where sometimes hashBestChain seems to go missing from the DB. I havent had time to investigate yet.
1619	7364764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7364764	justmoon	For reference, this is the error Mike is talking about. After a clean shutdown, the next start goes like this: ``` Bitcoin version v0.6.1-523-g2af483b-dirty-beta (2012-07-02 17:41:31 +0200) Startup time: 07/24/12 08:40:11 Default data directory C:\Users\moon\AppData\Roaming\Bitcoin Used data directory C:\Users\moon\AppData\Roaming\Bitcoin Bound to [::]:8333 Bound to 0.0.0.0:8333 Loading block index... Opening LevelDB in C:\Users\moon\AppData\Roaming\Bitcoin\txleveldb Opened LevelDB sucessfully ERROR: CTxDB::LoadBlockIndex() : hashBestChain not found in the block index block index 243ms Loading wallet... dbenv.open LogDir=C:\Users\moon\AppData\Roaming\Bitcoin\database ErrorFile=C:\Users\moon\AppData\Roaming\Bitcoin\db.log nFileVersion = 69900 Error loading block index database [...] ```
1619	7399074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7399074	sipa	Id like to have all database-breaking changing merged at once, as I dont wed like to either support many different combinations of database environments, or force users to regularly rebuild or at least reindex their database. Im specifically referring to Jeffs attempts to split the database in several parts, and my "ultraprune" branch (though we should first do benchmarks to check the performance of combining both). Also, ultraprune has an abstract class to represent the coin database, and Ive already implemented an std::map-backed implementation, so whether or not the database itself can be memory-backed is not much of an issue anymore.
1619	7420822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7420822	mikehearn	My concern with that is we need better performance right now, because miners have been observed dropping transactions to ensure fast block propagation. Pruning is a more complex change with unresolved questions like how to ensure we have a good enough collection of archival nodes, how they are found, etc. I guess it also improves performance (maybe?) due to the smaller working set - combining these branches and getting some performance metrics would be useful. Jeffs work I think is subsumed by this because leveldb is structured as lots of small files already. On 31 Jul 2012 16:03, "Pieter Wuille" < reply@reply.github.com> wrote: > Id like to have all database-breaking changing merged at once, as I dont > wed like to either support many different combinations of database > environments, or force users to regularly rebuild or at least reindex their > database. > > Im specifically referring to Jeffs attempts to split the database in > several parts, and my "ultraprune" branch (though we should first do > benchmarks to check the performance of combining both). > > Also, ultraprune has an abstract class to represent the coin > database, and Ive already implemented an std::map-backed implementation, > so whether or not the database itself can be memory-backed is not much of > an issue anymore. > > --- > Reply to this email directly or view it on GitHub: > >
1619	7420932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7420932	luke-jr	IMO, the solution to block propagation is to relay before doing any of the heavy per-transaction lifting anyway. Anything else just reduces the problem, but doesnt eliminate it.
1619	7420943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7420943	Diapolo	As I still had not the time to test it another question. This does not replace the blk000x.dat files, which are no "database", right?
1619	7423774	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7423774	sipa	The reason Im pushing ultraprune is exactly because of the performance improvements. If I disable signature checking, importing the entire blockchain (using -loadblock, a few weeks ago) took 7 minutes on my laptop (6 minutes when on tmpfs instead of disk, 5 minutes when I use an std::map-backed store instead of BDB). It was originally intended to reduce storage requirements and permit pruning, but because of the much smaller working set, there is a very significant speedup. Pruning isnt even implemented right now (but would be trivial), and I need a bit more time to do tests to verify that it works exactly as the current validation engine, but apart from that, it is mostly functional. I hope to have a pull request soon.
1619	7427531	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7427531	justmoon	> As I still had not the time to test it another question. This does not replace the blk000x.dat files, which are no "database", right? Thats correct.
1619	7600773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7600773	BitcoinPullTester	Automatic sanity-testing: FAILED, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not merge cleanly onto current master 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32
1619	7757667	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7757667	mikehearn	I rebased and fixed up the unit tests that no longer worked. It uses an in-memory leveldb for the tests now. Also made qmake clean work, but it relies on a horrible hack that assumes things about how qmake works internally. I didnt find a better way to do it, unfortunately. AFAIK this now resolves all issues except for Lukes comments, but as mentioned before, I dont plan on doing anything about that unless Gavin requires it because it seems like a lot of work for no benefit.
1619	7757902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7757902	luke-jr	No benefit? Id think improved maintainability and socially acceptable distribution of the client, not to mention the benefit of Win32 support for other projects if LevelDB accepts the patches upstream, are pretty obvious benefits. It shouldnt be much work, either.
1619	7757945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7757945	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32
1619	7758638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7758638	mikehearn	I think Jenkins was building an earlier version. I did two forced pushes fairly close to each other. Hopefully itll try again soon. The main reason I dont see much benefit is I dont really expect leveldb to change from this point onwards. If upstream doesnt change then having it be a separate library doesnt achieve much. The patch were using wouldnt be accepted upstream, I already asked. Sanjay wants raw Win32 usage, not via boost. We already depend on boost so it makes no difference for us. But the env files would have to be rewritten and tested by a Windows developer.
1619	7759455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7759455	jgarzik	Most of the requests are not reasonable, but I do agree about wanting to avoid forking Windows support. Is there a technical reason why straight Win32 API cannot be used? I looked through env_boost.cc and port_win.cc, and it seems like a doable task. Several of the functions in env_boost.cc would become quite a bit shorter, possibly just one line, if you just used the standard Windows APIs. IMO get Windows support upstream, then clone. We dont want to maintain a _fork_ I dont think.
1619	7759541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7759541	laanwj	I think its OK to maintain our own database within the bitcoin source base. This gives more control, and prevents unexpected data format changes and incompatibility (as we have seen with BerkelyDB...).
1619	7760115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7760115	justmoon	> Is there a technical reason why straight Win32 API cannot be used? I looked through env_boost.cc and port_win.cc, and it seems like a doable task. Yes it is doable as evidenced by the fact that it has been done: This file is woefully out of date Im afraid. But it should allow even somebody with very lacking Win32 API skills to complete this project in a reasonable amount of time. Since I want a Windows port of LevelDB for the Windows version of BitcoinJS and since we do *not* have a dependency on Boost, I shall have a go at it.
1619	7760425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7760425	sipa	I have no problem with keeping a fork in our codebase for now. The code is small, and as mentioned, it makes us safe(r) from incompatible database file changes. If a Win32 support gets merged upstream, we can still consider switching back.
1619	7760769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7760769	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32
1619	7763606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7763606	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32
1619	7765978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7765978	luke-jr	Why is it unreasonable to keep a separate git repository for a separate codebase? Its trivial (would take about 15 minutes to setup), harmless, and has much to gain (upstream *can* merge it, directly). If doesnt want to spend 15 minutes on it, I wouldnt object to doing it myself...
1619	7766703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7766703	jgarzik	A separate git tree is a messy headache... but hey, LLVM does it with clang.
1619	7766954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7766954	sipa	Oh I was just commenting on whether or not to maintain our own LevelDB branch. I dont mind doing it in a separate git repository, though I dont have a preference.
1619	7778004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778004	laanwj	Id prefer to keep everything that is needed to build bitcoin together in one repository. Ive worked with git submodules before, and its a pain. Im sure if its a pain for me its especially for new contributors that dont know the system. Splitting up the repository is useful for really large and modular projects, neither applies to bitcoin. We can always remove it again *if* upstream ever decides to merge it (which they will not do until a rewrite so...).
1619	7778750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7778750	luke-jr	Guess we better import libstdc++, G++, etc... Upstream doesnt even have to merge anything for most builders. The LevelDB fork is *only* needed for Windows - which is already stupidly difficult without gitian, and gitian can easily pull in any repo it needs.
1619	7781069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7781069	laanwj	If it is decided to include leveldb: - We should not hardcode the version number (1.5.0) inside the repository, and thus rename the directory to src/leveldb - Im not sure building the .a separately is needed. It makes the qmake file (at least) pretty ugly. Is it possible to include the .cc files that we need in the build project like we do with spirit-json? Im not sure this is a good idea either but I agree with that the current "nested build" setup is pretty ugly
1619	7788063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7788063	jgarzik	Building internal foo.a files is not ugly -- it is normal for large projects. _And_ it usually helps improve link times. Im certain Qt can handle it somehow.
1619	7788172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7788172	laanwj	This has nothing to do with qt; most bigger qt projects use cmake... qmake is pretty much a hack itself
1619	7900638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7900638	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1619	8162593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8162593	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1619	8735245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8735245	mikehearn	Closing this as it should be merged as part of ultraprune.
1617	7152305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7152305	laanwj	In that case, why not just "Show/Hide"? "Window" doesnt tell the user anything, either.
1617	7152412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7152412	Diapolo	Window tells the user we are talking about the Client window, no? Im fine with "Show / Hide" though :).
1617	7152445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7152445	laanwj	It tells the user that what gets hidden/shown is a "window". Which is always the case... its just too generic so better to leave it out.
1617	7272454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7272454	Diapolo	Do you agree with this small pull after the last rebase?
1617	7602832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7602832	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1617	7707262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707262	Diapolo	Anything I can do to get this small thing merged after 24 days :-D?
1617	7715324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715324	laanwj	Kind of lost track of this, github should really add a way to assign pull requests. There is a string freeze for 0.7.0 now but it can be merged after that.
1617	7715493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715493	luke-jr	Eh, GitHub *does* let you assign pull requests... you just need to do it from the Issues list
1617	8115785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8115785	Diapolo	Is that string freeze still persistent or does this make it into 0.7 final? Just wanted to know :).
1617	8120077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8120077	laanwj	Yes this can go into rc2, though we should merge it and push to transifex asap so people have a little time to translate it. Please remind me if I forget this today.
1617	8120126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8120126	Diapolo	Will do that, btw. I always hope you dont feel set under pressure by my remainders :) but as GUI master I need you ^^.
1615	7132073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7132073	jgarzik	ACK
1614	7267616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7267616	laanwj	ACK, this is a proven way to improve security (or at least it should limit damage of exploited bugs in a lot of cases).
1614	7302606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7302606	laanwj	Its fine with me now. We need some of the other devs to take a look at this.
1614	7303650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7303650	Diapolo	I hope anyone is using Windows or at least appreciates DEP support ;).
1614	7405479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7405479	sipa	Looks good, but I cannot test whether it works as intended.
1614	7418632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7418632	Diapolo	As I feared, no core dev is on Windows :). Can someone try if this compiles fine or how can we go on?
1614	7448893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7448893	laanwj	You tested it yesterday with code on the stack, and it worked. Shall we be bold and merge this? Its the same code as used by Tor so we cant go much wrong.
1614	7449386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7449386	Diapolo	I strongly encourage you / the core devs to merge this. IF (what I dont expect to happen) there are errors, we can easily fix / disable this patch during the coming RC phase. Its a great security benefit with little code IMHO!
1614	7604215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7604215	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1614	7680458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7680458	luke-jr	Does this work on ReactOS? (I think it should be merged either way)
1614	7684227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7684227	laanwj	Im fine with merging this as long as it does not crash on any platform. It doesnt worry me if it doesnt manage to enable DEP on some more obscure platform. Until a developer steps up and cares about ReactOS, support for that is not a concern.
1614	7707304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707304	Diapolo	Im not able or really willing to test this with ReactOS ^^, but as I just use the Windows-API here with no bad things happening, when the code fails, I think this is fine.
1614	7715690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715690	laanwj	To go even further (for 0.8?) we should add the following MinGW linker flags on win32: --dynamicbase The image base address may be relocated using address space layout randomization ( ASLR ). This feature was introduced with MS Windows Vista for i386 PE targets. --nxcompat The image is compatible with the Data Execution Prevention. This feature was introduced with MS Windows XP SP2 for i386 PE targets.
1614	7720125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7720125	Diapolo	I use these 2 linker flags since a few weeks now for my local build and they work fine. I just wanted to ensure at least basic DEP gets in before 0.7 and wanted to create another pull for ASLR and DEP linker-flags after this got in :).
1612	7359754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7359754	gmaxwell	Good idea, Ive noticed this being slow in some of my tools. Unfortunately, during a reorg I think your cache could end up pointing off into space. Its probably fine to just invalidate the cache every time the chain is updated.
1612	7433473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433473	jgarzik	or do what pynode does, and maintain a (height)->(list of block hashes) index... ;) weak ACK, but sounds like it needs updating based on s comments
1612	7435511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7435511	luke-jr	Moved to main.cpp and added code to clear the cache whenever the best block changes.
1612	7436218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7436218	gmaxwell	Tests out fine for me.
1607	7057326	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7057326	laanwj	Hm, nice to add some metadata, but it adds yet another place to update the version number. That sucks... Maybe only add the major versions?
1607	7057398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7057398	Diapolo	I guess this could be scripted in the Gitian process, but Im no Linux-Script guy. I would love to see this added and Im fine with major version numbers (e.g. 0.7.X.0), but could take a look here and update when needed :). Its also possible to include a header with that version stuff, but its only allowed to consist of the version #defines. So our version.h did not work, too bad.
1607	7096050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7096050	laanwj	"makes bitcoin-qt.exe a bit more trust-worthy" thats an interesting claim :-)
1607	7096124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7096124	Diapolo	Why? When I use the tool ProcessExplorer, which is able to show some internal informations of running processes, handles and so on, I consider an application that provides no meta-data as suspicious on the first look. I think its a good style to supply such meta-data.
1607	7096167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7096167	laanwj	Heh, you meant "makes bitcoin-qt.exe *look* more trust-worthy". Actually becoming more trust-worthy... would be interesting, that was the joke. Im for merging this of course. Cant we remove the version completely, for now, until someone sets up a script to insert it automatically?
1607	7097222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7097222	Diapolo	I meant *look* more trust-worthy, which is a personal thing, so yes ;). Well I could simply comment out the version #defines but I fear no Linux dev who is able to write shell scripts is willing to put work into this ^^. Im going to take another look at this issue now. Edit: Btw. is version.h missing by intent from HEADERS += in the project file?
1607	7106208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7106208	gruez	>more trustworthy wow really? thats about as effective as naming bitcoin-qt.exe to legit_bitcoin-qt.exe
1607	7116052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7116052	Diapolo	I split the needed version stuff into versionrc.h ... still a manual solution, but a small step perhaps to one who can help automating this :-D.
1607	7272376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7272376	Diapolo	Updated FileDescription string and I was able to change the language property to display neutral language, which is better, because we have quite many translations in.
1607	7605529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7605529	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1607	7715905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7715905	laanwj	Can we merge this without the version for now? Just add base metadata for this pull, and do the scripting stuff in a later pull.
1607	7720222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7720222	Diapolo	I can comment out the version stuff in the .rc file and remove the header for now. But to not forget about this Ill re-open a pull after the basic one is in okay?
1607	7720614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7720614	Diapolo	Last update removed all version stuff (for now), see the screenshot in the first posting.
1607	7722863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7722863	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1607	7824505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7824505	sipa	ACK
1606	7040439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7040439	jgarzik	ACK
1605	7032148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7032148	Diapolo	Tried this with p2pool and P2pool as labels for an address, the new sort is p2pool -> P2pool and as such this seems to work and ACK!
1605	7053680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7053680	gavinandresen	ACK
1598	6982555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6982555	gmaxwell	If other people want to remove this I dont care though sometimes Ive found the commented out debugging code useful, at least so long as its not bitrotted. "Ah, here is where/how I can print this if Im working on it."
1598	6994174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6994174	TheBlueMatt	I actually uncommented that line yesterday while testing something, and I wasnt even aware we had a block.print() function until I saw it conveniently in the code I was looking at...
1598	6994405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6994405	Diapolo	A dev is free to close this, when you want to keep it. At least such a pull can lead to think again over certain parts in the code and thats also positive IMHO :).
1598	7013827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7013827	laanwj	I dont care about removing this. Lets just keep it if it is useful sometimes. BTW this is not the traditional meaning of "dead code". That term usually applies to code that is never executed, not comments.
1598	7017394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7017394	Diapolo	Understood!
1597	6975273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6975273	luke-jr	Gitian is currently Ubuntu-only; how does this attempt to address that? Vagrant is also Ruby, which is itself not a platform-independent dependency.
1597	6975457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6975457	maaku	By "platform-independent" I meant any platform where the bitcoin reference client currently runs. Vagrant is a tool for specifying the state of VirtualBox instances, so this is necessarily limited to platforms that VirtualBox run on (Mac OS X, Windows, Linux, and Solaris on x86_64). Ruby runs on all of those platforms too. What these scripts do is build a VirtualBox instance containing Ubuntu 12.04, then calls Gitian with USE_LXC=1. It also patches gitian and the gitian build scripts as needed to run within VirtualBox, downloads the various dependencies, etc.
1597	6976738	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6976738	luke-jr	I see, that does sound possibly useful.
1597	6980917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6980917	laanwj	Great development! At least Virtualbox runs on more platforms than KVM, which is Linux-only. How is Ruby *not* platform independent? AFAIK it has been ported to neigh everything, just like Python.
1597	6981132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6981132	luke-jr	I meant in terms of it not being a standard component of most operating systems. But it occurred to me that Im not the audience for this patch anyway, and the audience its intended for probably couldnt care less whether they have Ruby installed or not.
1597	6994192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6994192	TheBlueMatt	I think this is awesome, but Im not so sure about putting it in bitcoin itself, would it not make more sense to put this in gitian-builder and then let it read the gitian descriptors?
1597	7055876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7055876	devrandom	Id be up for merging the appropriate parts into gitian-builder. Pull request welcome.
1597	7073505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7073505	maaku	Just to be clear, very little of this pull request has anything to do with gitian. and I had a discussion about this on IRC, and I agree now that it would have been better if I had never mentioned gitian. The purpose of these scripts is to enable a developer on Windows to create Windows binaries, or a Mac developer to generate Linux binaries (two actual use cases I encountered), as well as any other combination of build-host system. Gitian is being used simply because it is the most reliable process for doing cross-platform builds of bitcoind and Bitcoin-Qt. Included are are a handful of fixes required to get gitian running within an already-virtualized environment, and in time (aka, when I or someone else has time) those patches will be generalized and submitted upstream to gitian-builder. But that should be a minor footnote. This is really about doing cross-platform or local builds without complicated dedicated build servers.
1597	7606957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7606957	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1597	9051193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/9051193	gavinandresen	I gitian-built the 0.7.0 release on my Mac inside a VirtualBox (running Ubuntu) -- see the last part of contrib/gitian-descriptors/README for what worked for me. Keeping the contrib/vagrant/patch/*.patch files up-to-date with any changes to the gitian-builder/ files looks like something were very likely to forget to do, and Im hesitant to have Yet Another Way to build (weve already got gitian-KVM and gitian-LXC).
1597	10434939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10434939	jgarzik	meh due to maintenance burden as points out (but pointedly _not_ NAKing, in case somebody else disagrees, and wants to pull)
1597	12236286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12236286	gavinandresen	We cant keep up with the pull requests and features weve already got. Closing this, because we dont have bandwidth to test/maintain.
1596	7027987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7027987	laanwj	Shouldnt the absolute path not be hardcoded in the makefile in the first place?
1596	7053719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7053719	gavinandresen	Pulled. Fixing the hard-coding can be done is a separate pull if needed.
1594	6981376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6981376	laanwj	I dont think we should be making this many changes just for the testnet. The testnet is just for testing, and it is supposed to behave just like the mainnet (at a much lower level than the UI), so there should be as little special casing as possible.
1594	6982196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6982196	Diapolo	Alright, but then testnet3 will not catch-up as long as testnet2 our node connects to them. Anything else in here that you think is merge-worthy? Im fine with removing the testnet3 check but think the other small things are nice to have.
1594	7028471	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7028471	laanwj	Yes, apart from the nXXX and strXXX variable convention that youre trying to sneak in :p, the other changes are OK with me.
1594	7028954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7028954	Diapolo	Ill update this to be mergable ... you "catched" me again with that var names, heh ;)? But thats fine.
1594	7034292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7034292	Diapolo	Updated to "only" be a small function update ;). I guess if we dont plan to push a fix for #1588 Ill just close it.
1594	7078898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7078898	burger2	It would be nice to fix the testnet3 bug. But it might be fixed automatically when everyone is running 0.7.x.
1594	7078946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7078946	Diapolo	Yes, when more nodes are running 0.7.x everything will be fine again.
1594	7080006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7080006	laanwj	If it ought to be fixed, it is on a deeper level than the ui, and not by special casing the testnet. Remember that the testnet is there to test how the client behaves in circumstances that are possible but unlikely on the main net. Special casing for testnet could effectively cover up problems.
1594	7115036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7115036	Diapolo	I had a talk with sipa about the underlying issue a few days ago and you are right of course. Thats why the testnet3 casing is gone from this pull ;).
1594	7272472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7272472	Diapolo	As this pull is now unrelated to testnet3, anything more I can do here?
1592	6956208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6956208	laanwj	Mind that normal users dont have a clue what "Qt" is. If you want to give it a name, its the "Satoshi" client.
1592	6956274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6956274	Diapolo	Well I have the impression Bitcoin-Qt is a widely accepted name: We then should define how we want a CLIENT_NAME_QT to be and how we use this one definition all over the Qt version, right? Edit: This should be used in the Window title, about and so on... currently we have no real standard there.
1592	6956364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6956364	laanwj	Its a well-accepted name in developer circles, and its fine for things such as executable names and internal identifiers. But Im doubtful about putting it in the interface. I vote for keeping the title as it is, were the reference client so we dont have to change the title to distinguish ourselves :-) When people are asked what version they are using they should check Help->About.
1592	6956436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6956436	Diapolo	Perhaps its easier to keep it, but its inconsequent and we are more than a wallet IMHO. We have Help->About <b>Bitcoin-Qt</b> and the popping up dialogs title is <b>About Bitcoin</b>. I would love to see some better strings for all of this in our reference client. But no ACK or suggestions means it stays the way it is ^^. Oh and the string ``Satoshi`` is only mentioned in the Debug window Qt-wise ;).
1592	6957331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6957331	Diapolo	I have thought about it a little more and I have some suggestions: 1. Rename Window title to ``Bitcoin-Qt - Wallet`` -> Bitcoin-Qt is the GUI to Bitcoin and this keeps Wallet but separated by "-" to ensure users dont think the client is called "Bitcoin Wallet". 2. Rename ``About Bitcoin-Qt`` -> ``About Bitcoin`` -> We show version stuff that is not the Qt client version, but the Bitcoin "core" version. 3. Rename ``Client`` in the Debug window -> ``Core``, ``Bitcoin Core`` or ``Core Client`` -> This is clearer in terms of we use the Core and have the Qt GUI on top. Oh and for not knowing Qt, we have an ``About Qt`` in the GUI :). What do you think?
1592	6957466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6957466	laanwj	Yes, good proposal, except for the Qt in the title. Qt in the about box/menu is fine, people will look there to find detailed version information. Also note that in the future well have the possibility of multiple wallet windows open, as multi-wallet support is introduced. So its good to keep the title short.
1591	6955482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6955482	laanwj	ACK
1590	6943969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6943969	luke-jr	Does this include the improvements in #1240?
1590	6951407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6951407	gavinandresen	: no, it doesnt include anything from #1240. The steps towards better fee handling, as I see them, are: 1) Get miners to prefer including higher fee-per-kb transactions in their blocks. Thats what this pull request does. 2) Once a significant number of miners are doing that, modify the client to estimate what fee (if any) is needed to get into the next block or six, and let the user include a fee on a transaction-by-transaction basis. 3) Make more improvements to the transaction selection algorithm, like considering dependent transactions fees when selecting what to include in a block (part of #1240), and roll that out to miners and clients.
1590	6951459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6951459	luke-jr	#1240 does both 1 and 3, and is well-tested...
1590	7239641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7239641	gavinandresen	Reworked a little bit after getting some feedback from the big mining pools (added options -maxblocksize and -maxfreesize). : I spent most of today looking carefully at how your proposed priority mechanism (the age*weight1 + fee*weight2 formula) and this one actually behave with the transactions that are in the main networks memory pool right now (I implemented just the "change the priority calculation" part of #1240 and ran it). And I came to the conclusion that with your scheme it will be hard to get the weights right, and miners will have no idea what theyre trading off if we give them the ability to fiddle with the weights. I wrote the code, and couldnt predict how many free transactions would be included in a block if I made weight1=1 and weight2=1000. I like this method better; it is clear what will happen if you set -maxblocksize=50000 and -maxfreesize=10000 (defaults are 250,000 and 27,000 which match the behavior of previous releases).
1590	7239694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7239694	luke-jr	How can I, with this version, prioritize by fee alone (only using age when fee is identical) and still include as many free transactions as possible?
1590	7240839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7240839	gavinandresen	: you cant. Prioritizing by fee alone is too easy to game (spammer includes a 1-satoshi fee with all their transactions and crowds out all the zero-fee transactions). Sorting by significantly-greater-than-zero-fee first, and then filling up to -maxblocksize with free transactions would also be easy to game (just send lots of zero-priority zero-fee transactions to make the miner always create -maxblocksize blocks). Or all the SatoshiDice fee-paying transactions would crowd out old clients that expect that their high-priority free transactions will get into a block eventually.
1590	7251081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7251081	gavinandresen	: I think we could safely get the behavior you want by introducing another parameter: lets call it -blockminsize. The rules would then be: Up to -blockprioritysize, insert transactions based on priority. Then insert as many fee-paying transactions as will fit, to a max of -blockmaxsize. If the block is less than -blockminsize big, fill up to -minblocksize with free transactions (where "free" is less-than-TX_MIN_FEE per kilobyte, to exclude 1-satoshi-fee attacks) Youd set -blockprioritysize=0, and set -blockmaxsize and -blockminsize to the size of blocks you want to create, and youll get always-sorted-by-fee, include-free-if-there-is-extra-room. Depending on your block size, I believe these days your blocks would contain no free transactions, though, due to all the SatoshiDice fee-paying return transactions. My only concern is that three different sizes is a lot of knobs to explain.
1590	7256552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7256552	luke-jr	Better to have undocumented options, than not have them at all because theyre too hard to document. IMO.
1590	7260018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7260018	gavinandresen	Implemented -blockminsize, and cleaned up the implementation (use std::heap for the priority queue). Behavior with default values on the network right now looks reasonable; blocks have a dozen or so high-priority transactions, then are filled with fee-paying transactions. Blocks created are between 60 and 100K big
1590	7285025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7285025	jgarzik	ACK
1589	6936301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6936301	laanwj	Shouldnt you lock all accesses of the proxy settings, not only in the UI code? Also, where is `cs_proxysettings` defined?
1589	6936502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6936502	Diapolo	The bug report made me think the problem needs fixing only in the optionsmodel ... Im not sure here. The definition was missing in the pull, its there now.
1589	6936564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6936564	laanwj	You need a LOCK around every place where the data structure you want to protect is accessed. Defining the critical section locally in a function makes no sense.
1589	6936676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6936676	Diapolo	I saw this in the code somewhere else, feeling a little dumb now. I dont want to fiddle around further! Can we lock ``proxyInfo`` and ``nameproxyInfo`` in ``SetProxy()`` and ``SetNameProxy()``? Where should the CCriticalSection be placed? Or is there one we can re-use?
1589	6947364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6947364	Diapolo	As this seems not matured, Ill close this for now. Any help here is greatly appreciated :).
1589	6951398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6951398	laanwj	I recommend you read up a bit on parallel programming and synchronization primitives (especially mutexes, in this case), it really helps to know the theory here and its pretty interesting in any case.
1589	6955390	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6955390	Diapolo	Indeed, Ill take a quick tour and try again afterwards ^^.
1586	7433591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433591	jgarzik	and I are definitely interested in this, at least. Will keep this pull request open. A rebase would be nice, if you have time.
1586	7683650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7683650	luke-jr	Unfortunately, it seems p2p connections are handled synchronously, so everything this does to rush out the relaying is for naught. The only simple way I can see to refactor this to be asynchronous would be either to use coroutines (which Boost wont have until 2013) or one thread per command/connection. Either one is probably too late for 0.7, as would be an even larger refactor, I presume?
1586	7683967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7683967	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1586	21292656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21292656	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master This test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly. If you are waiting on a test, please check timestamps to verify that the test.log is moving at Contact BlueMatt on freenode if something looks broken.
1586	23221223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/23221223	jgarzik	Closing - timeout. Interesting proposal, needs more work and dev momentum.
1585	7028152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7028152	laanwj	This is really inconsequential. I think this list syntax was auto-generated by Qt creator, no need to change it.
1585	7028919	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7028919	Diapolo	I looked into some .pro files from the Qt examples, but you are free to close this (as always, when pulls are not needed / have no real value in the end).
1585	7030169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7030169	laanwj	Ok, closing this
1582	6905125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6905125	Diapolo	ACK Edit: I created a pull thats based on your changes here.
1580	6904466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6904466	Diapolo	Seems all location tags e.g. ``<location filename="../forms/addressbookpage.ui" line="14"/>`` are removed, you seem to have changed the default lupdate options, was this intended? Im interested which full lupdate command-line was used?
1580	6904515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6904515	laanwj	Ive used `lupdate -no-obsolete -locations none`. By removing the location information, this will result in smaller diffs in the future. Hopefully it has no harmful side effects, Im pretty sure that transifex doesnt use the source code location.
1580	6904570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6904570	Diapolo	Thats a good thing in the end, can you also update the translation-process doc to reflect this change :)?
1580	6904645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6904645	laanwj	Yeah, I guess that needs to be updated badly. There is no command line in there at all. Also not that we use -no-obsolete, and no mention of running `share/qt/extract_strings_qt.py`.
1577	6962057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6962057	gavinandresen	checkpoints_def.cpp needs some newlines-- see And would it be better to NOT check in the full checkpoints_def.cpp to git? gitian builders could generate it themselves or download a copy (using github download a file feature maybe).
1577	6962966	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6962966	TheBlueMatt	Oops, yea Ill add some \n, I had previously dropped them because of the increase in file size... Gitian builders are required to have a checkpoints_def.cpp in their inputs, so they have to compile their own in anyway. Its only checked into git so that people who git clone && cd src && make can continue to do that. (and one cant simply build with an empty one as they will end up rejecting the 2 BIP30-invalid blocks which are in the chain before BIP30 was enforced). But if people believe its better to force people building bitcoin to download the file, thats fair too.
1577	7023381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7023381	TheBlueMatt	New version: "\n"s in checkpoints_def.cpp Default checkpoints_def.cpp is now empty with a #warning BIP30 checkpoints are now in checkpoints.cpp using full hashes.
1577	7030426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7030426	Diapolo	So, when doing own builds on Windows I have to use ``-saveblockcheckpointfileto`` to generate a new ``checkpoints_def.cpp``? If this is the case wouldnt it be nicer if I dont need to specify that filename and even as default src\ is used :)?
1577	7036057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7036057	TheBlueMatt	If you are running bitcoin-qt, the output would be src/checkpoints_def.cpp, or if you are running it on windows, it would be ../src/checkpoints_def.cpp, or if you are running bitcoin it would be checkpoints_def.cpp...I dont really feel like doing some #ifdefs there...
1577	7053920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7053920	gavinandresen	Not loving this: If I get rid of the compile #warnings, then I get a dirty tree, and I know sooner or later Ill accidentally commit checkpoints_def.cpp. It will be considered a dirty git tree during gitian building, yes? That will screw up the auto-version-determination code... Also, with a generated checkpoints_def.cpp, I get a gazillion: checkpoints_def.cpp:185334: warning: this decimal constant is unsigned only in ISO C90 I think adding the 4 checkpoints and doing BIP30-check-all-except-checkpointed-blocks is the right thing to do.
1575	6880921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6880921	Diapolo	If this works very cool, currently preparing a test! One thing (unrelated to the problem), could you harmonize the order in ``checkBalanceChanged()`` and ``updateTransaction()`` when the emit is called. Either first update the vars and then emit or first emit the signal and then update the vars. I dislike such small coding discrepances, cant help.
1575	6899554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899554	laanwj	Changed the order. It indeed makes sense to first update the variables and then emit the signal, so that calls to getXXX in the signal handler return the new value.
1575	6901860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6901860	Diapolo	I currently cant verify as my testnet coins are immature, so I cant empty my wallet -_-.
1575	6960652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6960652	Diapolo	I made a test on testnet, which was succesfull a day ago and a few seconds ago on a mainnet wallet, which also works like expected. Amounts get cleanly updated. ACK
1574	6873368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6873368	laanwj	This is wrong. `:` means AND, not OR.
1574	6873562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6873562	Diapolo	There is no OR afaik. Is there any use for the code, if the first check is false (means we are on Windows) but we set USE_BUILD_INFO=1? If not it still should be correct. At least the current ``||`` is wrong either as it tries to run the code, when compiling on Windows ;).
1574	6873659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6873659	laanwj	It means "Not on windows OR USE_BUILD_INFO=1". We use USE_BUILD_INFO in the gitian build. If you replace it with "Not on windows AND USE_BUILD_INFO=1" you change the meaning completely. For non-windows platforms you dont have to set USE_BUILD_INFO=1 but its default.
1574	6873672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6873672	laanwj	`There is also the | operator to act like a logical OR operator, joining together a number of conditions, and requiring only one of them to be true.`
1574	6873908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6873908	Diapolo	What am I doing ... I read the exact same document ^^. Will update to use the ``|`` operator, which is THE fix how it should be :). Edit: Updated!
1574	6899049	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899049	Diapolo	Can you take a look at this and comment :)?
1574	6899642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899642	laanwj	Have you tested all the cases? At least both windows ones, with and without USE_BUILD_INFO?
1574	6899770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899770	Diapolo	tested on Windows 7: !windows with USE_BUILD_INFO=1 set -> Regenerating src/build.h !windows with USE_BUILD_INFO=0 set -> (no message) windows with USE_BUILD_INFO=1 set -> Regenerating src/build.h windows with USE_BUILD_INFO=0 set -> Regenerating src/build.h
1574	6899895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899895	laanwj	Seems the wrong way around, it should be: !windows with USE_BUILD_INFO=1 set -> Regenerating src/build.h !windows with USE_BUILD_INFO=0 set (or no USE_BUILD_INFO) -> Regenerating src/build.h windows with USE_BUILD_INFO=1 set -> Regenerating src/build.h windows with USE_BUILD_INFO=0 set (or no USE_BUILD_INFO) -> (no message) qmake is a strange beast. Edit: btw, the newly added message is not correct. It is not regenerating src/build.h in qmake, just adding the necessary step to the makefile.
1574	6901672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6901672	Diapolo	Ill remove the message, just helps debugging currently :). -> removed ``!windows`` on Windows 7 == false, so: <pre> false OR USE_BUILD_INFO=1 ->Regenerating src/build.h false OR USE_BUILD_INFO=0 (or no USE_BUILD_INFO) -> (no message) </pre> ``windows`` on Windows 7 == true, so: <pre> true OR USE_BUILD_INFO=1 ->Regenerating src/build.h true OR USE_BUILD_INFO=0 -> Regenerating src/build.h </pre>
1574	6903562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6903562	laanwj	Ok, seems like a misunderstanding then, the logic is right. Ive tested on Linux and both with USE_BUILD_INFO=0 and USE_BUILD_INFO=1 the build.h instructions are added. As expected. ACK
1572	6874217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6874217	laanwj	ACK
1572	6935357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6935357	Diapolo	Rebased without further code changes, because I based #1589 on this!
1571	7030145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7030145	Diapolo	The last commits ensures we can easily handle an extended networking page (with additional QValidatedLineEdit fields) in ``eventFilter()`` without duplicating much UI element code.
1571	7153130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7153130	Diapolo	I would like to merge that last commit after you took a look.
1569	6833572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6833572	laanwj	ACK
1567	6829907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6829907	laanwj	Nice! ACK on the code. May need testcases, though there are currently no testcases for CDataStream with SER_GETHASH at all.
1567	6892394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6892394	TheBlueMatt	ACK, though Im interested to see what kind of improvement you see by simply removing duplicated Hash calls.
1567	6896503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6896503	jgarzik	ACK
1567	6961748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6961748	gavinandresen	ACK
1564	6810117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6810117	Diapolo	Updated and removed the global and another #define, which also did not need to be there.
1564	6810474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6810474	TheBlueMatt	There are some useful changes in here, by there appears to be a lot of diff here that has no purpose aside from just providing more diff?
1564	6823514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6823514	Diapolo	Rebased, fixing merge conflict.
1564	6827159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6827159	TheBlueMatt	In terms of the actual code changes in this pull, ACK...the rest of it...dont care, not up to me.
1564	6829699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6829699	laanwj	ACK
1564	6872868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6872868	Diapolo	Rebased fixing a merge conflict and included some changes to the Mac exclusion code (needed after that needed the changed functions in it.
1564	7000093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7000093	Diapolo	Further problems / hints for this one?
1564	7027616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7027616	laanwj	ACK (but needs rebase)
1564	7028606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7028606	Diapolo	Rebased (was needed after the thread names patch) and removed ipcThread() and ipcThread2() from the OSX #ifdef.
1563	6808417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6808417	TheBlueMatt	It seems like that wasnt being used previously?
1563	6809963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6809963	Diapolo	It IS used, when compiling Bitcoin-Qt on Windows directly via the project file. Even if this was not used by us, it is beneficial to users trying to build from source as a clear indication for static Boost 1.49 libs. I myself rely this btw. ;).
1563	6810015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6810015	TheBlueMatt	ah, sorry, cross compiling sets it manually.
1563	6896958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6896958	luke-jr	Can we do anything about the boost patch we require?
1563	6898143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6898143	Diapolo	Supply a working dependency package and add a small comment?
1559	6783666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6783666	Diapolo	Thanks for starting the real fix :), before I test it, can you rebase this to be on top of #1478? #1778 has an ACK, so to not have any merge conflicts this would be better (the real changes are rather small).
1559	6784050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6784050	laanwj	Code looks good. Havent tested yet.
1559	6784572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6784572	sje397	- I had already made those same changes :)
1559	6798536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6798536	laanwj	Good idea to only start the timer when there is immature or unconfirmed balance!
1559	6822383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6822383	laanwj	ACK
1557	6767291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6767291	TheBlueMatt	Unnecessary, possible with QMAKE_CXX/QMAKE_LFLAGS and friends.
1555	6762014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6762014	gavinandresen	ACK
1554	6752753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6752753	jgarzik	Added new commit, to eliminate a dup GetHash in mempool code
1554	6768564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6768564	TheBlueMatt	While you are taking commits out of #1486 that apply cleanly to master, you can try: 3298e89b38a90c9bcdec32ac939c0e6ec5fcea14, 9ad2f5788e80bebad957e89bd7686706ba28dd53 and if you want to be a bit more adventurous, 80e3ac4168da89cf4a78d3974e00e314e9cb0883.
1554	6783785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6783785	gavinandresen	ACK
1551	6728608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6728608	sipa	Interesting. I definitely want shared locks at some point in the future. You seem to implement some own implementation for a recursive shared lock? That certainly needs a lot of testing, as it can easily have subtle bugs. Maybe it is easier to clean up the code so that we dont need recursive locking at all (if all data structures are properly encapsulated, you can put the taking of locks in all entry functions, and never further inside). Also, to get the best performance, youll also need support for upgradable locks. For example, connecting a block has two stages, one where data is read from the backend (inputs fetched from db), and one where the changes are committed. If the first stage happens in an upgradable lock, it can happen concurrently with read-only locks (most RPC queries...), even while protecting that only a single (potential) writer is active.
1551	6735366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6735366	TheBlueMatt	Sadly, boost only provides recursive locking support in boost::recursive_mutex, not in boost::shared_mutex. Thus I had to add recursive checking to CCriticalSection. In terms of making bitcoin not need recursive locks...that would get very ugly. Bitcoin is such a mess as it is, trying to track down all the cases where we depend on recursive locks, I would think, would be quite a bit of effort. Yes something like this needs to be beaten on for a while before merge, but the code is pretty straightforward. Also, Im still adding more test cases. Added upgrade lock.
1551	7613114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7613114	BitcoinPullTester	Automatic sanity-testing: FAILED, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not merge cleanly onto current master 3. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 4. The test suite fails on either Linux i386 or Win32
1551	8284685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8284685	jgarzik	Recommend closing, for now. No ACKs gathered, and it seems to me like a _valid_ tool for our toolbox, without an immediate demonstrated need. Our locks do not seem highly contended, which seems to bump this quite down the priority scale down to "theoretically useful."
1551	8284759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8284759	sipa	Not contended? We have a cs_main that blocks anything useful being done in parallel. Since many tasks only need read-only access to data structures, shared locks could increase parallellism massively. That said, I still disagree with an implementation that releases a lock when trying to go from shared to exclusive.
1551	8285175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8285175	TheBlueMatt	ACK on lack of ACKs
1551	8748568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8748568	luke-jr	FWIW, the new tests in this seem to fail occasionally.
1551	8748698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8748698	TheBlueMatt	Yea, it didnt work 100%, but I never got around to debugging it, and it was never a high priority (no interest anyway...)
1551	8762141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8762141	laanwj	This is a nice idea and will allow for some extra concurrency, but it makes reasoning in the current mess that is bitcoin locking even harder. I agree with sipa that we first need to get rid of recursive locks (and in the meantime, get getter insight into the current mess), before introducing more complex locking primitives.
1549	6718191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6718191	gavinandresen	addnode RPC: cool. getaddednodeinfo : An Object with duplicated keys ("connectedto") is going to cause problems in some languages. And I dont understand the multiple connectedtos-- if I addnode a node, I might get more than one connection to it?
1549	6718551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6718551	TheBlueMatt	Changed to array. Sure, there are a number of scenarios where you may get more than one connection to a given -addnode (when the -addnode is dns and maps to multiple addresses). -addnode itself wont make more than one connection, but you may get an incoming connection, or happen to connect to another ip that is mapped to from your added node.
1549	6721252	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6721252	gmaxwell	Hm. I wonder if it should work instead like this: getaddednodeinfo -> "addednode": [ "dnsseed.bluematt.me", "foobarbaz.onion" ] ^ what you actually have addnoded getaddednodeinfo dnsseed.bluematt.me -> "address" : [ "95.154.99.150:8333", "..."] ^ how they are currently being resolved by bitcoind. And leave the connected status (in/out/not connected) up to getpeerinfo? Otherwise I think the connected status needs to tristate, in/out/not.
1549	6722763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6722763	sipa	I wonder whether addnode is the right thing to expose - it is intended to be used for stable trusted nodes you know and is something more of a config setting. For an RPC, it may be more useful to have a one-shot command "connect now to X, no matter what". Eventually, I think the entire network config should be exposed via RPC, but Id do that via some "setnetconfig [config]" call, rather than specific RPCs for every detail of the config.
1549	6722834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6722834	TheBlueMatt	In terms of listing the full list of addresses the added node resolves to...yes, that would be better. In terms of making the user make two/three calls to get at the info on whether or not a given added node is connected, I entirely disagree here. Ill add a in/out/not connected flag. The goal is to allow a long-running node to add trusted nodes without having to restart. In terms of having a one-shot connection, this was discussed back when addnode was changed, since it used to be a one-off, I was then of the opinion that addnode shouldnt be scrapped to allow for that and keepnode was clearer in this case... In any case, I agree that there should be an option for a one-off connection creator RPC, Ill throw that in when I touch this up (connecttonode?).
1549	6723029	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723029	gmaxwell	Yea, I actually wrote the tristate first and then thought some people might disagree with the duplication. Im pretty sure we should have commands to edit addnode on running nodes. Im tired of restarting my p2pool bitcoinds just to dork around with the addnode settings. Perhaps the oneshot could just be a addnode foo oneshot instead of another RPC?
1549	6751340	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6751340	TheBlueMatt	Tweaked as a result of suggestions. Now you have: addnode \<node\> \<add|remove|onetry\> and getaddednodeinfo [node] getaddednodeinfo may look something like this: [ { "addednode" : "10.232.4.10", "connected" : true, "addresses" : [ { "address" : "10.232.4.10:8333", "connected" : "outbound" } ] }, { "addednode" : "dnsseed.bluematt.me", "connected" : true, "addresses" : [ { "address" : "[2001:470:9ff2:2:a001:3cff:fea5:a49]:8333", "connected" : "outbound" }, { "address" : "174.106.80.125:8333", "connected" : "false" }, { "address" : "88.201.220.137:8333", "connected" : "false" }, ... ] } ]
1549	6751597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6751597	jgarzik	addnode ACK
1549	6898477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6898477	luke-jr	This needs rebasing.
1549	12611079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12611079	TheBlueMatt	Test Plan (can someone run through this to make the powers-that-be happy) : Replace <IP Address> with an IP of a bitcoin node which you can kill/restart at will. Replace <DNS Name> with a dns name which has a very low TTL which you can change to point to a different IP during testing without waiting too long. Note that many actions will only take effect after a delay of up to two minutes, you can change those delays for testing purposes by modifying the Sleep calls in ThreadOpenAddedConnections. Start a node with no outbound connections (-connect=0.0.0.0). RPC "addnode <IP Address> add". Check that a new connection to <IP Address> is made and "getaddednodeinfo true" gives the IP Address as connected/outbound. Kill the node at <IP Address> and verify that it is now reported as unconnected in getaddednodeinfo/getpeerinfo. Restart the node at <IP Address> and verify a new connection is made. RPC "addnode <IP Address> remove" and check that the node is no longer in getaddednodeinfo and still connected (in getpeerinfo). Kill the node at <IP Address> and restart and verify that no new connection to it is made. RPC "addnode <DNS Name> add" where DNS Name is just a simple single IP. Verify a new connection is made and "getaddednodeinfo true" shows the DNS Name in addition to the IP and the connection is outbound. Change the IP Address <DNS Name> points to and verify that there are now two connections open - one to the old IP Address, one to the new. getaddednodeinfo should only show the new, getpeerinfo should show both. Kill both nodes and restart, verify that only the new IP Address gets a new connection. Change <DNS Name> to point to two IP Addresses, verify that only one of the two nodes gets a new connection, kill that node, verify that the other node gets a new connection.
1549	12634517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12634517	gavinandresen	The powers that be will kick in a BTC or two bounty for somebody to execute the test plan (and save their debug.logs somewhere, so we really know they ran the test). Recruiting a tester from the #bitcoin IRC channel or from seems to work.
1549	12751499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12751499	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1549	12761157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12761157	apoelstra	Ran the test as BlueMatt suggested. Everything worked correctly. A full report and relevant debug.log files are at
1549	12798305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/12798305	gavinandresen	Thanks , 1 BTC "thanks for testing" tip sent. ACK on code changes, pulling.
1548	6709740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6709740	gavinandresen	ACK
1548	6714178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6714178	Diapolo	Thanks for fixing this, I tried your patch and all related warnings are gone now and the client starts fine, so ACK.
1546	6700362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6700362	gmaxwell	FindNode() ensures we dont outbound connect to the same address we have inbound even without the group limitation.
1546	6709239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6709239	sipa	ACK
1546	6709791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6709791	gavinandresen	ACK
1546	6710193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6710193	jgarzik	ACK
1545	6690378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6690378	luke-jr	ACK
1545	6690427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6690427	gmaxwell	Has someone tried syncing a node connect=ed to a peer running this?
1545	6693765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6693765	TheBlueMatt	Yes, works.
1543	6693533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6693533	Diapolo	ACK, Im fine with that change, as long as the main client window is larger than the address selection window, which is the case.
1543	6933820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6933820	laanwj	Seems the dialog was already enlarged to width 691 by someone else. Needs rebase if it needs to be still wider.
1543	6934543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6934543	Diapolo	I know that played around with the width and the one in this pull is the one that works, even for french ^^. But yea, this one needs a rebase then!
1543	7077309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7077309	Diapolo	Can you please rebase this? <pre> git fetch upstream git rebase upstream git push ... </pre>
1542	6685643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685643	Diapolo	![new splash screen graphic V1](http://i50.tinypic.com/2i8zoli.jpg) ![new splash screen graphic V2](http://i50.tinypic.com/o6bev4.jpg) ![new splash screen graphic V3](http://i45.tinypic.com/20iza75.jpg)
1542	6829698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6829698	laanwj	As our aim is to get rid of it, I dont think we should change the splash image, it will only focus people more on it, probably resulting in useless bikeshedding discussing as to which one was better / worse.
1542	6830205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6830205	Diapolo	You are most likely right, so closed!
1540	6684077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6684077	laanwj	ACK, comment changes only
1538	6707530	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6707530	TheBlueMatt	I like sendbytes as the total queued for send instead of sent on wire, but Id prefer recvbytes as the bytes received in total, instead of the bytes already processed, also, Id prefer to include bytes that dont fail things like missing the message start magic.
1538	7433404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433404	jgarzik	Didnt get much interest, but I might recreate it at a later date. Closing for now.
1536	6675490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6675490	jgarzik	ACK -- the economics seem to make sense, but I am interested in comments from others
1536	6676585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6676585	coblee	Heres a sample attack: Only cost him 1 LTC to bloat the blockchain by 50kb
1536	6676711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6676711	gmaxwell	This doesnt sound bad although generally Id like to start talking about how to get the net-change-to-the-open-txn-set included in the free/priority structure. This is a dual attack in that it both adds static blockchain data but it also adds a ton of data which is probably never going to get redeemed, thus also burdening pruned nodes. This could be discouraged using as the size metric of something like max(size/2,2*size-size_of_txouts_reedemed). This would also discourage this sort of attack, where the out data size is much larger than the redeemed inputs.
1536	6676821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6676821	coblee	Yes, once you get a lot of dust spam, select coins can take forever. For Litecoin, I had to implement a workaround for people to ignore the dustspam and make them not count towards coins that they own. It was a huge pain.
1536	6676959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6676959	gmaxwell	Sort of tangent but wrt the select coins problem you might want to look at adding a post processing step: once youve prepared a txn with change and either a free txn with excess priority, or a with fee which isnt right at the boundary, then add in additional of your smallest inputs in order to get them out of your wallet (and out of pruned chains).
1536	6709420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6709420	gmaxwell	On further consideration: This will break the faucet, it will also remove an incentive to use sendmany.
1536	6711949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6711949	coblee	As Bitcoins value increases, you will probably need to reduce the value in which a output is considered spam. For Litecoin, less than 0.01 LTC is pretty much worthless. Maybe for Bitcoin, we should change it so that we add a fee for any output less than 0.0001 BTC.
1536	6716066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6716066	gavinandresen	This doesnt feel like the right fix to me. Fixing the coin selection algorithm so it works quickly with wallets containing gazillions of tiny transactions is part of the solution. Something simple like "If there are more than X unspent outputs, dont use the fancy knapsack-problem-solver, just use the biggest-value unspent input(s) until you have enough to pay for the transaction+fee." See for the direction I think will work. With the right priority algorithm (and a minimum-to-be-relayed-included threshold) I dont think a dust spam fee is needed at all.
1536	6716206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6716206	coblee	The coin selection fix does not fix the problem that someone can bloat the blockchain with only a small fee like this:
1536	6716717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6716717	gavinandresen	Right, see the gist for the other part of what I think would be a better fix. For a very-low-transaction-volume chain like LiteCoin, I think the right fix would involve miners specifying a small maximum block size (say 10K, enough space for 40 or so regular-sized transactions) and a high "forgo this amount of transaction fees" (so block space is dominated by transaction priority, not fee).
1536	7618328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7618328	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1536	7695055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7695055	SergioDemianLerner	Remember there is a previously reported attack involving one connection sending txs with tiny amounts to increase the GLOBAL limit, thus preventing the other connections from sending free transactions. Its necessary to review how this change may affect that attack, and if it can make it worse. I suggested using per-connection limits, and not a global limit.
1536	8268813	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268813	jgarzik	It sounds like consensus is against merging this specific fix at this time.
1533	6659421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6659421	jgarzik	Encapsulation seems correct, but typically we do not want to burden the bitcoin codebase with changes for a non-bitcoin experiment that has not happened yet, and may or may not be successful. Typically you would want to fork the bitcoin code (very easy, with git), make your changes, perform your experiments, and _then_ propose bitcoin changes. So, NAK - need not demonstrated
1533	6665144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6665144	gavinandresen	agree with for the same reasons.
1532	6658124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6658124	laanwj	Comment-only change, ACK
1531	6649065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6649065	luke-jr	1) Shouldnt it be protocol_version and user_agent now? 2) Whats with string times/bitfields?
1531	6649084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6649084	jgarzik	As with #1510, the int64 fields are rendered as strings to avoid known big-int-handling bugs in the field.
1531	6663155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6663155	gmaxwell	I like it should the start time be an absolute time or an uptime?
1531	6665165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6665165	gavinandresen	I dont like the int64 fields as strings; we already output time (int64) fields as Numbers in other parts of the RPC interface. If JSON libraries cant handle them, then the JSON libraries need to be fixed.
1531	6675122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6675122	jgarzik	Updated commit with new output: ``` [ { "addr" : "94.198.135.29:8333", "services" : "1", "last_send" : 1340997595, "last_send_empty" : 1340997598, "last_recv" : 1340997584, "time_conn" : 1340997577, "version" : 60001, "subver" : "/Satoshi:0.6.3/", "inbound" : false, "time_release" : 0, "start_height" : 186795, "banscore" : 0 }, { "addr" : "193.238.41.117:8333", "services" : "1", "last_send" : 1340997592, "last_send_empty" : 1340997598, "last_recv" : 1340997595, "time_conn" : 1340997590, "version" : 60001, "subver" : "/Satoshi:0.6.2/", "inbound" : false, "time_release" : 0, "start_height" : 186795, "banscore" : 0 } ] ``` Note that "services" is a hex string, and remains quoted.
1531	6676015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6676015	luke-jr	All the other hex-encoded strings are fixed-width (zero padded). For versions, it seems better to show: ```Javascript "protocol_version" : 60001, "user_agent" : [{"Satoshi": "0.6.2"}, ...], ```
1531	6677135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6677135	sipa	I think last_send_empty is not a very clear name. Maybe "last attempted send" ? Not sure if its a useful statistic in general, its only useful to debug the network event loop code, imho.
1531	6677509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6677509	gavinandresen	Overall ACK, nit-picking: "01" for services would make it more obviously hex-encoded (I agree hex-encoded is right for services). naming convention for stuff output from RPC calls is wordsmushedtogether, not words_separated_by_underscores. And footime, not timefoo (Im looking at the output of grep Pair bitcoinrpc.cpp to see all the stuff output).
1531	6678596	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6678596	jgarzik	Updated commit; new output: ``` [ { "addr" : "46.147.8.78:8333", "services" : "00000001", "lastsend" : 1341005008, "lastrecv" : 1341005008, "conntime" : 1341004942, "version" : 40000, "subver" : "", "inbound" : false, "releasetime" : 0, "height" : 186813, "banscore" : 0 }, { "addr" : "71.42.11.79:8333", "services" : "00000001", "lastsend" : 1341005009, "lastrecv" : 1341005008, "conntime" : 1341004990, "version" : 60001, "subver" : "/Satoshi:0.6.2/", "inbound" : false, "releasetime" : 0, "height" : 186813, "banscore" : 0 } ] ```
1531	6681432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6681432	gavinandresen	I like it.
1529	6638932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6638932	gavinandresen	ACK.
1526	6618707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6618707	luke-jr	Does it stop being enforced if ver=2 falls below 75% majority later?
1526	6618762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6618762	gavinandresen	Does it stop being enforced: yes, whether it is enforced or not depends on the previous 1,000 blocks. If more than 250 of the past 1,000 (starting at the block before the block being considered) is nVersion=0 or 1, then the rule isnt enforced.
1526	6620216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6620216	luke-jr	Is that intentional? Would there be any harm to having a point of no return?
1526	6639732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6639732	gavinandresen	RE: point of no return: I dont see a good reason to write code to do that, and it would be hard to test (would have to notice when we hit the point of no return and record that in the block database, I suppose, then read and pay attention to that database setting).
1526	6708044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6708044	gmaxwell	If there isnt a point of no return the transition for this particular feature can never be removed. If there is, then once its hit after the next checkpoint has been set the code for counting the quorum for this could just be removed and replaced with a simple height comparison.
1526	6713132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713132	jgarzik	As I read the code of commit 93fdc48, it does not do what I expect. A version>1 block with invalid height is simply an invalid block, to be unconditionally rejected. No need for supermajority check. Nobody generates version>1 blocks right now (right?), so it should be fine to simply publish a BIP and note the new rejection policy. The logic just described could be deployed immediately.
1526	6713232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713232	gmaxwell	Then I, Greifer Mc. Greifer, mine a single invalid v2 block. The super majority of nodes will happily extend it and continue the chain, the minority of upgraded nodes will reject it forever and ignore that chain. Nice split youve got there.
1526	6713309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713309	luke-jr	And perhaps half as importantly, that would be an abuse of the centralization in a single client to force a blockchain rule through like that. Besides, already was working on a proper "block/transaction version rules" BIP.
1526	6713757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713757	jgarzik	highly unlikely, but no objection to doing it the current way re-read, you missed the phrase "publish a BIP"
1526	6713935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6713935	luke-jr	Yes, I did. Sorry.
1526	6715440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6715440	gavinandresen	RE: locking issues setting strMiscWarnings : before this pull, strMiscWarnings is set from exception handlers (a "should never happen" case) and AddTimeData(), which is called from ProcessMessage when a new node connects. The new code is in ProcessBlock(), which is also called from ProcessMessage but is also called from -loadblock. Im tempted to ignore locking in this case, because I think the risks of doing something like protecting strMiscWarnings with a new critical section outweigh the benefits, and worst-case scenario is somebody running an obsolete version of bitcoin with an incorrectly set system clock has a small chance of getting a crash or garbled message.
1526	6716937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6716937	rebroad	What would be needed to create a split with the code as it currently is?
1526	6717106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717106	gmaxwell	it cant make a split as it currently is, but because the v2 blocks are not _enforced_ as it is a malicious party who wants to create trouble by mining duplicate coinbases could do so by just choosing to mine v1 blocks. Basically the patch as is only protects against mistaken duplication by incorrectly modified mining code.
1526	6717123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717123	gavinandresen	As the pull request stands, the only way to get an orphan chain is: + wait until 75% of the blocks created are nVersion=2 + some idiot creates/broadcasts a nVersion=2 block that does NOT have the height in the coinbase 25% of the network would build on idiots block, the other 75% would reject that chain.
1526	6717194	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717194	gmaxwell	but as soon as the 75% produces two blocks (or whatever is require to get ahead again) the 25% moves back. (thus the distinction between a split and a orphan-stub: a split never heals)
1526	6717380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717380	rebroad	thanks, you answered the question I had intended to ask.
1526	6717685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717685	gavinandresen	: I think of orphan-stubs as temporary splits, and use the term "hard fork" for permanent splits (but dont really care about vocabulary as long as we all understand each other). Ok: One issue remains with this: should this pull include rules for eventually rejecting nVersion=1 blocks ? If that is *not* done now, then well be bumping block.nVersion=3 in a year and writing code that says "when X% of the network is v3 and less than Y% is v1 then reject nVersion=1 blocks as too old to support any more." Suggestion from in IRC is: stop accepting v1 when v1 blocks are 5% or less of the last 1,000 blocks
1526	6717959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717959	jgarzik	Agree with what someone (@gmaxwell?) said on IRC, about stopping v1 acceptance: dont make it a software rule that can "flap" (rule switches on and off and on and off). Just pick a height, once you hit 5% or whatever threshold.
1526	6717967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6717967	jgarzik	ACK
1526	6718327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6718327	luke-jr	I think we can add the "reject v1 blocks" rule later without bumping to version=3; since all the "this generation" nodes will enforce it so long as the majority remains over 75%, the only risk is someone making version=1 blocks having more than "future v1-rejecting version" *plus* this version combined...
1526	6719888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719888	gavinandresen	once past 95% v2 blocks (assuming theres consensus on "orphan the last 5% of miners who refuse to get with the program and upgrade") there will be no flapping, because 95% of the network will reject v1 blocks past that point. The release after that happens a checkpoint can be added and the code can be simplified to "require valid v2+ blocks." so we release code that creates v2 blocks, but always accepts v1 blocks. Then a while from now we release code that creates v2 blocks but rejects v1 blocks if some threshold has been reached. If Im a miner, why would I risk running that code; I need to SEE network support for the "reject v1 block" rule before I start doing that.
1526	6795288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6795288	gavinandresen	Added a commit with a "reject nVersion=1 blocks when 95% of the last 1,000 blocks are nVersion=2" -- the point of no return.
1526	6795630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6795630	jgarzik	Code ACK IMO this warrants a BIP
1526	6796145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6796145	gavinandresen	I ran my coinbase_integers.py tool on the chain, and somebody is producing block.nVersion=1 blocks with blockheight-1 in their coinbases; see blocks 172036 or 174854 for example (coinbases start with PUSH 172035/174853). Interesting, but not a problem. There are also some accidental "looks like a block height" blocks (e.g. block 164384 starts its coinbase with PUSH 1983702). That opens a tiny window for whoever created block 164384 to try to create a duplicate coinbase in the year 2046 when block 1,983,702 is mined. The chances of them mining that particular block will probably be pretty small, although maybe there would be some incentive for them to sell the private key to a big mining consortium who would... do something evil maybe. We could close that remote possibility by giving the coinbase transactions nVersion=2; the transactions version is part of the transaction id hash, so a nVersion=1 transaction will never hash to the same id as a nVersion=2 transaction. We do have the problem that between the time we announce what were going to do and the time when there is 75% main network support rogue miners could create block.nVersion=2 / coinbase.nVersion=2 coinbases that contain "height = sometime in the future".
1526	6797307	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6797307	jgarzik	The most likely error scenario is probably a buggy miner creating a version=2, height=$ValidHeight+1 or height=$ValidHeight-1 block.
1526	6797528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6797528	jgarzik	First draft of BIP text:
1526	6801792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6801792	genjix	This is a good rule change, and I only wish it was in all blocks already. Its such a pain to have different transactions with the same hash. Does this mean sipas rule change will be removed? This change seems to obselete that once network hashing majority is achieved. About blocks that have a coinbase which looks like a block number and could cause problems: the only way around that is to add a fixed workaround (if nHeight == foo). Its so far in the future though, that its not worth worrying about.
1526	6807375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6807375	jgarzik	New URL for spec, with assigned BIP number:
1526	7437277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7437277	luke-jr	Can this be amended to only pay attention to the last octet, just in case we end up using the first 3 for something else?
1526	7623925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7623925	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32
1526	7679161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7679161	luke-jr	This should fix the test: ```diff diff --git a/src/test/miner_tests.cpp b/src/test/miner_tests.cpp index c9981fb..8ffc9b4 100644 --- a/src/test/miner_tests.cpp +++ b/src/test/miner_tests.cpp -62,6 +62,7 BOOST_AUTO_TEST_CASE(CreateNewBlock_validity) std::vector<CTransaction*>txFirst; for (unsigned int i = 0; i < sizeof(blockinfo)/sizeof(*blockinfo); ++i) { + pblock->nVersion = 1; pblock->nTime = pindexBest->GetMedianTimePast()+1; pblock->vtx[0].vin[0].scriptSig = CScript(); pblock->vtx[0].vin[0].scriptSig.push_back(blockinfo[i].extranonce); ```
1526	7696680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7696680	luke-jr	Note that this should be merged only after #936: there is software (p2pool?) which will create version==2 blocks without the height right now. #936 will workaround this problem by breaking compatibility with said application, and BIP22 explicitly requires clients understand and implement height-in-coinbase for version 2.
1526	7699453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7699453	jgarzik	forrestv does not agree
1526	7880441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7880441	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1525	6613760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6613760	jgarzik	ACK changes However, I think the gist link makes the hard fork process seem easier, more seamless and less damaging than it really is.
1519	6570868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6570868	laanwj	Great! I see one mistake in the screenshot though: en (or generally, xx without xx_YY) should be simply English, not English - UnitedStates :)
1519	6571931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6571931	Diapolo	Im not sure how to fix your observation, as I pass "en" into QLocale and query ``.language()`` and ``.country()``. Perhaps UnitedStates is default here? As Germany is for de?
1519	6572147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6572147	laanwj	Yes, I know thats the behavior. But its not correct. English is "general" English, without locale. You can see this problem with Persian - Iran, which is now duplicate in the list. I wonder if there is another way to take apart the xx_YY which doesnt have this problem (without reinventing the wheel...).
1519	6572938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6572938	Diapolo	We could check if there is a "_" in the source string and if not only use ``.language()``? Do you know the function to check for a certain char in a QString?
1519	6573504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6573504	laanwj	QString::contains(str) -&gt; bool
1519	6576664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6576664	Diapolo	Thanks, it now does, what we want it to do.
1519	6576777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6576777	laanwj	ACK
1518	6684087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6684087	laanwj	Theres another thing that might eventually be useful in the QR code dialog: showing the constructed bitcoin: URL (above the image?), so it can be copy/pasted into mails and such.
1518	6684357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6684357	Diapolo	That is rather easy to achieve, are you ok with the code and changes thus far? I can integrate your suggestion here or create another pull on top ... just as you like.
1518	6684542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6684542	laanwj	It was just a random idea, doesnt have to be in this pull. Am I right that QRCodeDialog::setModel is never called? Did you test it? Looks like addressBookPage needs a setOptionsModel to pass on to QRCodeDialog.
1518	6684656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6684656	Diapolo	Im working on your idea right now :). setModel() is unused, because I didnt know, how to get easy access to the options model :-/. Any hint / idea?
1518	6685247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685247	Diapolo	Updated: - add read-only QPlainTextEdit field to output generated URI I chose an TextEdit to be able to use word-wrap and see the whole URI, drawback is, that I was unable to implement a working EventFilter to select all text without messing up other behaviour of the TextEdit field. A copy URI button could be added before the "Save As..." one though.
1518	6693832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6693832	laanwj	Nice! Id add a setOptionsModel method (called from BitcoinGUI::setClientModel) to AddressBookPage, which stores the options model. Then when creating the QRCodeDialog you can pass it.
1518	6694184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6694184	Diapolo	Thanks mate :). Ill update to integrate your suggestion and do this as seperate commit, so you can see easily what was changed. After your final ACK I can merge that commit, so we only have one if you want.
1518	6694843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6694843	Diapolo	Updated: - add OptionsModel in AddressBookPage and use it in on_showQRCode_clicked() to pass it to QRCodeDialog I verified this to work.
1518	6799588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6799588	Diapolo	Same here, is it possible to get this into 0.7, before the RC phase? Any further things I need to fix, suggestions or such stuff?
1518	6800343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6800343	laanwj	ACK
1518	6810430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6810430	Diapolo	Rebased and merged both commits into one, no code changes.
1516	6547584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6547584	laanwj	The reason that the silent flag is there is because sometimes the .pro is run through multiple times (the system call is executed multiple times) so to prevent error spam.
1516	6548220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6548220	Diapolo	I can revert it, but found it usefull to see all info displayed. I think you are the one that doesnt like silent errors :)?
1516	6548732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6548732	laanwj	True, I dont like silent errors/warnings, but the problem is that everyone gets the warnings for all translations every time they build, even though they cant fix them (and if they can they need to do it in transifex anyway). So it was kind of noise.
1516	6548904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6548904	Diapolo	Removed the noise again and only use it on my local build then :).
1516	6571147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6571147	laanwj	ACK
1515	6533858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533858	sipa	ACK
1515	6533968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533968	gavinandresen	Good idea.
1515	6534067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6534067	Diapolo	Sounds good.
1515	6547507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6547507	laanwj	Good idea. Ive only got a comment about the thread names: it makes sense to link them to thread names in in the enumeration in net.h (sockethandler, openconnections, messagehandler, miner, etc...) to be consistent and for easy debugging. Or add least add a comment in net.h by which name each of the threads can be recognized.
1515	6567343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6567343	muggenhor	Ive tried to make the names look like those in the thread enumeration, unfortunately only 15 characters are available. So Ive deviated from those names for some instances to improve readability. That being said I could add a copy of the thread names as comments to that enum.
1515	6636747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6636747	luke-jr	Might add pthread_set_name_np for BSD. I havent checked, but it would be annoying if this erases the commandline parameters - I use a dummy -name=foo to discern between different bitcoinds in ps right now.
1515	6685868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685868	muggenhor	If pthread_set_name_np is implemented similar to BSDs setprogname then it *will* modify the commandline parameters (thats how it does this: overwriting argv[0-n] memory). Its manpage seems to suggest otherwise though. I can add the code easily enough, but Im not even sure if my FreeBSD 8 installation still boots. So Id appreciate if you could test & confirm that it works as advertised,
1515	6685910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685910	luke-jr	I only use Linux, just came across the BSD variant looking at your pullreq.
1515	6685998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6685998	muggenhor	Right, Ive just confirmed that I can cross-compile an isolated call to pthread_set_name_np for FreeBSD 8. Ill try dusting off my FreeBSD 8 box for a test run.
1515	6687122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6687122	muggenhor	Right, my FreeBSD system doesnt even boot properly anymore. So Ill disable the FreeBSD code (but leave it in) so that it wont break on those systems but another developer (who *does* have FreeBSD/OpenBSD) can confirm that it *does* work and enable it.
1515	6834030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6834030	Diapolo	In qtipcserver.cpp we have another thread afaik, any reason to not cover that one in this pull?
1515	6835036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6835036	muggenhor	that was just an oversight. Addressed in my last commit.
1515	7023095	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7023095	muggenhor	Rebased again, still waiting to be merged...
1514	6533218	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533218	jgarzik	why not use LDFLAGS?
1514	6533583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533583	muggenhor	The reason was to prevent overriding LDFLAGS given on the command-line, but Ive addressed this by using the same trick as for CXXFLAGS.
1514	6639001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6639001	gavinandresen	ACK
1514	6765099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6765099	TheBlueMatt	Can you rebase and remove the merge commit? Also, ACK and can we get this merged so it doesnt sit around forever? Also, clangs lto is petty awesome with Bitcoin, I got these earlier today with bitcoin-qt: clang-lto: " block index 6523ms" gcc-lto: " block index 8497ms" For that reason, Id kinda like to look into building releases with clang, but we need this.
1514	6829684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6829684	laanwj	ACK
1514	7023085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7023085	muggenhor	Rebased (again), and (still) ready for merge.
1512	6606099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6606099	gavinandresen	Trying the batch examples at ... the implementation isnt matching the spec. E.g. curl --user abc:123 --data-binary [1,2,3] -H content-type: text/plain; ... is returning error -32700, "value is type int, expected obj" instead of -32600, "Invalid request".
1512	6610587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6610587	jgarzik	Rebased, and fixed bug reported by (note: turned out _not_ to be a policy decision, as I claimed on IRC)
1511	6529772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6529772	jgarzik	On a busy node (read: any node that accepts incoming connections), this reduces a *lot* of log spam.
1511	6529851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6529851	gmaxwell	<s>I cant seem to find evidence that weve fixed the issue where nodes will repeatedly re-get txn that theyve rejected. Verbosity here is pretty good for troubleshooting that sort of stuff. </s> Edit: I was apparently not paying attention here and thought it would silence most of the (sent) getdatas log messages, ignore me.
1511	6607187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607187	gavinandresen	ACK
1510	6529789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6529789	jgarzik	Sample output here:
1510	6554488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6554488	gavinandresen	Design doesnt feel quite right to me. How about something like: getpeerinfo : returns list of peers (ip address, inbound/outbound, etc) getstat "which_stat_to_get" : generic RPC call for getting internal state of bitcoin...
1510	6557131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6557131	gmaxwell	getstat "which_stat_to_get" would make it easier to wrap up in a snmp style poller, e.g. for graphing with an rrd tool frontend.
1510	6607104	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607104	jgarzik	all the kernel interfaces that SNMP uses tend to return groups of statistics that the kernel finds easy to generate together (tx pkts, rx pkts, rx bytes, tx bytes, collisions, ...) I see the same pattern elsewhere. So perhaps getstat $STAT can return complex objects, if it is natural to do so internally. Regardless... closing. will work on getpeerinfo and then see whats left.
1508	6526116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6526116	Diapolo	Is the type-casting to int instead of short a problem here? Im asking because Im working on the proxy-options in the GUI currently. ACK to the pull.
1503	6511491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6511491	gmaxwell	I was able to loadblock up the existing testnet3 without issues with this change in plae.
1503	6514529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6514529	gavinandresen	ACK
1502	6511008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6511008	gavinandresen	ACK
1502	6511309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6511309	luke-jr	BIP22 intentionally supports this use-case with "sizelimit":false (not implemented in bitcoind); another option could be added to skip the priority sorting But I dont care enough to debate how this is done, so meh.
1498	6497142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6497142	gavinandresen	Can you add a doc/CJDNS.txt with the information on how to configure? Ill let people who know a lot more about networking than me to ACK or NACK.
1498	6517992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6517992	sipa	If I understand it correctly, CJDNS uses FC00::/8 as network range, which is half of RFC4193s unique local range? Im wonder whether this does risk clashing with anyone who wants to use RFC4193s range for other purposes. Inside the bitcoin P2P protocol this is not necessarily a problem (for now, it doesnt clash with anything, as the onioncat and garlicat ranges are inside the other half of the range), but we may want to be careful... That said, CJDNS looks interesting, and Id like to look into it.
1498	7623941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7623941	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for binaries and test log. This pull does not merge cleanly onto current master
1498	8284643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8284643	jgarzik	This does not seem to have gathered any ACKs, and open questions remained unanswered, so recommend closing.
1498	13708066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/13708066	cjdelisle	There was some renewed discussion of the issue and I wanted to record the current state of the situation. 1. All networks such as garlicat and onioncat are encoded by using reserved space in ipv6 addresses. 2. Bitcoin nodes relay addresses to everyone, ipv6 addresses are relayed to ipv4 nodes etc (changing this is non-trivial) 3. Cjdns uses an enormous amount of ipv6 space. Bitcoin nodes will relay cjdns addresses to other nodes so if another network came along which uses the fc space, there would be a space collision. In theory cjdns is stealing a vast amount of space and is a relatively unpopular network. In practice if the space were used by multiple networks, the effect would be nodes attempting to connect to other nodes but being in the wrong network. Imagine some other network using the fc space, cjdns nodes would transfer the addresses to that networks nodes which would then try to connect to them, not knowing they are not from their own network. In the long term, there will probably be a network ID attached to addresses which identifies them so not all networks need to be represented as IPv6 addresses. My position: 1. Its ok in practice because for now no other such networks exist and if one were added then it would be a performance degradation issue, it would not be impossible. 2. If theres a network ID then the problem is solved. It still adds a certain amount of difficulty for the developers and in *theory* its bad so it should not be merged unless a "good" number of people want to run bitcoin/cjdns nodes.
1496	6492407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6492407	jgarzik	ACK
1495	6510704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6510704	gmaxwell	ACK.
1494	6473284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6473284	luke-jr	I like this one a lot better.
1494	6510985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6510985	gavinandresen	This is the way we used to do it (each RPC command acquired the locks it needed), and we were constantly battling people adding new RPC commands that worked in testing and then blew up in production, because they didnt acquire the right locks, or they acquired the right locks in the wrong order. I like the other approach: make the default safe, but if you know what youre doing you can do your own locking.
1494	7064927	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7064927	laanwj	The other pull is safer. It allows for a slow transition to finer-grained locking, optimizing where it matters. This is a big change at once, and its easy to forget one or two locks.
1494	7623947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7623947	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for binaries and test log. This pull does not merge cleanly onto current master
1494	7905664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7905664	jgarzik	Closing. Were going with the table driven approach for now (#1493).
1493	7623955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7623955	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for binaries and test log. This pull does not merge cleanly onto current master
1493	7906185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7906185	jgarzik	Pull rebased for latest RPC code movement changes.
1489	6494845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6494845	luke-jr	Neither getwork nor getmemorypool should be even trying to call CreateNewBlock in parallel... they cache its results. (Not that theres anything wrong with this optimization.)
1489	6496026	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6496026	jgarzik	The former does not follow from the latter.
1489	6496621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6496621	luke-jr	There should be a mutex on the cache, so Im not sure how youd get into CreateNewBlock concurrently. Unless youre thinking of getwork and getmemorypool at the same time, but I cant think of any reason to support that...
1489	6497558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6497558	luke-jr	This also conflicts with #1240 as-is: can copyFinal return map<uint256, CTransaction> instead?
1489	6497564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6497564	jgarzik	The cache is only accessed when you think it would be accessed: quickly upon read, or after building a block. The caches lock need not be held while building a new block.
1489	6497691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6497691	luke-jr	IMO, its better to hold it while building a new block: instead of having 20 parallel CreateNewBlock running at potentially 1/20th the speed each for no benefit, you get a single one that finishes in 1/20th the time and the rest use the cached value from...
1489	6607226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607226	jgarzik	Closing, not enough interest. It remains a valid technique if we want to explore this avenue in the future.
1487	6453225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453225	gmaxwell	I dont believe we want to deal with the potential of CSRF issues in the JSON API, not to mention that exposing the RPC port to the internet is currently a reliable way to get yourself robbed. (And I assume it would be almost as bad with the users browser acting as a proxy)
1487	6453474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453474	zootreeves	The RPC port doesnt need to be exposed to the internet. There are a number of ways to circumvent the same origin policy this just makes it easier for those with legitimate uses.
1487	6454242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6454242	jgarzik	Yeah, I think these sort of things are more appropriate via a proxy
1487	6460166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6460166	tcatm	FYI this has been discussed at and before.
1487	6460279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6460279	zootreeves	Apologies, feel free to close the request.
1484	6414033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6414033	gavinandresen	A very small number of people care about a precompiled bitcoind on the Mac; I dont think it is worth the extra build time or hassle of fetching/building dependencies. So I think this should wait until theres a gitian-built OSX Bitcoin-Qt release working. Nice work, though, Im impressed you got osx bitcoind cross-compiling....
1484	6923249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6923249	luke-jr	This no longer works with master (GCC 4.0 cant handle boost signals it seems), so closing for now.
1483	6431318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6431318	laanwj	ACK (except for the comment)
1481	6396685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6396685	gmaxwell	Not that I really care, but as far as I can tell the OS is called "Mac OS X" not "Mac OSX"
1481	6396796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6396796	fanquake	Yep, your probably right about that, changed it.
1479	6396180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6396180	gavinandresen	How should this be tested?
1479	6396448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6396448	sipa	I suppose you could temporarily add an immature_amount to the gettransaction() RPC, and immature_balance to getinfo(), and mine a few blocks on testnet.
1479	6453571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453571	Diapolo	I "only" verified this patch with Bitcoin-Qt on testnet, Im not sure how to test this with bitcoind, as I cant compile it. Help would be appreciated, as this testing is blocking a merge.
1479	7630368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7630368	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1479	7678676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7678676	luke-jr	Those builds from should help you out
1479	7707366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707366	Diapolo	How does this help? You mean using the Qt version from jenkins and using it on testnet?
1479	7710496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7710496	luke-jr	I was thinking
1479	8021383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8021383	Diapolo	Guys, I setup bitcoind and can use it to pass RPC commands, but I simply dont know how you want me to test the function there, as ``GetImmatureBalance()`` seems to be only used by Qt? I could for sure add ``obj.push_back(Pair("walletversion", pwalletMain->GetImmatureBalance()));`` to RPC ``getinfo``, but as I cant compile bitcoind I would rely on to create a bitcoind.exe for me and need to revert that change before this would be considered mergeable.
1479	8022491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8022491	sipa	GetImmatureBalance looks correct from reading it, and its only used within the Qt code. Im sure we can use it in RPC code as well, but lets do that later.
1479	8028840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8028840	Diapolo	I didnt want to push or create a usage scenario for RPC, I just wanted to say I dunno how to further test this code :). As I said in Qt it does the job and asked if it will get accepted that way or what I can do now.
1479	8028844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8028844	sipa	ACK on the changes to core; I didnt test the UI changes.
1479	8032963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8032963	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1479	10317418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10317418	Diapolo	Rebased!
1478	6389143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6389143	laanwj	ACK
1478	6600670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6600670	Diapolo	Just a reminder *merge me* :-).
1478	6823540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6823540	Diapolo	Closing, as this change was integrated with #1559.
1477	6382421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6382421	Diapolo	ACK and verified to work!
1477	6384061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384061	Diapolo	Additional info, this patch fixes a serious issue with the testnet3, where all nodes currently get the same NICK on IRC and so the address exchange via IRC does not work / is faulty.
1477	6384084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384084	gmaxwell	Not so, nodes which arent listening get other nicks just fine! (to be clear, Im being sarcastic advertising only the nodes which arent listening isnt helpful)
1477	6386145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6386145	sipa	ACK
1475	6383261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6383261	burger2	Its hard to test when testnet isnt working that good on my computer.
1475	6383517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6383517	laanwj	I dont think this is the right solution. The view classes (Overviewpage, SendCoinsDialog, ...) should not be burdened with implementation details such as new blocks coming in. As I understand, there is a problem with WalletModel not sending the BalanceUpdated signal every time the Balance changes. Hence, this should be fixed in WalletModel. The problem seems to be that some kind of transactions (the "mined" ones) need to be baby-sitted for at least 120 blocks until they mature (normal transactions for 6, but this is correctly handled). However, re-computing the balance and updating the UI every time a block comes in also isnt a good solution as this may go very fast. This needs a timer (invoked only a few times per second) that recomputes the balance and issues a BalanceChanged signal if needed... Tangential: Can you try to keep 1) changes in which you rename all kinds of stuff and 2) functional changes separate? Mixing these makes it very hard to review code changes. Commits of type 1 can be verbose, whereas commits of type 2 should be as minimal as possible, especially if you make changes to the core as well as the UI.
1475	6384053	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384053	Diapolo	To fix your testnet problems try out #1477. Current master has a bug, which gives all testnet nodes on IRC the same NICK, which causes the current testnet3 troubles. I think the immature balance, which then matures after 120 blocks is not taken correctly into account in terms of the ``balanceChanged`` signal. The state change from immature to mature, which also changes the current balance then, is not triggered by a transaction, so the emited ``balanceChanged`` signal in ``WalletModel::updateTransaction()`` does not help here. Thats why I introduced a mechanism, which uses block-changes for this. If you have a cleaner / better idea Im fine with a simpler patch :). The re-name was a logical thing for me here, because there are now 2 models in overviepage and sendcoinsdialog, so only e.g. ``setModel`` is missleading. I guess a timer is not needed if I add a check for ``IsInitialBlockDownload()`` in the code, as with a catched-up chain the processing wont happen that often.
1475	6384124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384124	laanwj	Yes, Im going to implement this differently. This should really be restricted to WalletModel. Its indeed true that the balanceChanged signal in updateTransaction does not help here, but it could be emitted from different places as well. Having a non-functional balanceChanged signal and working around that means confusion for future updates, you should simply be able to connect to balanceChanged and have the most recent balance. Then, OverviewPage and SendcoinsDialog dont need the client model and everything there can be kept the same.
1475	6384590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384590	Diapolo	Thats fine, if you are currently working on a patch Im going to stop further progress here. What about the changes to wallet and walletmodel? Ill quote myself: Im sure the current call to GetCredit(pcoin) cant be correct, as it does: <pre> if (IsCoinBase() && GetBlocksToMaturity() > 0) return 0; </pre> And this is the opposite of what we need for the immature coins, right?
1475	6384732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384732	laanwj	Im not particularly known with that part of the code, but what do you think is wrong? To me, it reads like "If this is a coin-base (mined), *and* there are more than 0 blocks left to maturity, the credit is 0". Which makes sense to me.
1475	6384806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384806	Diapolo	It does a ``return 0;`` for the conditions we want to be true for adding immature coins together. Need to double check...
1475	6384909	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384909	Diapolo	The current master code uses GetCredit() from CWallet, while I added GetImmatureCredit() into CWalletTx, which I think fits better in there, as its similar to CWallet::GetBalance() and CWallet::GetUnconfirmedBalance(). But you are probably right and the current code works.
1475	6385060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6385060	Diapolo	I showed sipa the code, who also thinks the new function (CWallet::GetUnconfirmedBalance()) is cleaner ... but as this is unrelated to fixing the base-issue, I will create another pull and close this one!
1475	6388283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6388283	laanwj	The change in WalletModel also makes sense (makes it somewhat more readable). The only thing I dont agree with are the changes in the views.
1475	6388610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6388610	Diapolo	Thats fine, Ill open a new one and you patch the signal thing :).
1475	6453511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453511	Diapolo	Is your fix on track for 0.7, any branch you want me to test?
1471	6371228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6371228	laanwj	Whats up with adding all the P2P commands lately? Shouldnt this be discussed in a BIP? Personally I still think its better to have a clear standardized "protocol version", that implies what capabilities are supported, instead of a capability-based system that explicitly lists them. Capability-based systems tend to become horrendously complex, as you have to take into account all possible combinations of possible interactions, and constantly check for support of specific features instead of just comparing a version number.
1471	6371856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6371856	Diapolo	ACK
1471	6372995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6372995	jgarzik	No, you dont discuss things in a BIP. You first implement the code, then discuss on the mailing list and forums.
1471	6373257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6373257	laanwj	Yes I meant describe in a BIP.
1471	6410542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6410542	luke-jr	Well, FWIW, is always saying to discuss on the mailing list before making pull requests... But this whole thread of discussion is IMO off-topic for here...
1471	6607251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607251	jgarzik	Closing, not sufficient consensus or interest, based on mailing list discussion
1470	6362694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6362694	gavinandresen	How should this be tested?
1470	6366640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6366640	jgarzik	just a simple "it works" test using ArtForz half-a-node satisfies me...
1470	6413251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413251	luke-jr	Shouldnt this do something to ensure the transactions invd can be fetched? bitcoind wont send just any transaction right now, only ones it thinks its flood-relaying.
1470	6477379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6477379	mikehearn	Yeah, Luke is right. The patch needs to update the getdata command as well. After Im finished with LevelDB I can throw together some bitcoinj support for using this command and make sure it works.
1470	7412196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7412196	jgarzik	Foo Dog
1469	6364656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364656	luke-jr	WARNING: Failure to find: src/qt/messagepage.cpp WARNING: Failure to find: src/qt/verifymessagedialog.cpp WARNING: Failure to find: src/qt/messagepage.h WARNING: Failure to find: src/qt/verifymessagedialog.h WARNING: Failure to find: src/qt/forms/messagepage.ui WARNING: Failure to find: src/qt/forms/verifymessagedialog.ui ... make[1]: *** No rule to make target `src/qt/forms/messagepage.ui, needed by `build/ui_messagepage.h. Stop.
1469	6364805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364805	Diapolo	I need to run ``mingw32-make.exe clean`` and re-run qmake for this to work, but it compiles fine afterwards. Damn, sorry I guess I forgot to attach the updated .pro file ... just a sec.
1469	6364886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364886	Diapolo	Can you re-test now :)?
1469	6369346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6369346	Diapolo	Can you please try again and report back :), thanks.
1469	6369535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6369535	luke-jr	I found the Verify Message pane confusing because you set the focus when switching to it, which clears the placeholder text. Furthermore, some systems dont support the placeholder text. So its just 3 unlabelled text entries. I suggest adding an Address Book selector and Paste button to the address textline, and moving the Signature entry below the Message like it is on the Sign Message tab. Perhaps a warning about messages not implying anything beyond what is written in them is due to the Verify tab.
1469	6372043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6372043	Diapolo	Good suggestions, Im going to update this.
1469	6372239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6372239	Diapolo	Can you test it once more please. I did not add a paste button for address field on verify message, as we have one there next to the signature field (which makes sense as we have a copy signature button on sign message). The warning message thing I did not understand, can you explain for a native non english speaking person :)? Todo: - add a button / context menu entry in addressbook for verify message to be consistent with sign message - generalize some functions, as some use nearly identical code for sign / verify
1469	6374703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6374703	Diapolo	Updated to now include add a button / context menu entry in addressbook for verify message.
1469	6377772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6377772	Diapolo	Btw. is there any protocol or RPC command limit for the message-length? It seems one can DoS its client by inputting a very long message. Signing is quick, but Qt seems to be not that good in handling such long strings in an input field.
1469	6377887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6377887	sipa	You typically assume that a user who can access the UI or RPC is trusted, as otherwise youre more likely to lose your savings than the uptime of your node :)
1469	6383906	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6383906	laanwj	Hehe, yes, we dont protect people against DDoSing themselves on purpose, especially not through the UI. No fatal crashes should happen, of course, but slowing down is fine.
1469	6384074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6384074	Diapolo	I just wanted to ask, as I DoSed my node yesterday (GUI freeze / slowdown ... no crash though).
1469	6409510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6409510	luke-jr	I think the Paste button for Verify/Address and also for Verify/Signature are both needed. For a warning, perhaps something like "Enter the signing address, message (ensure you copy line breaks, spaces, tabs, etc exactly) and signature below to verify the message. Be careful not to read more into the signature than what is in the signed message itself, to avoid being tricked by a man-in-the-middle attack!"
1469	6416477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416477	Diapolo	Im fine with such a warning message, will change that. As for the paste button. Even if I place them next to the input field, they are generic. This means copying a signatute from sign and click the paste button on verify - address input, will try to paste the signature. If you say the user has to take this into account thats okay adding them, but there is no technical solution to distinguish them via different clipboards afaik.
1469	6416625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416625	laanwj	Different clipboards?!? Please dont make this too complex. I think the UI on the sign and verify message as shown in the screenshot is fine.
1469	6416795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416795	Diapolo	Dont bother, I also would not like to have different clipboards ... just wanted to know what luke had in his mind for the buttons.
1469	6477917	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6477917	Diapolo	I currently think it would be even nicer to remove the paste button from sign for the address input field instead of adding mor of that buttons to verify. Everyone should be able to use Ctrl + C / Ctrl + V (or whatever is default on your OS).
1469	6572064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6572064	Diapolo	Any more feedback here? Would be nice to see it in 0.7.
1469	6600569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6600569	Diapolo	Rebased to fix a merge conflict.
1469	6609157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6609157	luke-jr	Functionality ACK. Still think it needs Paste buttons on the Verify tab - most PC users dont use keyboard shortcuts.
1469	6609264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6609264	Diapolo	But they should at least be able to use a context menu, right? Im still in between removing the paste button from sign-tab or adding more paste buttons ... the more I think about it the more I would like to streamline that UI part ;). Perhaps should throw a coin so we can get this in before 0.7.
1469	6614586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6614586	laanwj	Theres a lot of code changes in this pull already. I still need to test it and read all the changes. I think "merging the windows" is enough change in one go, further improvements can go into a later pull.
1469	6658010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6658010	Diapolo	Alright, no further feature changes in this pull, just waiting for your report and fix stuff if needed, otherwise I consider this feature-complete.
1469	6684470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6684470	Diapolo	Rebased and only changed the above mentioned strings.
1469	6799573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6799573	Diapolo	Can we get this in before the 0.7 RC Window please? I have a strong feeling that phase is coming soon and this still lingers around here ;). Small changes can occur in another pull if required!
1465	6609111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6609111	luke-jr	ACK
1465	7000117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7000117	Diapolo	If this is not wanted just close it, if its okay please dont forget to merge such small pulls :).
1464	6350267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6350267	laanwj	ACK on the code, though Im not entirely sure I see the point here.
1464	6350347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6350347	Diapolo	I use a self compiled OpenSSL lib for my build and found that info usefull. Perhaps if there is an OpenSSL security flaw and we offer a vulnerable version, we ensure that attentive users have the chance to inform us.
1464	6376754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6376754	burger2	Works for me in Ubuntu 12.04
1464	6377527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6377527	Diapolo	Thanks for testing.
1464	6500566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6500566	luke-jr	IMO, this would be better under the Debug dialog...
1464	6500619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6500619	Diapolo	I considered that too, but was not sure abot the best place there. Below startup time? With an own header? A new tab (for just item ... not that good)?
1464	6572048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6572048	Diapolo	If you dont see any use here I can close this. But what about lukes idea to move it to the debug window? Where would you place it there?
1464	6572236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6572236	laanwj	I agree that the debug window is a better place if you need this. I dont think you should worry too much about the place in the debug window, if you think its useful to have it there then put it somewhere, maybe along with the bitcoin version number.
1464	6610002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6610002	Diapolo	Moved to the debug window and use an indent to distinguish from the client version.
1464	6628390	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6628390	laanwj	ACK
1463	6333897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333897	luke-jr	Why not just (uint64)0 ?
1463	6333934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333934	sipa	Giving the parameter a name is more readable, imho, and I doubt it makes any difference performance-wise.
1463	6334015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6334015	luke-jr	ACK
1463	6334112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6334112	gmaxwell	ACK, works for me.
1461	6329385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6329385	Diapolo	ACK
1459	6325797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6325797	Diapolo	ACK, one unrelated thing can you explain what FIRST_CLASS_MESSAGING is or does for us UI wise?
1459	6325858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6325858	laanwj	Basically, it makes that sign/verify message are tabs instead of separate windows. lukejr introduced it in one of his commits, because according to him signmessage is as important (and thus should be as prominent) as sending coins, but I dont think anyone apart from him agrees and/or uses the feature.
1459	6329462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6329462	Diapolo	I have a pull in the pipe that merges sign / verify message to a tabbed UI just like with the options dialog. Will open it later today or tomorrow ... perhaps we can talk about removing that unused stuff? Are there any comparison screens how it looks with that messaging stuff? That many #ifdefs for such a thing annoy me!
1459	6329561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6329561	laanwj	I dont think there is a need to do that, better to keep it like this, it will only result in endless bikeshedding discussions.
1458	6331823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6331823	sipa	I dont mind having more granularity in choosing debug output, but if were going that way, I think a -debug=all, -debug=none, -debug=net, ... is more consistent.
1458	6364539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364539	luke-jr	Agree with
1458	6369382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6369382	Diapolo	It could also be implemented as debug-level, e.g. -debug=0 (disabled) -debug=1 (all), -debug=2 (all, but no net) ... etc.
1458	6369901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6369901	jgarzik	-debug=NUMBER and -debug=TOKEN are not useful for masking individual trace behaviors. -debug=TOKEN,TOKEN,... is acceptable, but requires a mini-parser for the -debug string, rather than relying on -trace* for the same effect.
1458	6373068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6373068	sipa	Even if its easier implementation-wise to keep it as a separate option, Id prefer -debugnet instead of -tracenet, just for consistency.
1458	6511097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6511097	gavinandresen	ACK if s/tracenet/debugnet/
1458	6513163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6513163	jgarzik	updated to -debugnet
1458	6520722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6520722	Diapolo	Im missing `` -debugnet`` and a description what it does in ``std::string HelpMessage()`` in init.cpp. Should be below that line:
1456	6413077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413077	luke-jr	Breaks Bitcoin-Qt without this: ```diff diff --git a/bitcoin-qt.pro b/bitcoin-qt.pro index 9885e1e..b562560 100644 --- a/bitcoin-qt.pro +++ b/bitcoin-qt.pro -217,6 +217,7 SOURCES += src/qt/bitcoin.cpp src/qt/bitcoingui.cpp \ src/qt/walletmodel.cpp \ src/bitcoinrpc.cpp \ src/rpcdump.cpp \ + src/rpcrawtx.cpp \ src/qt/overviewpage.cpp \ src/qt/csvmodelwriter.cpp \ src/crypter.cpp \ ```
1456	6413674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413674	gavinandresen	Rebased to master and added rpcrawtx.cpp to bitcoin-qt.pro. But Im having second thoughts on how to specify previous outputs; especially with compression work I think maybe specifying them as [txid,n,hex_scriptPubkey] might be better than just "hex_serialized_complete_transaction"
1456	6607351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607351	jgarzik	ACK latest revision
1453	6314281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6314281	laanwj	I think this needs a command-line argument to enable/disable. Apart from that, great!
1453	6315929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6315929	TheBlueMatt	In terms of a command-line argument to disable, Id really rather not. You can click no, and ignore the update until you next restart, but I really prefer to force people who refuse to upgrade to suffer the nagging.
1453	6320583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6320583	laanwj	I agree in principle. However, there may be reasons why someone wouldnt want a cleartext requrest to bitcoin.org going out every time they start bitcoin. Especially as the configured proxies are not used by Qt HTTP, so someone doing everything else through TOR would still "leak" this. (of course itd be even better to add proxy support into everything, but for now its less hassle to add an option, maybe have it disabled by default if tor is used, otherwise always enabled)
1453	6321172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6321172	Diapolo	Great idea, cant comment on the current implementation, as I didnt yet try this. This only works for the installed version not the zipped one? What is gitian-downloader, does this need to be installed on the local machine (seems a little weird to me as Win user)? Is it possible to use HTTPS, as I would not like an auto-connect via HTTP every-time I start my Bitcoin-Qt or I would like to see the update-check disableable.
1453	6324320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6324320	laanwj	Qt supports (you need to provide your own certificates though), however the problem is that bitcoin.org does not as its hosted on sourceforge. I dont think is important here. Its not about the data going over the connection, which is pretty boring, just a bunch of version numbers (I guess we could ECDSA sign the data if authenticity is important in the face of man-in-the-middle attacks). Even with encryption, basic traffic analysis can see that youre connecting to bitcoin.org.
1453	6326826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6326826	TheBlueMatt	I dont think its worth encrypting as even if someone MITM-attacks, the worst they can do is make you download the latest gitian zip, which gitian will immediately realize either isnt properly signed (assuming MITM) or not a new version and will discard it. This will work for any bitcoin, as long as you put gitian-downloader in the right place (the installer does it by default, the zip version does not contain the gitian-downloader files). Ill add proxy support to the check, but I really dont like the idea of allowing people to disable the version check...this is meant to address the upgrade-apathy a ton of bitcoin users have.
1453	6327844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6327844	TheBlueMatt	Updated.
1453	6329916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6329916	Diapolo	As Windows-User I really would hate to see an Auto-Update that I cant disable ... even worse if I had to kill that gitian-downloader to "disable" it. Im fine with an info message that there is a new version available and an opt-in to always allow an auto-update.
1453	6330146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6330146	TheBlueMatt	You can disable it. It only asks you if you want to upgrade, it doesnt force you to.
1453	6330549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6330549	laanwj	If you implement proxy support its ok with me, no need to also have a disable option. Polling and asking is harmless. My only objection was the leaking.
1453	6330863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6330863	TheBlueMatt	It has proxy support
1453	6330948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6330948	laanwj	Right, cool.
1453	6333091	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333091	Diapolo	Sorry, I really thought this would enforce updates :D.
1453	6333478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333478	Diapolo	Im asking myself, if your chosen layout will stay the way you intended it to be, when resizing the window. It would perhaps be a good idea to chose a verticalLayout with some horizontalLayout objects. Yes this is not coding related, but Im always behing a clean and good UI :D.
1453	6333952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333952	TheBlueMatt	Fixed the translation stuff and now you cant resize the window :)
1453	6364492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364492	luke-jr	- Binaries dont belong in git. Provide a link to the gitian build instructions and make them an input. - Moving Bitcoin-Qt to a new subdirectory under its own program directory is silly. Why cant it stay where it is? - Why remove the RSS thing? - Shouldnt link to SourceForge for Linux distros with proper package management. How about a qmake option to show another (HTML-formatted) message?
1453	6365558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6365558	TheBlueMatt	1) Meh, no they dont really, but building the cx_Freeze gitian-updater in gitian is a huge change...you would have to build the full list of binaries in that list in gitian, including python and gpg. But feel free to do that. 2) because gitian requires a destination dir to install to. 3) Because it requires yet another binary dep, and this one doesnt have official binaries. 4) None of this effects Linux.
1453	6365837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6365837	luke-jr	1) or just use the official Python and GPG binaries from their websites as inputs 2) $INSTDIR works fine for that...? 4) I dont see any #ifdefs...?
1453	6366122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6366122	TheBlueMatt	1) Admittedly havent tried (because I dont have gitian), though I would doubt they are deterministic. 2) The current gitian files dont output a gitian-updater. If they were changed to do so, we could use $INSTDIR for the target, as it stands, we cannot. 4)
1453	6366207	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6366207	luke-jr	1) We already use non-deterministic official Ubuntu binaries. 2) IMO they should.
1453	6366487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6366487	TheBlueMatt	1) The launchpad ppa isnt official. 2) Fair enough, but, again, as I dont have gitian right now, there isnt much I can do there.
1453	6366514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6366514	luke-jr	1) I was referring to all the gitian builds.
1453	6366776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6366776	Diapolo	I love the update-idea, but I dislike that whole dependencies ... wouldnt it be a nice start to receive a notification for new updates, with a changelog and a direct download link displayed?
1453	6371140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6371140	laanwj	I really think this is fine now. Things can be improved later.
1453	6371170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6371170	luke-jr	IMO, the way this is right now completely defeats the point of gitian and permanently bloats the git repository... until that is fixed (at least by moving the non-deterministic dependencies to gitian inputs), it really seems not having it at all is an improvement.
1453	6371203	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6371203	laanwj	Well yes big executables do not need to be in the git repository, and could be moved to some other place (just keep their hashes in the repository to check during build that you have the right files). Apart from that I think BlueMatt is on the right track and we need to go on with this. Using gitian-downloader is *much* safer than just displaying a download link. Thatd basically be a joke asking for MITM attacks. As weve seen with Flame et al, hijacked autoupdaters are no hypothetical risk.
1453	6692636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6692636	mikehearn	I just wanted to say thanks for doing this. Its hugely important. FWIW, were starting to look at something similar for bitcoinj based apps and will likely just check the compiled dependencies into git. Were more concerned about somebody inserting a backdoor into an upstream compiled JAR though, so the threat model is a bit different.
1453	6693623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6693623	Diapolo	Are we somewhere telling the user that we are installing gitian-updater binaries? I think we should ensure the whole process is as transparent as possible. What happens, when there is a security flaw in the gitian-updater itself, are we then shipping new versions of it automatically, too? Edit: What happens to the stand-alone version (Zip-file)? The update-code is in there too, but it wont work as there is no gitian-updater installed on those machines.
1453	6697457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6697457	TheBlueMatt	1) Im not so sure people a. really care what the underlying updater we are using is or b. care to research how we are installing it. If anyone is looking into the inner workings of bitcoin-qt, its all very clearly documented in the source... 2) If bitcoin-qt finds a gitian-updater folder installed to where it is, it will move that up to the gitian-updater it uses. The gitian scripts dont yet support it, but if we ever need it, it wont be hard. We cant just run from the gitian-updater in the Bitcoin dir, as windows doesnt let you replace exes while they are running (AFAIK). 3) for stand-alone users, they will get the update available popup, and then an error about missing gitian-updater, which I think is the appropriate result. You could update their installs too, but I dont really like touching a stand-alone copy. Also, if the update succeeds, it will update the windows registry with the new version installed, which defeats the purpose of the stand-alone portable version.
1453	7630374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7630374	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1453	8285182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8285182	TheBlueMatt	Closing for lack of interest.
1453	8288118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8288118	laanwj	I dont agree with closing this. Its still nice to have once the issues get resolved. To prevent binaries in the repo we could put the binaries in a specific repo, or eventually build them with gitian too...
1453	8294839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8294839	mikehearn	Im interested. Auto-update is still very important.
1453	8301837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8301837	TheBlueMatt	afaik there were no remaining issues. There are no binaries in this pull. s/lack of interest/lack of ACKs/
1453	8303160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8303160	luke-jr	Only one remaining issue AFAIK: it still hijacks bitcoin.org for client-specific stuff. Doesnt SourceForge have a direct-download webspace?
1453	8306990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8306990	gmaxwell	Im interested too though as not a windows user I cant contribute much except blather. In spite of the many cautions and concerns Ive raised, I think update facilities are very important. Right now it takes forever to get a fix widely deployed and when people finally do update the overwhelming majority of them just pull some file off a website and do nothing to verify its authenticity. This is a very bad situation and improving it is important.
1453	10261172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10261172	gavinandresen	Matt: can you put together a little whitepaper, written for somebody who wont read the code, explaining how this works? Something like: + Every startup (shutdown? day? week?), by default Bitcoin-Qt (?).... fetches something from somewhere ? + If that something says that there is a new version, then... ?gitian-updater is run ? After shutdown or before next startup or... ? + gitian-updater... fetches a new binary and signatures, then makes sure the binary corresponds to the signatures and that the signatures ?match a list of built-in signatures ? A discussion of possible attacks (MITM intercepts fetching of latestversion... binary on the server gets replaced... are there any other interesting attacks?) would also be helpful. Id find that very useful, and I think so would users who are going to be very suspicious of this feature.
1453	10609705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10609705	TheBlueMatt	Note first that this needs rebased quite a bit, if people are interested in merging, I can do it. Not sure where you want this, but here goes: Every application launch (maybe it should be week...) Win32 versions of Bitcoin-Qt will download and compare its contents with the version currently in use. If an update is found, a dialog box appears informing the user that a new update is available (possibly with a note that the version currently in use is considered somehow "insecure"). Iff the user decides to upgrade, gitian-updater is launched which then downloads the new version (via a hardcoded path) and verifies signatures. If the newly downloaded version has valid signatures from at least 3 developers, the installed files are replaced with the new version and, when the process is complete, the user is notified and Bitcoin-Qt is restarted. Note that the auto-upgrade system will not work on non-installed versions of Bitcoin, however the upgrade available dialog will still appear. Potential Attacks: * If bitcoin.org is compromised or otherwise gets bogus data, it is possible that the attacker can make users see the upgrade available dialog box, however, even if the user opts to upgrade, the process will simply download the "new version" and fail when verifying signatures, deleting the new data. * There has been discussion of making gitian-updater quarantine new upgrades for some period, during which a list of people can sign "NACKs" which signify that they have found an issue in the upgrade. Though there was some consensus on implementing something like this system, there was never any implementation and a consensus on exact details was never reached (AFAIR).
1453	10631143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10631143	mikehearn	Its really cool and important. My only comment - have the download and checking of the new version happen in the background before the user is notified. Then the user can simply be told there WILL be an upgrade and the node can restart very quickly. This is usually a better ux because otherwise users tend to cancel updates on the grounds that they dont want to wait or be interrupted at some random future point.
1453	10632892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10632892	Diapolo	I would vote for at least a one time informational message that the client will behave that way (for installed versions only) or even a possibility to opt-out of background-updates and make it an explicit check. I really dislike all that crappy update services that todays software uses / installs without letting me now what they intend to do in the background.
1453	17561271	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17561271	jonasschnelli	would this somehow also works for mac?
1453	17563668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17563668	drak	Could someone please review this PR, I think its quite an important feature for the longevity of the bitcoin ecosystem, especially as we get more users. Being able to quickly upgrade the ecosystem to new protocol version in a timely fashion is essential. refs #2626
1453	17566224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17566224	gmaxwell	Why so interested? Someone give you an exploit against the sourceforge download site? :p
1453	17568872	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17568872	drak	- no idea what you are talking about, given bitcoin protocol lives by having a majority of a given version, its imperative as the ecosystem grows that the network can upgrade. It makes sense to at least have the client inform users of a new download being available. I would not rely on something like sourceforge either, possibly have the version string stored on a github repo hosted page - that way there is version integrity,
1453	17569226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569226	TheBlueMatt	If you want to get this merged, Im sure it needs tons of updates, so feel free to help out :)
1453	17569470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569470	drak	Sorry, C programmer I am not unfortunately, or I would do it.
1453	17569670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/17569670	Diapolo	I need to ask, if we are aware of a certain version containing a security problem, do we issue an alert that all those clients receive and urge to update or are we just doing this "sometimes" (for a massive problem for example)?
1448	6305445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6305445	TheBlueMatt	Why was fr_FR removed from Transifex?
1448	6305483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6305483	Diapolo	Dunno, its not there anymore ... but as we have fr as base language still included and at 100% that should be just fine.
1448	6305496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6305496	TheBlueMatt	Ah, as long as we still have french somewhere.
1448	6305808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6305808	laanwj	AFAIK it was renamed to just fr, to play more nicely with other locales when the fallback is used.
1445	6293633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6293633	laanwj	ACK
1444	6273085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6273085	Diapolo	Tried it and works, ACK!
1440	6263221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6263221	laanwj	ACK
1439	6236275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6236275	laanwj	I appreciate that youre trying to improve the naming, but be careful that this does change behaviour in the case of bitcoind. Previously, QueueShutdown (in non-ui context) started Shutdown in a new thread, to make sure that execution returns immediately. This means that an RPC command such as "quit" got the chance to return a reply. It now calls Shutdown directly, which shuts down bitcoin in the current thread and then exit()s.
1439	6238254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6238254	Diapolo	Updated to reflect your suggestions. Can you explain, why noui.cpp is not added in bitcoin-qt.pro? I found it quite strange to not be able to edit that file directly somehow.
1439	6238317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6238317	laanwj	Looks good now. Well, it used to be that noui.cpp conflicted with some functions in the UI. If this is no longer the case due to using boost::signals now, it could be added in bitcoin-qt.pro too... (or otherwise you could add it under "other" files)
1439	6238420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6238420	Diapolo	Fine and at least on my local build it compiles just fine with noui.cpp added to the .pro. Could you verify, if this would break the official Gitian build process before I update the pull?
1439	6238531	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6238531	laanwj	Im unable to test gitian right now. Maybe its better to leave that for another (more trivial) pull. Focus this one on shutdown functionality, this is quite a big fish to fry, and needs heavy testing.
1439	6238713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6238713	Diapolo	Okay, so lets see what other devs think.
1439	6238888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6238888	laanwj	BTW, does this solve the original issue with exit() in Shutdown? I dont see it in the diff.
1439	6243873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6243873	TheBlueMatt	If the one non-compiling change is reverted, ACK
1439	6244279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244279	Diapolo	Im asking myself, if the change in net.cpp is correct, but as net.cpp is used by the Qt version and bitcoind it should be a StartShutdown() call. I reverted the changes that dont compile, they now use ``Shutdown(NULL);`` again, which should be fine for a non Qt version. The ``exit()`` call in Shutdown() is not an issue anymore for the Qt version, as Shutdown() was moved down (see: to ensure e.g. BitcoinGUI destructor gets called and objects are not just "killed".
1439	6244421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244421	TheBlueMatt	ACK
1439	6244659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244659	Diapolo	One last thing that bothers me, should the 2 ``Shutdown(NULL);`` calls in init.cpp be converted to ``StartShutdown();``, which could be considered the default function to call, when a shutdown is needed. It would end up with Shutdown() via a thread, but fits better to the rest of the shutdown code and usage.
1439	6244743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244743	TheBlueMatt	No, in those two cases, shutdown needs to happen immediately, so launching a shutdown thread instead could cause errors.
1439	6244813	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244813	Diapolo	Understood, thanks :).
1439	6244847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244847	laanwj	ok, thats also a possibility, as it appears that nothing else can "fall through" to there
1439	6244923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244923	laanwj	It does create another issue, though: the icon disappears *before* the shutdown starts, instead of after it ends. Thats one of the things we were trying to prevent. Its useful to keep the icon until the program actually exits, to tell the user that something is running.
1439	6245559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6245559	Diapolo	Seems rather hard to ensure a clean shutdown and wanting to keep the tray-icon till the very end. Leaving the Qt Shutdown(NULL) were it was before leads to killing Qt objects. this looks much more sane now. So any further idea (perhaps in another pull if this requires additional re-work on the GUI)?
1439	6245679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6245679	Diapolo	Perhaps move the Shutdown() back to where it was and re-add the #ifdef QT_GUI around the exit() in Shutdown(). This would make Bitcoin-Qt exit via the last return 0 in bitcoin.cpp.
1439	6245977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6245977	laanwj	Yeah - IMO, the idea to not call exit() at the end of the Shutdown() function in the case of the UI was good. This allows it to wind things down afterward instead of before. (which will eventually also allow it to show some "Warning - do not shutdown computer while Bitcoin is shutting down" warning). **Edit:** or even better: make it explicit and save an #ifdef. Create a ShutdownAndExit() function that shuts down and exits (calls Shutdown then exit), and a normal Shutdown() that just shuts down, then use each one at the appropriate place.
1439	6254673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6254673	Diapolo	I see 2 problems with your last suggestion. 1. Shutdown() calls ``CreateThread(ExitTimeout, NULL);`` which seems to be a 5 second timer, before the process gets killed anyway, so the Shutdown() function still somehow exits / kills the client. 2. I think an #ifdef is easier / cleaner than another function in this case.
1439	6255255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6255255	Diapolo	Updated to ensure tray-icon is kept until Bitcoin-Qt exits, no further changes for no UI client.
1439	6255314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6255314	TheBlueMatt	Well, it ended up with more ifdefs than I thought it would need, but it still looks better than it was imho, ACK.
1439	6263152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6263152	laanwj	ACK
1439	6288245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6288245	TheBlueMatt	Note for whoever merges, close #1182, as this fixes it.
1439	6294457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6294457	laanwj	I think we should aim to merge this asap, but as this affects critical functionality Gavin or Sipa should probably take a look at it for a sanity check.
1439	6299186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6299186	sipa	ACK on the changes to core; The exit(0) in Shutdown inside ifndef qt is a bit ugly though, imho.
1439	6299599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6299599	laanwj	Well, IMO the problem is that "shutdown bitcoin" and "exit program" are essentially different actions. Thats why I proposed adding a ShutdownAndExit function, and using that where appropriate: in StartShutdown [ifndef QT_GUI] and AppInit. The name would also clearly signal to the programmer that the function never returns. The normal Shutdown function would shut down bitcoin and return. Diapolo thought itd be less clear, but I think itd be better to be explicit.
1437	6227661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6227661	Diapolo	Whenever I proposed to update to Boost 1.49 for the Win-build I got the answer no that is not importand enough ... see #1023, which even hardens the URI handling.
1437	6227977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6227977	TheBlueMatt	Dunno, maybe gavin didnt quite understand the phrasing there. To be clear, this simply encourages using a path of boost_1_49_0 instead of boost_1_47_0 when building with a MinGW makefile, if you add your own -I/-L you can still gladly use any boost version you want. It also upgrades gitian build to use 1.49 and patches boost according to a request for testing that a boost developer made at and that has not gotten any negative confirmations and works as far as Ive tested it.
1437	6228011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6228011	Diapolo	Im with you and I have used boost 1.49 with this mentioned lines enabled for a long time now. I think my pull would perfectly fit on top of what you are doing here, but it seems no one even tried to look at it in detail :-/.
1437	6270376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6270376	gavinandresen	I think this feature is big enough it needs a test plan (see for an example of what Im thinking). Also, since it opens up potential security holes, writing a tool to throw "fuzzed" input at it and verifying that nothing bad happens would make me happy.
1437	6274621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6274621	TheBlueMatt	To test: 1) launch Bitcoin-Qt with a bitcoin: URI to make sure it opens URIs provided at initial start. Result should be opening directly to the send dialog with the content of the provided URI. 2) while [ true ]; do ./release/bitcoin-qt.exe bitcoin:1JBMattRztKDF2KRS3vhjJXA7h47NEsn2c; done Ensure only one URI is added per second to the send dialog (note that any more sent to Bitcoin will result in an error locking datadir as the new client attempts to load normally, this is an unavoidable result of the IPC mechanism), Bitcoin-Qt isnt using an unreasonable amount of CPU, and switching to the send dialog and scrolling to the bottom each time a new URI is added. 3) With the listening bitcoin-Qt running, kill Windows without shutting it down, start again and ensure that the same results. 4) Click the Send button and with the Send Dialog box up, attempt to open new URIs. Those URIs should be ignored until the send has finished. To Fuzz with printable characters and URIs up to size 300: (note that anything larger than 256 will attempt to launch Bitcoin and give an error that it cannot obtain a datadir lock). while [ true ]; do ./release/bitcoin-qt.exe bitcoin:\`tr -dc "[:print:]" < /dev/urandom | head -c $[ $RANDOM % 300 ]\`; sleep 1; done To Fuzz with control characters and URIs up to size 300: (note that anything larger than 256 will attempt to launch Bitcoin and give an error that it cannot obtain a datadir lock). while [ true ]; do ./release/bitcoin-qt.exe bitcoin:\`tr -dc "[:cntrl:]" < /dev/urandom | head -c $[ $RANDOM % 300 ]\`; sleep 1; done
1437	6294361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6294361	laanwj	It would be nice to get URL support back in once and for all. If that means requiring boost 1.49 *on windows* thats fine with me. But its too bad it still needs the monkey patch to be stable :/ Wont the upstream boost developers integrate it? `Anything larger than 256 will attempt to launch bitcoin` Is that desired behavior? Id prefer showing an error message about a too-long URL, then quitting. Maybe for a later pull.
1437	6300139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6300139	Diapolo	I consider this pull as a base for further updates to the URI handling code, even if not all parts of my re-work pull #1023 are considered good or mergable, Im fine with a cherry picking or splitting them. But I think this pull needs to get in ASAP and if we need a patched boost 1.49 on Windows thats ok.
1437	6300706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6300706	laanwj	I agree with merging this ASAP. Feels like a deja-vu, but can we detect the patched boost 1.49 somehow, compile time? It would be nice if it failed if one tried to build on windows with URL support without the patched boost. Otherwise, someone building bitcoin manually on windows might run into the mysterious crashes again.
1437	6301160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301160	Diapolo	I guess we need no detection for the Windows users, we just need an official dependency package, which includes the used version of Boost and its libs.
1437	6301255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301255	laanwj	Agreed, but not everyone will be using that, if you build from source you could insist to build everything from source. Its easy to miss.
1437	6302267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6302267	Diapolo	Why not ``#if !defined(BOOST_INTERPROCESS_HAS_WINDOWS_KERNEL_BOOTTIME) || !defined(BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME)`` and throw an error. It should be insinde an #ifdef WIN32, too or use defined(WIN32) as addition argument.
1437	6302817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6302817	TheBlueMatt	In terms of erroring if we dont detect BOOST_... flags specified, Id really prefer not to. I dont want to follow boost and remove the checks if boost upgrades and complicate them with complicated boost version checks. Anyone who is building bitcoin for Windows should be reading and creating executables by closely following the gitian commands. Especially note that we add the mthreads/-fexceptions flags in the qt gitian descriptor, not in Bitcoin itself.
1437	6303212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6303212	laanwj	-mthreads/-fexceptions doesnt apply to people building on windows. Its a cross-compile specific issue. Another idea (better than failing) would be to make URL support a build option in bitcoin-qt.pro, which is disabled by default on Windows. Then document it as "Enable this only with a patched Boost >=1.49 (link to patch), otherwise you may experience random crashes at startup".
1437	6303306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6303306	TheBlueMatt	And AFAIK, most people who compile bitcoin for windows do cross compile. I know several people recently have been on #bitcoin-dev asking how to build it, and ended up giving up and cross compiling in an Ubuntu VM.
1437	6304959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6304959	Diapolo	At least I build it native on Windows ;).
1437	6359118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6359118	TheBlueMatt	Added a #if defined(WIN32) && (!defined(BOOST_INTERPROCESS_HAS_WINDOWS_KERNEL_BOOTTIME) || !defined(BOOST_INTERPROCESS_HAS_KERNEL_BOOTTIME) || BOOST_VERSION < 104900) #warning
1437	6362559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6362559	Diapolo	Thats a good thing, even if it does not look very nice ;).
1437	6371220	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6371220	laanwj	I dont think looking nice is important in any way here. It is a complex logical expression because we need a complex logical expression. ACK
1437	6372560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6372560	sipa	I think it is important that this functionality gets added soon. I havent checked or tested the code though.
1434	6232580	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6232580	Diapolo	Updated - added ``updateDisplayUnit();`` in OverviewPage::setModel(), to init the list of last transaction on the overview page with the current display unit.
1434	6254102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6254102	Diapolo	Can you take a look at the code, I think this is a rather "small" one, which could get in, if you dont want to add/change something.
1434	6281251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281251	Diapolo	Last commit implements 2 of your suggestions , this will get squashed after we are "final" :).
1434	6281861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281861	Diapolo	Removed the ?: and int usage from the SIGNAL. Anything left?
1434	6281993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281993	laanwj	ACK
1434	6282052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6282052	Diapolo	Merged all commits, no further changes, final then.
1434	6282405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6282405	laanwj	BTW one unrelated comment regarding your commit messages. Its not very urgent, and theres no need to change it for current pulls. However, currently you try to trim everything into one line, this makes for very long "git log" lines when abbreviated. The general format that most people use for a commit message is: <short description of ~50 chars> <long description> for example, see commit 1025440: Added immature balance for miners. Only displayed if the balance is greater than zero. This introduces internal types: * CKeyID: reference (hash160) of a key * CScriptID: reference (hash160) of a script * CTxDestination: a boost::variant of the former two CBitcoinAddress is retrofitted to be a Base58 encoding of a CTxDestination. This allows all internal code to only use the internal types, and only have RPC and GUI depend on the base58 code. (... continued ...)
1434	6381274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6381274	Diapolo	Can you merge this now, Im working on further changes in some of the files and would like to avoid merge-conflicts :).
1433	6218940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6218940	laanwj	Havent had time to test it yet, but yeah this is better
1433	6227890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6227890	Diapolo	Updated and added: - link Apply button and OK button when enabling or disabling them (how good is a disabled Apply button, if OK saves too ^^) - use LookupNumeric() from netbase to verify proxy address (via an EventFilter) - allows IPv6 and fixes #821 - change proxy address field to QValidatedLineEdit and add visual feedback - add a status label used for displaying a message for invalid proxy addresses
1433	6283211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6283211	Diapolo	Updated to reflect changes made in #1434 and use a well-formated commit message ;).
1433	6293876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6293876	laanwj	Ive tested it, works great. The default dialog size is a bit small, Id recommend making it a bit larger. Apart from that, ACK
1433	6300177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6300177	Diapolo	Im going to add a restart warning for enabling / disabling SOCKS proxy and will re-size the dialog a little. If this is in, it would be really nice to get this into 0.7, do you think thats possible
1433	6300472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6300472	laanwj	Yes, thats possible. Gotta love UI-only changes.
1433	6301533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301533	Diapolo	Last update: make dialog a little bigger in size / add warning for enabling / disabling SOCKS proxy
1433	6302775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6302775	laanwj	ACK We should find a more general way of doing the restart warnings later (for example, using a map of QWidget* instead of booleans, so that one function can be used), but that isnt needed for this commit. **BTW: we probably need a translations update after this?**
1433	6304921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6304921	Diapolo	We need for sure a translation update, yes :). I suggest you do a bitcoinstrings.cpp update and I will fetch current translations from Transifex, create a pull and tomorrow Ill generate a new english master file.
1431	6208335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6208335	jgarzik	IPv6 support should be enabled by default, disabled by necessity.
1431	6208550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6208550	luke-jr	Thats what this does...
1431	6212706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6212706	sipa	What is the practical difference between USE_IPV6=0 and USE_IPV6=-? One compiles it in, but leaves no way to use it, the other just doesnt compile it in.
1431	6212891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6212891	luke-jr	-onlynet=ipv6 should work, no?
1431	6213037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6213037	sipa	If you call SetLimited(NET_IPV6) explicitly, -onlynet=ipv6 will just disable all other networks, and there wont be any network left.
1431	6213671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6213671	luke-jr	Thats why its in an else clause
1431	6213859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6213859	sipa	Oops, missed that in the diff. ACK.
1431	6510890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6510890	luke-jr	Found and fixed some build bugs: 1. Omitting USE_IPV6 in Bitcoin-Qt effectively disabled it 2. The preprocessor might evaluate the right-hand side of && even if the left hand side is false, so complained if USE_IPV6 was undefined
1431	7433270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433270	jgarzik	weak ACK. Would prefer a better system for including and overriding USE_FOO defaults. Some build systems look for a file "makefile.local" or "makefile.cfg" or whatever. If it exists, read it and use it to adjust the defaults.
1431	7433435	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7433435	luke-jr	GNUmakefile can be used for that purpose (I do this).
1431	7434612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434612	Diapolo	Would be nice to not introduce something that does not work on Windows or makes building even harder to do ;).
1431	7434639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434639	luke-jr	GNUmakefile is more of an out-of-tree config thing. Windows has .BAT files :P
1431	7632118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7632118	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1431	7984407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7984407	gmaxwell	ACK.
1431	7984635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7984635	Diapolo	So with Qt, now do I need to supply "USE_IPV6=1" or is that also default for Qt ^^?
1431	7985162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7985162	luke-jr	Its default.
1431	7993018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7993018	laanwj	It has been default for a long time. IPv6 is not exactly experimental anymore :)
1429	6789412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789412	TheBlueMatt	This needs rebasing, and Im not going to keep rebasing this stuff without any interest in eventually merging. If it ever gets interest, I may reopen.
1427	6149098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6149098	csyangchen	I think the old one is preferred if I want to parse Startup time from log file, not caring whether or not the log file tracks timestamp. PS: I think the timestamp format itself is a little bit redundant. Taking a significant fraction of the log file size.
1427	6150871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6150871	rebroad	if one is wanting to parse start up times from the log file with timestamps turned on, one wouldnt use the startup time line anyway, but the first line with "Bitcoin version", or the line after "Default data directory". The "startup time" line is entirely redundant with timestamps enabled.
1427	6155046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6155046	csyangchen	I agree with the point you made. However, a redundant line in debug wont hurt, just not worthy of a separate pull, IMO. Previously (appeared at least in v0.6.0, fixed by now ) there is a duplicated timestamp output in main.cpp, on the recv message: "timestamp timestamp received: ...". That, I think, is a duplication worthy of fix, considering frequency of the recv message. If we actually want a start time message, I think we should also provide a stop time message, so that users can parse the debug file and calculate the session time, when timestamp is not provided.
1427	6171446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6171446	Diapolo	The duplicate timestamps are fixed, I created a patch for this a few weeks ago. I also think this pull is unneeded.
1427	6214302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214302	luke-jr	Its not duplicate if you have logtimestamps disabled. Just because someone might be interested in a few cases where times matter, doesnt mean they want every line timestamped.
1427	6415920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6415920	luke-jr	, did you test this at all? It doesnt compile... -.-
1427	6719094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719094	rebroad	everything takes so long to compile on my laptop, as due to the way git works, it causes all file modification times to be changed, so make tried to recompile everything. If I could work out a way for make to use checksums instead of modification times, then my compiles wouldnt take so long, and Id have tested this. thanks for the fix!
1427	6720790	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6720790	Diapolo	I still think this one is no needed, your other current pulls that re-work debug-messages and stuff make far more sense.
1427	7432772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432772	jgarzik	ACK, for ever-so-slightly enhanced privacy
1427	7632123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7632123	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1426	6139208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6139208	TheBlueMatt	Id like to keep one leading 0 on diff-1 blocks, instead of removing all the 0s, which would leave only 6 0s on current-diff blocks, which IMHO is acceptable, but ACK on the idea.
1426	6140186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6140186	gavinandresen	I like the at-least-one leading 0 on min-difficulty blocks idea; Ive spent a lot of time staring at min difficulty testnet block hashes.
1426	6140210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6140210	gavinandresen	One downside of this change: it might break blockexplorer.coms block lookup (please test, I know it works with the existing lots-of-leading-zeroes format).
1426	6145819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6145819	rebroad	I see what you mean re testnet. Perhaps I should code it so that its one leading zero whatever the situation...?
1426	6203715	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6203715	sipa	Solution: use the low bits of block hashes to identify them, instead of high bits which contain several zeroes?
1426	6214268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214268	luke-jr	I definitely prefer showing the low bits over high ones.
1426	6219802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6219802	TheBlueMatt	Agreed, as long as someone pings theymos et al to get bbe/blockchain.info updated to support low bit-searching implemented before release.
1426	6221169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6221169	luke-jr	BBE doesnt care which bits you use. Blockchain.info doesnt accept partial matches/searches at all.
1426	6222128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6222128	TheBlueMatt	Ah, well then I guess we should just switch to low bits.
1426	6332615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6332615	sipa	Using the 14 lowest hex characters of a block as identifier should suffice for 100 years (0.2% chance for a collision after 5.46 million blocks). So Id say use the 16 lowest ones.
1426	6334207	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6334207	gmaxwell	Id somewhat prefer to show the full values, because thats what the getblock rpc needs. If were concerned about space we should create rotation that doesnt stink.
1426	6346104	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6346104	rebroad	its just a debug.log. I doubt anyone will have a debug.log file as long as 100 years, so 14 characters would be an extreme overkill. it doesnt currently show full values and never has. The current requirement seems to be that the numbers dont want to be duplicated within the entirity of the debug.log file. For that, the last 14 hex characters are more than sufficient (as sipa pointed out).
1426	6411056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6411056	luke-jr	Are you going to update this to show the least-significant (end/tail) N?
1426	6490750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6490750	rebroad	Yes, very likely, when i next get access to a computer (next week sometime).
1426	6719744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719744	rebroad	can I ask your opinion - is it better to hardcode the substr numbers or instead do it in a way that uses the length of the string?
1426	6719926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719926	luke-jr	Id just go with substr(504)
1426	6722622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6722622	rebroad	modified (not yet tested - compiling)
1426	6723154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723154	sipa	wth? 504? hex hashes are only 64 characters long.
1426	6723181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723181	sipa	I prefer the reported hashes in the debug file to be globally and near-forever usable as unique identifiers. Id just use the low 64 bits of the hash (i.e., the last 16 hex characters). .substr(48) i suppose.
1426	6723281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723281	luke-jr	... yeah, not sure how I got 504 (except I know I forgot to divide by 8)... long day :( I meant .substr(56), but I dont mind 48
1426	6723796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6723796	gmaxwell	I know it doesnt currently show full values. I still think it should show the full value. The partial values are almost useless because there is no way to getblock by them. I dont think carrying another index for partial block values names sense, nor do I think precluding hash tables that require exact lookups makes sense. Reducing them by 1/4th while breaking lookup with getblock isnt a worthwhile tradeoff. (Of, course, Ill continue to patch my nodes to log the full value regardless, but I think its a reasonable default).
1426	6733760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6733760	rebroad	updated. now substr(48) (effectively). Next.. shall we shorten the work= field....?!
1426	6733977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6733977	sipa	How about using the unit GHy? (gigahash year). Were currently at around 11874.5 GHy.
1426	6747803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6747803	rebroad	how do you turn the current value into GHy?
1426	6750076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6750076	sipa	Divide the bnWork number by 31556926000000000 (1 billion times the number of seconds in a year).
1426	6765569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6765569	rebroad	Shall I add that change to this pull, or a separate pull (which would need to go in after this one?)
1426	7287607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7287607	midnightmagic	Currently there is no way for a user to go from the entries in the debug.log, using bitcoind calls only, to useful information. Is there no intention of correcting the api calls so they accept whatever it is were dumping into debug.log? This way we can do investigation without writing our own extensive tools or being forced to visit a website? How is it that you guys debug problematic blocks? Do you maintain extensive patchsets of your own that dont depend on behaviour in the base client?
1426	7432867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432867	jgarzik	Weak ACK, mostly dont care. BLOCKSUBSTR should be in a separate, zero-behavior-change commit.
1426	7434641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434641	Diapolo	BLOCKSUBSTR could take a little comment IMHO.
1426	7434729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7434729	luke-jr	While were fence-painting, it seems to me hash.ToString().substr(BLOCKSUBSTR).c_str() could be reduced to hash.BlockSubstr().c_str()
1426	7632127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7632127	BitcoinPullTester	Automatic sanity-testing: FAILED MERGE, see for test log. This pull does not merge cleanly onto current master
1426	7879870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7879870	laanwj	Closing this in favor of #1670
1420	6277688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6277688	laanwj	This means you can also remove the following from handleURI: if(!isActiveWindow()) activateWindow(); "Binding" a parameter, as it is called, to a SIGNAL or SLOT is not possible with Qt, so well need to keep toggleHidden around.
1420	6281440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281440	Diapolo	Updated, and removed this from handleURI: <pre> if(!isActiveWindow()) activateWindow(); </pre>
1420	6320846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6320846	laanwj	ACK
1417	6214229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214229	luke-jr	Does this wait until the client is actually shutdown?
1417	6214532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214532	Diapolo	The function is called, after we hide the main Window in preparation of a shutdown, which is the right place.
1417	6214665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214665	luke-jr	No, the current behaviour showing the icon until the client has exited completely is by design. See bug #908
1417	6214760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214760	Diapolo	Alright, then the call is miss-placed, but it IS needed to fix the icon still shown after shutdown issue. Will update to find a better place :), thanks for pointing that out.
1417	6215373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6215373	Diapolo	Okay, I took a look and come to the conclusion as its not possible to pretend, when trayIcon will be deleted, we have to call trayIcon->hide() as long as we know it is controllable. In the present code from master branch this will not succeed and so the icon is displayed, even if the app is closed already. Which one is worse, a tray-icon when there is no app or a missing tray-icon, while shutting down the app? Edit: I think its overkill to re-implement the class destructor from QSystemTrayIcon to call hide there.
1417	6215424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6215424	luke-jr	Why cant you simply grab the pointer and hold onto it until shutdown completes?
1417	6215535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6215535	Diapolo	Seems possible, but Im not sure if I can do this in a clean and sufficient way. Im sure other devs would say dont touch the Shutdown() function for hiding a system tray-icon and I think so too. If you have an easy and working solution for both problems here, youre welcome ;).
1417	6215739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6215739	luke-jr	```C++ Shutdown(NULL); + window.hideTrayIcon(); ```
1417	6215782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6215782	Diapolo	Well Shutdown(NULL) calls exit(), so it wont return and cannot reach window.hideTrayIcon();
1417	6219875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6219875	Diapolo	Any idea for this one ;)?
1417	6226533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6226533	laanwj	Yeah, good catch. Shutdown calls exit()... that kind of sucks. This means that execution flow never leaves the function, and thus the destructor is never called. Luke-jr is right, though, that hiding the icon *before* the shutdown function also isnt desired behavior. The reason that Shutdown calls exit is that, with bitcoind, any thread can call Shutdown(). No matter what thread calls it, it has to make sure that the process exits. With the UI, the UI thread is the only thread allowed to actually shutdown the core. Hence `uiinterface->QueueShutdown()`. As with the UI we have control over what happens after Shutdown, this means that you could #ifdef the final exit() from Shutdown to not be called when QT_GUI. This will fix the problem without needing any of the changes in this pull.
1417	6227644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6227644	Diapolo	Sounds good, will test and update this pull to only do that change.
1417	6227750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6227750	Diapolo	Updated and verified to work (on Windows). Tray icon is removed, but is visible until core is shutdown.
1417	6228642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6228642	laanwj	ACK
1417	6231547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231547	TheBlueMatt	NACK, bitcoin-qt never exits if you send it SIGTERM after this (though, to be fair, its not really any worse to how it used to SEGFAULT every once in a while, in any case, maybe we could fix that too)
1417	6231617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231617	Diapolo	SIGTERM is non Windows stuff, I need your help here :D. When receiving that signal it is handled via HandleSIGTERM(), which simply sets fRequestShutdown to true. I could only find ThreadMessageHandler2(), which seems to initiate a Shutdown(), right?
1417	6231637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231637	TheBlueMatt	Correct, after SIGTERM, we end up just calling Shutdown. I suppose we really just need to replace our Shutdown calls with uiInterface.QueueShutdown() (have I mentioned how ugly that looks when we are building without GUI?).
1417	6231706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231706	Diapolo	Wouldnt it work if I just extend my pull to modify Shutdown() to be like this in the end: <pre> // ensure a clean exit for Bitcoin-Qt #ifndef QT_GUI printf("Bitcoin exited\n\n"); exit(0); #else uiInterface.QueueShutdown(); #endif </pre>
1417	6231725	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231725	laanwj	Sounds like a good solution. That would also likely fix the current crashes when sending sigterm to the ui executable.
1417	6231753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231753	laanwj	Last comment was Do not call queueshutdown from Shutdown that will cause big trouble! The qt event loop is long dead by that point and for non-ui youd be calling shutdown recursively.
1417	6231761	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231761	Diapolo	I will update, but I need one of you (if you use Linux / Unix) to test and verify this.
1417	6231777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231777	TheBlueMatt	Personally, Id like to not have to see uiInterface.QueueShutdown everywhere, but be able to call Shutdown which calls uiInterface.QueueShutdown which can call FinishShutdown in its callback, or simply have Shutdown call FinishShutdown directly if we dont have GUI...but maybe Im the only one who doesnt like having to uiInterface in bitcoind...
1417	6231802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231802	Diapolo	Damn, I was too quick ... and missunderstood your comment :-/.
1417	6231997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6231997	Diapolo	Well no, I dont get it ... calling ``uiInterface.QueueShutdown();`` triggers ``QMetaObject::invokeMethod(QCoreApplication::instance(), "quit", Qt::QueuedConnection);``, which puts a quit() command in the main event loop, right? So why should the event loop be gone when we are in ``Shutdown()``? I cant find the connection between the two.
1417	6232267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6232267	Diapolo	Dont bother with my last question, I had a discussion on IRC with BlueMatt and will come up with a new pull-request tomorrow and close this one.
1417	6235592	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6235592	laanwj	There is nothing wrong with the current sequence. QueueShutdown first winds down the Qt event loop, which, returning in the main function, properly calls Shutdown. You cannot simply spawn Shutdown in a new thread when the UI is running, this results in crashes so it takes a safer way. I really dont care about "seeing ui.QueueShutdown" everywhere. Thats confounding bikeshedding with a real issue. Sure, if you can come up with a more proper name in non-ui context thats great but dont try to fix whats not broken!!!
1417	6235824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6235824	Diapolo	See #1439, which I think is rather elegant.
1416	6114750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6114750	gavinandresen	ACK. It makes ./test_bitcoin spew tons of "best subset" messages, but thats not your fault.
1416	6298720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6298720	sipa	ACK
1416	6318520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6318520	gavinandresen	ACK
1415	6090020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6090020	luke-jr	ACK
1415	6090117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6090117	TheBlueMatt	ACK, is probably still referring to bitcoind, where you can leave the - out, but since the - works for both, - should be there.
1415	7277152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7277152	EnasQ	what is the exact format because I wrote this but does not work: qmake.exe C:\bitcoin-bitcoin-v0.6.1-621-g12e5881\bitcoin-bitcoin-12e5881\bitcoin-qt.pro -r -spec win32-g++ USE_UPNP=-
1413	6085005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6085005	gavinandresen	NACK-- the compiler is perfectly able to do this kind of micro-optimization, and the code is clearer in its original form in my opinion.
1412	6207119	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6207119	Diapolo	As is currently not here that frequently it would be nice to have some other dev, who ACKs on small GUI changes like this one :).
1412	6214590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6214590	Diapolo	Updated to reflect lukes suggestion.
1409	6074683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6074683	wizkid057	ACK
1409	6086175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6086175	Diapolo	Im not sure if I understand it, do you intend to remove the "generated" status from the client? That would lead to more changes, I think of the mature vs. immature state and other strings used in Qt. Perhaps you can clarify this.
1409	6086388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6086388	wizkid057	It seems to set it up so that generation transactions are just treated more like normal transactions and are tagged in the category "received". Since I would guess that anything that made use of this data already should be able to handle a "received" transaction, I dont see the issue. Here is a paste of the last block I mined on testnet3 with it:
1409	6086423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6086423	Diapolo	I think there are still places in the code that need to be changed for the GUI client to handle generated like received, but I guess should give his thoughts on this, too.
1409	6087323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6087323	luke-jr	Its not meant to make generation identical to ordinary received coins. That would create problems. Its just intended to make the common parts behave the same, so its not a hassle to handle generated coins properly. With all current versions, its impossible to tell what address or account generation was received on, which makes it impossible to handle them without hacking the code.
1409	6298568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6298568	sipa	I like this. Less special casing for generations and ability to assign them to accounts. I do think that changing the way for denoting generations (by "from" : "generation" instead of "category" : "generation") may need some discussion first though, as this breaks compatibility.
1409	7471221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7471221	jgarzik	It is nice to remove this special casing
1409	7633490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7633490	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1409	7703265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7703265	sipa	ACK on the latest change ({"generated" : true} instead of {"from" : "generated"}). One minor nitpick: setting the status to "processing" instead of "validating" only at 2 confirmations seems arbitrary to me. 1 confirmation seems more natural. Anyone else with an opinion?
1409	7707634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7707634	Diapolo	I also like "processing" on 1+ confirmation better, I dont get the 2+ here. Does this touch or better do you need to look into other Qt code using mature / immature amounts or did you consider all that with the current patch?
1409	7710555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7710555	luke-jr	The only effect on Bitcoin-Qt is that it shows the address.
1409	7711499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7711499	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1409	7931754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7931754	sipa	Can you rebase?
1409	7935374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7935374	gavinandresen	I dont like the "processing" state. I say simplify and go with: "confirmed" -- 6+ confirmations (120+ for generation) "validating" -- 0+ confirmations ( 1+ for generation) "invalid" -- negative confirmations (contradicted in main chain) Those three states plus the explicit confirmations number should be plenty.
1409	7939420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7939420	luke-jr	I think it might be nice to have a state that represents "possible to spend immediately, but not confirmed yet" (so 1+/100+); thoughts?
1409	7975862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7975862	sipa	I dont mind a "maturing"/"processing"/"confirming" state for 1+/100+, but I dont really care.
1409	7976399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7976399	freewil	> I think it might be nice to have a state that represents "possible to spend immediately, but not confirmed yet" (so 1+/100+); thoughts? +1
1409	7982809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7982809	gmaxwell	Hm. I thought this was supposted to make generated txn work better with accounts, but it doesnt seem to. E.g. listtransactions "accountthathashadgenerationsenttoit" still doesnt give the expected results.
1409	7983236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983236	luke-jr	It does for me?
1409	7983319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983319	gmaxwell	erp. Nevermind. I fail at testing just didnt have an account set on my last p2pool address.
1409	7983443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983443	gmaxwell	How about: "invalid" for conflicted txn / orphan coinbase "validating" for 0 "confirming" for 1-6 "maturing" for 1-120 coinbase "confirmed" for >=6 / >=120 In any case, shed painting the terms aside, this appears to work for me.
1409	7983832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7983832	luke-jr	Having a special status for coinbases contradicts the main goal of the status ;) Id worry "confirming" could be misread as "confirmed" too easily. I can rebase this as soon as makes a final call on the shed painting :)
1409	7984656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7984656	gmaxwell	Good call on confirming being potentially misread (even though the RPC is, in theory, just for machines lots of code will pass along our text, and it costs nothing to use another string). I think this is ready to go in, except for the rebase and shed painting.
1409	7985346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7985346	gavinandresen	Luke, it is long discussions like this where youre pig-headed and ignore what everybody else says that makes me want to ignore every single one of your pull requests. So: fix your idiosyncratic coding conventions for ... else if. And get rid of the status key entirely; applications have survived without it, and there is obviously no consensus on what words or confirmation levels aught to be. And maybe this will make it into the 0.8 release. It is too late for 0.7.
1409	7986148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7986148	luke-jr	Rebased without "status"
1409	7987647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7987647	luke-jr	"category" changes reverted to be safer (without "status" it can more easily be misinterpreted).
1409	7987791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7987791	gmaxwell	This is a often requested big improvement, even without the status changes. With the category being left alone, its reasonably conservative. Ive tested it fairly extensively both on testnet and mainnet wallets. Future pulls can put the status stuff back in after we figure it out in some future version. The status can also indicate things like observed doublespends. Ill open an issue for that.
1408	6074405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6074405	TheBlueMatt	Updated with all the feedback so far. Any further work (aside from bug-fixes) will be done on other branches, so this branch is ready for review. Take special note of the last commit (and its very long commit message).
1408	6789402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789402	TheBlueMatt	This needs rebasing, and Im not going to keep rebasing this stuff without any interest in eventually merging. If it ever gets interest, I may reopen.
1406	6050206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6050206	tcatm	Whatever you are trying to fix with this, please break it into smaller pull requests. Such a huge diff is insanely hard to review.
1406	6050300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6050300	grimd34th	after further review parts are broken and i cant let this out.
1405	6183408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6183408	Diapolo	The "Add UI InitMessage for -loadblock." commit should get in asap, but be seperate from this one.
1405	6189658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6189658	TheBlueMatt	Finally got around to benchmarking IBD using -autoprune, it was a tiny sliver faster than master (just under 5%) -loadblocking to the current block, but its blkindex.dat was only 351MB instead of 554MB. Thus, I made -autoprune default and rebased.
1405	6206992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6206992	sipa	No noticeable speedup here, but ACK on the idea. Ill have a look at the code later.
1405	6209711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6209711	jgarzik	idea ACK. I like this!
1405	6789452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789452	TheBlueMatt	Closing in favor of an (eventual) ultraprune. No point in merging a stop-gap that conflicts with an actual solution.
1404	6143023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6143023	Diapolo	This one for sure includes too many non-relating commits.
1404	6145779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6145779	rebroad	which commits would you want to see removed? Its too much of a headache to remove -quietinitial, so Id rather wait until that gets pulled and rebase this than remove it.
1404	6146160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6146160	Diapolo	All that are unrelated to "Download blocks from several peers concurrently" e.g.: - Make truncating the debug.log file an option. - Show more significant bytes of block hashes. - ...and so on Dont mix different projects, just open a pull for one thing and this is intended to allow to download blocks from several peers at the same time, right? Its unlikely to get that pull merged ever in this state IMHO.
1404	6149173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6149173	rebroad	is there an easy way for me to test this pull request with those commits on my machine but without pushing them to github?
1404	6413614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413614	luke-jr	If you really need to depend on other pullrequests, please at least rebase on top of them. I was going to put this in next-test, but it conflicts too much with your other pullreqs... These commits should be removed or merged under the real changes (only if theyre real dependencies): - Show more significant bytes of block hashes. - Show the timestamp for the block. - Add -proxytoo option, which allows proxy use non-exclusively, unlike the -proxy option. - Make truncating the debug.log file an option. - Add command line option -quietinitial.
1399	6213068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6213068	sipa	Rebased, refactored the code a bit, and added unit tests. Github fails to recognize it as automatically mergable...
1399	6332382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6332382	sipa	Added more tests.
1399	6404972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6404972	Diapolo	does this fix ``::1`` considered as invalid, if used in ``LookupNumeric()``?
1399	6405090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6405090	sipa	yes; theres even some unit tests that test "::1".
1399	6405164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6405164	Diapolo	Good to see it got merged :).
1398	6016834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6016834	sipa	What if someone doesnt have 4.8 installed, but does have another version? In general, I think people who compile their own binaries dont mind using the latest their system provides.
1398	6017297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6017297	luke-jr	Then they can specify BDB_LIB_SUFFIX= (blank). In general, isnt it advisable to only use 4.8 for compatibility?
1398	6278025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6278025	laanwj	I always compile using 5.x, and never had any problems. Im not sure how it classifies as shooting myself in the foot. Newer Ubuntu versions dont even have packages for libdb++4.8-dev anymore.
1398	6278072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6278072	luke-jr	if you ever use a 5.x bdb, your wallet is incompatible with all the official builds of bitcoind/Bitcoin-Qt and downgrading is impossible. BlueMatts Ubuntu PPA provides bdb 4.8 for newer Ubuntu versions.
1398	6278093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6278093	sipa	Defaulting to 4.8 makes sense for release binaries, but there we control the build environment very strictly anyway. When people compile themselves, I think whatever is default on their system is best.
1398	6278126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6278126	sipa	db5.1_dump wallet.dat.old | db4.8_load wallet.dat
1398	6278370	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6278370	luke-jr	Oh, didnt know that was possible. Nevermind then I guess.
1396	6280945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6280945	sipa	Not sure this is needed, but ACK on the code change.
1396	6605505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6605505	jgarzik	ACK
1396	6607718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607718	Diapolo	I still dislike the parameter description.
1396	6615675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6615675	rebroad	what do you suggest for the parameter description? I changed it to that as per suggestion.
1396	6616439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6616439	Diapolo	I think the parameter name should somehow match the description, so I propose ``Shrink debug.log file on client startup (default: 1 when no -debug)``, which uses a similar wording like -discover in the brackets. If you dont like that just keep it, I guess there are more important problems to discuss ;).
1396	6617586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6617586	rebroad	amended as per your suggestion.
1396	6617588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6617588	rebroad	amended as per your suggestion.
1393	5984145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5984145	gmaxwell	In spite of the non-determinism of the smart time I like these criteria a lot.
1393	6429740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6429740	luke-jr	So got around to testing... all my transactions are showing a smart time of 1 (01/01/1970 00:00). Guess I have some fixing to do.
1393	6494467	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6494467	luke-jr	Reminder: A||B is boolean in C++, not the first value that casts to true. :( Fixed.
1393	6681834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6681834	luke-jr	Fixed a bug and tested some more. Two open issues: - Would be nice if sorting transactions by time in Bitcoin-Qt respected the fixed order; I think Qt does it right now, though :/ - Probably during -rescan and initial blockchain catchup, the block time should be trusted even if the user has transactions dated after them? Opinions on this case (easy to test by sending a transaction before catching up)
1393	7030895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7030895	laanwj	ACK Re:Qt, sorting transactions by time sorts the transactions by time, nothing else. Anything else would be confusing IMO. The only thing that can be sensibly changed is the default order, when not explicitly sorting by anything. In the transaction details we can show all the different times.
1393	7038748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7038748	luke-jr	Except for extreme differences in the local clock, the assigned order from this patch is always chronological; but right now, sorting by time in Bitcoin-Qt has no logic behind the order of transactions with the same time.
1393	7634588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7634588	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1393	7967912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7967912	gmaxwell	Where does this stand?
1393	7977721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7977721	luke-jr	Been running fine for me since next-test 2012-07
1393	7981411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7981411	gmaxwell	ACK, works for me, apparently works for other people.
1393	8394447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8394447	gavinandresen	Hindsight is always 20/20.... ... but this pull didnt get sufficient testing/code review. I think a test plan should have been written and followed to try to catch the bugs earlier.
1393	8397660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8397660	luke-jr	I agree on lack of testing. Unfortunately, the tests it included didnt cover enough (and I havent thought of any way to actually test the problems found either).
1392	5942135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5942135	sipa	ACK
1392	5958313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5958313	gmaxwell	Ive tested the heck out of this, it looks good to me.
1389	5911976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5911976	jgarzik	ACK Tangentially related: it would be nice to move as much code from init.cpp into net*.cpp as possible, with init.cpp only calling NetParseConfig() or somesuch. Maybe that would help with qt/optionsmodel.cpp long term maintenance.
1389	5912312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5912312	sipa	agree, I considered that, but wanted to postpone that until after tor hidden service support is merged, as that will extend the network config options further.
1389	5948233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5948233	sipa	ack on the optionsmodel changes? After tor hidden service support is merged, the network option panel should be extended, I think, but for now, this should do.
1389	5954803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5954803	sipa	updated
1389	6040439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6040439	sipa	As asked by the parameter interactions are now done using SoftSetBoolArg, instead of complex boolean formulas. Also added some comments.
1389	6057659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6057659	laanwj	ACK on gui changes I wonder if "applyproxysettings" belongs in optionsmodel, though (or the ui code at all). It uses core settings to update core settings, wouldnt it be just as applicable when proxy is changed through other means?
1389	6057733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6057733	sipa	Yes, and it is effectively duplicated code from init.cpp for now. Thats why Jeff already suggested a common NetParseConfig somehwere - I think thats the right approach.
1389	6107157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6107157	gavinandresen	ACK. Lightly tested on OSX.
1389	6110843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6110843	Diapolo	This introduces a small display bug in the Qt GUI, it displays "localhost" as default Proxy-IP and it seems hostnames are not allowed there. If I enable the proxy and click apply it is changed to 127.0.0.1. I think this happens in CNetAddr::ToStringIP(), which resolves 127.0.0.1 to "localhost", which is true, but currently not allowed in the GUI input field or in this line:
1388	5915352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5915352	gavinandresen	NACK. Please dont micro-optimize unless youve benchmarked and are fixing some performance bottleneck; otherwise youre just contributing to a code-review-denial-of-service-on-the-core-developers attack.
1386	5944030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5944030	luke-jr	The code itself (and JSON-RPC help docs) could use better documentation, IMO. How about letting each filter have its own command?
1386	5950112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5950112	roques	I really could use this functionality right now. While you still can, how about renaming the RPC-commands and adding a related one? `notifystart <name> <bitcoinaddress>|0x<hexstring>` Setup notifications named _name_ about transactions containing _bitcoinaddress_ or _hexstring_ `notifystop [<name> [<bitcoinaddress>|0x<hexstring>]]` Stop notifications under _name_ (or all) about _bitcoinaddress_ (or all) `listnotifications [<name>]` List notifications setup under _name_ or all notifications if _name_ is not given. When the notification command is run `%n` could be replaced with the _name_ under which the notification was setup. If a transaction matched several filters and `%n` is present in the command, command should be called for each matching filter. To prevent people with RPC-access to gain shell access as the user running bitcoind, Everything except `[a-zA-Z0-9_]` should be filtered from _name_. Properly shell-quoting _name_ could suffice in theory, but writing secure shell scripts is hard and in my opinion the restriction is worth the extra ease of security. Please excuse me for not substantiating this feature proposal with code.
1386	6207155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6207155	jgarzik	Copying and expanding on the comments in gist RPC interface document 1) name should be restricted to [a-zA-z0-9] etc. as suggested 2) although the **implementation** of the interface is currently exact match, the **semantics** are fuzzy match. users of this interface should perform their own exact matching, to prepare for an implementation that uses bloom filters or other fuzzy matching. This behavior should be documented somewhere. 3) I dislike the use of * because it creates minor command line PITAs... but I will go with consensus if others want * rather than filterclearall 4) I agree better docs are needed 5) Multi-match behavior should be addressed, as hints. We could call the filter multiple times, or we could exec once with a comma-separated list. Currently it stops at first match. 6) Contra opinion, I continue to think sending HTTP requests over a pipelined connection is superior to continually execing a program. objections to such methods -- getting SSL and auth correct is difficult -- remain valid.
1386	6208512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6208512	luke-jr	1) I suggest allowing _ in name, so PCRE \w matches. 3) I think * fits better here, but dont care strongly. Perhaps make the argument optional, so filterclear() does all? 6) How about supporting longpolling? Its well-established for JSON-RPC already and seems to work reasonably well. With multithreading support, its even fairly easy to implement (see #1355)
1386	6208680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6208680	jgarzik	longpolling-like behavior might indeed be a reasonable solution. That would obviate the need for an HTTP callback with its own authentication.
1386	6301145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301145	jgarzik	Rebased, but it no longer builds or works after the CTxDestination updates in #master
1386	6412808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6412808	luke-jr	Do you plan to finish rebasing it?
1386	6607401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607401	jgarzik	Closing - out of date. Consensus seems to agree with the approach, so the pull request will be reopened if/when the branch is updated (volunteers welcome). Presumably, this would coincide with the introduction of the discussion P2P protocol bloom filter changes.
1383	5900805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5900805	sipa	ACK
1382	5861884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5861884	TheBlueMatt	I really dont see the point in this, if we request a block, and a node lags behind due to some network congestion, and then we get the block later, there is no reason to drop that peer, if the peer is constantly lagging behind, we may want to not request blocks from that peer, but dropping them could kill eg mobile clients.
1382	5865333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5865333	laanwj	NACK. Only disconnect peers that really misbehave. Any disconnect rule that you add has potential to wreck the network in some (maybe unforseen) circumstances. We should be really careful.
1382	5916764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5916764	rebroad	Please can you see Issue #1120 - do we really want to continue having nodes sending thousands of duplicate blocks to each other? If we dont disconnect the peer, then what are the alternative solutions to this problem? By the way, in case it wasnt obvious, this is relating to when a peer is catching up and is more than a thousand blocks behind the best block.
1382	6300881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6300881	csyangchen	Duplicated blocks (and tx as well!) are probably caused from client sending `getdata` multiple times in the first place. It occurs when the workload is high, typical situation during initial download. The operation turnaround time might exceed the request resend timeout, triggering the duplicated requests. So to proof the node intentionally send duplicated blocks need to do per node based tracking, which I think dont worth the effort. Also Im wondering whats the attack vector by intentionally sending duplicated block / tx. Since recv queue are rate limited by size, its more likely for a malicious node to send duplicated requests, to maximize effectiveness of draining neighbors bandwidth.
1382	6733822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6733822	rebroad	this isnt meant to disconnect to due misbehavoiur, but simply to reduce wasted bandwidth between two nodes. This is a problem still occuring in 0.6.3 with a good internet connection, so unless someone has an alternative suggestion for fixing this, I would appreciate some ACKs please.
1382	7257028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7257028	gmaxwell	Im opposed to disconnecting peers for expected behavior.
1382	7273877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7273877	rebroad	what do you suggest instead of disconnecting then? Or do you propose that we continue to waste bandwidth as is currently the case?
1382	7278391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7278391	gmaxwell	I dont completely understand the nature of the wasteful behavior and I cant reproduce it in 0.6.3, so Im unable to make a suggestion. Im just reasonably confident that disconnecting peers for expected behavior is not the right thing to do (and among other problems, poses partitioning risk). The right thing do to, of course, would be to avoid bad behavior in the first place. Once its avoided, then you could talk about possibly dumping peers which intentionally misbehave, although O(N) bandwidth attacks are not terribly interesting. (You can flood a peer without ever connecting to its bitcoin, so there is little we can do).
1382	7432535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432535	jgarzik	This targets one highly specific flood, while ignoring all the other flooding possible within the protocol. An attacker can just pick another message to flood, including messages we dont notice, but do unpack-before-ignoring. Given the other two naks, closing.
1382	8293726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8293726	rebroad	Looking at the closing comment, I think this pull request has been misunderstood. It is not for protection against any sort of attack. The duplicate blocks happen naturally due to the way bitcoin works, due to the set timeouts, and the delays in the network due to processing. Given that there is no current way for a node to say "please stop sending me blocks" to another node that is responding to a request for blocks but took so long that another request was sent out to another node, which started sending the blocks first, the only way to safe the wasted bandwidth (of both nodes), is to disconnect from the node that is lagging behind.
1382	10687242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10687242	exarkun	Just getting started with bitcoin, trying to initialize a wallet, and after days of waiting to catch up, it seems to me the issue being described here is real and some fix would be quite beneficial. By way of providing some real world data, here are some stats collected from my clients debug log: exarkun@top:~/.bitcoin$ grep "already have block" debug.log | wc -l 383867 exarkun@top:~/.bitcoin$ grep "ProcessBlock: ACCEPTED" debug.log | wc -l 22486 Thats nearly twenty times more duplicate blocks - redundant, useless traffic - than legitimate, helpful blocks. If there is no way to tell a peer to stop sending some blocks, and it is not desirable to disconnect from a peer which is now sending unneeded blocks (because they have been retrieved from somewhere else in the meanwhile), then it seems like some other fix at least is needed here. Perhaps the client shouldnt be so aggressive about sending out duplicate getblocks to multiple peers. However, as a temporary solution, disconnecting seems sensible to me. The client will establish connections to other peers (or even the same peers again) and continue exchanging data with them, and having gotten some blocks, *not* ask for them again over the new connection.
1382	10692534	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692534	rebroad	Im glad to see other people confirming this issue. What other options are there other than disconnecting the peer? If peers utilised more than one connection, then it would be possible to disconnect the transfer without disconnecting the peer, but Im not sure its worth coding this just for that reason. The problem is exacerbated by the fact that during block validation the peers stops responding to requests, and so once the block validation completes, the peer suddenly sends a load of stuff that the requesting peer no longer needs, so another solution would be to change the code to continue responding to requests even during block validation. could this be re-opened please?
1382	10692550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692550	sipa	The solution is to remember which block was requested from which peer, and not ask it again (unless the old one is really lagging).
1382	10692568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692568	rebroad	how do you tell if the "old one is really lagging"?
1382	10692606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692606	sipa	The core of the problem here is that we have two mechanisms: 1) when we think we dont have all blocks, pick a peer to download them all from 2) when a new block is announced and we dont have its parents, ask them from the peer who sent it The problem is that these two mechanisms dont place nicely together, and when a new block is found during initial syncup, you end up doing both at once. Thats purely a local implementation problem - there is no blame to either of the peers involved, so they should not be disconnected for doing what is asked from them. The solution is writing something of a download manager, which keeps track of which peers have which blocks, and tries to fetch them, and switch if a peer seems unresponsive. In my opinion, this is only really possible once we have headers-first sync, so the best chain is known before starting the actual block download. This would also mean the download can be parallellized. Thats not to say we dont need a more immediate solution. Its becoming more and more obvious that the sync mechanism is broken. I think we should aim for a simple solution now which solves the worst, and then really solve it when headers-first is implemented.
1382	10692656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692656	rebroad	No one is suggesting disconnecting a peer for doing what is asked from them. We are suggesting disconnecting peers which are sending _repeatedly and in a sustained fashion_ blocks which are not required. You also havent defined how to determine when a "peer seems unresponsive". I posit, that this will always be a guess, and therefore unreliable. The simplest solution IMHO is to simply end the transfer of the unwanted blocks by the only mechanism available currently - disconnection. This will benefit the entire network as currently there is a majority of wasted traffic happening due to these disconnections not happening. What is the disadvantage in disconnection? So far, we have discussed the advantages, and it doesnt appear anyone has suggested any disadvantages. The only reason for not doing this IMHO is if there are significant disadvantages. I agree that a simple solution is needed, and I think this patch is it. I agree that a better solution could be developed later though.
1382	10692729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692729	sipa	I dont think you get it. Peers only send blocks to us, because we ASK them to send us blocks. There is no code that just sends blocks - its always in response to a getdata. If we receive the same block twice, it is because we asked it twice. That is our fault, not theirs. The problem is that we ask for blocks both as a sync mechanism, and in response to receiving an orphan. As to determining unresponsiveness: some timeout between expecting a block message and the getdata? Regarding disadvantages: dont kill connections to nodes that behave as expected. You may lose the good ones.
1382	10692817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692817	rebroad	I am aware that peers should only send blocks theyve been asked for. There are already timeouts implemented, but these will always be arbitrary and only a guess to determine if a peer is lagging or not. They are therefore not reliable, and IMHO shouldnt be relied on. The problem cannot be fixed by tweaking timeouts, and if timeouts are set too long, then it will cause other problems too. How do you define "good nodes"? The only nodes this patch will cause us to lose are bad ones - "bad ones" being nodes that are repeatedly and consistently sending us blocks we do not want or need. Labelling a node "good" just because its doing what weve asked of it, isnt definitive, IMHO. It can be based on more criteria than this.
1382	10692859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692859	sipa	Of course it is always a guess. You cannot know which nodes are good and which arent for sure. But this patch does not fix the problem. The problem is that we request the same block multiple times in certain cases, even when there is no reason to assume the peer is lagging. And then it disconnects peers that do what we ask them.
1382	10692875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692875	rebroad	youre right of course that the code currently does request some blocks multiple times when it doesnt need to, but that is a separate issue and requires a separate patch to fix that. That fix, however, wont eradicate the situation that this patch mitigates. There is an argument though that that patch should be a prerequisite patch to this one.
1382	10692926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692926	sipa	Ill try to explain a bit more in detail why this is not a solution, but this is my last comment in this thread. Assume we are doing initial block synchronization, so were sending getblocks, receive invs, download blocks, and send a new getblocks. During that time, a new block is found. One node (typically one of the best!) is the first to announce this new block to us, so we download it, see that we dont have its parents, and we go on to request the headers from this good peer that was so kind to announce a new block to us. Now we are doing the getblocks/invs/getdata/blocks/getblocks sequence from two nodes at one: the original one we were synchronizing from, and the one that announced the new best block. Youre eventually going to kill one of these - that will temporarily mitigate the situation of course, but the next time a new block is found while youre still not done synchronizing, the same thing repeats all over again. And every time, you have a large chance of killing your best-connected peer. You say that requesting the same block multiple times is a separate issue. It is not, it is the only issue. And this is what needs fixing, not killing off peers which do the stupid thing we asked them to.
1382	10692976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692976	rebroad	Youre explaining things to me that I already know and understand, and Ive already said I agree that there could be a patch to fix what you are describing in my previous comment, and that that patch might be better done before this one (which is still needed to cater for lagging nodes). You are failing to address the issue of lagging nodes providing blocks already received by lesser-lagging nodes, which is what this patch is intended for. Having said that, I think that this patch is still better implemented now rather than waiting for the other patch to be done first.
1382	10693301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10693301	TheBlueMatt	I did some initial work on proper request management a while ago, but never got very far as I was working on bloom filter stuff, you can work on it more if you want:
1382	16715154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16715154	gmaxwell	What you are seeing is not due to "lagging peers", this is pretty easily tested. Sipa explained why you saw this. We only make the request out to one peer (except in the case sipa outlined) so lagging really has nothing to do with it.
1382	16732271	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16732271	rebroad	a block is requested from another peer if its not received within 2 minutes. This 2 minutes is rather arbitrary and not a reliable way to determine that a block has failed to be downloaded. It will even request the same block from another peer even when the original peer is currently sending a block. The code behind this could do with some obvious improvements, and the 2 minute delay should be replaced with something not so time based, IMHO. Perhaps start the timer from the point at which block reception stops, rather than from the point of initial request.
1381	5855336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5855336	gavinandresen	ACK, long overdue. Compiled and ran on my Mac.
1381	5856301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5856301	jgarzik	Added new commit, catching deser exceptions for CAutoFile (blknnnn.dat) too.
1380	5855852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5855852	jgarzik	ACK
1380	5858546	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858546	sipa	ACK
1380	5859627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5859627	gmaxwell	ACK.
1379	5852879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5852879	gavinandresen	ACK
1377	5991375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5991375	gavinandresen	NACK. If you want to time stuff, then use -logtimestamps, lets not dirty up the code with lots of special-case timing logic.
1377	5992289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5992289	rebroad	why do we time other things then, such as flushing, etc?
1377	5992478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5992478	gavinandresen	Either because those other things were implemented before -logtimestamps or because I didnt notice/ask that they get removed after whatever optimization they were a part of got pulled.
1377	7432463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432463	jgarzik	nakd by gavin, closing
1376	7432359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432359	jgarzik	Consensus similar to #1375: "txnode" global is not worth it, and is not MT friendly. The concept seems agreeable -- at times, various IRC denizens have expressed an interest in logging the IP associated with a particular behavior. It might be easier to approach this from another angle: maybe in the ProcessMessage() loop, with ready, locked access to "pfrom", some useful logging may be obtained.
1375	5934134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5934134	gavinandresen	Is this thread safe? What if the thread executing the if (txnode) is interrupted after the if test, could another thread wake up and set txnode=NULL ? NACK in general-- too many code changes, the risks outweigh the (minimal) benefits.
1375	5943932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5943932	luke-jr	NACK, example of bad use of a global IMO
1375	5978397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5978397	rebroad	Its thread safe unless some future change tries to change the value of txnode from a different thread. So far, only one thread uses txnode, so the value wont get changed between the test and the use. - thanks for the feedback. How would you recommend doing it? I realise I could just add one line in ProcessMessage() to log the peer against the tx, but I guess my motivation was to keep debug.log small (at the expense of code brevity)....
1375	5979816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5979816	sipa	Youre right that currently txnode is only set in ProcessMessage, which is only used in a single thread. But I agree its a bad use of a global. If you really need to know who sent it, pass it along in arguments, or only report the offender from functions that do know. Not worth it, imho.
1375	5985268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5985268	rebroad	I did try passing it in arguments, but I was getting errors about incorrect number of arguments. Perhaps my understanding of C++ isnt quite sufficient.. :-s Is there any way to restrict the use of txnode so that it cant be used by other threads?
1375	5985441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5985441	luke-jr	Too bad C++ doesnt have Perls locals ;)
1375	7432292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432292	jgarzik	Consensus: not worth it, closing
1374	5839369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5839369	luke-jr	If README_windows.txt is updated, I think the NSIS installer should be changed to make it COPYING.txt at least too.
1374	5840187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840187	Diapolo	Agreed.
1372	5838171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5838171	gavinandresen	That does the trick! #defining it before every #include seems error-prone, though-- maybe better to -DBOOST_SPIRIT_THREADSAFE in the makefiles ?
1372	5838320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5838320	jgarzik	Updated commit to alter all the makefiles, though Id argue that updating five makefiles -- four of which I cannot test -- might be a little error prone too ;)
1372	5840583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840583	laanwj	I dont think there is a way around having at least two makefiles (for qmake and make), but some day itd be interesting to find the common parts of the makefiles and putting those in a single file that is included from all of them.
1370	5845000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5845000	TheBlueMatt	I dont see any reason to make nClientStartupTime yet another global, throwing in one more call to GetTime() seems cleaner to me, but maybe I just hate globals.
1370	5845951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5845951	Diapolo	The global is used by the GUI Debug window and IS present in the current code. It only moved from clientmodel.cpp to util.cpp, to allow usage in the debug.log entry.
1370	5846520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5846520	TheBlueMatt	Putting something in util.h is very different from qt/clientmodel.cpp, but Im probably just overly global-hating.
1370	5846883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5846883	Diapolo	Luke-Jr encouraged me to use a global ... seems like its hard sometimes to get to the best approach. If no one thinks this is beneficial, just close the pull.
1370	5858857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858857	sipa	I dont see why you need a global for this? You only use it once...
1370	5858905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858905	TheBlueMatt	I think its beneficial, and have no problem with it in general, my point was simply to remove the global definitions, and replace the single use in init.cpp with a call to GetTime().
1370	5859600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5859600	Diapolo	I checked the GUI code and yes, I can safely remove the whole global ;). Will update tomorrow!
1370	5878706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5878706	Diapolo	Alright, updated and final now.
1370	5890751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5890751	laanwj	ACK
1370	5943975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5943975	luke-jr	Yeah, while a global makes sense for what you were doing before, this one-time use doesnt need it ;)
1370	5945564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5945564	Diapolo	:-D Was that an ACK then ;)?
1370	5946625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5946625	luke-jr	Looks good, but I only ACK stuff after I have actually tested it myself. ;)
1369	5825353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5825353	laanwj	Hmm the comment about bitcoin-qt storing settings in wallet can be changed, as thats deprecated. It now uses its own settings store, and moves the settings from the wallet on first run. The support for wallet options is only for backward compatibility.
1369	5825442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5825442	jgarzik	ACK
1369	5827492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5827492	sipa	removed comment
1369	5827846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5827846	laanwj	ACK
1368	5828147	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828147	laanwj	Looks good. One comment: you have two error feedback mechanisms now. One that pops up a message box (ie, when the address is wrong or when it cannot decode the signature) and one that shows a red message in the window itself. I like the second one better. Can you use it for all errors?
1368	5828340	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828340	Diapolo	I guess that should not be a problem, will try how that looks and update :), good point!
1368	5840687	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840687	laanwj	I just thought about it a bit, and I guess itd be nicest to pop up a tooltip at the widget that contains invalid input, on validation error. Maybe even a special "error" tooltip (if possible). We could use the same in the send coins entries. Currently, invalid fields are colored red there on error, but there is no feedback message. No need to implement in this commit though. It probably requires some extra infrastructure.
1368	5840697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840697	Diapolo	Updated to use the status label for (info / warning / error) message display and resized the window to see the full signature (use BC-address font for display).
1368	5840728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840728	Diapolo	I would like to get this on meged (when final), as your suggestion requires a change to this ui-element and others. Can you show me a screen of how you think of that tooltip ... I currently have not imagination, how that would look :).
1368	5840827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840827	laanwj	Just a temporary message that points to the field, and that goes away as soon as you click (or after a while). .. you see this commonly on web forms.
1368	5840878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5840878	Diapolo	Alright, yes I know what you are talking about ... I like those. We should look how to do them :). Any further suggestions for this commit here, did you try it out?
1368	5851994	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5851994	laanwj	ACK
1368	5858880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858880	sipa	maybe you want to comment on this?
1368	5953924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5953924	Diapolo	Rebased and updated to work after #1357 got merged.
1368	5971887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5971887	Diapolo	Updated once more, removed checkAddress() and placed code directly in on_verifyMessage_clicked() function. Can you comment please :)?
1368	6031302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6031302	Diapolo	Can another dev, who uses the GUI, please verify this is okay? I have another commit that depends on this one ... any reason not to merge this? Sometimes it takes a little long to get "small" changes in ;).
1368	6045969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6045969	Diapolo	Updated to add visual feedback to LineEdits via QValidatedLineEdit class. Any other dev except (who is not here currently), who can try this and comment?
1368	6046642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6046642	Diapolo	Updated to remove AddressTableModel references, as they are now unused.
1368	6055887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6055887	Diapolo	Updated to resolve a small glitch with the visual feedback (QEvent::FocusIn would not reach QValidatedLineEdit::focusInEvent).
1368	6056548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6056548	Diapolo	Updated to add addr.GetKeyID(keyID) check.
1368	6057567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6057567	laanwj	Ack
1368	6057731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6057731	Diapolo	Great to see you here :)!
1367	5814166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5814166	gmaxwell	hm last time I accidentally ran bitcointools against a running node it corrupted the crap out of it. I didnt even think this was supported.
1367	5814225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5814225	jgarzik	Yeah even with DB_PRIVATE cleared, there is a truckload of multi-process usage caveats.
1367	5815417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5815417	Diapolo	I was playing around with this flag too and never had any obvious problems with it. What I observed was, that no __db.001 - __db.006 file is generated, as memory regions are created in per-process heap memory. While you are at it, could you bench with the flag dbenv.set_flags(DB_REGION_INIT, 1); added and report (I know sipa tried it once)?
1367	5815448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5815448	jgarzik	DB_REGION_INIT seems pointless if DB_PRIVATE is set.
1367	5815672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5815672	Diapolo	Seems means no bench :D? Perhaps consider DB_REGION_INIT, if DB_PRIVATE is not set?
1367	5819291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5819291	sipa	Id like to know why DB_PRIVATE was enabled in the past, but disabled at some point. See commit fdbf76d4f49c2.
1367	5824679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5824679	jgarzik	satoshi removed DB_PRIVATE at my urging ;)
1367	5825274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5825274	sipa	Why...?
1367	5825403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5825403	jgarzik	See above: "In part, this enables processes other than bitcoind to examine the active database environment."
1367	5825582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5825582	sipa	Oops, missed the pull request summary. ACK.
1366	5813451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5813451	gmaxwell	What does this do when the RPC server isnt running yet? (I hate the completions that fedora ships and I always remove them because theyre out of date with the software, etc.. kinda interesting to poll the command)
1366	5825062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5825062	roques	It comes up with an empty command list, which is correct. If one has not specified or configured how to access a running RPC-server there are no commands to issue.
1366	5844946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5844946	TheBlueMatt	Could you also put it in contrib/debian/bitcoind.install so that it gets installed, or will it happen because its named *.bash-completion?
1366	5847448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5847448	roques	Contrary to what I thought, installation is not fully automatic: One can add it to `bitcoind.install` (this branch), use bash-completions debhelper (my branch `completion-dh` roques/bitcoin@e18f003b99cd4f0d0897328f6cc9257240a5962d), or ... Whats to your taste?
1366	5849367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5849367	gmaxwell	> there are no commands to issue. Well there are as we have commandline parameters for the daemon itself, but not doing anything sounds like a safe and least surprising alternative.
1366	5850764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5850764	TheBlueMatt	I would say use debhelper, seems more like "the debian way"(tm)
1366	5858716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858716	sipa	Im not sure whether it should be in debian folder altogether? This is certainly useful to other distributions as well. ACK on adding such a file to our source tree, though.
1366	5858794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858794	roques	Pushed new version with an extra commit to use debhelper to install. Ive kept the commits separate, as the `bitcoind.bash-completion` alone is useful for other distributions as well.
1366	5858869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858869	TheBlueMatt	We have two (very outdated) man pages in the debian folder (because they were originally written by the debian maintainer and are GPL), so it kinda makes sense to throw this there, but if there is a better place, the build scripts can just as easily pull them in.
1366	5865395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5865395	laanwj	ACK, seems useful.
1366	5865640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5865640	luke-jr	I disagree that it makes any sense to put this under debian/; bash completion is distro-independent.
1366	5871612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5871612	TheBlueMatt	If there is a better place to put it, someone should suggest one, in any case ACK.
1366	5873356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5873356	luke-jr	contrib/bitcoind.bash-completion
1366	5877620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5877620	gavinandresen	ACK, nice additional functionality, dont care where it is put.
1366	5882379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5882379	roques	Ive redone my branch to put `bitcoind.bash-completion` directly into `contrib/` with a second commit to use debhelper to include it in the Debian package.
1366	5888004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5888004	TheBlueMatt	ACK
1365	5816238	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5816238	laanwj	Does this change anything visually?
1365	5816836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5816836	Diapolo	I took a screenshot of both initial screens (encrypt wallet) and compared them ... no difference.
1364	5821146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5821146	Diapolo	Rebased, fixing a merge conflict!
1364	5827757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5827757	laanwj	Agree with moving HelpMessageBox to guiutil.h Im not sure about the "options" naming though. We already have an options dialog. This will generate confusion.
1364	5828006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828006	Diapolo	I guess we should call the "options" in that case parameters as that describes, what they are.
1364	5828106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828106	laanwj	Yes thats better
1364	5828699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828699	Diapolo	Okay, updated to use the word "parameters" in this case.
1364	5828932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828932	laanwj	Uhm, you dont have to change it everywhere throughout the program. Just for the button... no need to make core changes for an UI improvement.
1364	5829268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5829268	Diapolo	I believe it would be a bad idea to show "options" AND "parameters" for the same thing ... it IS a rename, but it makes sens. Just write "Bitcoin paramaters" on a label and when you click show you read "options" ... how missleading is this :)?
1364	5829368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5829368	laanwj	Well maybe call it "command-line options" then. It already makes it distinct from the UI options.
1364	5829789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5829789	Diapolo	Thats the best solution ... I need to revert some changes then ^^.
1364	5833262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5833262	Diapolo	Updated and now just using "command-line options" in the label above the added button and instead "options" displayed in the header of the help message. No further changes were made.
1364	6061766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6061766	Diapolo	Rebased and ready to merge.
1363	5805512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805512	gavinandresen	ACK
1363	5807379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5807379	laanwj	Nice, ACK
1363	5808962	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5808962	TheBlueMatt	ACK
1360	5801719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5801719	gavinandresen	ACK
1360	5802359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5802359	sipa	No noticeable improvement here (bdb 5.1), but ACK.
1359	5798765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5798765	gmaxwell	Ive started testing this some I think that after some more review (and perhaps some minor cleanups) we should pull this. Ive long supported having it there are some use-cases where its handy and it fosters a deeper understanding of the Bitcoin system At the same time Im concerned that its quite rough from an interface perspective (the multiselect on another tab driving a text field with undisclosed syntax), and from a core feature set perspective (doesnt appear to be a way to do an inverted select "except theses") but continuing to forestall pulling this is not going to encourage further development and testing. So I think after this gets through a bit more review we should pull it and then make it known that if we dont see testing and improvement on it before 0.7.0s release that well disable it.
1359	5800901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5800901	sipa	I certainly agree we need to have this merged. I think the functionality it adds is limited (it feels like micro-management where more high-level constructions should be used instead), but its educational value is very high. It helps breaking the "bitcoin-transactions-as-a-ledger" abstraction (without txins/txouts/change/keys/blocks) for those who want to learn the inner workings (and at least for us, we all had to learn the inner workings before we trusted the system, no?) That said - and I should probably have noticed this earlier - I really dont like the coinselection being a CWallet property.
1359	5805551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805551	Diapolo	Is this UI-wise harmonized with other used dialogs (e.g. add as many settings as possible into the XML-file and remove code)?
1359	5806980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5806980	gmaxwell	From reports in #bitcoin, it sounds like you just get a Transaction Failed when fees are required when the inputs selected dont have enough coin to pay the fee. (e.g. no fee request dialog or anything). This is a little confusing and should be fixed eventually.
1359	6104075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6104075	luke-jr	Rebased on top of #1416 to split Coin Control from selection refactoring.
1359	6107226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6107226	dooglus	Thanks Luke. Sorry I wasnt able to do that for you.
1359	6213149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6213149	ghost	I was having trouble using this fork with the bitcoinrpc interface. Problem was, the sendFromAddressRestriction variable in cwallet was never getting set, so I would specify a list of "from" addresses and the system would ignore them, processing my transaction as if I hadnt specified them. I eventually traced the problem to this line: CScopedSendFromAddressRestriction<std::set<std::string> >(*pwalletMain, fromAddresses); The CScopedSendFromAddressRestriction class is constructed without a name, and so is immediately destroyed, and the classs destructor clears sendFromAddressRestriction. I changed the line to this, and now it works for me: CScopedSendFromAddressRestriction<std::set<std::string> > myAddressRestriction(*pwalletMain, fromAddresses);
1359	6213908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6213908	luke-jr	Good catch. Fixed.
1359	6360517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6360517	tril0byte	Luke, this branch doesnt build on debian squeeze (libqt4-dev 4:4.6.3-4+squeeze1), In file included from src/qt/sendcoinsdialog.cpp:2: build/ui_sendcoinsdialog.h: In member function void Ui_SendCoinsDialog::retranslateUi(QDialog*): build/ui_sendcoinsdialog.h:167: error: class QLineEdit has no member named setPlaceholderText make: *** [build/sendcoinsdialog.o] Error 1 This is the same problem I reported on coderrs branch, which was fixed on doogluss (#1017) and seems to have reverted. The goal is to get build/ui_sendcoinsdialog not to have this line (as doogluss doesnt) and I dont know how: - sendFrom->setPlaceholderText(QApplication::translate("SendCoinsDialog", "Restrict client to only send from these Bitcoin addresses", 0, QApplication::UnicodeUTF8));
1359	6361512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6361512	luke-jr	That bug is in git master for now, not related to this at all.
1359	6363645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6363645	luke-jr	Please post on the pullrequest (youre posting on an old commit). I dont foresee this getting merged any time soon, unless someone steps up to clean it up - including your changes. If youd prefer, I can merge a patch you make into my branch.
1359	6364019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364019	Diapolo	It seems I took a route to a dead-end ... dunno how that happened, had no beer yet ^^. If you are willing to teach me the Git magic I need to do to be able to create a patch, youre welcome :). Do I need to fork your repo and create a pull or is there another way?
1359	6364237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6364237	luke-jr	``` git remote add luke-jr git://gitorious.org/~Luke-Jr/bitcoin/luke-jr-bitcoin.git git fetch luke-jr git checkout luke-jr/coincontrol -b coincontrol # make your changes git commit -a git push # however you normally do it! ``` Then just point me at your branch...
1359	6381916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6381916	Diapolo	luke-jr: Im going to start here, when some of my last GUI commits get merged or final, okay?
1359	6390197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6390197	Diapolo	Thanks for the git commands, I now have that branch and can start working with :).
1359	6404747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6404747	Diapolo	
1359	6410195	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6410195	luke-jr	Rebased with s changes.
1359	6413013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413013	dooglus	Is src/qt/forms/coincontrolpage.ui meant to be in this commit? qmake complains: WARNING: Failure to find: src/qt/forms/coincontrolpage.ui and make errors: make: *** No rule to make target `src/qt/forms/coincontrolpage.ui, needed by `build/ui_coincontrolpage.h. Stop.
1359	6413355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413355	luke-jr	Fixed
1359	6416542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416542	Diapolo	You merged the whole patch ;)?
1359	6416589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416589	luke-jr	Yes, but it doesnt work :(
1359	6416617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416617	Diapolo	What does not work? You did try it before merging, no? Yes I added that .ui file. Anything wrong with it?
1359	6416628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416628	dooglus	This is what I see: Program received signal SIGSEGV, Segmentation fault. 0x081d34f4 in OptionsModel::getDisplayUnit() () (gdb) where #0 0x081d34f4 in OptionsModel::getDisplayUnit() () #1 0x0809b429 in CoinControlPage::UpdateTable() () #2 0x08087113 in BitcoinGUI::gotoCoinControlPage() () #3 0x08260af8 in BitcoinGUI::qt_static_metacall(QObject*, QMetaObject::Call, int, void**) ()
1359	6416705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416705	Diapolo	Is ``OptionsModel::getDisplayUnit()`` the function which starts with that seg-fault? Did you ever set the display unit via optionsdialog before? What happens if you comment out in coincontrolpage.cpp: <pre> if(model) unit = model->getDisplayUnit(); </pre>
1359	6416727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416727	dooglus	The .ui file didnt find its way into Lukes branch at first, but its there now. The display unit is set to BTC. Changing it causes the amounts shown in other tabs to change as expected. Commenting out those 2 lines fixes the problem, and then everything seems to work.
1359	6416766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6416766	Diapolo	Im glad this hot-fixes the segfault ... will have to check this in depth later. Strange thing is that does not happen for me on Windows. Thanks for testing my patch. Im willing to bring this forward now GUI wise and perhaps we can fix the "bad" internals somehow to get this merged in the near future?
1359	6417384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6417384	dooglus	I think the problem is that CoinControlPage::setModel(OptionsModel *model) isnt being called, and so the model pointer is uninitialised. I dont know how you get away with indirecting through it on Windows. Oh, except that its probably 0 on Windows, so the if(model) check prevents the pointer being used. What if you switch to mBTC - does the coin control page show mBTC values for you?
1359	6418503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6418503	dooglus	This fixes the crash for me without commenting out the 2 lines you suggested, indicating that an uninitialised model member is indeed the cause of the trouble: diff --git a/src/qt/coincontrolpage.cpp b/src/qt/coincontrolpage.cpp index 3be6813..c7290b9 100644 --- a/src/qt/coincontrolpage.cpp +++ b/src/qt/coincontrolpage.cpp -20,6 +20,7 CoinControlPage::CoinControlPage(QWidget *parent) : QDialog(parent), ui(new Ui::CoinControlPage) { + model = 0; ui->setupUi(this); gui = (BitcoinGUI *)parent;
1359	6420219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6420219	Diapolo	Great, yes this will fix it ... currently model is not initialized to 0. This should be done via: <pre> CoinControlPage::CoinControlPage(QWidget *parent) : QDialog(parent), ui(new Ui::CoinControlPage), model(0) </pre> Will create a patch later... btw. I find it hard to follow the changes when they occur as rebase. Shall we just use seperate commits for now and rebase the whole thing in the end?
1359	6420264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6420264	dooglus	Thats not enough to fix the real problem though. We need to arrange for setModel to be called somehow, or it will always be 0.
1359	6420282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6420282	Diapolo	It is called in bitcoingui.cpp, see There are several things todo for the GUI, e.g. update units when you change them in optionsdialog, but that is in the pipe :).
1359	6427734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6427734	luke-jr	Umm... guys... I fixed this last night :p
1359	6429793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6429793	Diapolo	While we were discussing this was not available here ... as I wrote above can we work with seperate commits until we are final? Its impossible to track changes when its rebased all the time. I would also like to use model(0) as everywhere else in the GUI part of the code, not NULL.
1359	6430106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6430106	luke-jr	I suppose separate commits makes sense for this one... NULL is correct here. 0 is an integer, not a pointer.
1359	6430146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6430146	Diapolo	Can you tell he uses a wrong init value all over the GUI. Btw:
1359	6430332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6430332	Diapolo	How can I update my local repo with the now current version? ``git fetch luke-jr`` ``git rebase luke-jr/coincontrol`` Seems to generate to much merge-conflicts, so I believe there is sth. wrong.
1359	6430992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6430992	luke-jr	This will discard all local changes and commits in your current branch and set its HEAD to latest coincontrol: ``` git reset --hard luke-jr/coincontrol ```
1359	6431184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6431184	Diapolo	But this should be safe, as you merged my patch and did only some small further changes, right? When I have a new commit, how shall we proceed further?
1359	6431241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6431241	luke-jr	I did not merge your changes unrelated to coin control. To see the difference between your current HEAD and my coincontrol, do: ``` git diff luke-jr/coincontrol ```
1359	6431329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6431329	Diapolo	That post was purely ironic, I want all of them to be 0 to stay consistent, nothing more :).
1359	6481900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6481900	Diapolo	That ``git diff luke-jr/coincontrol`` doesnt help, as its too much difference ... I regularly rebase patches to current master, but coincontrol seems to be not up to date, which makes comparing the branches very hard. My joy to push here fades away, when I dont know what you left out of my patch or changed for yourself. Things you consider unrelated (even if that may be true feature-wise) but I would like to see in that pull (or I would do when opening that pull) make things not better in the end. Any suggestion for this issue?
1359	6485222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6485222	luke-jr	Dont put unrelated things in pulls.
1359	6540824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6540824	dooglus	I would like this extended to work on individual coins, if possible. Currently I can see the balance at each address, but cant tell how many separate transaction outputs each address balance corresponds to, and cant select individual outputs to spend. Id also like it if all the selected inputs (whether addresses or individual coins) were summed so I know how the value of the selected coins.
1359	6540869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6540869	gmaxwell	I was thinking it would be interesting if it supported a hierarchy accounts/labels / addresses / inputs, and if you could select groups at each level (e.g. select an account to get all its addresses and all their inputs, select an address to get all its inputs) with each level showing a subtotal, and there being a total of selected. Also a select all, which would then let you go exclude things. But... lots of gui work to do all that.
1359	6541191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6541191	dooglus	Accounts are something different I think. Theres no direct correspondence between addresses and accounts is there? Its possible to move coins from one account to another without creating a transaction. But it could work with labels. Its possible to have the same label on multiple addresses.
1359	6542938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6542938	sipa	*Receive* addresses are associated with an account. Coins that originally arrived via an address that - at the time - was associated with an account, remain associated to that account. Splitting the available coin list based on account is dangerous I think, as it will re-enforce the notion that coins belong to an account. Splitting per destination address is fine, imho.
1359	6547702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6547702	gmaxwell	fair enough.
1359	6898469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6898469	luke-jr	Rebased with more of s GUI improvements
1359	6899086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899086	dooglus	I just built your rebased version from an hour ago. The coin control tab is now lacking a scrollbar. I can scroll the contents using the right-hand edge of the touchpad (probably thats simulating a mouses scrollwheel), but the scrollbar itself is missing. It was there the last time I built from your same branch. I cant see what youve changed because it appears that youve overwritten the previous commit with the new one. Remember when said: "can we work with seperate commits until we are final? Its impossible to track changes when its rebased all the time" and you replied: "I suppose separate commits makes sense for this one..." and I thought that meant wed be using separate commits for this one?
1359	6899194	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899194	Diapolo	As I currently dont work on this (e.g. found it boring to discuss about cosmetic changes that luke refused to accept, no commits, lack of under the hood updates etc.) I can only guess, that perhaps in the UI file scrollbars are disabled?
1359	6899272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899272	dooglus	Its a shame. I find it to be a useful feature to have, but after rebasing it over and over I too had to give up on it.
1359	6899388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899388	Diapolo	I put great efforts in improving parts of the GUI client over the last weeks, but I think it could need a few more helping hands. You are absolutely right!
1359	6899450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899450	luke-jr	Yes, I see that s latest changes removed the scrollbar. Ill add it back, I suppose. As far as just adding commits, I had intended to just pull (fast-forward style) from others. Unfortunately did his own rebasing and merging of his old changes with his new changes, so I had to dig them out and merge them in by hand (so not even cherry-picking would work). And then theres all the completely unrelated changes that insists on keeping in his branch... I didnt refuse any of your cosmetic changes related to Coin Control at all, until this removal of the scrollbar that I agree with makes no sense.
1359	6901504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6901504	Diapolo	I like your feedback most of the time as coding-wise its valuable ... but most of the time a team-play like here (where you are the master-chief of this patch currently) seems to not work. I rebase all my patches agains the current master in regular intervals, which minimizes merge-conflicts. And coding-style wise we have different points of view.
1359	7432276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7432276	jgarzik	Consensus: we like "listaddressgroupings", and request that that be submitted in a new pull request. The current UI, as proposed, is superceded by the raw transaction RPC API, which permits full coin control, and is accessible via the GUI RPC console. Full discussion took place on #bitcoin-dev around ~12:30PM EDT August 1.
1359	11648126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11648126	rebroad	so.. whats happening with this? Is this the best pull to use currently for coin control?
1359	11649269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11649269	gmaxwell	Its closed. There is no current pull. Enough was merged so that you could spend unlinked inputs manually with the raw transaction API as not a single person was willing to step up to maintain the GUI stuff.
1359	14411941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14411941	eldentyrell	> Enough was merged so that you could spend unlinked inputs manually with the raw transaction API Thats nice, but if the raw transaction API were a substitute for the GUI the client wouldnt have a GUI in the first place. > not a single person was willing to step up to maintain the GUI stuff Not merging this is causing people to refuse to upgrade. Just keep that in mind.
1359	14413412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/14413412	gmaxwell	Perhaps you are interested in Pull #2343 ?
1358	5801712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5801712	gavinandresen	ACK
1357	5805510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805510	gavinandresen	What do other people think about using boost::variant? Im not a fan of the "write a little class to do simple things" style of programming that it brings, I think it just obfuscates the flow of control and makes debugging harder. (oh, and creates god-awful compiler errors if you screw up)
1357	5805585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805585	sipa	The main motivation for this patch is to make a clear separation between key identifiers and addresses, split internal representation from their base58 encodings, and sanitize header dependencies. If people have a problem with boost::variant, I have absolutely no problem to write an ad-doc CTxDestination implementation that doesnt use it. RE: "write a little class to do simple things"; if youre referring to this case in particular: it just replaces CBitcoinAddress which was for all intents and purposes already a variant of key or script references, only done via its base58 representation.
1357	5830643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5830643	jgarzik	ACK
1357	5858792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858792	sipa	what say you?
1357	5878643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5878643	gavinandresen	I like the refactor. It would be really nice to have English-language rationale for the design of CKeyID/CScriptID/CPubKey/CTxDestination in the .h file(s) and not just in the commit comment.
1357	5913925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5913925	sipa	Rebased and fixed unit tests. added some comments, as well
1355	6752332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6752332	jgarzik	ACK on longpolling support in general. Long polling turns out to be a useful way to avoid callbacks, with all the authentication that that entails. 1) it is ugly and fragile to unlock, cv, then relock. Disappointing and would be nice if there were a better solution (note: that is not a NAK) 2) does not pay attention to fShutdown 3) "BIP22 compliance" smells more like self-promotion than a critically required bitcoind feature
1355	7431691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7431691	jgarzik	ACK longpolling support Change appears mostly ACK-worthy. I worry about adding a new lock deep inside SetBestChain though.
1355	7636048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7636048	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1355	7688951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7688951	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1355	7700110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7700110	luke-jr	Rebased
1355	8268875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8268875	jgarzik	Re-rebase requested, now that BIP 22 is merged
1355	8277735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8277735	luke-jr	done
1355	8284609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8284609	jgarzik	1) It accesses hashBestChain outside of locks. 2) pointless wrapping inside do..while(0) block 3) BIP 22 just says "longpollid" is a unique identifier. This code treats it as a block hash, not a job id. Thus, this change seems to hardcode unspoken assumptions about the longpollid. 4) The code does not seem to notice TCP disconnections. Surely you do not want the thread to continue waiting for a new block, if the TCP connection is gone?
1355	8285420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8285420	luke-jr	1) Where? 2) That exists so it can be breakd out of. I suppose it could probably work just as well with yet another nested if, though. 3) "longpollid" is unique per long poll event; bitcoind only has such events when a new block is found, so the previous block hash is a fair fit. Clarified BIP 22 on the nature of "longpollid"s uniqueness. 4) Good idea, but Im not sure how practical it is to do portably. Any suggestions?
1355	8378016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8378016	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1355	10378286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10378286	luke-jr	Rebased without the while(0). I still dont see any hashBestChain accessing outside of locks, after looking over it again. With regard to TCP disconnects, I did look into this, but it seems not worth the effort considering: 1) boost has no way to detect the socket being closed without reading 2) it would violate the current layer abstraction we have in the RPC implementation 3) while this is a problem for pools (eg, pushpool) with unreliable network clients, bitcoinds RPC is only guaranteed to be usable from localhost, where its unlikely to occur 4) a few stale sockets/threads that go away every new block shouldnt harm the daemon much Thoughts?
1355	18694165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18694165	jgarzik	No code objections. The main question remaining on this, our oldest pullreq: do we want/need it?
1355	18896443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18896443	jeremysawicki	I tested this a while ago and did not find it suitable for deployment as is. 1. The long polling only returns when a new block is found. Ideally it should also return periodically to update the set of transactions. (Do we really want to encourage mining without including a reasonably up-to-date set of transactions?) 2. It doesnt handle application shutdown, so an open long polling request can prevent shutdown.
1355	21083503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/21083503	luke-jr	Err, no I didnt :(
1354	5802577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5802577	sipa	ACK
1354	5807336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5807336	laanwj	ACK
1352	5788608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5788608	gavinandresen	How did you test this?
1352	5790084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5790084	Diapolo	With an own build and the RPC console which is part of the current master. Anything badly wrong with the code or whats your intention to ask?
1352	5790852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5790852	gavinandresen	Im looking for a simple test plan, something like: Note the time and immediately run bitcoin Wait two minutes. Call getinfo EXPECT: client startup time reported is the time noted immediately before starting bitcoin (or within a second or two) If Im reading your code correctly, that simple test will fail, which is why Im asking how you tested.
1352	5791071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5791071	Diapolo	Now I get it, you are right ... that is not a problem for Bitcoin-Qt as GetClientStartupTime() is called on init, which is not true for bitcoind. So for this to work we (I) need a place to be allowed to call GetClientStartupTime(). What is the best place to do this? I did not want to use a global, thats why I chose the current code.
1352	5797110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5797110	Diapolo	Changed back to a global, which removes the need to explicitly initialize the static const int64. This needs to get tested for bitcoind, as I cant compile that! Tested with Bitcoin-Qt and there it works. The startuptime in getinfo via RPC console doesnt change.
1352	5798895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5798895	gavinandresen	Closing this until it is tested with bitcoind.
1352	5800442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5800442	Diapolo	Updated and hoping someone can test this :). See: I dont know, why the last update is not showing up here ... weird.
1352	5801382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5801382	luke-jr	1. Note the time and immediately run bitcoind 2. Wait until debug.log shows it has finished starting 3. Wait two more minutes. Call getinfo EXPECT: client startup time reported is the time noted immediately before starting bitcoin (or within a second or two) RESULT: Works correctly with bitcoind and Bitcoin-Qt. Gavin, please reopen so GitHub updates the pullreq.
1352	5801437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5801437	gavinandresen	NACK. Process startup time is available from the OS, no need for this functionality: (dont know about Windows, but Im sure it has something similar)
1352	5803086	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5803086	luke-jr	Gavin, this isnt adding new functionality, its just making bitcoind on par with a feature already available in Bitcoin-Qt. Process startup time is only available from the OS if someone is on the local system. bitcoind still supports binding external IPs for LAN use.
1352	5805208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805208	Diapolo	I think its rather bad to use OS-specific code for such a small thing like this is. The code is portable and already in (only in another .cpp file). Like luke-jr said...
1352	5808754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5808754	Diapolo	Rebased to be mergable again! What about re-open and accepting this or do you still prefer a non-portable approach?
1351	5796076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5796076	Diapolo	Updated to reflect suggestion from
1351	5801603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5801603	gavinandresen	NACK. It would be better to get rid of usage of strncasecmp all together and use boosts case-insensitive string support. E.g. - if (strlen(argv[i]) > 7 && strncasecmp(argv[i], "bitcoin:", 8) == 0) + if (boost::algorithm::istarts_with(argv[i], "bitcoin:")) istarts_with is in boost/algorithm/string/predicate.hpp
1351	5805212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805212	Diapolo	Are you fine with massive boost usage now? I will update that pull and use what you suggested, no problem.
1351	5805448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805448	Diapolo	Closed in favor of #1363!
1351	5805496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805496	gavinandresen	RE: "massive boost usage" : Im all for making the code clearer and more cross-platform, and were dependent on boost anyway. The string algorithms are nice little self-contained pieces of functionality. But Im on the fence for changes like sipas pull request that uses boost::variant for bitcoin addresses (and requires writing little visitor classes to do simple things). I think template metaprogramming is the wrong way to go, it makes code hard to debug, creates cryptic compiler messages, etc. And I was using boosts compile-time regex library for a pull request, but one of the reasons it never got pulled was because it would increase compile times and memory usage when compiling.
1351	5807274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5807274	laanwj	*creates cryptic compiler messages, etc.* One nitpick: you could use clang. In contrary to gcc, it has wonderfully clear error messages, even with template metaprogramming. Also it compiles much faster. But I agree that usage of boost should improve readability, not decrease it. And compile-time work is great for time-sensitive inner loops that need to be optimized for specific cases, but using it unnecessarily increases code size and compile time.
1350	5779450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779450	luke-jr	ACK
1350	5781115	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781115	Diapolo	Saw that in the code yesterday and had the idea for a similar pull, ACK.
1350	5788649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5788649	gavinandresen	ACK
1349	5779058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779058	gmaxwell	Blown up by 6d64a0bfed8636da4a0a5b7a4bf68cff2abbf035, after merging by hand it dies because key.cpp doesnt #include &lt;sync.h&gt;. Introduces a harmless looking signed compare warning key.cpp:388:3. Have it running on a node now.
1349	5779164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779164	jgarzik	Code appears correct to me. Comments inline... IMO push those refactors into the tree immediately.
1349	5779253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779253	gmaxwell	if your log-worthy event comment is also on the oversized orphans (like 183 instead of 191), I thought the same thing.
1349	5779266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779266	jgarzik	both, really
1349	5787180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5787180	gavinandresen	: I want to keep this pull based on 0.6.2 in case we decide we need a 0.6.3. : ACK, Ill fix the comments. I think encapsulation in a class is overkill. : excellent catch on vSpent, and I 100% agree this code needs extremely careful review and as much testing as we can throw at it. I also like your suggestion to only cache valid signatures; it has the added benefit of making the code a lot simpler.
1349	5813511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5813511	sipa	ACK
1349	5821060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5821060	SergioDemianLerner	Gavin: can you estimate the time it takes to verify a signature compared to the time it takes to get the result from the cache? There should be a factor of at least 100x between them, but the test code seems to disagree with this.
1349	5821270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5821270	gavinandresen	Ill isolate and benchmark the cache unit test to see why cached signatures are taking 50ms to validate. Note that all of the CScript interpreter machinery is still being run (I am testing/measuring at the VerifySignature() level, not a the CKey:: level).
1349	5851790	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5851790	gavinandresen	What I did: Used valgrind --tool=callgrind and hacked versions of test/DoS_tests.cpp to isolate and measure just the cached signature verification code. What I found: Two things slow down cached signature verification: 1) Decompressing compressed public keys. Using uncompressed public keys almost doubles performance (from 110ms to validate 500 inputs to 60ms). If we need/want to further optimize verification then a compressed->uncompressed cache would get a 25% or so speedup. 2) The remaining 60ms is dominated by the serializing/hashing done; if we needed/wanted to further optimize this code then having transactions cache their SIGHASH_whatever hashes might be worthwhile so theyre not repeatedly recomputed. However, the transaction Im using for this benchmark is not a typical transaction (it has 100 inputs), and the bottleneck for transaction verification might be somewhere else for more realistic transactions. Finally, in the future very-high-level optimization schemes for transactions might be implemented; for example, if you have a peer that you can completely trust to give you only valid transactions then you could skip all verifications and take it on faith that all transactions from that peer are valid (with, perhaps, a random 1-in-100 audit to make sure the peer hasnt been corrupted). So spending a lot of time on micro-optimizations may not be the best way forward.
1349	5852538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5852538	SergioDemianLerner	Great! A lot of useful information! Remember that I had suggested caching (outpoint,script)->bool and not the signature verification (signature,pubkey)->bool to get all possible speedups.
1349	5852732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5852732	gmaxwell	Thats actually a bad idea. Otherwise I can just create endless numbers of scripts of the form push $randomnumber pop [normal script] with no computation on my part in order to bypass the cache.
1349	5856183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5856183	SergioDemianLerner	Were caching only the scripts that verify ok so that kind of attack does not work.
1349	5856199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5856199	SergioDemianLerner	Also I had suggested caching (outpoint,hash(script)) -> bool to reduce memory consumption.
1349	5858576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858576	gmaxwell	PUSH $randomnumber POP {normal script} will also validate if {normal script} would have also validated but it will have a different hash.
1349	5858817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858817	sipa	See follow-up pull #1380.
1349	5860763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5860763	SergioDemianLerner	You are right. Scripts cannot be easily cached. We would need an pushdown automata parser and optimizer to compress scripts and erase all garbage. It would be interesting to program such an algorithm to allow clients to "standarize" scripts, detect and remove hidden messages while transactions are passed from peer to peer. We may even create a transaction antivirus !! (just joking, I remember transaction signature do not withstands such modifications...)
1349	5871490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5871490	SergioDemianLerner	Although IsStandard() check would prevent "PUSH $randomnumber POP {normal script}" scripts from being forwarded, so it may be possible to cache at that level too.
1349	5872807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5872807	gmaxwell	I picked a toy example, and besides, we wouldnt want to adopt a design which strongly discouraged expanding IsStandard in the future.
1349	5877247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5877247	SergioDemianLerner	ACK.
1348	5777260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5777260	luke-jr	It would be nicer to find a comparable icon under a free license (CC Attribution isnt free IIRC)
1348	5780649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5780649	laanwj	Sheesh I searched half the internet for a non-(L)GPL icon (and free for both commercial and non-commercial use) and its still not free enough for you.
1348	5786389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5786389	luke-jr	LGPL and GPL are at least free... though I can see how GPL would be a problem for us.
1348	5787041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5787041	laanwj	Ok, Ill find a (L)GPL icon instead. No problem.
1347	5775415	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775415	rebroad	I would argue that had this mapping been named mapWaitingFor (as per #1341), this bug would have been less likely to have occurred, since upon renaming it becomes more intuitively obvious that its in the wrong place in the code. I do think quite strongly that #1341 should be re-opened for some discusssion. If POLA isnt a good reason for a variable name change, then what is?
1347	5790663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5790663	gavinandresen	How should this change be tested?
1347	5811712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5811712	sipa	Not tested, but reasoning sounds correct to me. mapAlreadyAskedFor contains getdata requests that have not been answered yet. If AlreadyHave() returns true for an inv, there is no reason to keep waiting for it.
1347	6605358	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6605358	gavinandresen	mmm. I feel like Ill regret this, but ACK.
1346	5774808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774808	Diapolo	Sorry to have introduced that one ...
1346	5775237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775237	laanwj	Ok, removed the font tag completely. Ive also made it so that the (out of sync) label appears directly after Wallet and Recent transactions, and is not aligned to the middle.
1346	5775360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775360	Diapolo	I cant verify that change by just looking at the diff, which hits me hard, but ACK to the intention :D.
1346	5775516	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775516	laanwj	Why not simply try it out? $ git add remote wumpus $ git fetch wumpus $ git checkout wumpus/2012_05_overviewpage_restore $ (build...)
1346	5775587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775587	Diapolo	I guess you will LOL, when I tell you how I test commits. Merged ones to master go into Bitcoin, I fetch them via git fetch upstream, rebase and then open a file-compare-tool and add every changed line into my test-build and compile it. Now next problem was I did never use other remotes, just the bitcoin one, but I will try your commands tomorrow :), its late.
1346	5775826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775826	laanwj	Hehe, that does sounds quite inefficient indeed. The simplest way to do it is to `git clone into a new directory then check out the branch `git checkout 2012_05_overviewpage_restore`. Then build from there. Remotes are essentially the same, but allow for tracking multiple remote repositories from one local git repository. This can be useful, for example, when you want to create a local branch from the remote branch and continue working on it. Or to do diffs between a branch of your own and the remote one. (However, it also means that you have to first commit your current work to a branch, or stash, before you can check out the other remote branch) Learning to use git effectively can be a bit of a challenge in the beginning, but it does pay off.
1346	5775939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775939	Diapolo	Thanks for this Git lesson :). Im already advancing, my first pulls were done via merges and I created so much mess, Con (developer of CGMINER) still hates me for them I guess ^^. Would a ``git clone bitcoin_wumpus`` work, so that I can use bitcoin_wumpus as directory? Do I need to fork your repo via the Github website first? Btw. which tag are you using to display the commands, seems its not the HTML-pre.
1346	5776002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5776002	laanwj	Yes, thats would work well. You dont have to do anything on the github website. You can make as many local clones and forks as you want, thats the advantage of a distributed VCS. I use `` (backticks) for the commands.
1346	5776072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5776072	Diapolo	``Thank you once more!``
1346	5781393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781393	Diapolo	I need your help GIT-wise, sorry to OT this discussion :). I did: ``git clone git://github.com/laanwj/bitcoin.git -b master bitcoin_wumpus`` ``cd bitcoin_wumpus`` ``git remote add upstream git://github.com/laanwj/bitcoin.git -m master`` ``git fetch upstream -p`` ``git checkout 2012_05_overviewpage`` Which leads me to a ``error: pathspec 2012_05_overviewpage did not match any file(s) known to git``. I tried the version, which led me to the same error. This steps were the same I did some time ago for the official bitcoin Git. Any ideas?
1346	5781410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781410	laanwj	git checkout upstream/2012_05_overviewpage edit: `git branch -a` to get a list of all branches
1346	5781536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781536	Diapolo	Ahhh okay currently I only checkout local branches and this is a remote one ...
1346	5781645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781645	Diapolo	I guess I should have added ``_restore``, now it worked :). Checked out the changes and they work and look good, so ACK!
1346	5781823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781823	laanwj	Moved the color:red stylesheets to the XML file.
1345	5774707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774707	laanwj	Diapolo you should get a job at Microsoft and get them to remove all those ugly _ from the APIs :) ACK
1345	5776206	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5776206	jgarzik	it is disappointing that the #define lives in two places, rather than one central location.
1345	5776266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5776266	Diapolo	At some time we perhaps should introduce something like a special windows header, as there are a few places were there are duplicate WIN32 things used in the code (that IE define for example).
1345	5776469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5776469	laanwj	Yeah, windows requires a lot of that hand-holding in the form of extra defines / un-defines. It might be worth making a config.h header that includes base OS includes and the necessary voodoo such as defining (u)int_XX types. On the other hand, that can easily grow out of hand into a headers.h-like file again... undoing all the work we did to make different headers for different concerns. This needs careful compromise.
1344	6280672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6280672	sipa	ACK.
1344	6412602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6412602	luke-jr	``` net.h: In member function void CNode::AskFor(const CInv&): net.h:299:137: error: cannot pass objects of non-trivially-copyable type struct std::string through ... ```
1344	6719350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719350	rebroad	whoops. fixed. thanks for helping.
1344	8213517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8213517	rebroad	thanks!
1343	5774980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774980	jgarzik	This changes the accounting to include the local node, which is probably incorrect
1343	5781779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781779	rebroad	are you sure? I thought my edit simply added a printf, but doesnt change the logic. Ive just double-check. Yup, it doesnt change the way local nodes are treated, it just reports when it happens now.
1343	5788597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5788597	jgarzik	nMisbehavior increment was moved prior to the IsLocal() test, changing behavior.
1343	5801628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5801628	gavinandresen	NACK because of the nMisbehavior change, we dont want IsLocal nodes getting banned.
1343	5809280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5809280	TheBlueMatt	ACK, if/when the "nMisbehavior += howmuch;" line is moved back to its original position.
1343	5819242	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5819242	rebroad	Ah. Sorry, yes, I do see what you mean now. I shall move the nMishehavior line back to its original location. Doing so now.
1343	5819362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5819362	rebroad	Ok. Now updated. The only change now is the printfs, and the change of nMisbehaviour is no longer moved. This move would not have changed anything though, as the only place where the value is read is in this function, and its only acted upon if the peer is NOT local, so the treatment of local nodes did remain the same, other than the value of nMisbehaviour changing but not being acted upon.
1343	6280635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6280635	sipa	ACK.
1343	6719664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719664	TheBlueMatt	ACK
1343	6719873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6719873	jgarzik	ACK
1342	5774959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774959	jgarzik	ACK, though Im curious if others want to preserve the old behavior
1342	5801660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5801660	gavinandresen	dont care
1342	5812977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5812977	sipa	ACK
1341	5773943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5773943	Diapolo	I know from own observations, that core devs dislike variable or function renaming without a very good reason ;), only wanted to say...
1341	5774094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774094	rebroad	Principle of least astonishment is usually the best reason for such a change, along with naming conventions probably coming a close second (or joint first).
1341	5774944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774944	jgarzik	NAK, breaks other more important changes for little gain
1340	5774921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774921	jgarzik	Timing the operation is useful, but there is not much use in reporting the other information again. Just follow wallet.dats lead and say "flushed foo.dat NN ms"
1340	5775244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775244	rebroad	is this better?
1340	5775797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775797	Diapolo	I think it would be nice to define a standard format for these time-measuring log entries all over the code.
1339	5774887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5774887	jgarzik	I found it useful for noticing IRC activity, and gauging channel participation rates. Plus, IRC is disabled by default, so not really worth that much worrying about it.
1339	5775054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5775054	rebroad	oh.... dont the pull requests stay open a bit so that other developers can comment...?
1338	5776297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5776297	jgarzik	1) the txnode bit is NAKd. not thread safe or really 100% accurate, and the value of the information is too low compared to adding that variable 2) the top, oh, 75% of this patch seems ACK-worthy, though it is changing High Value Code for a bunch of debug output, so the justification is not very large.
1338	5781746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781746	rebroad	how would you code it so that it reports the peer in question for a DoS(100) event? Ive been testing this for over a month and not noticed any problems. What sort of symptoms from being thread-unsafe would you expect to see? Regarding changing of HVC for additional information, does this mean that were stuck with not being able to log this information as we dont want to touch HVC? Its only the printf() and errors() affected, none of the actual logic.
1338	7431259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7431259	jgarzik	This does seem interesting, but I think we will have the TX hash logged elsewhere, if an error occurs. Just not a big driving need for this change, and its not collecting ACKs, so closing. PS. You added a ton of redundant braces { } This is too big. If you can (a) remove the redundant braces you added all over the place and (b) submitted this in smaller pieces
1337	5772930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5772930	Diapolo	As "Add build directory to .gitignore, so that its not tracked." was merged to master, you should rebase this to not include that commit again. And Im sure (as you change more stuff and not only add "-quietinitial") you should split things up and explain more what your changes are doing.
1337	5798864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5798864	luke-jr	``` src/main.cpp: In function bool ProcessMessage(CNode*, std::string, CDataStream&): src/main.cpp:2592:46: error: fLogPeers was not declared in this scope ```
1337	6032211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6032211	rebroad	Ive refactored this, making it simpler, and also separating the AskFor into two functions now, one for txs and one for blocks. This will make it easier to merge in #1404.
1337	6280503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6280503	sipa	Why does this add a function AskForBlock? It seems to change more than just disabling some debug output.
1337	6281296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281296	Diapolo	I think rebroad is currently learning the tricks and handling of Github, this took me a while, too :).
1337	6345808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6345808	rebroad	The addition of AskForBlock is explained above. Its due to #1404.
1337	6792496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6792496	jgarzik	Sorry... in general this is just a huge amount of changes for little value, during a special condition (IBD). These are events that might be interesting (if they fail or have problems or simply do not appear, when they should), even during initial block download. NAK from me.... though if the other devs want to override the NAK, I wont complain. Leaving pull request open due to this "weak NAK."
1337	7431011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7431011	jgarzik	Consensus does not seem to want this, closing.
1335	5770508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5770508	sipa	ACK
1335	5770537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5770537	laanwj	Ideally, the build directory is *outside* the repository. With qmake you can easily do this: $ cd .. $ mkdir bitcoin-qt-build-desktop $ cd bitcoin-qt-build-desktop $ qmake ../bitcoin With the makefiles its probably possible with some trickery.
1333	5769428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769428	laanwj	ACK BTW, wouldntt the same be needed in the other makefiles?
1333	5769653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769653	rebroad	maybe... Ill track them down as add to this commit, shall I?
1333	5769721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769721	rebroad	ok, other Makefiles also updated. Thanks for pointing this out.
1331	5768171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5768171	Diapolo	ACK
1330	5763239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763239	Diapolo	Can you plase also fix this in the crypter.cpp and use a more detailed commit-message? If you do so Im fine with this.
1330	5763389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763389	fanquake	Done
1330	5763527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763527	Diapolo	Good, now if you merge them into 1 commit everything is perfect :). "git rebase origin -i" helps :).
1330	5764410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5764410	laanwj	I dont want to be a party pooper but uhm... the file *is* called COPYING: I cannot find a license.txt anywhere in the repos.
1330	5764554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5764554	fanquake	My mistake.. So this means all the other headers are wrong? And should instead be changed to COPYING?
1330	5764646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5764646	laanwj	I just noticed that the file is copied as `license.txt` on win32 for the gitian build. ...confusing... Then again, I suppose the name in git is leading.
1330	5764701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5764701	Diapolo	Then its wrong in ALL other headers and cpp files ;).
1330	5783948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5783948	fanquake	Will make a new pull for this, updating the license header in all the necessary files.
1329	5765151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5765151	laanwj	If everyone thinks the other correction substitutions are a bad idea, those can be removed, let me know....
1329	5779142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779142	gmaxwell	Id really rather do something like highlight them in red in the interface rather than silently correct them. But maybe thats just me? I dont think we should correct them for the same reason that we dont try all 1596 one character variations when an address is invalid to see if any give a proper hash even though it would be computationally cheap: Because its not that unlikely to correct to the wrong thing and/or the detection of a single typo may indicate multiple typos. ... and once coin is sent to a bogus address it is absolutely irreparably unrecoverable. I figured that the confusion resistant base was to reduce the risk of badguys creating lookalike addresses and to make typos more likely to be detected (its not uncommon for our weak checksum to permit typos), not for silent automatic correction.
1329	5780876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5780876	laanwj	Ive removed the correction. After the last commit, the O and 0 and such can no longer be typed the address field and it will only accept true base58 characters (and whitespaces, which are deleted).
1329	5793860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5793860	luke-jr	Maybe it should pop up an error message explaining that its ignoring it?
1329	5794448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5794448	laanwj	Maybe. Itd be nice in general to be more verbose with validation, and give useful hints. But thats not the goal for this pull. In the case of zero-width spaces, the users dont even know the characters are in there, so there is no reason to tell them about it either. It should just work.
1329	5827646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5827646	laanwj	Added comment to validator function
1328	5761794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761794	laanwj	Nice try, but this creates a circular dependency (`util.h` `sync.h`). Please solve it in another way.
1328	5761836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761836	sipa	Hmm, strange, some people tried this on OSX without problems... Anyway, I suppose Sleep() could move to sync, if its a problem.
1328	5761923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761923	laanwj	Probably depends on the compiler version. Newer compilers will reject the use of undefined functions and types in parametrized templates. Older compilers will only check at instantiation time, so will let this pass.
1328	5762173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5762173	ahf	Where exactly is the circular dependency between those headers? `sync.h` includes `util.h` only on OS X if this patch is applied, but `util.h` only includes `netbase.h` which does not include `sync.h`. How would you prefer this to be solved? A forward declaration or moving the `Sleep()` function around?
1328	5762301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5762301	laanwj	You could also help testing #1292, which gets rid of the sleep workaround on MacOSX.
1328	5762511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5762511	ahf	Looks much better. Lets continue with that instead.
1326	5776458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5776458	gmaxwell	I havent had a chance to review this yet though I see you are using GetNumBlocksOfPeers()... Its perfectly possible for nodes to send insane values for the heights and some have done so. It should be treated as untrustworthy. This function is currently only used in the GUI... and I think it should probably stay there. At the very least every caller needs to give consideration to the possibility that a majority of your peers may be malicious and may give values chosen to make your day maximally bad.
1326	5781630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5781630	rebroad	Ive closed this pull for now, as it was opened for comments, but its not ready to pull. It still needs: 1) stuck management, and 2a) either a separate AskFor function for txs and blocks, as as its currently written, itll getdata the same tx from many nodes at the same time, or 2b) the same treatment of txs, i.e. dont download the same tx from another peer. 2b isnt so ideal as it will produce more getdatas as with the way its written, itll only have 1 inv per every getdata. This is ok for blocks (IMHO), but perhaps not so suitable for txs, so Id be inclined to go with 2a rather than 2b. Feedback much appreciated. re your last comment, no worries, its not finished anyway, so perhaps its better to wait until Ive completed bits 1 and 2a first - although your comments on whether 2a or 2b or 3c (something else) are suitable would be welcome. Re CaughtUp() not being reliable. Well, true, but if one is connected to misbehaving peers such as this, then oned (!) probably not want to be downloading from them anyway. The reason I created CaughtUp() is so that it can be refined to be more reliable. It serves a different purpose to IsInitialDownload() from what Ive been told by others that that function is for. I do think CaughtUp(), based on your comments above, does need refining given the risk you mention. Perhaps it can factor in the timestamp of the last block received also as a sanity check.
1326	5983705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5983705	rebroad	is an update of this pull request, and for some reason has "detached" from this pull request, so Ill have to raise another for this commit once Ive done enough testing....
1324	5746921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5746921	Diapolo	ACK, fix works ... but its kind of ugly to include that .moc.
1324	5749800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5749800	laanwj	Well, blame Qt for that... its the normal and documented way to do it.
1323	5764346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5764346	Diapolo	Updated and rebased, see initial description.
1323	5807361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5807361	laanwj	ACK
1322	5739081	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5739081	laanwj	This is not the right way to solve it. I moved the ui-specific stuff out of init.cpp for a reason. This bounces strings around all over the place. As this is a ui-only problem, please solve this without changes to the core. Note that _ is defined in ui code, you can call it from there. However, it simply calls tr, so if _ works, so does tr!
1322	5739188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5739188	Diapolo	tr() did not work, please try it. Even if the fix is not what it needs to be, there is a problem. And tr() vs. _() is for sure a difference, because _() shows up in bitcoinstrings.cpp, while this is not true for tr().
1322	5739317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5739317	laanwj	Strings that are defined in src/qt/bitcoin.cpp should not show up in bitcoinstrings.cpp but end up in the .ts through the normal translation path.
1322	5739873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5739873	Diapolo	Did you try to verify the problem? Before we start a discussion battle I would like to know if I found a bug or did something wrong in my local build ;). Try to change tr("Usage:") into something stupid like tr("Pig:"), what I say is that even after a translation the word "Usage:" is used in its untranslated form.
1322	5743685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5743685	laanwj	I think I know why tr doesnt work in our new class: Q_OBJECT is missing.
1322	5746045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5746045	laanwj	I certainly did believe you that something is wrong, and wasnt trying to start a discussion battle. But I first wanted to know why it went wrong, instead of trying to work around it. #1324 fixes this.
1322	5746906	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5746906	Diapolo	Its all fine, I seem to have missunderstood what you were trying to say :). Im glad its fixed!
1319	5733736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5733736	laanwj	I think its a good idea to update all translations once in a while, no matter if releases are planned, so people that use the master branch have the last translations.
1319	5735193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5735193	Diapolo	I can open another pull with an update for ALL translation files later, but I wanted to seperate the addition of new languages from that.
1318	5733801	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5733801	laanwj	Agreed, merged as #1321
1316	5722588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5722588	Diapolo	Good!
1315	5719161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5719161	rebroad	I suspected getblocks was probably the answer :) It would be very nice to see a mini white paper on what this does and how it works....
1315	5732165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5732165	gmaxwell	K. Tested resync from start several times. Tested partial resync. Tested recovery from fork with reorg on non-stuck node. Tested recovery from a forkmode stuck node. Tested with loadblocks. Make sure it wasnt bloating up the chain with a ton of copies of extra block .... I cant break it, so Im pulling.
1315	5756764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5756764	rebroad	Just out of interest, does the initial getblocks (thats sent to the first peer upon starting the node) also cause the recovery from afork stuck node? Is it that this change is to enable it to become unstuck without restarting the node? Or did even restarting not fix things?
1315	5756911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5756911	gmaxwell	Even restarting did not fix the particular issue this fix was needed to address but normal nodes probably cant get into that state. (The nodes in question were ones that got stuck due to incorrectly rejecting the correct chain because e.g. of premature BIP16 enforcement)
1315	5761362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761362	sipa	A bit more elaborate: if you were running an 0.6 RC, you would have code that used the old BIP16 switchover date. The date passed, but you did not update your software. Suddenly someone sends an invalid BIP transaction (so, one that is valid according to the traditional rules, but not according to the BIP16 rules). On the main network BIP16 validation is not active, so the transaction gets accepted. However, your old RC enforces BIP16 validation, so it considers this transaction invalid. This only happens after downloading the block that contains it, and adding it to the tree in the database. A few hundred blocks are added on top of this one, all in your database, but this chain does not become the best chain (as it is considers invalid). Finally, you upgrade your software, and you now have the correct BIP16 switchover date. The correct chain is already downloaded in your block database, but it is not marked as the active best chain. At startup, your node sends a getblocks from its current best tip (which is one block before the one that contained the invalid BIP16 transactions) to the top of the chain. The peer answers by sending 500 invs back, and remembers to request 500 more when the last of those is downloaded. However, we already have the first 500, so not one is requested, and nothing happens. We must somehow make the peer send us the rest of the invs, as that is our only means for reconnecting that chain to the current best block. Earlier versions of this patch forced a getdata of that 500th block, this one sends a getblocks immediately.
1315	5761515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761515	rebroad	I understand the explanation so far but it still doesnt explain how the new getblocks achieves that, and why upon receiving the very latest block, that that doesnt fix it, nor why it cant be coded to re-evaluate the last 6 or so blocks in the last known valid again to see if they are still valid by any new rules. The last solution would be better, IMHO, as it wouldnt increase network traffic, unlike this fix (kludge?). Sent from my Nokia phone -----Original Message----- From: Pieter Wuille Sent: 17/05/2012 11:10:55 Subject: Re: [bitcoin] Hopefully final fix for the stuck blockchain issue (#1315) A bit more elaborate: if you were running an 0.6 RC, you would have code that used the old BIP16 switchover date. The date passed, but you did not update your software. Suddenly someone sends an invalid BIP transaction (so, one that is valid according to the traditional rules, but not according to the BIP16 rules). On the main network BIP16 validation is not active, so the transaction gets accepted. However, your old RC enforces BIP16 validation, so it considers this transaction invalid. This only happens after downloading the block that contains it, and adding it to the tree in the database. A few hundred blocks are added on top of this one, all in your database, but this chain does not become the best chain (as it is considers invalid). Finally, you upgrade your software, and you now have the correct BIP16 switchover date. The correct chain is already downloaded in your block database, but it is not marked as the active best chain. At startup, your node sends a getblocks from its current best tip (which is one block before the one that contained the invalid BIP16 transactions) to the top of the chain. The peer answers by sending 500 invs back, and remembers to request 500 more when the last of those is downloaded. However, we already have the first 500, so not one is requested, and nothing happens. We must somehow make the peer send us the rest of the invs, as that is our only means for reconnecting that chain to the current best block. Earlier versions of this patch forced a getdata of that 500th block, this one sends a getblocks immediately. --- Reply to this email directly or view it on GitHub:
1315	5761599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761599	rebroad	Sorry, meant to say, that it could re-check the invalid again upon start up, perhaps by giving a command line option or perhaps automatically whenever the invalid again is longer by 6 blocks or more. Sent from my Nokia phone -----Original Message----- From: Pieter Wuille Sent: 17/05/2012 11:10:55 Subject: Re: [bitcoin] Hopefully final fix for the stuck blockchain issue (#1315) A bit more elaborate: if you were running an 0.6 RC, you would have code that used the old BIP16 switchover date. The date passed, but you did not update your software. Suddenly someone sends an invalid BIP transaction (so, one that is valid according to the traditional rules, but not according to the BIP16 rules). On the main network BIP16 validation is not active, so the transaction gets accepted. However, your old RC enforces BIP16 validation, so it considers this transaction invalid. This only happens after downloading the block that contains it, and adding it to the tree in the database. A few hundred blocks are added on top of this one, all in your database, but this chain does not become the best chain (as it is considers invalid). Finally, you upgrade your software, and you now have the correct BIP16 switchover date. The correct chain is already downloaded in your block database, but it is not marked as the active best chain. At startup, your node sends a getblocks from its current best tip (which is one block before the one that contained the invalid BIP16 transactions) to the top of the chain. The peer answers by sending 500 invs back, and remembers to request 500 more when the last of those is downloaded. However, we already have the first 500, so not one is requested, and nothing happens. We must somehow make the peer send us the rest of the invs, as that is our only means for reconnecting that chain to the current best block. Earlier versions of this patch forced a getdata of that 500th block, this one sends a getblocks immediately. --- Reply to this email directly or view it on GitHub:
1315	5761609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761609	sipa	This fix will - over the course of an entire blockchain syncup - maybe cause 50 kilobytes extra communication. What you suggest is also possible, but harder and with less guarantees, in my opinion. Youd need to traverse the entire blockchain database and find stale chains, and re-evaluate them all?
1315	5761659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761659	rebroad	Doesnt this fix also increase data transfer even after the node has caught up? I thought it does getblocks upon receipt of every block, doesnt it? To re-evaluate the invalid again it would only need to re-evaluate one block upon start-up in the example you give. The first block in the longest invalid chain.
1315	5761691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761691	rebroad	Also, technically, id say this current fix requires a BIP.
1315	5761765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761765	sipa	In normal operation, this patch does nothing. It only sends out a getblocks when an inv is received with blocks that are already known and part of the block tree. During normal operation, this never happens, as you only request invs for the part after the main chain. And the block-sync process has never been well-formalized, though the responses to the network requests are. Those arent changed however.
1315	5761856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5761856	rebroad	I think you are incorrect to say it doesnt happen during normal operation. This is not my experience. When i new block arrives on the network, lets say 8 nodes announce it in invs. My mode will getdata it from the first one, download it and ProcessBlock it usually well before the last connected peer sends invs for it, so with this code with each new block, the slowest peers to announce it will receive the new getblocks in this fix. As the network gets bigger, this could get worse. It could also get less worse if ProcessBlocks takes longer due to larger blocks.
1315	5763769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763769	gmaxwell	While previously testing this I specifically looked for excess requests during normal operations and didnt see any. Either I made a mistake or just had unlucky timing or its something about the peer mix thats triggering it, because I see ones now about 1769 of them on 05/16. Actually, they seem to be being caused in high volume by specific peers. E.g. I have a couple which are each responsible for several hundred of them.
1315	5767885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5767885	rebroad	Ive added a fix to this, in my current bitcoin-ParallelBlockDownload branch (the 3rd commit of pull #1326).... I still think the ideal solution is to do it without using the network though....
1314	5750074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5750074	laanwj	The idea is great, however I dont think "obsolete" is the word to use here. It has very negative connotations. Also, it would be nice if the tooltip explanation was more verbose, and explained to the user that they should wait until they catch up with the block chain until they can rely on the numbers shown (and not panic :-).
1314	5759934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5759934	Diapolo	You are right, we should not scare users ^^. Will change the strings.
1314	5760133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5760133	Diapolo	Updated to be less scaring and more verbose.
1314	5763547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763547	Diapolo	Im tuning the layout a little currently, please wait for a final rebase before merging
1314	5763889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5763889	Diapolo	Updated tooltip once more, changed tr() handling, to not need to translate "(" and ")" and fixed use stylesheet in the UI-file. If you feel the text is now better this can be merged.
1314	5764330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5764330	laanwj	I think at least one native English speaker should check this, but some remarks: * Never display "(up to date)". Only display "(out of sync)" when the block chain is out of sync. After all, there is never a guarantee that the client is up to date, only an indication that it is not. See the original issue #1236. * Message: **Wallet state, displays "out of sync" while block chain sync needs to be done and "up to date", if the local block chain is synced to the network. Remember, "out of sync" is a normal state, no Bitcoins are lost!**: * No need to mention "wallet state", or "no bitcoins are lost!". I think it is better to show the message (when the user hovers over any "out of sync"), as: * **The displayed information reflects an older state. The local block chain needs to be synchronized to the network to get more recent information. This will happen automatically when there is connectivity to the network.** * Show no message when not out of sync I think the message can be even more simpler and more verbose/friendly English, but this is the idea.
1314	5764794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5764794	Diapolo	I agree to hide the message if everything is okay ... will update. Have to think about the message-text again ;) ... will take your suggestion as base.
1314	5765814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5765814	Diapolo	My suggestion is: <b>The displayed information reflects an older state. To get more recent information, the local block chain needs to be synced with the network. This process starts automatically after a network connection is established.</b>
1314	5767363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5767363	laanwj	Yes, ok with me. (btw, you have a space before the message in your commit :-)
1314	5767460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5767460	Diapolo	OMFG that needs an update :), thanks for mentioning!
1314	5767508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5767508	Diapolo	Finished :-D!?
1314	5768046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5768046	laanwj	As for the messages, maybe itd be good if takes a look too. He opened the original issue.
1314	5772568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5772568	Diapolo	Updated to phrasing suggestion.
1311	5704735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5704735	gmaxwell	This makes non-trivial unrelated changes, for example it adds DoS() to node connecting with the old protocol version.
1311	5704798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5704798	gmaxwell	Also, NAK on the general introduction of peer address to many messages. Id be okay with logging the peer address of attack behavior or truly unusual exceptions, but logging by default the address of every peer we pull transactions from is not good and would create considerable incentives to compromise the security of nodes to use their logs for tracing transactions.
1311	5705079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5705079	jgarzik	logtimestamps was disabled by default for similar reasons that we dont always log peer address... major privacy implications.
1311	5705357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5705357	rebroad	Doesnt it make more sense to use the misbehaving function on a peer that you will *always* disconnect whenever it connects? Why not use it? Re peer addresses: these are changes anyone could do anyway, it is useful debug info, especially when trying to work out why blocks arent downloading as fast as they could be, or for troubleshooting code to determine network lag in general or per peer. The debug.log is chopped regularly, so there is usually no more than a day or two of logs. Would it help perhaps, if instead of showing IP addresses, it just used a unique number instead? The IP address itself isnt important, but correlating which of several peers is. Re timestamps, - how is this a privacy implication? With timestamps off, the flushing of the wallet.dat is always timestamped, so a timestamp per line surely makes little difference, does it?
1311	5705575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5705575	gmaxwell	The problem isnt that people can do it its the expectation that having this creates that going and collecting drives from bitcoin nodes will net you valuable information. Excessive logging endangers our users in several ways beyond the lost privacy there is the risk of node operators being subject to frivolous fishing expedition investigations just to gather their logs, being hacked to use nodes to trace back nodes, etc. I dont believe Ive ever wanted addresses in the logs of someone elses node I was troubleshooting, except on rpc authentication failures. (I have wanted addresses on my own nodes too, but I can as you point out enable that locally). The default logging behavior shouldnt reflect the logging we as developers user to build the software it should reflect the logging we need to help users with mysterious behavior out in the field... and thats all. If not for that need we wouldnt have logging at all. Regarding timestamps infrequent markers are not the same thing as timestamps on every message.
1311	5705676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5705676	gmaxwell	On the misbehaving change I wasnt complaining that it was a bad change I was complaining that youre mixing changes that require different kinds of review in your pull. The debug log entries are mostly cosmetic, assuming they arent outright buggy and ignoring privacy issues the amount of harm changing them is at worst fairly minimal. Whereas a DoS change even if it works perfectly, could knock the whole network out it requires a different kind of consideration. As far as it goes, I think it actually is a bad change: It means that when the old node gets upgraded he may be blacklisted by the whole network and not be able to get on for another 24 hours. Because it costs basically no more to hang up due to the blacklist vs hang up at the addr message I dont see that it saves us anything.
1311	5705949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5705949	rebroad	Understood. Ok, so DoS to be removed. Timestamps off by default. How about changing it to an option to enable peer logging, thats off by default? Would that be ok then?
1311	5713772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5713772	fanquake	Looks like this pull contains code from other pull requests youve made. Shouldnt each pull request only have the code related to the specific change? Im fairly sure this pull also includes the code from here -> and here ->
1311	5716715	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5716715	rebroad	I just did a git log -p to check, but theres no mention of proxytoo in the entire log history, so Im not quite sure what youre looking at. oh.. but on github it does show... Ill try pushing again. Ok, Ive removed the ProxyToo mention now, thanks for spotting that. An inadvertent merge, not that thisll be enough to get it ACKed. Ill add a flag for the peer logging, as I agree with that it reduces anonymousness unnecessarily in most situations.
1311	5717668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5717668	rebroad	Ok, this now displays peers only if -logpeers is true, and that option isnt advertised unless the code is examined. Peers are shown for blocks, and for Dos(100) transactions only unless the option is selected. Timestamps are disabled by default. DoS for obsolete version also removed. Also, HandleSIGTERM now shows the signal number received. Thanks for the feedback hopefully this is a more agreeable edit now.
1311	5768606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5768606	rebroad	This pull now contains no functional changes, only display changes.
1311	5768996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5768996	jgarzik	meh, this thing is still freakin huge, touching all sorts of code. will post a few comments inline...
1308	5708871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5708871	laanwj	Apart from my small comment, ACK.
1308	5709104	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5709104	Diapolo	Updated and rebased to reflect your comment.
1307	5700783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5700783	laanwj	Its better to remove the connect line and leave the slot named like that. Qt will automatically connect slots with a certain name, this is what happens when you create handler methods from the designer interface as well.
1307	5701015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5701015	Diapolo	I had a 50% chance of chosing the right fix :D ... will update! But that was a weird bug for me ^^.
1307	5701119	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5701119	Diapolo	Updated!
1307	5701290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5701290	laanwj	Well theyre both right fixes :-) But removing a line is simpler. It was kind of weird to me too, the first time I encountered it. I wondered how qt designer created the connections to the host object slots. It is documented in QMetaObject::connectSlotsByName.
1306	5708831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5708831	laanwj	How can "things work more reliably through tor"? Tor routes your connections through several other nodes, its never been set up for reliability but for privacy. Connecting through Tor 50% of the times annihilates 100% of that hard won privacy. You seem to have routing issues with your network. Fix these, or use a load-balancing proxy or VPN to work around it. But dont try to fix this in bitcoin. This option is only confusing. NACK.
1306	5718674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5718674	rebroad	you are of course correct, in that there is probably software which could take care of the routing, routing some via tor, some directly, etc. Im not aware of any, but Im sure it exists. Would you be willing to let me know of the software that does this? I think its a simple enough change, and I agree that a minority of people will use it. Would it be more agreeable if the proxytoo option was not mentioned in the syntax output?
1306	5809237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5809237	TheBlueMatt	I agree with I think "sometimes things work more reliably through tor, and at other times directly" is a sign that you either have issues with your connection, or the peer selection algorithms are doing a woefully poor job (depending on what, exactly you mean by work more reliably). I cant really see any legitimate reasons for this to be used...maybe you want to elaborate?
1306	5809975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5809975	sipa	he has a very limited internet connection, whose provider regularly resets TCP connections, it seems.
1306	5810140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5810140	TheBlueMatt	Oh, well in that case I would say a) you should look into other providers (if available) or complain because you arent getting access to the internet, you are getting access to some filtered, crappy version of it and b) do we handle getting our connections dropped that poorly? I know during initial block download we do (though that should be fixed with #1271), but other than that just getting a connection dropped and getting a new connection to a new node to replace it should never be a problem, atleast in bitcoin?
1306	5832529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5832529	sipa	Id like to close this. I think few people would use proxying as a way to increase reliability.
1306	5841506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5841506	rebroad	I agree that it would be only a few people, but its also only a few people who would want to see "IRC got who" events also, and were keeping that in....
1306	6303501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6303501	sipa	We certainly need to deal with connection management in a better way (detect bad connections, find better ones, parallellize block download, ...), but abusing a proxy for this seems wrong.
1306	6333335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333335	rebroad	Well, your proxy might feel abused, but mine loves the attention :)
1306	7430979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430979	jgarzik	Consensus seems against, closing.
1305	5709943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5709943	laanwj	ACK
1305	5714746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5714746	Diapolo	Why receives HandleSIGTERM an integer? Seems unused in the diff.
1305	5715170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5715170	laanwj	Know your unix :-) signal handlers receive an integer with the signal number.
1305	5715257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5715257	sipa	Id make it "SIGTERM received", but otherwise ACK.
1305	5715331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5715331	Diapolo	Unix != Diapolo :-D
1305	5716699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5716699	rebroad	or how about, considering that function will be run with any signal, displaying the signal number received..?
1305	5718270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5718270	rebroad	Ive just realised this change is also in another pull request. :-s Ive avoided saying SIGTERM received, as this is a specific signal (15), so saying that might be misleading, whereas its true to say the function HandleSIGTERM() is called.
1305	5718290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5718290	rebroad	Ill close this pull request in favour of the other which includes this change and others.
1305	5719415	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5719415	sipa	HandleSIGTERM is apparently used for SIGTERM, SIGINT and SIGHUP.
1305	5719694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5719694	laanwj	Ah, named according to the principle of most surprise. Interesting :)
1305	5720644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5720644	rebroad	I suspect HandleSIGTERM would run if SIGUSR1 was sent too. Any signal other than 9, probably.
1305	5720868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5720868	sipa	no signal handler is installed for SIGUSR1. See the beginning of AppInit2 in init.cpp.
1305	5768149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5768149	rebroad	Since this was getting ACKs, Ive re-opened it. Its more likely to get pulled than pull #1311, which its a subset of. I should probably break #1311 into smaller pieces....
1305	5769197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769197	Diapolo	You should rebase this!
1305	5769248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769248	rebroad	I can do... does it make much difference? (rebased now)
1305	5769298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769298	Diapolo	Yes, just take a look under what do you see :)? Use <pre>git fetch upstream</pre> <pre>git rebase upstream</pre> to ensure you have the current master as base.
1305	5769374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769374	rebroad	I see 1 commit and 1 diff. What do you see? Thats also what I saw before I rebased.
1305	5769457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5769457	Diapolo	I saw 4 commits and 3 of which were not from you ;). Now I see a single one, which is good.
1305	5792838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5792838	luke-jr	What stops this from creating a deadlock when a signal is received inside the "printf" replacement log function?
1305	5793722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5793722	sipa	how exactly?
1305	5794391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5794391	luke-jr	printf needs to use a lock to ensure multiple threads arent writing at the same time, but signals can interrupt writes (while that lock is held). If this happens, the printf in the signal handler will try to lock again, and block. Even if the lock is recursive, there is a risk of the signal printf mixing output with the ongoing one.
1305	5794881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5794881	laanwj	Ouch. I keep forgetting that we redefine printf in a macro :-(
1305	5796192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5796192	Diapolo	You were updating the function a few days ago ^^...
1305	5828257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828257	rebroad	what would be your ideal solution for this (other than removing the prinf)?
1305	5828454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5828454	luke-jr	I think it might be safe to create a new thread just for the printf. Then the signal returns - locks get released on their normal schedule, etc - while the second thread waits to acquire whatever locks it needs to log.
1305	5843234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5843234	rebroad	when I get time Ill have a dabble with this. Im fairly new to the whole thread thing, but I was thinking of moving ProcessBlock() into a thread of its own so that it doesnt block the reception of messages (which it appears to do currently, based upon the timestamps in debug.log)
1305	7027932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7027932	laanwj	Creating a thread sounds like a terrible kludge. That the safest way is to save the "signal status" to a global variable in the signal handler and let the Shutdown function pick it up and print it. Python, for example, does signal handling in this way. Btw, instead (or, in addition to) the numeric signal it should probably print the signal name, converted using `strsignal`.
1305	7273951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7273951	rebroad	That does sound like a decent solution. I will update this to do that, when I get time...
1305	7430939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430939	jgarzik	NAK, possible deadlock. printf() obtains a lock, which can get really messy when signals are involved. You might even be inside the printf lock itself. Maybe set a got_sigterm boolean that triggers a print elsewhere...
1304	5698631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5698631	gmaxwell	(Just for the benefit of people finding this pull request in google searches: Negative timestamps are not a sign of manipulation, nodes make no effort to avoid negative timestamps they just use their accurate times. Ntimerolling by miners sometimes moves the time far ahead and then the next block gets the correct time at a time earlier than the prior one)
1304	5698826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5698826	rebroad	they arent usually a sign of manipulation, but they *could* be a sign. This is correct, right? Its rare, admittedly, and might never have happened so far!
1304	5698948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5698948	gmaxwell	Its not an interesting form of manipulation (someone could lie to slightly increase the difficulty by a about half a percent), but I wasnt taking issue with your comment. There have been some people who saw the negative going timestamps and ran around claiming it was an attack, seems to be a common mistake people make in assuming that it wont happen absent an attack. Logging it sounds fine to me.
1304	6280388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6280388	sipa	ACK. I think its still interesting to have these in debug.log, even if just as a way of keeping track of how far you are behind.
1304	6282647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6282647	Diapolo	If you indent, can you please "always" use 4 spaces (4 spaces == 1 tab kind of)?
1304	6333610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333610	rebroad	I thought 4 spaces was for inside functions/parenthesis, and 2 spaces is for lines that have been broken up over more than one line.
1304	6333735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6333735	Diapolo	Im not sure abot that, it just looked weird to me.
1304	8213502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8213502	rebroad	oooh.. it got merged. almost 3 months later. cool. thanks!
1303	5700779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5700779	Diapolo	blkmeta.dat contains settings, options and all that stuff, right?
1303	5701266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5701266	jgarzik	blkmeta.dat mostly contains random singleton datums like hashBestChain or bnBestInvalidWork
1303	5703668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5703668	jgarzik	Updated patch order, dramatically shrinking the diff.
1303	5798732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5798732	luke-jr	Breaks Bitcoin-Qt: ``` src/qt/optionsmodel.cpp: In member function virtual QVariant OptionsModel::data(const QModelIndex&, int) const: src/qt/optionsmodel.cpp:131:29: error: fDetachDB was not declared in this scope src/qt/optionsmodel.cpp: In member function virtual bool OptionsModel::setData(const QModelIndex&, const QVariant&, int): src/qt/optionsmodel.cpp:218:13: error: fDetachDB was not declared in this scope ```
1303	5798806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5798806	luke-jr	eca20e7c4c263cb14f1d11e74fc362daca22fd42 is the first bad commit
1303	5799558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5799558	jgarzik	fixed
1303	5805043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805043	luke-jr	First run, I am prompted to upgrade my database. debug.log fills with lines like this: ``` ProcessBlock: ORPHAN BLOCK, prev=* ``` Immediately afterward, Bitcoin-Qt crashes: ``` EXCEPTION: NSt8ios_base7failureE CDataStream::read() : end of data ``` git bisect blames a commit between aa79af8..jgarzik/blockindex
1303	5805143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805143	luke-jr	``` #1 0x0811cbf6 in CDataStream::setstate (this=0xffffb92c, bits=4, psz=0x837c724 "CDataStream::read() : end of data") at src/serialize.h:908 #2 0x0811ccad in CDataStream::read (this=0xffffb92c, pch=0xffffb8cc "", nSize=32) at src/serialize.h:936 #3 0x08148428 in base_uint<256u>::Unserialize<CDataStream> (this=0xffffb8cc, s=..., nType=2, nVersion=69900) at src/uint256.h:374 #4 0x08139edd in Unserialize<CDataStream, uint256> (is=..., a=..., nType=2, nVersion=69900) at src/serialize.h:353 #5 0x08153307 in SerReadWrite<CDataStream, uint256> (s=..., obj=..., nType=2, nVersion=69900, ser_action=...) at src/serialize.h:685 #6 0x081af4b5 in CDiskBlockIndex::Unserialize<CDataStream> (this=0xffffb850, s=..., nType=2, nVersion=69900) at src/main.h:1211 #7 0x081ad31f in Unserialize<CDataStream, CDiskBlockIndex> (is=..., a=..., nType=2, nVersion=69900) at src/serialize.h:353 #8 0x081abdd8 in CDataStream::operator>><CDiskBlockIndex> (this=0xffffb92c, obj=...) at src/serialize.h:1005 #9 0x081a80e2 in CBlockIdxDB::LoadBlockIndex (this=0xffffbbec) at src/db.cpp:730 #10 0x08110a64 in LoadBlockIndex (fAllowNew=true) at src/main.cpp:2095 #11 0x0816d05d in AppInit2 () at src/init.cpp:437 #12 0x08087bd1 in main (argc=1, argv=0xffffc6d4) at src/qt/bitcoin.cpp:301 ```
1303	5806765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5806765	luke-jr	Fixed in latest commits.
1303	5810627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5810627	jgarzik	Commit status notes: Note 1) the base read/write logic works. you can run a peer node stably with this. shut it down, restart, etc. Note 2) there is a strange behavior, where a single record appears during a read-all-records query of a hash database (LoadBlockIndex), which causes CDataStream to throw an error during deserialize. the error output, created by commit 183e670, is CBlockIdxDB::LoadBlockIndex() : de-ser error, ignoring record ~~Note 3) As discovered while investigating Note 2 (previous item), upstream bitcoin should wrap all CDataStream decoding within a try{} block. There are several places where we do not do this, leaving **current bitcoin vulnerable to crash** if there is any de-serialization error (data corruption / truncated record on disk).~~ Note 4) On this first pass, the Old Way appears to use significantly less disk space than the New Way: It is likely that this can be improved by changing the hash fill factor. This is the untuned, out-of-the-box switch from DB_BTREE to DB_HASH. Disappointing initial results. ~~Note 5) Using the in-place upgrade code, which calls LoadExternalBlockFile(), or using -loadblock=FILE results in the import getting stuck reproducibly at height 173928: ~~If one downloads from the network, this problem does not occur. The imported file was downloaded from on May 10.~~
1303	5811015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5811015	sipa	For reference: the problem with the stuck chain is probably due to incorrectly isolating blockchain modifications in transactions. This would only cause problems when a block fails to connect to the main chain. When downloading from the network, one does not receive older stales, but LoadExternalBlockFile does import these. The imported file seems to contain a block with an invalid BIP16 transaction at 173929, which indeed would cause an error when connecting the block to the chain.
1303	5811829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5811829	jgarzik	Issue 5 fixed. Thanks to for noticing the probable bug.
1303	5812174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5812174	jgarzik	db_stat output, after loading 180,953 blocks:
1303	5813053	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5813053	jgarzik	db_stat output, after loading 180,960 blocks the old way (blkindex.dat):
1303	5865800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5865800	jgarzik	Merged several commits into one big one, and then refactored a bit into three pieces: 1. Upstream-ready refactoring. 2. Split CTxDB into three pieces, blkhash.dat, txhash.dat and blkmeta.dat. Databases remain DB_BTREE at this point. 3. Switch txhash.dat and blkhash.dat to DB_HASH. This arrangement permits easier testing of the database split itself (still btree) versus hash.
1303	5866083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5866083	jgarzik	db_stat output, with 3way split using DB_BTREE:
1303	6332684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6332684	sipa	I think it would make sense to keep a tree-based index for the block header database, to allow looking up a block prefix quickly. In #1426 the idea rose to use the lower bytes as identifier instead of the higher ones. Maybe it makes sense to do a byteswap on the block header keys, to allow a lookup on those?
1303	6607457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607457	jgarzik	Closing. Inclusion of this split is conditional on making other major changes to the database structure, such as TDs LevelDB changes. If/when those are merged, this can be updated and reopened. The net effect of this pull request was a 10% space savings and CPU util savings.
1302	5697517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697517	jgarzik	looks good to my quick scan
1302	5700714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5700714	Diapolo	Looks good and gets rid of some damn char arrays and buffer-fiddling! ACK
1302	5805603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5805603	gavinandresen	ACK.
1301	5694905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5694905	Diapolo	Are you sure this this works for the CMD_REPLY / CMD_ERROR? Lets say type help, scroll up in the QTextEdit, click in somwhere (perhaps to copy) and type help again. I have a feeling you will see the line where you entered "help", but not the output.
1301	5695494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5695494	laanwj	It really works. Im pulling off a trick to avoid that. Note that I dont move the cursor :)
1301	5695833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5695833	Diapolo	If it does what I tried to achieve with my pull Im fine with this one, if its behaviour is different on Windows Im a tad unhappy though :). I will test this as soon as it gets merged! Perhaps you can leave my pull open until then.
1300	5804100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5804100	jgarzik	This does not seem to cause problems in testing, but would appreciate some additional eyes on it.
1299	5693721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5693721	gmaxwell	"-blocknet" remains: in return InitError(strprintf(_("Unknown network specified in -blocknet: %s"), snet.c_str()));
1299	5693852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5693852	sipa	Fixed.
1299	5694398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5694398	jgarzik	ACK
1298	5693483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5693483	gavinandresen	How did you test these changes?
1298	5693870	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5693870	wizeman	For commit "4843b55 Make CNetAddr::GetHash() return an unsigned val.", I verified that there was only one user of CNetAddr::GetHash() by changing the return value to void and seeing where the compilation broke. In the single user of that function, I think the changes are relatively straightforward and the hash calculations more likely to be correct using uint64 than int64. For commit "fe78c9a Dont overflow signed ints in CBigNum::setint64()", I wrote a small program that tested creating a few CBigNum vars, with positive and negative integers, to make sure the results were the ones expected. These 2 bugs were detected using a tool that automatically detects some kinds of undefined behavior at run-time. After fixing them, no more errors were reported. Furthermore, I let bitcoind run with that tool, along with another one which detects memory corruption problems (even more kinds of memory corruption than valgrind is able to detect), while confirming the latest ~150 blocks of the main net. It successfully confirmed them without any apparent problems.
1298	5697304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697304	gavinandresen	Could you turn your small test program into unit tests in src/test/bignum_tests.cpp ? Comments on where to get your nifty testing tools/methods would be most welcome, too (in that does-not-exist-yet unit test file).
1298	5699952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5699952	wizeman	I added test cases for CBigNum::setint64(). It was a bit more complex than I thought because gcc (with -O2) was inlining the function and, due to the values being constants, optimizing it to the point that -ftrapv was not detecting the signed subtraction overflow when the function was given an INT64_MIN argument. After the test case was added, it was aborting in one of the test cases, as expected, due to the mentioned bug. The commit "5849bd4 Fix signed subtraction overflow in CBigNum::setint64()" then fixes the bug. Note that this bug is also present in the mainline bitcoin code and will cause bitcoin to crash when a CBigNum var is initialized with an INT64_MIN value and the code was compiled with -ftrapv.
1298	6043999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6043999	wizeman	Thanks for the numeric limits suggestion, I was not aware of that (Im a lot more experienced in C than C++, as you can probably guess). I have fixed that as you suggested. As for the noinline attribute, it will work on any compiler that supports gcc extensions (it should work for gcc, clang and icc, at least), but I guess not for MSVC++. As far as I could find out, there is no standard way of doing this, so we just have to use whatever syntax each compiler supports. I have updated the code to define a NOINLINE macro which will conditionally use syntax for gcc-compatible compilers (gcc, clang, icc), MSVC++ or emit a warning if the code is being compiled with an unknown compiler. I have re-tested everything with gcc and clang (with and without the fix, to see if the test still works), but I havent tested with MSVC++ as I dont have access to such an environment at the moment.
1298	6188792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6188792	wizeman	Ive moved the NOINLINE definition to the test rather than util.h, as suggested. I have also fixed a bug which was causing the test_bitcoin program to abort on 32-bit systems.
1298	6280288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6280288	sipa	ACK (needs a trivial rebase though).
1298	6313676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6313676	wizeman	So what is the process now? Should I rebase? If so, can I do it in the same branch, and will the pull request preserve all existing information?
1298	6397905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6397905	sipa	Seems did it for you. For future reference: yes, you can just push to the branch on github where you originally pullrequested from, and the pull request will be updated accordingly (keeping relevant discussion, but changing commits as necessary).
1298	6397954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6397954	wizeman	Cool, thanks to both of you!
1298	6897088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6897088	luke-jr	Could you comment on #1497 please?
1298	6899278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6899278	wizeman	Hi luke-jr, I added a comment to your pull request. Cheers, Ricardo
1297	5684331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5684331	laanwj	Id argue that the current behavior is "normal console behavior": - when you are scrolled down, it will scroll down on appended text - when you manually scrolled up, it leaves the focus alone until you go to the end again Scrolling on append can be annoying when youre reading something in history and it suddenly jumps (currently not an issue as all output is a direct response, but that will change when error/debug output is added). If you want to add automatic scrolling to the end, do it when the user entered a command. This is similar to gnome-terminal etc.
1297	5684494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5684494	Diapolo	In Windows the behaviour on the cmd-prompt is to scroll down, even if you manually scrolled up and thats what I was missing here. I understand your hint, that it gets annoying, when messages are appended automatically. Scrolling to the end after the user entered a command looks kind of ugly, as you only see the entered command then, but not the output. But I will rework this, to consider auto-messages!
1297	5684664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5684664	laanwj	I dont think thats true. Have you tried it? If you scroll down after the user command, I *think* the internal logic of qtextedit will make sure it stays at the end when the reply comes.
1297	5684754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5684754	Diapolo	To be more clear, I was referring to a WIndows command prompt, not the RPC Console, when I talked about what I as Win-user expect from such a RPC Console ;), sorry.
1297	5685150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5685150	Diapolo	Updated to only do this for non MC_ERROR and MC_DEBUG messages.
1297	5694745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5694745	laanwj	See #1301 for my take on this...
1297	5702754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5702754	Diapolo	Fixed by #1301, closing this one!
1296	5683167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5683167	gmaxwell	Im somewhat inclined to back this way off e.g. to 50 MiB or so, simply because of how badly it fails when it runs out and because 50MiB is pretty tiny compared to the blockchain.
1296	5683446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5683446	Diapolo	Updated to check for 50 MiB and make that a const uint64.
1296	5688976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5688976	Diapolo	Updated to use a global constant (defined in main.h).
1296	5709990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5709990	laanwj	ACK
1296	5792604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5792604	luke-jr	ACK
1293	5682814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5682814	jgarzik	Rebased on top of #1295 (check return values of TxnBegin, TxnCommit)
1293	5695470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5695470	jgarzik	DEPENDENCY UPDATE: this sits on top of #1300, in addition to #1295
1293	5707392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5707392	jgarzik	Moved mapDb and mapFileUseCount into class CDBEnv. mapFileUseCount had to remain public for the moment, until some wrappers may be written that eliminates the need for walletdb and CDB::Rewrite() to directly access these internals. It doesnt help that we use this reference counting scheme *sometimes*, and other times we wish to immediately close regardless of reference count.
1293	5804113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5804113	jgarzik	This seems stable in testing, though the encapsulation isnt the best. Some of the mapFileUseCount[] stuff is rather delicate, and relies on implicit behavior. Best left to complete the encapsulation of that to a separate commit, IMO. Once done, that will fit naturally inside CDBEnv::OpenDb(), which would be split out from CDB::CDB().
1293	5858762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5858762	sipa	ACK
1292	5680515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5680515	jgarzik	ACK
1292	5682865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5682865	laanwj	ACK
1292	5695165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5695165	gmaxwell	boost::interprocess::interprocess_mutex dd_mutex in DEBUG_LOCKORDER? (Edit: and, indeed, DEBUG_LOCKORDER is currently broken)
1292	5703253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5703253	sipa	Fixed DEBUG_LOCKORDER.
1292	5788275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5788275	gavinandresen	ACK, good CPU usage on my mac.
1291	5680510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5680510	jgarzik	getnameinfo() you mean? ACK to the code...
1291	5680610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5680610	sipa	Commit and pull name updated :)
1291	5680832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5680832	jgarzik	ACK :)
1289	5676535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5676535	sipa	I dont think this will cause many conflicts, so I dont mind merging. One thing Im not sure about is "bitcoin address" or "Bitcoin address". It could be interpreted both as referring the the currency or to the system.
1289	5676630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5676630	Diapolo	For me such an address is a Bitcoin (system) address used to transfer bitcoins :). But we should hear others, too.
1289	5692594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5692594	burger2	Just take a look at There they write Bitcoin address
1289	5694943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5694943	Diapolo	Im not sure about Wikipedia beeing a general reference, but they use it the same way I would use it. What you say?
1289	5702837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5702837	Diapolo	Can we please decide to get this in quick? I want to create the next version of the en translation master file, so that we have enough time for such things to mature!
1289	5702981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5702981	sipa	ACK
1289	5760036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5760036	Diapolo	Final merge-request ;).
1289	5796107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5796107	laanwj	I am not sure what the appname in freedesktop notifications is actually used for. The specification is unclear on this: Using qApp name sounds like a good idea. Theres no need to translate it.
1288	5677432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5677432	laanwj	Youre trying to break all the translations arent you? :p
1288	5678216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678216	Diapolo	I think we should break translations before RC-phase, so yes ... Im cleaning up ^^.
1288	5678245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678245	laanwj	I wish there was a way to change the English translation without invalidating all the translated messages... Or at least update the source string for all translations automatically, when there is no substantial difference.
1288	5678298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678298	Diapolo	This would be a nice thing, but Qts same text heuristic doesnt cover such things. Edit: All this leads to one thing, take more care if doing strings in the client that need a translations as this is a great plus in terms of UX!
1288	5678555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678555	laanwj	I think you could actually set the strings as "translation" strings in bitcoin-en.ts instead?
1288	5678688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678688	Diapolo	Sorry, I dont get it ... can you explain?
1288	5678702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678702	laanwj	If you open bitcoin-en.ts in Qt translator and set the new messages there, it will change the message shown in English clients without changing the message in the source code, so without affecting the other translations.
1288	5678760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678760	Diapolo	This would be less invasive, but produce an ugly inconsistency for the en translation-file and the source ... I dont really like that idea. A form of %RPC_Con_Information_Label_text% in the source and translations only in the lang-files, but that would even further raise the complexity.
1288	5678820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678820	laanwj	I dont like it either. But I also dont like it if 20 translators have to re-translate a message just because a space was removed, or a dot was added, for example. Transifex also has no way to edit a source message. However, they claim they have "Fussy re-using of existing strings in source language files" with a "similarity threshold" (see so lets hope that helps...
1286	5675934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675934	sipa	AutoNAK: lfnet only supports nicknames up to 16 characters
1285	5675520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675520	laanwj	ACK
1285	5675901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675901	Diapolo	ACK
1284	5676443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5676443	sipa	ACK. I agree that this is a good time for aligning all that help info.
1284	5677405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5677405	laanwj	Ok, aligned the messages.
1283	5675142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675142	Diapolo	Perhaps its the time to discontinue support for such an old Qt version? Or at least set a date after which support is taken out? Of course ACK!
1283	5675238	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675238	laanwj	We should drop support once it becomes a large burden. Currently we dont require significant work-arounds to support the old Qts, so its not a big issue.
1283	5676317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5676317	Diapolo	Alright, perhaps its worth to mention in a source comment this is a Qt 4.6.2 work-around.
1283	5678867	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678867	laanwj	Perhaps, though this only makes the condition in which the if() may be entered more explicit. Theres no reason to change this back when dropping support for Qt 4.6.2, which would be the definition of a workaround (such as the #ifdefs).
1283	5679019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5679019	Diapolo	ACK, get it in.
1282	5674629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674629	laanwj	Good idea. Its bad form to put different stuffs into one database table.
1282	5675101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675101	sipa	Not sure whether an entirely separate file is better, or just a separate database within the same file (which bdb also supports). Youd need to implement cross-db transaction in the glue layer anyway before this is safe.
1282	5682860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5682860	jgarzik	Rebased on top of #1293 (BDB environment encapsulation)
1282	5683089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5683089	jgarzik	Updated to do cross-db transactions.
1282	5683163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5683163	Diapolo	This includes #1293 now?
1282	5683341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5683341	jgarzik	Yes, see comment above.
1282	5695558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5695558	jgarzik	DEPENDENCY UPDATE: #1295, #1300, and #1293, in that order
1282	5697443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697443	jgarzik	Closing -- about to reopen a similar but revised pull req.
1281	5674763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674763	laanwj	Hmm.. on one hand, I agree that it doesnt strictly need to be a function, on the other hand, I dont really like exported free-for-all global state as you cannot enforce read-only. Its almost a necessity to have getters/setters in C++ for this reason. I dont buy "CPU efficient" here. DataDir is used sparsely with I/O, not with intensive computation. The decision should completely be based on "what results in readable and maintainable code".
1281	5675143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675143	sipa	In all but the first call, it doesnt even need a mutex - it just returns the value cached in pathCached[].
1281	5675164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675164	Diapolo	Wouldnt it be nicer to simply make the GetDataDir() function use a static constant but non global variable? I dont really like the solution this pull offers.
1281	5678430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678430	jgarzik	Youre right. Thats a bug... I meant to use the net-specific path.
1281	5699500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5699500	jgarzik	closing due to disinterest
1277	5672459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672459	sipa	If you change the description on -blocknet= in the help output, you should also make sure these work (i.e. make ParseNetwork in netbase.cpp case-insensitive; i agree it should be).
1277	5672649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672649	Diapolo	Updated!
1277	5672795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672795	sipa	ACK
1272	5672248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672248	Diapolo	All IPv6 fixes should get in ASAP, if they compile fine and are working, so we have the chance to do a big IPv6 test during the RC phase.
1271	5669129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669129	sipa	git fetch upstream; git rebase -i upstream/master; (in the opened editor, move the line of the fixup commit up to below the gitognore commit, and change the pick to fixup, then save, and force-push the resulting branch)
1271	5669250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669250	sipa	with force-push i mean: git push -f origin <branchname>
1271	5669315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669315	rebroad	thankyou.. now 1 commit.
1271	5673791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5673791	jgarzik	1) Thread safety of nAskedForBlocks ? Accessed in both ProcessMessage() and CNode::CloseSocketDisconnect() 2) fAskedForBlocks should be set to false, if found to be true in CNode::CloseSocketDisconnect()
1271	5679587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5679587	rebroad	1) accessed in both, yes. thread safety - not needed from what I can tell, but please feel free to explain why you think it is. 2) No. Once asked for blocks, its true. It never becomes false, since the past cannot be changed. Any new CNode, its set to false on creation.
1271	5679677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5679677	sipa	1) you modify the value from two threads (message handler thread and socket handler thread) 2) Changing it to false when decrementing nAskedForBlocks would make it obvious that it cannot be decremented twice (even though that probably is already the case)
1271	5681367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5681367	gmaxwell	Of course, this only helps if the peer is actually disconnected. If he just becomes slow/unresponsive, or he simply doesnt have the chain past a certain point ... well still be waiting. Its a small enough change that I guess it makes sense for now, though at some point I think we need to move to something like this:
1271	5697185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697185	rebroad	theres certainly room for improvement, but this is a small (intentionally, to increase the change of it bring pulled) step towards making it get the blocks more quickly. This particular change has been tested in my fork for over a month, but Ive also got other code that checks for stuck downloads (which then timeouts the askfor and asks elsewhere). Currently its not ideal in that it often causes the same blocks to be downloaded from several nodes (as sometimes they do wake up again), so isnt as bandwidth efficient as Id like it to be, and it also has various timeouts hardcoded, which is based on my internet connection. My eventual plan is to a patch that will determine the speed of the network and peers over time, and factor that knowledge into the block download process. I see what youre saying. it does get modified from those two places. It seems to work though. Are you saying it could end up being two different values within the two different threads? Ive never noticed this happen during over a month of testing so far. I could move the nAskedForBlocks++ code from ProcessMessages() into the socket handler thread. It probably belongs there more than ProcessMessages() now anyway, since its not part of the strCommend == "version" code any longer. I was going to do this as a later pull, since as it is it works, and is less of a change to keep it in ProcessMessages(), and move it elsewhere later.
1271	6303647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6303647	TheBlueMatt	Note that though I think this pull is good and should be added to specifically fix #1234, it appears that the motivation for this patch is to fix an issue where some ISPs (specifically are closing connections without RSTing them after a certain amount of time and I would kinda like to see a specific fix for that to fix the underlying issue here instead of just working around it.
1271	7692317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7692317	TheBlueMatt	For some reason really old pulls dont show up in githubs API (the total pull count returned seems to be limited, but its not mentioned in the API Docs...), so pull tester wont test this or any old pulls (maybe it will if the total pull count decreases?). If anyone needs this, or any older pull explicitly tested, I can run it manually.
1271	7718990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7718990	BitcoinPullTester	Automatic sanity-testing: PASSED, see for binaries and test log.
1271	8378806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8378806	BitcoinPullTester	Automatic sanity-testing: FAILED BUILD/TEST, see for binaries and test log. This could happen for one of several reasons: 1. It chanages paths in makefile.linux-mingw or otherwise changes build scripts in a way that made them incompatible with the automated testing scripts 2. It does not build on either Linux i386 or Win32 (via MinGW cross compile) 3. The test suite fails on either Linux i386 or Win32 4. The block test-cases failed (lookup the first bNN identifier which failed in
1271	10316613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10316613	luke-jr	This needs to be rebased.
1271	10692658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692658	luke-jr	Did you keep the branch name the same and push it to github? Looks like maybe you pushed it as "master" instead of "issue1234"
1271	10692703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10692703	rebroad	I did: git fetch upstream master git checkout issue1234 git rebase -i upstream/master git push --force origin issue 1234 The rebase didnt require any manual intervention, which I was surprised by, so Im wondering if I did something wrong before the push...
1271	10693362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10693362	luke-jr	Any errors?
1271	10693423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10693423	rebroad	none
1271	10693500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10693500	luke-jr	Is your remote actually named "upstream"? The default is "origin".
1271	10693659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/10693659	rebroad	$ git remote -v origin (fetch) origin (push) upstream (fetch) upstream (push)
1271	11582450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11582450	rebroad	rebased as requested. tested too... this patch is still helping with stale connections. reducing the time block download is delayed by 7 minutes on average (based on a wait of 10 minutes for the next block, compared with a wait of 3 minutes for a stale node to timeout).
1271	11582551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/11582551	rebroad	just to clarify. This patch has nothing to do with ISPs that RST connections. Its needed for all ISPs for where any connection goes stale and eventually (after about 3 minutes in my last tests) times out.
1271	16131666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16131666	gavinandresen	Closing this, mostly replaced by sipas "make sure you always have a peer to sync to" patch.
1270	5672259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672259	Diapolo	Nice change, ACK.
1269	5667656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5667656	gmaxwell	Awesome, it looks great except copying is kinda broken now, you can only copy the whole row (including the timestamp). E.g. getinfo and then copy the difficulty for me. Other than that I think its great.
1269	5667756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5667756	laanwj	Ive removed the timestamps from the copy output. Apart from that, theres little to do, Qt only supports copying entire cells at once at most (or you end up back with scrollbars in the cells, if widgets are placed in there).
1269	5668416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5668416	laanwj	Ok, what about this? The output is now a rich text view instead of a tableview, should be easier for copying.
1269	5668821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5668821	gmaxwell	Looks a little less clean, but its worth it for the big improvement in copy behavior. I think it should be set to a monospace font (will make the hashes and such line up).
1269	5669886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669886	laanwj	Should be better / good enough now. Explicitly scaling the icons with bilinear filtering so that they dont look ragged, and switched to a monospace font.
1269	5669935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669935	sipa	I like.
1269	5672227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672227	Diapolo	Could you post a screen after the update :)?
1268	5667150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5667150	laanwj	Though this improves it a little bit, the transaction details dialog is butt-ugly anyway. It could use some better HTML design.
1268	5671919	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5671919	Diapolo	I think we do some great work over the last time and I agree, yes it needs a further rework :).
1268	5674519	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674519	laanwj	Yes indeed, its going really fast now :) ACK BTW
1262	5662549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5662549	gmaxwell	Im kind of inclined to say that we should just remove all the timestamps in messages. It would be a lot cleaner then the conditional printfs in the patch. If timestamps are off we could occasionally write markers in the log (E.g. once an hour, and at startup and shutdown). (I would just say we should enable timestamps always but I wouldnt want to make it more attractive for people to compromise bitcoin nodes in order to track the propagation of transactions)
1262	5662706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5662706	Diapolo	If I had a wish, I would remove all additional timestamps from the source and only rely on the -logtimestamps switch, as this is way cleaner. Perhaps we can force -logtimestamps, if one enables -debug!?
1262	5663122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5663122	sipa	I dont see how moving the conditional time output out of printf makes any difference? Edit: my mistake, I misread the source changes. I assumed the double timestamps were caused by two threads trying to write to debug at once.
1262	5666450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5666450	Diapolo	sipa: I have the impression if you use -logtimestamps and add a timestamp manually like in the places I changed in the code you get something like: "05/11/12 18:10:37 05/11/12 18:10:37 sending: getdata (37 bytes)" And that was what Im trying to fix ;).
1262	5672176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672176	Diapolo	So, remove the manual timestamps? Is -timestamps default to on really a security issue?
1262	5672856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672856	gmaxwell	Since no one is protesting I think you should just go remove the manual timestamps. As far as security goes, we log too much that would be valuable to someone collecting logs already. Timestamps by default would make it worse. Ive seldom wished there were there in logs other people have given me in any case.
1262	5675209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675209	Diapolo	Rebased and updated to remove manual timestamps!
1262	5706803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5706803	gmaxwell	since no one protested
1261	5662450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5662450	Diapolo	ACK
1259	5648108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648108	laanwj	Please dont add non-model arguments to setModel calls. Sorry, but I dont think this is important enough to change the interface or introduce extra complexity at all.
1259	5648177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648177	laanwj	I also wonder why this doesnt go right by default. Shouldnt it inherit the parent window icon? Or how does this work?
1259	5648185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648185	Diapolo	LOL, this can be done just like with the about-Qt dialog ... I dont even need to pass something new ;), so you are right.
1259	5648216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648216	Diapolo	Updated to an easy fix, but I dont know, why they dont use the testnet icon as default. At lest now every GUI element uses it, while we are on testnet :). Edit: The Main-Window window icon is changed to testnet in BitcoinGUI::setClientModel(), perhaps the following dialogs still use what was default at compile-time?
1259	5648278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648278	laanwj	Yeah, I wonder where it gets the non-testnet icon from at all? If new dialogs can somehow still find it, that means it is still stored somewhere, which is not right. We need to figure this out, so all the explicit setWindowIcons can go.
1259	5648297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648297	laanwj	maybe qApp->setWindowIcon ?
1259	5648422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648422	Diapolo	Can qApp be freely used in bitcoingui.cpp? Ill try this.
1259	5648473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648473	Diapolo	Alright this fixes it! Will update this pull.
1259	5648528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648528	Diapolo	Updated!
1259	5648635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648635	laanwj	You still need to set the window icon of the current window as well... It will only change the default for new dialogs/windows.
1259	5648712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648712	Diapolo	That is strange, as this works like it should. If I use normal net, the icon is correct on every dialog, the same for testnet. As we call setClientModel() on Init, the icon set should be a global one, what am I understanding wrong here?
1259	5649138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649138	laanwj	Ok, maybe this just works then.
1259	5650429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650429	laanwj	On Ubuntu, this causes no dock icon to be shown at all anymore (either in testnet or normal net). You do need to set the setWindowIcon on the BitcoinGUI instance as well, in both places where you set it in qApp. The qApp icon is only applied automatically to windows constructed *after* it is set. The BitcoinGUI instance already exists at that time.
1259	5650458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650458	Diapolo	So just re-add setWindowIcon(QIcon(":icons/bitcoin")); below the qApp-> lines?
1259	5650464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650464	laanwj	Yes
1259	5650551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650551	Diapolo	Done and this work on Ubuntu now, too so that you have testnet-symbol on every dialog while on testnet?
1259	5650628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650628	laanwj	Yep it works great with this. However, ubuntu doesnt show a symbol for every window, just for the application, so I cant check the second part. I assume it is OK though everywhere now.
1258	5647933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647933	sipa	The number reported by peers is actually the highest block height they have available, and this can in fact be 0 (the genesis block has number 0).
1258	5647984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647984	sipa	That said, N/A is probably better UI-wise.
1258	5648001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648001	Diapolo	Thats a fact I didnt know ... but it looks kind of weird to display 0. So all nodes have at least the genesis block, which should read 1 as minimum then. How is this handled in the core? Edit: It would be easy to change the N/A into 1.
1258	5648097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648097	sipa	No, the genesis block has height 0. getnumofpeers actually returns the median reported height reported peers. This can be 0 if most peers report 0. But keep this pull as it is; if the number is zero it most likely means there are no peers that reported any meaningful number at all, so N/A makes that clear.
1258	5650579	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650579	laanwj	On the testnet it will show 0 before connecting to any peers. On the normal net it defaults to the last checkpoint (so it would only go to 0 if many peers report 0). So this is mostly useful on the testnet.
1258	5650636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650636	Diapolo	You are free to take or discard this, as always :).
1258	5650753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650753	laanwj	Nah its fine, Ill merge it. Tho we should be careful not to introduce too many translation strings in what is effectively a debugging tool.
1258	5650829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650829	laanwj	Uhm, right, of course "N/A" is already in the translation, so that isnt even a valid point here :)
1257	5647136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647136	sipa	Looks safe, and I like squishing warnings (though I dont get this one).
1255	5642568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5642568	jgarzik	Add a comment in the code, indicating this special condition...
1255	5645815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5645815	laanwj	Hmm. Alright. ACK.
1255	5647445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647445	sipa	added
1255	5649072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649072	Diapolo	LOL the comment!
1254	5640250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5640250	jgarzik	Added a second commit, which further quietens the logging, without losing information.
1254	5641303	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5641303	sipa	ACK
1254	5643723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5643723	Diapolo	Small and good change ... btw. is our printf thread-safe? At least sometimes I get lines that show no date - time, although -logtimestamps is supplied as switch and others show it twice.
1254	5650578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650578	sipa	dont tell me we need a mutex for printf on windows...
1254	5650604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650604	Diapolo	I was just asking with nothing bad in my mind...
1252	5635085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5635085	gavinandresen	ACK
1252	5646011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5646011	laanwj	ACK on the idea. Could the "Grant" be made into a RAII primitive maybe somehow? I am reasonably convinced that this is correct, but manual acquiring and releasing makes me a bit uneasy, as there could always been some forgotten case (or might easily arise in the future). Also I wonder why boost loves spinlocking on OSX so much, and whether there is an upstream issue for this :/ Its not like semaphores are a zero-day experimental threading feature with incomplete support on operating systems.
1252	5647062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647062	sipa	Excellent idea; why didnt I think of that myself? Updated and rebased.
1252	5647112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647112	sipa	You want this backported for 0.6.2.2, or stick with the earlier version?
1252	5647155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647155	laanwj	ACK
1252	5664159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5664159	gmaxwell	(included in 1260)
1250	5629161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5629161	Diapolo	Updated: - allow translation of "default" used in language selection
1247	5618500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618500	laanwj	Nice! * "Open debug.log with the associated application". Will this work by default? What is the default associated application for .log files? * Hmm would it make sense to add this as a button (either on the information page or in an extra tab "Logging") on the debug window, instead of a first-class menu option?
1247	5618659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618659	Diapolo	.log files are opened with notepad.exe per default (if you didnt change the file association) on WinXP, Win Vista and Win7 (see: I thought about a button, too, but came up with the feeling it would be a bad thing to integrate a button for it. If users are familiar with where to find that switch, it is okay to have it, where its now IMHO. Its somehow related to the debug window, so yes perhaps add a button there AND leave the menu option.
1247	5618903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618903	laanwj	Does debug.log open cleanly in notepad? I remember opening log files with it at work, and everything being on one line. So I generally use wordpad. The problem that I have with a menu option is that you get multiple "debug XXXX" menu options. Id like to keep all debug and diagnostics stuff in one central place. It should not be too visible for end users unless they need it (at request of someone providing tech support). This is why I grouped the RPC console with the other debug window. When, later on, someone decides to write a proper log viewer, it certainly should be a tab of the debug window. If you do it this way, then "RPC console" should be separate menu option as well... which, I guess, could make sense.
1247	5622999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5622999	Diapolo	On Win7 it opens without issues, even big logfiles (which take some time) open cleanly. Well, then either we should add that "Tools" menu entry or I simply add a button to the information page of the RPC Console window. I would like to get this in to have some test time (if there are other Win-users compiling from Git), so how shall we proceed? Guess the button thing is the faster approach at first...
1247	5627772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5627772	Diapolo	What do you think?
1247	5628314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5628314	laanwj	Great!
1247	5628564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5628564	Diapolo	Updated, rabased and ready after a last check from you ;).
1247	5644809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5644809	Diapolo	Small update, I renamed the 2 open debug logfile functions to better match the current used coding styles and moved on_openDebugLogfileButton_clicked() to the private slots.
1247	5644897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5644897	laanwj	Just merged a few, seems this needs rebasing now.
1247	5645096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5645096	Diapolo	Working on fixing the merge-conflicts...
1247	5646767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5646767	Diapolo	Rebased and fixed merge-conflicts.
1246	5615558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5615558	luke-jr	This is bugged. ConnectBlock requires the block to be on the disk already :(
1246	5615710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5615710	luke-jr	In fact, this might even corrupt the blkindex.dat somehow, so if you tried it, I suggest rebuilding with -loadblock :/
1246	5618107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618107	luke-jr	OK, this seems to work now.
1246	5804142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5804142	luke-jr	Eligius has been running this from block 179513 (56 blocks found) and EclipseMC from 180573 (11 blocks), totalling 67 valid blocks with no problems found.
1246	5865621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5865621	luke-jr	Now includes tests for CreateNewBlock
1246	5953430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5953430	luke-jr	Added comments per sipas request, rebased on master, and fixed a bug in diskless BDB I found testing.
1246	5973239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5973239	luke-jr	getmemorypools caching mostly makes testing this impossible, but I did some vague performance testing by disabling it (so every call goes to CreateNewBlock): git master: 1063 transactions/sec checknewblock: 473 transactions/sec checknewblock with signature checking skipped: 782 transactions/sec IMO, even the worst-case scenario of 0.00321 seconds per transaction processed is worth the additional safety checking, especially when considering the extra caching getmemorypool and getwork both do to minimize CreateNewBlock calls.
1246	6014803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6014803	sipa	ACK (together with #1245). I really like having unit tests that test blockchains.
1246	6605462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6605462	jgarzik	ACK
1246	6605636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6605636	sipa	Can you rebase #1245 and this? Id like to merge.
1246	6606213	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6606213	luke-jr	Rebased. #1245 did not need rebasing.
1246	6938022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6938022	gavinandresen	Does not compile 32 bit: test/miner_tests.cpp:89: error: integer constant is too large for long type test/miner_tests.cpp:109: error: integer constant is too large for long type test/miner_tests.cpp:131: error: integer constant is too large for long type test/miner_tests.cpp:139: error: integer constant is too large for long type test/miner_tests.cpp:161: error: integer constant is too large for long type test/miner_tests.cpp:178: error: integer constant is too large for long type
1246	6940406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6940406	luke-jr	Explicitly made the literals long long. Apparently "long long" was not a standard type until C++11, and compilers implementing it as an extension did not support mere numeric literals bigger than long (the C++11 standard requires these literals be handled properly). GCC 4.5 works with both ways. In any case, being explicit doesnt seem like it hurts, so Ive added that. Let me know if it still doesnt work.
1245	5804141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5804141	luke-jr	Eligius has been running this from block 179513 (56 blocks found) and EclipseMC from 180573 (11 blocks), totalling 67 valid blocks with no problems found.
1245	6605225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6605225	gavinandresen	ACK
1243	5602947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5602947	gmaxwell	Works for me.
1240	5600226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5600226	luke-jr	So far, I have done some minimal testing by analyzing the output of getmemorypool.
1240	5625146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5625146	luke-jr	Eligius has found 2 valid blocks (and none invalid) with this code (plus #1246, for safety) so far, at its default settings. I am now testing with a huge weigh toward transaction fees, to increase the likelihood of dependent transactions paying for their parents (and therefore risking any potential child-before-parent problems).
1240	5627356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5627356	luke-jr	Things I need to address: 1. False "may be used uninitialized" warnings * Config option names differ between actual code and -help * Second-pass priorities should be printed with -printpriority * Fee influence should be multiplied by total input value (input please: is this a good idea? should the total input be reduced by the fee amount first?) * -printpriority shouldnt require fDebug (is this ok?)
1240	5658723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5658723	luke-jr	FWIW, 10 total valid blocks found with this (most recent is 30E6C09A4FF45348A0EF0AA1A), zero issues caught by #1246, and zero invalid blocks logged by bitcoind.
1240	5664224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5664224	luke-jr	Integrated my 5 "things to address".
1240	5804139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5804139	luke-jr	Eligius has been running this from block 179513 (56 blocks found) and EclipseMC from 180573 (11 blocks), totalling 67 valid blocks with no problems found. (EMC: 180788(1040); Eligius: 9DA7D49DC2539F9D299AF8E5A)
1240	5865737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5865737	luke-jr	Also passes the unit tests I just wrote on #1246.
1240	6007858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6007858	luke-jr	This seems to be be excessively slow, and possibly exploitable right now.
1240	6014397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6014397	sipa	Define "this" ?
1240	6015704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6015704	luke-jr	This pull request. Eligius is getting stuck in some huge dependency trees, it seems. Trying to figure it out, but dont have time just this second.
1240	6281103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281103	luke-jr	Fixed the major performance hit from complex dependency trees. Still not as fast as the old algorithm, but not absurdly slow either. Id say the ability to pay for "parent" transactions is worth it.
1240	6281116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281116	luke-jr	(Fix verified by about 10 days of testing on Eligius)
1240	6332093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6332093	sipa	I certainly agree to the idea of this patch. I havent checked the source yet though.
1240	6413992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6413992	gavinandresen	Need to be very careful not to accidentally introduce a potential DoS attack by arranging transactions that require N^2 time or space to figure out fees/priority.
1240	6414164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6414164	luke-jr	I think SatoshiDice tested that for me (the fix from ~16 days ago)
1240	6951577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6951577	gavinandresen	Could you write up a gist that explains what formula for priority youre using? And maybe talk about how it will handle transactions from old clients (who calculate priority the old way) ?
1240	6952446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6952446	luke-jr	- DepthWeight = user configurable (default: 1.0) - FeeWeight = user configurable (default: 1.0) - DepthScore = sum(sum(value * depth) for each input) - FeeScore = sum(value for each input) * fee - WeighedScore = (DepthScore * DepthWeight) + (FeeScore * FeeWeight) - EffectiveSize = datasize + sum(datasize for each (transaction this depends on that is not yet in a block)) - Priority = WeighedScore / EffectiveSize Old clients dont take priority into consideration at all right now AFAIK, nor does this code (or the code its replacing) completely exclude transactions based on their priority.
1240	6966899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6966899	gavinandresen	NACK, the priority formula would make it easy for somebody with (say) 100,000 BTC to pay tiny fees and get priority over higher-fee-paying transactions. Thats a bad incentive, it would encourage people to do dangerous things like keep more funds in their hot wallet or add extra inputs to their transactions (and just have bigger change outputs) to get higher priority.
1240	6966967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6966967	luke-jr	So, should I take the input value out of FeeScore?
1240	7430874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430874	jgarzik	Sadly, in addition to being NAKd this conflicts heavily with s work redoing CreateNewBlock() You should work with to coordinate changes in that area, before posting another pull request relating to CreateNewBlock() + TX selection/fees.
1238	5599010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5599010	Diapolo	I added this to allow showing the Debug window without the need to have the client window open.
1238	5623084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5623084	Diapolo	If you dont want to be the console that public just comment. I still like that :).
1238	5644820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5644820	laanwj	Well yeah I guess its ok for "experimental software" :-) And yes some icon for the debug window would be nice, but Im not really a drawing talent either, and finding suitably licensed stock icons is very hard (most is CC, Freeware or LGPL).
1237	5598950	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5598950	Diapolo	I re-added the "-Wno-invalid-offsetof -Wno-sign-compare" switches to my local build environment, as it showed me ~150 sign/offset warnings. Am I the only one who observed this?
1237	5600051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5600051	gmaxwell	Yes. :) (are you actually current with master? What GCC version? With 4.7.0 were clean for me (save a complaint about ignoring a fwrite return value)
1237	5600310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5600310	Diapolo	Using current master with own mods Im testing, but the Warnings arr all over the place. Using Qt Creator, which is bundled with MinGW - gcc version 4.4.0 (GCC). I have to say I dont compile bitcoind.exe, but Bitcoin-Qt.exe.
1237	5600455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5600455	sipa	I believe the windows version still causes many warnings in the boost compile.
1235	5604759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5604759	burger2	Nice work guys!
1235	5605327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5605327	Diapolo	Its not yet fetched by Transifex, hope this happens over the next hours and then the translators can start their work :).
1235	5618799	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618799	Diapolo	Its still not available on Transifex. Can you check whats wrong here or tell me how I / we can force Transifex to fetch the new master file?
1235	5618939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5618939	laanwj	Is transifex supposed to fetch it, or do you need to push it with a script?
1235	5621810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5621810	Diapolo	It showed up a few minutes ago ... dont know if tcatm did something or if the fetch interval is that long.
1235	5622320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5622320	tcatm	I think they only fetch about once per day.
1233	5616222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5616222	TheBlueMatt	For the record, cblockstores download times from local nodes comes in reliably under master, but only by a very tiny margin. This, on the other hand, comes in around 20% lower on tmpfs chain sync.
1233	5668865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5668865	rebroad	can this pull request be done in such a way that there isnt so much of a diff output? Did so much code need to move from main.cpp to protocol.cpp, for example?
1233	5669958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669958	TheBlueMatt	Note that this pull is based on #771, which has radically different design goals. This pull is fairly small on its own. Re: the move from main -> protocol. One of the primary design goals of #771 is to remove the number of globals we export from main, especially the block index/chain storage stuff. As a part of this, the net code in main.cpp really no longer belongs there, and was moved to protocol.cpp.
1233	5674672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674672	laanwj	I think those are very sensible design goals. That said, in that case we should definitely pull #771 first, to prevent unrelated changes being merged into one pull request. Github seems to almost lock up when I try to view the diff.
1233	5697411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697411	rebroad	Ah, ok. Well, Id certainly find the diffs easier to view if they were kept small. Probably would be better therefore to base this commit from a post-#771 commit then, in order not to effectively include that commit in its entirety within this commit, then it can be reviewed without having to manually save the files and manually diff them.
1233	5697644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697644	TheBlueMatt	Github always shows total diffs from master, so the only reasonable way to do it is to just base on #711, pulling in its huge diff...however, you can always compare the commit list to #711 and view the diffs of individual commits.
1233	5697689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697689	rebroad	do you mean within github? Im not sure how to do that. Could you provide a URL, perhaps?
1233	5697960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5697960	TheBlueMatt	You have to manually compare the list of commits, and then you can just open each commit from the commits list in the pull...if you feel like doing some URL hacking, you will notice git style ...s in diff URLs which you can replace manually using any branch like:
1233	6165915	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6165915	TheBlueMatt	Rebased onto #1429
1233	6789417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6789417	TheBlueMatt	This needs rebasing, and Im not going to keep rebasing this stuff without any interest in eventually merging. If it ever gets interest, I may reopen.
1230	5591299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5591299	jgarzik	nUBucket and GetNewBucket() should be unsigned, not casted. The rest looks ACK-able.
1230	5591340	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5591340	sipa	In some places, the bucket identifier -1 outside the normal valid range is used to denote an illegal value , so they are ints. Another possibility would be making them unsigned, and use the value (unsigned int)-1 to denote illegal values. The first option required less code change, and it doesnt really matter; there are only 64 and 256 buckets.
1230	5591510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5591510	jgarzik	ACK
1230	5597443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5597443	gmaxwell	Considering that we dont even work on big endian, the implementation definedness of (unsigned int)-1 shouldnt bother me that much. But it does. In all other contexts casting a negative value to an unsigned type, which may not be so obviously unsigned if its a typedef, is almost certainly a bug. Id much rather we were doing something else... but not reason to delay this pull.
1225	5586442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586442	laanwj	sub-optimal? just call it incorrect :) `(hSocketMax > (SOCKET) -1)` is impossible to trigger.
1225	5586488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586488	jgarzik	It still needs the (SOCKET) cast to be portable to all platforms without warnings, I think
1225	5586536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586536	laanwj	Yes, it still needs the (SOCKET) cast, otherwise youll be comparing a signed against an unsigned value.
1225	5586623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586623	Diapolo	:-P All good ends well?
1225	5593901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5593901	laanwj	If you dont like the magic value make it compare against INVALID_SOCKET. After all, it is a socket number. SOCKET_ERROR is a *signed* error value and is meant for comparing against wsaGetError() output. You wanted to compare against both INVALID_SOCKET and SOCKET_ERROR which is the part I disagreed with.
1225	5594131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5594131	Diapolo	Updated and rebased!
1225	5594451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5594451	laanwj	ACK
1220	5560084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5560084	sipa	ACK. The panels do look quite empty now, though. Time to add some extra...
1220	5586483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586483	laanwj	Heres a start, Ive added an option to change the language.
1216	5546764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5546764	laanwj	ACK
1216	5549097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5549097	gmaxwell	These instructions simply instruct people to get their bitcoin from your site, which is currently distributing an out of date bitcoin along with a copy of openssl which doesnt have the latest vulnerability fixes. So I think this is a NAK at the moment. Id rather package the spec file in Bitcoin, though Im not sure what to do about the OpenSSL. I understand that redhat is considering no longer excluding the ECC stuff.
1216	5549328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5549328	olea	On Mon, May 7, 2012 at 2:42 PM, Gregory Maxwell < reply@reply.github.com > wrote: > These instructions simply instruct people to get their bitcoin from your > site, which is currently distributing an out of date bitcoin along with a > copy of openssl which doesnt have the latest vulnerability fixes. > Its still useful for advanced users for rebuild it with updates at their own. > Id rather package the spec file in Bitcoin, That would be nice: > though Im not sure what to do about the OpenSSL. I understand that redhat > is considering no longer excluding the ECC stuff. Ill be really happy to discard the openssl compilation, but at least at Fedora 16 its necessary. -- Ismael Olea
1216	5550171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5550171	jgarzik	openssl recompilation is necessary yes, but gmaxwells points about outdated bitcoin and openssl versions still stand.
1216	5563131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5563131	olea	Ok, Ive updated to 0.6.1 and last openssl: Nice to see bitcoin rebuilds easily between versions. So, what is your prefered way to link/point/describe to the Fedora building? As I said Im open to contrib the spec file too.
1216	5585138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585138	jgarzik	I think the preferred form is probably 1) specfile patch for openssl 2) specfile for bitcoin ...plus any requirements those specfiles need, outside of the distribution tarballs themselves.
1216	5585599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585599	olea	On Tue, May 8, 2012 at 10:16 PM, Jeff Garzik < reply@reply.github.com > wrote: > I think the preferred form is probably > > 1) specfile patch for openssl > 2) specfile for bitcoin > I dont see why to split both. the reason for for including openssl is just the platform one removes Bitcoins needed feature, openssl is not distributed as binary since its statically linked (correct my if Im wrong) with this assumption would be unnecessary to install a pristine openssl rpm, only useful for building plus creating conflicts with the OS platform. this approximation is the most straightforward for me as maintainer, for advanced users who want to rebuild package by themselves and for the enduser. -- Ismael Olea
1216	5585754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585754	jgarzik	Two specfiles, for two separate packages. already does this for openssl, in fact:
1216	5586602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586602	gmaxwell	Openssl shouldnt be statically linked except for our special binary builds.
1216	5622638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5622638	olea	On Tue, May 8, 2012 at 11:12 PM, Gregory Maxwell < reply@reply.github.com > wrote: > Openssl shouldnt be statically linked except for our special binary > builds. Hum. Then all my work is fruitless. Sorry folks. -- Ismael Olea
1215	5545980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5545980	Diapolo	Could you add a Sign message button to the address book tab after the QR Code button to be in line with send coins and because you added it to the context menu? Im asking myself if it is allowed to use a non owned address to sign a message in general?
1215	5546153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5546153	laanwj	Yeah I noticed that inconsistency too, however it is not a good idea any more buttons. Well add future actions only to the context menu. See it like this: The context menu has the authoritative list of actions, the buttons are just there to shortcut a few common ones. There are already various issues about the button row being to wide especially in verbose languages (#1062 is one of them). It would be possible to show only icons for the buttons, but that needs a new pull request. No more cosmetic changes in this one :) And right, you cannot use a non-owned address to sign a message. Thatd be kind of contrary to the idea of signing.
1215	5546743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5546743	laanwj	Fixed
1211	5537107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537107	luke-jr	How about using a proper ellipsis character ("") while youre changing this?
1211	5537903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537903	gmaxwell	Putting utf-8 directly in the source is probably not a grand idea. I assume you can use an entity? e.g. & hellip;
1211	5538120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5538120	laanwj	Unicode escapes such as `\u20AC` work in gcc, but Im not sure it works in MSVC compilers. Im not sure whether XML entities work, but Im afraid not. Qt recommends manually appending QChar(xxx), but this will of course mess with translations as it cannot be in the Tr. Its unfortunate that non Latin-1 in source code is an impossibility even in 2012 :/
1211	5538574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5538574	luke-jr	Can we use C++11?
1211	5538859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5538859	laanwj	Im sure this is not important enough to switch to a newer C++ standard. If this worries you I think the easiest way is to just use "..." in the source code, then in the English translation translate it as "" (translator obviously has no problem with unicode). Then again... my font doesnt even show a difference between both...
1211	5539903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5539903	Diapolo	Do I get an ACK for the idea and current places in the code, if yes I will start looking into usage of perhaps & hellip ;. If that does not work we should simply continue with "..." (3 points").
1211	5540182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540182	Diapolo	It is possible to use QString::fromUtf8("\u2026") in the code. Shall I use this?
1211	5540506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540506	Diapolo	See my last commit, if this gets your OK, I will introduce the use of ELLIPSIS where its used in strings in the code. And rework that pull.
1211	5540766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540766	laanwj	I dont think you should \u2026 unless you verified it with the MSVC compiler (which, AFAIK, doesnt support UTF-8 escapes as Ive said above). Which means you will end up with the equivalent `\xe2\x80\xa6`. Also, you should at least use trUtf8 so that you can use it in translated messages.
1211	5540838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540838	Diapolo	I cant verify it for MSVC, I can only try to investigate this via a web search :-/. Would it be possible to use a #ifdef for MSVC? trUtf8 is not used, because I wanted to keep ELLIPSIS out of translations, so it wont ever show up on Transifex.
1211	5540853	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540853	laanwj	Id certainly keep all messages in their entirely in translations. If thats not possible, dont bother with this.
1211	5540879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540879	Diapolo	So it would be best to simply keep "..."! Do you agree to the other changes (no "..." on buttons, but in menus)? If yes I will revert the last ELLIPSIS commit and this is finished.
1211	5540899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540899	laanwj	Yes, its fine then.
1211	5540940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540940	Diapolo	Reverted and finished!
1211	5586027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586027	Diapolo	Rebased, no code changes!
1211	5594094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5594094	Diapolo	Revert -> "Range" is now "Range..." again.
1208	5532946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5532946	gmaxwell	I dont think we want it showing full bars when a user only has the maximum outbound connections. Not having full bars is pretty much the only UI incentive we create for people to get their inbound connections working.
1208	5533019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533019	laanwj	nails it, the current behavior is intended. This does not "fix" anything.
1208	5533517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533517	laanwj	The idea is OK though, as its more general, in that when MAX_OUTBOUND_CONNECTIONS changes the icon will still be correct. But make sure that the "full" icon only shows when there are *more* than the maximum number of outbound connections. Alternative option would be to track the number of outgoing and incoming connections separately and show a special icon when there are incoming connections. Code comments: - Dont use a shortcut to get MAX_OUTBOUND_CONNECTIONS from the core to the UI. You should expose it on the ClientModel interface, like the other counts such as number of blocks and number of connections.
1208	5536469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5536469	randomproof	I was under the impression that this was only outbound connections. Now that I have turned off my firewall, I see that I have more than 8 connections. Maybe the tool-tip could be changed to indicate inbound and outbound connections with a hint about port forwarding if there are no inbound connections?
1208	5536856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5536856	laanwj	Yes, you could also do it the other way around and show a warning when there are no inbound connections. Many torrent clients do it that way.
1208	5537873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537873	gmaxwell	Id prefer to not bludgeon people _too much_ about inbound connections. Basically I want to encourage people to get inbound working when its easy for them to do so, but not have them worry about it if its hard... and I certainly dont want to deal with a bunch of tech support burden. zomg my inbound isnt working
1208	5537908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537908	laanwj	Right, viewed like that, its fine the way it is. Its visible but very subtle. Closing the issue.
1207	5531505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5531505	gavinandresen	ACK
1207	5532969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5532969	gmaxwell	This has survived about 10 hours of running inside valgrind here on a node that previously crashed and with some tweaks to make it more likely to crash. It also survived a new node bringup. The code looks okay to me, so Im going to go ahead and pull it in the hopes of getting more people testing it on master.
1206	5537066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537066	luke-jr	Youre changing the constant MAX_PASSPHRASE_SIZE into a literal 1024. Better to leave it as before, IMO, so MAX_PASSPHRASE_SIZE can be updated easily.
1206	5539924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5539924	Diapolo	Do you agree with luke-jr on his suggestion? What about the other changes? Im interested in a small integration of these little commits :).
1206	5540015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540015	laanwj	I agree with luke-jr here. Please dont try to fix things that are not broken :/ Constants are always better than magic values, even in the XML file. Focus on the things that this pull request fixes/improves, which is not clear to me.
1206	5540352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540352	Diapolo	Updated to do only minor changes, I think style-sheets should be avoided if there is a Qt Designer default option for that goal. And the removal of the capsLabel default text results in one string less to translate that is never used anyway and as result allows to remove a clear() in the code.
1205	5546620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5546620	Diapolo	I looked around in your changes and there is much code in, I cant really say anything to most parts ^^. Does it compile fine on Windows? This takes more time for me to check this, sorry.
1205	5546858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5546858	laanwj	It mostly needs sanity testing. The code should compile find on windows, as theres no OS specific changes. There should be no user-visible changes to behaviour (except for the small fixed problems) but this improves efficiency, prepares for multiple-wallet support and makes it easier to split the UI into a separate process at some point.
1205	5628896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5628896	Diapolo	This should help with lowering the current CPU usage of utilizing a full core, while initial block chain download is in progress, right? Is this an issue on non-Windows versions, too and have you verified this?
1205	5630298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5630298	laanwj	Well, this is not really meant as a performance fix, although it probably has that effect. AFAIK there are no pressing UI performance issues in 0.6.2. The idea is to further formalize the interface between the UI and the core. Instead of a sledgehammer "mainFrameRepaint" event, the UI gets messages such as AddressBookChanged, TransactionChanged that tell the UI directly what has changed, so it can update its internal model (and display) without further checks. This has a positive effect on performance and lock contention. Eventually I want to remove all locks and direct access in the UI to the core memory space, and handle everything through function calls. This is much safer, and from that point, it is easy(ish) to completely separate the processes by using message passing.
1205	5771366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5771366	sipa	ACK on changed to core
1205	5798628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5798628	luke-jr	test_bitcoin fails to link: ``` obj/main.o: In function `InvalidChainFound: /home/luke-jr/Projects/Education/Tonal/BitCoin/bitcoin/src/main.cpp:949: undefined reference to `uiInterface obj/main.o: In function `CBlock::AddToBlockIndex(unsigned int, unsigned int): /home/luke-jr/Projects/Education/Tonal/BitCoin/bitcoin/src/main.cpp:1650: undefined reference to `uiInterface obj/main.o: In function `CheckDiskSpace(unsigned long long): /home/luke-jr/Projects/Education/Tonal/BitCoin/bitcoin/src/main.cpp:1861: undefined reference to `uiInterface /home/luke-jr/Projects/Education/Tonal/BitCoin/bitcoin/src/main.cpp:1862: undefined reference to `uiInterface obj/main.o: In function `CAlert::ProcessAlert(): /home/luke-jr/Projects/Education/Tonal/BitCoin/bitcoin/src/main.cpp:2207: undefined reference to `uiInterface obj/main.o:/home/luke-jr/Projects/Education/Tonal/BitCoin/bitcoin/src/main.cpp:2213: more undefined references to `uiInterface follow ```
1205	5799524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5799524	luke-jr	Fix for test_bitcoin issue in 315fa37
1205	5800046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5800046	laanwj	Thanks for testing sipa and luke-jr. Ive pushed a commit that should resolve the test build and windows build issues.
1204	5545542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5545542	Diapolo	Rebased and reworked to be Qt < 4.7 compatible by using setPlaceholderText in the code instead of the ui-file.
1204	5548644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5548644	laanwj	Good! Btw, I think it is confusing that there are two slots gotoMessagePage. If you want, you can consolidate the gotoMessagePage to one slot that takes a QString argument that defaults to the empty string. Then add: if(!addr.isEmpty()) messagePage->setAddress(addr);
1204	5549354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5549354	Diapolo	I added your suggestion and consolidated gotoMessagePage() into 1 function.
1204	5625639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5625639	Diapolo	Rebased (resolves merge conflict) and added: - rename window title to "Sign Message Dialog"
1202	5525882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525882	laanwj	Could you change the "all" to "All" (as it appears that we capitalize all nouns).
1202	5525901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525901	Diapolo	Updated...
1201	5525903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525903	laanwj	textFormat is not an unused tag ! To reduce the surprise factor, always prefer an explicit text format (PlainText, RichText) to AutoText, especially when user-provided input is involved (not the case here but still...). This prevents bugs such as this:
1201	5525915	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525915	Diapolo	Well the default displayed in Qt Designer is Qt::AutoText, so Im sure this is default and needs not to be added then? Default values in the Designer are non bold and changed values / settings are bold in the right attribute pane. A I read your link ... well I guess there are more places, where there is the default of Qt:AutoText used, is that a problem then? I even think it is no problem in the about dialog, no?
1201	5525918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525918	laanwj	Check the diff. It was RichText, not AutoText. Just keep it there, its not hurting anything.
1201	5525933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525933	Diapolo	Right and as the text is in no way formatted (only line-feeds), its save to use the default I think. If that gets plainText or RichText does not matter in that place. Well I can revert, no problem, but do you really think this is an security issue here? I only changed to save us a few lines.
1201	5525950	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525950	laanwj	Please just change it back. Saving lines in the xml files is not a goal, theres just no need to change it in the first place. Being explicit (and reducing potential uncertain behavior) is a goal. If you encounter AutoText in other (potentially risky) places, feel free to change it. "its save to use the default I think" are very dangerous words in these times :)
1201	5526140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5526140	Diapolo	Convinced :), will revert ...
1201	5526157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5526157	Diapolo	Updated...
1200	5525724	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525724	Diapolo	ACK
1199	5525730	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525730	Diapolo	You could perhaps add that this only happens, when there IS a signature in.
1199	5525873	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525873	laanwj	If there is no text in the signature field this already does nothing.
1199	5525884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525884	Diapolo	ACK then!
1199	5537024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537024	luke-jr	I find this behaviour of GitHub (git URIs) to be very annoying, since it prevents me from selecting it myself (and thus putting it on the X11 selection-clipboard). But in this case, why would you click/select the signature at all? The "Copy Signature" button is right there...
1199	5537361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537361	laanwj	Because I always use Ctrl-C to copy... Seems most intuitive. I dont even look for a "Copy Signature" button.
1199	5537453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537453	luke-jr	I dont like typing Ctrl-C when I want to copy. Easier to just select. :p
1199	5537634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537634	laanwj	Well, selecting becomes really, really easy with this patch... so whats the problem? Did you select the entire field from begin to end manually before? Does it ever make sense to only select a part?
1199	5537767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537767	luke-jr	Software-initiated selections dont go on the selection-clipboard. I did select the entire field before, by triple-clicking - its not that difficult ;) Im not aware of any time it makes sense to select only part.
1199	5537937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537937	laanwj	Triple clicking! Hah, the world gets crazier every day.
1199	5611298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5611298	luke-jr	Well, unlike GitHubs thing, this seems to still work with my triple-clicking paradigm. ACK.
1199	5611353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5611353	Diapolo	I tried your tripple-clicking-thing and thats also nice, but I guess the majority likes this pull :). And if it doesnt break your work-flow even better!
1198	5525282	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525282	laanwj	Nice. Suggestion: when an error occurs while reading the address file, log it but dont escalate it. A corrupted file can easily be rebuilt, after all (and would remove one source of fatal startup errors).
1198	5526380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5526380	sipa	Id prefer addrman.{cpp,h} to be very self-contained and only have knowledge about the data structure and serialization, not how its stored and certainly not where. The reason is that this may be useful to other projects (e.g. dns seeds) that dont have the same uti.h (addrman only depends on it because of the locking primitives). Also, the IP address table is not critical, so incomplete writes in case of a crash during dumping may not be much of an issue, but it will certainly occur. I think we either want to defend against it (by making a failed read/deserialization not fatal) or by avoiding it (first writing to ipaddr.dat.new, and then atomically move it to ipaddr.dat). Or maybe both... Edit: dont get me wrong, I definitely want this!
1198	5530368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5530368	jgarzik	1) Yes, error diagnostic -- particularly for a corrupted or truncated file -- should be expanded, made more verbose. 2) Yes, the code should do something like write to temp file, then rename. I have said as much on IRC several times. Windows apparently uses ReplaceFile(), while Unix uses rename(). 3) I/O implemented inside CAddrMan was intentionally remaining consistent with CBlock::Read/Write*Disk() etc. If we wanted to change that, thats OK. Just noting the logic behind the decision.
1198	5531016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5531016	sipa	2) Or boost::filesystem::rename() ? 3) Ok, thats just a minor design issue; it can always be changed later on in several places to do it in a consistent way.
1198	5531569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5531569	jgarzik	Googling for "boost filesystem rename atomic" seems to indicate that overwrite-via-rename is explicitly forbidden in the boost code. See e.g., Would be happy to use boost if possible, but I think we will be forced to #ifdef WINDOWS { ReplaceFile() }
1198	5531658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5531658	sipa	The first answer here is helpful: Seems that in boost::filesystem v3 the behaviour is correct. The problem is that we still support v2...
1198	5537982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537982	luke-jr	First run with this pullreq included, I get "Error loading ipaddr.dat" and quit. How can I start it for the first time? :) Edit: Confirmed ipaddr.dat doesnt exist yet.
1198	5538096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5538096	laanwj	Now, thats what I meant with not escalating the error...
1198	5539860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5539860	luke-jr	Should ipaddr.dat (451 KB) be much larger than addr.dat (7.3 KB)?
1198	5544289	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5544289	jgarzik	Added fix: do not die, if ipaddr.dat is missing
1198	5665388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5665388	jgarzik	OK, ipaddr.dat is now renamed into place. All concerns have been addressed in the latest rebase. Additional comments?
1198	5669758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5669758	sipa	operator<< can fail and throw an exception if the file is not in the correct format (or theres a bug). I think youll need a try catch in/around addrman.ReadFromDisk.
1198	5674051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674051	jgarzik	Added a new commit, re-creating CAddrDB.
1198	5743658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5743658	sipa	ACK
1198	5750053	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5750053	jgarzik	Added commits: 1. rename to "peers.dat", the consensus on IRC 2. add file header, which includes a magic number (pchMessageStart) and sha256 checksum
1198	5754849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5754849	jgarzik	Rebased, and fixed one final nasty bug.
1198	5756821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5756821	jgarzik	Collapsed multiple commits into two. A couple minor cleanups.
1197	5524005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5524005	sipa	ACK
1197	5524606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5524606	gmaxwell	Can you fix (or remove) the instance of the same thing in the commented out code in walletdb.cpp?
1197	5525130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525130	laanwj	ACK
1197	5529333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5529333	gmaxwell	Pushed with tweaks in 82e6b92b0ac75ed15014e5b1723299fa838ce82e
1196	5541993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5541993	gmaxwell	Pulling to master to get some more testing on it quickly.
1193	5524991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5524991	laanwj	Updated...
1193	5525623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525623	Diapolo	ACK to the code and visual changes!
1193	5537698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5537698	Daminvar	I think it looks better with the grid lines. They should stay.
1193	5541163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5541163	luke-jr	I dont see alternating tinted rows, so without the grid lines its kindof hard to read sometimes...
1193	5541298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5541298	sipa	screenshot?
1193	5541339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5541339	luke-jr	![Example](http://luke.dashjr.org/tmp/screenshots/snapshot83.png)
1193	5542108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542108	gruez	Agreed, it does look better with gridlines, but only the vertical ones. Theres no need for horizontal gridlines because any one with decent eyes can tell the lines apart.
1193	5542122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542122	luke-jr	I think you confused vertical and horizontal...
1193	5542149	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542149	gruez	I want lines going up and down I do not want lines going left to right
1193	5542209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542209	luke-jr	Lines going left to right are needed, not up and down...
1193	5542240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542240	sipa	De gustibus et coloribus...
1193	5544141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5544141	laanwj	Too much bikeshedding. This was supposed to be a simple non-controversial commit, not a discussion topic. Im closing this, and re-submitting it without the grid change.
1189	5505050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5505050	laanwj	Can you please move the checking logic to WalletModel instead of inside SetAddressBookName? Thatd make it an UI-only change and much easier to test.
1189	5505197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5505197	Diapolo	The question is, if walletmodel.cpp is the only place, where that check makes senes or if its beneficial to all places in the source? Im fine if its only needed in walletmodel.cpp, so can you verify this?
1189	5505575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5505575	laanwj	Well, itd be nice to only change only the UI for an UI-only fix. Then again, I guess the extra check doesnt hurt (except that it complicates the code a bit).
1189	5506494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5506494	Diapolo	Updated to be a GUI-fix only, is the LOCK in parentheses correct? I get now compiler warning, just want to be sure :)
1189	5506518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5506518	laanwj	The LOCK is not correct. You need to have the lock before any access to the address book, so also while doing the check.
1189	5506791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5506791	Diapolo	Alright, the LOCK is now before any access to wallet, locking good now?
1189	5507403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5507403	laanwj	Yes, its ok now
1188	5487022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5487022	sipa	ACK
1187	5476664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5476664	sipa	ACK
1187	5481194	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5481194	Diapolo	Perhaps that is a dumb question, but is that the minimum IE version that has to be installed on the client running the BC client or is it needed for the machine, which compiles the executable? Im asking, because Im sure MS doesnt support IE 5.1 anymore and we should perhaps do the same then?
1187	5481354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5481354	laanwj	ACK Right, we dont actually use IE, but if you define _WIN32_IE to some old version you may be including some deprecated API that no longer exists on 64 bit windows. Edit: which makes me wonder, what happens if you dont define _WIN32_IE at all? or do all windows programs need it? If so, why dont we define these things (_WIN32_WINNT, _WIN32_IE) centrally in the build system instead?
1187	5482343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5482343	Diapolo	I will try to compile without and see what happens ... seems like it compiles with _WIN32_IE only and _WIN32_WINNT removed. Afaik it tells the compiler which WinAPI functions are available with the specified IE / WINNT version. In util.cpp it is needed for SHGetSpecialFolderPathA() function.
1180	5464976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5464976	gavinandresen	ACK
1180	5476481	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5476481	sipa	Survives my tests. ACK.
1180	5585219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585219	jgarzik	It is definitely a valid point that " if (hSocketMax > (SOCKET) -1)" is an imperfect test. Probably should use != etc. However, that can be addressed in a separate pull request. This pull req does not change the test itself...
1180	5585505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585505	Diapolo	Will you do that mentioned pull above or shall I do it tomorrow?
1180	5585702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585702	jgarzik	feel free to do so...
1179	5455174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5455174	laanwj	ACK
1178	5442747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5442747	Diapolo	Sure, will report back after I did the tests :).
1178	5443069	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5443069	Diapolo	Seems like a good idea to move MyGetSpecialFolderPath function from util.cpp into guiutil.cpp, too, as I currently get: guiutil.cpp:229: Fehler:MyGetSpecialFolderPath was not declared in this scope.
1178	5443223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5443223	Diapolo	It seems that shlwapi.h can be removed from util.cpp after your changes.
1178	5443224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5443224	laanwj	Thanks for the fixes. MyGetSpecialFolderPath cannot be moved as its also used in GetDefaultDataDir, which should certainly stay in the core code. On the other hand, if we can remove the fallbacks, we could simply use the windows API function SHGetSpecialFolderPathA directly in both places and get rid of MyGetSpecialFolderPath. For now, Ill simply add it to util.h.
1178	5443325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5443325	laanwj	Ok, updated.
1178	5447007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5447007	Diapolo	Now compiles fine on Windows, just see above comment for guiutil.cpp :). I will have to rebase #1134 after this gets merged, but thats fine. I consider removing MyGetSpecialFolderPath() then.
1178	5525053	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525053	laanwj	Updated to _WIN32_IE 0x0501
1178	5675345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675345	laanwj	Rebased
1176	5446165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5446165	laanwj	ACK
1175	5442016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5442016	laanwj	ACK
1174	5442416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5442416	sipa	If someone wants to test (use -connect= or -addnode=), I run a bitcoind hidden service on a57qr3ydpnyntf5k.onion:8333.
1174	5442615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5442615	gavinandresen	Cool! Can you add a doc/Tor.txt with "how to run your bitcoin node as a hidden service" info in it?
1174	5446183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5446183	laanwj	Nice!
1174	5467286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5467286	rebroad	Fantastic! thanks sipa.
1174	5467527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5467527	rebroad	Hi sipa, Id like to help test this. I could do with some help using git to apply this patch though. I was wanting to offer a bounty for git help, but I dont have post access on bitcoinforum..., and constantly using meld is becoming a bit too time consuming... :-s
1174	5476879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5476879	sipa	switch to whatever branch you want my patches to be merged with (possibly just master), and type "git pull git://github.com/sipa/bitcoin.git torhs".
1174	5485789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5485789	rebroad	Thanks. doing that now. Has -addnode code been removed from init.cpp, or am I misreading the merge conflict?
1174	5485987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5485987	sipa	Its not removed; only the code in init.cpp that added -addnode nodes to addrman was removed (the actual processing of -addnode is in ThreadOpenAddedConnections2 in net.cpp.
1174	5486711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5486711	sipa	By the way: what are you merging with, that you get a conflict?
1174	5488342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5488342	rebroad	Couple of questions. Why do I get: Cannot connect to a57qr3ydpnyntf5k.onion:8333: unsupported network whereas other onion address work? (the above onion address is the one you mentioned in this pull). Also, re:- receive version message: version 50200, blocks=178423, us=127.0.0.1:47146, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 Does this mean bitcoin exposes nodes actual IP address, despite them thinking theyre running an anonymous onion service? Also, in the above example, what does it do with the "us" address? Shouldnt it be using my .onion address instead...?
1174	5493037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5493037	sipa	That "unsupported network" error means youre trying to connect to an onion address directly (not through a proxy). Is it possible you didnt use -proxy? That received version message means that you connected to siqdznszjf4e6v5j.onion:8333, and thereby reached a peer who thinks you are 127.0.0.1 (so it came from their Tor proxy), and believes he has address 106.187.36.183. Which version was the peer running? Recent versions shouldnt announce 127.0.0.1 as their own address, and if the other node also ran this torhs branch, if it was running using -externalip=....onion, it should report its onion address instead. Edit: obviously, the peer is running 0.5.2 (as it reports protocol version 50200). If youd connect to a 0.6.0 or torhs node, youll see different behaviour.
1174	5499223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5499223	rebroad	receive version message: version 60000, blocks=178480, us=127.0.0.1:56334, them=24.7.178.63:8333, peer=p2hwc26zdsrqxiix.onion:8333 Seems pretty similar for a 0.6.0 too....
1174	5504531	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5504531	gmaxwell	This passes my initial testing. Its perhaps a little too easy to leak your IP when trying to run as a hidden service. E.g. if you -listen=1 without setting -externalip ... still better than what people would get if trying to run a hidden service today, but of course more support will encourage more people to do it. Also, I the fact that proxydns ran when connect was set was kind of surprising, but I guess thats really independent of this pull: connect should probably imply dnsseed=0. The effective deactivation of anti-dos for incoming onion peers is kind of unfortunate. I wonder if we could do anything about that?
1174	5509277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5509277	rebroad	can you elaborate on what anti-dos you have in mind? ah, you mean such as banning based on IP address. Well, the only way around this would be to make nodes somehow uniquely identifiable. Im not sure which would be worse, that or lack of ability to ban peers.
1174	5509543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5509543	gmaxwell	grep the source for DoS.
1174	5518896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5518896	rebroad	already did that before my post.
1174	5536037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5536037	sipa	the anti-DoS system registers IP addresses which engage in incorrect behavior, and prevents them from connecting or being connected to. In combination with Tor hidden services, you dont know the source IP, so it cannot be banned. Mental note: make sure the proxy is never banned.
1174	5655778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5655778	rebroad	Hoping this would have been pulled by now... Re IPv6 testing. What would I need to see in debug.log to confirm that this works?
1174	5794436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5794436	luke-jr	Needs rebasing.
1174	5831531	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5831531	sipa	Heres a proposal for a revamping of the relevant command line arguments: It removes the special casing of :9050 as tor port, and defines more convenient defaults for several options.
1174	5929127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5929127	sipa	Rebased on top #1389.
1174	6267518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6267518	sipa	Can I get some ACKs?
1174	6270128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6270128	Diapolo	Im not the one, who can give an ACK, but are you sure this is rebased on current master? At least ApplyProxySettings() in optionsmodel.cpp seems weird, as I know this function is already there. It would be also nice, to get a) #1433 in before this (no testing comments currently) or b) I need some infos, what needs to be done for the Tor thing to have all options in the GUI available, so I can update #1433.
1174	6301802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301802	sipa	Rebased, fixed some sign warnings, and updated a comment as asked by
1174	6398148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6398148	gavinandresen	ACK if you make the following edit to doc/Tor.txt: REPLACE: In a typical situation, this suffices to run behind a Tor proxy: WITH: These instructions assume that Tor is listening as a SOCKS proxy on port 9050; if you use the Tor Browser Bundle, then it (by default) picks a random port every time it starts. See for how to properly configure Tor. Once Tor is configured and running, this suffices to run behind a Tor proxy: ...
1174	6509846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6509846	gmaxwell	ACK.
1174	6510367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6510367	Diapolo	I would like to make this available for the GUI, can you specify / tell me what is needed?
1174	6510407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6510407	sipa	Rebased and updated documentation a bit. Ill explain over IRC if you like.
1174	6520150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6520150	gavinandresen	make test_bitcoin is giving me: test/netbase_tests.cpp:37: error: class CNetAddr has no member named IsOnionCat
1174	6520376	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6520376	sipa	Fixed - the function was renamed to IsTor().
1174	6533700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533700	Diapolo	I saw that in the source comments the option ``-notor`` is mentioned. Was this left out of the help message in init.cpp by intention?
1174	6533879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533879	sipa	Some "advanced" usages of options arent mentioned. Explaining everything and all combinations would take too much place. Most is quite straightforward though - many options can be prefixed by "no" to disable them already.
1174	6534048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6534048	Diapolo	Thanks for the info and allright then.
1173	5430895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5430895	jgarzik	ACK
1173	5432271	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5432271	sipa	ACK
1173	5434071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5434071	laanwj	ACK Loosely related comment: I see that this call (and the (Get|Set)StartOnSystemStartup functions) could be moved to the UI code initialization (qt/bitcoin.cpp) instead of clutter the core code with a QT_GUI guard.
1173	5436100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5436100	Diapolo	Thats a thing you should do, but sounds like a very good idea :).
1173	5439991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5439991	luke-jr	Erm, why make a useful comment less useful? The purpose of that code is to remove old wxBitcoin shortcut links... so the "bitcoin-wx" note is correct.
1173	5440138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5440138	Diapolo	This removes the current Shortcut (Bitcoin.lnk) and as we dont have wx anymore this is correct, no?
1172	5430888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5430888	jgarzik	ACK
1172	5432277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5432277	sipa	ACK
1172	5434369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5434369	laanwj	ACK
1171	5430877	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5430877	jgarzik	Please add the specific warning being fixed to the commit messages. "fix compiler warning" is vague, and will get even more vague over time. Code changes look OK
1171	5432296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5432296	sipa	ACK
1171	5432787	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5432787	jgarzik	Sorry, to be more specific, please redo the commits to include the warning being fixed inside the git commit itself. Need to get that useful info into the permanent git history.
1171	5436072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5436072	Diapolo	Renamed the commit-messages to be more detailed.
1171	5440299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5440299	jgarzik	ACK
1170	5424971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5424971	laanwj	Ill never understand this war on spaces. IMO this just breaks other patches for reason at all.
1170	5425248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5425248	jgarzik	It is a very minor change, yes, but it pops up again and again in pull requests for various projects. Sometimes editors automatically trim this stuff, which may generate larger patches (with changes in unexpected areas) down the road. Others will submit this stuff, as was already done in #1136, so might as well make our stuff uniform all in one go.
1170	5430469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5430469	Diapolo	Great big and never-ending ACK ;).
1170	5467480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5467480	rebroad	Well done. Does this mean Ill have more free disk space after applying this?
1170	5529556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5529556	gmaxwell	I think we should pull this in 0.7.0 after pulling most of the other outstanding 0.7.0 pulls that this would break.
1170	5534655	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5534655	Diapolo	I think this should be rebased once more (if needed) and then get merged. Why should this even break pulls, it removes not a single line only spaces?
1170	5535796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5535796	jgarzik	It is scripted, thus may be regenerated from scratch at any time.
1170	5535985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5535985	sipa	ACK for applying at the end of 0.7.0s merge window.
1170	6607555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607555	jgarzik	Closing. Will run script to do this immediately prior to 0.7rc1 release...
1170	6607732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607732	Diapolo	I hope so ^^.
1166	5436200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5436200	Diapolo	Updated to reflect laanwjs suggestion. After an ACK I will merge both commits.
1166	5481518	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5481518	laanwj	ACK
1166	5482319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5482319	Diapolo	Rebased to be a single commit, no further code-changes.
1160	5449255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5449255	jgarzik	NAK for "Grammer", ACK for "fixed non-sensical error message"
1160	5450320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5450320	petertodd	Sure, Ill delete "grammer" if thats the consensus.
1160	5451737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5451737	sipa	Not sure whether its intentional or not, but its called "grammar" in English.
1160	5452074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5452074	petertodd	I need to follow this up for the pull request "Me and my buddies fixed them spelling."
1160	5486865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5486865	Diapolo	NACK, as he included an already merged commit.
1160	5486926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5486926	sipa	Oh, thanks for noticing.
1160	5490156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5490156	Diapolo	You have to rebase to current master, so that only your commit goes into this pull-req. e.g. rebase origin upstream
1160	5504159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5504159	petertodd	Thanks. I think I fixed it. Sorry, this is the first time Ive used github pull requests before.
1160	5504193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5504193	Diapolo	Looks good now :) and I had a hard time learning Git, too ... dont worry.
1159	5398671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5398671	luke-jr	During normal 24/7 operation, the first-seen time is still used, right?
1159	5400170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5400170	sipa	the behaviour with this patch would be: transactions first seen in a "tx" message or self-generated get clock time, transactions first seen in a block or found by rescanning: block time.
1159	5400361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5400361	luke-jr	Its problematic if transactions can be "timed" older than the most recent wallet transaction, or in the future. Doing so would make "listtransactions" out of order (or worse, reordered).
1159	5400640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5400640	gmaxwell	In general I prefer this behavior to the current one... though txn appearing out of order in the transaction history is unfortunate. ... but traditional banking sites do that all the time and people seem to survive.
1159	5400987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5400987	luke-jr	Id mind less if they actually appeared out of order, but Im pretty sure theyre sorted by time, so theyll reorder. :/ I care less, if listtransactions shows all 3 times (seen, block, and "best guess") and sorts by seen time...
1159	5403693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5403693	laanwj	I think its fine for the JSON call to show all the different times, as people may need them for different purposes. On the other hand, change is great for the GUI.
1159	5593060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5593060	randomproof	Why not do it this way, without changing function args list: ``` diff --git a/src/wallet.cpp b/src/wallet.cpp index 9989098..defab00 100644 --- a/src/wallet.cpp +++ b/src/wallet.cpp -322,7 +322,7 bool CWallet::AddToWallet(const CWalletTx& wtxIn) CWalletTx& wtx = (*ret.first).second; wtx.BindWallet(this); bool fInsertedNew = ret.second; - if (fInsertedNew) + if (fInsertedNew && wtx.nTimeReceived == 0) wtx.nTimeReceived = GetAdjustedTime(); bool fUpdated = false; -397,6 +397,7 bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl if (fExisted || IsMine(tx) || IsFromMe(tx)) { CWalletTx wtx(this,tx); + wtx.nTimeReceived = pblock->GetBlockTime(); // Get merkle branch if transaction was found in a block if (pblock) wtx.SetMerkleBranch(pblock); ```
1159	5778948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5778948	gmaxwell	Can we get some more discussion here? Agreement on this would be nice.
1159	5779005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779005	luke-jr	[We discussed this a bit back in December.](https://bitcointalk.org/?topic=54527) I think having all 3 times (received, block, and "smart") in JSON-RPC and just the smart times in Bitcoin-Qt is the best solution. ``` "time": smart timestamp, "receivetime": timestamp, "blocktime": timestamp, ```
1159	5779741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5779741	gmaxwell	Thats sounds good to me perhaps a later commit can make a tooltip show the three times in the gui? I assume that recievetime would be a sent time for txn you sent (being that you received them the same instant)?
1159	5780101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5780101	luke-jr	Yes, the smart time would also logically be the sent time as well.
1159	5780642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5780642	laanwj	Right, we can put all the times in the "transaction details" window.
1159	7430829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430829	jgarzik	Im officially -ENOCARE. Code appears correct to my minimal scan. ? based on your comments, it sounds like you ACK this code?
1159	7431161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7431161	gavinandresen	ACK. Looks obviously better than the current behavior.
1159	7431234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7431234	luke-jr	This is NACK since it breaks listtransactions. #1393
1159	7431300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7431300	sipa	Im very unsure myself whether I want this merged. Lukes version is more complex but probably behaves as expected in more use cases. Im not sure either should be merged without some testing...
1159	7982535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7982535	gmaxwell	(Obsoleted by Lukes version.)
1150	5357416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5357416	jgarzik	ACK. Thought this was already done; guess I thought wrong.
1150	5359432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5359432	sipa	ACK
1150	5533652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533652	TheBlueMatt	For the record in case anyone comes upon this again, this was a wxWidgets flag afaict.
1146	5341290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5341290	sipa	ACK
1142	5424501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5424501	jgarzik	Closing, due to comments
1141	5314485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5314485	sipa	I added a -seednode= option, which causes a short-lived connection to the specified address (which may be a name, and can be passed directly to the proxy, without leaking DNS information) until some peer addresses are returned, and disconnects. This mechanism is used implicitly instead of DNS seeding when -proxydns is enabled. The functionality itself doesnt really fit in this pull request, so I can split it off if requested, but it depends on earlier commits here.
1141	5397058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5397058	rebroad	Is it possible to specify different proxies for different address types, and possibly to even round-robin proxies/non-proxies for certain address types? e.g. for .onion addresses, always use 127.0.0.1:9050, for .i2p, always use 127.0.0.1:4444, and for ipv4 and ipv6 round-robin between 127.0.0.1:9050 and no-proxy. Ive patched by bitcoin to introduce a -proxytoo option, which allows me to 50% randomly use the proxy for each new connection. This is due to sometimes tor working better than noproxy, and other times noproxy working better than tor.
1141	5397116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5397116	sipa	That shouldnt be too hard.
1140	5287822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5287822	jgarzik	RE 1) Updated and rebased, to fix LimitOrphanTxSize() issue. 2) RE "Test ScriptSigArgsExpected() for error" -- I agree ScriptSigArgsExpected() may not return <0 given current conditions, but there are two advantages to the new code, a) the code is less fragile, in case those conditions change in the future. checking for an error that a function is pretty harmless, and trivial in terms of CPU cycles. b) the compilers optimizer is guaranteed a non-negative value, enabling certain value-range optimizations.
1140	5287970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5287970	gavinandresen	ACK.
1139	5268641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268641	luke-jr	ACK on the tooltip fix, but the button text is fine as-is IMO.
1139	5268894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268894	laanwj	Wouldnt it make the button very wide? Too much text on buttons is not good, better to convey the function by context instead.
1139	5269257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5269257	Diapolo	Now only updates the tooltip, which is the correct solution!
1139	5269309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5269309	luke-jr	ACK
1139	5288491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5288491	sipa	ACK
1136	5268587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268587	Diapolo	Reverted to while (1) instead of loop, but as laanwj said the use of loop should perhaps be deprecated, or loop should be removed (not with this pull request).
1136	5268637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268637	sipa	Most changes look like minor code style changes, or personal preferences ("char* x" vs "char *x", for example). Not sure thats worth the trouble of possibly conflicting with other changes.
1136	5268679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268679	laanwj	Well the changes to net.cpp and serialize.h, and the comment update in init.cpp make sense. Removing/adding spaces on the other hand (especially at the end of the line), meh...
1136	5268765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268765	jgarzik	agreed
1136	5269299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5269299	Diapolo	I saw you guys removing left-over spaces, too ... so whats wrong with beeing thorough?
1136	5269329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5269329	luke-jr	Removing spaces when youre modifying the line already is fine... removing it with no other changes, on the other hand...
1136	5269403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5269403	Diapolo	It isnt even worth the discussion, Im not searching for those parts in the code, but while merging commits I see those things with BeyondCompare. The need not to be in and so it should be simply okay to change this whithout any discussion. I wont remove any line-breaks and reverted that!
1136	5406779	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5406779	Diapolo	Will this get merged or shall I chery-pick the 3 changes and we leave unused spaces all over the code ;)?
1136	5424916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5424916	jgarzik	Basically this is a whole bunch of unrelated changes, lumped into a single commit. Even if were talking about two one-line changes, consider putting such changes each in a separate commit *if they are logically unrelated*. In particular, trim trailing whitespace should never be mixed in with other changes. I created a separate pull request doing the trimming, see #1170. Closing, but you are welcome to resubmit split-up code changes.
1136	5430485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5430485	Diapolo	Im fine with splitting this up into several pull-requests, if that is the wished procedure :).
1136	5434516	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5434516	laanwj	Mind that is talking about multiple commits, not necessarily multiple pull requests. Multiple pull requests are good for completely unrelated things, but dont feel obligated to make a separate pull request for each warning message, for example.
1136	5436219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5436219	Diapolo	Thanks for clarifiying even further, I dont feel disabused, but it helps me with helping the project!
1135	5268286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268286	Diapolo	Wow many code changes for a little win, but Im fine with them.
1135	5268385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268385	luke-jr	Binary changes to: addrman, bitcoinrpc, db, guiutil, keystore, main, net, script, wallet, walletdb
1135	5268607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268607	sipa	I consider pre-increment/post-increment more of a code style preference - no need to change it if it doesnt gain you anything.
1135	5268624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268624	luke-jr	I consider unnecessary post-increments to be akin to unused variables.
1135	5268762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268762	jgarzik	+100
1135	5268878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268878	laanwj	The number of changes could be brought down if youd only do this for non-primitive types (ie, iterators). But even then, this is a kind of a micro-optimization that makes sense for tight inner loops. Im not sure its worth changing everywhere.
1135	5268977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268977	luke-jr	FWIW, KDE fixed this in 2007.
1135	5269903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5269903	tcatm	I just compiled a simple for-loop twice (i++ and ++i) and compared the disassembled code. There were no differences even when using -O0.
1135	5269921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5269921	luke-jr	This isnt the only cleanup for 0.6.1 that has almost no effect on binary output. I suspect the actual binary differences are all in the iterators.
1135	5270156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5270156	tcatm	Ive just talk to someone who knows a thing about C++ compilers. He said iterators from the std library can be inlined and thus it++ vs ++it wont make a difference there either. In case we overload ++ in Bitcoin this might in fact make a difference but the better way to fix it would be by making the overloaded method inline-able.
1135	5270193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5270193	luke-jr	Thats assuming glibc and GCC. Best to do things the "right way" so we dont depend on implementation-specific optimizations.
1135	5271371	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5271371	gavinandresen	Too much code change for zero gain.
1134	5275411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5275411	Diapolo	Rebased, only decision left is the rename of Bitcoin.lnk to Bitcoin-Qt.lnk. Please vote and Ill follow.
1134	5406974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5406974	Diapolo	Revert to old Bitcoin autostart link (Bitcoin.lnk), so there should be no blocker in here anymore.
1134	5430738	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5430738	Diapolo	Rebased, removed most space changing stuff and removed the compiler-warning fix, which goes to a seperate pull-request.
1134	5491426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5491426	sipa	ACK
1134	5525832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525832	Diapolo	Rebased, no code changes.
1134	5585346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585346	jgarzik	Why does this patch add a bunch of redundant initializations of large buffers? BTW/hint: the commit message should answer this question... "utility functions cleanup / update" is too vague; it tells us nothing about why these changes were wanted/needed.
1134	5585476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585476	Diapolo	If an array has no initialization, the values are undefined, no? You are right about the commit message, its one of my early pull-reqs ^^.
1134	5585689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585689	jgarzik	Correct. However, you will note that these undefined values are never accessed.
1134	5585768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585768	Diapolo	Im willing to learn again, if the main devs dont want arrays to get initialized, I will remove that change.
1134	5593190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5593190	laanwj	In general we want variables to be initialized. But initializing large buffers can cause performance problems, I think the decision not to initialize them was conscious. Id rather completely get rid of the buffers and replace them by a sensible string type, where possible. (For example, add a function vstrprintf that takes a va_list like vsprintf, and use that everywhere instead of raw calls to snprintf and all the boilerplate around it)
1134	5596935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5596935	Diapolo	Rebased and removed the char inits, only 1 change is left in FormatException().
1134	5597096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5597096	laanwj	ACK
1133	5267627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5267627	luke-jr	Does this resolve symbolic links? (I dont think that is proper behaviour, if so)
1133	5267645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5267645	sipa	I dont think boost::filesystem::system_complete does that. This commit changes the behaviour back to what it was before ee12c3d60c4 (except that the suggested bitcoin.conf file in case of a missing rpcpassword now has the correct file path).
1133	5268480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268480	laanwj	This breaks the UI build :-) (Theres also a call to ReadConfigFile there that assumes that the result is a bool).
1133	5268567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268567	sipa	Fixed.
1133	5268598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268598	laanwj	ACK
1133	5268745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268745	jgarzik	ACK
1133	5271368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5271368	gavinandresen	ACK
1131	5263005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5263005	jgarzik	ACK
1131	5263557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5263557	sipa	ACK
1131	5264359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264359	gavinandresen	ACK
1129	5261128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5261128	jgarzik	although the pastebin test seems accurate, I would have preferred one that directly includes both old and new enum{} lists... add prefix OLD_ to each symbol in old enum, and then script-create a test that tests OLD_FOO==FOO, for each symbol. ACK on the concept
1129	5261461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5261461	laanwj	Done that: Ive also diffed the disassemblies (with *only* commit 7be8b2f): (difference in version.o is explained by different git commit, apart from that there are no differences)
1129	5262993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5262993	jgarzik	ACK
1129	5263559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5263559	sipa	ACK
1129	5264369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264369	gavinandresen	ACK
1128	5245752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5245752	sipa	Im not sure it is a good idea to accept nonstandard (or otherwise non-policy compliant, whatever the policy is) transactions into your memory pool if youre not mining yourself.
1128	5246036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5246036	luke-jr	Refusal to accept your own transactions breaks the rest of the wallet code right now, in my experience. At least this way, you can solicit a miner to accept it.
1128	5246101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5246101	sipa	Of course, but the wallet shouldnt create such transactions. If it does, thats a bug.
1128	5246168	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5246168	luke-jr	Or a new feature in development. So either its a no-op in a non-buggy vanilla client, or it prevents bug compounding and makes testing new features easier.
1128	5247137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5247137	jgarzik	Or (Satoshi would certainly say "no" here...) just add a cli switch that disables the isStandard test at runtime (i.e. accepts all valid transactions as standard), instead of hacking it half-way like this.
1128	5247283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5247283	luke-jr	Thatd be #559 ;) I dont think bypassing the non-standard checks for ones own transactions is a half-way-hack.
1128	5264398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264398	gavinandresen	Accepting transactions you dont understand is a really bad idea, ESPECIALLY if they are to you. Getting your client to accept a non-standard transaction that the rest of the network will eventually reject is a good first step to a successful double-spend. No philosophical objection to the other commit, although I hate making the code more complicated for a "never actually a problem" case.
1128	5264493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264493	luke-jr	This doesnt accept non-standard transactions *to* you, only *from* you... or at least thats what I had in mind when I wrote it - does IsMine return true for ones youre receiving too?
1128	5267845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5267845	luke-jr	Yeah, looks like I confused IsMine with IsFromMe. Closing until Ive fixed this (let me know if its wanted for 0.6.1 and Ill prioritize it)
1128	5795434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5795434	luke-jr	Rewrote, should fix the problems.
1128	7430782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430782	jgarzik	Sounds like consensus is fairly strong against accepting non-standard TXs, from yourself or not.
1126	5235367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5235367	luke-jr	Is there a reason to use these instead of the standard string.h (memset) and stdio.h (sprintf)?
1126	5235902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5235902	jgarzik	I admit Im unclear on the advantages of cstring/cstdio over the normal header. The bitcoin codebase does currently prefer the C variant ("#include <stdio.h>").
1126	5238111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5238111	laanwj	cstdio and such are more canonical c++. The actual difference is that stdio.h puts the symbols in the global namespace and cstdio puts them in `std` (http://stackoverflow.com/questions/7596406/stdio-h-not-standard-in-c). All in all, it doesnt make much difference. But we should not mix them.
1126	5241666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5241666	drizzt	ok, Ill change my pull request
1126	5246783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5246783	luke-jr	Does this actually fix the GCC 4.7 build (without -fpermissive)?
1126	5247892	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5247892	drizzt	Yes. A log is better than 1000 words:
1126	5263575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5263575	sipa	ACK
1126	5264034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264034	jgarzik	ACK
1124	5210071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5210071	jgarzik	ACK
1124	5215103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5215103	laanwj	ACK
1124	5255323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5255323	sipa	I added a commit that moves the definition of CRPCTable and CRPCCommand to bitcoinrpc.h, so that it does not need to be duplicated in tests/rpc_tests.cpp. I suppose it is useful for #1075 as well. re-ACK?
1124	5255356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5255356	jgarzik	ACK
1124	5264403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264403	gavinandresen	ACK
1122	5192114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5192114	laanwj	The signed char doesnt really make me happy. We use char with the implicit assumption that its signed all over the code base. Many programs do this. We make worse assumptions about data types (see #888). Changing this assumptions will require quite some thought especially in serialize.h. Why not just pass `-fsigned-char` for now? ACK on adding an entry/comma, good catch
1122	5192297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5192297	dlitz	Assuming that char is signed is a bug; ISO C and C++ leave it undefined. The fact that Satoshis prototype was a little bit sloppy isnt much of a reason to never fix these bugs. Is -fsigned-char portable? (Does clang support it?) What happens when you link against a library that defines char differently? Since Ive already put in the effort of finding these and submitting a patch to fix them, why wouldnt you accept the patch? These bugs arent going to get fixed, otherwise.
1122	5192331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5192331	laanwj	Yes, clang supports that option. So does MSVC2010. Linking against a library that defines char otherwise should not be a problem as the in-memory representation is the same. I agree that its no reason to never fix these, but have you checked all other places where char is used? Are you sure that unsigned chars wont break on some obscure serialization cases? (that are currently not covered by unit tests?) If not, we can not support compiling with unsigned chars.
1122	5192436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5192436	laanwj	Eventually the fix would be to forbid the usage of plain `char` completely, and define our own typedefs for signed and unsigned char (or use posix `uint8_t` / `int8_t`, even better as we assume 8-bitness?), and force the use of those everywhere. Edit: but dont get me wrong, Im not opposed to accepting this. Im just wary that it might not solve the entire issue.
1122	5198669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5198669	dlitz	Actually, not every use of `char` needs to be changed. Cases where `char` refers to the characters of a human-readable string should be left as-is (since things like `open` use `const char *`). I searched for every instance of `char`, and skipped anything that looked like it was just ordinary string handling. GCC was helpful, because it gave warnings where `>= 0` checks were being done on an unsigned `char` variable. Admittedly, I used my intuition to make that call. Im more familiar with C than I am with C++, and Im not extremely familiar with the Bitcoin codebase. Youre right that this might not solve the entire issue, but I think its a useful step. It might be useful for other developers to use `-funsigned-char` on x86 and see if they get the results they expect. I tried that and it seems to work fine, but I didnt exercise it too hard. bitcoind still segfaults after a while when downloading the block chain when I emulate armel using qemu-user, but it also complains about some unsupported syscall number, so I suspect the crash has more to do with qemu than with bitcoind. (Unfortunately, I dont have real ARM hardware to test on at the moment.) As for serialization, I wouldnt expect too many problems, because the difference between signed `char` and unsigned `char` is mostly irrelevant except for comparisons, or when casting to larger types like `int`. Cases where a character is used as the *index* for a look-up table already work, because x86s `char` is signed by default (so it would have already been broken if it wasnt declared properly). My motivation for this patch is to get the latest bitcoind package into Debian testing. Right now, theyre [stuck at 0.3.24](http://packages.debian.org/search?keywords=bitcoind) due to some [build issues](https://buildd.debian.org/status/package.php?p=bitcoin&suite=sid) on some architectures, so Ive been submitting bug reports with the necessary patches to try to get this resolved. If you want, I can check this more carefully over the weekend. Pointers to potentially problematic areas not covered by the test suite would be helpful, in that case.
1122	5216045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5216045	laanwj	I dont have specific suggestions. If you check(ed) all occurrences of char it should be OK.
1122	5244737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5244737	sipa	All changes to unsigned seem safe to me, and changes to signed will not influence any current;y supported platform. ACK.
1122	5246432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5246432	luke-jr	I concur with sipa on a read-over basis, but comparing the object files produced (on x86) reveal some disturbing (to me, as someone who isnt familiar with x86 assembly) differences... The following object files are changed: bitcoinrpc, checkpoints, main, script, Checkpoints_tests, miner_tests Here is a diff of the assembly in script:
1122	5246633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5246633	laanwj	a lot of those seem different function names to calls? (but same binary representation) If you want a fair comparison you should remove the , from phexdigit, so that the array will stay 255 bytes. (dont know if you did that already) Also gcc tends to be quite weird, in that small unrelated changes can seemingly randomly change how certain optimizations are done. Edit: Im trying with -O0 and can confirm there are minor changes to the generated code, though, even with just commit 8c8e8c2e: addrman.o: match bitcoinrpc.o: base_uint&lt;256u>::SetHex(char const*) differs checkpoints.o: base_uint&lt;256u>::SetHex(char const*) differs crypter.o: match db.o: match init.o: match irc.o: match key.o: match keystore.o: match main.o: base_uint&lt;256u>::SetHex(char const*) differs net.o: match netbase.o: match noui.o: match protocol.o: match rpcdump.o: match script.o: difference in CScript::DecodeOP_N(opcodetype) and CScript::EncodeOP_N(int) util.o: match version.o: match wallet.o: match walletdb.o: match A change in SetHex isnt so surprising, but in DecodeOP?!? 0000000000000000 <CScript::DecodeOP_N(opcodetype)>: 0: 55 push %rbp 1: 48 89 e5 mov %rsp,%rbp 4: 48 83 ec 20 sub $0x20,%rsp 8: 89 7d ec mov %edi,-0x14(%rbp) b: 64 48 8b 04 25 28 00 mov %fs:0x28,%rax 12: 00 00 14: 48 89 45 f8 mov %rax,-0x8(%rbp) 18: 31 c0 xor %eax,%eax 1a: 83 7d ec 00 cmpl $0x0,-0x14(%rbp) 1e: 75 07 jne 27 <CScript::DecodeOP_N(opcodetype)+0x27> 20: b8 00 00 00 00 mov $0x0,%eax 25: eb 2f jmp 56 <CScript::DecodeOP_N(opcodetype)+0x56> 27: 8b 45 ec mov -0x14(%rbp),%eax 2a: 83 f8 50 cmp $0x50,%eax 2d: 7e 08 jle 37 <CScript::DecodeOP_N(opcodetype)+0x37> 2f: 8b 45 ec mov -0x14(%rbp),%eax 32: 83 f8 60 cmp $0x60,%eax 35: 7e 19 jle 50 <CScript::DecodeOP_N(opcodetype)+0x50> 37: b9 00 00 00 00 mov $0x0,%ecx - 3c: ba c0 01 00 00 mov $0x1c0,%edx + 3c: ba c2 01 00 00 mov $0x1c2,%edx 41: be 00 00 00 00 mov $0x0,%esi 46: bf 00 00 00 00 mov $0x0,%edi 4b: e8 00 00 00 00 callq 50 <CScript::DecodeOP_N(opcodetype)+0x50> 50: 8b 45 ec mov -0x14(%rbp),%eax 53: 83 e8 50 sub $0x50,%eax 56: 48 8b 55 f8 mov -0x8(%rbp),%rdx 5a: 64 48 33 14 25 28 00 xor %fs:0x28,%rdx 61: 00 00 63: 74 05 je 6a <CScript::DecodeOP_N(opcodetype)+0x6a> 65: e8 00 00 00 00 callq 6a <CScript::DecodeOP_N(opcodetype)+0x6a> 6a: c9 leaveq 6b: c3 retq Its minimal and I have no idea what it means (the change in CScript::EncodeOP_N(int) is similar) .
1122	5247217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5247217	luke-jr	I was only comparing the tip of this pullreq.
1122	5247582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5247582	dlitz	Thats weird. On my machine, I only see these differences for script.o:
1122	5247951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5247951	laanwj	The `callq 50 <CScript::DecodeOP_N(opcodetype)+0x50>` must be the call to `__assert_fail` (called if eax<=0x50 or >0x60, which matches the `opcode >= OP_1 && opcode <= OP_16` expression ). So a different argument is passed when the assert fails, we can live with that, I guess. Edit: objdump -rCd confirms this suspicion. The argument that differs is the line number. Pretty boring :) Edit.2: the change in SetHex is simply using a different register (edx/eax) in the zero-extend instruction, fb: 0f b6 80 00 00 00 00 movzbl 0x0(%rax),%eax fe: R_X86_64_32S base_uint<256u>::SetHex(char const*)::phexdigit 102: 89 c2 mov %eax,%edx becomes: fb: 0f b6 90 00 00 00 00 movzbl 0x0(%rax),%edx fe: R_X86_64_32S base_uint<256u>::SetHex(char const*)::phexdigit ACK
1122	5248528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5248528	sipa	ACK
1122	5261492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5261492	dlitz	Thanks, guys!
1121	5192204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5192204	laanwj	ACK
1121	5255402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5255402	sipa	ACK
1119	5187960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5187960	sipa	Extra information: lsn_reset is not faster when it is run a second time. I assume it needs to traverse the entire database file.
1119	5215221	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5215221	laanwj	Code is ACK Maybe we could add some text to the description/tooltip that it doesnt affect the safety of the wallet. Somehow this "rush database shutdown" manages to creep me out (and that would even more apply to users, I think).
1119	5219234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5219234	sipa	Im not so sure - I believe many corruptions are caused by people shutting down their computers before lsn_reset has completed, or otherwise killing it because of slow shutdown. Not calling lsn_reset is perfectly safe, only you cant move blkindex.dat to a new environment afterwards. If you do so anyway, if will fail (deterministically) at startup. EDIT: right, your comment was about users reacting the same way. Lets see if I can change the tooltip.
1119	5219674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5219674	laanwj	Another random concern: could this interfere with deleting db logs on startup/shutdown? (im not sure we do this but remember reading about it on irc) Is the "unflushed state" in the log files?
1119	5220373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5220373	sipa	If you manually delete log files, and no lsn_reset was performed on blkindex.dat, it will fail to load. We call some bdb functions to remove log files automatically, but this only happens when they are safe to be removed.
1119	5264511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264511	gavinandresen	A random thought after reading If the datadir/database directory is empty or missing at startup, could we just leave the DB_RECOVER flag out of the dbenv.open() call and cross our fingers that the .dat files are in a consistent state? Or maybe do whatever db_verify does and exit cleanly if they are NOT in a consistent state?
1119	5264631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264631	sipa	I did a test: close all database files nicely, do a checkpoint, (do not reset lsns), shutdown the database environment cleanly, delete the log files, restart application without DB_RECOVER. Result: Db::open: Invalid argument. So it seems that no matter what, the log file needs to be present. I wonder how db_dump works, because that tool can dump the records without any problems in this situation.
1119	5290193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5290193	gavinandresen	ACK. db_dump calls: dbp->verify(dbp, filename, NULL, stdout, DB_SALVAGE | (Rflag ? DB_AGGRESSIVE : 0) | (pflag ? DB_PRINTABLE : 0));
1119	5290451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5290451	sipa	Right, not what we want to do by ourself. and what worries do you still have w.r.t. this pullreq?
1119	5314001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5314001	sipa	If id change the checkbox to be "detach block and address databases from environment (slower shutdown)", and make it default off. Would that sound less alarming?
1119	5342193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5342193	sipa	I swapped -fastshutdown=1 for -detachdb=0. This way of formulating things hopefully sounds less scary.
1119	5342597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5342597	Diapolo	The blk000x.dat file(s) are not involved here, as you didnt mention it? As addr.dat and blkindex.dat can be rebuild I think it is a nice addition / option. I had to read the description several times to understand what is default now ^^.
1119	5345430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5345430	sipa	Default is the fast shutdown without calling lsn_reset on blkindex.dat and addr.dat. I believe thats what most people want - very few people move these files around between environments. blk0001.dat is indeed not involved here as it is no database.
1119	5349581	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5349581	Diapolo	Thanks for clarifying and ACK ;).
1119	5350045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5350045	laanwj	I like the diplomatic renaming :-) ACK.
1118	5186485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5186485	laanwj	ACK
1117	5181151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5181151	gavinandresen	ACK
1115	5180150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5180150	jgarzik	ACK
1115	5180210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5180210	sipa	ACK
1114	5179657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179657	jgarzik	ACK
1114	5179668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179668	laanwj	ACK
1113	5179234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179234	jgarzik	disagree with all of these
1113	5179341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179341	sipa	BIP 0031 does say "can contain a nonce field". Im not sure this is useful, but it warrants some discussion maybe.
1113	5231520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5231520	luke-jr	BIP31 has been updated to make nonce mandatory (unfortunately, IMO). Closing.
1112	5153386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5153386	jgarzik	It is unfortunate that every usage site gets larger, with this patch.
1112	5154479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5154479	sipa	Yes, I did it that way because it exposed all places where implicit versions where being used. In many places, this implicit value must obey some hidden rules. For example, GetHash() needs to be done using a constant version number, or everything would break, but used PROTOCOL_VERSION formerly. If we ever do a protocol change that adds fields to blocks or transactions, this has to be thought through thoroughly, and many places where PROTOCOL_VERSION is used, will need to be changed to pNode->nVersion, for example. With this change, those places become obvious.
1112	5154569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5154569	sipa	Or put otherwise: i think using PROTOCOL_VERSION is a bad default anyway, because as soon as the version number becomes relevant, every piece of code that uses the default constructor will have to be changed anyway.
1112	5155692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5155692	laanwj	Larger, but also more explicit and less magic. I like it. New diagram:
1112	5171238	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5171238	laanwj	I also expect that making the version parameter explicit and passing it through prevents many of the "argument unused" warnings currently emitted in the headers.
1112	5173532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5173532	sipa	I doubt that; they dont become magically used because theyre explicit instead of implicit.
1109	5143467	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143467	sipa	Seems was doing something similar. Ive rebased his changes on top of mine now.
1109	5143511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143511	sipa	Tested builds of bitcoind and bitcoin-qt in gitian (linux and windows).
1109	5143539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143539	jgarzik	ACK
1109	5146046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5146046	laanwj	Ive ran it through the graph-o-matic and its even readable now! This is much better. It does show theres one circular dependency left: ui_interface.h <-> util.h
1109	5181777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5181777	sipa	Superceded by #1112
1108	5143526	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143526	jgarzik	superceded by #1109
1106	5146178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5146178	laanwj	ACK Is this enough to remove -Wno-sign-compare from the build? Or are there still a lot of these warnings left even after this?
1106	5146395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5146395	jgarzik	Still too many left in the headers, to remove -Wno-sign-compare. Several key classes exported directly to the network assign and test unsigned int types against -1. A few other warnings require some thinking as well. My patches get 75% of the warnings maybe.
1106	5165377	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5165377	gavinandresen	ACK
1104	5138711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5138711	sipa	ACK
1104	5140196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140196	jgarzik	ACK, good work cleaning all that up
1103	5137633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5137633	laanwj	IMO this is less ugly instead of more ugly than #1102. All non-implementation information about RPC commands is conveniently in one place, in table vRpcCommands. You could in principle add the help message as well. And theres no long registration function that has to be kept up to date when new commands added, just a simple one. One remark though: can you move the RegisterRPCCommands() call to AppInit2() instead? This make sure that the RPC commands data structure is initialized even if the RPC thread is not started. #1075 makes use of this for executing local "RPC" commands without -server.
1103	5138742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5138742	sipa	You could have an RPCDIspatcher class with a singleton object, which uses RegisterRPCCommands as constructor.
1103	5138771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5138771	laanwj	As I understand it we currently simply take both mutexes for all RPC commands? (which is inefficient, but very safe) Did that change with this commit?
1103	5138788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5138788	sipa	Oh right - I confused safe mode with "requires extra locking". I removed the part of the comment about that.
1103	5139633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5139633	jgarzik	BTW, I am looking for suggestions on how to best encapsulate the parameter parsing in CommandLineRPC(). That is the last area where there is a long "if command==foo, do X" decision table, containing per-RPC-command logic. It would be nice to move that parameter parsing into the vRPCCommand table.
1103	5139721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5139721	laanwj	Im not entirely sure about that. IMO it would be nice to separate client and server concerns as far as possible, even into separate implementation files. * The server logic is a box that accepts JSON and produces JSON data structures. It knows nothing of argument parsing, formatting, just handles commands. * The client logic takes a command name and list of (string) arguments, and produces a string message and error code as output. The conversion from argument list to JSON internally is dependent on the command. It can either communicate with the server through the network (as JSON client) or by passing the JSON object in and out in memory (UI console). Theres some network code and such that exists in limbo between the two. (I have nothing against making the "convert argument strings to JSON" data-driven as well, but Im not convinced it belongs in the same place)
1103	5140037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140037	jgarzik	RE "And theres no long registration function that has to be kept up to date when new commands added, just a simple one" Well, the long registration function is replaced with a long table. As the saying goes, "six of one, half-dozen of the other" In both this pull request and #1102, there is one (1) place that contains a master list of RPC commands. In this pull request it is vRPCCommands[], and in #1102 it is RegisterRPCCommands(). I do lean towards this pull request too, because it is smaller and more compact. However, the continued use of rpcfn_type would probably be ugly to C++ purists :)
1103	5165352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5165352	gavinandresen	ACK. I like this one better. I like data-driven programming, so describing argument types in a std::map<string method, std::map<int argNumber, ...something... argType> > or something instead of the current big long "if/else..." appeals to me. But thats such a low priority I probably wouldnt bother.
1103	5208409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5208409	sipa	Ive extended the encapsulation a bit further (while fixing the initialization issue) in #1124.
1103	5264481	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264481	sipa	Included in #1124
1102	5143544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143544	jgarzik	Closing, as people seem to prefer #1103
1101	5136103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5136103	luke-jr	Note this is missing some important thread-safety issues I had cleaned up in #568 (which has been upstream-ready for months)
1101	5136460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5136460	jgarzik	Nothing is -missing-. There is a lock across the entirety of the RPC command execution.
1101	5136773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5136773	luke-jr	Ah, okay... thats what I missed when comparing the two.
1101	5141885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5141885	gavinandresen	Any limit to the number of threads spawned? Could somebody out-of-memory DoS if they just keep connecting to the RPC port a gazillion times and never closing the connections?
1101	5141966	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5141966	luke-jr	I suspect youd hit PID limits before memory, and socket limits before that. And since bitcoind uses select(), it would randomly corrupt memory. But thats already a problem anyway... :/
1101	5142668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5142668	jgarzik	There is no limit to the threads spawned -- but note that threads are spawned only after checking the IP filter list. The first resource likely to be exhausted is a thread-group or systemwide thread limit, not memory. But yes, if you pass the IP filter list, that can be DoSd. Should not be a problem to add a simple simultaneous-threads limit here, though.
1101	5165259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5165259	gavinandresen	ACK. I assume the main benefit right now is the keepalive to save constant connection setup/teardown, since RPC calls will still be essentially single-threaded due to obtaining the cs_main and wallet locks. And the secondary benefit is we can eventually move to more fine-grained locks...
1101	5264452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264452	gavinandresen	Anybody else getting a compiler warning: src/bitcoinrpc.cpp:2618: warning: suggest a space before ; or explicit braces around empty body in while statement [-Wempty-body]
1101	5265649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5265649	jgarzik	Rebased. do you still get a warning? If yes, can you paste the code line as well as the warning, just for double-checking?
1101	5288363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5288363	gavinandresen	Still getting an error: bitcoinrpc.cpp: In function void ThreadRPCServer3(void*): bitcoinrpc.cpp:2610: warning: suggest a space before ; or explicit braces around empty body in while statement Line 2610 is: while (0); ... which looks to me like it should be deleted, since loop is defined as: for(;;) in util.h
1101	5297675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5297675	jgarzik	fixed. Merge error added some useless code.
1101	5306003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5306003	gavinandresen	Testing this, I got a crash on shutdown of Bitcoin-Qt; see
1101	5590186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5590186	jgarzik	Rebased, and updated for recent table-driven RPC dispatch. That change simplified our error handling, here.
1100	5137588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5137588	laanwj	ACK
1100	5138684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5138684	sipa	ACK
1097	5139935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5139935	sipa	ACK
1095	5143645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143645	sipa	ACK
1094	5127347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5127347	jgarzik	It is unfortunate that AlreadyHave() is called in a loop, implying a lot of lock/release in a row (even if it is likely cached and uncontended). If LOCK() is moved outside AlreadyHave() and above its callers loops, that reduces lock/release to one, but holds the lock for MSG_BLOCK in addition to MSG_TX.
1094	5129131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5129131	laanwj	How long do the loops run on average/worst-case? Is the runtime of the loops that enclose AlreadyHave dependent on I/O such as network/database? It looks like AlreadyHave runs very fast (just some hash lookups), however the enclosing loops contains network calls such as PushMessage. I suppose it is undesirable to hold the lock during those? In that case the current solution is best. It is also the best encapsulation.
1094	5179288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179288	sipa	ACK. If there is a performance problem arises for the processing of "inv" messages, we can always move the lock to a pre-processing step that filters the received inv list before further processing.
1094	5179319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179319	laanwj	ACK, agreed, safety comes first Edit: Btw, whats the reason that mapBlockIndex / mapOrphanBlocks dont require a mutex? Are they only ever accessed from one thread?
1094	5179425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179425	sipa	Actually, Id prefer the txdb.ContainsTx() call to be outside of the lock, as the db lookup could be slow.
1094	5179643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5179643	jgarzik	updated
1093	5126335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5126335	gavinandresen	ACK
1093	5129031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5129031	laanwj	ACK (code-wise, cannot test this)
1092	5148188	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5148188	laanwj	can you test whether this really fixes your issue?
1092	5151055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5151055	luke-jr	Yep, thanks
1092	5151057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5151057	luke-jr	ACK
1091	5118349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118349	Diapolo	Dunno why, but the default is now even readable on Win7 as the text stays black, no matter if the Window is active or not ... Im fine with the OS default then!
1091	5139975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5139975	jgarzik	The dominant bitcoin coding style is overwhelmingly "if (", with a space. Two seconds of grep would show that... Let us continue to be consistent with the rest of the code.
1091	5140032	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140032	laanwj	Maybe in the core. Not in the Qt code. Whatever the common coding style is, commits shouldnt be cluttered with unrelated changes.
1091	5185404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5185404	sipa	Why was this merged? This is how it looks now for me:
1091	5185551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5185551	laanwj	Sipa: See discussion on #1071. We intend to only override the style in specific cases. In most cases the OS default simply works.
1090	5118406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118406	Diapolo	So \<br\> can be used in strings for a word-wrap and \n will be replaced by it? Seems like a very good solution. Only question I have left is, if we can set a default width of tooltips. Try it with the current version, if you hover the lock-icon if your wallet is encrypted. This is rich text, but looks kind of ugly, because of the small width of the tooltip.
1090	5118573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118573	laanwj	Im not sure where it gets the default width from (which is indeed extremely narrow). Couldnt find any documentation about that. That leaves looking in the Qt source I guess...
1090	5118638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118638	Diapolo	But you could verify that the default is to narrow, so this is no Win specific behaviour?
1090	5120018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5120018	laanwj	No, it isnt specific to any OS. This seems to make the tooltips wider (crazily wide, in this case), for example: app.setStyleSheet("QToolTip { min-width: 500px; }");
1090	5121661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5121661	laanwj	Ive added a min-width of 350px, this looks like a nice tradeoff between too narrow and too wide.
1090	5122525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5122525	Diapolo	Tried it and its way better than before, I agree its a nice tradeoff until we comeup with a even nicer solution in the future :).
1090	5122844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5122844	laanwj	Shouldnt worry too much about this, theres way more serious issues to solve first.
1090	5264439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5264439	gavinandresen	ACK
1090	5409796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5409796	Diapolo	This should get in 0.6.1 as the detach db tooltip is quite long ;).
1090	5412558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5412558	laanwj	No, I dont think its a good idea to merge this between release candidates. Thats only for critical bugfixes. Theres the possibility that this introduces problems in some place / language so it needs testing. Better to merge it after 0.6.1.
1090	5413383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5413383	Diapolo	It was targetted for 0.6.1 and I reminded of that fact ;). There are quite a few commits that could have been merged in before the RC1.
1090	5452893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5452893	luke-jr	This makes tooltip windows too wide sometimes:
1090	5454295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5454295	laanwj	Yea, it only works if a minimum width is set, otherwise it makes them too narrow. Qt can either size the boxes to the text or the text to the boxes, not both.
1090	5525385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525385	laanwj	Rebased, and added a useful heuristic to only do this for *long* tooltips, where "long" is defined as longer than a certain length in characters. This fixes issue.
1090	5534669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5534669	Diapolo	ACK
1089	5112392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5112392	Diapolo	Im fine with wthis change in general (ACK). If it gets merged #1000 (yay ^^) can be closed, too!
1089	5114073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5114073	laanwj	Ill re-run with -no-obsolete and change Hide to lowercase. I dont have control over which plural forms are generated.
1089	5114583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5114583	Diapolo	Great! Im very sure the plural forms (english base) need to be put in the .ts directly (manual). Am 13.04.2012 15:03, schrieb Wladimir J. van der Laan: > Ill re-run with -no-obsolete and change Hide to lowercase. > > I dont have control over which plural forms are generated. > > --- > Reply to this email directly or view it on GitHub: > >
1089	5114817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5114817	laanwj	Can you point to the documentation on that? It sounds unlikely; TS files are supposed to be generated automatically from the source code. (And plural forms differ per language. They cannot be sourced practically from English)
1089	5115046	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5115046	Diapolo	Look at the other plurals or numerusform tags in the en .ts file. Im sure someone placed the translations for the existing numerusform tags in there. It seems this can be done with Qt Linguist application (open the en .ts and search for %n second(s) ago in BitcoinGUI), as the existing translations where plural forms are used are displayed with a yellow question mark and the english translation text IS filled in for them, right? A doc is here, but Im not sure if thats mentioned:
1089	5115153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5115153	Diapolo	It seems Qt Linguist is the tool of choice :) ... you can even say that a translation is finished, which marks the string with a green check + removes the type="unfinished" tag for finished translations (thats for english master file - translation here means you looked through, added plural forms and marked strings as finished), cool!
1089	5115172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5115172	laanwj	Ok, youre right. I misunderstood. The _en needs to be manually updated to make the plural mechanism work in English, not to facilitate translations. (under "Handling Plural Forms")
1089	5115300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5115300	laanwj	Fixed; and also marked the plural forms as "finished".
1089	5117987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5117987	Diapolo	Looks pretty good, so ACK!
1089	5118579	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118579	Diapolo	1 more thing I observed while playing around in Qt Linguist, we should set the base language of our en .ts file to only english (currently set to country USA). This can be done under Edit -> Translation File Settings...:
1089	5129366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5129366	laanwj	Ok, fixed too...
1088	5108639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5108639	laanwj	According to transifex has problems with \n in messages, they tend to get lost in translations. Also, as I said before, I think its crazy that we (and translators) have to estimate the width at which the text gets rendered, the width of the users screen, and manually break the text. This is not 1980. Are you sure Qt has no functionality to automatically wordwrap tooltips?
1088	5109362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5109362	cardpuncher	> According to transifex has problems with \n in messages, they tend to get lost in translations. I had remarked this with the content of the About Bitcoin-Qt window but it was apparently just a rendering issue of translated strings on Transifexs side. The file was formatted correctly in Qt Linguist and in Bitcoin, too. Besides they seem to have fixed that glitch now, but Im not sure so dont take it as granted. > Are you sure Qt has no functionality to automatically wordwrap tooltips? Im just a translator, I dont know much about coding but apparently if Qt considers the content of the tooltip as plain text it wont care about its length. However, if it thinks it deals with rich text it will wrap the content. Adding a < br> tag or < font color=black>lorem ipsum< /font> does the trick although its not very elegant. So you may remove the 3 "\n" from the patch until you decide how you want to manage this tooltip issue.
1088	5109677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5109677	laanwj	Thanks for looking that up. We will handle the wordwrap issue in the code instead of the individual translations, by making sure all the tooltips are detected as rich text. Ive applied the other part of this pull.
1084	5102604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5102604	sipa	ACK
1084	5109139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5109139	laanwj	Makes sense. ACK.
1081	5073136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5073136	jgarzik	This is intended to supercede pull request #932, for the following minor reasons: 1) removes the actual protocol version increment. IMO this should be external to the pong message commit. and under the principle of making code self-documenting... 2) use a named constant rather than a magic number for version behavior switching. bitcoin code is too full of magic numbers, and we should resist adding more. 3) place that constant in sipas newly minted version.h, as a central location for future version-related constants like this.
1081	5079212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5079212	jgarzik	Independent, yes, but where is a better place for version information than version.{h,cpp}? It is an odd policy that the "version" module excludes certain classes of version information and not others. That seems to violate the Principle of Least Surprise.
1081	5080131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5080131	sipa	Agree, but calling them both "_VERSION" will be very confusing.
1081	5081305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5081305	jgarzik	No more confusing than the existing PROTOCOL_VERSION vs. CLIENT_VERSION, each with the _VERSION suffix (which I argue is not confusing at all, but rather a logical naming scheme for each). If it appeals to ones sense of symmetry, we can move PROTOCOL_VERSION to version.* as well.
1081	5085266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5085266	laanwj	IMO, version.h should contain version information *for the current client*, that will change over time. I agree that feature-specific thresholds that will be "written in stone forever" should go somewhere else. Maybe there will eventually be enough for a bip_versions.h :-) (if we tracked down other magic version numbers we could already do so) Another suggestion would be to rename it to `BIP0031_MIN_VERSION` to it clear that it is a version threshold (though the comment explains this as well of course...).
1081	5091661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5091661	jgarzik	No, we dont need multiple version.* modules in the tree.
1081	5091975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5091975	sipa	To me, mixing the client version (metadata about the project youre compiling) and the network version (a property of the protocol being implemented) in the same module is wrong. Its like having a source file in firefox that encdes both information about the firefox browser version and the differences between HTML4 and HTML5. The fact that both are called version and have a similar number scheme is an historic artifact, and I would prefer to get them separated rather sooner than later. Maybe remove the moniker _VERSION from all protocol-related code, and simply call it "protocol 60000". I agree that we need nice constants for magic protocol switches, but they do not belong in version.h. Really.
1081	5092268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5092268	jgarzik	This is being WAY overthought. 1) It is silly to have multiple version modules, for that will create confusion among outside reviewers. 2) It is silly to put version constants outside the existing version module, for humans outside the dev team will naturally look for anything version-related in a module called "version." 3) It is even more silly to rename a protocol version constant to something other than "VERSION". It -is- a version number. It is not a historical accident that the protocol version is called "PROTOCOL_VERSION". The naming precisely describes its purpose, and changing that name would be detrimental to understanding by outside reviewers. It is just bonkers to remove the "_VERSION" word from all version-related constants in bitcoin unrelated to client version. That is creating more problems than it is solving.
1081	5092840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5092840	laanwj	You can use the exact same argument that this causes confusion for "outside reviewers". Do we need to increase the BIP0031_VERSION with a new release? How is it different from the CLIENT and PROTOCOL version?... etc.
1081	5092989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5092989	jgarzik	Helpfully, there is a comment for outside reviewers in the code I added, solving this imagined problem.
1081	5093460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5093460	sipa	Certainly, a comment saying "This relates to the protocol version being used in P2P connections, and is independent from the client version" is enough to make it acceptable (I see no such comment right now, though...). Still, such constants belong in the networking code, imho.
1081	5094890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5094890	jgarzik	Updated to add such comments, and further illustrate the usage.
1081	5102698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5102698	sipa	Other magic protocol version constants: * protocol.h: 31402 (nTime in CAddress) * main.cpp: 31402 (avoid requesting addresses from older nodes) * main.cpp: 32000...32400 (dont ask for blocks from these versions)
1081	5105933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5105933	jgarzik	added, along with 209
1081	5153553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5153553	sipa	Meh, ACK.
1081	5153885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5153885	luke-jr	Reminder to bump our own PROTOCOL_VERSION to 60001 too...
1081	5153975	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5153975	jgarzik	yes, that will come in a separate cover
1078	5084851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5084851	laanwj	Visual ACK
1078	5084894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5084894	Diapolo	0.7, because it has to do with URIs ^^?
1078	5084927	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5084927	laanwj	It has to do with URLs but not "URL stuff that scares Gavin". And this fixes a crash bug reported on the forums? I guess it should go into 0.6.1 then...
1078	5085154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5085154	Diapolo	This fixes a glitch with a payment request and the amount set, the crash observed in the forum was with 0.6 RC2 I cant reproduce this, but think as most changes here are very tiny it should go into 0.6.1.
1078	5086217	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5086217	laanwj	From what I understand he performs a DOS attack on the QR generation code. By pasting more and more text into the label field he eventually runs out of memory or some other limit. Maybe we should enforce a sanity limit on the URL length (256?) and above that show an empty image. I could be completely wrong.
1078	5088126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5088126	Diapolo	An URI limit of <= 255 would be a good idea.
1078	5095211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5095211	Diapolo	Added URI length limit and info message to prevent a DoS against the dialog window.
1078	5096622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5096622	laanwj	Works well. However, the info message is wider than the QR dialog, can you enable wordWrap on lblQRCode in the designer? Alternatively, paste this into the .ui file under &lt;widget class="QLabel" name="lblQRCode">: <property name="wordWrap"> <bool>true</bool> </property>
1078	5097258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5097258	Diapolo	Done!
1078	5097434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5097434	laanwj	Great, I intend to merge this asap, however seems sje397 and gavins commit somehow ended up on this pull request?
1078	5097478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5097478	Diapolo	ouch ... a rebase-mess sorry will cleanup ^^
1078	5097548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5097548	Diapolo	fixed
1077	5072835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5072835	laanwj	ACK, works for me now, thanks
1077	5073916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5073916	gavinandresen	ACK.
1075	5055310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5055310	sipa	Wow, nice! Small request: make responses copy-pastable.
1075	5055498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5055498	laanwj	They are (though not really intuitively), you can click on the table cell and press ctrl-c
1075	5055876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5055876	Diapolo	I really like the idea, but would place the function under help and add a seperator line. It simply is no setting or option :). Is there a way export to a text file? Would be consistent to offer such a function, as this is possible "all over the GUI".
1075	5056139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056139	laanwj	Its not help either, nor file. We really need a "tools" menu like other programs. Maybe the settings menu could be renamed "tools", then it makes more sense. Exporting the console contents to a file could be useful. Ill keep that in mind for a future update.
1075	5056231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056231	Diapolo	Sign message would be a tool, too then ;). So why not create a new tools point, which holds your console and the sign message dialog?
1075	5062806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5062806	laanwj	Rebased, added build date to info window
1075	5073704	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5073704	laanwj	New commit moved the option to the "Help" menu (until we have something better) and adds explicit "Copy" context menu to console.
1075	5073945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5073945	gavinandresen	Nifty. Tagged for 0.7.
1075	5266463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5266463	laanwj	Rebased, Ive been able to structure the code better because of the recent RPC refactorings: * Added a execute() method to CRPCTable. * Factored out function RPCConvertValues() to convert parameter values for RPC call from list of strings to command-specific JSON objects. * LocalRPC is completely gone (and with it, most changes to the core), no more code additions to bitcoinrpc.cpp. This is now integrated into the Qt code, making use of CRPCTable::execute.
1075	5531153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5531153	gmaxwell	Pretty awesome. Should this go under a tools menu or should it really be burried under help->debug window->console tab? Does everyone else really like the nested scrollbars you get? (type help a couple times) Im concerned that this might confuse users that Im trying to support "scroll down and youll see it" "Im scrolled all the way down!". Its also a bit annoying if youre running a command over and over again to see if something changes to have to scroll internally to the entry to see it. (e.g. run getinfo over and over looking for connections changing) Also, the fact that you cant copy large chunks of commands is bad from a support perspective. Its helpful if people can say "I ran all these commands and got all these results". Sending the stop RPC makes the UI lockup for a long time (30 seconds?) before eventually shutting down. When I first bring up the console focus doesnt move to the text entry box. I have to click it. But it has a blinking cursor even before I do, I think the focus is on the output box.. so it doesnt seem responsive. This only happens the first time after startup. After that it seems to remember. The green and grey boxes dont seem all that intuitive to me. Id personally just put [request] [reply]. But I admit this this is mostly taste and you should probably ignore me. Copy works differently in single element responses vs multi-element responses. E.g. type "getblockhash 5" copy the hash, then "getblock [paste]" and copy the first txn hash. If you do something that has the second behavior first you may believe that its not possible to copy in the first case, because you dont get any incremental selection. I think ideally incremental selection should always work.
1075	5533417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533417	laanwj	- Eventually it makes sense to add a tools menu where Sign message and verify message should also go. However, its hidden in the second tab for a good reason. Users should not stumble too easy on it so its now a second tab of a dangerous-looking window. - I dont like the nested scrollbars either. However, the Qt QTableWidget doesnt like rows that are too tall (they break scrolling, as the y offset can only start at a whole cell). Thats why tall cells get them. - Selecting and copying multiple cells could be added. - Yes it should probably focus the input box when the tab is selected. - ~~Typing the "stop" RPC command hangs the UI for as long as it takes to shutdown: seems that the UI is not hidden in this case when it leaves the main loop (could be easily fixed, this problem is not related to the console but happens also when you shut down some other way).~~ (fixed by #1209) - The green and grey boxes are categories, they should go together with filtering. I intend to add buttons at the top with the same boxes to hide/show them (I also want to add normal debug/error messages). Im open to suggestions as to the colors, or even icons (boxes *are* placeholders), but I dont want to much discussion about this. IMO given that there are no critical issues we should merge this as soon as possible. Its better to have something, and it is functionality only a very small part of people will use, so perfecting it is not the foremost priority.
1075	5533431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533431	gmaxwell	ha. I didnt mean to imply it shouldnt be pulled because of any of that. I just sat down and ran through it and what I wrote is just a braindump what I found. Considering that its a GUI feature, the fact that I actually tried to break it shows how excited I am to get it in. :) However, it shouldnt be pulled this second because we may cut a 0.6.2 to take the addrman crash fix.
1075	5533793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533793	laanwj	I agree, thanks for testing!
1075	5539795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5539795	luke-jr	Object::connect: No such signal ClientModel::numBlocksChanged(int) in src/qt/rpcconsole.cpp:161 Object::connect: (receiver name: RPCConsole) (this is with next-test, so maybe an undetected merge conflict)
1075	5540686	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5540686	laanwj	Yes, thats an undetected merge conflict. numBlocksChanged changed from one to two arguments in #1205.
1075	5542118	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542118	gruez	DO WANT! On a side note, does it show all debug messages, or just RPC requests?
1075	5542491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5542491	gmaxwell	Oh, gruez has a nice point. This needs a debug log viewer tab too. :) Getting random windows users to find the debug log is an amazing PITA.
1075	5543928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5543928	Diapolo	Windows users are ticking a little different, dont blame them ^^. But ACK to the debug viewer idea, perhaps in a seperate commit, to not bloat this one?
1075	5543968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5543968	gmaxwell	I dont blame them Im very happy they use Bitcoin. But finding files in the file system and viewing them with wordpad isnt something most windows apps ask people to do, so they dont know how to do it. And because I know nothing about windows its very hard for me to talk them through it. A log viewer in bitcoin is something I could bring up locally. :) And sure, if Im not doing the work Im in no position to ask about which commits it gets placed in. ;)
1075	5544121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5544121	laanwj	Im not going to add a full log viewer. Theres zillions of those. That problem has been solved by grumpy system admins way before my time. Better to just implement logging to the OS log, if you want that, so you can use your operating systems log viewer. However, it was my intention to show the last N debug and error messages for debugging, eventually (not necessarily in this commit).
1075	5545164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5545164	laanwj	Maybe were thinking too difficult: on windows, we could just add a button to the debug window that opens debug.log in a wordpad?
1075	5545253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5545253	gmaxwell	::facepalm:: "The Russians Used a Pencil"
1072	5035522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5035522	jgarzik	I will leave ACK/NAK to others, but I will note... this Boost feature is occasionally used as an example of C++ abuse. It is "cute" to build pathnames using the "/" operator, but such usage is decidedly non-standard for the "/" operator and therefore confusing to the uninitiated reading the code.
1072	5035685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5035685	sipa	I wouldnt mind using a longer function name, or operator to accomplish the same. The point is that this operator constrcuts paths in a platform-independent way. The closest alternative is extracting the path as a string, use platform-dependent code to select the correct separator, add the extra path component, and check for various issues such as double slashes, "." and "..", appending a final slash or not, ... All this functionality is already implemented by boost::filesystem::path. You may not agree to its naming conventions, but I certainly see no reason to reimplement it ourself.
1072	5040021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5040021	laanwj	I agree with on that this is "cute c++ abuse" by boost. Then again, the standard library << and >> for stream operators?!? is not much better. And just like those, `/` has no standard use for strings. This is an upstream issue way outside the scope of bitcoin. We cannot decide the interfaces of the upstream libraries we use. Its a good idea to just use the functionality IMO as it provides a platform-independent way of building paths.
1072	5040364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5040364	Diapolo	I like your changes and prefer to get them merged to master before my gets in, as I will likely have to rebase and rework some parts, but the other way around it would be nonsense :)! So definately ACK!
1072	5043357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5043357	laanwj	ACK
1072	5051765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5051765	Diapolo	This needs to get in, before #1066, more ACKs please ^^.
1072	5052106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5052106	sipa	The helper functions to convert boost::filesystem::path to const char* risked returning something pointing to a destroyed temporary on windows. Ive replaced them now with slightly uglier macros that should be safe...
1070	5039958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5039958	laanwj	Hahaha Google Translate makes "Bitcoin the partners spouse cryptographic virtual currency" of the tr translation :-) I suppose thats the way to say "peer-to-peer" there? ACK
1070	5041210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5041210	Diapolo	Is this string visible to the enduser? If yes, where?
1070	5041382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5041382	laanwj	The desktop / menu item will show it
1068	5140278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140278	jgarzik	This is not a NAK... but I dont really think this is much needed
1068	5143746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5143746	jgarzik	Superceded by #1109. Anything remaining should be on top of that.
1066	5034999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5034999	sipa	Ive done some similar cleanups (only path-handling related) in #1072.
1066	5040285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5040285	Diapolo	Last commit reverts to old style of array init via = "", which is allowed and shorter than a memset(). At least now all arrays are initialized :). The only exception is in real_strprintf() where the init could perhaps slow down the GUI / client.
1066	5040327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5040327	laanwj	Thanks, looking good now.
1066	5046339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046339	luke-jr	Rebasing required.
1066	5051759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5051759	Diapolo	As I said I would like to get in #1072 before, as I will have to rebase against that :).
1066	5052153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5052153	sipa	You can already rebase against #1072, if you like, but you risk needing to change things if #1072 changes before being merged then.
1066	5080348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5080348	sipa	I merged #1072.
1066	5084573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5084573	Diapolo	Nice, will rebase later today :).
1066	5085472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5085472	Diapolo	Rebased and Im looking through the code again to verify...
1066	5095309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5095309	Diapolo	Rebased one more ;-). Im only going to fix glitches / errors that are currently in my changes, as I dont want to bloat this. There is of course plenty of room for optimizing our utility functions, but that should go to seperate pull requests.
1066	5100771	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5100771	luke-jr	Most of this looks like it makes the code more unreadable. IMO, the absolute namespaces are far clearer, and should be encouraged, while the general "using namespace" discouraged. sipas per-function "using namespace foo = boost::longerfoo" makes sense and doesnt interfere with readability.
1066	5101132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5101132	Diapolo	God damn ... everytime I try to harmonize the code someone has an own feeling about things. BUT most of the time I see things in the code + in many places and use these as base. I have no problem to completely discard the global use of "using namespace" if everyone would do it. Function local using namespaces seem much more weird to me. But even if you dont like the style ... there are at least valuable fixes in here, like init buffers that were not before, renaming Bitcoin.lnk to Bitcoin-Qt.lnk and the removal of a fallback for a Windows function that sipa suggested. The whole work on filesystem::path was obsolete as Sipa did that (and yes even better then I could).
1066	5102558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5102558	sipa	I really dont care about namespaces, and only followed the pattern of the code already there when doing the boost::filesystem::path stuff. As long as there are no namespaces in header files, I dont care.
1066	5103099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5103099	gavinandresen	56 comments for such trivial changes... I think there are higher priority things we could be spending our time on. This is why I dont like "Ill just clean up the code because I can" changes. I would much prefer to see code cleaned up as it is being improved, so: + Fix a real bug (we have 180 of them, there are plenty to choose from), and do a little code cleanup as part of the fix. + Add some unit tests, and clean up the code you are unit-testing (make sure you run the unit tests both before and after the cleanup). + Add a new feature, and clean up any code that has to be changed to support the new feature. Diapolo: we have to weigh the benefits of "cleaner" code against the potential costs of ANY changes to the code. It is incredibly easy to screw up and let one tiny little change through that has a really bad unintended consequence.
1066	5105970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5105970	freewil	May I suggest for code cleanup pull requests, you make a smaller and simpler pull request for each one such as "make sure all char arrays in util.cpp get initialized to 0 and use sizeof(CharArray) instead of MAX_LEN"
1066	5108916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5108916	laanwj	I like bold code cleanups, such as code de-duplication, eliminating unneeded functions, replacing archaic and dangerous C with modern C++, grouping together similar functionality, isolating different concerns, untangling knots of unrelated include files, and so on. Oh yes and: fixing compiler warnings! Those boatloads of warnings are a shame to the project. On the other hand changing namespace references, or renaming local variables, as you see it causes a lot of bikeshedding discussion for no real good. yes, everyone has their own feeling about such things. Its better to harmonize people than harmonize code in this case, and just leave it be... Combining bug fixes with a little related cleanup (as you did with the QR patch) is great though. Its nice to not be the only person that works on the UI.
1066	5111620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5111620	Diapolo	Allright, 2 options for me ... leave this as it is or rework to change no var names and only add the small changes I did code-wise. First vore wins, lets go :D. Edit: Thanks, Im more the GUI lover than console user and its fun to work together :).
1066	5127215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5127215	gavinandresen	First vote: rework.
1066	5260389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5260389	Diapolo	Im back and will do this in the next days :) and btw. I like clear orders ^^.
1054	5006748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5006748	jgarzik	1) why do you "cd .." in cd ..; contrib/genbuild.sh >src/build.h; cd src ? it seems like one command would suffice: ../contrib/genbuild.sh > build.h 2) do we want to update clean targets?
1054	5007416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5007416	sipa	1) genbuild.sh depends on being run from the projects root directory, which may include a commit id 2) no idea what you mean
1054	5008443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008443	laanwj	Looks like useful functionality. However, as I understand it (Im not a makefile guru though), build.h is force-written on every build. Wont this cause the dependent compilation unit (version.cpp) to be built every time, and a subsequent link? Ideally, to prevent this, build.h should be left untouched if it still matches the current version info.
1054	5008598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008598	sipa	yes, indeed; version.cpp is built every time, and linking is done every time. These are small, and wont take much time to build. However, preventing such a rebuild every time would be nice indeed. No idea how to pull that off via a makefile, though.
1054	5008620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008620	luke-jr	Write a .new file, use diff to compare, then mv over the real file if different?
1054	5008654	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008654	laanwj	Could certainly be done in sh script. Something like: BUILD_H=src/build.h if [ -e "$BUILD_H" ] ; then CURRENT_BUILD_VERSION=`cat $BUILD_H` else CURRENT_BUILD_VERSION= fi # expected to be run in the projects root directory if [ -d .git -a -e "$(which git)" ]; then NEW_BUILD_VERSION="#define BUILD_DESC \"$(git describe)\"" elif echo $PWD | grep /[a-z]\+-[a-z]\+-[0-9a-f]\{7,\}$; then NEW_BUILD_VERSION="#define BUILD_COMMIT \"$(echo "$PWD" | cut -d - -f 3)\"" else NEW_BUILD_VERSION="" fi if [ "$CURRENT_BUILD_VERSION" -ne "$NEW_BUILD_VERSION" ]; then echo "$NEW_BUILD_VERSION" > $BUILD_H fi Note: untested
1054	5008683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008683	laanwj	Lukes suggestion is easier.
1054	5008692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008692	sipa	Right, of course. That wont prevent rebuilding build.h, but it will prevent its dependencies from being rebuilt.
1054	5008902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5008902	sipa	New version, mostly following idea, but generalized genbuild.sh a bit.
1054	5009019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5009019	laanwj	I just realized: I think we dont handle the case in which an empty build.h file needs to be created (as an empty file is handled in the same way as no file). Maybe set NEWINFO to a C++ comment i.s.o. completely empty when no version info can be found...
1054	5011072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5011072	sipa	Ok, fairly large rewrite: by using the export-subst git attribute in a somewhat hacky way, the commit id is now included statically in version.cpp in exported source trees (github tar/zip bundles, output of the git-archive command, gitian build src/ directories, ...). contrib/build.sh is only used for running a git-describe where possible anyway, and does not require cding to a root anymore. Thanks to and for the idea.
1054	5011632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5011632	luke-jr	I dont think this will put the correct file in the Win32-setup source?
1054	5012158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5012158	sipa	now it does.
1054	5012514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5012514	jgarzik	1) there should be no need to run from projects root dir. git certainly works in sub-directories (where ".git" is in .. etc.) 2) clean is a makefile target. one types "make clean" (or sometimes "make distclean") to remove build generated objects. Your change fails to update the clean makefile target. The general rationale is that you want your build to be able to clean up after itself.
1054	5012569	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5012569	sipa	1) there was; this was for handling cases where we worked in a gitless environnement. the script looked at the directory name to find the commit id (since githubs tarballs contain a directory [projname]-[reponame]-[commitid]). The script used some pattern matching on the last component of $PWD to find this. Ive now switched to using the export-subst method, which is far more robust. 2) oh sure
1054	5028403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5028403	sipa	Ok, updated, simplified and added some comments. Ive also changed it to use git describe --dirty, which will result in nice version strings like 0.6.0-66-g4f364be-dirty-beta. The problem is that the gitian scripts modify the source directory before building, so they too result in the dirty marker being added. It could be avoided by setting some env variable to disable the dirty marker entirely, but Id prefer the builds just being done on a clean directory altogether. Anyone feel like looking into that?
1054	5046279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046279	luke-jr	version.cpp:43:23: fatal error: build.h: No such file or directory
1054	5050483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5050483	sipa	Ok, again some changes: the "dirty" flag added in the gitian builds was a result of a bug in git that was fixed in 1.7.7. For now Ive worked around it. Gitian builds are now done from a clean repository, and seem to be deterministic. I also added a CLIENT_DATE next to CLIENT_BUILD, with either the time of the last commit, or the build time. Its written to debug.log at startup. If someone wants to add it to Bitcoin-Qts about box, feel free.
1054	5053309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053309	jgarzik	ACK Would prefer that genbuild.sh output to stdout, rather than overwrote a file, but thats not a big deal.
1054	5053406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053406	sipa	reason is that we want to prevent build.h being updated unnecessarily, as that would cause a rebuild of version.cpp and linking every time.
1054	5053466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053466	jgarzik	I know the reason the logic exists. It is only a question of taste, where that logic should go. Did not mean to suggest the logic should be deleted.
1054	5055365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5055365	gavinandresen	ACK
1052	5009030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5009030	sipa	Updated; I like this even more: TRY_LOCK(cs, name); if (name) { ... }
1052	5009036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5009036	laanwj	Yes this is much better :)
1052	5010064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5010064	Diapolo	To understand that stuff, LOCK() is used, when code needs to be thread safe and UNLOCK() is used if that part has been processed?
1052	5010097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5010097	sipa	LOCK() implements what is called a scoped lock: it makes sure that inside the current block of code (surrounded by { }), a lock on a particular mutex is taken, and released when that block of code exits. Because of that, there is no need for an UNLOCK().
1052	5025265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5025265	gavinandresen	ACK.
1051	4989567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4989567	luke-jr	ACK
1046	4983533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4983533	gavinandresen	ACK
1046	5000625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5000625	laanwj	Ive updated the code to take suggestions into account
1046	5000700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5000700	luke-jr	Visual ACK
1046	5054224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5054224	jgarzik	ACK
1045	4983588	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4983588	gavinandresen	ACK
1045	4984210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4984210	jgarzik	ACK, yes this is preferred
1043	4976107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4976107	laanwj	Ive also wondered about this tss line. But I was afraid to remove it, as it looks dangerous. Lets try if it doest break the gitian build...
1043	4976262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4976262	Diapolo	While you are trying, I have another thing for you to test :) ... if you want. My build on Windows works great with "-fstack-protector-all" enabled :) (set in the .pro file).
1043	4976923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4976923	sipa	ACK. I tested building in gitian.
1042	4967077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4967077	sipa	shiny
1042	4968784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4968784	laanwj	ACK
1042	4968931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4968931	Diapolo	The client is on a diet, nice and ACK.
1042	4979390	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4979390	jgarzik	ACK
1041	4979371	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4979371	jgarzik	ACK
1039	4966769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4966769	gavinandresen	ACK. What would be a good test? Encrypt a wallet with a long random password and then run a brute-force guesser via RPC-- expect an eventual crash before this fix, expect it to run forever after?
1039	4967057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4967057	sipa	Via RPC it does not crash, you just get a different error. $ (for A in $(seq 1 5000); do ./bitcoind walletpassphrase test$A 1; done) 2>&1 | tee res.txt error: {"code":-14,"message":"Error: The wallet passphrase entered was incorrect."} error: {"code":-14,"message":"Error: The wallet passphrase entered was incorrect."} error: {"code":-14,"message":"Error: The wallet passphrase entered was incorrect."} error: {"code":-1,"message":"CKey::SetSecret() : secret must be 32 bytes"} error: {"code":-14,"message":"Error: The wallet passphrase entered was incorrect."} The -1 error appearing in 254/(255*255) ~= 1/256 cases (in particular: when the last padding byte(s) of the master key does not decrypt to 0x01 or 0x0202 or 0x030303, ..., and the last padding byte of the first checked wallet key do start with such a sequence. With this patch, no -1 error should be produced anymore.
1039	4968952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4968952	laanwj	ACK, checking return values is always good
1039	4976177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4976177	gmaxwell	ACK, passes my testing
1038	4968793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4968793	laanwj	ACK. Wonder how lang="edit" got in there in the first place :-)
1038	4968914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4968914	Diapolo	See :-D.
1038	4968974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4968974	laanwj	heh, must have fat-fingered some key in qtcreator
1037	4961978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4961978	luke-jr	ACK
1037	4965116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4965116	jgarzik	ACK
1036	4962571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4962571	sipa	w00t code removal
1036	4964341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4964341	Diapolo	I like ... red in commits that remove dead code ^^.
1036	4965108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4965108	jgarzik	ACK
1036	4968851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4968851	laanwj	ACK
1033	4980405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4980405	gavinandresen	ACK. Survives my testnet-in-a-box stress tests.
1032	4948462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4948462	Diapolo	I we want this before 0.7 I could do this via transifex and a copy & paste of the translated word "Wallet" for the used languages directly from the current lang-files. Before I would create a pull for the new en master file, so tf can fetch it from here.
1032	5244683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5244683	sipa	Any reason not to merge this yet?
1032	5244766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5244766	laanwj	It would mess up the word "Wallet" in all translations with no clear immediate gain. Better to merge it after 0.6.1 is released to give translators some time.
1032	5245627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5245627	luke-jr	Diapolo did volunteer to adjust the translations, and it seems to fit well into the "cleanup" purpose of 0.6.1.
1032	5260430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5260430	Diapolo	How was the timeline for 0.6.1? I was off for 7 days and will re-start helping during the next days.
1032	5521995	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5521995	Diapolo	As we have 0.6.1 final released I would like to get this merged asap, so we can rely on the translators :). Transifex just needs an updated en master file afterwards.
1030	4935758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4935758	gmaxwell	See also: Pull 1025.
1030	4938259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4938259	dooglus	Ha. I completely didnt see that. If you type the number with a # in front, like #1025 and #753 then it makes a note in the referenced issue, making it easier to find.
1030	4947374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4947374	Diapolo	The pull #1025 has even a very cool redesign and some other small changes / fixes for the progress bar.
1029	4923316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4923316	laanwj	I prefer conditional building in a single makefile for unix. Otherwise, the makefiles will eternally be out of sync when, for example, new source files are added.
1029	4923498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4923498	khorben	On 03/04/2012 21:37, Wladimir J. van der Laan wrote: > I prefer conditional building in a single makefile for unix. Otherwise, the makefiles will eternally be out of sync when, for example, new source files are added. Makes sense, Ill try to modify "makefile.unix" instead then. -- khorben
1026	4885429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4885429	gmaxwell	Half an hour was 7 false alarms per day, an hour is a false alarm every three days. Two hours is once per three years. The tradeoff is how quickly you let the user know that something is broken vs false alarms. Since its already a pretty slow indicator even at 30 minutes, I think we should error towards fewer false alarms. 90 minutes is my recommendation too.
1026	4888283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4888283	Diapolo	Seems like a good change.
1026	4892639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4892639	sipa	ACK
1025	4872830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4872830	gmaxwell	NAK. Most confusing possibility yet proposed. :( The problem with relative progress is that people restart while syncing and freak out when it goes to zero... thinking that its started from the start again. Some people have even given up on the reference client as a result of this (or so they say on IRC). Behavior that changes in ways that would take a paragraph to explain based on state which is hidden from the user is not intuitive at all. However, I like showing real block values but UI clueful people seem to think this is a bad idea.
1025	4873072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873072	Diapolo	Im new in that discussion, but think about it for a while ... the ugly thing is not really the full resync, but if you didnt start the client for a few days and it has to catch up lets say 1000 blocks. This would be displayed relative and does not seem to stuck for so long on 99%. I even added the strings "abs. display" / "rel. display" as a hint. But okay, so if the consens would be to not use a dynamic display at all, what do you think of the other changes (including only displaying the bar if there is a bc network connection)?
1025	4873254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873254	laanwj	Weve already tried the "show relative progress" thing once. It didnt fly. Unless someone develops an elegant widget that shows both absolute and relative information in a neat, intuitive way (and cross-validates this with the complainers on the bitcoin forums and here) Im reluctant to try it again. I do agree with only showing "catching up" and the progress bar when the network connection is up. See my implementation comment though :)
1025	4873969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873969	Diapolo	So if a relative display didnt fly what about displaying "x of y blocks (z %)" as text on the progressbar? I think its very nice, because you see progress per block and not per % (which is ver imprecise).
1025	4874227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4874227	Diapolo	Updated to be not relative anymore and changed network detection part as laanwj suggested.
1025	4874419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4874419	laanwj	The problem is that the source information (the YY in "XX of YY blocks") is imprecise too. Showing that number only gives a false sense of precision. On the other hand I agree with you. If you show a progress bar, the % is redundant as it is already visually conveyed.
1025	4874478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4874478	Diapolo	Can you explain, why YY is imprecise? That are the current all time blocks in the network (claimed by the nodes), but even if the real value is not correct, the new text display is clear. If you start the client and it sits on 99% for minutes you think fuck whats up. If it reads 9900 of 10000 blocks (99%) and keeps moving block for block you see its working and it progresses further.
1025	4875514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875514	sipa	Id say use an absolute percentage chain always, but put in readable text on it "est. X blocks left".
1025	4875673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875673	Diapolo	Last commit makes it absolute again, so thats fine and I wont touch it anymore ^^. So we have the coice if we keep "%", use my suggestion "x of y blocks (z%) or something like sipa suggested above. As I said everything is better than a simple % because users want to see at least a real progress. Edit: Tried it and a "x blocks remaining (y % done)" message looks nice and clean, too.
1025	4875988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875988	laanwj	Thanks for making it absolute again. Im convinced. I think we should drop the percentage from the text and show "xx of estimated yy". Percentage is implicit in the progess bar visual and doesnt add anything. Sipas suggestion to show only the estimated number of blocks left is also good. Advantage is that it shows only one number, disadvantage is that the derived number is less useful for problem diagnostics.
1025	4876430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4876430	Diapolo	The more I think about it, the better I like sipas idea of only showing the remaining blocks. And for problem diagnostic we have a tooltip, which shows the real numbers. So "~xx blocks remaining" as text? Centered on the progressbar (perhaps hard to read as this uses the native OS style for the bar and text) or to the right of the bar?
1025	4877036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4877036	laanwj	Id say show it *on* the progress bar. Thats one less level of indirection. If it looks weird on some OS we can always change it.
1025	4878451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4878451	Diapolo	Was a bit tricky to count backwards (blocks remaining) and keep track of the right value (scale) of the progressbar, but now its ready for testing / review :).
1025	4879464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4879464	sipa	Looks good so far, but * small blocks for the progress percentage are not nice when combined with text * at least here, its completely unreadable: dark blocks for progress with black text; is there a way to get something like this: ?
1025	4879609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4879609	Diapolo	The style/design of the progressbar comes from the OS and can only be changed by some form of Qt stylesheets afaik (see: 2 options, put the text right to the progressbar or search the web for howto edit the style of the bar (which is a hard work, because of the different OS GUIs and color schemes :-/).
1025	4882562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4882562	Diapolo	Okay, I found a way to apply stylesheets to the bar and it can be very well customized ... will add a commit so you could try it out
1025	4882746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4882746	laanwj	Ok, let us know how it goes. Sounds like something that is a nightmare to get right on all OSes. Otherwise, putting the text in the progressBarLabel to the left of the progress bar is fine too.
1025	4883233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4883233	Diapolo	OMFG what a mess, but now Im happy :-D. So on Windows the bar looks equal, no matter what theme I activate and even if I chose the classic theme. I moved some one-time functions so that they dont get called everytime setNumConnections() is called. To the style itself, I chose an orange as bar color, because of the Bitcoin icon and I think it ROCKS! But hey lets vote or you can make own suggestions :).
1025	4883549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4883549	laanwj	*So on Windows the bar looks equal, no matter what theme I activate and even if I chose the classic theme.* This does mean we lose platform-native styling for the progress bar. Not that that is necessarily a problem, I think it looks nice (also on Ubuntu 11.10).
1025	4889871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4889871	Diapolo	I had to edit the code once more, because in the end of a sync the bar was rather jerky and jumped a bit too much. Because of that I had to seperate the "~x blocks remaining" text from the real progress bar values, to be not linked. Now the displayed text is one thing and the progressbar progress display another one. Edit: I will rebase this after I got some final ACKs :).
1025	4892624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4892624	sipa	It looks nice, visual ACK. I didnt check the source code changes.
1025	4895073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4895073	laanwj	That last commit did certainly make it better. It seemed like the number never changed while I was looking :-) Edit: ACK
1025	4895352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4895352	Diapolo	Could you take a short look over the last commit. If you are fine with that, I will rebase!
1025	4947387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4947387	Diapolo	So we have 1 "visual" ACK and laanwjs ACK, further dev votes :)?
1025	4948044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4948044	laanwj	I dont think theres much more to be done, except determine whether we want this for 0.6.1 or 0.7.0. The code change is small and simple enough to make it end up in 0.6.1 IMO, the only hindrance is that some translation messages have been changed and it usually takes a while to update them.
1025	4948230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4948230	Diapolo	As for the translations, I would push the new master file (en) early to transifex, so that translators have enough time to keep up. So I guess there will be RCs for 0.6.1 and I suggest lets integrate this one here. Remember, there is that Wallet-HTML-thing from #945, which has to do with translations, too (even if we would do that).
1025	4948298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4948298	laanwj	Yes, agreed. Im for merging this as soon as possible. (and also #1002, depending on whether we fix URL handling for 0.6.1) #945 is for 0.7.0 as it is pretty low-priority (nearly no visual difference) but a lot of hassle for translators.
1025	4950906	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4950906	sipa	Fine for 0.6.1 for me.
1023	4885091	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4885091	gavinandresen	Please dont open pull requests until you think your code is 100% perfect and tested and ready to go. Before then, you can ask people to look at your code or help out using your github repository.
1023	5007888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5007888	laanwj	These might be interesting as an alternative to boost::interprocess (and flakey shared memory queues in general): They provide a named socket (unix socket on unix, pipe on windows) to communicate between processes on the same machine. Alternatively, boost also supports unix sockets and windows named pipes, however, the difference is not abstracted away like in the Qt implementation so will need #ifdefs.
1023	5046267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046267	luke-jr	Rebasing required.
1023	5056175	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056175	Diapolo	Rebased and re-worked a little. I need someone to test this ;). Needs boost 1.49 with a small edit in boost/interprocess/detail/tmp_dir_helpers.hpp see: There is currently no need for any hard monkey-patches like #986.
1023	5060351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5060351	gavinandresen	NACK-- not worth requiring boost 1.49 for this, and "a small edit in boost" scares the pants off me.
1023	5062872	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5062872	Diapolo	The small edit is uncommenting 3 lines of code that are already IN the tmp_dir_helpers.hpp ... I really would like to know what your problem with a boost update is? If you could explain it a little it makes it easier for me to understand, thanks.
1023	5063407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5063407	laanwj	With the amount of trouble it has given us, I think we can safely conclude that boost::interprocess is not ready for production use yet until upstream gets their act together. Also it seems aimed at much more complex use-cases such as sharing memory and objects instead of signaling simple lines of text between processes. When I have some time Ill try coming up with a QLocalServer/QLocalSocket based implementation.
1023	5074216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5074216	gavinandresen	RE: whats the trouble with requiring everybody upgrade to boost 1.49: boost is probably the hardest of our dependencies to get compiled and working, and somebody running an older version of Linux or OSX that spent a day getting boost 1.46 compiled and working properly to compile bitcoind isnt going to be happy if we tell them "you need 1.49 now, because we need that version to fix a bug in URI handling on Windows." They may not care about bitcoin-qt at all and certainly dont care about Windows....
1023	5074502	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5074502	laanwj	Gavin: I dont completely follow this reasoning. URL handling (and *any* usage of boost::interprocess) is limited to bitcoin-qt, if we required boost 1.49 for bitcoin-qt for Windows doesnt mean everyone has to upgrade. The rest of the code can remain backwards compatible. Also, even for bitcoin-qt, the older boost::interprocess works fine in Linux.
1023	5079425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5079425	Diapolo	Its to easy to say Linux / OSX users may not care about Bitcoin-Qt at all and certainly dont care about Windows. How many Windows users download the client and how many use the GUI version contra how many Linux users are out there? For example I never used bitcoind as Windows users like GUIs and thats a fact :). I could say I dont care about Linux users that want to compile bitcoind, but I dont do this :D. But Im fine with my work currently not beeing used ... even if no one ever tested it ;).
1023	5953721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5953721	luke-jr	wtf is with 1e39376? you just committed conflicts!
1023	5953846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5953846	Diapolo	Dunno how that happened, I normally dont include rebase-conflicts ;), should work again. Sorry
1023	6229399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6229399	Diapolo	Updated to reflect the last suggestions from the discussion, all commits will be merged after this gets final (if it gets final ^^), so I used NO speaking commit message!
1023	6801656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6801656	Diapolo	I will cherry-pick some of the changes and open a new pull.
1022	4873276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873276	laanwj	ACK
1021	4874937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4874937	Diapolo	I cant really comment on your code changes, but Im interested in some of the changes. You removed / changed how the global var addrLocalHost worked. There is now a list / an array which holds all local addresses, which can be used for bitcoin network connections. That one can be queried via GetLocal(), right? I understand this is needed for IPv6, but could that be used if a client had more than 1 NIC with internet connection, too? Is IPv6 external address detection possible like with IPv4 or is there a new mechanism in the protocol?
1021	4875044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875044	sipa	yes you can use it with multiple NICs; its even in a separate commit named "Support for multiple local addresses". IPv6 external address detection works the same way as IPv4, though IRC and whatismyip.com will obviously only tell you about IPv4 addresses.
1021	4875624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875624	Diapolo	Thanks for the infos How would I query or list all interfaces that are used for connections, is this possible with a single GetLocal() call somehow?
1021	4875823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4875823	sipa	GetLocal() queries the mapLocalAddress database; this contains the routable addresses detected on local interfaces, but also addresses discovered through UPnP, IRC, website lookups, or manually specified. Theres not really a way to link them back to interfaces anymore (though you can find those in debug.log, lines of the form "ipv4 eth0: 192.168.1.1").
1021	4876452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4876452	Diapolo	Im asking, because I have a small commit in the pipe, which displays the external IP as a tooltip when you hover the connection symbol in the Qt client. This would get broken by your commit and I wanted to know if I could make it work again (if it ever gets accepted - but it would be an added value to the GUI). To query all used IPs via a foreach or sth. like that would be nice.
1021	4877233	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4877233	sipa	You can query which potentially local addresses bitcoin knows about (just check the mapLocalAddress), but that is not the same as the addresses its reachable on (no way to know that for sure) or the address of local interfaces. Edit: you could just use GetLocal(addrBest, NULL), which will return the most likely publicly reachable address.
1021	5046199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046199	luke-jr	Needs rebasing. Sipa broke everything using locks. >_<
1021	5046510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046510	sipa	Yeah, Im a lock breaker. Rebased.
1021	5051835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5051835	Diapolo	Im sure IPv6 support is one of the biggest infrastructure things in the "Internet" ... would it perhaps be a good idea to offer an IPv6 enabled beta instead of merging directly into master? Thats no NACK btw!
1021	5051922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5051922	luke-jr	IPv6 is basically deployed by now. Even in the rare cases of ISPs behind the times or ancient routers, Windows will still setup a Teredo tunnel and Linux users can trivially configure 6to4.
1021	5052923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5052923	sipa	Ok, updated. * Foreign addresses (ipv6 when you are ipv4-only, for example) are now not stored in addrman, and only relayed to one node instead of 2. * USE_IPV6 is enabled by default by all makefiles
1021	5053064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053064	sipa	as soon as support for tor/i2p hidden services is added, youll probably need -externalip=something.onion to make your node advertize that address as well. It seems a bit strange to limit the function to IPv4 when the semantics are exactly the same for every network.
1021	5053073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053073	jgarzik	ACK
1021	5053324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053324	sipa	Socks version is now selectable using -socks=<n>.
1021	5288015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5288015	jgarzik	I would like to merge this sooner rather than later... we can always merge this with !USE_IPV6 for 0.6.1, for example, and then turn on USE_IPV6 on 0.7.
1021	5288083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5288083	sipa	I just split off the SOCKS-related changes to another pullreq.
1021	5397076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5397076	rebroad	is the -externalip=blahblah.onion working yet?
1021	5397097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5397097	sipa	No, that requires onioncat-style IPv6 addresses support.
1021	5650601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650601	sipa	Added -bind=[addr].
1021	5650916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650916	luke-jr	FWIW, I dont seem to be getting any IPv6 connections with this
1021	5651038	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5651038	sipa	how do you mean?
1021	5653559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5653559	luke-jr	I mean, I expect running with this should get me at least a few IPv6 connections..?
1021	5654372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5654372	jgarzik	Youre probably the only one besides sipa running an IPv6 node, so connection success seems doubtful
1021	5655410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5655410	rebroad	Im running this also, and I think I have IPv6 enabled.
1019	4866838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4866838	sipa	It looks all sane and functional to me.
1019	4873126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873126	laanwj	I have to think about point 2 a bit more though: do changes in statistics like the # of connections or the number of blocks trigger a MainFrameRepaint? I dont think so, and doing that could potentially result in a deluge of cross-thread notifications. It does make sense to poll those statistics with a timer, just not the well-delineated updates to the transaction list (and balance), address book.
1019	4883057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4883057	laanwj	To answer my own question: yes, MainFrameRepaint is called when the number of connections changes / number of blocks count. This is safe.
1019	4924943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4924943	sipa	ACK on the code changes to core, but needs rebasing.
1019	4948636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4948636	laanwj	Ok, this is all rebased and ready now.
1019	4949112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4949112	Diapolo	Small question in qtgui.h and nogui.h I saw "#define wxMessageBox MyMessageBox" , is there some old wx code in, that can be removed, too? Edit: Ah you removed that already :), nice and ACK!
1019	4949311	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4949311	laanwj	Yep! the only wx* definitions left are the flags to signal the message kind. They can be renamed, and a lot of can go, too, but I havent determined yet which ones are useful (also in the future) and what to rename them to. Lets leave that to a later decision. **Edit**: and can also be deduplicated and defined in a common header; there is no need to define them differently in qtui/noui.h. **Edit.2**: thinking about it, there is no need for separate qtui.h / noui.h headers *at all* if we dont define implementations in the headers, which would be a sane thing to do anyway. The distinction could be made by linking bitcoind against a different implementation file.
1019	4949418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4949418	Diapolo	Sounds pretty good.
1019	4951514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4951514	laanwj	Ive added another code cleanup / deduplication commit: Move from noui.h / qtui.h to one ui_interface.h with dummy implementation for the daemon.
1017	4873290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873290	laanwj	whoa, github makes this confusing list of commits. It may be better to submit this against coderrs coin control branch?
1017	4873310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873310	dooglus	Two problems with that: * coderrrs branch isnt rebased against 0.6.0 * coderrs changes use 2 spaces per tab, so pretty much every line needs changing to fit bitcoin I can make a single large commit if that helps.
1017	4873472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873472	laanwj	Thats a good point. My idea was that it is best to keep coin control development coordinated. Lets wait for
1017	4873514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873514	coderrr	just let me know what you guys want me to do
1017	4873538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873538	dooglus	I guess take a look at my pull request and let us know what you think. I changed a bunch of stuff, but for the better I think. The only thing I removed was the "balance plus tx fee" column, and replaced it with "balance of group". The "plus tx fee" isnt particularly useful because the fee changes depending on transaction size and input age.
1017	4873559	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873559	coderrr	Yea ive been watching what you were doing and it all seems fine, I didnt take a close look at how you optimized the algorithm but Im assuming its fine. Do you just need my ok or do you want me to squash your changes into the commit on my pull request or what?
1017	4873584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873584	dooglus	It really doesnt matter to me. ?
1017	5023176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5023176	dooglus	The coincontrol patch #415 was accessing walletModel outside the if(walletModel){...} block, but only recently started crashing on shutdown, possibly because bitcoin-qt now seems to wait for everything to shut down before closing the GUI? 9a525b2 above fixes the crash.
1017	5046182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046182	luke-jr	Needs rebasing. Sipa broke everything using locks. >_<
1017	5052268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5052268	dooglus	Thanks for the heads up. I rebased it.
1017	5105348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5105348	dooglus	I rebased it again, since it stopped merging cleanly again. Im a little unclear on what needs doing to get this merged. Is there something in particular thats holding it up?
1017	5105626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5105626	sipa	I think it will be merged for 0.7.0, together with a few other extra features. Were currently doing merges for 0.6.1, which will be a mostly bugfix & cleanups release.
1017	5105656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5105656	dooglus	I see. Thanks. Ill keep rebasing it then.
1017	5106924	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5106924	luke-jr	I do think the blank rows should be replaced with some kind of proper divider before merging, if possible.
1017	5140405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140405	jgarzik	No objections or NAK, but I really think that coin control is wasted code in general. 1) Average users will never use it. The total userbase we will be able to count on our fingers :) 2) Cleanups are nice, but coin control is really dead weight. If privacy is the goal, it is safer, easier, and less error-prone to simply use multiple wallets.
1017	5140449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140449	dooglus	I dont care so much about privacy. I use it to (1) see how much is at each address and (2) chose which address(es) to send from. For new users I think it helps them see whats going on behind the scenes, how new change addresses are created for each spend, etc. Maybe they dont care, but I would have appreciated this feature when I was first using the client. I dont see how its easier to use multiple wallets. Doesnt that involve maintaining multiple copies of the blockchain or running with -rescan whenever I switch wallets? And running multiple instances of the client or having to keep shutting down and restarting the client with different datadirs? Using coincontrol seems a lot easier to me.
1017	5140755	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140755	sipa	The current client presents the user with a ledger view to his money. Where this money is stored, and how the wallet transactions are mapped to bitcoin transactions is entirely abstracted away. This makes starting to use it easier, but its very confusing to people who want to learn whats going on beyond the scenes. I think the solution is both supporting multiple wallets in the client (and have actual "open wallet" -> choose file dialogs), as breaking the mapping abstraction for users who want it (this patch). It may not be used by everyone, but for those to whom it is important that they understand it, its essential.
1017	5140769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5140769	laanwj	I like the "lets them see what happens behind the scenes" idea. It gives advanced users and developers some more control over what happens. Also the feature appears to be pretty popular with the bitcointalk.org crowd. What I dont like about the implementation is that it makes CWallet stateful (setSendFromAddressRestriction etc). Would it be possible to pass the address restriction to sendcoins functions? Multiple wallet support would also be nice, maybe we could add that as roadmap item for 0.8.
1017	5141256	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5141256	jgarzik	We already have some multiple wallet support in the base code, thanks to sipa I think
1017	5141283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5141283	sipa	Yes, CWallet was written with that in mind. The problem is the bdb database environment. If you want to make wallets really portable files, which can be opened and closed independently, you need at least a separate environment per wallet, and - my preference - no bdb at all. Ive been working on an append-only wallet file system, which seems quite viable.
1017	5190509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5190509	luke-jr	Non-trivial rebasing needed.
1017	6279846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6279846	sipa	Is this superceded now?
1017	6281184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6281184	luke-jr	Yes, split into #1416 and #1359
1017	6282130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6282130	Diapolo	Guess if dooglus doesnt work on this anymore we should close this then.
1016	4853497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4853497	jondoh	The duplicate ampersands might be plaguing other translations as well; it was a simple search and replace.
1016	4857644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4857644	Diapolo	This needs to be fixed directly on Transifex, which is our translation master. Take a look at and look through the translated strings. I did this an discovered, that i.e. it reads "&amp; Kopiera till Urklipp" instead of &Kopiera till Urklipp. Im not sure if thats a problem with transifex or the translator.
1016	4857961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4857961	jondoh	I fixed the Transifex one now and Im closing this pull request. :)
1016	4857983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4857983	Diapolo	Thank you :)!
1014	4858521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4858521	sipa	Keeping the commas there makes patches that add new enum entries smaller and less conflicting. Is this actually a problem on any supported platform?
1014	4858599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4858599	Diapolo	Its "ugly" and unsupported, if the used compiler is not C++0x compatible. There should be coding standards for this, as everyone seems to handle this differently all over the source, which is bad practise IMHO.
1014	4873351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873351	laanwj	I think sipas patch-cleanlyness argument is pretty convincing. I see this as "in the future it will be allowed, so why bother fixing it". No compiler that I know of has problems with this (g++, clang, VC). And I suppose we will switch to c++0x when the time is right. If you like to clean up compiler warnings, there are more pressing ones to fix. For example, questionable type conversions and potentially dangerous signed/unsigned comparisons.
1014	4873822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4873822	Diapolo	Alright, but please lets do something about coding standards in general. There are some rules defined in the docs, but there are large parts of the code not using that.
1010	4828486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4828486	sipa	With this patch I did my fastest full block chain load from a local file yet, and did so with never needing more than 120 MiB of log files. After #1007 (which does not appear slower), this still requires 220 MiB.
1010	4828571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4828571	gavinandresen	ACK
1010	4830560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4830560	jgarzik	Not sure I see the value of the 200,000 hueristic.
1010	4833837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4833837	sipa	it was chosen after some benchmarks that counted the number of transactions between flushes. Flushing every 200000 transactions causes max 120 MiB log files, which seemed reasonable as long as it did not decrease block sync efficiency.
1010	4834845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4834845	jgarzik	Just the simple time-based heuristic would seem to suffice for both initial block download and thereafter. maintaining the 200k counter seems rather useless after I.B.D. completion. But no big matter... just a nit, not a NAK :)
1008	4828413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4828413	sipa	ACK. vDelete is obsolete now, but it may be necessary again soon.
1008	4830494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4830494	jgarzik	ACK
1007	4819145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4819145	jgarzik	ACK
1007	4823509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4823509	laanwj	ACK
1006	4797503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4797503	laanwj	ACK (for 0.7.0) and thanks for all the fixes!
1006	4797759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4797759	Diapolo	Its fun, I can contribute and dont need a deep understanding of all the undelying protocol code :). By the way, if 0.6 gets released, will the commits be accepted directly after? It seems there is currently a commit stop during the release phase. Im asking because thats the first time im somehow involved or affected by this and its exiting!
1006	4798241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4798241	laanwj	As I understand it: if no blocking new issues arise we want to generate a 0.6.0 final from master, which is the same as 0.6.0.5 except the version number. So we cant pull anything now. (of course, we could make another branch and pull on that, but this is easier and hopefully the delay wont be too long)
1006	4828646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4828646	sipa	ACK for 0.7.0
1004	4793143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4793143	sipa	Have you tested that this actually works? Ive been playing for a few hours now with DB_LOG_REMOVE, DB_LOG_AUTO_REMOVE, closing all db files occasionally, checkpoinging, flushing, stopping and restarting DbEnv, ... but all Ive seen are a lot of unexplainable segfauls, and not a single deleted logfile. EDIT: apparently it does. Im baffled.
1004	4793449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4793449	gavinandresen	Nice! Im baffled, too. I dont think this should be a command-line option, though: I think it should just happen, I cant think of any reason to keep gigabytes of logs around.
1004	4793503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4793503	dooglus	I tested it a lot before making the pull request, yes. It seems to work well in db5.1.25. I dont have db4.x. I think the logs are so you can do database recovery in the event of a crash. It seems that in the event of a crash we usually manage to clean up the logs before exiting however :) Ill update my patch so its not a command line option.
1004	4794055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4794055	sipa	Im testing a bit more extensive patch that counts the number of transactions updated or time since last flush as condition for flushing (instead of 5000 blocks), plus a few other changes. Im benchmarking now. Thanks for showing this was possible at all - I had almost given up (seems there was a bug in my load-blocks-from-file patch that didnt call txn_checkpoint at all, which prevented log cleaning).
1004	4794543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4794543	dooglus	No problem. I dont care what triggers the deletion so long as its done occasionally. To arrange for rapid blockchain downloading to test this Ive been using a second computer on the same LAN with a complete copy of the blockchain and connecting only to it.
1004	4794642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4794642	sipa	Ok, one full load of the blockchain up to 172000 (from a local file) completed in 35 minutes. Thats a few minutes slower than a previous benchmark, but it never needed more than 12 log files (of 10 MiB again). This did a log flush every 200k transactions (which was every 0.5-2 minutes). Ill post the code tomorrow.
1004	4794662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4794662	dooglus	How much of that was spent loading the blocks 168000 to 172000? The last checkpoint being at 168k makes the last 4k blocks so much slower to load. How about adding a new checkpoint before the release of 0.6.0?
1004	4795300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4795300	gavinandresen	grrr... So after WASTING time testing dbenv.set_flags(DB_LOG_AUTO_REMOVE, 1) this afternoon, I discover the correct call is actually log_set_config: dbenv.log_set_config(DB_LOG_AUTO_REMOVE, 1); Testing with a 10MB logfile size and the logs are automatically being cleaned up as the blockchain is downloading. (the set_flags call didnt trigger an error or warning because LOG_AUTO_REMOVE and AUTO_COMMIT share the same #define)
1004	4809925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4809925	sipa	So there are three options now: a) remove logs at given points b) flush + remove logs at given points c) use auto remove. I wonder if there is any danger in using auto remove (meaning logs will be removed while transactions/databases are open). I suppose not. Gavin, how many log files were present at most at one given time during the block chain download?
1004	4813463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4813463	gavinandresen	The most log files present at one given time with LOG_AUTO_REMOVE and 10M logfiles was 5. Typical is 2. Raw data (ls -l in the database/ dir run every 2 minutes):
1004	4826441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4826441	gavinandresen	Thanks for the help Chris-- without this pull I think we would have given up hope of finding a good solution. But Im going to close, because using AUTO_REMOVE (properly) is fewer lines of code.
1004	5082916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5082916	rebroad	I think it would be nice to have the option to exit bitcoin-qt without it flushing the database so that (presumeably) it can load the database quicker on the next run. This would be useful when frequently running and exiting the client between code changes and recompiles, and then the database flushing could occur intermittently during run-time only perhaps?
1003	4780656	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4780656	TheBlueMatt	Should that number be dynamically generated because the cache size can be changed?
1003	4780831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4780831	TheBlueMatt	ACK on the concept for 0.6.
1003	4780845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4780845	dooglus	Maybe. I wanted to make the change as simple as possible for now, but could make it some multiplier of (or addition to) the log size.
1003	4786341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4786341	dooglus	> Should that number be dynamically generated because the cache size can be changed? I added a couple of constants to db.h to define the in-memory log buffer size, and the max on-disk log file size, and used those in both places. I dont think this is related to the cache size - did you mean the in-memory log buffer?
1003	4787871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4787871	TheBlueMatt	Oh, Im sorry, I thought the max log size was set based on cli parameters now, didnt realize it was still constant. Anyway, like the addition of the constants too...ACK
1003	4791666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4791666	Diapolo	Small and good change!
1003	4826469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4826469	gavinandresen	Log file size has a negligible effect on performance, so it was dropped back down to 10M. It is the cache size that really mattered.
1003	4826661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4826661	dooglus	Isnt it still a good idea to have the size in one place only rather than in two places?
1003	4826782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4826782	gavinandresen	Yes, that is a good idea. Can you put another pull together for 0.7?
1003	4827209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4827209	dooglus	Ive updated this pull request with the change, but cant reopen the issue.
1002	4765810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4765810	laanwj	Good idea. I think there should also be a notification if an invalid URI is sent, to aid web developers etc in testing (hey, where did my url silently go) Op 28 mrt. 2012 15:21 schreef "Philip Kaufmann" < reply@reply.github.com> het volgende: > Current state of this request: > > added: > 1. validate bitcoin address in the URL before switching to sendCoinsPage > and pasting into the form, when a bitcoin: link is clicked > 2. validate bitcoin address in the URL before switching to sendCoinsPage > and pasting into the form, when a bitcoin: link is dropped on the > Bitcoin-Qt window (Drag&Drop feature) > > I verified both cases in my own build on Windows, which is based on RC5 > master. > > Dia > > You can merge this Pull Request by running: > > git pull URL-handling_2 > > Or you can view, comment on it, or merge it online at: > > > > -- Commit Summary -- > > * initial re-work on URL-handling code > > -- File Changes -- > > M src/qt/bitcoingui.cpp (22) > M src/qt/guiutil.cpp (5) > M src/qt/sendcoinsdialog.cpp (12) > M src/qt/sendcoinsdialog.h (2) > > -- Patch Links -- > > > > > --- > Reply to this email directly or view it on GitHub: > >
1002	4782840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4782840	Diapolo	Im going to add what you suggested :), sounds good.
1002	4790492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4790492	Diapolo	I added message boxes. A hint would be nice, if I should call "it" URL or URI ;)? Im also working on somewhat "hardening" the IPC code and I would prefer one of the two for every source comment, var name, function and so on. Edit: I will take URI in the message boxes and where a user can see it and retain the current naming and not change code, where not needed! Will update the strings tomorrow...
1002	4797065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4797065	laanwj	Nitpick: use notificator, not a message box Re: URI or URL, Im fine with either. Though URI is the most correct, more users know what URL means.
1002	4797109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4797109	Diapolo	Cool idea with the notificator, will see how that looks :).
1002	4797229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4797229	Diapolo	Changed to notificator, which is much better/smoother in terms of usability and usage flow.
1002	4885854	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4885854	laanwj	Can you please rebase this into one commit?
1002	4886330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4886330	Diapolo	Done :).
1002	5002052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5002052	Diapolo	Rebase to current master and all remaining URL / url were re-named to URI / uri ;).
1002	5051578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5051578	Diapolo	Rebased once more and fixed the 2 glitches luke observed :).
1002	5244846	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5244846	sipa	What does think about this?
1002	5255257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5255257	TheBlueMatt	Those are minor gripes anyway, ACK
1002	5262083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5262083	Diapolo	Ill look into your suggestions, even small glitches can be changed / fixed :).
1002	5407066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5407066	Diapolo	Rebased once more, merged the 3 commits into a single one and re-worked a few days ago to include one of suggestions.
1002	5585985	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585985	Diapolo	Rebased and reworded the commit message!
1002	5672312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5672312	Diapolo	Rebased and fixed merge-conflict. Can this get in please, if there are no further wishes?
1002	5674600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5674600	laanwj	I think this ones waiting for URI support to be resurrected. Otherwise, its kind of hard (and insensible) to test.
1002	5675362	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5675362	Diapolo	At least for Linux URI-support is in the client ;). And its working fine with my build ^^, just wanted to bring this back into devs-mind.
1002	5809058	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5809058	TheBlueMatt	I agree with here, we have a huge list of pulls piling up (dont we always...) and I see little reason to not pull this because URIs are supported, just not on Windows or Mac.
1002	5913154	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5913154	Diapolo	If this would get in, I didnt need to rebase and keep this current, so ... :).
1002	5954075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5954075	Diapolo	Updated to use toggleHidden() function for showing the window after a bitcoin-URI was clicked.
1002	6077490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6077490	Diapolo	Rebased to fix a merge-conflict.
1002	6301788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6301788	Diapolo	Rebased and changed back the use of toggleHidden() into showNormalIfMinimized() as another pull takes care of this. Can we please merge this with #1437!
1002	6320950	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6320950	Diapolo	Updated to fix a merge conflict.
998	4749407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4749407	laanwj	ACK
995	4710272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4710272	laanwj	ACK
995	4714741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4714741	sipa	ACK, of course. But lets not break rc5 for it.
995	4714842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4714842	Diapolo	100% agreed ... only wanted to let you know :)!
994	4700940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4700940	gavinandresen	ACK. Tested on my Mac via: 1. Run old code with lukes broken testnet/ dir : result: hang 2. Restore addr.dat with addr.dat.hang 3. Re-run with this patch : result : happy bitcoind sipa: any idea why this fixes the issue, or what the issue was in the first place?
994	4701066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4701066	sipa	No, I dont understand whats going on. I made bitcoind close the entire database environnement and create a new one when doing the rewrite, and it still blocks as soon as it tries to write a single value to the file. I have no idea what it is waiting for, but bdb calls pthread_cond_wait while there is only a single thread alive, which means a guaranteed deadlock.
992	4698668	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4698668	TheBlueMatt	ACK, somehow I could have sworn this fix was added several months ago...
992	4700454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4700454	gavinandresen	Modified to also remove the Program Files\Bitcoin\locale folder which is wxWidgets-only.
992	4700677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4700677	sipa	ACK
991	4698782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4698782	TheBlueMatt	1. #986 is a dead-simple patch which solves a known and well-documented issue in boost::interprocesses. What it does is clear and simple and there is no reason to avoid it. 2. This one has been discussed over and over again (weve had one pull request or another sitting around getting slow discussion about the possibility of attackers hitting bitcoin with URIs since before 0.4). At this point, I have yet to hear anything remotely convincing that could indicate an attacker could do anything remotely useful to attack this. 3. We already have to have a significant amount of time dedicated to 0.6rc5 testing before we can release, blocking URI handling on windows for 0.6 is really not the way to go. It is a very simple feature with one very minor bug (which manifests itself in several ugly ways). If there are still issues after #986 is merged in 0.6rc5, then yea Id say disable it until 0.7. 4. I really, really believe URI support is a very important usability feature (much more important than P2SH or many of the other things weve spent serious time implementing). It offers users a much, much more user-friendly way of making payto links and gives a much more professional and clean feeling to paying online merchants (which is one of the biggest use-cases for bitcoin today).
991	4699532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4699532	laanwj	Re: URLs that do bad things, any special reason that you think this is suddenly an issue? You ACKed it first time and I dont think this aspect changed. Given that there are no fatal bugs in boost::interprocess and the Qt URL parser, I think its pretty unlikely there are security problems.
991	4700244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4700244	gavinandresen	1. #986 is "a somewhat-hacky workaround" to a boost bug. 2. It has been discussed over and over again, and, apparently, been essentially untested. 3. Adding even more things to test in the 5->final release process is not a good argument. 4. I have strong reservations about bitcoin: URIs, especially given the recent report of Javascript-based bitcoin address rewriting trojans. I think we need a better solution to the problem: "how do we confirm that were paying who we think were paying?" RE: why do I suddenly think bad URLs are an issue: because when I see stupid-simple things like the setup.nsi file launching bitcoin.exe instead of bitcoin-qt.exe getting fixed this close to a final release it drives home the point that THIS FEATURE HAS NOT BEEN SUFFICIENTLY TESTED. Excuse me for yelling, this just feels like the wallet encryption (mis-)feature all over again.
991	4700729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4700729	sipa	Since apparently URIs didnt work at all in windows releases so far, I really dont mind disabling URIs for now to get 0.6.0 out, and re-enable them as soon as they have actually been tested.
991	4701165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4701165	laanwj	Im fine with disabling it for this release.
991	4701187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4701187	TheBlueMatt	1. Somewhat hacky in the sense that it doesnt bother fixing the issues with its COM usage, but instead just works around broken COM code. Just because its "hacky" doesnt mean its bad nor is it a reason to avoid it. 2. It was very thoroughly tested aside from the ipc issues (which only cropped up in bitcoin-qt, and were not there using the same code in wx). 3. Not really adding anything, because its already there, been tested on Linux/Windows, just caused a few bugs on Windows, which were found thanks to it being tested. 4. Yes, js trojans can just as easily rewrite URIs as addresses, but what is the difference? It doesnt change the security but makes it easier to pay... As for how we confirm we are paying who we think we are, any sane merchant should be using SSL and sane xss protection, which all but removes any threat of js trojans (aside from browser plugins hijacking stuff). If you want to try to block that, you can try to use aliases like the old requests but that only moderately helps. Any trojan can go and get its nice paypal.com domain with Cyrillic as and then you are equally as screwed... This gets into the rat race issue very, very quickly... The setup.nsi issue is an artifact of how old this stuff really is. Its been around forever, and so many people have seen it/looked over it/written it that I completely disagree with the assumption that it is untested. It was written by luke, rewritten by me, commented on by laanjw, gmaxwell, etc, etc. And has been in 0.6 since rc1.
991	4701290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4701290	laanwj	Right, the MITM issue is completely separate, and isnt worse with embedded URLs than with embedded addresses in pages or mails. The only way to protect against that would be to sign the URLs, but that brings the the whole web-of-trust/chain-of-trust shebang into bitcoin and should be considered carefully...
991	4701446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4701446	TheBlueMatt	If everyone thinks this needs disabled for 0.6, thats fine, though Im really tired of this getting kicked down the road, it was ready to go for 0.4...
991	4701564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4701564	sipa	There are certainly risks involved when using URIs to transfer information, but this does not "worsen" the situation if even a copy-pasted static base58 address can get intercepted and replaced by a trojan. I hope we can enable this feature quickly. I also dont mind using very boost-specific patches to workaround a known bug on windows platforms. That said, I dont mind delaying it to 0.6.1 or very soon for 0.7.0 if nobody even noticed it didnt work since 0.6.0rc1, when the dirty hacks can be sufficiently tested.
990	4701384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4701384	laanwj	Very good. ACK
990	4707036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4707036	jgarzik	ACK
989	7430748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430748	jgarzik	Well, there is clearly a user interest, if somebody paid for it, but it seems like this is subsumed by s recent miner/fee proposals. No apparent dev review interest. I looked over the patch, and technically appears to be correct. I dont object to it, but I think we need a gavin ack/nak here, and he may nak it given other work out there.
989	7437363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7437363	luke-jr	I agree this seems redundant given s recent changes.
988	4691076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4691076	laanwj	Programs that jump to the foreground when they want your attention are terrible. There are better ways; a blinking icon, a notification, etc. (remember that any js can send bitcoin urls) This is heavily dependent on the window environment so hopefully Qt has a function for it.
988	4693347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4693347	Diapolo	If I click an bitcoin: URL and nothing happens that is simply not good ... what do you expect from clicking a mailto: link? From my side I would like my mail client startet as the foreground application, have the address filled in. How is your preference here? How differ bitcoin: links from mailto: links? Ive never seen a script that spams me with mailto: and opens tons of Thunderbird windows :)?
988	4694372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4694372	laanwj	I just read that windows 7 does the right thing when activatewindow is called: blink the entry on the taskbar. No "focus stealing" is allowed. So this patch is fine.
988	4699990	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4699990	TheBlueMatt	ACK for 0.6
987	4686290	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4686290	TheBlueMatt	You really need to stop calling things bugfixes that arent ;). This is a code cleanliness change, no functional or user-visible changes are made.
987	4686309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4686309	luke-jr	I consider it a bug to say "apple" when it refers to a grapefruit :p
987	4687460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4687460	TheBlueMatt	I dont if its not user-facing and doesnt affect functionality.
987	4902384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4902384	luke-jr	Rebased, this should probably go into 0.6.1.
987	4998387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4998387	Diapolo	NACK, I think while we are working on the URI handling and the IPC stuff, there should be no cosmetic changes to the code, that only renames stuff. After the main work is finished Im fine with a rename to URI, but thats for sure a core dev vote :).
987	4999937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4999937	gmaxwell	Since we dont have any merge ready IPC fixes, Im inclined to take this largely cosmetic fix now we are in cleanup mode afterall, Sorry Diapolo.
987	5001580	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5001580	Diapolo	No prob, as long as Im allowed to say what I think ;).
986	4684399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4684399	TheBlueMatt	It seems to be a (somewhat hacky) workaround to
986	4684418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4684418	TheBlueMatt	Note that because /all/ of boost::interprocess is implemented in headers, this patch can be applied in contrib/gitian-descriptors/gitian-win32.yml or contrib/gitian-descriptors/boost-win32.yml I chose boost-win32.yml as it seemed more sane, but it does mean everyone ~~has~~ gets to rebuild boost
986	4685305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4685305	Diapolo	Prove me wrong, isnt boost::interprocess a compiled lib? It would make sense to get that bug fixed with the boost guys and use a safe work-around until this is done and we can upgrade.
986	4685806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4685806	TheBlueMatt	Though boost is a collection of compiled libs, as it turns out, boost::interprocess isnt. If you look in the boost source at boost/interprocess you will notice that there are no files that end in .cpp, all of them are hpp (header files). Nothing is compiled to a library in boost::interprocess. And, yes, it would be much better to have a nice workaround in bitcoin and let the boost guys fix the problem, however, afaict it would be impossible to do without modifying the boost source in some way (either removing the definitions of BOOST_INTERPROCESS_HAS_BOOTTIME, or this pull).
986	4688059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4688059	Diapolo	You are right, only true libs we have from boost are filesystem, program_options, system and thread.
986	4688212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4688212	Diapolo	I tested your fix and what it does (and what I should have observed before), is to create a directory in the boost_interprocess folder whose name is based on the Windows bootup time. This is broken in the official 1.47 and 1.49, too. I suggest we combine your work here and my work (with ipcRecover()), as there still could be a chance to have an orphan message queue file, but only during the current Windows session. Your fix ensures that after a restart a new folder with current bootup-time will be created and mine covers stale message queue files. Seems like a pretty decent combination :).
986	4688267	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4688267	TheBlueMatt	Yea, I dont think the two are at all mutually exclusive. If boosts interprocess stuff were to die with bitcoin (not sure how boost handles it, did I read that it was thrown in a service somewhere or something?) without the OS dying, the same issue could still appear that ipcRecover fixes. That said, I dont think we need to merge ipcRecover in 0.6, its more of a safety net and being (hopefully) this late in the 0.6 release cycle, I dont think merging it would be the best choice.
986	4688406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4688406	Diapolo	I updated it a few minutes ago, but I have no problem with getting it integreated into early 0.7. It were many many hours of debugging and trial and error, so it would be very nice, to include it :).
986	4858548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4858548	sipa	The patch looks sane to me, the only thing we have to make sure is that it remains compatible with a range of boost releases (past and future...). Also, I dont really like how this is limited to gitian builds. Is it impossible to do from qmake?
986	4866016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4866016	Diapolo	It would make sens to get this integrated with boost, so we would not have to handle it in the future. Are we allowed to modify the boost headers, so we can redistribute the fixed version of that file in i.e. the deps.zip for Windows?
986	4890172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4890172	Diapolo	Update in the boost discussion: I will try the latest boost SVN version tomorrow / later.
986	5056197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056197	Diapolo	See here what the boost dev had to say to your patch: I did some further tests and it seems with boost 1.49 its sufficient to edit a hpp as per
986	5056250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056250	TheBlueMatt	Yea, I never said it was suitable for upstream inclusion. It was written specifically to fix the issue in bitcoin.
986	5056357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056357	Diapolo	No problem I only wanted to point out that we could achieve better IPC handling without a monkey-patch :). Your initial work was great and helped me a lot to progress further, so thanks!
986	5056410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5056410	TheBlueMatt	Alright then.
985	4683006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683006	laanwj	ACK
985	4683015	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683015	Diapolo	ACK :)
985	4683034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683034	sipa	ACK
985	4683061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683061	sipa	how did click-on-URI even work, on windows?
985	4683082	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683082	Diapolo	I would say it didnt ^^, how should it, the exe could never be found.
985	4683087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683087	TheBlueMatt	In its merged form, it never did.
985	4683100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683100	Diapolo	Seems like a good thing that Im a Windows guy ;).
984	4681823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681823	sipa	Note that built-in seeds get a random age between 7 and 14 days ago. No reason why DNS seeds should be considered even older than that.
984	4682190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4682190	gavinandresen	ACK
984	4686120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4686120	jgarzik	ACK
984	4686298	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4686298	TheBlueMatt	ACK, sounds good to me.
983	4681068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681068	Diapolo	Every code cleanup is a good thing, Im with you!
983	4681788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681788	sipa	EOM = end of message?
983	4681812	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681812	sipa	ACK
983	4681893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681893	laanwj	yes, as in "the title says it all" :)
980	4669389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669389	TheBlueMatt	How does bitcoin-qt cope if you start a second instance which runs this patch (ie a testnet one and a mainnet one at the same time)?
980	4669552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669552	Diapolo	I will have to try this ... never used testnet before (does this work in the default and same data-dir?). But I have an idea if it causes problems in the current state. Perhaps I could add an "testnet" string to the message_queue name, which is now "BitcoinURL". Is there a utility function to query where I mine?
980	4669880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669880	TheBlueMatt	Adding a testnet string doesnt fix the problem, there are also valid uses for opening two bitcoin-qt.exes on mainnet at the same time (using different datadirs and ports).
980	4670034	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4670034	Diapolo	I will do some tests on this tomorrow. I dont even know if there are issues with your mentioned case at all, but thanks for your input :)!
980	4670756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4670756	sipa	1) can you rebase this into one commit? (15 is a bit excessive for a bug fix...) 2) there seem to be some coding style errors and unneccesary code moves. 3) if this indeed fixes #956, nice! that was the last blocking bug for 0.6.0, afaik.
980	4672501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672501	Diapolo	What do you mean by coding style errors, would be nice if you can point me to them, so I can fix it. I only added so many commits, to get some kind of history, will rebase.
980	4672663	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672663	Diapolo	Question on coding style, is it common to only use ex for exeption handling, no matter what type they are? If yes, I will revert that, too. And what about boost::interprocess::message_queue mq -> boost::interprocess::message_queue mqMessageQueue, good or bad? Im asking, because in bitcoin.cpp its still mq.
980	4672750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672750	Diapolo	But back to the test case ... as I currently cant compile Bitcoin-Qt with static libs, Im not able to run 2 instanced at the same time. But I think this definately needs some further investigation and clarification! So 2 instances with different ports and different data-dirs currently work on RC4? They even share the same message queue, right? Then this fix needs to take this into account and I have an idea, but need your thoughts. Current fix version will do the following (I assume now they share the message queue file BitcoinURL): - start 1st instance, BitcoinURL will be created, because of interprocess::create_only flag in ipcInit() -> OK - start 2nd instance, BitcoinURL cant be created, because its already there and the files is locked by the 1st instance -> triggers the exception interprocess::already_exists_error and tries to remove the file via ipcRecover(true) - this will cause an system::errc::broken_pipe error, which is catched and BitcoinURL is not deleted and should be normaly used in the further client execution, because in bitcoin.cpp we use "interprocess::message_queue mq(interprocess::open_only, "BitcoinURL");", which should work. Running 2 instances would trigger some entries to debug.log, but should not cause a program failure. What are your oppinions? Edit: Im off for a few hours, will be back later :).
980	4672850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672850	laanwj	So to summarize: If you start multiple instances, it will work, but the most recent instance will get the URLs? That behavior is OK with me. I dont think many people start multiple instances of bitcoin, and if they do, they generally have no use case involving a browser (more for servers etc...). However, it should be *possible* to start multiple instances with multiple datadirs.
980	4673669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4673669	Diapolo	Okay, so the latest version is more friendly in terms of what is displayed in the debug.log. stale message queue IS there and can be removed: ipcInit - boost interprocess exception #9: File already exists. ipcRecover - possible stale message queue found, trying to remove C:\ProgramData\boost_interprocess\BitcoinURL ...success This tries ipcInit() again! --- message queue IS there and locked (this would be if another instance is running): ipcInit - boost interprocess exception #9: File already exists. ipcRecover - possible stale message queue found, trying to remove C:\ProgramData\boost_interprocess\BitcoinURL ...unneeded This doesnt try ipcInit() again! --- (stale?) message queue IS there, not locked, but cannot be removed: ipcInit - boost interprocess exception #9: File already exists. ipcRecover - possible stale message queue found, trying to remove C:\ProgramData\boost_interprocess\BitcoinURL ...failed ipcRecover - removal of old message queue failed with error (value): (message) This doesnt try ipcInit() again! But URL handling will most likely not work ... --- Edit: I will rebase after the discussion is finished, if this is okay!
980	4681883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681883	sipa	Since this is a workaround for a boost-specific windows-only problem, I have no problem with using undocumented and windows-only boost internals. You do need to make sure it keeps working on other systems though, so enclose the fix in #ifdef WIN32 / #else / #endif, and try to keep the windows-specific part as small as possible. Youll probably need other #ifdefs to select specific boost versions as well, but for now that seems the only option. At least building on non-windows systems should keep working with all (recent) boost versions. Regarding explicit namespace or using namespace: do whatever makes the code easiest to read. I dont care.
980	4681991	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4681991	Diapolo	For now I will add the needed #ifdefs, so that the fix is activated only on Windows. After we are sure this works and breaks nothing, I will definately look into how I can write this in a platform independent way (new pull request and no blocking change ^^). Oh and thanks for the "using namespace" clarification ... that was in my mind, too. Easier to read code and better understandable code.
980	4682296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4682296	gavinandresen	It feels to me like this feature (click-to-open bitcoin: URIs) needs a re-think on Windows; poking boost::interprocess internals is a bad idea that we should avoid if at all possible. For the 0.6 release, Im inclined to disable click-to-open bitcoin: URIs on Windows entirely, and get a cleaner fix for 0.7.
980	4682454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4682454	Diapolo	Tell me the intended release date for 0.6 ... Im trying to get a cleaner fix ready.
980	4682705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4682705	TheBlueMatt	Due to the massive list of changes since rc4, we really need to push an rc5 and give it a while to simmer before we can really release a 0.6 release (IMO). In that case, I have no problem merging this and poking windows-only boost internals, as long as all the changes in here are within #ifdef WIN32s
980	4682826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4682826	Diapolo	May I suggest the following, as this one has plenty of commits, I will rebase it into a single one with the current code here. It could then be used in a possible RC5, but I would really like a dev to test a compilation and execution with Linux / Mac before, as I cant do this. During the testing phase of a possible RC5 I have time to work on a cross-platform compatible version without the use of boost::interprocess internals.
980	4682864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4682864	sipa	Dont worry, we wont merge it if it doesnt compile cleanly.
980	4683134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4683134	Diapolo	Last commit does not use any boost::interprocess internals, it works and removes stale message queues (tested this after I once more crashed / switched of my Windows machine to create a stale mq). If an existing message queue is detected the first try is to remove it. If its locked (i.e. by another BC instance) that wont work and I try ipcInit() again with the open_or_create mode on the message queue to use it. If the stale message queue could be removed, ipcInit() is called once more with the create_only mode for the mq and a new one is created. Perhaps I can now even safely remove the #ifdef WIN32, but this should be checked by the Linux / Mac devs. Edit: The old ipcRecover() is in just for reference during the discussion, I would like to remove that one and change ipcRecover2() into ipcRecover()!
980	4684338	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4684338	TheBlueMatt	An alternative to this that (should) work and also fixes #981 can be found at: though its more of a hack since I really, really dont feel like diving into the win32 apis and figuring out whats going on in that ugly mess.
980	4684387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4684387	Diapolo	I compiled Bitcoin-Qt with boost 1.49 and that did NOT fix this bug. Is your commit a backport from boost > 1.47 to 1.47?
980	4684457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4684457	TheBlueMatt	No, that commit is something I wrote, afaict boost has not yet fixed the bug (though it was filed 12 months ago as )
980	4696339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4696339	gavinandresen	Im going to be the "bad guy" for this one and take the conservative route: lets get this fixed and thoroughly tested early in the 0.7 release, and disable bitcoin: URI handling on Windows for the 0.6 release.
980	4696386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4696386	sipa	Given #985, it seems URIs never worked on windows anyway...
980	4696747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4696747	Diapolo	The URI feature is little known, so perhaps the problem with URI handling in general was not observed, since no one ever used it on Windows (i.e. because currently there are very few links out in the internet). Im fine with 0.7 ... you would only be the bad guy, if you said that code sucks all over the place, go away ;) ... but you didnt do that.
980	4703048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4703048	Diapolo	Would the main devs prefer a rebase now, so that its a single commit or after its discussed, tested and finished?
980	4713076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4713076	Diapolo	Rebased with current master and fixed up a little git mess I created ...
980	4831547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4831547	Diapolo	Doh, this one seems completely obsolete in the light of my current work on the IPC server and URI-handling code. Its a pain in Windows to use a "file" for doing IPC communication it seems (at least when things go wrong ^^). There a severe handling problems with stale / wrong mq files and the combination of 2 Bitcoin-Qt instances ... but I made some good progress. I would like to close this one tomorrow and will publish my work until the weekend, so it can be discussed and reviewed!
980	4865795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4865795	Diapolo	Closed!
979	4654690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4654690	laanwj	NACK Im fine with sending the output somewhere else, but keep it behind a #define please. It produces huge amounts of output, to the point of slowing down the UI considerably.
979	4671291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4671291	luke-jr	Hmm, didnt seem like that much to me... just about once per AddToWallet, right?
979	4672181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672181	laanwj	Every time the timer runs, at least...
979	5585453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585453	jgarzik	nakd, agreed, closing
979	5586624	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586624	laanwj	Note that #1205 adds debug logging for UI updates (but not as verbose as to flood the log).
976	4643564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4643564	luke-jr	Were you able to reproduce the crash *before* this change? I guess not, because this wasnt fixed in Boost until 1.48!
976	4643806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4643806	Diapolo	I debugged that crash during RC2 and its clearly related to boost interprocess, see: As I have never been able to compile bitcoin with the supplied 1.43 libs with the current Qt SDK I could simply not try to reproduce the error in the "lab", sorry.
976	4644022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4644022	luke-jr	How about using the stock release builds to try reproducing it?
976	4644167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4644167	gavinandresen	RC2 used the gitian build process, which uses Boost 1.47. See contrib/gitian-descriptors/gitian-win32.yml It WOULD be interesting to know if upgrading to the latest boost (1.49) fixes the problem.
976	4645469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4645469	Diapolo	What you mean by stock release builds? Is there a place to download the pre-compiled boost libs which were used in RC2? I would like to make a file-compare. Another thing that is weird for me ... why is 1_43 in the bitcoin-qt.pro and why does it compile on Gitian without that VariantClear error? Ill try to "crash" my PC by simply shutting it of, while I have a running instance of my version ... :-/. Which MinGW version is used in Gitian?
976	4646248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4646248	Diapolo	1.47: - switch off PC with running client, reboot, start client -> GUI freeze 1.49: - switch off PC with running client, reboot, start client -> GUI freeze 1.49 fixes one thing unrelated to Bitcoin on Windows, now C:\ProgramData\boost_interprocess\ is used instead of C:\ProgramData\boost_interprocess\Select LastBootUpTime from Win32_OperatingSystem\ ... So the problem still persists and I will investigate further!
976	4650219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4650219	Diapolo	Boost 1.48 has a very nice fix to remove that strange "Select LastBootUpTime from Win32_OperatingSystem" directory (https://svn.boost.org/trac/boost/ticket/5392) used by boost interprocess on Windows and 1.49 includes more bugfixes for interprocess (http://www.boost.org/users/history/version_1_49_0.html). This does NOT solve #956, but as I said it has other fixes and at least the mentioned one that is beneficial for solving/debugging #956 further I think and yes Im on the right track ^^.
976	4671286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4671286	luke-jr	I think this is missing the gitian changes to build/use the new version?
976	4672689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672689	Diapolo	Sorry no, the commits are current and mergeable. What do you mean by gitian changes? A link or hint would be nice, still treat me like a newb :D, Im learning everyday.
976	4696225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4696225	gavinandresen	gitian is the deterministic build system we use, that sets up a virtual machine environment with known versions of EVERYTHING and then builds in such a way that bit-for-bit identical .exes come out of multiple developers machines. It means anybody can verify that we are using the source code were saying we are to build the executables that we distribute (except for Mac, everybody has to trust me because we cant gitian-build the Mac release yet). Source code for the gitian-build process is in contrib/gitian-descriptors/ Windows builds use deps-win32.yml boost-win32.yml qt-win32.yml and gitian-win32.yml If you want builds to use a different version of something, you (or somebody) needs to change one or more of those files.
976	4696880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4696880	Diapolo	To summarize, the bitcoin-qt.pro file I edited is only of interest for people who compile it for themselves, like I currently do. So a change to that file is of no benefit for official releases, but at least helps others in compiling, right?
976	5052016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5052016	Diapolo	Closed, Im using a modified version of this for my local version, seems unneeded here.
975	4637735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4637735	gavinandresen	ACK, planning ahead for future upgrades is something we need to get better at.
974	4644305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4644305	gavinandresen	Thumbnail sketch of test plan: + Create a wallet using 0.3.* version of bitcoin + Run 0.6, create a couple of new keys via getnewaddress RPC + Verify: 0.3.* version of bitcoin can still read wallet, version number in wallet is old Repeat for 0.4 and an encrypted wallet. + Run 0.6 with -walletupgrade arg + Verify: version number in wallet is new, new keys are compressed + Run 0.6 with a brand-new -datadir + Verify: version number in wallet is new, keys are compressed Those are the use-cases I care about.
974	4650548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4650548	sipa	Results of test: start with a 0.3.24 wallet start 0.6.0 (master + this pull) reported wallet version is low request 101 new addresses validateaddress reports that all are uncompressed start 0.3.24 validateaddress reports that earlier address are ismine start with an encrypted 0.4.1 wallet start 0.6.0 reported wallet version is 40000 request 101 new addresses keypool runs out unlock wallet request 101 new addresses validateaddress reports that all are uncompressed open 0.4.1 validateaddress reports that earlier address are ismine unlock wallet unlock succeeds start with an 0.3.24 wallet open 0.6.0 -upgradewallet reported wallet version is 60000 request 101 new addresses validateaddress reports that the last one is compressed start 0.5.3 error start with an 0.3.24 wallet open 0.6.0 with -upgradewallet=50000 reported wallet version is low encrypt wallet open 0.6.0 report wallet version is 40000 start with an 0.3.24 wallet open 0.6.0 encrypt wallet open 0.6.0 reported wallet version is 60000 start with no wallet open 0.6.0 reported wallet version is 60000 request new address validateaddress reports it is compressed start with no wallet open 0.6.0 with -upgradewallet=50000 reported wallet version is low request new address validateaddress reports it is uncompressed
974	4666646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4666646	gavinandresen	ACK
974	4669103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669103	TheBlueMatt	Code-read ACK, though do we want to enable compression when we encrypt wallets in 0.6 or only encrypt and set minversion to 0.4? Though maybe I dont understand why we would want to do an "explicit" upgrade when encrypting. Also, what, exactly, is meant by an "explicit" upgrade?
974	4669224	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669224	sipa	Explicit upgrade = the user takes an action from which one can reasonably expect that it makes the wallet incompatible with older versions. Wallet encryption is such an action (and for now, the only one). Also, when an upgrade is done, it always upgrades all the way, unless a parameter is passed to -upgradewallet, and that constraint does not need to be broken.
974	4669243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669243	TheBlueMatt	ACK
974	4670803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4670803	sipa	A summary of the policy implemented by this patch: * -upgradewallet and -upgradewallet=0 force an upgrade to the latest version * -upgradewallet=<version> allows (but does not force) upgrades up to version <version>, unless the user takes an explicit action that requires upgrading beyond <version>, in which case an upgrade to the latest version is done. * no argument is identical to -upgradewallet=10500 A simplified summary: * Wallets are not automatically upgraded, unless the user specifies -upgradewallet, or takes an explicit action that requires an upgrade. In both cases, we upgrade to the latest supported version.
973	4631598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4631598	TheBlueMatt	I did test downloading from block 143XXX to current tip and didnt see any issues (nor even any warnings about send buffer being full, which makes sense given that this is downloading from one local node to another)
973	4632301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632301	jgarzik	Looks like fun stuff to play around with... building now. Disagree with the minor AddAddress debug change. Once a node is running, these messages are (a) minimal and (b) useful. Better approach is to start separating messages at a much more fine grain, by introducing, e.g. fNetDebug (network-related messages) and fTxDebug (tx/mempool-related messages)
973	4632595	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632595	TheBlueMatt	Everything short of the last commit is part of #771 and is just here because I had that branch checked out when I wrote this, plus I dont expect this to get merged until 0.7 anyway, so there is no point doing it on master. And agreed on the more finely controlled Debug messages, but AddAddress gets really annoying when you are reading debug.log right after startup (which, if you have an error, its likely to occur closer to startup anyway) Maybe one printf per AddAddress...
973	4632709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632709	sipa	addrman has significantly less address messages (it adds groups of incoming addrs at once).
973	4632897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632897	TheBlueMatt	Ah, well Ill go drop that commit from CBlockStore then.
973	4640072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4640072	Diapolo	The strings explaining -maxreceivebuffer and -maxsendbuffer should be updated to reflect the change of the default size.
973	4642821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4642821	TheBlueMatt	Oops, good point...fixed.
973	4643828	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4643828	Diapolo	Helping and get helped, right ;).
973	4884899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4884899	gavinandresen	The "dont disconnect" part of this change worries me. If an attacker can connect to you 100 times from 100 different IP addresses and then fill up the send buffer on each connection thats bad. I suppose they could try to fill up your send buffer minus 1 byte now...
973	4888418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4888418	TheBlueMatt	This patch doesnt change the difficulty of eating 10MB of any nodes ram. Also, I dont see much option in the way of disconnecting nodes for eating too much ram in buffers, we may end up just killing nodes behind 24.4k modems. Or atleast I dont trust myself enough to write any kind of such code.
973	5589308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5589308	jgarzik	ACK
973	6162400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6162400	TheBlueMatt	Rebased.
973	6279391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6279391	sipa	What if a node sends you a good new latest best block while the send buffer to that node is full, and then disconnects? Probably not a real issue, and I certainly likes this approach more than the earlier hack to cut off the 500 block invs earlier when size exceeds the buffer.
973	6331904	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6331904	sipa	ACK
973	6605208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6605208	gavinandresen	ACK
972	4632334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632334	jgarzik	Code appears correct. It would be nice to see -checklevel documentation somewhere besides the git log.
972	4632366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632366	sipa	Ive done a level-6 check on a full blockchain without any found errors (takes around 10 minutes in combination with fastblocks). Note that even level 6 does not do signature/script checking. Also: agree, check levels should be documented. But where?
972	4637890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4637890	gavinandresen	Where to document: How about a doc/troubleshooting file that describes how to use -checkblocks and -rescan and -dumpblock and any other undocumented goodies hiding in the source code?
972	4638208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4638208	gmaxwell	Id really like to see the level turned up on the initial check, but I dont think we can do this until were more confident that the check is incorrect. Perhaps make it run with the higher level on the initial check but only yell in the logs if it fails any of the harder tests? Can you think of a way of detecting that the database was copied from another node? Doing a complete check at the highest level would go a long way to making blockchain downloads safer. (My concern being data errors creeping into a popular download site causing a massive fork)
972	4638691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4638691	sipa	Benchmark, with blk0001.dat and blkindex.dat entirely in OS cache before bitcoind startup: -checkblocks=10000 -checklevel=?: [1,3,10,20,20,27,45] seconds -checkblocks=172354 -checklevel=?: [6,22,57,122,123,153,274] seconds
972	4639165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4639165	sipa	What do you mean, only yell if it fails any of the harder tests? Failing the easier tests is probably much worse.
971	4627504	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627504	luke-jr	Bleh, I bet boost has a const for this or something? :/
971	4627598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627598	laanwj	Is this really needed? Using / should be perfectly fine on win32. All the OS functions can cope with slashes both ways.
971	4627806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627806	Diapolo	Will take a look here: ... sorry if Im a bit over-motivated to contribute, but at least it would be more aesthetic to have no mixed paths with \ and /.
971	4627905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627905	laanwj	Yes maybe boost has something like Python path.join(), thatd be nicer than having to special-case it all over the place :)
971	4628864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4628864	Diapolo	pathxyz.make_preferred() is what I need :). POSIX: no effect. Windows: convert slashes to backslashes. Is there interest in me redoing my commit? This would not work for strLogDir and strErrorFile as these are strings.
971	4633499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4633499	Diapolo	Updated to use the Boost filesystem::path.make_preferred() function and modified the change for the db dir and db.log.
971	4637909	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4637909	gavinandresen	NACK. I hate #ifdefs.
971	4639510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4639510	Diapolo	Updated to only use Boost filesystem::path and removed all of my former WIN32 #ifdefs!
971	4639708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4639708	laanwj	Much better. Code changes are ok w/ me now, this ofc needs testing on all concerned platforms.
971	4639884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4639884	Diapolo	Right, needs testing, but at least path.string().c_str() were already used in the code and are verified to work. I can say on Windows it looks good, Wallet Backup works and paths in the debug.log are now Windows-style.
971	4659437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4659437	Diapolo	Rebased to keep pull request compatible :).
971	4669277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669277	TheBlueMatt	It seems to me this adds more function calls to more complicated functions to give os-specific path separators when, though an os may prefer one or another, it accepts both. So it seems like this just slows down and complicates non-performance-critical code for absolutely no reason?
971	4669490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4669490	Diapolo	On Linux or POSIX OSes make_preferred() does nothing, so no harm here. On Windows, I as a Windows user really hate Log-Files or whatever, which display a POSIX style file-path, even if its supported. What would Linux users think, if there were backslashes in path-names ;)?
971	4672157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672157	laanwj	Using OS-specific path separators is the right way; weve been "lucky" in that we only have to deal with two path separators, and one OS accepts both. Still it might be better not to rely on such (legacy) behavior. And if we later want to show the paths in UI (for example, if we add the diagnostic dialog box) we also want them to be sanitized to the OS. I dont think the performance argument holds, this is not inner-loop code and is only called once on initialization. Im 100% sure the boost function is not that slow to make any noticeable difference here.
971	4673857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4673857	Diapolo	Im with as performance is really a not existing problem with 4 more make_preferred() calls out of any thread and the main-loop.
971	4674370	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4674370	TheBlueMatt	I said performance wasnt critical here, but its always nice to keep in the back of your mind when coding. The issue I have is that it complicates the code further for very little gain, though I suppose if it ends up confusing users when it gets printed to debug.log, I suppose it really doesnt matter either way.
971	4682186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4682186	gavinandresen	ACK for 0.7
971	4703804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4703804	Diapolo	Rebase to current master.
971	4858283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4858283	Diapolo	Last commit is for bitcoinrpc.cpp, which now uses make_preferred(), too. I fixed some small coding style glitches, to match the changes to be even to the ones in db.cpp. The "boost/filesystem.hpp" header is already included before the #ifdef USE_SSL, so I removed that.
970	4625799	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625799	luke-jr	Code-visual ACK.
970	4627839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627839	laanwj	ACK, patch looks OK
970	4632216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632216	jgarzik	ACK
970	4632302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632302	sipa	ACK
970	4632621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632621	TheBlueMatt	ACK
969	4625530	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625530	gavinandresen	ACK. I love pulls that remove code...
969	4632432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4632432	sipa	ACK
969	4633440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4633440	laanwj	Indeed, removing code always feels good
967	4612428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612428	laanwj	Thanks for the correction. Phew, almost revealed that Im posting this from the far future.
966	4608721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608721	gmaxwell	Nak. :( Logging IPs of identifying things by default would make it profitable to go around breaking into nodes in order to backtrace announcements. However, Id ack a non-default option to log IPs for blocks (and other things too) though.
966	4608723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608723	TheBlueMatt	NACK - this makes it valuable to collect debug.log from users systems to trace transactions/blocks back to IP Addresses, which should not be trivial.
966	4609317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4609317	gavinandresen	NACK. RE: making it optional: maybe -blocknotify could optionally pass the IP into the notification method.
966	4617129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4617129	jgarzik	Plenty of NAKs, including mine
966	4617313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4617313	luke-jr	Since it seems people are getting the wrong impression from this pullreq... It was proposed by a pool member who noticed the mystery jerk miner (making transactionless blocks) was relaying them through Eligius. This handy-but-simple change enabled me to get the real IP of the actual server making these blocks. The objections given herein by other developers are logical concerns, and I have no qualms with the pullreq being closed unmerged.
965	4608064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608064	gavinandresen	I couldve sworn -Wextra included -Wformat. Maybe it does on later versions of gcc....
965	4611411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611411	laanwj	ACK
964	4608148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608148	jgarzik	ACK. The one-line checkpointing change probably had the largest impact.
964	4608240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608240	sipa	Time to load 133k blocks: NF: 30.4 LC: 8.6 LC+NF: 5.1 LC+NF+NS: 5.0 LC = large cache (100 MiB cache, 100 MiB log, 10 MiB log buffer) NF = no flushing every 500 blocks NS = open database env with DB_TX_WRITE_NOSYNC The larger db cache size has the largest impact.
964	4611440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611440	laanwj	ACK. Nice!
964	4617109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4617109	jgarzik	Interesting. I guess the large cache helps with all the lookups needed to validate each block. Because we are looking up random hashes, there is likely zero cache locality from one lookup to the next.
964	4625729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625729	gavinandresen	ACK
964	4628947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4628947	sipa	The only thing Im worried about is that the longer interval between log flushes means more/larger log files, which may causes out of disk space errors.
964	4631920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4631920	gmaxwell	During the initial syncup you end up with ~2 gigs of database logs in any case we dont clean them up until shutdown (or the next startup? I forget). Ive tested this on three systems, ACK.
962	4602241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602241	luke-jr	I think you are confusing connections and *outbound* connections?
962	4602380	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602380	Diapolo	Outbound connections are the real IP connections from the "internet" to my PC running the node, the value that is shown in Bitcoin-Qt if you hover the connection quality symbol. I dont say the commit is perfect, perhaps it includes errors, but it does what I wrote above ;).
962	4602439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602439	sipa	Outbound connections is the number of connections your node makes to other nodes. Inbound connections is the number of connections your node receives. What bitcoin-qt shows in the hover text the sum of these two, and that is what -maxconnections limits.
962	4602543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602543	Diapolo	MAX_OUTBOUND_CONNECTIONS was set to 8 in the code and I saw that a maximum of 8 TCP connections were established no matter, if -maxconnections was set > 8. So the number of 125 was not reached, right? With my changes this is fixed and the value of -maxconnections works. So perhaps I missunderstood some wordings, but I think there is a problem here with the original code.
962	4602585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602585	gavinandresen	NACK: we dont want to increase the number of outbound connections past 8. 8 is plenty.
962	4602615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602615	sipa	If you do not get more than 8 connections, it means that you dont accept incoming connections (firewall issue, typically). -maxconnections is not supposed to change the number of outbound connections (you dont need more than 8, and the number of nodes that accept connections is limited, so we shouldnt overuse these).
962	4602809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602809	Diapolo	Seems I missunderstood something, but perhaps someone can explain to me, why I only see a max. of 8 "active connections to Bitcoin network" in the client and why this changes with my commit and why there is a default of 125 in the GetArg-call for -maxconnections used in a comparison with nInbound?
962	4602829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602829	luke-jr	Youll see more if your internet connection properly accepts *inbound* connections...
962	4602889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602889	Diapolo	I see more, if this commit is active ... does "active connections to Bitcoin network" sum inbound and outbound as that could explain the numbers, because there are more outbound connections active.
962	4602979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602979	TheBlueMatt	Switching to making it easy for people to make a ridiculous number of outbound connections (really, anything more than 8) just makes it easy to DoS the network. Yea its not hard, but you have to atleast be able to compile bitcoin, whereas making it easy to do with just command line flags opens us up to "Your node may be under-performing (because your connection bar doesnt have full bars!) you should set -maxconnections or -outboundconnections high to get full bars". See; the -hubmode crap that was popular a while ago... Note: the connection bar wont let you have full bars without INCOMING connections to encourage people to properly forward their ports, not to make them find more outgoing connections.
962	4603021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4603021	sipa	If you only see 8 connections, it is because you only have 8 outbound connections (which is limited to 8, and it should), and no incoming connections (because of a firewall issue). Your patch changes the number of outgoing connections. Yes this will mean more total connections as well, but that is not the correct way to achieve it. The solution is fixing your firewall.
962	4604876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4604876	Diapolo	One thing, which was a faulty firewall configuration (instead of allowing 8333 as local port, I chose remote port) on my side is fixed by a reconfiguration (thanks for the hint). And I now understand that only a maximum of 8 outbound connections is wanted per design of the client and to make it harder to DoS the BC network. What I still dont understand is the real value of the -maxconnections setting and why the default is 125. If a dev would be so kind and help me in my learning process :).
962	4608286	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4608286	gruez	storage and network connections are two very different things. as more peers join the network, it actually becomes easier to broadcast your connection, not harder.
962	4611728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611728	Diapolo	My intention is to understand and learn, so I looked in for an explanation and there its stated: "Outbound Limiting ... The first thing the loop does is count the number of outbound connections, and if the maximum has been reached (8 or -maxconnections), then it goes into a 2 second delay loop until the count is below the max." That code is in ThreadOpenConnections2 and Im asking, if the wiki is obsolete or the code has a bug, because -maxconnections will never be > 8, because of "min(8, (int)GetArg("-maxconnections", 125)" and will allow to disable outbound connections completely if you set -maxconnections=0 or < 0. Inbound connections are handled via ThreadSocketHandler2 and I should simply remove that change and we can safely ignore that in the discussion from now on :).
962	4612651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612651	rebroad	Ok, so if the network became smaller then nodes might need more than 8 connections? With my ISP Im not allowed incoming connections. Is the max of 8 always going to be sufficient for nodes that will never be able to receive incoming connections?
962	4622989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4622989	Diapolo	I let this one open for another day or two and then close it! Till then more comments are welcome :).
962	4627587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627587	sipa	Can you please explain in words what this patch is supposed to do? I dont see any problem with the existing behaviour.
962	4628259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4628259	Diapolo	The patch does not do, what it should do, because my FW didnt allow incoming connections from the outside, which limited the total number of connections for my node to 8 (and these were outbound). 8 is perfectly fine and I read in the Wiki thats defined and wanted behaviour. What I dont understand is, why GetArg("-maxconnections", 125) is used in the function ThreadOpenConnections2 used for managing outbound connections, because its not possible to go above 8 for outbound. You use -maxconnections for out- and inbound summed up, right?
962	4628528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4628528	sipa	Because if you specify -maxconnection=4, you do not want more than 4 connections, and a fortiori not more than 4 outgoing connections.
962	4628697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4628697	Diapolo	It takes its time but okay I see ... so 125 as default for in- and outbound connections with a hard limit of 8 for outbound and the possibility to lower this further.
961	4610750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4610750	luke-jr	Doesnt the current implementation work fine? I dont see why MTT should be blamed for the apparent bug in #855...
961	4611395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611395	laanwj	Seems I read a mail out of context. Put this on hold for now :)
960	4602284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602284	laanwj	ACK
960	4603141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4603141	TheBlueMatt	ACK
960	4604126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4604126	gmaxwell	ACK.
960	4605681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4605681	jgarzik	ACK
959	4611125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611125	luke-jr	Dont ask me how, but this makes bitcoind and Bitcoin-Qt both segfault at startup (after " wallet 9172ms")... (I didnt try to interrupt anything)
959	4611487	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611487	laanwj	Returning true from AppInit2 implies that initialization succeeded, it should return false when interrupted.
959	4612156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612156	rebroad	- Ill assume you mean every time. Have you compared with the version my changes were based on? What does gdb show? My changes are so few, and especially if youre not exiting during the load, I struggle to believe it would be due to this change.
959	4612252	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612252	rebroad	I initially coded it to return false but changed it to true as 1) it made the code smaller, 2) its not failing, 3) would you normally expect a return code of false from any program that exited only because the user requested it? In answer to 3, the answer is no, and so I believe and function should follow that logic. Returning true doesnt go against and C standards that I know of either.
959	4612359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612359	luke-jr	I couldnt get a useful backtrace out of gdb. git bisect blames this change, and indeed removing it fixes the problem.
959	4612479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612479	laanwj	How does this "make the code smaller" if you return true? The UI code will assume that initialization was successful and display the main window, right? Edit: and yes, many programs return non-zero return status when forced to terminate by a signal.
959	4612480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612480	rebroad	What OS are you using? P.S. are you sure youre not some Manchurian candidate or perhaps a cylon without knowing it?!
959	4612496	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612496	luke-jr	Gentoo GNU/Linux (32-bit x86 stable)
959	4612535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612535	rebroad	No. But if LoadBlockIndex returns false then AppInit2 will display an error without additional code.
959	4612540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612540	rebroad	Ok, so how would you code it to allow it to be killed during the block index load?
959	4612547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612547	luke-jr	I dont see anything wrong with the way you did it. Maybe when Im more awake I can be of more help tracking down the segfault.
959	4612561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612561	laanwj	Im not saying that LoadBlockIndex should return false in this case, but AppInit2 should. See `src/qt/bitcoin.cpp`. If AppInit2 returns true, it will spin up the UI.
959	4612615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612615	laanwj	Though this shows the limitations of using boolean return values to signify conditions more than anything else :-)
959	4625693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625693	rebroad	- ah, so it does. Thanks, I will change this. Im currently debugging to find the cause of the SIGSEGV mentioned.
959	4629590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4629590	rebroad	ok. There was a bug, which Ive fixed with the fixup. This was also the cause of the SEGV initially reported by Thanks Luke!
959	4704027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4704027	rebroad	Hi would you be willing to ACK this please to confirm that the issue you found has been resolved please?
959	4950953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4950953	sipa	ACK on the changes. The direct "return true" from AppInit worried me, but the only thing necessary is shutting down the database environment, which happens automatically anyway. Can you rebase this into one commit though?
959	5181524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5181524	gavinandresen	ACK assuming lukes issue isnt an issue.
959	5185544	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5185544	jgarzik	Seems sane, though it would be nice if the two commits were combined into a single one, before it hits upstream.
959	5185549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5185549	luke-jr	It seems to be in the next-test that Ive been using regularly for a week now, so its probably safe. Id want to test it out specifically before I give it an "ACK" myself, but dont wait on me.
959	5188125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5188125	rebroad	sorry Ive not combined these two changes into one. If someone can tell me the git commands to do it, Id be happy to oblige. :-s
959	5188550	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5188550	sipa	go to your working directory, checkout this branch ("git checkout LoadBlockIndexKillable"), fetch upstream ("git fetch upstream"), rebase against master ("git rebase -i upstream/master"), you should see an editor now with two commits listed, change the "pick" of the second on to "fixup" (meaning that it needs to me combined with the previous one), save and exit the editor. You should now have a rewritten branch with one combined commit. Push that to github (using git push -f).
959	5196553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5196553	sipa	Do a "git reset --hard" in advance. This will throw away any local changes you may have made in the current branch. If you dont want that, commit them first. If you want to chat about it, come to #bitcoin-dev on irc.freenode.org (using an IRC client, or on
959	5196573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5196573	rebroad	ok, that worked.. (except I had to do a "git stash" before the rebase - Im not sure why it said there were other changes...)
959	5207437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5207437	sipa	ACK
959	5215546	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5215546	laanwj	ACK
954	4573084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4573084	Diapolo	By the way, this pull request does intentionally NOT include a fix for as that would mess up the translations for "Wallet", which needs some time to get re-translated.
954	4612014	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4612014	laanwj	ACK
953	4569926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4569926	Diapolo	Thanks I fixed that one via another commit (via the same procedure as described above).
951	4567753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4567753	TheBlueMatt	There really is no reason to allow nodes to request all of the headers from where they are in the chain to our max block + 2000...
951	4642329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4642329	gavinandresen	ACK for 0.7. Not high enough priority for 0.6 IMHO.
951	4725470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4725470	mikehearn	Looks good to me
950	4566337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4566337	sipa	Note that this only fixes this issue for newly encrypted wallets. We do not rely on it for security however, so I do not think there is enough reason for reencrypting old keys.
950	4567003	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4567003	TheBlueMatt	ACK for 0.6. Update: after incrementing min-version.
950	4574612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4574612	gavinandresen	NACK for 0.6 : maybe pull early in 0.7 and thoroughly testing backwards/forwards compatibility, although if it creates yet another wallet.dat variation that is not backwards-compatible then Im not sure the cost is worth the extra security benefit. (cost is incompatibility with earlier releases and third-party wallet tools)
950	4575693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4575693	Diapolo	Im currently of no help coding wise, but I think an extra security benefit is not only nice to have, but a must. I agree its a bad idea to include such a wallet-compatibility change at the end of the 0.6 development, but does wallet.dat variation really matter (i.e. is there a standard defined, when this is allowed and when not)? Is there a safe way to, lets say, force all wallets to use the latest BC client encryption algo / functions, when first used with a new client version?
950	4576568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4576568	TheBlueMatt	Oops, this needs to increment wallets min_version. I dont see why there is any objection to making another wallet version that is non-backward-compatible: wallets in 0.6 are already not compatible with any previous versions, so this is just another change that makes them further incompatible. In fact, I would say its better to put this in 0.6 than in 0.7, so that 0.7 wallets arent incompatible (again) with 0.6 wallets. Properly implemented 3rd-party wallet tools should still work fine, or could be made to work with very minimal changes.
950	4576885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4576885	sipa	(edited) oh yes, indeed, it needs a min_version update
950	4998626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4998626	luke-jr	Is this sane now with the -walletupgrade thing?
950	5002796	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5002796	sipa	Ill update this to be compatible with -upgradewallet.
950	6279172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6279172	sipa	Closing this as it is outdated. Will reopen when redone properly.
949	4565862	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4565862	gavinandresen	ACK for 0.7
949	4678114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4678114	luke-jr	This breaks in combination with (now merged) #969.
949	4679931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679931	laanwj	Yes, Ill rebase it when 0.6 is released
949	4879311	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4879311	sipa	Can you rebase?
949	4916611	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4916611	laanwj	rebased I suppose we can get this into 0.6.1?
948	4567008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4567008	TheBlueMatt	ACK for 0.6
948	4574364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4574364	gavinandresen	ACK
947	4574392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4574392	gavinandresen	ACK
946	4598876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4598876	luke-jr	This should also take care of the issue for non-gitian users.
946	4598895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4598895	gavinandresen	Can I get an ACK from Matt?
946	4599409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4599409	TheBlueMatt	ACK if says it doesnt break anything when built on Win32.
946	4625505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625505	laanwj	Shouldnt we actually pass MINGW_THREAD_BUGFIX to qmake somewhere in the gitian file?
946	4625594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4625594	TheBlueMatt	Its on by default, so it doesnt matter...
946	4626370	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4626370	laanwj	QMAKE_LIBS_QT_ENTRY -= -lmingw32 This causes an undefined reference to Winmain@16 when building in Qt Creator in Windows. Any specific reason why are you subtracting it? Is mingwthrd supposed to be a full replacement for mingw32? (I dont think so)
946	4626400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4626400	luke-jr	What if we add -lmingw32 onto the end of LIBS (after -lmingwthrd)?
946	4626666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4626666	laanwj	Ive tried it. Same problem...
946	4626791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4626791	luke-jr	How about: QMAKE_LIBS_QT_ENTRY -= -lmingw32 QMAKE_LIBS_QT_ENTRY += -lmingwthrd -lmingw32 DEFINES += _MT
946	4627039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627039	laanwj	Also tried. Same problem. Every time I add the `-= -lmingw32` line it fails...
946	4627330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627330	luke-jr	What link command is it trying to use, with the last 3 lines I posted?
946	4627426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627426	laanwj	Ive got a working one: QMAKE_LIBS_QT_ENTRY -= -lmingw32 -lqtmain QMAKE_LIBS_QT_ENTRY += -lmingwthrd -lmingw32 -lqtmain
946	4627585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4627585	luke-jr	Aha, great. Really too bad qmake doesnt have a prefix operator, though. Can anyone test that this creates a secure build when cross-compiling? (Otherwise, I can do it when 0.4 rc is done building)
946	4629356	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4629356	luke-jr	Found a way to do a prefix. please test on native Windows. Im doing a cross-gitian build now.
946	4630314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4630314	TheBlueMatt	ACK, the build gave me to test worked fine.
946	4642440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4642440	gavinandresen	Rebase into one commit? And a final ACK from ?
946	4642560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4642560	luke-jr	Done
946	4644731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4644731	laanwj	ACK, this works
942	4550498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4550498	gmaxwell	I think this has basically missed the window under which it can be included in rc4 without further delay. But I dont see any issue in pulling translation fixes any time before final release.
942	4550557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4550557	Diapolo	Well the fix is a rather small one, so that should be no problem if its in the final release. Is it okay to open a pull request only for a specific language? I can help with the german one and thats what I m trying to do :).
942	4552404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4552404	tcatm	Please use transifex for translations! Its not easily possible to merge changes to transifex so they will get overwritten the next time transifex is merged to git.
942	4552728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4552728	Diapolo	I downloaded the Transifex translation after I made tha changes there and used that file in the commit, so everything is okay. Am 17.03.2012 08:22, schrieb Nils Schneider: > Please use transifex for translations! Its not easily possible to merge changes to transifex so they will get overwritten the next time transifex is merged to git. > > --- > Reply to this email directly or view it on GitHub: > >
941	4540319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4540319	gavinandresen	ACK : and I agree with removing it (either completely or for Linux/Mac) if it still doesnt work.
938	4513836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4513836	TheBlueMatt	~~Nevermind, Ive solved the problem.~~ Well, OK maybe not quite, but I am getting closer.
938	4516673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4516673	laanwj	If were going to disable it, please add an error message, dont ignore the flag silently.
938	4521317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4521317	TheBlueMatt	Done.
938	4545513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4545513	TheBlueMatt	Changed to fix the problem itself.
938	4545527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4545527	gmaxwell	ACK.
936	4496980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4496980	gavinandresen	What does think?
936	4500429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4500429	forrestv	I dont see any reason to separate submitblock, further cluttering the RPC interface, if the old way will continue to be supported. Other than that, looks good!
936	4500932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4500932	luke-jr	I only kept the old way in there for backward compatibility. Theres really no reason to use the same method for two different functions - its like sending coins using getbalance. More importantly, "getmemorypool(&lt;data&gt;)" doesnt provide any way to communicate the reason for rejections. During BIP discussion, some developers expressed interest in keeping the JSON-RPC protocol HTTP-independent, and abusing HTTP headers like getwork does violates this. There is also a need for passing "features supported" from clients to getmemorypool() so that clients can opt to not implement "noncerange" and inform the server on their support (or lack thereof) of other features (so it might possibly optimize its own processes based on that). So far, nobody has come up with a backward-compatible way to do this; perhaps it would be desirable to ignore non-string <data>, so that a future draft can turn it into an options Object?
936	4501072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4501072	forrestv	Ah, I see. ACK then.
936	4574464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4574464	gavinandresen	Too late in the 0.6 release cycle for a new RPC call. I think we should pull this early in the 0.7 release cycle so it gets lots of testing.
936	4951055	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4951055	sipa	I disagree with the term bugfix here, but ACK on the changes.
936	5054319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5054319	jgarzik	ACK (and agree w/ sipa on term)
936	5673965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5673965	luke-jr	Rewrote based on recent BIP 22 revisions, including longpolling support.
936	5790996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5790996	luke-jr	Moved longpolling to #1355
936	5791259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5791259	forrestv	ACK, now.
936	5804140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5804140	luke-jr	Eligius has been running this from block 179513 (56 blocks found) and EclipseMC from 180573 (11 blocks), totalling 67 valid blocks with no problems found.
936	6053914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6053914	luke-jr	Rebased, plus the changes to BIP 22 discussed on IRC (getmemorypool now requires exactly one argument, the parameters Object, but tolerates the old calling methods for compatibility) Also stripped whitespace when parsing JSON Object in bitcoind-CLI-test-tool (while it could just convert input to Object regardless, it seemed sensible to keep the CLI working with older servers).
936	6242406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6242406	sipa	Ive been trying to send a mail to the mailing list about BIP22, but it doesnt seem to come through. As its a bit too long to paste here, you can read it on
936	6243007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6243007	jgarzik	can you pipe that through "fmt -72" or similar? Even raw requires a horizontal scroll bar, which is unreadable in these modern times...
936	6243140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6243140	sipa	done
936	6244868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6244868	luke-jr	Hope this addresses everything: 1) Servers are not required to have access to the transaction database, and miners may wish to include transactions that have not been relayed on the main network. 2) The "submit/hash" mutation allows miners to replace actual transaction data with a reference, for servers which support this. The pull-request here does not support this functionality, since it is unlikely to be needed in bitcoind (solo miners and downstream pool servers are probably always going to be local and without bandwidth concerns); there are also mutations which servers can opt to use to allow miners to omit the transaction list entirely when it hasnt been modified, effectively reducing the bandwidth requirements to the same as getwork 3) Your suggestion for a list of required coinbase outputs would involve specifying a format for that list, and actually increases the complexity since the same thing is expressed by what is effectively a boolean right now. I see the benefit of doing it that way, to allow miners to claim fees of transactions they add themselves - but what if a pool doesnt want to allow that? 4) With restricted coinbase input, it is possible for servers to implement BIP 22 in the same way as they currently use getwork, but allowing miners to still audit the block they are working on. 5) Clients are not required to support noncerange limiting, so the added complexity is itself optional 6) "time/\*" can usually in practice be ignored, since it is implied if the min/max are provided; it is listed so it is clear the time can be changed, and so servers might have a defined way to express "change the time to anything you want" - its specified explicitly by bitcoind since there is no practical upper limit to the time miners can send it. 7) The use case for adding transactions is... so miners can add other transactions. Kinda half the point of decentralized mining IMO. :p 8) I dont mind removing "transactions/remove", but Id rather just note it as being always implied to express that it can be done explicitly 9) "prevblock" mutation is for the scenario where the miner has validated a new block before the server 10) the "required" key on transaction objects is necessary for the flexibility of pools negotiating contracts for transaction acceptance, but "txrequired" allows saving a lot of bandwidth; I agree the mutation should be implicit given these two other methods 11) "mintime" and "maxtime" are needed in addition to their "\*off" versions, for servers such as bitcoind which only care about the network rules; in this case, "mintime" is a fixed time, not related to the current time at all. 12) "target" is needed to allow shares of varying sizes; pools *do* make use of this 13) "workid" is needed to allow the server to identify which work issued the block is being submitted against, so it can properly validate the share 14) Transaction objects must include sigop count, as there is no way for dumb miners to calculate it thanks to BIP16
936	6246562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6246562	gavinandresen	you didnt respond to the big-picture design question about whether you agree that BIP22 is over-complicated. I agree with I think there are way too many optional features, different ways of doing things, etc.
936	6247705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6247705	luke-jr	"Overcomplicated" is relative based on what it needs to do. I think for the most part (there are exceptions, which I hope to simplify based on sipas suggestions) BIP22 as it is cant get *too* much simpler with its given requirements.
936	6249907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6249907	gavinandresen	I guess and I think maybe youre throwing in too many requirements. I say start simple, and if there is demand for a feature add it later. Im OK with planning ahead with a design that allows stuff like adding/removing transactions, but thats a feature Ive never heard "dumb miners" say they want. Also: being explicit about the requirements in the BIP might help. I see only a very vague description of them in the motivation section.
936	6254547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6254547	luke-jr	Optional things means *fewer* requirements, not many. "Dumb miners" dont care about any of this, theyre fine using getwork with centralized pools. BIP22 is aimed at "smart miners" which want to (at least) audit the blocks theyre working on to keep Bitcoin secure against potential poolop attacks. One practical superiority of decentralized mining is that miners are restored the freedom to choose their own minimum fee policies - that requires being able to pick and choose transactions that go into their blocks. At the same time, pools negotiating bulk fees has been an accepted "plan" for a while, and BIP22 can support that also. I will try to expand on the Motivation section.
936	6256660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6256660	luke-jr	Updated BIP22 based on and s suggestions. Unless there are problems with the subset of BIP22 supported by bitcoind (in this pull request), however, lets move BIP22 discussion back to the mailing list. I dont think it makes sense to hold up this pullrequest due to unrelated concerns.
936	6274690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6274690	luke-jr	Rebased addressing Gavins most recent comments.
936	6299418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6299418	sipa	One thing that still bothers me in the implementation is that is supports different decompositions for transactions. I understand the fee/sigops/dependencies/size meta-data is necessary, but do we really need to retain the origin (hex) encoding as well? Sure, dumb miners dont need this, but the protocol is aimed at non-dumb miners.
936	6302079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6302079	luke-jr	Smart miners dont necessarily have a transaction database available either. In fact, Im not aware of a single getmemorypool client that has easy access to one right now.
936	6302107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6302107	luke-jr	Also, support for fetching transaction list as hashes exists for non-mining tools (I find it handy via the CLI as a human, to see what transactions are in the mempool). Support for fetching them as hex only is mainly a backward compatibility thing.
936	6331784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6331784	sipa	What I was talking about in my latest comment here, is the availability of {"tx" : "hex"}, as {"tx" : "obj"} provides a strict superset of that. It would indeed mean breaking backward compatibility, indeed.
936	6620044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6620044	luke-jr	So... seems nobody has anything else that needs addressing - time to merge?
936	7430556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430556	jgarzik	Conditional NAK[1]: pick one of DM_OBJ or DM_HEX, not both. ACK, if one of those is removed. [1] Red Hats "conditional NAK" means that if the described condition disappears, then the NAK disappears.
936	7460894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7460894	jgarzik	Looks good to a quick review. Ill have to apply the patch and read to be thorough. Please edit the OP to indicate name change and consensus "why?" opinion.
936	7461493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7461493	luke-jr	Will do as soon as we have a final on the new name. I emailed so hopefully hell provide input next time hes got email access.
936	7463196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7463196	gavinandresen	Encore on the name. -- Gavin Andresen On Aug 2, 2012, at 11:02 AM, Luke-Jr<reply@reply.github.com> wrote: > Will do as soon as we have a final on the new name. I emailed so hopefully hell provide input next time hes got email access. > > --- > Reply to this email directly or view it on GitHub: >
936	7468702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7468702	jgarzik	The following review comes from reading the code directly, and may or may not reflect a change you made. Regardless, it is something that warranted a note. 1) is mode=foo the preferred form? if yes, update help text to reflect this. 2) help text is missing description of time 3) like getwork this should prevent any progress if !connected || IBD. presently, it only does that check for template mode. 4) if strmode==submit should be "else if" 5) would prefer optional BIP 22 sections moved to another BIP 6) BIP 22 fails to document everything getblocktemplate handles, such as e.g. mutable. Other keys are listed in BIP 22 as required, but your patch does not provide them, like coinbasetxn. Review and sync up code and BIP.
936	7468835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7468835	jgarzik	7) Submit mode should mimic getwork, and return true if the block is accepted, or false if not.
936	7473067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7473067	luke-jr	1) Neither form is necessarily preferred; what is important is that the code doesnt take a path if its set to something unexpected. 2) time was for backward compatibility: removed 3) Why should submissions be prevented if not connected? Right now, its possible this node has no network connections, but is getting its blocks (only) from a JSON-RPC source (perhaps HAM radio?) 4) Changed. 5,6) The pooled mining sections are moved to BIP 23. coinbasetxn is not required, since coinbasevalue is provided, and its not very trivial to add (it would break the template caching). 7) Accepted design flaws in getwork are not reasonable to propagate into new protocols. (Please review past getwork and BIP22 discussions, and keep in mind bitcoind is *not* the only or even primary focus of this protocol)
936	7698920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7698920	sipa	ACK
934	4455664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4455664	TheBlueMatt	Needs to be added to contirb/linux-download-config and contrib/win32-download-config as well. I would also say requiring more than 3/7 sigs would be nice, so maybe increase minimum_weight to 150 (4/7).
934	4455781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4455781	luke-jr	Like that?
934	4455955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4455955	TheBlueMatt	If you increase minimum_weight, sure. Anyway, this absolutely needs a Gavin ACK.
934	4480457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4480457	gavinandresen	ACK
934	4611782	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611782	laanwj	ACK, the more gitian signers the merrier (and I think we can reasonably trust luke-jr a bit by now :) )
934	4651480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4651480	luke-jr	Remade with my new 8192-bit PGP key (my old one was 1024-bit, which concerned some people); the old key has signed this new one.
934	4658316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4658316	sipa	
934	4658392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4658392	Diapolo	That one is so cool ^^.
934	4658417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4658417	luke-jr	At least now they have to manage to drug+coerce me. Which means a significant chance I shoot them first. :p
934	4658481	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4658481	sipa	(I must admit, I have a 4096-bit RSA key...)
932	4443382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4443382	sipa	I suppose this also requires an increase of the network protocol number. Looks good to me, otherwise.
932	4443548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4443548	mikehearn	Yes, I was assuming that would happen automatically once 0.7 starts development.
932	4443649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4443649	sipa	Since BIP14 was introduced, client versions and network versions are independent. In fact, the network version hasnt changed since.
932	4463196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4463196	TheBlueMatt	Ive always kinda wondered why we have a ping command that doesnt do anything...does this need to be BIPified? It probably needs a version number bump, so I guess?
932	4469089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4469089	mikehearn	Yeah the patch is incomplete. Ill add another commit soon. We need to send a nonce with outbound pings too. On Mar 12, 2012 11:25 PM, "Matt Corallo" < reply@reply.github.com> wrote: > Ive always kinda wondered why we have a ping command that doesnt do > anything...does this need to be BIPified? It probably needs a version > number bump, so I guess? > > --- > Reply to this email directly or view it on GitHub: > >
932	4480352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4480352	mikehearn	How does it look now?
932	4480729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4480729	TheBlueMatt	Given a post to the mailing list with no significant dissent, ack.
932	4487181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4487181	gavinandresen	ACK for 0.7
932	4599773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4599773	rebroad	Not sure if this is the right place to ask, but what exactly is being pinged and by what?
932	4600571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600571	Diapolo	Your node by a remote node.
932	4600614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600614	rebroad	How are nodes uniquely identified in order to know how to route the ping?
932	4600741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600741	Diapolo	Im sure its not like an ICMP ping, but a ping via the normal "message flow" between nodes, so if nodes can talk to eachother this ping would work. I think of it as a heartbeat check-alive signal.
932	4601500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601500	rebroad	Ok, so if its not a ping, what is it? Is it a check-still-responding then? What would be the impact/harm of this change not happening? I think the answer to this last question should always be included by default in the description of any pull request, IMHO.
932	4601516	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601516	sipa	It checks whether the connection is alive.
932	4601657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601657	Diapolo	Its a feature, not a bug-fix, so it extends the nodes possibilities to interact with eachother.
932	4601744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601744	rebroad	Im fine with clients having extra functionality added which isnt part of the core bitcoin protocol, but this change confuses me as theres an increase in the protocol number associated with it. Id understood bitcoin wasnt supposed to be changed in ways that werent part of the core functionality, i.e. transferring and storing of money/bitcoins, otherwise what is to stop the protocol from becoming taken over by other non-core functionality such as things like torchat, etc (which Id not be against, but I do think it should be transmitted over a separate protocol so that non-compatible clients dont have to deal with the noise). If it goes away from the core basis of bitcoin, I think it should be bitcoin protocol independant. Based on the "its a feature, not a bug-fix", is my assumption that its not core bitcoin functionality correct?
932	4601972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601972	sipa	Bitcoin chose to implement its own network layer: the p2p protocol thats part of its functionality. I believe this was worth it, but it also means this layer must work well and be maintained, even if its not its goal but only a medium to achieve it. As Mike noted, it would be useful to have a ping reply functionality at this layer, and I see no reason to object to it.
932	4602441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602441	rebroad	Well, I agree that if theres a ping, there ought to be a pong, otherwise, what does the ping alone achieve? I do agree that a connection needs a way to determine if its still active/operatonal or taking up limited (file descriptors, memory, bandwidth, etc) space with no benefit. If this does that, then I support this change.
932	5055396	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5055396	jgarzik	ACK, but IMO this needs a BIP
932	5055439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5055439	sipa	agree
932	5068540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5068540	mikehearn	That seems a little heavy, but alright:
932	5073234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5073234	jgarzik	I just created a fork that includes a few minor changes, in pull req #1081: 1) removes the actual protocol version increment. IMO this should be external to the pong message commit. and under the principle of making code self-documenting... 2) use a named constant rather than a magic number for version behavior switching. bitcoin code is too full of magic numbers, and we should resist adding more. 3) place that constant in sipas newly minted version.h, as a central location for future version-related constants like this.
932	5073658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5073658	mikehearn	1) Why should the version increment be in a different change to the actual new functionality? Doesnt that just increase the risk of confusion with people running betas/dev builds? Its a number, incrementing it is cheap :-) 2/3 - sounds good to me.
932	5585706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585706	sipa	merged as #1081.
931	4443411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4443411	sipa	ACK
931	4455597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4455597	TheBlueMatt	ACK
931	4567176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4567176	gmaxwell	ACK.
930	4463120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4463120	gmaxwell	Ack. Passes my testnet reorg tests.
929	4600235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600235	Diapolo	I even dont know, what Tonal means, never heard of it ... guess Google is my friend.
929	4600314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600314	luke-jr	Tonal Bitcoins provides another use-case for Bitcoin. Right now, Bitcoin appeals to libertarians, anarchists, and some other groups. By supporting more languages, Bitcoin extends to people who dont speak English. By supporting non-decimal numbers, Bitcoin can extend to those who use or prefer those numbers too. No modern fiat currency can be used effectively with Tonal, so for those who prefer it, this is a "killer feature".
929	4600475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600475	Diapolo	Okay, I propose this should be opt-in somehow, as I would not like it to be shown as a default. I think it would scare "normal decimal users" and make the GUI unnecessarily complex, which is bad for everyday users. If "Only available on dropdowns when a Tonal-compatible font is installed" means I wont see it, Im fine with it ^^.
929	4600577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600577	rebroad	I still dont understand why anyone would prefer it. Surely one unit is sufficient - should it start supporting binary, hexadecimal, pi-base, etc too? I think there needs to be a rationale for introducing this base over any others that also exist.
929	4600675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600675	luke-jr	As I said in the summary, TBC units are only available on dropdowns when a Tonal-compatible font is installed. Most (all?) operating systems dont include Tonal-compatible fonts by default, so likely only Tonal users would see it as an option. rebroad, the book explains how decimal is flawed and why tonal is much better and easier for humans. I dont think decimal vs tonal makes sense in this forum.
929	4600800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600800	Diapolo	As I said, if it dont bothers me or everyday users Im fine with it from the technical side.
929	4600861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600861	rebroad	decimal vs tonal makes perfect sense in this forum, which is a forum discussing this change, which is a change directly related to decimal vs tonal. To avoid a discussion on decimal vs tonal is to avoid discussing this change, isnt it? Ive read the wikipedia article on tonal, which seems to be the same as hexadecimal, which I am familiar with, having used it on a BBC Micro for a good decade or so. I see why its useful to use hexadecimal with things such as network masks, as they are already based on base 2. Bitcoin numbers are not, and therefore I see no logic in introducing a new base, based on 16, pi, or any other number when there is already one (base 10) established and in use. I also dont see why 1 BTC doesnt equal 1 TBC. Why was it decided that 0.0001 TBC = .00000001 BTC? Seems a bit arbitrary to me. The problem I have with this change is that it sets a precedent, where the end result is not clear. If we add this, do we then add any other base anyone else fancies adding, and if not, what argument would there be not to? Its clear to me there needs to be a strong reason for this base (and a rationale for why its fixed 0.0001 to 0.00000001 as suggested) over any other base that could be added in order to avoid an unhealthy precedent.
929	4601036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601036	luke-jr	The change isnt about forcing anyone to use either decimal or tonal, just extending the diversity to more people who already use tonal. Would you argue against using Spanish on a pullreq to add the Spanish translation? You clearly havent read the Tonal System book, or else you would know that it isnt the same as hexadecimal (though the radix is common), and how it is more useful to human for general everyday numbers than decimal. English is established and in use, but does that mean software shouldnt be translated into other languages? The world is a big place. Also, USD and Euro are established and in use. Why use Bitcoin?
929	4601132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601132	rebroad	To compare "tonal vs decimal" to "english vs all other languages" is I suspect a vacuous truth. Of course other languages need to be supported - they are already in use. Bitcoin is worthwhile despite USD and Euro existing as it provides needed advantages. What advantages does this change provide? Its a simple question. Can you give a simple answer? Preferably a shorter answer than a book written centuries ago which no one has heard of.
929	4601232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601232	luke-jr	Tonal and Dozenal are also already in use. Bitcoin is worthwhile to me *because* of its fitness for a tonal adaptation. The simple key advantage to Tonal over Decimal, is that Tonal is easier for humans to work with, since it is based on just 2s rather than 2 and 5 (which is unnatural to the human mind).
929	4601281	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601281	rebroad	Ok, I should have said "of course, other languages are needed, not everyone speaks English". Do you know anyone who doesnt understand decimal? 2 hands. 5 fingers. Very natural to the human mind. Is there something youre not telling us, Luke?! And a better language analogy to this change would be to suggest translation for Klingon was necessary. Actually, that sounds kinda cool - Id support that change :)
929	4601610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601610	luke-jr	I know plenty of currencies that work with decimal. If I wanted to use a decimal currency, Id just use those. How many (adult) humans use their fingers for numbers generally? Usually you do numbers in your mind, where fingers are of no relevance. The human mind does not work well with 5s. This is why almost every unit of measurement humans have naturally come up with have been binary, dozenal, or tonal. The modern metric system (SI/decimal) has only ever been adopted by force, and even to this day has notable resistance under persecution in countries that enforce it (except on the decimal clock and calendar, which most everyone has given up on). Also, note that even when finger-counting is helpful, its much better suited to tonal since you can do a full digit on each hand (ie, 0 through (15 deci) on one hand, or up to (255 deci) on both).
929	4601819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601819	sipa	I disagree 2 and 5 is less natural. I do agree using only 2 as a prime base may have advantages, and Im a huge fan of using other number bases for fun. That said, in my opinion changing the number base people count in, is harder than changing how people count dates, count time, expect red to mean stop in traffic, the language they use in daily life and which food they eat, all at once. In your private life you do as you please, but it is unrealistic to assume youll ever be able to use anything but decimal when communicating with a stranger - the critical mass of people using decimal is just too overwhelming. For all those not accustomed to using tonal, just adding support for it is a burden: more options people will need to learn the meaning of, more code that needs to be maintained, while it doesnt add or improve anything.
929	4601915	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601915	luke-jr	It does add/improve the "reasons people use Bitcoin instead of USD" list, at the very least. I could just as well argue that any of the pulls trying to increase anonymity are more of a burden with no *legitimate* improvement.
929	4601957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601957	rebroad	Luke, so far this change seems to be based on a number of untruths. The bitcoin wiki article on tonal had a number of inaccuracies, which I have edited to correct. e.g. its not infinitely divisible, as bitcoins txs have limited decimal places, and its not easier to use than decimal for most people I know. How many people are going to remember that 1 BTC = 1525.87890625 TBC? It just introduces confusion for no apparent benefit. Take this article, for example : - there are two rows both called Bitcoin, but with different values. It almost seems that this tonal proposal borders on sabotaging bitcoin by introducing such ambiguity. I dont only think its not a healthy change, but actually an unhealthy one. I cant imagine any exchanges referring to TBCs either as it would mess up all their exchange rates unless the currency being exchanged was in base 16 also. Im fairly certain that base 10 has not been "forced on us by governments", rather, its existed as far as history can remember because we have 10 fingers, and its the most obvious and easiest to use for humans. Youve still not explained why 1 BTC doesnt equal 1 TBC or why it was decided that it would be 0.0001 TBCs that equals 0.00000001 BTC. This are important considerations, and you seem to be avoiding answering queries about them, and instead basing your arguments on falsehoods. Why?
929	4602604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602604	luke-jr	Tonal numbers do support infinite binary division, though Bitcoin does not. This was clear in context, though I have added a note to be explicit about it. Tonal is *objectively* easier than decimal. Conversion can be, and often is, done approximately: do you remember that 1 centimeter = 0.393700787 inches? Decimal may not have been forced lately (though it arguably was originally when introduced to Europe in the 10th century), but decimal units - the SI metric system - were and still are forced by governments in every case that they have been adopted. Even once a decimal unit is adopted, people who have adopted it continue to use binary divisions despite their awkwardness in the decimal system (eg, US quarters). BTC is a decimal multiple unit, not part of the protocol. The protocol is based on a "satoshi" unit which is 0.00000001 BTC. When choosing the size of the base TBC unit, the primary consideration was what size would be reasonable in the long run. It makes no sense to define 1 TBC = 55,100 (1 BTC). Given the total 2.1 quintillion raw bitcoin elements and reasonable Earth population in the near future, 1,0000 (65,536 deci) satoshis was the most logical quantity to set the base Tonal unit to. Given Bitcoins current market valuations, it makes more sense to work in TBC (0.16777216 BTC, or about 0.80 USD). I didnt answer those questions because they were not asked. None of the arguments put forward are false.
929	4602908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4602908	sipa	Tonal numbers support infinite binary division. Decimal numbers support infinite decimal division. Does this surprise anyone? If we choose to change the protocol to more digits, we could divide the value of the base unit by a power of 2, or by a power of 10. You may argue that BTC is not a part of the protocol, and I agree, but it is part of the system: the bitcoin economy is built around the monetary unit BTC, and not TBC (though youre free to create one that does). Given that fact, if the precision is increased, the only viable option seems dividing the base unit it by a power of 10, and this new unit will not be expressible as a finite hexadecimal expansion anymore. Im willing to accept that people living and raised in a tonal-only world may have some advantage for counting things over those in a decimal world (though Im not certain either). Who knows? We dont. It may be your dream, but you have to stay realistic. And in a realistic setting, no I dont believe this is a practical advantage to any significant amount of potential users. I wont comment anymore on this. NACK
929	4603077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4603077	luke-jr	The only sensible change to the Bitcoin amount protocol would be to make them a proper fraction instead of an integer, not to simply buy a few more years by multiplying by ten or a hundred. Given that, Bitcoin would be infinitely divisible in both decimal and tonal, and people could trade sizes like 1/3 or 1/7 which are completely impossible right now. If Tonal users alone arent considered "significant", then I could try adding Dozenal support too... DSA at least seems to have a more organized online presence.
929	4603210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4603210	TheBlueMatt	NACK - I understand its a nice feature, but until we atleast get more than one person who wants to see this merged, maintained, etc I really, really dont think it should be merged.
929	4603318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4603318	luke-jr	Fair enough. How about I just keep it in next-test until I can convince more Tonal users to switch to Bitcoin? ;)
928	4456692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4456692	laanwj	Ha, good fix. Is there any specific reason to do it only on first setModel?
928	4469197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4469197	jojkaart	setModel appears to be the function used to give the dialog the user settings (as well as some other things). At present setModel only sets the model, nothing else. So, since this is a bug fix, I wanted to limit the scope of the change to avoid unexpected consequences. Im not actually familiar enough with the code to know if setModel is ever called more than once though. So its possible its an useless precaution.
928	4471687	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4471687	laanwj	Thanks for the explanation. I think it is safe to remove the precaution. Background: A model change in QT implies that the widget state is reset according to the information in the new model.
928	4538673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4538673	jojkaart	Based on your input, Ive changed the fix to just simply just call the clear() function after setting the model.
928	4564304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4564304	TheBlueMatt	Can you rebase this into one commit?
926	4434389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4434389	gavinandresen	Instead of a double-cast, can we say that the second argument to walletpassphrase is a 64-bit integer to begin with?
926	4434447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4434447	gmaxwell	Done and tested.
926	4434453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4434453	sipa	ACK
926	4434989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4434989	gmaxwell	I found an issue where if the sleep time crossed the year 2038 the sleep would return in zero seconds making it busyloop. This is undesirable. The underlying issue appears to be in the boost sleep implementation. Ive addressed this by clamping Sleep() so that it sleeps for at most ten years. To be clear the unlock can still last longer than 10 years, but some other sleeps in the code which dont retry may not last longer than 10 years.
926	4436860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4436860	sipa	Looks good.
917	4333739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4333739	sipa	Will this compile on windows/OSX/...?
917	4334336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4334336	mndrix	It does compile on OS X. I dont have a Windows build machine, but [Microsoft documentation suggests](http://technet.microsoft.com/en-us/library/bb463209.aspx) that they support the necessary APIs.
917	4492403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4492403	luke-jr	"Microsoft Windows Services for UNIX" != Windows. flockfile is not available on Windows (or at least not for MingW), and compiling it in next-test fails...
917	4499630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4499630	mndrix	Ill update the pull request to only activate `flockfile` and `funlockfile` when `#ifndef WIN32`. We already do that for signal handlers. One could also try using `CreateMutex` and `WaitForSingleObject` to support similar locking semantics on Windows. I dont have a Windows development machine, so Id be coding blind trying to implement that approach.
917	4499813	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4499813	luke-jr	"Nobody" has a Windows development machine. Windows builds are produced with gitian on Ubuntu.
917	4509778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4509778	mndrix	Ive updated the branch so that its a noop on Windows
917	5118533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5118533	mndrix	Thanks to ee12c3d60c4bb7b25e06709e92344d2d8b2c581e the problem mentioned is no longer an issue. Ive updated the pull request accordingly.
917	5133980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5133980	luke-jr	ACK. Planning to (user-optionally) merge this in Gentoo for logrotate support.
917	5147444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5147444	laanwj	Looks like a useful feature. How does this interact with the log rotation / debug.log size-limiting inside bitcoin itself? I remember seeing some code for that.
917	5153522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5153522	mndrix	I dont know of any log rotation code inside bitcoin, but this code works well with the size limiting code. `ShrinkDebugFile()` runs only during startup before debug.log is opened for writing.
917	5155722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5155722	laanwj	Ok, so that only runs at startup. Thats good. ACK
917	5188036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5188036	rebroad	-1 from me. I think bitcoin should re-examine the bitcoin.conf file upon receiving a HUP. This, AFAIK is the more standard thing to happen on Unix, isnt it?
917	5192355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5192355	laanwj	The one does not exclude the other. And keep your -1/+1 out of here please.
917	5194750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5194750	rebroad	You mean rotate the log file and re-parse bitcoin.conf? -0.99999 to that one ;)
917	5194960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5194960	laanwj	Yes. Thats what most daemons do AFAIK and is sane. Both reopening the log file and re-reading the config file are no-ops if nothing changed to the log file and configuration file respectively.
917	5195477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5195477	rebroad	I think it makes more sense to have a config option to specify how many logs files to keep and how often to rotate them. Having the log file rotated every time you want to re-read the config would be not very useful IMHO, as there may be 10000 lines added since the last config change or only 10 lines.
917	5195693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5195693	laanwj	I see no reason at all to include log rotation into bitcoin itself. There are excellent log rotation tools in common use. The only support they require of the application is reopening the log on a signal (like this pull request does). These have settings to rotate by size, by time, to autocompress old files, and so on.
917	5196589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5196589	rebroad	Im not aware of many people using Windows XP (for example) that use log rotation tools, and even if they did, are the tools able to rotate the logs at exactly midnight so that entries from either side of midnight dont end up in the wrong log file?
917	5199882	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5199882	Flowdalic	I would recommend using SIGHUP for config file reloading and SIGUSR1 for logrotation. This is how [most daemons do it](http://stackoverflow.com/a/480499/194894) and how it should be used with [logrotate](https://fedorahosted.org/logrotate/). Thats whats needed for the Gentoo ebuild logrotate use flag and I am sure other distributions would benefit from it too. Rotation of log files should not be done by bitcoind. I am sure there are solutions for win32 users also.
917	5200770	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5200770	mndrix	All three examples in the [logrotate man page](http://linux.die.net/man/8/logrotate) use SIGHUP. The default signal for [newsyslog](http://www.freebsd.org/cgi/man.cgi?query=newsyslog.conf&sektion=5) (used on OS X and other BSDs) is SIGHUP. As best I can tell, thats the closest thing to a standard that exists.
917	5201171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5201171	Flowdalic	On the other hand, many prominent FOSS uses SIGUSR1: * apache * mongodb * dovecot And my expectation about signals and daemons is that SIGHUP reloads the config file and SIGUSR1 re-opens the log file. Since both actions are not really related to each other, this seems to be a saner approach. And the stackoverflow answer shows that the community thinks so too.
917	5201255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5201255	luke-jr	All those FOSS you just listed also use USR1 for reloading configs... But can we just pick one, any one, or maybe even both, and not spend pages discussing the pros/cons of each?
917	5205273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5205273	davout	IMHO configuration hot-reload isnt very useful... just my two satoshis... On the other hand log file reopening would be really nice to have
917	5209036	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5209036	rebroad	I agree that at present config reload isnt very useful. Im tempted to suggest that SIGHUP be reserved for that possibly functionality in future though, and going with SIGUSR1 for the logfile rotation, if thats the agreed standard. e.g. how does "tor" do things? I still think its not unreasonable for bitcoin to offer to do its own log rotation though - people can still choose to use a 3rd party program if they prefer. one or two config options would probably suffice, and itd be easy to code.
917	5209232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5209232	davout	it is unreasonable to reinvent the wheel. if you dont care about log rotation youll be fine with the log size limit. if you do care youll use logrotate.
917	5215395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5215395	laanwj	We want to reduce the complexity of the core, not increase it. Anything that can (sanely) be handled by external utilities, should be. If your platform does not have these utilities, you can port them or switch platform. Note that log rotation is only useful for servers and services, in which youd like to keep the old data for auditing purposes. Windows XP users tend to be normal end-users which dont care about log files at all. Reloading configuration is an orthogonal option, open a new issue and discuss about it there. Lets keep this thread for testing and ACKing this code.
917	5589197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5589197	jgarzik	1) Reloading config file is very common daemon behavior 2) Reloading config file is very complex, and far beyond the scope of this pull request 3) Log rotation is beyond the scope of this pull request. 4) ACK this pull request, in concept. See code comments for minor nits. Lets get this merged.
917	5589263	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5589263	jgarzik	Code review comments: 1) Is freopen(3) guaranteed to always return orig_stream? It seems unwise to discard the !NULL return value, if not downright incorrect. 2) The "locking" is definitely disappointing... using file locks, which often depend on filesystem-specific behavior, due to lack of CRITICAL_SECTION() is decidedly suboptimal. Im certain that boost has a thread locking primitive that may be statically initialized, and available immediately at startup.
917	5593084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5593084	laanwj	I assumed that the point of using file locks is you can block the logger from your log rotation tool, so you dont lose log records during the transition?
917	5601794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5601794	mndrix	<blockquote> 1) Is freopen(3) guaranteed to always return orig_stream? </blockquote> My understanding of the documentation on Linux and OS X, leads me to say yes. <blockquote> Im certain that boost has a thread locking primitive that may be statically initialized, and available immediately at startup </blockquote> Ive not found such a primitive in the Boost libraries, but may not recognize it if I saw it. Ill gladly change the locking technique if someone can point me at a better primitive.
917	5717714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5717714	jgarzik	1) Agreed, freopen(stream) returns stream. ACK there. 2) As one would expect, boost::mutex is a proper C++ class, and is available properly initialized (unlocked) as soon as the class is instantiated. Here is a non-threaded working example:
917	5791758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5791758	mndrix	Rebased and updated to use `boost::mutex`
917	5793893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5793893	jgarzik	Changes look good, except for one: you made fileout a global variable, when the existing, more narrowly-scoped static declaration is preferred. Might consider making that static mutex more narrowly scoped like fileout, too.
917	5797258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5797258	mndrix	Good suggestions. Updated.
917	5797306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5797306	jgarzik	ACK, looks perfect to me. Thanks for your patience.
915	4302805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4302805	sipa	Updated: enable on testnet since februari 20.
914	4302598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4302598	gavinandresen	ACK. I think this is the "least surprising behavior" for -connect.
914	4302627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4302627	sipa	ACK
914	4303650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4303650	gmaxwell	IRC is already off by default, so there is no need to set-soft it off. This patch will break some number of p2pool users (it would break me for example). Anyone have any thoughts about what could be done about listening which is less aggressive than shutting it off completely? Im coming up with nothing at the moment.
914	4303682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4303682	sipa	Binding the p2p listening socket to 127.0.0.1, perhaps instead of not listening at all? EDIT: or rather, listening to the same addresses as RPC
914	4305010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4305010	TheBlueMatt	Dnsseed makes sense, but Im not sure I agree that nolisten (and, by extension IRC, UPnP) is the "least surprising behavior" when using -connect. If nothing, it should be clearly stated in the help options.
914	4306209	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4306209	gmaxwell	Perhaps generally the nolisten behavior should be to bind only to 127.0.0.1(/same address as rpc)?
914	4307028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4307028	TheBlueMatt	I dont think that is the "least surprising behavior" either. (really, we should have a -bind=ip:port)
914	4308905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4308905	sipa	And a -allow=<netmask> as well?
914	4344968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4344968	gavinandresen	Ill defer to yall to work this out; listening only for connections from localhost sounds interesting, although Ill just say Ive regretted having subtle interactions between command-line arguments in the past and good documentation might be the best answer (either tell p2pool users to use -connect=... -listen=1 or tell others to use -connect=... -listen=0 ).
914	4468843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4468843	laanwj	I agree that the subtle interactions between command-line arguments can be really confusing (both to developers and users) unless it would result in clearly broken or dangerous behaviour (for example, advertising your node address when not listening). We should have clear command-line flags for these orthogonal concerns: - Bind to a certain port / interface, or dont listen at all. Maybe even allow bind to multiple ports/interfaces. Only request UPNP (if enabled) on interfaces we bind to. - Advertise your node, or dont advertise it (irrespective of the used mechanisms, be it IRC, DNS, or whatever is added in the future) for *incoming* connections. - Use peer auto-discovery (irrespective of the used mechanisms, be it IRC, DNS, or whatever is added in the future), or connect only to a certain list of nodes for *outgoing* connections. Give the user a clear error in case of obviously impossible combinations. Thats the "least surprising behaviour". Dont try to make the program guess intent.
914	5016883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5016883	sipa	Also, we could support SOCKS4a or SOCKS5, and pass connection requests using domain names there, instead of resolving them ourselves.
914	5054386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5054386	jgarzik	Disagree with listen=0 policy enforcement in this patch. I have deployed configurations in the field where local mining nodes accept incoming connections from any node [on my local, firewalled network] but only -connect to specified hosts.
911	4245176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4245176	gavinandresen	Tested on a testnet-in-a-box setup and a generate-nothing-but-orphans tool that I wrote (but wont release); Im going to pull this for 0.6rc2
907	4202601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4202601	gavinandresen	ACK
906	4204865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4204865	luke-jr	1. This doesnt respect FIRST_CLASS_MESSAGING=1 2. Instead of a new dialog/tab, perhaps it would make sense to just add a button to the Sign Message one (and rename it Messages or something)?
906	4205620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4205620	sje397	I tried modifying the existing window initially. It was ugly. The address field should be below the message when verifying, and having lots of hiding/showing components feels like a design problem to me - too much responsibility for a single UI class that really should be separated. I treated FIRST_CLASS_MESSAGING as relating to signing messages only. As per above, I think the UI should be separate and I dont think subtabs make sense in a first-class messaging window...and I dont think having two tabs for messaging in the bitcoin UI is a fair waiting given the main purpose. Basically, I dont think FIRST_CLASS_MESSAGING makes any sense :)
906	4205805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4205805	luke-jr	How about moving the message to the top, then have the address and signature under that, with "Sign" and "Verify" buttons between the addr and sig textlines, with arrows of which direction it processes?
906	4208524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4208524	sje397	That sounds pretty good to me. Ill mess around with it this evening.
906	4213714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4213714	sje397	I still dont like it. It means having the signature line edit writeable when you may just want to sign and have that generated...and it means having the address book and paste buttons enabled when you might just want to validate. It also means the order of elements on the page is not necessarily what you want to see (i.e. to verify, you fill in message, then skip address, then fill in signature). Plus there are other ugly issues with the way things are done now - e.g. select one of your own addresses, click sign message, click address book (thereby opening a window containing the same list of addresses you just left) and there is a sign message button again, which does nothing perceptible. I would rather leave the message functionality in a menu somewhere (maybe the same should be true of the qrcode generation function) so that it doesnt bother users that just want the basics, and keep the sign and validate UI elements simple.
906	4408646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4408646	luke-jr	While validation is more of an advanced tool, signing is basics. Perhaps a UI expert should provide input on how to best integrate them together.
906	4433027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4433027	laanwj	Good, indeed it was asymmetric to have signing without verifying, this at least makes it complete. IMO you dont have to do any extra work to make it play nice with FIRST_CLASS_MESSAGING. Only uses that option, let him do that :)
906	4455856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4455856	TheBlueMatt	Why do we have a FIRST_CLASS_MESSAGING if no one uses it, also, it needs a much more descriptive name, FIRST_CLASS_MESSAGING doesnt say anything about what it actually does.
906	4455958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4455958	luke-jr	"No one" uses 0.6 yet. It makes messaging first-class.
906	4456613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4456613	laanwj	we have FIRST_CLASS_MESSAGING because it was part of the signmessage pull. Luke-jr wanted to add signing messages as a separate tab, whereas according to us there are already too many tabs and we should reserve them for essential functionality. So he put it behind a qmake option, I guess because he wants to keep it as a tab himself...
906	4456703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4456703	TheBlueMatt	Mmm, so maybe it should be SIGNMESSAGE_IN_TAB or something that actually describes what it does?
906	4457752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4457752	luke-jr	BTW: If Samuels GUI gets merged, the "too many tabs" excuse goes away, as theres plenty of room.
906	4458468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4458468	laanwj	Its not about room (if you change the toolbars to icon-only you also have enough space). Its about not confusing users.
906	5046101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046101	luke-jr	Rebasing required.
906	5047057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5047057	sje397	Rebased.
906	5268343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268343	Diapolo	Can anyone post a screenshot, I would like to know where the button is loctated and how it looks currently?
906	5268463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5268463	sje397	I rebased and fixed a tiny issue due to a change in the CDataStream constructor. I also removed that HTML. Im trying to get a screen shot but wrestling with a new install of arch.
906	5525112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525112	laanwj	Great to have this, isnt symmetry a beautiful thing. One suggestion: Please make this non-modal, like the other utility windows. (thatll also make testing easier as we can keep open a "sign message" and "verify message" window open at the same time)
906	5525639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525639	Diapolo	I would like to know, where in the menu this is placed, as I would suggest to have it below Sign message (in file) or in a to add tools menu.
906	5650849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5650849	sje397	The menu option is underneath Sign Message in File, yes. I couldnt get a screenshot because the menu being shown disabled my print-screen key :( Ive rebased, and made the dialog non-modal. I also moved the call to setAttribute(Qt::WA_DeleteOnClose) out of the QRCodeDialog to match how it is handled here. This is better since that decision should be up to the creator of the dialog rather than the dialog itself.
906	5651247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5651247	sje397	Changed to QPlainTextEdit (on Diapolos advice), found the button Id lost to reset the checkboxes so the italic false stuff should be gone too.
906	5651365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5651365	Diapolo	You have to excuse me, as Im kind of a perfectionist ^^, I even care about the smallest things ... sometimes this is bad, but more often its a good thing :D.
906	5651435	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5651435	sje397	No, thats a very good thing. Id rather end up with better software too :)
905	4216347	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4216347	sipa	ACK; I really like having unit tests for the coin selection algorithm.
905	5009670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5009670	dooglus	I noticed that the shuffle was missing some time ago. It has been added back in in #1017 which is my current branch for these changes, and includes the coincontrol and lesschange changes too. Ill also add a new unit test for randomness too. Do you need this pull request with just the refactoring updated too? I merged these related changes all together to make them easier to keep up to date.
905	5010163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5010163	dooglus	Notice that the coins are sorted into order before running the stochastic approximation: // Solve subset sum by stochastic approximation sort(vValue.rbegin(), vValue.rend()); and so the shuffles work will be undone in the case you propose. The only times the shuffle has any effect is if: 1. there are multiple coins with the exact value requested (e.g. have 1,1,1 and request 1), or 2. there is no coin with the exact value requested, and the sum of coins smaller than the sum requested is less than the sum requested, and there are a multiple coins of the same value all representing the smallest value that is larger than the sum requested (e.g. have 1,1,1,5,5,6 and request 4; sum of smaller coins = 3 < requested 4; smallest value larger than requested 4 is 5; there are multiple 5 coins). Ill add tests for both these cases to make sure the shuffle is happening. I added your suggested "4-from-100 identical" test to check that different random coins were being selected each time. It ran the test 100 times. And every time it failed on iterations 49 and 51. It turns out that this is because rand() is being used in the stochastic approximation code: if (nPass == 0 ? rand() % 2 : !vfIncluded[i]) and rand() isnt being seeded, so returns the same sequence each time bitcoin is run. See new bug #1057. If I use GetRandInt(2) instead of rand()%2 then the tests fail occasionally, but randomly. It turns out that selecting 4 coins from a sorted list of 100 often picks the same 4. So Ill pick 50 from 100 instead to minimise the chance of a random identical selection.
905	5010683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5010683	dooglus	Ive merged my latest changes to the unit tests from lesschange-v0.6.0 (#1017) back onto this branch. There are also tests for sub-cent change suggested by Luke here: which didnt get into this branch before.
905	6279094	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6279094	sipa	Is this superceded or not?
905	6318602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6318602	gavinandresen	Closing; I pulled 1416 which was an updated version.
902	4186331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186331	sipa	ACK; it compiles at least; have not tried running it in windows
902	4216549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4216549	sipa	Seems to work under Wine.
899	4175824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4175824	sipa	In case compatibility with 0.6.0rc1 is not required, this code suffices: > if (strKey == "addrProxy") { CAddress addr; ssValue >> addr; addrProxy = addr; }
899	4176482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176482	gavinandresen	ACK.
898	4176493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176493	gavinandresen	Too big/dangerous a change for 0.6, I think. Itd be really spiffy if there were unit tests for the SelectCoins code to test all the edge cases (I know theyre not trivial to write, but maybe a little refactoring of SelectCoins would help).
898	4184395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4184395	dooglus	Id be happy to write some unit tests for SelectCoins but it seems to depend on the whole blockchain which isnt available to the unit tests. Is that what you are referring to with the refactoring of SelectCoins? Im sure with a little help I could get this done.
898	4184773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4184773	gavinandresen	: yes, off the top of my head something like splitting it into two methods, the first of which creates an array of pointers to available outputs (or maybe tuples of (output, nConfirmations, size) or something) and the second of which runs the actual "figure out which outputs to use" algorithm. Making SelectCoins strictly a function that chooses a subset of items passed in should make it much easier to both test and modify in the future.
898	4186435	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186435	dooglus	Is it acceptable to use a vector of pair&lt;nConfirmations,pair&lt;nSize,pair&lt;tx,output_number&gt; &gt; &gt; or is that too ugly?
898	4186577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186577	sipa	Tip: use COutPoint instead of pair(tx,output_number). But as soon as there is more than one argument you want to tie to it, Id add a smallish class.
898	4192110	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4192110	dooglus	COutPoint has a hash, rather than a transaction, whereas I already have the transactions. I used a new smallish class anyway because it makes things tidier.
898	4199968	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4199968	luke-jr	I didnt see the test for this case: - Available outputs: 0.0005, 0.01, 1 - Desired amount: 1.0001 - Correct solution: 0.01, 1 In this case, the 0.0005 coin should never be chosen, because that would have 0.0004 BTC left over incurring a fee.
898	4200889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4200889	dooglus	Your "correct solution" adds up to 1.01. Subtracting the desired amount leaves 0.0099. Thats sub-cent change, which were trying to avoid. Wouldnt it be better to chose all 3 coins, leaving 0.0104 change and no fee? I guess you made a typo somewhere, but I cant work out what you meant.
898	4201339	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4201339	dooglus	Changing the desired amount to 0.999 gives a situation where we should leave the smallest coin. Ive added corresponding test cases, thanks.
898	6279079	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6279079	sipa	Is this pull request superceded or not? I think we want this change for sure, while there are still implementation issues with coin selections.
898	6279185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6279185	luke-jr	#1416 is the latest rebased iteration of this
898	6331708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6331708	sipa	Merged under #1416.
898	6336700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6336700	dooglus	I dont see this (or coin control) in #1416.
898	7980120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7980120	dooglus	This fix still isnt merged, somehow. The master branch is still doing this: if (nTotalLower >= nTargetValue + CENT) nTargetValue += CENT; and consequently adds change when it isnt needed.
898	7990483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7990483	gmaxwell	Can you explain why the test case passes? Can you suggest a test case that fails? I suspect you have an unclean clone that has been merged nTargetValue += doesnt appear anywhere in the codebase as far as I can tell.
898	7990533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7990533	luke-jr	I also can confirm that code does not exist in master...
898	7990710	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7990710	jwillerth	Take me off this list Regards, Joseph Willerth Sent from my iPhone On Aug 23, 2012, at 9:25 PM, Gregory Maxwell <notifications@github.com> wrote: > Can you explain why the test case passes? > > Can you suggest a test case that fails? > > > Reply to this email directly or view it on GitHub. >
898	7990830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7990830	luke-jr	This isnt a list, its an issue. To remove yourself from notifications (nobody else can do it for you), do this: - Login to GitHub if necessary - Open in your browser - Scroll all the way to the bottom - Where it says "Watching thread", click it and select "Mute"
898	8014365	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/8014365	dooglus	Youre right. I was looking at a cached copy of master. Apologies.
896	4176192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176192	makomk	Looks good to me! Note that this isnt exactly an attack on old nodes though. Unless its increased recently, under half of all blocks mined are from P2SH nodes, which means that theyd probably be the ones that would be most affected by the Bitcoin network attempting to partition itself into old and new nodes in this way. Then theres the issue of giving an attacker a tool that helps them create a network partition with a useful proportion of miners on each side in the first place. I also wonder if a similar issue will apply to blocks after P2SH is switched on fully; could they cause the P2SH part of the network to cut itself off from the non-P2SH part?
896	4176287	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176287	gavinandresen	ACK, nice fix.
895	4176302	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176302	gavinandresen	Id really prefer that new JSON-RPC methods get discussed on bitcoin-development before turning into pull requests.
895	5589064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5589064	jgarzik	Agreed. Closing -- please propose new JSON-RPC methods on bitcoin-devel. It definitely helps gauge acceptance and interest, as well as more fully specifying protocol and intent. "There has been some interest" without URL references could mean anything, or nothing. In particular, does the mining community want these RPCs, in this form?
894	4171352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4171352	laanwj	ACK
894	4171360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4171360	laanwj	btw: The bitcoin.conf issue will be fixed by pull #890 which moves ParseConfigFile with ParseParameters.
892	4199923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4199923	dooglus	User error on my part. I made the change on my master branch which seemed to cause problems. See above where it says: "dooglus merged commit da9ab62 into bitcoin:master from dooglus:master" I dont have write access to bitcoin:master, so I dont know why it thinks I did that. I opened a new pull request, 898, for the same issue.
891	4160769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4160769	tcatm	Please "merge" this pull request to as translations are pulled from there.
891	4171384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4171384	laanwj	I suppose the bitcoin-qt.pro and bitcoin.qrc still have to be updated to include it, or do you take care of that when merging it from transifex?
891	4172851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4172851	xHire	Translation fully imported into transifex so closing this. laanwj: bitcoin-qt.pro automatically includes all TS files (by using wildcard: *.ts), but with bitcoin.qrc you are right, in last fetch from transifex this important update was missing (and still is).
890	4175328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4175328	sipa	Do we want this in 0.6.0 still?
890	4175425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4175425	laanwj	Hmm, as this has pretty significant changes, I think we should leave this for 0.7.0, and try it out a bit ourselves first.
890	4176367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176367	gavinandresen	If (a rebased version of) this isnt pulled for 0.6 then another fix for #815 (UpNP settings dont stick) is needed-- trying to fix that bug is what led me to pull my hair out and decide the whole settings system needed to be overhauled.
890	4176470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176470	laanwj	ok, in that case its fine with me to add it for 0.6.0 already
890	4197836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4197836	sipa	Included in #904
886	5584934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5584934	luke-jr	Rebased
886	5585156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5585156	sipa	Can you use enums instead of numbers to identify the several decompositions?
886	5586023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586023	luke-jr	Reworked with enums.
886	5588388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5588388	gmaxwell	Decodes of BIP16 transactions scriptsig are not useful and this needs some docs. (I wasted a fair bit trying to figure out why "{script:hex}" wouldnt work, for lack of an example. No reason not to pull though.
884	4106364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4106364	sipa	ACK
883	4106222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4106222	gavinandresen	ACK, good idea.
883	4994610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4994610	Diapolo	Is this safe or leaves it a possibility to get a manipulated chain somehow?
883	4994804	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4994804	sipa	It processes the blocks found in the file exactly as if they were received via the network.
883	5038200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5038200	luke-jr	Needs rebasing. Sipa broke everything using locks. >_<
873	4084528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4084528	sipa	Added debug output in case a pre-209 version manages to connect.
873	4107051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4107051	gavinandresen	ACK; pull requests that remove code are my favorite kind of pull requests.
872	4044679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4044679	sipa	Tested on testnet: REORGANIZE: Disconnected 11 blocks; 0000000236cea9d517ec..000000001b07f33c785b REORGANIZE: Connected 10 blocks; 0000000236cea9d517ec..000000000d726a10901f
872	4057558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4057558	luke-jr	Might be a good idea to add a "maxreorg" to getinfo, since it can be an indicator of compromise?
871	4059494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4059494	sipa	My mistake, this was correct after all.
869	4058815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4058815	laanwj	ACK
865	4034458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4034458	sipa	Delete of a CDB implies Close(), by the way.
864	4047092	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4047092	TheBlueMatt	visual ACK
862	4033012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4033012	laanwj	ACK
859	4025705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4025705	gavinandresen	ACK, sanity tested, works nicely
858	4044891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4044891	sipa	ACK
857	4025719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4025719	gavinandresen	ACK
857	4030874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4030874	sipa	I think its a bit strange that the windows version would show a message box, while on other operating systems an error is printed to stderr. Very few people run a GUI from a terminal that remains open anyway.
857	4032684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4032684	laanwj	Im simply mimicing the behaviour of most programs... On linux, people expect --help output in the terminal (which can be copied, piped, redirected, etc). On windows they expect a message box (as there is no other way). I really dont like the message box to be the default.
857	4043466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4043466	sipa	Ok, nevermind.
855	4033413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4033413	laanwj	Is toggling more typical behaviour? I havent seen that many applications that toggle when the tray icon is clicked, most just appear the window (and bring it to the foreground in some cases). Then again, this may be a Windows thing mainly.
855	4033493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4033493	sje397	You might be right. I just checked a couple of apps on my wifes windows machine - skype, utorrent - neither toggle. Maybe it was more common a while back. I think its more common for tools like instant messaging apps that are often used and live on the desktop but need to also get out of the way for a large percentage of time. Id still argue that its better than the click doing nothing and the icon simply wasting space there. Also its better UX - you can click the tray icon for a quick glance at your wallet and easily click again without moving the mouse to get back to what you were doing. One final point - this patch also fixes the issue whereby if the bitcoin window is oscured by another window, currently clicking the taskbar icon does nothing. It can be annoying when you wonder if its broken before you notice the task bar item. It should at least raise the window to the front. That part of the patch could be implemented without the toggle.
855	4033603	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4033603	laanwj	Seems like useful features, if we can manage to make them work (or, at least not get in the way) on all OSes/permutations. Lets first get the #853 working everywhere. BTW I agree with changing GUIUtil to a namespace. This would allow splitting it into multiple files when it gets too large.
855	4033617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4033617	sje397	Sounds like a good plan to me. I have tested this on KDE and Windows.
855	4192636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4192636	sje397	I changed that toggleHide method as per our discussion.
855	4202861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4202861	luke-jr	This needs to be rebased :(
855	4213102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4213102	sje397	Rebased.
855	4491402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4491402	luke-jr	This definitely feels more intuitive to me.
855	4598672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4598672	luke-jr	Bug report... 1. Minimize Bitcoin-Qt (with Minimize to Tray enabled) 2. Click tray icon Actual: Bitcoin-Qt appears and disappears instantly Expected: Bitcoin-Qt appears, and remains
855	4598894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4598894	laanwj	Ok, thats it, Im going to remove minimize to tray.
855	4599093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4599093	Diapolo	Close to tray remains?
855	4599132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4599132	laanwj	Yes. That always worked fine.
855	4600332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600332	Diapolo	Okay then, I guess it would be bad style to leave it in on Windows? Only problem I observed there is, that after a minimize to tray and a window restore, the title-bar looks smaller and only has a close icon instead of the normal minimze, maximize and close icons. Is that indended?
855	4601457	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601457	laanwj	No, that was not intended. Pull #941 was supposed to solve it, but seems to have new problems. Weve had three or four different implementations now, Ive wasted enough time on it.
855	4601632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4601632	Diapolo	ACK for removing it, coding time can be better invested for sure!
855	4611307	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611307	luke-jr	My aforementioned bug might not be related to this. I am unable to reproduce it with todays next-test... :/
855	4611406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611406	luke-jr	Looks like that bug goes away when this is merged on top of #941 (which is now in master).
855	4611589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611589	Diapolo	How is the general developer policy? Does it really make sense to report these kind of bugs with unofficial client versions? If Im right you were using a self compiled version of your next-test branch.
855	4611700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611700	luke-jr	Part of the point of pull requests is to *test* the proposed change... so yes.
855	4611732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611732	laanwj	it makes sense when youre testing a certain pull request to post about your experiences with it (as in this case). But of course not to make a new issue about something that isnt in master yet. I, at first, didnt notice luke-jr was posting to an existing pull request instead of a new issue, hence the confusion with another commit.
855	4611763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4611763	Diapolo	As you perhaps observed Im trying to help out here and there and to learn how you guys work, I have to ask some "weird questions" from time to time :).
855	5045832	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5045832	luke-jr	Rebasing required.
855	5046051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046051	sje397	I did that once already.
855	5046317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046317	luke-jr	Unfortunately, I cant rebase others stuff or I would. Its pretty trivial in this case.
855	5046394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046394	sje397	Yep, Im doing it now. Im just suggesting that perhaps you might not want to request a rebase too often, or maybe wait until there are a few people ready to review? Its a waste of time otherwise.
855	5047653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5047653	sje397	Rebased. It does conflict a little bit with #961, only because both modify the options dialog.
855	5076165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5076165	laanwj	Ive tested it, it works for me (on Linux). Code is also OK with me. ACK
855	5076300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5076300	luke-jr	ACK here too, been using this for months now.
854	4025609	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4025609	gavinandresen	ACK
853	4020143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4020143	sje397	It works on Windows
853	4021816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4021816	sje397	-Unfortunately, this patch doesnt fix the problem of the window forgetting its position when hidden in KDE.- Strike that sorry, it works ok in KDE. I think you need to remove the showNormal in the else clause of the changeEvent method, because it breaks maximizing the window.
853	4022028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4022028	laanwj	Im starting to think thats simply a KDE bug...
853	4022139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4022139	sje397	One more thing: changing tabs calls showNormal. That moves the window position slightly for me, in KDE and in Windows. You could add if(isVisible()) there, but maybe the dummy widget is better after all (but that does reset the window position to a corner of the screen on hide or minimize for me in KDE). Theres also the option of saving/restoring window geometry using QSettings and QWidget::saveGeometry and QWidget::restoreGeometry.
853	4026421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4026421	luke-jr	This causes the window to flash (hide + show) every time I change tab, and it is even repositioned (by the window manager, KWin). :(
853	4027627	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4027627	laanwj	you dont have that problem without this pull request? I find it strange, because this patch *no longer* overrides showNormal (which is called when you click a tab). The stuff in changeEvent does not fire when you change tabs (at least, shouldnt be, as it explicitly checks for state transitions from and to minimized...).
853	4027837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4027837	luke-jr	git bisect narrowed it down to this commit.
853	4028806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4028806	laanwj	I think it is already wrong with the current -master branch. The problem was introduced when I started calling showNormal for all the tab clicks. The same problem that causes the window to go back from maximized to normal...
853	4028942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4028942	laanwj	The new commit should solve this problem (by showing/showNormal only when needed).
853	4028952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4028952	luke-jr	Just noticed 337258e is the version that made it into next-test (and introduces the problem). Current master (and 337258e^) is fine.
853	4033859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4033859	sje397	This works much better for me in KDE. Maximising is good too. There is still one bug, but its probably Qt: if I hide the window using the close button the first time I hide it, restoring it the first time puts it back in a corner of the desktop. It doesnt happen if I minimise. Subsequent hide events via minimise or close dont have the issue.
853	4186388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186388	sipa	Whats the status on this?
853	4188622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4188622	laanwj	It works better than whats in now with regard to remembering window location/size. This was tried on linux (kde/gnome/unity) and windows, which are the platforms the "minimize to tray" feature even exists (On mac, it is disabled). So lets merge it and pray it wont break yet another obscure WM :) The worst it could do is break minimize to tray..
853	4528366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4528366	laanwj	Ok this has problems on windows: when minimize to tray is enabled, and the window is minimized it indeed disappears. However, if you bring it back its still a tool window (with small titlebar with a small x). For some reason the unminimize event never reaches changeEvent :/
852	4008564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4008564	gavinandresen	Nice, thanks!
852	4020599	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4020599	sipa	ACK
849	4020322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4020322	sipa	ACK
847	4002887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4002887	gavinandresen	I think a separate method called from ParseParameters and ReadConfigFile is the better way to go.
843	3988548	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3988548	laanwj	ACK
843	3989722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3989722	TheBlueMatt	This fixes (at least) #832
841	4015533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4015533	jgarzik	visual ACK
841	4025311	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4025311	gavinandresen	Sanity tested OK; would be nice if it checked the memory pool for 0-confirmation "other peoples" transactions.
841	4045961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4045961	sipa	done
841	4121417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4121417	sipa	Much more complete and totally reworked version pushed.
841	5038171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5038171	luke-jr	Needs rebasing. Sipa broke everything using locks. >_<
841	5190674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5190674	luke-jr	This needs rebasing (merges clean, but wont build)
841	5209529	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5209529	sipa	rebased
838	4025159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4025159	gavinandresen	ACK on the code changes (I havent compiled/tested, though)
838	4044939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4044939	sipa	ACK; compiles and works
837	3982850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3982850	sipa	Doesnt seem to work for me... (the immature transactions are simply not shown)
837	3993459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3993459	sje397	Hm. Ill try a clean build from that branch tonight, but I dont see why it wouldnt work. The important condition is: if (pcoin.IsCoinBase() && pcoin.GetBlocksToMaturity() > 0 && pcoin.GetDepthInMainChain() >= 2) If a transaction in the wallet meets that condition then it will be added to the immature balance shown in the overview.
837	3999745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3999745	sipa	I was only looking at immature transactions before, not the balance; i must have misread. The immature balance seems to work fine with this patch; however, newly generated mining transactions are not shown, while the transaction counter is updated.
837	4004186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4004186	sje397	I think WalletModel::getNumTransactions() is a bit too simple...but, I didnt touch that.
837	4186392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186392	sipa	ACK
837	4600394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4600394	luke-jr	Theres really no reason Bitcoin-Qt should be setting fonts/colours in most cases. Let the user configure their OSs font selection...
837	5046076	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046076	luke-jr	Needs rebasing. Sipa broke everything using locks. >_<
837	5047038	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5047038	sje397	Rebased.
837	5588881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5588881	luke-jr	ACK
837	5593731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5593731	Diapolo	It would be nice to move as many settings as possible into the ui file without breaking support for older Qt versions, see: I also have been told, that "Monospace" is only for addresses and not for BTC amount labels.
837	5647361	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647361	laanwj	Id like to merge this. Can you rebase one more time?
837	5647554	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5647554	Diapolo	General ACK, but it would be nice to update and reflect my suggestions, too keep things easier in the source and use the XML files as much as possible.
837	5648268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648268	sje397	No worries :) Ill have a shot at it now. Just have to wrangle this new mac into submission.
837	5648784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648784	sje397	Ok rebased and cleaned up UI stuff. Please check the layout still looks and acts as youd like.
837	5648830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648830	Diapolo	Is this rebased agains the current master? Sorry to ask, but the changes to overviewpage.cpp / overviewpage.ui look somehow weird in the diff. It seems you change QFormLayout to QGridLayout, but to only add 2 labels...? Edit: It should only add labelImmatureText and labelImmature to the XML, no?
837	5648932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5648932	sje397	I do have my disagreements with git, but Im pretty sure its against the current master. I changed it to a grid layout because when I removed the HTML from the wallet label at the top of that section, it was no longer centered. The grid layout looked like it worked for me...but Ive only tried it on a mac.
837	5649007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649007	Diapolo	I would feel much better to only add the labels and I saw at least 2 parts, that are not in the current master, but show up in your diff ... strange.
837	5649159	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649159	sje397	No youre right - missed a fetch. Ill redo it. Sorry.
837	5649705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649705	Diapolo	The overviewpage.cpp is fine now.
837	5649842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649842	sje397	I started with the fresh master copy of the xml and just added those two fields. The rest of the changes were done automatically by the editor.
837	5649898	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649898	Diapolo	As is the one, who is able to merge this he should give the final ACK and comment :). Thanks for your work!
837	5649987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5649987	sje397	My pleasure. That should have been much easier.
837	5794316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5794316	luke-jr	Blerg, needs rebasing again :(
837	5794847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5794847	laanwj	Oops we should have merged this first before the (out of sync) stuff...
837	5796157	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5796157	Diapolo	But at least we now have a clean ui-file, should be pretty easy to just add the 2 labels in.
837	5930090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5930090	sje397	Rebased again.
837	6076185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6076185	laanwj	Finally merged... Agreed with the ui file output is just a data file, and should be opaque. No need for manually shuffling around xml unless something is broken in the designer and it produces nonfunctional code as a result.
837	6143434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6143434	Diapolo	Scott, today I observed sth. strange, the displayed Immature balance was displaying a higher value, than it should. In the transaction list the mined ammounts were already displayed as mature, but did still count towards immature. A client restart fixed this, any idea for that?
837	6143763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6143763	sje397	Ill look into it. All I can think of is that perhaps the signal to update those values isnt working correctly. It should update along with the balance above, which should also change when amounts mature.
837	6448402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6448402	sje397	I cant see why that would happen. The signal (balancedChanged) is called from the wallet model whenever updateTransaction is called...which AFAIK should be called when mined amounts mature. Ill keep looking.
837	6450474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6450474	sje397	This seems to be a more general issue, and applies to the unconfirmed balance as well and not just the immature balance that I added. I just started my client after receiving a payout confirmation email from my pool, and after sync it showed the new transaction in the transaction list as confirmed (8 confirmations) but still showed that amount unconfirmed in the overview. As with your case, a restart fixed it.
837	6453625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453625	Diapolo	Have a look at the discussion in #1475. AFAIK is currently working on that general fix.
837	6453750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6453750	sje397	Thanks Philip. Sounds like progress has been made. :)
834	3959987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3959987	laanwj	Im not sure whether its correct or not, but FYI locking isnt done around the call to `BackupWallet` in `bitcoinrpc.cpp` either.
834	3962993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3962993	sipa	All RPC calls already lock cs_main and cs_wallet already...
834	3963572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3963572	laanwj	Ok yeah I see now in ThreadRPCServer2... ok locking it is then
834	3963653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3963653	sipa	Actually, that is not necessary I think. BackupWallet() locks cs_db, flushes wallet.dat, and copies it at a stable time. Concurrent modifications to the wallet structure (which do not touch the database) are harmless.
834	3964395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3964395	sipa	One minor problem: in the select file dialog, .dat is not added automatically?
834	3964693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3964693	laanwj	Seems to be a common problem with Qt file save dialogs (see also #833). According to this stack overflow answer, the behavior with respect to automatically adding a suffix (when using the static functions such as getSaveFilename) is dependent on the platform: You could use QFileDialog::setDefaultSuffix, but that means youd have to create a QFileDialog instance yourself instead of the simple static call:
834	3965475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3965475	laanwj	I think the cleanest would be to define our own static `getSaveFileName` (for example, in guiutil.cpp) that handles the default suffix properly, and use it everywhere we use `QFileDialog::getSaveFileName` now (saving .csv in export, .png in qrcode and .dat in wallet backup).
834	3969382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3969382	TheBlueMatt	Can you update doc/assets-attribution.txt and contrib/debian/copyright with the new copyright info for new icons?
834	3969410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3969410	TheBlueMatt	Other than that, code looks good (though I havent tested or built anything)
834	3979140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3979140	sje397	I updated the copyright info and resquashed.
834	3980113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3980113	laanwj	Im working on the default suffix issue, and will issue a pull request when finished. Please dont let it block this one from accepting it into 0.6.0.
834	3980178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3980178	sje397	fyi, the extension works fine on my kubuntu (built with qt 4.7.4)
834	3980247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3980247	laanwj	Yes the problem is that getSaveFileName gets a native file dialog, which does the right thing in Windows (and KDE, seemingly) but not in GNOME. So Im working around this by making a wrapper that adds the default suffix when the native file dialog fails to do so... This is used in multiple places in the program so shouldnt hold up this pull.
834	3981395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3981395	sipa	ACK
834	4006834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4006834	TheBlueMatt	Record keeping: this fixes #370
834	4025121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4025121	gavinandresen	ACK
831	3940585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3940585	gmaxwell	Hm. I dont think we should really be showing the balance on blocks that may just get orphaned, should we?
831	3940640	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3940640	sje397	My reasoning is: - as a miner, its a critical stat I want to see - as a miner, and taking into account the label immature, the uncertainty is pretty clearly implied - those numbers are already displayed in the transaction list - now the overview numbers add up to whats in the transaction list - its not displayed if the immature balance is 0, so wont bother non-miners
831	3940679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3940679	gmaxwell	IIRC unextended blocks are not shown in the transaction list in the gui. Theyre only show at something like two confirms. If the balance doesnt match the transaction list, its going to be pretty confusing.
831	3940696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3940696	sje397	No, theyre shown immediately....and by now i meant now that I fixed it. Even if they did take 2 confirms to show, they arent available for a lot longer than that (120 blocks) so not having them included in either the actual balance or the unconfirmed balance, but still shown in the transaction list, makes it a bit inconsistent.
831	3941019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3941019	sje397	Of course, youre correct. Ive modified (and squashed) the patch to use a consistent method for display - i.e. like the transaction list, calculation of the immature balance now requires transactions to be at least 2 deep in the block chain.
831	3944087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3944087	laanwj	I agree with this patch (after the fix). Good idea to make it hidden when 0, so only miners will see it. "immature" makes it quite clear that it is still unspendable.
831	3945275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3945275	laanwj	I think setting an explicit font face for the label is an error (the other labels dont have that either...)
831	3950125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3950125	sje397	I didnt initially, but then I saw the other labels did have that, so I copied it. I was actually going to make another pull request to fix that - the font and default tooltips can be set in the designer.
831	3950679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3950679	sipa	What does this change, exactly?
831	3951168	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3951168	sje397	The main effect is the addition of a field labelled Immature in the overview section under the unconfirmed field, which shows mined income that has not yet matured (which is currently not displayed anywhere, even though the transactions exist in the transaction list). To do that I added a GetImmatureBalance method to the wallet, and connected that through to the GUI as per the GetBalance and GetUnconfirmedBalance methods. I did a small no-op change to make the code in adjacent functions a little more readable (imo); it was a change I had made in my repo earlier...but I thought it wouldnt hurt so left it in.
831	3956758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3956758	laanwj	He replaced the skip - based logic with a more direct boolean condition in `CWallet::GetBalance()` and `CWallet::GetUnconfirmedBalance()`, which is a win in clarity IMO. It does mean it needs some more testing to make sure its still the same.
831	3958776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3958776	sje397	Sorry, I found a bug in "WalletModel::update" where I was not checking for a change in the immature balance in the condition for firing the signal to update the GUI. I have fixed it and squashed it back to one commit.
831	3963288	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3963288	sje397	Fix for a balanceChanged signal that id missed in SendCoinsDialog.
831	3968294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3968294	gavinandresen	Code changes look good, I didnt test though.
831	3972214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3972214	sipa	Object::connect: No such signal WalletModel::balanceChanged(qint64, qint64, qint64)
831	3972462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3972462	sje397	sipa, that signal should exist - line 123 of walletmodel.h...maybe you need a rebuild?
831	3972499	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3972499	sje397	Oh, no i put a quint64 there instead of a qint64 - ill fix it tonight. OT - that pull request comes from the master branch of my fork - and if I add any commits, they seem to become part of this pull request. Any idea how I can rearrange things so that this pull request comes from another branch, so that I can include all my pull requests in my forks master? I can live with having an integration branch, and would rather not close this and create another pull request...but if theres an easy way to rearrange things that would be ideal.
831	3972855	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3972855	sipa	I dont think you can edit what branch a pull request refers to, but there is no problem with closing and submitting a new pull request.
831	3979155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3979155	sje397	Ok I shall close this one and submit a new one including the signal fix.
829	4084600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4084600	sipa	Command-line option "-external" added, to specify public IP manually.
829	5045981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5045981	luke-jr	Rebasing required.
829	5046492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5046492	sipa	done
829	5586575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586575	sipa	superceded
828	3921865	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921865	sipa	Added some extra fixes: * Fix sign error in calculation of seconds to sleep * Do not mix GetTime() (seconds) and Sleep() (milliseconds) * Do not sleep forever if another thread already re-locked (should close #639) * Do locking within critical section
828	3922718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3922718	TheBlueMatt	ACK
826	3921511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921511	Matoking	The main window jumps around when I change tabs, otherwise its ok. (Ubuntu)
826	3922001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3922001	laanwj	Ah, yes, it should only re-parent to the desktop when its not parented to the desktop. Ive fixed that now, please re-test.
826	3926485	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3926485	Matoking	Yes, it seems to work now.
825	3920942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3920942	laanwj	ACK. This might solve a few random RPC crashes.
825	3921494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921494	sipa	I believe delete of int* is identical to just free, so i doubt it will change anything in practice.
825	3921958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921958	laanwj	its not -- it might work with some compilers, but not by definition in the C++ standard, doing so gives "undefined behavior"
825	3923019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3923019	sipa	Sure... it certainly requires fixing because of that, but I doubt its a problem in practice for the platforms were using.
823	3923728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3923728	jgarzik	ACK
823	4021305	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4021305	luke-jr	Does this break connecting to multiple nodes on different ports? eg, multiple local bitcoinds
823	4021715	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4021715	sipa	All nodes have a self-generated unique 64-bit identifier. This patch will prevent two connections to a partner with the same identifier. Running two nodes on one system and connecting to both should not be a problem.
823	4060156	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4060156	luke-jr	Per the nonce is unique for every version message, so this would imply a protocol change making it static per client...
823	4064891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4064891	sipa	Nice catch; that makes this problem somewhat harder to solve. Closing for now...
818	3909535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3909535	gavinandresen	ACK
817	3901410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3901410	TheBlueMatt	0.5.X version:
817	3908891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3908891	gmaxwell	This is a good idea regardless of the NAT issue. There is no reason to leak internal non-routable addresses in version messages, and that part of the patch is clearly safe because using a proxy has the same effect (also because we dont actually do anything with that data). Using UPNP to get our external IP is also a good idea. The current dependance on centralized address identifying services is a bad one.
817	3909598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3909598	gavinandresen	ACK
817	3921594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921594	sipa	ACK
817	3923520	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3923520	gmaxwell	ACK, took me a while to setup upnp to test this.
816	3900812	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3900812	gmaxwell	We know such routers exist theyve been observed to impact p2pool users (which uses a similar protocol with checksums on the version messages). But we dont know what brands or how common they are. Its a pretty bone headed thing to do. Rather than just ignoring it, it would probably be better to still log it but leave the connection up. Then wed at least get some helpful logs.
816	3902113	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3902113	laanwj	Huh this really surprises me. The IP replacement certainly exists, but used to be only for protocols like FTP and IRC that were known by the router, not in unknown binary data.
816	3909524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3909524	gavinandresen	Id really like to know more about the root and scope of the problem-- was this "one or two people had problems with p2pool because they misconfigured iptables/netfilter" or is it "LinkSys routers automangle the first packet if its first N bytes look like it is an FTP session" ?
816	3909807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3909807	gmaxwell	Unfortunately we dont know the scope. We observed checksum errors on p2pool. Forrest investigated and found this to be the cause through some lucky reasoning. It appeared to be two distinct users, out of something like 150 using P2Pool at the time. So, Id guess we could be looking at incidents rates between something like 1:10 and 1:100000 in the general bitcoin using population. There could also be port number differences that moot it. If this were just some new feature in 0.6 I wouldnt even bother talking about it if we found it to be an issue in practice wed just issue new software. But because its a network wide synchronized hardcut its more troubling. I think the bluematt pull request is prudent its better behavior even if this is a non-issue, and should cleanly improve this behavior Perhaps we should keep this particular patch in our pocket in case things go pear shaped? Luke suggested we send an alert 24 hour ahead of the switch saying that an automated switchover was about to take place and advising people to visit bitcoin.org for the latest information. This sounds prudent to me, since if it does go poorly (due to the nat or other issues) we may not be able to send an alert to the impacted users.
816	4021574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4021574	jgarzik	IMO consider keeping existing (feb20 switchover) behavior as default. Add a "no-version-csum" (or "fucked-router") option. I am deeply suspect of routers that randomly rewrite binary packets transited in unknown (to the router) binary protocols. Would rather err on the side of stronger checksum protection, and only weaken that as absolutely necessary.
816	4176503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4176503	gavinandresen	Given the lack of problems in the last 5 days (besides alternative implementations that didnt code in the change), I think this is safe to close as "unnecessary."
813	3888028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3888028	gavinandresen	ACK
813	3897815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3897815	dooglus	I left this running overnight and it seems to be working fine. The number of transactions in the pool is consistently showing 34 less than is shown on .
813	3900528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3900528	sipa	ACK
813	5421875	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5421875	rebroad	How *could* you remove something from the pool if it isnt in there?
808	3857579	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3857579	TheBlueMatt	a5161d9ec721736fb095f1c47aa9f4847ee3ebc98a60be225f7348cdd5a20cb5 bitcoin-deps-0.0.2.tbz2
808	4106253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4106253	gavinandresen	Whats the status of this? Doesnt-yet-make-the-build deterministic?
808	4106337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4106337	luke-jr	Correct; I guess some faketime trickery is needed also.
808	4108057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4108057	TheBlueMatt	Im working on this and should have a whole set of updates to our gitian scripts in the next couple of days.
808	4186464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186464	sipa	This was superceded by #887, right?
808	4186850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186850	TheBlueMatt	Correct, this has been superceded. Pieter Wuille <reply@reply.github.com> wrote: This was superceded by #887, right? --- Reply to this email directly or view it on GitHub:
807	3855698	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3855698	TheBlueMatt	No, the original intent was that req- prefixes are optional and can be applied to any params. ie a merchant may want to enforce or not enforce an expires param. That should be clarified in the bip. (see
807	3885566	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3885566	laanwj	In that case should there be a fShouldReturnFalse = false; in the `amount` handling?
807	3891803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3891803	TheBlueMatt	Heh, oops...fixed
807	3909724	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3909724	gavinandresen	This is the type of code that aught to have unit tests. I dont know nuthin about unit testing with Qt; is it easy to get qmake to compile unit tests, and/or is there support in Qt for unit tests?
807	3915539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3915539	TheBlueMatt	Still gotta add a ton more test, but I put in a bitcoin-qt test suite structure. Just build with qmake bitcoin-qt.pro BITCOIN_QT_TEST=1; make you should then find a bitcoin-qt_test exe to call
807	3915820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3915820	TheBlueMatt	OK, there we go, test away.
807	3919521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3919521	laanwj	ACK, nice tests
806	3921397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921397	laanwj	ACK (huh, I remember that I acked this before but dont see it anymore...)
806	3921557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921557	sipa	Strange, I also remember your previous ACK...
806	3922694	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3922694	TheBlueMatt	ACK
806	3980822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3980822	sipa	Update: fixed some (very old) bugs: * vnThreadsRunning[1] occasionally reached -1 * vnThreadsRunning[1] wasnt checked at shutdown This should fix some (rare and harmless) segfaults at shutdown
806	3988251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3988251	luke-jr	(note: fix only in #844)
803	3837272	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3837272	sipa	ACK
801	3829515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3829515	gavinandresen	ACK: compiles OK for me, only source code changes are cosmetic. I get 14 of these warnings: ``` Updating src/qt/locale/bitcoin_da.qm... Generated 314 translation(s) (302 finished and 12 unfinished) Ignored 50 untranslated source text(s) ``` ... all complaining about 50 or more untranslated source texts.
801	3832429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3832429	laanwj	ACK
800	3832506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3832506	laanwj	Updated comment
800	4032348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4032348	Plaidxx	Here are a couple (probably stupid) questions: 1. ```sub.idx``` is set now, and wasnt previously, why? 2. Is there a difference between using ```wallet->GetCredit(txout)``` and ```txout.nValue``` to get the value for ```sub.credit``` (for generated coins) 3. Will ```wallet->IsMine(txout)``` be true for generated coins and non-address or non-simple transactions? (Previously it was only checked for transactions received via an address) Thanks in advance. There is a somewhat steep learning curve in getting acquainted with the Bitcoin code base. :)
800	4032676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4032676	laanwj	1. sub.idx is a sorting key, used to sort multiple transactions with the same txid. Previously it just defaulted to 0. 2. wallet->GetCredit(txout) counts the credit for the entire transaction, for all outputs that are owned by the wallet. It performs the same looping over outputs that is now done manually. 3. Yes, ismine is true for all outputs that the wallet owns the private key for.
800	4035348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4035348	Plaidxx	I appreciate you taking the time to answer my admittedly elementary questions. They all make perfect sense now.
799	3816348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3816348	laanwj	Good idea
799	3829662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3829662	luke-jr	Code looks good to me
799	3847391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3847391	mcorlett	Wont entropy turn out to be a problem?
798	3816236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3816236	gmaxwell	I fail at github, opening from the right branch.
795	3801556	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3801556	luke-jr	It already works correctly for me. What does this fix?
795	3801644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3801644	laanwj	it fails in some cases, see #788, #692
795	3801650	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3801650	luke-jr	Does this make #691 unnecessary?
795	3802169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3802169	Matoking	It could be possible to have a single QWidget for this instead of creating and setting the new one to parent every time. Then there is the possibility of setting the parent to NULL in both cases, but window dimensions wont be preserved that way as far as I know.
795	3817059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3817059	laanwj	Preserving window dimensions is nice to have Id go for creating a single dummy QWidget in the constructor, storing it on the BitcoinGUI object.
795	3818210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3818210	Matoking	The latest commit preserves the window dimensions but not the window position (it appears at the top-right position on the screen at least on Ubuntu)
795	3829606	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3829606	luke-jr	git reset --hard master git diff f69b82e..d5dc7c91 | patch -p1 git add src/qt/bitcoingui.{cpp,h} git commit -c b65a3532
795	3830029	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3830029	gavinandresen	Diff look OK to me, but this does need to be rebased.
795	3833941	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3833941	Matoking	Git really makes me want to pull out my hair sometimes.
795	3887665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3887665	Matoking	Okay, everything should be in order now.
795	3921306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3921306	laanwj	can you try #826 and verify it still fixes your problem (Ive reworked it a bit so that it works for Ubuntu too...)?
795	3926749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3926749	laanwj	#826 was merged, closing this one, thanks!
792	3769422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3769422	gmaxwell	This is a fairly minimal change for sane behavior. I think we _also_ should check that our listening is working before advertising and that we shouldnt advertise when were completely full, but the first requires a fair amount of additional code and the second requires careful consideration.
792	3771920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3771920	jgarzik	ACK
792	3783510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3783510	TheBlueMatt	ACK
792	3804511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3804511	gavinandresen	ACK, sanity tested with/without -nolisten.
787	3687283	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3687283	gavinandresen	What needs testing with these changes? I assume: + Deals with existing addr.dat + Is faster + Works with -noirc -nodnsseed and a removed addr.dat (bootstrap from seed nodes) Do you have a tool for comparing two addrman databases? Might be nice to verify that two copies of bitcoin started at about the same time end up with mostly different peer-sets.
787	3697594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3697594	sipa	Some improvements and bugfixes done. * It will convert an old addr.dat to the new format. During the first start-up, all addr.dat entries are imported. During a second start-up, all old addr entries are removed (using CDB::Rewrite). * It is faster in the sense that all locking issues involving CAddrDB and cs_mapAddresses are gone, and address-operations are fast. Reaching 8 connections may be a bit slower, as the new code much less strongly favors trying recently seen addresses - that is the price to pay for some protection against sybil attacks. When connection count is low, it will however favor self-tried addresses. * Yes, booting from seed nodes is no problem. The main thing to be tested is whether the bucket count (256 and 64) and bucket size (64) are large enough, knowing that they do not get quickly filled completely. For example, a new-style addr.dat of a week old, will it easily find connections when ran using -noirc -nodnsseed -nolisten?
787	3746080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3746080	gavinandresen	Testing on my Mac: I get a core dump on exit, in: CDB::Write<std::string, CAddrMan> (this=0xb0594f20, key=@0xb0594ed0, value=@0x372560, fOverwrite=true) at db.h:106 106 int ret = pdb->put(GetTxn(), &datKey, &datValue, (fOverwrite ? 0 : DB_NOOVERWRITE)); Looks like a use-after-free problem: (gdb) p *this $1 = { pdb = 0x5005da0, strFile = { _M_dataplus = { <std::allocator<char>> = { <__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, members of std::basic_string<char,std::char_traits<char>,std::allocator<char> >::_Alloc_hider: _M_p = 0x500168c "addr.dat" } }, vTxn = { <std::_Vector_base<DbTxn*,std::allocator<DbTxn*> >> = { _M_impl = { <std::allocator<DbTxn*>> = { <__gnu_cxx::new_allocator<DbTxn*>> = {<No data fields>}, <No data fields>}, members of std::_Vector_base<DbTxn*,std::allocator<DbTxn*> >::_Vector_impl: _M_start = 0x0, _M_finish = 0x0, _M_end_of_storage = 0x0 } }, <No data fields>}, fReadOnly = false }
787	3746236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3746236	gavinandresen	Also: I tested running with your patch and then running an old bitcoind; works nicely (old bitcoind thinks the addr.dat is empty, which is OK; run the new bitcoind and it thinks it needs to rewrite addr.dat again, which is also OK).
787	4156179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4156179	sipa	recently had a crash that seemed related to addrman; I am unable to reproduce the problem though. Stack traces or valgrind information from anyone who can reproduce it, is very welcome.
786	3673921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3673921	TheBlueMatt	ACK
786	3681453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3681453	gavinandresen	ACK
786	3702752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3702752	luke-jr	Does this remove the ability to intentionally remove/corrupt your private keys and run with read-only access?
786	3706131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3706131	sipa	Yes... You can always encrypt it and throw away the passphrase, though.
782	3645455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3645455	piratelinux	Hi, this is onelineproof from IRC. I think you need to do a bit more than just that...If youre first setting pubkey to be vchpubkey, then obviously they will be equal. But eventually, I can test it to make sure... If you wanna peek at my code that implements such a function in C, take a look at the function priv_to_pub in
782	3646222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3646222	sipa	CKey::GetPubKey extracts the public key from the OpenSSL Key structure, which is constructed at the time of the CKey::SetPrivKey() call. The information present there from the CKey::SetPubKey() is only used to know whether the key is compressed.
782	3646345	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3646345	TheBlueMatt	Why not check wkeys as well?
782	3646400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3646400	sipa	do they exist?
782	3646631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3646631	TheBlueMatt	Look at the block starting at line 868.
782	3650664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3650664	gavinandresen	wkeys are dead code that should be removed, if I recall correctly.
782	3652635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3652635	TheBlueMatt	wkeys were used by very, very old clients instead of keys iirc, No reason to remove support for opening old wallets. Gavin Andresen <reply@reply.github.com> wrote: wkeys are dead code that should be removed, if I recall correctly. --- Reply to this email directly or view it on GitHub:
782	3661276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3661276	piratelinux	I still dont think it will work, because I think what SetPrivKey does is take the public key part of the full private key, but if the secret part (usually 32 bytes) is corrupted, it wouldnt know. I did a rough test, but maybe if you could send me a release that I can compile and youre confident works, then I can do a more thorough test. The master branch of bitcoin is not compiling for me. Thanks. edit: I think it compiles fine now, so I can test with master branch
780	3805637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805637	jgarzik	NAK for reasons discussed on forums/list. Further, this is also an administrative close: there is no reason to clog the pull request queue with "leave open until accepted" requests
780	3805916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805916	luke-jr	There are no such outstanding reasons to not replace BIP 16 with 17.
777	3617930	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3617930	TheBlueMatt	NACK, doesnt build: /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 0 has invalid symbol index 11 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 1 has invalid symbol index 12 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 2 has invalid symbol index 2 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 3 has invalid symbol index 2 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 4 has invalid symbol index 11 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 5 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 6 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 7 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 8 has invalid symbol index 2 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 9 has invalid symbol index 2 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 10 has invalid symbol index 12 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 11 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 12 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 13 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 14 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 15 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 16 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 17 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 18 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 19 has invalid symbol index 13 /usr/bin/ld: /usr/lib/debug/usr/lib/x86_64-linux-gnu/crt1.o(.debug_info): relocation 20 has invalid symbol index 21 /usr/lib/x86_64-linux-gnu/gcc/x86_64-linux-gnu/4.5.2/../../../crt1.o: In function `_start: (.text+0x20): undefined reference to `main collect2: ld returned 1 exit status
777	3618421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3618421	luke-jr	Did you make clean first? It works fine here... :/
777	3618843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3618843	TheBlueMatt	Nope, still happens if I make -f makefile.unix clean first
777	3619111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3619111	luke-jr	What boost version? I have 1.46.1
777	3619150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3619150	gavinandresen	Not working for me, either on an ubuntu 64 VM: U64:src gavin$ make -f makefile.unix USE_UPNP= test_bitcoin g++ -c -pthread -Wextra -Wno-sign-compare -Wno-char-subscripts -Wno-invalid-offsetof -Wformat-security -g -DNOPCH -I/home/gavin/src/bitcoin/src -DUSE_SSL -fno-stack-protector -fstack-protector-all -Wstack-protector -Wl,-z,relro -Wl,-z,now -D_FORTIFY_SOURCE=2 -O2 -MMD -o obj/test/base58_tests.o test/base58_tests.cpp U64:src gavin$ make --version GNU Make 3.81 I have no idea why TESTDEFS isnt working, it looks like it aught to work...
777	3619240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3619240	TheBlueMatt	IIRC you cant define a variable in a conditional in makefiles and have it work outside the conditional.
777	3619351	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3619351	luke-jr	GNU Make 3.82 fixed some bugs... though not ones that Id think affect this.
777	3620222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3620222	TheBlueMatt	~~Compiles now, but it still doesnt have BOOST_TEST_DYN_LINK defined, which I dont know if it will kill something, but Id say it should absolutely be there before merge (esp if this is going to be default).~~ Nevermind, ACK, though not a bugfix.
775	3615205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3615205	gavinandresen	ACK
773	3626456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3626456	luke-jr	NACK. Please dont make it harder to accept non-standard transactions. Minor nitpick: the new sigop counting isnt P2SH-specific, even if specified in BIP 16. In the long-term, the language will probably be confusing.
771	3576919	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3576919	TheBlueMatt	Oh and as usual thanks to and for comments/suggestions/general help for my C++ noobishness along the way.
771	4022607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4022607	luke-jr	This seems to need rebasing... also, at least fedb422 and bc98084 dont belong here (and create regressions).
771	4032631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4032631	TheBlueMatt	Rebased, should be pretty mergeable now (aside from the elusive performance issue).
771	4061228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4061228	TheBlueMatt	Fixed a few minor issues and rebased. Still nothing new on the performance issue(s).
771	4130323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4130323	TheBlueMatt	So, good news on the performance front. While I was benchmarking bitcoin built in debug vs release (for gitian stuff), I noticed there was a bit of a performance decrease when built in debug mode. As it turns out, I had always been benchmarking CBlockStore in debug mode. When ff66202 is removed and CBlockStore is benchmarked, it has the slight performance improvement over master that would be expected.
771	4245022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4245022	TheBlueMatt	Rebased.
771	4491902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4491902	TheBlueMatt	Ridiculously minor fixes to make valgrind happy and rebased.
771	4863328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4863328	TheBlueMatt	Rebased, added a simple unit test, and abstracted one more thing.
771	4863342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4863342	TheBlueMatt	Not sure why github is showing a few of gavins commits that are on master in the commitlist, but they have the same commitid, and this appears to be rebased fine in git...
771	4989700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4989700	TheBlueMatt	Closing this since after some thought I really dont trust myself to touch this much code without introducing one or two fatal bugs. If anyone does want to look at this, spent some time cleaning up the internals to look nicer/run a bit smoother at
771	4994255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4994255	sipa	large refactorings always carry some risk, but imho this is a refactor that needs to happen anyway. It can probably use a few more eyes, but it seems to run without problem, so it seems a waste not trying to get it merged. By the way, ooifiedbs is rebased against master.
771	5525296	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5525296	TheBlueMatt	Slowly working on rebasing this.
771	5533709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5533709	TheBlueMatt	Rebased against master.
771	5536064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5536064	sipa	I get one potential deadlock: in net.cpp, AskForBlocks sends messages while holding the cs_vNodes lock. Its better to make a copy of the node you need to contact, ->AddRef() it, send the message, and ->Release().
771	5544797	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5544797	TheBlueMatt	Fixed.
771	5546522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5546522	TheBlueMatt	Spent some more time double checking and triple checking the latest rebase...found one more potential deadlock, fixed one potential race...more checking to be done Ill check in the morning, its almost 6am...
771	5564417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5564417	TheBlueMatt	Fixed the one other potential deadlock Im aware of...its kinda an ugly fix, but it works, and since the transaction copying only happens in the cblockstore callback thread(s), it shouldnt effect performance either way. Gonna do more testing in the next few days, but this should be pretty good right now.
771	5588213	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5588213	TheBlueMatt	Rebased onto current master.
771	5594553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5594553	TheBlueMatt	Rebased and have been testing...looking largely good to me, so any additional eyeballs at this stage would be appreciated.
771	5985676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5985676	TheBlueMatt	Closing to redo from the ground up (again). Continuing rebasing this would simply cause issues and no doubt create odd interactions with recent commits.
770	3617856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3617856	gavinandresen	Getting: subprocess.CalledProcessError: Command [strip, -x, dist/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib] returned non-zero exit status 1 ... because: bash $ ls -l dist/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib -r-xr-xr-x 1 gavin gavin 383K Jan 12 11:46 dist/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib* bash $ strip -x dist/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib strip: file: /Users/gavin/src/integration_btc/dist/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib is not writable (Permission denied) Im not sure what the best solution is; either chmod it before (and after) stripping, or skip stripping non-writeable libraries (might be a good assumption that theyre system libraries that have already been stripped).
770	3661590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3661590	p2k	tbh, I chmodded that file long ago in /opt/local/lib/libssl.1.0.0.dylib to get rid of that issue for good. Only a tiny amount of files with the .dylib extension dont have the executable flag set in /opt/local/lib and thus I considered this an error on the MacPorts side.
770	3805525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805525	gavinandresen	Any objections to this patch to workaround the MacPorts bug? If not, Ill pull your changes and this patch: ``` diff --git a/contrib/macdeploy/macdeployqtplus b/contrib/macdeploy/macdeployqtplus index 914edb7..e159f9b 100755 --- a/contrib/macdeploy/macdeployqtplus +++ b/contrib/macdeploy/macdeployqtplus -17,7 +17,7 # along with this program. If not, see <http://www.gnu.org/licenses/>. # -import subprocess, sys, re, os, shutil, os.path +import subprocess, sys, re, os, shutil, stat, os.path from time import sleep from argparse import ArgumentParser -256,7 +256,11 def copyFramework(framework, path, verbose): if verbose >= 3: print "Copied:", fromPath print " to:", toPath - + + permissions = os.stat(toPath) + if not permissions.st_mode & stat.S_IWRITE: + os.chmod(toPath, permissions.st_mode | stat.S_IWRITE) + if not framework.isDylib(): # Copy resources for real frameworks fromResourcesDir = framework.sourceResourcesDirectory if os.path.exists(fromResourcesDir): ```
770	3819060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3819060	p2k	No objections, go ahead.
770	3830438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3830438	gavinandresen	Pulled
769	3572199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3572199	luke-jr	How about just stripping it out instead? ;)
769	3805583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805583	jgarzik	visual ACK
769	3805631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805631	luke-jr	To elaborate, stripping it out would enable service providers to add an extra signature for 0-confirmation trust, rather than the blockchain-spamming "green addresses" proposal.
769	3830458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3830458	gavinandresen	Stripping is a bad idea, that changes the transaction id.
769	3830657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3830657	luke-jr	It should have no effect on normal clients, which wont add extra data. Clients that do add extra data can be written to expect the change.
766	3552172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3552172	luke-jr	Its not useless, and not worse. Stop trolling. [14:59:12] <luke-jr> BlueMatt: Im not going to waste time arguing over something stupid like this. Its better now than it was before. If you want to improve on it, go ahead. If not, thats no excuse to complain its imperfect and rip it out.
766	3552194	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3552194	TheBlueMatt	My point is that its worthless info, mucks up the code that much more, and should never have been merged. Since its not actually released, there is no harm in removing it.
766	3552424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3552424	TheBlueMatt	Readded nPooledTx and nLastBlockTx in a reasonable way.
766	3552438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3552438	luke-jr	currentblocksize is missing
766	3552681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3552681	TheBlueMatt	Im not gonna fix all your code for you, I was just showing that your claims that its impossible to do well without a ton of changes were unfounded. Luke-Jr <reply@reply.github.com> wrote: currentblocksize is missing --- Reply to this email directly or view it on GitHub:
766	4032545	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4032545	TheBlueMatt	Superseded by 4b54cb93e87816c50e5da90767ee1bc056166552 in cblockstore.
765	3571765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3571765	TheBlueMatt	What about tx replacement if the tx that the to-be-checked tx depends on adds additional inputs?
765	3572010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3572010	TheBlueMatt	Nevermind, only applies if the local node is allowing rd replacement. Though maybe we want to make sure this will still work when we do rd replacement.
765	3618479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3618479	TheBlueMatt	ACK
759	3499455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3499455	sipa	ACK
759	3502462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3502462	gmaxwell	I reviewed this, and it works for me. ACK.
759	3551781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3551781	gavinandresen	ACK
759	3572404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3572404	luke-jr	This needs to be rebased on top of coinbaser, as it duplicates some functionality.
757	3491914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3491914	laanwj	ACK, verified (contains whitespace changes)
757	3496138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3496138	TheBlueMatt	ACK everything but src/json/json_spirit_reader_template.h (that is copied source from json, and I see no reason it needs to comply with our coding standards).
757	3551794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3551794	gavinandresen	Agree with Matt, changing json_spirit_reader_template.h is a bad idea, I like the other changes.
755	3483543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3483543	sipa	I have no problem with being able to state your opinion about the matter when running the client (even though using the client already implies some form of consent). However, the coinbase-voting is intended to be a good representation of the mining power behind the proposal. As the current codebase contains the changes stated by BIP 0016, the codebase should provide the vote as well. IMHO, a -nop2sh is possible that disables both the vote and the behaviour.
755	3551833	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3551833	gavinandresen	Either a -p2sh=1/0 or a -nop2sh=1/0 is OK with me, but not both (what happens if I screw up and specify -p2sh=1 -nop2sh=1 ?)
755	3552826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3552826	luke-jr	I didnt realize bool args took a parameter ;) Refactored with -p2sh[=0/1]
755	3805514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805514	jgarzik	I agree w/ sipa: create a "nop2sh" option, which is disabled by default (i.e. p2sh is enabled by default)
755	4021183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4021183	luke-jr	#804 merged, closing
752	3435800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3435800	laanwj	ACK
750	3397300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3397300	TheBlueMatt	(these were legacy from original debian folder used for official debian releases)
750	3407780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3407780	jgarzik	ACK
748	3413715	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3413715	gavinandresen	genjix makes a good suggestion: refactor ConnectInputs so fee payment is computed, and transaction possibly rejected, before ECDSA signature checking. Also sipas base58 encoding for public keys (compressed or full) aught to be used in the validateaddress/addmultisig RPC calls.
743	3386834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3386834	jgarzik	visual ACK (== I did not build or test it, only a github conceptual review)
743	3454586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3454586	luke-jr	Gavin, this branch is missing in your repo...?
743	3455691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3455691	gavinandresen	I removed this branch accidently-- restored.
740	3337214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3337214	luke-jr	would be much nicer if you just typedef std::vector<char> vector_type; :P
740	3337231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3337231	TheBlueMatt	I prefer it the other way, but meh I dont care; changed.
740	3337245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3337245	gmaxwell	well, ... 1000x is perhaps an exaggeration. More like 40-50x or so. A _complete chain_ syncup here took 29 minutes on code with all the mlock removed. On the same system syncing to about height 37k took three and a half hours earlier today. Im not patient enough to benchmark a complete chain syncup without the fix, though perhaps someone else will. This problem was really tricky to find oprofile cycle sampling was completely blind to the slowdown caused by mlock, I guess if I had hooked GLOBAL_TLB_FLUSHES I would have seen it but who would guess to do that? Valgrinds callgrind couldnt see it (unsurprisingly). I eventually found it with ltrace. In general we shouldnt be calling mlock per-allocation for _anything_. Even on private key data its really too slow to use more than a couple times during execution, though I guess its not completely horrific if just used for that. Instead we should pre-allocate a mlocked arena and allocate from that for private keys. Perhaps boost has something to make this easier? Independent of the that, CDataStreams wide usage and allocation behavior make me cringe. Its creating a LOT of tiny indirect heap allocation calls all over the code. That cant be good for performance. (though obviously not on the same scale as the mlock overuse)
740	3341417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3341417	gavinandresen	Error compiling, compiler version problem? i686-apple-darwin10-llvm-g++-4.2 (GCC) 4.2.1 (Based on Apple Inc. build 5658) (LLVM build 2335.6) serialize.h:872: error: CDataStream::CDataStream(const std::vector<char, std::allocator<char> >&, int, int) cannot be overloaded serialize.h:867: error: with CDataStream::CDataStream(const std::vector<char, std::allocator<char> >&, int, int) Also, not zeroing freed memory any more makes me nervous, because memory containing leftover garbage is a good building block for remote code exploits. Maybe a free_after_delete_allocator... (does boost already define one?)
740	3341582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3341582	sipa	Same error here, on Ubuntu. Im also in favor of keeping the zeroing functionality, even for non-mlocked allocations.
740	3341703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3341703	gmaxwell	Boost apparently does have an allocator, which you can override how it gets memory: If we want to be properly security paranoid, and were using a specialized allocator, we could potentially add canary functionality just like the stack protection in addition to the zeroize. Id have to dump the allocator usage data to see how much overhead that might have. (e.g. add a word after (and perhaps before) every allocation which is checked on free) I think the mlock security improvement is pretty inconsequential. The significance of the zeroizing at making use-after-free exploits hard is more significant. While were discussing this, we should note that if we use our own allocator we should add IFDEFed out valgrind macros (see memcheck.h IIRC) so that we dont reduce valgrinds sensitivity.
740	3344150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3344150	TheBlueMatt	Fixed (I need to stop coding so late, probably also why I didnt catch this bug before I included it in my encryption pull...) My 2 cents (well, ok more like 1): use-after-free exploits are so rare its almost not worth doing the freeing. When you combine that with the fact that the item in question is a std::vector, not a class, I would argue its even less of an issue. If someone wants to use the stuff in the vector to call a nasty function, they would be 100x more likely to be able to while its still allocated and in memory, not once it has been freed/reallocated.
740	3344492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3344492	TheBlueMatt	Oops more to fix( I had to board and didnt have time to test it) Ill fix it when Im in the air and have wifi gmaxwell <reply@reply.github.com> wrote: >Boost apparently does have an allocator, which you can override how it >gets memory: >http://www.boost.org/doc/libs/1_47_0/libs/pool/doc/interfaces/user_allocator.html >If we want to be properly security paranoid, and were using a >specialized allocator, we could potentially add canary functionality >just like the stack protection in addition to the zeroize. Id have to >dump the allocator usage data to see how much overhead that might >have. (e.g. add a word after (and perhaps before) every allocation >which is checked on free) > >I think the mlock security improvement is pretty inconsequential. The >significance of the zeroizing at making use-after-free exploits hard is >more significant. While were discussing this, we should note that if >we use our own allocator we should add IFDEFed out valgrind macros (see >memcheck.h IIRC) so that we dont reduce valgrinds sensitivity. > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/740#issuecomment-3341703
740	3351576	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3351576	TheBlueMatt	Actually fixed in that commit.
740	3353097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3353097	laanwj	ACK, this is great :)
740	3356239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3356239	gavinandresen	I love the performance improvement, but I still dont like the elimination of zero-after-free. Security in depth is important. Heres the danger: Attacker finds a remotely-exploitable buffer overrun somewhere in the networking code that crashes the process. They turn the crash into a full remote exploit by sending carefully constructed packets before the crash packet, to initialize used-but-then-freed memory to a known state. Unlikely? Sure. Is it ugly to define a zero_after_free_allocator for CDataStream? Sure. (simplest implementation: copy secure_allocator, remove the mlock/munlock calls). But given that CDataStream is the primary interface between bitcoin and the network, I think being extra paranoid here is a very good idea.
740	3356541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3356541	gmaxwell	The performance difference from avoiding the zeroization doesnt appear to be huge: It saves about 30 seconds out of a 30 minute full sync (compared to not zeroizing). Chart showing all mlocks gone, vs bluematts patch: The bluematt patch gets a late start due to the time spent filling the keypool, but because its a bit faster it eventually catches up. The mlocks on the keying stuff are still problematic: The keypool refill takes 17 seconds with the mlocks in, <1 second with them out. Users with encrypted wallets will often do a mass refill when they unlock. To resolve that the frequency of mlocking should be reduced. The pool allocator I linked to above should make that easy to use (make secure_allocator use the pool, make the pool use malloc + mlock). The frequent mlock usage may also be creating security weaknesses in the form of mlock ineffectiveness. If the process leaks mlocked pages then eventually it will hit the limit (e.g. I think most linux desktops have a 1MB/process limit or something like that), and past the limit pages will no longer be mlocked.
740	3359285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3359285	TheBlueMatt	I was thinking it would make more of a performance difference, but as long as its very minor, I just made it zero_after_free.
740	3359368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3359368	gmaxwell	BlueMatt: I dont think you should have to provide a allocate(). Though maybe its fine to leave it in case we convert it into a canary allocator.
740	3362592	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3362592	sipa	ACK
740	3363921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3363921	TheBlueMatt	heh, of course...maybe I just need to give up programming at this point...
740	3365334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3365334	gmaxwell	ACK
738	3335423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3335423	sipa	Thanks to gmaxwell for finding the bug and testing my patches, by the way.
735	3342374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3342374	gavinandresen	ACK, compiles and runs on my Mac. Ill let somebody else comment on the API, network programming isnt my thing.
735	3352998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3352998	laanwj	Code changes OK, compiles and runs on Ubuntu 11.10.
735	3354020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3354020	sipa	Also compiles on ubuntu-mingw.
735	3354062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3354062	sipa	Forgot to mention: because name lookups happen using the unified getaddrinfo() call, a #define _WIN32_WINNT 0x501 was necessary, which means WIndows XP or later. Is it a problem to break compatibility with Windows 2000 and earlier (not even sure it still worked on those)?
735	3354120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3354120	laanwj	Yes, I noticed that, but its fine with me, no need to support >10yr old OSes
735	3363945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3363945	TheBlueMatt	Bitcoin currently doesnt work on pre-WinXP (due to issues with the build of miniupnpc, which I still havent fixed, but I suppose if you are going to break it again, might as well not bother)...
735	3378630	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3378630	sipa	by the way, does it work in the windows dev environment as well?
735	3386369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3386369	jgarzik	overall ACK Minor quibble, maybe ignore-able: The connection logic in CService feels like it belongs in a separate class. CService and CNetAddr seem more focused on address and/or endpoint datum, whereas the connect() logic seems more in the socket realm.
735	3387857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3387857	sipa	I moved ConnectSocket out of CService.
735	3389022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3389022	jgarzik	visual ACK
735	3394514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3394514	pstratem	I see nothing obviously wrong
733	3333466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3333466	TheBlueMatt	Whats the motivation for this? Also, wont this break a ton of other logic?
733	3334291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3334291	coderrr	it fixes what I perceived to be a bug since the code didnt act as this comment said it should: // Only consider transactions "mine" if we own ALL the // keys involved. multi-signature transactions that are // partially owned (somebody else has a key that can spend // them) enable spend-out-from-under-you attacks, especially // in shared-wallet situations.
733	3336639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3336639	TheBlueMatt	Sorry, I saw IsMine and didnt bother to read that it was in MULTISIG...gavin would know better if this is a bug.
730	3281375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3281375	gavinandresen	ACK. I shouldve written a unit test...
728	3265705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3265705	TheBlueMatt	More to come... (Win32 gitian stuff is a pain as it requires libpng and its deps...)
728	3269582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269582	luke-jr	ACK
728	3269734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269734	TheBlueMatt	Dont get too execited acking yet...I thought I would have the win32 gitian stuff done quick but I got distracted and also need to do libzlib and libpng.
728	3270383	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3270383	TheBlueMatt	OK, that should work (though I havent tested the win32 stuff, just wrote it and got it to compile myself outside of gitian)...
728	3288120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3288120	luke-jr	Also, ACK on the added commit. Cant personally test, but it looks sound and simple.
727	3266344	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3266344	jgarzik	ACK though I still prefer original getblock/dumpblock, which provides more information than gettransaction presently provides: full script dump, full expansion of vin/vout, etc. Much more raw and programmer-oriented.
727	3268607	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3268607	gavinandresen	If you feel like a little after-Christmas coding, Id be OK with an expanded gettransaction that returns all the gory details. Or that returns information for non-wallet transactions.
727	3270863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3270863	sipa	ACK
727	3271479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3271479	jgarzik	I would lean towards adding a separate dumptx that returns all the gory details, keeping it separate from current gettx. But thats separate from this pull request...
726	3264285	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3264285	gavinandresen	Forgot to say how I tested: Ran bitcoind normally to get caught up on the block chain, verify that I get more than 8 connections, and verify (by looking at debug.log) that I connect to the dns seeds and IRC. Ran Vidalia on my Mac, got connected to the Tor network. Ran bitcoind -proxy=127.0.0.1:2050 VERIFY: I get only 8 connections, and do not connect to dns seeds or IRC. Then removed addr.dat, and re-ran with -proxy... VERIFY: built-in IP seeding eventually (after trying several non-listening seeds) bootstraps through Tor.
723	3259714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3259714	laanwj	ACK
723	3260258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3260258	laanwj	Just tested this, it works
721	3262572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3262572	gavinandresen	Is this really necessary? All of the extra information (and more, I believe) is returned in some form or another from the existing "getmemorypool" command.
721	3262589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3262589	luke-jr	Maybe if one wants to do the math externally, making a number of assumptions on data not included... "getmemorypool" also has a lot of overhead, while this has basically none.
721	3387039	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3387039	jgarzik	Initial reaction: IMO not needed / overkill. Its not the end of the world if we just add a few new fields to getinfo, if it is simply additional information you desire. It is not as if getinfo is somehow resource constrained. However, after thinking a bit more, I think it would be nice to (1) add this getmininginfo, while (2) deleting (not simply deprecating) the mining info in getinfo. While odd people (alt/test chain users often) continue to find some utility in the internal reference miner, it should be safe to simply move that stuff out of getinfo. If nothing else, that will cut down on people confused about why "hashespersec" or "generate" shows zero when they are mining. Lets clean it up, and not worry about the odd duck who would see breakage.
721	3470692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3470692	sipa	Agree with here: lets clean up getinfo, and create a specific getmininginfo call for those who are interested. Over what time frame can we remove fields from getinfo?
721	3473475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3473475	jgarzik	The commit should remove gen/gpl/hps from getinfo, and create getmininginfo, at the same time IMO. I would ACK that for immediate timeframe.
721	3473582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3473582	luke-jr	Like this?
721	3481510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3481510	jgarzik	looks great, thanks
720	3236009	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3236009	jgarzik	ACK, though Im unsure of the value of this code churn
719	3451507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3451507	jgarzik	1) can we get by with just setworkaux and no -coinbaser? 2) if we are doing -blocknotify as system() only (see separate pull), drop TCP socket here and do same 3) meta: should be collapsed into fewer commits 4) mapAuxCoinbases seems like it should really be a vector 5) truncating script at 100 bytes creates more problems than it solves. we should fail large scriptSig, not truncate. search for "resize(100)" and kill.
719	3451775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3451775	luke-jr	1) no reason to; people are moving to other software for mining because bitcoind doesnt support these 2) system() is too simplified, this needs popen() to get stdout from process; TCP socket can probably go, but might be needed since this could potentially be higher-load (new blocks, on the other hand, are only once every 10 mins on avg) 3) could be, but not should be; multiple steps makes bisecting and merging easier and cleaner 4) its a map so there are names for updates/deletes 5) it already fails at large scriptSig; the truncate is a "just in case" since nobody wants to lose a block just because somehow theres too much data for the coinbase (for example, if some internal-to-bitcoind feature in the future starts manipulating aux data, such as an automated miner voting thing)
719	3451817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3451817	luke-jr	Also, the current code has had months of testing. Any major restructures just for the sake of restructuring are liable to possibly introduce bugs, and theres really no reason or need to do so. This is needed, theres no known problems with it, its had months of testing and reviews, and Gavin OKd it months ago. Why are we going out of the way to look for stuff to change when it works well?
719	3454050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3454050	sipa	1) Id rather see setworkaux and coinbaser in separate requests as well; the latters seems a lot more intrusive and maybe much less needed 2) is popen() so difficult? 3) i dont care 4) i dont care 5) as long as pre-automated-modifications to the coinbase are guaranteed to cause failure if its over 100 bytes, i dont care
719	3454126	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3454126	luke-jr	1) -coinbaser has zero "intrusive" unless enabled, is very isolated, and very well tested for nearly a full year. 2) popen() "just works" on every OS
719	3470075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3470075	luke-jr	3) Rebased into 5 logical commits 6) Now using std::numeric_limits instead of limits.h, like the rest of Bitcoin as of recently 7) Removed OP_EVAL-specific advertisement; miners can still advertise it (or any other vote) via setworkaux, or a similar vote can be re-added the same was as before in a new commit 8) Refactored "%d" replacement using boost::lexical_cast and boost::replace_all
719	3471152	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3471152	luke-jr	Fixed a bug sipa found and one it made me think to check: - pclose() might not be portable on sockets, so use fclose for those - Windows needs closesocket() after fclose(), and in case of error, to cleanup the socket
719	3471202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3471202	sipa	Not sure still about necessity, but ACK on the code changes.
719	3577574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3577574	Nitrowolf	It would be really handy if coinbaser were merged with the mainline. I have to do enough changes to my code to upgrade and then test without having to also do basics like this. It seems like it would be an addition that has no drawbacks to those who do not use it and advantageous to those who do, like EMC.
719	3588190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3588190	forrestv	ACK on the changes to RPC getmemorypool.
719	4567234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4567234	luke-jr	Since this has gone two .y releases without merging, and I no longer have any use for it myself, I have decided that unless someone (with push access) agrees to merge it, I will no longer be rebasing it, and it will drop from my next branch when the inevitable 0.7 changes conflict with it. If you are using Coinbaser, I recommend migrating to other software for generating work, such as [Eloipool](http://gitorious.org/bitcoin/eloipool).
719	4679422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679422	luke-jr	This no longer merges cleanly; closing. Reopen if someone is willing to merge to master.
717	3212532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3212532	TheBlueMatt	Done so that we can remove startup links to bitcoin-wx Code almost exclusively copied from bitcoin-wx
717	3213533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3213533	laanwj	ACK
717	3221563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3221563	gavinandresen	Id expect this to be in init.cpp, not util.cpp.
717	3223510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3223510	gavinandresen	ACK
716	3212729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3212729	TheBlueMatt	ACK
715	3209445	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3209445	gavinandresen	NACK.
715	3210334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3210334	luke-jr	I love nonsensical NACKs. Especially on bugfixes.
715	3210965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3210965	gavinandresen	All right, NACK: adds 40 lines of code and a bunch of confusing #ifdefs for no good reason.
715	3211023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3211023	luke-jr	Adds 40 lines of code for complying with the community standard everyone accepted...
715	3212741	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3212741	TheBlueMatt	Complying with the standards as you read it (I dont read it that way, but whatever) doesnt take 40 lines anyway.
715	3454309	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3454309	luke-jr	Indeed, it could be done in fewer if we had an unanimous consensus whether there should be a difference between how bitcoind and Bitcoin-Qt advertise themselves. But making it configurable so both camps can be happy does take slightly more code.
715	3805619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805619	jgarzik	NAK also. Current client has been out there with current behavior, making the new standard not as widely accepted as implied. There are also disagreements over how one reads the standard.
715	3805887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805887	luke-jr	There is no current released client out there with the broken behaviour. Please merge this fix or reopen...
715	4104530	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4104530	sipa	This patch seems to change several things at once, but at least one is very reasonable imho, namely the fact that bitcoind now advertizes itself as Bitcoin-qt. A much simpler patch would allow fixing that.
715	4106048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4106048	sipa	Actually, what about just changing the version string to "/Satoshi:0.6.0/" ?
714	3324415	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3324415	makomk	On Linux, this leaks a zombie process every time the best block changes, which is probably going to result in PID exhaustion and stuff breaking eventually. Try for example 578e6df8827b74c97a2553b04a6d445ae7628b34 in addition.
714	3326939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326939	luke-jr	Good catch. Fixed the most graceful way I could find: by detatching the blocknotify process. I avoided SIGCHLD since it has the potential to not play nice with other stuff.
714	3346006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3346006	luke-jr	Superceded by #743
712	3198204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3198204	TheBlueMatt	I would highly prefer -keepnode=localhost, this just seems like a hack
712	3199732	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3199732	forrestv	You mean adding "keepnode" as a new argument? This pulls approach seemed like a bit of a hack to me too, though defaulting to allowing extra local connections could only help in cases like these and cant hurt. Not limiting local connections at all would look cleaner, but has a slight potential to cause problems. The only possibility I see is it taking an argument, which would remove the magic "10".
712	3204317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3204317	TheBlueMatt	As in #454. Forrest Voight <reply@reply.github.com> wrote: >You mean adding "keepnode" as a new argument? > >This pulls approach seemed like a bit of a hack to me too, though >defaulting to allowing extra local connections could only help in cases >like these and cant hurt. Not limiting local connections at all would >look cleaner, but could cause problems. The only possibility I see is >it taking an argument, which would remove the magic "10". > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/712#issuecomment-3199732
712	3238679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3238679	gavinandresen	This might cause problems when we fix issue #610 -- I like Matts suggestion, although I think it should just be: addnode=local.ip.address.1 addnode=local.ip.address.2 ... etc ...
712	3269421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269421	luke-jr	I agree (and want to watch this pull)
712	3486535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3486535	forrestv	This was a hack, though Id like to get addnode or keepnode to default to allowing localhost...
709	3186860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3186860	TheBlueMatt	Only question I have is whether or not luke will use his dnsseed to get everyone connected to his eligius-relay network which has different fee rules (and whether or not that should be allowed, which is definitely arguable either way).
709	3186885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3186885	luke-jr	That was not my intention, no. It is currently a CNAME to jgarziks DNS until I get something running.
709	3187050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3187050	TheBlueMatt	"not my intention" doesnt answer the question... Luke-Jr <reply@reply.github.com> wrote: >That was not my intention, no. It is currently a CNAME to jgarziks DNS >until I get something running. > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/709#issuecomment-3186885
709	3187657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3187657	jgarzik	Any candidate for new DNS seeds must be well-trusted, and therefore I think a few basic tests should be applied: 1) Is the address inclusion and rotation policy well known, entirely transparent to the community? My seed is rather boring but well known: the wiki list of fallback nodes. BlueMatts seed is the output of his published code (it is published publicly, right Matt?), etc. 2) Does the address inclusion/rotation policy intentionally favor a particular interest group (eligious relay network or whatnot)? I would trust Lukes word if he promised the seed would always be vendor-neutral, for example. 3) Is the DNS seed setup stable, and likely to remain stable in years to come?
709	3187693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3187693	TheBlueMatt	1) 2) Trust: as would I, hence why I asked for it.
709	3187884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3187884	luke-jr	It is vendor-neutral, which is why it is on dashjr.org instead of eligius.st. I will certainly agree to discuss it with other developers before intentionally favouring any nodes. That being said, I dont personally see any particular reason to avoid it.
709	3190020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3190020	TheBlueMatt	As long as it discussed and publicly announced before any node-favoring is implemented and enough chance is given to disable the dnsseed in the client, that is good enough for me.
708	3224075	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3224075	jgarzik	Closing, but we can re-open if there is sufficient buy-in from other mining operations. If accepted, would lean towards _only_ using TCP, as external program execution is more complicated and less portable (Windows does not have an exec, strictly speaking, so spawning details differ).
708	3224358	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3224358	luke-jr	Um, wtf? This was already accepted for 0.6
708	3230448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3230448	TheBlueMatt	Accepted by who?
708	3230479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3230479	luke-jr	Gavin, at least.
707	3187628	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3187628	jgarzik	IMO, CLIENT_NAME should not vary if/if-not GUI. Its the same network logic. If a problem arises where other network peers must test for a problematic bug, they have twice as many CLIENT_NAMEs to check for one bug. Might be a privacy issue too? Gives attackers obvious server-or-client decision point.
707	3204385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3204385	gavinandresen	CLIENT_NAME is now always "bitcoin-qt"
705	3181946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3181946	luke-jr	Please discuss these changes on their own pull requests, not here!
704	3181317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3181317	gavinandresen	I just bumped the source version to 0.5.99 to prep for 0.6; pulling this now wont do weird things to the debian build, will it?
704	3181500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3181500	TheBlueMatt	No, for now I think Im just gonna keep adding to the debian directory post-release as that is when the repo packages are updated.
700	3128426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3128426	TheBlueMatt	Now with error popup (though now "Network Alert" needs translated...)
700	3128560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3128560	laanwj	ACK
700	3128825	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3128825	gavinandresen	NACK: getting multiple dialogs popping up on my Mac (same message in all).
700	3128836	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3128836	TheBlueMatt	Renamed.
697	3120404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3120404	laanwj	I agree with this change; you havent only moved the \n outside the translated message but the flags themselves as well. This is good, as it allows changing the flags and white-space without affecting translations. But a change like this does mean that all the translations have to be changed as well :/ Anyone up for the task?
697	3177701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3177701	laanwj	I was wrong here -- the flags were already outside the translated text, its just the \n that was moved out. At least this makes it easier to fix up the other translations with a script.
697	3178059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3178059	laanwj	You do need to re-run `scripts/qt/extract_strings_qt.py` after changing the strings in the core, so that the updated strings show up in the translations (are picked up by lupdate).
697	3183280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3183280	gavinandresen	Ill write a little script to fix the translations. Nils: how do changes get fed back into transifex?
697	3185199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3185199	tcatm	Changes to transifex: It *should* happen automagically (transifex is fetching the source file using a cronjob), but I can also force an update.
695	3091946	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3091946	gavinandresen	ACK (but github says it wont merge cleanly???)
695	3183387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3183387	gavinandresen	On second thought... The only other RPC info that has an underscore is "unlocked_until", and I think that was a mistake. Itd be more consistent to make these "blockhash" and "blockindex"
695	3193541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3193541	luke-jr	In case GitHub doesnt email for commits, fixed.
695	3205792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205792	jgarzik	Does not look fixed here. This commit modifies src/rpc.cpp, which no longer exists.
695	3205889	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205889	luke-jr	Git is perfectly capable of following renames.
694	3091713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3091713	luke-jr	This should merge cleanly into any miniupnpc-1.6-only branch.
694	3091742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3091742	gavinandresen	ACK
694	3096509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3096509	laanwj	ACK
691	3085002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3085002	runeksvendsen	Youll have to excuse the additional commit 8cbb6ee that got in here. I tried to confine that commit to pull request #690 only, but that didnt work apparently.
691	3086418	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3086418	laanwj	Please test with the latest master, Ive committed a small fix (no longer indirectly call show() in the constructor of BitcoinGUI) that might make a difference in this.
691	3088902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3088902	runeksvendsen	Using latest master the -min option doesnt work for me. Regardless of whether the "minimize to tray" option is on or not. I agree that the temporary shifting around is a bit hacky. Fixing it in `BitcoinGUI::changeEvent` might be more elegant, but as far as I can see wed need to introduce some variable to indicate whether the program is starting up or not, since its only in the startup phase that I experience the problem. That seems sort of hacky as well. I wonder if it all seems too hacky because were trying to solve the wrong problem. You mentioned overriding `BitcoinGUI::showMinimized`, maybe this is the clean way to work around this issue? By the way, youre using Unity while Im using GNOME (2.32). That might be why you cant reproduce this issue.
691	3089040	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3089040	runeksvendsen	Which tools are you using to debug stuff like this? Id like to know if BitcoinGUI::trayIconActivated is called when I click the tray icon when its in its non-responding state. Ive tried printfs and message boxes but they seem to not work so well... Are you just using gdb?
691	3089933	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3089933	laanwj	Regarding -min not working in latest master: doubly weird, the only thing thats changed is that the constructor of BitcoinGUI no longer calls `show()`. This is the normal behavior for Qt widgets; the client decides whether, and when to show it. Overriding `BitcoinGUI::showMinimized` was my initial idea. But AFAIK you cant avoid the changeEvent there either, so end up with a similar hack. Itd indeed be better to try to understand the underlying problem instead of just hacking around it :) The tool Im using is the built-in debugger of Qt Creator, which I believe internally uses gdb, but is easier to use as you can visually see what happens.
691	3268823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3268823	luke-jr	FWIW, on my system with current master (5ad2ca0), -min ignores the "minimize to system tray" setting, and starts minimized normally. I consider this a bug.
691	5147976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5147976	laanwj	I think this is fixed now? Just tested on Ubuntu, and it works fine.
691	5150063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5150063	runeksvendsen	Yep. Worksforme.
690	3084537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3084537	TheBlueMatt	I actually kind of prefer a splash screen even if starting minimized (or atleast a minimized splash screen that can be opened), but it really isnt much of a big deal... Anyway, the actual code here is fine either way, ACK.
690	3084929	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3084929	runeksvendsen	To accommodate that preference, we could add another option called "-background" which would be "Start in the background". This would minimize the main window on startup (as "-min" does) *plus* hide the splash screen as well.
690	3086468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3086468	laanwj	ACK
687	3050666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3050666	laanwj	ACK
687	3056103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3056103	AEtherSurfer	18:09 gavinandresen BitMark: I saw the bug that the builds werent -DUSE_SSL... that flag should be removed
686	3050001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3050001	TheBlueMatt	Other than that one concern, ACK
686	3055166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3055166	luke-jr	At the same time, I propose adjusting the testnet base58 versions to match with the new proposed base58 version spec.
686	3057087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3057087	gavinandresen	RE: why keep the regular-difficulty-every-2016-blocks: Because if you dont, and hashing power drops, then it will never adjust downward properly because the common case for non-cusp blocks is "find the last block with something other than minimum work and return its difficulty." Example: Imagine difficulty is at 1111 before block 201600, and that block ends up taking 60 minutes to find. Imagine the normal difficulty adjustment would drop difficulty to 600. If we allow block 201600 to have difficulty 1, then block 201601 would also be looked for at difficulty 1111, because theres no previous block with the new difficulty. I wrote the code that way so testnet is as close to mainnet as possible; I didnt want a completely different testnet non-cusp-block calculation (yes, I COULD figure out what the last difficulty adjustment interval was and factor out the difficulty computation into yet another method... benefit doesnt seem worth the extra code complexity). RE: adjusting testnet base58 version: okey doke. Whats the right number for testnet under your scheme? 192?
686	3057108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3057108	TheBlueMatt	mmm, fair enough
686	3057120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3057120	luke-jr	Yes, 192 for testnet pubkey-addresses. 196 for testnet script-addresses (OP_EVAL).
686	3070164	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3070164	luke-jr	The new anti-orphan-flood code wont break this, will it?
686	3074729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3074729	gavinandresen	coblee: Nice catch! Youre right, this would prevent difficulty from ever dropping all the way down to min difficulty. luke-jr: Nice catch! Youre right, the orphan block DoS code needs to take into account this change. I wont have time to fix this until Im back next week.
686	3168939	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3168939	gavinandresen	Code updated/rebased to fix the issues pointed out by coblee and luke-jr.
686	3454071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3454071	luke-jr	Is this going to be merged before 15 Jan? ;)
685	3019278	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3019278	finway-china	Theres Simplified Chinese language in 0.4.0, but not in 0.5.0, i think it should be there.
685	3020293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3020293	TheBlueMatt	As a part of the move from wx to qt, all the existing translations were thrown out (because most of them became out-of-date). I believe src/qt/bitcoin.qrc also needs updated to indicate the addition of the new translation. In the future, you can also use to contribute updates to translations for bitcoin.
685	3026571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3026571	finway-china	Done.
685	3026651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3026651	TheBlueMatt	Nice, afaik tcatm merges all the transifex changes right before each release.
685	3117861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3117861	gavinandresen	tcatm pulled this, it is in 0.5.1.
683	3018643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3018643	gavinandresen	ACK
682	3005443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3005443	laanwj	ACK
679	3005565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3005565	laanwj	Updated to use GetBoolArg
679	3008346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3008346	TheBlueMatt	Nice feature, ACK
679	3010464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3010464	gavinandresen	ACK
679	3074320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3074320	runeksvendsen	Thanks for writing this patch laanwj! I did some testing, and it works fine for me unless I use the option "Minimize to the tray instead of the taskbar". If this option is on, then I am not able to get the GUI back to an unminimized state after I start it. This is only the case when the program is started initially. If this setting is ON, and the program is started with the -min option, I cant get it back from the taskbar; nothing happens when I click the icon. If this setting is OFF, and the program is started with the -min option, it works fine, even if this setting is turned ON after starting the program.
679	3074677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3074677	runeksvendsen	It would be nice if the splash screen wasnt shown when the -min option is specified. I tried writing a patch, but got stuck when I found out that I cant use GetBoolArg to decide whether or not to show the splash screen, since at the point in the code where the splash screen is shown AppInit2 hasnt been run yet, and its in AppInit2 that the variable (mapArgs) needed for GetBoolArg to function is populated with data. What could be done about this? Should we be parsing argv directly, or is there a neater trick?
679	3076819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3076819	laanwj	1) yes, currently it does not take into account "minimize to the tray" because this is not a Qt feature, wed need to override `BitcoinGUI::showMinimized` to take this into account 2) I think a neat way would be to put basic argument parsing (ParseParameters) to beginning of main(), after Qt had its shot at the arguments with QApplication() ... Could just put a `#ifndef QT_GUI` around it in init.cpp to make sure it is not done twice. This is also useful if we want to provide an argument to override the language (#678).
679	3083691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3083691	runeksvendsen	I see. I guess 1) will have to wait some time then. Maybe we should ignore the "minimize to tray"-setting when the "-min" option is specified? I have implemented 2) in pull request #690
677	2998932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2998932	luke-jr	This change was discussed in #bitcoin-dev during the 0.3.22 release cycle. At least BlueMatt and ArtForz supported it, and jrmithdobbs recommended using an enum instead (it was an int at the time). Since we were at rc5 at the time, sipa wanted to stick with his boolean-only rewrite temporarily and wait to merge this for 0.3.23.
677	3021141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3021141	TheBlueMatt	Although allowing users to easily do whatever they want for fees is nice, its really not the way to go. If you want to make it easier for miners to customize fee schedule (which should absolutely be done), you also have to make sure the customization options still (attempt to) force the miners to keep the original incentivization (dont think thats a word...) structure or you risk issues like the downward-spiraling fee issue. So until someone makes a nice fee algorithm, I would have to vote strongly against anything which allows for easier fee customization.
677	3021239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3021239	luke-jr	Change of heart? You supported it before... but now you prefer a more monopolistic control hierarchy by intentionally trying to force things on people? :(
677	3021398	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3021398	TheBlueMatt	No, Ive always supported allowing people to customize fee scheduling, just not unless all the many, many issues with it are dealt with. That said, this is such a minor step in that direction that my issues are fairly irrelevant. Anyway, a change like this would be required if a nice customizeable fee-scheduling algorithm came along. I was just making sure to remind everyone of the issues at hand when dealing with fee customization, and making sure I got that out there so that a pull-request that allows the settings to be easily changed via RPC doesnt get merged before I can get that out there.
677	3029215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3029215	realsolid	You cant really have custom fees in a client unless you propagate *ALL* transactions by default. Otherwise transactions are going to be firewalled by the nodes which dont accept them. There are currently rules by which transactions are propagated so I cant see how custom fees can be enabled by miners.
677	3032681	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3032681	TheBlueMatt	That is, in fact, the point of this pull it allows inividuals to have different fee policies depending on the situation (mining, relaying, or sending) realsolid <reply@reply.github.com> wrote: >You cant really have custom fees in a client unless you propagate >*ALL* transactions by default. Otherwise transactions are going to be >firewalled by the nodes which dont accept them. There are currently >rules by which transactions are propagated so I cant see how custom >fees can be enabled by miners. > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/677#issuecomment-3029215
677	3040368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3040368	realsolid	What is the point in allowing individuals to set it when a client is connected to 8 nodes which dont share your fee relay settings? His transaction will never get out if its too large. Unless you change the default "pass on" behaviour then youre relying upon a random collection of fee settings that will delay, and worst case block people trying to send transactions until they try a variety of different fee settings (after scrubbing their wallet of course).
677	3040831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3040831	luke-jr	This isnt a user-visible change yet, and probably wont be until giving up on and/or modifying transactions is supported. The point is to take steps toward that eventual goal. This particular change is useful for miners.
677	3040992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3040992	TheBlueMatt	Thats what addnode is for. realsolid <reply@reply.github.com> wrote: >What is the point in allowing individuals to set it when a client is >connected to 8 nodes which dont share your fee relay settings? His >transaction will never get out if its too large. Unless you change the >default "pass on" behaviour then youre relying upon a random >collection of fee settings that will delay, and worst case block people >trying to send transactions until they try a variety of different fee >settings (after scrubbing their wallet of course). > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/677#issuecomment-3040368
677	3129187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3129187	sipa	ACK
677	3129310	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3129310	jgarzik	At a minimum, it would be nice to separate the policy change from the cleanup, i.e. one commit introduces the enum changes, with no behavior/policy changes in that commit
676	3001454	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3001454	laanwj	I see nothing wrong with adding this, and the code impact is minimal. ACK.
676	3002798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3002798	gavinandresen	Same feature is part of the OP_EVAL/multisignature pull request.
676	3224914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3224914	gavinandresen	Closing, because I pulled the superset OP_EVAL change to validateaddress.
673	2984894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2984894	gavinandresen	ACK. I support hunting down any data structures that could become arbitrarily large and figuring out how to reasonably bound them.
670	2975048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2975048	sipa	ACK
670	2975279	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2975279	laanwj	Ack
670	2975629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2975629	laanwj	Btw if speed is really the issue here, an idea would be to cache encoded <user>:<pass> and compare the header literally, this would save a decoding step for each rpc call
670	2980350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2980350	gavinandresen	RE: store strUserPass: good idea!
669	2998414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2998414	luke-jr	NACK 9db95d3 introduces a regression: when you send-to-self, and have to pay a fee, instead of the usual send/receive pair in listtransactions, we now get a second send instead of the receive. This send has an amount that appears to be your _change_ from the transaction, shown in negative.
669	2998553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2998553	gavinandresen	Nice catch on the listtransactions regression.
666	2880284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2880284	laanwj	Improves security AND makes the code more readable, I like this. ACK.
666	2880421	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2880421	laanwj	Using ::c_cstr at API boundaries does have the drawback that \0 characters are not allowed -- the canonical form of converting between string types is to use data() and size(), or .begin()/.end(). Then again, I dont think you can enter those in form fields anyway :)
666	2883409	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2883409	TheBlueMatt	Though it does make some code a bit easier to read, it is no more secure (in fact, with the additional conversions, one could argue its less secure, though not really). Anyway, meh.
666	2884023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2884023	laanwj	Less secure? How?
666	2884043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2884043	TheBlueMatt	.get_str().c_str() instead of .get_str() in several places means the string (likely) gets copied twice in memory instead of once.
666	2884107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2884107	laanwj	I really dont see how this could make things less secure. * By passing all the passphrases as SecureString all the way into the CWallet API, this makes sure the passphrases only exist in mlocked memory (except *in* Qt and inside the JSON parser, but that was already the case before, and in the case of Qt there is little to do against it). Before, they were passed in plain std::strings. * As I understand the conversions dont cause any extra allocation/deallocation of insecure memory, the conversions just pass memory around (and theres not *that* many more) from one mlocked area to another, which is filled with zeros before freeing. * By using a specific SecureString type it is signaled clearly that the data inside it should be handled with care. Sigh, seems that sometimes you just want to disagree with things for the sake of disagreeing... do you really like arguing that much?
666	2884135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2884135	laanwj	No, it does not copy anything (it cant, where would it copy to?). c_str() simply returns a pointer to the data inside the string.
666	2884180	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2884180	TheBlueMatt	re: 1 yes, but those strings were previously mlocked, so no security is gained. re: 2 yes, that is my bad, I had just forgotten that those were returning pointers, not creating new objects...just my C++ inexperience showing...
666	2884212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2884212	TheBlueMatt	Let my rephrase my original comment: Makes code easier to read, but doesnt add security, probably worth pulling. Meh.
666	2884214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2884214	laanwj	1) In the case of bitcoin-qt they werent. That was my reason for saying this is more secure. 2) STL has a bad name from the MSVC 6.0 implementation, but luckily is not *that* inefficient :) Also this makes it harder to forget manually mlocking/munlocking (or maybe worse, skipping munlocking in the case of an exception so that memory stays locked indefinitely) in future usages of the API.
655	2833651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2833651	iongchun	already updated
654	2883414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2883414	TheBlueMatt	Heh, oops...fixed.
654	2975162	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2975162	sipa	ACK
654	2991068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2991068	gavinandresen	ACK. Itd be nice to change all of our threading code to use boost::threads -- I think the only reason Satoshi didnt is because he couldnt figure out how to set the thread priority. But we shouldnt care about that any more, because the internal miner is only used for -testnet testing these days...
653	2817966	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2817966	laanwj	ACK
649	2814146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2814146	sipa	Regarding patent issues, read this:
649	2857324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2857324	gavinandresen	Spiffy! Could you create unit tests and a test plan? For example, if I want to test use of compressed and uncompressed keys... I would run with/without the -compressedpubkeys option, but do I need to use up old uncompressed keypool keys before I get compressed keys?
649	2864596	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2864596	sipa	For testing, you probably want to be able to mix compressed and uncompressed keys. For production use, you probably want to just switch once and for all, so -compressedpubkeys would better flush all non-compressed keys in the keypool.
649	3261744	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3261744	luke-jr	This needs rebasing.
649	3261844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3261844	sipa	done
649	3264907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3264907	gavinandresen	I think we should just make compressed keys the default; I dont see any reason to continue supporting/generating/etc the larger uncompressed keys.
649	3270843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3270843	sipa	Ok, compressed pubkeys are now enabled by default in the pull request (the key pool isnt flushed, though) Ill add some unit tests soon.
646	2809820	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2809820	TheBlueMatt	MIT == Expat, which means you dont need to copy the license text again.
646	2809840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2809840	luke-jr	Either way, this file needs updating.
646	2809864	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2809864	TheBlueMatt	I agree, see my comment at My comment was just that after your commit, the mit license text is in contrib/debian/copyright twice, which is unnecessary.
646	2812879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2812879	laanwj	you can never have too much copyright text ACK
635	2721428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2721428	laanwj	ACK -- only a small issue that can wait: * The `CreateThread(Shutdown, NULL)` in bitcoinrpc.cpp should eventually be replaced with something that is safe with the GUI (just like needs to be done when calling stop), as it will result in a race condition and segmentation fault. But for now, I think the number of users that use RPC to encrypt the wallet while running the UI is exactly zero.
634	2754759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2754759	freewil	+1
632	2703697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2703697	tcatm	NACK I agree with deprecating getblocknumber, however deprecation should not remove it from pCallTable yet. This would be a seperate patch for a later version. You should add comments like "// deprecated" to the calltable entry and the function itself so we can easily remove the code later. midstate and hash1 are an example of RPC features that are deprecated but not removed yet.
632	2704542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2704542	mndrix	Good point. Ill repair the patch and resubmit tomorrow.
632	2717713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717713	laanwj	ACK
631	2698696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2698696	gavinandresen	ACK
631	2700374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2700374	TheBlueMatt	ACK, looks good enough. Can you update doc/assets-attribution.txt with the new copyright as well? (Or maybe remove the duplicated copyright file?)
631	2701385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2701385	luke-jr	done
631	2706017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2706017	laanwj	Good replacements. The only one I dont like is the now home icon, its too crowded and 3-dimensional. Id like a more simplified one that fits the blue-ish theme of the other tab icons. Ill do some searching too...
631	2709004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2709004	luke-jr	Maybe go-home? ![go-home](http://luke.dashjr.org/tmp/code/go-home.png)
631	2709300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2709300	laanwj	Yes better!
629	2697019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2697019	luke-jr	Basic code/UI ACK except for a couple of minor issues: - USE_QRC might be confused with Qt Resource Compiler (or whatever qrc is), maybe USE_QRCODE ? - QR Codes are set to "text" instead of "URI"
629	2702192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2702192	sje397	Thanks luke-jr. Ill change the define to USE_QRCODE. The library only supports the following encoding modes though...what is type URI under the surface? /** * Encoding mode. */ typedef enum { QR_MODE_NUL = -1, ///< Terminator (NUL character). Internal use only QR_MODE_NUM = 0, ///< Numeric mode QR_MODE_AN, ///< Alphabet-numeric mode QR_MODE_8, ///< 8-bit data mode QR_MODE_KANJI, ///< Kanji (shift-jis) mode QR_MODE_STRUCTURE, ///< Internal use only QR_MODE_ECI, ///< ECI mode QR_MODE_FNC1FIRST, ///< FNC1, first position QR_MODE_FNC1SECOND, ///< FNC1, second position } QRencodeMode;
629	2702605	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2702605	luke-jr	Nevermind the mode thing. Looks like the problem is with my QR Code reader "detecting" URI vs text based on the content. :/
629	2705847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2705847	sje397	Ok, change pushed.
629	2708957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2708957	luke-jr	ACK
629	2717723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717723	laanwj	Neat! ACK. Can you squash/rebase these into one commit?
629	2717743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717743	sje397	Squashed.
629	2717805	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717805	laanwj	Thanks. Some small issues: * It doesnt build in qt creator without libqrcode (even if USE_QRCODE is not added); probably missing #ifdefs inside qrcodedialog.cpp ../bitcoin/src/qt/qrcodedialog.cpp:10: error: qrencode.h: No such file or directory * QRCodeDialog::genCode() is only called from the UI thread. Is it still neccesary to have it in a static critical section?
629	2717829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717829	sje397	Fixing now. The first issue involves adding the qrcodedialog to the project conditionally, so needs changes to the pro file. Ill fix the second. I was being overly attentive to the not thread safe warning in the library docs.
629	2717871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717871	sje397	Done and resquashed.
629	2717907	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717907	laanwj	Thats fast :) Now builds and runs on machine without the library. Also works great when enabled, I tried scanning it with my phone from the screen and it got it right the first time. Another small code issue: * AddressBookPage::on_showQRCode_clicked(): `d = new QRCodeDialog` causes a memory leak every time the dialog is opened (at least until the addressbookpage is destroyed). Better to simply use `QRCodeDialog d(...`
629	2717934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717934	sje397	Yeah thats not ideal as is. Using `QRCodeDialog d(...` as you suggest though causes the dialog to be destroyed immediately as the variable goes out of scope. Are you suggesting it (and not they) should be modal?
629	2717949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717949	sje397	How about I set the Qt::WA_DeleteOnClose attribute on the qrcodedialog widget instead?
629	2717951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717951	laanwj	Sorry, I misunderstood. I thought that was the idea to be modal :-) Keep it as it is, its fine. Qt has a flag to delete a window when closed, it might be useful to enable that, but I dont think this will ever be a big issue.
629	2717963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717963	sje397	Snap. Ive set that flag and rebased again. 2:49am - gnight ;)
629	2717967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2717967	laanwj	Thanks. Goodnight!
629	2721740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2721740	mikehearn	Did you check if this is compatible with the Android Wallet app? Im not sure exactly what format its using.
629	2721849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2721849	sje397	Sorry, Ive only got access to my wifes rather ancient android phone which refuses to find the app in the app store for me or install the one I can find on the net. That app is using Googles ZXing library (http://code.google.com/p/zxing/), and I did test using which uses the same library. From what I can tell from the source, that app uses the same URI scheme also (the one at The alternative, x-btc (https://en.bitcoin.it/wiki/X-btc) seems a little less popular.
629	2721852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2721852	mikehearn	Great! If you send me a qrcode generated by this patch I can try scanning it.
629	2721876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2721876	sje397	I can do that - what email?
629	2721878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2721878	mikehearn	mike@plan99.net
629	2722366	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722366	luke-jr	If the Android app isnt standards compliant, then it should be fixed. That is IMO outside the scope of this pull request. If libqrcode isnt standards compliant, it also should be fixed and is outside the scope of this code as well. I did confirm that it works with my N900s QR Code reader (mBarcode on Maemo), except for being detected as a URI (I presume theyre using a known URI scheme list).
629	2722374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722374	mikehearn	It works with the Android app :) Its best to do interop testing early so issues can be found wherever they lie. Seems like the app doesnt use the label/message fields though.
629	2722386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722386	luke-jr	Most apps dont, I think.
629	3209235	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3209235	gavinandresen	NACK: see On my Mac, showing the QR code for one of my receiving addresses I get too-skinny-text-boxes for Label and Message.
629	3209292	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3209292	gavinandresen	Really cool feature, by the way. But could you also update doc/build-*.txt for instructions on how to get libqrencode (on the mac, port install qrencode works nicely) Itd be really nice if the contrib/gitian-descriptors/gitian-*.yml files were modified to build with qrencode support, too...
629	3217513	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3217513	sje397	Hi Gavin - I reorganised the dialog and added minimum sizes to those fields. I updated the Linux and OSX build docs, and added the qrencode package to the gitian.yml file. I dont have a windows dev box to do any testing there or any experience with gitian builds so Im reluctant to get into that stuff. I also updated makefile.osx to link qrencode (dynamically) if USE_QRCODE=1 is set - but again I dont have a Mac here to test.
617	2678413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2678413	laanwj	Only adds documentation -> ACK
611	2649130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2649130	gavinandresen	ACK
611	2659431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2659431	laanwj	Only comment changes and 1 string (message) change -> ACK
609	2659446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2659446	laanwj	ACK
609	2661070	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2661070	TheBlueMatt	Why wasnt this merged for 0.5 rc3?
609	2664210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2664210	laanwj	Its very new...
608	2640280	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2640280	laanwj	You could just have re-opened the old one? (and re-pushed to make new commits visible). Closing is not a permanent state on github.
608	2640951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2640951	TheBlueMatt	It wont let me reopen because a project admin closed it, thus only a project admin reopen it. "Wladimir J. van der Laan" <reply@reply.github.com> wrote: >You could just have re-opened the old one? > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/608#issuecomment-2640280
608	2644447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2644447	laanwj	Ok, I didnt know, sorry for that. Op 5 nov. 2011 16:48 schreef "Matt Corallo" < reply@reply.github.com> het volgende: > It wont let me reopen because a project admin closed it, thus only a > project admin reopen it. > > "Wladimir J. van der Laan" <reply@reply.github.com> wrote: > > >You could just have re-opened the old one? > > > >--- > >Reply to this email directly or view it on GitHub: > >https://github.com/bitcoin/bitcoin/pull/608#issuecomment-2640280 > > --- > Reply to this email directly or view it on GitHub: > >
607	2637856	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2637856	TheBlueMatt	Can someone double-check this before merging, ie for determinism and that gitian win32, gitian linux, mac build scripts, etc all have proper release defaults?
607	2638102	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2638102	gavinandresen	Mac doesnt support -Wl,-B (it has its own ld): ld: unknown option: -Bstatic
607	2642874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2642874	TheBlueMatt	Ok, just removed the update for anything except Unix (as the makefile.unix one did).
607	2654993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2654993	gavinandresen	I rewrote the intent of this (and committed); see commit a5f07cbea05fbb03a668dbd5ba3694627cfb5375 BUT: it still links against the QtGui and QtCore .sos.
606	2635758	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2635758	laanwj	ACK, good idea. However, it seems that you forgot to add the new translation to the bitcoin.qrc file :)
606	2635884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2635884	dooglus	Youre right. Ive made a new commit with that change too. Theres another translation needing plurals, too, which Ive also added: ./src/qt/transactiontablemodel.cpp: status += tr("Mined balance will be available in %n more blocks", "", I was searching for the (s) text before, and so missed this one.
603	2658138	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2658138	gavinandresen	Thanks coblee, but the mac build process doesnt use that script any more-- Im going to close this. (doc/release_process.txt describes the new process)
602	2601048	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2601048	laanwj	I like this; it uses the proper c++ idiom (RAII) which is more readable and potentially more robust. Can you add testcase/unittest?
602	2610549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2610549	wowus	Done. Thanks.
602	2688696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2688696	gavinandresen	ACK
602	2690667	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690667	TheBlueMatt	It would be nice to test that Critical section code actually works by spawning threads and testing locks in the test suite.
602	2819893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2819893	gavinandresen	Im going to merge this early-- writing multithreaded unit tests would be spiffy, but second-best is to merge early and get lots of testing.
600	2570844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2570844	graingert	I dont see the harm in this
600	2570958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2570958	laanwj	I dont have problems with adding this either. The provided files can be useful for other distributions as well. Except I dont really see the point of the included patch; we could support using the system json-spirit in the build system, this would save the need for including a diff in the repository (which can run out of date, not apply cleanly anymore etc...)
600	2571085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2571085	TheBlueMatt	The included patch isnt actually used (see debian/patches/series) it was added by the bitcoind debian maintainer and I just decided to leave it since it is disabled anyway. "Wladimir J. van der Laan" <reply@reply.github.com> wrote: >I dont have problems with adding this either. The provided files can >be useful for other distributions as well. > >Except I dont really see the point of the included patch; we could >support using the system json-spirit in the build system, this would >save the need for including a diff in the repository (which can run out >of date, not apply cleanly anymore etc...) > >-- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/600#issuecomment-2570958
600	2585222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2585222	gavinandresen	Does this belong in the main repo? Or would another github repo be better (maybe bitcoin/distros?)
600	2585989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2585989	laanwj	I think there are arguments for and against including it in the main repository. For: * Many of us are using a debian-ish distribution, so having the files directly available (and versioned synchronously) aid in testing the debian package and debug issues like #595 * What applies to packaging for debian can also serve as an example for packaging for other distributions Against: * As the debian maintainer is not currently part of the core team, it will eternally be out of date. It now already includes patches and other files that are not used. There is something to be said for keeping the main repository lean and mean. * If we made top-level directories for every distribution, wed end up with total crazyness. Maybe moving it to `contrib` or even a separate repository makes sense. We could give the debian maintainer (and others) direct access there as well... That said, quite a lot of open source packages have a "debian" directory in their main repository.
600	2591226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2591226	TheBlueMatt	I dont care too much where it goes, but at build-time the debian folder has to be at the top level, so if you move it, builders have to shuffle it around to commit updates and build.
600	2626105	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2626105	Stemby	Ciao!
600	2628008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2628008	laanwj	Well if debian itself thinks its undesirable we can close this issue. If upstream has a debian directory in their releases, you should contact them and ask if they can remove the debian/ directory from their tarball releases. Theres no need to remove the debian directory from their revision control system (although if its out of date they may decide to do so anyway), but at the very least the directory shouldnt appear in releases. If you are upstream yourself, well, you can ask yourself to do it.
600	2630099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2630099	TheBlueMatt	The thing is, in this case the debian directory isnt for debian to use, its for us. "Wladimir J. van der Laan" <reply@reply.github.com> wrote: >Well if debian itself thinks its undesirable we can close this issue. > >If upstream has a debian directory in their releases, you should >contact them >and ask if they can remove the debian/ directory from their tarball >releases. Theres no >need to remove the debian directory from their revision control system >(although if its >out of date they may decide to do so anyway), but at the very least the >directory >shouldnt appear in releases. If you are upstream yourself, well, you >can ask yourself to do it. > >--- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/600#issuecomment-2628008
600	2630295	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2630295	Stemby	>Theres no need to remove the debian directory from their revision control system (although if its out of date they may decide to do so anyway), but at the very least the directory shouldnt appear in releases. If you think that having a debian/ directory is useful, you can keep it in Git (only in Git!) evenly. Ciao!
600	2631226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2631226	TheBlueMatt	As I previously stated, the reasoning for adding our own debian directory is for distributed control/updates to the build-methods for the bitcoin/bitcoin ppa. Without this, the debian directory is manged in (insert name of third partys tree here) which just becomes a mess (we used to do that for gitian builds, but people complained too much and gitian descriptors were merged upstream). Debians arguments against upstream debian directories are (IMHO) very weak. All they argue is that it makes debian diffs more complicated, but if youve actually used debians package system, it really handles diffs very cleanly and the added effort for maintainers is absolutely non-existent. Also, if people dont want debian in the top level of bitcoin anyway, we can easily just move it to contrib and not have to worry about conflicting with debians suggestions.
600	2631449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2631449	laanwj	yes, just move it to contrib, then its in the tree and we dont have to remove it before release every time...
600	2631635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2631635	TheBlueMatt	already did (though github wont update and show that if the pull is closed)
598	2567173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2567173	TheBlueMatt	It would be nice to get a deterministic build of qt too, but Id say if just bitcoin is deterministic building from the same qt, someone do a qt build and release that for everyone to use for 0.5.
598	2586986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2586986	laanwj	I didnt know that the qt build was not deterministic yet. Ill give it a try.
598	2591151	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2591151	gavinandresen	I just cherry-picked all but the last commit.
598	2591923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2591923	laanwj	I had some hex-editor fun and found out that the qt build-nondeterminism is caused by some process adding random (too far apart to be timestamps) 8-character hex codes before function names: -00054760 31 36 37 42 37 41 37 38 31 30 50 72 6f 63 65 73 |167B7A7810Proces| +00054760 45 41 42 45 39 45 33 44 31 30 50 72 6f 63 65 73 |EABE9E3D10Proces| -000547b0 30 30 5f 31 36 37 42 37 41 37 38 31 30 50 72 6f |00_167B7A7810Pro| +000547b0 30 30 5f 45 41 42 45 39 45 33 44 31 30 50 72 6f |00_EABE9E3D10Pro| I suspect this is the MOC compiler. On the other hand, bitcoin itself uses the moc and uic as well but manages to be deterministic. Maybe the non-determinism is only in debug symbols which are stripped for the release .exe. Ill try stripping the .a files.
598	2592976	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2592976	gavinandresen	Nice detective work! Quick update from me: my house still has no power, so Im working from my gitian-capable laptop; Im fetching/compiling dependencies now for the win32 gitian build. I made lots of progress on a Mac build, but all of that work is sitting on my main machine in my powerless house...
593	2532600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2532600	laanwj	Great, an direct URL handler would certainly be useful Some comments: - qtipcserver: I think it would be preferable to implement this entire feature in src/qt, without touching the core - ThreadSafeHandleURL: Does it need to block? Otherwise, you could shorten the function by leaving out the `DirectConnection`/`BlockedQueuedConnection` and simply use `QueuedConnection` to send signals asynchronously - Security: any browser<->bitcoin UI binding scares me a bit. Can javascript applications DDOS bitcoin by sending masses of URLs? (or sneak in an extra payment at unexpected times). Maybe we need to add a dialog box for confirmation.
593	2532911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2532911	TheBlueMatt	qtipcserver: Yea, I thought about doing that but I didnt feel like shuffling even more code around instead of just porting what I already had...Ill move the files to qt/ at least. ThreadSafeHandleURL: I would prefer it did, seems like it would be less of a DDoS target if it limited the number of queued objects to at least what boost will allow (2 in this case) and then limit to what Qt will be able to handle JS DDos: probably a good idea to test and see how high one can get Bitcoins CPU usage to go (also limit the number of queued payment boxes in Bitcoins ui?). In terms of adding yet another dialog box, I dont think its necessary, Bitcoin will already confirm before sending.
593	2532977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2532977	laanwj	Id prefer to have a dialog box *before* sending it to the running bitcoin process... I dont like it queuing payment boxes at all without the users permission (Limiting the number of those would fight the symptoms, not the problem). Not all users may check the final send dialog very well before sending, so a nefarious background javascript could add a payment just before send (by somehow detecting user activity). Thats why I went with drag/drop initially. There is (afaik) no way for a web application to fake that.
593	2533432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2533432	TheBlueMatt	Limiting the number of send boxes in the Bitcoin window was attempting to solve the DDoS issue by preventing a website from loading infinite send boxes. Having a popup before sending the send command to the running bitcoin process means you can now DDoS users by launching new processes all over the place, which is much worse. The limiting of the number of send boxes also solves (IMO) the background payment send. If the user did have 2 send boxes and all of a sudden 3 appear right after they hit send (and before they click "Yes, Im sure") then they wont click "Yes, Im sure")
593	2533533	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2533533	laanwj	Thats not my point. DDoS was only one possibility but not the most dangerous one, I would be really careful. I agree with limiting the number of send boxes, but thats not enough IMO to prevent issues with this. Maybe a dialog box is also not the best solution. But I really dont want an external processes, especially not an untrusted one in the browser, to have access to the list of send instructions without explicit manual user action.
593	2533736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2533736	TheBlueMatt	DoS is a completely separate issue from trust issues here. DoS: yea, should be tested a bit more just to see what kind of load you can generate from a browser. Trust: I really fail to see the problem here. If a user clicks on a link (or one is otherwise opened), they still have to see the send screen AND click "Yes, Im sure" before a send can happen, I really dont think adding more is going to do anything nor do I think there is a problem.
593	2533818	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2533818	laanwj	The problem is that Javascript can easily simulate link clicks. If it was limited to explicit clicks by the user then I wouldnt be having issues with it. Imagine that someone hacks a forum and adds a little script that randomly adds send commands in the background. Sure, most users might notice it in time and cancel it, but there will always be a few users that accept (for example, those that are new to the program). As money is involved here, there is just too much incentive to pull those kind of tricks. People will be trying to hack this from all angles.
593	2534116	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2534116	TheBlueMatt	Fixed the DoS issue (now only one link/sec can be opened). Also moved the files to qt/ and didnt touch init.cpp
593	2534141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2534141	TheBlueMatt	If the confirm dialog window is open, this shouldnt allow new sends to be added to the window, or the send (currently it does window, cant test send atm). Also, if a new send is added, the window should be automatically scrolled to the bottom (the new send). With those in place I really see no problem here, if users want to be stupid, there is nothing we can do to stop them.
593	3043353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3043353	TheBlueMatt	In an attempt at making this slightly more useful, I added the latest commit to automatically focus on new SendCoinEntrys and scroll to them, however because the scrolling is called before the qt thread is free to recalculate the new frame size, it scrolls to n-1 SendCoinEntrys not the last one. Im assuming there is a simple way to do this, but I dont feel like spending a ton of time digging through qt docs to figure it out when Im assuming probably knows the solution, so how would one scroll to the end directly after adding a new SendCoinEntry?
593	3050699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3050699	laanwj	I havent tested it, but this German post seems to address the problem, by adding qApp->processEvents(): between adding the widget and scrolling; In this case itd be QCoreApplication::instance()->processEvents();
593	3054122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3054122	TheBlueMatt	OK, I think Ive addressed every issue with this, except for the question of whether to popup before adding the recipient to the transaction or not until the send confirm dialog. I am of the opinion that there shouldnt be an extra popup before adding as it will annoy users if you can create a desktop popup once per second (or any other time frame) from js. I would instead just say that since the sendcoinsentry scrolls to the bottom when new recipients are added, it can be safely left up to the user to check the send (especially since the list of recipients is repeated in the confirmation dialog anyway).
593	3261748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3261748	luke-jr	This needs rebasing.
593	3266486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3266486	TheBlueMatt	rebased
593	3297412	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3297412	gavinandresen	Has anybody tested this besides Matt?
593	3297651	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3297651	luke-jr	Ive tested this in combination with non-BTC unit support, via CLI (ie, bitcoin-qt bitcoin:foo).
593	3383768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3383768	justmoon	Built this and tested a couple cases from the wiki page on the command line: ``` sh moon@clymene:/atlas/prj/bitcoin$ ./bitcoin-qt bitcoin:1NS17iag9jJgTHD1VXjvLCEnZuQ3rJED9L moon@clymene:/atlas/prj/bitcoin$ ./bitcoin-qt "bitcoin:1NS17iag9jJgTHD1VXjvLCEnZuQ3rJED9L?amount=20.3&label=Luke-Jr" moon@clymene:/atlas/prj/bitcoin$ ./bitcoin-qt "bitcoin:1NS17iag9jJgTHD1VXjvLCEnZuQ3rJED9L?amount=1" moon@clymene:/atlas/prj/bitcoin$ ./bitcoin-qt "bitcoin:1NS17iag9jJgTHD1VXjvLCEnZuQ3rJED9L?amount=.0000001" ``` Worked perfectly. :)
593	3387617	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3387617	TheBlueMatt	Gmaxwell suggested that the send coins confirmation dialog delay several seconds before it allows the user to click OK, similar to the way firefox does plugin installation. I agree, but judging from my cursory googling, its something that would have to be written (ie its not a simple parameter or hasnt been written before that we can copy/paste), so I feel it falls outside the scope of this patch.
592	2511193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2511193	TheBlueMatt	Can you rebase so that we dont get a ton of commit, fix-previous-commit commits all over the place?
592	2512372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2512372	dooglus	I think so. You mean combine my two commits into a single commit? I think Ive done that.
592	2513026	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2513026	laanwj	ACK
590	2488659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2488659	laanwj	ACK
590	2489658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2489658	tcatm	Ive set up a transifex project and merged your changes:
590	2489944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2489944	mibe	BTW, do we still need the strings in the bitcoin-core context?
590	2490407	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2490407	laanwj	Yes, they are used for translating the messages used inside the bitcoin core itself (error messages, debug information, etc). And well take and convert those message if it is decided to internationalize bitcoind. On Sat, Oct 22, 2011 at 2:58 PM, Michael Bemmerl < reply@reply.github.com>wrote: > BTW, do we still need the strings in the bitcoin-core context? > > -- > Reply to this email directly or view it on GitHub: > >
590	2495056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2495056	laanwj	how are we going to handle this? will you close this pull request when this ends up in the bitcoin source? or do we consider it merged already because it is in transifex?
590	2495112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2495112	tcatm	I think we should move all translations to transifex where I (at least for now) will take care of merging them back here. Transifex has nice statistics and Im going to merge the translations once they are 100% complete. I will create a page on bitcoin.org describing the process of adding new translations.
590	2495129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2495129	laanwj	ok sounds good, lets do that
587	2433871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2433871	TheBlueMatt	Some tips on using gitian to duplicate the broken results: When gitian fails/finishes, you can log into the vm and mess around by doing export PATH=$PATH:libexec; on-target You can see the build-script gitian is executing by looking at var/build-script after the build has started (its pretty much just exporting some variables and running the script in the descriptor). If you want to build from this branch, use -c bitcoin=build-updates instead of master (note that the commit titled "remove this commit before merge" makes the gitian descriptors point to my repo instead of bitcoin/bitcoin)
587	2434392	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2434392	TheBlueMatt	Oh, also this hasnt been tested for determinism yet, so there that...
587	2488679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2488679	laanwj	Ill take a look at this
587	2494709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2494709	laanwj	OK Im stuck. How to get started? - What kind of AWS image to I need to create? - release-process.txt has some information, but it assumes there already is a virtual image with gitian and bitcoin source installed. Do I need to install those myself starting with the Ruby gems etc?
587	2497004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2497004	TheBlueMatt	You cant do this with AWS, it has to be a machine which has VT-x support. There are no gems anywhere here, just git clone gitian-builder and go.
587	2562573	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2562573	luke-jr	Note that the build issues are basically Ubuntu issues. Gentoos crossdev at least has no problems building working EXEs.
587	2564170	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2564170	laanwj	I think I solved this issue! The solution appears to be to remove `-fstack-protector` for the Windows build. Both for the linker and cflags. I havent tested on a Windows machine but the resulting bitcoin-qt.exe works in Wine. luke-jr: yes, but we need to understand this issue, I feel it would be a mistake to just abandon it and switch Linux distributions, and hope well be ok :)
587	2564761	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2564761	luke-jr	IIRC it wouldnt even build for me with that flag. ;)
587	2564903	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2564903	laanwj	Now testing whether the build is deterministic and such...
587	2565886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565886	laanwj	The last commit managed to make bitcoin-qt.exe build deterministic. I built it two times and both times the sha256 is the same. So the build is now complete. The resulting executable does hang a long time at "Done loading" for some reason I cant explain yet.
587	2565963	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2565963	laanwj	Hm.. the "Done loading" problem seems to be something local (to do with seeding?), it hangs on connecting to my routers DNS port: socket(PF_INET, SOCK_STREAM, IPPROTO_IP) = 23 connect(23, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("192.168.x.x")}, 16 I think it is unrelated. Please help testing the gitian script. Edit: confirmed: It also happens on Linux now for me, so it has nothing to do with the build.
587	2567144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2567144	TheBlueMatt	Superceded by #598
586	2423944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2423944	gmaxwell	This looks completely reasonable to me. On non-broken systems it will be a no-op, so the workaround can remain indefinitely with no cost... and only get dropped when someone gets around to reviewing the hardening settings at some point in the future. I dont have a broken ubuntu system to try this on, but I can confirm that its harmless on F14s GCC 4.5.1.
586	2424183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2424183	TheBlueMatt	ACK
586	2433543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2433543	laanwj	ACK, makefiles can never have enough hacks and workarounds :-)
586	2465125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2465125	alexwaters	ACK
584	2415767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2415767	gavinandresen	Can I get an ACK from somebody else running 10.7 ? What happens on 10.7 if you dont set build_arch?
584	2423842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2423842	kwaaak	Build just fails because dependencies arent present for i386. See makefile.osx: > CFLAGS=-mmacosx-version-min=10.5 -**arch i386** -O3 -Wno-invalid-offsetof -Wformat $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS)
583	2376123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2376123	laanwj	Can someone on MacOSX please test this?
583	2378419	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2378419	p2k	I cant test USE_SSL right now. For everything else, Ive found no problems. All those commits are part of my [current release](https://github.com/p2k/bitcoin-qt/downloads) and were pulled into my fork.
583	2380291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2380291	luke-jr	ACK (Gentoo GNU/Linux)
583	2415921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2415921	laanwj	Thanks for testing and as this is only UI changes I think thats enough. Im merging this.
583	2422284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2422284	TheBlueMatt	I thought we were on feature-freeze for 0.5...?
583	2422583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2422583	laanwj	Ok I didnt know, Ill revert it tomorrow afternoon as I dont have access to a pc right now Op 16 okt. 2011 20:41 schreef "Matt Corallo" < reply@reply.github.com> het volgende: > I thought we were on feature-freeze for 0.5...? > > -- > Reply to this email directly or view it on GitHub: > >
583	2422634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2422634	luke-jr	Except for the shortcut keys, the rest of this is bugfixes. I dont see how the shortcut keys could be a problem, realistically.
583	2422669	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2422669	TheBlueMatt	Its not worth reverting, I just wondered why it got merged. "Wladimir J. van der Laan" <reply@reply.github.com> wrote: >Ok I didnt know, Ill revert it tomorrow afternoon as I dont have >access >to a pc right now >Op 16 okt. 2011 20:41 schreef "Matt Corallo" < >reply@reply.github.com> >het volgende: > >> I thought we were on feature-freeze for 0.5...? >> >> -- >> Reply to this email directly or view it on GitHub: >> >> > >-- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/583#issuecomment-2422583
583	4061200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4061200	barmstrong	After sending coins - I get this alert dialog: And the client crashes about 10 seconds after that. Related? This is 0.5.2 version of Bitcoin-QT. Max OSX Lion. I have Growl 1.3.2 installed.
583	4061353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4061353	barmstrong	opened a issue here for further discussion:
582	2369010	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369010	laanwj	Does this functionality also allow for verifying a signed message? (I checked quickly and was unable to find it)
582	2369044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369044	luke-jr	No, it doesnt. This gets users able to work with webservices. The next logical steps once this is merged would be 1) verify, and/or 2) sign & email from the Send page
582	2369486	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369486	laanwj	Im not entirely convinced that signing/verifying messages should be this prominent in the bitcoin UI. Im fine with adding it in the menu, but is it central enough to the workflow to warrant adding a tab for it? I tried to keep it as simple as possible with the tabs. What does the rest think?
582	2370614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2370614	TheBlueMatt	I would agree with laanwj here, a tab should (IMHO) be reserved for something which an average person would do on a regular basis, which message signing just isnt.
582	2370940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2370940	luke-jr	So what happens when you open the signing panel? just have none of the tabs selected?
582	2374329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2374329	TheBlueMatt	New window?
582	2374367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2374367	luke-jr	I kindof like Bitcoin-Qts single-window design.
582	2376120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2376120	laanwj	I agree that this is a dilemma. It would be nice to fit it in the single-window design, but without exposing it as a first-class operation. Making the option selectable from the menu bar, then showing it in the main pane while deselecting all of the tabs seems fine with me. This gives it a bit of a hidden feature feel. But as there is no verify functionality yet, it still feels pretty experimental anyway.
582	2380458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2380458	luke-jr	Ok, I made it only on the File menu, but still appears in the single-window style (deselecting the other tabs).
582	2400469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2400469	TheBlueMatt	I would argue that putting it in the main window but without selecting any tabs is worse than having it in either a new window or a tab. The hidden feature feel never sits well with me when I see it in an application - it just makes me feel like no effort went into UI design and it was just slapped in there, which is never a good feeling to have, especially in financial software where every effort needs to be made to encourage trust in the application (ha like we do that now...)
582	2403466	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2403466	laanwj	You have a point, but in that case it would be better to not include it all yet, because its not finished yet. And I have a vague idea why signmessage could be useful, but how to integrate "secure messaging" usefully for end users without turning it into half a mail/IM client is not exactly clear with me. Still I like experimental features and playing with them. Sometimes you discover novel applications just by having something available. And I dont want to linger pull requests that are essentially good for too long. So thats my reasoning to pull this and somehow make it hidden for "normal payment users", or maybe this is a good case for starting a bitcoin-next or UI-next branch where we can be innovative? On Thu, Oct 13, 2011 at 11:31 PM, Matt Corallo < reply@reply.github.com>wrote: > I would argue that putting it in the main window but without selecting any > tabs is worse than having it in either a new window or a tab. The hidden > feature feel never sits well with me when I see it in an application - it > just makes me feel like no effort went into UI design and it was just > slapped in there, which is never a good feeling to have, especially in > financial software where every effort needs to be made to encourage trust in > the application (ha like we do that now...) > > -- > Reply to this email directly or view it on GitHub: > >
582	2403691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2403691	luke-jr	This feature is finished, as soon as someone decides whether its allowed to have a tab or not. It provides useful functionality that people need /yesterday/. Its not some "hey, this might be useful for new stuff", its "hey, people are already needing to use this even before its got a final release".
582	2404225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2404225	laanwj	Well the consensus seems to be a separate window for now. But please do explain to us (or point to the wiki) how this is useful in trade in the current form... Op 14 okt. 2011 08:13 schreef "Luke-Jr" < reply@reply.github.com> het volgende: > This feature is finished, as soon as someone decides whether its allowed > to have a tab or not. It provides useful functionality that people need > [i]yesterday[/i]. Its not some "hey, this might be useful for new stuff", > its "hey, people are already needing to use this even before its got a > final release". > > -- > Reply to this email directly or view it on GitHub: > >
582	2406477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2406477	TheBlueMatt	This is a very useful addition for many merchants or pools who want to verify a user based on bitcoin address. Although I would strongly argue for merchants doing their own auth instead of wasting time with complicated sigh-message stuff, hence why I would argue for this not taking a very central role in the gui. (also, luke stop talking about your need for things in the third person) "Wladimir J. van der Laan" <reply@reply.github.com> wrote: >Well the consensus seems to be a separate window for now. > >But please do explain to us (or point to the wiki) how this is useful >in >trade in the current form... >Op 14 okt. 2011 08:13 schreef "Luke-Jr" < >reply@reply.github.com> >het volgende: > >> This feature is finished, as soon as someone decides whether its >allowed >> to have a tab or not. It provides useful functionality that people >need >> [i]yesterday[/i]. Its not some "hey, this might be useful for new >stuff", >> its "hey, people are already needing to use this even before its >got a >> final release". >> >> -- >> Reply to this email directly or view it on GitHub: >> >> > >-- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/582#issuecomment-2404225
582	2407265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2407265	luke-jr	In most cases, this enables merchants to just publish a single Bitcoin address for payments on their website, and if there is any confusion over who paid request individual customers sign their receipt with a sending address. It is also useful, as BlueMatt implied, for proving an Eligius miner controls an account (which is identified only by its payout address). Both of these problems have been around for a while now. ThomasV also mentioned that he has been waiting for this feature for some unspecified purpose.
582	2421967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2421967	gavinandresen	ACK on the code changes for release-after-0.5. I dont have an opinion on file menu versus tab.
582	3674501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3674501	sipa	First time I look at signmessage_gui: * it looks very inconsistent: its a tab, but it is not listed as a tab? * items in the systray should not affect what the main program window does (as opposed to say opening a pop-up separately); i know this is not entirely related to this pull request, but it still feels wrong.
582	3675312	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3675312	sipa	ACK
582	3699172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3699172	laanwj	Has been merged
582	5473784	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5473784	rebroad	Is there any documentation anywhere explaining what this feature is for and when it should be used? I suspect most bitcoin users wont know what to use this for otherwise.
582	5473881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5473881	luke-jr	Please dont comment on long-closed issues. Open a new one.
579	2350861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2350861	paraipan	has been added already
577	2347736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2347736	gavinandresen	Thanks! Need to add src/qt/locale/bitcoin_es.ts to the TRANSLATIONS list in bitcoin-qt.pro... (Ill do that if you dont get to it first)
577	2350666	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2350666	paraipan	thanks you, i dont get what "bitcoin-qt.pro" means though edit: found it
574	2322777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2322777	sipa	This is a limited version of #220 that does not include the wallet import/export code; only key import/export/remove.
574	2333657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2333657	jgarzik	ACK
574	2361582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2361582	gavinandresen	NACK for version 0.5 -- I think removeprivkey needs at least a warning that it can modify unrelated account balances, and maybe a dump of what it did to the wallet so there is some chance of an undo if the wrong key is removed.
574	3191401	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3191401	sipa	As per Gavins request, removeprivkey is disabled for now.
573	2317300	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2317300	forrestv	Mostly-ACK. I agree that this is "purer," though it makes packing and unpacking more complex. Most people will just convert it back to an integer so they can do the bitshift-trick to decompress it.
572	2312023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2312023	gavinandresen	According to the MSDN docs, it should be PDWORD_PTR, right? Im looking at:
572	2313680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2313680	delirium---	Right, actually that the main thing: function gets pointers to DWORD_PTRs (PDWORD_PTR is DWORD_PTR *), and arguments are DWORDs and not DWORD_PTRs. On 32bit it is ok as sizeof(DWORD) == sizeof(DWORD_PTR), but on 64bit it is not ok. That is why I changed type of dwProcessAffinityMask and dwSystemAffinityMask from DWORD to DWORD_PTR. Do not be afraid of _PTR suffix, DWORD_PTR is not a pointer, but an unsigned integer and is really the same as DWORD on a 32bit platform.
570	2969521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2969521	gavinandresen	No consensus on this-- and it removes a feature that I think most web services want ("just send whatever fee is likely to get the damn transactions into blocks, Ill eat the costs because theyre so small anyway" -- anyway, that was what I wanted for ClearCoin).
570	2993304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2993304	luke-jr	With this part, automatic fees up to "maxtxfee" (default 0.01 BTC) will be accepted for sends without further JSON-RPC interaction.
570	3327063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3327063	sipa	ACK on the -maxtxfee idea; Ill check the code soon. About -nosafefees - yes, but only after some way of reverting transactions that do not get accepted by the network is present.
570	3327600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3327600	TheBlueMatt	Seriously, the upgrading transactions stuff was already coded, all you have to do is implement it and do it well...
570	3805680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805680	jgarzik	Disagree with "accept any transaction...from myself" because that is a useful safety net. No opinion on the other stuff. Probably should admin-close and let this issue/code sit until fees are straightened out.
570	3805921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3805921	luke-jr	Re "accept any transaction...from myself": By the time theyre being rejected, its already too late to undo them.
570	5586446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586446	jgarzik	I think this is a mess we dont want to merge... NAK from me at least. If and when fees get redone, this code will change anyway. Until that time, it is debatable that these will be used by >1 users.
570	5586509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586509	luke-jr	Someone else is maintaining a complete fork just for this, and it seems to have a >1 userbase:
570	5586737	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586737	sipa	Im quite sure some people are interested in this, especially the the ability to prevent transaction from taking a unexpected fee without interaction. There are alternatives though, like an RPC to prepare a transaction, and allow inspection before submitting it. The nosafefees part... sure, one day, but we definitely need saner behaviour when non-accepting / conflicting transactions exist in a wallet.
570	6607585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607585	jgarzik	Do we still need this, in light of the raw transaction stuff in #1456 ?
570	6607810	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6607810	luke-jr	I think so. Just because one can implement the same behaviour by implementing their own Bitcoin transaction maker externally, doesnt mean the simpler use-cases shouldnt be supported for software that just wants to deal with the financial aspects.
570	7430615	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/7430615	jgarzik	No consensus, it mixes in fee behavior which is actively debated, and this pull request has become "all over the place" Closing, but you are welcome to re-open smaller, more fine-grained changes as separate pull requests that might be more easily ACKd or NAKd.
569	2317476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2317476	shadders	I support the principal of coinbaser however I dont understand why setworkaux is part of this patch. It would appear to have quite a different purpose and my concerns about it are outlined here: It would appear to be an incomplete solution for merged mining. It does provide one of the operations necessary to make mm work but to my knowledge theres no complete solution based on this. vinceds mm patches include a complete solution but the setworkaux part is not exposed. merging setworkaux with the vinced solution would seem to be best of both worlds option but since thats not whats being proposed I cant support setworkaux as a standalone patch. The coinbaser part of this patch needs to be explained. What output is expected from the coinbaser command? In what format? Its no use pulling a patch if luke is the only one that knows how to use it.
569	2317834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2317834	luke-jr	setworkaux is part of Coinbaser because it affects the coinbase transaction. Im not ready to declare the other (non-coinbase-related) component required for merged mining "done" until there are some actual specs for MM with which to make a complete implementation. I agree the coinbaser output format should probably be documented. Ill see if I can get that added to this soon, unless someone else wants to pitch in. Eligius probably wont be using bitcoind much longer, FYI.
569	2317922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2317922	shadders	edit: This comment was originally a fairly off topic rant about merged mining in general and only slightly relevant to the patch in question. Ive moved the rant to a more appropriate place:
569	2330391	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2330391	luke-jr	Wrote up some docs on the wiki:
569	3184749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3184749	luke-jr	GitHub fail. Moved to #708
568	3205842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205842	jgarzik	not sure about ThreadSafeRPC/ThreadUnsafeRPC markers adding value. However the rest looks good to have.
568	3205915	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205915	luke-jr	Without them, theres no way to gradually migrate things to be threadsafe. When 100% of JSON-RPC commands are known to be threadsafe, then it makes sense to remove it...
568	3268503	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3268503	muggenhor	Ive updated #457 to be on top of this pull request. Its code changes are reasonably small so it should be easy to merge into this pull request. (Small enough to understand the consequences of merging, not to perform the actual merge itself as that should be a fast-forward).
568	5135364	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5135364	luke-jr	FWIW, since originally submitting this pullreq, Ive kept it up to date with master, and Eligius is running a 0.6-based bitcoind with it now, as well as having continual testing in my next-test branch (which I run locally).
568	5306022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5306022	luke-jr	Mostly superceded by #1101, closing.
567	2298316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298316	gavinandresen	pulled
566	2298322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298322	gavinandresen	How much slower, for what, on what type of system?
566	2298842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298842	luke-jr	C++ would need to: allocate memory for std::string data, scan length of const data, copy const data, return a pointer to its own data, and make at least 3 function calls to do so. The C equivalent just passes the pointer to the const data directly. I imagine under high load, this could make a difference, but I havent done any benchmarking. Apparently it was deemed important enough for JoelKatz to take his time to do it.
566	2298893	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298893	TheBlueMatt	This is just cleaner code anyway, no reason not to merge.
566	2301494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301494	gavinandresen	needs rebasing
566	2301643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301643	luke-jr	Rebased.
565	2298689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298689	gavinandresen	How much faster?
565	3269334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269334	luke-jr	Testing with 100 threads of 10,000 getworks each... master: 11m41s (1426/s) master + optimize_FastGetWork: 7m1s (2375/s; 67%) master + threaded_rpc: 8m56s (1869/s; 31%) master + threaded_rpc + rpc_keepalive: 8m14s (2024/s; 42%) master + threaded_rpc + rpc_keepalive + optimize_FastGetWork: 5m41s (2932/s; 105%) master + threaded_rpc + rpc_keepalive + optimize_FastGetWork + optimize_ToHex: 5m32s (3012/s; 111%) Note that benchmarking this volume of connections (at least without rpc_keepalive) requires tweaking kernel parameters so you dont run out of local ports.
565	5586393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586393	jgarzik	"detect typical getwork" is too much special casing
564	2298350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298350	gavinandresen	How would this be tested ?
564	2298876	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298876	luke-jr	I suppose we could hack bitcoind to freeze every other thread at the start of CheckWork, and replace this sleep with a temporary thread that simply unfreezes the other threads after 10 seconds. That would have the effect of making this a Sleep(-10), and giving a window of time to try to get it to misbehave...
564	2305675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2305675	simplecoin	Ive had no trouble running w/o the 2second sleep. In fact I remove it from all my clients.
563	2298359	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298359	gavinandresen	Closing, see Encode/DecodeBase64 in latest util.cpp/h
562	2298382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298382	gavinandresen	If the "cache getwork" patch is applied, does this matter?
562	2298974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298974	luke-jr	The original "cache getwork" patch used this. I split them up for code cleanliness. If this one is merged first, I can rebase the FastGetWork code and bring it back to its original state from JoelKatz.
562	2495061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2495061	laanwj	I appreciate that youre trying to optimize bitcoin, but please dont add any fixed-sized buffers! I rather have somewhat slower code than potential security holes.
562	2562424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2562424	luke-jr	Fixed-size buffers are not a security hole, only misuse of them. That being said, I have not checked over this patch for security checks either.
562	2563775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2563775	laanwj	I think we all know that already Luke. The thing is, people make mistakes, and they are usually not all found on the first time around code inspection. Its playing with fire, in a way, and should be restricted imo to direct interaction with hw, OS-level libraries and such stuff. Id prefer to err on the safe side in financial sw.
562	2564745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2564745	luke-jr	Sure, but that ignores the fact that this code has had a lot of real-world production testing in probably 90% of pools (and even *required* by PSJ)
562	2610649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2610649	wowus	I dont understand the concern here. If you look in the context of this patch, theres plenty of fixed buffer usage already. What would make sense is to instead make the buffer size a result of a constexpr calculation, but in this case that really seems like overkill.
562	2610850	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2610850	laanwj	Thats exactly my concern. Id like to reduce fixed buffer use not increase it. C++ has introduced all kinds of stuff exactly to not have to muck around with them. Also, this does not completely replace the old HexStr function, so this means that the source will now be littered with not one but two hex conversion utility functions. I would prefer if he just optimized the current HexStr function, which is very possible in a similar way, as it seems to be the strprintf and string concatenation that make it slow. Writing to a fixed buffer instead of returning a std::string is likely a unnecessary micro-optimization.
562	2991349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2991349	gavinandresen	I have a few problems with this code, starting with it doesnt follow the bitcoin coding conventions (e.g. nLen instead of len). And I agree with laanwj RE: optimizing HexStr instead. But Ill go back to my original question: does this have any measurable effect on performance if the bypass-JSON-and-return-a-cached-response-to-getwork patch is applied? What is the performance of getwork with/without: Just this patch Just the bypass-JSON-cache-getwork patch Both this AND the cache-getwork patch I think it is a bad idea to add another (potentially unsafe if you use it wrong!) way of converting to hex, unless it gives a really significant (on the order of "you can serve twice as many getwork requests with one bitcoind") performance advantage.
562	3454336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3454336	luke-jr	Pull #565 includes performance testing for this.
561	2296333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2296333	sipa	ACK
560	2298413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298413	gavinandresen	I hate to sound like a broken record... ... but how much faster on what machine for what operation(s)? The first rule of optimization is benchmark every change before and after, because changes that will "obviously" make things faster often dont.
560	2369914	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369914	laanwj	Fetching from a std::map is really fast (order log N the number of entries in the map, which is very small as it only contains the command line arguments). Also it is only done once for every HTTP request, so I doubt that this gives a speed advantage. On the other hand, I do think the code is somewhat cleaner storing the user and password in explicit variables. After all, it shouldnt matter conceptually where the settings come from. One could discard the command line arguments map after parsing them and storing the values in the appropriate component that needs them (most programs do that afaik). Eventually these should be part of an object / namespace instead of globals though... :-) Anyway: ACK
560	2638165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2638165	JoelKatz	This change speeds up `getwork` by about 3% if made to vanilly 0.3.24 (the version I benchmarked against). With my other patches, this patches speeds up a getwork by about 11%. (The improvement due to this patch is about the same, but getwork is about four times faster with all of my patches -- same numerator, smaller denominator, bigger fraction.) Some of those patches are already in CVS, so it should be somewhere between 3% and 11% now.
560	2975054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2975054	gavinandresen	Reworked to be self-contained in bitcoinrpc.cpp:
559	2298429	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298429	gavinandresen	NACK -- Ill soften my position on non-standard transactions when there is a good fast-initial-download solution implemented and the transaction fee code is reworked.
559	2298954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298954	TheBlueMatt	Non-standard transactions were disabled for a reason, and nothing has reasonably changed since then...why enable them or make it easy to do so?
559	3205853	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205853	jgarzik	NAKd, closing. People who really need this can modify the source.
557	2298459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298459	gavinandresen	Closing this; if you want to add new RPC commands, please start a discussion on the bitcoin-dev mailing list or the forums.
556	2298468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298468	gavinandresen	Closing; RPC changes should be discussed first on the mailing list or forums.
556	3091795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3091795	TheBlueMatt	Not entirely sure how useful the first set in getinfo is, but the second one definitely could be useful in some cases, and since neither is gonna take a performance hit, I see no problem with this; ACK.
555	2298474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298474	gavinandresen	Does this work on Windows?
555	2298962	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298962	TheBlueMatt	Better question - does this even compile on Windows?
555	2298997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298997	luke-jr	Good question. No idea. I dont use Windows... Anyone want to step up to test, or should I resubmit this with non-Windows #ifdefs?
555	2308367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2308367	shadders	I didnt think there was such a thing as SIGUSR1 on windows. Whilst this is the current implementation many pushpool pools use now it has a couple of limitations that are relevant to pools and some extras that are specific to java based pools (i.e. poolserverj). 1/ it requires the pool engine to be on the same machine as the bitcoin daemon 2/ Java is flaky enough with SIGUSR1 and cannot determine which pid the signal came from so for a java recipient of the signal it requires that they either listen to only 1 bitcoin daemon or that it not care which daemon the signal comes from. This is not the case for poolserverj and wouldnt be for any pool engine that uses multiple bitcoin daemons. 3/ If indeed it isnt windows incompatible thats another negative from poolserverjs side since it can run as a windows service. There is at least small pool using it on windows. The principal is good and definitely desirable from a pool engines perspective, its just the method of sending the signal that is limiting. poolserverj currently uses an intermediary mini-daemon (written in C) that listens for signals then sends a signal over a network socket. This is a very simple but custom protocol. Open socket, send a \n terminated string [passphrase]:[bitcoind id string] then close socket. This is pretty hackish so Id be open to an alternative but I think a network based notification method would be preferable for the above reasons. perhaps in keeping with the json-rpc trend Perhaps -blknotifycallbackurl=<listenUrl> with a json-rpc method: notifyblockchange <blocknumber>
555	2369974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369974	laanwj	I do think bitcoin needs a mechanism to send asynchronous notifications of incoming transactions, new blocks, whatever a client wants to subscribe to. However, I agree with and dont think signals are the preferred interprocess communication method here. Signals are specific to UNIX and pretty annoying to handle at that, as they interrupt system calls, and have many other tricky corner cases.
555	2403325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2403325	d33tah	How about dbus?
555	2403443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2403443	luke-jr	Dbus is a desktop technology. This would primarily be used on servers...
555	2403524	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2403524	laanwj	DBUS, featurewise would be exactly what we need here. It supports both synchronous and asynchronous calls and async notifications/subscriptions, so we could implement the entire bitcoin API plus notifications in it. It also has some rudimentary security features which could come in useful. However it also has some drawbacks: - It is bound to one machine: I have tried in the past to use it as a kind of remote RPC by tunneling over ssh, but is was a lot of hassle and you end up exposing all the machines services not just the one you want - It is mainly a Linux desktop technology. It needs the dbus daemon to be running on the local machine to work at all. I havent seen many active DBUS installs on Windows, Mac, or (as LukeJr says) on servers. - Im not sure about web language support. Is there DBUS for PHP? Well maybe there is, but it is not very common. There is a large compatiblility argument for "Keeping it HTTP" here. On the other hand, our current JSON-RPC doesnt support asynchronous notifications or subscribing to them, so wed have to bolt it in ourself with callbacks, which could also be a bad idea: more to maintain, more "bitcoin-specific" shit, Id ideally like to use proven 3rd party libraries when possible. Any ideas? :-) On Fri, Oct 14, 2011 at 7:12 AM, Luke-Jr < reply@reply.github.com>wrote: > Dbus is a desktop technology. This would primarily be used on servers... > > -- > Reply to this email directly or view it on GitHub: > >
555	2406446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2406446	TheBlueMatt	I completely agree with luke here. DBus really isnt the best choice here, primarily because it is really mostly used as a desktop technology. Additionally, does java have a good DBus library? One of the complaints about sending a USR1 signal was poor java support therefor. Although this is largely platform-specific (again, does this compile on windows?) I would say this, it is still worth merging. "Wladimir J. van der Laan" <reply@reply.github.com> wrote: >DBUS, featurewise would be exactly what we need here. It supports both >synchronous and asynchronous calls and async >notifications/subscriptions, so >we could implement the entire bitcoin API plus notifications in it. It >also >has some rudimentary security features which could come in useful. > >However it also has some drawbacks: > >- It is bound to one machine: I have tried in the past to use it as a >kind >of remote RPC by tunneling over ssh, but is was a lot of hassle and you >end >up exposing all the machines services not just the one you want > >- It is mainly a Linux desktop technology. It needs the dbus daemon to >be >running on the local machine to work at all. I havent seen many active >DBUS >installs on Windows, Mac, or (as LukeJr says) on servers. > >- Im not sure about web language support. Is there DBUS for PHP? Well >maybe >there is, but it is not very common. > >There is a large compatiblility argument for "Keeping it HTTP" here. On >the >other hand, our current JSON-RPC doesnt support asynchronous >notifications >or subscribing to them, so wed have to bolt it in ourself with >callbacks, >which could also be a bad idea: more to maintain, more >"bitcoin-specific" >shit, Id ideally like to use proven 3rd party libraries when possible. > >Any ideas? :-) > >On Fri, Oct 14, 2011 at 7:12 AM, Luke-Jr < >reply@reply.github.com>wrote: > >> Dbus is a desktop technology. This would primarily be used on >servers... >> >> -- >> Reply to this email directly or view it on GitHub: >> >> > >-- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/555#issuecomment-2403524
555	2407849	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2407849	d33tah	How about the callback URLs then?
555	2407911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2407911	TheBlueMatt	At that point its getting much too complicated for what it is designed to do. If we use SIGUSR1 some applications (like poolservj) will have to implement a wrapper which receives the signal and forwards it on in another method. If we use callback URLs then other applications either get much more complex or write a wrapper which receives the callback and forwards on a SIGUSR1. There really is no perfect way, so IMHO the best solution is the simplest for us that will work for some others, which IMO would be SIGUSR1.
555	2407982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2407982	luke-jr	They dont have to be exclusive, either...
555	2408004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408004	TheBlueMatt	True, though I would really prefer to KISS here instead of implementing a large new addition for such a simple feature.
555	2408013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408013	shadders	why does it have to be one or other? I callback side by side with a sigusr1 offers both and is trivial to implement on the bitcoin side given that it already implements a json-rpc client. It could be easily configurable to use one or the other or both. The most common application that needs it (i.e. poolservers) already implement listeners and go as far as json-rpc listeners. If you want to wrap sigusr you are limited in the languages you can use to do it and you are forced to maintain an additional daemon (which particularly in javas case breaks platform independence). If you dont you are limited to receiving push notifications on the same machine. On 15/10/11 01:28, Matt Corallo wrote: > At that point its getting much too complicated for what it is designed to do. > If we use SIGUSR1 some applications (like poolservj) will have to implement a wrapper which receives the signal and forwards it on in another method. > If we use callback URLs then other applications either get much more complex or write a wrapper which receives the callback and forwards on a SIGUSR1. > There really is no perfect way, so IMHO the best solution is the simplest for us that will work for some others, which IMO would be SIGUSR1. >
555	2408068	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408068	shadders	its not exactly complicated... a call. And if the framework is in place can easily be extended to any either type of event notification. Sigusr doesnt provide any granularity. Unless it goes to a different pid for every possible permutation of message. As far as I know you cannot add any sort of arbitrary data to the signal to distinguish it. Im far from knowledgable on signals though so Im happy to stand corrected. On 15/10/11 01:37, Matt Corallo wrote: > True, though I would really prefer to KISS here instead of implementing a large new addition for such a simple feature. >
555	2408098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408098	freewil	This may be something more thorough than what is needed, but some sort of hooks "interface" like was saying, for events like new transactions, blocks, etc is much needed. I imagine something flexible like being able to specify in the conf file an event and a script to run or a callback URL to POST to.
555	2408181	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408181	shadders	I think a script call would be just as usable as a callback url. A little more fiddly but more flexible if the end user doesnt want to implement a listener. On 15/10/11 01:44, freewil wrote: > This may be something more thorough than what is needed, but some sort of hooks "interface" like was saying, for events like new transactions, blocks, etc is much needed. I imagine something flexible like being able to specify in the conf file an event and a script to run or a callback URL to POST to. >
555	2408208	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408208	freewil	Yup, what says. A script to run (probably passed some helpful arguments) or a callback URL I think gives the best flexibility.
555	2408355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2408355	laanwj	Yes a callback script or URL would have my preference for now. This could do anything, including send a signal. And when the system is in place it could be re-used for other kinds of events later on. This provides much more flexibility than a fixed signal to a specific PID.
555	2410734	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2410734	mikegogulski	Gavin had some ideas about a similar topic way back here: I also agree that doing things non-portably (such as via SIGUSR1, as proposed) isnt the right way to go. If a stopgap is needed prior to a full JSON-RPC callback implementation, Id suggest something like simply writing the new blocks hash to a file that can act as a semaphore. Other programs could just stat() this file periodically for its last update time, as a simple IPC.
555	2411130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2411130	luke-jr	A lot of talk as if this is merely a proposed thing, but its in fact the de-facto standard for pretty much every longpoll-enabled miner.
555	2412594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2412594	shadders	Thats a polling not push. The fallback mechanism for listeners that cant use SIGUSR and dont want to implement a half-node is to poll getblocknumber already. On 15/10/11 05:55, Mike Gogulski wrote: > Gavin had some ideas about a similar topic way back here: > > I also agree that doing things non-portably (such as via SIGUSR1, as proposed) isnt the right way to go. If a stopgap is needed prior to a full JSON-RPC callback implementation, Id suggest something like simply writing the new blocks hash to a file that can act as a semaphore. Other programs could just stat() this file periodically for its last update time, as a simple IPC. >
555	2412658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2412658	luke-jr	The ideal solution would probably be native longpolling in bitcoind. The file-based mechanism *would* be push, if you use inotify to monitor it for changes ;)
555	2412659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2412659	shadders	Not the case. Poolserverj is now used by 2 of the 4 largest pools + numerous small pool. The 2 largest that dont use poolserverj are using proprietary pool server and I couldnt say whether they use longpoll signals or not. It was the standard and when there was only 1 option for OSS pool software it met everyones needs but PSJs adoption has pretty clearly demonstrated how limiting the solution is. In terms of backward compatibility and script to send the same signal is a one liner. On 15/10/11 06:37, Luke-Jr wrote: > A lot of talk as if this is merely a proposed thing, but its in fact the de-facto standard for pretty much every longpoll-enabled miner. >
555	2412670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2412670	shadders	On 15/10/11 10:00, Luke-Jr wrote: > The ideal solution would probably be native longpolling in bitcoind. The file-based mechanism *would* be push, if you use inotify to monitor it for changes ;) > //inotify/ is a _Linux kernel subsystem_ that acts to extend filesystems to notice changes to the filesystem, and report those changes to applications./ Do you see the problem here?
555	2414397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2414397	mikegogulski	Suggestion: resolving/merging this should have the lowest possible priority. Why? It benefits ~2 dozen pool operators. Dev attention is far better (as in by orders or magnitude) spent on improving the end-user experience and extending capabilities for commerce. Alternately, surround the relevant code with "#ifdef poold" or something, pull it, and let pool operators build their own. Case closed, on to more important things.
555	2414422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2414422	shadders	To suggest that needs of pool operators are unimportant because there only ~2 dozen of them is incredibly short sited. Those 2 dozen are hubs for 90% of the hashing power that secures the bitcoin network. Do you really think there would be as many miners if they all had to mine solo and wait 2 years between payouts? The existence of pools makes bitcoin more secure than it would be without them. Furthermore the change does not benefit just the pool operators it benefits the miners of which there thousands. Those miners also happen to be a very large proportion of the end users at the moment. It also benefits the network as a whole by making pooled miners more efficient which again means more hashing power. No one is asking anyone who doesnt care to do anything. This discussion is simply to resolve the most future proof way of enabling a push notification mechanism for which this change is only 1 use case. If you dont have any interest dont take part in the discussion but what possible benefit is there in suggesting others shouldnt discuss it? On 15/10/11 17:00, Mike Gogulski wrote: > Suggestion: resolving/merging this should have the lowest possible priority. Why? It benefits ~2 dozen pool operators. Dev attention is far better (as in by orders or magnitude) spent on improving the end-user experience and extending capabilities for commerce. > > Alternately, surround the relevant code with "#ifdef poold" or something, pull it, and let pool operators build their own. Case closed, on to more important things. >
555	2414439	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2414439	shadders	p.s. since commerce capabilities meet your classification of important consider this. Once a push notification mechanism is adopted an obvious commerce use case is notification of new txs. User makes purchase on cart, goes to checkout and gets bitcoin address to pay, sends payment. Cart site receives push notification when payment arrives. User may well be waiting on final checkout page for confirmation payments is received. For a large site with many concurrent checkouts in progress, each session polling perhaps once/sec (since you dont want to give a bad user experience with long delays) is a horrible solution compared to a simple listener. On 15/10/11 17:00, Mike Gogulski wrote: > Suggestion: resolving/merging this should have the lowest possible priority. Why? It benefits ~2 dozen pool operators. Dev attention is far better (as in by orders or magnitude) spent on improving the end-user experience and extending capabilities for commerce. > > Alternately, surround the relevant code with "#ifdef poold" or something, pull it, and let pool operators build their own. Case closed, on to more important things. >
555	2416417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2416417	d33tah	I agree with shadders - the "lowest possible priority" thing is just an obvious misunderstanding of the concept - the IPC code, if implemented correctly, could give benefits to all bitcoind admins - making Bitcoin e-commerce easier.
555	2416458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2416458	luke-jr	Shadders, I consider it a non-issue that Java is too broken to support standard POSIX functionality. Lack of Windows support for SIGUSR1 specifically is also arguably a non-issue, since nobody sane runs servers on Windows anyway-- I suppose I need to add some #ifdefs though. If people actually need something like this on Windows, Im sure it has some non-standard equivalent too.
555	2416641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2416641	mikegogulski	"IPC code, if implemented correctly, could give benefits to all bitcoind admins" No, only to those running bitcoind on the very same machine as their commerce app/pool server -- or running such an app at all. RPC solves the general case, and those running both on the same box can point to localhost. Did you actually read issue 20?
555	2416689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2416689	freewil	Here is gavens actually work on this, its probably outdated, but something like this - added with the option of running a script also would solve the problem and make everyone happy I think.
555	2418468	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418468	shadders	On 16/10/11 04:09, Mike Gogulski wrote: > Did you actually read issue 20? Of course I read it... Are you referring to this part?: "/Used by basically every pool now/" Unfortunately thats only true in lukes happy place where JVMs dont exist. What he really means is every pool running pushpool or a derivative which is a minority by a very big margin. />>> Shadders, I consider it a non-issue that Java is too broken to support standard POSIX functionality. / Luke currently 75% of network hash power is served by pools that use a JVM. Thats hardly an inconsequential minority. There are two solutions presented here that are both simple to implement (both use mechanisms already present in bitcoind), extensible, cross-platform, cross-machine and can easily be made backward compatible. It would appear the only advantage you could gain by choosing to go with SIGUSR1 over either of them is to lock out broken java and non-posix compliant platforms.
555	2418516	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418516	luke-jr	Please explain how SIGUSR1 notifications (the topic here) have anything to do with your far more complicated solutions. Its my understanding that your ideas are not in any way exclusive or broken by getting this simple implementation in.
555	2418552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418552	freewil	> Its my understanding that your ideas are not in any way exclusive or broken by getting this simple implementation in. I think the goal should be to not include quick solutions like this for every single need in the official release. IMO a far more flexible and comprehensive (therefore superior) solution has been proposed.
555	2418567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418567	luke-jr	"Superior" can be based on a lot of different things. Every other proposed solution requires significantly more code and CPU time to implement, whereas this is a simple standard solution to a simple problem.
555	2418574	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418574	freewil	> Every other proposed solution requires significantly more code and CPU time to implement, whereas this is a simple standard solution to a simple problem. If you were able to specify a script/executable to be called upon a "newblock" event, and that script/executable simply created the same signal, would this really take up so much more cpu time to be detrimental?
555	2418577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418577	shadders	On 16/10/11 11:15, Luke-Jr wrote: > Please explain how SIGUSR1 notifications (the topic here) have anything to do with your far more complicated solutions. Its my understanding that your ideas are not in any way exclusive or broken by getting this simple implementation in. > Because the solutions achieve the same goal with none of limitations, significant extra benefits and minimal extra code. Aside from that its simple politics. Once you implement a 1/2 arsed solution that satisfies some people it becomes that much harder to get support for a complete solution. The few that were satisfied by the 1/2 solution no longer care because their needs are met which leaves the remaining unsupported people to argue for the change on their own. Youre calling these complicated solutions but I honestly cant see whats hard about it. Both probably require an extra line or two of code to parse the arguments. And probably one or two more to execute the rpc call or script. The rest is already done. Why is executing an external script so complex for this application when you seem perfectly ok with it in your coinbaser patch? That is a far more complex use of external scripts since it involves waiting on the returned output and parsing it. This is simply a fire and forget case. As Ive said if SIGUSR1 is important to you theres no reason you couldnt send the signal at the same time. But the rest of the work is done already so its only these few lines of code to be added and all potential consumers of the service are satisfied. Let me break it down for you... SIGUSR1: - 75% of pool hash power is excluded from benefiting. + more for those that dont run bitcoind on the same machine as pushpool. - limited to one event type per target pid. - Those that are able to use it already do. - Specific to one and only one use case Script/RPC - Easily backwards compatible (script calls kill or RPC has side by side SIGUSR1 option) - 100% of pools can benefit - extensible to many use cases that are non-pool related. - cross-platform, cross-machine - perhaps 4 extra lines of code within existing patch. -
555	2418578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418578	luke-jr	Unlikely. Ive never used coinbasers TCP mode outside of testing, simply because popen wasnt a bottleneck ;)
555	2418636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2418636	luke-jr	By complex, I was mainly referring to JSON/HTTP-based solutions, which require an implementation of both of those specs-- neither part of the common C standard. As implied, I did implement TCP support into coinbaser because of the possibility of overhead from executing an external script. I also found it wasnt an issue, so never ported my Eligius code to make use of it. I can also see and agree that most pools, even pushpool-based, could benefit greatly from a coinbaser-like system/popen solution rather than SIGUSR1-- their script could send the signal and then start work on processing payouts. If someone wishes to implement the system/popen solution (really will probably be a fork-and-exec so it can be a simple fire-off), Id be glad to close this in favour of merging that. Not much difference between -blknotifypidfile=foo.pid and -blknotify=kill -USR1 $(<foo.pid)
555	3205959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205959	jgarzik	SIGUSR1 is an ugly hack on pushpools part. However, it is also very simple and straightforward. With more complex solutions stalled, I think pragmatism says it would be OK to merge this with some minor changes: 1) rename cmdline option to some Unix-y, like "-sigusr1file" 2) make sure the code builds on Windows (translation: #ifdef out)
555	3208247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3208247	luke-jr	Superceded with pull #714
554	2298501	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298501	gavinandresen	Closing; a default installation of Ubuntu or Debian will not include boost or the other libraries we link against, and we want the binary distribution to be self-contained.
554	2299006	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299006	luke-jr	The correct solution to that concern would be to build .debs with dependencies.
554	2301464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301464	gavinandresen	... so submit a PULL with the correct solution. I dont know nuthin about building .debs...
554	2301593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2301593	luke-jr	The point is that your argument is assuming packaging it the wrong way... but I put out a request for a Debian developer for you. This pull fixes a problem with users building from source. It isnt intended to fix the flawed packaging.
554	2317266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2317266	ali1234	bitcoind (an old version) is now packaged in Ubuntu: Perhaps the maintainer of that package could help you. If not, someone else could use it as a starting point.
553	2292953	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2292953	TheBlueMatt	
553	2293160	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2293160	luke-jr	As I said, this is not the place to waste time arguing for or against using it.
553	2293270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2293270	TheBlueMatt	I wasnt, I was providing links to the previous arguments for people to see the history. Frankly, I couldnt care less whether or not this gets merged, I was just providing history.
553	2298507	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298507	gavinandresen	No consensus that this is a good idea, closing.
552	2298510	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298510	gavinandresen	No consensus this is a good idea, closing.
552	4025739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4025739	gmaxwell	Commenting because I see this is in next-test. I think this is a bad idea, in fact, because its possible to make a typo that currently fails which this corrects to an incorrect passing one. e.g. you type O instead if P (the keys are next to each other) and it corrects to o which happens to pass the crc check. If people are being sloppy in their typing it would be better to find out about it rather than being silently corrected.
551	2298540	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298540	gavinandresen	Closing because I dont want pull requests to turn into Yet Another Place to discuss ideas. Reworking how fees work is a good idea, but should be discussed on bitcoin-dev of the forums before submitting half an implementation.
551	2299028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299028	luke-jr	This particular change *was* discussed (at least on IRC) a while back when fForRelay was being added. IIRC, we had an agreement it would be a good change, but not of immediate urgency (the immediate concern was reducing txn fees).
550	2298619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298619	gavinandresen	Closing; please drum up consensus before adding new RPC commands.
549	2279756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2279756	tcatm	I think this could (and should) easily turned into a more general client. e.g. one that knows how many arguments bitcoin expects (can this be queried via RPC?) and asks for each argument. A blank value for optional arguments will use the default value for all following optional arguments. A first version could just ask for arguments arg1...argn and send execute the RPC when a blank value is entered. ``` $ bitcoin-rpc sendfrom account> foo address> 1Jkas.... amount> 3.14 minconf (optional)> (return) 543edaf.... $ bitcoin-rpc walletpassphrase passphrase> na83klam... timeout> 30 ... ```
549	2279986	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2279986	enmaku	Happy to do the work (when I can find the time) but I have no idea what can be queried via RPC like this. If anyone has an answer (and perhaps some snippet of sample code?) Id be happy to modify.
549	2280724	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2280724	enmaku	Supports all the basic commands. Im sure theres an easier way to run the command in sys.argv[1] without such tremendously long branching but Im not familiar enough with ServiceProxy. If anyone knows Id appreciate it.
549	2283598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2283598	sipa	Maybe we need to add a meta-RPC call that returns (in a machine-parseable format) all supported RPC calls and their argument types, so tools like this do not need to be be updated everytime an RPC call is added?
549	2284679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2284679	tcatm	The output of ```help``` can already be parsed. Mandotary arguments are enclosed in <>, optional arguments in []. Lists (sendmany) are enclosed in {}
549	2287083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2287083	enmaku	I guess my real question is how to use json-rpcs ServiceProxy more dynamically. For example, I create a ServiceProxy object called "access" and then I can run things like "access.getinfo()" - how can I run something like getinfo() dynamically without already knowing what the procedure is called? Is there some special function like SQLs "exec" that would allow me to do something like "access.exec("getinfo()")" or similar?
547	2274773	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2274773	alexwaters	ACK
545	2296327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2296327	sipa	ACK
543	2257800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257800	gavinandresen	ACK
543	2263000	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2263000	gavinandresen	Error compiling on my mac: test/util_tests.cpp:120: error: integer constant is too large for long type make: *** [obj/test/test_bitcoin.o] Error 1
543	2263101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2263101	laanwj	Right, the type specifier is missing. Seems that for your gcc its changed from a warning to an error. Line 120 should be BOOST_CHECK_EQUAL(GetArg("inttest2", -1), 81985529216486895LL); Some day we should start compiling with warnings enabled...
541	2250308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2250308	gavinandresen	multisig_testing tree is up: It adds a "sendmultisig" RPC command to generate multisignature transactions. And adds public key information to the output of the "validateaddress" RPC command, so you can get the full public key for addresses in your wallet. Good tests for THIS pull would be: + Setup a testnet-in-a-box testing environment + Compile two bitcoinds : one with this pull request and one with the multisig_testing pull request + Get three full public keys from a testnet wallet by running the multisig_testing bitcoind against that wallet. Then shutdown that bitcoind, and run bitcoind with THIS pull request against that wallet. Then: Running the multisig_testing bitcoind against another testnet wallet, send multisig transactions to the first wallet. EXPECT: balance in the first wallet does not change, transactions are ignored. EXPECT: eventually the transactions are confirmed and included in blocks and shown in the testnet block explorer (testnet allows non-standard transactions) Syntax for the sendmultisig RPC command is: bitcoind sendmultisig "" and_or ["...key1...","...key2...","...key3..."] 11.11 ... where "" is the account youre sending from and 11.11 is the amount. I am NOT submitting a pull request for sendmultisig, and you shouldnt spend time testing it right now. I may submit a separate pull request for the validateaddress extension.
541	2287042	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2287042	gavinandresen	The OP_EVAL idea/discussion is making me re-evalute this. Closing for now.
538	2238249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238249	sipa	ACK; we can re-evaluate how many miners are still using midstate or hash1 when 0.5 or 0.6 is released.
537	2238575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238575	gavinandresen	ACK
536	2226246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2226246	alexwaters	ACK
535	2239498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2239498	tcatm	Now that midstate is deprecated I will rework this patch to as it does not need to support midstate anymore. Though, what is the most generic code for ByteSwap/Reverse that we can safely use in bitcoin and works on GCC (lin/win/osx) and VisualStudio?
535	2240981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2240981	gavinandresen	The generic byte-swap would be the code in the #else that uses rotlFixed... Also, I think itd be cleaner to move rotlFixed and the body of ByteReverse to util.cpp. Can you hold off on removing midstate support? Id like to pull this for the 0.5 release, we can remove the deprecated midstate a few months AFTER the 0.5 release (gotta give people time to adapt).
535	2250334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2250334	tcatm	Looks like github does not handle rebased pull requests correctly. Changes: * reduced ```ByteReverse()``` to a single function using shift, OR and AND We cant move it to ```util.cpp``` because it is declared ```inline``` and it is used when looping over arrays so performance is still somewhat important.
535	2251057	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2251057	gavinandresen	Can you cherry-pick just the (two?) commits into a fresh tree, merge them, and update this pull request? github or your branch are very confused...
534	2213423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2213423	gavinandresen	Testing: Unless somebody has already written a tool to generate low-difficulty valid-but-orphan blocks, I think we may have to rely on code review and unit tests (unit tests are part of this pull). (I am working on a tool to generate blocks and transactions for testing, but have more work to do on it)
534	2213424	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2213424	alexwaters	Would test-net-in-a-box allow me to create orphaned blocks to test this?
534	2213458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2213458	gavinandresen	You cant use testnet to test this, because testnet doesnt have block-chain lock-in points and theres no way to generate orphan blocks on purpose with too-low difficulty.
534	2281826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2281826	ByteCoin	Whats the justification for having more checkpoints than just the latest?
534	2299475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299475	gavinandresen	Justification for more than the last checkpoint is it makes it harder for an attacker to waste a newbies time downloading a long-but-invalid chain. Pruning some of the checkpoints in the middle is probably a good idea.
534	18801511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18801511	rebroad	I would be curious to know if this network rule change is in line with the Satoshi White Paper on bitcoin.
534	18801677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18801677	gmaxwell	Why are you replying to two year old pulls? This doesnt make the node reject any blocks that it wouldnt already (ultimately) reject.
534	18804374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/18804374	sipa	Indeed, its not a rule change. It just detects invalid blocks earlier.
530	2197971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2197971	gavinandresen	tcatm, pull this when youre happy; I have no idea whether or not this is a good idea.
530	2361594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2361594	gavinandresen	Closing this; with the switch to Qt for the GUI, all the translations changed.
524	2146400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2146400	gavinandresen	This seems like a perfect candidate for some unit tests, both for the base64 encoder/decoder and for the sign/verify. A performance unit-test for the old versus new base64 code would be spiffy, too...
524	2151521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2151521	ByteCoin	I suggest that the code from be used to recover the public key from the ECDSA signature on verification. This means that the public key need not be base-64 encoded which makes signatures about 87 characters shorter. The verification step is simply to check that the inferred public key matches the address. See for further justification and improvements.
524	2234196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2234196	alexwaters	Ran the 10 test cases with no error. I have testnet-in-a-box running and can sign and verify between the two clients. Signed the same address with multiple messages, verified true:true and false:false (no true:false). TBH I dont know if this is even necessary, but why not. Strict verification was tested (x to y or z etc.), observed expected behavior. Any chance you could add Gavins requested performance test?
524	2238791	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2238791	gavinandresen	ACK; Id still like hard numbers on the performance of the base64 code, but thats not a show-stopper for pulling this.
524	2246516	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2246516	alexwaters	ACK
524	2248354	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2248354	sipa	There is a bit of discussion on the forums still; see
523	2148420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2148420	jgarzik	Red Hat bugzilla and other "tracker" web apps implement the following logic: Issue a warning on day X, stating that the request is outdated and will be automatically closed on day X+N. Take time and explain why this policy exists, and what to do about it, in the automated email. On day X+N, close req.
523	2206517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2206517	alexwaters	This pull has been reopened here: - sorry about that...
522	2132493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2132493	alexwaters	ACK
522	2133852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2133852	gavinandresen	ACK
521	2131830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2131830	sipa	ACK on the changes to core. I havent reviewed the UI code itself.
521	2133176	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2133176	tcatm	This seems to break the wxgui (error in AppInit()). Either that should be fixed or wxgui removed IMHO.
521	2133191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2133191	laanwj	Didnt notice it yet. Ill fix that. The changes should not affect the wx GUI.
521	2133552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2133552	laanwj	tcatm: Im unable to reproduce this (on Linux). The Wx still works as it did before. Can you get a traceback for the error?
521	2133621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2133621	tcatm	sorry, my fault: I forgot to run make clean and thus part of bitcoin was usind bdb 4.7 and bdb 4.8
521	2134059	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2134059	gavinandresen	ACK, I did a quick review and setup a qt build environment. Looks good.
521	2159636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159636	TheBlueMatt	Im assuming no one cares about adding non mit pictures to bitcoin, but I might as well bring up the issue.
521	2159728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159728	TheBlueMatt	Also, it might just be me but I really hate having two sets of translations, is it not possible to redefine some translation functions and make a script to convert the format of the files?
521	2159783	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159783	laanwj	This is exactly what I did (see scripts/qt/extract_strings_qt.py). When running with Qt UI, the _ function is redirected to Qt. The Wx translations are not used by the Qt UI.
521	2159840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159840	laanwj	Feel free to add or replace your own images if you think thats a concern...
521	2159905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159905	TheBlueMatt	Well look at me not paying attention, but I also meant for qt files to use _ so that translation programs will pick up strings from qtui as well (or did you do that too, im on my phone and the browser lags out if I try to load the diff tab). Also Im assuming you have some strings specific to qtui already, how were those handled in the existing translations for qt?
521	2159974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159974	TheBlueMatt	In URI handling, why does it not parse the message field?
521	2159977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2159977	laanwj	Nothing special has to be done for that; Qt uses tr() instead of _, and recognizes the qtui-specific strings (which are indeed a lot) in lupdate/lrelease, the qt translation tools, automatically. It does not pick up _(), thats why the python script exists. It converts the strings in _() to QT_TRANSLATE_NOOP strings which are recognized. This means that qt translator can be used to translate the strings in the core as well as the qtui-specific strings in one go. On Wed, Sep 21, 2011 at 9:26 PM, Matt Corallo < reply@reply.github.com>wrote: > Well look at me not paying attention, but I also meant for qt files to use > _ so that translation programs will pick up strings from qtui as well (or > did you do that too, im on my phone and the browser lags out if I try to > load the diff tab). > Also Im assuming you have some strings specific to qtui already, how were > those handled in the existing translations for qt? > > -- > Reply to this email directly or view it on GitHub: > >
521	2160013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160013	laanwj	Huh I dont see anything about a message field in the URL handling? Whats it supposed to parse, and do with it?
521	2160106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160106	TheBlueMatt	re:images I dont have a problem with it but I thought id bring it up to make sure no one else had any problems with it. Re:translations, it just bugs me that half the translations are in po format and the other half are in qt. That might cause issues later on if there are conflicting translations used by bitcoind. My question was whether or not it would be possible to modify the qt-generated code to use the_() function (which is mapped to tr) so that translation software would pick up the strings that qt needs as well as wx and bitcoind ones. That way all the translations would be in one place.
521	2160145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160145	TheBlueMatt	See (ignore lukes tonal exponent crap)
521	2160179	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160179	laanwj	Eventually all the translations should be in qt format (ts), not the other way around, IMO. The Qt translation system is more advanced (context sensitive, can take into account multiples, shows the GUI while translating etc). The po files could be generated from the ts files, for use by bitcoind, and wouldnt even need to be in git. This would need another script but not a very complex one.
521	2160189	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160189	laanwj	What would you want to do with the message? Display it in a popup? Currently, the "send coins" tab is opened and the amount, address and label is simply added to the recipients list when a URL is drag&dropped into the client.
521	2160240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160240	laanwj	BTW **bitcoind** doesnt use translation at all; I guess itd need to link against libgettext to do that. Currently, without ui, _ is implemented as this (util.h): #if !defined(QT_GUI) && !defined(GUI) inline const char* _(const char* psz) { return psz; } #endif If this is kept the same, this means the po files can simply be removed when the wx UI goes away.
521	2160266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160266	tcatm	RE: message in bitcoin uri It should be stored as a comment for that transaction. Actually, Id like to have a editable comment field for every transaction (outgoing and incoming) so one could label individual transactions on a single address. I think the wallet and RPC already supports comments.
521	2160329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160329	laanwj	Is that true? I havent noticed it. I intended to add such functionality. A long time ago I sent a message on the mailing list about adding metadata to transactions and address book addresses, but no one ever replied, so I guessed it was not practical or useless. Anyway, we can add this later. Its a good idea in any case.
521	2160360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160360	p2k	laanwj: Just a side note: Ive written a python script that reads ts files and outputs unicode string tables for use in mac or iphone applications. I think it wont take me long to modify it so it outputs po files.
521	2160453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160453	laanwj	p2k: nice, if we decide to add gettext-based translation to bitcoind that will certainly come in handy
521	2160709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160709	TheBlueMatt	Meh, I dont care if all the translations are po or qt, but I would think it would be better to have them all together instead of split between two files.
521	2160747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160747	laanwj	As I said, unless gettext-based translation is added to bitcoind, we can simply remove the .po files when the wx UI is deprecated. That would solve the problem wouldnt it?
521	2160802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160802	TheBlueMatt	yes., long as existing translations are ported over.
521	2160851	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160851	laanwj	Yes, that could be done, though thatd only work for the strings in the bitcoin core. Most of the strings in the UI itself would remain untranslated as theyre different from before.
520	2123922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2123922	jgarzik	ACK
520	2134067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2134067	gavinandresen	ACK
519	2121942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2121942	alexwaters	ACK
517	2109277	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2109277	JoelKatz	The only other thing to worry about is that someone working on client development might inadvertently run a buggy version of the client and wind up locked out of parts of the network for a few hours. I would add one other change to help prevent this. When you punish an IP, check to see if you made the connection to them or they connected to you. If they connected to you, punish them for a few hours. If you connected to them, just dont connect to them for a few hours, still let them connect to you. That way, unless youre actually malicious or make large numbers of outbound connections accidentally, youll only get locked out for hours of a small number of peers. Someone trying to launch a DoS attack by waiting for people to connect to them will find it slow going.
517	2152430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2152430	ByteCoin	Also see my post [DoS countermeasures may facilitate network fragmentation attacks](https://bitcointalk.org/index.php?topic=44954.0) Summary: Pay attention to new block headers with valid hashes of sufficient difficulty even from banned peers.
517	2158395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2158395	gavinandresen	Rebased into fewer commits, and removed banning due to getting too many free transactions and getting blocks with bad timestamps, because they might have opened up a possible split-the-network attack.
513	2068330	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2068330	SomeoneWeird	+1
513	2070765	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2070765	gavinandresen	Can you rebase into one commit? Otherwise, looks good to me (but Im no expert on obscure gcc compiler flags).
513	2071301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2071301	TheBlueMatt	ACK (if its in one commit). For reference, Bitcoin releases are already built with -fstack-protector (not -fstack-protector-all, however the difference is negligible), -Wl,-z,relro (though not -Wl,-z,now due to its potential performance hit at initial load, something which is minor compared to existing load times), and -D_FORTIFY_SOURCE=2 simply because those are the default for Ubuntu 10.04.
513	2073570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2073570	sipa	ACK (after rebase)
513	2124683	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2124683	jgarzik	ACK
513	2134071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2134071	gavinandresen	ACK (thanks for the rebase)
512	2069127	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2069127	alexwaters	ACK
512	2086197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2086197	paraipan	thanks guys
511	2062265	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2062265	alexwaters	ACK
511	2062318	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2062318	jgarzik	Deleting *.mo is not correct. The *.po file is updated, and other files should not be touched.
511	2066308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066308	TheBlueMatt	does it honestly matter that much? Either way a binary mo has to be regenerated.
511	2066406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066406	mibe	Done, .mo not touched.
511	2066980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2066980	jgarzik	Thanks much, merged!
510	2055792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2055792	ghost	This looks like a quite good commit. A new modern approach to bitcoins.
510	2055983	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2055983	revmischa	+1. Bill Cosby makes a fine mascot for the community.
510	2056077	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056077	alexwaters	Humor is better when its not forced...
510	2056769	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2056769	gavinandresen	Please re-open April 1, 2012.
510	2057144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2057144	jrmithdobbs	Will do! -- Douglas Huff On Sep 9, 2011 6:21 PM, "Gavin Andresen" < reply@reply.github.com> wrote: > Please re-open April 1, 2012. > > -- > Reply to this email directly or view it on GitHub: >
506	2039583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2039583	gavinandresen	There is concern by who? I strongly believe that the ability to broadcast a message in case of emergency is important; before removing it, generate some consensus on the bitcoin-dev mailing list that removing it is a good idea (Ill argue against).
506	2040172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2040172	enmaku	I was simply going off the comments on the Bitcoin StackExchange. I believe the primary concern was that it could be used for spam/DoS. Ill gladly submit the idea to the mailing list for consensus.
506	2041273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2041273	alexwaters	I believe this is in reference to and Im not really for removing it, but theres always the Git history if we want to revive and improve it to be more decentralized down the road.
506	2041331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2041331	enmaku	Thats correct Alex. Theres a discussion on the Bitcoin-Dev mailing list if youve got input to add:
506	2041728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2041728	alexwaters	It seems that public opinion is that the code should remain for the time being. Closing this request until there are additional commits or more support in the mailing list/forums.
506	2043024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2043024	enmaku	Fair enough. Sounds like theres some good discussion about the alert system at least so I dont consider my time to have been wasted bringing it up :)
505	2029756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2029756	TheBlueMatt	First of all, can we get commitmsgs that are readable?
505	2032895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2032895	alexwaters	Ok I did the steps above in a fresh build of 0.4.0rc1 with the testnet-in-a-box files, and landed at code:-12 error: Keypool ran out, please call keypoolrefill first I then restarted my daemons with the -gen tag. Up to about 20 generated blocks now. My Ubuntu skills are lacking, the txids look unique to me; but obviously thats not good enough. Any help with would be appreciated. Lastly, Im not familiar with RPC - is there any resource for how I would do a getwork call wtih RPC?
505	2034883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2034883	gavinandresen	getwork is how external miners ask for block headers to work on, so to test it youd fire up a miner and tell it to ask for work from your bitcoind. Theres an external python-based miner in the config/pyminer/ directory (named pyminer.py) that aught to be handy for testing (it is very slow, though). If youre running testnet-in-a-box, note that youll need to be running two bitcoinds talking to each other for any mining to get done. I just tried: pyminer.py bcc1.cfg ... and got: 2 mining threads started Wed Sep 7 19:08:12 2011 Miner Starts - 127.0.0.1:9000 HashMeter(0): 1000000 hashes, 249.67 Khash/sec HashMeter(1): 1000000 hashes, 255.08 Khash/sec where bcc1.cfg contains settings that match my weird testnet-in-a-box setup (running with rpcport=9000): host=127.0.0.1 port=9000 rpcuser=abc rpcpass=123 threads=2 scantime=60 hashmeter=1
505	2039577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2039577	sipa	The commits are a bit messy - lots of changes that are not used in later commits. ACK on the actual code change though (though it needs testing).
505	2051060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2051060	alexwaters	Tested, no duplicate txids.
504	2023260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2023260	alexwaters	ACK
504	2023811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2023811	TheBlueMatt	Can you remove the binary mo file?
504	2023863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2023863	paraipan	eh ? dunno how it shows up but the binary has been deleted
504	2023999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2023999	TheBlueMatt	Oh, you deleted it, my bad. I thought it had been modified. ACK
504	2024028	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2024028	paraipan	np :)
504	2062313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2062313	jgarzik	The commit deletes *.mo, which is not the desired effect. Your commit needs to simply modify *.po, and touch nothing else. Thanks.
504	2063493	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2063493	paraipan	yeah, that would be my goal in every commit but with this one i had some troubles cause the editor overwrites the *.mo at the same time when you save the translation. I didnt know it was this difficult for you guys to manage submitted work from other people, i will try not to bother again. Thanks
504	2065140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2065140	jgarzik	It becomes difficult for the very few engineers with pull requests, if each pull request requires manual modification after it is submitted. It is -normal- in an open source project to request the submittor update their pull request in response to feedback. See the Linux kernel, or Apache, or Eclipse, or any number of other open source projects for similar feedback-response-update workflow. Only by working together, through a normal conversation with feedback and response, do open source projects succeed.
504	2065450	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2065450	paraipan	thanks jgarzik for taking your time to explain this issue, i do not fully agree here but will not continue with probably already answered questions. A "committer guide" will be nice though to maintain some order and less troubles for the main devel :) Im not experienced with git so i will be redoing all the forking and committing stuff to fully comply, doing your work harder was not my intention.
501	2020979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020979	paraipan	thanks man
500	2020402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020402	TheBlueMatt	ACK
500	2026713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2026713	sipa	ACK
498	2015456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2015456	paraipan	sorry, edited the wrong way ppl
497	2017711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2017711	jgarzik	Please update your commit to _only_ include the *.po file. The binary *.mo file should not be included.
497	2020386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020386	paraipan	sorry, didnt know that it was created by poedit automatically
497	2020711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020711	jgarzik	By "update commit" we mean to rebase your commit so that there is (a) only one commit, and (b) that commit updates *.po file. We would prefer to -not- merge Commit A and Commit B, where Commit B simply fixes Commit A. We would rather just have an updated Commit A.
497	2020733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2020733	paraipan	ah ok, I think i got it
495	2008052	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2008052	TheBlueMatt	ACK
492	2007585	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2007585	gmaxwell	It seems to me that its sort of weird that I could generate a bunch of completely insane blocks, and feed you them and get you to accept them only to drop them when you hit the first checkpoint. Perhaps I could use this to pollute your wallet.dat with megabytes of junk transactions? I suppose I could still do this without this change though. Perhaps it should validate up to block 75k or so, there are so few transactions that this shouldnt change the speed much but by then the difficulty starts getting high enough to make mining insane blocks just for disruptive purposes less attractive. I like that the stopping points is 120 blocks before the last lock-in, this seems prudent. It might be prudent to rig the RPC/UI to never show anything as confirmed until the client reaches the last checkpoint. I can imagine an attack where I can somehow trigger a remote node to flush and rebuild its blockchain, and then sneak some crap transactions past it while its between checkpoints. Though I admit the attack there is a bit far out and this really would make bitcoin no more vulnerable to it.
492	2035378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2035378	gavinandresen	Thanks for the thoughtful comments. RE: polluting the wallet with megabytes of junk blocks/transactions: Im working on another fix for that (see my DoSprevention branch for the start, punishing peers that send lots of obviously bogus orphan blocks is on my TODO list). This change doesnt make that attack any easier to mount. By far the bottleneck to that attack would be generating bogus blocks with valid proof-of-work, and if you were doing that theyd have only a single coinbase transaction which doesnt have a signature to check in it anyway. RE: rigging the RPC/UI to show everything as unconfirmed until initial download is complete: good idea, but as you say this proposed change doesnt affect that.
492	2039327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2039327	sipa	Im not sure I really like this. This means giving the maintainer of the software control over which block-chain is accepted by the client. Of course, he can already do this by changing the source code, so there may not be a real reason for my dislike for it. However, maybe we can still have a configuration option "Verify entire chain", for paranoid people? On the other hand, if we are going to trust the locked-in chain data in the client anyway, why not do it for each and every block? There is not even a need for storing the complete hash of each block. For example, one could argue that 72-bit security is enough for blocks (would require 10 years to break with the current network power). In that case, store for each block the lower 9-N bytes of the hash, where N is the number of zero bytes at the front implied by its difficulty. The entire current chain would require 617725 bytes, in that case.
492	2051642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2051642	gavinandresen	We already control which block-chain is accepted with the blockchain checkpoint mechanism. RE: adding a verify the whole thing option: if youre that paranoid, you should run a separate piece of code to do the verification, in my humble opinion. In fact, a standalone verify-bklindex/blk000 tool would be way spiffy. I dont understand your last point; the client needs all (unspent and not-involving-my-keys) transactions in the chain, and transactions are what makes the chain large.
492	2051802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2051802	sipa	1) There is a subtle difference: currently the maintainer can prevent certain chains from being accepted by clients, but the accepted chain does need to be valid. If youre going to skip verification of everything beneath a certain checkpoint, an "evil maintainer" could make "his" client accept a fake chain. Again, I realize there is little difference with the maintainer just changing the code, so this argument is probably meaningless. 2) Verification in a separate tool: I like that idea, actually, as it also allows detection of corruption of the database afterwards. 3) Sure, after downloading it has the entire chain. I guess it wasnt entirely clear, but I was talking about a 600 kB file that would be shipped with/inside the binary. That would suffice to lock each and every block, instead of just a few checkpoints.
492	2069748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2069748	alexwaters	Im testing the speed on this just by timing how long it takes to download a few thousand blocks. Anything else you want me to test for this one? And - are there better ways of speed testing optimizations?
492	2070484	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2070484	gavinandresen	Youll need to test on blocks that actually have a bunch of transactions in them, so dont test with the first few thousand blocks in the main chain (because theyre all mostly empty-- a "generate bitcoins" transaction doesnt have a signature to verify). Id suggest: + Download up to block 50,000 or so + Shutdown, then save the blkindex.dat and blk0001.dat files + Time how long it takes to download blocks 50,000 to 60,000 + Shutdown, reset blkindex.dat/blk0001.dat, and apply the patch + Repeat test You could eliminate network variance by removing the nodes addr.dat and then running with: -noirc -nodnsseed -nolisten -connect=...ip address... If you have two machines, then -connecting the test machine to a machine on your local network for the block download.
492	2070818	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2070818	alexwaters	There was a 10% gain for the first 70k blocks. At 99k, the patched client was 27m faster. Testing with Gavins method now to verify. ...it took 1:17 for the unpatched client to get to 99k, and :50 for the patched.
492	2071230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2071230	gmaxwell	27m faster? This sounds broken. Even with 4000 transactions per block there is no way it should be taking that long.
492	2071973	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2071973	alexwaters	By using Gavins method to avoid network variance - the original client took 13m to get from 65-75k, and the patched client took 10m. Giving a 23% improvement. Im assuming that percentage would be higher with the recent, heavier blocks.
492	2073753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2073753	sipa	There werent that many transactions at 75k either yet. Maybe you can benchmark the entire chain verification? That is what every new node installation has to go through anyway. Use a local node that is synced up, and use -connect to connect to it from an empty install, both patched and unpatched. Maybe its possible to run bitcoind in a shell using "time", to measure how much CPU time it uses as well as how much clock time? This may take quite some time though...
492	2076198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2076198	alexwaters	Sipa, I can do that now. I think that knowing these timings will be good for future tests as well. I had been just eyeballing it, but I will try to write some kind of script that does the speed test. I imagine this could be used on several current and future commits. Cheers for reminding me about time, that will make things a lot less tedious =P
492	2122718	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2122718	alexwaters	OK I have tested this with the full blockchain. I went from 0 to 145,686 and had the following results: 0.4.0rc1 - 10H:21M 0.4.0rc1 + pull 492 - 7H:14M So thats an improvement of 3H:7M or 30%
492	2123702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2123702	gmaxwell	These numbers are back to sounding suspect to me again. My desktop does over a thousand ECDSA verifies a second. That doesnt really jive with the speedup here.
492	2125591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125591	alexwaters	gmaxwell: can you test this commit to see if you get different results from my test?
492	2125642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125642	gmaxwell	Sure, I will. FWIW, Im not questioning your methodology so much as suggesting that if its true then there is perhaps something else wrong with bitcoin which out to be fixed regardless of this change.
492	2125662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125662	alexwaters	Im running this in virtualbox, so maybe my systems speed is a contributing factor - I will try it tomorrow on a different machine. As for something else being wrong; in general I think major changes are needed to the blockchain download. Having a GB+ requirement is fairly undesirable (esp for mobile). I dont remember who, but someone brought up an interesting idea at the conference (poss. Gavin?). It would be an opt-in system for running a wallet, with optional trusted centralized verification. Im not sure what that entailed but I envisioned the following: I could run bitcoin with -server, which would download the blockchain like the current system. I could then connect to that node to verify my transactions from another bitcoin client (where I wouldnt have to download the chain). Does anyone know if someone is working on this, and/or if its viable? So far, its the cleverest solution to the download woes IMO. Im also wondering if this is possible with dropbox? I have also read a little about the headers-only version, I cant find a reference to how its used - so Im assuming it isnt fully implemented yet.
488	1985111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985111	jgarzik	ACK
488	1985375	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985375	alexwaters	Would anyone be opposed to adding a timer on issues, for instance: "Non-bug issues will be removed if no commits or comments are made in 30 days since issue creation."
488	1985542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985542	TheBlueMatt	Who holds the keys to BitcoinQA@gmail.com?
488	1985547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985547	alexwaters	I do - maybe it should be passed to Gavin? Currently its forwarding to my email address.
488	1985563	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1985563	TheBlueMatt	IMHO more than one person should hold the keys. As long as multiple people can get to the account.
488	2007923	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2007923	alexwaters	totally Fd up with that last commit - still learning git, sorry!
487	2046652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2046652	alexwaters	Please remove the binary mo file =)
487	2062025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2062025	mibe	Done in new commit
484	1975883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1975883	alexwaters	Thanks for stepping up nanotube! Does anyone want to help test this (while I get my test environment setup), and post confirmation(s)? Nanotube has said that you would need to disable dnsseed and irc -> which can be done by issuing -nodnsseed -noirc
484	1978753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1978753	gavinandresen	Im testing, and failing to connect. I think the code needs to randomize the order in which it trys to connect to seed nodes-- it is always picking the first one on the list to try. And if the connection to that node fails, it either takes a very long time to try another or isnt trying another at all... Im testing by removing the addr.dat file and running -nodnsseed -noirc
484	1980284	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1980284	gavinandresen	New seed nodes are working nicely after I fixed the code to randomize which one to connect to.
484	1980661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1980661	nanotube	great. I guess we were unfortunate enough that the first node or two in the new list happened to go down or fill up sometime between me testing it and including it in the list, and you testing this :) (or fortunate, as the case may be, since it encouraged you to improve the code with the randomization bit :) ).
476	1889793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1889793	gavinandresen	Was there a design discussion for this anywhere? Youre returning more than just the list of transactions, and there is some magic code I dont understand (like the ...GetTime() - nStart > 60 ... what is that about?)
476	1890122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890122	forrestv	There wasnt a discussion - I assumed wed have it here and Id revise it. It also returns the previous block and the total amount of fees in those transactions. The previous block hash is important because these specific transactions are only valid following that block. The magic code is just a copy of the block caching code from the getwork handler.
476	1890338	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890338	gavinandresen	"If it is a more complicated or potentially controversial change, then the patch submitter will be asked to start a discussion (if they havent already) on the development forums: " ... from the top-level README. Please start a discussion on the forums or the bitcoin-dev mailing list.
476	1890353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1890353	TheBlueMatt	you still suggest anyone try to start a sensible discussion on those forums?
476	1894336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1894336	forrestv	
476	1942626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1942626	nanotube	by the way, wanted to make a note : this will also be useful for writing that cross-client test-suite you were talking about. when we were discussing it, you were primarily focusing on sending client various bits of blockchain. however, as we know from the existing bug where transactions with duplicate inputs are treated as valid for the purposes of rebroadcast, testing the client by sending it a bunch of weird transactions would be good too. and this getmemorypool functionality would let you query the client to see if it has accepted the transaction. just a thought. :)
476	1999038	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1999038	ervwalter	can you rebase this against 0.4rc?
476	2005582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2005582	forrestv	Rebased.
476	2016646	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2016646	goblin	Im soooo excited about it! :-D Thanks to this the awesome decentralized p2pool can now include transactions and make actual use of the mining power :-) First mined block with transactions: Thanks
476	2257819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2257819	gavinandresen	Id like to pull this; can you rebase again?
476	2258299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258299	forrestv	Rebased. Thanks!
475	1864136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1864136	TheBlueMatt	It looks like you deleted all the messages related to wallet encryption, can you readd those?
475	1865173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1865173	ovdeathiam	Its a bug. I posted an old version. Ill readd this and a compiled *.mo version asap. Im a github newbie, sorry for the trouble. 2011/8/21 TheBlueMatt <reply@reply.github.com>: > It looks like you deleted all the messages related to wallet encryption, can you readd those? > > -- > Reply to this email directly or view it on GitHub: > >
475	1874560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1874560	TheBlueMatt	it would be better to not add the compiled .mo as those should be compiled by a trusted developer (never know what you can do with binary files corrupting the application)
472	1816759	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1816759	jgarzik	Would you please resend without the compiled (*.mo) translation? Thanks.
472	1824922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1824922	xHire	Ah, Ill send a new one (didnt know commits are automatically added to this pull request).
468	2089022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2089022	freewil	+1
468	2089141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2089141	freewil	I actually doubt the usefulness of this after realizing there was already the third [from] arg on listtransactions (Wiki has been updated).
468	2089191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2089191	djpnewton	the problem currently is if the from parameter is greater then the total number of transactions it rolls over and returns an unexpected assortment of results
468	4186045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4186045	sipa	This needs rebasing
467	1801906	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1801906	sipa	I havent tested it, but it looks correct - a bit of a hack though. Wouldnt it be nicer to have a bool GetKeyFromPool(vector<unsigned char> &vchPubKey, bool fAllowReuse = true) function which can fail, and call that with fAllowReuse=false in GetAccountAddress?
467	1803622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1803622	gavinandresen	Much less hacky to rename GetOrReuse to GetKeyFromPool with a flag. Ill do that.
467	1944012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1944012	TheBlueMatt	Aside from maybe adding a lock around IsLocked and GenerateNewKey, looks good
467	1948772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1948772	gavinandresen	Thanks. RE: locks: Im in the middle of reworking the wallet/keystore locks to fix potential deadlocks; should be done with that work tomorrow.
466	1789824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1789824	muggenhor	PS Currently I only turn the RPC calls "getgenerate" and "setgenerate" into no-ops, should they maybe be removed instead?
466	1789840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1789840	sipa	There was a large discussion some time ago about this, split between people wanting to remove all mining code, and people who wanted to keep as much as possible. Eventually a middle ground was chosen: remove the SSE-optimized and assembly code, but keep a simple miner as reference. Maybe this should be reconsidered, but i suppose it will require some discussion first. Im in favor of removing myself.
466	1790016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1790016	muggenhor	If a reference implementation is the goal then IMO it should be implemented as a seperate program using the RPC "getwork" interface. I would argue that Jeff Garziks RPC CPU miner (the one I mentioned before) is good enough to serve as a reference implementation. Heck the codes a lot cleaner than whats currently inside bitcoin itself. Furthermore a *good* reference implementation would IMO contain only the bare essentials to illustrate the algorithm, and those expressed as simply as possible. Which would be something like a Python script containing only the "getwork" call to get work, a loop over all nonces to search for the correct one, followed by a "getwork" call when the targets matched. Such an implementation however, would perform so poorly that no one would use it, and as a result it wouldnt be tested, making it likely to have bugs. Which is roughly the same for the builtin miner; i.e. only people who dont know or care what theyre doing still use it.
466	1790506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1790506	davout	+1 for removing the built-in miner, there are a couple of example implementations in the wild already.
466	1792553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1792553	gavinandresen	Id be ok with a version of this patch that completely removes the mining code but adds a reference miner (in contrib/ ). Either Jeffs or a pure-Python-no-dependencies one. Also: setgenerates help text should be changed like you changed getgenerate and both methods should be marked deprecated.
466	1792572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1792572	sipa	Agree with Gavin.
466	1794423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1794423	muggenhor	I properly marked both RPC functions as deprecated in their help text. As for adding a reference miner, I dont think adding Jeffs to this repo is the way to go, at the most it should be moved to the github bitcoin project. That being said, I can probably whip up a pessimistic (i.e. no single readability compromise for performance) Python miner for contrib/ (probably by the end of next week).
466	1929705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1929705	alexwaters	"PS Currently I only turn the RPC calls "getgenerate" and "setgenerate" into no-ops, should they maybe be removed instead?" +1 to them being removed - and +1 for NOT including a reference miner.
466	1959013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1959013	jgarzik	A reference python miner has long existed:
466	1959063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1959063	jgarzik	I went ahead and added my python miner to bitcoin/contrib/pyminer/
466	1959091	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1959091	jgarzik	IMO, lets go ahead and remove the *generate RPCs. Rationale: * I doubt this will create serious breakage * Anybody who mines does not use this anyway * It occasionally creates confusion for newbie pool server operators ("setgenerate is false, does that mean getwork is turned off?")
466	1960537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1960537	TheBlueMatt	I agree, no-ops just confuse everyone. Also, is there anyone left who is actually against removing all of this?
466	1962089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1962089	jgarzik	I would personally -prefer- that the Satoshi Reference Miner remain, but if everyone else wants to remove it, it sounds like Im outvoted...
466	1962913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1962913	TheBlueMatt	you can still get the satoshi reference miner - its in git history ;)
466	1991103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991103	muggenhor	Ive rebased the branch against master to make it easy to merge in.
466	2255258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2255258	laanwj	This would also mean that we can get rid of some ugly platform-specific functions in util.h/cpp which will be no longer used: * SetThreadPriority * AffinityBugWorkaround And some general functions only used by the miner: * alignup
466	2298642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298642	gavinandresen	I use the built-in miner quite a lot to test with testnet-in-a-box. I think we should leave it in for now.
466	2298881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2298881	TheBlueMatt	I still disagree with leaving it in, you can just as easily mine with cpuminer on testnet-in-a-box (in fact, it would be faster) and the codebase is just generally such a mess, removing unused and unnecessary features like satoshi miner should happen ASAP.
464	1791560	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1791560	TheBlueMatt	Temporarily closing to upgrade to db4.8, wx2.9.2 and miniupnpc1.6 on win32
464	1795343	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1795343	TheBlueMatt	OK, think this one is finally good to go.
464	1819264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819264	TheBlueMatt	Closing again until I have a minute to get devrandoms upgrades which make mingw results deterministic pulled into this. (very much want this stuff for 0.4).
464	1881682	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881682	TheBlueMatt	OK, Im doing a couple final run-throughs and then Id like to see this as the build system for 0.4
464	1902959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1902959	TheBlueMatt	It would be nice to get a confirmation that the results here are deterministic...IIRC devrandom said that there are a few bytes changing in the final nsis exe, but everything else should be stable (including the boost and wx results). Im going to see if I can work on the nsis exe, but Ill leave this open because if it doesnt happen before 0.4 is ready to go, its fine by me.
462	1784024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1784024	gavinandresen	NACK on the protocol.hpp (we dont have other hpp files, I dont see a good reason to start now-- moving non-performance-critical code from .h to the .cpp I support), and on asserting copyright to protocol.hpp (I just pulled Matts standardization of making the copyright "Bitcoin Developers") ACK on the other cleanups.
462	1786662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1786662	muggenhor	By protocol.hpp I assume you mean to reject the extension? Changed that to protocol.h instead. The copyright header I took from the head of another file now. Ammended and forced-updated these commits.
462	1786675	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1786675	muggenhor	PS I was thinking it might be an even better idea to move every single message class to a single source/header file, e.g. src/protocol/$msg.(cpp|h). Any thoughts on that?
462	1786911	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1786911	gavinandresen	Separate source/header for each message wouldnt fit the rest of the projects style. Weve rejected other proposed re-orgs that did two-files-per-class.
462	1787124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1787124	muggenhor	Right, my intention was to move all classes related to the bitcoin wire protocol into protocol.(cpp|h). This to allow the actual transport (across a TCP socket, or something else if desired) to remain separated from protocol decoding/encoding and event handling (the latter is currently already split from networking and resides in main.cpp). So no two-files-per-class-eritis.
462	1790203	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1790203	sipa	Nice cleanup - I havent looked at it in detail yet though. My ipv6 branch uses a modified CAddress whose address and port are private (as a comment on your "TODO: make private" there).
461	1781561	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1781561	sgimenez	How to compile without linking to libupnp then?
461	1781635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1781635	muggenhor	Set USE_UPNP=0 in the makefile. (or on the commandline)
461	1782166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1782166	sgimenez	This does not sound consistent with the `init.cpp` change. There was three states before : `undefined` -> no linking, `0` -> linked but off by default. `1` -> linked and on by default. A bit odd, but a least functional.
461	1783944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1783944	TheBlueMatt	The relevant section from build-unix.txt: Requires miniupnpc for UPnP port mapping. It can be downloaded from UPnP support is compiled in and turned off by default. Set USE_UPNP to a different value to control this: USE_UPNP= no UPnP support, miniupnp not required; USE_UPNP=0 (the default) UPnP support turned off by default at runtime; USE_UPNP=1 UPnP support turned on by default at runtime.
461	1792587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1792587	gavinandresen	I hate to open this kettle of worms... ... but the tri-state nature of USE_UPNP seems to be a chronic source of confusion. Any objections to changing the rules to be: USE_UPNP=1 : upnp support compiled in and turned on by default at runtime Anything else: upnp support NOT compiled in. And the build rules: bitcoin GUI : built with USE_UPNP=1 bitcoind : no upnp
461	1792619	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1792619	TheBlueMatt	Well the original argument was we will have autotools in a couple weeks so it will all go away...but autotools kinda fell flat.
461	1795629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1795629	muggenhor	Im not sure how autotools would fix that problem, as the tri-state nature of USE_UPNP would remain a problem... If you *really* want to be able to configure the default UPnP state at compile time (which seems rather senseless to me): use *two* macros for the job.
461	1795643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1795643	TheBlueMatt	Well autotools can figure out if upnp is there and then automatically either set or unset USE_UPNP and you can do a configure flag to set the default on or off.
461	1795670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1795670	muggenhor	The fact that upnp is available doesnt mean you actually want to build against it. As for a configure flag to set the default on/off, the same can be accomplished with a macro (the -D thing) by optionally defining one depending on makes command line....
461	1795687	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1795687	TheBlueMatt	I cant see many scenarios where you would want to not build against a library you have even if its use if off by default (most programs will build this way, even if you can force it one way or another)... Anyway, not that it really matters, the initial idea was autotools could have more/more clear flags.
461	2369054	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2369054	laanwj	Im fine with it being possible to link to libupnp without enabling it by default (linux distributions might use this) but these would indeed be better off as separate options, the tristate option is really confusing.
461	2602696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2602696	T-X	I like gavins suggestion to only have one option, USE_UPNP=1 or else. Just one question, because I dont really know what is meant with "build rule": Is the build rule only refering to the provided, statically linked binaries on the website? Or to the default behaviour of qmake and make? I think that as long as for instance a simple "make -f makefile.unix" after a clean git checkout does not build cleanly on all major Linux distros due to version conflicts between bitcoin and libminiupnp, libminiupnp should better not be selected by default. If autotools can figure out whether using libminiupnp is possible later, great. But until then, Id vote for upnp off by default in both bitcoin-qt and bitcoind.
461	2603022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2603022	laanwj	how big is libupnpc? would it be feasible to include it in bitcoin like we do with spirit-json? if it is only a few source files we could... as it is not a very common library for distributions to have available
461	2604425	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2604425	TheBlueMatt	in gavins comment, build rule would refer to the default when calling make/qmake+make and the distributed binaries. Personally, I dont care what the default is, the tri-state option was added because no one would agree on what the default for UPnP should be and thus it wasnt getting merged, so tri-state was added to move the process forward. If you want to change it, go ahead, but even two different arguments would be clearer than tri-state (--have-upnp and --upnp-by-default or something). Distributing libminiupnpc? No way, we already distribute our own outdated, modified copy of json_spirit which we should never be doing. We dont need to be distributing other outdated copies of software in our src. Also, libminiupnpc is now in debian and gaining packages in other distros, so Im not too concerned. Also, users who know enough to be compiling bitcoin from source probably arent using UPnP on their router anyway, so most people who this effects are just going to disable UPnP anyway. In any case, if someone wants to put in the effort and actually make an update to the way UPnP is defined, go right ahead...this pull request is outdated and only halfway done. It would be better to discuss updates specific to implementation instead of wandering around all day asking what we should do.
461	2608701	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2608701	laanwj	IMO it would be fine to always enable libupnp by default when it is linked. After all, it can still be disabled through a command-line option and in the options UI. But youre right that it seems that we can never agree on anything and so these kind of small changes linger forever.
461	4557331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4557331	neofutur	also have a problem with this USE_UPNP build option mostly not working, please fix
461	4557766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4557766	laanwj	Its not broken afaik. Explain "mostly not working"?
461	4559511	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4559511	neofutur	just tried to build from latest github and I had to manually modify the makefile to build with no UPNP libs or includes I ll try again, perhaps its just me.
461	4566547	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4566547	sipa	have you even read the rest of this issue? Im sure it is confusing, and I agree it needs to be changed, but you know that USE_UPNP= disables linking against miniupnpc?
458	1774139	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1774139	gavinandresen	ACK
457	1773030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1773030	gavinandresen	Im concerned this might make RPC code that implicitly assumes the RPC is single-threaded deadlock or crash. How much testing did you do-- has this been tested on an in-production, high-RPC-traffic server?
457	1773629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1773629	muggenhor	It currently still is single-threaded, i.e. all code is still executed from ThreadRPCServer2 via the "io_service.run_one()" construct. The way it basically works is that certain actions are started (using async_* methods), and get passed along with them an event handler to be called upon that actions completion. The io_service object manages these actions, waits for any of them to complete then dispatches the appropriate event handler. All of that happens *only* within the threads from which you call io_service.run(), io_service.run_one(), io_service.poll() or io_service.poll_one(). As a result this allows future expansion into multiple threads by simple invoking io_service.run() in a new thread, but *doesnt* inherently add more threads (just allows for it).
457	1774261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1774261	muggenhor	PS The main reason for using asynchronous I/O is to allow binding to multiple addresses for RPC without requiring one thread for every socket. This is what enables a dual IPv4/IPv6 stack.
457	1783949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1783949	gavinandresen	I dont know nuthin about IPv6/boost::asio stuff. General comment is it seems like this maybe should be part of a larger "support IPv6" branch.
457	1786723	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1786723	muggenhor	Well, all that can be supported about IPv6 for RPC is in this branch. So thats exactly what this branch is: a "support IPv6 for RPC" branch. Given that the RPC code is completely separate from any other networking code it actually makes sense to migrate it separately. Thats why Im not even trying to support IPv6 across all of bitcoin at once, incremental changes tend to work better in my experience.
457	1991389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1991389	muggenhor	Ive rebased the branch against master to make it easy to merge in.
457	2382453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2382453	luke-jr	This conflicts with threaded JSON-RPC which is needed by many people. Can you make an IPv6-only version?
457	3205994	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3205994	jgarzik	agree w/ first half of luke-jrs comment. second half... not sure we want an IPv6-only version?
457	3206070	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3206070	luke-jr	I meant a patch that only adds IPv6, without the conflicting async stuff.
457	3206945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3206945	muggenhor	Adding IPv6 (or any other protocol that requires an additional listening socket) *requires* event-driven (aka asynchronous I/O). That or a separate thread per listening socket, wich conflicts with the RPCs assumption that RPC code is single threaded... Additionally event-driven approaches tend to scale better (less context switching, locking and per-thread resources overhead).
457	3207083	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3207083	luke-jr	Can we do async for listening only, then? Threads are needed for actual RPC calls since some may block.
457	3221992	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3221992	muggenhor	Another (probably better) solution would be to have a select(2)-like event-based processing loop. It would have the single-thread advantage of asynchronous I/O but the simplicity of a callback-less design. As I assume that the addition of callbacks in my current implementation is what you like least? (Please confirm/deny that last question/statement.) That should localise most of the changes to the place where current code calls listener.accept(socket). This solution I should be able to implement rather quickly in the weekend.
457	3222056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3222056	luke-jr	I dislike the fact that a getwork call will block all other JSON-RPC until it completes.
457	3239572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3239572	muggenhor	Yes, but that is unrelated to my patch. The alternate implementation of IPv6 support Im thinking of would look somewhat like this pseudocode: * create listener sockets (IPv4 and IPv6) * asynchronously accept a connection on both listeners (acceptors in Asios terminology) * from the accept callbacks: place the newly connected socket in a queue, then start a new async accept op the mainloop would then be this: * wait for a single event to occur (io_service.run_one()) * handle all connections in the queue until queue is empty * restart loop That approach would still have a single callback, but only to accept tue connection, not to handle it. If there are no objections to this approach Ill implement it this weekend.
457	3240785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3240785	luke-jr	Its related, because your patch conflicts with it. Instead of conflicting, why not implement IPv6 RPC on top of the existing multithreaded JSON-RPC branch (#568)?
457	3254297	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3254297	muggenhor	The reason it conflicts with it is simple of course: there was no multithreaded RPC patch when I wrote this patch. As for resolving those conflicts by implementing on top of #568, no promises but Ill look at it in the weekend. Right now Im going to get some much needed sleep.
457	3268074	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3268074	muggenhor	Current branch is on top of #568. Ive used the approach outlined above (using a connection queue).
457	3268629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3268629	luke-jr	ACK: Tested fine for me in next-test
457	3821590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3821590	luke-jr	For some reason, if -rpcallowip is used, it sees local connections as ::ffff:127.0.0.1 and sends a 403 instead of allowing the connection. (side note: #568 has been rebased)
457	5586369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586369	jgarzik	Request rebase on top of #1101... we certainly do want to support IPv6 RPC.
457	5677751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5677751	muggenhor	Ill work on updating this pull request next Thursday (Ascension Day, national holiday so Ill have some time off).
457	5678448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678448	jgarzik	Thanks! Note that pull #1101 is now upstream, and will be in upcoming version 0.7
457	5678847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5678847	luke-jr	Please dont forget to fix the -rpcallowip issue.
457	5808816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5808816	muggenhor	This also contains a change (in 652eebf08e7f0e32d686d4e36475742fa27f71cc) to treat IPv4-mapped IPv6 addresses (::127.0.0.1 is one) as IPv4 addresses.
457	5826601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5826601	muggenhor	I believe that this pull request is ready for merging.
457	6223190	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6223190	sipa	ACK
457	6385032	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6385032	Diapolo	NACK until the last commit is clarified. Wait, what are you doing there to the shutdown ... we had a long discussion and merged a patch a few days ago. Your last commit is likely to break sth. or at least change the current behaviour once more, see #1439.
457	6511023	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6511023	luke-jr	basic_socket_acceptor needs -lmswsock added to Windows builds: - bitcoin-qt.pro - src/makefile.linux-mingw - src/makefile.mingw
457	6511831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6511831	Diapolo	Did anyone mind reading my comment above lukes...? Im sure the last commit can cause trouble.
457	6531684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6531684	muggenhor	its been long since Ive done windows development, but dont you mean ws2_32 ? And isnt that linked to already? yes, I did read your comment. I however have a day job which doesnt leave me much time during the week to reply *immediately*. So being patient enough to wait till the next weekend following your comment might be nice. Then as for the actual content of your comment: > Your last commit is likely to break sth Please elaborate, because Ive carefully checked *how* my change would affect existing code. As far as I could see there should be no difference except the *location* from where the shutdown thread gets started. > or at least change the current behaviour once more As explained above: shutdown behaviour should not be changed for existing/untouched code. It should only affect the termination of the RPC handlings shutdown sequence. I.e. the RPC code *needs* to be interrupted by a signal in order to terminate it. Setting a variable that can be polled (fShutdown) isnt enough because were blocking until some kind of event (network I/O or internal operation on io_service or one of the sockets) occurs.
457	6531916	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6531916	Diapolo	I didnt want to hurry you the feedback of another dev would have been sufficient, too. I didnt want to offend you. That said ``StartShutdown()`` is currently used in bitcoinrpc, main, net and test_bitcoin. GUI: StartShutdown() -> uiInterface.QueueShutdown() -> quit() for QCoreApplication (Qt event loop) -> Shutdown(NULL); in bitcoin.cpp (no exit here) -> return 0; (Bitcoin-Qt exit) NOUI: StartShutdown() -> CreateThread(Shutdown, NULL); -> Shutdown(NULL) -> exit(0); What happens if StartShutdown is called in e.g. net.cpp with your patch using the NOUI version? Perhaps you can explain to me the new flow with your patch for the NOUI version. Im not that advanced with the boost signal thing ;). Just want to ensure nothing gets broken.
457	6532199	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532199	muggenhor	as you correctly seem to have noticed nothing is changed for the GUI case (outside of the RPC code). For the NOUI case the flow is changed to: StartShutdown() -> raise QueueShutdown() signal -> CreateThread(Shutdown, NULL); -> Shutdown(NULL) -> exit(0); In addition to that, for both GUI/NOUI the RPC code now uses the QueueShutdown() signal to stop listening for new connections: QueueShutdown() signal -> for each listening socket as acceptor -> acceptor.cancel(). As for the CreateThread call. Thats registered with the QueueShutdown signal, so will get called immediately (along with other signal handlers) when the signal is raised/emitted/sent. (calling a signal is done by an immediate for-loop on all slots/handlers).
457	6532303	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532303	sipa	It does seem to simplify the shutdown code. any reason to assume things will break with this patch? Both bitcoin-qt and bitcoind seem to shutdown fine with this, via RPC stop, UI quit, or SIGINT.
457	6532382	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532382	luke-jr	basic_socket_acceptor uses [AcceptEx](http://msdn.microsoft.com/en-us/library/windows/desktop/ms737524.aspx), which is defined in mswsock
457	6532411	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6532411	muggenhor	basic_socket_acceptor is already used in mainline, so the problem should exist already. Regardless, Ive fixed it as well in my branch.
457	6533629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/6533629	Diapolo	I have no further doubts after reading the explanations above. Thanks for clarification!
456	1756458	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1756458	gavinandresen	Has this been compiled/tested with Windows/mingw?
456	1759044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1759044	NyuSan	No, it hasnt (I dont have access to a windows box right now). I can ask a friend to try, though. On Mon, Aug 8, 2011 at 8:03 PM, gavinandresen < reply@reply.github.com>wrote: > Has this been compiled/tested with Windows/mingw? >
456	1763143	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1763143	sipa	ui.cpp:1810: error: struct boost::filesystem::path has no member named c_str
456	2014978	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2014978	gavinandresen	Pulled a different patch that fixes this issue and works with both filesystem2 and filesystem3
456	2016406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2016406	NyuSan	Le Tue, 6 Sep 2011 05:27:07 -0700, gavinandresen <reply@reply.github.com> a crit : > Pulled a different patch that fixes this issue and works with both > filesystem2 and filesystem3 > Ok, thanks; due to my day-job, I didnt have time to fix that and test on windows boxes.
454	2994719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2994719	luke-jr	ACK
454	3074387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3074387	TheBlueMatt	Updated version, now with less redundant code and less potential to segfault in very rare cases.
454	3074591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3074591	TheBlueMatt	After discussion on #bitcoin-dev, no more exponential backoff and retry connections every 2 minutes.
454	3208778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3208778	gavinandresen	Is there a good reason for this to be a separate switch? I think Id prefer if we just changed the -addnode behavior to stay connected.
454	3208858	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3208858	TheBlueMatt	not really, I just always prefer to not change existing behavior, but if there is a consensus that -addnode in its current for is unnecessary, thats fine.
454	3379204	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3379204	TheBlueMatt	-addnode removed, s/keepnode/addnode/
454	3470167	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3470167	luke-jr	This needs rebasing again. Not trivial this time. :(
454	3470760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3470760	TheBlueMatt	Rebased, and it was trivial.
454	3471613	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3471613	luke-jr	No, it isnt that trivial. This still does not build.
454	3474625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3474625	TheBlueMatt	OK, theres an actually useful version.
454	3475183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3475183	luke-jr	The cleanup really doesnt belong here, but it looks fine to me... ACK on 10ba0a3 (Minor cleanup...)
454	3475226	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3475226	TheBlueMatt	Sorry, I wrote that patch while writing keepnode and its way too small to warrant its own pull request, so I just left it in here...
454	3480781	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3480781	gavinandresen	This doesnt work for me. How I tested: 3 testnet-in-a-box nodes, a/b/c listening on ports 8900,8901,8902 b -connects to a c -connects to a and also -addnodes b Test: start them all up, verify cs connections. Shutdown b. Then restart b, and see how long it takes c to reconnect. I waited a long time. I think the culprit is: Sleep(120000); // Retry every 2 minutes ... which I believe is 20 minutes, not two.
454	3484860	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3484860	TheBlueMatt	No, 120,000 is correct (http://www.wolframalpha.com/input/?i=2+minutes+to+milliseconds), also it worked fine for me... I just ran two regular nodes with -connect=0.0.0.0 and one with -addnode=127.0.0.1:8334 (the second started after the first) and 2 minutes after it first tried its connection, it connected just fine. Care to run in gdb?
454	3519231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3519231	gavinandresen	ACK-- problem with my test is elsewhere in the networking code, I cant make more than one connection from daemons running on my machine on different ports.
452	1757662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1757662	jgarzik	fixed
452	2247131	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2247131	alexwaters	The pull has become unmergeable (without conflicts), and will be closed in 15 days from this message if action is not taken. To prevent closure, kindly rebase the pull to merge cleanly with the current codebase. If a time extension is needed, please respond to this comment or contact QA@BitcoinTesting.org.
452	2465096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2465096	alexwaters	Closed pending rebase / additional commentary. The rebase label has been applied.
446	1703883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1703883	sipa	Looks safe, and a good idea; ACK
446	1704817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1704817	TheBlueMatt	Looks good to me
443	1713600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1713600	groffer	CheckBlock calls this function. Wont this cause a fork in the blockchain if the network doesnt upgrade as a whole and a transaction that runs afoul of this check is included in a block?
443	1713635	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1713635	sipa	Such a transaction should already cause the block it is included in to be invalid, as ConnectInputs will detect the duplicate use of the same prevout. This patch just causes such cases to be detected in an earlier stage, before it enters the memory pool.
443	1713684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1713684	TheBlueMatt	If a transaction with a duplicate input is in a block, the chain should be forked (or people are making money out of nothing). Also, no transactions with duplicate inputs get put in blocks...someone tried it a couple weeks ago, but the txes never ended up in blocks. Im assuming there is a check somewhere later on that prevented them from getting added to a block, though I havent done any digging on the matter. This is really to prevent such obviously invalid transactions from getting relayed.
443	1713747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1713747	groffer	Right, looks like the vSpent check in ConnectInputs takes care of it.
442	1694912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1694912	TheBlueMatt	Someone needs to test that this builds on OSX first.
442	1705061	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1705061	TheBlueMatt	Tested on OSX by b4epoche, seems fine
442	1709688	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1709688	sipa	On current head it fails with: test/transaction_tests.cpp(22): error in "RealTransaction": Transaction with duplicate txins should be invalid. *** 1 failure detected in test suite "uint160" I wonder why it sayd test suite "uint160", the failed test is in "transaction_tests".
442	1709722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1709722	TheBlueMatt	Re: it fails: yes it is supposed to, that is a bug that should be fixed (see #443 for a potential solution). Re: uint160, yea I tried to figure out why, but I cant seem to see why, maybe someone else can figure that out...In any case thats a fairly minor UI issue and isnt a regression.
442	1709845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1709845	sipa	I didnt mean to comment on the failure itself, only on the reporting thereof. Its a minor issue, but maybe it means the boost test framework isnt being used correctly.
442	1710227	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1710227	TheBlueMatt	OK, updated with better naming... Not really anything that can be done within boost test to make the output more specific, so just name the AUTO_TEST_CASE well and use BOOST_CHECK_MESSAGE instead of BOOST_CHECK
442	1711591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1711591	sipa	ACK.
442	1764336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764336	gavinandresen	Merged after rebasing onto pull #443 (commit 4e5d88 -- apologies if that causes anybody pain).
439	1693451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1693451	jgarzik	Your GetFileSize change is a regression, introducing a minor race window. If we have an open FILE*, then we may fstat via fileno. The current code implicitly does this, by working on the already-open file. Your change refers to the file by name, which may have been renamed, and may no longer refer to the already-open file.
439	1693456	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1693456	jrmithdobbs	win32 does not have a fstat() that I can find. That is why I did it this way. There doesnt seem to be a way to easily guarantee that fseek()/ftell() will give you a 64bit int. Suggestions?
439	1693480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1693480	jrmithdobbs	Also it actually doesnt add any new kind of race condition. Its only first opened a line before the call (and this is the only caller) and gets closed and reopened immediately afterwards if the file with that filename at the time is longer than the specified hardcoded value. Worst case well get old logs from a different file appended to the top of the new debug.log than was actually in the old debug.log we had opened if a user changes debug.log between open and Getfilesize call. Since the contents of debug.log are never parsed by bitcoin it doesnt add any form of attack/dos vector that isnt accomplished by just rm debug.log which you would have to already be able to perform in order to take advantage.
439	1693604	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1693604	jgarzik	Windows supports _ftelli64. The ftell approach remains superior because it avoids the aforementioned regression.
439	1693691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1693691	jrmithdobbs	There we go, race condition gone.
439	1764512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764512	gavinandresen	Seems to me this is fixing the symptom, not the disease. The disease is writing way too much to debug.log by default.
439	1768480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1768480	jrmithdobbs	I agree that the default logging level probably needs to be reworked; but, this is a problem in itself. No software should just stop logging out of the blue unless it has no space on the device its logging to.
439	2030495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2030495	jrmithdobbs	Added test instructions to description: This can be tested with: dd if=/dev/zero of=debug.log bs=$((1024 * 1024)) count=2048; tail -f debug.log & bitcoind -daemon; If logs get appended to where debug.log continues past 2GB it is working. Must be tested on a 32bit build.
439	2125834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125834	alexwaters	I have to agree that we shouldnt have a 2GB+ logfile in the first place. For the majority of people, I would think that the advantage of having verbose logs is outweighed by the inconvenience of their size. - logfile size reference - log filters - streamlining the output Im definitely not qualified to appreciate the inner-workings of the logfile. That being said, I would think a 2GB cap is sensible (intentional or not). Please correct me if Im mistaken.
439	2880506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2880506	laanwj	I agree with here. >2GB log files are a problem in itself, but it should not simply stop logging after that, that can be dangerous and lead to non-debuggable issues.
439	5016842	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5016842	sipa	This seems to have been forgotten over time. Looking at it again, it seems to remove the automatic pruning of debug.log. Is this intentional/wanted?
439	5710394	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5710394	laanwj	Hm I understood from the bug reported was that it stopped logging after 2Gb. Its good to solve that. Auto-pruning should not be disabled though, IMO, as most users dont want to be concerned with the debug.log file at all. So having it grow to fill their disk is not so nice. Pruning at startup when the file is big is a good compromise.
439	5714722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5714722	Diapolo	But processing a 2GB file should be quite time-intense and will for sure hurt user-experience!?
439	5715735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5715735	jrmithdobbs	Processing how? Its never read back in let alone "processed." My removing of the pruning was intentional. Auto-pruning logs is just bad practice. What if I need to look at something in my log from a month ago? Things log way too verbosely by default, sure, fix that dont mangle the log. Feel free to close this. It needs fixing but I have no interest in rebasing/etc.
439	5717726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5717726	Diapolo	I meant Auto-pruning a large log-file could be time-intense, no?
438	1688967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688967	jrmithdobbs	The win32 and osx makefiles probably need similar changes before the block chain gets that big.
438	1688987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1688987	jrmithdobbs	sipa informed me that block chain is split into 1GB files so not as big a deal there. This mostly just affects debug.log on long-running bitcoind instances.
438	1689090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1689090	jrmithdobbs	This breaks GetFilesize which breaks ShrinkDebugFile. Closing until I can get that sorted out.
431	1651500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651500	AbrahamJewowich	+1 I have been waiting for this capability for months and would definitely use it once merged!
431	1651880	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1651880	mikegogulski	If merged, I believe that f5f97fa would close
431	1652222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652222	gavinandresen	This was discussed to death a few months ago. 10000000.000000009 will be correctly rounded to 10000000.00000001 by bitcoin, so there is no issue. Going the other way, bitcoin always gives precise values. If you want all of your json strings to look pretty, use the latest version of simplejson that fully supports Decimal JSON values; e.g. >>> import decimal >>> import simplejson >>> simplejson.dumps(decimal.Decimal(10000000.000000009), use_decimal=True) 10000000.000000009
431	1652720	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652720	sipa	I definitely agree that if we ever make a backward-incompatible upgrade to the RPC protocol, amounts encoded as strings should be part of it. However, as each new protocol version introduces legacy for many versions to come, we should be careful about introducing new ones. Maybe the time is indeed ripe for a new RPC version. In that case, i would prefer to do a larger overhaul, including renaming the calls to be more consistent. I like the idea of putting version information in the URL, though.
431	1653897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1653897	genjix	Instead of converting the value to a string by yourself, you should use boost::lexical_cast as Im doing here,
431	1657423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1657423	cdhowie	> 10000000.000000009 will be correctly rounded to 10000000.00000001 by bitcoin, so there is no issue. There is no information in the JSON specification regarding how numbers should be stored; a JSON implementation is free to use single-precision floating point, and that would not be a bug with that implementation. I repeat, we should not be conveying financial information using an encoded numeric format that does not require implementations to use any specific amount of precision.
431	1657452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1657452	cdhowie	(Fixed conversions to double still occurring.)
431	1657960	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1657960	gavinandresen	If you can find a reasonably-widely-used JSON implementation that cannot use double-precision floating point please send me a pointer. Im strongly against adding 100 more lines of code because "there might theoretically be a bug on hardware or software that we havent actually ever encountered and may or may not exist."
431	1729841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729841	jgarzik	See I think some amount of API versioning is fair, even outside this decimal-vs-float discussion.
431	2247122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2247122	alexwaters	The pull has become unmergeable (without conflicts), and will be closed in 15 days from this message if action is not taken. To prevent closure, kindly rebase the pull to merge cleanly with the current codebase. If a time extension is needed, please respond to this comment or contact QA@BitcoinTesting.org.
431	2382481	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2382481	luke-jr	Amounts shouldnt be strings anyway, they should be Numbers.
431	2386943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2386943	cdhowie	Their type is numeric yes. If the devs are unwilling to incorporate an integral (satoshi-based) API then a less intrusive change would be to represent the numeric data as strings. In other words, in the order of best to worst: 1. Convey BTC amounts as integers, where the unit 1 is 0.00000001 BTC. 2. Convey BTC amounts as strings representing fractional numbers. 3. Convey BTC amounts as fractional numbers in a data type that is poorly-defined and imprecise enough to cause rounding errors. 3 is what we have now. Using strings is still better than what we have now, though I would strongly urge the BTC devs to adopt 1.
431	2387174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2387174	gavinandresen	Do you really want to have this argument AGAIN? Responding to your 1/2/3: 1. JSON does not have an integer type. It just has Number. 2. JSON Numbers ARE strings as they are sent across the wire. 3. The JSON Number type on EVERY IMPLEMENTATION OF JSON THAT ANYBODY CAN FIND is precise enough to represent every single possible bitcoin amount without rounding errors.
430	1650959	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1650959	jgarzik	ACK, looks pretty good to me
430	1652756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652756	sipa	ACK, with one remark: if the output buffer of the base64 decoder is 1024 bytes, it supports inputs up to 1365 character (not 512). Maybe a smaller buffer suffices?
430	1652872	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652872	JoelKatz	Yeah, a smaller buffer or a better test. I was originally going to make the caller pass it a buffer to avoid having to allocate a std:string to return and to permit it to support any length, but it didnt seem worth it since its only called once per RPC call.
430	1652938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652938	JoelKatz	I tried to amend that change without messing up the tree, but my git-fu was insufficient. If I try to revert the original patch, it conflicts in util.h, and I cant find the right way to merge the fix with the revert. And I dont want to clutter the tree with two commits, no with a commit/revert/commit.
430	1652966	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1652966	sipa	Make a new commit in which you fix whatever you want to fix. Then, run git "rebase -i upstream/master", it will show you a list of commits from current master to your HEAD. Modify the line with the fix in it to be "fixup", and possibly move it up if it should not be squashed together with the latest commit.
430	1653064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1653064	JoelKatz	Thanks. I shrunk the buffer and cleaned up some spacing/indentation issues to better match bitcoin style. I couldnt quite figure out how to get it to squash into the commit that added that code in the first place, but I think I did manage to merge it as a fixup.
430	1653349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1653349	TheBlueMatt	Looks good, though why is strRPCUser and strRPCPass defined in util and initialized in init? Could it not be defined and initialized in rpc.cpp so that it doesnt have to be yet another global?
430	1658405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1658405	gavinandresen	I agree with Matt, strRPCUser/Pass dont belong in util.h. How much of a speed-up do each of these changes get? (first rule of optimization: measure speed before and after every single change, I cant count the number of times I made a change that "must" make code faster that didnt).
430	1659993	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1659993	JoelKatz	strRPCUser/strRPCPass makes a getwork RPC request about 2% faster alone. However, the improvement is only so small because there are so many other performance disasters in that code path (once you knock those down, its about 9%). Its true that this specific optimization doesnt help the mainline code very much only because the mainlines RPC and JSON code is so poor. But those changes are coming. My version is already in my 4diff patches, just not suitable for merge. And theres also a version of the RPC fixes already as a pull request (#214).
430	1660644	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1660644	gavinandresen	Can you avoid using words like "disaster" when you mean "not optimized for what I want to use it for" ? Sorry for sounding grumpy, but Im grumpy. Adding 100+ more lines of code for a speedup that nobody but mining pool operators will notice is not a good tradeoff in my mind, because were having enough trouble making sure the code we already have works properly in all cases.
430	1661397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1661397	JoelKatz	I think the truth is somewhere between "disaster" and "not optimized for what I want to use it for". I agree that there arent that many mining pool operators, but they have a disproprtionate impact on the way the network operates because they are the most likely to choose what transactions get into blocks, which chains to extend, and so on. I think it benefits the safety and stability of the system as a whole if mining pool operators dont have to maintain a large number of patches, each with associated risk, from mainline.
430	1671777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1671777	sipa	Specific opinions regarding the different commits: * Fix UNIX-specific thread handle leak: this is a bugfix, should be merged * Optimize RPC user/pass lookups: if such a simple change can cause a 2% speedup, i have no objections to merging. I agree it doesnt belong in util but in rpc. * Faster Base64 decoder: using inline code vs. using a library is always a controversial issue, but this is simple enough imho to do internally, after some correctness tests. It doesnt follow the coding standards though, btw. * Optimize generation of hex output on getwork requests: if youre able to write a faster version for converting to Hex, would it be possible to use it as a base for replacing the current HexStr() entirely? I dont think we need several pieces of code doing the same thing.
430	1729895	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1729895	jgarzik	Merged the bug fix
430	1764410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764410	gavinandresen	RPC user/pass is a 2% speedup-- whats the speedup of the other 2 patches?
430	1778766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1778766	JoelKatz	Ill have to track down those results, but theyre greater than 2% -- the RPC user/pass cache was the smallest of the improvements. (Note that these are percentages in the specific case where youre hammering the code with getwork requests. They shouldnt make any other workloads worse though.)
430	1778951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1778951	jgarzik	Ive definitely been pushing for patches that serve the mining community. It is a numerically small set of nodes, but very impactful and important for the communal integrity of our network, IMHO. Lacking any better solution, we should look seriously at applying patchsets being universally adopted by mining pool operators.
430	1930387	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1930387	alexwaters	I was hoping this thread had to do with optimizing the load time of the GUI. On windows 7 x64 it takes a minimum of 30 seconds on my mining rig. It can take longer than a minute on my laptop, and sometimes doesnt load on either. This is a major inconvenience when you want to use Bitcoins to pay for a pita at Meze grille. Frustrating enough that people testing out the Bitcoin concept might walk away entirely. Stronger mining is null if we dont have people spending the Bitcoins. EDIT: If there is a demand for changes particular to pool operators, perhaps we can offer an alternative repo with optimizations for pooled mining? I think the further we go with the Bitcoin core, the more apparent the different needs between these two distinct groups of client-downloaders. AFAIK, some pool operators run their own optimized versions of the client. At some point it might be wise to conglomerate their efforts. Keeping a pool client and a standard client will IMHO allow for greater innovation, and less compromise. Forgive me if this is an optimization that all clients would need in order to be effective, TBH I dont really know what it does...
428	1642910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642910	gavinandresen	ACK. We need unit tests for all these edge cases....
427	1641050	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1641050	sipa	A simple "-connect=[ipv6address]" test was succesful on Ubuntu, OSX and Win7 (mingw build). Incoming connections are only tested on Ubuntu now. A test IPv6 node is running on 2a02:348:5e:5a29::1, with 16 connection slots reserved for IPv6 connections.
427	1642508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1642508	TheBlueMatt	Been discussing some alternate connection logic and anti-DDoS stuff wrt filling addr.dat on IRC, just something that needs done first.
427	2690676	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690676	T-X	Would you mind summarizing the results of your discussion back then here? Im afraid that they might get lost otherwise, as no one seems to be working on them at the moment.
427	2854262	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2854262	TheBlueMatt	Here are the IRC logs I have for that night (sorry, I dont feel like going through and actually parsing this): **** BEGIN LOGGING AT Sat Jul 23 22:53:17 2011 Jul 23 22:53:17 * Now talking on #bitcoin-dev Jul 23 22:53:17 * Topic for #bitcoin-dev is: Main: | Wiki: | Latest version: 0.3.24 | Bitcoin Development - Were here to help develop the Bitcoin system. All related discussions are welcome. | If you have a question, simply ask and wait for a reply. | Main support/discussion chan #bitcoin | Public channel logs: Jul 23 22:53:17 * Topic for #bitcoin-dev set by BlueMatt!~matt@unaffiliated/bluematt at Fri Jul 8 23:41:38 2011 Jul 23 22:53:17 * gribble gives channel operator status to BlueMatt Jul 23 22:55:35 * asuk (~asuk@178.140.168.101) has left #bitcoin-dev Jul 23 22:55:53 * asuk (~asuk@178.140.168.101) has joined #bitcoin-dev Jul 23 22:56:24 * gary2113 (~xcht@abgf165.neoplus.adsl.tpnet.pl) has joined #bitcoin-dev Jul 23 23:01:09 * asuk_ (~asuk@178.140.168.101) has joined #bitcoin-dev Jul 23 23:01:58 * asuk_ has quit (Client Quit) Jul 23 23:02:41 * wardearia has quit (Ping timeout: 240 seconds) Jul 23 23:09:05 * asuk_ (~asuk@178.140.168.101) has joined #bitcoin-dev Jul 23 23:09:14 * datagutt has quit (Quit: Computer has gone to sleep.) Jul 23 23:10:07 <devrandom> sipa: this is on win7 Jul 23 23:10:22 <devrandom> had a vm lying around Jul 23 23:10:32 <sipa> define "works" ? :) Jul 23 23:11:22 <sipa> it connects and starts downloading blocks over ipv6? Jul 23 23:11:29 <devrandom> yes Jul 23 23:11:46 <devrandom> and checked that netstat shows the ipv6 connection Jul 23 23:11:57 * sipa does happy dance and pull request Jul 23 23:12:04 <devrandom> :) Jul 23 23:12:07 <b4epoche_> great! Jul 23 23:12:39 <devrandom> sipa: do you want to try to connect to me? Jul 23 23:13:07 <sipa> maybe some logic that finds local ipv6 addresses if no ipv4 ones are available Jul 23 23:13:19 <sipa> devrandom: not now Jul 23 23:13:42 <BlueMatt> sipa: before you pull req one of the dnsseeds needs ipv6 addresses Jul 23 23:15:58 <devrandom> sipa: ok Jul 23 23:17:47 * asuk_ has quit (Quit: leaving) Jul 23 23:18:48 * wardearia (~necro@unaffiliated/necrodearia) has joined #bitcoin-dev Jul 23 23:19:27 * groffer has quit (Quit: leaving) Jul 23 23:20:13 <CIA-103> libbitcoin: genjix * r82c48a8ec63e /LICENSE: removed address. Jul 23 23:20:21 * nhodges has quit (Ping timeout: 250 seconds) Jul 23 23:21:17 * lolwat` (~lolwat@c-24-61-9-77.hsd1.ma.comcast.net) has joined #bitcoin-dev Jul 23 23:21:55 <sipa> devrandom: ok, im compiling bitcoin-ipv6 on my laptop now Jul 23 23:22:27 * senseles has quit (Ping timeout: 240 seconds) Jul 23 23:22:45 * danbri has quit (Read error: Connection timed out) Jul 23 23:23:17 * jargon has quit (Ping timeout: 246 seconds) Jul 23 23:23:32 * danbri (~danbri@ip176-48-210-87.adsl2.static.versatel.nl) has joined #bitcoin-dev Jul 23 23:24:09 * genjix (~genjix@bitcoinconsultancy.com) has left #bitcoin-dev Jul 23 23:25:53 <lolwat`> gmaxwell do you have a particular image you are fond of that can be my first upload experiment Jul 23 23:27:53 <cjdelisle> image? Jul 23 23:27:58 <cjdelisle> how about sonys keys? Jul 23 23:28:09 <jrmithdobbs> thats not pd Jul 23 23:29:13 <cjdelisle> That is a serious issue though and you will have problems, I dont care what the lawyers say, when someone announces "When you download bitcoin youre downloading pedophiles" that is going to throw a wet blanket on it for a lot of people. Jul 23 23:30:11 <CIA-103> libbitcoin: genjix * r98bd3266da00 / (10 files in 6 dirs): proactor based API for storage module. Jul 23 23:30:28 <jrmithdobbs> anyone happen to know what the unit "sm" is when refering to airplane range? Jul 23 23:31:48 <devrandom> sipa: sorry, the words PROTECTION_LEVEL are not in any of the mingw32 / mingw32-runtime headers Jul 23 23:32:24 <sipa> devrandom: i feared so... Jul 23 23:33:09 * nhodges (~r1x1us@gateway/tor-sasl/r1x1us) has joined #bitcoin-dev Jul 23 23:34:31 <jrmithdobbs> sipa: isnt he.nets tunnels all on one /32? Jul 23 23:34:39 <jrmithdobbs> so you can only connect to one person on he? Jul 23 23:34:45 <jrmithdobbs> seems bad Jul 23 23:34:45 <jrmithdobbs> ;p Jul 23 23:34:57 * pusle has quit () Jul 23 23:36:47 <devrandom> sipa: you can try hardcoding based on the numbers in the MS kb article Jul 23 23:36:53 * TheZimm has quit (Quit: Textual IRC Client: Jul 23 23:37:03 <sipa> jrmithdobbs: what is he.net ? Jul 23 23:38:31 <sipa> jrmithdobbs: ok, a tunnel broker Jul 23 23:38:36 <jrmithdobbs> not a Jul 23 23:38:38 <jrmithdobbs> *the* Jul 23 23:38:53 <jrmithdobbs> something like 60%+ of non-isp ipv6 goes through them Jul 23 23:38:55 <phantomcircuit> yeah seriously other tunnel providers are terrible Jul 23 23:39:11 <jrmithdobbs> think its more like 80%+ Jul 23 23:39:29 <sipa> ok, that warrants an exception case, i guess Jul 23 23:39:41 <jrmithdobbs> ya thats why i brought it up Jul 23 23:40:18 <phantomcircuit> 2001:470: Jul 23 23:40:21 <phantomcircuit> thats their prefix Jul 23 23:40:37 <phantomcircuit> iirc everything after that is user specific Jul 23 23:44:15 <jrmithdobbs> dont think so Jul 23 23:44:30 * viggi has quit (Read error: Connection reset by peer) Jul 23 23:44:31 <upb> that is the whole of HE.net netblock :D Jul 23 23:44:40 <upb> not only the tunnel part Jul 23 23:44:42 <phantomcircuit> hmm Jul 23 23:44:49 <phantomcircuit> 2001:470:1f05:848::2 Jul 23 23:45:08 <phantomcircuit> ive seen tunnel addresses with out 1f05 Jul 23 23:45:39 * TheZimm (~TheZimm@c-98-226-5-69.hsd1.il.comcast.net) has joined #bitcoin-dev Jul 23 23:45:54 <phantomcircuit> 2001:470:1f05: 2001:470:1f04: Jul 23 23:46:03 <phantomcircuit> the 2 sides of the tunnel Jul 23 23:46:13 <upb> yeah they give /64s and /48s out of different prefixes Jul 23 23:46:14 <phantomcircuit> so yeah i think they randomly assign you something in 2001:470: Jul 23 23:46:28 <upb> but 2001:470:: is their whole block Jul 23 23:46:34 <sipa> in 2011:740::/32 ? Jul 23 23:46:38 <upb> what im saying is, they do a lot more than only tunnels Jul 23 23:46:44 <phantomcircuit> yeah i think they give you random parts of their netblock Jul 23 23:46:55 * asuk (~asuk@178.140.168.101) has left #bitcoin-dev Jul 23 23:47:00 <sipa> so, when the address matches 2011:470::/32, ill group per /48 Jul 23 23:47:07 * asuk (~asuk@178.140.168.101) has joined #bitcoin-dev Jul 23 23:47:12 <sipa> or maybe per /40 Jul 23 23:47:33 <phantomcircuit> i can never remember my ip Jul 23 23:48:12 <phantomcircuit> er Jul 23 23:48:13 <phantomcircuit> password Jul 23 23:48:15 <Eliel> cjdelisle: is illegal data in the blockchain really a problem? I mean, every one who doesnt want that on their system can just drop the transaction from the block, only keep the hash. Jul 23 23:48:41 * MrTiggr has quit (Ping timeout: 240 seconds) Jul 23 23:48:56 * thefinn93 (~finn@c-98-246-75-245.hsd1.or.comcast.net) has joined #bitcoin-dev Jul 23 23:49:18 * MrTiggr (~MrTiggr@220-253-188-225.NSW.netspace.net.au) has joined #bitcoin-dev Jul 23 23:49:32 * viggi (~viggi@unaffiliated/viggi) has joined #bitcoin-dev Jul 23 23:49:33 <jrmithdobbs> sipa: ive got two /48s in the same /32 and 2 /64s in the same /32 (different /32 from the /48s) Jul 23 23:49:39 <jrmithdobbs> sipa: without registering more than one account Jul 23 23:50:15 <sipa> but there is only one /32 ? Jul 23 23:50:28 <jrmithdobbs> no, looks like i was wrong on that Jul 23 23:51:05 <jrmithdobbs> theres multiple /32s but they assign multiple accounts out of each Jul 23 23:51:10 <jrmithdobbs> not sure how randomized it is Jul 23 23:51:18 <sipa> im not following Jul 23 23:51:33 <jrmithdobbs> 2001:470:1f0f:9a2::/64 2001:470:b827::/48 Jul 23 23:51:41 <sipa> those are in the same /32 Jul 23 23:51:41 <jrmithdobbs> 2001:470:1f0f:a2a::/64 2001:470:bad0::/48 Jul 23 23:51:45 * thefinn93 (~finn@c-98-246-75-245.hsd1.or.comcast.net) has left #bitcoin-dev Jul 23 23:51:49 <sipa> all in the same /32 Jul 23 23:52:24 <upb> yes ffs Jul 23 23:52:25 <upb> Hurricane Electric, Inc. HURRICANE-IPV6 (NET6-2001-470-1) 2001:470:: - 2001:470:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF Jul 23 23:52:42 <sipa> upb: thanks, that concludes it :) Jul 23 23:55:10 <jrmithdobbs> lol this is a shit calculator Jul 23 23:55:11 <jrmithdobbs> 2001:470:b827:: is not a valid IPv6 or IPv4 network address. Jul 23 23:55:17 <jrmithdobbs> is too Jul 23 23:55:54 <phantomcircuit> what said that? Jul 23 23:56:00 * Prof_BiG_BanG has quit (Ping timeout: 252 seconds) Jul 23 23:56:05 <jrmithdobbs> Jul 23 23:56:06 <jrmithdobbs> lol Jul 23 23:56:07 <Dagger2> its "not usable" though; <prefix>::0 is the all-router anycast address Jul 23 23:56:19 <jrmithdobbs> Dagger2: stil valid Jul 23 23:57:29 <jrmithdobbs> Dagger2: and it says the same thing adding 1 to the end which is most def valid and usable ;p Jul 23 23:58:20 <Dagger2> clearly what it actually wants is a subnet Jul 23 23:58:53 <JFK911> im using ::0 Jul 23 23:58:56 <jrmithdobbs> Dagger2: without the /* /128 is implied Jul 23 23:59:55 <jrmithdobbs> sipa: those are all in diff /40s btw Jul 24 00:00:36 <jrmithdobbs> and under my control (and 1 more /64 and /48 could be which would also be in diff /40s ... without multiple accounts) Jul 24 00:00:51 <jrmithdobbs> so maybe /39? Jul 24 00:00:58 <Dagger2> JFK911: hence the quotes... so am I, but its *supposed* to be used by all routers on the link, or something along those lines Jul 24 00:01:05 <cjdelisle> Eliel: If you drop a transaction and you dont at least keep its inputs then you dont know that it wasnt part of a doublespending scheme. Jul 24 00:01:09 <JFK911> heh Jul 24 00:02:00 <Eliel> cjdelisle: oh yeah, you also need to mark that transactions input as spent somewhere. Jul 24 00:03:20 <WakiMiko> sipcalc is pretty good Jul 24 00:03:46 <jrmithdobbs> sipa: preventing sybil with v6 is hard Jul 24 00:04:11 <sipa> yes Jul 24 00:04:21 <jrmithdobbs> sipa: also, did you add addr.dat pruning and make all the addrs not stored in memory? Jul 24 00:04:28 <jrmithdobbs> because imho it shouldnt be merged to master until thats done Jul 24 00:05:06 <jrmithdobbs> also fix the "store every timestamp we ever receive forever in memory until we restart" thing Jul 24 00:05:27 <phantomcircuit> fuck just dump addr.dat Jul 24 00:05:28 <jrmithdobbs> or you can memory exhaust any node with a /48 Jul 24 00:05:38 * p0s has quit (Remote host closed the connection) Jul 24 00:05:45 <phantomcircuit> actually ill add timestamps to it Jul 24 00:05:47 <sipa> jrmithdobbs: good point Jul 24 00:08:17 * Spleenie_ is now known as kish` Jul 24 00:08:28 <prof7bit> in my client im currently storing the latest 2000 IP addresses (newest timestamps) on disk (not in RAM) and on restart I seed and on client restart I try random entries from this DB with very short connection timeout until it succeeds. Jul 24 00:08:35 * asuk has quit (Quit: leaving) Jul 24 00:08:38 * gary2113 has quit (Quit: Leaving) Jul 24 00:09:04 <sipa> thats probably a better scheme already Jul 24 00:09:11 <prof7bit> on estart i seed with additional ips from DNS and then use random numbers (from the seed and the db) Jul 24 00:09:16 <jrmithdobbs> you almost have to dump addr.dat completely to do ipv6 safely Jul 24 00:09:19 <jrmithdobbs> in a non-dosable way Jul 24 00:09:21 * genjix (~genjix@bitcoinconsultancy.com) has joined #bitcoin-dev Jul 24 00:09:24 <genjix> Jul 24 00:09:29 <genjix> step 2 under how it works Jul 24 00:09:33 <genjix> i think thats wrong Jul 24 00:09:53 <genjix> it goes from the *last* OP_CODESEPERATOR, not the first Jul 24 00:09:57 * sanity has quit (Ping timeout: 252 seconds) Jul 24 00:10:01 <genjix> unless im misunderstanding most recent Jul 24 00:10:20 <prof7bit> for storage I use a simple dBase 3 file with timestamp and address indexes, address is IPV6 and port Jul 24 00:10:22 <jrmithdobbs> most recent parsed Jul 24 00:10:28 <jrmithdobbs> so ya last Jul 24 00:10:28 <lolwat`> most recent when you execute OP_CHECKSIG Jul 24 00:10:34 <lolwat`> which would be the last Jul 24 00:10:35 <genjix> k, well im going to reword that. Jul 24 00:10:44 <jrmithdobbs> just add the word parsed Jul 24 00:10:45 <jrmithdobbs> ;p Jul 24 00:11:34 <genjix> ok Jul 24 00:12:38 <lolwat`> does vinced or anyone who did merged mining ever come in her Jul 24 00:12:42 <lolwat`> here Jul 24 00:13:33 <cjdelisle> AFAIK vinced did not implement merged mining Jul 24 00:13:36 * asuk (~asuk@178.140.168.101) has joined #bitcoin-dev Jul 24 00:14:08 <prof7bit> when a new address comes in then the oldest one is deleted from the db (i move the cursor to it and overwrite with new address) Jul 24 00:14:38 <prof7bit> is extremely fast. Jul 24 00:14:51 <prof7bit> although 2 indexes must update Jul 24 00:15:35 <genjix> is this wrong too? Jul 24 00:15:50 <genjix> checksum = first 4 bytes of sha256 hash Jul 24 00:15:58 <genjix> well ssl gives the shas backwards Jul 24 00:16:13 <prof7bit> maybe 2000 is even too much. in my experimemts i could connect alone from the DNS seed to 10 client in less than 10 seconds Jul 24 00:16:15 <genjix> so technically its the last 4 bytes, no? Jul 24 00:16:52 <sipa> genjix: depends on how you look at it, i guess Jul 24 00:16:55 <genjix> especially since when we talk about hashes in bitcoin we use the reversed format Jul 24 00:17:07 <genjix> i.e the 0s in blocks come at the start not the end Jul 24 00:17:12 <sipa> "first" and "last" are almost everywhere ambiguous anyway Jul 24 00:17:22 <prof7bit> first 4 as they come from openssl Jul 24 00:17:34 * amiller (~amiller@gateway/tor-sasl/socrates1024) has joined #bitcoin-dev Jul 24 00:17:49 <sacarlson> lolwat`: Im in the process of learning about merged mining Jul 24 00:18:35 <lolwat`> im trying to understand if there may be a way to do it obliviously to the miners Jul 24 00:18:57 <lolwat`> Jul 24 00:19:11 <lolwat`> merged mining as now is pretty simple Jul 24 00:19:24 <lolwat`> stick a hash of w/e you want to verify (e.g. namecoin block header) in the coinbase Jul 24 00:19:36 <sacarlson> lolwat`: it would seem to be simple but I have as yet been able to setup a proto type with it Jul 24 00:19:53 <lolwat`> it would be nice if there were a way to do it without needing to store in coinbase, where it could be stored anywhere Jul 24 00:20:01 <sipa> jrmithdobbs: if all your tunnels are in separate /40s, isnt /39s too large still as well? Jul 24 00:20:12 <sipa> jrmithdobbs: and shouldnt you use something like /56 Jul 24 00:20:18 <sipa> /36 Jul 24 00:20:34 * E-sense (~e-sense@87-126-81-126.btc-net.bg) has joined #bitcoin-dev Jul 24 00:21:39 * Incitatus (~fluantox@38.121.228.2) has joined #bitcoin-dev Jul 24 00:22:33 <sacarlson> lolwat`: Im also not sure if the added lag to publish on the parant chain would add to the cost if someone was to get a solution published before you Jul 24 00:23:03 <lolwat`> sacarlson, ? Jul 24 00:23:38 <sacarlson> lolwat`: for merge mining you pass through the proxy that must add some time but maybe very little Jul 24 00:23:53 * MrTiggr has quit (Ping timeout: 252 seconds) Jul 24 00:24:00 * MrTiggr (~MrTiggr@220-253-182-92.NSW.netspace.net.au) has joined #bitcoin-dev Jul 24 00:24:00 <lolwat`> i mean Jul 24 00:24:14 <lolwat`> that lag is totally negligible if your world is based on a 10 minute clock tick anyway Jul 24 00:25:20 <sacarlson> lolwat`: Im not sure its a race many to find the first solution so when you arive at it Im not sure how long it would be if you werent the one to have found it Jul 24 00:25:26 <cjdelisle> sacarlson: Congrats on the multicoin stuff, that is really neat work. Jul 24 00:26:10 <sacarlson> cjdelisle: Its not really much of my work its just pulled together work of others Jul 24 00:26:10 <jrmithdobbs> sipa: theyre actually in two different /33s Jul 24 00:26:17 <jrmithdobbs> sipa: (total between the 4) Jul 24 00:26:21 <jrmithdobbs> sipa: hmm Jul 24 00:26:47 * sanity (~sanity@66-90-216-120.dyn.grandenetworks.net) has joined #bitcoin-dev Jul 24 00:27:53 <lolwat`> sacarlson, I dont understand... Jul 24 00:27:56 * Teslah has quit (Ping timeout: 260 seconds) Jul 24 00:29:13 <sacarlson> lolwat`: for one thing I dont know the time lag since I dont have a working model yet. if the time is very small then it should cost nothing Jul 24 00:29:25 * Incitatus has quit (Quit: Leaving) Jul 24 00:29:30 <lolwat`> time lag for what precisely Jul 24 00:30:11 <sacarlson> lolwat`: when you come to a solution you must be the first to publish it as being the new solution correct? Jul 24 00:30:18 <prof7bit> <genjix> i.e the 0s in blocks come at the start not the end <--- endianness can be a never ending source of confusion. 0s at the start would be big endian. Jul 24 00:30:44 <jrmithdobbs> sacarlson: no Jul 24 00:30:51 <jrmithdobbs> sacarlson: lowest hash wins Jul 24 00:31:03 <prof7bit> yes Jul 24 00:31:11 <sacarlson> jrmithdobbs: oh I didnt know that Jul 24 00:31:33 <lolwat`> jrmithdobbs, where is that logic? I didnt know about any testing of the hash below if its below target Jul 24 00:31:35 <prof7bit> and the 0s are the high bytes Jul 24 00:31:42 * denisx has quit (Quit: denisx) Jul 24 00:31:46 <lolwat`> beyond if its below target * Jul 24 00:31:49 <prof7bit> and high bytes at the start is BIG endian Jul 24 00:31:59 <jrmithdobbs> lolwat`: reorg/longest chain code Jul 24 00:32:04 <sacarlson> jrmithdobbs: ya I think your right even if someone came to a new solution it would just become the next in the chain Jul 24 00:32:12 <jrmithdobbs> no Jul 24 00:32:18 * Diablo-D3 (~diablo@68.238.55.43) has joined #bitcoin-dev Jul 24 00:32:28 <jrmithdobbs> it would replace yours if it was lower or be ignored if it wasnt Jul 24 00:32:33 <jrmithdobbs> it has the same "parent" block Jul 24 00:32:36 <prof7bit> (like written in arabic numerals) little endian is higher bytes to the right (end) Jul 24 00:32:36 <jrmithdobbs> so it cant be after your block Jul 24 00:32:57 * spiky (~spiky@p4FD9AC11.dip.t-dialin.net) has joined #bitcoin-dev Jul 24 00:33:05 <prof7bit> like i said it can be a source of confusion Jul 24 00:33:22 * spiky is now known as Guest6204 Jul 24 00:33:23 <sacarlson> jrmithdobbs: yes sorry correct assuming it was a tie other wise everyone would start working on the new solution for that added chain Jul 24 00:33:51 <jrmithdobbs> sacarlson: if it was a "tie" said tie would be broken by whichever was considered the parent for the next found and broadcast Jul 24 00:33:59 <prof7bit> the bits that count lowest come first in little endian (and last in big endian) Jul 24 00:34:33 * Titeuf_87 has quit (Ping timeout: 255 seconds) Jul 24 00:34:36 <jrmithdobbs> and the odds of two independent miners "tieing" on the hash value is so astronomical to be impossible for all intents and purposes Jul 24 00:34:54 <lolwat`> jrmithdobbs, I dont see it? Reorganize in main.cpp? Jul 24 00:35:03 <sacarlson> jrmithdobbs: yes and even if you had a better solution than someone else if you delayed to broadcast they would win as why I say Im not sure what the cost of added time to broadcast would be Jul 24 00:35:13 <lolwat`> I just see the height compare Jul 24 00:35:32 <gmaxwell> cjdelisle: when you use pi, youre using child porn. Jul 24 00:35:41 <gmaxwell> (pi contains all strings) Jul 24 00:36:07 <lolwat`> gmaxwell! what would you like me to inject to test my script, I will let you pick the image (if its legal ofcourse) Jul 24 00:36:09 <jrmithdobbs> sacarlson: if you had a better solution and delayed broadcast, so long as you did not delay longer than it takes to find the NEXT solution, so no Jul 24 00:36:27 <jrmithdobbs> sacarlson: your assumptions are wrong Jul 24 00:36:34 <jrmithdobbs> lolwat`: id have to look Jul 24 00:36:52 <cjdelisle> gmaxwell: You dont need to explain to me the law and I hope I dont need to explain to you public relations. Jul 24 00:37:02 <jrmithdobbs> lolwat`: its in there somewhere. this is why there are very commonly abandoned blocks (like 1 every 24-96 hours) Jul 24 00:37:06 <prof7bit> how much bandwidth are you saving if you are transmitting the number of the starting bit and the length instead of just trasmitting it directly? Jul 24 00:37:23 <cjdelisle> The risk is that it can be used as a PR stunt because it would be technically true that you are downloading CP when you download the blockchain. Jul 24 00:37:58 * spirals is now known as spirals_away Jul 24 00:38:07 * larsivi has quit (Ping timeout: 240 seconds) Jul 24 00:38:09 * Clipse has quit (Ping timeout: 255 seconds) Jul 24 00:38:37 * Prof_BiG_BanG (big_bang@emailing9-cardata.com) has joined #bitcoin-dev Jul 24 00:38:40 <jrmithdobbs> sacarlson: in fact, it is actually in your *interest* to delay broadcast when your solution is extremely low Jul 24 00:38:46 <sacarlson> jrmithdobbs: well thats good to hear since I plan to implement it in my chains Jul 24 00:38:49 <sipa> jrmithdobbs: "lowest hash wins" -> no, all hashes that are low enough win Jul 24 00:39:08 <jrmithdobbs> sacarlson: because then you can work on the solution for the next block for a given amount of time while others waste effort on the old work Jul 24 00:39:25 <lolwat`> sipa, thats what I thought Jul 24 00:39:26 <jrmithdobbs> sipa: if two blocks with same parent with valid solutions exist the lowest hash wins, no? Jul 24 00:39:47 <sacarlson> jrmithdobbs: wow cool they have an algorithm for that if you find a better solution than is needed? Jul 24 00:39:48 <sipa> jrmithdobbs: no Jul 24 00:39:50 <gmaxwell> cjdelisle: its technically true that youre using childporn when you use pi. Its also easy to find examples of strings involuntarily loaded into other information sources like newspaper classifieds. Jul 24 00:39:58 <sipa> jrmithdobbs: the one that is seen first wins Jul 24 00:40:18 <jrmithdobbs> you sure on that? Jul 24 00:40:23 <sipa> absolutely Jul 24 00:40:34 <gmaxwell> Hes correct, Ive been incorrect on that in the past. Jul 24 00:40:38 <prof7bit> " that youre using" <-- wrong. Not *using*. Jul 24 00:40:40 <sacarlson> jrmithdobbs: wow I was right?? go figure Jul 24 00:40:49 <gmaxwell> Though by wins it means locally wins. Jul 24 00:40:51 <jrmithdobbs> first time for everything ;p Jul 24 00:40:53 <gmaxwell> Not wins forever. Jul 24 00:40:57 <jrmithdobbs> so really Jul 24 00:40:58 <sipa> there is no matric of candidate hashes being better or worse Jul 24 00:41:00 <jrmithdobbs> its first to extended wins Jul 24 00:41:06 <sipa> its just good enough or not good enough Jul 24 00:41:07 <jrmithdobbs> s/to/to get/ Jul 24 00:41:07 <lolwat`> yeah in general that would be a bad idea Jul 24 00:41:21 <lolwat`> to count "work done" by 1/hash value Jul 24 00:41:22 <gmaxwell> well, its a tradeoff of compromises. Jul 24 00:41:39 <lolwat`> because then youd have like, e.g. that dude who mined a block valid for difficulty of 35 billion Jul 24 00:41:48 <lolwat`> could wait and broadcast it a year later Jul 24 00:41:51 <gmaxwell> The way it currently works rewards better network connectivity more strongly. Jul 24 00:42:02 <sipa> lolwat`: but it is not valid for difficulty of 35 billion, because the difficilty is encoded in the block Jul 24 00:42:22 <sipa> you need to decide your own difficulty before starting to mine Jul 24 00:42:26 <jrmithdobbs> and if the difficulty gets to 35 billion the parent will need to bedifferent Jul 24 00:42:34 <lolwat`> sipa, yes I know, I mean if chain reorg was decided by the hash value and not the difficulty written there Jul 24 00:42:41 <sipa> and that difficulty, not the actual hash obtained, is the expected number of hashes done Jul 24 00:42:46 <gmaxwell> lolwat`: ... no, you wouldnt have to do that, you could prefer lowest value top among all chains of the same sum-target difficulty. Jul 24 00:43:00 <lolwat`> sipa, I am saying precisely why using the difficulty is right and using the hash itself is bad Jul 24 00:43:00 <sacarlson> lolwat`: so back to the fact that the added delay might be at some cost Jul 24 00:43:23 <lolwat`> so its pretty easy to know what the cost is Jul 24 00:43:27 <jrmithdobbs> lolwat`: if it worked like i thought it did it actually wouldnt be bad at all because longest chain still wins, your example wouldnt cause a reorg even if it would work Jul 24 00:43:28 <sipa> lolwat`: ok, then were saying the same thing :) Jul 24 00:43:33 <gmaxwell> so once once it was was extended once, it wouldnt matter any more how much below target it was. Jul 24 00:44:17 <lolwat`> jrmithdobbs, huh? it would be very bad. Imagine if the guy who solved the 35 billion difficulty block said "hey let me just hold onto this for say, a year" Jul 24 00:44:35 <jrmithdobbs> lolwat`: wouldnt matter Jul 24 00:44:55 <lolwat`> ? if you count work by 1/hash, it does matter Jul 24 00:45:27 <sipa> jrmithdobbs: it would matter Jul 24 00:45:43 <sipa> if i accidentally find a hash that is 100 times lower than expected Jul 24 00:45:52 <sipa> i can hold onto it for 100 blocks, and then publish it Jul 24 00:46:06 <lolwat`> sacarlson, say the block finding is distributed exponentially with mean 10 minutes Jul 24 00:46:08 <sipa> instantly reverting the 100 blocks found in between Jul 24 00:46:08 <sacarlson> jrmithdobbs: we already have split nets, your method would just open up the posibiltiy of more of them Jul 24 00:46:09 <jrmithdobbs> ok yes 100 blocks Jul 24 00:46:11 <jrmithdobbs> but not a year Jul 24 00:46:21 <prof7bit> how would you work the new hash of the previous plock into it? Jul 24 00:46:22 <sipa> yes, he was exxagerating, but the issue would be very real Jul 24 00:46:32 <prof7bit> block Jul 24 00:46:43 <sipa> prof7bit: not Jul 24 00:46:50 <gmaxwell> This all goes away when you only use it to tiebreak the topmost block. Jul 24 00:46:53 <lolwat`> sacarlson, and I find a block at time 0. If the "lag" is t, then the probability I get scooped is just the probability an exponential with mean 10 minutes takes value below t Jul 24 00:47:08 <sipa> gmaxwell: agree, but im not convinced its useful there Jul 24 00:47:27 * Guest6204 has quit (Remote host closed the connection) Jul 24 00:47:28 <jrmithdobbs> sacarlson: im not proposing it, it seems i misread something Jul 24 00:47:30 <gmaxwell> sipa: Well, it removes some incentives for network connectivity funnybusiness if people went along with the change. Jul 24 00:47:46 <prof7bit> isnt the hash of the previous part of the header? you cannot put your block into any other place in the chain Jul 24 00:47:56 <sacarlson> lolwat`: ya it must be very small probability and with a fast proxy it would be almost imposible Jul 24 00:48:03 <gmaxwell> sipa: e.g. right now a large miner will make slightly greater income by agressively filling everyones connections slots. Jul 24 00:48:09 <sipa> prof7bit: thats the point exactly Jul 24 00:48:19 <lolwat`> sacarlson, and for small values of t, that is roughly just t/10 minutes. So a lag of 1 second adds a 1 in 600 chance of you getting scooped Jul 24 00:48:38 <gmaxwell> If the lower value was the tiebreaker at the top of the chain then connectivity would be less of a factor. Jul 24 00:48:50 <sipa> prof7bit: if you have a very good block T that successes block S, you could revert every "real" block found after S Jul 24 00:49:06 <sacarlson> lolwat`: and the real lag will be measured in micro seconds at most Jul 24 00:49:07 <sipa> that is, if 1/hash were used as metric, which it isnt Jul 24 00:49:38 <lolwat`> er it wasnt an exaggeration at all Jul 24 00:49:42 <prof7bit> ah, now i get ot Jul 24 00:49:43 <prof7bit> it Jul 24 00:49:51 <lolwat`> think about the distribution of hashes Jul 24 00:50:18 <prof7bit> the total work of the chain up to this block, right? Jul 24 00:50:23 <lolwat`> there will be a hash for which 1/H Jul 24 00:50:34 <lolwat`> is about as big as the sum of 1/H_i for ALL previous H_i Jul 24 00:51:26 <lolwat`> in other words, every 10k blocks, you expect a hash whose value is 10k times less than it needs to be Jul 24 00:51:33 <sipa> devrandom: it seems IPV6_PROTECTION_LEVEL has existed since win xp, so i guess it should be possible to find it in headers Jul 24 00:51:43 <lolwat`> meaning that person could then hold that block for 10k more blocks in your system Jul 24 00:52:26 <lolwat`> or alternatively, about once a year someone would get a block whose hash is K times lower than the difficulty needed, where K is the number of blocks per year Jul 24 00:52:53 <lolwat`> that person could reasonably hold that block for a year, in the system you describe jrmithdobbs Jul 24 00:53:52 * genjix (~genjix@bitcoinconsultancy.com) has left #bitcoin-dev Jul 24 00:54:18 <sacarlson> lolwat`: I think jrmithdobbs has already agreed his was wrong Jul 24 00:54:22 <prof7bit> maybe also put a lower boundary on allowed solutions. would change difficulty calculations a little bit but not the general principle. Jul 24 00:54:48 <lolwat`> er ya but he said my point was an exaggeration Jul 24 00:54:50 <lolwat`> and its not at all Jul 24 00:55:21 <prof7bit> x > hash > x/2 or so Jul 24 00:56:20 <gmaxwell> In any case, while what jrmithdobbs thought it was doing has issues. Simply using sum1/target,1/topmost_hash or sum1/target,top_hash or even something crazy like sum1/target,h(top_hash*per_node_random) would not have those issues, and would reduce the race incentive. Jul 24 00:56:45 <gmaxwell> (though the last would have poor hash power concentration, which isnt great) Jul 24 00:57:06 <lolwat`> i cannot read that at all Jul 24 00:57:21 <AndyBr> ohai btw Jul 24 00:57:32 <lolwat`> sum_{i=1}^T expession(i) Jul 24 00:57:37 <jrmithdobbs> so right now Jul 24 00:58:02 * moa7 (d2305dc2@gateway/web/freenode/ip.210.48.93.194) has joined #bitcoin-dev Jul 24 00:58:06 <jrmithdobbs> it is in any non-pool-miners best interest to locate the transmitting addresses for the pools and udp flood them non-stop Jul 24 00:58:29 <gmaxwell> jrmithdobbs: even better to connect to them with black hole nodes and fill their connection slots. Jul 24 00:58:38 <gmaxwell> (_and_ flood them) Jul 24 00:58:42 <jrmithdobbs> ya even better Jul 24 00:59:24 <sacarlson> jrmithdobbs: yes and I think that has happend, thats why we need p2p mining Jul 24 00:59:35 <jrmithdobbs> p2p mining doesnt solve that Jul 24 00:59:45 <gmaxwell> p2p mining doesnt fix it either really, just changes the attack a bit. Jul 24 00:59:57 <jrmithdobbs> it solves the udp flood part, somewhat, but not the connection slot filling Jul 24 00:59:59 <sipa> and to prevent that, they would make their public nodes firewalled for incoming connections, and only do outgoing connections Jul 24 01:00:10 <sipa> which should be quite effective, i think Jul 24 01:00:33 <sipa> wont help against udp flooding, though Jul 24 01:00:50 <gmaxwell> sipa: then you just spin up thousands of fake nodes... botnets get you good /16 diversity too. Jul 24 01:01:05 <lolwat`> seems pretty easy to defend against Jul 24 01:01:17 <lolwat`> you can insert your blocks from arbitrary points in the network Jul 24 01:01:19 <gmaxwell> Miners should peer with each other to defend, but they currently dont. Jul 24 01:01:40 <lolwat`> just need to maintain streams open to several insertion points Jul 24 01:02:12 <gmaxwell> We also ought to have a special trusted addnode that reserves slots, can use another port, etc. Thats kinda been on my todo for a while. Jul 24 01:02:24 * Silverpike has quit () Jul 24 01:02:38 <lolwat`> a pool could even hand its block to its clients via some other channel Jul 24 01:02:40 * deadmause (~deadmau@212-181-171-163-no31.tbcn.telia.com) has joined #bitcoin-dev Jul 24 01:02:57 <lolwat`> if people can get work from the pool, they can get the mined block too, and then they can inject it into the network themselves Jul 24 01:03:20 * genjix (~genjix@bitcoinconsultancy.com) has joined #bitcoin-dev Jul 24 01:03:21 <jrmithdobbs> except none of the mining software actually knows anything about anything but getwork, pretty much Jul 24 01:03:30 <sipa> or we could move to a model where miners run their own nonce Jul 24 01:03:46 <gmaxwell> Or even their own node! Jul 24 01:03:47 <sipa> and just get the generation tx from the pool Jul 24 01:03:47 <gmaxwell> ;) Jul 24 01:03:54 <sacarlson> maybe some p2p clusters with one random chosen in each cluster to vpn to other clusters to strenghen? Jul 24 01:03:54 <sipa> *node Jul 24 01:04:11 <jrmithdobbs> sacarlson: udp the vpn link Jul 24 01:04:16 <jrmithdobbs> s/udp/udp flood/ Jul 24 01:04:19 <jrmithdobbs> the endpoints for it Jul 24 01:04:31 <gmaxwell> sipa: thats best, also closes of >50% attacks by pools. Jul 24 01:04:35 * Clipse (~CLIPSE@196-210-147-73.dynamic.isadsl.co.za) has joined #bitcoin-dev Jul 24 01:04:38 <gmaxwell> s/of/off/ Jul 24 01:04:41 <sipa> indeed Jul 24 01:04:42 <sacarlson> jrmithdobbs: how would they know witch link that was and there would be thousands of vpns to break Jul 24 01:05:09 <jrmithdobbs> thousands? what? Jul 24 01:05:23 <gmaxwell> sipa: they just need to send the pool the header+coin+treefragment which, if encoded efficiently isnt really much more network traffic than the current model. Jul 24 01:05:45 <sipa> gmaxwell: m0mchil is working on a protocol for that Jul 24 01:06:21 <sacarlson> say a cluster only has a group of 10 to 20 in it then pick at random someone in that group to vpn to some random point of another... Jul 24 01:06:57 * genjix (~genjix@bitcoinconsultancy.com) has left #bitcoin-dev Jul 24 01:07:15 <jrmithdobbs> sacarlson: so instead of having latency introduced by attacks introduce it on yourself for no gain? brilliant Jul 24 01:07:45 <sipa> devrandom: try again? ive hardcoded the constants Jul 24 01:07:46 <sacarlson> jrmithdobbs: I never said I was the smartest in the chain Jul 24 01:08:37 <jrmithdobbs> sacarlson: not to mention that such a system would require a global set of nodes with redudant paths and distinct upstream providers Jul 24 01:08:40 <gmaxwell> The problem with races is that its very non-linear. If you can delay someones blocks by 100ms youll increase their orphan rate for blocks in that gap to 100%. Fortunately blocks are not often found 100ms apart. :) Jul 24 01:09:04 * genjix (~genjix@bitcoinconsultancy.com) has joined #bitcoin-dev Jul 24 01:09:18 <jrmithdobbs> sacarlson: which is not something easy to do for use cases it make sense for, even ;p Jul 24 01:09:21 * MrTiggr has quit (Ping timeout: 252 seconds) Jul 24 01:09:24 <genjix> hey, where can i see some use cases for the other transaction types? Jul 24 01:09:50 * MrTiggr (~MrTiggr@220-253-181-125.NSW.netspace.net.au) has joined #bitcoin-dev Jul 24 01:10:01 <gmaxwell> genjix: Jul 24 01:10:02 <sacarlson> genjix: escrow? Jul 24 01:10:15 <devrandom> sipa: net.cpp:1759: error: expected , or ; before setsockopt Jul 24 01:10:49 <sacarlson> genjix: ya groffer I worked with him Jul 24 01:11:07 <gmaxwell> BlueMatt: Id kinda like to get forwarding for pull 319 style transactions into .4 .. so that the damn things will actually work once they are enabled. Jul 24 01:11:11 <genjix> sacarlson: super cool Jul 24 01:11:15 <sipa> devrandom: fixed Jul 24 01:11:52 * aviadbd has quit (Ping timeout: 252 seconds) Jul 24 01:11:56 <sacarlson> genjix: Im not a smart programer like him I just helped test it Jul 24 01:12:25 * deadmause has quit (Quit: deadmause) Jul 24 01:12:48 <genjix> gmaxwell: but this uses SIGHASH_ALL Jul 24 01:12:50 <genjix> ahhh oops Jul 24 01:12:53 <genjix> my bad Jul 24 01:12:57 <genjix> i mean to say Jul 24 01:13:13 <genjix> hey, where can i see some use cases for the other transaction types USING OTHER SIGHASH TYPES? Jul 24 01:13:16 <BlueMatt> gmaxwell: well I have no problem adding them to IsStandard, but that pull does a ton more...in any case why are you asking me, I dont make decisions Jul 24 01:13:16 <genjix> XD Jul 24 01:14:16 <Eliel> BlueMatt: who makes the decisions? Jul 24 01:14:26 <BlueMatt> Eliel: sipa, tcatm, jgarzik, and gavinandresen Jul 24 01:14:33 <prof7bit> there is already p2p mining: its called "solo mining" Jul 24 01:15:22 <genjix> it looks like SIGHASH_ANYONECANPAY allows for an open transaction, but that;s already possible using script Jul 24 01:15:34 <gmaxwell> BlueMatt: Because if I cant even get you to agree with me, then its probably a waste of time to argue for it. Jul 24 01:16:01 <jrmithdobbs> haha Jul 24 01:16:19 <sacarlson> genjix: Im still waiting for multi in pool multi out escrow or multi sign transactions Jul 24 01:16:37 <BlueMatt> gmaxwell: lol, well I would absolutely be in favor of adding a ton more stuff to IsStandard, but doing it in-client...maybe not yet? Jul 24 01:17:30 <BlueMatt> gmaxwell: right now Im of the opinion that adding more and more and more features just isnt what bitcoin needs, first code cleanup and libraritization, then let people add their own features via plugins or whatever Jul 24 01:17:32 <sacarlson> BlueMatt: my client already has a setting to turn on and off IsStandard Jul 24 01:17:40 <gmaxwell> well at least the escrow stuff has obvious super useful usecases, and an existing implementation. On the downside pull 349 needs to be resolved. Jul 24 01:17:47 * soap has quit (Ping timeout: 240 seconds) Jul 24 01:17:59 <BlueMatt> sacarlson: Im not talking about turn it off, Im saying add more patterns to it Jul 24 01:18:02 <sacarlson> we just need to learn how to create new type transactions Jul 24 01:18:03 <gmaxwell> sacarlson: turning off isStandard is a pretty bad idea. Jul 24 01:18:19 <jrmithdobbs> sacarlson: your client? Jul 24 01:18:24 <BlueMatt> I dont think anyone would be against adding more patterns Jul 24 01:18:30 <sacarlson> jrmithdobbs: MultiCoin Jul 24 01:18:39 <BlueMatt> if thats all a pull does, Id bet it would be pulled quick Jul 24 01:19:25 <prof7bit> do it slowly. start with a simple use case that everyone can understand and implement it in a user friendly way. Jul 24 01:19:26 * denisx (~denis@91-65-136-254-dynip.superkabel.de) has joined #bitcoin-dev Jul 24 01:19:30 <gmaxwell> Have you looked at pull 349? I guess that would be the argument against addin the multisig stuff to isstandard quite yet. Jul 24 01:19:43 <jrmithdobbs> sacarlson: link? Jul 24 01:19:44 <devrandom> sipa: + setsockopt(hListenSocket, IPPROTO_IPV6, nParameterId, (const char*)&nProtLevel, sizeof(int)); Jul 24 01:19:48 <gmaxwell> prof7bit: arguably thats what the escrow patch has down. Jul 24 01:19:49 <prof7bit> and not a ton of complicated esoteric variations Jul 24 01:19:59 <devrandom> sipa: it wants a const char* Jul 24 01:20:09 <gmaxwell> s/down/done/ Jul 24 01:20:11 <sacarlson> jrmithdobbs: Jul 24 01:20:15 <sipa> devrandom: fine :) Jul 24 01:20:19 <sipa> does it work that way? Jul 24 01:20:22 <BlueMatt> gmaxwell: yea, that should be reviewed for 0.4 as well Jul 24 01:20:37 <sipa> devrandom: i can try to connect to you, if you like :) Jul 24 01:21:04 <devrandom> sipa: just a second Jul 24 01:21:36 <sipa> devrandom: the setsockopt call on net.cpp:1731 doesnt fail? Jul 24 01:21:49 <prof7bit> once people can use this and *understand* it (and can explain it to other people in simple terms) then new more complicated variations of this theme will become obvious. Im for example still struggling to see how exactly this would work in *practise*. Jul 24 01:21:59 <sacarlson> gmaxwell: these are the tests we did so far with multisign Jul 24 01:24:05 <sacarlson> prof7bit: I can give you the poker example in words to give you an idea of a use of multi in multi out Jul 24 01:24:59 <[Tycho]> How do those multisign txes work ? Jul 24 01:25:23 <sacarlson> [Tycho]: did you read this? Jul 24 01:25:39 <devrandom> sipa: my windows vm broke... Jul 24 01:25:49 <sipa> hehe Jul 24 01:26:13 * MrTiggr has quit (Ping timeout: 252 seconds) Jul 24 01:26:13 <sipa> bbiaw Jul 24 01:26:15 <prof7bit> ive read an explanation already and I *think* I *might* have understood at least the basic idea but i have no idea how i would explain this (and why it works and how it even *can* works) to my wife for example. Jul 24 01:26:26 <devrandom> sipa: later Jul 24 01:26:47 <sacarlson> [Tycho]: Ive been buzy with other things Ill create more easy reading on escrows in the future Jul 24 01:26:53 <b4epoche_> prof7bit: "this"? Jul 24 01:27:03 * MrTiggr (~MrTiggr@220-253-188-114.NSW.netspace.net.au) has joined #bitcoin-dev Jul 24 01:27:14 <[Tycho]> sacarlson, I was curious about the redeeming process Jul 24 01:27:33 <jrmithdobbs> prof7bit: it works like escrow, both parties sign off that it is to be released as previously agreed upon Jul 24 01:27:43 <jrmithdobbs> prof7bit: dont understand what youre asking? Jul 24 01:27:44 <prof7bit> this == the more complex kinds of transactions with escrow, etc. that make heavy use of scripts Jul 24 01:28:00 <jrmithdobbs> end users dont need to understand the script impl details Jul 24 01:28:10 <[Tycho]> Its like one person "opens" the transaction, creating a new one that can be redeemed by the user ? Jul 24 01:28:34 <sacarlson> Tycale: redeem is like a vote say you have 2 parties one sends the other recieves you also have a 3rd party added to break a tie in the event of a dispute Jul 24 01:28:39 <b4epoche_> prof7bit: you own a house? Jul 24 01:28:48 <prof7bit> end users need to know what they are doning and what it means or it will look like voodoo to them and they will not accept it Jul 24 01:28:50 <Tycale> ? Jul 24 01:28:59 <prof7bit> house? Jul 24 01:29:19 <b4epoche_> if you do, youve likely been through the escrow process... Jul 24 01:29:20 <sacarlson> Tycale: or sorry [Tycho] Jul 24 01:29:32 <jrmithdobbs> prof7bit: will not accept it? what end users do you speak of that dont think just about everything computer-related is voodoo already? Jul 24 01:29:36 <b4epoche_> almost everyone goes through it with no friggin idea whats really happening Jul 24 01:29:43 <jrmithdobbs> id like to meet these mythical awesome end users Jul 24 01:29:43 <jrmithdobbs> ;p Jul 24 01:30:17 <prof7bit> b4epoche: i am talking about boitcoin. for many users even the way bitcoin works is not understood. not even remotely. Jul 24 01:30:31 <jrmithdobbs> prof7bit: and yet they use it? Jul 24 01:30:34 <b4epoche_> I know youre talking about bitcoin. Jul 24 01:30:39 <prof7bit> many dont. Jul 24 01:30:51 <sipa> i am talking about the internet. for many users even the way internet works in not understood. not even remotely. Jul 24 01:31:00 <jrmithdobbs> prof7bit: so why wouldnt "its cryptographically secured escrow" be a good enough explanation Jul 24 01:31:08 <moa7> pipes and tubes Jul 24 01:31:10 <jrmithdobbs> prof7bit: i mean, if they dont know what escrow is, sure i see your point Jul 24 01:31:12 * soap (~soap@cpe-76-181-78-156.columbus.res.rr.com) has joined #bitcoin-dev Jul 24 01:31:12 * soap has quit (Changing host) Jul 24 01:31:12 * soap (~soap@rockbox/staff/soap) has joined #bitcoin-dev Jul 24 01:31:15 <jrmithdobbs> prof7bit: but thats out of scope Jul 24 01:31:31 <sipa> you need to give people an abstraction, easy enough that they can see things working, but hiding the details Jul 24 01:31:48 <prof7bit> well, then implement it. but implement not 42 different versions of it so that nobody understands which one exactly to use and how to use it. Jul 24 01:31:53 <[Tycho]> sacarlson, so whats the workflow for redeeming ? Jul 24 01:31:56 <jrmithdobbs> sipa: ya designing a *gui* for the escrow txns is much harder than explaining it tbqh Jul 24 01:32:14 <sipa> jrmithdobbs: exactly Jul 24 01:32:15 <b4epoche_> gui must have pictures Jul 24 01:32:37 <sipa> you dont need to know the TCP protocol to put a picture on facebook Jul 24 01:32:44 <b4epoche_> a little character labeled "you", another labeled "them", etc. Jul 24 01:33:07 <sacarlson> [Tycho]: the example sesion has it, but in the future you will play with pokerth and not see how it works just put in your chips and get paid without wory of people cheating you by pulling out there funds from the pot Jul 24 01:33:32 <[Tycho]> sacarlson, I rather interested in the inner workings. Jul 24 01:33:34 * molecular (~molecular@e180073135.adsl.alicedsl.de) has joined #bitcoin-dev Jul 24 01:33:34 <denisx> jrmithdobbs: yesterday someone showed me the netatalk source on github and I thought I know this name! ;) Jul 24 01:33:52 <sacarlson> [Tycho]: well its all in the code and in help Jul 24 01:34:05 <prof7bit> if i extrapolate the bitcoin devs UI design skills and the way they think to know how the endusers might think then this will not be easy. Jul 24 01:34:07 <denisx> jrmithdobbs: do you plan to do something with this code like a fork? Jul 24 01:34:56 <prof7bit> (Im not sure how to formulate this correctly without being too offensive) Jul 24 01:35:02 <prof7bit> sorry Jul 24 01:35:18 <sipa> prof7bit: well, imho bitcoin isnt ready for most end users Jul 24 01:35:24 <prof7bit> but development of a good UI is a science in itself Jul 24 01:35:25 <b4epoche_> I think people understand prof7bit Jul 24 01:35:32 <b4epoche_> designing a good UI is /hard/ Jul 24 01:35:37 <sacarlson> jrmithdobbs: we create webskin to simplify setup of escrow transactions in a gui type maner Jul 24 01:35:43 * genjix (~genjix@bitcoinconsultancy.com) has left #bitcoin-dev Jul 24 01:36:00 <moa7> people understand money better than understand what programming does Jul 24 01:36:26 <prof7bit> and it is extremely diffcult to understand what the end user will think or expect when he tries to use the application. Jul 24 01:36:58 <sipa> i think bitcoin-qt will be a massive step in the right direction already Jul 24 01:36:59 <sacarlson> jrmithdobbs: for added support for escrow multisign we have this Jul 24 01:36:59 <b4epoche_> prof7bit: indeed years of writing exam questions has helped me a lot in that area Jul 24 01:37:16 * phatsphere has quit (Quit: Leaving) Jul 24 01:37:22 <jrmithdobbs> denisx: no, i posted that before the maintainer released it publically Jul 24 01:37:51 <jrmithdobbs> denisx: which was verifiable on the netatalk-dev mailling list archives until someone deleted my post with the link to it Jul 24 01:37:52 <prof7bit> as a programmer you can easily totally lose the connection to the user. things that seem totally obvious to you might seem completely wrong or different in the eyes of the user. Jul 24 01:38:05 <jrmithdobbs> denisx: i made a demand for code under gpl once someone distributed it Jul 24 01:38:23 <b4epoche_> prof7bit: indeed and 12 years of teaching has helped me with that ;-) Jul 24 01:38:38 <jrmithdobbs> denisx: Jul 24 01:39:12 <b4epoche_> well, maybe not helped me that much, but made me realize how hard it is Jul 24 01:39:16 <AndyBr> sup bitoin =) Jul 24 01:39:53 * Transformer (~Transform@ool-4a59e397.dyn.optonline.net) has joined #bitcoin-dev Jul 24 01:40:32 * Transformer has quit (Excess Flood) Jul 24 01:40:39 <jrmithdobbs> denisx: i have no interest in maintaining it, but, *that* exact set of source builds and *works* for 10.7s timemachine, whereas the newest commit he pushed doesnt quite it has some problems (was kind of a dick thing to do on his part, push the newest code and not a tarball of the newest working version in addition to it) Jul 24 01:42:05 <denisx> jrmithdobbs: yeah, I hope someone picks it up Jul 24 01:42:29 <prof7bit> i have spent a lot of time in my life working on a totally proprietary home-brewn not very trivial application that autometed some business processes (call it online shop but it was not a shop, it was something completely different) and I have seen how ordinary humans think and what they expect and I sometimes simply could not believe it. i also learned a lot during this time.) Jul 24 01:42:45 <denisx> and moves away from SF (the open source cemetery) Jul 24 01:43:21 <jrmithdobbs> denisx: he doesnt think anyone will, but if he abandons it someone will Jul 24 01:43:31 <jrmithdobbs> denisx: the email threads linked in that link are an interesting read ;p Jul 24 01:44:15 <jrmithdobbs> denisx: he (well his coworker with strong implications that the entire organization) maintains that since netatalk was unmaintained for 5 years it wouldnt be picked up if they dropped it Jul 24 01:44:29 <denisx> jrmithdobbs: yeah, I will do read it, Im making a german mac podcasts and can use some info to spread some news ;) Jul 24 01:44:45 * molecular has quit (Ping timeout: 255 seconds) Jul 24 01:44:49 <jrmithdobbs> denisx: ignoring the fact that the 5 years it went unmaintained were the 5 years it *was* basically a dead protocol and then apple suddenly picked it back up for timemachine, lol Jul 24 01:44:49 <devrandom> ;;later tell sipa outgoing works on XP SP2 after issuing the two "net sh" commands mentioned in the MS kb article Jul 24 01:44:49 <gribble> The operation succeeded. Jul 24 01:45:30 <denisx> for me it was never dead Jul 24 01:46:12 <denisx> works really nice at my homerouter since 10 years or so Jul 24 01:46:14 <jrmithdobbs> it should be Jul 24 01:46:19 <jrmithdobbs> its an awful protocol Jul 24 01:46:38 <jrmithdobbs> all the updates apple have made have basically made afp more and more nfs-like begging the question, why not just use nfs? Jul 24 01:47:07 * TheZimm has quit (Quit: Computer has gone to sleep.) Jul 24 01:47:26 <jrmithdobbs> if you want auth on nfs, use kerberos, they *already* running a local kdc on every mac (which is awesome btw) Jul 24 01:47:38 <Diablo-D3> lol Jul 24 01:47:39 <Diablo-D3> kerberos Jul 24 01:47:43 <Diablo-D3> a failure of a security standard Jul 24 01:47:57 <jrmithdobbs> failure only in that its not been widely adopted enough Jul 24 01:49:11 <jrmithdobbs> <3 kerberos Jul 24 01:49:19 * TheZimm (~TheZimm@c-98-226-5-69.hsd1.il.comcast.net) has joined #bitcoin-dev Jul 24 01:49:23 * davex__ (~dfriberg@ip68-96-143-149.om.om.cox.net) has joined #bitcoin-dev Jul 24 01:49:28 <Diablo-D3> jrmithdobbs: dude Jul 24 01:49:35 <b4epoche_> prof7bit: I used osCommerce to develop a POS system for my wifes shoe store that was my first real experience with watching people use a UI Jul 24 01:49:37 <Diablo-D3> when an average person cant understand how kerb works Jul 24 01:49:37 <jrmithdobbs> what? Jul 24 01:49:40 <Diablo-D3> then its a failure Jul 24 01:49:42 <b4epoche_> eye-opening Jul 24 01:49:50 <jrmithdobbs> Diablo-D3: explain how cbc works to me Jul 24 01:49:54 <jrmithdobbs> without wiki Jul 24 01:49:58 <devrandom> ;;later tell sipa the latest seems to be running fine, but I cant netcat into it from an ipv6 enabled host Jul 24 01:49:58 <gribble> The operation succeeded. Jul 24 01:50:17 <jrmithdobbs> Diablo-D3: explain des, 3des, sha, bcrypt to me Jul 24 01:50:28 <jrmithdobbs> Diablo-D3: in terms a "normal" user would understand. Jul 24 01:50:34 <Diablo-D3> jrmithdobbs: dude, do I look like wikipedia to you? look it up yourself. Jul 24 01:50:52 <jrmithdobbs> Diablo-D3: then obviously all those things are failures Jul 24 01:50:52 <Diablo-D3> and yes, it IS easy to describe how a crypt hash works Jul 24 01:50:55 <jrmithdobbs> by your logic Jul 24 01:51:01 <Diablo-D3> speedy thing goes in, speedy thing comes out. Jul 24 01:51:10 <Diablo-D3> no wait, thats a portal Jul 24 01:51:28 <jrmithdobbs> then so is kerberos, "you ask for a token with your password, other machines use your token to verify who you say you are and let you login" Jul 24 01:51:43 <Diablo-D3> jrmithdobbs: kerb is difficult for admins to setup Jul 24 01:51:47 <Diablo-D3> which is really problematic Jul 24 01:51:47 <jrmithdobbs> no its not Jul 24 01:51:54 <jrmithdobbs> incompetent ones maybe Jul 24 01:52:01 <Diablo-D3> MOST ADMINS _ARE_ INCOMPETENT Jul 24 01:52:03 <Diablo-D3> HELLO, MCFLY Jul 24 01:52:09 <jrmithdobbs> i regenned an entire realm the other day including replication in <5 minutes Jul 24 01:52:49 <jrmithdobbs> working backs is hard for incompetent admins to setup too Jul 24 01:52:53 <jrmithdobbs> therefore backups are a failure Jul 24 01:52:55 <jrmithdobbs> ... Jul 24 01:53:16 <jrmithdobbs> s/backs/backups/ Jul 24 01:53:33 <jrmithdobbs> got any more logical fallacies youd like to throw out? Jul 24 01:56:16 <prof7bit> b4epoche: it was totally home custom made, i even developed a little app framework for it (we had php3 at that time). Parts of it were used by customers and other parts were used by us and another part of it was used by an external supplier. And it was supposed to let them all work together on the customers orders and the customers could track the progress and at some point they had to react and give approval, etc. very funny Jul 24 01:56:16 <prof7bit> system. 100s of kloc. Jul 24 01:56:58 <jrmithdobbs> Diablo-D3: btw, you do realise that MSs AD auth/sso has been done via kerberos for ~10 years now Jul 24 01:57:02 <jrmithdobbs> right? Jul 24 01:57:25 <denisx> jrmithdobbs: I think your pasties in this pastie are messed up Jul 24 01:57:30 <Diablo-D3> jrmithdobbs: I havent used MS products in a serious role for about 15 years Jul 24 01:57:35 <Diablo-D3> actually, let me rephrase Jul 24 01:57:41 <Diablo-D3> I havent used them in a serious role _ever_ Jul 24 01:58:22 <jrmithdobbs> Diablo-D3: oh so because the group of incompetent admins you dislike more than the others is capable of setting up kerberos on a platform you dislike more than others its too hard to setup for incompetent admins. Jul 24 01:58:26 <jrmithdobbs> i see. Jul 24 01:58:40 <prof7bit> during these few years i aged approximately 120 years. Jul 24 01:58:51 <jrmithdobbs> denisx: ? Jul 24 01:58:56 <Diablo-D3> jrmithdobbs: um, nice strawman Jul 24 01:58:59 <prof7bit> at least this is how it felt Jul 24 01:59:09 <Diablo-D3> how does a MS product help secure an all linux cluster? Jul 24 01:59:10 <jrmithdobbs> Diablo-D3: no that was sarcasm Jul 24 01:59:15 <jrmithdobbs> Diablo-D3: yours was the strawman Jul 24 01:59:21 <jrmithdobbs> Diablo-D3: linux auths of MSs AD just fine. Jul 24 01:59:26 <jrmithdobbs> using kerberos. Jul 24 01:59:28 <Diablo-D3> so MS AD runs on linux now? Jul 24 01:59:36 <jrmithdobbs> that wasnt a requirement Jul 24 01:59:50 <Diablo-D3> all linux cluster implies even the auth server runs linux Jul 24 01:59:55 <jrmithdobbs> auth should be seperate from the cluster Jul 24 02:00:03 <jrmithdobbs> separate Jul 24 02:00:07 <prof7bit> it all boils down to how the user can understand it, everything else is almost meaningless. Jul 24 02:00:13 * freakazoid (~seanl@c-67-164-106-36.hsd1.ca.comcast.net) has joined #bitcoin-dev Jul 24 02:00:16 <Diablo-D3> jrmithdobbs: hows this, no windows in the damned building. Jul 24 02:00:36 <jrmithdobbs> hosted AD Jul 24 02:00:41 <jrmithdobbs> you suck at this game Jul 24 02:00:44 <Diablo-D3> in the entire company Jul 24 02:00:51 <jrmithdobbs> 3rd party contractor providing AD Jul 24 02:00:57 <jrmithdobbs> you suck at this game Jul 24 02:01:03 <Diablo-D3> then Id use openid and co over kerb. Jul 24 02:01:19 <jrmithdobbs> which destroys sso Jul 24 02:01:52 <Diablo-D3> not at all Jul 24 02:01:53 <denisx> jrmithdobbs: never mind, I thought some of them are in the wrong order... Jul 24 02:01:56 <jrmithdobbs> Diablo-D3: basically your argument is *you* dont understand kerberos and *you* cant implement, so its too hard ;p Jul 24 02:02:05 <Diablo-D3> openid and friends are the ultimate sso Jul 24 02:02:13 <Diablo-D3> jrmithdobbs: no, I probably could WRITE a kerb impl Jul 24 02:02:38 <lolwat`> lolwut openid and krb are totally different Jul 24 02:02:46 <jrmithdobbs> denisx: gpgmail hasnt been updated for mail.app 5.0 so some of the indenting accidentally got lost when i signed stuff Jul 24 02:02:54 <jrmithdobbs> Diablo-D3: openid doesnt provide sso Jul 24 02:03:08 <jrmithdobbs> Diablo-D3: how could you impl kerb if you dont understand what sso is? Jul 24 02:03:14 * theorb (~theorb@91.84.53.6) has joined #bitcoin-dev Jul 24 02:03:17 <Diablo-D3> jrmithdobbs: openid plus other things DO provide sso Jul 24 02:03:24 <jrmithdobbs> what other things? Jul 24 02:03:49 <Diablo-D3> oauth, for example, if you need tokens. Jul 24 02:03:57 <jrmithdobbs> afaik with openid you have to resend creds for every auth request != sso Jul 24 02:04:04 <sacarlson> how do you get listtransactions to provide more than the last 10 transactions? count=15 returns [] , does mine have a bug? Jul 24 02:04:06 <Diablo-D3> jrmithdobbs: no Jul 24 02:04:11 <Diablo-D3> openid is a sign in once tech Jul 24 02:04:31 <Diablo-D3> as long as your session exists, the sign in sticks Jul 24 02:04:40 <jrmithdobbs> oh so no session timeout enforced by the auth layer? sounds like a horrible replacement for krb Jul 24 02:04:46 * theorbtwo has quit (Ping timeout: 260 seconds) Jul 24 02:04:55 <jrmithdobbs> and settable per session by the user Jul 24 02:04:58 <Diablo-D3> jrmithdobbs: its used for websites often Jul 24 02:05:05 * theorb is now known as theorbtwo Jul 24 02:05:12 <jrmithdobbs> i know what oath/openid are, and theyre awful imho Jul 24 02:05:13 <Diablo-D3> now, yes, I do agree that web sign ons in general are screwy Jul 24 02:05:24 <sacarlson> jrmithdobbs: you can add tokens in openid sessions that add timeout Jul 24 02:05:35 <Diablo-D3> sacarlson: yeah, but the website has to kick you out first Jul 24 02:05:52 <Diablo-D3> websites that use openid typically just plop a session cookie in your browser like normal Jul 24 02:06:02 <Diablo-D3> the openid provider itself has no control there Jul 24 02:06:11 <sipa> devrandom: hmm, no incoming? Jul 24 02:06:14 <sacarlson> Diablo-D3: everytime you update the page a new token is provided I think Jul 24 02:06:19 <sipa> devrandom: is that on xp or w7? Jul 24 02:06:21 <jrmithdobbs> sacarlson: not on most sites Jul 24 02:06:21 <Diablo-D3> sacarlson: nope Jul 24 02:06:32 <Diablo-D3> there are sites that do that, but it is NOT part of openid Jul 24 02:06:33 <jrmithdobbs> sacarlson: that could be done in theory but then youd have to reauth on every page iirc Jul 24 02:06:41 <sacarlson> jrmithdobbs: I"ll have to double check mine then Jul 24 02:06:45 <jrmithdobbs> or cache creds Jul 24 02:06:48 <jrmithdobbs> which is worse Jul 24 02:07:00 <Diablo-D3> websites typically just have a use once session cookie Jul 24 02:07:05 <jrmithdobbs> openid wishes it were kerberos basically, but its not Jul 24 02:07:14 <jrmithdobbs> err oauth+openid Jul 24 02:07:15 <Diablo-D3> when it expires, you have to log in again, or get a new session cookie that the site gave you Jul 24 02:07:37 <cjdelisle> yea if it constantly changed the tabs -> fail Jul 24 02:08:01 <Diablo-D3> jrmithdobbs: well, it depends how you define "kerb usage" Jul 24 02:08:12 <Diablo-D3> most people using kerb simply arent using everything it can do Jul 24 02:08:18 <Diablo-D3> and are using it purely for the sso backend Jul 24 02:08:23 <jrmithdobbs> true Jul 24 02:08:42 <Diablo-D3> openids only flaw imo is it requires an actual web browser (ie, its meant for web sites) to login Jul 24 02:08:50 <jrmithdobbs> but it can be used for everything from auth->sso->data channel encryption->identity verification of 3rd parties Jul 24 02:08:52 <jrmithdobbs> <3 kerberos Jul 24 02:09:04 <Diablo-D3> jrmithdobbs: well, theres a small problem with that Jul 24 02:09:15 <jrmithdobbs> which is? Jul 24 02:09:17 <Diablo-D3> data channel encryption IS handled in openid+oauth land Jul 24 02:09:25 <jrmithdobbs> out of band Jul 24 02:09:32 <Diablo-D3> its a part of the stack, but not part of either of those specs Jul 24 02:09:49 <Diablo-D3> identify verification can be done with oauth, btw Jul 24 02:09:58 <Diablo-D3> actually, it can be done with SOME openid providers too Jul 24 02:10:24 <jrmithdobbs> ya thats the other problem with openid/oath is every provider is slightly different in spec-breaking ways ;p Jul 24 02:10:26 <Diablo-D3> theres at least one that, for example, offer support for shit like finger print readers and crypto dongles Jul 24 02:10:32 <Diablo-D3> not spec breaking Jul 24 02:10:37 <Diablo-D3> they just offer more choices Jul 24 02:10:55 <Diablo-D3> the website using openid doesnt NEED to know whats going on Jul 24 02:11:04 <jrmithdobbs> Diablo-D3: google has actually, several times, changed users ticket id or whatever that is their unique identifier Jul 24 02:11:09 <jrmithdobbs> not joking Jul 24 02:11:25 <jrmithdobbs> so if you only used google as a provider for some website youd lose your account because your identifier changed Jul 24 02:11:28 <jrmithdobbs> lol Jul 24 02:11:34 <Diablo-D3> jrmithdobbs: wtf Jul 24 02:11:51 <BlueMatt> damn, sudo via fingerprint swipe is sexy as hell Jul 24 02:12:03 <sacarlson> Diablo-D3: you were correct my site doesnt change the token unless the session is broken it would appear Jul 24 02:12:06 <Diablo-D3> bluematt: pam has fucking shit for everything Jul 24 02:12:12 <BlueMatt> no shit Jul 24 02:12:15 <jrmithdobbs> i really wish i was joking, because openid/oauth are better than *nothing* (but not as good as kerberos) Jul 24 02:12:27 <Diablo-D3> jrmithdobbs: wtf, that site is somewhat possibly broken Jul 24 02:12:34 <Diablo-D3> I mean, wtf google and all Jul 24 02:12:43 <Diablo-D3> but Im not using that id Jul 24 02:12:46 <jrmithdobbs> Diablo-D3: no google is broken, other providers have done it too Jul 24 02:12:57 * underscor has quit (Ping timeout: 276 seconds) Jul 24 02:13:09 <phantomcircuit> tcatm, am i seriously going to have to use mod_rewrite just to name files trades.json Jul 24 02:13:15 <Diablo-D3> what Im saying is, Im not using that for the internal id on my site Jul 24 02:13:18 <BlueMatt> now if only dmcrypt would decrypt via fingerprint scan... Jul 24 02:13:25 <jrmithdobbs> Diablo-D3: was just an example Jul 24 02:13:28 <phantomcircuit> BlueMatt, you can do that Jul 24 02:13:33 <phantomcircuit> its just silly insecure Jul 24 02:13:40 <BlueMatt> yea, I would think so Jul 24 02:13:41 <Diablo-D3> bluematt: dmcrypt doesnt use pam for auth Jul 24 02:13:50 <Diablo-D3> itd be interesting as hell if it did, though Jul 24 02:13:56 <phantomcircuit> BlueMatt, sudo via fingerprint swipe is also insecure as hell Jul 24 02:14:06 <BlueMatt> Diablo-D3: I know, I was just wishing if it could use some kind of fingerprint scan hash for key Jul 24 02:14:07 <jrmithdobbs> im working on using OTP-ish stuff for dm_crypt key storage ;p Jul 24 02:14:24 <phantomcircuit> the fingerprint is stored as a hash of some data structure, but it only results in like 12 bits of entropy Jul 24 02:14:27 <jrmithdobbs> (technically its challenge-response, but in a semi-onetime way) Jul 24 02:14:28 <Diablo-D3> jrmithdobbs: still, the problem is this Jul 24 02:14:31 <BlueMatt> phantomcircuit: well yea, someone can grab a scan of your print from a glass or something... Jul 24 02:14:35 <Diablo-D3> jrmithdobbs: I do _not_ want to deploy my own auth scheme Jul 24 02:14:38 <BlueMatt> phantomcircuit: thats it? Jul 24 02:14:46 <phantomcircuit> BlueMatt, no you can bruteforce it trivially Jul 24 02:14:49 <Diablo-D3> jrmithdobbs: its easy to code, its easy to secure from the electronic side Jul 24 02:14:52 <jrmithdobbs> Diablo-D3: internally? Jul 24 02:14:54 <BlueMatt> phantomcircuit: 2**12 sounds way too small Jul 24 02:14:58 <Diablo-D3> jrmithdobbs: yeah Jul 24 02:15:04 <jrmithdobbs> why wouldnt you deploy your own auth scheme? Jul 24 02:15:05 <phantomcircuit> BlueMatt, lol it is Jul 24 02:15:07 <Diablo-D3> jrmithdobbs: but its not actual authentication Jul 24 02:15:11 <BlueMatt> phantomcircuit: maybe that was some old model? Jul 24 02:15:40 <prof7bit> fingers can be hacked easily. Jul 24 02:15:48 <jrmithdobbs> BlueMatt: i dont trust biometric scanners, almost all of them have ended up having HORRIBLEY simple spoofing methods Jul 24 02:15:51 <BlueMatt> yea, they can get a print from something you touch... Jul 24 02:15:55 <jrmithdobbs> BlueMatt: at least, not as a lone factor Jul 24 02:15:56 <phantomcircuit> BlueMatt, my T61s builtin fingerprint swipe would result in a 64 bit "hash" of which the first 42 bits where trivially predicted Jul 24 02:16:11 <Diablo-D3> jrmithdobbs: I can have them put an email in, and then even send a click me auth url to the email, it still doesnt tell me who the people really are Jul 24 02:16:14 * senseles (senseless@112.202.74.41) has joined #bitcoin-dev Jul 24 02:16:18 <phantomcircuit> not to mention that my fingerprints where all over the thing anyways lol Jul 24 02:16:22 <BlueMatt> phantomcircuit: damn...again though, maybe that was an old
427	3540549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3540549	ollummis	The [World IPv6 Launch](http://www.worldipv6launch.org/) is coming. Ideally, Bitcoin should support IPv6 before that day.
427	3674426	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3674426	sipa	Most of the changes in this pull request are in the already-merged netbase (network stack refactor). Im working on tackling the address issue, but this pull request can be closed until then.
426	1637970	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1637970	jgarzik	Why is the user/pass cached? map access is very, very fast, so it seems unlikely that it would ever show up on a profile? Was this just a guess, or do you have any data showing a positive impact from that change?
426	1640037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1640037	JoelKatz	All of my micro-optimizations are a result of benchmarking. The map access is fast in the sense that it scales well even if there are a large number of entries in the map. It is, however, slow if the map is very small. (In fairness, my benchmark was hitting the client with massive numbers of RPC requests.)
426	1640087	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1640087	JoelKatz	Latest patches add much faster HexStr and faster Base64 decode. These changes were made based on profiling. Again, the profiled workload was large numbers of RPC requests, primarily getwork. So they primarily benefit controllers for pooled mining. (See the Bitcoin forums, several large pools are using these patches.)
426	1648315	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1648315	JoelKatz	While people who do large numbers of getwork requests are certainly minority users of the code in terms of number of installations, they have a disproportionate affect on things like which transactions wind up in the public hash chain. They will need optimizations to the RPC/JSON/getwork paths. The issue is whether those optimizations will be maintained as a fork or merged into the mainline. Thats really a code policy issue that transcends the issue of these specific patches.
426	1649107	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1649107	jgarzik	Code review issue: these commits must be redone with a useful commit message. The first line of any git commit must be a one-line summary of logical code change. Further lines, if any, elaborate and describe the change in detail. Any user using "git shortlog" will receive an incomprehensible summary: "These are a subset of my bitcoin-4diff patches have been well-tested against" That tells the user absolutely nothing about the change. Neither does "Additional optimization from 4diff." tell us anything about -what- is the optimization, and -where- in the code it occurred.
426	1649590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1649590	JoelKatz	Ahh, okay. I havent used github before. In the systems I am used to, it is the code that is pulled.
421	1644349	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644349	sipa	This will retransmit everything upon startup, and never afterwards?
421	1644505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1644505	phantomcircuit	This retransmits immediately after starting up or receiving the rpc call. And then proceeds as normal resending every 0 to 30 minutes.
421	1764774	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764774	gavinandresen	One nit to pick: Can you add -forceresendtx to the -? help output? Otherwise, looks good to me.
421	2247125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2247125	alexwaters	The pull has become unmergeable (without conflicts), and will be closed in 15 days from this message if action is not taken. To prevent closure, kindly rebase the pull to merge cleanly with the current codebase. If a time extension is needed, please respond to this comment or contact QA@BitcoinTesting.org. EDIT: Awaiting phantomcircuits clean rebased pull
421	2382495	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2382495	luke-jr	I suggest using a JSON-RPC call instead.
421	2382819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2382819	phantomcircuit	This patch includes a JSON-RPC call resendtxs which does the same thing as the cli option. I believe that I messed up this patch and included another patch Ill resubmit a clean rebased pull request... later.
421	2994753	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2994753	luke-jr	Any update/rebase on this?
421	3261764	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3261764	luke-jr	I have rebased this in my own forceresendtx branch.
421	3262136	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3262136	gavinandresen	Looking closer at this... I think it needs some reworking. + bool arg should be fForceResend according to coding conventions + I think the resendtxs RPC call should return the number of transactions re-sent + Default function arguments are no-ops if theyre put in .cpp files instead of headers, remove them. I think either the RPC call or the command-line argument is wrong; if -forceresendtx is specified, then SendMessages() will repeatedly call ResendWalletTransactions(true). If that CONSTANTLY resends, then it is a bug. If that does not constantly resend, then the RPC call will do nothing.
421	4432291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4432291	mikehearn	Why not just make this the default? Is there any downside to announcing all pending transactions on startup?
421	4455936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4455936	TheBlueMatt	It makes it clear which txes belong to the local node, if they are getting announced all at once at startup.
420	1598142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1598142	nanotube	+1
420	1766452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1766452	gavinandresen	Extending validateaddress to include this information seems like a better place to put this functionality. (if you pass one of your addresses, of course)
420	2258584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2258584	forrestv	Will do that and make a new pull request.
395	1540385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1540385	TheBlueMatt	Response: Im not on github so will post translation here Open Bitcoin - Bitcoin (), this one is right Send Bitcoins - Bitcoins () In parenthesis singular and plural word Bitcoin in case its needed
417	1576649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1576649	sgimenez	Nice! Maybe this should also be added in the UI (Generated with: *address*). Removing the return in wallet.cpp is harmless, but it has nothing to do with this issue. Better to remove it in order to prevent merge conflicts.
417	1577469	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577469	cdhowie	It is required to remove the return statement. If the rest of the function does not execute, `listReceived` wont be filled with any data, and therefore the receiving address will not be available to `ListTransactions`.
417	1579357	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1579357	sgimenez	Ok, Im confused. I misread the diff. But there is a problem with that, because when `listReceived` is filled the transaction will appear twice: once with category "generated" and once with category "received".
417	1580476	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1580476	cdhowie	Fixed, I hope. :)
417	1584173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1584173	sgimenez	In fact, generated amounts could be handled internally exactly like received amounts. Then, It would be trivial to associate them with their respective addresses and accounts in the listing (reusing existing code). In particular, this would also allow us to deal with non-standard (multiple address) generations properly. I came up with a8e6510042f2f7f951414c7da124668b30da4acd. Interestingly, this is both a code simplification and a fix for a lacking feature (almost bug). I think the "few people" you mentioned would happy with such a change, would they?
417	1638155	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1638155	cdhowie	Looks good. Ill close this one since your patch supersedes it (and this patch was always a hack anyway).
415	1593237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593237	gmaxwell	This needs RPC / CLI support. Otherwise its its a nifty feature.
415	1720839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1720839	Benares	+1 for CLI support. Otherwise a must-have feature for me.
415	1774577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1774577	coderrr	CLI support done! bitcoin listaddressgroupings bitcoin sendtoaddress &lt;bitcoinaddress&gt;[:&lt;sendfromaddress1&gt;[,&lt;sendfromaddress2&gt;[,...]]] &lt;amount&gt; [comment] [comment-to]
415	1819018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1819018	zellfaze	+1 I think this is a great change.
415	1980957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1980957	ripper234	+1
415	2247120	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2247120	alexwaters	The pull has become unmergeable (without conflicts), and will be closed in 15 days from this message if action is not taken. To prevent closure, kindly rebase the pull to merge cleanly with the current codebase. If a time extension is needed, please respond to this comment or contact QA@BitcoinTesting.org.
415	2335342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2335342	coderrr	fixed
415	2465111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2465111	alexwaters	Ill ACK immediately if this is rebased with QT, and holds up to unit test / code read-through (sorry).
415	2650112	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2650112	coderrr	finally got around to repatching this onto bitcoin-qt... probably still needs some code cleanup... will look into tests next
415	3172331	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3172331	alexgenaud	+1 Please mainline this killer feature!
415	3172746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3172746	paraipan	+1 advanced features, geek only. This patch with priv key import feature could make a good team :)
415	3186306	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3186306	finway-china	I say itll be good.
415	3189002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3189002	K1773R	+1
415	3192475	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3192475	kwukduck	+1 key feature in managing anonymity.
415	3192705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3192705	WyseNynja	+1 Im looking forward to this and being able to sweep keys
415	3196900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3196900	gavinandresen	coderr, can you write up a test plan or recruit somebody to write a test plan? What are the corner cases that might break? Does this change the way fees work at all-- if I try to send 0.5 BTC from an address that has exactly 0.5 BTC but its in a brand-new transaction (and so trigger the pay-a-fee code), what happens? Ill let laanjw approve/disapprove the GUI changes.
415	3198060	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3198060	coderrr	Is this the kind of test plan you were looking for? What the patch does is basically only allow SelectCoinsMinConf() to "see" the addresses you have selected to send from. So in the case you mention it will inform the user the transaction has failed. Same thing for any case where the total amount required is more than the sum of the addresses you have selected.
415	3199693	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3199693	simonk83	+1
415	3214027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3214027	laanwj	Ill test this soon, only just heard this was rebased to Qt.
415	3214053	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3214053	TheBlueMatt	This is not the place to be +1ing, if you want to show public support for a feature, please make a forum thread where everyone can +1. If you have some useful comment on the bug, ie "Ive compiled this/been running this and spent more than 10 minutes testing it and it behaves as expected", say it, otherwise keep it to yourself, thanks.
415	3218098	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3218098	paraipan	any place is a good place Matt, please stop preaching ppl, this feature had a forgotten thread on the forum and didnt got too much support until ppl started supporting it on git. Try to look at the good side of things ;)
415	3221664	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3221664	TheBlueMatt	No, not at all. Have you seen the forums? They are so full of crazy people and stupid comments that you cant get any work done. If its such a good feature, post your +1s on the form thread and it will be alive again. Getting people to post +1s on this thread is a waste of time and takes away from the conversation that could be happening about the actual code in question.
415	3221680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3221680	TheBlueMatt	~~Anyway, I was gonna try to test this, but when starting with a .bitcoin that just contains blk* files, all I get is~~ ~~EXCEPTION: 11DbException~~ ~~Db::exists: DB_PAGE_NOTFOUND: Requested page not found~~ Ignore this, my blockchain was corrupted.
415	3221776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3221776	TheBlueMatt	In general comments: I really dont think this belongs in mainline. Its a cool feature for those who wish to make their bitcoin usage anonymous, but by itself it does not even get close to providing anonymity. It also pushes the wrong message about bitcoin: it was designed to be, and is anonymous; and that it is great for use in illegal activity. That message should be highly avoided as it is highly detrimental to the adoption of bitcoin. This as a separate branch is cool, but it should not be in the mainline IMO. Additionally, does this work as expected if you are using a OP_EVAL address or a compressed pubkey address?
415	3222886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3222886	laanwj	On the other hand, it is clearly a very popular and much-requested feature. And please dont promote the stigma that people want anonymity only because they want to do illegal things. Its clear that in todays world there can be many reasons youd want to be anonymous, for example because of oppressive governments (China, Middle East, etc). Edit: But I agree it might be too *complicated* for the standard UI. Ive played with the idea of an "advanced mode" before. Maybe this feature is an candidate for that.
415	3223148	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3223148	TheBlueMatt	No, I know that there are many legitimate uses for anonymity that arent illegal, but that is a stigma that already exists when people view bitcoin, and pushing its anonymous properties (when its actually harder than most people realize to be anonymous with bitcoin) just furthers that stigma.
415	3223388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3223388	laanwj	Im not saying we have to advertise "anonymity" explicitly any more than we do now. It will remain an advanced feature, manually setting inputs/outputs is not for the faint-hearted. However, it is a valid use-case. And if people want to do advanced things with addresses and address linkages, and someone is contributing code for it, why not incorporate it? Also look at this thread. The guy first submitted this pull request, people were positive about it, then it lingered, he ported it Qt even. And now suddenly we should reject it in the mainline, not because of code quality concerns but because were afraid the project gets a bad name? IMO this is wrong. Either a feature needs to be rejected immediately or it should be put on the roadmap to be merged for some version.
415	3236662	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3236662	alexgenaud	For me, its not about the anonymity, but control and transparency. As it is (prior to this pull) we can only see one address from every transaction. One needs to use blockexplorer.com to have any clue what is actually going on. Further more (prior to this pull), one needs to have multiple wallets to have any separation of accounts which is more error prone and confusing. I think hiding advanced features in tabs is a nice compromise between ease and control.
415	3236971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3236971	coderrr	Ok, so Ill be cleaning up the patchs code and removing the word anonymity from it completely. Ill use Gavins suggested "coin control" wording unless someone else comes up with a better alternative.
415	3238335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3238335	kwukduck	I think its a very good idea to rename it. Gives us the functionality and prevents the bad publicity that anonymity gives according to some people :)
415	3269145	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269145	coderrr	ok guys, no more anonymity, just coin control
415	3269600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269600	luke-jr	This definitely should have lower visibility (tab-wise) than sendmessage IMO...
415	3269612	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269612	coderrr	sorry, I didnt follow that, sendmessage? tab-wise?
415	3269623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269623	luke-jr	Sorry, *sign*message. In pull #582, some people objected to having more than just the basics as tabs. This also needs rebasing. Even after merging conflicts, it doesnt compile.
415	3269629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269629	coderrr	Ah, yea I dont really care where the tab goes. Which doesnt compile? This pull request or #582?
415	3269643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269643	luke-jr	This pull request.
415	3269645	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269645	coderrr	Ah, you must mean against master (so far Ive only been keeping it rebased against the most recent release). After gavin or whoever has OKd this to be merged Ill rebase it against master.
415	3318670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3318670	TheBlueMatt	Again with the+ 1s, seriously? Anyway, has this been tested to properly mark send to ip txes as linked with their punishment equivalents, also what about op_eval?
415	3326460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326460	midnightmagic	Its getting +1s because a thread is requesting them. Regardless of its current (stylistically correct or not) form, please lets not bikeshed this into oblivion. Each of us has a style we prefer. I think everyone is nuts for not using 1TBS, for example, but this is an important feature that allows people greater control (for those who want it.) So.. +1 for potential motility, especially in light of the huge publicity surrounding all the talks at 28c3 (Kaminskys for e.g.) that whine about Bitcoin strawmen.
415	3326515	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326515	TheBlueMatt	every pull request to bitcoin is asked to not break anything or not interact negatively with existing features. Every other pull request (including ones which many would argue are much more important than this one) is subject to the same requirements. This is a cool feature for people who want to be anonymous or just have more control over their transactions, but if it breaks or acts really weird when it finds an OP_EVAL or Send-to-IP transactions it shouldnt be merged. AFAIK no one has even tested this with either, so it should wait. That isnt bikesheding, thats just wait until it is known to work. Also, the +1s are completely worthless, if this pull request is well-tested and known to work, I would think no one would have objections to it being merged, so +1s arent worth anything.
415	3326553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326553	midnightmagic	If it breaks something, fine, or if it requires testing beyond what its been tested with, fine. Im writing both to explain why you keep getting +1 and to suggest we ignore stylistic complaints about command form. github should have an upvote function. :)
415	3326591	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326591	TheBlueMatt	if any bitcoin pull request has style choices which the final pull-er doesnt agree with it wont get pulled. This pull is not special, and it should adapt to match the stylistic choices of the pull-ers. If you dont agree with those choices you can argue them, but if the developers dont agree, thats what forks are for. Also, people discussing the stylistic choices is healthy, this pull should wait on more testing imo anyway, so who cares?
415	3326792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326792	midnightmagic	What does it matter if the addresses are serially encoded in JSON-like structs or separated by commas..? Bitcoin took a huge beating at 28c3, and this would allow the biggest pseudo-complaint to be addressed. Therefore this patch has become special. Either way, I intended to put down support for this: this is my +1, minus the lack of "why." coderrr your work is VERY much appreciated, even if it doesnt soon make it into core. If I dont like patch process, fork huh.. hrm.. I guess the same could be said to Charles Hannum. Yea fair enough, point taken, and reciprocated: if you dont like my comments, dont answer them. Thats what everyone else does lol.
415	3326816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326816	laanwj	People, if you want to speed up the process for this patch please try to be constructive. Help coderr out with coding, testing, documenting and so on. Posting +1 (vote for someone else to do the work?) or arguing doesnt help.
415	3326819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3326819	coderrr	Im currently working on op_eval support
415	3610506	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3610506	torusJKL	AFAIK OP_EVAL has been withdrawn. Please do not spend time for its support.
415	3615142	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3615142	luke-jr	Probably whatever the OP_EVAL support was before, applies equally to the newer P2SH BIPs.
415	4033384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4033384	laanwj	Ive rebased this to the current master: Re: BIP16 support -- isnt this a moving target? It should certainly be able to cope with BIP16 transactions without crashing or doing weird stuff, but Im not sure that it already needs full support yet. The rest of the GUI doesnt, either.
415	4568319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4568319	dooglus	I cant get this to merge cleanly to the current master branch. Does it need rebasing again?
415	4568348	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4568348	luke-jr	Has for a while. Coderrr said maybe soon.
415	4644743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4644743	coderrr	Rebased against 0.6.0rc4. Seems to work fine with p2sh. Doesnt do anything fancy yet like link the addresses of the keys used to redeem a p2sh tx. Only operates on the p2sh address itself.
415	4647241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4647241	dooglus	Nice. I think you missed this bit: src/qt/optionsmodel.cpp: - boolOptions << "bDisplayAddresses" << "fMinimizeToTray" << "fMinimizeOnClose" << "fUseProxy" << "fUseUPnP"; + boolOptions << "bDisplayAddresses" << "bCoinControlFeatures" << "fMinimizeToTray" << "fMinimizeOnClose" << "fUseProxy" << "fUseUPnP"; so that in future the value of bCoinControlFeatures will be preserved when upgrading to the next wallet version. Also yesterday I sent a payment to myself from a single large output to lots of small new previously unused addresses, and sent the change back to the input address. In the coin control tab Im seeing all the new addresses separated from each other and the change by blank lines, suggesting theres no way of tying the together, but theyre all outputs of the same transaction. Is that a bug? I would expect all the new outputs as well as the change to be lumped in with the big group that the input was part of before this transaction.
415	4650441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4650441	dooglus	After further experimentation, it turns out that if I send coins from an address that has existing links in the coincontrol tab and explicitly send the change back to the same address, then the old linkage is lost.
415	4650470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4650470	dooglus	I also found a different bug. If you leave the "Send From" box empty in the "Send coins" tab and try to send coins, CWallet::setSendFromAddressRestriction(string addresses) is called with an empty string, boost:split makes a set of restrictions cointaining one element, the empty string, and then the this->sendFromAddressRestriction.empty() check in CWallet::SelectCoinsMinConf is false, and so no coins are acceptable as input. Something like this will fix it: - boost::split(sendFromAddressRestriction, addresses, boost::is_any_of(";,")); + if (addresses.empty()) + this->sendFromAddressRestriction.clear(); + else + boost::split(sendFromAddressRestriction, addresses, boost::is_any_of(";,")); The fact that such a bug exists suggests that this patch hasnt really been tested enough.
415	4654861	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4654861	dooglus	> After further experimentation, it turns out that if I send coins from an address > that has existing links in the coincontrol tab and explicitly send the change > back to the same address, then the old linkage is lost. This is because explicitly sending coins to an existing change address adds the change address to the address book, causing IsChange() to fail on the original output to the change address, and stopping the "group change with first in addr" code from grouping the change with the inputs. Replacing IsChange() with IsMine() fixes the problem, and also causes all "payments to self" to link inputs with outputs: // group change with first in addr, only need to group w first cuz all in addrs already grouped BOOST_FOREACH(CTxOut txout, pcoin->vout) { - if (IsChange(txout)) { + if (IsMine(txout)) { CWalletTx tx = mapWallet[pcoin->vin[0].prevout.hash]; string addr = tx.GetAddressOfTxOut(pcoin->vin[0].prevout.n);
415	4655536	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4655536	dooglus	When I click the coin control tab, the GUI freezes for over 70 seconds while the groupings are calculated. Most of the time is spent in the recursive ExpandGrouping() function which returns its results both by reference and by value. Changing its type to void speeds things up so it only takes 2.5 seconds instead of 70 seconds. Ill commit all my changes to my repository tomorrow.
415	4655961	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4655961	coderrr	hey, thanks for finding all these issues, Ill fix the optionmodel and blank sendfrom bugs. The change issue is a little more complicated. "I sent a payment to myself from a single large output to lots of small new previously unused addresses" Someone looking at the chain wouldnt be able to prove that the output addresses are controlled by the same person so it doesnt show them as linked. It only links input addresses (since the same person obviously controls them) as well as the change (which can usually be identified). So in general it tries to link things that someone else would be able to link, not what you would be able to link. If we changed the logic to be what you would be able to link, why not just link your whole wallet right off the bat? That said, the change linkage disappearing after you send to it is a legit problem.
415	4656185	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4656185	coderrr	got rid of the ExpandGroupings return too, thanks!
415	4671792	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4671792	dooglus	I rewrote the code that makes the unique groupings so it runs a lot faster. Now it takes about half a second on my wallet instead of 7 seconds and makes the code simpler to read too. Its odd - after changing the return type of ExpandGroupings to be void, the time it took dropped from 72 to 2.5 seconds, but then the next day it went back up to 7 seconds. I made a few new big transactions, but I was surprised it added such a delay. I committed my change here: Im not sure what to do with the IsDisjoint() function - its only used in wallet.cpp, and isnt really anything to do with wallets, so I made it a file local (static) function, then didnt need to declare it in the header.
415	4672062	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4672062	dooglus	has 2 more commits: 1) remove the blank line from the top of the coin control table 2) order groups in order of total balance, so most valuable groups appear first Id also like to reformat the whole patch to match the existing bitcoin code (4 space indents, etc). but that will mess up any merges you have planned. Is now a good time?
415	4678819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4678819	luke-jr	This (tested without doogluss changes) is exceedingly slow! Every time I select the Coin Control tab, I have to wait about 2 full minutes before it loads. :( Once it does load, the blank rows between groups feels pretty hackish - how hard would it be to get a thick divider of some sort instead? What is "Balance Minus Tx Fee"? Finally, I dont see any way to easily get addresses to the "Send From" line (which should probably really be *above* the destinations, as multiple rows...). That being said, it does seem to work, and not interfere with normal use if disabled. Im putting it in todays next-test build ;)
415	4678869	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4678869	dooglus	My changes make a huge difference to the speed. Its almost instantaneous with them. I removed the top blank line which I thought looked really bad. I dont know anything about Qt, but also dont like the blank lines. "Balance Minus Tx Fee" is (balance-MIN_TX_FEE), and: static const int64 MIN_TX_FEE = 50000; Id rather not see that column. To get addresses to the "Send From" line, select addresses (using ctrl-click or shift-click to select multiple addresses) then go to the Send Coins tab. It took me a while to realise that was how to do it too.
415	4678874	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4678874	luke-jr	Cool, Ill see if I can merge your changes on top of next-test
415	4679073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679073	luke-jr	Doogluss changes dont build for Win32: src/wallet.cpp:18: error: using typename outside of template src/wallet.cpp:19: error: using typename outside of template No idea why it builds on Linux, that looks totally invalid :/
415	4679171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679171	tril0byte	Trying to build v0.5.3+coderrr on debian squeeze, I get this error. Checking the qlineedit.h indicates coderrrs patch would seem to require qt4.7 and squeeze has only 4.6.4. I dont need this to be fixed, just tell me if I need to upgrade. In file included from src/qt/sendcoinsdialog.cpp:2: build/ui_sendcoinsdialog.h: In member function void Ui_SendCoinsDialog::retranslateUi(QDialog*): build/ui_sendcoinsdialog.h:167: error: class QLineEdit has no member named setPlaceholderText make: *** [build/sendcoinsdialog.o] Error 1
415	4679187	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679187	luke-jr	Wrap setPlaceholderText uses in #if QT_VERSION >= 0x040700
415	4679337	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679337	dooglus	> No idea why it builds on Linux, that looks totally invalid :/ That is odd. It builds without warning in what claims to be "gcc version 4.6.1 (Ubuntu/Linaro 4.6.1-9ubuntu3) ". Ive removed the two "typename" keywords that snuck in there so it should build for you now too.
415	4679360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679360	luke-jr	Removing the typenames seems to have fixed the problem.
415	4679481	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679481	dooglus	I copied that IsDisjoint() function from which is under this license: - it requires attribution, so I added the link to a comment above the function.
415	4679538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679538	luke-jr	That license will be a problem to merging.
415	4679589	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679589	dooglus	Then I dont know how to proceed. I could rewrite the function, but the way its written seems to be pretty optimal to me, and Id just rewrite it much like how its already written. Even if I wrote it slightly differently, wouldnt it be considered a derivative work, and so still subject to the same license?
415	4679679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679679	luke-jr	It could be. I didnt look at what the function actually does or how it works, so I (or anyone else) should be safe to rewrite it. Can you describe in English how the input(s) and output(s) are related? Alternatively, you might email the author and ask for a MIT license to contribute it to Bitcoin.
415	4679740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4679740	dooglus	I think I can rewrite the higher level function so it never needs to call IsDisjoint, and maybe make it more effecient in the process. The problem with emailing the author of that answer is that he just improved on a previous authors answer, so Id have to get agreement from at least 2 of them, maybe more. The function does this: Input two references to sets of strings, return a bool. True if the two input sets are disjoint (have no members in common). Sets are sorted, so you can iterate through them in order rather than having to compare every member of the first with every member of the second. But first give me a chance to rewrite the GetAddressGroupings function to no longer need IsDisjoint().
415	4680021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4680021	dooglus	is now safe to merge again, and faster still. The formatting is still all wrong though, relative to the rest of the Bitcoin source.
415	4687794	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4687794	dooglus	is now reformatted to match the other Bitcoin code - 4 space tabs, etc.
415	5016819	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5016819	sipa	Id like to close this request in favor of #1017.
415	5016954	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5016954	tril0byte	yes 1017 (dooglus) coin control window opens quickly and also builds on Debian squeeze.
415	5053436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5053436	coderrr	moved to #1017
412	1567659	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1567659	jgarzik	ACK
412	1570835	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1570835	TheBlueMatt	ACK, needed for 0.4
405	1562024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1562024	TheBlueMatt	ACK
403	1577483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577483	jgarzik	ACK
403	1584191	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1584191	TheBlueMatt	Looks good, ACK.
403	1584214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1584214	sgimenez	Looks good. And those CBitcoinAddress types are a lot more informative than just strings.
399	1553932	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553932	muggenhor	PS Im not entirely sure what to do with this (in function movecmd): > rpc.cpp:736:9: warning: variable nMinDepth set but not used [-Wunused-but-set-variable] The most obvious solution would be to ditch the nMinDepth variable (and its assignment) completely. If type-checking the value remains important this code: ```c int nMinDepth = 1; if (params.size() > 3) nMinDepth = params[3].get_int(); ``` could be replaced by this code: ```c if (params.size() > 3) // unused parameter, used to be nMinDepth, keep type-checking it though (void)params[3].get_int(); ```
399	1559538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559538	jgarzik	looks good, but can you please regenerate (rebase) on top of current -tip ?
399	1559760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559760	muggenhor	done
396	1547826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1547826	TheBlueMatt	Could you shorten the first line of the commitmsg so that it doesnt truncate? Other than that, looks good for pull.
396	1550537	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550537	jayschwa	Youd like it to not truncate within the GitHub interface here? c0b922f is the only commit message that is truncated for me. I can shorten this if this is what youre requesting.
396	1550571	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550571	jayschwa	Okay, I amended that last commit to make the first line shorter. Hopefully that is what you wanted and hopefully I did it correctly =)
396	1550763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1550763	TheBlueMatt	yep, that looks good, ack from here
396	1553353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1553353	sipa	ACK.
394	2394517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2394517	luke-jr	Would be better to use a library like getopt IMO.
394	3224198	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3224198	jgarzik	1) this is an unusual arrangement of command line parsing 2) it is not clear that the code is moving in the right direction ("improvement!"), but instead, winds up adding a bunch of symbols to the global namespace for little added value Closing for these reasons, as well as outdatedness.
389	1522622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1522622	sipa	This should have been fixed before indeed, its only fixed in Matts encryption branch (newenc) now. Also, its not a problem as CKeyStore::AddKey() is masked by CWallet::AddKey(), which ignores the other ones result. If we werent in -rc3 already, Id ACK.
389	1559522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559522	jgarzik	pulled wallet crypto, so, superceded
385	1571140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1571140	sipa	Can you rebase?
385	2132464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2132464	alexwaters	I have been told that this issue does not persist with the current release candidate. Closed pending test case to show leak. Sipa has referenced the following in IRC: and
383	1505027	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1505027	TheBlueMatt	ACK
381	1501161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1501161	jgarzik	DB_foo should be an enum rather than #define
381	1506623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1506623	sipa	ACK. This is not a full solution for the problem with encryption corrupting wallets, as that must be prevented even when downgrading to <0.3.24, but a way of being able to mark a wallet as "too new" is definitely needed. Id like to see this go in 0.3.24.
381	1559614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559614	gavinandresen	ACK
379	1499018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1499018	sgimenez	There is also an overflow problem with ParseMoney. Maybe this should be fixed in the same time. "10000000000" -> Parse and Format -> "10,000,000,000.00" (ok) "100000000000" -> Parse and Format -> "-84,467,440,737.09551616" (not ok) "1000000000000" -> Parse and Format -> "77,662,796,314.5224192" (not ok) etc. Of course there is this limit of ~21 MBTC, but I think its safer to prevent overflows. Who knows, someone might try to input fictive money amounts.
379	1500464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1500464	jgarzik	ACK Should this be pulled for 0.3.24?
378	1497661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497661	TheBlueMatt	Just to clear up the motivation here: why should bitcoin not refuse to load wallets that appear incompatible?
378	1562169	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1562169	TheBlueMatt	Superseded.
374	1488269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1488269	jgarzik	Not really a scalable approach. For *nix: use strerror(3) to convert error code to string For Win: "The FormatMessage function can be used to obtain the message string for the returned error."
374	1489106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1489106	TheBlueMatt	Actually, windows does have strerror, see Redone in a proper manner.
371	1486551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1486551	TheBlueMatt	Does the resulting executable actually work 100%. There were some problems which I cant recall at the moment which cause the move off of vc.
371	1487109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1487109	EricJ2190	It works fine when built without UPnP, but building without UPnP requires a slight modification to net.cpp. I am building without UPnP because I have been unable to make a successful build of MiniUPnP in Visual C++. Ill keep working on that, and let you know if I solve it.
371	1487453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1487453	EricJ2190	Good new: UPnP works fine using the prebuilt DLL. Bad news: I have been building against an old (0.3.23) copy of the source. It looks like Ill need to do a bit more to get things working with the current Git tree.
371	1487626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1487626	EricJ2190	Okay, I successfully got it to build the latest tree, with one issue: Visual C++ doesnt accept that CKeyStore::AddKey doesnt return a value. I had to add a return statement to get it to compile
368	1479956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479956	jgarzik	We should do this for hardcoded nodes as well?
368	1479957	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479957	TheBlueMatt	good point...
368	1483451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1483451	gavinandresen	Seed nodes are already ignored on testnet: if (mapAddresses.empty() && (GetTime() - nStart > 60 || fTOR) && !fTestNet)
368	1483649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1483649	TheBlueMatt	It would appear that I am blind, anyway, printf moved (I was thinking hopefully someone would do dnsseeds for testnet in the distant future, but that shouldnt mean I put the printf out of the if now).
366	1500012	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1500012	gmaxwell	Irc bootstrapping should just be phased out for these, and other reasons. Today users can already us -dnsseed to deal with this case.
366	1559567	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559567	jgarzik	Prefer to leave things as-is for now. If you -really- need to change IRC connection info -- a method that is slowly being deprecated anyway -- then you can recompile the client.
364	1468608	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468608	gavinandresen	Talk to BlueMatt about this. I think it is supposed to be the way it is.
364	1469353	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469353	TheBlueMatt	As is documented in doc/build-unix.txt: Requires miniupnpc for UPnP port mapping. It can be downloaded from UPnP support is compiled in and turned off by default. Set USE_UPNP to a different value to control this: USE_UPNP= no UPnP support, miniupnp not required; USE_UPNP=0 (the default) UPnP support turned off by default at runtime; USE_UPNP=1 UPnP support turned on by default at runtime.
364	1469462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469462	floe	Not quite correct: the original check in makefile.Unix: ifdef USE_UPNP is _always_ true, even if USE_UPNP is zero. I doubt that was the original intention, hence the patch. Florian TheBlueMatt <reply@reply.github.com> schrieb: >As is documented in doc/build-unix.txt: > >Requires miniupnpc for UPnP port mapping. It can be downloaded from >http://miniupnp.tuxfamily.org/files/. UPnP support is compiled in and >turned off by default. Set USE_UPNP to a different value to control >this: >USE_UPNP= no UPnP support, miniupnp not required; >USE_UPNP=0 (the default) UPnP support turned off by default at >runtime; >USE_UPNP=1 UPnP support turned on by default at runtime. > >-- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/364#issuecomment-1469353 -- Sent from some flat thingy without a proper keyboard.
364	1469483	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469483	TheBlueMatt	No, that is the intention, but USE_UPNP is not always defined. If you build using make -f makefile.unix USE_UPNP= ie nothing after the =, it will undefine USE_UPNP and you are fine. Please look through old bugs and two or three identical pull requests to this one.
364	1469491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1469491	floe	Argh, I just got it. Sorry for the noise. Florian TheBlueMatt <reply@reply.github.com> schrieb: >As is documented in doc/build-unix.txt: > >Requires miniupnpc for UPnP port mapping. It can be downloaded from >http://miniupnp.tuxfamily.org/files/. UPnP support is compiled in and >turned off by default. Set USE_UPNP to a different value to control >this: >USE_UPNP= no UPnP support, miniupnp not required; >USE_UPNP=0 (the default) UPnP support turned off by default at >runtime; >USE_UPNP=1 UPnP support turned on by default at runtime. > >-- >Reply to this email directly or view it on GitHub: >https://github.com/bitcoin/bitcoin/pull/364#issuecomment-1469353 -- Sent from some flat thingy without a proper keyboard.
363	1467130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1467130	gavinandresen	Nice! Thanks!
363	1498165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1498165	TheBlueMatt	Looks cool, however the -I. stuff kills MinGW building, so NACK that part.
363	1498202	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1498202	gavinandresen	Is there a standard makefile syntax for "the directory that the makefile is in" ? (it has been many years since I wrestled with makefiles....)
363	1592232	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1592232	gavinandresen	vegard: ping? Id very much like to pull this, will you have time soon to fix the mingw and undefined symbol problems?
363	1593444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593444	vegard	On 18 July 2011 03:06, gavinandresen <reply@reply.github.com> wrote: > vegard: ping? Id very much like to pull this, will you have time soon to fix the mingw and undefined symbol problems? Im not sure what to do about them. I dont have windows or mingw, and I dont see any undefined symbols here. I can try to have a look next week.
363	1593778	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593778	gavinandresen	Id suggest jumping on IRC and see if you can recruit somebody to help test/fix... (BlueMatt is very helpful).
363	1764838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764838	gavinandresen	Pulled versions of these, Matt fixed them up.
360	1460033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1460033	TheBlueMatt	This grew way to quick, so I merged it into the Crypto pull.
358	1459088	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1459088	sipa	1) ACK 2) ACK; I dont like using mapPubKeys as a check for whether a key is ours though (theres pwalletMain->HaveKey()), but for now its correct. 3) ACK 4) NAK: you change the check for whether the key belongs to a certain account, but still look it up there the next line? 5) I like accessor functions for those things, but a GetDefaultAddress should return the address corresponding to vchDefaultKey, and SetDefaultAddress should update vchDefaultKey (and push to db), imho.
358	1459684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1459684	sgimenez	Ok ive amended the commits. About 4), I assumed previously that mapPubKey contained a subset of mapAddressBook. Maybe it is (or will become) false, but anyway it is better to add the check. About 5), I hope Ive done the wanted changes. About HaveKey(), there are many other occurrences of mapPubKeys that should be replaced as well. So its probably better to leave it unchanged until a global substitution is performed.
358	1459726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1459726	sipa	mapPubKeys is not a subset of mapAddressBook; it contains reserve keys while mapAddressBook doesnt. You can assume for now that mapPubKeys does contain all our keys though, and ignore HaveKey for now.
358	1465942	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465942	sgimenez	Indeed. Reserve keys! Thank you.
358	1470739	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1470739	jrmithdobbs	Can we get a breakdown of the original problems this addresses instead of just what was done to correct them?
358	1475977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1475977	sgimenez	1) If you need a concrete appearance of the underlying problem, make some changes in your address book using the gui (current head), close the address book window, open it again. Changes are not displayed. 2) and 4) see respective links. 3) and 5) are just improvements.
358	1479327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479327	sipa	ACK.
358	1479997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1479997	TheBlueMatt	NACK - crashes when loading from empty .bitcoin - "Error to load wallet.dat"
358	1480021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1480021	TheBlueMatt	Problem first showed up in 0efc5d29a2d8922b10dcd02a1f1ad7b46258edd8, Ill let you do the rest.
358	1482389	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1482389	sgimenez	Yes a small issue with big consequences. The address name "" was generated as the default "map"ed value, and therefore it was not written to db. Note to myself, I should really keep away from languages that allow me to make such stupid mistakes :-)
358	1551132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1551132	sgimenez	Status update. 1) has been pulled. 2) and 4) are still pending fixes for outstanding bugs. Note: expect merge conflicts with recent work by sipa.
358	1571100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1571100	sipa	If 1 has been pulled, why is its commit still listed here? Can you do a rebase, removing the already-merged parts?
358	1571532	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1571532	sgimenez	Dunno, the first patch was kind of cherry-picked. Here comes the clean rebase.
358	1772568	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1772568	sgimenez	Rebased against recent changes. Removed 5) since its purpose is no so clear now.
358	3270868	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3270868	sipa	How relevant are these fixes still?
357	1450240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450240	gavinandresen	Looks good, thanks!
356	1449319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449319	josephholsten	+1 to testing
356	1449754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449754	TheBlueMatt	Nice, heres hoping someone has the time to write a ton of these.
356	1449822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449822	davout	Hooray for unit testing! what I find the easiest way of writing tests is to actually write a failing test before correcting a bug, this way you just write tests progressively and easily prevent regressions
356	1450222	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450222	gavinandresen	I forgot to thank Steve (gasteve in IRC) for the original code. Thanks Steve!
355	1447299	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1447299	gavinandresen	See I like the other pulls approach better because times in bitcoin are fuzzy-- transactions take on the time of the block that theyre included in, and will change as block-chain re-orgs happen.
355	1448338	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448338	pixelglow	How do we know which transactions belong in which block, in order for us to call listsinceblock with the correct block?
355	1448385	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448385	pixelglow	Ah ok, hes returning the block id as well. When are you integrating this?
355	1764396	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764396	gavinandresen	Consensus seems to be pull 199 is a better approach. Im going to close this.
354	1447377	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1447377	gavinandresen	This feels like the wrong level of abstraction to me. If you want this level of control, then an even lower-level interface seems like the way to go-- something like "heres a transaction, please sign it and broadcast it if it is valid (return txid if it is a valid transaction, error if not)". I also dont like all the duplicated code in CreateTransaction/CreateExactTransaction, it may make bug fixing any problems in send or supporting new transaction types like 3-party escrows harder. Finally, what is the TxIn syntax? Just txid? What happens if you point this at a send-to-self or a receive-many where you own more than one TxOut of a previous transaction?
354	1448212	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448212	pasky	Thanks for the feedback! Im not sure about your suggestion of providing a raw transaction. I aim at something that is suitable for automated use, but at the same time users can still realistically use manually. It is not clear what exactly do you mean by "heres a transaction" - would you like something like, say: { "in": [ { "prev_out": { "hash": "...", "n": "..." } } ], "out": [ { "value": ..., "address": "..." } ] } There is a couple of questions here: * Identify prev_outs by specific ns instead of account-based autoselection (answer to your last question: all txouts claimable by the given account are selected). Maybe this really is the best way to go, but then gettransaction and listtransactions output needs to include an n field too. * Switch syntax from two-object form to tx-like form. I dont see the benefit, IMO it just leads to a more baroque syntax. Im all for switching to explicit n-form for inputs, but how to integrate this with the account system then? Currently, each transaction has single strFromAccount. Should the user still specify the account and the input amount just gets subtracted from that accounts balance and its the users responsibility to sort out the account balance? I agree that the duplicated code is bad. I was a bit shy to do large changes in CreateTransaction(), but I will refactor this part of code and I agree it will make the code better. I just want to agree on the final way to select inputs first.
354	1449728	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449728	pasky	By the way, thinking things through more, now I think that sendtxfee/paytxfee should not be imposed on these transactions (our goal is still creating transaction only based on pubkeys stored in our wallet, but no extra client automagic), but creating unrelayable transactions still should not be allowed. Does that make sense? In line with that, AIUI I should check against nMinFee but not nPayFee?
354	1450672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450672	gavinandresen	When I say "heres a transaction, please sign it (if you need to) and send it" Im imagining you hand it the serialized hex version of a transaction (with all-zeros placeholders for the ECDSA signatures). Really extremely low-level. My thinking is that a very-low-level routine like that might be the path to all sorts of interesting functionality, including things like escrow transactions where some of the transaction signing is done outside the p2p network. But I havent thought about this terribly hard, and, frankly, the high priorities right now are NOT new features like this but scalability and security.
354	1451044	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1451044	pasky	Ok, I agree that such a command would open other interesting possibilities, but that is already something completely different from what I have in mind. You would not be able to use the wallet at all anymore and I am just personally not interested in figuring out how to externally fetch a key from wallet while bitcoind is running and re-implementing all the cryptography and script execution. I want to still make use of all these bitcoind facilities, just specify precise coin flow. I will do the modifications I outlined before and re-submit, you guys will see if you have time to review and merge the patch before you get your high priorities done. If not, I will be a bit sad but try to maintain my changes up-to-date against current code until they are merged.
354	2299600	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299600	gavinandresen	Closing; specifying precise coin flow just isnt a high priority. Also, new RPC commands should be discussed on the mailing list or forum.
352	1444706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1444706	TheBlueMatt	Forum thread:
352	1444717	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1444717	TheBlueMatt	Changed topupkeypool to keypoolrefill at tcatms suggestion
352	1444808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1444808	TheBlueMatt	A note for users of the previous version - Ill write a converter tomorrow that will try to convert the old encrypted wallets to this new format.
352	1450631	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450631	TheBlueMatt	TODO List: ~~Anything marked with //TODO~~ ~~s/password/passphrase/~~ ~~write better text for first encryption ie "DONT LOSE THIS PASSWORD" and such~~ ~~An option to decrypt the wallet?~~ (Decided against this one as noone seemed to care if it got implemented, if others here disagree, please respond) ~~Figure out why walletphassphrase is lagging (top up keypool?)~~
352	1451837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1451837	gavinandresen	Looks OK, I like the feature set, I havent had a chance to compile and test it.
352	1458400	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458400	jgarzik	Looks OK at first glance. Will give it an in-depth look and test RSN. One nit: mlock() can definitely fail based variable conditions such as ulimit. The code never checks for mlock failure, and seems to assume you may munlock even if mlock failed.
352	1458731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458731	TheBlueMatt	If it fails, it should continue, yes we are potentially not as secure, but we should stop just because we cant mlock(). ~~Also, since munlock() is called implicitly when we deallocate, its unnecessary, I pulled it out.~~ Oh got Im stupid, sorry, readded that.
352	1477082	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1477082	gmaxwell	I spent a couple days beating the hell out of this implementation and Matt has quickly fixed all the bugs Ive encountered. In particular Ive now sent thousands of transactions and thousands of getaddresses in an abusive testing rig which is constantly unlocking/locking/password changing/account moving, etc. and not lost any coin. Ive basically run out of obvious automated testing at this point. I am, however, unable to do GUI testing, so I hope and assume other people are beating on that. To the best of my ability to determine this is now ready for mainline and testing by a broader audience. I think that before release the wallettools probably need to be updated to support this: both as an additional validation of the implementation, but also so that there isnt a gap in recovery tools, but I dont see any reason that should block mainlining it.
352	1496369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1496369	joric	Just tried to build 499334e on win32 using mingw, works fine, except a couple of things. 1) In crypter.cpp you have to move headers.h to the very top otherwise youll get a whole bunch of "Cannot convert from const wchar_t * to _TCHAR *" (more precisely, wx.h should be included before windows.h). 2) Cancel button in the encryption dialog does not work as expected (buggy wxGetPasswordFromUser). P.S. Also note encryption cant be undone yet, so dont try it on your wallets. )
352	1496616	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1496616	joric	Just figured out if youre trying to read encrypted wallet with official client (0.3.24rc1 in my case) wallet gets destroyed and not readable by anything. Its not very nice.
352	1497101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497101	TheBlueMatt	If you try to read it with the old client, the client wont (shouldnt) touch it and just complain that it is "Unable to read wallet.dat". However, if you reopen it with this client, it should open fine. Also, thanks for the mingw heads-up, I suppose I mustve changed the header order at some point after I tested on mingw... Oh well, should be fixed now.
352	1497239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497239	joric	Well, not really. Official 0.3.23 says basically the same as 0.3.24rc1: EXCEPTION: St13runtime_error ReserveKeyFromKeyPool() : unknown key in key pool (...)bitcoin.exe in AppInit(), EXCEPTION: St13runtime_error ReserveKeyFromKeyPool() : unknown key in key pool (...)bitcoin.exe in CMyApp::OnUnhandledException(), Runtime error! After that wallet.dat becomes completely inaccesible, 499334e says "Error loading wallet.dat". If someone is interested Ive tried that only on a new wallet (with no transactions).
352	1497587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497587	TheBlueMatt	Ah, shit you are totally right, and here I was thinking the client was smarter than that...Ill make sure a fix goes into 0.3.24 so at least people can downgrade to that safely. Oh, forgot to mention, I changed master key format last night, so wallet encrypted with this previously will not load.
352	1497597	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1497597	TheBlueMatt	See #378
352	1502192	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1502192	graingert	would it be possible to encrypt the wallet with a null/default pass-phrase by default rather than leaving the wallet unencrypted?
352	1503031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1503031	TheBlueMatt	null/default passphrase is 100% identical to no encryption, if an attacker gets the wallet, they can still just dump it in their .bitcoin folder and send coins, its better to be backward compatible if users dont encrypt than just break that too for nothing.
352	1538830	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1538830	sipa	I am not sure the mlock() wrappers are correct. ((void *)(((size_t)(a)) & ((size_t)(((PAGESIZE)<<1)-1)))) seems to throw away the high bits of the address, instead of the low ones. I suggest using: mlock((void*)((size_t)a & ~(PAGESIZE - 1)), ((((size_t)a + b - 1) | (PAGESIZE - 1)) + 1) - ((size_t)a & ~(PAGESIZE - 1))); Here is a test program: #include <stdio.h> #include <stdlib.h> #include <string.h> #include <assert.h> #define PAGESIZE 4096 int my_mlock(void *a, size_t b) { void *start = (void*)((size_t)a & ~(PAGESIZE - 1)); void *stop = (void*)((((size_t)a + b - 1) | (PAGESIZE - 1)) + 1); size_t range = stop - start; assert(start <= a); assert(start+range >= (a+b)); assert((((size_t)start) & (PAGESIZE-1)) == 0); assert((((size_t)start+range) & (PAGESIZE-1)) == 0); // return mlock(start, range); return 0; } int main(void) { size_t as[] = {0x400000, 0x3FFFFF, 0x3FFF00, 0x400100}; size_t bs[] = {0,1,2,3,4,7,15,127,128,129,255,256,257,4000,4095,4096,4097,4100,4200,8000,8190,8300}; for (int na=0; na<sizeof(as)/sizeof(as[0]); na++) { for (int nb=0; nb<sizeof(bs)/sizeof(bs[0]); nb++) { my_mlock((void*)(as[na]),bs[nb]); } } return 0; }
352	1538841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1538841	sipa	Apart from the above comment: ACK.
352	1558767	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1558767	TheBlueMatt	re gavins comment "This needs a comment explaining what it is for-- "This class writes an addrIncoming entry that causes pre-0.4 clients to crash on startup if reading a private-key-encrypted wallet."" done.
352	1559342	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559342	gavinandresen	ACK, looks ready-for-prime-time to me.
352	1585661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1585661	groffer	Unit tests?
350	1442395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1442395	sgimenez	Hi, See also pull #335.
350	1442444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1442444	laanwj	hm right, seems that I did some duplicated effort :-)
350	1443780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1443780	sgimenez	Your Erase naming is more consistent with the name of other functions. SetDefaultAddress was missing. Also, I agree that code should be extracted from .h to .cpp files! Its nice to see some activity, and thanks for the (indirect) feedback! :-)
350	2299415	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299415	gavinandresen	If this is still relevant with the new QT GUI, please rebase and re-open.
350	3019433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3019433	luke-jr	For the record, this fix got merged for 0.3.24.
349	1444649	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1444649	gavinandresen	This makes me very, very nervous. I want OP_CHECKSIG unit tests before touching this.
349	1593703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593703	gmaxwell	Yea, so since Luke-jrs pool accepts non-standard transactions I thought Id suggest that he block these transactions until its fixed. Because if one is done under the old style, and then is spent and the spend validates (but wont validate under the fix) the behavior will become unfixable. Or unfixable without hacks. Luke asserted that its already unfixable: If its fixed, then at any time someone can produce either the old or the new style and the chain will irreparably split for old and new clients. Even if the new one becomes longer, the split will remain because the two interpretations of the signature are mutually exclusive. I didnt have a really good answer to this it sounds right to me. Is there any way to fix this that doesnt create a split hazard? ... other than perhaps a hack that specifies the old behavior until some sufficiently far future block number, and the new behavior after it, so that enough clients can be updated before the flag day that an intentionally triggered split isnt an issue. (and, hopefully none of the old style make it into the chain before the flag day, so that the legacy code can simply be dropped once the flag day is sufficiently buried)
349	1593760	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593760	gavinandresen	Do we need to fix this? If you want to generate valid OP_CHECKSIG transactions, why cant you just use one of the 1-75 opcodes instead of OP_PUSHDATA1/2/4? And arent ECDSA signatures always a fixed length (or is there more funky DER encoding going on...)?
349	1593808	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593808	vegard	On 18 July 2011 10:46, gmaxwell <reply@reply.github.com> wrote: > Yea, so since Luke-jrs pool accepts non-standard transactions I thought Id suggest that he block these transactions until its fixed. Because if one is done under the old style, and then is spent and the spend validates (but wont validate under the fix) the behavior will become unfixable. Or unfixable without hacks. My patch doesnt make any currently valid transactions invalid. But it does make some invalid transactions valid. This is just a compatibility issue with other clients/implementations of the scripting engine that arises from an ambiguity in the protocol. Another way to solve this is to standardise that OP_PUSHDATA1 must never push less than 76 bytes, OP_PUSHDATA2 must never push less than 256 bytes, etc.
349	1639121	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1639121	gmaxwell	This could also be addresses by making sure the new cscript object is constructed the same was as the prior one. This would require more code, but I think it would be more robust against implementation differences.
349	1715913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1715913	groffer	Wouldnt it be better to just add documentation to the effect that scripts should always use the shortest sequence for pushing data? Isnt that easier/safer than trying to change the validation rules?
349	1764363	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764363	gavinandresen	Consensus seems to be that standardizing OP_PUSHDATA1 mush never push less than 76 bytes / etc is the right way to go. Im going to close this.
345	1444798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1444798	TheBlueMatt	Can you rebase into one "Added polish translation" commit, and remove the binary mo file (as those are binary files, they have to be generated by a trusted developer)
345	1445369	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1445369	spiechu	Certainly, Ill follow your advices.
343	1434447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434447	gavinandresen	I believe this would open up a denial-of-service attack. The problem is that sending ANY response over an SSL connection starts the SSL handshake. So the attack scenario is: Attacker connects to your node (and theyre not from -rpcallowip address). Youre running -ssl=1, so start ssl handshake to return 403 response. Attacker doesnt respond... your rpc process must wait -rpctimeout seconds before proceeding. Just dropping the connection immediately prevents the attack. Being "a proper HTTP implementation" is not high on the bitcoin wish list.
343	1434727	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434727	muggenhor	Right, so what about only sending back a 403 when *not* using SSL? Im pretty sure the TCP send window on most OSes these days is enough to fit those few bytes.
343	1434816	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1434816	muggenhor	As for waiting for the timeout, the network portion of the RPC code could easily enough be rewritten to use asynchronous I/O (by means of Boost.Asios async_* functions and io_service.(?:poll|run)(?:_one)?). I was thinking of doing that anyway, as it would allow for easier IPv6 integration (i.e. only at setup time).
341	1431570	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1431570	sipa	I like this, but an munlock() call should be issued when deallocating, after clearing the memory.
341	1433336	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433336	gavinandresen	Good idea; add a munlock and rebase and looks to me like its ready to pull.
341	1433621	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433621	TheBlueMatt	Been doing similar stuff for new wallet crypter, with more stuff mlocked, but looks good to me (once munlock()d) edit: oh, I need to read, anyway, looks good to me.
341	1443378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1443378	TheBlueMatt	Because I depend on this for the new encryption branch, I went ahead and did the munlock stuff, current version is at ee286b3ced9c80c12c369ccceb21ec287f24306b
341	1559517	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559517	jgarzik	superceded
335	1409623	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409623	sgimenez	Mmm, some calls to {Set,Del}AddressBookName were wraped in a CRITICAL_BLOCK(pwalletMain->cs_mapAddressBook) and some were not. Now, all of them should be, since map operations are not guaranteed to be atomic. Correct me if Im wrong. Also, calls to CWalletDB(...).{Write,Erase}Name could be avoided in the case data would be be unmodified. Any problems with that?
335	1450633	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450633	sgimenez	Ive added contribution from laanwj in Issue #350. A rebased and cleaned series of patches is available in sgimenez:addressbookfixes branch. Should I set up a new pull request and close this one?
327	1433005	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433005	gavinandresen	I approve this pull request.
327	1438236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1438236	laanwj	Changed nInitialBlockThreshold to 114 after discussion with sipa
327	1439800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1439800	TheBlueMatt	Too late, gavin merged the old version in c774b1697690c3f94ccd79c5de660b6050ac6409, why is this still open?
326	1393549	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1393549	gavinandresen	How can we test this to make sure it makes connectivity better instead of the same or worse?
326	1393601	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1393601	jrmithdobbs	Im not sure how to test it well, but it makes sense. Preferring nodes that just happen to be in the same irc channel we are is always going to leave a large chunk of good connectable nodes out of the list of possible outbound connections and could eventually lead to island networks in some cases.
326	1393625	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1393625	gmaxwell	Ive been running it on a node for a week after I observed that it was only had outbound connections to hosts in the same IRC channel. It has two now. It doesnt completely fix the behavior. Because IRC updates the addr.nTime and the time since then is used to control the retry interval it makes nodes much more likely to connect within the channel they are in. But at least with this patch they wont have a zero chance (after the first connection). One piece of evidence of this patchs probable safety is that this check also doesnt run for nodes which have IRC disabled, and isnt applied when there is only one connection. Also, the significant majority of nodes listed on IRC (which would get included by this check) are not listening already. So the fact that this check may cause a few more long unreachable nodes to be tried shouldnt be harmful. More needs to be done wrt. pruning addr.dat, excluding non-listening nodes, connection rotation, etc. If IRC is retained by default (I dont know what the core devs plans are for that) then Ill go ahead and submit patches for multi-join (listening nodes should join two channels) and periodic channel hop (every n-hours switch to another channel), both of which I have working but didnt bother cleaning up for submission because I didnt expect bitcoin to keep IRC on by default for long.
326	1394084	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1394084	gmaxwell	Er. github lost the last comment I wrote. Im closing this for now because I also want to fix another issue at the same time where the client can get stuck unable to make new outgoing connections, as Im concerned that it may be worse in the no IRC case (and after this patch). I think whats happening there is that once all remaining nodes have last tried greater than the minimum used in the score, that the ranking becomes completely stationary and it only ever tries one node (until some lucky IRC activity perturbs the order). Its going to take me a day to to collect data from an instrumented node to confirm I understand that bug, and a day to confirm that my fix is correct. So I suppose this should wait until then. Sorry for the premature request.
324	1433019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433019	gavinandresen	What is this for? Im about to start working on the headers only branch that will break this (because not every node will store every transaction).
324	1467735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1467735	forrestv	This is for providing a way for RPC clients to check the status of transactions. Its mostly useful for mining pool servers - to check whether a tx has been put into a block, and so whether to include it and txs depending on it in the block being mined.
324	1467742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1467742	forrestv	Usage example: My p2pool software - :P
324	1468182	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468182	TheBlueMatt	Im not a big fan of this, RPC is getting really huge and we keep adding more and more features to it. I wouldnt mind it being so big if all the UIs were using something more standard, ie a libbitcoin-style thing, and I prefer to get something like that up before we keep merging more and more rpc calls.
324	2299403	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2299403	gavinandresen	Closing this; please propose/discuss new RPC commands on the bitcoin mailing list or the forums.
319	1403240	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1403240	gavinandresen	Should be possible to implement this much more cleanly using the MULTISIG opcodes. Also, what do escrow transactions look like in the GUI?
319	1408254	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1408254	groffer	> Should be possible to implement this much more cleanly using the MULTISIG > opcodes. I overlooked that MULTISIG allows for less signatures than keys. I will go ahead and rewrite the script. > Also, what do escrow transactions look like in the GUI? My plan is to make the display look reasonable, but not provide a GUI for initiating escrow. Escrow requires communicating with another party. The API allows for an external escrow UI to be implemented and sounds to me like a better solution than hardcoding into the client. What are your thoughts?
319	1408451	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1408451	davout	I personnally dont feel this should go into the main client implementation, but in some sort of extension instead
319	1426150	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1426150	gmaxwell	Davout, care to explain why? Without support in the main client implementation we couldnt expect these transactions to be relayed or mined by most miners. Also an external implementation would require apis for importing/exporting transactions, and wouldnt e.g. have access to the wallet keys and address book. Seems ugly to me. The api/cli presented in this patch is nice (well, the redeem needs to also support sendmany redemptions). Obviously a GUI for this would take a bit more work and might reasonably wait until there are some examples of the functionality being used to inform the design.
319	1433736	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433736	TheBlueMatt	I would like to see some rethinking of IsStandard, but IMO that is quite a way down the road. I would like to see the codebase generally cleaned a ton before that ever happens.
319	1464945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1464945	sacarlson	I modified zamgos to support and help document sendescrow and redeemescrow and also incorporated the changes into MultiCoin so that people can start learning how to start using escrow services in the furture. MultiCoins escrow features have now been tested on testnet and weedsnet and will also be supported on beertokensnet. I hope soon we will start to see escrow on bitcoin mainnet. I will also support any changes in the escrow API format if needed.
319	1465679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1465679	davout	just my personal opinion, it doesnt matter that much, and consensus seems to go the other way :) +1
319	1472447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1472447	groffer	Changed: - Rebased on latest head - Renamed all instances of "escrow" to "multisign" because this is not really escrow in the traditional sense - Switched to CHECKMULTISIG which did not clean things up that much because of the need to check hash160s - Added unit tests - Fixed some unit testing issues with the makefile. No need to compile with GUI, add all the object files and ensure that we get the correct main(). - looks very interesting
319	1472505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1472505	groffer	Oh, I found a bug in CHECKMULTISIG. It drops one too many items from the stack, so I had to push a dummy value to work around that.
319	1496716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1496716	sacarlson	Todays tests with me and groffer on his bitcoin branch for multisign transactions were a success on commit d260515fba3ee09841701e854eeba7f419c006d6 to see detailed IRC session of tests see I also merged this with my bitcoin branch MultiCoin for further testing and updated my branch of bitcoin-webskin to include the new features.
319	1646729	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1646729	gmaxwell	It would be nice if redeem worked even when you had non of the required keys, so someone could request payment from an escrow which they cant sign for by forming a txn and sending it around to people to sign. This would also make it easier for escrow parties who keep their escrow keys offline, as they could start the escrow release process from a host with the blockchain but gets signed by offline hosts.
319	1714884	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1714884	groffer	- good point, and actually it already works this way. If you have none of the keys, it will create a tx without any signatures. To increase visibility into the signature collection process, the latest commit adds the list of addresses that have signed the tx to the output of the RPC call. The latest commit also refactors the script Solver function so it can be used to check more complex scripts that include repeated segments. multisign now uses this facility to perform exact script matching. This prevents an attacker from fooling the user into thinking a tx is protected when it is put fully under the control of the attacker by a maliciously crafted script.
319	1714888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1714888	groffer	Also added some unit tests for script.cpp.
319	1864017	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1864017	gavinandresen	Can you write up a description of what the values in the TxIn are, and what operations are being done to them in the TxOut to redeem? My puny brain is having trouble figuring out what the ROLL SIZE NOT OVER HASH.. is accomplishing. Looking at: ... the TxIn is: 0 pubkey1 pubkey2 2 sig1 sig2 0 ... and the TxOut is: 3 OP_ROLL OP_DUP 2 OP_GREATERTHANOREQUAL OP_VERIFY 3 OP_ROLL OP_SIZE OP_NOT OP_OVER OP_HASH160 80677c5392220db736455533477d0bc2fba65502 OP_EQUAL OP_BOOLOR OP_VERIFY 3 OP_ROLL OP_SIZE OP_NOT OP_OVER OP_HASH160 02d7aa2e76d9066fb2b3c41ff8839a5c81bdca19 OP_EQUAL OP_BOOLOR OP_VERIFY 3 OP_ROLL OP_SIZE OP_NOT OP_OVER OP_HASH160 10039ce4fdb5d4ee56148fe3935b9bfbbe4ecc89 OP_EQUAL OP_BOOLOR OP_VERIFY 3 OP_CHECKMULTISIG
319	1872219	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1872219	groffer	Theres a bit more operand stack detail in comments on line 1575, and a writeup below. This is a 2 party out of 3 spend, with one party not participating. The scriptSig (TxIn) is (reading from right to left): OP_0 (to work around a bug in OP_CHECKMULTISIG), then two participating signatures, then the number of signatures, followed by the two participating pubkeys, then an empty operand holding place for the third pubkey that is not participating in this spend. The scriptPubKey (TxOut) is (reading from left to right): 3 OP_ROLL OP_DUP // move the number of signatures to the top of the stack, and duplicate it 2 OP_GREATERTHANOREQUAL OP_VERIFY // Make sure the number of signatures is greater than the voting threshold // In the section below we want to check that the pubkey is either present and hashes to the address we expect // OR that it is missing and an empty operand holds its place 3 OP_ROLL // move the next pubkey to the top of the stack OP_SIZE OP_NOT // check if the pubkey is just a placeholder OP_OVER OP_HASH160 80677c5 OP_EQUAL // check if the pubkey hashes as expected OP_BOOLOR OP_VERIFY // the pubkey should either be a placeholder or hash as expected // Same for second participant 3 OP_ROLL OP_SIZE OP_NOT OP_OVER OP_HASH160 02d7aa2 OP_EQUAL OP_BOOLOR OP_VERIFY // Same for third participant 3 OP_ROLL OP_SIZE OP_NOT OP_OVER OP_HASH160 10039ce OP_EQUAL OP_BOOLOR OP_VERIFY 3 OP_CHECKMULTISIG // Check the signatures Note: we do a OP_SIZE OP_NOT to check if a pubkey is a placeholder. If we did OP_0 OP_NE, it would fail because pubkeys cannot be cast to bignums. Ill be happy to cover this in more detail where needed.
319	1880395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880395	gavinandresen	Unless Im grossly misunderstanding CHECKMULTISIG, the simplest form of a 2-of-3 CHECKMULTISIG would be: TxIn: sig1 sig2 TxOut: 2 pub1 pub2 pub3 3 CHECKMULTISIG Ive been working on schemes to hash the public keys so that people can use shorter bitcoin addresses...
319	1880594	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1880594	gavinandresen	groffer: appreciate comments on:
319	1881328	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881328	sipa	An alternative way for handling N-out-of-M multisig with addresses, without CHECKMULTISIG at all: scriptSig: * for each pubkey/signature that is provided: [signature] [pubkey] * for each pubkey/signature that is missing: OP_0 OP_0 So for 2-out-of-3, with the second one missing: * [signature3] [pubkey3] * OP_0 OP_0 * [signature1] [pubkey1] scriptPubKey: * for each of the M addresses: * OP_HASH160 [hash160] OP_EQUAL, (check if pubkey matches address) * OP_IF OP_CHECKSIG (put validness of sig on top of stack) * OP_ELSE OP_DROP OP_0 (skip signature, and put 0 on top of stack) * OP_ENDIF * for all but the first address: OP_FROMALTSTACK OP_ADD * for all but the last address; OP_TOALTSTACK (count number of valids on number on altstack) * finally, at the end: * n OP_GREATERTHANOREQUAL This means output scripts of 12*M-1 bytes (+ M*20 bytes for the addresses), and input scripts of 2*M bytes (+ N times the size of a signature + pubkey).
319	1881564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1881564	gavinandresen	groffer: is sipas suggestion close to what you started with? Im thinking about whether or not I like the ability to create a multisig address if all you know is the hashes of the public keys. If Im understanding, use case is: + I know 3 bitcoin addresses, create a (say) 2-of-3 address + People send to the 2-of-3 address + Sometime later, 2 full public keys and signatures are gathered, and the coins are spent. Advantage is the signature and public key gathering can happen all at once.
319	1882482	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1882482	gavinandresen	I think this works (somebody check my work) if "we" decide that redeem-with-only-m-full-public-keys is important: TxIn: s1 s2 2 p1 OP_0 p3 TxOut: 3DUP -- duplicate public keys so we can check hashes HASH160 ... EQUAL TOALTSTACK HASH160 ... EQUAL FROMALTSTACK ADD TOALTSTACK HASH160 ... EQUAL FROMALTSTACK ADD 2 GREATERTHANOREQUAL VERIFY 3 CHECKMULTISIG ... and is smaller than sipas suggestion. (although Im not sure what requirements CHECKMULTISIG puts on public keys, might have to replace the OP_0 with a properly-formatted public key).
319	1885913	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1885913	groffer	- thats actually very similar to what I had before switching to OP_CHECKMULTISIG in dc2dfbab6a0f75070fc3 (search for OP_TUCK). I can revert to that if its preferred. - yes, otherwise you have to distribute the pubkeys ahead of time.
319	1886527	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1886527	groffer	(sorry for the skew - my response was before I saw last comment from Yes, CHECKMULTISIG is okay with a malformed pubkey (CheckSig returns false, and the loop moves on to the next pubkey). But the last CHECKMULTISIG solution above can be redeemed with just one correct signature, as coblee explains in the gist.
319	1886602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1886602	groffer	I would love to add the case of (a AND b) OR c as mentioned in the gist, and for that matter a generalized disjunctions () OR () OR () . This will enable emergency backup signer. It will also enable contracts based on broadcast information. For example with sender and receiver keys Ks, Kr, a coin with scriptSig (Ks AND K1) OR (Kr AND K2) could be redeemed by sender if private key for K1 is broadcast or by receiver if private key for K2 is broadcast. Should I wait with disjunctions until after this pull is decided, or should I add now? The other question is whether to go with CHECKMULTISIG. Right now I have padding to get around the GetSigOpCount check. I just noticed that CheckBlock uses that, so we wont really be able to change GetSigOpCount anytime soon (and my change to reduce the MULTISIG count from 20 to 5 has to be reverted). Should I revert to the original CHECKSIG implementation?
319	1891500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1891500	groffer	coblees solution from the gist looks optimal: 0 OVER 2SWAP CHECKSIG SWAP HASH160 {} EQUAL BOOLAND ADD // n times m GREATERTHANOREQUAL
319	1892535	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1892535	gavinandresen	groffer: you willing to take a stab at implementing JUST the new transaction types as a separate patch or patches? It doesnt make sense to roll this out all at once, because the RPC calls wont work unless the transactions are relayed and included into blocks.
319	1893352	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1893352	groffer	Do you mean just the IsStandard part? I can do that. We should make a decision on a couple of questions: * Use coblee CHECKSIG solution? * Add disjunctions?
319	1893921	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1893921	gmaxwell	On Wed, Aug 24, 2011 at 3:18 PM, groffer <reply@reply.github.com> wrote: > Do you mean just the IsStandard part? I can do that. We should make a decision on a couple of questions: > > * Use coblee CHECKSIG solution? > * Add disjunctions? Id rather do this change once instead of twice. Unless the disjunction script gives people security fears Id rather it be supported.
319	1898521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1898521	sipa	As long as each hash160 is used only once, you can write each boolean expression in reverse-polish notation, and use coblees technique to evaluate it. For example: a1 OR (a2 AND a3) OR COUNT(a4,a5,a6)>1 In RPN: a1 a2 a3 AND OR a4 a5 ADD a6 ADD 1 GREATER OR For each address element, you need to know the number n of elements on the stack that belong to the RPN processing - all those beneath are pubkey/signature arguments. Here is the same example in RPN notation with stack depth annotated: (0) a1 (1) a2 (2) a3 (3) AND (2) OR (1) a4 (2) a5 (3) ADD (2) a6 (3) ADD (2) 1 (3) GREATER (2) OR (1) The first step is to bring the pubkey and signature that are in configuration: [sig] [pubkey] [n elements] into configuration [n elements] [pubkey] [signature] [pubkey]: * n=0: TUCK * n=1: OVER 2SWAP * n=2: 2SWAP TUCK * n=3: 3 PICK 2ROT * n=4: 2ROT TUCK * other: [n] ROLL [n] ROLL TUCK Afterwards follows: CHECKSIG SWAP HASH160 [hash160] EQUAL BOOLAND Other operations in the RPN form are simply passed through as-is (they manipulate the RPN stack, which is now on top). That means the above example becomes: * (0)a1: TUCK CHECKSIG SWAP HASH160 [a1] EQUAL BOOLAND * (1)a2: OVER 2SWAP CHECKSIG SWAP HASH160 [a2] EQUAL BOOLAND * (2)a3: 2SWAP TUCK CHECKSIG SWAP HASH160 [a3] EQUAL BOOLAND * AND: BOOLAND * OR: BOOLOR * (1)a4: OVER 2SWAP CHECKSIG SWAP HASH160 [a4] EQUAL BOOLAND * (2)a5: 2SWAP TUCK CHECKSIG SWAP HASH160 [a5] EQUAL BOOLAND * ADD: ADD * (2)a6: 2SWAP TUCK CHECKSIG SWAP HASH160 [a6] EQUAL BOOLAND * ADD: ADD * 1: 1 * GREATER: GREATERTHAN * OR: BOOLOR This scheme allows any expression over signatures, given in RPN notation to be compiled to bitcoin scripts. It can even be extended to support pubkey-based matching instead of address-based matching. Instead of bringing two elements to the front, one suffices: * n=0: * n=1: SWAP * other: [n] ROLL Followed by a simple: [pubkey] CHECKSIG If an address or pubkey is present more than once in the expression, put its evaluation logic (together with the corresponding expected position of input arguments) in front. Each time it is used in the RPN processing, use [m] PICK to retrieve its evaluation, except the last time, when you use [m] ROLL.
319	1905906	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1905906	groffer	I would love to implement the more general solution from if is on board with that.
319	1906231	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1906231	gavinandresen	What does the code for IsStandard() look like with sipas generalized case? How does higher-level code figure out what the heck kind of transaction it is dealing with when theres a tangle of TUCKS and GREATERTHAN? I am NOT on board with implementing sipas general solution-- can we please start with the cases we know are useful right now, and talk about generalizing when weve got some experience with the simpler multi-sign cases?
319	1909677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1909677	groffer	To implement sipas suggestion we would need RPL -> Script and Script -> RPL conversion functions. Higher level code would generate and look for transactions with specific RPL templates. To start with, IsStandard would accept RPL code within specific limits (recursion depth and operators). The next step would be to write API calls that deals simple multisign RPL code cases. For example: count(a1, a2, .. , an) > m . From a user perspective, there would probably not be a big difference initially, just a difference in IsStandard.
319	1911123	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1911123	sipa	The first step is probably adding some extra specific standard cases to the solver, like 1-of-2, 1-of-3, 2-of-3, a-and-(b-or-c) (anything else that is known to be useful?). This is relatively easy to test, and as IsStandard simpy checks for solutions to an unknown keystore, IsStandard would support them immediately. To generalize IsStandard, you indeed just need to split the script into components. Each is either * an address check with matching stack depth * a pubkey check with matching stack depth * an [m] PICK or [m] ROLL with m<n (n = stack depth) * a supported RPN operator (small number, ADD, BOOLAND, BOOLOR, comparison operators) When the entire script can be decomposed into these components, and the final stack depth is 1, the script is valid/standard. To actually solve such scripts in general, youll indeed want to convert to RPN again, but that can be postponed. PS: shame on me; i was talking about reverse polish notation, but somehow started using the abbreviation "RPL"...
319	1913726	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1913726	groffer	I think it is easier to check the correctness of a relatively general solution than to have a growing set of special cases. We already have a simple general solution in the current code that does general COUNT(a1..an) > m and is pretty easy to validate. I will switch to back to a CHECKSIG solution since it is simpler, eliminates the need to pad (for SigOpCount workaround) and more flexible for the future. I could also do a general RPN IsStandard - a rudimentary componentized solver is already in the code and as says, there are only a few cases to consider for each component.
319	1913777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1913777	gmaxwell	At the very minimum, even if we dont go for full RPN support now the transaction encoding for the subset we do support should be in the RPN encoding ordering so that extending the support in the future doesnt result in yet another transaction type.
319	1914171	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1914171	groffer	good point.
319	1915276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1915276	gavinandresen	The right place for this discussion is the bitcoin-dev mailing list. See Mike Hearns concerns, and see if you can convince him that supporting arbitrary combinations of keys will be easier.
319	1917178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1917178	sipa	As far as I understand it, that was about putting arbitrary such expressions in addresses, not about having them pass IsStandard(). Anyway, continuing the discussion there...
319	2969807	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2969807	gavinandresen	Anybody mind if I close this? BIPs 11 12 and 13 (and my OP_EVAL pull request) are the replacement.
314	1355689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1355689	johan	Chime-in from another native speaker of Swedish: these are improvement over the current Swedish translation.
311	1345826	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1345826	jgarzik	Can you redo this pull request, and delete the *.mo files please? Thanks.
311	1345834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1345834	codler	I removed mo now, why do it need to be removed?
311	1345934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1345934	jgarzik	Please rebase your commits, rather than add a new one. We do not want to add two commits to the bitcoin history, one undoing 50% of the last commit :) Why remove *.mo? It is a binary file, impossible to review. Your *.po could be correct, but an attacker may rewrite *.mo to add their own messages.
311	1346653	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1346653	codler	I hope it is right now, In my fork repo I used git reset --hard HEAD@{2} and commited, then git push -f
304	1312572	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1312572	TheBlueMatt	Actually, dont pull this yet, way more stuff to come.
304	1312696	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1312696	TheBlueMatt	Nevermind, other bug is in CryptoPP ASM when cross compiled.
304	1319679	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1319679	gavinandresen	ACK, looks good to pull to me.
300	1306428	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1306428	TheBlueMatt	As devrandom pointed out, tor latency could be much greater than 5s. Maybe add if (fProxy) timeout = 20s?
300	1308021	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1308021	sipa	Maybe this can be done adaptively: start with a timeout=100ms, and each time N connection attempts have failed through time-out (and not enough connections are established), double the timeout.
300	1310748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1310748	jrmithdobbs	I think making it a command line override option would be a better way of handling it. In general you want to avoid connecting to other nodes where your network path is that latent. That way people who have known-latent paths can manually bump the timeout but it works as expected for most users.
300	1311072	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1311072	sipa	good suggestion - implemented.
300	1319859	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1319859	gavinandresen	Id prefer removing the nConnectTimeout global variable and just calling GetArg("-timeout", 5000) in ConnectSocket.
300	1327989	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1327989	phantomcircuit	My name is phantomcircuit and I approve this patch.
300	1329964	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1329964	sipa	I disagree - I dont like global variables, but doing parsing of command-line options all over the place is even worse.
300	1339951	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1339951	jgarzik	bleh, this is overkill. Use select with timeout -- as net.cpp already does -- and eliminate that polling loop. In all of linux/osx/winsock, you issue a non-blocking connect(2), and then select(2) the socket for writing.
300	1351925	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1351925	jgarzik	ACK final result. Needs to be rebased though...
300	1352596	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1352596	gavinandresen	ACK -- looks OK, but I havent had time to compile and test.
300	1353183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1353183	sipa	Now using select() instead of looping. Tested on Linux and Windows.
297	1313492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1313492	jgarzik	true its a simplification, but it is also documentation and easier to review and change as-is. Thanks for the contribution, though!
295	1327922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1327922	javgh	This would be nice to have for Instawallet
295	1364595	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364595	jgarzik	ACK
295	1402489	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1402489	sipa	autoNAK: it is not compatible with multiple txouts in a coinbase tx
294	1299276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299276	TheBlueMatt	Not sure if I agree with this. Im not sure if it is useful or not. After walletcrypter, creating new keys can be a bit slow (both created, and encrypted). This means generating 25 in direct succession and blocking until then can generate quite a lag. Walletcrypter will try to generate new addresses every chance it gets, as you have no idea when you will get the password again. Even if you ignore walletcrypter, Im not sure if it is a better idea to lock once per 25 uses or for 1/25th the time on each use.
294	1299404	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299404	jgarzik	If the feature is disliked, you can set keypoolmin==keypool. But there is really no reason we need to top up the key pool _every single time_ we remove one key, and that creates the disadvantage that you -must- backup your wallet every single time. Normally, pools are depleted and replenished periodically; there does not seem to be a driving reason to constantly top up the keypool, one-at-a-time.
294	1299453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299453	TheBlueMatt	re 1. True... re 2: No, it is worse for backup, if you backup when you have 76 keys left you might lose coins sent to the 77th, whereas if you backup when you have 76 keys now...well you cant. re 3: True, and I think you are right here, however Id like to see manual control of keypool topup (its in wallet crypter, but I might pull it into a separate commit if I get the chance). I would rather see the ability, though not required, to be able to top up the keypool and not slow down my transactions. I suppose that leads me to the answer to my original question, IMHO it is better to lag one transaction per 25, instead of 1/25th the amount per transaction.
294	1299500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299500	jgarzik	The keypool always uses the oldest key first, on purpose. So your lose-coins scenario doesnt make sense. The keypool is by definition full of unused keys. With pool low-water refill, old backups remain valid longer.
294	1299587	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299587	TheBlueMatt	My point was that after your patch, if you backup when you have 76 keys left, and you use 77, you might lose coins on restore. However, if you backup when you have 77 keys left now...well you cant as the keypool will always have 100 new keys to use. Thus after your patch, by default, you only have some keypool between 75 and 100, not 100 as it used to be, potentially resulting in lost coins if you assume you can do 100 actions between backup, like you used to be able to do.
294	1299648	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299648	jgarzik	Absent tilting at windmills, the lone codger who does that can adjust -keypoolmin :)
294	1300367	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300367	sipa	Well maybe then keypoolmin should default to 100, and fill up to 125.
294	1302955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302955	TheBlueMatt	Thats what I was thinking. Im not sure what a "good" default keypool is. For a merchant, you would need some ridiculously huge amount for keypool to just last a day. For an end-user, 100 keys could very well last a month, maybe longer. Generating keys does take very little time and spend very little disk space.
294	1313490	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1313490	jgarzik	Updated to 100/125 (and created named constants for those magic numbers)
294	1433245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433245	gavinandresen	I agree with Matt-- I dont see the need for this.
294	1487840	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1487840	jgarzik	oh well :)
293	1299293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299293	TheBlueMatt	I like the idea, but it depends on when this is merged. If it is merged for the same release as walletcrypter, no need as it already does this in a separate thread (can be a bit slow to create + encrypt sometimes) in several places as it tries to fill the keypool every time it gets the password as there is no guarantee as to when it will next get the password.
292	1296452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296452	TheBlueMatt	Can you clean this up to match the new strings in 0.3.21, also can you only use the czech translation commit, instead of 20 that do various things?
292	1296492	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296492	corwin78	Hello, I am not a developer and I am really new to using GitHub or GIT, so sorry for some troubles. I will very appreciate if you will give me some guide how to clone/pull and checkout only the right files, because everything I am studying very long time and can do mistake easily. Thanks.
292	1296578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296578	TheBlueMatt	The instructions from that repo are fairly out-of-date you can see for more up-to-date ones.
292	1296890	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1296890	corwin78	Can you please send me latest english PO file? I cant find it. Thanks. On Fri, Jun 3, 2011 at 15:10, TheBlueMatt < reply@reply.github.com>wrote: > The instructions from that repo are fairly out-of-date you can see > for more up-to-date ones. > > -- > Reply to this email directly or view it on GitHub: > > -- S pozdravem, *Michal Brekovec* Mj Google profile <http://www.google.com/profiles/michal.breskovec> <http://michal.breskovec.cz>--- Podporuji eskou pirtskou stranu <http://www.ceskapiratskastrana.cz> Pirti Ostrava:
292	1297166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1297166	TheBlueMatt	There is no english po file, each po file maps English strings into another language. As that thread points out, grab any po from any language and replace all the msgstr...s with a translation of msgid...
292	1300470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1300470	mikegogulski	Speaking as a professional translator, Id suggest only accepting direct translations from the English. Otherwise you get into the "game of telephone" sort of problem rather quickly.
292	1302478	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302478	TheBlueMatt	No, each po has english and translated language, so you still have to translate from english.
292	1303109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1303109	mikegogulski	The danger with the "grab any PO" advice above is that someone takes an existing EN->XX .po file and does the translation based on the XX rather than the EN. I confess, Im being pedantic. I spent a few minutes trying to build a good example of how this can fail over three languages. The results werent compelling, but translators can be *very* creative! :)
289	1302384	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302384	gavinandresen	I assume The Right Thing happens if I: setautocommit false send.... stop (the Right Thing being that when I restart the txid from the send is just completely unknown and the coins that were in committed state when bitcoin stopped are available to be sent?)
289	1302879	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1302879	TheBlueMatt	Yes, setautocommit false stores txes in a temporary map local to rpc.cpp (static std::map<uint256, CWalletTx> mapTempTransactions; static std::map<uint256, CReserveKey> mapTempPoolKeys; ) so those will not touch wallet until committransaction is called.
289	1364614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364614	jgarzik	A lot of good stuff in here, but - standard (but BIG) usability problem: if we make it easy for users to ignore recommended fee, then we just made it very easy to create transactions that may /never/ confirm. "unspending" is a very hard problem and not implemented, so any feature that makes it easy to create "limbo coins" becomes a support nightmare once users who do not know what theyre doing un-check that box. Also, - should be separated into multiple pulls - changes fee behavior, and should be dicussed with community
289	1367071	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1367071	TheBlueMatt	True, maybe that option should be removed and just the first and second commits suggested. Also, Im too lazy to do multiple pulls, and this was specifically written so that it does *not* change any fee behavior, only make it more customizable....plus it seems like the community never feels like discussing pull requests, only crazy theoretical problems that never make any sense to begin with.
289	1475122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1475122	TheBlueMatt	Closing this due to several bugs found that I dont have time to fix nor the desire to fix. Going forward Id like to see: 2. as part of a larger upgrade to fees, which Im sure it will be. 1. probably never, though the part which upgrades the various info in the options page might be helpful as its much clearer. 3. whenever I get the chance to rebase onto master, this might be useful for various uses in the future.
288	1372128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1372128	sipa	Rebased.
287	1278327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1278327	bittrader	The changes here had probably best wait until is merged in.
287	3497582	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3497582	sgornick	Is this a duplicate of the (reopened) ?
285	1364642	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364642	jgarzik	Seems OK, but Id have to glance at CreateTransaction() callees, to make 100% certain there are no side effects. The only other question I have is whether or not there is a driving need? (yes, I did review the thread)
285	1387008	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1387008	sipa	I prefer an option to create transactions without committing them, allowing to inspect them, and then decide to commit+send or to abort.
285	1433022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433022	gavinandresen	I agree w. sipa, I like the create...inspect...commit paradigm better.
285	1468205	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468205	TheBlueMatt	Im just not a huge fan of this as its an estimate and could very well be far off the estimate. I agree with gavin and sipa here and had done it in one of the commits in #289
285	1577432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577432	jgarzik	consensus seems to be against
284	1259013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259013	TheBlueMatt	So...this adds the option to specify the rpcuser/pass at runtim instead of via -rpcuser/-rpcpassword. I like this. However, why use ASSUAN? Assuan takes care of mlock() and such, but how hard is that, really, to do ourselves? Im not a huge fan of adding *another* dependency, though I suppose the fact that it is optional is nice. If we are just using the cli input from assuan, and not all their other wx stuff, how hard would it be to copy/paste the probably 20 relevant lines from assuan, or rewrite them ourselves? ASSUAN might be useful for wallet crypto, where the user needs to enter their password via GUI and I have yet to find a way to mlock() the password as the user enters it, but even still, the attack which mlock() protects against is almost never seen in the wild. Assuan is designed to be a secure method of IPC, but in this case it is just used as a password entry library. Assuan might be very useful for something like libbitcoin, but for bitcoin it seems like far over-engineering. Maybe Im missing something you can point out?
284	1259018	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259018	TheBlueMatt	Maybe assuan also tries to stop keyloggers on Windows, but my short googleing seemed to indicate otherwise.
284	1260215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260215	jaromil	It is Pinentry, main reference implementation of an assuan daemon, that tries to stop software keyloggers when started as a separate process, capturing exclusive focus and such. The whole architecture of this system for user input looks very reliable, portable and promising to me. Researching into it gave me quite some satisfaction :^) My guess is that, since it is all ported on major platforms, this new small dependency wouldnt be a problem (at least as optional) and can provide a solid platform to develop further on situations that require user input in bitcoin (which is totally lacking ATM); as you can see the Pin class is very simple and well readable.
284	1260900	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260900	TheBlueMatt	Its not a question of whether a new dep will cause problems in compiling, but a question of is it necessary? A new dep just means that much more work when compiling and that much more memory used when it has to be loaded. I agree assuan looks like a good lib to input password, but again...why? It would be great to have when we move towards libbitcoin, but that is such a long way off I dont see any use in this for some time to come.
284	1265788	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1265788	jrmithdobbs	I definitely see the usefulness of introducing ssh-askpass style support for bitcoind. It makes, for instance, setting a one-time use passphrase for txn creation using your new wallet encryption code much much simpler. However, I cannot get this to build cleanly with the version of libassuan in debian stable. What exactly are the build deps?
284	1266484	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1266484	jaromil	on Ubuntu packaged deps are libassuan2-dev and libgpg-error-dev of course you must uncomment USE_ASSUAN in makefile.unix (later that can be --enable-pinentry on autotools) just tested compilation on Debian 6.0 and you are right, doesnt works: Debian is stuck to the old libassuan-dev (version 1) my approach in this case is include statically and then move strings so that Debian wakes up, which takes time indeed..
284	1272670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1272670	jaromil	forgot to mention that im available to fix this up to work on libassuan 1 or 2, yet before doing that id like to know if there is reasonable intention to pull this into mainline or not, just lemme know
284	1282639	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1282639	jrmithdobbs	I know I would like to see it pulled.
284	1306016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1306016	jandd	you should add libassuan-dev to the apt-get instructions if this should be pulled
284	1320368	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1320368	gavinandresen	where is the libassuan project homepage? Is it part of something else?
284	1320928	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1320928	TheBlueMatt	Its a part of GPG and afaict mostly just used by that.
284	1321230	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1321230	jandd	The Debian archive contains a few other packages using libassuan: ``` apt-cache rdepends libassuan0 libassuan0 Reverse Depends: scute libassuan0-dbg libassuan-dev gpgsm gnupg2 gnupg-agent dirmngr ```
284	1340551	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1340551	jaromil	yes, ASSUAN is a new, well thought and documented protocol for secure IPC by the fine people coding on GNUPG which will arguably become a de facto standard in future. the provision of pinentry-* programs on various platforms makes it extremely convenient to use it to implement password prompt my current code uses the ASSUAN-2 API which contains some design improvements over the version 1, although it can be downgraded for full compatibility since debian still has the older library packaged, or detected at compile time once autoconf build is there. i can do that but again first id like to know if this is a feature you are willing to pull or not, since this is mostly a design issue that can affect future development (which should then arguably stick to these set of dependencies for tasks as password prompt).
284	1341350	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1341350	gavinandresen	I like the feature, but wont pull for two reasons: 1. I agree with Matt: I think the benefits of the feature is not great enough to justify the pain of adding another dependency. 2. It is under the GPL license, which is more restrictive than bitcoins MIT license, and is unacceptable.
284	1341809	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1341809	jaromil	re: point 2 - what is under the GNU GPL? the code im contributing is licensed under the same MIT license as Bitcoin. you mean the dependencies? is your intention to avoid any library dependency licensed as GNU GPL?
284	1342033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1342033	gavinandresen	Yes, we avoid an GPL library dependencies. LGPL is OK.
284	1342395	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1342395	jrmithdobbs	But libassaun is gplv2+ OR lgplv2+ ? Actually, Im wrong. From the README the source is straight up lgplv2. (The rest of the gnupg packages are gplv2+.) See COPYING.LIB on how to share, modify and distribute the software itself (LGPLv2.1+) and COPYING for the documentation (GPLv3+).
283	1256785	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256785	sipa	The problem is that some (intended) indetermism is present while generating a transaction, which may influence the size of a transactions and thus its fee according to a certain policy. I believe the correct way should be that payment RPCs take an additional argument that states that no actual payment only the creation of a transaction is required. The created transaction can then be inspected, and through another call rejected or accepted.
283	1256834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256834	TheBlueMatt	Can you rebase this into one commit? Also, I agree with sipa on the proper way to do this. Im hoping someone redoes all the UI for transaction fees for 0.4.0.
283	1257756	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1257756	sassame	Sipa - so, youre suggesting we update the send payment RPCs to return transaction details, instead of just the Transaction ID, then include a new flag that indicates a fake transaction? Or, would we have a non-committed transaction that I could still query by txn ID? Alternatively, we could keep the estimate call, then include a "max tx fee" parameter on the send payment RPC, so it fails if the tx fee ends up over the given amount. From my perspective, Im always making these calls from inside a transaction, so I dont mind a later call failing, since its easy for me to re-run the whole transaction. Finally, Im new to git, how do I rebase? Just create a new branch and make all the changes in one push?
283	1258965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1258965	sassame	Accidentally closed while trying to rebase, opening new pull request.
282	1364684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364684	jgarzik	non-committal (neither NAK nor ACK)...
282	1364996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364996	TheBlueMatt	Meaning?
282	1367509	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1367509	jgarzik	heh. Well its a long list that Im not sure will be of much value over current setup. Fixing warnings can be useful, or it can just be a compiler being dumb and were working around it. So if Gavin or sipa or tcatm wants this pull, I would not object, but Im not gonna click merge myself...
282	1369742	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1369742	TheBlueMatt	Ah, well I suppose it was half a pull to hopefully bring attention to some (potential) bugs we might have. Also, it would have fixed a coding mistake or two of mine...but that is really just because Im in idiot.
282	1400740	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400740	jgarzik	closing the half-a-pull :)
281	1313494	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1313494	jgarzik	Can you please do two things? 1) Resubmit on top of current bitcoin 2) Do not include *.mo files. We will rebuild those.
280	1253542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1253542	devrandom	The problem is still present, will have to investigate.
276	1253629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1253629	sipa	See
275	1246410	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1246410	jgarzik	merged by matt
274	1242750	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1242750	TheBlueMatt	NACK, why did you change the spacing so much?
274	1243153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1243153	gandaro	I didnt change the spacing, Poedit did this. This is because its easier to read, I think. But why should the spacing be a problem?
274	1243355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1243355	TheBlueMatt	It isnt, I was just nitpicking, and it makes the commitdiff much harder to read, which isnt good...also, my poedit doesnt do that unless I put spaces in there.
274	1246414	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1246414	jgarzik	fixed by matt
270	1246416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1246416	jgarzik	merged by matt
269	1241420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241420	sipa	No upnp built: USE_UPNP= upnp built but disabled by default: USE_UPNP=0 upnp built and enabled bt default: USE_UPNP=1
269	1241433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241433	TheBlueMatt	Please read build-unix.txt, it explains this.
269	1241436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241436	sneak	Is UPNP enabled the intended default behavior?
269	1241440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241440	TheBlueMatt	Built in, but disabled by default ie USE_UPNP=0, which is the intended default.
269	1241444	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241444	TheBlueMatt	"USE_UPNP= no UPnP support, miniupnp not required; USE_UPNP=0 (the default) UPnP support turned off by default at runtime; USE_UPNP=1 UPnP support turned on by default at runtime." -from build-unix.txt
269	1241460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1241460	sneak	ahh, its also the flag for the default runtime setting, didnt realize that.
267	1238949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1238949	jgarzik	ACK
267	1238988	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1238988	TheBlueMatt	ACK
266	1364692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364692	jgarzik	The "_" function for translation strings is standard. This patch sure does stir a lot of code, as well as moving us away from that standard. Seems like c pre-processor magic would be more appropriate than changing all that code.
266	1442243	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1442243	dinox	I think search-and-replace was a nice function here
266	1795462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1795462	TheBlueMatt	Yea, this needs to be done cleanly...or just move to qt.
264	1237762	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237762	sipa	This should fix
262	1237934	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237934	sipa	Pulled via
256	1220949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1220949	TheBlueMatt	Can you split the russian translation to a new commit, and maybe update to latest git (as per
256	1221144	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1221144	m0Ray	I am a newbie in GIT. Must I fork&clone your branch?
256	1225632	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1225632	TheBlueMatt	No, just the one russian file. Just make your own branch (off master) and grab the russian bitcoin.po file from my repo (downloading via github should work fine).
256	1225678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1225678	m0Ray	Just published a .po file:
256	1232661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232661	lzsaver	I hoped that your po-file is based on the last translation file but it seems that it is not.
256	1232883	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1232883	m0Ray	- April 02, 2011 - May 15, 2011 What is more recent? ;)
256	1251586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1251586	lzsaver	Anyway, I hope that -purgetx will be in the official client. :)
256	1364702	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364702	jgarzik	indeed, needs rebasing to remove the translations
256	1367165	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1367165	TheBlueMatt	IMHO this belongs in Bitcointools or other similar software, not in Bitcoin (feature creep and its more wallet recovery which IMHO should be encouraged not using Bitcoin, but using external tools as there is too much chance to make it worse), but maybe others disagree?
256	1387514	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1387514	lzsaver	I think that it may be used with -rescan option... So I think it should be in Bitcoin.
256	1593255	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593255	gmaxwell	Instead, perhaps, there should be a needsrecan key that tools can set? That would be generally useful for tools that modify the wallet.
256	1593620	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593620	sipa	-rescan only adds transactions not already in the wallet - it will never remove things from the wallet. Also, it is possible to force bitcoin to do a rescan by clearing (= setting to a singe 0 byte) the "bestblock" entry in wallet.dat.
256	3224140	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3224140	jgarzik	Agreed, that this is a bit of an esoteric option, that will not be widely used (or tested). It does make more sense as a bitcointools add-on, as BlueMatt suggested.
254	1217938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217938	sipa	Can you rebase this into a single commit?
254	1218166	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1218166	dabaopku	Its clean now.
254	1237949	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237949	jgarzik	pulled manually
253	1364709	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364709	jgarzik	ACK and I think Gavin is in favor of this, too
253	1490461	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1490461	TheBlueMatt	NACK, it would appear code was ripped out of uibase.* without modifying the uiproject.fpb file meaning no one can edit the wxUI in the future.
253	1559512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1559512	jgarzik	Also, please update for latest changes (lots!). We wanted to pull wallet crypto first.
253	1560610	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1560610	laanwj	yeah I will, first have to get this wx dialog editor tooling
253	1593259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593259	gmaxwell	Aww. The removal of this would mean we cant run a lottery for nodes running the most recent version of bitcoin as an incentive to make people upgrade. :)
253	1593434	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593434	laanwj	Wow, you probably hit upon the first actual useful application for send to IP transactions. But watch out for people MITMing you to steal the incentives :)
253	1593448	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593448	gmaxwell	Well, if they are going to go through the trouble of setting up something that _pretends_ to be a current node it would be easier to actually RUN a current node. The lottery could do some reasonable health checks too. :) Like make sure the winner can feed the block chain and forward a transaction.
246	1210866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210866	TheBlueMatt	Hm, not sure why we need to change our indentation format. It is one of the most common types of indentation/code format (though possibly some different bracket positioning is more common). Though some of the removal of random spaces at the end of lines and cleaning up number of spaces at various points could be done.
246	1210965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1210965	canercandan	I thought that no standard has been used regarding the indentation of code, so youre right we dont have to take this commit in account even if I like a bit more this style in my Emacs ;)
246	1214460	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1214460	sipa	Removing spaces and cleaning up is fine, but the project has well-defined code style rules, which I dont think should be changed without discussion.
246	1215423	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1215423	canercandan	you are absolutely right.
246	1256521	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256521	jaromil	the indentation and code style was declared and we are all already adapting to it, why change it? im also disagreeing with the "whitespace cleanup": while that is an easy trick using the emacs extension, it does provoke unnecessary conflicts when merging master into branches. ultimately i dont see any good reason why to pull this req.
246	1256748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256748	canercandan	jaromil, are there any rules regarding the indentation and code style defined by the community of developer around the project ? If yes can any one give me some directives to respect these rules in the future ? Thanks.
246	1256757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256757	TheBlueMatt	There should be in docs/coding.txt
246	1256852	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1256852	canercandan	Thanks.
246	1263955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1263955	jaromil	i see one good thing in this operation, but then it should split from all the rest and be proposed as a standalone pull request: in addition to the changes you mentioned, you have also added #ifndef / #define to headers, a common practice to avoid multiple inclusion and redeclarations. as that would be a good step towards getting rid of the headers.h insanity, itd be good to have it IMHO. but then again, as a separate pull request plz.
246	1272910	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1272910	canercandan	I will separate the change you mentioned from the rest of the pull. If there is anything else to keep, go ahead ;)
246	1313498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1313498	jgarzik	we have a metric ton of pending patches, and unfortunately this pull request is very low priority compared to other changes which change a lot of bitcoin code. whitespace diffs tend to require merging and rebasing downstream for very little value. So this pull request is, and will continue to become, out of date. Other changes should definitely go into separate pull requests.
245	1364716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364716	jgarzik	I think we would prefer this pull request:
245	1366817	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1366817	jtobey	Im happy with it. I think a simple tool could convert PEM to Sipas format. I appreciate your digging through this stuff! -John On Tue, Jun 14, 2011 at 5:05 AM, jgarzik < reply@reply.github.com>wrote: > I think we would prefer this pull request: > > > -- > Reply to this email directly or view it on GitHub: > >
245	1433216	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433216	gavinandresen	Im going to close this; a tool to convert PEM to sipas format would be nifty (and could be shipped with bitcoin in the contrib/ folder).
235	1197106	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197106	TheBlueMatt	This is the descriptor that should be used for 0.3.22 builds, it should be updated for autotools, but it might work even then.
232	1193878	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1193878	TheBlueMatt	Forum thread:
232	1363969	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1363969	gstarnberger	Instead of using EVP_BytesToKey for key derivation I think scrypt (https://www.tarsnap.com/scrypt.html) should provide a somewhat better security against brute-force attacks.
232	1364980	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364980	TheBlueMatt	Im not sure. Though it may claim to be more secure, 1000 rounds on OpenSSLs algorithm is also very secure and I think Id rather use a more common/well used/well analysed algorithm like OpenSSLs entire code base is.
232	1364981	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364981	TheBlueMatt	Ill take a look at updating to your other recommendations when I have a chance.
232	1366011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1366011	dizzyd	re: the unused IV -- "may be some kind of crazy issue.." is not a logical argument. Being paranoid about security is good, but there needs to be some basis in reality for it. Otherwise, you wind up with a lot of code that doesnt do anything and may obscure whats _really_ going on. re: calls to SetKey mlocking -- if thats the case, then you _really_ dont need to copy it to vchKey. All that serves to do is increase the number of copies of keys you have in memory and increases your attack surface. Security-wise: careful, minimal code > paranoid code. B0.02 from a random coder. :)
232	1367956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1367956	witkamp	Is there a reason you are not using a random salt?
232	1382512	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382512	enmaku	witkamp: > Is there a reason you are not using a random salt? Yeah, password data should be salted - I mean we DO already have a giant network of people with high-end GPUs and the drivers/software necessary to brute force such things ;)
232	1382673	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382673	gstarnberger	As far as I understand scrypt the main advantage over older techniques is that it not only adds computational complexity to calculate a given key from a password, but that each calculation also requires a given amount of RAM. So its much harder to parallelize an attack with, e.g., an ASIC, as you would need lots of RAM to do so. But I agree with you: There have been much more reviews of the SSL code base, and so the chance of critical errors in OpenSSL is much lower compared to scrypt.
232	1382749	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382749	TheBlueMatt	mostly because it would be a pain to store. This patch already uses the public key as the IV for the encryption of each private key so any kind of brute force/dictionary attack is already ridiculously difficult, I dont see a major advantage to adding a random salt to be used for a given wallet (and then stored in the wallet) as to brute force a wallet, you already need to know some of the information in the wallet (namely the public keys). But maybe others disagree? OK, so its agreed then that OpenSSL key derivation is probably the best way to go? Still planning on updating with some of your original recommendations, but Im on vacation atm and dont feel like doing much coding.
232	1382789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1382789	enmaku	gotcha, didnt see the public key = IV bit but it makes sense and stops dictionary/BF attacks at least as well as a random salt so Im happy with it as a solution.
232	1383776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1383776	dizzyd	On Thu, Jun 16, 2011 at 11:24 AM, TheBlueMatt < reply@reply.github.com>wrote: > > Still planning on updating with some of your original > recommendations, but Im on vacation atm and dont feel like doing much > coding. > No worries -- I read your last reply first and was confused. :) D.
232	1395236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1395236	phantomcircuit	It would be best to use AES128 and not AES256. The key schedule in AES256 is known to be weak.
232	1400798	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400798	jrmithdobbs	Please salt that passphrase properly as suggested in gmaxwells forum post.
232	1407446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1407446	mutantmonkey	That attack is effective against 11-round AES-256, but not full 14-round AES-256. Itd be better to increase the number of rounds (he recommends 28 or more in that article) used instead of using a smaller key size. There are plenty of attacks on AES-128 as well, many of which were published after that article was written.
232	1443388	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1443388	TheBlueMatt	Closing this in anticipation of the new branch.
226	1172135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1172135	sipa	rpc.cpp: In function void ThreadRPCServer2(void*): rpc.cpp:1832: error: filesystem has not been declared rpc.cpp:1832: error: expected ; before certfile rpc.cpp:1833: error: certfile was not declared in this scope rpc.cpp:1833: error: filesystem has not been declared rpc.cpp:1834: error: filesystem has not been declared rpc.cpp:1834: error: certfile was not declared in this scope rpc.cpp:1836: error: filesystem has not been declared rpc.cpp:1836: error: expected ; before pkfile rpc.cpp:1837: error: pkfile was not declared in this scope rpc.cpp:1837: error: filesystem has not been declared rpc.cpp:1838: error: filesystem has not been declared rpc.cpp:1838: error: pkfile was not declared in this scope
226	1173815	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1173815	jordanlewis	Thanks - I didnt see that with g++4.3/amd64 - could you please tell me what platform and compiler youre using?
226	1174103	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1174103	jordanlewis	OK, I fixed the issue.
226	1177422	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1177422	TheBlueMatt	ui.cpp: In member function virtual void CMainFrame::OnClose(wxCloseEvent&): ui.cpp:382:22: error: Shutdown was not declared in this scope ui.cpp: In member function virtual void CMainFrame::OnIconize(wxIconizeEvent&): ui.cpp:393:25: warning: bool wxIconizeEvent::Iconized() const is deprecated (declared at /usr/local/include/wx-2.9/wx/event.h:2072) ui.cpp:401:43: warning: bool wxIconizeEvent::Iconized() const is deprecated (declared at /usr/local/include/wx-2.9/wx/event.h:2072) ui.cpp: At global scope: ui.cpp:1541:1: error: filesystem in namespace boost does not name a type ui.cpp:1552:1: error: filesystem in namespace boost does not name a type ui.cpp: In function bool GetStartOnSystemStartup(): ui.cpp:1559:12: error: boost::filesystem has not been declared ui.cpp:1559:33: error: expected ; before optionFile ui.cpp:1560:10: error: optionFile was not declared in this scope ui.cpp:1564:13: error: optionFile was not declared in this scope ui.cpp:1571:5: error: optionFile was not declared in this scope ui.cpp: In function void SetStartOnSystemStartup(bool): ui.cpp:1580:37: error: GetAutostartFilePath was not declared in this scope ui.cpp:1589:16: error: boost::filesystem has not been declared ui.cpp:1589:63: error: GetAutostartDir was not declared in this scope ui.cpp:1591:16: error: boost::filesystem has not been declared ui.cpp:1591:37: error: expected ; before optionFile ui.cpp:1592:14: error: optionFile was not declared in this scope ui.cpp:1598:9: error: optionFile was not declared in this scope ui.cpp: In member function bool CSendingDialog::Status(const std::string&): ui.cpp:2119:54: error: strlcpy was not declared in this scope ui.cpp: In member function void CMyTaskBarIcon::Show(bool): ui.cpp:2609:71: error: strlcpy was not declared in this scope ui.cpp:2621:51: error: strlcpy was not declared in this scope ui.cpp: In member function virtual bool CMyApp::OnInit(): ui.cpp:2847:30: error: AppInit was not declared in this scope ui.cpp: In member function virtual int CMyApp::OnExit(): ui.cpp:2852:18: error: Shutdown was not declared in this scope
226	1179436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1179436	jordanlewis	OK, issue should be fixed for DGUI now as well.
226	1180122	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1180122	TheBlueMatt	ui.cpp: In function void SetStartOnSystemStartup(bool): ui.cpp:1590:9: error: create_directories is not a member of boost::filesystem ui.cpp: In member function bool CSendingDialog::Status(const std::string&): ui.cpp:2120:54: error: strlcpy was not declared in this scope ui.cpp: In member function void CMyTaskBarIcon::Show(bool): ui.cpp:2610:71: error: strlcpy was not declared in this scope ui.cpp:2622:51: error: strlcpy was not declared in this scope ui.cpp: In member function virtual bool CMyApp::OnInit(): ui.cpp:2848:30: error: AppInit was not declared in this scope ui.cpp: In member function virtual int CMyApp::OnExit(): ui.cpp:2853:18: error: Shutdown was not declared in this scope
226	1185789	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1185789	jordanlewis	Ive rebased the above fixes for further review.
226	1187881	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1187881	jgarzik	All patches look OK. I would elide the *.d commit, because well be doing that via GNU autotools as soon as jaromils branch is pulled (post 0.3.22 release).
226	1194024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1194024	jordanlewis	.d commit elided.
226	1352602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1352602	gavinandresen	ACK- should be pulled for the release-after-0.3.23
225	1165441	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1165441	sipa	You can return to a previous commit in git with git reset HEAD~ --hard, and push that again using git push origin -f master. The pull request will automatically adapt.
225	1165500	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1165500	laanwj	Thanks! now its back to one commit (uhm, sorry for pressing the open/close buttons, that goes too easy!)
225	1165886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1165886	TheBlueMatt	ACK, looks good to me. We need to move off of headers.h and this looks like a good first step (plus if it helps with QT compat, and we do eventually move there, Im in favor)
225	1166064	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1166064	sipa	Compiles and runs fine. This is a nice step towards cleaning up the code. ACK
225	1166565	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1166565	gavinandresen	ACK, good idea. Im going to pull.
223	1162918	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1162918	sipa	Can someone verify this compiles under mingw?
223	1162947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1162947	TheBlueMatt	Builds now, though shouldnt addrIP, at a minimum, be different depending on the sizeof(unsigned int)?
223	1163024	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1163024	sipa	Well, bitcoin already used unsigned int for IP addresses. Maybe something to look into when we switch to getaddrinfo() and/or IPv6 support.
221	1157857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157857	sipa	After my dnslookup patch, CAddresss constructors changed to take host-order ports as arguments, so no need to do htons() on its argument.
221	1157998	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1157998	TheBlueMatt	Hmmm...I think pulling this would cause even more complaints, as using a non-default port means no incoming connections (probably a 1 connection per a.b.x.y thing considering I would be running 2 nodes) and (in almost all of my testing) reduced outgoing ones (ie no outgoing connections, but this probably needs more testing). And, IMHO, the non-default port time-delay stuff is necessary until there is more discussion on the topic. As a side note, this does not appear to apply cleanly to current master (because of sipas mentioned htons() stuff).
221	1158022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158022	gavinandresen	Did I screw up? I thought I got all the htons() spots, and I did test with a couple of -testnet nodes. And I rebased to current git-head (BlueMatt, are you up-to-date?)
221	1158065	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1158065	TheBlueMatt	Ah, yes now it is rebased, I wrote that comment long before I posted it to do some more testing of connections.
221	1165250	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1165250	laanwj	Yes please merge this. Depending on one port is kind of backwards in this age of ISP throttling and blocking.
221	1166078	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1166078	sipa	gavin: my dnslookup patch changed the port argument of CAddress to always take a host-ordered number. Your line 1556 still calls CAddress with a network-ordered port number.
221	1166525	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1166525	gavinandresen	sipa: thanks, I didnt realize CAddress had changed. BlueMatt: I missed a GetDefaultPort() in the UPnP code (fixed, if you use -port UPnP will map that port).
220	1150172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1150172	gavinandresen	Nice! Ill have to find some time to try to break it... rpc.cpp is getting way too big; maybe this would be a good time to start breaking it up into separate .cpp files with related functions (most of this code could be rpcimport.cpp, maybe....)
220	1160577	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1160577	rnavarro	Another feature that would be really really handy would be the ability to specify an account for the importprivkey command
220	1217795	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1217795	sipa	Discussion is here:
220	1400743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400743	jgarzik	I think this is useful for wallet security (print out a private key, stick in safety deposit box), so prioritizing a rebase for this would be appreciated.
220	1438452	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1438452	sipa	Rebased against master, a few bugs fixed, and split off into separate source file. TODO: known wrong balance cached when importing keys
220	1508261	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1508261	EricJ2190	Since this uses the ifstream class, it needs to include fstream in headers.h to build in MSVC.
220	1546463	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1546463	sipa	Ive rebased the code against Matts newenc, plus some other refactorings. Ill close the pull request until those are merged.
220	1561703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1561703	sipa	Ok, reopened because github doesnt seem to track updates to the branch while the pullreq is closed, but this still depends on #403. Also, im not convinced how stable the wallet dump format is yet, so Ive split the last commit in two, allowing merging of only key import/export.
220	1588405	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1588405	lachesis	Didnt build for me: wallet.cpp:273:65: error: PubKeyToAddress was not declared in this scope
220	1590491	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1590491	sipa	should be fixed
220	1603335	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1603335	gmaxwell	I noticed some weird behavior with transactions heard over the network on imported keys: { "account" : "", "address" : "1Wh4bh", "category" : "send", "amount" : -0.49500000, "fee" : -0.00500000, "confirmations" : 0, "txid" : "275d51ed81ae359cffe3728f6c7de8246b2b3c147b9dce316a5e952db5d76991", "time" : 1310993846 } Kind of a short address there :) (from a checkout this morning)
220	1603381	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1603381	gmaxwell	Its really slow to import addresses one at a time giving a rescan for each. If someone feels adventurous, deferred lazy rescan in a thread, and/or an import that call that takes many would be nice.
220	1721111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1721111	sipa	Rebased against master, and now includes a feature-complete removeprivkey call (should remove the private key, the address book entry, redundant transactions, and account information). I dont have time to test this the coming weeks, but if people want to try it, be my guest.
220	1987636	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1987636	sipa	rebased against 0.4.0rc1, not tested after rebase
220	2125614	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2125614	gmaxwell	I think the existence of is a strong argument against this functionality the feature isnt done yet and people are already creating websites which compromise bitcoin users security. Official import/export functionality will increase the apparent legitimacy of attacks exploiting the functionality and bitcoin will suffer the bad PR when users hurt themselves using it. :-/
220	2150228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2150228	casascius	What part of this functionality constitutes an exploit? The idea that one should be able to have their own private keys on paper, or on bitbills, or on physical bitcoins, etc. should be something that enhances security, not detracts from it. Please explain how security is compromised.
220	2160082	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160082	enmaku	Nice mod! re: testing: Works beautifully on Debian squeeze i686. All added functionality tested and working properly. +1 for adding Mini Private Key format. It should be pretty easy to implement. Also, I believe the problem was addressing is that scammers can generate "secure" keypairs for their victims and then never relinquish control of the private key, thus allowing them to steal funds from those accounts later
220	2160269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160269	casascius	I wasnt sure if keeping the private key was the concern here, because bitaddress.org appears to have been created with that concern in mind. The generator at bitaddress.org is actually quite novel from a security perspective: the generation is entirely client-side and implemented in javascript in easy-to-read code in a single self-contained html file that contains no references to any network resources. The QR codes are generated from scratch, client-side, as well. This is exactly how a personal address generator should be. One can save the single .html file to disk and use it to safely generate bitcoin addresses straight to their printer while disconnected from the internet. To me, its a shining example of a good idea rather than an exploit.
220	2160324	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160324	enmaku	I think the concern is that while you and I might check the source, 99% of folks wont and eventually one will crop up that phones home and makes a big database of privkeys ripe for exploitation. Realistically though this isnt our problem any more than any other product or service whose userbase is regularly phished. We can put the info out there, but people want this feature and if its not in the main client itll be in external tools like pywallet. We cant stop those who want to from importing addresses, merging wallets, etc. The best we can do is put up big scary popups in the GUI implementation informing folks that messing with the wallet is dangerous and if they do stupid things theyll get bad results.
220	2160427	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2160427	casascius	I share the concern, and am appreciative of the fact that the author of this website makes no attempt to explain what his website does to newbies. You have to know why youre there and what the number means, otherwise it is just a gibberish generator. And the part I appreciate the most is simply that he has released functional code that can be clipped and put into other environments where the source is ostensibly trusted. (e.g. on MtGox, or on the LinuxCoin ISO). Free bonus is its platform independent. I think the best thing that can be done to the GUI implementation would be to include this functionality where the user can get at it, and seek to be less user unfriendly, then websites like this wouldnt have a reason to exist.
220	2164700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2164700	casascius	One more thing... the bigger the block chain gets, the longer importprivkey takes to run, mainly because of the calls to rescan the wallet. I want this in the main client badly because I use it all the time and believe that keys on paper will help solve the black eye Bitcoin has received over security incidents, but it occurs to me that there is no way that this would be taken seriously as acceptable in the main client if it needs to pause for 90+ seconds (and growing) to perform an import. The client itself needs badly to maintain an index for the purpose of doing that rescanning (if it doesnt do so already), among other useful purposes I can think of.
220	2165944	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2165944	sipa	Keeping a database of all addresses and all outputs to them would be a massive cost that isnt justified for just somewhat faster importing of addresses. Take into account that when more complex scripts are supported, this becomes even harder, as there could be outputs with several possible addresses or even combinations thereof. The solution is using importwallet instead of importprivkey. It supports annotating keys with information about which transactions or starting in which block they are used, and only doing selective rescanning.
220	2166885	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2166885	casascius	With respect to the massive database of addresses... I could see myself trying to implement that down the road as my familiarity with the code gets better, but possibly in the form of a patch or an option that is turned off by most people because its only useful to a specific audience: server operators. The specific real-world everyday application it would support would be so that websites (e.g. MtGox, or marketplaces that accept bitcoin deposits) could accept a "deposit by typed private key", and the private key wouldnt necessarily be imported, but rather, bitcoind would do one of two things: either, one - immediately create and broadcast a one-off transaction (without adding the key to the wallet like importprivkey does) that sent the entire balance at that address to a specific one given as a parameter, at which point it would be treated like a deposit that came in externally (with the option of sending only a specific amount, the rest, if any, going back to the original address or to an optionally provided but specific "change" address)... - or - two, offer an RPC query feature that simply coughed up all of the unspent transactions associated with a given address, so that some sort of RPC client could implement the creation of that transaction (a feature I believe is useful in itself for other purposes that also wouldnt apply to everybody) Such a feature would depend on the ability to quickly find all transactions (standard ones, at least) given an address, and would promote the usability of paper bitcoin wallets and physical bearer items, which in turn is a viable way for joe schmoe and/or Grandpa to _securely_ manage his bitcoins without needing to learn about wallet encryption and keyloggers. If bitcoind is tied up for a minute and a half to import an address, this will be impossible in a MtGox-like server scenario.
220	2183678	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2183678	casascius	OK, here are the goods. Revised mini private key support that consists of adding two SetSecret functions to CBitcoinSecret to override the ones in its base class and no modifications anywhere else. I suppose this is a lot cleaner, and it requires only modifying base58.h and not rpcdump.cpp. bool SetString(const std::string& strAddress) { return SetString(strAddress.c_str()); } bool SetString(const char *psz) { int nSecretLength = strlen(psz); if (nSecretLength == 22 || nSecretLength == 26) { if (psz[0] == S) { int i; bool fMini = false; for (i = 0; i < nSecretLength; i++) { char c = psz[i]; if (c < 1 || c > z) break; if (c > 9 && c < A) break; if (c > Z && c < a) break; if (c == I || c == l || c == O) break; } if (i==nSecretLength) { std::string strKeycheck(psz); strKeycheck += "?"; uint256 hash; SHA256((unsigned char*)strKeycheck.c_str(), strKeycheck.size(), (unsigned char*)&hash); if (*(hash.begin()) == 0) fMini=true; else { uint256 hash2; for (i=0; i<358; i++) // 358*2=716 +1=717 { SHA256((unsigned char*)BEGIN(hash), sizeof(hash), (unsigned char*)&hash2); SHA256((unsigned char*)BEGIN(hash2), sizeof(hash2), (unsigned char*)&hash); } if (*(hash.begin()) == 0) fMini = true; } if (fMini) { uint256 hash; SHA256((unsigned char*)psz, nSecretLength, (unsigned char*)&hash); SetData(fTestNet ? 239 : 128, &hash, 32); return true; } } } } return CBase58Data::SetString(psz); }
220	2183844	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2183844	sipa	What do other people think about support for mini private keys?
220	2183902	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2183902	enmaku	I think it could be a useful standard for short keys, though as a contributor on casascius deterministic wallet generator I may be a bit biased ;)
220	2184029	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184029	gmaxwell	Im not super-keen on the reduction in collision resistance compared to 160-bit addresses (keep in mind, general any-any "birthday paradox" collision is sqrt(brute force), so only 61.5 bits but its actually lower than that, the "CRC" check reduces the keyspace by another 16 bits so only 53.5 bits of collision resistance. If these are widely used the chances of two people accidental ending up with the same key is not so astronomically low that we could wave away critics who complain that this is a flaw in bitcoin. 717 cycles of the hash is _worthless_ as strengthening, Im guessing this was some number picked by someone with a horribly slow interpreted implementation of SHA256?? Figure a random desktop CPU can do on the order of 1M/sha256/s/core, conservatively. If the count isnt going to be increased to a reasonable number (e.g. >100k), then it really should just be set to 1: simpler and doesnt give a false impression of security. Even 100k cycles would still result in technically usable key generation times (e.g. 12.7s worst case assuming 1Mh/s), but if that is too slow the validity check could be reduced to the 10,000 cycle point (max ~1 sec generation) then another million cycles (1 second import) could be applied before you can get the public key (and thus _address_) from a valid candidate key. Im doubly concerned with the computational complexity here due to the fact that our own project has helped lower the cost per sha256 operation so much. :) The same cautions I made about using a hash function weve made so fast for the wallet crypto apply here but double so because we cant change this. Also, the way the stretch is designed every intermediate step is has no feedback of the initial material. This means that internal collisions in the hash will reduce the space further. A proper PBKDF algorithm should be used.
220	2184146	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184146	gmaxwell	(ah, Id missed on my initial read that the iterated hash is only used for the CRC check this makes the colissions in the hash less serious, but it also means that collision attacks on the 22 character version are probably practical (or at least would be under wide usage) owing to the size of the space and the fairly low cost of checking them)
220	2184173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184173	enmaku	Its a reduction to be sure, but a namespace of 22^58 possible keys is still pretty massive. Thats what, about an 8.7e-63 chance of finding a specific collision at 200 MH/s running for a year? Even if a million addressed existed to potentially collide with thats still ~8.7e-57 for a single 5830, and Im pretty sure mining is still more profitable. Besides, these addresses arent intended for the same kind of use as full Bitcoin addresses are, theyre specifically for space-limited situations and for such scenarios the slight increase in risk may be worth it.
220	2184308	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184308	sipa	The total keyspace is 58^21/2^16 keys: 21 characters with 58 possibilities each, and of this total one key in 65536 will pass the validity check. It requires (65536*1 + 256*716 + 1)*58^21/2^16 = 2^124.94 SHA256 steps to generate all minikeys.
220	2184386	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184386	sipa	On the other hand, Im not sure why we are giving up any level of security at all. A 29x29 pixel QR code can encode 56 base36 characters, which is equivalent to a full 289 bits (256 + 33 bits crc) of information. Printing 22 base58 requires a similar number of pixels, i believe.
220	2184416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184416	casascius	First, let me comment on the "birthday paradox" argument. I believe this is a good argument that has been misapplied. If this were a hashing algorithm that had 21^58 possible outputs for 21^58 possible inputs, then it would definitely apply. But we are using SHA256. We are mapping 21^58 possible inputs into a keyspace of 2^256 outputs. To suggest that SHA256 will only give 2^61.5 unique outputs given 21^58 possible inputs is to suggest that SHA256 is a pretty poor hashing algorithm. Let me put it another way. If I decided that mini private keys had only 1 character (so, 58 possible keys going into SHA256), the same birthday paradox argument applied in the same way would suggest that SHA256 would only give sqrt(58), or about seven, possible unique outputs given these 58 inputs, and that the other 51 of them would be SHA256 collisions with one another. It goes without saying thats not the case. Next, lets review the process of one iteration of trying to brute force one of these keys. This isnt hash cracking, because we dont even have the target hash value. Thats because the hash value IS the asset - not the plaintext used to arrive at it, as would be the case in password cracking. To try one iteration (set the CRC aside), one would have to do the SHA256, and then convert that to a Bitcoin address, and then check that against the set of all Bitcoin addresses known to have funds. The most expensive part of this process by far is the "convert to Bitcoin address" step, which involves an elliptic curve multiplication. In fact, that step is so expensive as to render the SHA256 part nearly moot, whether its once or 717 times. The reason why I chose the number 717, with an option for 1 round, is specifically to keep it feasible to GENERATE these keys within slow interpreted languages like Javascript. To actually generate these keys requires a brute force SHA256 effort to find one with eight zero bits. If something like 100,000 rounds were required, the minimum expense to generate these keys would be high. I looked at it this way. To generate a mini key that passes the check after 1 round, that requires on average 256 SHA256 operations. To generate a mini key that passes the check after 717 rounds, that requires on average over 180,000 rounds (717*256). At some point, it almost becomes less expensive to do the EC multiply to see if the key has funds versus eliminating it through the CRC, and doing more rounds of SHA256 isnt going to serve any useful purpose. Im not sure 58^21/2^16 is the right math... as the CRC check is "either or". The check passes with zeroes on the first round, OR zeroes on the 717th round, so about 1 in 128 random strings will pass the check. The math is probably better expressed as 58^21 / 2^7 in the worst case. Finally, these are being used for physical bitcoins worth 1 BTC. Thats the payoff for going to the effort of cracking one. The application this would be likely adopted for by others would be to help small payments move around from hand-to-hand, face to face, since these are the applications where space is at a premium. By no means am I recommending that someone use a 22-character code for their life savings. The low entropy is no secret, I mentioned it myself in the wiki article. I penciled in a 26-character version for applications where 22 characters (what I felt was the bare minimum) wasnt going to cut it. If we turned on a 30 character version, wed probably have a keyspace that exceeded the 160 bits present in a Bitcoin address to begin with, though I didnt do it because I didnt consider it necessary. Its a trivial change if consensus says otherwise.
220	2184519	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184519	casascius	Do you suggest that a 56-character private key format that uses only uppercase be implemented instead of, versus in addition to, the 22 character format I propose? You make a very good point, in that with such a scheme, a smaller QR code becomes possible without any question as to whether a reduction is lessening security. My physical bitcoins aside, I believe a short-to-type private key format is highly valuable and important to Bitcoins future. I foresee Joe Sixpack buying bitcoins for cash at a pawn shop or check cashing place, and him receiving them in the form of a pre-made scratch-off card that gets activated (read: loaded) at the register. Which he will then take to the Bitcoin-accepting online marketplace of his choice, and type it in for instant credit. He may or may not be able to scan a QR code, and this Joe wont be downloading clients or block chains. Typing 50+ mixed-case characters really sucks (done it numerous times), but especially for Joe. Even 22 sucks, but thats already flirting with the minimum enough and there is not much that can be done about that.
220	2184526	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184526	sipa	* I misunderstood one thing: the 0-byte tests are ORed; that means indeed 7 bits of error correction instead of 16. This does mean that if I were to attack, Id just try those strings that hash to a 0 byte after 1 step first. Otherwise said, I can calculate half of all minikeys by only doing 256*58^21 SHA256 steps. Thats not really a problem, but it makes the 717 rounds more or less pointless. * We were talking about a different kind of collision resistance: there are 58^21/128 = 2^116 valid minikeys. If there are a lot of these in use (say 2^30), the chance of hitting one by generating a lot of them (which indeed requires an EC multiply + some SHA256 steps) becomes more likely. I think this is only a problem in theory. The real question is how useful it is to have it implemented by default in the client, which encourages people to use a (slightly) less secure system than full keys, which probably suffice for most purposes (imho).
220	2184557	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184557	gmaxwell	The ec multiply is just slow on our existing cpu implementations. Gate count wise its _much_ faster than sha256. (of course, youll still also need 1x sha256+ripemd160 to get an address) I think youve missed the point on the birthday paradox issue: Im not proposing that this somehow makes it easier to find the private key from the address or anything like that. There are N=58^21 possible keys (minus the ones lost to checking), there are M being used. These are the only figures you need to know to figure out the probability of two identical keys coming into existence by chance. When M=sqrt(N) its 50%. The interior operations are as irrelevant as the 86400 seconds in a day are to the traditional birthday paradox example. :) For your use this level of security may be adequate. But if this is put in the software it will be used for other things, and I dont believe it is adequate for very many things. (If youd reached 2^160 Id have nothing to complain about). I dont follow why you did the either/or check (Id correctly used the 7 bit number initially, but sipa corrected me on IRC doh, not that Im also not guilty of misreading the code). Why isnt this sha256^n(key)[0]&127==0 ? The early check reduces the security of the strengthening (and makes analysis harder) without providing a substantial speedup. Generating these keys in javascript is a bad idea. The current browsers JS does not provide an appropriate environment for security-important operations. The security of the official bitcoin software and its standard feature set should not be compromised by performance considerations related to poor performance in things that are a bad idea to begin with.
220	2184564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184564	casascius	If you calculated half of all the minikeys and ignored all the ones that needed 717 rounds to generate, youd only victimize those who elected to use the ones that passed on the first round. Those who follow the best practice of only using only the ones that pass on round 717, and not on round 1, where able, are not going to be affected. On the other hand, if youre a javascript and you need to quickly generate an address to collect a payment thats going to get swept to another wallet right away anyway, the option for a 1 round key comes in handy. Supporting the import of these private keys in the client doesnt in and of itself encourage their unnecessary use. The average joe user isnt going to be making the decision as to which kind of key to use, these decisions are presumably going to be made by developers who would have the intellectual means to weigh whether generating minikeys versus full keys in their app is a good design decision. I think it would be irresponsible to put a "generate minikey" button in the client. But I dont think it serves any useful purpose to not accept them as imports and instead demand the user use some other utility to get the job he already needs done, done. (Having him find and download the other utility exposes him to a new class of risks by itself, far more frightening than a brute force attack on the key space).
220	2184680	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184680	casascius	I used the "either or" check so that there would be a means to generate a crappy key if you only need it for a short time for a crappy purpose. In other words, if you have the means to select a key that passes the 717 check and not the 1st check, then by all means do that. That means, to generate a "better" key, explicitly discard all the candidates that pass on the 1st check. I agree with you that javascript is a poor environment to be generating keys, and I mention it only for ease of illustration. Minikeys could be needed in the context of an interpreted language on a server, or on a microcontroller. Imagine a check cashing shop that sells BTC and uses a VeriFone point-of-sale credit card machine to generate and issue a minicode on a piece of receipt tape - a very plausible application. That little box with its 400 MHz underclocked ARM and 2MB memory might not be able to do 180000 SHA256s in any short order, and 95% says the dude buying it is probably going to redeem it that same day, so the window of opportunity for a thief is vanishingly short. On the other hand, lets kick around as granted the conclusion that this is a bad idea. What do we want Joe Sixpack to do instead when he acquires a private key given to him on paper? We could make him type 51 characters instead of 22, sure. We could make him type 26 or 30 as well. We could make him scan a QR code, but its likely he either has nothing to scan it with, or is almost certainly going to have to hand-key it off his cell phone and into his computer, making the QR code of no benefit and nothing more than an extra burdensome step. I suppose its fair to say that a minimum length keycode is universally desirable, and its really just where to draw the line of being reckless with security. Let me also propose an alternate solution. The key space for my proposal is all of those who pass the SHA256 check with the magic byte "00". What if, in addition to this, we define another key space, and thats all of those 22-character base58 codes who fail my check but pass with magic byte "01". And then we utilize a far more computationally intensive key derivation function to compute the 32-bytes in place of SHA256, that dwarfs both SHA256 and EC in resource complexity, and define that as the best practice for generating such short keycodes. And then still leave 717 and even 1-round SHA256 as a weak option so that microcontrollers can still stay in the game where needed.
220	2184920	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2184920	casascius	Example: use PBKDF2 whenever SHA256(code + ?)[0]==0x01, and further, use the next byte (sha256()[1]) to encode the number of iterations needed to derive the key, exponentially (2^n), so that its difficulty is easily scaled (or 2^(n/4) to increase the useful range of choices). So a code whose sha256(code+?) starts with 0x01 0x28 would derive the key with 1024 (2^(40/4)) rounds, and one whose check hash starts with 0x01 0x60 would use 16777216 rounds (2^(96/4)). An upper bound would have to be hardcoded to prevent CPU DoS attacks on servers that accept redemptions, which would be increased by consensus as computing power advanced.
220	2185128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2185128	casascius	OK, there it is. Proof of concept with PBKDF2, at least, at casascius/bitcoin. For testing purposes, I have commented out the wallet scanning, so all the delay experienced can be attributed to PBKDF2 and not the wallet scanning. I also got rid of the 717-round stuff. I havent used any such codes on physical bitcoins so it can be scrapped right now. So my submission either accepts a 1-round SHA256 if the test hash starts with 0x00 (as used on physical coins), and uses PBKDF2 if the test hash starts with 0x0100 thru 0x0150 (rejecting all else). Using 0x0150 does PBKDF2 with 1048576 iterations, and it takes my machine about six seconds to derive the key at that rate. Using 0x0128 uses 1024 iterations, and the delay is imperceptible (to me as the user). If accepted, the hardcoded limit should probably be somewhat lower to avoid DoSs. Here are some test keys. Sksec8N4Pb9x3EmKChBq9c - ?=0x0128 - calls for 1024 iterations SmbM4uRBu2mQymCsuMKkiW - ?=0x0130 - calls for 4096 iterations Sou6jrw7YW8oeQjXeS8J5u - ?=0x0138 - calls for 16384 iterations SU6ppdqUTS3KWcnZuFxebf - ?=0x0140 - calls for 65536 iterations STk4hKyfJdXdZ2cZG3VByy - ?=0x0148 - calls for 262144 iterations SmEVr24rSdaUgnmX8LwpeM - ?=0x0150 - calls for 1048576 iterations S172quV4MT1ESiS5REfFQx - ?=0x0151 - will get rejected due to being past current hardcoded limit. EDIT: I previously had a brainfart and put 16777216 instead of 1048576 iterations. 1048576 is the correct number.
220	2690578	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2690578	T-X	"What do other people think about support for mini private keys?" Sounds like an extra feature which will need extra attention. Maybe it should be added as an additional commit on top later and should be further discussed under a separate pull request after the "straightforward" 51-character base58-encoded import/export version got added?
220	2722546	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722546	runeksvendsen	**EDIT: I got rid of the below error by adding an include in bitcoinrpc.cpp for boost/filesystem.hpp** I get the following error when I try to build the showwallet branch with gcc 4.6: g++ -c -pthread -Wno-invalid-offsetof -Wformat -g -DNOPCH -DUSE_SSL -fno-stack-protector -fstack-protector-all -Wstack-protector -Wl,-z,relro -Wl,-z,now -D_FORTIFY_SOURCE=2 -O2 -MMD -o obj/nogui/bitcoinrpc.o bitcoinrpc.cpp bitcoinrpc.cpp: In function void ThreadRPCServer2(void*): bitcoinrpc.cpp:2213:9: error: filesystem has not been declared bitcoinrpc.cpp:2213:26: error: expected ; before certfile bitcoinrpc.cpp:2214:14: error: certfile was not declared in this scope bitcoinrpc.cpp:2214:49: error: filesystem has not been declared bitcoinrpc.cpp:2215:13: error: filesystem has not been declared bitcoinrpc.cpp:2215:32: error: certfile was not declared in this scope bitcoinrpc.cpp:2217:9: error: filesystem has not been declared bitcoinrpc.cpp:2217:26: error: expected ; before pkfile bitcoinrpc.cpp:2218:14: error: pkfile was not declared in this scope bitcoinrpc.cpp:2218:45: error: filesystem has not been declared bitcoinrpc.cpp:2219:13: error: filesystem has not been declared bitcoinrpc.cpp:2219:32: error: pkfile was not declared in this scope make: *** [obj/nogui/bitcoinrpc.o] Error 1 Im using gcc 4.6.1, libc6 2.13 and libboost 1.46 from Debian sid (the Linuxcoin distribution). I have tried with gcc 4.5 as well, same error. The regular bitcoin branch builds without issues.
220	2722622	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722622	sipa	Thanks for reporting - an include was missing. It should be fixed now.
220	2722857	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2722857	runeksvendsen	Thank *you* for adding this feature. I just tried importing a private key using this version of bitcoind on an offline computer, running Linuxcoin from a USB stick. I am now back in my everyday OS, Ubuntu, and everything seems to have worked fine - and I received no errors when importing the key, although it took a while. So consider it a thumbs up for the importprivkey command from here!
220	3204437	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3204437	gavinandresen	I just pulled the other dumpprivkey; is this one now obsolete?
220	3204692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3204692	sipa	No, this one still contains removeprivkey and dumpwallet/importwallet. Ive rebased them against current master now, but Ill close the request until its more clear what dumpwallet/importwallet should do (theres talk of including addresses, for example).
220	3204699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3204699	sipa	closing
218	1142845	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1142845	TheBlueMatt	Looks cool and it seems the consensus is/was that this is a good idea.
218	1142935	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1142935	nanotube	maybe separating the minimum txout value from the CENT constant would be a good idea as well? another suggestion: maybe to be more descriptive, TX_FEE should be called MIN_TX_FEE?
218	1142940	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1142940	gavinandresen	Looks OK to pull to me, if you can get somebody else to sanity test and bless then I say pull it.
218	1144073	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1144073	sipa	looks good, compiles and runs; ACK
218	15324707	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15324707	mai77	TX fee to 0.0005 BTC fee = 3 cent for a simple transfer. my commercial bank is cheaper than that. 0.0005 btc is far to expensive. 0.3 cent might be OK
218	15325063	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15325063	gmaxwell	This is about the smallest payments permited before triggering required fees, not the amount of the fees... and it is a reduction from 0.01.
218	15325538	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15325538	gavinandresen	: does your commercial bank really let you send money anywhere in the world for less than 3 cent ?
218	15327802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15327802	mai77	If the fee is too high, which it is, bitcoin cannot be a micro payment system anymore. The fee should just disincentivize spammers. I get SEPA for free, even the mTAN SMS is on the bank. If btc exchange rate is rising further, 0.0005 btc is too dear.
218	15329037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15329037	jgarzik	Bitcoin was never a micro-payment system to begin with.
218	15334447	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15334447	mai77	But you realize how tremendously important the fee is. In terms of product policy it is "make or break" for a potential future micro payment capability.
218	15715634	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15715634	rebroad	Does mai77 have a point? I would be interested to hear reasons for not reducing it further.
218	15716129	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15716129	gavinandresen	The transaction fee needs to float; changing it arbitrarily every six months is not the right way to handle it.
218	16004223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16004223	mikehearn	As an interim stopgap solution, the anti-DoS fees could be updated by signed broadcast message. Its conceptually the same as having the fees be set by the software but means fees can be updated outside the release cycle and you dont get failed relays due to version skew. (yes yes, centralization, I know, but its no worse than the current setup and can be implemented in one or two patches)
218	16364629	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16364629	Eeri	I see 3 options, -Set it in the code and update with every release. -Have it broadcast via central control. -Set it via user input. For obvious reasons only one option is in keeping with no central control. Simple idea. Two text boxs on the main interface of the client. -One for the current price in USD of one BTC. -The other for the fee in USD. Example 1 penny. Use that to calculate the fee in BTC. At the same time you can use that to set the transaction relay values. In this way the entire set of values are controlled by the users. This is the only way to keep it decentralized and in the users control. One additional thing i would add though, have the client include the users currently set fee when connecting to other clients as well as a list of fees for the clients its connected to. this way the client can give the user a rough idea of whether the fee they have set will be relayed in the network. Ex i am connected to 10 peers that are connected to 10 other peers. in total id have a list of 110 user set fees that would allow the client to tell the user his transaction will be relayed by 60%~ of the network Etc. Im not sure you could possibly have any better solution then this.
218	16364671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16364671	robbak	If you have a service to convert a USD value to a number of bitcoins, you have a central control. On 15 April 2013 12:21, Eeri <notifications@github.com> wrote: > I see 3 options, > -Set it in the code and update with every release. > -Have it broadcast via central control. > -Set it via user input. > > For obvious reasons only one option is in keeping with no central > control. > > Simple idea. > > Two text boxs on the main interface of the client. > -One for the current price in USD of one BTC. > -The other for the fee in USD. Example 1 penny. > > Use that to calculate the fee in BTC. > > At the same time you can use that to set the transaction relay values. In > this way the entire set of values are controlled by the users. This is the > only way to keep it decentralized and in the users control. > > One additional thing i would add though, have the client include the users > currently set fee when connecting to other clients as well as a list of > fees for the clients its connected to. this way the client can give the > user a rough idea of whether the fee they have set will be relayed in the > network. Ex i am connected to 10 peers that are connected to 10 other > peers. in total id have a list of 110 user set fees that would allow the > client to tell the user his transaction will be relayed by 60%~ of the > network Etc. > > Im not sure you could possibly have any better solution then this. > > > Reply to this email directly or view it on GitHub<https://github.com/bitcoin/bitcoin/pull/218#issuecomment-16364629> > . >
218	16422117	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/16422117	Eeri	im talking about user input, not about a service that pipes data into the client behind the scenes.
215	1149420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149420	sipa	ACK. The "" account can already go negative because of simple sends anyway.
215	1149430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149430	TheBlueMatt	ACK
214	1247248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1247248	jrmithdobbs	This works great for me as is and is a good first step to fixing this.
214	1257837	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1257837	shanew	Can you rebase? This doesnt apply to current tree.
214	1259583	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1259583	jordanlewis	Rebased to current tree.
214	1319552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1319552	shanew	Using this patch on a heavily loaded bitcoind, I am getting quite a few: reservekeyfromkeypool(): read failed from send transactions. I backed out the patch and so far so good but time will tell. Are you aware of any wallet locking issues with this async code?
214	1339522	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1339522	dlancer	Can you rebase with latest version? With transaction fee 0.0005 ? Why this important pull still not merged with upstream?
214	1364748	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1364748	jgarzik	Any updated test results, from heavily loaded bitcoinds?
214	1385997	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1385997	doublec	Im running this patch on a loaded server. It works fine, but Ive seen one problem. If I do "bitcoind listtransactions" I get a correct list of transactions. If I do "bitcoind listtransactions "" 1000" I get: error: couldnt parse reply from server
214	1386030	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1386030	jgarzik	Any chance you can look at wireshark output, or some other way of dumping the network traffic, and see whats going on? Sounds like output was truncated somewhere.
214	1386043	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1386043	doublec	Yep, Ill do that in a day or so and report back.
214	1387943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1387943	jrmithdobbs	I dont have the dumps I made handy but Ive seen this issue as well. It only seems to happen on large RPC calls like listtransactions. I actually ran across it testing out sipas showwallet branch for privkey import/export and didnt make the correlation until seeing your comments. Reverting this makes it stop happening. So theres definitely an issue here and this shouldnt be pulled until resolved. The dumps I did showed it just cutting off in the middle sometimes or sometimes leaving out chunks of the response that made the json not validate.
214	1388936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1388936	jordanlewis	Thanks for the testing guys. Ill look into this issue.
214	1393618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1393618	jrmithdobbs	Some more info. It also happens on RPC requests *receiving* a lot of data. Eg, sipas importwallet. The "alot" seems to be around the 1k boundary or so from my very brief testing.
214	1439471	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1439471	jine	Im willing to pay to get this fixed and working in production use. Also looking for a keep-alive solution which would reuse connections to bitcoind.
214	1458085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458085	ius	See comment above. A possible fix: Im not familiar with boost though, so there might very well be a better solution.
214	1491109	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491109	JoelKatz	If your plan is to optimize the RPC code, youre kind of barking up the wrong tree. The socket I/O is only about 3% of the load coming from the RPC code. If you just want it to handle more than one connection at a time and keepalives, just dispatching the RPC to a thread (and fixing the protocol handler to close the socket when its the right time) does it. The breakdown is, roughly: 30% Do the actual operation (various based on the operation, of course) 20% Parse JSON request 20% Generate JSON reply 15% Parse HTTP 4% Check user/pass/IP 3% Socket I/O 2% Make JSON reply 1% Send HTTP reply This is still the right thing to do. However, there are much simpler and less invasive ways to accomplish the same thing. Now, if you had done this for the net code, that would actually make a huge difference.
214	1491134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491134	jgarzik	you missed the point. This is not an optimization, but a big step towards correcting a major design flaw. The current RPC code executes HTTP requests in order, in a FIFO queue. You can find examples of this logic in "My First TCP Server" style code examples, but never in any production server. A synchronous, FIFO approach stalls all clients except the "current" one. If the current client is, itself, stalled or slow or misbehaving, then all other clients suffer. Asynchronous I/O + HTTP/1.1 keep alives are desperately needed to solve obvious problems seen in the field by heavy RPC users.
214	1491258	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491258	JoelKatz	As I said, that issue is more easily solved by simply dispatching the RPC to a thread and making the trivial fixes to the keepalive logic. There arent enough RPC connections, and the operation order is always accept/read/write, so you dont get any benefit from asynchronous I/O. In contrast, in the net code, you have many connections and unpredictable operation order. That code would significantly benefit from async I/O.
214	1491260	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491260	jgarzik	One thread per RPC connection is unscalable in many modern workloads. That is also potentially DoSable, if youre not careful.
214	1491291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1491291	JoelKatz	I dont think many people, if any, expose their bitcoin RPC connections to the world. So I dont think the DoS issue is particularly important. I guess you could argue that they dont because they cant, and if they could, they might. But I think most people run a bitcoin client on each machine that needs to issue RPC queries and should bind their RPC listening sockets to localhost only. As for RPC not being scalable in modern workloads, I would argue that modern workloads include proper support for keepalives and dont require large numbers of connections. If theres a realistic case where asio for RPC provides any benefit over thread-per-connection with proper keepalive support, I dont know what it is. Again, I still think this patch is "the right thing to do", but I dont think there will be any actual benefit in any realistic use case. (Again, over dipatching the RPC calls to threads and fixing the broken HTTP keepalive implementation. You have to at least do that.)
214	1577433	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577433	jgarzik	Any rebase / update for current tree?
214	2247130	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2247130	alexwaters	The pull has become unmergeable (without conflicts), and will be closed in 15 days from this message if action is not taken. To prevent closure, kindly rebase the pull to merge cleanly with the current codebase. If a time extension is needed, please respond to this comment or contact QA@BitcoinTesting.org.
214	2249488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2249488	jordanlewis	Sorry guys, I dont have the time to maintain this pull indefinitely. Anyone please feel free to rebase and maintain yourself. I think its an important patch.
214	2464974	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2464974	alexwaters	Closed pending rebase / additional commentary. The rebase label has been applied.
213	1125080	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125080	jgarzik	This is not correct. The point of fUseUPnP is that it should always evaluate to false if upnp is absent. That puts the #ifdef in a single location, rather than requiring an ifdef at every site, crapping up the code.
213	1125101	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125101	dholbert	ah -- perhaps ths change should actually be "#ifdef", not "#if"? It looks like fUseUPnP is only defined if USE_UPNP is defined -- quoting main.cpp: <pre> #ifdef USE_UPNP #if USE_UPNP int fUseUPnP = true; #else int fUseUPnP = false; #endif #endif </pre> ...though its declared unconditionally in main.h: <pre> extern int fUseUPnP; </pre> Maybe "fUseUPnP" should be defined & set to false in main.cpp, if USE_UPNP isnt defined?
213	1125228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125228	TheBlueMatt	Probably should be, though it doesnt cause issues unless you have stale outputs in obj/*
213	1125332	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125332	dholbert	OK, this latest commit reverts my original changes, and instead groups the "USE_UPNP undefined" situation in with "USE_UPNP=0" situation, for defining fUseUPnP. > Probably should be, though it doesnt cause issues unless you have stale outputs in obj/* It actually did cause issues for me, the first time I ever built bitcoin.
213	1125446	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125446	TheBlueMatt	What compiler version? The only ones Ive ever seen dont cause problems there. Did you not start to compile with USE_UPNP=0/1 then stop and go back and compile with USE_UPNP=
213	1125661	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125661	dholbert	> Did you not start to compile with USE_UPNP=0/1 then stop and go back and compile with USE_UPNP= Sorry, yeah -- youre totally right. I thought I was building from scratch, but I think what happened was: * I initially built using stock bitcoin source (no makefile tweaks) * That failed since I dont have the UPNP library. * Then I tweaked makefile.unix to have "USE_UPNP:=" * ...and that gave me the error described in issue #212. So this indeed only seems to be an issue when you build with stale object files in /obj. Still, I think the above series of steps are probably not uncommon, among people who lack the upnp library, so I think its a build use-case thats worth being concerned about. :)
213	1125766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125766	TheBlueMatt	Well, it doesnt matter that much as the autotools stuff should fix all this.
213	1149373	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149373	jgarzik	Can someone roll these into a single commit, please? It is ready to pull, otherwise. We prefer not to pull in situations where were pulling "commit A, now commit B fixes commit A" type situations, to avoid cluttering the upstream bitcoin git history.
213	1149432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149432	dholbert	I can do that, sure - should I just do that as a fresh commit & fresh pull request, then? (sorry, Im new to github)
213	1149438	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149438	TheBlueMatt	Did it for you :), fUseUPnPfix branch, ACK.
213	1149440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149440	dholbert	ah, thanks! :)
213	1149472	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1149472	jgarzik	pulled bluematts fix
209	3269558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3269558	luke-jr	Perhaps theres a way to compare the two systems hostnames?
209	3290333	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3290333	laanwj	But if the host is remote/tunneled, wouldnt it make sense to use a fully qualified path in the first place? I think, in general, with this API you always want to send a fully qualified path to make sure the backup ends up in the right place. Maybe the API should be similarly changed to reject non-fully qualified paths, to prevent (extremely sensitive) backups from being written to places the user doesnt expect them.
209	4046031	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4046031	sipa	What about retuning a serialized version of the snapshot of wallet.dat through RPC, and let the RPC client store it somewhere?
209	4046051	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4046051	luke-jr	That opens up a whole new level of security issues.
209	4059408	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4059408	laanwj	Would it make a large difference, security-wise? You can already request all the private keys through RPC isnt it?
209	4060908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/4060908	luke-jr	Forgot that was merged. Nevermind.
209	5016814	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5016814	sipa	Sending more than a few megabytes over RPC becomes a problem though - and there are certainly wallets that large out there.
209	5098236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5098236	laanwj	Agreed. What are we going to do here?
209	5586301	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/5586301	jgarzik	Closing. Please either 1) Update code to require full pathname, or 2) Update code to send entire wallet via RPC, which admits is a mostly-rewrite
208	1122013	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1122013	jrmithdobbs	i suck at github.
205	1120477	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1120477	gavinandresen	Good idea. Can you squash the remove debugging printf" commit into the main commit? (git rebase -i 5ca978c and then git push, I think)
205	1120722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1120722	forrestv	Okay, I think I managed that :)
205	1121430	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1121430	jgarzik	ACK
204	1187886	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1187886	jgarzik	Can you please rebase and re-open this pull request? Thanks.
203	1120096	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1120096	CAFxX	I see you took into consideration the issue of the password/key being swapped out but didnt actually write any code to prevent it. You should use mlock (unix) or VirtualLock (windows) to prevent memory from being swapped (the correct way of doing this is: allocate, mlock/VirtualLock, use the memory, when done overwrite it (random data is better than 0s), deallocate). Note: this still wont protect from other processes peeking at your memory, at least on windows.
203	1120108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1120108	TheBlueMatt	Yea the whole ramdump to see password/key is pretty much impossible to prevent no matter what you do, so Im really not going to try to fight it. Though, Im planning to add more security to the encryption later, but having it now really isnt worth it for several reasons (see the original forum thread by jgarzik linked by the one about this pull).
203	1120196	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1120196	TheBlueMatt	As a side note, preventing any kind of key leakage is pretty much impossible in C++ when the user is entering the key in wx. If nothing else, the current value of the password dialog might end up in swap. Ill try to add a bunch of memlocks and memset/fills tomorrow but I dont think its possible for it to be 100%.
203	1121346	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1121346	CAFxX	I guess so, unless we also patch wx in the process.
203	1122111	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1122111	TheBlueMatt	Now with more mlock(). Note I made a conscious decision here that I only bother to keep the actual password entered by the user out of memory/swap as much as possible, not the derived key or the private keys themselves. I have a separate branch which encrypts private keys in memory (much easier than not loading until needed in the current architecture) but still keeps the key to decrypt them in memory. Hopefully someone has the time to patch bitcoin to be a bit more careful about when it generates private keys and make it possible for password entry only at decrypt-time.
203	1122114	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1122114	TheBlueMatt	Note that any password longer than 100 characters will only have the first 100 mlock()d, but if you cant derive the key without all of the password, so Im not concerned.
203	1122137	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1122137	CAFxX	maybe adding some comments about this might help (eventually also mentioning that currently theres no way to stop another process from peeking and that we dont deal with hibernate-to-disk)
203	1129745	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129745	TheBlueMatt	Now with more comments to clarify the purpose of mlock()s and such. Now the question: I have a WIP branch which decrypts private keys only at spend-time (or it will in a couple days). Still a couple things to tighten down, but the question is which would rather be seen in bitcoin?
203	1131896	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1131896	CAFxX	well, keeping the keys encrypted in ram as a method to prevent other processes from reading it is pretty useless unless we manage to lock out all other processes from accessing our memory. reasking the password at spending-time is a good opt-in setting, but doesnt require keeping the keys encrypted in ram. so If I had to choose Id definitely say wallet encryption over privkey encryption in ram. it would probably make more sense to have an hardware token (something like one of these ) storing the privkey and doing the actual signing (so that the privkey never leaves it).
203	1197019	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1197019	TheBlueMatt	Superseded by #232 closed.
202	1116977	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116977	jrmithdobbs	Now with less USE_UPNP removal.
202	1116979	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116979	jrmithdobbs	FYI These are syscalls and system lib deps that shoud be available to any linux distro running 2.6.32+.
202	1118922	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1118922	sipa	Can you create a forum thread about this?
202	1119294	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1119294	jrmithdobbs	Done:
202	1573730	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1573730	sgimenez	Isnt it possible to use setcap to choose exactly which capabilities shall be kept and which shall be drop ? Whats the point of modifying them from bitcoin code ?
202	1577455	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577455	jgarzik	I just dont see many other security-related/crypto-related programs using this, and guarding against running as root is really tilting at windmills. There is a long list of dumb things you should not do, such as run wallet software as root, and I think its low on the priority list, as it does not seem to be a prime attack vector.
202	1612708	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1612708	jrmithdobbs	This has nothing to do with guarding against running as root. That is just a side effect?! Also, quite a bit of software uses these mechanisms. For instance: (off the top of my head) bind uses it. The entirety of the priv escalation code in the kernel (setuid binary processing, etc) uses it. The bounding set feature that lets you set a mask of capabilities that can be re-enabled is fairly new but the underlying mechanisms have been in place since 2.4 iirc. And to answer you sgimenez this code isnt just removing all capabilities. Its setting the *capabilities bounding set* so that *nothing spawned from the bitcoin process can ever re-enable them*. See the referenced documentation in the original pull.
201	1116965	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116965	jrmithdobbs	Did not mean to commit that removal of USE_UPNP:=0 my bad.
199	1115449	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1115449	gavinandresen	How did you test that this does the right thing through a block split/reorg?
199	1115931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1115931	cdhowie	I didnt, since Im not sure how I could create such a situation with the amount of computing power I have. I believe it will do the right thing since Ive read the CBlockLocator sources.
199	1116108	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1116108	gavinandresen	You should be able to pretty easily simulate block splits by setting up a small "testnet-in-a-box" network -- see Process would be something like: Send a transaction or three while generating on testnet-in-a-box. Verify that the transactions are confirmed. Then shutdown that testnet-in-a-box and start a new one. Generate a longer chain. Then join the two chains (restart a -nolisten testnet-in-a-box node from the shorter chain, and -connect it to the longer-chain testnet-in-a-box) and make sure listsinceblock does what you expect. In case it doesnt, you should probably save away the shorter and longer chains (just save the datadirs somewhere), so re-testing is easy.
199	1118931	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1118931	sipa	CMerkleTxs (and by extension CWalletTxs) support looking up in which block they are (see CMerkleTx::GetDepthInMainChain(CBlockIndex* &)). I believe it is better to loop over all wallet transactions, and filter them by looking up where they are in the main chain, than to loop over the whole block chain (loading it from disk), and then finding wallet transactions that match it. The block chain wont be available in client-only mode anyway.
199	1237464	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1237464	cdhowie	Gavin, I did the test today and the command does do what I expect. This was after modifying the commands implementation per sipas suggestion.
199	1299420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1299420	backburn	Patched 322rc4 with this the other day. Seems to be working, great feature. Merge :D
199	1452128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1452128	pixelglow	Might be useful to have block id against each txn, not just the last block id. For example, perhaps Im searching for all txns with confirmations > n. If I find some txns with confirmations <= n, I have to note them down in the synced database and recheck them later. But if we got block ids back for the txns, we could restart the scan somewhere else other than the last block to look for these confirmations. Also would be good to get some sense of time ordering of the block ids as well.
199	1458399	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1458399	cdhowie	I had that in at some point and Gavin asked that I remove it. :) But its a one line change to add it. The transactions should be listed sorted by block. So in terms of the time that the blocks were created, you can infer that from the time the transaction happened. If all you care about is which blocks came before which blocks, then you dont even have to look at the transaction times, just their order.
199	1460011	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1460011	pixelglow	I suppose there are two ways of adding block ids for txns. You could tag each txn with the block id e.g.[ { txid: 1, block: abc }, {txid: 2, block: abc} ... ] but since there are multiple txn per block and you are already sorted by block order you can do a more normalized { block: abc; txns: [ { txid: 1}, {txid : 2} ...] }. The feature in general would make it so convenient to pick an arbitrary block to get txns forward from e.g. if you are looking for confirmed txn only.
199	1467210	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1467210	gavinandresen	Block chain re-orgs change what blocks a given transaction is in, which is why Im dead-set against putting them in transaction information. Transactions already have confirmations, which tells you how far back in the best-block-chain to look for the block that contains that transaction.
199	1468848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468848	cdhowie	Im thinking that a "minimum confirmations" parameter would solve this nicely. If you only want transactions with six confirmations or more, you call "listsinceblock (block-id) 6" and all of the recent transactions with 6+ confirmations would be reported. The "lastblock" property on the result object would then contain the hash of the sixth most recent block instead of the most recent. This way, when you run the command later, transactions that had under 6 confirmations last time will be reported if they have 6+ now.
199	1471413	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1471413	pixelglow	that is an excellent idea and solves exactly the issue I have with confirmations. I cant see any other reason why someone would need to look at earlier blocks than the last, other than checking confirmations. (But then again, Im a newbie when it comes to bitcoin :-) ).
199	1514952	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1514952	cdhowie	Ive implemented the requested change; the second parameter specifies the depth of the block you want to obtain as the "lastblock" return property. The default of 1 will return the latest block ID, while 2 will return the second-latest block ID, and so on. The command now outputs transactions with zero confirmations in addition to those in the newer blocks so that applications can act on them in some way, such as show them as pending in a UI. Note that the second parameter **does not** in any way affect which transactions are returned; if you only care about transactions with N confirms, you will pass N as the second parameter, and then filter the results down to only those with N+ confirmations. This will ensure that the next time you run the command with the new lastblock value you wont miss any transactions that have now reached N confirmations. But it will allow applications that want to specially handle transactions with <N confirmations to do so as well. So this command neatly hits both use-cases. **Edit:** Ive also rebased against master.
199	1593253	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1593253	pixelglow	Ive integrated this into my bitcoin exchange (currently only as a JSON API to the backend) and it works quite well in replaying transactions into the PostgreSQL backend. Thanks. Cant wait to see this in the mainline.
198	1111967	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111967	gavinandresen	Forum thread:
198	1422247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1422247	gavinandresen	Made it work with the re-organized CWallet codebase... ... but Im not 100% happy with it. Im not sure it properly handles block chain re-orgs and dependent orphan transactions. Would be nice to write some tests to exercise those edge cases, and figure out what it SHOULD do in those cases.
198	1424215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1424215	sipa	I believe it will only do the callback for newly arriving blocks when doing a reorganisation, and not for replacements of older blocks (didnt test it though). If thats not what you want, the call to monitorBlock() should go in CBlock::ConnectBlock() (called for each block thats being added to the main chain). Dependent transactions are only used for self-created transactions, so that isnt an issue I believe. Also, if monitortx is only for your own transactions, i believe its list of listeners should go in CWallet (at least for now), and the callback in CWallet::AddToWallet(). I intended the dispatch functions in main.cpp (incl. SyncWithWallets) to be replacable with a generic listener system one day, so i prefer them not to contain any real logic.
198	2197996	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2197996	gavinandresen	Closing this for now; code is still in my github tree, but Im working on what I think are higher-priority things right now.
196	1108453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1108453	TheBlueMatt	Im getting kind of tired of explaining this. USE_UPNP=1 means UPnP is on by default. USE_UPNP=0 means UPnP is compiled in and off by default. If you undefine USE_UPNP by building with USE_UPNP= UPnP is not compiled in any the errors go away. Please do a bit of searching before submitting bug/pull requests.
196	1110047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110047	amiryal	OK, thanks for the clarification! Now if you pull my revised patch, people will get this clarification in `build-unix.txt`.
196	1110390	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110390	TheBlueMatt	Now that is a great idea. (and here I was thinking that was already in there) sorry for going off on you.
196	1110488	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110488	amiryal	Your earlier comment was constructive nonetheless no offense taken. :)
195	1112323	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1112323	sipa	Forum thread:
195	1577459	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1577459	jgarzik	Needs an update/rebase, since were wanting wallet import/export?
195	2198249	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2198249	sipa	Needs an update indeed, Ill close the request until then.
193	1105474	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1105474	jgarzik	ACK, looks good
193	1106041	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106041	sipa	Compiles, works, and doesnt seem to touch any non-GUI code.
192	1093984	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1093984	jgarzik	This is a recent rough draft, but it needs improvement. Think about the object structure a bit. You want a "CAddress factory", that will create one or more CAddresss from a DNS lookup. Supporting a multiple-address lookup from *inside* a singleton address object is awkward, because DNS lookups have a one-to-many relationship between DNS names and addresses. The "create higher nIndex, until address returned is invalid" is unusual for this reason, and the code should be refactored. You want a helper (CAddressFactory?) that returns one or more CAddress objects, from a DNS lookup. Because a DNS lookup may produce multiple addresses, this cannot be inside the CAddress implementation itself.
192	1099269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1099269	sipa	I agree, actually. I moved the lookup code to a NameLookup function that creates a CAddress or a vector of those, and is used in the (single-address only) lookup version of the CAddress constructor, for convenience.
192	1106091	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106091	jgarzik	ACK, thanks for revising
192	1110829	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110829	jgarzik	Forum thread
192	1110871	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110871	jgarzik	My finger was hovering over the "Merge pull request" button, but I found a last minute issue. Eventually, we do want to support IPv6. Satoshi reserved space for it in the P2P protocol address storage area, and it will be needed in years to come, to connect some clients. As such, please separate hostname and port into two distinct function parameters / variables, and do not combine them into a single string "host:port", only to be parsed and separated in NameLookup() Rationale: 1) It is recommended due to IPv6 that this convention be avoided. IPv6 addresses contain a colon, implying that proper parsing requires users to specify a bracketed string, if you are specifying a port: [0:1:2:3:4:5:6:7]:8333. For this reason, all new APIs -- most notably, libc function getaddrinfo(3) -- always keep hostname and port separate. 2) gethostbyname(3) is deprecated, and we need to switch to getaddrinfo(3). The commit is fine as-is, and relies on a well-tested API, so I did not request revision. But long term, again due to IPv6, it is recommended that all applications use getaddrinfo(3). This function is supported in winsock, freebsd (macos) and linux, all our supported platforms. So, separate hostname and port, and youre golden with this commit. Thanks.
192	1110891	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110891	sipa	I actually started writing this patch by using getaddrinfo, since its interface is much cleaner and supports seamless upgrading to IPv6. Not knowing what the compatibility of that is with other operating systems, i sticked to gethostbyname. Considering IPv6 hostnames, I would suggest first trying to parse the string passed as [host]:port, and if this parsing fails, resort to host:port. Otherwise we will still need some function somewhere to do that parsing anyway, if people want to pass an address including a port number on the command line or config file somewhere.
192	1133776	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1133776	sipa	Added string+port number constructors.
192	1133800	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1133800	jgarzik	ACK
190	1082553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1082553	JohnMaguire2013	Ive done a bit of looking around and see I have to update my strings for translation a bit. Will post again when thats done.
190	1083214	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083214	JohnMaguire2013	Fixed. Please take a look.
190	1083239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083239	gavinandresen	Great idea! Looks good to me.
187	1071186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1071186	devrandom	Stripping binaries now.
187	1071197	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1071197	TheBlueMatt	Lurking here.
184	1050304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1050304	javgh	hm, I cant reproduce this anymore... maybe I didnt do a clean compile. Ill close this, sorry for the noise.
183	1051317	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1051317	gavinandresen	Can you start a forum thread about this? There was some concern about possible attacks revealing private keys if the attacker can send arbitrary data to be signed. Also some nits: indentation looks messed up on the git diff, and isnt there a better way to get a string into a vector<unsigned char> ?
183	1052498	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1052498	khalahan	Forum thread is available here :
183	1094397	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1094397	gavinandresen	Can you squash the 4 commits into one please? Itll make the commit history cleaner. (other than that, I agree this is a cool new feature and is ready to be pulled)
183	1106251	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106251	jgarzik	ACK, once rebased as Gavin requested
183	1106847	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106847	gavinandresen	Also: consensus on the forums seems to be that making the padding: address+padding+message ... wouldnt hurt.
183	1111528	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111528	khalahan	Here is the rebased commit plus address used as padding (cool feature the rebase/squash commands :p).
183	1115733	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1115733	amiryal	Nice work, khalahan; thanks! I am not familiar with the JSON RPC protocol, so this may be a silly question: is it necessary for the server to echo some of the parameters back to the caller? (e.g. `address` when signing and `pubkey` when verifying.) > $ bitcoind signmessage **1GsDU...** hello { "address" : "**1GsDU...**", "pubkey" : "04c4...", "sign" : "3045..." } $ bitcoind verifymessage **04c4...** 3045.... hello { "address" : "1GsDU...", "pubkey" : "**04c4...**" } Second question: why not use the `address` for verifying rather than the `pubkey`? Can the `pubkey` not be inferred from the `address`?
183	1118947	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1118947	sipa	The pubkey can indeed not be inferred from the address. I suggested on the forum to encode the pubkey in the signature output, so the verifymessage interface can take an address. (see
183	1202304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1202304	khalahan	amiryal > there is no real need to echo some of the input parameters. Should i remove duplicates ? sipa > i replied on the forum
183	1629731	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1629731	gmaxwell	The pubkey can be inferred from the address plus the signature value, however.
183	1764211	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1764211	gavinandresen	I resurrected discussion on forum thread:
183	2241956	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2241956	gavinandresen	Closing, sipa has a more refined version.
182	1303002	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1303002	gavinandresen	Does this work "out-of-the-box" on Windows/Mac/Linux in Firefox/Chrome and Safari(mac) and IE(windows) ? Does it do something reasonable if you click on a bitcoin URI if you dont happen to have bitcoin running? And is there a solution for bitcoin URIs that works if you use an online wallet service?
182	1303020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1303020	TheBlueMatt	Windows? yes, should work in any app which uses Windows native uri mapping, that means safari (win) IE, Firefox, etc, etc, etc. Linux? That is always done at the packaging level. For this to work, Bitcoin has to be packaged for the distro (as URI mapping depends on the distro). If wx2.8 gets merged, Bitcoin-wx will be in the Debian repos pretty quick, and Ubuntu not long after. Ive been thinking about putting up a personal package archive on launchpad for older versions of Ubuntu/Debian (as bitcoin-wx/bitcoind will only be packaged officially in the next Ubuntu release, and only in stable in the next Debian release). Mac? That is a bit tougher. AFAICT, mac URI/URL registering requires the use of special APIs that are Mac-native. As I dont have a Bitcoin build-environment setup on a mac, I cant really spend much time experimenting with it (I may have not done enough research and there is a way to handle URI calls the same way every other OS does, ie 2nd parameter to Bitcoin is the URI/L, but maybe a Mac developer can comment here). Bitcoin already running? Yep, if bitcoin is already running it will send the send message to the send queue of the existing Bitcoin, otherwise it will open Bitcoin and load the send dialog as soon as Bitcoin is initialized. Online wallet services? That one is a bit trickier. I know the existing chrome RPC plugin accepts bitcoin: URIs, but plugins are the wrong way to do that here. If a web site wants to register a URI on most OSes, it has to have some native client of some kind in the OS. If a web-wallet services has that, they need only register bitcoin: URIs and then let the system decide which to use (Windows + Ubuntu both have a control panel thing to let the user control this, Id assume other OSs/distros as well)
182	1309314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1309314	TheBlueMatt	I did a bit more research on doing URIs in OSX as I would like to see this merged some time and there is no way to handle URI/Ls in OSX except by using their native APIs (they dont just pass the URL as a parameter like every other OS) or some kind of wrapper script which handles URIs and opens Bitcoin. As both of those are both terrible solutions, I dont think it is a good idea to bother with URI/L support on OSX until someone does a native UI for OSX.
182	2292955	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2292955	TheBlueMatt	Implemented in bitcoin-qt
181	1083241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083241	gavinandresen	Ive been testing a similar change as part of a larger (still unresolved) bugfix.
180	1047442	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047442	sipa	Small aesthetical error: checking for wxWidgets static library... no checking if compiling with debugging symbols... no no configure: creating ./config.status The name of the generated binary seems to always be bitcoind, whether or not a GUI is included. If youre going for the "one binary, with some optional features", Id call it bitcoin instead of bitcoind. Apart from that, it looks clean and seems to configure, compile and run fine.
180	1049848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1049848	jaromil	hi sipa, ive investigated the issue behind double binary build: bitcoin and bitcoind the solution to it becomes groovy, to the point that makes me wonder about changing this naming scheme. long story short: if we keep this, then all code in src/ will be compiled twice by make, with and without #define flags that activate the gui. CPU cycles are worth :^) and as we proceed cleaning the code for a libbitcoin, then libtool will do its job and well have separated directories and test units. but lets leave that to the next pull request. the next commit implements bitcoin and bitcoind build (current behaviour) and shines up some cxxflags
180	1051099	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1051099	TheBlueMatt	Several things: 1. If you are making a pull request, you might as well just git push -f to overwrite the old commits with new ones instead of making new pull requests all the time. Github will change the pull request accordingly (unless you change the branch to match master, at which point Github closes the pull request for you). 2. You dont ship the ./configure Is that a bug or am I missing something?
180	1052327	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1052327	jaromil	hi TheBlueMatt, On Sun, 24 Apr 2011, TheBlueMatt wrote: > 1. If you are making a pull request, you might as well just git > push -f to overwrite the old commits with new ones instead of making > new pull requests all the time. wow! i didnt knew that and it saves me quite some time clicking around.. thanks :D > 2. You dont ship the ./configure Is that a bug or am I missing > something? the configure file is automatically generated by autoconf from configure.ac which is the main sourcecode for this build system. in order to generate it, run: autoreconf -i the configure file itself is never included in code revisioning, but only in tarball releases. tarballs can be produced very comfortably with make distcheck -- jaromil, dyne.org developer, GPG: B2D9 9376 BFB2 60B7 601F 5B62 F6D3 FBD9 C2B6 8E39 Donate Bitcoins to: 1EJYtvuq39hoWcventcnnvhPXh6i5QDReM
180	1052374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1052374	jaromil	speaking of which, ive just noticed the distcheck target fails to compile. that compilation target actually is there to facilitate tar.gz releases, but also to verify that the autotools packaging is well portable and working in all situations... so im having a look to fix that now in the next commits.
180	1052590	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1052590	jaromil	Pull request is now rebased to an acceptable state.
180	1106370	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1106370	jgarzik	Looks great! One final blocker: cryptopp should not be built using the libtool machinery. All that accomplishes is making it slow, and creating an annoying build process where "make -s" does not work properly. All references to libtool should be removed, and cryptopp should be built via noinst_LIBRARIES = libcryptopp.a
180	1124684	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124684	gavinandresen	I support this re-org; jgarzik, can you do the pull when youre happy? The READMEs and build-*.txts should mention running autoreconf -i to bootstrap if youre building from git.
180	1124697	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124697	TheBlueMatt	The re-org should be pulled, but autotools isnt quite ready...I was hoping (and jaromil seemed to indicate that he would work on) support for mingw cross compiling before pull (discussed after pull request was submitted). And the whole ridiculous sed action required now (4870f7d) is not really pull-ready.
180	1124735	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124735	jgarzik	NAK the mingw stuff from Matt -- it is absolutely not needed. That stuff varies from system to system, and hardcoding it into configure _breaks_ platforms other than the one Matts using. can do
180	1124803	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124803	TheBlueMatt	Isnt that the point of autotools, it finds the stuff to include and link and uses that. As I said, the stuff in this pull request from my repo really should never be pulled (because of what you just said)
180	1124863	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124863	jgarzik	You provide OS-specific details to a configure script via environment variables (or occasionally, command line arguments). The script takes it from there. Thats how mingw32-configure works. It sets the configure variables correctly for the limited set of systems it knows about. configure already has all the proper cross-compiling gadgetry built it, to compile windows apps.
180	1125172	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125172	jgarzik	source tree reorg pulled
180	1126304	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126304	jaromil	you did not pull, you actually did a "manual merge" ill past here my reaction on irc: 22:59 <jaromil> oh, did you merged autotools? 23:00 <jaromil> jgarzik: id prefer to actually appear in the git tree with my commits. why a manual merge? 23:01 <jaromil> i did separated both commits as indicated and they were merging allright with the master the last time ive tried 23:01 <jaromil> so i dont really see the reason for a "manual merge" 23:02 <jaromil> BlueMatt: this is quite demotivating for me :( 23:03 <jaromil> it even gives a conflict on sha256 23:03 <jaromil> bha :/ ill go to sleep my reason to be upsed is that this confuses all the review process of this pull request so far and hereby request you merge my original commits into master, not a "manual merge" that deletes all the documentation written in the commits. this pull request is not yet finished, you can close this pull request if you really dont like a WIP here, ill bring it back once completed. thanks for your attention to details, ciao
180	1126416	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126416	TheBlueMatt	Your commit was merged. is your commit in the repo. Its the same pull methods used in every other pull, the merge shows up as done by jgarzik, but your commit is back in the repo by its original date.
180	1126593	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1126593	jgarzik	It takes two seconds to verify that commit 84c3fb07b0b8199c7f85c5de280e7100bad0786f is in bitcoin/bitcoin.git. Maybe three.
180	1129705	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1129705	jaromil	i was tired and almost going to sleep when i saw your merge message, apologies for my abrupt reaction. ultimately i care that all the documentation so far written in the commit messages goes into history as it has been reviewed here, else this huge movement of files will look too suspicious. i did not noticed the autotools (2nd in this branch) and thought your merge message was its rebase without the original message (the term "manual merge" is what confused me). again thanks for your attention to details and patience. today ill work on the second commit, the autotools build, and see if mingw32 can be integrated. In fact there is something strange still: autotools doesnt seems to honor environment flags and i want to look into it deeper, hopefully we can get rid of the hacky sed then. ciao
180	1136543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1136543	jaromil	seems now everything is fixed im rebasing the second commit of this branch into something presentable
180	1260322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1260322	jaromil	updated to apply on current HEAD updated to add BlueMatts fixes from I can rebase it into one commit, or leave like this.
180	1400747	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1400747	jgarzik	Looking for confirmation that this builds w/ mingw32 and OSX...
180	1409841	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1409841	jaromil	It does build. im also asking more people to test it. meanwhile this patch was contributed to fix build issues on BSD/OSX i can rebase it into this if you agree, yet im asking because this patch changes actual bitcoin code (just some #define conditionals), while so far this autotools pull req required nearly no change to code. hoping we can have this pull request merged and closed soon!
180	1410128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1410128	TheBlueMatt	I would like to see that patch as a separate commit, in this autotools pull. Makes it easier to look through, but the patch has my ACK.
180	1448987	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448987	jrmithdobbs	OSX Broken? (10.6.7 xcode 4): mith@dair:0:~/src/bitcoin$ port list autoconf automake miniupnpc boost wxWidgets-devel autoconf devel/autoconf automake devel/automake miniupnpc net/miniupnpc boost devel/boost wxWidgets-devel graphics/wxWidgets-devel mith@dair:0:~/src/bitcoin$ autoconf configure.ac:124: error: possibly undefined macro: AM_INIT_AUTOMAKE If this token and others are legitimate, please use m4_pattern_allow. See the Autoconf documentation. configure.ac:140: error: possibly undefined macro: AM_PROG_AS configure.ac:229: error: possibly undefined macro: AM_OPTIONS_WXCONFIG configure.ac:230: error: possibly undefined macro: AM_PATH_WXCONFIG configure.ac:261: error: possibly undefined macro: AM_CONDITIONAL mith@dair:1:~/src/bitcoin$ ./configure --prefix=/usr/local configure: error: cannot find install-sh, install.sh, or shtool in "." "./.." "./../.."
180	1448999	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1448999	jrmithdobbs	Get the same thing running with autoconf 2.61 out of /usr/bin instead of macports.
180	1449141	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449141	jgarzik	Yeah, it fails on Fedora as well, missing the WX macros and similar errors to OSX
180	1449677	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449677	jrmithdobbs	BlueMatt said use autoreconf -i; and that seems to work. If the mechanism to rebuild is not just "autoconf" it needs to be stuck into an autogen.sh / autoget.bat please.
180	1449706	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1449706	TheBlueMatt	You also seem to have reverted all my stuff that made MinGW work, its not in the current code and wont compile.
180	1450153	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450153	jrmithdobbs	Also the resultant distclean target after autoconf/make does not remove the autoconf output. Can that be fixed?
180	1450406	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1450406	jgarzik	that last is standard. you want AM_MAINTAINER_MODE + "make maintainer-clean" (or "make maintainerclean", I forget) "distclean" is only supposed to return you to the state of a freshly-unpacked dist tarball
180	3224097	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3224097	jgarzik	Closing as outdated. We __do__ want an autotools configury of some sort, but with Qt the picture changed a bit. So, ACKing the concept but NAKing the current pull.
180	3247100	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/3247100	jaromil	On Tue, 20 Dec 2011, Jeff Garzik wrote: > Closing as outdated. > > We __do__ want an autotools configury of some sort, but with Qt the > picture changed a bit. > > So, ACKing the concept but NAKing the current pull. IMHO the problem with this pull request has been waiting too much to merge it in: it will always be very hard to find someone to fix all bugs reported on all build platforms, rather than switch to something that is clean enough for everyone to read and fix in different cases. I understand that back then when I filed the pull request the maintainance was way harder to attend since the heat on this project was higher, I hope it can now benefit as a learning experience. ciao -- jaromil, dyne.org developer, GPG: B2D9 9376 BFB2 60B7 601F 5B62 F6D3 FBD9 C2B6 8E39
178	1083322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083322	sipa	The problem is mentioned here and I confirm that adding -lpthread makes it work with both ld and gold.
177	1041189	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1041189	jgarzik	One important practice for git... When everything is just a single commit, it is difficult to review, to see if the submittor has inserted a tiny bit of malicious code, in all that code movement. Im __not__ accusing you of this, just speaking generally. So, this commit should really be two, either (a) convert to autotools then (b) move files around, or (a) move files around under old build system, verify that it builds and works under old build system, then (b) convert to autotools. That enables the reviewers to easily review the "move files around" commit and verify that it truly includes -zero- code changes. Also, in terms of marketing, I think it is a bit misleading to call it the "GNUification of bitcoin" It might make people think bitcoin is changing its license from MIT to GPL, at first glance. The more technically accurate description is "convert bitcoin build system to autotools" or similar. If we imported your git commit as-is into bitcoin.git, the one-line summary of your commit is "The aim of this commit is mostly that of GNUification for bitcoin" which does not tell the reader anything.
177	1041239	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1041239	jaromil	sry i forgot to mention: for building run first autoreconf -i and then the usual ./configure (--enable-upnp recommended!) sure, ok for "convert bitcoin build system to autotools" re: multiple commits, we have now two branches: the one with the FULL history of my activity in autotools, and this one. it is no problem for me to adjust things, yet the three steps you are mentioning are fragmented in the full and here squashed. should this be really split in 3 commits then?
177	1041821	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1041821	jaromil	im rounding up on devs comments, then will break this commit in two parts, following these recommendations: 23:26 <jgarzik> jaromil: and each git commit needs to be buildable on its own, in order to keep git bisect working. sometimes that means an intermediate step requires a bit of extra work, unfortunately. for example, if you do (1) move files, then (2) autotools, then commit #1 must update the old build system to work. then commit #2 undoes that work, switching to autotools. 23:27 <jgarzik> jaromil: it helps if you view each git commit like a step in an equation, or proof 23:27 <jgarzik> both sides are equal at all times, even though each step represents a transformation which will be done in another pull request. please leave this open until all issues are rounded up here.
177	1047093	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047093	jaromil	ok, closing this and re-filing another pull request with two commit steps, as jgarzik suggested: a) move files around under old build system, verify that it builds and works under old build system b) convert to autotools
176	1037033	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1037033	TheBlueMatt	Forum thread here:
174	1034690	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1034690	gavinandresen	Is there a reason you didnt use the HTTP methods in rpc.cpp? bitcoin already knows how to make requests. Also, fetching bitcoin addresses via is insecure-- youre vulnerable to a man-in-the-middle attack. Fetching securely means and (probably) shipping bitcoin with certificate authority certificates, so you can be sure that you actually are talking to xkcd.com to get their address.
174	1035641	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1035641	khalahan	I guess methods in rcp wasnt available in the GUI (because they are not used by the GUI, right ?), so I inspired myself by the GetMyExternalIP function (in net.cpp) that retreive remote IP with a GET request. Ill have a look at them (I need a GET request with an uri and Host, I may create one so ?). Fetching in would be more secure indeed, but its not available on every site (and there is a lot of self signed certificates). So, should we check first and then use as fallback ? Bitcoin should use the certifcates of the OS instead of shipping them. Is it possible on windows ?
174	1036719	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1036719	TheBlueMatt	No, falling back on is a huge security risk (MITM attackers can easily block
174	1038827	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1038827	khalahan	A bitcoin user is vulnerable to a MITM attack because of DNS resolution not using DNSSEC (irc connections, dnsseed and dyndns) and TCP connections to ip not using SSL verifiable certificates. Once he controls all connections... Possibilities for the attacker are : - make the user believe he has been paid by sending a transaction from already spent coins on the real nodes - generate fake blocks for confirmations and fake transactions So, you cant really trust 100% what is displayed by your bitcoin client ? By fetching addresses in it adds an additional risk : - a user can send coins directly to the attacker I admit it is a big risk, but it should not block the possibility to fetch an address even if the connection is not secured. However, the user should be warn in this case and decide what to do with a manual action (you wont send 500BTC that way do you ?). A way to do it securely would be to send the fetch request to connected first level nodes and compare results (or shasum to shorten the message). But, bitcoin network is not ready/designed for trusted nodes. Another solution is to have a centralized site for address fetching. If a think a centralized solution was good i would already have linked my patch with my domain :p. Maybe, I could fetch both from a direct request to the website and make a second request to one of the trusted ip (declared like bitseed ips) ?
174	1041618	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1041618	khalahan	- Use of rpc methods the read the request - use of HTTPS only to fetch address - using .json instead of .txt
174	1045543	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1045543	khalahan	Do you have any additional comment on this pull request ?
174	1045564	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1045564	gavinandresen	Did you figure out how to get SSL to verify the identity of the server? Just using SSL isnt sufficient to prevent MITM attacks, SSL has to actually verify that the server youre talking to presents a valid certificate.
174	1047247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1047247	khalahan	TheBlueMatt > the port here was not used, but ive cleaned it up, thanks. gavinandresen > this new patch checks certificate against locales certificates. It is currently configured only for linux by searching in /etc/ssl/certs. I dont know if other OS have a common path for certificates or if we should embed them with bitcoin ? If you want to test : khal@bitcoin-contact.org : valid CaCert certificate (now :p) => sould return a messageBox with infos in the GUI khal@sky-animes.com : self signed (and with another domain name) => invalid address
174	1110897	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110897	jgarzik	The only remaining issue with this change, IMO, is privacy. This change enables easier external observation of the precise moment when a bitcoin user is making a transaction. As such, these lookups should be disabled by default, and proactively enabled by the user via command line switch or GUI option checkbox.
174	1111049	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111049	TheBlueMatt	I dont know what kind of work would be needed, but it would be really nice to get this to work on OSX and/or Win32
174	1111125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111125	khalahan	Include a list of root certificates with bitcoin i guess. Is-it an acceptable situation ?
174	1111173	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1111173	TheBlueMatt	That is what many browsers do, but I dont think we want to support that, do we? eg, Mozilla had to ship an update to firefox to blacklist certificates when one CA was compromised recently.
174	2390768	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2390768	ByteCoin	Theres no secure way of doing this. If someone wants to send bitcoins they have to have an address to send to. Its their problem how to verify that the address is correct. The bitcoin client shouldnt try to do this because its too hard and when it is compromised, it will be blamed. Im reminded of the old saying "Every application grows until it can send email". How about we concentrate on our core function?
173	1033417	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033417	gavinandresen	Forum discussion:
169	1038777	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1038777	genjix	12:14 < sipa> genjix: i mean even further, it should be clear that youre able to have a name-lookup service without any ability to log in on a server, fiddle with public keys, know that it uses rsa signatures, ... FYI there are several parts to my branch: - Its a simple name lookup from a webserver.* - An example PHP implementation that returns the addresses. - An RSA keypair class which supports displaying a public key in PEM format. - An example PHP implementation for a service which allows you to update your public key using an OpenID login (supports Facebook, Google, Yahoo, Wordpress, Launchpad .etc) - A name lookup update which takes your nickname+address+a timestamp in the POST request and signs it so the server can verify its you. - An example PHP name lookup which allows you to set your address. * This latest pull request is only for this first part.
169	1038802	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1038802	jaromil	more info here: this patch also adds libcurl as a required library (good IMHO, and useful for more things)
169	1110912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110912	jgarzik	I do not have any specific technical objection, but I just dont think this belongs in bitcoind. It does not seem like a feature that would be used by more than a few people, especially when considering may get merged (I think it will, anyway).
169	1112436	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1112436	genjix	Why? My branch has much more technical depth than that other one. Its also written cleaner and much easier to extend. The other branch is simply looking up an address, whereas I have signing the requests and an example server for setting your address written in PHP.
169	1112542	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1112542	cdhowie	IMO there is not enough security in something like this. It suffers from the same problem that IP-based transactions do, namely that it is subject to MITM attacks. This approach is further subject to DNS poisoning attacks. If this is going to work securely, the request must be made over HTTPS, and the servers certificate must be verified somehow.
169	1150355	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1150355	genjix	Its already using HTTPS.
169	1468887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1468887	cdhowie	> Its already using HTTPS. Are you sure about that? I see this: string strRequestUrl = strDomain + "/getaddress/?nickname=" + pszEncodedNick; And strDomain does not start with `https://`. I dont see any curl option forcing HTTPS either.
169	1875834	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1875834	sneak	I agree that this sort of endpoint-to-address discovery should _not_ be in bitcoind. There are several big problems: 1) Lack of widely-deployed DNSSEC means this is hard to secure 2) It doesnt use SSL, and probably shouldnt use HTTP(S) at all. DNS SRV or TXT records would be better for such a scheme. 3) The URL scheme is half-baked. "getaddress" says nothing about bitcoin and could easily conflict with other uses of a website. Again, I dont think that HTTP is the best transport for this sort of discovery.
169	2969665	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/2969665	gavinandresen	No consensus that this is the right way to to; Im going to close.
168	1433025	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1433025	gavinandresen	Im going to close; doesnt seem to be any interest in this.
164	1014638	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1014638	genjix	There was a privacy concern raised before about the servers being able to monitor who pushes addresses and who fetches addresses being able to infer IP addresses to Bitcoin addresses by means of the blockchain. After much consideration and chatting with topi`, I decided on the maxim that theres a trade-off between user inconvenience and anonymity at some point. Educated users should be using Bitcoin addresses for large amounts and this naming protocol as a convenience method for small amounts.
164	1022703	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022703	jgarzik	Yowza! That is a long history :) For ease of reviewing and clean git history, we request that you rebase your pull requests once the history gets long like this. Closing pull request for administrative reasons -- but you are welcome to reopen at any time, with a rebased and review-friendly set of commits. Thanks for your continued contributions.
163	1014746	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1014746	TheBlueMatt	Oops didnt see this when I added Oh well that is this one + one other small thing.
163	1017047	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017047	jgarzik	Superceded by another pull request...
162	1011207	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011207	jgarzik	Comments: 1) This is duplicating work at which was mentioned on the forums at 2) You arbitrarily changed the license to GPLv3. NAK. 3) autotools conversion does not require a total bitcoin source tree reorg.
162	1011225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011225	jaromil	BTW please to meet you :) im new on github, but not to code. im friend with genjix and running a bitcoin related project on see other repos im active on and software on willing to cooperate on maintainance of the C++ source package and in particular of the unix daemon, on the long term id like to make a shared library (libbitcoin) and uid/gid separation of daemon for better security, and maybe clear and document the API and make SWIG bindings to python. ciao
162	1011237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011237	jaromil	1) ACK. will read that 2) autoreconf -i does that (adds COPYING when missing) and i didnt noticed. 3) true. i just went for standard code separation in src/, not sure about other approaches.
162	1011257	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011257	jaromil	looked at your branch: not so much duplication since were both just at the beginning. yet you might like the use of libtool in my branch :) hack on
162	1011316	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011316	jgarzik	Well, FWIW it is unlikely that this branch will be pulled. All these are the sorts of changes we -do- want, but in general youre wrapping way too many major changes into a single pull request. The right way to do this is with small, incremental changes, in separate pull requests that can be evaluated on their own merits, after being discussed on the forums. For example, everyone has their own opinion on source file placement, and these changes tend to have low payback, and are low priority. See discussion in thread On libbitcoin: everybody wants it, but any libbitcoin API should be informed by some applications actively using the library, i.e. real needs demonstrated in the field. So, were all for a libbitcoin, but we tend to be collectively wary of Grand API Designs unless you already have a lot of experience with the existing codebase and concepts :) Nothing personal. Speaking incrementally, the first rev of autotools should just get the existing stuff working on all platforms. That means no libtool, which just adds complexity for no reason (because libbitcoin does not yet exist). Baby steps! The first reaction of -every- programmer upon meeting bitcoin is "I want to rewrite it!" But the dev team must be conservative and keep everything running and debuggable and backwards compatible. Big pulls and major reorgs offer little payback for a large potential for breakage.
162	1011341	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011341	jaromil	i dont understand what you mean with Grand API Designs: since bitcoin has already an API, i have no illusions of grandeur here. code reorganization needs stuff to be moved around and there are guidelines and standards for that. however i see we have different views on more things: code splitting needed as mentioned by Jim Hyslop on the forum, as well reluctance to libtool. i dont want to rewrite anything and actually i think the code is not *that* bad esp. if properly reorganized, but then is a matter of being practical. ciao
162	1011420	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1011420	jgarzik	There is no reluctance to libtool; it is a simple, binary decision: libbitcoin does not exist, therefore libtool should not be used. When libbitcoin exists, libtool should be used. libtool is the wrong choice for bitcoins libcryptopp, because that is simply linked directly into the miner. Doing anything else -- particularly moving it to a shared library -- simply reduces performance for no reason. Your Makefile.am is also broken on several operating systems, because it hardcodes the name of the various dependent libraries.
162	1013480	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1013480	jaromil	On Fri, 15 Apr 2011, jgarzik wrote: > libtool is the wrong choice for bitcoins libcryptopp, because that > is simply linked directly into the miner. Doing anything else -- > particularly moving it to a shared library -- simply reduces > performance for no reason. my use of libtool for libcryptopp is purely internal: libcryptopp is still linked statically inside the bitcoind binary (in fact I agree there is no need to make it shared) this is the recommended approach to structure autotools packages that include static libs. > Your Makefile.am is also broken on several operating systems, > because it hardcodes the name of the various dependent libraries. true, but then maybe my pull request came a bit too early, since I consider this fork just a start and Ill complete it in the coming days. feel free to keep an eye on it and take what you like, Ill do my best to make granular and well commented commits. ciao
162	1016711	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1016711	jaromil	so far so good: compiles on linux providing --enable-upnp and --enable-gui=wx code itself was never modified, just moved around, with two exceptions: 1) 9141f2c renamed cryptopp/config.h to settings.h 2) c929bae code namespace change: (int)VERSION renamed to BITCOIN_VERSION in headers.h so just one filename and one variable name changed. in this branch/pull request ill continue hacking only on build issues and avoid touching anything into the code, in fact as it looks like now i guess nothing else in code needs changes. ciao
162	1017045	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017045	jgarzik	pull requests are for finished patches, not actively hacked projects.
162	1019539	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1019539	jaromil	sry i didnt knew. can you specify that in the documentation? thanks.
161	1016378	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1016378	CAFxX	
161	1402555	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1402555	gavinandresen	Miner threads are already low priority, and there seems to be no interest in this feature. Im going to close.
160	1008020	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1008020	gavinandresen	Please start a thread on the forums about this (if you havent already):
160	1009016	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1009016	CAFxX	
160	1083248	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1083248	gavinandresen	Did you test calling this from command-line bitcoind? I dont see a call to ConvertTo down around line 2090 of rpc.cpp to convert the third param from a string to an integer.
160	1115775	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1115775	CAFxX	whoops! nope, I didnt test the command-line. fixed.
160	1125174	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125174	gavinandresen	In the future, please test your patches before submitting. This broke the build, and the feature was broken, too.
160	1125950	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125950	CAFxX	Fixed and tested (linux-x64). You may want to pull because I also forgot to change the number of incoming parameters (see ) Sorry about the breakage, I assumed a number of things that in the end turned out to be quite different.
159	1005360	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1005360	CAFxX	note: -nicestart is a no-op on non-windows systems because setpriority/nice require superuser privileges to raise the process priority (even if just to bring it back as it was at the start of the process)
159	1005379	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1005379	jgarzik	Seems like too much of a special case. Will any user ever use it, given that it defaults to off?
159	1005440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1005440	CAFxX	I didnt want to make it the default because Id use it but Im not 100% sure others will want the same. It might be sensible to do it by default if were starting in GUI mode.
159	1005453	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1005453	CAFxX	There you go. Thanks for the suggestion.
159	1005484	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1005484	CAFxX	I messed up a little with the history, so Im closing this pull request and creating a cleaner one.
157	1017763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017763	sipa	Reworked a bit, AddToWalletIfMine() and AddToWalletIfFromMe() and now merged into AddToWalletIfInvolvingMe(), simplifying things further.
157	1033479	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033479	gavinandresen	Pulled via cherry-pick
155	998793	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998793	gavinandresen	Nice, thanks!
155	999004	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/999004	dlo	Thank YOU! Ill issue new pull requests as I get more stuff done. I may tackle the CSV export now just to get my feet wet in the source code.
154	998887	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998887	gavinandresen	Looks good
154	999186	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/999186	jgarzik	Looks good, but BlueMatt says it crashes the GUI, so thats a blocker
154	1003772	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1003772	TheBlueMatt	Just missing a ".c_str()" in ui.cpp:1817.
154	1005643	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1005643	jgarzik	Updated w/ BlueMatts fix.
153	997184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/997184	jgarzik	ACK
153	1008562	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1008562	gavinandresen	Tweaked this: Use "C" instead of "POSIX", Im not 100% sure "POSIX" is supported as a locale name on Windows.
152	995674	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/995674	sipa	One thing I did not test, is the slowdown. Continuously creating CBlockLocators and writing them to wallet.dat may slow down initial block download.
152	995763	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/995763	gavinandresen	Nice! RE: block download speed: Id suggest a check for if IsInitialBlockDownload() and dont bother writing best-block-index during the initial block download.
152	996067	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/996067	sipa	Ok, updated.
152	1008586	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1008586	gavinandresen	Looking at this again and thinking about pulling, it seems more complicated than it needs to be-- CBlockLocator can already serialize/deserialize itself, is there a reason for the ReadBestBlock/WriteBestBlock methods? Why not just Read/Write the CBlockLocator instead of CBLockLocator.vHave?
152	1017374	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1017374	sipa	I didnt realize db.h did define classes from main.h as well, to use them. I added CBlockLocator to those and simplified the patch.
152	1033443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1033443	gavinandresen	Pulled via cherry-pick.
151	993268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/993268	jgarzik	looks OK to me
150	998822	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/998822	gavinandresen	Forum thread:
150	999266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/999266	jgarzik	Removed ValidFee() check
150	1008943	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1008943	jgarzik	Yeah, trying to future proof it a bit. Can remove, if you really dont like that.
150	1123325	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1123325	mikegogulski	This is good, since it sure beats restarting bitcoind. But.. Im going to open a new issue.
150	1124647	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124647	gavinandresen	Is it true that <amount> is rounded to the nearest 0.01? I dont think AmountFromValue does that any more... While youre fixing that, remove the future-proof-CriticalSection, too, please.
150	1124689	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1124689	jgarzik	re AmountFromValue: that was copied from elsewhere in rpc.cpp... sendfrom, maybe? Id like to be consistent one way or the other :)
150	1125322	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125322	gavinandresen	Fixed sendtoaddress/sendfrom: 8adcf8 / src/rpc.cpp : Help for sendtoaddress/sendfrom was wrong: amounts are rounded to 0.00000001
150	1125372	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125372	jgarzik	Updated commit per comments.
150	1125470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1125470	gavinandresen	ACK
143	960699	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/960699	jgarzik	Added sendmany fix, spotted by Gavin.
142	951660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951660	jgarzik	Forum thread:
142	1022843	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1022843	jgarzik	Updated branch to ignore fGenerateBitcoins stored wallet setting (see forum thread) in GUI version of bitcoin.
141	951626	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/951626	jgarzik	Forum thread:
141	1110945	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110945	jgarzik	pulled
139	949465	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949465	jgarzik	I like the idea of writing a PID file. It is good practice, at least on *nix. I also like that you made the default the bitcoin data directory. Review comments: 1) pid file should include a newline 2) have you verified the PID written is post-daemonize? I am too lazy to check right now, and it is unclear from the patch. 3) the PID file should be removed on shutdown. stale PID files are undesirable.
139	949658	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949658	gjs278	1. newline is fine idea, Ill throw in a \n 2. the pid always seems to match the bitcoind -server process for me so I believe it is accurate 3. this I realized as soon as I did the pull request. do you know a crossplatform method I should use to delete the file? I always run into trouble with unlink and stuff when I hit win32 platforms. thanks.
139	949670	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/949670	jgarzik	Check the boost docs... boost does everything :)
139	992287	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/992287	gavinandresen	Nice. Can you rebase so the two commits are one, and maybe commit --author=gjs278 &lt;blame_me@somewhere.com&gt; instead of root ?
139	992901	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/992901	gjs278	ugh. I hate working with git. I cant figure out this master pull rebase crap. Im just going to make a new repo and put my changes into one commit.
137	923431	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923431	gavinandresen	Can I remove commits from a pull request?
136	928245	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928245	gavinandresen	FYI: stress-testing bitcoind with this patch using a testnet-in-a-box I managed to hang one RPC server thread. What I done did: In one shell window: for i in 1 2 3 4 5 6 7 8 9 10 11; do ~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/2 sendfrom "" $(~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/1 getaccountaddress "") $i; done And in the other: for i in 1 2 3 4 5 6 7 8 9 10 11; do ~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/1 sendfrom "" $(~/src/integration_btc/bitcoind -datadir=/Users/gavin/testnet-box/2 getaccountaddress "") $i; done Im working on modifying the CRITICAL_BLOCK macros to get more information about what is locked, when...
136	928313	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928313	jgarzik	Your hang is verified to be a CRITICAL_BLOCK deadlock?
136	928505	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928505	gavinandresen	Update: yeah, definitely CRITICAL_BLOCK deadlock. Reproduced with a hacked CCritcalSection that spits out its name as it waits/locks/unlocks, and hung process is waiting on sequence cs_main / cs_mapWallet, and I see lots of the other order.
136	928637	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/928637	gavinandresen	Definitely missed a few-- see
136	942713	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/942713	jgarzik	IMO, cs_main should always be acquired before cs_mapWallet, as it is the "bigger" lock. Ill look at how difficult it is to change the code to follow that ordering.
136	957134	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/957134	jgarzik	closing, superceded.
134	933275	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933275	TheBlueMatt	jgarzik pointed out that bitcoin used to properly daemonize on 0.3.18 on Windows (only bitcoin -daemon not bitcoind -daemon). This needs more research.
134	937508	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937508	TheBlueMatt	Hadnt seen pull 131
133	933178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933178	jgarzik	Comments: 1) The community poll and I seem to agree, upnp should be disabled by default (USE_UPNP==0) 2) Rather than all those ifdefs, it would be nice to define static const fHaveUPNP and test that where possible. The compiler will optimize out code that is known never to be called.
133	937652	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/937652	TheBlueMatt	Although I disagree, UPnP is now set to off by default in all makefiles. fHaveUPnP is used in many places now, however #ifdef USE_UPNP was still used in several.
132	908667	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908667	jgarzik	We should keep the miner, as a reference. People might start their own block chain, or perform research. BitcoinMiner() provides all that in a self-contained package. Just hide it from the user in the GUI and command line help, IMO.
132	908671	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/908671	jgarzik	Sorry, didnt mean to close the pull request, just comment.
132	922752	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922752	gavinandresen	The built-in miner is darn useful for -testnet (and testnet-in-a-box) testing. Before removing it or hiding it in the client, content on the wiki and website needs to be updated, too.
132	922824	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922824	jhyslop	I pretty much agree with removing the miner from the client. Before mining gets removed, though, we should have a separate stand-alone miner as a reference implementation.
132	923937	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/923937	gavinandresen	Forum discussion here:
132	933163	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/933163	jgarzik	IMHO: remove 4way code, hide miner from GUI, leave reference miner in codebase.
132	1110948	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1110948	jgarzik	Obsoleted by removal of 4way miner code
131	940269	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940269	TheBlueMatt	Works for me, though isnt the standard to check for __WXMSW__ instead of WIN32 even on bitcoind in most of the code?
131	961905	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961905	gavinandresen	BlueMatt is right-- #ifndef __WXMSW__ would be more consistent with the rest of the code.
131	976672	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/976672	jgarzik	Pulled, after testing on multiple machines. Also, I modded the commit slightly, to call setsid() inside ui.cpp, which is a second Daemonize site.
127	961888	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/961888	gavinandresen	I combined the two commits and merged into master.
125	922780	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922780	gavinandresen	My first reaction: this violates the KISS principle. My second reaction: if the consensus is that more complicated logging is needed, then why not use boost::log?
125	922811	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/922811	jhyslop	I forgot to write my motivation for the patch. I wrote it because I got tired of having to sift through hundreds of "IRC got xxx" messages while I was trying to debug some other changes I was making. Plus I was concerned about the size of the debug.log file - after running for only 12 hours, the file was hundreds of megabytes. The file only gets truncated on startup, and then only if you specify the -debug flag - which increases the log activity. I havent looked at boost::log, but how easy is it to incorporate into the existing code? One of the big advantages (IMO) of this patch is the fact that it fits into the existing code, which makes it less of a pain to migrate to the new logging system.
125	1023200	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1023200	jgarzik	This seems to match logging systems from other complex software projects. The sheer number of messages in a complex system begs for something like what jhyslop has submitted. BIND uses logging channels, giving you the ability to mask-in and mask-out certain types of messages. syslog has LOG_{ERR, WARNING, INFO, DEBUG}. Linux kernel network drivers have a facility (NETIF_MSG_xxx) which permits enabling or disabling of high volume per-packet messages, enabling or disabling of PHY-related messages ("link up!", "link down!"), enabling or disabling of driver probe detail messages, etc. I think it would be useful to selectively enable or disable (a) bitcoins per-packet logging, (b) P2P logging in general, (c) RPC logging in general.
124	910090	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910090	jgarzik	pulled
123	896691	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896691	jhyslop	I havent reviewed the code thoroughly, but it looks reasonable. In order to ease future changes to the wallet format, how about adding a key/value pair into the wallet indicating its data format version number?
123	896714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896714	sipa	Thats certainly a possibility, which may be useful in the future, but its not really necessary now. The old format used a dedicated byte for specifying spentness, while the new code uses a key-value entry (using the dedicated byte if not present) and keeps the spent-byte updated as well.
123	896757	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896757	jhyslop	Well, I mildly disagree that its not necessary now. The time to implement versioning is now, before its needed, so that when it is needed clients will have the version-checking code in place. But on reflection, thats what the nVersion parameter to the Serialize family of functions is for, isnt it?
123	896839	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/896839	sipa	Dont get me wrong - I merely mean that for this particular issue there shouldnt be a problem.
123	962237	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/962237	gavinandresen	I pulled this and ran it against a testnet-in-a-box, and theres something seriously wrong-- look at this getinfo output: { "version" : 32100, "balance" : 103514.73287496, "blocks" : 1479, "connections" : 1, "proxy" : "", "generate" : false, "genproclimit" : 3, "difficulty" : 1.00000000, "hashespersec" : 0, "testnet" : true, "keypoololdest" : 1302017341, "paytxfee" : 0.00000000, "errors" : "" } balance is greater than 50*blocks, which should be impossible! I uploaded the pre-conversion -testnet wallet and block index to:
123	964462	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/964462	sipa	Sounds like you have a lot of (used) high-value transactions whose output is yourself, but are for some reason not marked spent. Im not sure how that is possible but Ill check the wallet in that zip file.
123	966022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/966022	gavinandresen	FYI: Wallet is from a 3-node "testnet-in-a-box" that I ran a bunch of ClearCoin escrow unit tests against. Typical use was Sending wallet -> escrow wallet -> receiver wallet, then between tests send coins from receiver wallet back to sending wallet. Sending wallet is the one I posted. I havent tried the much simpler test of just taking a testnet-in-a-box wallet and running it against your patch; that might be a good place to start (see if balance is correct to start).
123	988541	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/988541	sipa	I tried running a testnet-in-a-box with your wallet and block database, but everything runs fine here. Could you post your corrupted wallet/blockdb as well?
123	989238	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/989238	gavinandresen	I just tried again after cloning and compling directly from your git branch and got similar results. Bad "after" wallet is at: (this one is the entire datadir in a directory called d)
123	989241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/989241	gavinandresen	Interesting, though: balance is different from first time I tried: { "version" : 32100, "balance" : 60605705932.90255737, "blocks" : 1455, "connections" : 0, "proxy" : "", "generate" : false, "genproclimit" : 3, "difficulty" : 1.00000000, "hashespersec" : 0, "testnet" : true, "keypoololdest" : 1301969525, "paytxfee" : 0.00000000, "errors" : "" }
123	990743	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/990743	sipa	Bug fixed - fAvailableCreditCached was not initialized, causing arbitrary reported numbers on some systems
121	887133	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/887133	sipa	Resubmitting with longer commit messages
120	910089	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/910089	jgarzik	pulled
118	882085	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/882085	jgarzik	Please resubmit, changing only the *.po file. We will merge your change rapidly, after that!
116	886184	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/886184	jgarzik	We definitely want this change -- but can you please resubmit a rebase against latest upstream, giving us one (or a few) clean commits?
114	862497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862497	gavinandresen	Cool! Thanks for being persistent. Two comments: The appropriate copyright notice should be added to uiproject.fbp and uibase.cpp; I think building the next release with UpNP support compiled in would be a good idea. Having both -noupnp and -upnp options (and tri-state USE_UPNP) is confusing and will cause problems if bitcoin.conf files are copied around. Id suggest something like (assuming we want upnp on by default for Windows): bool fUseUpnp = GetBoolArg("-upnp"); #ifdef _WINDOWS if (mapArgs.count("-upnp") == 0) fUseUpnp = true; // upnp on if not explicitly turned off #endif
114	862552	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862552	TheBlueMatt	Didnt realize Luke added -upnp in his commit, sorry. The original intention was to have USE_UPNP as a compile option as to whether or not one would compile with UPnP or not and a single -noupnp where UPnP defaults to on. Currently the Windows makefile doesnt support any UPnP (some have suggested using Windows native UPnP library instead on Windows). I think it should be always on by default. In the end that can only be better for the network as it creates more peer diversity (and maybe eventually increasing MAX_OUTBOUND_CONNECTIONS). I will do that unless you disagree.
114	862722	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862722	gavinandresen	Please start a discussion on the forums about whether or not UpNP should be on or off by default; I think you will find strong feelings that it should be off by default among Linux folks.
114	862766	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862766	TheBlueMatt	Forum thread here:
114	877908	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/877908	jgarzik	Consensus seems to be "off by default"
114	880293	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/880293	TheBlueMatt	Thats the interesting thing about UPnP, for an individual, having UPnP on by default is bad - potential security problems down the line, increased traffic, etc. For the network as a whole, having UPnP on by default is good as it creates more nodes which accept incoming connections ie good for network diversity in the long run. (maybe even increased MAX_OUTBOUND_CONNECTIONS in the future)
113	862393	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862393	gavinandresen	Is github broken? The diff/commit looks completely messed up to me...
113	862402	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862402	TheBlueMatt	Oh goddamit, well after today Im done trying to submit patches.
112	862319	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/862319	TheBlueMatt	Again my lacking of understanding of standard policy means this needs closed and resubmitted.
111	861443	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861443	TheBlueMatt	Oops, this breaks makefiles on everything but UNIX. Will fix later.
111	861685	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/861685	jgarzik	Plus, I would rather not import a lib wholesale into bitcoin without decent justification
110	855259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/855259	TheBlueMatt	jhyslop mentioned that he is doing a full rewrite of logging (separating debug of various parts, etc). Id assume wait for him to finish his code before doing anything here.
110	857270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857270	jgarzik	code looks good to me
110	879270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/879270	jgarzik	Opened an issue related to this patch:
109	852241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852241	TheBlueMatt	Brief chat on IRC seemed to indicate that almost everyone is in support of this option, most saying it should also be on by default. I agree with them.
109	852247	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852247	TheBlueMatt	Though maybe it could just be included alongside the standard seed node list?
107	853270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853270	jgarzik	Same comments as with I agree with the recommendation about bitcoin (recommended) and bitcoin (64-bit). Maybe open an issue for that?
107	857264	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857264	jgarzik	Things are fine as-is
106	845440	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845440	gavinandresen	Forum discussion at:
105	853259	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853259	jgarzik	Given that -port is oft-requested and oft-implemented, and a standard option on other servers, I think we should include that. However, I am not sure we should be removing penalties until things like ensuring diversity of incoming connections is handled.
105	853473	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853473	TheBlueMatt	Phantomcircuit started a topic on the forum to discuss Sybil attacks and what, exactly, we should to to prevent them (http://www.bitcoin.org/smf/index.php?topic=4335.0). I would, however, like to point out that the penalties removed here have nothing to do with incoming connections and the penalties here are really unnecessary as the client only makes one outbound connection per /16.
105	857022	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857022	TheBlueMatt	After the discussion on IRC and a bit of soul searching, I came to the conclusion that having a -port option is bad for the overall network. The problem rests with the ability of people to more easily run multiple nodes on the network. This should be discouraged as it increases load on IRC, etc. Anyone who has enough ability to want an alternate port for whatever reason can easily do this with firewall rules or with a compilation with the above commits.
104	841178	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/841178	jgarzik	This seems quite unlike how other Linux apps are distributed, and function.
104	842329	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/842329	tcatm	The script doesnt seem to care about arguments or bitcoind.
104	844007	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/844007	TheBlueMatt	I agree with jgarzik, though most are distributed as chose a version at download. Should we do that? In any case you should add $@ to the end of the lines which launch bitcoin to pass arguments.
101	853266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853266	jgarzik	How do deployed clients behave, in reaction to this behavior change?
101	870132	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/870132	gavinandresen	Deployed clients behave just fine-- they just wait for the connecting node to send a version message first, instead of both ends sending a version message right away. Im going to run this (along with several other patches) on the Faucet machines, then plan on pulling it.
98	837716	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837716	gavinandresen	Good idea.
98	837721	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/837721	tcatm	Shouldnt it throw JSONRPCError(-5, "Invalid bitcoin address") like getreceivedbyaddress does?
97	839314	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839314	jhyslop	There are a couple of major problems with this change - which isnt necessary in the first place. First off, the transaction will not get accepted into the memory pool, because AcceptToMemoryPool verifies that the transaction has enough fees embedded in it to satisfy GetMinFee(). But when you created the transaction, you suppressed those fees. Even if you applied similar modifications to AcceptToMemoryPool, no other node will accept your transaction, because the other nodes will <i>not</i> suppress the calculation of GetMinFee(). That means that only your node will attempt to put the transaction into a block. Unless youre running one of those multi-GH/s nodes, it could be months before you win the crap shoot and generate the block. And thats assuming that the node even generates blocks to begin with. You cant assume that every node will be generating blocks - I turn off coin generation on my MacBook because I dont want to overstress the CPU if I can help it. In any case, the code change is not necessary. If you do happen to be the lucky guy who generates the block containing your own transactions, then the transaction fees all go into your wallet, making your own transactions free.
97	843692	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/843692	gavinandresen	I agree this isnt necessary and encourages anti-social behavior (transmitting fee-less transactions and hoping that either youll generate a block to include them or somebody else will accept them).
97	982001	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/982001	jhyslop	In the Bitcoin forums, Luke-Jr showed me that my analysis was incorrect. This patch works "as advertised" (so to speak) and will cause no harm including it. Whether or not it is anti-social is a wider community decision :-) In any case, I think this pull request can be reopened.
96	847320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/847320	genjix	Tested this. It works well.
96	857321	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857321	jgarzik	looks OK to me
95	15690660	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/15690660	rebroad	Does this value need increasing again? Im regularly getting errors such as: socket recv flood control disconnect (5033101 bytes) in the debug.log and causing the node to disconnect. Usually the number of bytes are around this figure.
91	845223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/845223	jhyslop	I like the idea of timestamping log entries. Personally, though, Id rather see a human-readable timestamp.
91	852899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/852899	TheBlueMatt	I agree with jhyslop:
91	853273	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853273	jgarzik	Thats fine with me. Ill close this pull request, and hope that someone submits the human-readable timestamp patch instead. Also: there was a privacy concern related to universal timestamps, so maybe add an option -logtimestamp, thereby defaulting the timestamps /off/ by default.
91	854558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/854558	jhyslop	Actually, I plan to rework the logging slightly, so Ill add the optional timestamp when I do that. And since Im adding a flag, theres no reason it cant be -logtimestamp=<off | numeric | human-readable>. What was the privacy concern, do you remember? My plan is to modify OutputDebugStringF to accept two parameters, one indicating the verbosity level (off, critical error, error, warning, info, debug, verbose) and the other a bitmask enum indicating the area the log entry relates to, such as Mining, Transactions, Blocks, etc. (I got tired of wading through quite literally thousands of IRC log messages, and generating a log file around 1.2M per day). Oh, and then change all printf statements to OutputDebugStringF( x, y where x and y make sense given the context. I already have that code in my local source, but its based on the previous release and its currently hard-coded to Debug, Mining.
91	867037	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867037	jhyslop	Jeff, Ive been working on the code as mentioned. Can you elaborate on the privacy concerns? I dont really see how the timestamps in the log could be a privacy concern.
91	867066	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867066	jgarzik	Quote from IRC, <gavinandresen> Concern was from satoshi... I shouldnt try to read his mind, but I THINK what he was thinking is somebody subpoenas N bitcoin services for their debug.logs to try to figure out where transactions were originating
91	867270	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867270	jhyslop	I wondered it might be something along those lines. As a side note, it would be an interesting challenge to figure out how many nodes youd have to subpoena in order to determine with any degree of certainty the origin of a coin. My revisions to OutputDebugStringF will, by default, NOT log anything to do with individual transactions. Basically, only infrequent status messages such as the hash rate, warnings, errors and critical errors will be logged by default. Actually, before I go too far down the road with it, I think Ill open a discussion on the Bitcoin forums to get feedback on my ideas. Maybe someone there might have some additional thoughts on privacy issues.
91	867276	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867276	jgarzik	In general, incremental approaches tend to work better than grand rewrites, so I would rather test the waters with BlueMatts patch. Then, we can look into something more invasive if the community is happy with the general direction.
91	867714	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/867714	jhyslop	OK. My changes are orthogonal to BlueMatts, so it will be simple to merge.
90	828751	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828751	gavinandresen	Danger! Danger! The close and re-open will cause core dump because its not thread-safe. I went down that rabbit-hole, and its not pretty (dont be tempted to just wrap the printf in a CRITICAL_SECTION, because that causes issues during shutdown). I like the timestamping, though.
90	828982	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828982	jgarzik	timestamping moved to
88	857291	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/857291	jgarzik	pulled
85	820806	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/820806	gavinandresen	Looks good at first glance. Can we brainstorm test cases that we think might cause problems? E.g. Wallet with (only) available transactions of +1 +2.0001 +3 : Send 6 bitcoins; what happens? Same wallet, send 2 (I think youll get a 2.0001+1 spend with 1.0001 change)... Any other tricky edge cases?
81	809553	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/809553	tcatm	Theres already a very similar pull request:
79	803266	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803266	gavinandresen	Forum thread to discuss:
74	799236	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799236	gavinandresen	Good Idea.
72	779241	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779241	jgarzik	ACK, thanks
72	780320	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780320	gavinandresen	Tested by re-downloading entire block chain with -maxreceivebuffer=500 -maxsendbuffer=100 (no issues), after trying with even smaller limits (there were issues-- disconnections due to running out of receivebuffer space-- but no crashes, it handled the disconnect then find another peer gracefully). Test and regular faucets are now running with this patch.
63	767128	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767128	jgarzik	I understand the motivation, but this seems contrary to satoshis original intent. Recommend deferring this for a year or three :)
63	767223	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767223	cdecker	And what would the motivation be? It would allow others to be compatible with the mainline client, without having to create a new version each time the mainline is updated, just to ensure compatibility? It wont be the last change conflicting with Satoshis original intents.
63	839229	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/839229	jhyslop	I second cdeckers question - what is satoshis original intent? Is his intent that there shall be One True Client?
63	853049	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853049	TheBlueMatt	Satoshi was clearly brilliant, but that doesnt mean we have to follow his original intent religiously. I think this is a good idea, especially as we move towards more clients in more languages, on more devices.
63	853125	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/853125	jgarzik	I agree with the intent -- differentiate client & proto version -- but not the implementation in this pull request. And in general, the current protocol does permit some flag-based extensibility beyond simple protocol versioning. We could simply freeze the as-exported proto version, and add flags where necessary to indicate new feature[set]s.
63	863899	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863899	jhyslop	Can you elaborate on the flags? I dont think Ive come across the code youre talking about.
63	863971	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/863971	cdecker	Just to respond to the criticism on the patch. I myself found it strange to ask for a patch for a thing that isnt solvable with a patch, but I was asked to do it. It is not difficult to add protocol extensibility, as discussed on the Forum, it just needs either a new message (capabilities?) or an extension to the version message (variable list of strings each denoting capability support). But its not the goal of this pull request. This one is just to say "please, please dont increment the proto version with each client release", if that point comes through I dont care what happens to this pull request.
63	864056	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864056	jgarzik	The "nServices" bitmask is sent with each version message, at the beginning of each TCP connection between two P2P nodes.
63	864193	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864193	cdecker	True, I had forgotten about the nServices bitmask, my bad. I have a few criticisms about that too, but Ill create a new Forum thread for them, since this is only to decouple protocol versioning from client versioning. Estensibility should be left for a broader discussion.
63	864225	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864225	jgarzik	The two issues are coupled, as I indicated in my original reply.
63	864497	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864497	cdecker	Ok, I think we arent thinking about the same kind of extensibility. My goal basically is to have a minimal protocol that is standardized (lets say the current protocol), it is simple and easy to understand. The protocol version should indicate that if a client supports the protocol version itll understand the messages that are going to be sent. Where up until now the protocol version was being incremented every time a new version of the client was released, and youd have to reverse engineer all changes (if any) from the main client. Extensibility doesnt really come into play at this point (not as I think of it anyway). Extensibility is another dimension where, while maintaining the basic protocol as is to avoid forcing others to upgrade, additional functionality can be built on top. I just want to make sure that alternative clients dont have to release a dummy update each time the main client updates just to say "yeah, well nothing changed in the protocol, we still support it". Changes to the protocol need to be explicit, rare and publicly announced. Most changes can be implemented by adding simple extensions, without breaking compatibility with alternative clients.
63	864558	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864558	cdecker	Anyway, to get back on track with this pull request: jgarzik, if I understand you correctly you agree with my point, right? Keeping the protocol version distinct from the client version allows us to differentiate the implementations and thus grow and secure the network. I dont care if this pull request makes it into the main trunk, as long as we alternative developers get a commitment from the main client developers that they wont increment the version number if no protocol changes have been made (or even better if breaking changes are reduced to a bare minimum).
63	864575	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864575	jgarzik	Alternative clients, nor mainline clients, have -never- had to release a dummy update, due to the current release scheme. Thats a red herring, and an invalid justification. The network protocol has always been backwards compatible, even way back to ancient client versions. I understand the desire to separate the two versions, but beyond that point youre making up nonsensical justifications for problems that dont exist.
63	864657	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864657	cdecker	Sorry you feel that way. I see that there is no point in continuing this conversation, consider the pull request withdrawn. Although I maintain that my points are still valid. You were the one who brought up extensibility, whereas I maintain that protocol evolution is different than protocol extension. The need to separate protocol development from client development is felt by many of us, and if I got that point through, it is a huge victory.
63	864823	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/864823	jgarzik	To use an absurd example, it is trivial to see how we can create a flag "use a totally different protocol." There is no limit to extensibility through flags. We could simply freeze currently reported protocol version, while still incrementing client version.
63	1307605	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1307605	blueCommand	I dont know if it is still possible to merge this but this is ridiculous that this has not been merged. As a developer for an alternative client I dont want to depend solely when the mainline add GUI features and calls that an update. "Add flags"? I assume you meant software versioning flags and not the services flags. That will only hold for so long, I mean, you will end up with 0.3.12.32.1z and no-one will be happy. Cant we just call this the X version of the protocol and when the protocol actually changes, up the number by one and document the changes in the wiki? If you did mean the services flags those should be carefully considered before introducing, once introduced they will stay forever. They are not at all made for marking "new" or "different" clients but network capabilities. Also, the use of (or lack of) the subversioning field is also irritating, why not simply have the name + version of the client? The packet will get a bit bigger yes, but that doesnt seem to bother anybody with all the 64-bit values. Its very handy to see what software versions are currently running in the network. Please, reconsider to merge this a step towards client diversity - please do not treat the protocol as the same thing as the client or we will never have a stable protocol nor developers that want to keep up with an every so changing protocol number.
63	1308334	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1308334	ferrouswheel	I would like to see this issue addressed. As someone starting another Bitcoin client it concerns me greatly that the core Bitcoin client is trying to monopolise what should be decentralised currency. How are we supposed to differentiate between protocol version and client? A client shouldnt be the protocol and forcing it to be the same thing is a silly coupling. blueCommand also makes a good point for the health of the network. Knowing the client composition is important.
63	1309470	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1309470	cdecker	As original author of the issue it is in my interest to have it adressed, but I have to correct a small misunderstanding: the flags are a good way to identify capabilities as jgarzik pointed out. It is a bitfield in the version message which allows boolean announcements about the capabilities of the client. My main point is to freeze the protocol version increment and use the version string to identify client type and version.
63	1315584	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/1315584	davout	+1
62	767124	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/767124	jgarzik	no objection
56	735161	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/735161	tcatm	Why add CUDA and OpenCL stuff to bitcoin? We decided (on IRC at least) to use autotools in the future. I think jgarzik is working on that.
55	779244	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779244	jgarzik	Does this really need its own, single-file directory?
55	780838	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780838	devrandom	Im thinking there should be a standard directory structure, similar to the debian packaging conventions, that would make it easy and predictable to build a package given its source tree. Since bitcoin is the first project that is interested in adding this to the source tree, you are free to set the standard by choosing where to put it.
55	780866	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780866	jgarzik	From bitcoins perspective, we dont want to end up with 10 files for 10 different systems (gitian, debian, fedora, ...) each in their own directory. Having bitcoin/contrib/gitian.yml seems preferable to bitcoin/gitian/just_this_one_file.yml.
55	780958	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/780958	devrandom	Sounds good to me.
55	789972	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/789972	jgarzik	updated pull looks OK to me, but Id like to poll gavins opinion on contrib/ top-level dir as a place to throw things like this
55	856894	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/856894	jgarzik	pulled
54	736228	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736228	gavinandresen	Lets pull this for the 0.3.21 release-- I want to get 0.3.20 out, and dont want to pull anything that has even a slight chance of causing problems.
54	779246	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/779246	jgarzik	ACK
53	726926	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726926	gavinandresen	Did I get the difficulty adjustment backwards? Doh!
53	726938	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/726938	gavinandresen	Why 21 hours: it is exactly 1/16th the 2 weeks/2016 blocks of the main chain, and is more than 120 blocks (seemed like a good idea to allow blocks to mature and get spent before difficulty adjusts).
53	731268	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/731268	dooglus	I think I prefer exactly 1/14th the 2 weeks. Make it 24h, then were aiming to change difficulty at the same time each day, and can see whether the actual change times drift forward of backward on the clock. Unless theres a good reason not to? 24 hours is 144 blocks.
53	736135	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/736135	gavinandresen	Theres no consensus on changing the difficulty rules, so Im closing this and will pull davouts just-change-the-genesis-block patch.
52	724215	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724215	tcatm	You should use $(...) instead of `` (like its done in makefile.osx), also see
52	724602	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724602	ojab	Ok, rewrited.
52	799936	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/799936	tcatm	This patch works great for GUI builds but outputs annoying errors (wx-config not found) when building bitcoind. Can you fix that?
52	811432	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/811432	mgiuca	The problem is that the makefile is using ":=" instead of "=" to assign those WXINCLUDEPATHS/WXLIBS variables. This calls wx-config whether it uses it or not. But even fixing that is insufficient. I have put up a [new pull request](https://github.com/bitcoin/bitcoin/pull/82) which fixes this issue.
51	724712	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724712	gavinandresen	Nice! Id like to make this part of a set of changes for the 0.3.21 release to deal with sub-bitcent amounts consistently across all the RPC methods and in the GUI.
51	724848	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/724848	davout	Would it be possible to pull it in for 0.3.20 ? Id really like that in order to keep the double balance check that occurs on BC before any transfer. Also is there a way to manually fiddle with account balances other than moving bitcoins around until achievement of desired accounts statuses ?
51	803274	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/803274	gavinandresen	See:
51	828754	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/828754	gavinandresen	I pulled the more generic rounding patch.
46	718700	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718700	tcatm	I think encryption should be limited to wallet.dat, so one could have multiple wallets with different passwords. This patch seems to encrypt blkindex.dat and addr.dat, too. Also, a GUI prompt to enter the password would be useful.
46	718831	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/718831	Gnonthgol	It is not possible to selectively encrypt parts of the database environment with Berkeley DB. There is several possible solutions but the best long term is to encrypt everything and add a export/import wallet feature. The gui prompt was a good idea, remember to add a non-GUI prompt for running headless.
46	719158	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719158	gavinandresen	From First, unless Im reading the bdb docs wrong, you specify a password at database creation time. And then cant change it. So, at the very least, somebody would have to write code that (safely) rewrote wallet.dat when you set or unset or changed the password. Second, encrypting everything in wallet.dat means youd have to enter your wallet password as soon as you started bitcoin (because user preference are stored in there right now), when ideally you should only enter the password as youre sending coins. And third, there are all sorts of usability issues with passwords. Users forget their passwords. They mis-type them. I wouldnt be terribly surprised if doing the simple thing and just encrypting the whole wallet with one password resulted in more lost bitcoins due to forgotten passwords than wallets stolen by trojans. I think creating a safe, useful wallet protection feature isnt easy, and there a lot of wrong ways to do it.
46	719177	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719177	gavinandresen	Gnonthgol: if youre motivated to solve this right, please jump onto the forums and work out a good approach; I think this is a very important feature to get right.
46	719183	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/719183	tcatm	Also, database encryption can currently be accomplished using something like encfs or Truecrypt to encrypt the whole .bitcoin directory. Thats probably a better workaround until we know how to get this right. Closed. Further discussion should happen on the forums as Gavin suggested.
24	662307	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/662307	mikegogulski	Hooray!
23	668598	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668598	davout	I think this needs to be explicitly allowed from the bitcoin client side, otherwise any website could start quietly bruteforcing the username/password out of a client.
23	668912	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/668912	gavinandresen	Lets continue this discussion on the forums:
23	696234	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/696234	gavinandresen	Not enough support for this right now... and there are SSL issues, too...
9	625035	https://api.github.com/repos/bitcoin/bitcoin/issues/comments/625035	gavinandresen	Small, correct, if it breaks on Windows Ill be extremely surprised (and will back it out).
