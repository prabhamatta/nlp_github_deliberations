3288	The Bitcoind daemon is spending unconfirmed outputs as inputs in new transactions. This is leading to dependency chains that could be susceptible to double spends. Some examples of this behavior: This transaction which included a fee spent the unconfirmed output transaction which included no fee. Note that in both cases, the *only* command executed against the Bitcoin Daemon (0.8.5) was "sendtoaddress". Also note that had to have its raw tx manually pushed using blockchain.info/pushtx functionality in order to appear. This is what led to the discovery that unconfirmed outputs were being spent. This issue appears to have become noticeable because of the increased user traffic on the Bitcoin network leading to more transactions with no fees. As a consequence, miners are cherry picking transactions with fees leading to backlogs and dependency chains becoming evident. There are numerous issues in the bitcointalk.org [Technical Support] sub-board as well as topics such as: on the problem.
3283	I often want to run RPC command(s) as soon as Ive started bitcoind. This lets me do that without annoying sleeps or grepping debug.log; e.g. bitcoin-cli -rpcwait getinfo
3280	after 3-5 minutes after grogram start Process: Bitcoin-Qt [18659] Path: /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Identifier: org.bitcoinfoundation.Bitcoin-Qt Version: 0.8.5 (0.8.5) Code Type: X86 (Native) Parent Process: launchd [209] Responsible: Bitcoin-Qt [18659] User ID: 502 Date/Time: 2013-11-19 13:10:48.013 +0200 OS Version: Mac OS X 10.9 (13A603) Report Version: 11 Anonymous UUID: 97F08B74-4B3F-0D35-4145-12D14E56B8B1 Sleep/Wake UUID: 3479B471-ACAE-416A-ABE7-497318064258 Crashed Thread: 0 Dispatch queue: com.apple.main-thread Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Application Specific Information: Assertion failed: (pfork != NULL), function SetBestChain, file src/main.cpp, line 1759. Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0 libsystem_kernel.dylib 0x96186952 __pthread_kill + 10 1 libsystem_pthread.dylib 0x9332e167 pthread_kill + 101 2 libsystem_c.dylib 0x9170c340 abort + 155 3 libsystem_c.dylib 0x916d743e __assert_rtn + 347 4 org.bitcoinfoundation.Bitcoin-Qt 0x000d1efc SetBestChain(CValidationState&, CBlockIndex*) + 2268 5 org.bitcoinfoundation.Bitcoin-Qt 0x000d3c28 ConnectBestBlock(CValidationState&) + 824 6 org.bitcoinfoundation.Bitcoin-Qt 0x001259e8 AppInit2(boost::thread_group&) + 22744 7 org.bitcoinfoundation.Bitcoin-Qt 0x00023440 main + 7504 8 org.bitcoinfoundation.Bitcoin-Qt 0x00020711 start + 53 Thread 1:: Dispatch queue: com.apple.libdispatch-manager 0 libsystem_kernel.dylib 0x96187992 kevent64 + 10 1 libdispatch.dylib 0x916638bd _dispatch_mgr_invoke + 238 2 libdispatch.dylib 0x91663556 _dispatch_mgr_thread + 52 Thread 2:: com.apple.CFSocket.private 0 libsystem_kernel.dylib 0x96186ace __select + 10 1 com.apple.CoreFoundation 0x96d66dc6 __CFSocketManager + 1158 2 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 3 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 4 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 3: 0 libsystem_kernel.dylib 0x96181f7a mach_msg_trap + 10 1 libsystem_kernel.dylib 0x9618116c mach_msg + 68 2 com.apple.CoreFoundation 0x96d16f69 __CFRunLoopServiceMachPort + 169 3 com.apple.CoreFoundation 0x96d16541 __CFRunLoopRun + 1393 4 com.apple.CoreFoundation 0x96d15d5a CFRunLoopRunSpecific + 394 5 com.apple.CoreFoundation 0x96d15bbb CFRunLoopRunInMode + 123 6 com.apple.AppKit 0x9026ef18 _NSEventThread + 283 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 4: 0 libsystem_kernel.dylib 0x96186ace __select + 10 1 QtCore 0x01a01a90 qt_safe_select(int, fd_set*, fd_set*, fd_set*, timeval const*) + 320 2 QtCore 0x01a05dda QEventDispatcherUNIXPrivate::doSelect(QFlags<QEventLoop::ProcessEventsFlag>, timeval*) + 394 3 QtCore 0x01a0626f QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 175 4 QtCore 0x019cf471 QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 65 5 QtCore 0x019cf84a QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 314 6 QtCore 0x018ada45 QThread::exec() + 261 7 QtCore 0x018b10d3 QThread::terminate() + 787 8 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 9 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 10 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 5: 0 libsystem_kernel.dylib 0x961867ca __psynch_cvwait + 10 1 libsystem_pthread.dylib 0x9332fd1d _pthread_cond_wait + 728 2 libsystem_pthread.dylib 0x93331bd9 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aff82 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011277d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c11c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00cea845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 6: 0 libsystem_kernel.dylib 0x961867ca __psynch_cvwait + 10 1 libsystem_pthread.dylib 0x9332fd1d _pthread_cond_wait + 728 2 libsystem_pthread.dylib 0x93331bd9 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aff82 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011277d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c11c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00cea845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 7: 0 libsystem_kernel.dylib 0x961867ca __psynch_cvwait + 10 1 libsystem_pthread.dylib 0x9332fd1d _pthread_cond_wait + 728 2 libsystem_pthread.dylib 0x93331bd9 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aff82 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011277d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c11c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00cea845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 8: 0 libsystem_kernel.dylib 0x961867ca __psynch_cvwait + 10 1 libsystem_pthread.dylib 0x9332fd1d _pthread_cond_wait + 728 2 libsystem_pthread.dylib 0x93331bd9 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aff82 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011277d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c11c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00cea845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 9: 0 libsystem_kernel.dylib 0x961867ca __psynch_cvwait + 10 1 libsystem_pthread.dylib 0x9332fd1d _pthread_cond_wait + 728 2 libsystem_pthread.dylib 0x93331bd9 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aff82 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011277d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c11c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00cea845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 10: 0 libsystem_kernel.dylib 0x961867ca __psynch_cvwait + 10 1 libsystem_pthread.dylib 0x9332fd1d _pthread_cond_wait + 728 2 libsystem_pthread.dylib 0x93331bd9 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aff82 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011277d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c11c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00cea845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 11: 0 libsystem_kernel.dylib 0x961867ca __psynch_cvwait + 10 1 libsystem_pthread.dylib 0x9332fd1d _pthread_cond_wait + 728 2 libsystem_pthread.dylib 0x93331bd9 pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000aff82 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011277d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c11c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00cea845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_pthread.dylib 0x9332d5fb _pthread_body + 144 8 libsystem_pthread.dylib 0x9332d485 _pthread_start + 130 9 libsystem_pthread.dylib 0x93332cf2 thread_start + 34 Thread 12: 0 libsystem_kernel.dylib 0x96187046 __workq_kernreturn + 10 1 libsystem_pthread.dylib 0x9332edcf _pthread_wqthread + 372 2 libsystem_pthread.dylib 0x93332cce start_wqthread + 30 Thread 0 crashed with X86 Thread State (32-bit): eax: 0x00000000 ebx: 0xa0516cec ecx: 0xbfffe42c edx: 0x96186952 edi: 0xa07a51a8 esi: 0x00000006 ebp: 0xbfffe448 esp: 0xbfffe42c ss: 0x00000023 efl: 0x00200206 eip: 0x96186952 cs: 0x0000000b ds: 0x00000023 es: 0x00000023 fs: 0x00000000 gs: 0x0000000f cr2: 0x0b7f5000 Logical CPU: 0 Error Code: 0x00080148 Trap Number: 132 Binary Images: 0x1000 - 0x5fafeb +org.bitcoinfoundation.Bitcoin-Qt (0.8.5 - 0.8.5) <3D82C31C-70E3-780D-AA51-EC5D27B05EBD> /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt 0x894000 - 0x899fe7 +libqrencode.3.dylib (5.1) <9627FE72-1198-798B-1841-A64F967F32FB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libqrencode.3.dylib 0x89d000 - 0x8a4ff7 +libminiupnpc.8.dylib (0) <2DBB7FA6-2198-8004-2ECF-F504F2081317> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libminiupnpc.8.dylib 0x8a8000 - 0x8f4fff +libssl.1.0.0.dylib (1) <641EBBF5-C97C-1D6C-EFF0-EB02A7FF7629> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib 0x90e000 - 0xa46fef +libcrypto.1.0.0.dylib (1) <0943ABB0-E2CA-20EC-B52D-E3D5E2340F02> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libcrypto.1.0.0.dylib 0xaaf000 - 0xc08fff +libdb_cxx-4.8.dylib (0) <A2028F0C-1E73-00A3-BA80-2DEF2EAC9ECB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libdb_cxx-4.8.dylib 0xc32000 - 0xc35ff3 +libboost_system-mt.dylib (0) <DC2F474D-A848-B1CA-5E46-EAB30E94A639> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_system-mt.dylib 0xc39000 - 0xc4cffb +libboost_filesystem-mt.dylib (0) <ED32F1B3-0C00-9EA8-A6E4-B4D69BBB090B> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_filesystem-mt.dylib 0xc57000 - 0xc9bff3 +libboost_program_options-mt.dylib (0) <DAE91877-14DE-370A-9571-A2EC1D7AF3D8> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_program_options-mt.dylib 0xce6000 - 0xcf8ff3 +libboost_thread-mt.dylib (0) <4F1F450A-6305-F698-98AC-E82075E11758> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_thread-mt.dylib 0xd18000 - 0xd1dff3 +libboost_chrono-mt.dylib (0) <7619296E-C4A2-2674-20C7-398C0E5D6C40> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_chrono-mt.dylib 0xd25000 - 0x16b5fe3 +QtGui (4.8.4) <C70071A5-F36B-C018-9BEB-181811A0759F> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtGui.framework/Versions/4/QtGui 0x188c000 - 0x1b3bffb +QtCore (4.8.4) <204CC6C5-048C-4746-D9AD-DF6FA3204CE7> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtCore.framework/Versions/4/QtCore 0x1bad000 - 0x1cd2ff7 +QtNetwork (4.8.4) <E7999879-10BE-D14A-6BBB-9F36A61819C0> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtNetwork.framework/Versions/4/QtNetwork 0x1d0e000 - 0x1d1ffe7 +libz.1.dylib (1.2.7) <04F507FA-B0BF-CD40-DB2E-CBF29500AF19> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libz.1.dylib 0x1d23000 - 0x1d44fe7 +libpng15.15.dylib (30) <2E174E7D-8E8B-9F51-6A39-53D3243C159E> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libpng15.15.dylib 0x297a000 - 0x297eff3 +libqgif.dylib (0) <88247A6C-7963-6E25-F271-07D15F98CF45> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqgif.dylib 0x2983000 - 0x2987fff +libqico.dylib (0) <7AE39AE4-C88A-D835-F6DB-43C38C12D8C9> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqico.dylib 0x298c000 - 0x2990fff +libqjpeg.dylib (0) <0D0902B6-EB00-4DEA-37B8-43EEB3552921> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqjpeg.dylib 0x2996000 - 0x2999ff7 +libqmng.dylib (0) <AED7B482-BE3B-C70A-3E5B-7575C58DBCE3> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqmng.dylib 0x299e000 - 0x29a0ffb +libqtga.dylib (0) <DF371BC0-F930-689E-9654-D687DE08B059> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtga.dylib 0x5400000 - 0x54b0fff ColorSyncDeprecated.dylib (426) <F54DBFF3-3165-3D15-8AE4-37B603502A5F> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/Resources/ColorSyncDeprecated.dylib 0x77cc000 - 0x77f4fe7 +liblcms.1.dylib (2.19) <81794FD6-C0FC-79D3-7188-36318A86427A> /Applications/Bitcoin-Qt.app/Contents/Frameworks/liblcms.1.dylib 0xb5b6000 - 0xb5e6fe7 +libjpeg.8.dylib (13) <96B28C90-BE02-5517-87BC-EC348C2EE25C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libjpeg.8.dylib 0xb5ec000 - 0xb639fe7 +libmng.1.dylib (2) <1A7593E8-6C76-5533-E1BE-51976CB1873C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libmng.1.dylib 0xb64e000 - 0xb652ffb +libqtiff.dylib (0) <D9486AA9-E3DB-C1BF-A248-E5689EC8B768> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtiff.dylib 0xb657000 - 0xb6a9fe7 +libtiff.3.dylib (13.7) <27FC7F5B-604D-360A-9D36-7567BEA4D1AD> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libtiff.3.dylib 0xd284000 - 0xd2a9ff9 com.apple.framework.familycontrols (4.1 - 410) <A33A97EE-C735-38BA-9B49-5D78DAA3DEDA> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0xd2be000 - 0xd2c9ffa com.apple.CommerceCore (1.0 - 42) <E59717F2-6770-3DBC-8510-F7AA61E60F57> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0xd2d3000 - 0xd30eff3 +libqtaccessiblewidgets.dylib (0) <D256CDF3-59B6-AAC8-D553-A348D30AFD9C> /Applications/Bitcoin-Qt.app/Contents/PlugIns/accessible/libqtaccessiblewidgets.dylib 0x8fe9f000 - 0x8fed1417 dyld (239.3) <4B280BB1-55F8-313F-86A6-8ADD644ED69E> /usr/lib/dyld 0x90008000 - 0x9004afff libGLU.dylib (9.0.83) <0D9BFE5A-435E-3C66-AF96-D3567B8FC87B> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x9004b000 - 0x9009afff com.apple.opencl (2.3.57 - 2.3.57) <93385E1C-00D9-31BE-9652-7F3C09484B3E> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x9009b000 - 0x9009dffe libCVMSPluginSupport.dylib (9.0.83) <BD30BDD1-DD5B-3F31-A09B-C274EA93CD7C> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib 0x9009e000 - 0x90cb9ff3 com.apple.AppKit (6.9 - 1265) <AE258D94-0272-394F-BBB7-9B5C165A4A78> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x90cba000 - 0x90cbdffb libutil.dylib (34) <B496031E-E763-3DEB-84D2-85C0F3DF2012> /usr/lib/libutil.dylib 0x90cbe000 - 0x90d0eff7 libcorecrypto.dylib (161.1) <135FD99E-2211-3DF4-825C-C9F816107F0C> /usr/lib/system/libcorecrypto.dylib 0x90d0f000 - 0x90d5bff7 libcups.2.dylib (372) <9A2BE8DC-37E4-3019-B665-1036FE7868EA> /usr/lib/libcups.2.dylib 0x90d66000 - 0x90f0e4af libobjc.A.dylib (551.1) <31CBE178-E972-30D1-ADC6-4B8345CAE326> /usr/lib/libobjc.A.dylib 0x90f0f000 - 0x90f14ff7 com.apple.print.framework.Print (9.0 - 260) <A6C465F6-C5D1-353A-9F33-19B9CEDBBC2A> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print 0x90f16000 - 0x90f16fff com.apple.Cocoa (6.8 - 20) <407DC9E6-BBCE-3D34-9BBB-00C90584FFDF> /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa 0x90f17000 - 0x90f8cffb com.apple.framework.IOKit (2.0.1 - 907.1.13) <86D72735-9DFB-35C8-83F7-CE0DCF17D354> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x90f8d000 - 0x90fb9ff7 com.apple.DictionaryServices (1.2 - 208) <33873336-BECD-3F62-A315-C45F24C1818C> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x90fba000 - 0x90fbefff com.apple.CommonPanels (1.2.6 - 96) <E7CA63C6-CEE9-3F0A-93A7-C12C653FFB80> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x91099000 - 0x911efff0 libBLAS.dylib (1094.5) <74310C2F-4FDB-3995-A01A-5AFB83010A43> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x91242000 - 0x91280ff7 com.apple.NavigationServices (3.8 - 215) <A093AAF0-248E-313E-BA82-01F69E269895> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework/Versions/A/NavigationServices 0x91281000 - 0x91301ff7 com.apple.CoreServices.OSServices (600.4 - 600.4) <1227DF22-E2DA-3764-A1CA-10CC0CEBE377> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x91302000 - 0x9130bfff com.apple.DiskArbitration (2.6 - 2.6) <6379523D-3196-370C-AE4A-8EA586E36909> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x91317000 - 0x9131bffc com.apple.IOSurface (91 - 91) <DECEEB72-3C7E-3C21-9237-E5AD293F8B09> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x9131c000 - 0x9131cffd com.apple.audio.units.AudioUnit (1.9 - 1.9) <8A37963C-DF6F-3DFF-94E9-407DC5DFEDA9> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x9131d000 - 0x91386fff com.apple.SystemConfiguration (1.13 - 1.13) <542075CD-9085-3F30-B84B-DD0277D6A40E> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x9143c000 - 0x9143efff libquarantine.dylib (71) <EE3B510E-1AEC-3171-8A1A-D6A5A42CF35C> /usr/lib/system/libquarantine.dylib 0x91548000 - 0x91654fff com.apple.ImageIO.framework (3.3.0 - 1038) <0B4A6607-9FBC-3A6C-984A-0542DE8385FB> /System/Library/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x91660000 - 0x91678ffd libdispatch.dylib (339.1.9) <6249BAE5-044F-3A7A-9CCC-03FF7E6B405B> /usr/lib/system/libdispatch.dylib 0x91679000 - 0x9168bfff libsystem_asl.dylib (217.1.4) <51EB17C9-9F5B-39F3-B6CD-8EF238B05B89> /usr/lib/system/libsystem_asl.dylib 0x916af000 - 0x91741ffe libsystem_c.dylib (997.1.1) <D06FD754-8CE3-3EB7-BE05-2EF939BBE05F> /usr/lib/system/libsystem_c.dylib 0x9174d000 - 0x9175dff7 libsasl2.2.dylib (170) <CA1C07F6-8E17-315E-AE49-AB696DDE6707> /usr/lib/libsasl2.2.dylib 0x91781000 - 0x91aacff6 com.apple.Foundation (6.9 - 1056) <C8AE9C03-3460-354A-A8B6-EF4955BE600D> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x91aad000 - 0x91aaeffa libsystem_sandbox.dylib (278.10) <F3C9C427-AF9F-3CE0-95FF-DC9ACA0B5760> /usr/lib/system/libsystem_sandbox.dylib 0x91e34000 - 0x91ea7fff com.apple.SearchKit (1.4.0 - 1.4.0) <6F607AB6-7553-37BA-BEC5-98FD7C27FAD7> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x91eab000 - 0x91f14fff com.apple.datadetectorscore (5.0 - 354.0) <0C6C812D-3E7A-31A4-BFDE-CD3316AA35B6> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore 0x91f15000 - 0x91f16fff liblangid.dylib (117) <F18F76C6-7E4B-34AD-AE81-C1C031BF2F7D> /usr/lib/liblangid.dylib 0x91f18000 - 0x91f2cff9 com.apple.MultitouchSupport.framework (245.13 - 245.13) <6860A0D0-3654-3B02-B2E9-C4D2637167B8> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x91f2d000 - 0x91f38ff6 com.apple.NetAuth (5.0 - 5.0) <3B2E9615-EE12-38FC-BDCF-09529FF9464B> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth 0x9235f000 - 0x923c0ff7 com.apple.Symbolication (1.4 - 129) <E5948C08-6ADF-3D86-9134-6AE49CF1DA0F> /System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication 0x924d9000 - 0x92527ff9 com.apple.HIServices (1.22 - 466) <30636237-408A-3552-90C1-1279348DF7CB> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x92528000 - 0x92626fff libJP2.dylib (1038) <EE0B9985-625D-39E6-B425-03FB75BA2594> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib 0x92635000 - 0x92666ffa libsystem_m.dylib (3047.16) <28E614E8-7802-3E84-960A-AD4721EF10F7> /usr/lib/system/libsystem_m.dylib 0x9266f000 - 0x9267dfff libxar.1.dylib (202) <B73748D4-F830-3C71-98B3-7A3ABF5136FD> /usr/lib/libxar.1.dylib 0x9267e000 - 0x92761ff7 libcrypto.0.9.8.dylib (50) <B367D3A3-FC1F-326C-92EC-CAD81666524D> /usr/lib/libcrypto.0.9.8.dylib 0x92a63000 - 0x92abcffa libTIFF.dylib (1038) <691DAAFD-D72B-3BE9-AE5C-84AF86BE66CD> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x92abd000 - 0x92ae1fff libJPEG.dylib (1038) <212B0986-9227-397C-9493-BCB190EC020E> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x92ae2000 - 0x92b05ff7 libc++abi.dylib (48) <5367BE5A-D475-3FB4-972D-E1DC999A709A> /usr/lib/libc++abi.dylib 0x92b06000 - 0x92b20ff7 com.apple.GenerationalStorage (2.0 - 160.2) <8755F7F1-2402-387C-A32A-2270E7D680C8> /System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage 0x92b21000 - 0x92b26ff3 libsystem_platform.dylib (24.1.4) <875321B9-34EF-3FCC-880C-633FA05223F5> /usr/lib/system/libsystem_platform.dylib 0x92b27000 - 0x92b27fff com.apple.CoreServices (59 - 59) <06747539-5035-3307-8645-9BC4E7F89023> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x92b28000 - 0x92c8aff3 com.apple.CFNetwork (673.0.3 - 673.0.3) <5E0E9AE8-073B-3F2B-B0C7-A0129DE787F6> /System/Library/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x92c8b000 - 0x92c95ff7 com.apple.DirectoryService.Framework (10.9 - 173.1.1) <D6735614-EF4B-389F-BF99-7D8416A504BA> /System/Library/Frameworks/DirectoryService.framework/Versions/A/DirectoryService 0x92c96000 - 0x92c9affe libCoreVMClient.dylib (58.1) <0EB8FFD7-AFED-3A63-810E-29629831D43D> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x92c9b000 - 0x92c9dff2 com.apple.EFILogin (2.0 - 2) <BC558029-74C0-3A69-B376-8F4CBF8C338F> /System/Library/PrivateFrameworks/EFILogin.framework/Versions/A/EFILogin 0x92c9e000 - 0x92cd6ff7 com.apple.MediaKit (15 - 709) <82E0F8C0-313C-379C-9994-4D21587D0C0C> /System/Library/PrivateFrameworks/MediaKit.framework/Versions/A/MediaKit 0x9329b000 - 0x9329eff7 com.apple.help (1.3.3 - 46) <AB6292FA-D3BC-3D56-B3A5-2BE630A503E7> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x932f1000 - 0x93321ff7 com.apple.CoreServicesInternal (184.8 - 184.8) <88528205-9452-3EEC-BB27-DAAA7EC81E04> /System/Library/PrivateFrameworks/CoreServicesInternal.framework/Versions/A/CoreServicesInternal 0x93322000 - 0x9332bfff libsystem_notify.dylib (121) <623269F5-1518-3035-A916-8AF83C972154> /usr/lib/system/libsystem_notify.dylib 0x9332c000 - 0x93333ffb libsystem_pthread.dylib (53.1.4) <8B1B7B84-1B5D-32A8-AC0D-1E689E5C8A4C> /usr/lib/system/libsystem_pthread.dylib 0x93340000 - 0x93348ff7 libCGCMS.A.dylib (599.7) <A7404924-9A2B-3324-A934-BD08953E7098> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGCMS.A.dylib 0x93349000 - 0x93391fff com.apple.PerformanceAnalysis (1.47 - 47) <16935C0F-7F9F-316E-9D46-11973DE0904A> /System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis 0x933c3000 - 0x9345aff7 com.apple.ink.framework (10.9 - 207) <EF00BCCB-B270-3F3D-9424-EF5F4BC23E25> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x9345b000 - 0x9345bfff com.apple.Accelerate.vecLib (3.9 - vecLib 3.9) <DDAC0B59-F886-3AB1-98E8-C71FFF161CD4> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x9345c000 - 0x9346bfff libGL.dylib (9.0.83) <E76D1F2A-D98B-3464-AD0B-FC1EBBADF027> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x9346c000 - 0x9346cfff com.apple.ApplicationServices (48 - 48) <7967F6FA-2984-3CC3-AD9A-7B9AEC562A2A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x9346d000 - 0x9346dffd libOpenScriptingUtil.dylib (157) <4D06E8ED-D312-34EA-A448-DFF45ADC3CE5> /usr/lib/libOpenScriptingUtil.dylib 0x9346e000 - 0x937e3ff9 com.apple.HIToolbox (2.1 - 695) <74E2DE33-E48E-3206-BD78-AFB988235A83> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x9410b000 - 0x9410cfff libsystem_blocks.dylib (63) <2AC67D5E-ECD4-3644-A53C-9684F9B7AA33> /usr/lib/system/libsystem_blocks.dylib 0x9410d000 - 0x94541ff7 com.apple.vision.FaceCore (3.0.0 - 3.0.0) <5B12F3E9-84F6-3183-B85D-FD19EF800ADB> /System/Library/PrivateFrameworks/FaceCore.framework/Versions/A/FaceCore 0x94feb000 - 0x952d5fd2 com.apple.vImage (7.0 - 7.0) <256972F0-3DBC-3CE1-9EE8-B48243868729> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x952d6000 - 0x952f1ff5 com.apple.openscripting (1.4 - 157) <5C161A52-8D2F-3D56-A988-05727BED7A59> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x952f2000 - 0x95391ff7 libCoreStorage.dylib (380) <55467C87-E1A3-3057-B428-9BCEFD39E36D> /usr/lib/libCoreStorage.dylib 0x953f1000 - 0x9540dff9 com.apple.Ubiquity (1.3 - 289) <1CEDC83D-7282-3B4D-8CF7-4FE045012391> /System/Library/PrivateFrameworks/Ubiquity.framework/Versions/A/Ubiquity 0x9540e000 - 0x95672fff com.apple.CoreData (107 - 481) <F699EC21-57D9-3AE6-A17B-C1D1092780BD> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x95673000 - 0x9567fff7 com.apple.OpenDirectory (10.9 - 173.1.1) <2AA24814-2DC6-3E28-B71B-186B686F0F19> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x95b69000 - 0x95bdeff1 com.apple.ApplicationServices.ATS (360 - 363.1) <5C9BC698-0CC1-3F6A-9F9D-BCC3A9C3D6DC> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x95c35000 - 0x95c40fff libcsfde.dylib (380) <C9E61AFB-1A9D-324B-9827-06B182CDD7B0> /usr/lib/libcsfde.dylib 0x95c90000 - 0x95c93fff libdyld.dylib (239.3) <729B32AC-EEE2-3739-8CE3-F90838D51906> /usr/lib/system/libdyld.dylib 0x95c94000 - 0x95cc5ffd com.apple.GSS (4.0 - 2.0) <6BA01155-4DAD-30EE-B480-D224650EA010> /System/Library/Frameworks/GSS.framework/Versions/A/GSS 0x95cc6000 - 0x95cdefff com.apple.CFOpenDirectory (10.9 - 173.1.1) <630A5CCF-8FC3-379D-B0BD-41DCE1F0B624> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x95cdf000 - 0x95d68fff com.apple.CoreSymbolication (3.0 - 141) <178DDF5C-B6DA-39BD-84F5-FD3FA7E93BF8> /System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication 0x95d69000 - 0x95d6cffa libCGXType.A.dylib (599.7) <2738FF52-4B47-31AD-B7E5-412F6AFACC2A> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x95d6d000 - 0x95e7fffc libsqlite3.dylib (158) <B3DB0FED-FE4C-314D-8329-CF7708C8AAF4> /usr/lib/libsqlite3.dylib 0x95e80000 - 0x95e83ff9 com.apple.TCC (1.0 - 1) <A5FCF7AA-3F56-3A19-9DF1-661F1F02F79D> /System/Library/PrivateFrameworks/TCC.framework/Versions/A/TCC 0x95e84000 - 0x95fbbff3 com.apple.desktopservices (1.8 - 1.8) <4D853961-F911-3FE2-A7DF-3130EA1D8CEB> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x95fbc000 - 0x9612effb com.apple.audio.toolbox.AudioToolbox (1.9 - 1.9) <E5FFD35D-18CF-333C-BECE-39F8E47BE707> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x9612f000 - 0x9613fff5 com.apple.LangAnalysis (1.7.0 - 1.7.0) <71DE7754-0A47-3F35-B1BF-B1FE7E1311E0> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x96140000 - 0x9616eff3 com.apple.DebugSymbols (106 - 106) <FC70F4C9-B2A6-352F-9563-6C085E9DDDB8> /System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols 0x9616f000 - 0x9618cff4 libsystem_kernel.dylib (2422.1.72) <C5641F6C-E271-380A-A656-AE4C04345602> /usr/lib/system/libsystem_kernel.dylib 0x96313000 - 0x964d9ffb libicucore.A.dylib (511.25) <44DDE9A4-578E-3D23-A41A-D8795D000A18> /usr/lib/libicucore.A.dylib 0x964da000 - 0x96530ff6 com.apple.ScalableUserInterface (1.0 - 1) <2C81641B-FA30-32FF-8B3E-3CB9BF53B2D9> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/ScalableUserInterface.framework/Versions/A/ScalableUserInterface 0x96598000 - 0x965a1fff com.apple.speech.recognition.framework (4.2.4 - 4.2.4) <CF8E5706-F744-3139-8A51-D52BF055D19F> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x965a2000 - 0x965deff4 com.apple.RemoteViewServices (2.0 - 94) <BEEE6ADF-7DA3-3D68-BCB0-9863BE1A1F46> /System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices 0x965f3000 - 0x9661afff com.apple.CoreVideo (1.8 - 117.2) <A53FDD90-F200-3F7C-8A8E-5DE36D3DFBB0> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x9661b000 - 0x9690dff8 com.apple.CoreImage (9.0.54) <D7BC3E53-EF5B-3A14-8808-8D45EE505B48> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/CoreImage.framework/Versions/A/CoreImage 0x9690e000 - 0x96979ff9 com.apple.Heimdal (4.0 - 2.0) <E3091095-A893-3089-8DA1-8705B3BE5BF9> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal 0x96985000 - 0x96bf2ff6 com.apple.security (7.0 - 55471) <5FCF76B2-92C6-3404-87D3-91B3F6E203AA> /System/Library/Frameworks/Security.framework/Versions/A/Security 0x96bf3000 - 0x96c9fffb libvMisc.dylib (423.32) <43873EFF-FB43-3301-BEE8-F2C3A046D7A6> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x96ca0000 - 0x96ea2ff7 com.apple.CoreFoundation (6.9 - 855.11) <50F70E07-043A-3A2F-87EF-A36BA6C5C9D9> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x96ec3000 - 0x96ed0ff7 com.apple.AppleFSCompression (56 - 1.0) <0C44B3E4-C4A7-3A65-9C1A-334CA3E35BDB> /System/Library/PrivateFrameworks/AppleFSCompression.framework/Versions/A/AppleFSCompression 0x96ed1000 - 0x96ef9ff7 libRIP.A.dylib (599.7) <461297C0-DDA9-3613-8F27-D7F1AC57208F> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x96efa000 - 0x96f8bfff com.apple.ColorSync (4.9.0 - 4.9.0) <8366AE10-0396-3100-B87A-A176E8ECE7B6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x96f8c000 - 0x97077ff4 com.apple.DiskImagesFramework (10.9 - 371.1) <FC13BD5A-0FB7-35D5-A8DF-0510CFA996FE> /System/Library/PrivateFrameworks/DiskImages.framework/Versions/A/DiskImages 0x970ad000 - 0x970d1fff libxpc.dylib (300.1.17) <252BC88F-A5CA-3E67-AEDB-3D7B9F4537E2> /usr/lib/system/libxpc.dylib 0x970d2000 - 0x970d9ff2 com.apple.NetFS (6.0 - 4.0) <915AA303-C02B-3B0C-8208-D8AAA4350DB4> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x97186000 - 0x9718aff7 libmacho.dylib (845) <D8E93E59-1F80-3413-B9CF-78B848F6E873> /usr/lib/system/libmacho.dylib 0x9743f000 - 0x9750ffef libvDSP.dylib (423.32) <E2FA7230-A001-3F6B-9ACF-6998C51AD7DC> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x97510000 - 0x975d3ff1 com.apple.CoreText (352.0 - 367.15) <746AD442-F7B4-3273-A36D-C7103D26F727> /System/Library/Frameworks/CoreText.framework/Versions/A/CoreText 0x975d7000 - 0x975d7fff libkeymgr.dylib (28) <1B097DEA-011E-3B1C-86D5-6C7FAD5C765A> /usr/lib/system/libkeymgr.dylib 0x984e1000 - 0x984e2ffc com.apple.TrustEvaluationAgent (2.0 - 25) <064B485D-56E0-3DD7-BBE2-E08A5BFFF8B3> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x98569000 - 0x98581ff7 libsystem_malloc.dylib (23.1.10) <69F485C9-B3E7-3E36-A06C-D7DFD29D22E1> /usr/lib/system/libsystem_malloc.dylib 0x987eb000 - 0x988b8ff7 com.apple.backup.framework (1.5 - 1.5) <E33257DD-A751-3230-89B7-B4B79F70A8FB> /System/Library/PrivateFrameworks/Backup.framework/Versions/A/Backup 0x98b76000 - 0x98c66ffb libiconv.2.dylib (41) <848FEBA7-2E3E-3ECB-BD59-007F32468787> /usr/lib/libiconv.2.dylib 0x98c67000 - 0x98c67fff com.apple.Carbon (154 - 157) <6E680560-FD53-3C00-BDF7-7AFA28747DC8> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x98c6c000 - 0x98d47ff7 com.apple.LaunchServices (572.23 - 572.23) <7E52FB5C-9ECF-3CB9-BF18-6652B8D8CDE0> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x98d48000 - 0x98d54ffe libkxld.dylib (2422.1.72) <F9B35FA5-C936-3286-A055-2B0780A674AC> /usr/lib/system/libkxld.dylib 0x98d55000 - 0x99056ff7 com.apple.CoreServices.CarbonCore (1077.13 - 1077.13) <C514A490-8689-3665-AD82-863B5FF8D6AE> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x99057000 - 0x9907ffff libsystem_info.dylib (449.1.3) <BB68E8CC-422F-3121-8C86-D0F766FB696D> /usr/lib/system/libsystem_info.dylib 0x991f1000 - 0x991f2fff libremovefile.dylib (33) <ED35EA79-EB06-3B84-A6D4-B1A9D6B8648D> /usr/lib/system/libremovefile.dylib 0x991fc000 - 0x9920ffff com.apple.ImageCapture (9.0 - 9.0) <63D5C96F-1893-3F35-ADFB-EE451AFD87E6> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x99210000 - 0x99210fff libodfde.dylib (20) <98FC02AE-C596-3ED5-80D1-C502FF6115ED> /usr/lib/libodfde.dylib 0x99211000 - 0x99213ffb libRadiance.dylib (1038) <F0D3F13B-5628-3DF9-8B86-A4D914567B25> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x99214000 - 0x9921fffb libcommonCrypto.dylib (60049) <F8E60C43-22EE-3E0B-9546-3365056901F1> /usr/lib/system/libcommonCrypto.dylib 0x9928c000 - 0x9928dffd libunc.dylib (28) <22A126A1-DCFB-3BE5-A66B-C973F0A5D839> /usr/lib/system/libunc.dylib 0x9928e000 - 0x99296fff libcopyfile.dylib (103) <1B1484BD-08B6-3BA9-94CA-A7C24B610EB3> /usr/lib/system/libcopyfile.dylib 0x992f6000 - 0x99300fff com.apple.bsd.ServiceManagement (2.0 - 2.0) <B84F3916-236A-347B-9C1F-3DE571496737> /System/Library/Frameworks/ServiceManagement.framework/Versions/A/ServiceManagement 0x99301000 - 0x9932cff5 com.apple.ChunkingLibrary (2.0 - 155.1) <50BBBBF8-F30B-39EA-A512-11A47F429F2C> /System/Library/PrivateFrameworks/ChunkingLibrary.framework/Versions/A/ChunkingLibrary 0x99359000 - 0x99365ffc libbz2.1.0.dylib (29) <3CEF1E92-BA42-3F8A-8E8D-9E1F7658E5C7> /usr/lib/libbz2.1.0.dylib 0x99366000 - 0x9936cffb libunwind.dylib (35.3) <099D1A6F-A1F0-3D05-BF1C-0A7BB32D39C2> /usr/lib/system/libunwind.dylib 0x99419000 - 0x99458ff7 com.apple.bom (12.0 - 192) <50F9D23C-9C9A-38BF-B4E2-66D93BE2A174> /System/Library/PrivateFrameworks/Bom.framework/Versions/A/Bom 0x99459000 - 0x99488fff com.apple.framework.SystemAdministration (1.0 - 1.0) <05E81260-7DC7-3546-B45D-15B3E5DF056D> /System/Library/PrivateFrameworks/SystemAdministration.framework/Versions/A/SystemAdministration 0x99489000 - 0x99497ff7 com.apple.Sharing (132.2 - 132.2) <87DBFC7A-9689-3B8E-AD16-5A9DFF9DE625> /System/Library/PrivateFrameworks/Sharing.framework/Versions/A/Sharing 0x99498000 - 0x9949cffa libGIF.dylib (1038) <5CEB4EDF-B0B6-33A6-BDDE-8C0D3226FA72> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x9949d000 - 0x994a6fff com.apple.audio.SoundManager (4.1 - 4.1) <68B7CEB7-AF09-3E24-8548-6ABF065B5186> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework/Versions/A/CarbonSound 0x994a7000 - 0x994fafff com.apple.htmlrendering (77 - 1.1.4) <408FA30F-4FE9-3162-9FFD-677E8569C1EA> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HTMLRendering.framework/Versions/A/HTMLRendering 0x994fd000 - 0x995e9ff7 libxml2.2.dylib (26) <32040145-6FD6-3AD2-B98B-39F73BF9AC47> /usr/lib/libxml2.2.dylib 0x995ea000 - 0x995eefff libheimdal-asn1.dylib (323.12) <9EA2A221-301B-3B9A-BBF2-38134145B5A8> /usr/lib/libheimdal-asn1.dylib 0x995ef000 - 0x995f3ffa libcache.dylib (62) <9730D7F2-D226-3F30-8D26-BF598CB781F6> /usr/lib/system/libcache.dylib 0x995f4000 - 0x9960fff6 libPng.dylib (1038) <F39168D4-ABEB-3C2D-A763-B9D3E1EF43BC> /System/Library/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x99957000 - 0x99961ff7 com.apple.speech.synthesis.framework (4.6.2 - 4.6.2) <16E20DCD-89F4-3C8E-9DBA-EED359807038> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x9996a000 - 0x99a50ff7 com.apple.coreui (2.1 - 231) <1C1AE894-C5C2-3F1C-BF29-B152ECD9BD88> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x99b7f000 - 0x99bb4ffd libssl.0.9.8.dylib (50) <F3BEA2DF-DB84-37F0-B4C7-97C0A4DF19C9> /usr/lib/libssl.0.9.8.dylib 0x99bb5000 - 0x99bd2ffb libresolv.9.dylib (54) <3EC12A7F-6BA1-3976-9F1F-6A4B76303028> /usr/lib/libresolv.9.dylib 0x99bd3000 - 0x99c19ff7 libFontRegistry.dylib (127) <A0930DB2-A6C6-3C6E-B4A2-119E0D76FD7D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x99c1a000 - 0x99c20ff7 com.apple.AOSNotification (1.7.0 - 760.3) <63F7E7F8-6FA3-38D3-9907-CDF360CA9354> /System/Library/PrivateFrameworks/AOSNotification.framework/Versions/A/AOSNotification 0x99c47000 - 0x99c84ff7 libauto.dylib (185.5) <CD008E66-4A0C-35F5-8D72-80D76A716A03> /usr/lib/libauto.dylib 0x9a476000 - 0x9a484ff3 com.apple.opengl (9.0.83 - 9.0.83) <16CFFD50-217E-3E18-88AF-7F2AD980628B> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x9a704000 - 0x9a70cfff libsystem_dnssd.dylib (522.1.11) <1C015806-B971-34F9-B162-3DF7897351D0> /usr/lib/system/libsystem_dnssd.dylib 0x9aa34000 - 0x9aa3dffa com.apple.CommonAuth (4.0 - 2.0) <6CB82D57-3C55-39E5-9036-8047DF3E6F57> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth 0x9ab12000 - 0x9abd9ff7 com.apple.DiscRecording (8.0 - 8000.4.6) <84A7EC09-3BBD-3E04-A88C-6D3B724448FF> /System/Library/Frameworks/DiscRecording.framework/Versions/A/DiscRecording 0x9abda000 - 0x9abe7fff com.apple.Librarian (1.2 - 1) <F85681E3-3398-327B-829B-1D8078C38C22> /System/Library/PrivateFrameworks/Librarian.framework/Versions/A/Librarian 0x9abf8000 - 0x9abfbffe com.apple.LoginUICore (3.0 - 3.0) <6FE961A4-3C17-3004-B50B-FD78FDC28350> /System/Library/PrivateFrameworks/LoginUIKit.framework/Versions/A/Frameworks/LoginUICore.framework/Versions/A/LoginUICore 0x9abfc000 - 0x9ac51fff libc++.1.dylib (120) <10C0A136-64F9-3CC2-9420-013247032120> /usr/lib/libc++.1.dylib 0x9ac52000 - 0x9ac53fff libSystem.B.dylib (1197.1.1) <C58F0CC9-C1FD-3024-9358-D3359A6BBCAD> /usr/lib/libSystem.B.dylib 0x9ac54000 - 0x9ac62ff7 libz.1.dylib (53) <858B4D9F-D87E-3D81-B07A-DF9632BD185F> /usr/lib/libz.1.dylib 0x9ac6e000 - 0x9ad62fff libFontParser.dylib (111.1) <D8F9B2A4-41A6-3407-8D80-13A841F97BE5> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x9ad63000 - 0x9ad64fff libDiagnosticMessagesClient.dylib (100) <B936B1D4-90BB-395D-8EA9-E1237608E7D0> /usr/lib/libDiagnosticMessagesClient.dylib 0x9ad65000 - 0x9adabfff libcurl.4.dylib (78) <EC84399F-5EA8-321B-B122-99730CC557C8> /usr/lib/libcurl.4.dylib 0x9af74000 - 0x9afd0ffa com.apple.print.framework.PrintCore (9.0 - 428) <3E248391-2669-328B-B84F-8763FE8E92BB> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x9afd1000 - 0x9b06dfff com.apple.QD (3.50 - 298) <F73FD4D4-17A4-37D6-AC06-7CA5A8BA1212> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x9b06e000 - 0x9b070fff libsystem_configuration.dylib (596.12) <1C31C3F6-568D-3854-AE03-A5DA2F39297E> /usr/lib/system/libsystem_configuration.dylib 0x9b071000 - 0x9b079fff liblaunch.dylib (842.1.4) <3798500D-4436-3AEB-B273-7F2428C33A4A> /usr/lib/system/liblaunch.dylib 0x9b07a000 - 0x9b226ff1 com.apple.QuartzCore (1.8 - 332.0) <07F9B77F-35A2-3D21-99FA-CD3FCE5B9C7B> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x9b227000 - 0x9b240fff com.apple.Kerberos (3.0 - 1) <91F17EB2-C70C-359C-B09D-96B52D2A9C9F> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x9b25b000 - 0x9b286ff7 libsystem_network.dylib (241.3) <71EBA489-386D-3608-ADE6-CB50EBD1AB1B> /usr/lib/system/libsystem_network.dylib 0x9b287000 - 0x9b31fff7 com.apple.Metadata (10.7.0 - 800.12) <0AE4CD6B-FDFC-31ED-9F2C-FE870155CAF9> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x9b42e000 - 0x9b44afff libCRFSuite.dylib (34) <FFF76EBA-DF35-3A5F-857F-3F4B1C9F4C77> /usr/lib/libCRFSuite.dylib 0x9b450000 - 0x9b4a5ff7 com.apple.audio.CoreAudio (4.2.0 - 4.2.0) <0F1C111F-1E64-33BB-A69F-14643B3037D5> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x9b4a6000 - 0x9b4defff com.apple.LDAPFramework (2.4.28 - 194.5) <0C42A932-15E8-3CD1-AC35-1DF7D41B25A2> /System/Library/Frameworks/LDAP.framework/Versions/A/LDAP 0x9b4df000 - 0x9b4e4ff6 libcompiler_rt.dylib (35) <9924DF2E-D80B-3A21-920D-544A4597203F> /usr/lib/system/libcompiler_rt.dylib 0x9b4e5000 - 0x9b4e7fff com.apple.securityhi (9.0 - 55005) <51765C73-80D1-33E3-9589-3E88380CE007> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x9b4e8000 - 0x9b4e8fff com.apple.Accelerate (1.9 - Accelerate 1.9) <C85070A7-D942-3CFA-981F-5864480788C8> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x9b5ad000 - 0x9b5d7fff libxslt.1.dylib (13) <249D54AB-1D82-38FE-ABEC-0D575450C73B> /usr/lib/libxslt.1.dylib 0x9b5d8000 - 0x9b60efff com.apple.IconServices (25 - 25.17) <A4B5242B-765E-3D58-B066-BBEDB5947AAD> /System/Library/PrivateFrameworks/IconServices.framework/Versions/A/IconServices 0x9b60f000 - 0x9b66dffd com.apple.AE (665.5 - 665.5) <54F2F247-160C-3A22-A6E3-5D49655A67AB> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x9b6c4000 - 0x9b73aff3 com.apple.securityfoundation (6.0 - 55122) <25149798-A37E-316F-84AB-93029EAF33D8> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x9b73b000 - 0x9bb00ff6 libLAPACK.dylib (1094.5) <E6286E68-3501-31AC-813E-75B3B3968011> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x9bb01000 - 0x9bb52ff1 libstdc++.6.dylib (60) <354F284B-2343-3810-9CA2-E28038824F6E> /usr/lib/libstdc++.6.dylib 0x9bb7e000 - 0x9bb86ffe libGFXShared.dylib (9.0.83) <35644AAA-B1E7-367C-90C0-378024F8A46A> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x9bb87000 - 0x9bbc4ffb libGLImage.dylib (9.0.83) <FA15FEB5-54E4-313B-8E78-A2D2E6C88FE1> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x9bbc5000 - 0x9bbd0fff com.apple.CrashReporterSupport (10.9 - 538) <7A5FF845-433C-33E3-99B5-F6AA5B825734> /System/Library/PrivateFrameworks/CrashReporterSupport.framework/Versions/A/CrashReporterSupport 0x9bed3000 - 0x9bed7ffc libpam.2.dylib (20) <50623D44-795F-3E28-AA85-23E0E7E2AE0E> /usr/lib/libpam.2.dylib 0x9bed8000 - 0x9beeafff libbsm.0.dylib (33) <1BE92DB5-0D2F-3BB5-BCC6-8A71EF2A3450> /usr/lib/libbsm.0.dylib 0x9bf54000 - 0x9c34cff3 com.apple.CoreGraphics (1.600.0 - 599.7) <DB004990-F06F-3768-AE4C-191B3C748EFC> /System/Library/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics External Modification Summary: Calls made by other processes targeting this process: task_for_pid: 1 thread_create: 0 thread_set_state: 0 Calls made by this process: task_for_pid: 0 thread_create: 0 thread_set_state: 0 Calls made by all processes on this machine: task_for_pid: 96044 thread_create: 0 thread_set_state: 0 VM Region Summary: ReadOnly portion of Libraries: Total=166.5M resident=69.1M(41%) swapped_out_or_unallocated=97.4M(59%) Writable regions: Total=310.7M written=206.7M(67%) resident=221.1M(71%) swapped_out=0K(0%) unallocated=89.6M(29%) REGION TYPE VIRTUAL =========== ======= CG backing stores 600K CG shared images 204K CoreServices 812K Kernel Alloc Once 4K MALLOC 279.2M MALLOC (admin) 48K Memory Tag 242 12K Stack 69.2M VM_ALLOCATE 16.4M __DATA 14.3M __IMAGE 528K __LINKEDIT 49.5M __OBJC 1860K __PAGEZERO 4K __TEXT 116.9M __UNICODE 544K mapped file 192.8M shared memory 4K =========== ======= TOTAL 742.9M Model: iMac12,2, BootROM IM121.0047.B1F, 4 processors, Intel Core i7, 3.4 GHz, 32 GB, SMC 1.72f2 Graphics: AMD Radeon HD 6970M, AMD Radeon HD 6970M, PCIe, 2048 MB Memory Module: BANK 0/DIMM0, 8 GB, DDR3, 1333 MHz, 0x029E, 0x434D534F384758334D314131333333433920 Memory Module: BANK 1/DIMM0, 8 GB, DDR3, 1333 MHz, 0x029E, 0x434D534F384758334D314131333333433920 Memory Module: BANK 0/DIMM1, 8 GB, DDR3, 1333 MHz, 0x029E, 0x434D534F384758334D314131333333433920 Memory Module: BANK 1/DIMM1, 8 GB, DDR3, 1333 MHz, 0x029E, 0x434D534F384758334D314131333333433920 AirPort: spairport_wireless_card_type_airport_extreme (0x168C, 0x9A), Atheros 9380: 4.0.74.0-P2P Bluetooth: Version 4.2.0f6 12982, 3 services, 23 devices, 1 incoming serial ports Network Service: Thunderbolt Ethernet, Ethernet, en5 PCI Card: Apple 57762-A0, Ethernet Controller, Thunderbolt@10,0,0 Serial ATA Device: Hitachi HDS723020BLA642, 2 TB Serial ATA Device: APPLE SSD TS256C, 251 GB Serial ATA Device: HL-DT-STDVDRW GA32N USB Device: FaceTime HD Camera (Built-in) USB Device: Hub USB Device: BRCM2046 Hub USB Device: Bluetooth USB Host Controller USB Device: Hub USB Device: Internal Memory Card Reader USB Device: IR Receiver Thunderbolt Bus: iMac, Apple Inc., 25.1 Thunderbolt Device: Thunderbolt to Gigabit Ethernet Adapter, Apple Inc., 3, 5.5
3278	Pull requests #3259, #3260, #3261, #3262, #3263, #3264 from Updated the commit messages and made the commit titles more informative.
3275	This adds to the to-do list for each release, avoiding future situations like
3272	I was merging change this every time before generation of the doxygen developer docs (https://dev.visucore.com/bitcoin/doxygen/) but theres no reason why it cant just be merged upstream.
3268	GUIUtil::setClipboard() was introduced by the Coincontrol pull and it makes sense to use it now :).
3267	- add missing license headers - make compatible with Qt5 - enforce header cleanup style - small code style cleanups - rename Coin Control dialog into Coin Control Address Selection - use default font for the windows labels (no monospace)
3264	Upgraded to serial 21. - Add support for Clang - Further details can be found at <http://savannah.gnu.org/patch/?8186>.
3263	Upgraded to serial 27. - Use ls -r in order to try newer version before older ones. Simplify ls pattern so also dylibs are detected.
3262	Upgraded to serial 17. - Use ls -r rather than non-portable tool tac. Simplify filepattern in ls expression so dylib (on OSX) are also detected.
3261	Upgraded to serial 22. - Fixed detection of dynamic libraries on Mac OS X (*.dylib) - See for further details.
3260	Upgraded to serial 26 - Fixed cut-and-paste error. - See for further details. - Use ls -r rather than non-portable tool tac. - Simplify filepattern in ls expression so dylib (on OSX) are also detected.
3259	Upgraded to serial 21. - Add aarch64 to the list of lib64 architectures
3258	Dont talk about it, just merge it ^^. NO other change than removal of spaces.
3257	- example: if util.h includes stdint.h, remove it from util.cpp, as util.h is the first header included in util.cpp
3255	- remove default value for parent variable in dialogs, which should appear centered over main GUI and pass appropriate value - add some addition NULL pointer checks
3253	Rebased version of Coin Control #2343 (all changes were trivial; biggest conflicts were `uint64`->`uint64_t` and the header refactor)
3252	Adds three new languages: - de_AT: German (Austria) - gl: Galician - sl_SI: Slovenian (Slovenia) Updates many others. Thanks to the translators contributing on Transifex!
3251	spellcheck.
3248	This is more consistent with other places in the GUI. ![overviewalignright](https://f.cloud.github.com/assets/126646/1539303/35e0bb78-4d06-11e3-8cad-d6eeff582cf8.png)
3247	- example: if util.h includes stdint.h, remove it from util.cpp, as util.h is the first header included in util.cpp
3246	Rebased (and pulltester-fixed) version of #3184
3245	I just tried running the `test_bitcoin.exe` as produced by the pull tester on a WXP VM. For some reasons, there are many failures in netbase_tests. Running 103 test cases... netbase_tests.cpp(16): error in "netbase_networks": check CNetAddr("2001::8888").GetNetwork() == NET_IPV6 failed netbase_tests.cpp(17): error in "netbase_networks": check CNetAddr("FD87:D87E:EB43:edb1:8e4:3588:e546:35ca").GetNetwork() == NET_TOR failed netbase_tests.cpp(23): error in "netbase_properties": check CNetAddr("::FFFF:192.168.1.1").IsIPv4() failed netbase_tests.cpp(28): error in "netbase_properties": check CNetAddr("2001:0DB8::").IsRFC3849() failed netbase_tests.cpp(30): error in "netbase_properties": check CNetAddr("2002::1").IsRFC3964() failed netbase_tests.cpp(31): error in "netbase_properties": check CNetAddr("FC00::").IsRFC4193() failed netbase_tests.cpp(32): error in "netbase_properties": check CNetAddr("2001::2"). IsRFC4380() failed netbase_tests.cpp(33): error in "netbase_properties": check CNetAddr("2001:10::").IsRFC4843() failed netbase_tests.cpp(34): error in "netbase_properties": check CNetAddr("FE80::").IsRFC4862() failed netbase_tests.cpp(35): error in "netbase_properties": check CNetAddr("64:FF9B::").IsRFC6052() failed netbase_tests.cpp(36): error in "netbase_properties": check CNetAddr("FD87:D87E:EB43:edb1:8e4:3588:e546:35ca").IsTor() failed netbase_tests.cpp(38): error in "netbase_properties": check CNetAddr("::1").IsLocal() failed netbase_tests.cpp(40): error in "netbase_properties": check CNetAddr("2001::1"). IsRoutable() failed netbase_tests.cpp(83): error in "netbase_lookupnumeric": check TestParse("::ffff:127.0.0.1", "127.0.0.1:65535") failed netbase_tests.cpp(84): error in "netbase_lookupnumeric": check TestParse("::", "[::]:65535") failed netbase_tests.cpp(85): error in "netbase_lookupnumeric": checkTestParse("[::]:8333", "[::]:8333") failed netbase_tests.cpp(95): error in "onioncat_test": check addr1 == addr2 failed *** 17 failures detected in test suite "Bitcoin Test Suite"
3244	Change mingw build to use C99 printf statements. Otherwise, format specifiers such as PRId64 will not work on XP or earlier (see This bug was introduced with 51ed9ec9. Continued from #3237 (Silence inttypes.h compiler warnings on Windows) and #3236 (massive compiler warning spam). This also adds strprintf() testcases so that hopefully this problem will be caught by the pulltester next time.
3241	Fixes ancient issue #1460.
3240	Rebased version of #2901
3238	- harmonize function with GUIUtil::getOpenFileName() - also make PNG Image singular (grammar)
3237	- the warnings are related to MinGWs inttypes.h (observed with MinGW based on GCC version 4.8.1 (rev5, Built by MinGW-W64 project) and likely other version also suffer from this) - fixes #3236
3236	Im currently using ``gcc version 4.8.1 (rev5, Built by MinGW-W64 project)`` to build Bitcoin-Qt and after #2767 was merged I get spammed by misc compiler warnings. <pre> C:\Users\Diapolo\bitcoin.Qt\src\net.h: Warnung:unknown conversion type character l in format [-Wformat=] LogPrint("net", "askfor %s %"PRId64" (%s)\n", inv.ToString().c_str(), nRequestTime, DateTimeStrFormat("%H:%M:%S", nRequestTime/1000000).c_str()); ^ C:\Users\Diapolo\bitcoin.Qt\src\net.h: Warnung:format %s expects argument of type char*, but argument 4 has type int64_t {aka long long int} [-Wformat=] C:\Users\Diapolo\bitcoin.Qt\src\net.h: Warnung:too many arguments for format [-Wformat-extra-args] </pre> <pre> C:\Users\Diapolo\bitcoin.Qt\src\util.h: Warnung:unknown conversion type character l in format [-Wformat=] #define strprintf(format, ...) real_strprintf(format, 0, __VA_ARGS__) ^ C:\Users\Diapolo\bitcoin.Qt\src\util.h: Warnung:too many arguments for format [-Wformat-extra-args] #define strprintf(format, ...) real_strprintf(format, 0, __VA_ARGS__) ^ </pre> caused by: There are more, Ill update as necessary...
3235	
3234	We already have the exact same funtionality in /contrib/bitrpc/bitrpc.py If we really do need standalone scripts, then Ill write something to pull it from that file, rather than having duplicate code.
3233	Lets merge the non-controversial commits of #3147, at least if it passes the pulltester now.
3232	Add note about building on Ubuntu 13.10 (issue #3219). Also mention `autoconf` as required package.
3231	Updates some documentation, sparked from issue #3230. I cannot test the build instructions myself, but assume they will work (what is there now doesnt work regardless). The command find . -path */.git* -prune -o -type f -exec grep makefile\\. {} \; -print shows only 2 more files that reference the old makefile.* files: cd src; $(MAKE) -f makefile.unix bitcoind cd src; $(MAKE) -f makefile.unix clean cd src; $(MAKE) -f makefile.unix test_bitcoin ./contrib/debian/rules src/makefile.osx (Expat). ./contrib/debian/changelog
3230	Im trying to build bitcoind on OS X as per instructions [here](https://github.com/bitcoin/bitcoin/blob/master/doc/build-osx.md) so I can run Armory on top of it. Both the homebrew & macports steps mention a makefile.osx file in the bitcoin/src directory but this is nowhere to be found. And obviously, Im unable to build without it. Am I missing something?
3223	* Add a few more basic script/tx test-cases (bitcoinj broke :( ) * Skip comparison tool on win32 since Wine breaks it
3222	- rework window title to not include Bitcoin - in front, as no other dialog does this - favor a connect() call over an own function for clearing the traffic graph - write monospace lowercase (seems to be correct after some web search) and add a comment that we should avoid / remove fixed font sizes
3221	I have a strange issue: I sent a transaction using bitcoind, got a txid back, the transaction confirmed, but getrawtransaction on the same bitcoind instance cant find it: $ bitcoind getrawtransaction 4e558bcab9977ec9e049a24b3c3f27a76882488ec5b24866939a7463200ebb48 error: {"code":-5,"message":"No information available about transaction"} shows the tx, and my bitcoind has that block!: $ bitcoind getblockhash 268416 0000000000000001e3d17a69bfdc1f3a8451ec48652aa7561156f0b22a16fc13 I have another bitcoind on another server that also has the block which blockchain.info claims contains the tx, but it cant lookup the rawtx either.
3216	I searched for this issue, cant able to find, so opening a new issue. In v 0.8.5 beta client, i cant able to paste any address or anything in the transactions tab. If i try to copy paste an address from notepad or webpage or anything, the paste text is grayed out. But i can copy any address from within bitcoin client & paste it, but cant paste from outside of bitcoin client. ![bit0 85](https://f.cloud.github.com/assets/1407782/1488925/4f7897f4-475c-11e3-947e-198f93c240dc.jpg)
3215	This adds a simple "Open URI..." option to the menu which allows manually opening URIs and payment requests from files on disk. ![openurl1](https://f.cloud.github.com/assets/126646/1482933/a436f73c-46ed-11e3-9a17-c05f9d03c62c.png) ![openurl2](https://f.cloud.github.com/assets/126646/1482934/a448fe5a-46ed-11e3-8086-eda85889fec3.png) Some behind-the-scenes code changes: - Always route received URIs (even those drag/dropped) through PaymentServer; this means that bitcoin: URIs that refer to payment requests can be used - Add getOpenFileName function to GUIUtil analogous to getSaveFileName Addresses #3202.
3213	According to the paper published on Selfish-Mining
3211	Fixes issue #3200. I do not know much about autotools nor automake, I would highly recommend review by a more knowledgeable person in the area. Has been merged into #2767 and subsequenty caused it to pass the BitcoinPullTester.
3210	Usability issue: `bitcoind` gives an incorrect error message when one tries to `dumppriv` a key while the wallet is still locked. Unlike the other commands Ive tried which immediately point to the lock as the reason for the failure, `dumppriv` emits a frightening message that the private key does not exist (implying one has completely lost the funds at that address). The relevant code should do the same check for lock as the other commands. Installed version (Debian testing): $ apt-cache show bitcoind Package: bitcoind Status: install ok installed Priority: optional Section: utils Installed-Size: 2648 Maintainer: Debian Bitcoin Packaging Team <pkg-bitcoin-devel@lists.alioth.debian.org> Architecture: amd64 Source: bitcoin Version: 0.8.3-1 Depends: libboost-filesystem1.49.0 (>= 1.49.0-1), libboost-program-options1.49.0 (>= 1.49.0-1), libboost-system1.49.0 (>= 1.49.0-1), libboost-thread1.49.0 (>= 1.49.0-1), libc6 (>= 2.15), libdb5.1++, libgcc1 (>= 1:4.1.1), libleveldb1, libminiupnpc5, libssl1.0.0 (>= 1.0.0), libstdc++6 (>= 4.6), zlib1g (>= 1:1.1.4) Suggests: db-util, db4.8-util ... The problem: $ # normal, helpful, meaningful error message with a locked wallet: $ bitcoind sendfrom 1AZvaBEJMiK8AJ5GvfvLWgHjWgL59TRPGy 1BWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW 1 error: {"code":-13,"message":"Error: Please enter the wallet passphrase with walletpassphrase first."} $ # problematic error message with dumpprivkey: $ bitcoind dumpprivkey 1AZvaBEJMiK8AJ5GvfvLWgHjWgL59TRPGy error: {"code":-4,"message":"Private key for address 1AZvaBEJMiK8AJ5GvfvLWgHjWgL59TRPGy is not known"} $ # dont give me a heart attack like that - the private key *is* known! we just need to unlock the wallet: $ bitcoind walletpassphrase XXXXXXXXXXXXXXXXXXXX 60 $ bitcoind dumpprivkey 1AZvaBEJMiK8AJ5GvfvLWgHjWgL59TRPGy KwpYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY
3209	Could you check the ``AskPassphraseDialog::event()`` code, it looks like we nearly duplicated ``AskPassphraseDialog::eventFilter()``. Perhaps its save to remove it, Im not sure.
3208	- this change extends our working drag and drop feature for bitcoin: URIs by adding support for payment request URIs (payment request files should be easy to do in another pull also) - removes code from BitcoinGUI and lets PaymentServer handle it - makes eventFilter() in PaymentServer protected Intended as a first step for #3202.
3206	
3205	
3204	
3202	Add a way to enter a bitcoin URI manually in the GUI or to open a payment request manually from a file. I think this can be useful in some cases, for example to quickly enter a URI if bindings have not been set up properly, and for testing programs that generate bitcoin URIs / payment requests, and so on. User interface wise this could be done in (at least) two ways: - Add a "Open URI" under File menu, analogous to Torrent clients - or make it possible to enter URIs directly into Pay to: in the Send tab (but this feels a bit like a hack) Anyone agree?
3200	Cannot successfully run "make distdir" after modifying src/leveldb.cpp . Reproduction steps: 1. git clone ... 2. ./autogen.sh && ./configure 3. touch src/leveldb.cpp 4. make distdir I do not know have insight into fixing this issue. Is causing pull #2767 to fail automatic sanity test, possibly affects other pull requests from passing automatic testing. Logs ==== Expected ------ if test -d "bitcoin-0.8.99"; then find "bitcoin-0.8.99" -type d ! -perm -200 -exec chmod u+w {} ; && rm -rf "bitcoin-0.8.99" || { sleep 5 && rm -rf "bitcoin-0.8.99"; }; else :; fi test -d "bitcoin-0.8.99" || mkdir "bitcoin-0.8.99" (cd src && make top_distdir=../bitcoin-0.8.99 distdir=../bitcoin-0.8.99/src \ am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir) make[1]: Entering directory `/home/brandon/C++/bitcoin-cleantest/src (cd qt && make top_distdir=../../bitcoin-0.8.99 distdir=../../bitcoin-0.8.99/src/qt \ am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir) make[2]: Entering directory `/home/brandon/C++/bitcoin-cleantest/src/qt (cd test && make top_distdir=../../../bitcoin-0.8.99 distdir=../../../bitcoin-0.8.99/src/qt/test \ am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir) make[3]: Entering directory `/home/brandon/C++/bitcoin-cleantest/src/qt/test make[3]: Leaving directory `/home/brandon/C++/bitcoin-cleantest/src/qt/test make[2]: Leaving directory `/home/brandon/C++/bitcoin-cleantest/src/qt (cd test && make top_distdir=../../bitcoin-0.8.99 distdir=../../bitcoin-0.8.99/src/test \ am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir) make[2]: Entering directory `/home/brandon/C++/bitcoin-cleantest/src/test make[2]: Leaving directory `/home/brandon/C++/bitcoin-cleantest/src/test make[1]: Leaving directory `/home/brandon/C++/bitcoin-cleantest/src make \ top_distdir="bitcoin-0.8.99" distdir="bitcoin-0.8.99" \ dist-hook make[1]: Entering directory `/home/brandon/C++/bitcoin-cleantest make -C bitcoin-0.8.99/src/leveldb clean make[2]: Entering directory `/home/brandon/C++/bitcoin-cleantest/bitcoin-0.8.99/src/leveldb rm -f db_bench leveldbutil arena_test autocompact_test bloom_test c_test cache_test coding_test corruption_test crc32c_test db_test dbformat_test env_test filename_test filter_block_test issue178_test log_test memenv_test skiplist_test table_test version_edit_test version_set_test write_batch_test db_bench_sqlite3 db_bench_tree_db libleveldb.a libleveldb.so libleveldb.so.1 libleveldb.so.1.13 libmemenv.a */*.o */*/*.o ios-x86/*/*.o ios-arm/*/*.o build_config.mk rm -rf ios-x86/* ios-arm/* make[2]: Leaving directory `/home/brandon/C++/bitcoin-cleantest/bitcoin-0.8.99/src/leveldb /usr/bin/git archive --format=tar HEAD -- src/version.cpp | ${TAR-tar} -C bitcoin-0.8.99 -xf - make[1]: Leaving directory `/home/brandon/C++/bitcoin-cleantest test -n "" \ || find "bitcoin-0.8.99" -type d ! -perm -755 \ -exec chmod u+rwx,go+rx {} \; -o \ ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \; -o \ ! -type d ! -perm -400 -exec chmod a+r {} \; -o \ ! -type d ! -perm -444 -exec /bin/sh /home/brandon/C++/bitcoin-cleantest/src/build-aux/install-sh -c -m a+r {} {} \; \ || chmod -R a+r "bitcoin-0.8.99" Actual ------ if test -d "bitcoin-0.8.99"; then find "bitcoin-0.8.99" -type d ! -perm -200 -exec chmod u+w {} ; && rm -rf "bitcoin-0.8.99" || { sleep 5 && rm -rf "bitcoin-0.8.99"; }; else :; fi test -d "bitcoin-0.8.99" || mkdir "bitcoin-0.8.99" (cd src && make top_distdir=../bitcoin-0.8.99 distdir=../bitcoin-0.8.99/src \ am__remove_distdir=: am__skip_length_check=: am__skip_mode_fix=: distdir) make[1]: Entering directory `/home/brandon/C++/bitcoin-cleantest/src /usr/bin/ccache g++ -g -O2 -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -fPIE -fno-stack-protector -fstack-protector-all -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -D_FORTIFY_SOURCE=2 -Wl,-z,now -pie leveldb.cpp -o leveldb <command-line>:0:0: warning: "_FORTIFY_SOURCE" redefined [enabled by default] leveldb.cpp:1:0: note: this is the location of the previous definition In file included from leveldb.h:8:0, from leveldb.cpp:5: util.h:112:2: error: #error missing boost sleep implementation leveldb.cpp:13:27: fatal error: memenv/memenv.h: No such file or directory compilation terminated. make[1]: *** [leveldb] Error 1 make[1]: Leaving directory `/home/brandon/C++/bitcoin-cleantest/src make: *** [distdir] Error 1 Digging through make -d distdir shows the lines: Considering target file `leveldb. Looking for an implicit rule for `leveldb. Trying pattern rule with stem `leveldb. Trying implicit prerequisite `leveldb.cpp. Found an implicit rule for `leveldb. Pruning file `leveldb.cpp. Finished prerequisites of target file `leveldb. Prerequisite `leveldb.cpp is newer than target `leveldb. Must remake target `leveldb. Invoking builtin recipe to update target `leveldb. make[1]: Entering directory `/home/brandon/C++/bitcoin/src /usr/bin/ccache g++ -g -O2 -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -fPIE -fno-stack-protector -fstack-protector-all -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS -D_FORTIFY_SOURCE=2 -Wl,-z,now -pie leveldb.cpp -o leveldb
3199	This pull request should have no functional effects. * The first commit removes the CBlockIndex dependency of CCoinsView, making it reason in terms of block hashes (which it was doing under the hood anyway). * The second commit moves most CCoins/CCoinsView related logic to coins.{h,cpp}, and the rest to txmempool.{h,cpp}. This removes the need for the LookupFromTip loophole, as txmempool is just built on top of coins.
3198	This is supposed to fix #2806 (compilation problems on OSX 10.9: ``` ... CXX rpcdump.o In file included from rpcdump.cpp:5: In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/iostream:38: In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/ios:216: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/__locale:144:29: error: cannot initialize a parameter of type std::__1::locale::facet * with an lvalue of type const boost::date_time::time_input_facet<boost::posix_time::ptime, char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > > * __install_ctor(__other, __f, __f ? __f->id.__get() : 0); ^~~ rpcdump.cpp:31:23: note: in instantiation of function template specialization std::__1::locale::locale<const boost::date_time::time_input_facet<boost::posix_time::ptime, char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > > > requested here const std::locale loc(std::locale::classic(), &facet); ^ /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../lib/c++/v1/__locale:96:46: note: passing argument to parameter here void __install_ctor(const locale&, facet*, long); ^ 1 error generated. make[3]: *** [rpcdump.o] Error 1 make[2]: *** [all-recursive] Error 1 make[1]: *** [all] Error 2 make: *** [all-recursive] Error 1 ```)
3197	Closes #839
3196	No more specific handling of GUI in bitcoin core. Replace the last usage of fHaveGUI with a fForceServer parameter on AppInit2.
3193	Unless a .gitignore pattern is anchored, itll match in any directory, not juts at the top level. Simplify .gitignore accordingly.
3192	This check is unnecessary since the size of a transaction is no less than 60. It also seems a little inconsistent since MAX_BLOCK_SIZE is used for both length of the serialized block and for the number of transactions in a block. If there are MAX_BLOCK_SIZE transactions, the serialized size check will fail.
3191	sha256sum verification of source tarballs during gitian build. This follows the earlier example in boost-win32.yml. This does not change anything about the gitian outputs. **Test Plan** * Search for multiple copies of the tarball and download them from multiple distros. Confirm that they match the sha256sums in this commit.
3189	- add new processSendCoinsReturn() function, which parses the status of WalletModel::SendCoinsReturn and generates a pair consisting of a message and message flags - result is we only need one emit message() call - this change ensures that the GUI is shown for warnings/errors in sendcoinsdialog, because of message() taking care of that for modal messages - changes 2 warning message into error messages and removed "Error:" in front of the actual error message string
3188	Its IMHO much easier to work with debug.log, if timestamps are shown, which I think also mentioned some days ago.
3187	- remove explicit init of netManager as this is done in the constructor anyway - move initNetManager() call to uiReady(), which removes an assert() and allows us to use message() in initNetManager() (currently unused but could be necessary because of proxy related messages) - make initNetManager() private - update paymentservertests.cpp
3186	I got this after removing the ``-txindex`` flag from a testnet wallet (Win7 x64). ![rem-txindex](https://f.cloud.github.com/assets/1419649/1435386/2b03af8c-413d-11e3-94b6-f5b58cf707d9.png) Can you take a look.
3185	Send "reject" messages to peers if their transactions or blocks are rejected. See and the discussion on the bitcoin-development mailing list. Tested by running three -regtest -debug=net -printtoconsole nodes, one of which was running with -fuzzmessagestest=11 to generate garbled blocks/transactions, and verified that reject messages were sent and reported correctly as new blocks were generated and transactions sent between them.
3184	Some expanded docs for the rpc commands...comments? terrible? Based on the proposal, update the help message of rpc methods - strings arguments are in double quotes rather than square brackets - numeric arguments have no quotes (and no default value) - optional parameters are surrounded by round brackets - json arguments are strings but dont use double quotes Added 3 sections for the details - Arguments: lists each argument, its type, required or not, a default, and a description - Result: The method result, with json format if applicable, type, and a description - Examples: examples calls using bitcoin-cli and curl for json rpc call Problems - maybe this is too verbose - lines might be too long - description are not good or complete - examples may be too much
3183	Trying to add a comment (in json) to a transaction but keep getting this error: "error: value is type obj, expected int" `bitcoind move acc1 acc2 0.00000002 {"test":"hi"}`
3180	Currently there is a 100ms sleep in the message processing thread that adds delay to processing messages. This patch skips the sleep when there is additional work to do. Additionally ProcessMessages & ProcessGetData are modified such that their maximum run time is reduced; this improves the average latency peers see when there is high load. (This has a significant impact on high latency networks during initial block synchronization).
3179	- it can happen, that PaymentServer::ipcSendCommandLine() is unable to detect the correct network, for example when a bitcoin: URI contains an invalid address or when a payment request can be read - in this case try to send the request to a mainnet local pr server, if this fails use a testnet local pr server
3177	- replaces pwalletMain->IsLocked() checks, which mostly did not even throw an error - in keypoolrefill init kpSize to 0 as we have the logic to determine max kpSize in pwalletMain->TopUpKeyPool() anyway
3176	- add a check for CKey::size() of a and b (size can be 0 or 32) - change the fixed value in memcmp() to use a.size() instead - fixes #3090
3175	Dont merge this till pull-tester comes back
3174	
3173	I needed this to test the new "reject" p2p message, but it should be generally useful for fuzz-testing network message handling code. Note: youll quickly trigger the DoS-and-ban code if you connect to random peers, this is most useful in a two-nodes-on-your-development-machine testnet-in-a-box or -regtest setup.
3169	- directly connect to message() signal from wallet model in the main GUI to reduce complexity of the slot/signal handling for message()
3167	fedora 18 problems: $ ./bitcoind bitcoind: key.cpp:135: {anonymous}::CECKey::CECKey(): Assertion `pkey != __null failed. $ ./bitcoind Error: Incorrect or no genesis block found. Wrong datadir for network?
3165	
3164	One minor tweak to make the block downloading a bit more aggressively send getdatas and qa/ script tweaks. If I did things right pull-tester should come back with an all-good after having run the latest BitcoindComparisonTool.
3163	Instead of explicitly testing for the presence of any output, and dealing with this case specially, just interpret it as an empty CCoins. The case previously caught using the HaveCoins check, is now handled by the generic outs != outsBlock test. This fixes #3156 and replaces #3143.
3162	This seems to cause problems on recent clang, and looks totally redundant and unused. The const_iterator version is identical to the vector::const_iterator one (which is a typedef thereof). Marking it private (instead of removing) compiles fine, so this version is effectively unused even.
3161	- directly connect to message() signals from wallet model in the main GUI to reduce complexity of the slot/signal handling for message()
3160	Related to #3157 and #3159 (same changes for addressbookpage and transactionview). Goal: Harmonize user experience for export of addresses, transactions and backup of the wallet! ![wallet](https://f.cloud.github.com/assets/1419649/1414039/4b926b92-3e65-11e3-8c5f-65c727020c5b.png)
3159	Related to #3157 and #3160 (same changes for addressbookpage and walletview). Goal: Harmonize user experience for export of addresses, transactions and backup of the wallet! ![export_tx](https://f.cloud.github.com/assets/1419649/1414017/64e2b766-3e63-11e3-938d-028db94dbc2c.png)
3158	Important for #3157, #3159 and #3160.
3156	Dunno why, but over the last 2 days or so my Bitcoin-Qt asked me to rebuild my database several times. Using testnet, I got this: 2013-10-26 11:05:34 ERROR: DisconnectBlock() : outputs still spent? database corrupted 2013-10-26 11:05:35 ERROR: VerifyDB() : *** coin database inconsistencies found (last 66 blocks, 1221 good transactions before that) Were there recent merges, which could cause this? Another LevelDB bug perhaps, are we up to date
3155	INIT_PROTO_VERSION is the initial version, after a succesful version/verack it is increased to a negotiated version. MIN_PEER_PROTO_VERSION could be a different value to disconnect from peers older than a specified version. This commit alone does not change any behavior. It stresses the difference between the initial and minimum version, the latter of which can be set to enforce a minimum version in a later policy discussion.
3154	I want to get these cleanups into master now to save work on merge conflicts later. This mostly just moves mempool-related code from main.cpp to txmempool.{cpp,h} There are a few small refactors: + nTransactionsUpdated moved from a global var to a mempool private var (with accessor functions) + Made all the CTxMemPool methods thread safe (they take the mempool.cs lock) + Folded mempool.exists() into mempool.lookup() to avoid possible multithreading bugs and simplify calling code + Found and fixed a potential bug in main.cpp where mempool.mapNextTx was accessed without holding the mempool.cs lock
3153	Bug-fix cherry-picked from the smart fee work: Changes the response to the mempool command so that if the memory pool has more than MAX_INV_SZ transactions (50,000) it will respond with multiple inv messages.
3152	Existing government backdoors are all secret and highly inefficient. Add a "front door", making access easier -- and open and transparent too.
3151	this continues the work in #3144, does this look sane? Use proper signals everywhere. Removes the need to store a pointer to the BitcoinGUI object in the walletview. Also removes the interdependence between setWalletModel / setBitcoinGUI. Warning: not everything is tested yet
3150	- remove 2 unneeded windowTitle attributes, which bloat our translations - cleanup some unneeded .cpp/.h includes and class usages - use a more generic string for clearing sendcoinsdialog and requestpaymentdialog - edit 2 strings in BitcoinGUI and replace "edit" with "show" as this seems more clear in the context where it is used
3149	- remove an obsolete connection to a signMessage() signal
3148	- changes some strings that were forgotton or made no sense in the conext they are used - remove an orphan file from the qt project file - revert a small change in signverifymessagedialog.ui - guard #include "bitcoin-config.h" with #if defined(HAVE_CONFIG_H) - remove windowTitle from addressbookpage.ui
3146	
3145	- this shows insecure (unsecured) payment requests in a new yellowish colored UI (based on the secure payment request UI) instead of our normal payment UI - allows us to receive paymentACK messages for insecure payment requests - allows us to handle expirations for insecure payment request - changed walletmodel, so that all types of payment requests dont touch the addressbook This is an attempt to make payment requests much more usable via our GUI and already addresses some of the problems mentioned in #2936. Im unsure, if #3095 also belongs here? This is considered a preview and open for feedback and bug reports! New insecure pr UI: ![insecure pr UI](https://f.cloud.github.com/assets/1419649/1416328/287d82c8-3f4a-11e3-9c7b-c9d984d2e5cb.png) ![insecure pr sendcoins UI](https://f.cloud.github.com/assets/1419649/1399683/2b7f1028-3cba-11e3-93fd-cf2d28676b3c.png) Todo: - re-add delete button for payment entries in sendcoinsdialog
3144	- this allows us to use emit message() over MessageBox:: or gui->message() calls in sendcoinsdialog and walletview - move main handlePaymentRequest() functionality back to BitcoinGUI - move a showNormalIfMinimized() before gotoSendCoinsPage()
3143	Previously DisconnectBlock() would fail when undoing such transactions because it assumed all transactions will add at least one output to the UTXO set. Be warned that I havent tested this very well; I may be missing something.
3142	I imported a large number of private keys, and incoming transactions have the correct label, but all previous outgoing transactions are blind. There is no way to see from which label/address they were originally send. Is there some technical reason for this, or can this feature be added?
3139	- as we have main.h included in transactiondesc.cpp, we now also use COINBASE_MATURITY + 1 for the descriptive string - fixes #3131
3138	Space saving in /doc README.
3137	- fix crash with walletpassphrase by checking if RPC server is running and give a friendly error message how to fix this (fixes #3100) - add 3 new RPCErrorCodes RPC_SERVER_NOT_STARTED, RPC_NODE_ALREADY_ADDED and RCP_NODE_NOT_ADDED (I checked the source to not use a number already in use for RPC_SERVER_NOT_STARTED) - use the new codes where needed / missing - add missing use of RPC_INVALID_PARAMETER
3135	I observerd this while working on improving payment request UI, if a message() is emited and main window is minimized or in tray, the modal error messages are not shown on top. This fixes the problem and also corrects small style stuff.
3134	Continuation of #3133. Add just-in-case sanity test for JSON spirit parsing and AmountFromValue. Also update rpc_format_monetary_values test to use ValueFromAmount, so that ValueFromAmount is also tested.
3133	Tests for issue #3126. This problem pops up after upgrading json-spirit. Ive checked that this tests fails with 2227389 and succeeds without it.
3131	If I remember did recently change a value and Im asking myself, if 120 in this string is still correct?
3130	- add new slot handlePaymentACK() to paymentserver, which handles paymentACK messages (currently we just display them) - make paymentACK message a modal information dialog - change some QObject::tr() to just tr() - clarify the processPaymentRequest() error, when IsDust() - small string change to prevent a tripple + usage with QString
3129	This sneaked in via ^^.
3128	Also fix decoderawtransaction to not show reqSigs or addresses for null and nulldata txouts. (Previous version also left reqSigs uninitialized mistakenly)
3127	The changes broke amounts in listtransactions, and other places. See issue #3126 Verified that this simple git revert of the two json-spirit commits fixes the issue.
3126	Example from listtransactions RPC output: ``` "amount" : 0.17622195000000002, ... "amount" : 0.20165306000000002, ... "amount" : 0.17177393000000002, ```
3125	
3124	
3123	Prettify some /Contrib READMEs Remove Dead Readme-Qt Links. #3092 SYN
3121	Original fix:
3119	This should close Issue #3107. Searched through the repo, and found all except one had been committed to in the past year, which should probably warrant a year bump.
3117	Print out every mutex lock/unlock if compiled -DDEBUGLOCKORDER only if -debug=lock is set.
3116	Can you do one, as Im currently not able to do it.
3115	This pull request converts the custom callback handling (from main to wallet) to using boost::signals2, which allow concurrent modification/execution, and are thread-safe. To implement callbacks, a new CWalletInterface is defined in main, and implemented by wallet. As a result, together with a few more changes, we can break the dependency from init (and indirectly, from main) on wallet. Two functional cleanups were included as well, namely removing the behaviour where transactions "fFromMe" were always trickled (we shouldnt treat our own transactions differently, privacy leak) and removing the (apparently since-long broken) PrintWallets functionality. Closes #2965.
3114	Instead of relying on cs_main (defined in a different module) to prevent concurrent access to it. Depends on #2840.
3112	Fedora 18 python-2.7.3-13.fc18.x86_64 Traceback (most recent call last): File "/home/btc08/bin/linearize.py", line 127, in <module> get_blocks(settings) File "/home/btc08/bin/linearize.py", line 79, in get_blocks data = getblock(rpc, settings, height) File "/home/btc08/bin/linearize.py", line 68, in getblock data = hexdata.decode(hex) AttributeError: dict object has no attribute decode
3109	There were too many levels of indirection here, and the functionality of walletframe and walletstack can easily be merged. This commit merges the two which cuts a lot of lines of boilerplate code.
3108	- rename reportError() into message() to be in line with our default message() signal/slot naming (and can be used for all types of messages) - rename some QStrings to not collide with message() function - add a missing message for malformed URIs that IS also used in BitcoinGUI - fix / extend some comments and misc style fixes
3107	A search for "// Copyright (c) 2009-2012 The Bitcoin developers" gets [54 hits](https://github.com/bitcoin/bitcoin/search?q=Copyright+%28c%29+2009-2012+Bitcoin+Developers&type=Code) in the codebase. Most of these files seem to have been touched in the past year, so that might warrant their update. Is there any reason not to bump to 2013? If not Ill put in a pull, and when 2014 rolls around.
3106	
3105	I just asked someone to sign a message with the address they sent a transaction from to prove he sent it. He was unable to, since the address he sent from wasnt in his receive tab. It turned out the transaction was funded by one of his change addresses which dont show up on the receive tab. In the end I had to talk him through using the debug console to run walletpassphrase and signmessage but its kind of ugly, and results in his wallet passphrase appearing on the screen. It would be better if there was some way of signing a message with a change address from within the sign message gui. Maybe a checkbox in receive (defaulting to off) to show all addresses in the wallet including change addresses.
3104	- this extends the accepted ciphersuites with TLSv1.2 ones - also removes !AH, as I could not find documentation on it and the change did not result in a changed ciphersuite list (checked via openssl ciphers -v) - closes #3096 (which also contains more details)
3103	Adds an appbundle target that creates a top-level Bitcoin-Qt.app/ Modifies the deploy target so that it leaves behind Bitcoin-Qt.app; make clean will remove it. This is very useful in combination with for testing payment request handling (I compile a source-tree Bitcoin-Qt.app/ and then use RCDefaultApp so that it is used to handle bitcoin: URIs).
3102	- if BitcoinGUI::dropEvent() contains valid URIs ensure sendcoins is shown to draw users attention to it - misc small style fixes in the same file
3101	- makes the code for updating a label reusable - no functional changes
3100	At least when -server is not enabled. The following assertion fails: bitcoin-qt: bitcoinrpc.cpp:900: void RPCRunLater(const string&, boost::function<void()>, int64): Assertion `rpc_io_service != __null failed. Aborted (core dumped)
3099	This is a work in progress to improve the workflow for receive coins and fix #2429. New receive tab: ![example1](https://f.cloud.github.com/assets/126646/1342888/e2ed7e8a-366a-11e3-9392-ddb8a39f0832.png) After clicking "Request payment" a new receiving address is created (except when "Reuse ..." is checked, in which case the user can select an existing one). Then the following window is shown: ![newreq](https://f.cloud.github.com/assets/126646/1360439/c9ac093c-37f5-11e3-972e-81ddc0b1102d.png) When compiling without QR codes, the dialog is the same apart from the QR code at the top. Im thinking of putting address/amount/label/message in a single text area to make it easier to copy/paste the entire payment request to the recipient (for example into a mail), but this is the general idea. Ive also simplified the interface by removing the "addresses" tab and instead moved command for getting a list of used receiving and sending addresses to menu ![menu](https://f.cloud.github.com/assets/126646/1342923/88fbd0b0-366b-11e3-9575-b1b53f7a403b.png) Any testing is welcome. Known currently broken: - Sign/verify message from address list
3098	Found out what everything did, and finished the /Contrib Index. Standardized the READMEs, and converted existing ones to Markdown. Renamed /Misc to /Linearize since it was the only script in there.
3097	#3092 removed readme-qt.md, but it was still listed in the index for the /doc README.
3096	Im thinking about upgrading our defaults for ``-rpcsslciphers`` to include TLSv1.2 ciphersuites and perhaps also remove support for SSLv3, what do you think? For this test I also removed the ``!AH`` switch, as that was not documented on openssl.org and also lead to no changes in the list of supported ciphersuites. Output below is with OpenSSL 1.0.1e on Win7 x64. ``openssl ciphers -v`` ``TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH``: <pre> ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH Au=RSA Enc=AESGCM(256) Mac=AEAD ECDHE-ECDSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH Au=ECDSA Enc=AESGCM(256) Mac=AEAD ECDHE-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH Au=RSA Enc=AES(256) Mac=SHA384 ECDHE-ECDSA-AES256-SHA384 TLSv1.2 Kx=ECDH Au=ECDSA Enc=AES(256) Mac=SHA384 DHE-DSS-AES256-GCM-SHA384 TLSv1.2 Kx=DH Au=DSS Enc=AESGCM(256) Mac=AEAD DHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=DH Au=RSA Enc=AESGCM(256) Mac=AEAD DHE-RSA-AES256-SHA256 TLSv1.2 Kx=DH Au=RSA Enc=AES(256) Mac=SHA256 DHE-DSS-AES256-SHA256 TLSv1.2 Kx=DH Au=DSS Enc=AES(256) Mac=SHA256 ECDH-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH/RSA Au=ECDH Enc=AESGCM(256) Mac=AEAD ECDH-ECDSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH/ECDSA Au=ECDH Enc=AESGCM(256) Mac=AEAD ECDH-RSA-AES256-SHA384 TLSv1.2 Kx=ECDH/RSA Au=ECDH Enc=AES(256) Mac=SHA384 ECDH-ECDSA-AES256-SHA384 TLSv1.2 Kx=ECDH/ECDSA Au=ECDH Enc=AES(256) Mac=SHA384 AES256-GCM-SHA384 TLSv1.2 Kx=RSA Au=RSA Enc=AESGCM(256) Mac=AEAD AES256-SHA256 TLSv1.2 Kx=RSA Au=RSA Enc=AES(256) Mac=SHA256 ECDHE-RSA-AES256-SHA SSLv3 Kx=ECDH Au=RSA Enc=AES(256) Mac=SHA1 ECDHE-ECDSA-AES256-SHA SSLv3 Kx=ECDH Au=ECDSA Enc=AES(256) Mac=SHA1 SRP-DSS-AES-256-CBC-SHA SSLv3 Kx=SRP Au=DSS Enc=AES(256) Mac=SHA1 SRP-RSA-AES-256-CBC-SHA SSLv3 Kx=SRP Au=RSA Enc=AES(256) Mac=SHA1 DHE-RSA-AES256-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256) Mac=SHA1 DHE-DSS-AES256-SHA SSLv3 Kx=DH Au=DSS Enc=AES(256) Mac=SHA1 DHE-RSA-CAMELLIA256-SHA SSLv3 Kx=DH Au=RSA Enc=Camellia(256) Mac=SHA1 DHE-DSS-CAMELLIA256-SHA SSLv3 Kx=DH Au=DSS Enc=Camellia(256) Mac=SHA1 ECDH-RSA-AES256-SHA SSLv3 Kx=ECDH/RSA Au=ECDH Enc=AES(256) Mac=SHA1 ECDH-ECDSA-AES256-SHA SSLv3 Kx=ECDH/ECDSA Au=ECDH Enc=AES(256) Mac=SHA1 AES256-SHA SSLv3 Kx=RSA Au=RSA Enc=AES(256) Mac=SHA1 CAMELLIA256-SHA SSLv3 Kx=RSA Au=RSA Enc=Camellia(256) Mac=SHA1 PSK-AES256-CBC-SHA SSLv3 Kx=PSK Au=PSK Enc=AES(256) Mac=SHA1 ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH Au=RSA Enc=AESGCM(128) Mac=AEAD ECDHE-ECDSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH Au=ECDSA Enc=AESGCM(128) Mac=AEAD ECDHE-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH Au=RSA Enc=AES(128) Mac=SHA256 ECDHE-ECDSA-AES128-SHA256 TLSv1.2 Kx=ECDH Au=ECDSA Enc=AES(128) Mac=SHA256 DHE-DSS-AES128-GCM-SHA256 TLSv1.2 Kx=DH Au=DSS Enc=AESGCM(128) Mac=AEAD DHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=DH Au=RSA Enc=AESGCM(128) Mac=AEAD DHE-RSA-AES128-SHA256 TLSv1.2 Kx=DH Au=RSA Enc=AES(128) Mac=SHA256 DHE-DSS-AES128-SHA256 TLSv1.2 Kx=DH Au=DSS Enc=AES(128) Mac=SHA256 ECDH-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH/RSA Au=ECDH Enc=AESGCM(128) Mac=AEAD ECDH-ECDSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH/ECDSA Au=ECDH Enc=AESGCM(128) Mac=AEAD ECDH-RSA-AES128-SHA256 TLSv1.2 Kx=ECDH/RSA Au=ECDH Enc=AES(128) Mac=SHA256 ECDH-ECDSA-AES128-SHA256 TLSv1.2 Kx=ECDH/ECDSA Au=ECDH Enc=AES(128) Mac=SHA256 AES128-GCM-SHA256 TLSv1.2 Kx=RSA Au=RSA Enc=AESGCM(128) Mac=AEAD AES128-SHA256 TLSv1.2 Kx=RSA Au=RSA Enc=AES(128) Mac=SHA256 ECDHE-RSA-AES128-SHA SSLv3 Kx=ECDH Au=RSA Enc=AES(128) Mac=SHA1 ECDHE-ECDSA-AES128-SHA SSLv3 Kx=ECDH Au=ECDSA Enc=AES(128) Mac=SHA1 SRP-DSS-AES-128-CBC-SHA SSLv3 Kx=SRP Au=DSS Enc=AES(128) Mac=SHA1 SRP-RSA-AES-128-CBC-SHA SSLv3 Kx=SRP Au=RSA Enc=AES(128) Mac=SHA1 DHE-RSA-AES128-SHA SSLv3 Kx=DH Au=RSA Enc=AES(128) Mac=SHA1 DHE-DSS-AES128-SHA SSLv3 Kx=DH Au=DSS Enc=AES(128) Mac=SHA1 DHE-RSA-CAMELLIA128-SHA SSLv3 Kx=DH Au=RSA Enc=Camellia(128) Mac=SHA1 DHE-DSS-CAMELLIA128-SHA SSLv3 Kx=DH Au=DSS Enc=Camellia(128) Mac=SHA1 ECDH-RSA-AES128-SHA SSLv3 Kx=ECDH/RSA Au=ECDH Enc=AES(128) Mac=SHA1 ECDH-ECDSA-AES128-SHA SSLv3 Kx=ECDH/ECDSA Au=ECDH Enc=AES(128) Mac=SHA1 AES128-SHA SSLv3 Kx=RSA Au=RSA Enc=AES(128) Mac=SHA1 CAMELLIA128-SHA SSLv3 Kx=RSA Au=RSA Enc=Camellia(128) Mac=SHA1 PSK-AES128-CBC-SHA SSLv3 Kx=PSK Au=PSK Enc=AES(128) Mac=SHA1 </pre> ``openssl ciphers -v`` ``TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH``: <pre> ECDHE-RSA-AES256-SHA SSLv3 Kx=ECDH Au=RSA Enc=AES(256) Mac=SHA1 ECDHE-ECDSA-AES256-SHA SSLv3 Kx=ECDH Au=ECDSA Enc=AES(256) Mac=SHA1 SRP-DSS-AES-256-CBC-SHA SSLv3 Kx=SRP Au=DSS Enc=AES(256) Mac=SHA1 SRP-RSA-AES-256-CBC-SHA SSLv3 Kx=SRP Au=RSA Enc=AES(256) Mac=SHA1 DHE-RSA-AES256-SHA SSLv3 Kx=DH Au=RSA Enc=AES(256) Mac=SHA1 DHE-DSS-AES256-SHA SSLv3 Kx=DH Au=DSS Enc=AES(256) Mac=SHA1 DHE-RSA-CAMELLIA256-SHA SSLv3 Kx=DH Au=RSA Enc=Camellia(256) Mac=SHA1 DHE-DSS-CAMELLIA256-SHA SSLv3 Kx=DH Au=DSS Enc=Camellia(256) Mac=SHA1 ECDH-RSA-AES256-SHA SSLv3 Kx=ECDH/RSA Au=ECDH Enc=AES(256) Mac=SHA1 ECDH-ECDSA-AES256-SHA SSLv3 Kx=ECDH/ECDSA Au=ECDH Enc=AES(256) Mac=SHA1 AES256-SHA SSLv3 Kx=RSA Au=RSA Enc=AES(256) Mac=SHA1 CAMELLIA256-SHA SSLv3 Kx=RSA Au=RSA Enc=Camellia(256) Mac=SHA1 PSK-AES256-CBC-SHA SSLv3 Kx=PSK Au=PSK Enc=AES(256) Mac=SHA1 ECDHE-RSA-AES128-SHA SSLv3 Kx=ECDH Au=RSA Enc=AES(128) Mac=SHA1 ECDHE-ECDSA-AES128-SHA SSLv3 Kx=ECDH Au=ECDSA Enc=AES(128) Mac=SHA1 SRP-DSS-AES-128-CBC-SHA SSLv3 Kx=SRP Au=DSS Enc=AES(128) Mac=SHA1 SRP-RSA-AES-128-CBC-SHA SSLv3 Kx=SRP Au=RSA Enc=AES(128) Mac=SHA1 DHE-RSA-AES128-SHA SSLv3 Kx=DH Au=RSA Enc=AES(128) Mac=SHA1 DHE-DSS-AES128-SHA SSLv3 Kx=DH Au=DSS Enc=AES(128) Mac=SHA1 DHE-RSA-CAMELLIA128-SHA SSLv3 Kx=DH Au=RSA Enc=Camellia(128) Mac=SHA1 DHE-DSS-CAMELLIA128-SHA SSLv3 Kx=DH Au=DSS Enc=Camellia(128) Mac=SHA1 ECDH-RSA-AES128-SHA SSLv3 Kx=ECDH/RSA Au=ECDH Enc=AES(128) Mac=SHA1 ECDH-ECDSA-AES128-SHA SSLv3 Kx=ECDH/ECDSA Au=ECDH Enc=AES(128) Mac=SHA1 AES128-SHA SSLv3 Kx=RSA Au=RSA Enc=AES(128) Mac=SHA1 CAMELLIA128-SHA SSLv3 Kx=RSA Au=RSA Enc=Camellia(128) Mac=SHA1 PSK-AES128-CBC-SHA SSLv3 Kx=PSK Au=PSK Enc=AES(128) Mac=SHA1 </pre>
3094	- use it for secure payment-requests (this change allows a copy&paste of the amount and looks a little nicer than just a disabled GUI element)
3093	
3092	Now that autotools is used as a build system there is nothing special about building the GUI anymore. People were getting confused about the lack of any real build instructions in readme-qt.md. Merge the salvageable parts into build-unix.md.
3091	
3090	src/key.h: 207 friend bool operator==(const CKey &a, const CKey &b) { 208 return a.fCompressed == b.fCompressed && memcmp(&a.vch[0], &b.vch[0], 32); 209 } should compare return value from memcmp with zero. whats more, to be accurate , this function should return true only when both keys are valid.
3089	Seems like there are a lot of advertised testnet HS nodes that dont actually work. Lack of the testnet port on the example HS config might be one reason.
3087	As block index entries have a flag for marking invalid blocks, the best invalid work information can be derived from there. In addition, remove the global from main.h. Depends on #3077.
3086	
3085	See Bitcoin Pull #2902 for more info on the documentation cleanup. Added an index to the /contrib folder to make it a little bit more readable. Will squash when commit is satisfactory.
3084	
3083	This moves the chain-related logic in CBlockLocator to CChain (CBlockLocator is a P2P data structure, its implementation shouldnt depend on validation engine globals), and then moves CBlockLocator itself from main.h to core.h. This means construction of CBlockLocator objects now happens in O(log nHeight) instead of O(nHeight), as it can use CChains height-based index. Depends on #3077.
3082	Rework of #3072. This just adds the new executable. I gave up on the code movements to remove the dependency on leveldb/BDB as things are just too entangled, see #3072 for details. Hopefully this will also make the pull tester happier. And this is easier to review, too. This adds an executable `bitcoin-rpc` that only serves as a Bitcoin RPC client. The commit does not remove RPC functionality from the `bitcoind` yet, this functionality should be deprecated but is left for a later version to give users some time to switch.
3081	- I observed a massive amount of redefinition warnings after #3071, which are silenced by this patch - uses the same style as we do in other places, where we define ``_WIN32_WINNT``
3080	sendcoinsentry: small clear() and setValue() changes - clear(): clear all UI elements (for secure and insecure payments) - setValue(): only modify UI elements, which need to be set (for secure or insecure payments) sendcoinsdialog: display real failed address string - display the real string (faulty address), which causes the valid address check to fail, instead of a stringified "nonsense" CBitcoinAddress paymentserver: use own HTML-esc / add new header const - make processPaymentRequest() use our own HTML-escaping function from GUIUtil - make string "application/bitcoin-payment" a constant (below similar constant strings in the .cpp file)
3079	I tried using a 40 character username and password for my bitcoind server, and it made it impossible for me to connect to it. Changing it to something simpler appears to solve the problem. However, the problem gets more serious when switching from a simple username and password to the complex one - my bitcoind instance appeared to be responding to the simple username and password after restart (even though they were no longer in bitcoin.conf).
3078	Re-organize the pull-tester scripts a bit. And disables running the blockchain tester, it is not working properly on the pull-tester machine for reasons I cannot explain (fails to start).
3077	This removes several globals (pindexBest, pindexGenesisBlock, hashBestChain, nBestHeight, nBestChainWork, vBlockIndexByHeight), and replaces them by chainBlocks, an instance of a new CChain class. CChain actually only wraps what was previously stored in vBlockIndexByHeight - all other variables are redundant and can be computed from that one. This is a preparation for a second iteration of headersfirst which Im implementing, which will add a second instance of CChain (chainHeaders) in addition to chainActive. This pull request shouldnt change any functionality. Since pindexGenesisBlock, hashBestBlock and nBestChainWork are now computed when needed rather than stored, there are potential edge cases in which no genesis block exists yet, and chainActive.Tip() returns NULL. I have tested synchronizing from network and reindexing.
3076	class template base_uint had its own private lookup table. This is saving 256 bytes per instantiation. The result is not spectacular as bitcoin-qt has only shrinked of about 1Kb but it is still valid improvement. Also, I have replaced a for loop with a memset() call. A unit_test has been added to check the change. Signed-off-by: Olivier Langlois <olivier@olivierlanglois.net>
3074	This equalizes the behavior between the GUI and bitcoind and removes the last usage of fHaveGui (the other is removed in #3072). The commit doesnt completely remove default key functionality but removes the code that sets a new default key after a transaction when it received coins. Completely removing default key functionality is not that easy because it is used as stopgap in a few places - (in `CWallet::LoadWallet`) to determine whether this is the first run with this wallet. - (in `CReserveKey::GetReservedKey`) to return something when the keys are exhausted and keypool should be topped up However these stopgaps are not affected by this change. There will still be an initial default key, it will just never change.
3073	This pull may be slightly controversial, but I dare say that `GetDataDir()` is never used on any performance critical paths (and if it is, it is a bug). Its not that heavy in the first place. This change simplifies the code (no more ClearDatadirCache) and removes any `pathCached`/`csPathCached` destruction order problems (if they are still around).
3072	This adds an executable `bitcoin-rpc` that only serves as a Bitcoin RPC client. The commit does not remove RPC functionality from the `bitcoind` yet, this functionality should be deprecated but is left for a later version to give users some time to switch. To try to remove RPC client dependency on BDB and leveldb I - Moved HelpMessage from `init.cpp` to `util.cpp` - Split `bitcoinrpc.cpp` into `rpcprotocol.cpp`, `rpcclient.cpp` and `rpcserver.cpp` Still this was not successful. It turns out that `util.cpp`, through `Params().DataDir()` in `GetDataDir(fNetSpecific=true)` depends on the block chain parameters, and that way pulls in all the core files (`core.cpp`, `blockchain.cpp`) including the ones that need leveldb and BDB. Splitting `util.cpp` would be possible (as the RPC client only needs the un-specific data dir to get at the configuration file) although somewhat more thinking is required. This would result in many more changes so lets leave it for later. **Note:** This leaves the only usage of `fHaveGUI` left in wallet.cpp: which deals with the default key which we want to remove. After this, the variable can be removed from the core. This is outside the scope of this pull though.
3071	Create an allocators.cpp, and move all of the #ifdef WIN32 code and the #include of windows.h into it. Two motives for this cleanup: 1. Im getting a weird error in windows.h in my smartfee branch. 2. allocators.h is included (indirectly) just about everywhere, so this should speed up Windows compiles quite a lot.
3069	- fixes #3006 by preventing addressbook changes when using secure payment-requests
3068	
3067	- re-work -debug help message text - make -debug log every debugging information again (even all categories) - remove unneeded fDebug checks in front of LogPrint()/qDebug(), as that check is done in LogPrintf() when category is != NULL (true for all LogPrint() calls - remove fDebug ONLY in code which is NOT performance-critical - harmonize addrman category name - deprecate -debugnet usage, should be used via -debug=net and remove the corresponding global
3066	
3065	1. build dependence requirement of libboost-test-dev should be added to readme-qt.md 2. -fPIC flag should be add to leveldb Makefile
3064	- I introduced the problem and fixed it with better readable code
3061	3 possible cases for n: > 0, < 0 and == 0 Skip everything if == 0 reserve string memory for every valid Money values Add sign first to avoid memory copy that inserting it at the end incur. Remove a superfluous counter: nTrim Eliminate 2 logical expression evaluations. Signed-off-by: Olivier Langlois <olivier@olivierlanglois.net>
3060	Im working on re-enabling pull-tester do mingw builds this afternoon. No need to ACK this, Ill pull it when it works.
3059	- fixes #3037 by adding missing join_all() call and brings bitcoind shutdown code in line with Bitcoin-Qt shutdown code - added a comment for the if (!fRet) case
3058	Due to `showmyip.com` being down, `GetMyExternalIP()` currently fails in some cases. Theres not much excuse for this, as theres hundreds of similar sites that could be used instead. Theres a contingency plan in the file below that should probably be enacted, if nothing else.
3057	
3056	- when closing the client with an open debug window, that window could become stuck/unsuable (it was still shown wherea the main window was hidden already) - fix this by hiding the debug window, when quitting the the client
3055	desktop environment will find them because they are in standard paths
3054	Basically that means to prefer prefix increment over postfix ones As the latter produce temporary objects. Signed-off-by: Olivier Langlois <olivier@olivierlanglois.net>
3053	Hurricane Electric uses block 2001:470::, not 2011:470::
3052	I think the check for HE.NETs IP block is incorrect. HE.NET hands out tunnels from their 2001:0470::/32 block Should GetByte(14) be checking for 0x01, not 0x11?
3051	- helps recognizing that the resource file belongs to bitcoind.exe
3050	
3049	RFC4193 is FC00::/7, not FC00::/15.
3048	I often see how many and which outputs are unspent (and try to guess which inputs will be used in next payment, and so on). This can be done by command "listunspent" but now its a little bit unpractical. Outputs are not sorted by any key and when outputs count is more than 10, its badly readable. This patch sorts outputs by amount, ascending. **Pros:** - better readability of outputs **Cons:** - complexity of printing is n*log(n) instead of n (where n is number of outputs) - maybe question why to sort by amount and no by any other key (but I think that better any sort than no sort) For me, this is very useful. If you find it useful too, Ill be glad when it will be pulled to master.
3047	- prevents unneeded log messages, which could make users think something bad was happening
3046	This ensures the allocator is ready no matter when its needed (as some STL implementations allocate in constructors -- i.e., MSVCs STL in debug builds).
3045	Quick merge :)?
3044	Greetings! Could somebody read this my question at stackexchange.com:
3043	The final revision of PR 3029 incorporated a review suggestion of replacing i686-w64-mingw32 with $HOST. But we forgot that $HOST is not expanded when within single quotes so it actually broke qt-win32.yml build. Neither myself nor the reviewers caught this error. I take responsibility for this mistake. This commit is the minimal necessary to restore the qt win32 build, similar to how it worked previously. I have personally tested rebuilding the entire stack from scratch and the result has a working deterministic bitcoin*.exe. cfields has major cleanups for all gitian recipes coming soon, so please resist the urge to bikeshed this PR with more improvements as it is highly likely to be discarded in the coming rewrite.
3042	Credit: sipa, cfields, Luke-Jr and michagogo contributed to this fix. Removing wine as a win32 build dep is beneficial to fixing Gitian LXC, which would enable many more people to join in the gitian.sigs process by being able to build with a linux VM instead of a virt capable host.
3041	Simplifies gitian win32 build by removing the wine build-time dependency. Patch by with cleanup and testing by wtogami. Resulting binaries seem to operate just fine. Getting rid of wine makes it much easier to use gitan LXC. After gitian LXC is fixed, it will be possible to do deterministic gitian builds wthin Linux VMs, making the process more accessible to a greater number of people.
3040	- remove an unneeded debug message in walletframe
3039	- make BitcoinGUI::showPaymentACK() use a reference for msg and use our own GUIUtil::HtmlEscape() function - ensure QTimer usage in clientmodel is the same as in walletmodel - remove an unneeded debug message in walletframe - flag some parameters as unused in DebugMessageHandler() - small code formatting changes
3038	- could be helpful when debugging shutdown related problems
3037	I saw ``threadGroup.join_all();`` in the Qt shutdown code and took a quick look at the bitcoind code, where this is missing in ``DetectShutdownThread()`` and before the end in ``AppInit()``. Can you take a look?
3036	The following errors occured with an installation on Windows 7 64 Bit during transfer of bitcoins from the wallet. I dont know if it is important, but the wallet is password protected. ![bitcoin-qt error1](https://f.cloud.github.com/assets/5548641/1216822/9e361fda-2694-11e3-9e8d-75c3b6501f0d.PNG) After restart of the application, the following message is shown (I pressed "Abort"): ![bitcoin-qt error2](https://f.cloud.github.com/assets/5548641/1216827/c5e4b1ae-2694-11e3-9348-dd03080e5de2.PNG) After I had pressed "Abort", the message "wallet corrupted" appeared: ![bitcoin-qt error3](https://f.cloud.github.com/assets/5548641/1216834/f408e9ba-2694-11e3-82dc-a95d4808f92a.PNG) The wallet was succesfully restored, but the transaction was not carried out.
3035	The introduction of Autotools has rendered these patches obsolete.
3034	The current link is redirecting to
3032	Hi. I wonder if you would be able to add this localisation to the Bitcoin application. Please get back to me if any further information is needed. Thank you.
3031	- moves 2 global variables from main.cpp/h to miner.cpp/h - also removes 2 unneded includes in miner.cpp, that come from miner.h already
3029	mingw upgrade allows more hardening, compiler bug fixes and possibily win64 later. Rename deps .zip files to be more consistent in revision format. Remove "msvc" compat triplet name. LDFLAGS -static-libgcc -static-libstdc++ Upgrade win32 gitian to boost-1.54.0. Workaround 1.54.0 build bug, upstream #9156 Workaround 1.51.0+ human bug, upstream #7262 Upstream 1.51.0 fixed a multiple reference bug that is problematic in 1.50.0. The cross-compile patch is by the Fedora package developer and shipped in Fedora. Please also note the sha256sum -c thing in boost-win32.yml. devrandom agreed it is a good approach to better ensure the integrity of inputs, at least prior to gitian itself gaining the ability to track and enforce particular input hashes. If folks have no objections to this sha256sum -c approach, I would like to do a different pull request that does it for all inputs. All unit tests pass.
3028	This commit adds a step, which is to git checkout the version to be built. This ensures that the gitian-descriptors for said version will be the correct ones. In addition, it updates the links for several dependencies, where the previously existing links were dead.
3027	Rewrite of sendcoinsentry.ui for payment protocol introduced a little design error on KDE 4, Qt 4 here. Adding a stretch in sendcoinsdialog fixes the problem for me. I also tried layoutRowStretch in sendcoinsentry directly, but this does not work. Did not look at payment protocol.
3026	As its possible that the on-disk UTXO set now has unspendable outputs, the startup consistency check may fail (reported by runeks on IRC).
3024	See for complete design; executive summary: This removes use of hard-coded fee constants for non-miners. Instead, fees are estimated based on transactions that recently left the memory pool because they were accepted into a block. Pull-requesting this to get code review; Ill be working on a test plan next. suggested the estimate would be better if we looked at transactions that languished in the memory pool, instead; I think that would best be accomplished by implementing a memory-limited memory pool, and keeping track of priority/fee for transactions that get evicted from the pool because it was full. In any case, we will probably get a better estimate of miners behavior by looking at both transactions that are accepted into blocks AND transactions that dont.
3023	Something seems to be wrong with the previous pull request (#2818), so Im recreating -- see there for message and discussion.
3022	I didnt found(with guys on IRC) way to get source address of incoming coins.
3021	- a recent pull changed xgettext to gettext, this is reverted here I had problems using the script with just gettext (on Windows), so I reverted back to xgettext.
3020	
3019	Fixes #3013.
3018	![capture](https://f.cloud.github.com/assets/1767796/1170926/dc1fd28c-20f4-11e3-95f8-8e3229537150.PNG) In case the image isnt visible to you: "Runtime Error! Program C:\...bitcoin-qt.exe This application has requested the Runtime to terminate it in an unusual way. Please contact the applicationss support team for more information." This was produced on a very new Toshiba E45t-A4200 with a solid state drive running Windows 8 after running it the first time with about 31 weeks of the blockchain as-yet-NOT-loaded and not really any activity from me, the user. The disk has plenty of space. Restarting the app was successful; it now says its only 30 weeks behind.
3017	Result: ``` ==1519== LEAK SUMMARY: ==1519== definitely lost: 0 bytes in 0 blocks ==1519== indirectly lost: 0 bytes in 0 blocks ==1519== possibly lost: 0 bytes in 0 blocks ==1519== still reachable: 2,360 bytes in 14 blocks ==1519== suppressed: 0 bytes in 0 blocks ```
3016	As we dont have any releases enforcing this yet, and no others that have picked it up, we can change this without harm. It has the advantage of on average decreasing signatures by 0.5 byte, and avoiding DER padding problems.
3015	Requested in This fleshed out a few build problems that were fixed up here as well. Note that icons are currently missing.
3014	A few gitian fixes after recent configure changes. Fixes win32 runtime.
3013	At 1561 line in main.h for version 0.8.5 Before the correction 1561 if (nHeightIn > nHeightFirst) 1562 nHeightLast = nHeightIn; After the correction 1561 if (nHeightIn > nHeightLast) 1562 nHeightLast = nHeightIn; Thank You My Email is 895175589@qq.com
3012	
3011	This supercedes #2988 (-O2 -g is now default, plus other flags) and bits of #2986
3010	The latest master builds fine: $ ./autogen.sh $ ./configure --with-incompatible-bdb --without-qt --without-miniupnpc $ make Does not run: $ bitcoind -testnet -printtoconsole terminate called after throwing an instance of std::runtime_error what(): locale::facet::_S_create_c_locale name not valid Aborted
3009	I finally got fed up enough with our lousy logging to do something about it. So: I replaced all instances of printf() in our code with either LogPrint or LogPrintf. LogPrintf("foo\n"); is a straight replacement for printf/OutputDebugStringf("foo\n"). It writes printf-formatted arguments to debug.log (or console if -printtoconsole). Use it for messages that should always go into debug.log (errors, startup info, etc). LogPrint("category", ...); is new-- it only logs if you pass a -debug=category flag. Run with multiple -debug= arguments to log more than one category (e.g. bitcoind -debug=net -debug=mempool ). I defined the following categories: net mempool rpc alert db addr addrman coindb rand If yall like this, feel free to add more categories, rename/combine these, etc.
3008	This is part of my quest to eliminate hard-coded fees from the reference implementation. The first: Remove the rule that all outputs of free transactions must be greater than 0.01 XBT. Dust spam is now taken care of by making dusty outputs non-standard. I did not change the coin selection algorithm, it will still try to avoid creating outputs less than 0.01 XBT. That could be changed/simplified a release after this rolls out to miners/relay nodes (before then, there is too much risk your free transactions would never confirm). The second: Changes the maximum size of a free transaction that will be created from 10,000 bytes to 1,000 bytes. The idea behind this change is to make the free transaction area available to a greater number of people; with the default 27K-per-block, just three very-large very-high-priority transactions could fill the space. I did not change the relay policy for free transactions (yet); you can still send a 26,000 byte zero-fee transaction and it will be relayed and might be mined. This just stops somebody moving a lot of old coins from accidentally monopolizing the free transaction area when they would almost certainly be perfectly happy to pay the fee.
3006	Im using to test some GUI things with payment-requests and created one with a payment to address ``mfYEyfXvxhiRWyqmMUnVCTHrdjaCb5dvPn``, which I have in my addressbock with label ``Gavin`` (AFAIK that one is one of his ^^). Now see what happens (only with secure payments): ![before](https://f.cloud.github.com/assets/1419649/1156954/643e4118-1f96-11e3-90c1-691da10a0740.png) (before) ![after](https://f.cloud.github.com/assets/1419649/1156953/6417e338-1f96-11e3-9cbe-6b6dbdd0292e.png) (after)
3004	After updating to latest git version about a month ago, bitcoind always hangs on startup. After attempting to connect to nodes, it just stops doing anything except flushing peers.dat periodically. Issued rpc commands also just hang. Theres no cpu or disk activity related to bitcoind. The only way to get it to start properly is to use -rescan, but thats not a practical long-term solution because it literally takes days for my slow hard drive to rescan the blockchain. The daemon was safely closed with with ```bitcoind stop``` prior to the restart and I havent seen log messages relating to corruption. I have also kept updating to git head after every version to see if the problem resolves. In this state ```bitcoind stop``` also hangs. Im going to try to finding the last working version that didnt exhibit this problem, but thats probably going to take a while and Im hoping somebody will have ideas before then. Running on OSX 10.7.5. My bitcoind.conf: checklevel=2 listen=0 dns=1 server=1 rpcuser=xxx rpcpassword=xxx The debug log: 2013-09-16 20:34:46 Bitcoin version v0.8.0-734-ga25cd0b-beta (2013-09-16 06:25:12 -0700) 2013-09-16 20:34:46 Using OpenSSL version OpenSSL 1.0.1e 11 Feb 2013 2013-09-16 20:34:46 Default data directory /Users/xxx/Library/Application Support/Bitcoin 2013-09-16 20:34:46 Using data directory /Users/xxx/Library/Application Support/Bitcoin 2013-09-16 20:34:46 Using at most 125 connections (275 file descriptors available) 2013-09-16 20:34:46 Using 2 threads for script verification 2013-09-16 20:34:46 init message: Verifying wallet... 2013-09-16 20:34:46 dbenv.open LogDir=/Users/xxx/Library/Application Support/Bitcoin/database ErrorFile=/Users/xxx/Library/Application Support/Bitcoin/db.log 2013-09-16 20:34:51 init message: Loading block index... 2013-09-16 20:34:51 Opening LevelDB in /Users/xxx/Library/Application Support/Bitcoin/blocks/index 2013-09-16 20:34:51 Opened LevelDB successfully 2013-09-16 20:34:51 Opening LevelDB in /Users/xxx/Library/Application Support/Bitcoin/chainstate 2013-09-16 20:34:57 Opened LevelDB successfully 2013-09-16 20:35:13 LoadBlockIndexDB(): last block file = 81 2013-09-16 20:35:13 LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=151, size=14001756, heights=257913...258060, time=2013-09-14...2013-09-15) 2013-09-16 20:35:13 LoadBlockIndexDB(): transaction index disabled 2013-09-16 20:35:13 LoadBlockIndexDB(): hashBestChain=000000000000000a74dc1374e29fa28c99fec1e4b4fdbbae7b0198983c0449d9 height=258059 date=2013-09-15 01:15:33 2013-09-16 20:35:13 init message: Verifying blocks... 2013-09-16 20:35:13 Verifying last 288 blocks at level 2 2013-09-16 20:35:31 No coin database inconsistencies in last 0 blocks (0 transactions) 2013-09-16 20:35:31 block index 40569ms 2013-09-16 20:35:31 init message: Loading wallet... 2013-09-16 20:35:55 nFileVersion = 89900 2013-09-16 20:35:55 Keys: 5131 plaintext, 0 encrypted, 2 w/ metadata, 5131 total 2013-09-16 20:35:55 wallet 24084ms 2013-09-16 20:35:55 init message: Rescanning... 2013-09-16 20:35:55 Rescanning last 11 blocks (from block 258048)... 2013-09-16 20:35:55 rescan 246ms 2013-09-16 20:36:09 SetBestChain: new best=000000000000001935f83ff50bc4b4cd616a5605b2126406bfe5c5229dfbd862 height=258060 log2_work=71.920896 tx=23803186 date=2013-09-15 01:30:32 progress=0.983963 2013-09-16 20:36:09 init message: Loading addresses... 2013-09-16 20:36:09 Loaded 93 addresses from peers.dat 35ms 2013-09-16 20:36:09 mapBlockIndex.size() = 258071 2013-09-16 20:36:09 nBestHeight = 258060 2013-09-16 20:36:09 setKeyPool.size() = 102 2013-09-16 20:36:09 mapWallet.size() = 5928 2013-09-16 20:36:09 mapAddressBook.size() = 5036 2013-09-16 20:36:09 dnsseed thread start 2013-09-16 20:36:09 Loading addresses from DNS seeds (could take a while) 2013-09-16 20:36:09 net thread start 2013-09-16 20:36:09 addcon thread start 2013-09-16 20:36:09 opencon thread start 2013-09-16 20:36:09 msghand thread start 2013-09-16 20:36:09 dumpaddr thread start 2013-09-16 20:36:09 init message: Done loading 2013-09-16 20:36:09 trying connection 173.242.112.53:8333 lastseen=355378.8hrs 2013-09-16 20:36:09 Added 28 addresses from 178.18.90.41: 39 tried, 82 new 2013-09-16 20:36:09 Added 25 addresses from ::: 39 tried, 107 new 2013-09-16 20:36:09 trying connection 60.1.129.129:8333 lastseen=43.1hrs 2013-09-16 20:36:09 Added 24 addresses from 89.207.132.47: 39 tried, 131 new 2013-09-16 20:36:09 93 addresses found from DNS seeds 2013-09-16 20:36:09 dnsseed thread exit 2013-09-16 20:36:10 connected 60.1.129.129:8333 2013-09-16 20:36:10 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=60.1.129.129:8333, peer=60.1.129.129:8333 2013-09-16 20:36:10 trying connection 95.152.209.187:8333 lastseen=91.2hrs 2013-09-16 20:36:10 Added time data, samples 2, offset +0 (+0 minutes) 2013-09-16 20:36:10 receive version message: version 70001, blocks=258364, us=XXX.XXX.XXX.XXX:59498, them=60.1.129.129:8333, peer=60.1.129.129:8333 2013-09-16 20:36:10 connect() failed after select(): Connection refused 2013-09-16 20:36:11 trying connection 95.152.209.187:8333 lastseen=91.2hrs 2013-09-16 20:36:11 connect() failed after select(): Connection refused 2013-09-16 20:36:12 trying connection 76.10.178.108:8333 lastseen=161.1hrs 2013-09-16 20:36:12 connected 76.10.178.108:8333 2013-09-16 20:36:12 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=76.10.178.108:8333, peer=76.10.178.108:8333 2013-09-16 20:36:12 trying connection 128.4.21.210:8333 lastseen=59.7hrs 2013-09-16 20:36:12 connected 128.4.21.210:8333 2013-09-16 20:36:12 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=128.4.21.210:8333, peer=128.4.21.210:8333 2013-09-16 20:36:13 trying connection 122.228.207.153:8333 lastseen=73.4hrs 2013-09-16 20:36:13 connected 122.228.207.153:8333 2013-09-16 20:36:13 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=122.228.207.153:8333, peer=122.228.207.153:8333 2013-09-16 20:36:14 trying connection 109.228.154.37:8333 lastseen=97.7hrs 2013-09-16 20:36:14 connected 109.228.154.37:8333 2013-09-16 20:36:14 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=109.228.154.37:8333, peer=109.228.154.37:8333 2013-09-16 20:36:14 connection timeout 2013-09-16 20:36:14 trying connection 81.166.147.68:8333 lastseen=43.1hrs 2013-09-16 20:36:14 trying connection 108.162.205.54:8333 lastseen=355378.8hrs 2013-09-16 20:36:14 connected 81.166.147.68:8333 2013-09-16 20:36:14 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=81.166.147.68:8333, peer=81.166.147.68:8333 2013-09-16 20:36:15 trying connection 2.229.10.127:8333 lastseen=153.1hrs 2013-09-16 20:36:15 connected 2.229.10.127:8333 2013-09-16 20:36:15 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=2.229.10.127:8333, peer=2.229.10.127:8333 2013-09-16 20:36:19 connection timeout 2013-09-16 20:36:20 trying connection 67.14.164.114:8333 lastseen=355378.8hrs 2013-09-16 20:36:20 connected 67.14.164.114:8333 2013-09-16 20:36:20 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=67.14.164.114:8333, peer=67.14.164.114:8333 2013-09-16 20:37:15 socket no message in first 60 seconds, 0 1 2013-09-16 20:37:15 disconnecting node 81.166.147.68:8333 2013-09-16 20:37:15 trying connection 203.219.208.58:8333 lastseen=81.6hrs 2013-09-16 20:37:15 connected 203.219.208.58:8333 2013-09-16 20:37:15 send version message: version 70001, blocks=258060, us=0.0.0.0:0, them=203.219.208.58:8333, peer=203.219.208.58:8333 2013-09-16 20:45:49 ThreadRPCServer method=listtransactions 2013-09-16 20:48:14 ThreadRPCServer method=listtransactions 2013-09-16 20:51:09 Flushed 170 addresses to peers.dat 151ms 2013-09-16 21:06:09 Flushed 170 addresses to peers.dat 143ms 2013-09-16 21:08:58 ThreadRPCServer method=stop 2013-09-16 21:08:58 addcon thread interrupt 2013-09-16 21:08:58 dumpaddr thread stop 2013-09-16 21:08:58 net thread interrupt 2013-09-16 21:08:58 opencon thread interrupt 2013-09-16 21:21:35 ThreadRPCServer method=stop
3001	libleveldb.a and libmemenv.a should be able to build in parallel, but in practice calling the leveldb makefile ends up rewriting build_config.mk. If one target tries to build while the other is halfway through writing the .mk, the make ends up in an undefined state. Fix that by making one depend on the other. This also reorders the variables to be passed by param rather than via the environment, and combines the targets into a single rule to avoid needless duplication.
3000	As wed previously learned, OSXs fsync is a data eating lie. Since 0.8.4 were still getting some reports of disk corruption on OSX but now all of it looks like the block files have gotten out of sync with the database. It turns out that we were still using fsync() on the block files, so this isnt surprising.
2999	
2997	Since at least the 8.x series, my "misbehaving" peers are never actively punished, even though theres log messages suggesting that they are. ERROR: ProcessBlock() : already have block 257798 0000000000000023f4514ddd81a0a915bc16d59eaf9fe9a6e0344b1aa01319a3 Misbehaving: hostname.tld:8333 (0 -> 0) The ban score always remains at 0, and is never increased for any peer, despite the many of messages saying that peers are misbehaving for a variety of reasons. Is this intended? I could have sworn that previously, the score increased up until a threshold that would kick their connection, which never happens now. Nothing is strange about my configuration, it is a non-listening node in onion land running either the latest tagged build or the current master.
2996	Addresses #2992. This creates a make translate target with the same functionality as before.
2995	- ensure message boxes are shown in center of our main window, not centered on the users desktop - always prefer user supplied titles for message boxes over the functions defaults (fixes a bug, where transaction info messages did not contain information, if it was incoming or outgoing)
2994	- ensure that user-defined address labels are shown in the sendcoins dialog, when using bitcoin: URIs or insecure payments (no changes to the secure payments UI) - favors supplied labels over user-defined ones from addressbook
2993	After running bitcoin-qt 0.8.5 from the terminal on ubuntu, the software is working, but the terminal give this kind of errors- QString::arg: Argument missing: "1% 2% () " , 257791 QString::arg: Argument missing: 1% , 0 QString::arg: Argument missing: "1% 2% () " , 257790 QString::arg: Argument missing: "1% 2% () " , 257791 QString::arg: Argument missing: 1% , 0 Thanks.
2992	See: We generated the bitcoin_en.ts via: <pre> python share/qt/extract_strings_qt.py lupdate bitcoin-qt.pro -no-obsolete -locations relative -ts src/qt/locale/bitcoin_en.ts </pre> AFAIK this no longer works, as we dont have any working .pro file. We need a working translations process and as Im no Python script guy, nor have any autotools knowledge, someone needs to look into this :). Can you please take a look?
2991	- remove some unneeded translatable strings from sendcoinsentry.ui file and rename some elements for better readability - optimize string prorcessing in SendCoinsDialog::on_sendButton_clicked() - make all UI labels for secure payments plain text and move the settings to sendcoinsentry.ui file - remove unneeded button and default button definiton from warning message boxes - remove fixed font-size when sending coins to an address with label and use monospace font for addresses
2989	This is a nop, it just drops dead code. Version is now set in configure.ac which makes replacements in other files as necessary.
2988	This is cfields preferred stopgap until we sort out how we want debug vs release setup.
2987	- CreateTransaction will detect/report if txFee added was required or is voluntary - Qt: different terms in send coins dialog
2986	Only behaviour change should be building with -O1 for debug builds (currently default).
2985	This is the first in a line of PRs to address some of the concerns laid out in #2979. Rather than adding more trickery to deduce where test data should be found, I believe that this is the more reliable solution. This uses the same mechanism as QT to include their assets in the resulting binary rather than reading it from the disk at runtime. Untested as-yet on OSX, but I believe it should work fine there. Copied from the main commit: Advantages: - Tests become distributable. - Cross-compile friendly. Build on one machine and execute in an arbitrary location on another. - Easier testing for backports. Users can verify that tests pass without having to track down corresponding test data. - More trustworthy test results and easier quality assurance as tests make fewer assumptions about their environment. - Tests could theoretically run at client/daemon startup and exit on failure. Disadvantages: - Required hexdump build-dependency. This is a standard bsd tool that should be usable everywhere. It is likely already installed on all build-machines. - Tests can no longer be fudged after build by altering test-data.
2982	This also makes negative transaction versions non-standard. This avoids an issue triggered in block 256818 where transactions with negative version numbers were incorrectly serialized into the UTXO set. On restart nodes detect the inconsistency and refuse to start so long as a block with these transactions is inside the self-consistency check window, logging "coin database inconsistencies found". The software recommends reindexing, but reindexing does not correct the problem. This should be fixed by changing the chainstate serialization, but working around it seems harmless for now because the version is not used by any network rule currently. A patch free workaround is to start with -checklevel=2 which skips the consistency checks, but the IsStandard change is important for miners in order to protect unpatched nodes.
2981	Ive seen users confused multiple times thinking they should be using -tor to set their tor proxy and then finding in horror that they were still connecting to the IPv4 internet. Even Jeff guesses wrong about what the knob does, so I think we should rename it. This leaves the old knob working, we can pull it out completely in a later release.
2980	Silence useless warning in src/json/json_spirit_writer_template.h to make important warnings easier to see. warning: typedef Char_type locally defined but not used [-Wunused-local-typedefs]
2979	
2978	
2977	Add protobuf 2.5.0 download for inputs. Seems to be missing. Edit: also fixed Qt gitian build and updated process for that
2976	Show the transaction vout index in transactions details dialog (in the same format as when copying it). Alternative to #2970. - Adds an vout parameter to TransactionDesc::toHTML, this will also make it possible to show specific subtransaction details in the details window.
2973	- removes all usages of PrintDebugStringF from Qt code - ensure same format for all debug.log messages "functionname() : Message"
2972	via the "settee" you are able to set optional transaction fee. Command to get previously set optional fee at runtime will be useful
2970	When using the context menu to copy a transaction ID, the subtransaction index is added for no apparent reason. We dont show the subtransaction index in the details window, so I see no reason why a user would want it appended to their transaction ID from the context menu.
2969	Signed-off-by: Soroush Rabiei <soroush.rabiei@gmail.com>
2968	This is a cheap hack to address the warnings people get during initial download, feel free to discard in favor of something more reasonable.
2967	
2965	2013-09-01 09:22:23 POTENTIAL DEADLOCK DETECTED 2013-09-01 09:22:23 Previous lock order was: 2013-09-01 09:22:23 (1) cs_wallet wallet.cpp:774 2013-09-01 09:22:23 mempool.cs main.cpp:1114 2013-09-01 09:22:23 (2) cs_setpwalletRegistered main.cpp:129 2013-09-01 09:22:23 Current lock order is: 2013-09-01 09:22:23 pnode->cs_vRecvMsg net.cpp:1518 2013-09-01 09:22:23 cs_main main.cpp:4062 2013-09-01 09:22:23 (2) cs_setpwalletRegistered main.cpp:161 2013-09-01 09:22:23 (1) cs_wallet wallet.h:310 2013-09-01 09:22:23 LOCKCONTENTION: cs_setpwalletRegistered 2013-09-01 09:22:23 Locker: main.cpp:129 This is likely caused by this commit
2964	(see individual commits, in particular "Switch to headers-based synchronization", for detailed explanation of the changes). This implements headers-based synchronization and parallel block download. Summary of the changes: * Use `getheaders` instead of `getblocks` based synchronization, so that the best block in the chain is always known before actually downloading it. No more orphan blocks, ever. * Use a moving-window based block downloading mechanism (the heuristics are simple and behave badly for very small blocks, but except for the very beginning of the chain, it works very well). * Allow blocks to be stored out-of-order in the block database files. * Reorganize the block connection logic significantly. * Add a `getblockheader` RPC command.
2963	- prepend "Bitcoin-Qt" in front of debug.log entries, which come from Qt - move DebugMessageHandler installation upwards to the event handler installation, which fits much better
2961	- rename URL into URI in paymentserver where correct - add some missing Qt-coding-stuff in paymentserver - change QSpinBox to QLineEdit as base for BitcoinAmountField in .ui files (as this is the result when converting the BAF back into base) - remove some c_str() and replace with QString::fromStdString() - remove several new-lines - remove unneeded spaces - indentation fixes
2959	
2958	Ive rebased pull request #2651 to payment request. This was a bit tricky as they affect the same code. Ive tried it a bit and it appears to work, but havent tested the interaction with payment request yet. can you please review/test this?
2957	
2956	Title says it all -- this is because of a confusion in #bitcoin-dev by a user who didnt realize at first that these addresses werent his.
2955	This is why we created this function. Avoids some #ifdef.
2953	Saw this report: I could be wrong because Im not that well versed in makefiles but unless this is overridden by something else, it looks like in makefile.mingw has starting at line 47: DEBUGFLAGS=-g CFLAGS=-mthreads -O2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS) Doesnt the -g enable assertions? I think it shouldnt be enabled for the prod release.
2952	Build a cache of already processed transactions is sufficient to fix this.CWalletTx::IsConfirmed displays exceptionally poor performance when there are multiple unconfirmed transactions where IsFromMe() is true. A cache of already processed transactions is sufficient to largely fix this. This is still optimized for the common case where most dependent transactions are not IsFromMe() As part of this change the logic has been simplified. Simple benchmark results: generate 200 blocks with regtest, create 300 transactions using standard sendtoaddress rpc and a new address for each transaction 95 seconds for the IsConfirmed this is replacing... well it still hasnt finished running at transactions 216 1414 seconds and getting worse ![isconfirmed](https://f.cloud.github.com/assets/620611/1052946/a100588e-10e6-11e3-8e2c-4985e4b04dbb.png) after transaction 175 the time per transaction grows exponentially 1.25 * e ^ (0.107 * x)
2951	Correctly use the purpose of addresses that are added after the start of the client. Addresses with purpose "refund" should not be visible in the GUI address list. This is handled correctly after this commit.
2950	Calculates a hash to accelerate key import. Enables skipping EC_KEY_check_key when a hash is present. Benchmarks show 0.15ms per key vs 1.5ms per key. An order of magnitude improvement.
2949	There have been several incidents where mainnet experimentation with raw transactions resulted in insane fees. This is hard to prevent in the raw transaction api because the inputs may not be known. Since sending doesnt work if the inputs arent known, we can catch it there. This rejects fees > than 10000 * nMinRelayTxFee or 1 BTC with the defaults and can be overridden with a bool at the rpc.
2948	Lacking access to change addresses was a bit of a hole in the raw transaction functionality, Ive found. It was named "getraw..." to emphasize this is not for normal use. The current definition of a change address, AFAICS: in the wallet, but not address book.
2947	Were not seeing large reorgs that would justify waiting a large amount past the rule required maturity, and the extra three hours is just a nuisance. Take one more block to at least give the 100th block time to propagate.
2946	- to be consistent and for better readability move all remaining SLOT()/SIGNAL() connections from .ui files into the .cpp files
2945	This changes the priority calculation to not include the size of per-txin data including up to 109 bytes of scriptsig so that transactions which sweep up extra UTXO dont lose priority relative to ones that dont. Id toyed with some other variations, but it seems like any formulation which results in an incentive stronger than making them not count will sometimes create incentives to add extra outputs so that you have extra inputs to consume later. The maximum credit is limited so that users dont lose the disincentive to stuff random data in their transactions, the limit of 109 is based on the size of a P2SH redemption with a compressed public key. This shouldnt need a staged deployment because the priority is not used as a relay criteria, only a mining criteria.
2944	Suggestion from BitPay: set an Accept: HTTP header when fetching payment requests / payment ACKs.
2943	Continuation of Changes since Round 2: Rebased on current master Big cleanups Added protoc/libprotobuf support Added win32 installer make target Added Gitian descriptors I could use some help with the following items: - Documenting windows/osx/mingw build. They should all be working, but I dont currently have a windows/osx environment for testing. Documentation is a rather large job for this merge, as it requires a pretty extensive overhaul. For the most part, the build docs can be thrown away and replaced by a single procedure, with the exception of platform-specific dependencies setup. There is no longer any need for a distinction between gui/non-gui build procedures. - Edit: Gitian issues fixed. Ive briefly updated the documentation for unix. Sadly, my macbook busted last weekend (should be fixed in ~1wk), So I was not able to add the osx dmg build target as I had intended, nor the documentation for building on osx. Is anyone willing to help me out with the above? -- Here is the final go at an Autotools build system replacement. It is meant to be a drop-in replacement for the current system(s), providing the same features with no net changes. It can also live side-by-side with the old system while sharing the same build-related variables in order to facilitate a smooth transition. I hope the benefits are obvious enough: A single/shared build procedure, portability, ease of packaging, ease for downstreams, ease for repository maintainers, cross-compilation, etc. I dont vouch for Autotools in any way, in fact, this configure.am is downright ugly (mainly just because of mingw though), but its portable and well-established. This does away with the need for qmake, as the Makefile is capable of generating everything it needs in a portable way. Building from CLI: For Linux, assuming the dependencies have been met, the build procedure looks like this: ``` ./autogen.sh ./configure make ``` Same for OS X, but the pkg-config path needs to be hooked up from macports first: ``` echo "/opt/local/share/aclocal" | sudo tee -a /usr/share/aclocal/dirlist ``` For mingw its the same, but you will need to provide lots of paths in the form of: ``` ./autogen.sh export STAGING=/path/to/extracted/libs ./configure CPPFLAGS=-I$STAGING LDFLAGS=-L$STAGING --prefix=$STAGING --host=i586-mingw32msvc --with-qt-bindir=$STAGING/host/bin --with-qt-plugindir=$STAGING/plugins --with-qt-incdir=$STAGING --with-boost=$STAGING --with-protoc-bindir=$STAGING/host/bin make ``` In addition, there are helpers for qt and boost to help with finding some locations. Use ./configure --help to see the available options. Native windows built is untested, as I dont have a windows environment at my disposal. make check will run the unit tests and print the results. Ive done my best to avoid adding any new behavior or features, and I would much prefer to aim for feature-parity before making any improvements.
2942	See
2941	Hello I have been unable to open the QT on my MAC for a couple weeks and am not a programmer and do not know if this error has been addressed else where in the forum. Apologies if it has. Can someone please check it out. A "problem report for Bitcoin-QT" box pops up with the following error (sorry its so long): Process: Bitcoin-Qt [3930] Path: /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Identifier: org.bitcoinfoundation.Bitcoin-Qt Version: 0.8.4 (0.8.4) Code Type: X86 (Native) Parent Process: launchd [86] Date/Time: 2013-08-25 23:50:07.684 +0900 OS Version: Mac OS X 10.6.8 (10K549) Report Version: 6 Interval Since Last Report: 85665 sec Crashes Since Last Report: 3 Per-App Interval Since Last Report: 490 sec Per-App Crashes Since Last Report: 2 Anonymous UUID: 91DD2B25-533B-4FDB-A266-AD0FE18642AC Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Crashed Thread: 0 Dispatch queue: com.apple.main-thread Application Specific Information: Assertion failed: (pfork != NULL), function SetBestChain, file src/main.cpp, line 1754. Thread 0 Crashed: Dispatch queue: com.apple.main-thread 0 libSystem.B.dylib 0x915bec5a __kill + 10 1 libSystem.B.dylib 0x915bec4c kill$UNIX2003 + 32 2 libSystem.B.dylib 0x916515a5 raise + 26 3 libSystem.B.dylib 0x916676e4 abort + 93 4 libSystem.B.dylib 0x9165420f __assert_rtn + 252 5 ...itcoinfoundation.Bitcoin-Qt 0x000d144c SetBestChain(CValidationState&, CBlockIndex*) + 3164 6 ...itcoinfoundation.Bitcoin-Qt 0x000d2de8 ConnectBestBlock(CValidationState&) + 824 7 ...itcoinfoundation.Bitcoin-Qt 0x00124a08 AppInit2(boost::thread_group&) + 22744 8 ...itcoinfoundation.Bitcoin-Qt 0x00022680 main + 7504 9 ...itcoinfoundation.Bitcoin-Qt 0x0001f951 start + 53 Thread 1: Dispatch queue: com.apple.libdispatch-manager 0 libSystem.B.dylib 0x91584382 kevent + 10 1 libSystem.B.dylib 0x91584a9c _dispatch_mgr_invoke + 215 2 libSystem.B.dylib 0x91583f59 _dispatch_queue_invoke + 163 3 libSystem.B.dylib 0x91583cfe _dispatch_worker_thread2 + 240 4 libSystem.B.dylib 0x91583781 _pthread_wqthread + 390 5 libSystem.B.dylib 0x915835c6 start_wqthread + 30 Thread 2: com.apple.CFSocket.private 0 libSystem.B.dylib 0x9157cac6 select$DARWIN_EXTSN + 10 1 com.apple.CoreFoundation 0x904a0c53 __CFSocketManager + 1091 2 libSystem.B.dylib 0x9158b259 _pthread_start + 345 3 libSystem.B.dylib 0x9158b0de thread_start + 34 Thread 3: 0 libSystem.B.dylib 0x9157cac6 select$DARWIN_EXTSN + 10 1 QtCore 0x01a00a90 qt_safe_select(int, fd_set*, fd_set*, fd_set*, timeval const*) + 320 2 QtCore 0x01a04dda QEventDispatcherUNIXPrivate::doSelect(QFlags<QEventLoop::ProcessEventsFlag>, timeval*) + 394 3 QtCore 0x01a0526f QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 175 4 QtCore 0x019ce471 QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 65 5 QtCore 0x019ce84a QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 314 6 QtCore 0x018aca45 QThread::exec() + 261 7 QtCore 0x018b00d3 QThread::terminate() + 787 8 libSystem.B.dylib 0x9158b259 _pthread_start + 345 9 libSystem.B.dylib 0x9158b0de thread_start + 34 Thread 4: 0 libSystem.B.dylib 0x9158baa2 __semwait_signal + 10 1 libSystem.B.dylib 0x9158b75e _pthread_cond_wait + 1191 2 libSystem.B.dylib 0x9158d3f8 pthread_cond_wait$UNIX2003 + 73 3 ...itcoinfoundation.Bitcoin-Qt 0x000af1c2 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 ...itcoinfoundation.Bitcoin-Qt 0x0011179d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 ...itcoinfoundation.Bitcoin-Qt 0x000c03f3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00ce9845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libSystem.B.dylib 0x9158b259 _pthread_start + 345 8 libSystem.B.dylib 0x9158b0de thread_start + 34 Thread 0 crashed with X86 Thread State (32-bit): eax: 0x00000000 ebx: 0x91667693 ecx: 0xbfffe22c edx: 0x915bec5a edi: 0x000006da esi: 0x003246b7 ebp: 0xbfffe248 esp: 0xbfffe22c ss: 0x0000001f efl: 0x00200286 eip: 0x915bec5a cs: 0x00000007 ds: 0x0000001f es: 0x0000001f fs: 0x00000000 gs: 0x00000037 cr2: 0x003246b0 Binary Images: 0x1000 - 0x5f9feb +org.bitcoinfoundation.Bitcoin-Qt 0.8.4 (0.8.4) <663B3AAC-FD4A-3CB4-9635-651358244BB0> /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt 0x893000 - 0x898fe7 +libqrencode.3.dylib 5.1.0 (compatibility 5.0.0) <9627FE72-1198-798B-1841-A64F967F32FB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libqrencode.3.dylib 0x89c000 - 0x8a3ff7 +libminiupnpc.8.dylib ??? (???) <2DBB7FA6-2198-8004-2ECF-F504F2081317> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libminiupnpc.8.dylib 0x8a7000 - 0x8f3fff +libssl.1.0.0.dylib ??? (???) <641EBBF5-C97C-1D6C-EFF0-EB02A7FF7629> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib 0x90d000 - 0xa45fef +libcrypto.1.0.0.dylib ??? (???) <0943ABB0-E2CA-20EC-B52D-E3D5E2340F02> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libcrypto.1.0.0.dylib 0xaae000 - 0xc07fff +libdb_cxx-4.8.dylib ??? (???) <A2028F0C-1E73-00A3-BA80-2DEF2EAC9ECB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libdb_cxx-4.8.dylib 0xc31000 - 0xc34ff3 +libboost_system-mt.dylib ??? (???) <DC2F474D-A848-B1CA-5E46-EAB30E94A639> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_system-mt.dylib 0xc38000 - 0xc4bffb +libboost_filesystem-mt.dylib ??? (???) <ED32F1B3-0C00-9EA8-A6E4-B4D69BBB090B> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_filesystem-mt.dylib 0xc56000 - 0xc9aff3 +libboost_program_options-mt.dylib ??? (???) <DAE91877-14DE-370A-9571-A2EC1D7AF3D8> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_program_options-mt.dylib 0xce5000 - 0xcf7ff3 +libboost_thread-mt.dylib ??? (???) <4F1F450A-6305-F698-98AC-E82075E11758> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_thread-mt.dylib 0xd17000 - 0xd1cff3 +libboost_chrono-mt.dylib ??? (???) <7619296E-C4A2-2674-20C7-398C0E5D6C40> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_chrono-mt.dylib 0xd24000 - 0x16b4fe3 +QtGui 4.8.4 (compatibility 4.8.0) <C70071A5-F36B-C018-9BEB-181811A0759F> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtGui.framework/Versions/4/QtGui 0x188b000 - 0x1b3affb +QtCore 4.8.4 (compatibility 4.8.0) <204CC6C5-048C-4746-D9AD-DF6FA3204CE7> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtCore.framework/Versions/4/QtCore 0x1bac000 - 0x1cd1ff7 +QtNetwork 4.8.4 (compatibility 4.8.0) <E7999879-10BE-D14A-6BBB-9F36A61819C0> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtNetwork.framework/Versions/4/QtNetwork 0x1d0d000 - 0x1d1efe7 +libz.1.dylib 1.2.7 (compatibility 1.0.0) <04F507FA-B0BF-CD40-DB2E-CBF29500AF19> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libz.1.dylib 0x1d22000 - 0x1d43fe7 +libpng15.15.dylib 30.0.0 (compatibility 30.0.0) <2E174E7D-8E8B-9F51-6A39-53D3243C159E> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libpng15.15.dylib 0x1ff6000 - 0x1ffaff3 +libqgif.dylib ??? (???) <88247A6C-7963-6E25-F271-07D15F98CF45> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqgif.dylib 0x13fdd000 - 0x13fe1fff +libqico.dylib ??? (???) <7AE39AE4-C88A-D835-F6DB-43C38C12D8C9> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqico.dylib 0x13fe6000 - 0x13feafff +libqjpeg.dylib ??? (???) <0D0902B6-EB00-4DEA-37B8-43EEB3552921> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqjpeg.dylib 0x13ff0000 - 0x13ff3ff7 +libqmng.dylib ??? (???) <AED7B482-BE3B-C70A-3E5B-7575C58DBCE3> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqmng.dylib 0x13ff8000 - 0x13ffaffb +libqtga.dylib ??? (???) <DF371BC0-F930-689E-9654-D687DE08B059> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtga.dylib 0x14908000 - 0x14938fe7 +libjpeg.8.dylib 13.0.0 (compatibility 13.0.0) <96B28C90-BE02-5517-87BC-EC348C2EE25C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libjpeg.8.dylib 0x1493e000 - 0x14942ffb +libqtiff.dylib ??? (???) <D9486AA9-E3DB-C1BF-A248-E5689EC8B768> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtiff.dylib 0x14a9c000 - 0x14ae9fe7 +libmng.1.dylib 2.0.0 (compatibility 2.0.0) <1A7593E8-6C76-5533-E1BE-51976CB1873C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libmng.1.dylib 0x14afe000 - 0x14b26fe7 +liblcms.1.dylib 2.19.0 (compatibility 2.0.0) <81794FD6-C0FC-79D3-7188-36318A86427A> /Applications/Bitcoin-Qt.app/Contents/Frameworks/liblcms.1.dylib 0x14b30000 - 0x14b82fe7 +libtiff.3.dylib 13.7.0 (compatibility 13.0.0) <27FC7F5B-604D-360A-9D36-7567BEA4D1AD> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libtiff.3.dylib 0x15f32000 - 0x15f6dff3 +libqtaccessiblewidgets.dylib ??? (???) <D256CDF3-59B6-AAC8-D553-A348D30AFD9C> /Applications/Bitcoin-Qt.app/Contents/PlugIns/accessible/libqtaccessiblewidgets.dylib 0x8fe00000 - 0x8fe4162b dyld 132.1 (???) <749D24EE-54BD-D74B-D305-C13F5E6C95D8> /usr/lib/dyld 0x90003000 - 0x90047fe7 com.apple.Metadata 10.6.3 (507.15) <74F05E64-2A68-BA10-CCD4-128D164E5A0F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x900a6000 - 0x90153fe7 libobjc.A.dylib 227.0.0 (compatibility 1.0.0) <9F8413A6-736D-37D9-8EB3-7986D4699957> /usr/lib/libobjc.A.dylib 0x9019c000 - 0x90239fe3 com.apple.LaunchServices 362.3 (362.3) <15B47388-16C8-97DA-EEBB-1709E136169E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x9023a000 - 0x902a4fe7 libstdc++.6.dylib 7.9.0 (compatibility 7.0.0) <411D87F4-B7E1-44EB-F201-F8B4F9227213> /usr/lib/libstdc++.6.dylib 0x902bc000 - 0x9034efe7 com.apple.print.framework.PrintCore 6.3 (312.7) <7410D1B2-655D-68DA-D4B9-2C65747B6817> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x9034f000 - 0x903fdff3 com.apple.ink.framework 1.3.3 (107) <233A981E-A2F9-56FB-8BDE-C2DEC3F20784> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x903fe000 - 0x90420fef com.apple.DirectoryService.Framework 3.6 (621.16) <5566E769-6459-78A7-DD2C-1D3068BD3932> /System/Library/Frameworks/DirectoryService.framework/Versions/A/DirectoryService 0x90424000 - 0x9059ffe7 com.apple.CoreFoundation 6.6.6 (550.44) <F88C95CD-1264-782D-A1F5-204739847E93> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x905a0000 - 0x905a0ff7 com.apple.CoreServices 44 (44) <51CFA89A-33DB-90ED-26A8-67D461718A4A> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x9131a000 - 0x9132effb com.apple.speech.synthesis.framework 3.10.35 (3.10.35) <57DD5458-4F24-DA7D-0927-C3321A65D743> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x91357000 - 0x913d7feb com.apple.SearchKit 1.3.0 (1.3.0) <9E18AEA5-F4B4-8BE5-EEA9-818FC4F46FD9> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x914c4000 - 0x914e0fe3 com.apple.openscripting 1.3.1 (???) <2A748037-D1C0-6D47-2C4A-0562AF799AC9> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x914e1000 - 0x914ebfe7 com.apple.audio.SoundManager 3.9.3 (3.9.3) <5F494955-7290-2D91-DA94-44B590191771> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework/Versions/A/CarbonSound 0x9155d000 - 0x91704ff7 libSystem.B.dylib 125.2.11 (compatibility 1.0.0) <2DCD13E3-1BD1-6F25-119A-3863A3848B90> /usr/lib/libSystem.B.dylib 0x91705000 - 0x91707ff7 libRadiance.dylib ??? (???) <090420B3-CB65-9F7B-5349-D42F2F9693B6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x91a29000 - 0x91a49fe7 libresolv.9.dylib 41.1.0 (compatibility 1.0.0) <8C2B5FA8-2469-21C7-D297-F95A0FFE5F19> /usr/lib/libresolv.9.dylib 0x91e3c000 - 0x91e41ff7 com.apple.OpenDirectory 10.6 (10.6) <C1B46982-7D3B-3CC4-3BC2-3E4B595F0231> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x91e42000 - 0x92162ff3 com.apple.CoreServices.CarbonCore 861.39 (861.39) <5C59805C-AF39-9010-B8B5-D673C9C38538> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x92163000 - 0x92291fe7 com.apple.CoreData 102.1 (251) <87FE6861-F2D6-773D-ED45-345272E56463> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x92292000 - 0x925b6fef com.apple.HIToolbox 1.6.5 (???) <21164164-41CE-61DE-C567-32E89755CB34> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x925f0000 - 0x926fcfe7 libGLProgrammability.dylib ??? (???) <6167CEB0-D8D6-C4D9-DD74-49755ADB540F> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLProgrammability.dylib 0x9270a000 - 0x9275dff7 com.apple.HIServices 1.8.3 (???) <1D3C4587-6318-C339-BD0F-1988F246BE2E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x9275e000 - 0x9275fff7 com.apple.audio.units.AudioUnit 1.6.7 (1.6.7) <93EC71F1-4D4E-F456-8EFE-32E7EFD7A064> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x92765000 - 0x927a2ff7 com.apple.SystemConfiguration 1.10.8 (1.10.2) <50E4D49B-4F61-446F-1C21-1B2BA814713D> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x927a3000 - 0x927afff7 libkxld.dylib ??? (???) <9A441C48-2D18-E716-5F38-CBEAE6A0BB3E> /usr/lib/system/libkxld.dylib 0x927b0000 - 0x927b0ff7 com.apple.Accelerate.vecLib 3.6 (vecLib 3.6) <ABF97DA4-3BDF-6FFD-6239-B023CA1F7974> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x927b1000 - 0x927b4ff7 libCoreVMClient.dylib ??? (???) <37F56237-4ABA-E5B5-968D-70FFE357E8E0> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x928e4000 - 0x928f8fe7 libbsm.0.dylib ??? (???) <14CB053A-7C47-96DA-E415-0906BA1B78C9> /usr/lib/libbsm.0.dylib 0x92b3c000 - 0x92b42fe7 com.apple.CommerceCore 1.0 (9.1) <521D067B-3BDA-D04E-E1FA-CFA526C87EB5> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0x92b43000 - 0x92b46ff7 libCGXType.A.dylib 545.0.0 (compatibility 64.0.0) <4D766435-EB76-C384-0127-1D20ACD74076> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x92b67000 - 0x92b67ff7 com.apple.Accelerate 1.6 (Accelerate 1.6) <3891A689-4F38-FACD-38B2-4BF937DE30CF> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x92ea5000 - 0x92eebff7 libauto.dylib ??? (???) <29422A70-87CF-10E2-CE59-FEE1234CFAAE> /usr/lib/libauto.dylib 0x92eec000 - 0x93029fe7 com.apple.audio.toolbox.AudioToolbox 1.6.7 (1.6.7) <423BDE4D-5082-B6CA-BB2C-E22A037235A4> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x9302a000 - 0x930e3fe7 libsqlite3.dylib 9.6.0 (compatibility 9.0.0) <52438E77-55D1-C231-1936-76F1369518E4> /usr/lib/libsqlite3.dylib 0x930e4000 - 0x939c7ff7 com.apple.AppKit 6.6.8 (1038.36) <A353465E-CFC9-CB75-949D-786F6F7732F6> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x939c8000 - 0x939c9ff7 com.apple.TrustEvaluationAgent 1.1 (1) <2D970A9B-77E8-EDC0-BEC6-7580D78B2843> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x939ca000 - 0x939cdffb com.apple.help 1.3.2 (41.1) <8AC20B01-4A3B-94BA-D8AF-E39034B97D8C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x939ce000 - 0x939effe7 com.apple.opencl 12.3.6 (12.3.6) <B4104B80-1CB3-191C-AFD3-697843C6BCFF> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x93a61000 - 0x93a61ff7 com.apple.ApplicationServices 38 (38) <8012B504-3D83-BFBB-DA65-065E061CFE03> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x93a62000 - 0x93b1efff com.apple.ColorSync 4.6.8 (4.6.8) <920DD017-8B41-7334-E554-A85DB99EBD5A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x93b1f000 - 0x93ce2feb com.apple.ImageIO.framework 3.0.6 (3.0.6) <AE641FAD-DF38-AE31-B45B-85AEE7AF3A45> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x93fd4000 - 0x94409ff7 libLAPACK.dylib 219.0.0 (compatibility 1.0.0) <5E2D2283-57DE-9A49-1DB0-CD027FEFA6C2> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x9440a000 - 0x944feff7 libiconv.2.dylib 7.0.0 (compatibility 7.0.0) <061ABF36-8BA9-79C1-6CE7-EC69A4998F51> /usr/lib/libiconv.2.dylib 0x944ff000 - 0x94581ffb SecurityFoundation ??? (???) <2E1F1AF0-A258-D215-2600-5DF03896D1F1> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x946c2000 - 0x94731ff7 libvMisc.dylib 268.0.1 (compatibility 1.0.0) <595A5539-9F54-63E6-7AAC-C04E1574B050> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x94732000 - 0x94734ff7 com.apple.securityhi 4.0 (36638) <C7DA80C1-DCFD-C321-08DA-5E6946CA66E0> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x94bf1000 - 0x94c15ff7 libJPEG.dylib ??? (???) <50E17B4D-63D6-24D3-702F-6A6E912A55EA> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x94c16000 - 0x94c66ff7 com.apple.framework.familycontrols 2.0.2 (2020) <C96C8A99-A40C-8B9C-1FBA-A0F46AC92F17> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0x94c67000 - 0x94ccbffb com.apple.htmlrendering 72 (1.1.4) <4D451A35-FAB6-1288-71F6-F24A4B6E2371> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HTMLRendering.framework/Versions/A/HTMLRendering 0x94ccc000 - 0x94cdaff7 com.apple.opengl 1.6.14 (1.6.14) <82622F67-E032-0BF6-A78D-50B346E8D0FD> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x94de2000 - 0x94e23ff7 libRIP.A.dylib 545.0.0 (compatibility 64.0.0) <80998F66-0AD7-AD12-B9AF-3E8D2CE6DE05> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x94e6a000 - 0x94e77ff7 com.apple.NetFS 3.2.2 (3.2.2) <DDC9C397-C35F-8D7A-BB24-3D1B42FA5FAB> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x94e78000 - 0x94e90ff7 com.apple.CFOpenDirectory 10.6 (10.6) <F9AFC571-3539-6B46-ABF9-46DA2B608819> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x94e91000 - 0x94e9bffb com.apple.speech.recognition.framework 3.11.1 (3.11.1) <7486003F-8FDB-BD6C-CB34-DE45315BD82C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x94f0b000 - 0x94f0bff7 liblangid.dylib ??? (???) <B99607FC-5646-32C8-2C16-AFB5EA9097C2> /usr/lib/liblangid.dylib 0x94f0d000 - 0x94f14ff3 com.apple.print.framework.Print 6.1 (237.1) <F5AAE53D-5530-9004-A9E3-2C1690C5328E> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print 0x94f34000 - 0x94f65ff7 libGLImage.dylib ??? (???) <D18E2E76-DBF4-6930-039A-F66CA0D120B3> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x94f66000 - 0x94fa8ff7 libvDSP.dylib 268.0.1 (compatibility 1.0.0) <8A4721DE-25C4-C8AA-EA90-9DA7812E3EBA> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x95018000 - 0x95065feb com.apple.DirectoryService.PasswordServerFramework 6.1 (6.1) <136BFA48-D456-B677-3B5D-40A6946C3A09> /System/Library/PrivateFrameworks/PasswordServer.framework/Versions/A/PasswordServer 0x95066000 - 0x950a9ff7 com.apple.NavigationServices 3.5.4 (182) <8DC6FD4A-6C74-9C23-A4C3-715B44A8D28C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework/Versions/A/NavigationServices 0x950aa000 - 0x95156fe7 com.apple.CFNetwork 454.12.4 (454.12.4) <DEDCD006-389F-967F-3405-EDF541F406D7> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x95157000 - 0x9515bff7 libGFXShared.dylib ??? (???) <09540618-2ED1-72C4-61CB-938B35927568> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x952c2000 - 0x952cdff7 libGL.dylib ??? (???) <3E34468F-E9A7-8EFB-FF66-5204BD5B4E21> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x952d3000 - 0x952f1fe7 libPng.dylib ??? (???) <6C0B95D7-9634-E044-0B79-F1DD56961C33> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x95312000 - 0x9531bff7 com.apple.DiskArbitration 2.3 (2.3) <E9C40767-DA6A-6CCB-8B00-2D5706753000> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x954cf000 - 0x95549fff com.apple.audio.CoreAudio 3.2.6 (3.2.6) <156A532C-0B60-55B0-EE27-D02B82AA6217> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x95776000 - 0x95787ff7 com.apple.LangAnalysis 1.6.6 (1.6.6) <3036AD83-4F1D-1028-54EE-54165E562650> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x95788000 - 0x95f77557 com.apple.CoreGraphics 1.545.0 (???) <1D9DC7A5-228B-42CB-7018-66F42C3A9BB3> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics 0x95f90000 - 0x96112fe7 libicucore.A.dylib 40.0.0 (compatibility 1.0.0) <60FF302E-5FAE-749B-BC70-0496DC2FBF2D> /usr/lib/libicucore.A.dylib 0x9614c000 - 0x9614cff7 com.apple.Carbon 150 (152) <734BDB59-8B13-54FA-0653-AA8623DF9846> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x9614d000 - 0x96153fff com.apple.CommonPanels 1.2.4 (91) <2438AF5D-067B-B9FD-1248-2C9987F360BA> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x96802000 - 0x9680dff7 libCSync.A.dylib 545.0.0 (compatibility 64.0.0) <287DECA3-7821-32B6-724D-AE03A9A350F9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib 0x9680e000 - 0x968d9fef com.apple.CoreServices.OSServices 359.2 (359.2) <7C16D9C8-6F41-5754-17F7-2659D9DD9579> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x968e6000 - 0x96920ff7 libcups.2.dylib 2.8.0 (compatibility 2.0.0) <A6C207E3-7B42-926D-9C93-BE3F50B92496> /usr/lib/libcups.2.dylib 0x96a10000 - 0x96a43fff libTrueTypeScaler.dylib ??? (???) <8ADB7D19-413E-4499-C874-13C383F97685> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libTrueTypeScaler.dylib 0x96b88000 - 0x96bb0ff7 libxslt.1.dylib 3.24.0 (compatibility 3.0.0) <E761F29A-328B-29D9-3DF0-023F2C21E500> /usr/lib/libxslt.1.dylib 0x96be2000 - 0x96ff8ff7 libBLAS.dylib 219.0.0 (compatibility 1.0.0) <C4FB303A-DB4D-F9E8-181C-129585E59603> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x96ff9000 - 0x97049fe7 libTIFF.dylib ??? (???) <AB182CEC-188A-F2BC-21E1-0059FD3B2598> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x9704a000 - 0x97070ffb com.apple.DictionaryServices 1.1.2 (1.1.2) <43E1D565-6E01-3681-F2E5-72AE4C3A097A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x97071000 - 0x973dcff7 com.apple.QuartzCore 1.6.3 (227.37) <E323A5CC-499E-CA9E-9BC3-537231449CAA> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x98383000 - 0x983c6ff7 libGLU.dylib ??? (???) <6CC3CE6A-7024-C685-EADA-7F9DC27128E2> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x98a7f000 - 0x98ac3ff3 com.apple.coreui 2 (114) <2234855E-3BED-717F-0BFA-D1A289ECDBDA> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x98ac4000 - 0x98b7cfeb libFontParser.dylib ??? (???) <D2D0C922-5ED1-3AE9-6F99-707C74DF3E62> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x98bbc000 - 0x98bd1fff com.apple.ImageCapture 6.1 (6.1) <B909459A-EAC9-A7C8-F2A9-CD757CDB59E8> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x98bd2000 - 0x98cd4fe7 libcrypto.0.9.8.dylib 0.9.8 (compatibility 0.9.8) <316C3B25-6DCA-549A-7728-D5A038F654D8> /usr/lib/libcrypto.0.9.8.dylib 0x98f04000 - 0x98f07fe7 libmathCommon.A.dylib 315.0.0 (compatibility 1.0.0) <1622A54F-1A98-2CBE-B6A4-2122981A500E> /usr/lib/system/libmathCommon.A.dylib 0x98f08000 - 0x98f65ff7 com.apple.framework.IOKit 2.0 (???) <3DABAB9C-4949-F441-B077-0498F8E47A35> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x9906b000 - 0x99106fe7 com.apple.ApplicationServices.ATS 275.19 (???) <2E83B3E9-AF39-36FC-5D05-CC1E952098AB> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x994fa000 - 0x99592fe7 edu.mit.Kerberos 6.5.11 (6.5.11) <F36DB665-A88B-7F5B-6244-6A2E7FFFF668> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x99593000 - 0x995ceffb libFontRegistry.dylib ??? (???) <19ED5DE0-D3AF-B229-9193-35D58FE377E5> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x995cf000 - 0x99840fef com.apple.Foundation 6.6.8 (751.63) <69B3441C-B196-F2AD-07F8-D8DD24E4CD8C> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x99c93000 - 0x99cf4fe7 com.apple.CoreText 151.13 (???) <23F359DA-D845-5C50-4DF3-19E858CF2B2C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework/Versions/A/CoreText 0x99cf5000 - 0x99cf9ff7 IOSurface ??? (???) <235E7E3D-B6E5-0AAA-C41A-7AC1F54A7EBF> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x99d38000 - 0x99e12fff com.apple.DesktopServices 1.5.11 (1.5.11) <800F2040-9211-81A7-B438-7712BF51DEE3> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x99e3b000 - 0x99e3fff7 libGIF.dylib ??? (???) <2251F789-B187-0837-6E38-A0E5C7C4FA3C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x99f07000 - 0x99fe7fe7 com.apple.vImage 4.1 (4.1) <D029C515-08E1-93A6-3705-DD062A3A672C> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x9a16b000 - 0x9a16bff7 com.apple.vecLib 3.6 (vecLib 3.6) <FF4DC8B6-0AB0-DEE8-ADA8-7B57645A1F36> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib 0x9a16c000 - 0x9a214ffb com.apple.QD 3.36 (???) <FA2785A4-BB69-DCB4-3BA3-7C89A82CAB41> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x9a28d000 - 0x9a38dfe7 libxml2.2.dylib 10.3.0 (compatibility 10.0.0) <BE7FCD73-03B5-25A4-FCA4-D4980F1488D6> /usr/lib/libxml2.2.dylib 0x9a3a7000 - 0x9a3b7ff7 libsasl2.2.dylib 3.15.0 (compatibility 3.0.0) <C8744EA3-0AB7-CD03-E639-C4F2B910BE5D> /usr/lib/libsasl2.2.dylib 0x9a3b8000 - 0x9a489fe3 ColorSyncDeprecated.dylib 4.6.0 (compatibility 1.0.0) <C618942F-BC01-0565-18CF-477B63C02181> /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ColorSync.framework/Versions/A/Resources/ColorSyncDeprecated.dylib 0x9a700000 - 0x9a712ff7 com.apple.MultitouchSupport.framework 207.11 (207.11) <6FF4F2D6-B8CD-AE13-56CB-17437EE5B741> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x9a713000 - 0x9a721fe7 libz.1.dylib 1.2.3 (compatibility 1.0.0) <33C1B260-ED05-945D-FC33-EF56EC791E2E> /usr/lib/libz.1.dylib 0x9a722000 - 0x9a741ff7 com.apple.CoreVideo 1.6.2 (45.6) <EB53CAA4-5EE2-C356-A954-5775F7DDD493> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x9a925000 - 0x9a958ff7 com.apple.AE 496.5 (496.5) <BF9673D5-2419-7120-26A3-83D264C75222> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x9a967000 - 0x9abcdff7 com.apple.security 6.1.2 (55002) <E88E133F-5FB3-446F-B753-2B8AD577B46A> /System/Library/Frameworks/Security.framework/Versions/A/Security 0xffff0000 - 0xffff1fff libSystem.B.dylib ??? (???) <2DCD13E3-1BD1-6F25-119A-3863A3848B90> /usr/lib/libSystem.B.dylib Model: MacBookPro4,1, BootROM MBP41.00C1.B03, 2 processors, Intel Core 2 Duo, 2.4 GHz, 2 GB, SMC 1.27f3 Graphics: NVIDIA GeForce 8600M GT, GeForce 8600M GT, PCIe, 256 MB Memory Module: global_name AirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x8C), Broadcom BCM43xx 1.0 (5.10.131.42.4) Bluetooth: Version 2.4.5f3, 2 service, 19 devices, 1 incoming serial ports Network Service: AirPort, AirPort, en1 Serial ATA Device: FUJITSU MHY2200BH, 186.31 GB Parallel ATA Device: MATSHITADVD-R UJ-867 USB Device: Built-in iSight, 0x05ac (Apple Inc.), 0x8502, 0xfd400000 / 2 USB Device: BRCM2046 Hub, 0x0a5c (Broadcom Corp.), 0x4500, 0x1a100000 / 2 USB Device: Bluetooth USB Host Controller, 0x05ac (Apple Inc.), 0x820f, 0x1a110000 / 3 USB Device: Apple Internal Keyboard / Trackpad, 0x05ac (Apple Inc.), 0x0230, 0x5d200000 / 3 USB Device: IR Receiver, 0x05ac (Apple Inc.), 0x8242, 0x5d100000 / 2
2940	- it belongs to parameter-to-internal flags step, not parameter interactions phase
2939	- this also leads to soft-setting -upnp=0 when using Tor, which fixes #2927
2938	Seems it was forgotten about when IsPushOnly() and the unittests were written. A particular oddity is that OP_RESERVED doesnt count towards the >201 opcode limit unlike every other named opcode.
2937	New RPC "ping" command to request ping. Implemented "pong" message handler. New "pingtime" field in getpeerinfo, to provide results to user.
2935	Fixes #2934.
2934	This line in AcceptBlock can read past the end of scriptSig: if (!std::equal(expect.begin(), expect.end(), block.vtx[0].vin[0].scriptSig.begin())) A malicious block could potentially cause a node to access an invalid memory address, causing a crash. More subtly, a malicious block that omits the final byte of the block height could have a 1 in 256 chance of being accepted as valid if the garbage byte past the end of the scriptSig happens to have the right value. By sending the same block to a node repeatedly, it may be possible to get the node to accept the invalid block with high probability.
2933	
2932	- this allows to remove some URI related double processing of passed command-line arguments for Bitcoin-Qt and bitcoind by collecting a vector of URIs in ParseParameters() - rename ipcSendCommandLine() to ipcSendUris() to reflect we do not send the whole command-line, but just pre-filtered URIs - also just install an OSX-specific event filter in paymentserver on Mac - fCommandLine is also no longer a global in util, but a local variable in bitcoind.cpp
2931	
2930	- extend PaymentServer with setOptionsModel() and rework initNetManager() to make use of that - fix all other places in the code to use display unit from options and no hard-coded unit
2929	This simple patch gives user visibility to see the contents of the existing CNode::addrLocal member. No existing behavior is changed, this is read-only. If addrLocal is invalid (not filled in yet), the field will not be included in the output.
2928	Assuming no bugs, this pull request should present **zero behavior changes**. It presents equivalent transformations that eliminate a needless getblocktemplate dependency. Fixing this dependency is a blocker for no-wallet mode #2901 which will be rebased on top of this pull. Tests fine, hopefully quick to review and ACK.
2926	
2925	i need to change the data directory for bitcoin on my gnu/linux install (ubuntu 13.04) - i found this: and used the command provided. i see this error: bash: syntax error near unexpected token `-qt am i using the right syntax? thanks
2924	This change adds a Network Traffic tab to the debug window, containing total bytes in/out labels (formatted as KB, MB, GB) and a graph that shows sampled bytes per second in and out. The total time period covered by the graph is adjustable with a slider. ![snapshot2](https://f.cloud.github.com/assets/214252/1010300/24a85c1c-0b48-11e3-92c6-0ca5c0dffd3a.png)
2923	This exposes CNode::addrLocal to the user, formatted as a string, just like the existing "addr" field. I named it "peerlocal" instead of "addrlocal" to avoid breaking scripts that grep on the word "addr". Interestingly, the addrLocal structure isnt filled in properly in all cases (I have seen IPv6 nodes connect to my bitcoind but addrLocal contains only my IPv4 address), but at least this gives it exposure to aid in fixing this deeper bug that lies elsewhere in bitcoind.
2922	- update translation master files - include current translations from Transifex - add several new languages - fix a bug in bitcoin.qrc, which prevents some languages from beeing used (wrong file extension .ts instead of .qm was used)
2921	By the defer calculating sorted values we gaining speed on multiply numbers insert. google translate: using a deferred calculation, weve increased the speed of insertion of several numbers in succession
2920	Time of comparison proportional length of shorter argument. Less operations on cycle. (Removing weight % operation). google translate: The comparison is proportional to the shortest argument. Removed an expensive operation "modulo" of the cycle.
2919	This resulted in just passing all transactions to filtered wallets which worked surprisingly well, except where it didnt.
2918	Combined #2917 (removed internal miner and GBT wallet dependencies) with #2901 (no wallet)
2917	Built on top of #2905 (getwork removal), intended to complement #2901 (walletless node).
2916	
2915	Useful as a source of test vectors to anyone re-implementing bloom filters. For instance:
2914	This reduces a peers ability to attack network resources by using a full bloom filter, but without reducing the usability of bloom filters. It sets a default match everything filter for peers and it generalizes a prior optimization to cover more cases.
2913	Timestamps on the surrounding blocks are well-behaved, and block 250k is a nice, boring block.
2912	getblockhash 50000 000000001aeae195809d120b5d66a39c83eb48792e068f8ea1fea19d84a4278a -- getblock 000000001aeae195809d120b5d66a39c83eb48792e068f8ea1fea19d84a4278a { "hash" : "000000001aeae195809d120b5d66a39c83eb48792e068f8ea1fea19d84a4278a", *** "tx" : [ "27f1d66f8a1ee5280f4e92508dcb647e954d53004905d08a75574daee4988360" ]*** } -- getrawtransaction 27f1d66f8a1ee5280f4e92508dcb647e954d53004905d08a75574daee4988360 No information available about transaction (code -5)
2911	
2909	If you run bitcoind under the Ubuntu VMWare virtual machine - size of the virtual machines hard drive will be enormous large. How to reproduce: 1. Make a new VMWare virtual machine with Ubuntu (I used Ubuntu 12.10) 2. Install bitcoind, launch it as the server and daemon 3. Wait until the bitcoind will load all the blocks 4. Check via any linux tool how much space on the hard drive is used (about 10 Gb at all in my case) 5. Stop the virtual machine 6. Check via host machine tools how big is the folder with the Bitcoind virtual machine - it will be about 70-90 Gb!!! 7. VMware tools, that help to compact/defragment virtual machine hard drive cant help Ive never seen any software that has such specific bug. Something very strange
2908	This pull-request is now moot, and fork I did it in no longer exists. Anyone who has the necessary privileges: please delete it.
2907	This pull switches the src/leveldb/ directory to the code in the current bitcoin/leveldb repository (branch bitcoin-fork, using git-subtree), with a cleaned-up history. This removes some Ripple-specific changes that made it into our repository earlier.
2905	Use getblocktemplate instead.
2904	With an encrypted wallet the GUI was prompting for a passphrase every time the user requested a new address. This is unnecessary, increases the exposure to keyboard sniffers, and discourages using fresh addresses for every transaction. Instead only prompt for a passphrase when the keypool runs out, also call the new address function with the flag that prevents reuse.
2903	Specifically, the fact that the command relates to wallet transactions.
2902	Clickable links in main README Added some notes and mac instructions to /doc README Added Bitcoin API commands for quick developer reference.
2901	Goal: As one goal is to eventually separate wallet/GUI from public blockchain engine, it is useful to explore what such an engine would look like. As such, disablewallet=1 will enforce pwalletMain==NULL, or "no-wallet mode." Many RPCs are disabled. getblocktemplate does continue to work, permitting no-wallet mining.
2899	Left behind after the change to Markdown.
2898	Seems like they got left behind when everything was changed to markdown.
2897	Seems like some of the old files got left behind when they were change to markdown.
2895	
2894	Im able to change fee to non-zero, click apply, and use client normally... but the setting does not persist across restarts, defaulting back to (hardcoded?) zero.
2892	
2891	I used this code when debugging the OSX corruption issue. It just cleans up our leveldb error-detecting code a little bit.
2890	block.BuildMerkleTree(); is called twice for no reason. Just a few lines above its called the first time. We dont need to check for empty container here before the block.vMerkleTree.back() call, because block.vMerkleTree can not be empty at this point, because block.vtx.empty() has been checked before.
2888	This call is useful to mining pools and miners. It lets you get the estimated network hashrate at the current block (or any previous block) with a specified number of blocks to use to calculate the estimate.
2886	Fixes issue#2838; this is a tweaked version of pull#2845 that should not leak the length of the password and is more generic, in case we run into other situations where we need timing-attack-resistant comparisons.
2885	Replaces the validation check for "amount == 0" with an isDust check, so very small output amounts are caught before the wallet is unlocked, a transaction is created, etc.
2884	The length of vectors, maps, sets, etc are serialized using Write/ReadCompactSize -- which, unfortunately, do not use a unique encoding. So deserializing and then re-serializing a transaction (for example) can give you different bits than you started with. That doesnt cause any problems that we are aware of, but it is exactly the type of subtle mismatch that can lead to exploits. With this pull, reading a non-canonical CompactSize throws an exception, which means nodes will ignore tx or block or other messages that are not properly encoded. Please check my logic... but this change is safe with respect to causing a network split. Old clients that receive non-canonically-encoded transactions or blocks deserialize them into CTransaction/CBlock structures in memory, and then re-serialize them before relaying them to peers. And please check my logic with respect to causing a blockchain split: there are no CompactSize fields in the block header, so the block hash is always canonical. The merkle root in the block header is computed on a vector&lt;CTransaction&gt;, so any non-canonical encoding of the transactions in tx or block messages is erased as they are read into memory by old clients, and does not affect the block hash. And, as noted above, old clients re-serialize (with canonical encoding) tx and block messages before relaying to peers.
2883	
2882	
2881	- to match all other translatable strings in init.cpp and to simplify translations via Transifex
2880	Demonstrates the difference between OP_EQUAL and OP_NUMEQUAL.
2879	
2878	Hi there! What do you think about replacing all raster icons in /share/pixmaps with vertor SVG ones? Itd be easy to use them in the application with QtSvg, that Qt Framework contains out-of-the-box ;) That should fix all upscaling issues on big screen resolutions and decrease tarball size by using less icons (ther will be no need to duplicate it in different formats).
2877	Compiling and running the Qt unit tests wasnt convenient, because youd have to make clean if you were switching between compiling bitcoin-qt and bitcoin-qt_test, because they both compiled the same sources with different #defines into the build/ directory. This pull makes the Qt unit test build directory build_test, so the two different builds dont interact with each other.
2876	This is a potential fix for the bug that causes several miner nodes to crash a few days ago. The problem: when a block is disconnected, the transactions in it are attempted to be moved to the mempool; if some of these are non-standard, this will fail. If there were transactions in the mempool already that depended one or more of those, they become orphan transactions - which breaks the mempools consistency assumption. In addition, this pull request adds a CTxMempool::check() method which runs an extensive consistency check on the mempool, and is called from several places when -checkmempool is passed (a non-documented flag).
2875	- Now you can instantly remove a specified private key - No need to rescan for wallet transaction in case you use "importprivkey", just enter: importprivkey <bitcoinprivkey> [label] false and you would have your wallet ready again in 1 second - If wallet is encrypted, it would be necessary to use walletpassphrase in advance (as its same rule for importprivkey) - If watch-only pulls get merged, it would hopefully help to add sweep private key functionality (like Armory Bitcoin client)
2874	Should help to stop "correct horse" type tx. as say, it may be not a bug. Ill cancel the request if more core devs reject me...
2873	I figured we needed a convenient address export mechanism that doesnt require decrypting the wallet or knowing any private keys.
2872	WalletView: - add new signal showNormalIfMinimized() - emit the new signal in handleURI() to fix a bug, preventing the main window to show up when using bitcoin: URIs WalletStack: - connect the showNormalIfMinimized() signal from WalletView with the showNormalIfMinimized() slot in BitcoinGUI - rework setCurrentWallet() to return a bool - add check for valid walletModel in addWallet() - add missing gui attribute initialisation in constructor WalletFrame: - remove unused or unneded class attributes gui and clientModel - add a check for valid clientModel in setClientModel() General: - small code formatting changes
2871	Orphan transactions were stored as a CDataStream pointer; this changes the mapOrphanTransactions data structures to store orphans as a CTransaction. This also fixes CVE-2013-4627 by always re-serializing transactions before relaying them. And I cleaned up the "tx" message-handling code a little (it was re-using inv and tx variables, which is error-prone and confusing). Tested by running against the main network with max orphans set to eleven, to exercise the add/remove/map overflow code.
2870	As posted in It would be best if the transaction is dropped, or re-serialized before being stored in the cache.
2869	Hi, im running the release "version" : 80300, compiled from source from github on a ubuntu 12.04.x server After all the data was downloaded the memory usage sits at around 380megs .. any reason this is so high w/o anything going on yet.. ? I also posted this question on the bitcoin forms with screen shots..
2868	After these changes, all code in main.cpp is associated with maintenance of the public blockchain, with one notable exception: * callbacks such as EraseFromWallets(), SyncWithWallets(), PrintWallets(), ResendWalletTransactions() which call out from the public blockchain engine into the wallet code This change builds upon, and therefore includes and requires, req #2867.
2867	Mostly code movement, with a few bug fixes in a separate commit.
2866	Replace the loop macro with while (true). The #define caused problems for Qt.
2865	- seems the code tags in the original string cause errors, when using the Transifex site for translation
2864	This patch enables one to configure a whitelist of RPC commands that can be called for each allowed client IP. Lets look at the motivating use case for this feature. Consider a website that accepts bitcoin payments using the bitcoind API directly. The webserver and bitcoind are on separate servers. It is desirable that the webserver be able to call getnewaddress() and gettransaction (or listtransactions). It is highly undesirable (security risk) that the webserver be able to call any of the send* commands or stop command, or probably others, especially because the public-facing webserver is the most likely target to be attacked and possibly compromised. At this point, lets not get distracted with a discussion about using hot wallets vs cold storage vs 3rd party API. Instead suffice to say that the website has a need to do this, but desires to be as secure about it as possible. It is also possible to envision more complex scenarios with various client IPs, each with differering requirements / permissions, or all the same, as in a pool of frontend webservers. Okay, so -rpcipcmds to the rescue. Now the site administrator can configure bitcoind to only allow desired RPC calls from the webserver IP. Any other command results in "Method not allowed for client IP." json-rpc error. ./bitcoind --help | grep rpcip -rpcipcmds=<ip>,<cmd> Allow only specific commands from specified IP address. <ip>,<cmd1>,<cmd2>,<cmd3>... Example bitcoin.conf usage: rpcallowip=192.168.2.200 rpcipcmds=192.168.2.200,getnewaddress rpcipcmds=127.0.0.1,getnewaddress,sendtoaddress,getinfo,stop,help Implementation Notes: 1) If an IP is allowed with rpcallowip but does not have an rpcipcmds entry then all commands can be used. 2) WildCards in IP are accepted. 3) Works with single command invocation and also batch invocation. 4) For batch invocation, all commands are checked before any command is called. So all or nothing. 5) Some might find the syntax a little funky. I considered using &lt;ip&gt;:&lt;cmd&gt; format, one per line, but rejected it because it requires specifying the same IP over and over. The CSV format enables &lt;ip&gt;,&lt;cmd&gt;,&lt;cmd&gt;,&lt;cmd&gt;... per line and is easy to read/grok and to parse. So that was my thought process. 6) This is my first bitcoind modification effort, and my first ever github pull request. Also, I am not a networking expert, and my C++ is very rusty. It is likely something could have been done better, code or pull request does not meet standards, etc. If so, my apologies in advance. The patch meets my needs so far, and I felt I should contribute it in case it can benefit others. Feel free to re-work, re-write etc as necessary. 7) -rpcipcmds is kind of hard to read. I originally called it rpcallowipmethods. But that didnt format nicely with the other commands in the help. This does. Testing: * Has been briefly tested with both single and batch invocation from localhost as well as a remote IP. Tested with IPv4 addresses only. * I did not create a unit test for it. Maybe could test with localhost.... remote IP seems hard.
2863	
2860	I had an issue with my macbook pro and had to do a full reload from a timemachine backup. ever since bitcoin qt has been stuck right back at the beginning having processed 0 blocks. theres also the message Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade. Ive now upgraded to 0.8.3 but its still stuck there even though there are 10 active connections to the network. does anybody know what i can do to sort this out? thanks.
2859	Im using command-line arguments to supply parameters to bitcoin-qt.exe during startup and one of the arguments is ``-txindex``. Now when I start the client via clicking a bitcoin: URI (when the client is not running already), it will not pass ANY of my normal command-line arguments and just the URI, which leads (in this case) to the message that I need to reindex to change -txindex state, because of the missing ``-txindex``. I can think of other arguments leading to unwanted or strange behaviour. Any ideas how we could handle the "client is started via bitcoin: URI"?
2857	- remove an unneded include for mswsock.h as we use winsock2.h anyway - move typedef u_int SOCKET; into the #ifndef WIN32 part - remove typedef int socklen_t; as this is defined in ws2tcpip.h I hope pulltester is happy with this :).
2856	- remove an unneeded windows.h include (comes from allocators.h, which is included in crypter.h)
2855	
2854	listsinceblock always return zero transactions for recent blocks. This bug is critical for web services. Steps to reproduce: $ bitcoind getblockhash 248190 00000000000000448f3785854bcda4434e9f115b53f0fa8d377ac7c09af47007 $ bitcoind getblock 00000000000000448f3785854bcda4434e9f115b53f0fa8d377ac7c09af47007 "hash" : "00000000000000448f3785854bcda4434e9f115b53f0fa8d377ac7c09af47007", "confirmations" : 1, "size" : 102397, "height" : 248190, "version" : 2, "merkleroot" : "73fbda07f60b92b6cbeb4908e8af7a2e871ad4fcb75c04937d330544dfcbaa1c", "tx" : [ "6dafe311456554cd2b381229b89e34abb00c1c909e078ee4186d360af1c15c30", "3323f4a46984591704550b752c14307b1285f3019b6627793e56373edf3c0ef8", .... at this point we are sure that there is a lot of transactions in since previous block (248189) $ bitcoind getblockhash 248189 000000000000004cbc5f56e8684700aae0a81de7ea501b8be8d0302a0d144168 $ bitcoind listsinceblock 000000000000004cbc5f56e8684700aae0a81de7ea501b8be8d0302a0d144168 { "transactions" : [ !! EMPTY LIST !! ], "lastblock" : "000000000000005b96750e89499168fb0ca8bd6d0efdc858a9e3340eea2614aa" }
2852	Returns nChainWork from the block index, the total work done by all blocks since the genesis block. Worth exposing for pedagogical reasons at the very least. Anyone who tries to bikeshed either the name or the format the value is returned in will regret it - Im warning you.
2851	See
2850	- it was possible to trigger an infinite loop in FreespaceChecker::check() by simply removing the drive letter on Windows (which leads to an infinite loop in the FreespaceChecker thread) - this was caused by not checking if we make progress with parentDir.parent_path()
2849	IF ELSE ELSE ENDIF is a valid construct; execution or non-execution inverts on each ELSE encountered.
2848	
2847	- move all QApplication includes to top of included Qt headers - undef our loop macro where it would cause compilation errors otherwise
2845	As per #2838 . Eliminates the possibility of timing attacks by changing the way the two passwords are compared. It iterates through each char in the strings, and if the two chars it is comparing arent the same, then it adds 1 to nReturn and the function, once its done comparing all the chars, will return false. Previously, the function would return false on the first char that didnt match, allowing a possible attacker to run a timing attack. See for reference.
2843	Can someone verify, if the internal miner is still generating blocks on testnet3 with current master? I seem to not be able to generate any new blocks currently. I know you were using it quite often, can you report?
2842	
2840	SendMessages() tries to acquire a cs_main lock now, but this isnt nessecary for much of its functionality. Move those parts out of the if condition.
2838	`bitcoinrpc.cpp` ```c++ bool HTTPAuthorized(map<string, string>& mapHeaders) { string strAuth = mapHeaders["authorization"]; if (strAuth.substr(0,6) != "Basic ") return false; string strUserPass64 = strAuth.substr(6); boost::trim(strUserPass64); string strUserPass = DecodeBase64(strUserPass64); return strUserPass == strRPCUserColonPass; } ``` Last string comparision `strUserPass == strRPCUserColonPass` gets compiled to: ``` do { if ( !len ) break; less = *(_BYTE *)strUserPass < *(_BYTE *)strRPCUserColonPass; eq = *(_BYTE *)strUserPass++ == *(_BYTE *)strRPCUserColonPass++; --len; } while ( eq ); ``` which is a byte-by-byte compare. Attacker with precise clock (being in the same LAN, for example) might learn the RPC password letter by letter, by trying passwords like a...", "b...", "c..." and observing which took the longest time to verify. This code in `bitcoinrpc.cpp`: ```c++ if (mapArgs["-rpcpassword"].size() < 20) MilliSleep(250); ``` protects from bruteforce for short password. Unfortunately, when run, bitcoind suggest a 32 chars password. Paradoxically short passwords are safer to use than longer ones, wrt to the timing leak. Heres an example of time independent array comparison:
2837	- move SelectParamsFromCommandLine() from init.cpp to bitcoin.cpp to allow to use TestNet() for Bitcoin-Qt instead of GetBoolArg("-testnet", false) - change order in bitcoind.cpp to match bitcoin.cpp functionality - hamonize error message strings for missing datadir and failing SelectParamsFromCommandLine() in bitcoin.cpp and bitcoind.cpp - use TestNet() call in splashscreen.cpp
2836	See also: (There might still be room for a small improvement in building speed here using --build-type=minimal )
2835	Using -mt-1_52 instead of -mt-s-1_52 as it can be compiled with the --build-type=minimal boost option saving space and time.
2832	
2831	Im using v0.8.3 and issuing the backupwallet command via the QT GU works, but that performs a local backup. Using the JSON-RPC to a bitcoind server via 127.0.0.1 or remote IP always causes the server to return 500 Internal Server Error, additionally it does not return any JSON error codes as per bitcoin/bitcoin#1908 This is a documented function and I would it expect the path or path/filename to refer to a filespec on the remote server when using the RPC interface. Its critical tp me to be able to backup your wallet via RPC.
2830	Some currently missing features like decoding a script and adding a specific P2SH redeemScript to the wallet.
2829	This does not add actual deterministic wallet functionality yet, only an implementation of BIP32 derivation and its test vectors. Im usually not in favor of adding code that isnt used yet, but in this case it may be useful to give a "reference implementation" exposure.
2828	Using a shared lock for wallet registration functions since only functions that modify the setpwalletRegistered container structure itself (and not the contents) need exclusive access.
2827	- move the code for saving and restoring window positions from BitcoinGUI to GUIUtil, make it more generic and also use it for saving/restoring debug window positions We also could allow this for all other dialogs, if we want, but that is currently not the goal of this pull.
2826	- fixes src\net.cpp:1601: Error:invalid conversion from void* to const char* [-fpermissive] in a setsockopt() call on Win32 that was found by using MinGW 4.8.1 compiler suite See to verify that Win32 needs a ``const char *``.
2825	The key refactor changed the way unencrypted private keys with compressed public key are stored in the wallet. Apparently older versions relied on this to verify the correctness of stored keys. Note that earlier pre-release versions do risk creating wallets that can not be opened by 0.8.3 and earlier.
2824	I have found this usefull when I have to import keys with pywallet for example.
2823	Not sure how this got onto the bitcoin github and Im not sure how to delete this... sorry!
2822	Just an idea, why not always switch to a node that announces more blocks than the current syncnode, if we are up-to-date with the current syncnode?
2820	Removes readme-qt.rst in favour of readme-qt.md Update build-***.md to point to the new readme file
2818	Ive been gitian-building lately, and from conversation in #bitcoin-dev on freenode it sounded like people doing that should be listed here. I understand if Im not well-known enough to be included. If you dont want to include this, thats fine with me. In addition, if youd like more verification or confirmation of who I am, Im willing to provide information about my identity to the core dev team upon request. As I realize Im not as well-known as the other users on the list, Ive weighted myself lower as well.
2817	This is a recreation of on a separate branch rather than master.
2816	I was involved in Gitian verification of 0.8.2 and 0.8.3. I frequently do gitian builds for Litecoin, and I am thinking about designing a better procedure for getting a lot more people involved in regular gitian verification. Meanwhile here is my key to be able to participate in the existing release procedure. I ported Gitian to Fedora and it has been working perfectly. My GPG key is signed by my old GPG key which is fairly well connected in the FOSS world.
2815	
2814	Calculates total uncommitted fees and transaction size required to include the transaction in a block for all transactions in the mempool. Cost is O(1) for mempool.accept() and limited to O(n) when a new block changes what transactions are in the mempool, either due to them being mined, conflicts, or reinstated by a re-org. I havent changed the mining code, and dont keep track of sigops yet. This isnt useful without mining code and mempool expiration so its not ready to be actually pulled yet. (mainly I want to see what the pulltester thinks) Note that this is a safe implementation, not a 100% accurate one, for reasons mentioned in CMemPoolTx::calcPrioritySums() In addition the memoized approach cant directly handle the case where a transaction with a lot of outputs is made worthwhile to mine because of multiple children.
2813	On Mac OS X 10.8.4 with an intel core i7 and 16GB RAM it takes almost constantly 70% CPU during first/initial synchronisation - total sync time about 16h. Konsole log repeats "Misbehaving" ----------------------------- Misbehaving: [IP ADDRESS]:8333 (0 -> 0) stored orphan tx (mapsz 569) received block ERROR: ProcessBlock() : already have block
2812	This information is available via roundabout methods*, but not directly. * gettxoutsetinfo or getblockcount->getblockhash
2810	Theres a few minor style issues with the GUI as it currently stands. * Only the actions which impact a file should have an ellipsis (...) at the end. Backup Wallet for example should have them, every other option should have theirs removed. * Every menu item should have all words capitalized. At the moment "Sign message" and others arent following this, while some are. * The naming of the Options panel is inconsistent on OSX. In the menu it is called "Preferences", and in the title it is called "Options". To fit with the other OS builds, I suggest that the title of the window is renamed to "Preferences", but only on OSX. I would have submitted a pull with the menu modifications myself, but "Verify Message" doesnt seem to have an entry in the localization files, and Im not sure why this is.
2809	
2808	Otherwise, git will happily seek to find a git directory at higher levels.
2807	- updates bitcoin_ja.ts
2806	Im using homebrew to install bitcoind on OS X. On 10.8 it worked fine, but on 10.9 beta it doesnt - I get a compiler error. I *think* its because on 10.9 Apple exclusively switched away from GNU gcc in favor of clang, and also opted out of stdlibc++ in favor of its own libc++ implementation. The error and homebrew log are as follows: ```In file included from alert.cpp:11: In file included from /private/tmp/bitcoind-FMyT/src/alert.h:13: In file included from /private/tmp/bitcoind-FMyT/src/util.h:31: In file included from /private/tmp/bitcoind-FMyT/src/netbase.h:10: /private/tmp/bitcoind-FMyT/src/serialize.h:911:10: error: class member cannot be redeclared void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const... ^ /private/tmp/bitcoind-FMyT/src/serialize.h:898:10: note: previous declaration is here void insert(iterator it, const_iterator first, const_iterator last) ^ /private/tmp/bitcoind-FMyT/src/serialize.h:911:10: error: redefinition of insert void insert(iterator it, std::vector<char>::const_iterator first, std::vector<char>::const... ^ /private/tmp/bitcoind-FMyT/src/serialize.h:898:10: note: previous definition is here void insert(iterator it, const_iterator first, const_iterator last) ^ 2 errors generated. make: *** [obj/alert.o] Error 1 ==> Formula Tap: wysenynja/bitcoin Path: /usr/local/Library/Taps/wysenynja-bitcoin/bitcoind.rb ==> Configuration HOMEBREW_VERSION: 0.9.4 HEAD: f9223a5bac46749558bd4c9a6df8c06d929b846b CPU: quad-core 64-bit ivybridge OS X: 10.9-x86_64 Xcode: 5.0 => /Library/Developer/CommandLineTools X11: N/A ==> ENV HOMEBREW_CC: clang MAKEFLAGS: -j1 CMAKE_PREFIX_PATH: /usr/local/opt/berkeley-db4:/usr/local CMAKE_INCLUDE_PATH: /usr/include/libxml2:/System/Library/Frameworks/Python.framework/Versions/2.7/Headers CMAKE_LIBRARY_PATH: /System/Library/Frameworks/OpenGL.framework/Versions/Current/Libraries PKG_CONFIG_PATH: /System/Library/Frameworks/Python.framework/Versions/2.7/lib/pkgconfig PKG_CONFIG_LIBDIR: /usr/lib/pkgconfig:/usr/local/Library/ENV/pkgconfig/10.9 HOMEBREW_MAKE_JOBS: 1 ACLOCAL_PATH: /usr/local/share/aclocal OBJC: cc PATH: /usr/local/Library/ENV/4.3:/usr/local/opt/berkeley-db4/bin:/usr/bin:/bin:/usr/sbin:/sbin``` And here is another error that I get when I "fix" previous one by just deleting one of the offending constructors: ```In file included from rpcdump.cpp:5: In file included from /Library/Developer/CommandLineTools/usr/bin/../lib/c++/v1/iostream:38: In file included from /Library/Developer/CommandLineTools/usr/bin/../lib/c++/v1/ios:216: /Library/Developer/CommandLineTools/usr/bin/../lib/c++/v1/__locale:144:29: error: cannot initialize a parameter of type std::__1::locale::facet * with an lvalue of type const boost::date_time::time_input_facet<boost::posix_time::ptime, char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > > * __install_ctor(__other, __f, __f ? __f->id.__get() : 0); ^~~ rpcdump.cpp:32:23: note: in instantiation of function template specialization std::__1::locale::locale<const boost::date_time::time_input_facet<boost::posix_time::ptime, char, std::__1::istreambuf_iterator<char, std::__1::char_traits<char> > > > requested here const std::locale loc(std::locale::classic(), &facet); ^ /Library/Developer/CommandLineTools/usr/bin/../lib/c++/v1/__locale:96:46: note: passing argument to parameter here void __install_ctor(const locale&, facet*, long);``` Does anyone have an idea how this can be fixed? I can provide more information if necessary.
2805	Changes since Round 1: - Rebased on current master - Moved configure to root srcdir, and added a Makefile there - Split into several Makefile.ams with recursive build [1] - Work towards building correctly under gitian - Fixed/verified several build scenarios - Fixed up make dist to work as a viable end-result packaging mechanism [2] 1. Personally I believe that splitting up the build is a major regression from RFC1. This was done by request here. Most projects end up spending lots of time moving in the opposite direction, as a recursive build tends to be slower, more complicated, and more-error prone. That proves to be the case here as well, but Ive attempted to handle it as gracefully as possible. 2. make dist can be used to produce a bootstrapped tarball with git information included, intended for distribution as an official source release. This is the equivalent of taking a fresh git clone, running ./autogen.sh, and taring up the result. This is the common procedure for autotools projects. At this point I consider it to be merge-ready, with the exception of verification of gitian descriptors and documentation. Presumably removal of the old makefile.* would coincide with updated documentation. Several things can be improved and cleaned up after merge (dealing with versioning, for example), but Ive tried to ignore these things as much as possible for the sake of a quick merge. Edit: Removed crazy markup that looked like yelling -- sorry. -- Here is the second go at an Autotools build system replacement. It is meant to be a drop-in replacement for the current system(s), providing the same features with no net changes. It can also live side-by-side with the old system while sharing the same build-related variables in order to facilitate a smooth transition. I hope the benefits are obvious enough: A single/shared build procedure, portability, ease of packaging, ease for downstreams, ease for repository maintainers, cross-compilation, etc. I dont vouch for Autotools in any way, in fact, this configure.am is downright ugly (mainly just because of mingw though), but its portable and well-established. Ive opted not to write the documentation yet, because I would like to see what comments/concerns come out of the first round of review before committing to anything. This does away with the need for qmake, as the Makefile is capable of generating everything it needs in a portable way. Qt-creator can be used with the Autotools plugin, and is working nicely. For those who wish to use it this way, install the Autotools plugin from the about menu, then open Makefile.am as a project. It handles the build procedure, so there is no need to mess with the command-line procedures listed below. Building from CLI: For Linux, assuming the dependencies have been met, the build procedure looks like this: ``` ./autogen.sh ./configure make ``` Same for OS X, but the pkg-config path needs to be hooked up from macports first: ``` echo "/opt/local/share/aclocal" | sudo tee -a /usr/share/aclocal/dirlist ``` For mingw its the same, but you will need to provide lots of paths in the form of: ``` ./autogen.sh CPPFLAGS="-I/path/to/include -I/path/to/other/include" LDFLAGS="-L/path/to/libs -L/path/to/other/libs" ./configure make ``` In addition, there are helpers for qt and boost to help with finding some locations. Use ./configure --help to see the available options. Native windows built is untested, as I dont have a windows environment at my disposal. Gitian should be working for win32 builds. Ive guessed at Linux but have not yet verified. make check will run the unit tests and print the results. Ive done my best to avoid adding any new behavior or features, and I would much prefer to aim for feature-parity before making any improvements. TODO: - Verify gitian descriptors. - Add documentation
2804	As git provides a way to export a tarball given a commit, its very easy to add the creation of source releases, IMHO. We very much like people to build from git tags, but apparently this is hard or at least inconvenient for some infrastructure out there. I hope the overhead is minimal enough for those doing the release... This also disables the use of git-describe in exported source archives, as it results in a spurious error otherwise. I hope this closes #2476.
2803	How did this ever work?
2802	Changes: * Maintain a salt to perturbate the address index (protection against collisions). * Add support for address index entries in the block index, and maintain those if -addrindex is specified. It indexes the use of every >8-byte data push in output script or consumed script - or in case of no such push, the entire script. * Add a searchrawtransactions RPC call, which can look up raw transactions by address. I both hate and love this patch. I hate making it easy to build infrastructure that relies on a fully-indexed blockchain (which shouldnt be necessary), as it may remove the incentive to build more scalable solutions. On the other hand, in cases where the alternative is relying on a trusted third party, this approach is certainly preferable, and would allow an RPC-based blockexplorer, for example. A full -txindex=1 -addrindex=1 index is about 2.7 GiB now.
2801	Two fixes: clicking on bitcoin: URI links wasnt working for me on Ubuntu 12.04, I think it was broken for anybody with a Gnome-based window manager. And I added a README to contrib/debian, documenting how to manually install the .desktop file for people who compile themselves but still want to be able to click on bitcoin: links.
2799	Usage: $bitcoind -memtxnotify="/tmp/memtxnotify.sh %s" ``cat /tmp/memtxnotify.sh``: #!/bin/bash F=/tmp/mempool_transaction_log D=`date +"%Y-%m-%d %H:%M:%S"` echo ${D} - ${1} >> ${F} ``tailf /tmp/mempool_transaction_log``: 2013-06-27 01:38:44 - c5c4a2bf7a44c9c4b39ae22042da6b86cbcada35f7b2fff864d9a114c65d9b94 2013-06-27 01:38:45 - 6cc77917dfc90c518ad5aa188967ba6d04becca4f5d6f633b4afe754d8b3e21d 2013-06-27 01:38:46 - 1fbea7b1773a9efc9f3b06e90773d159083218e256d1d9edf11669048e1f8088 2013-06-27 01:38:49 - 99321b4748cac1f7612b9546eba01bf5fe28e8617aa3fa23487eb122759076a8 2013-06-27 01:38:50 - 1bb1b3881d18cd674e5023a67b6c0757a587d45eb6973454852f7e295efacf92 2013-06-27 01:39:01 - 64e3fee386ca632e97a0ce55ea58711bb73054cc0c4e6cd41fe9f6fbfbcf262b 2013-06-27 01:39:02 - 84152de18356948583917ed2a36644cfff08c0df65b8f7add4e60efe8c1a1580 2013-06-27 01:39:02 - 45fd501203fc4bd6f5df99ab054a8080fcd2b9acaafb05d9007a8db1b715cdea 2013-06-27 01:39:03 - 659058f7f41e6315a780c48dc8d0d31c697c4b3b14d64de947c6a49ee33954a1 2013-06-27 01:39:04 - 7ac0c0ea12171ee782d98a7d545573e1659d72864ac8dc7a85ce02e35544d896 2013-06-27 01:39:11 - 5817219e8cc418c366e402a89d70dd8878455258c28b3782be8544fe78f1ff72 2013-06-27 01:39:12 - ad03c04b56438655339a65c2f9e20106f9e7c1a991c66d8fbc933a275a84fdd1
2798	The process outlined in the current release-process.md uses pushd and popd, to dip into and return from directories. It starts in the directory that contains the gitian-builder, gitian.sigs, and bitcoin directories. It then changes directory to the gitian-builder directory, builds, puts the signature into gitian.sigs, and the build outputs zipped up in the gitian-builder directory. Then, it repackages the builds into stand-alone files, still within gitian-builder. Once thats done, the time comes to commit the signatures and then, once enough people have signed, to repackage the gitian zips. At this point, the document appears to assume youre already back in the initial directory, the one with the gitian zips (which are actually in gitian-builder), gitian.sigs and bitcoin directories. This edit addresses these issues, by putting the gitian zips in that top directory, and using that directory as the base camp, so to speak, from which the various directories are dipped into and returned from throughout the process.
2797	Motivation: There already exists a method for dumping private keys in wallet by address. In order to construct multisig addresses the full public keys are needed but the private keys are not. So it is useful to have a way of exporting full public keys from a wallet.
2796	This avoids spurious errors with the old tests but still tests enough that if the rng is replaced with a totally broken one it should still fail.
2795	Log when a shutdown has occurred because of an aborted database rebuild.
2794	Were currently on 1.9 Most of the bugs are not consequential. One of them fixes file descriptor exhaustion which I think we already worked around with our own settings overrides. Another fixes an issue where calling CompactRange() manually could result in data being undeleted, which would obviously be a critical security issue if we ever did that. So better to upgrade than accidentally introduce a hole in future by having someone add a CompactRange() call.
2793	- updates bitcoinstrings.cpp and bitcoin_en.ts so new translations can be made on Transifex
2792	Code move only - no semantics changes.
2791	Automatically prune outputs (at creation) which are provably unspendable.
2789	
2788	- move SelectParamsFromCommandLine() from init.cpp to bitcoin.cpp to allow to use TestNet() for Bitcoin-Qt instead of GetBoolArg("-testnet", false) Does this still work for bitcoind, whose check resides in bitcoind.cpp AFAIK?
2787	- add missing chainparams.o to some makefiles - remove a double-include of chainparams.h in init.cpp
2786	Noticed by Diapolo.
2783	In case no database exists yet, and -txindex(=1) is passed, we currently first check whether fTxIndex differs from -txindex (and ask the user to reindex in that case), and only afterwards initialize the database. By swapping these around (the initialization is a no-op in case the database already exists), we allow it to be born in txindex mode, without warning. That also means we dont need to check -reindex anymore, as the wiping/reinit of the databases happens before checking. Closes #2782. Tested all 8 combinations of the database already existing or not, -reindex passed or not, -txindex set or not.
2782	When the client is started without database, but with txindex=1 set, it exits, telling that you need to reindex to change the value of that flag. That warning shouldnt need to be shown when initializing a fresh database. Caused by #2648, I assume.
2781	Refactor keytime: * Key metadata is kept in a CWallet::mapKeyMetadata (std::map< CKeyID, CKeyMetadata>). * When generating a new key, time is put in that map, and new key is written. * AddKeyPubKey and AddCryptedKey do not take a creation time argument, but instead pull it from that map, if it exists there. Bugfix: * AddKeyPubKey and AddCryptedKey in CWallet didnt override the CKeyStore definition anymore. This is fixed, as they no longed need the nCreationTime argument now. Also a few related other changes: * Metadata can be overwritten. * Only GenerateNewKey calls GetTime(), as its the only place where we know for sure a key was not constructed earlier. * When the nTimeFirstKey is known to be inaccurate, it is set to the value 1 (instead of 0, which would mean unknown). * Use CPubKey instead of std::vector< unsigned char> where possible. Fixes #2779 and #2780
2780	Fresh build, fresh wallet, import a key with `./bitcoind importprivkey ....` and next call to `./bitcoind getnewaddress` fails with `error: {"code":-1,"message":"ReserveKeyFromKeyPool() : unknown key in key pool"}` Client version is v0.8.2-111-gd9ff1cd-beta
2779	Fresh build of bitcoind, fresh wallet. - ran `./bitcoind encryptwallet ......` - restarted bitcoind - ran `./bitcoind walletpassphrase ....` - received `error: {"code":-15,"message":"Error: running with an unencrypted wallet, but walletpassphrase was called."}` Also can `dumpprivkey` without unlocking the wallet.
2778	Should be useful when trying to detect online corruption.
2776	Users are now permitted to increase the keypool size at runtime. Ideally they will update their config and restart, but that is not always feasible. This enables the admin to login, refill the keypool to handle heavy traffic needs immediately, without downtime. However, the keypool target size returns to its configuration-specified value at restart, as expected.
2775	Polish translation fixes
2774	This only causes issues for values >= 0xfd that are represented using multiple bytes. I encountered it while serializing multisig transactions that has large scriptSig (it works fine with regular transactions, since they usually dont have >= 0xfd values). I attempted to reverse it myself, but it didnt work well - seems like some parts of the code expects it to return big endian?
2772	to reproduce: #> rm ~/.bitcoin/wallet.dat #> bitcoin-qt expected: speedy startup experienced: extremely slow startup due to a wallet rescan taking place commentary: the probability of a newly generated privkey hitting an existing address is exteremely low and the repercussions are tragic anyway, so a rescan in this case should be avoided.
2771	Continuing the work I did in 2341e9b. Trying to make the docs actually readable, and then try to improve upon them. Everything is now in markdown.
2769	This breaks the mempool, causes an assert(false) in -debug mode and can cause SEGFAULT in non-debug mode
2768	Recent changes to the osx makefile means that the patch no longer applies cleanly. This pull updates the patch by adding the missing line.
2767	... of avoiding unnecessary header includes. Additionally alphabetizes and groups includes and forward declarations. Note: there are a large amount of changes that have been rebased onto the most recent master. I did my best to ensure that no code was functionally changed; however, a code review of all my changes would be advised. ### Theory By using [forward declarations](http://en.wikipedia.org/wiki/Forward_declaration), compilation speed can be increased in both incremental and full builds. Forward declarations suffice over having the full declaration in cases where the type that is being forward declared is only used as a reference or being pointed to, and the usage is not an [lvalue](http://en.wikipedia.org/wiki/Value_%28computer_science%29). By making these modifications, the total number of header files needed to compile any .cpp file is reduced. Fewer header files being included reduces the total amount of code that needs to be compiled for each .cpp file. ### Quantitative Results How much time does this actually account for? For bitcoind: ![Bitcoind Results](http://i.imgur.com/KNDcgBS.png) [This](https://docs.google.com/spreadsheet/ccc?key=0AnpjY4_hVstbdHllazg4MG80V1UtUTVqM0hfTUE3bEE&usp=sharing) spreadsheet shows detailed results for each of the different builds (note that there are multiple sheets in the spreadsheet), along with the interesting stats and graph for each. This data was generated automatically via the scripts [here](https://gist.github.com/brandondahler/5771108). ### Method * Go through each file, group each #include by type (see Order) and sort alphabetically * Using [doxygen](http://www.stack.nl/~dimitri/doxygen/) with the [graphviz dots](http://www.graphviz.org/) extension * Go through each header, comment each #include individually and all headers that indirectly include the commented one * See if it can build with the #include commented, analyze errors to understand if they can actually be solved with forward declares * Remove, keep, or add a direct header to the required type, as needed. ### Order Most Generic // License text as first // lines #if defined(HAVE_CONFIG_H) #include "bitcoin-config.h" #endif #include "matching_file.h" #include "local_file1.h" #include "local_file2.h" #include "file_in_other_dir1.h" #include "file_in_other_dir2.h" #include <system1.h> #include <system2.h> #ifdef SOMETHING1 #include <system3.h> #endif #include "json/a_file.h" #include <library1.h> #include <library2.h> #ifdef SOMETHING2 #include <library3.h> #endif class ForwardDeclare1; class ForwardDeclare2; namespace SomeNamespace { class ForwardDeclare3; } ... Example1 - No matching file, no file_in_other_dir, no ifdefs // License text as first // lines #include "local_file1.h" #include "local_file2.h" #include <system1.h> #include <system2.h> #include "json/a_file.h" #include <library1.h> #include <library2.h> class ForwardDeclare1; class ForwardDeclare2; ...
2766	See commits for explanation. Busted boost release, this works around it. This affected fedora 18, and probably Ubuntu Quantal as well.
2765	This commit allows to build the leveldb on Debian GNU/kFreeBSD port. See for the info about the port
2764	Since, Im failing to upload an image via the GitHub system, Im linking to an external screenshot: Bitcoin: v0.8.1-beta Qt: 4.8.3 Ive reported a different kind of "assertion failed" error some months earlier, but this one seems unrelated. It occurred once, upon starting Bitcoin-Qt in a Windows 7 environment. It has not reccurred since. Upon restarting, all appeared to work fine, and still does.
2763	bitcoind parses but does not send tx relay flag in the version message, see I believe the correct value to send is true, since bitcoind does not expect filter sets and wants to receive inv right after start.
2762	This would make the process of choosing a chain more democratic, and make resolving a chain split under an attack much quicker and easier to resolve. Im not sure if theres a flaw to this idea or not. .
2761	- Able to set a hard limit on the amount of confirmations needed (Unsafe but consistent.) - Able to set a limit above or below the recommended amount of confirmations needed by a certain amount. - Able to set a minimum confirmations needed, but also follow recommended amount. - Adjust the amount of confirmations on the client for a transaction to be considered safe. Im not sure if most of this should be implemented through an API or not, but I think suggesting a recommended confirmation amount can be useful in the event of an attack, to avoid double spending. As for detecting a possible attack, Im not very sure. Perhaps monitor the hash rate for abnormal rises. Or use the same detection as Gavin suggested: Something like "ignore a longer chain orphaning the current best chain if the sum(priorities of transactions included in new chain) is much less than sum(priorities of transactions in the part of the current best chain that would be orphaned)" would mean a 51% attacker would have to have both lots of hashing power AND lots of old, high-priority bitcoins to keep up a transaction-denial-of-service attack. And theyd pretty quickly run out of old, high-priority bitcoins and would be forced to either include other peoples transactions or have their chain rejected.
2760	such a comment should not contain false information
2759	spits out annoying compiler warnings all over the place
2758	This pull request is the completion of #2154. The original intention was to also move CBlock into core.h but was postponed in the interest of merging what had already been done.
2756	
2755	I tried both the latest beta version 0.8.2 and the previous version 0.8.1 (which was the first version to cause this error on this computer) Dump of the error is below: Process: Bitcoin-Qt [14946] Path: /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Identifier: org.bitcoinfoundation.Bitcoin-Qt Version: 0.8.2 (0.8.2) Code Type: X86 (Native) Parent Process: launchd [267] Date/Time: 2013-06-08 16:51:20.616 -0500 OS Version: Mac OS X 10.7.5 (11G63) Report Version: 9 Interval Since Last Report: 440458 sec Crashes Since Last Report: 9 Per-App Interval Since Last Report: 71 sec Per-App Crashes Since Last Report: 6 Anonymous UUID: 2F27E0A6-47FE-439C-AD1F-A722822BAD0E Crashed Thread: 0 Dispatch queue: com.apple.main-thread Exception Type: EXC_BAD_ACCESS (SIGBUS) Exception Codes: KERN_PROTECTION_FAILURE at 0x000000000000006c VM Regions Near 0x6c: --> __PAGEZERO 0000000000000000-0000000000001000 [ 4K] ---/--- SM=NUL /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt __TEXT 0000000000001000-00000000005f8000 [ 6108K] r-x/rwx SM=COW /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Application Specific Information: objc[14946]: garbage collection is OFF Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0 org.bitcoinfoundation.Bitcoin-Qt 0x000c291a _ZL17InvalidChainFoundP11CBlockIndex + 922 1 org.bitcoinfoundation.Bitcoin-Qt 0x000d36d9 ConnectBestBlock(CValidationState&) + 1273 2 org.bitcoinfoundation.Bitcoin-Qt 0x00125578 AppInit2(boost::thread_group&) + 22744 3 org.bitcoinfoundation.Bitcoin-Qt 0x00022870 main + 7504 4 org.bitcoinfoundation.Bitcoin-Qt 0x0001fb41 start + 53 Thread 1:: Dispatch queue: com.apple.libdispatch-manager 0 libsystem_kernel.dylib 0x9ce8b90a kevent + 10 1 libdispatch.dylib 0x90007e04 _dispatch_mgr_invoke + 969 2 libdispatch.dylib 0x90006853 _dispatch_mgr_thread + 53 Thread 2: 0 libsystem_kernel.dylib 0x9ce8b02e __workq_kernreturn + 10 1 libsystem_c.dylib 0x96252ccf _pthread_wqthread + 773 2 libsystem_c.dylib 0x962546fe start_wqthread + 30 Thread 3: 0 libsystem_kernel.dylib 0x9ce8b02e __workq_kernreturn + 10 1 libsystem_c.dylib 0x96252ccf _pthread_wqthread + 773 2 libsystem_c.dylib 0x962546fe start_wqthread + 30 Thread 4:: com.apple.CFSocket.private 0 libsystem_kernel.dylib 0x9ce8ab42 __select + 10 1 com.apple.CoreFoundation 0x96c9ae15 __CFSocketManager + 1557 2 libsystem_c.dylib 0x96250ed9 _pthread_start + 335 3 libsystem_c.dylib 0x962546de thread_start + 34 Thread 5: 0 libsystem_kernel.dylib 0x9ce8ab42 __select + 10 1 QtCore 0x019fea90 qt_safe_select(int, fd_set*, fd_set*, fd_set*, timeval const*) + 320 2 QtCore 0x01a02dda QEventDispatcherUNIXPrivate::doSelect(QFlags<QEventLoop::ProcessEventsFlag>, timeval*) + 394 3 QtCore 0x01a0326f QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 175 4 QtCore 0x019cc471 QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 65 5 QtCore 0x019cc84a QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 314 6 QtCore 0x018aaa45 QThread::exec() + 261 7 QtCore 0x018ae0d3 QThread::terminate() + 787 8 libsystem_c.dylib 0x96250ed9 _pthread_start + 335 9 libsystem_c.dylib 0x962546de thread_start + 34 Thread 6: 0 libsystem_kernel.dylib 0x9ce8a83e __psynch_cvwait + 10 1 libsystem_c.dylib 0x96254e21 _pthread_cond_wait + 827 2 libsystem_c.dylib 0x9620542c pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000af392 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011227d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c54c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00ce7845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x96250ed9 _pthread_start + 335 8 libsystem_c.dylib 0x962546de thread_start + 34 Thread 7: 0 libsystem_kernel.dylib 0x9ce8a83e __psynch_cvwait + 10 1 libsystem_c.dylib 0x96254e21 _pthread_cond_wait + 827 2 libsystem_c.dylib 0x9620542c pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000af392 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011227d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c54c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00ce7845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x96250ed9 _pthread_start + 335 8 libsystem_c.dylib 0x962546de thread_start + 34 Thread 8: 0 libsystem_kernel.dylib 0x9ce8a83e __psynch_cvwait + 10 1 libsystem_c.dylib 0x96254e21 _pthread_cond_wait + 827 2 libsystem_c.dylib 0x9620542c pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x000af392 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 354 4 org.bitcoinfoundation.Bitcoin-Qt 0x0011227d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 org.bitcoinfoundation.Bitcoin-Qt 0x000c54c3 ThreadScriptCheck() + 67 6 libboost_thread-mt.dylib 0x00ce7845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x96250ed9 _pthread_start + 335 8 libsystem_c.dylib 0x962546de thread_start + 34 Thread 9: 0 libsystem_kernel.dylib 0x9ce8a83e __psynch_cvwait + 10 1 libsystem_c.dylib 0x96254e21 _pthread_cond_wait + 827 2 libsystem_c.dylib 0x9620542c pthread_cond_wait$UNIX2003 + 71 3 org.bitcoinfoundation.Bitcoin-Qt 0x0030952f leveldb::(anonymous namespace)::PosixEnv::BGThreadWrapper(void*) + 79 4 libsystem_c.dylib 0x96250ed9 _pthread_start + 335 5 libsystem_c.dylib 0x962546de thread_start + 34 Thread 0 crashed with X86 Thread State (32-bit): eax: 0x00000000 ebx: 0x000c2591 ecx: 0x006e4380 edx: 0x00078b50 edi: 0xbfffe874 esi: 0xbfffe704 ebp: 0xbfffe958 esp: 0xbfffe550 ss: 0x0000001f efl: 0x00210282 eip: 0x000c291a cs: 0x00000017 ds: 0x0000001f es: 0x0000001f fs: 0x00000000 gs: 0x00000037 cr2: 0x0000006c Logical CPU: 2 Binary Images: 0x1000 - 0x5f7ff3 +org.bitcoinfoundation.Bitcoin-Qt (0.8.2 - 0.8.2) <56552176-2E18-ABCB-AB7E-383AB448B5CF> /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt 0x891000 - 0x896fe7 +libqrencode.3.dylib (5.1.0 - compatibility 5.0.0) <9627FE72-1198-798B-1841-A64F967F32FB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libqrencode.3.dylib 0x89a000 - 0x8a1ff7 +libminiupnpc.8.dylib (??? - ???) <2DBB7FA6-2198-8004-2ECF-F504F2081317> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libminiupnpc.8.dylib 0x8a5000 - 0x8f1fff +libssl.1.0.0.dylib (??? - ???) <641EBBF5-C97C-1D6C-EFF0-EB02A7FF7629> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib 0x90b000 - 0xa43fef +libcrypto.1.0.0.dylib (??? - ???) <0943ABB0-E2CA-20EC-B52D-E3D5E2340F02> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libcrypto.1.0.0.dylib 0xaac000 - 0xc05fff +libdb_cxx-4.8.dylib (??? - ???) <A2028F0C-1E73-00A3-BA80-2DEF2EAC9ECB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libdb_cxx-4.8.dylib 0xc2f000 - 0xc32ff3 +libboost_system-mt.dylib (??? - ???) <DC2F474D-A848-B1CA-5E46-EAB30E94A639> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_system-mt.dylib 0xc36000 - 0xc49ffb +libboost_filesystem-mt.dylib (??? - ???) <ED32F1B3-0C00-9EA8-A6E4-B4D69BBB090B> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_filesystem-mt.dylib 0xc54000 - 0xc98ff3 +libboost_program_options-mt.dylib (??? - ???) <DAE91877-14DE-370A-9571-A2EC1D7AF3D8> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_program_options-mt.dylib 0xce3000 - 0xcf5ff3 +libboost_thread-mt.dylib (??? - ???) <4F1F450A-6305-F698-98AC-E82075E11758> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_thread-mt.dylib 0xd15000 - 0xd1aff3 +libboost_chrono-mt.dylib (??? - ???) <7619296E-C4A2-2674-20C7-398C0E5D6C40> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_chrono-mt.dylib 0xd22000 - 0x16b2fe3 +QtGui (4.8.4 - compatibility 4.8.0) <C70071A5-F36B-C018-9BEB-181811A0759F> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtGui.framework/Versions/4/QtGui 0x1889000 - 0x1b38ffb +QtCore (4.8.4 - compatibility 4.8.0) <204CC6C5-048C-4746-D9AD-DF6FA3204CE7> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtCore.framework/Versions/4/QtCore 0x1baa000 - 0x1ccfff7 +QtNetwork (4.8.4 - compatibility 4.8.0) <E7999879-10BE-D14A-6BBB-9F36A61819C0> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtNetwork.framework/Versions/4/QtNetwork 0x1d0b000 - 0x1d1cfe7 +libz.1.dylib (1.2.7 - compatibility 1.0.0) <04F507FA-B0BF-CD40-DB2E-CBF29500AF19> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libz.1.dylib 0x1d20000 - 0x1d41fe7 +libpng15.15.dylib (30.0.0 - compatibility 30.0.0) <2E174E7D-8E8B-9F51-6A39-53D3243C159E> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libpng15.15.dylib 0x1df5000 - 0x1df8ff7 +libqmng.dylib (??? - ???) <AED7B482-BE3B-C70A-3E5B-7575C58DBCE3> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqmng.dylib 0x1fc0000 - 0x1fc4ff3 +libqgif.dylib (??? - ???) <88247A6C-7963-6E25-F271-07D15F98CF45> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqgif.dylib 0x1fc9000 - 0x1fcdfff +libqico.dylib (??? - ???) <7AE39AE4-C88A-D835-F6DB-43C38C12D8C9> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqico.dylib 0x1fd2000 - 0x1fd6fff +libqjpeg.dylib (??? - ???) <0D0902B6-EB00-4DEA-37B8-43EEB3552921> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqjpeg.dylib 0x6ac0000 - 0x6af0fe7 +libjpeg.8.dylib (13.0.0 - compatibility 13.0.0) <96B28C90-BE02-5517-87BC-EC348C2EE25C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libjpeg.8.dylib 0x6af6000 - 0x6b43fe7 +libmng.1.dylib (2.0.0 - compatibility 2.0.0) <1A7593E8-6C76-5533-E1BE-51976CB1873C> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libmng.1.dylib 0x6b58000 - 0x6b80fe7 +liblcms.1.dylib (2.19.0 - compatibility 2.0.0) <81794FD6-C0FC-79D3-7188-36318A86427A> /Applications/Bitcoin-Qt.app/Contents/Frameworks/liblcms.1.dylib 0x6b8a000 - 0x6b8cffb +libqtga.dylib (??? - ???) <DF371BC0-F930-689E-9654-D687DE08B059> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtga.dylib 0x6b90000 - 0x6b94ffb +libqtiff.dylib (??? - ???) <D9486AA9-E3DB-C1BF-A248-E5689EC8B768> /Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtiff.dylib 0x6b99000 - 0x6bebfe7 +libtiff.3.dylib (13.7.0 - compatibility 13.0.0) <27FC7F5B-604D-360A-9D36-7567BEA4D1AD> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libtiff.3.dylib 0x6ed3000 - 0x6f0eff3 +libqtaccessiblewidgets.dylib (??? - ???) <D256CDF3-59B6-AAC8-D553-A348D30AFD9C> /Applications/Bitcoin-Qt.app/Contents/PlugIns/accessible/libqtaccessiblewidgets.dylib 0x8fef4000 - 0x8ff26aa7 dyld (195.6 - ???) <3A866A34-4CDD-35A4-B26E-F145B05F3644> /usr/lib/dyld 0x90005000 - 0x90013fff libdispatch.dylib (187.10.0 - compatibility 1.0.0) <1B857064-288D-3919-B81A-38E9F4D19B54> /usr/lib/system/libdispatch.dylib 0x9001a000 - 0x9005aff7 com.apple.NavigationServices (3.7 - 193) <16A8BCC8-7343-3A90-88B3-AAA334DF615F> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework/Versions/A/NavigationServices 0x9005b000 - 0x90068fff libGL.dylib (??? - ???) <A72F14F7-1836-34AB-9F08-67836CB966E4> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x90069000 - 0x90179fe7 libsqlite3.dylib (9.6.0 - compatibility 9.0.0) <34E1E3CC-7B6A-3B37-8D07-1258D11E16CB> /usr/lib/libsqlite3.dylib 0x901a8000 - 0x9030affb com.apple.QuartzCore (1.7 - 270.5) <6D0EC7FC-11E5-35FB-A08A-3B438E89FBDB> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x90365000 - 0x90428fff com.apple.CoreServices.OSServices (478.50 - 478.50) <916A3B50-1033-3FFE-A9AF-3CC2B0F60EAE> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x90429000 - 0x9089eff7 FaceCoreLight (1.4.7 - compatibility 1.0.0) <3E2BF587-5168-3FC5-9D8D-183A9C7C1DED> /System/Library/PrivateFrameworks/FaceCoreLight.framework/Versions/A/FaceCoreLight 0x908b0000 - 0x908b7ff9 libsystem_dnssd.dylib (??? - ???) <EBEAF723-84F8-3544-8FB2-31B7771B50D0> /usr/lib/system/libsystem_dnssd.dylib 0x90aed000 - 0x90b10fff com.apple.CoreVideo (1.7 - 70.3) <4234C11C-E8E9-309A-9465-27D6D7458895> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x90b22000 - 0x90b24ff7 libdyld.dylib (195.5.0 - compatibility 1.0.0) <637660EA-8D12-3B79-B644-041FEADC9C33> /usr/lib/system/libdyld.dylib 0x90b95000 - 0x90be5ffa libTIFF.dylib (??? - ???) <9511A31E-070C-313E-8320-AAB683AD0653> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x90d09000 - 0x90dc9ffb com.apple.ColorSync (4.7.4 - 4.7.4) <0A68AF35-15DF-3A0A-9B17-70CE2A106A6C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x90dca000 - 0x90de0ffe libxpc.dylib (77.19.0 - compatibility 1.0.0) <0585AA94-F4FD-32C1-B586-22E7184B781A> /usr/lib/system/libxpc.dylib 0x91128000 - 0x91237ff7 com.apple.DesktopServices (1.6.5 - 1.6.5) <CEC069D7-37A3-3D25-A3BB-39DE99FDA46E> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x91238000 - 0x91267ff7 libsystem_info.dylib (??? - ???) <37640811-445B-3BB7-9934-A7C99848250D> /usr/lib/system/libsystem_info.dylib 0x91268000 - 0x912afff5 com.apple.opencl (2.0.19 - 2.0.19) <7689E7B9-EE5A-3F74-8699-4CDED9162260> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x91304000 - 0x9130affd com.apple.CommerceCore (1.0 - 17) <71641C17-1CA7-3AC9-974E-AAC9EB641035> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0x9130b000 - 0x91339fe7 libSystem.B.dylib (159.1.0 - compatibility 1.0.0) <30189C33-6ADD-3142-83F3-6114B1FC152E> /usr/lib/libSystem.B.dylib 0x91349000 - 0x91354ffc com.apple.NetAuth (1.0 - 3.0) <C07853C0-AF32-3633-9CEF-2480860C12C5> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth 0x91355000 - 0x9137aff9 libJPEG.dylib (??? - ???) <743578F6-8C0C-39CC-9F15-3A01E1616EAE> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x91483000 - 0x91540ff3 ColorSyncDeprecated.dylib (4.6.0 - compatibility 1.0.0) <726898F5-E718-3F27-B415-D6FDCDE09174> /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ColorSync.framework/Versions/A/Resources/ColorSyncDeprecated.dylib 0x91541000 - 0x91542ff0 libunc.dylib (24.0.0 - compatibility 1.0.0) <BCD277D0-4271-3E96-A4A2-85669DBEE2E2> /usr/lib/system/libunc.dylib 0x91543000 - 0x9154effe libbz2.1.0.dylib (1.0.5 - compatibility 1.0.0) <4A7FCD28-9C09-3120-980A-BDF6EDFAAC62> /usr/lib/libbz2.1.0.dylib 0x9154f000 - 0x91556ffd com.apple.NetFS (4.0 - 4.0) <D0D59145-D211-3E7C-9062-35A2833FA99B> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x91557000 - 0x91557fff com.apple.vecLib (3.7 - vecLib 3.7) <8CCF99BF-A4B7-3C01-9219-B83D2AE5F82A> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib 0x91558000 - 0x915efff3 com.apple.securityfoundation (5.0 - 55116) <EB53CEF7-4836-39FD-B012-6BC122ED4CE9> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x915f0000 - 0x91652ffb com.apple.datadetectorscore (3.0 - 179.4) <3A418498-C189-37A1-9B86-F0ECB33AD91C> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore 0x9166c000 - 0x91688ff1 libPng.dylib (??? - ???) <F084226B-14F0-36C0-B5EC-22C78406D2B6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x91706000 - 0x91746ff7 libauto.dylib (??? - ???) <984C81BE-FA1C-3228-8F7E-2965E7E5EB85> /usr/lib/libauto.dylib 0x91747000 - 0x9174eff7 libsystem_notify.dylib (80.1.0 - compatibility 1.0.0) <47DB9E1B-A7D1-3818-A747-382B2C5D9E1B> /usr/lib/system/libsystem_notify.dylib 0x91843000 - 0x918cdffb com.apple.SearchKit (1.4.0 - 1.4.0) <CF074082-64AB-3A1F-831E-582DF1667827> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x918ce000 - 0x918f0ff8 com.apple.PerformanceAnalysis (1.11 - 11) <453463FF-7C42-3526-8C96-A9971EE07154> /System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis 0x918f1000 - 0x91960fff com.apple.Heimdal (2.2 - 2.0) <2E1B8779-36D4-3C62-A67E-0034D77D7707> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal 0x919bf000 - 0x91aebff9 com.apple.CFNetwork (520.5.1 - 520.5.1) <F3C606BF-6DCF-33CD-981B-7253C9E3113A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x91b10000 - 0x91b8bffb com.apple.ApplicationServices.ATS (317.12.0 - ???) <4D124B65-3D43-32E9-B296-3671347BB888> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x91be1000 - 0x91c09ff7 libxslt.1.dylib (3.24.0 - compatibility 3.0.0) <AB530FB2-8BD1-3328-95E8-CF449F0429CA> /usr/lib/libxslt.1.dylib 0x91c12000 - 0x91c27fff com.apple.speech.synthesis.framework (4.0.74 - 4.0.74) <92AADDB0-BADF-3B00-8941-B8390EDC931B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x91c3e000 - 0x91c6cff7 com.apple.DictionaryServices (1.2.1 - 158.3) <8D03D180-D834-39F3-A106-78E0B22A7893> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x91c71000 - 0x91ccafff com.apple.HIServices (1.21 - ???) <91EC636D-AC27-3332-BA1C-FD7301917429> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x91ccb000 - 0x91cccff7 libsystem_sandbox.dylib (??? - ???) <036370E2-9D3E-38B8-B3A5-9056C57E780E> /usr/lib/system/libsystem_sandbox.dylib 0x91ccd000 - 0x91d32ff7 libvDSP.dylib (325.4.0 - compatibility 1.0.0) <4B4B32D2-4F66-3B0D-BD61-FA8429FF8507> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x92096000 - 0x92096fff libdnsinfo.dylib (395.11.0 - compatibility 1.0.0) <7EFAD88C-AFBC-3D48-BE14-60B8EACC68D7> /usr/lib/system/libdnsinfo.dylib 0x92097000 - 0x9217aff7 libcrypto.0.9.8.dylib (49.0.0 - compatibility 0.9.8) <81BD287B-645B-3117-A69C-B995BAD4504F> /usr/lib/libcrypto.0.9.8.dylib 0x92197000 - 0x921a2ff3 libCSync.A.dylib (600.0.0 - compatibility 64.0.0) <D6E17FD4-ECA0-3EEE-BFC5-F6A42A21AB5D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib 0x921e6000 - 0x921eafff libGIF.dylib (??? - ???) <2ADFED97-2228-343D-9A53-207CBFDE7984> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x921eb000 - 0x921f3fff com.apple.DiskArbitration (2.4.1 - 2.4.1) <28D5D8B5-14E8-3DA1-9085-B9BC96835ACF> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x921f4000 - 0x921f5fff libsystem_blocks.dylib (53.0.0 - compatibility 1.0.0) <B04592B1-0924-3422-82FF-976B339DF567> /usr/lib/system/libsystem_blocks.dylib 0x92249000 - 0x9229bff7 libFontRegistry.dylib (??? - ???) <C2B84661-A62D-3FFF-8D8C-BC697E9BDF4C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x9229c000 - 0x9236cffb com.apple.ImageIO.framework (3.1.2 - 3.1.2) <C3CB142F-BE91-3AFA-B052-409F776C0B9E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x9236d000 - 0x923d1fff com.apple.framework.IOKit (2.0 - ???) <94827954-5906-36C4-819B-24CDAFD85C72> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x923d2000 - 0x923d6fff com.apple.CommonPanels (1.2.5 - 94) <3A988595-DE53-34ED-9367-C9A737E2AF38> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x925d9000 - 0x925dafff com.apple.TrustEvaluationAgent (2.0 - 1) <4BB39578-2F5E-3A50-AD59-9C0AB99472EB> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x928cd000 - 0x928cefff liblangid.dylib (??? - ???) <C8C204E9-1785-3785-BBD7-22D59493B98B> /usr/lib/liblangid.dylib 0x928cf000 - 0x9292cffb com.apple.htmlrendering (76 - 1.1.4) <743C2943-40BC-36FB-A45C-3421A394F081> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HTMLRendering.framework/Versions/A/HTMLRendering 0x9337c000 - 0x9377eff6 libLAPACK.dylib (??? - ???) <00BE0221-8564-3F87-9F6B-8A910CF2F141> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x93bac000 - 0x93bacfff com.apple.Accelerate.vecLib (3.7 - vecLib 3.7) <22997C20-BEB7-301D-86C5-5BFB3B06D212> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x93c0d000 - 0x93d05ff7 libFontParser.dylib (??? - ???) <71B33EB1-27F8-3C68-B940-FC61A3CFE275> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x93d60000 - 0x93d63ff7 libmathCommon.A.dylib (2026.0.0 - compatibility 1.0.0) <69357047-7BE0-3360-A36D-000F55E39336> /usr/lib/system/libmathCommon.A.dylib 0x93d64000 - 0x93d66ffb libRadiance.dylib (??? - ???) <4721057E-5A1F-3083-911B-200ED1CE7678> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x93e67000 - 0x94136ffb com.apple.security (7.0 - 55148.6) <8DF67BDD-C98F-3B7E-AC63-D468407FA82D> /System/Library/Frameworks/Security.framework/Versions/A/Security 0x94137000 - 0x94154fff libresolv.9.dylib (46.1.0 - compatibility 1.0.0) <2870320A-28DA-3B44-9D82-D56E0036F6BB> /usr/lib/libresolv.9.dylib 0x94155000 - 0x94159ffa libcache.dylib (47.0.0 - compatibility 1.0.0) <98A82BC5-0DD9-3212-9CAE-35A77278EEB6> /usr/lib/system/libcache.dylib 0x9415a000 - 0x94278fec com.apple.vImage (5.1 - 5.1) <7757F253-B281-3612-89D4-F2B04061CBE1> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x942a7000 - 0x942efff7 com.apple.SystemConfiguration (1.11.3 - 1.11) <68B92FEA-F754-3E7E-B5E6-D512E26144E7> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x9430c000 - 0x9460efff com.apple.CoreServices.CarbonCore (960.25 - 960.25) <C613B0DA-B401-3DC7-B626-6E20D4DDC8A8> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x9460f000 - 0x9461dfff com.apple.opengl (1.8.1 - 1.8.1) <766AFB12-A2CB-3A55-B662-FC9FFCAE0008> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x9470c000 - 0x94729ff3 com.apple.openscripting (1.3.3 - ???) <0579A4CB-FD6F-3D7F-A17B-AC0F2CF11FC7> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x948d2000 - 0x94acaff7 com.apple.CoreData (104.1 - 358.14) <C1730963-F75D-3338-B65F-D50235538B28> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x94eb3000 - 0x94eb3ff2 com.apple.CoreServices (53 - 53) <7CB7AA95-D5A7-366A-BB8A-035AA9E582F8> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x95541000 - 0x95a1dff6 libBLAS.dylib (??? - ???) <134ABFC6-F29E-3DC5-8E57-E13CB6EF7B41> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x95a1e000 - 0x95a79ff3 com.apple.Symbolication (1.3 - 91) <4D12D2EC-5010-3958-A205-9A67E972C76A> /System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication 0x95b19000 - 0x95b1cff7 libcompiler_rt.dylib (6.0.0 - compatibility 1.0.0) <7F6C14CC-0169-3F1B-B89C-372F67F1F3B5> /usr/lib/system/libcompiler_rt.dylib 0x95eff000 - 0x95f14ff7 com.apple.ImageCapture (7.1.0 - 7.1.0) <E5FCA336-7E47-343E-A82D-CCCA5BCD5929> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x95f1d000 - 0x95f1dfff com.apple.audio.units.AudioUnit (1.7.3 - 1.7.3) <2E71E880-25D1-3210-8D26-21EC47ED810C> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x95f1e000 - 0x95fbafff com.apple.ink.framework (10.7.5 - 113) <05CAFB64-D3B8-3973-87EA-CB8BBE580F6B> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x9610d000 - 0x9619aff7 com.apple.CoreText (220.22.0 - ???) <EA7210A7-DECC-3F76-8A66-D4E41859B3C6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework/Versions/A/CoreText 0x961f4000 - 0x962bffff libsystem_c.dylib (763.13.0 - compatibility 1.0.0) <52421B00-79C8-3727-94DE-62F6820B9C31> /usr/lib/system/libsystem_c.dylib 0x962f4000 - 0x9638aff7 com.apple.LaunchServices (480.40 - 480.40) <D5C0DEF9-398C-3742-8C4E-875C3365EC8B> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x9638b000 - 0x9653fff3 libicucore.A.dylib (46.1.0 - compatibility 1.0.0) <4AFF6FC3-6283-3934-8EFC-CA227CA11164> /usr/lib/libicucore.A.dylib 0x96540000 - 0x96541ff7 libquarantine.dylib (36.7.0 - compatibility 1.0.0) <46980EC2-149D-3CF7-B29A-401FB89C275D> /usr/lib/system/libquarantine.dylib 0x965c7000 - 0x96628ffb com.apple.audio.CoreAudio (4.0.3 - 4.0.3) <7A14BE52-6789-3CE3-9AE9-B733F4903EB1> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x96629000 - 0x9669ffff com.apple.Metadata (10.7.0 - 627.37) <F54AED70-95C5-3561-8C87-D9E5539E98A4> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x966a0000 - 0x96776aab libobjc.A.dylib (228.0.0 - compatibility 1.0.0) <2E272DCA-38A0-3530-BBF4-47AE678D20D4> /usr/lib/libobjc.A.dylib 0x96777000 - 0x967adff7 com.apple.AE (527.7 - 527.7) <7BAFBF18-3997-3656-9823-FD3B455056A4> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x967c2000 - 0x967d0fff libz.1.dylib (1.2.5 - compatibility 1.0.0) <E73A4025-835C-3F73-9853-B08606E892DB> /usr/lib/libz.1.dylib 0x9683e000 - 0x96846ff5 libcopyfile.dylib (85.1.0 - compatibility 1.0.0) <A1BFC320-616A-30AA-A41E-29D7904FC4C7> /usr/lib/system/libcopyfile.dylib 0x96853000 - 0x9685efff libkxld.dylib (??? - ???) <14E79D7A-B6C2-35C5-B56D-D343BEC2A106> /usr/lib/system/libkxld.dylib 0x9685f000 - 0x96870fff libbsm.0.dylib (??? - ???) <54ACF696-87C6-3652-808A-17BE7275C230> /usr/lib/libbsm.0.dylib 0x96871000 - 0x968b4ffd libcommonCrypto.dylib (55010.0.0 - compatibility 1.0.0) <4BA1F5F1-F0A2-3FEB-BB62-F514DCBB3725> /usr/lib/system/libcommonCrypto.dylib 0x968b5000 - 0x968ecfef com.apple.DebugSymbols (2.1 - 87) <EB951B78-31A5-379F-AFA1-B5C9A7BB3D23> /System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols 0x968ed000 - 0x9693eff9 com.apple.ScalableUserInterface (1.0 - 1) <C3FA7E40-0213-3ABC-A006-2CB00B6A7EAB> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/ScalableUserInterface.framework/Versions/A/ScalableUserInterface 0x9693f000 - 0x96a50ff7 libJP2.dylib (??? - ???) <3B6A6D1C-5E4D-3814-892A-7C580E063268> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib 0x96a51000 - 0x96a6bfff com.apple.Kerberos (1.0 - 1) <D7920A1C-FEC4-3460-8DD0-D02491578CBB> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x96a6c000 - 0x96a6dff4 libremovefile.dylib (21.1.0 - compatibility 1.0.0) <6DE3FDC7-0BE0-3791-B6F5-C15422A8AFB8> /usr/lib/system/libremovefile.dylib 0x96a6e000 - 0x96aabfef libGLImage.dylib (??? - ???) <FC13D46F-69C4-3BA1-A5E8-52C2EC8B7D58> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x96aac000 - 0x96aacfff libOpenScriptingUtil.dylib (??? - ???) <E4C22B65-9493-31D5-9D46-19BD70975587> /usr/lib/libOpenScriptingUtil.dylib 0x96c11000 - 0x96de8fe7 com.apple.CoreFoundation (6.7.2 - 635.21) <4D1D2BAF-1332-32DF-A81B-7E79D4F0A6CB> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x96de9000 - 0x96decffd libCoreVMClient.dylib (??? - ???) <B8F8916D-F12A-3D95-ABF3-999D57B7D581> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x96ded000 - 0x96e55fff libc++.1.dylib (28.4.0 - compatibility 1.0.0) <B24814AB-CA77-3B9D-8FAB-58C9B4FD3A16> /usr/lib/libc++.1.dylib 0x96e56000 - 0x96e58ff9 com.apple.securityhi (4.0 - 1) <BD367302-73C3-32F4-8080-E389AE89E434> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x96e59000 - 0x96e5cff9 libCGXType.A.dylib (600.0.0 - compatibility 64.0.0) <16DCE20A-9790-369A-94C1-B7954B418C77> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x96e5d000 - 0x96e60ffb com.apple.help (1.3.2 - 42) <DDCEBA10-5CDE-3ED2-A52F-5CD5A0632CA2> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x96fd3000 - 0x96fd8ff7 libmacho.dylib (800.0.0 - compatibility 1.0.0) <56A34E97-518E-307E-8218-C5D43A33EE34> /usr/lib/system/libmacho.dylib 0x96ff3000 - 0x9791e72b com.apple.CoreGraphics (1.600.0 - ???) <DD7CDD67-FC4F-36FE-962F-2EA7EF3FC780> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics 0x97953000 - 0x9795effb com.apple.speech.recognition.framework (4.0.21 - 4.0.21) <A1764D2F-EB84-33DC-9ED5-CDA3B468FF3E> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x97c38000 - 0x986cdff6 com.apple.AppKit (6.7.5 - 1138.51) <B9D3DCA0-9765-354E-9730-75A45A97DDFD> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x995d1000 - 0x995d5ff3 libsystem_network.dylib (??? - ???) <62EBADDA-FC72-3275-AAB3-5EDD949FEFAF> /usr/lib/system/libsystem_network.dylib 0x995d6000 - 0x99638ff3 libstdc++.6.dylib (52.0.0 - compatibility 7.0.0) <266CE9B3-526A-3C41-BA58-7AE66A3B15FD> /usr/lib/libstdc++.6.dylib 0x99639000 - 0x99677fff libRIP.A.dylib (600.0.0 - compatibility 64.0.0) <AF1174F9-4402-31EB-9C84-AB644E5865DF> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x9a531000 - 0x9a7a5ff3 com.apple.CoreImage (7.99.1 - 1.0.1) <C4B2DD2A-8E45-31CD-9B25-2AC1CA252B14> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/CoreImage.framework/Versions/A/CoreImage 0x9a7a6000 - 0x9a7b6fff com.apple.LangAnalysis (1.7.0 - 1.7.0) <6D6F0C9D-2EEA-3578-AF3D-E2A09BCECAF3> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x9aa5a000 - 0x9aa5aff0 com.apple.ApplicationServices (41 - 41) <BED33E1D-C95C-3654-9A3A-0CB3607F9F10> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x9ab3b000 - 0x9abc8fe7 libvMisc.dylib (325.4.0 - compatibility 1.0.0) <F2A8BBA3-6431-3CED-8CD3-0953410B6F96> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x9abc9000 - 0x9abcffff libGFXShared.dylib (??? - ???) <9C9834EB-B794-38C8-9B90-31D8CB234F86> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x9abd0000 - 0x9abfbfff com.apple.GSS (2.2 - 2.0) <2C468B23-FA87-30B5-B9A6-8C5D1373AA30> /System/Library/Frameworks/GSS.framework/Versions/A/GSS 0x9abfe000 - 0x9ac20ffe com.apple.framework.familycontrols (3.0 - 300) <6735D7ED-7053-3AB8-B144-E7F70A124CCD> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0x9acbc000 - 0x9ad30fff com.apple.CoreSymbolication (2.2 - 73.2) <FA9305CA-FB9B-3646-8C41-FF8DF15AB2C1> /System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication 0x9ad31000 - 0x9ae21ff1 libiconv.2.dylib (7.0.0 - compatibility 7.0.0) <9E5F86A3-8405-3774-9E0C-3A074273C96D> /usr/lib/libiconv.2.dylib 0x9aea2000 - 0x9aeb6ff7 com.apple.CFOpenDirectory (10.7 - 144) <665CDF77-F0C9-3AFF-8CF8-64257268B7DD> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x9aeb7000 - 0x9aeb8fff libDiagnosticMessagesClient.dylib (??? - ???) <DB3889C2-2FC2-3087-A2A2-4C319455E35C> /usr/lib/libDiagnosticMessagesClient.dylib 0x9aeb9000 - 0x9af5dfff com.apple.QD (3.40.1 - ???) <B5650C5E-AB41-3758-84A1-5A97EDCD8EFE> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x9b211000 - 0x9b51bff3 com.apple.Foundation (6.7.2 - 833.25) <4C52ED74-A1FD-3087-A2E1-035AB3CF9610> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x9b51c000 - 0x9b5a3fff com.apple.print.framework.PrintCore (7.1 - 366.3) <EEC03CAB-7F79-3931-87FE-4DF0B767BF47> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x9b6ac000 - 0x9b6bcff7 libCRFSuite.dylib (??? - ???) <CE616EF3-756A-355A-95AD-3472A876BEB9> /usr/lib/libCRFSuite.dylib 0x9b96b000 - 0x9bac1fff com.apple.audio.toolbox.AudioToolbox (1.7.3 - 1.7.3) <F09C7075-2C4E-3A4F-A372-95D700125513> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x9bb2b000 - 0x9bb4bff7 com.apple.RemoteViewServices (1.5 - 44.2) <11C87337-FF29-3976-A230-6387D96563C5> /System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices 0x9bb6b000 - 0x9bb95ff1 com.apple.CoreServicesInternal (113.19 - 113.19) <F7A309D1-DCB4-38DE-8248-E16D0182AA6C> /System/Library/PrivateFrameworks/CoreServicesInternal.framework/Versions/A/CoreServicesInternal 0x9bb9f000 - 0x9bba3ffd IOSurface (??? - ???) <EDDBEE65-1EB8-33A7-9972-E361A3508234> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x9bba4000 - 0x9bba8ff7 com.apple.OpenDirectory (10.7 - 146) <4986A382-8FEF-3392-8CE9-CF6A5EE4E365> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x9bf65000 - 0x9c2abff3 com.apple.HIToolbox (1.9 - ???) <E5EA9EEF-3CCA-36A0-8688-DA2E64E2256C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x9c2bf000 - 0x9c2c7ff3 liblaunch.dylib (392.39.0 - compatibility 1.0.0) <9E6135FF-C2B1-3BC9-A160-B32D71BFA77C> /usr/lib/system/liblaunch.dylib 0x9c2c8000 - 0x9c2dbff8 com.apple.MultitouchSupport.framework (231.4 - 231.4) <083F7787-4C3B-31DA-B5BB-1993D9A9723D> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x9c2dc000 - 0x9c2e5fff libc++abi.dylib (14.0.0 - compatibility 1.0.0) <FEB5330E-AD5D-37A0-8AB2-0820F311A2C8> /usr/lib/libc++abi.dylib 0x9c2e6000 - 0x9c2eeff3 libunwind.dylib (30.0.0 - compatibility 1.0.0) <E8DA8CEC-12D6-3C8D-B2E2-5D567C8F3CB5> /usr/lib/system/libunwind.dylib 0x9c2ef000 - 0x9c2f9ff2 com.apple.audio.SoundManager (3.9.4.1 - 3.9.4.1) <2A089CE8-9760-3F0F-B77D-29A78940EA17> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework/Versions/A/CarbonSound 0x9c421000 - 0x9c424ffc libpam.2.dylib (3.0.0 - compatibility 3.0.0) <6FFDBD60-5EC6-3EFA-996B-EE030443C16C> /usr/lib/libpam.2.dylib 0x9c425000 - 0x9c50dfff libxml2.2.dylib (10.3.0 - compatibility 10.0.0) <1841196F-68B5-309F-8ED1-6714B1DFEC83> /usr/lib/libxml2.2.dylib 0x9c646000 - 0x9c6a4ff7 com.apple.coreui (1.2.2 - 165.11) <340B0B83-1407-3AB4-BCAB-505C29303EE2> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x9c6a5000 - 0x9c6aeff3 com.apple.CommonAuth (2.2 - 2.0) <C3FD6EC2-8EB3-38FB-BBB7-05009CA49024> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth 0x9c6b0000 - 0x9c6ccff5 com.apple.GenerationalStorage (1.0 - 126.1) <E622F823-7D98-3D13-9C3D-7EA482567394> /System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage 0x9c6cd000 - 0x9c70aff7 libcups.2.dylib (2.9.0 - compatibility 2.0.0) <007A1877-E981-3007-A8FA-9B179F4ED6D1> /usr/lib/libcups.2.dylib 0x9c70b000 - 0x9c70bffe libkeymgr.dylib (23.0.0 - compatibility 1.0.0) <7F0E8EE2-9E8F-366F-9988-E2F119DB9A82> /usr/lib/system/libkeymgr.dylib 0x9c75b000 - 0x9c7a4ff7 libGLU.dylib (??? - ???) <9AF7AD51-16E3-3674-B60E-30EE499D7B46> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x9c7a5000 - 0x9c7a6ffd libCVMSPluginSupport.dylib (??? - ???) <4B0476F9-950D-3EB7-BD83-F65AF0B05F0E> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib 0x9cbe1000 - 0x9cbe1fff com.apple.Accelerate (1.7 - Accelerate 1.7) <4192CE7A-BCE0-3D3C-AAF7-6F1B3C607386> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x9ce72000 - 0x9ce90ff7 libsystem_kernel.dylib (1699.32.7 - compatibility 1.0.0) <79179F83-457A-3539-A76B-E960D2108109> /usr/lib/system/libsystem_kernel.dylib 0x9ce91000 - 0x9ce91fff com.apple.Carbon (153 - 153) <6FF98F0F-2CDE-3888-A304-4ED447D24CE3> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x9cf3b000 - 0x9cf49ff7 libxar-nossl.dylib (??? - ???) <5BF4DA8E-C319-354A-967E-A0C725DC8BA3> /usr/lib/libxar-nossl.dylib 0x9cf4a000 - 0x9cf50ffb com.apple.print.framework.Print (7.4 - 247.3) <CB075EEE-FA1F-345C-A1B5-1AB266FC73A1> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print External Modification Summary: Calls made by other processes targeting this process: task_for_pid: 2 thread_create: 0 thread_set_state: 0 Calls made by this process: task_for_pid: 0 thread_create: 0 thread_set_state: 0 Calls made by all processes on this machine: task_for_pid: 3434 thread_create: 1 thread_set_state: 0 VM Region Summary: ReadOnly portion of Libraries: Total=162.3M resident=151.2M(93%) swapped_out_or_unallocated=11.1M(7%) Writable regions: Total=134.3M written=63.8M(47%) resident=85.0M(63%) swapped_out=0K(0%) unallocated=49.4M(37%) REGION TYPE VIRTUAL =========== ======= CG backing stores 900K CG shared images 1216K CoreGraphics 8K CoreServices 16.6M MALLOC 103.4M MALLOC guard page 48K Memory tag=240 4K Memory tag=242 12K Stack 68.1M VM_ALLOCATE 16.2M __CI_BITMAP 80K __DATA 7284K __DATA/__OBJC 72K __IMAGE 528K __IMPORT 4K __LINKEDIT 49.3M __OBJC 1508K __PAGEZERO 4K __TEXT 113.0M __UNICODE 544K mapped file 188.9M shared memory 312K shared pmap 10.2M =========== ======= TOTAL 578.0M Model: MacPro1,1, BootROM MP11.005D.B00, 4 processors, Dual-Core Intel Xeon, 2.66 GHz, 9 GB, SMC 1.7f10 Graphics: NVIDIA GeForce 7300 GT, NVIDIA GeForce 7300 GT, PCIe, 256 MB Graphics: NVIDIA GeForce 8800 GT, NVIDIA GeForce 8800 GT, PCIe, 512 MB Memory Module: DIMM Riser A/DIMM 1, 512 MB, DDR2 FB-DIMM, 667 MHz, 0x830B, 0x4E54353132543732553839423442442D3343 Memory Module: DIMM Riser A/DIMM 2, 512 MB, DDR2 FB-DIMM, 667 MHz, 0x830B, 0x4E54353132543732553839423442442D3343 Memory Module: DIMM Riser B/DIMM 1, 2 GB, DDR2 FB-DIMM, 667 MHz, 0x7F61, 0x000000000000000000000000000000000000 Memory Module: DIMM Riser B/DIMM 2, 2 GB, DDR2 FB-DIMM, 667 MHz, 0x7F61, 0x000000000000000000000000000000000000 Memory Module: DIMM Riser B/DIMM 3, 2 GB, DDR2 FB-DIMM, 667 MHz, 0x7F61, 0x000000000000000000000000000000000000 Memory Module: DIMM Riser B/DIMM 4, 2 GB, DDR2 FB-DIMM, 667 MHz, 0x7F61, 0x000000000000000000000000000000000000 AirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x87), Broadcom BCM43xx 1.0 (5.10.131.36.15) Bluetooth: Version 4.0.8f17, 2 service, 18 devices, 1 incoming serial ports Network Service: Ethernet 1, Ethernet, en0 Network Service: Ethernet 2, Ethernet, en1 PCI Card: NVIDIA GeForce 7300 GT, sppci_displaycontroller, Slot-4 PCI Card: NVIDIA GeForce 8800 GT, sppci_displaycontroller, Slot-1 Serial ATA Device: Hitachi HDS722020ALA330, 2 TB Serial ATA Device: Hitachi HDS722020ALA330, 2 TB Serial ATA Device: ST3000DM001-9YN166, 3 TB Serial ATA Device: ST3000DM001-9YN166, 3 TB Serial ATA Device: ATAPI iHAS220 6 Parallel ATA Device: PIONEER DVD-RW DVR-112D USB Device: hub_device, apple_vendor_id, 0x912f, 0xfd500000 / 3 USB Device: Apple Cinema HD Display, apple_vendor_id, 0x9221, 0xfd520000 / 4 USB Device: Keyboard Hub, apple_vendor_id, 0x1006, 0xfd300000 / 2 USB Device: Apple Keyboard, apple_vendor_id, 0x0220, 0xfd320000 / 5 USB Device: Bluetooth USB Host Controller, apple_vendor_id, 0x8206, 0x5d200000 / 2 FireWire Device: built-in_hub, 800mbit_speed FireWire Device: unknown_device, unknown_speed
2754	One-line change. Fixes #2752.
2753	There are two Preferences that dont get saved in the 0.8.2 client. The option to minimize on close, and the option to minimize to tray. All the other preferences get saved, as far as I can tell. Im running Mac OS X 10.6.8 on a 32-bit Mac Mini, and the OS has been fairly recently re-installed and is up-to-date. A search of the Issues didnt seem to address this; I noticed it on 0.8.1, and thought it was just an oversight that would be fixed in 0.8.2.
2752	Clean compile in a new virtual machine, run bitcoin-qt -testnet and I get: No such file or directory: "/home/gavin/.bitcoin/testnet3" Aborted (core dumped)
2750	The conversion to configurable size for high priority transactions did not include fee calculations. It seems like it should. Consolidates another magic number.
2749	Does what it says on the tin... ![totalbalance](https://f.cloud.github.com/assets/126646/622898/621b88e4-cf52-11e2-9d56-07a97fbada93.png)
2748	Here is the first go at an Autotools build system replacement. It is meant to be a drop-in replacement for the current system(s), providing the same features with no net changes. It can also live side-by-side with the old system while sharing the same build-related variables in order to facilitate a smooth transition. I hope the benefits are obvious enough: A single/shared build procedure, portability, ease of packaging, ease for downstreams, ease for repository maintainers, cross-compilation, etc. I dont vouch for Autotools in any way, in fact, this configure.am is downright ugly (mainly just because of mingw though), but its portable and well-established. Ive opted not to write the documentation yet, because I would like to see what comments/concerns come out of the first round of review before committing to anything. This does away with the need for qmake, as the Makefile is capable of generating everything it needs in a portable way. Qt-creator can be used with the Autotools plugin, and is working nicely. For those who wish to use it this way, install the Autotools plugin from the about menu, then open Makefile.am as a project. It handles the build procedure, so there is no need to mess with the command-line procedures listed below. Building from CLI: For Linux, assuming the dependencies have been met, the build procedure looks like this: ``` ./autogen.sh ./configure make ``` Same for OS X, but the pkg-config path needs to be hooked up from macports first: ``` echo "/opt/local/share/aclocal" | sudo tee -a /usr/share/aclocal/dirlist ``` For mingw its the same, but you will need to provide lots of paths in the form of: ``` ./autogen.sh CPPFLAGS="-I/path/to/include -I/path/to/other/include" LDFLAGS="-L/path/to/libs -L/path/to/other/libs" ./configure make ``` In addition, there are helpers for qt and boost to help with finding some locations. Use ./configure --help to see the available options. Native windows built is untested, as I dont have a windows environment at my disposal. I have verified that linux builds are deterministic insofar as a fresh git clone will build bit-exact binaries to match another clean checkout on the same machine. To my knowledge, that means that gitian shouldnt have any trouble making the switch (after the descriptors are updated to use autotools). make check will run the unit tests and print the results. Ive done my best to avoid adding any new behavior or features, and I would much prefer to aim for feature-parity before making any improvements. TODO: - Update gitian descriptors. - Add documentation to reflect comments here - Cosmetics
2747	It seems people keep wanting/needing this functionality. Works like getrawtransaction, but defaults to 1 (unlike getrawtransaction) for backward compatibility.
2746	- add new bitcoind.cpp to OTHER_FILES to be able to see it in the Qt Creator IDE - remove a Mac-only header from the general HEADERS, as it is already in macx:HEADERS
2744	It seems to require access to the machine that its running on, at which point the possible exploit is mostly useless. How the memory is corrupted is unclear.
2743	Update CTransaction::IsStandard() to return a string describing the reason a transaction is considered non-standard. Add that string to the TX-is-nonstd error message.
2742	After press close button, client still continues running in linux.
2741	Fixes a regression from Crash probably introduced by 4d17a1b0. Initialize the window to NULL and verify it before use. Triggered in this case by running ./bitcoin-qt from a shell, and clicking on the icon before the window comes up.
2740	
2738	Add new standard transaction type, that permits small amount of data to be attached to a transaction, in the form of an additional TxOut that is provably prunable.
2735	The document will need to be edited slightly for Bitcoin specifics, but its a starting point!
2734	well i updated my bitcoin qt and all the sudden it wont open im new to the bit coin wallet so i didnt mind losing what i had there since it was not much . also i deleted the bitcoin qt from the mac and re installed and still get the quit unexpectedly same error wont run . i am not a pro at computers or anything and would like to run the bitcoin qt again in the mac.
2733	Extremely large wallets take a very long time to load. After some testing I found that most of the time was spent in EC_KEY_check_key The fix this I have merged two of the checks into using a single CECKey instance, replaced EC_KEY_check_key with a faster operation (thanks to sipa for helping me there), and appended a hash of the private key to "key" entries. On my system loading one private key took approximately 1500 usec. CKey::Load reduced this to 900 usec replacing EC_KEY_check_key reduced this to 500 usec checking just the hash reduced this to 40 usec
2732	Dear developers, bitcoin-qt automatically takes up all my bandwidth (both up and down) and I can hardly surf the Internet while syncing. Therefore, I request a option to limit the download/upload speed. Thank you for your time.
2731	- harmonize BitcoinGUI::setClientModel() and RPCConsole::setClientModel() - now RPCConsole::setClientModel() also includes a direct call to setNumBlocks()
2730	
2728	This commit adds a Linux script that uses tc and iptables to limit outgoing bandwidth to Bitcoin nodes. All tcp connections with a source or destination port of 8333 are limited to the chosen rate. It does not alter the incoming bandwidth. Additionally, outgoing bandwidth to a host on a local LAN (192.168.x.x) is not limited.
2727	
2725	-edited some things- Perhaps if the hash rate rose, to then ignore any empty or near empty blocks. Would that work very well or at all?
2722	Adding this flag to the file Info.plist fixes the font appearance on Retina displays. Icons appear still blurry but thats not so disruptive as blurry text. Having sharp text adds so much to the user experience on MacOS, please consider this fix.
2721	This commit squashes all the changes in the Qt5 branch relative to master. Backward compatibility with Qt4 is retained. Original authors: - Philip Kaufmann - Jonas Schnelli
2720	I noticed in client 8.1 i had a transaction count underneath the wallet balance and unconfirmed. In client 8.2 it is no longer present. Was this by design or is there a switch i can turn it back on? Thanks.
2718	A few fixes to the danish translation, but the translation is still far from perfect.
2716	This commit decouples the pMiningKey initialization and shutdown from the RPC threads. `getwork` and `getblocktemplate` rely on pMiningKey, and can also be ran from the debug window in the UI even when the RPC server is not running. Solves issue #2706.
2714	Ive seen this twice (once on pull-tester, once on launchpad): test/util_tests.cpp(307): error in "util_seed_insecure_rand": check count<=10000/mod+err failed
2713	
2712	Bitcon QT v0.8.1-beta, OS X 10.7.5 The app doesnt seem to be able to run for more than a day or so before crashing with a Failed to write block error. I was able to run the prior version for weeks at a time.
2711	This can be used to maintain multiple identities of a person without a separate wallet. This would allow for some basic form of accounting, to see how much is in each address. And in the case of having a shared address with others, from inadvertently spending the shared balance, or if desired, to only spend from the shared balance. This isnt something that is entirely needed, but its something that would be useful to some.
2709	Just as a matter of convenience. . Perhaps get rid of the fee confirmation altogether. Instead show what the fees will be somewhere else, or as part of the confirm payment window. Theres no need for a second confirmation window for just fees.
2708	The official release of 0.8.2 displays beta on the splash page.... and the about page.
2707	just downloaded the new 8.2 while upgrading 8.1 and twice i got this error: error opening file for writing: c:\program files (x86)\bitcoin\bitcoin-qt.exe click abort to stop,retry to try again ignore to skip what do i need to do now?
2706	Calling getblocktemplate or getwork in the Bitcoin-Qt console window causes a crash with 0.8.2. The cause is pMiningKey being uninitialized (it is initialized in StartRPCThreads(), which isnt called if Bitcoin-Qt is not running with the -server flag). Workaround is to run Bitcoin-Qt with -server.
2705	When my system crashes, the peers.dat file often ends up zero-sized. When this happens, vector vchData.resize(dataSize) is handed a negative dataSize. It takes it as an unsigned int and attempts to resize it to 18 hexillion bytes, crashing with a std::bad_alloc, which is presented as "bitcoin in Runaway exception" This pull simply adds a if ( dataSize < 0 ) dataSize = 0; check before running resize(). Another option would be to make the resize() call itself conditional on dataSize being positive.
2703	You could end up with a negative balance by moving funds you dont have from one account to another using "move". This now check [minconf] and the balance.
2702	Performs the following: - Brings the LevelDB code base up to 1.12.0 - Incorporates an upstream deadlock fix for Windows condition variables - Incorporates upstream fix #178: cannot resize a level 0 compaction set - Limits the rate of compaction to prevent runaway resource usage Heres the upstream issue regarding the deadlock: And the compaction issue: This is the commitlog of the subtree:
2700	This is the beginning of an autotools build-system refactor. My first step is to be able to create a common static lib for the binaries (console/qt/test) to link against, meaning that each of those will need its own entry-point object file. This series gets rid of the QT_GUI define in favor of letting the build-system link in the proper startup file, and a global var to determine how the binary was started. Ive tried to match this projects formatting and general practices.
2699	At the moment the call to import a private key looks like: importprivkey <bitcoinprivkey> [label] [rescan=true] I would like to expand it with an optional parameter of [compressed=true]. The reasoning behind it is that some people want to import their keys in a specific format to conform with either their previous format (keeping the same address between BitcoinQT and their other wallet that may or may not use compressed format), or maps to a specific vanity address they desire. The adoption of this option would encourage other wallet hosts and developers to do the same and encourage more people to use compressed keys (as opposed to uncompressed keys which are the norm at the moment since everyone else is using them).
2698	I upgraded from Win7 -> Win8. Bitcoin-QT had to re-index the blocks on the first run after the upgrade. On the second upgrade I got a strange error message. Then on the third execution I had BSOD. Below is the memory dump. Please let me know if there is anything else I can help. 1: kd> !analyze -v ******************************************************************************* * * * Bugcheck Analysis * * * ******************************************************************************* SYSTEM_SERVICE_EXCEPTION (3b) An exception happened while executing a system service routine. Arguments: Arg1: 00000000c0000005, Exception code that caused the bugcheck Arg2: fffff8800198c7ff, Address of the instruction which caused the bugcheck Arg3: fffff88017a368b0, Address of the context record for the exception that caused the bugcheck Arg4: 0000000000000000, zero. Debugging Details: ------------------ EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%08lx referenced memory at 0x%08lx. The memory could not be %s. FAULTING_IP: ndis!ndisPcwCollectData+143 fffff880`0198c7ff 8b4008 mov eax,dword ptr [rax+8] CONTEXT: fffff88017a368b0 -- (.cxr 0xfffff88017a368b0) rax=00000072c7b60000 rbx=0000000000000000 rcx=fffffa800979a1a0 rdx=0000000000000000 rsi=fffffa800de00ad8 rdi=fffffa800de00140 rip=fffff8800198c7ff rsp=fffff88017a372b0 rbp=fffff88017a373b0 r8=fffff8a0003df268 r9=0000000006018003 r10=fffffa8008d9ac00 r11=fffff88017a37148 r12=fffff88017a376b0 r13=0000000000000004 r14=0000000000000004 r15=0000077fe85c8b98 iopl=0 nv up ei pl nz na po nc cs=0010 ss=0018 ds=002b es=002b fs=0053 gs=002b efl=00010206 ndis!ndisPcwCollectData+0x143: fffff880`0198c7ff 8b4008 mov eax,dword ptr [rax+8] ds:002b:00000072`c7b60008=???????? Resetting default scope DEFAULT_BUCKET_ID: WIN8_DRIVER_FAULT BUGCHECK_STR: 0x3B PROCESS_NAME: bitcoin-qt.exe CURRENT_IRQL: 1 LAST_CONTROL_TRANSFER: from fffff880018cc1c3 to fffff8800198c7ff STACK_TEXT: fffff880`17a372b0 fffff880`018cc1c3 : fffff8a0`003ce1d0 fffff8a0`003df170 00000000`00000000 fffff8a0`003df5f8 : ndis!ndisPcwCollectData+0x143 fffff880`17a37570 fffff880`018cc522 : fffff880`17a376b0 fffff8a0`116de1e8 fffff8a0`116de1a0 00000000`00000002 : pcw!PcwpCollectNotification+0xc7 fffff880`17a375f0 fffff880`018cc7e3 : 00000000`00000000 fffff880`17a37739 00000000`00002000 00000000`00000000 : pcw!PcwpCollectQueryItem+0x8e fffff880`17a37680 fffff880`018cd611 : fffff880`17a378b8 00000000`00000008 00000000`0a45f328 fffff880`17a378b8 : pcw!PcwpCollectQuery+0xf7 fffff880`17a377a0 fffff880`018cdf06 : 00000000`00000004 fffff880`018cdeb2 d4004665`a887fc97 fffff8a0`02eb57a0 : pcw!PcwpIoctlCollect+0x3d fffff880`17a377d0 fffff803`efaa32ba : fffff880`018cdd8c fffffa80`06188e40 00000000`00224013 00000000`00000002 : pcw!PcwpFastIoDeviceControl+0x17a fffff880`17a37890 fffff803`efab88a6 : fffffa80`0d3b6b00 00000000`00000004 00000000`00000001 00000000`00000000 : nt!IopXxxControlFile+0x3d9 fffff880`17a37a20 fffff803`ef6cd453 : 00000000`00000000 fffffa80`0d3b6b00 fffff6fb`7dbed000 fffff6fb`7da00000 : nt!NtDeviceIoControlFile+0x56 fffff880`17a37a90 00000000`77862ad2 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!KiSystemServiceCopyEnd+0x13 00000000`1679f128 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0x77862ad2 FOLLOWUP_IP: pcw!PcwpCollectNotification+c7 fffff880`018cc1c3 8bf0 mov esi,eax SYMBOL_STACK_INDEX: 1 SYMBOL_NAME: pcw!PcwpCollectNotification+c7 FOLLOWUP_NAME: MachineOwner MODULE_NAME: pcw IMAGE_NAME: pcw.sys DEBUG_FLR_IMAGE_TIMESTAMP: 5010ab5c STACK_COMMAND: .cxr 0xfffff88017a368b0 ; kb BUCKET_ID_FUNC_OFFSET: c7 FAILURE_BUCKET_ID: 0x3B_pcw!PcwpCollectNotification BUCKET_ID: 0x3B_pcw!PcwpCollectNotification Followup: MachineOwner ---------
2697	I noticed that release-process.md refers in most places specifically to version 0.8.0, and in one place specifically to 0.5.1. This pull request fixes that.
2696	When compiling on util.h FreeBSD, the build fails with "va_list not declared." Including stdarg.h corrects this error and allows the build to succeed.
2695	When compiling on FreeBSD, the calculation here returns an unsigned int. This causes a compile-time error with std::min, which cannot compare signed with unsigned integers. This pull inserts an explicit cast, treating the calculated value as signed, keeping the compiler happy.
2693	As suggested in req #2048.
2690	bitcoin-qt 0.8.2rc1 and rc2 often gets stuck during shutdown. I have experienced this with Fedora 18 x86_64 native builds. In both of these hangs, kill -9 is required. bitcoind is unaffected by these hanging shutdown issues. __Type 1: Flushed X addresses to peers.dat Loops Forever__ warren [13:05:06] sipa: Looping "Flushed 12035 addresses to peers.dat 38ms" messages forever after *coin-qt is told to Exit. kill -9 required. sipa [13:05:22] something is blocking cs_main sipa [13:05:41] addrman functions without cs_main, so continues to dump peers to disk __Type 2 Hang__ addcon thread interrupt dumpaddr thread stop msghand thread interrupt net thread interrupt connection timeout opencon thread interrupt
2688	This is better memory management of the mining CReserveKey, anyway. Fixes issue#2687
2687	To reproduce (at least on my Fedora 17 laptop), start 0.8.2rc2 run getblocktemplate a few times, call stop. Here is the outcome in valgrind: ==17973== Thread 1: ==17973== Invalid read of size 4 ==17973== at 0x3BD3209B20: pthread_mutex_lock (pthread_mutex_lock.c:51) ==17973== by 0x4201E6: boost::recursive_mutex::lock() (pthread_mutex_scoped_lock.hpp:26) ==17973== by 0x423595: boost::unique_lock<AnnotatedMixin<boost::recursive_mutex> >::lock() (sync.h:22) ==17973== by 0x571047: CWallet::ReturnKey(long long) (sync.h:70) ==17973== by 0x571109: CReserveKey::ReturnKey() (wallet.cpp:1814) ==17973== by 0x4A2AB5: CReserveKey::~CReserveKey() (wallet.h:332) ==17973== by 0x3BD2638B80: __run_exit_handlers (exit.c:78) ==17973== by 0x3BD2638C04: exit (exit.c:100) ==17973== by 0x3BD262173B: (below main) (libc-start.c:258) ==17973== Address 0x191b3d40 is 352 bytes inside a block of size 840 freed ==17973== at 0x4A0736C: operator delete(void*) (vg_replace_malloc.c:480) ==17973== by 0x44AD0D: Shutdown() (init.cpp:115) ==17973== by 0x4560E0: AppInit(int, char**) (init.cpp:241) ==17973== by 0x418F39: main (init.cpp:254) ==17973== ==17973== Invalid read of size 4 ==17973== at 0x3BD32057A6: __pthread_mutex_lock_full (pthread_mutex_lock.c:145) ==17973== by 0x4201E6: boost::recursive_mutex::lock() (pthread_mutex_scoped_lock.hpp:26) ==17973== by 0x423595: boost::unique_lock<AnnotatedMixin<boost::recursive_mutex> >::lock() (sync.h:22) ==17973== by 0x571047: CWallet::ReturnKey(long long) (sync.h:70) ==17973== by 0x571109: CReserveKey::ReturnKey() (wallet.cpp:1814) ==17973== by 0x4A2AB5: CReserveKey::~CReserveKey() (wallet.h:332) ==17973== by 0x3BD2638B80: __run_exit_handlers (exit.c:78) ==17973== by 0x3BD2638C04: exit (exit.c:100) ==17973== by 0x3BD262173B: (below main) (libc-start.c:258) ==17973== Address 0x191b3d40 is 352 bytes inside a block of size 840 freed ==17973== at 0x4A0736C: operator delete(void*) (vg_replace_malloc.c:480) ==17973== by 0x44AD0D: Shutdown() (init.cpp:115) ==17973== by 0x4560E0: AppInit(int, char**) (init.cpp:241) ==17973== by 0x418F39: main (init.cpp:254) ==17973== bitcoind: /usr/include/boost/thread/pthread/pthread_mutex_scoped_lock.hpp:26: boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*): Assertion `!pthread_mutex_lock(m) failed. ==17973==
2686	my bit coin wallet is show uncofirmed transaction the first on is on 5-14-13 and now it has six uncofirmed one on it i back up my wallet. but now noting is going in. is there some way to fix this. thank you. by the way it bitcoin v.0.8.1-beta.
2685	Testing with v0.8.1-beta on Win7 64Bit. This link: bitcoin:141ZeS6cB6ijxXY6Tdjh9xBeBufNYNAWWu?label=pinballcoin.com&amount=1 Pays 1 BTC but I would expect it to pay 1 Satoshi according to the spec? This link: bitcoin:141ZeS6cB6ijxXY6Tdjh9xBeBufNYNAWWu?label=pinballcoin.com&amount=1X8 fails with a "URI can not be parsed" error. WARNING - Addresses are real as have to be to ensure you can click and test them. Spec assumed to be:
2684	I just missed the function to import a private key into Bitcoin-Qt. Okay, its possible through RPC but with pain. :) Why not adding a menu entry "import key" (or "import private-key")? There it should be possible to just copynpaste a private key string or even import a pk12 file.
2683	- integrates current translations from Transifex Standard translations pull, will update on a regular base.
2682	Write bestblock records in wallets: * Every 20160 blocks synced, no matter what (before: none during IBD) * Every 144 blocks after IBD (before: for every block, slow) * When creating a new wallet (new) * At shutdown (new) This should result in far fewer spurious rescans. To correct all previously missed rescans, we should probably also once change the bestblock record name (suggested by gmaxwell), to force a single rescan once for every wallet. As this is likely to be annoying for almost all, and most that have missed funds in the past have already done a full rescan already, this is perhaps controversial and not included in this pullreq. Should close #2676 (but I havent tested that).
2681	gitian build of contrib/gitian-descriptors/deps-win32.yml fails with the following and gets stuck. This patch adds psmisc which contains killall. The build is allowed to complete when these processes are dead. adding: miniupnpc/upnpcommands.h (deflated 76%) adding: miniupnpc/upnperrors.h (deflated 38%) adding: miniupnpc/upnpreplyparse.h (deflated 58%) + killall wineserver services.exe explorer.exe winedevice.exe bash: line 59: killall: command not found
2680	Add link to Github for Mac Update link to HomeBrew
2679	trivial change to the GUI: cannot send over 21000000btc as proposed in #2401 Using magic number doesnt seem right. Could we factor this out, together with ? And what about BitcoinUnits::parse() as well ?
2678	More to come...when I get around to them
2677	Remove some unnecessary copying and coins view cache layers in CreateNewBlock. This results in a >10x speedup for GBT for me, with a large mempool (poolsz >5000).
2676	Starting the client without a wallet.dat in the directory and generating one causes the client to spend a few minutes rescanning the blockchain (blockchain already downloaded). The chances of generating a key which is already used is so low, why waste time doing this?
2675	Transaction Address and Type not showed in Bitcoin-qt ![Screeshot](http://i.imm.io/16HvM.png) Its transaction [4e951a8251e70b0036852a786c862ed6aae5ecd3acb741b4a4823a2f0ddc376d](https://blockchain.info/tx/4e951a8251e70b0036852a786c862ed6aae5ecd3acb741b4a4823a2f0ddc376d) Ive no idea why it is so. Maybe damaged blockchain data on HDD? But `db.log` is empty. I started it with `-debug`, here [debug.log](http://pastebin.com/DFZ8wULv) Im using Windows 8 with Bitcoin v0.8.1-beta about transaction also doesnt show address ``` Status: 7475 confirmations Date: 04.04.2013. 05:27 Debit: -0.00024 BTC Debit: -0.00016 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00005055 BTC Debit: -0.0001 BTC Debit: -0.00000636 BTC Debit: -0.00005 BTC Debit: -0.01278688 BTC Net amount: -0.01395379 BTC Transaction ID: 4e951a8251e70b0036852a786c862ed6aae5ecd3acb741b4a4823a2f0ddc376d Debug information Debit: -0.00024 BTC Debit: -0.00016 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00008 BTC Debit: -0.00005055 BTC Debit: -0.0001 BTC Debit: -0.00000636 BTC Debit: -0.00005 BTC Debit: -0.01278688 BTC Transaction: CTransaction(hash=4e951a8251, ver=1, vin.size=19, vout.size=1, nLockTime=0) CTxIn(COutPoint(7f51e53614, 170), scriptSig=3045022000f1a42b1b3443f5) CTxIn(COutPoint(a1f5faaa2b, 11), scriptSig=3046022100a53624b246efc4) CTxIn(COutPoint(b9f85b6306, 12), scriptSig=3044022060b1e437937a45a7) CTxIn(COutPoint(8e91ae98c5, 2), scriptSig=3046022100ae116cacabbfe5) CTxIn(COutPoint(b3bc094b85, 3), scriptSig=3044022008b6c475b6d148d1) CTxIn(COutPoint(412c4e7ba6, 10), scriptSig=3046022100ecdc801f576326) CTxIn(COutPoint(52c969b300, 9), scriptSig=30450220412efb3d53d402ef) CTxIn(COutPoint(e3a34f771c, 9), scriptSig=3045022030890f79388b27a5) CTxIn(COutPoint(17ec4e3d18, 15), scriptSig=30440220494f6a76196b9a86) CTxIn(COutPoint(4122441323, 2), scriptSig=3045022057f3620c1550c1da) CTxIn(COutPoint(256f3819ff, 8), scriptSig=304402206ee486e3379a80e2) CTxIn(COutPoint(1c312e283c, 8), scriptSig=3046022100ef1a1bf46a13d4) CTxIn(COutPoint(6e20454482, 6), scriptSig=3045022004deb779471faf08) CTxIn(COutPoint(7ea97dfd45, 17), scriptSig=304402204b3b6c5aa2424787) CTxIn(COutPoint(3ed5396961, 62), scriptSig=3046022100b496e7472ef37c) CTxIn(COutPoint(4042646189, 239), scriptSig=3045022100cbe688b94ba2a7) CTxIn(COutPoint(5aa598d711, 336), scriptSig=30460221008276035b9b0aae) CTxIn(COutPoint(5ebda707bb, 175), scriptSig=3046022100ab154a12811bec) CTxIn(COutPoint(ddfec4cfb9, 1), scriptSig=30440220228bc2036549172d) CTxOut(nValue=0.01438379, scriptPubKey=OP_DUP OP_HASH160 9d3f4e238204) Inputs: Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false Amount=-0.00000001 BTC IsMine=false ```
2674	The code was fine, even rolling back to previous backups will not prevent crash Also re-installed app.. Crashed Thread: 0 Dispatch queue: com.apple.main-thread Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Application Specific Information: Assertion failed: (pfork != NULL), function SetBestChain, file src/main.cpp, line 1742. Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0 libsystem_kernel.dylib 0x94295a6a __pthread_kill + 10 1 libsystem_c.dylib 0x93417b2f pthread_kill + 101 2 libsystem_c.dylib 0x9344e4ec abort + 168 3 libsystem_c.dylib 0x9345cd2b __assert_rtn + 326 4 com.yourcompany.Bitcoin-Qt 0x000d1656 SetBestChain(CValidationState&, CBlockIndex*) + 2454 5 com.yourcompany.Bitcoin-Qt 0x000d3526 ConnectBestBlock(CValidationState&) + 598 6 com.yourcompany.Bitcoin-Qt 0x0011cbd7 AppInit2() + 16839 7 com.yourcompany.Bitcoin-Qt 0x000229e3 main + 7603 8 com.yourcompany.Bitcoin-Qt 0x0001f921 start + 53
2672	- this directly sets up all GUI elements that have testnet special-casing without first setting up main net stuff and chaning afterwards (titles, icons etc.) - also fixes 2 wrong icons shown during testnet usage on our toolbar Can you take a look if testnet icon is still shown imediately on Mac?
2671	See Subject.
2670	This adds an introduction screen that is shown when the client is first started in which the user can choose a data directory. It is also possible to force the intro screen to appear using command line argument `-choosedatadir`. The data directory is remembered in the QSettings. The user is warned that the client will download and store 10Gb of data. The intro screen shows how much space is available on the device that contains the chosen directory and warns if this is less than the 10Gb. To make it possible to translate the introduction dialog, the initialization sequence is changed so that translations are loaded before the data directory. This has the by-effect that it is no longer possible to specify a language in bitcoin.conf inside the data directory. Please help testing!
2669	Adds -v and --version options to bitcoind (or Bitcoin-Qt) executable in order to print the version number and exit. Currently the version can be discovered via -?, but that option gives a long usage message which isnt relevant if all you want to know is the version. (I can see sysadmins using this in scripts for leveling/upgrading bitcoind across multiple servers).
2668	my mail: cisbye.xue@gmail.com Satoshi v0.8.1-beta send bit coin to Mt.Gox, address: 1B5hFAx1xPw4b11cK5qgq19nZ3gDFRtnm9 send:13.969BTC fee:0.0005BTC follow is transaction info: : 0/ : 13-5-19 00:51 : Mt.Gox_2013-05-19_00:50 1B5hFAx1xPw4b11cK5qgq19nZ3gDFRtnm9 : -13.969 BTC : -0.0005 BTC : -13.9695 BTC ID: c5052ea52b4296f913661087773d6196a2b8e6b72798f765a064650a64ec15af a lot of debug.log info: stored orphan tx 55ff3888e4 (mapsz 6129) stored orphan tx 0d81c8103f (mapsz 6130) stored orphan tx 7dca5b62d7 (mapsz 6131) stored orphan tx f8f7aaa59f (mapsz 6132) ERROR: CTransaction::CheckTransaction() : vin empty ERROR: CTxMemPool::accept() : CheckTransaction failed Misbehaving: 89.253.67.184:8333 (0 -> 10) stored orphan tx fc70fd146b (mapsz 6133) received getdata for: tx 9a04e0fc33 received getdata for: tx 728fbc0449 Added 1 addresses from 46.4.107.236: 1811 tried, 13931 new CTxMemPool::accept() : accepted 95781b87b2 (poolsz 1907) CTxMemPool::accept() : accepted 27870ea21a (poolsz 1908) Added 1 addresses from 76.176.6.220: 1811 tried, 13931 new Added 1 addresses from 68.42.153.252: 1811 tried, 13932 new Added 1 addresses from 71.232.213.197: 1811 tried, 13932 new Added 1 addresses from 174.6.222.5: 1811 tried, 13932 new Added 1 addresses from 208.88.170.28: 1811 tried, 13933 new Added 2 addresses from 89.212.41.49: 1811 tried, 13934 new CTxMemPool::accept() : accepted 39b9d35554 (poolsz 1909) Added 1 addresses from 89.253.67.184: 1811 tried, 13933 new CTxMemPool::accept() : accepted facf1eec8e (poolsz 1910) CTxMemPool::accept() : accepted 99cc559f6f (poolsz 1911) received getdata for: tx 95781b87b2 Added 1 addresses from 208.88.170.28: 1811 tried, 13934 new Added 6 addresses from 212.92.137.104: 1811 tried, 13933 new CTxMemPool::accept() : accepted 362be25f1d (poolsz 1912) Added 1 addresses from 92.225.125.70: 1811 tried, 13933 new received getdata for: tx 95781b87b2 Added 1 addresses from 212.92.137.104: 1811 tried, 13933 new CTxMemPool::accept() : accepted 28a5356ee0 (poolsz 1913) received getdata for: tx ca3851f802 Added 1 addresses from 92.225.125.70: 1811 tried, 13933 new CTxMemPool::accept() : accepted 5a1c2c739c (poolsz 1914) Added 1 addresses from 76.176.6.220: 1811 tried, 13933 new CTxMemPool::accept() : accepted 9eb9ae64d8 (poolsz 1915) received getdata (5 invsz) CTxMemPool::accept() : accepted 6e43cd5ee2 (poolsz 1916) CTxMemPool::accept() : accepted 6fd5b9bc6e (poolsz 1917) received getdata for: tx 6e43cd5ee2 received getdata for: tx 6e43cd5ee2 received getdata for: tx 6e43cd5ee2 CTxMemPool::accept() : accepted eb7a5d7236 (poolsz 1918) received getdata for: tx 6e43cd5ee2 CTxMemPool::accept() : accepted da5454ac1e (poolsz 1919) Added 2 addresses from 94.242.208.149: 1811 tried, 13932 new CTxMemPool::accept() : accepted 8c30cabdb8 (poolsz 1920) CTxMemPool::accept() : accepted 7d5684b416 (poolsz 1921) CTxMemPool::accept() : accepted b9230d10c3 (poolsz 1922) Added 1 addresses from 212.92.137.104: 1811 tried, 13932 new received getdata for: tx b9230d10c3 received getdata for: tx b9230d10c3 CTxMemPool::accept() : accepted ed1f3c7e45 (poolsz 1923) received getdata for: tx 8c30cabdb8 CTxMemPool::accept() : accepted c66f4ee874 (poolsz 1924) CTxMemPool::accept() : accepted a8490fe177 (poolsz 1925) CTxMemPool::accept() : accepted 49c5ca1cfc (poolsz 1926) received getdata for: tx ed1f3c7e45 Added 1 addresses from 89.253.67.184: 1811 tried, 13931 new SelectCoins() best subset: 13.97 total 13.97 keypool added key 107, size=101 keypool reserve 7 Flushing wallet.dat Flushed wallet.dat 508ms accepted connection 178.18.90.41:43562 CommitTransaction: CTransaction(hash=c5052ea52b, ver=1, vin.size=1, vout.size=2, nLockTime=0) CTxIn(COutPoint(697ddd676a, 0), scriptSig=3046022100c99107112ec06f) CTxOut(nValue=13.96900000, scriptPubKey=OP_DUP OP_HASH160 6e9484164eca) CTxOut(nValue=0.00050000, scriptPubKey=OP_DUP OP_HASH160 4ab23a34d6be) keypool keep 7 AddToWallet c5052ea52b new WalletUpdateSpent found spent coin 13.97bc 697ddd676a6a79f257c855c22f13ab253f981274b5e35a0ce114a0c110938b0a NotifyTransactionChanged 697ddd676a6a79f257c855c22f13ab253f981274b5e35a0ce114a0c110938b0a status=1 NotifyTransactionChanged c5052ea52b4296f913661087773d6196a2b8e6b72798f765a064650a64ec15af status=0 NotifyTransactionChanged 697ddd676a6a79f257c855c22f13ab253f981274b5e35a0ce114a0c110938b0a status=1 AddToWallet c5052ea52b NotifyTransactionChanged c5052ea52b4296f913661087773d6196a2b8e6b72798f765a064650a64ec15af status=1 CTxMemPool::accept() : accepted c5052ea52b (poolsz 1927) Relaying wtx c5052ea52b NotifyAddressBookChanged 1B5hFAx1xPw4b11cK5qgq19nZ3gDFRtnm9 Mt.Gox_2013-05-19_00:50 isMine=0 status=0 Added 1 addresses from 89.212.41.49: 1811 tried, 13930 new Added 1 addresses from 76.176.6.220: 1811 tried, 13930 new Bitcoin version v0.8.1-beta (2013-03-17 15:35:36 -0400) Using OpenSSL version OpenSSL 1.0.1c 10 May 2012 Startup time: 2013-05-18 16:51:29 Default data directory /Users/huichen/Library/Application Support/Bitcoin Used data directory /Users/huichen/Library/Application Support/Bitcoin Using 8 threads for script verification init message: Verifying wallet integrity... dbenv.open LogDir=/Users/huichen/Library/Application Support/Bitcoin/database ErrorFile=/Users/huichen/Library/Application Support/Bitcoin/db.log Bound to [::]:8333 Bound to 0.0.0.0:8333 init message: ... Opening LevelDB in /Users/huichen/Library/Application Support/Bitcoin/blocks/index Opened LevelDB successfully Opening LevelDB in /Users/huichen/Library/Application Support/Bitcoin/chainstate Opened LevelDB successfully LoadBlockIndex(): last block file = 61 LoadBlockIndex(): last block file: CBlockFileInfo(blocks=168, size=29222135, heights=236619..236784, time=2013-05-17..2013-05-18) LoadBlockIndex(): transaction index disabled LoadBlockIndex(): hashBestChain=00000000000000da9ae3ebbb93cdd987095b31d0c9d75c5794e357a770db22c8 height=236784 date=2013-05-18 16:46:07 init message: Verifying block database integrity... Verifying last 288 blocks at level 3 No coin database inconsistencies in last 140 blocks (49934 transactions) block index 288745ms init message: ... nFileVersion = 80100 wallet 1846ms init message: ... init message: ... Loaded 15742 addresses from peers.dat 53ms mapBlockIndex.size() = 236794 nBestHeight = 236784 setKeyPool.size() = 100 mapWallet.size() = 8 mapAddressBook.size() = 7 send version message: version 70001, blocks=236784, us=0.0.0.0:0, them=0.0.0.0:0, peer=127.0.0.1:0 ThreadDNSAddressSeed started Loading addresses from DNS seeds (could take a while) ThreadMapPort started ThreadIRCSeed started ThreadIRCSeed exited
2666	Since Github is used for staging I thought it would be nice to make some of the docs a little bit more readable. If people are happy with the markdown docs, Ill continue to make improvements.
2665	
2663	*_t types are not defined. Swap for unsigned int and unsigned char etc.
2662	For use in P2Pool we not need "data" fields. We work on hashes. Maybe add optional bool to disable full output? This would decrease GBT much.
2661	
2660	This (nearly) doesnt change fee rules at all: * To make it into the fee transaction area, the dPriority comparison changed from < to <= * We now just ignore transactions > MAX_BLOCK_SIZE/4 instead of doing some calculations to require increasingly large fees as size increases. Note that fee rules need completely redone anyway, but since I need to be able to read this crap, I figured Id fix it for anyone else...
2659	![bitcoin error](https://f.cloud.github.com/assets/1612927/516362/3c71c2cc-beac-11e2-96ed-54fe014701a4.jpg) I was doing some stress test on my bitcoin-qt client on testnet, so I decided to create about 70000 address and after this I created about 15000 transactions. The addresses and the transactions was created ok, but only a few transaction was confirmed. As I was not sure what was happening, I decided to close the program and reopen it rescanning the blockchain to see how the client will behave under this conditions (Used the command "bitcoin-qt.exe -testnet -txindex -reindex" ). Well, the gui become too unresponsive (about 10 seconds frozen and then processed the Gui Messages and become unresponsive again for another 10 seconds), but after rescanning about 20000 blocks the above message appear. I closed the program and reopened with the command "bitcoin-qt.exe -testnet" the rescan continued from where it stoped when the crashes happened. But after another 20000 blocks the message appeared again. Well, this message appeared more two times (when was about 12000 and about 11000 blocks left), after this all went well and the reindex finished without more crashes. So, any Ideas why this happenend? Im using Windows XP SP3, intel core 2 duo and 4 GB of memory and bitcoin 0.8.1. Regards
2658	Tested with BitcoindComparisonTool (which generates a large fork) and -alertnotify script successfully notified me and I get the relevant warnings in getinfo Youll get the usually cryptic error: "errors" : "Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade." and alertnotify will be called with Warning: Large-work fork detected. You may need to upgrade, or other nodes may need to upgrade.
2657	
2655	Its possible that OpenSSL might not be not linked correctly after installation via Brew, and if this hasnt been remedied with "brew force" then you could unknowingly be building with OSXs outdated OpenSSL.
2654	Can someone whos currently better at programming make a proper package for bitcoin here:
2652	This needs to be pulled before tagging 0.8.2 final release.
2651	People companying about txfees are not shown in the first question (#1715, #1714) if funds should be sent. This pull will calculate and include the txfee in the sendcoins question messagebox.
2650	Package managers like Matt Caraldo (https://launchpad.net/~bitcoin/+archive/bitcoin) should now include the new png icons in their bitcoin linux .deb files. The current xpm file bitcoin80.xpm (80x80px) was deleted because it contains a non-stamdard size. Ive testes with png files and did figure out the png files as icons will resize proper while xpm files will end up in non-resizing menu items which then can result in gfx bugs like reported with #2543. I recommend to use png files as pixmaps in upcoming linux software packages. - new xpm resources for different linux window managers - new png files for autoresizing on different linux window managers - favicon with new logo - window .ico with new logo
2649	- integrates current translations from Transifex - new translation: af_ZA Please merge right BEFORE the next 0.8.2 release (next RC or final), Ill keep this updated.
2648	- adds a reindex dialog for Bitcoin-Qt to change -txindex without the need to supply -reindex - now also does a -reindex, when removing the -txindex switch
2647	It seems to be controversial, but one could consider "bitcent" more useful/usual then mBTC.
2645	Instead of building a full copy of a CTransaction being signed, and then modifying bits and pieces until its fits the form necessary for computing the signature hash, use a wrapper serializer that only serializes the necessary bits on-the-fly. This makes it easier to see which data is actually being hashed, reduces load on the heap, and also marginally improves performances (around 3-4us/sigcheck here). The performance improvements are much larger for large transactions, though. The old implementation of SignatureHash is moved to a unit tests, to test whether the old and new algorithm result in the same value for randomly-constructed transactions.
2644	Remove the pnext pointer in CBlockIndex, and replace it with a vBlockIndexByHeight vector (no effect on memory usage). pnext can now be replaced by vBlockIndexByHeight[nHeight+1], but FindBlockByHeight becomes constant-time. This also means the entire mapBlockIndex structure and the block index entries in it become purely blocktree-related data, and independent from the currently active chain, potentially allowing them to be protected by separate mutexes in the future.
2643	After the splash screen, it appears the main windows, but thoroughly empty. rpc works fine if started with -server=1, but you cant stop the program. debug.log looks fine, rpc order to stop gets there, but is ignored. Environment is a minimal debian wheezy i386 vm with fluxbox, and without network. bitcoin-qt 0.8.1 works fine there, and both versions of bitcoind too.
2642	At startup, check that the expected genesis is loaded. This should prevent cases where accidentally a datadir from the wrong network is loaded (testnet vs mainnet, e.g.). This should at least partially #2547, by giving a clearer and sooner error message.
2641	Reported on the bitcoin-development mailinglist: Testnet glitch, something broke... Fired up 0.8.2rc, and .... wheres the coins? Wheres the blocks? I get a new empty datadir/testnet3 subdirectory. bitcoin-qt.exe -datadir=c:\testnet (with a testnet=1 bitcoin.conf file option in that directory) stored wallet/blocks/chainstate in the root with previous versions. Now the root datadir data is ignored (except the config file) and a new hierarchy was created in subdirectory [b]/testnet3[/b]. So whats happening? This looks to be done by ... after searching the code for the change and then finding the commit. 1 day from opened to committed, released six days later... no changelog. The datadir previously worked as I expected with both bitcoin-qt and bitcoind interacting with no problems, when simply specifying a command-line datadir, so I dont see the bug. I can see how the previous behavior might be dangerous if the config file was removed. I just did that, and theres a cool freakout where my testnet wallet balance looks like real BTC and Bitcoin tries to reorg 67662 blocks starting from the genesis block. After receiving real block 73354 per debug log, a nice unrecoverable crash: "Assertion failed!" File: src/main.cpp Line 1745 Expression: pfork != NULL This needs to be added to the changelog, since dropping in this binary will break testnet stuff if anybody is using Bitcoin this way for their testnet faucet, etc: " * testnet data now stored in testnet3 subdirectory, enforced even when specifying datadir on command line (manually move your data first)"
2640	![bildschirmfoto 2013-05-11 um 20 04 17](https://f.cloud.github.com/assets/178464/491872/45c10b4e-ba65-11e2-914e-dfb349b8e01a.png) Version is 0.8.0 instead of 0.8.2. Could be my fault because of pull #2532 but version should be taken from bitcoin-qt.pro (VERSION on line 4).
2638	Modified the build instructions to better separate MacPorts and HomeBrew and to build Qt4 on each. Also, some general reStructuredText cleanup.
2637	I was thinking about an UI feature to reminds people that they need to make a new backup. It would be counter that starts at the keypool size of 100 and decreases every time that a new key is generated. There is a reset button (alternatively, this can be triggered by "Backup wallet...") to reset it back when a backup is made. It could display a big warning when the number of "safe keys" falls below a certrain threshold (say, 10). This number could be stored in the wallet itself, or externally (Im not sure what is best).
2636	QT Creator does not run on 32 bit OS X (eg Snow Leopard). QT4 needs to be ported.
2635	Compiling on my OSX 10.6 build machine, I get: Undefined symbols: "boost::chrono::steady_clock::now()", referenced from: boost::cv_status boost::condition_variable::wait_for<long long, boost::ratio<1ll, 1000000000ll> >(boost::unique_lock<boost::mutex>&, boost::chrono::duration<long long, boost::ratio<1ll, 1000000000ll> > const&)in bitcoinrpc.o Linking against the boost_chrono fixes the issue. Windows builds already link against boost_chrono; Linux doesnt, but compiles (on pull-tester / gitian, at least).
2634	Upon closing the Bitcoin-QT window using the (x) in the top left of the title bar, the Application stays open as per. usual mac app behavior, but you have no way to re-open the window belonging to the app.
2633	This adds -DBOOST_CHRONO_HEADER_ONLY to the makefiles, to fix a compiler error I ran across doing pre-0.8.2 builds in my OSX 10.6 build environment (and that I saw reported by other people).
2632	Matt Corallos bitcoind/bitcoinj comparison tool relies on a patch that sets difficulty to zero, thus ensuring blocks can be found instantly without any delay. It also drops the subsidy halving interval so that can be tested and makes a few other tweaks. This series of patches creates a new CChainParams abstraction that hides various things that vary between main, test and regression test networks. It then adds a regtest mode triggered by the -regtest flag that disables external connections and uses the "insta-block" rule set. Also, the miner thread will shut down once it finds a block, meaning you can generate a single block from the command line on demand by running ./bitcoind -regtest setgenerate true This change is incomplete - some things like DNS seeds, checkpoints and difficulty transition formulas arent refactored out yet. However I wanted to get feedback on the approach before continuing, and the current code is useful even though theres still more refactoring to go. Signed off by: Matt Corallo
2630	- integrates current translations from Transifex Ill keep this updated until 0.8.2 is released. Please merge right BEFORE 0.8.2 will be released into RC-phase (as it feels this is happening rather soon now).
2629	A `base_uint` used to be made of an array of `unsigned int`s. This works fine on most platforms, but might not work on certain present or future platforms. The code breaks if an `unsigned int` is 16 or 64 bits, so it might pay to be specific. Also changed "u" to "you" in the comment text.
2628	This way users can select the drive and directory where the blockchain will be kept.
2627	Mobile internet users with a monthly download quota are complaining because the blockchain quickly depletes that quota. Some of the beginners are unaware about the amount of data that needs to be downloaded at the first run - because not everyone reads through the docs - so a warning would be nice before the download begins. For example: Warning ~9GB needs to be downloaded at the first run. Continue? Thank you for the great work.
2625	New method in bitcoinrpc: RunLater, that uses a map of deadline timers to run a function later. Behavior of walletpassphrase is changed; before, calling walletpassphrase again before the lock timeout passed would result in: Error: Wallet is already unlocked. You would have to call lockwallet before walletpassphrase. Now: the last walletpassphrase with correct password wins, and overrides any previous timeout. Fixes issue# 1961 which was caused by spawning too many threads. Test plan: Start with encrypted wallet, password foo NOTE: python -c import time; print("%d"%time.time()) ... will tell you current unix timestamp. Try: walletpassphrase foo 600 getinfo EXPECT: unlocked_until is about 10 minutes in the future walletpassphrase foo 1 sleep 2 sendtoaddress mun74Bvba3B1PF2YkrF4NsgcJwHXXh12LF 11 EXPECT: Error: Please enter the wallet passphrase with walletpassphrase first. walletpassphrase foo 600 walletpassphrase foo 0 getinfo EXPECT: wallet is locked (unlocked_until is 0) walletpassphrase foo 10 walletpassphrase foo 600 getinfo EXPECT: wallet is unlocked until 10 minutes in future walletpassphrase foo 60 walletpassphrase bar 600 EXPECT: Error, incorrect passphrase getinfo EXPECT: wallet still scheduled to lock 60 seconds from first (successful) walletpassphrase
2624	-Changed version numbers to match what is quoted in src/makefile.mingw -Removed reference to jam 3.1.18 because we are making "bjam.exe" with "bootstrap.bat mingw" command
2623	- updates bitcoin_en.ts and bitcoinstrings.cpp - integrates current translations from Transifex
2622	Updated some broken links in the instructions
2621	...eadability.
2620	
2619	Hiding commands in the output of `help` based on users current configuration (the wallet is encrypted or not) can be confusing. It doesnt seem to make sense to hide basic documentation from the user in this way.
2618	This pull request are easy to audit changes, other clean up & makefile modification (remove unsupported -Wl,-z,relro in LDHARDENING, add/mod libs) are still required. on my build env, I have to explicitly specify std::map for every map, and disable literals in c++11, see which can be done via this batch hack: ``` sed -i "s/map</std::map</g" *.cpp *.h sed -i "s/std::std::map</std::map</g" *.cpp *.h sed -i "s/multistd::map</multimap</g" *.cpp *.h sed -i "s/limitedstd::map</limitedmap</g" *.cpp *.h sed -i "s/\"PRI/\" PRI/g" *.cpp *.h ``` then the code will work with either CXXFLAGS=-std=c++11 or unmodified CXXFLAGS(no c++11 enabled). the remaining patch for makefile.unix:
2617	- updates bitcoin_en.ts and bitcoinstrings.cpp - removes bitcoin_se.ts - adds bitcoin_ar.ts - integrates current translations from Transifex
2616	Ive recreated a branch representing the original LevelDB from which Bitcoin based its copy (it was version 1.7.0 from October 2012), and reapplied the commits from Bitcoin using cherry-pick. It stands in its own repository now so that anyone can use LevelDB with the fixes that Bitcoin applies. It has a reconstituted commit log so that it is a "true" fork from the original Google repository, and that regular Git commands will work. This pull request removes the detached leveldb sources from the Bitcoin repository and adds them back using "git-subtree", which retains the commit log for the entire LevelDB branch from which Bitcoin started its fork. Using this method it will be possible to both submit Bitcoins LevelDB changes back to the upstream (which resides on Google code) and cherry-pick or merge newer branches from LevelDB back into the Bitcoin code base. All of this was done using the git-subtree command (instead of git-submodule which I hate). The repository containing Bitcoins version of LevelDB is located here, in the branch bitcoin-fork Now, anyone can use LevelDB and benefit from the changes that Bitcoin provided. Hopefully, this will make it easier for Bitcoin developers to merge improvements and fixes from the upstream LevelDB back into Bitcoin.
2615	...e notifications - if 10.8, use user notification center, if <10.8, use growl why: - Growl is since 2.0 no longer free available (needs to be purchased for ~2$) and i think bitcoin should have at least a 2nd way for users who want to use free software or a free alternative (notification center is includes in 10.8+)
2614	A green testnet splashscreen with a normal, orange dock icon looks strange and can confuse users.
2613	- Launch-At-Startup implementation for mac - Remove "Window" tab in settings
2611	Not sure if that is a real bug. I installed bitcoind and ran it on linux as normal user to initialize everything and to create a .bitoind folder in my /home/user/ . Later I started it again, this time with a leading sudo command. Everything seemd to work, but some files in the chain database now belonged to root:root. When restarting bitcoind as a normal user, I get the following: "Error opening block database. Do you want to rebuild the block database now?" I suggest that the program should somehow prevent the database from being corrupted in this use case, for example by creating a new .bitcoind directory in a folder dedicated to root.
2610	So we stop getting pull requests (like #2604) fixing problems with disabled Script opcodes. A hard fork would be required to re-enable these, and if we ever did that wed require extensive review and testing. I double-checked to make sure the script_invalid.json unit tests make sure that the disabled opcodes are handled properly (script invalid even if the disabled opcodes are in the unexecuted branch of an OP_IF); they do.
2609	
2608	should fix #2605, retest please.
2607	When debugging another issue, I found a hang-during-startup race condition due to LoadWallet calling SetMinVersion (via LoadCryptedKey). Writing to the file that youre in the process of reading is a bad idea.
2606	Bitcoin-Qt could core dump if application initialization failed in certain ways. I double-fixed this: 1) qt/bitcoin.cpp now shuts down core threads cleanly if AppInit2 returns false 2) init.cpp now exits before StartNode() if strErrors is set (no reason to StartNode if were just going to exit immediately anyway). Tested by triggering all of the various ways AppInit2 can fail, either by passing bogus command-line arguments or just recompiling tweaked code to simulate failure. This is a partial fix for #2480
2605	Steps to reproduce: 1. Create an empty data directory with a testnet bitcoin.conf; e.g. mkdir /tmp/d echo "testnet=1" >> /tmp/d/bitcoin.conf echo "rpcuser=abc" >> /tmp/d/bitcoin.conf echo "rpcpassword=def" >> /tmp/d/bitcoin.conf 2. Run Bitcoin-Qt with -datadir=/tmp/d You get a nice green splashscreen, BUT a wallet.dat and blockchain files directly in /tmp/d, not in /tmp/d/testnet3/ bitcoind behaves correctly.
2604	In C/C++, signed integer overflow is undefined behavior, and some compilers (such as gcc) will optimize away checks like the one that was present in EvalScript; specifically: int nBegin = ...; int nEnd = nBegin + size; if (nBegin < 0 || nEnd < nBegin) will get compiled into: if (nBegin < 0 || size < 0) This patch changes the overflow check to avoid relying on the behavior of signed integer overflow, by checking for size > INT_MAX - nBegin (and computing nEnd after the check).
2603	It is possible to have a wallet.dat file without any bestblock record at all (if created offline, for example), which - when loaded into a client with a up-to-date chain - does no rescan and shows no transactions. Also make sure to write the current best block after a rescan, so it isnt necessary twice.
2602	* Bugfix: output the correct best block hash (during IBD, it can differ from the actual current best block) * Add height to output * Add hash_serialized, which is a hash of the entire UTXO state. Can be useful to compare two nodes. * Add total_amount, the sum of all UTXOs values.
2601	Previously, JSON-RPC clients accessed URI "/", and the JSON-RPC server did not care about the URI at all, and would accept any URI as valid. Change the JSON-RPC server to require URI "/" for all current accesses. This changes enables the addition of future interfaces at different URIs, such as pull request #1982 which demonstrates HTTP REST wallet download. Or, a future, breaking change in JSON-RPC interface could be introduced by serving JSON-RPC calls from new URI "/v2/".
2600	This pull request changes a few things in key.h/key.cpp * CKey is no longer a kitchen-sink for "anything ECDSA related", but just an object representing a private key. * Operations that dont use a private key are moved to CPubKey (which is now a fully-featured object representing a public key). * All actual OpenSSL-interaction code is moved to an internal class in key.cpp. * Representation-wise, CKey now funcions as CSecret (which is gone) with an fCompressed built-in (so no keeping separate booleans necessary anymore). * CKey and CPubKey simply encapsulate static byte arrays, and can be created/moved/copied cheaply. * Practical upshot: no need to move key/pubkey data from/to CKey anymore before doing something useful with it. The reason for writing this is preparing the code to more easily change ECDSA implementation (such as maybe my secp256k1 library at some point), but it seemed useful enough to try to get reviewed and perhaps merged independently of that.
2599	Instead of killing a connection when the receive buffer overflows, just temporarily halt receiving before that happens. Also, no matter what, always allow at least one full message in the receive buffer (otherwise blocks larger than the configured buffer size would pause indefinitely). Fixes #2597.
2598	- add a check that requested Winsock version is available - update some strings - remove -gen=0 from help-message as this is default
2597	Bug reported via email, I havent tried to reproduce: When You use -maxreceivebuffer=100 then You will get stuck at height #231402. It refuses to download any higher unless you take out this command switch.
2596	This pull adds ScanForDoubleSpends to check incoming transactions for double spends of wallet transactions. Flagged wallet transactions give the following warnings: 1) in RPC the transaction gets the "doublespend" property 2) todo later: Qt should highlight it as a possible fraud attempt 3) confirmations is held at 0 for 200 blocks to keep it from being spent The 200 block hold is a protection against double spends during forks. The client is normally oblivious to double spends in other forks because it only looks at the fork its on. ScanForDoubleSpends can compensate for that weakness because it can detect double spends from other forks and put at-risk transactions on hold.
2595	This is a very minor bug: we tried to send out a "version" message in CNodes constructor, which meant also for pnodeLocalHost, causing a "socket send error 9" under Linux or "socket send error 10038" in Windows. Fixes #2587
2594	![image](https://f.cloud.github.com/assets/3141083/443172/f5cdb720-b174-11e2-972f-4f85fea8bb8e.png) I installed bitcoin for the first time yestarday. When i started the application it immediatly started to sync with the network and everything seemed fine. I therefore proceeded and made a transaction to another account to my newly created wallet. After a while though the application suddenly crashes with that message. And now when i startup the app it crashes after a few seconds with the same error message. In the bitcoin application statusbar it says reindexing blocks on disk. After receiving this error i get all kinds of errors on my machine. And when i restart windows it will try to repair the disk. What can i do. How can i transfer the receiving address to another wallet?
2592	These commands dump/import (all) wallet keys in a human-readable format that is intended to be compatible with Bitcoin Wallet for Android and Multibit. It infers safe lower bounds on the birth time of keys based on wallet transactions, and only rescans the relevant part of the chain after importing. It supports keypool/change/unlabelled/labelled addresses, and restores those correctly. When inferring birth times, it takes crediting into account via pay-to-pubkey, pay-to-pubkeyhash, multisig (even when not all keys are available) and P2SH. P2SH scripts in the wallet are not yet dumped to the file. Ill need to talk to the other client authors about that first. I think we should encourage entire-wallet export/import above fiddling with individual keys, so something like this makes that easier and more transparent. Note: this is intended for 0.9 or later.
2591	Without paying attention, I restored wallet.dat from a backup with poor metadata preservation and left it root:root, effectively doing: chown root:root ~/.bitcoin/wallet.dat Starting bitcoind yielded the somewhat misleading: Error: Error initializing database environment /home/zak/.bitcoin! To recover, BACKUP THAT DIRECTORY, then remove everything from it except for wallet.dat Not the end of the world suggesting the user re-download the blockchain, but it wont actually help here.
2590	At current if your .bitcoin directory is a symlink (which is becoming more likely as the size of the blockchain increases) then bitcoind will fail to start. This is because fs::create_directory() fails if it is called on a symlink. This patch resolves the symlink and stores it in the path cache prior to creating the directory, ensuring that operations are always carried out against the correct location and work as expected. SIDE-EFFECT: Because the fully resolved path is stored in the path cache any error messages that are returned which include the path now show the canonical (i.e. resolved) path. I think that this makes more sense for users and developers, however if this is not desired it would be possible (albeit somewhat more expensive) to only use the canonical path for the create_directory() call and leave the path unresolved elsewhere.
2589	This pull request bundles a few commits with changes that I wrote to discover and fix problem with LevelDB I/O errors after the maximum number of open files was reduced to 64. The first one improves an error message, the second makes sure closing files succeeds, and the third fixes the actual issues (table files being opened by different threads simultaneously).
2588	- explicitly set the default of all GetBoolArg() calls - rework getarg_test.cpp and util_tests.cpp to cover this change - some indentation fixes
2587	Anyone around here that also has this error in his debug.log? MSDN is telling this about 10038: WSAENOTSOCK 10038 Socket operation on nonsocket. An operation was attempted on something that is not a socket. Either the socket handle parameter did not reference a valid socket, or for select, a member of an fd_set was not valid.
2586	WSAStartup should be called before using any other socket functions. BindListenPort is not called if not listening, thus move it to init. Closes #2585.
2585	From what I understood, WSAStartup should be called on windows before using any of the other socket functions. According to : The WSAStartup function must be the first Windows Sockets function called by an application or DLL. However, it is called in BindListenPort which is only called (from init) when fNoListen is not set. Can a windows dev (@diapolo?) comment on this? Should we move the WSAStartup call some place else?
2584	Squashed version of #2528
2583	Using ! on a non-zero value will always return 0, so the statement is currently ineffective. If this is not what is meant, the respective code in ConnectSocketDirectly to set the socket back to blocking should be removed entirely, as it currently behaves differently for windows and linux. Also remove some duplicate and superfluous code in other places.
2582	This value gets stale really quickly, do not hardcode it into a message. Completely remove it for now. Later on, a mechanism will be added to determine fees based on the mempool. Closes #2576
2581	In the latest translation update a new language was added, bitcoin_se, but it looks like the required bitcoin_se.qm file is missing from the /locale/ dir
2580	As the actual error message currently gets lost.
2579	The method listtransactionsofblock lists all transactions (from the wallet) which are in block with blockhash <hash> It can be used this way: (pseudo-code) ``` ScanTransactions() { Database.TransactionBegin() long lastBlock = BitcoinRPC.getLastBlockNr() long lastScannedBlock = Database.getLastScannedBlock() while (lastBlock - lastScannedBlock > targetConfirms) { lastScannedBlock++; string hash = BitcoinRPC.getHashOfBlock(lastScannedBlock) list<Transaction> list = BitcoinRPC.getTransactionsOfBlock(hash) for (Transaction t : list) { // do something // at this point, you can absolutely be sure to see only transactions // with <targetconfirms> confirms. // and you only have to scan each block exactly once } } Database.saveLastScannedBlock() Database.TransactionCommit() } ``` This is an easy example how payments can reliably be received. Explained here:
2578	deleted because of mistakes done in the push process
2577	This is a quick, safe fix for transaction fee handling. A riskier, more complicated fix still needs to happen, but will take more time to code/test/etc. Two motivations for this pull: First, to discourage people from bloating users wallets and the UTXO set with tiny outputs. This pull defines uneconomic dust as 54.3 uBTC (5430 satoshis, about $0.007 at current prices), and treats any transaction with outputs less than 5430 satoshis as non-standard (wont be relayed, wont be mined). 5430 satoshis is derived from the cost (in fees) to spend a TxOut/TxIn. See for proportion of recent outputs this will (eventually) affect. Second, we have no idea what will happen to Bitcoin prices or transaction volume / competition for space in blocks. So this patch lets users and miners specify the minimum transaction fees at startup, using the -mintxfee / -mintxrelayfee options (which Im intentionally leaving undocumented for now). The dust/nonstandard test is based on the -mintxrelayfee. Qt and RPC both now tell the user why CreateTransaction fails, if it fails; Qt error reporting is a little wonky (try to send one satoshi, and you get two modal dialog boxes, one after the other; I dont care enough to try to fix that). Note: I spent several hours trying, and failing, to create unit tests for this patch; CWallet::fFileBacked is ignored by several of the wallet routines used by CWallet::CreateNewTransaction. In the end, I decided thatrefactoring CWallet to support unit testing would be much more extensive and riskier than these changes.
2576	I dont think this still makes sense: ![Screenshot from 2013-04-26 13:51:13](https://f.cloud.github.com/assets/126646/430400/e4909ff0-ae67-11e2-9267-9df122862126.png) We could just remove the recommendation, or base it on some constant in the bitcoin source, but it should not be hardcoded in a message.
2574	Im developing a bitcoin client. Clearly there are bugs in my code :-) I think it would be useful to define a new message (lets call it "mm", as "Misbehaving Message") used to alert the Misbehaving node that its Misbehaving (and in which way). In this way if there is a bug its easier to trace it. The node that receives this message could log it and so it would be clear why sometimes the connection is dropped. As it is, if a node bans you you only see a dropped connection, but you dont know why. Considering the unrecognized commands are simply discarded in ProcessMessage, I dont think it would break anything.
2573	Once youve compiled Bitcoin-Qt on osx, git shows the files inside the Bitcoin-Qt.app/Contents/ dir, info.plist, PkgInfo, etc. Adding Bitcoin-Qt.app to .gitignore will prevent this.
2572	solve issue #2529
2571	In main.h I see the following ``` static uint256 CheckMerkleBranch(uint256 hash, const std::vector<uint256>& vMerkleBranch, int nIndex) { if (nIndex == -1) return 0; BOOST_FOREACH(const uint256& otherside, vMerkleBranch) { if (nIndex & 1) hash = Hash(BEGIN(otherside), END(otherside), BEGIN(hash), END(hash)); else hash = Hash(BEGIN(hash), END(hash), BEGIN(otherside), END(otherside)); nIndex >>= 1; } return hash; } ``` Im just wondering what the ``` nIndex >>= 1;``` is supposed to be there for. As far as I know, it doesnt do anything.
2570	Ive got a testnet wallet that causes this assertion failure when I turn on CPU mining: Assertion failed: ("mempool transaction missing input" == 0), function CreateNewBlock, file main.cpp, line 4233. Im guessing it is a no-longer-valid-because-of-a-re-org transaction, but the wallet code shouldnt be adding invalid transactions to the memory pool.
2569	Closes #2408.
2568	As the default can be too low, especially on OSX.
2567	It would be nice if the GUI were to bind a key (like F5) so that whenever it was pressed, the GUI would immediately update. This would be especially helpful when the GUI seems to freeze.
2566	This solves the issue where no default key can be added after -salvagewallet.
2565	Hi all, Ive been coping with reliably receive transactions which have a confirmation counter of at least 2 for a couple of days. After different failings, I found out about the listtransactionsofblock RPC method which gives all transactions after a given block hash. It also gives the last block hash back which can be used in the next iteration. The problem is that it gives me back unconfirmed transactions which were received *after* the last block which are worthless because they are unconfirmed. Moreover, it gives me these unconfirmed transactions over and over again when passing the lastblock"-hash to the method when there is no newer block. The main problem is that the output of the method is not constant although using the same hash, so one cant be sure there arent more transactions coming ... My proposal would be to implement a RPC-method which is named "listtransactionsofblock"giving me all transactions for which my wallet has got addresses. Naturally, this method would only return transactions with at least one confirmation. The number of confirmations can be counted easily by subtracting the block-number from the total number of blocks. It also should give back the next block-hash in the blockchain for iterating through the chain when a new block appears. Perhaps, the nextblock-hash could be dependend from the number of confirmations. So, the loop processing the transactions would constantly stay 2 or 3 or 6 blocks behind the block-chain head. I would love this feature because doing it this way would assure you to only watch every transaction within a block *once*. What do you think about it? All the best, shufps
2564	- make "&Export" translatable - fix some includes - small formatting changes
2563	- new language "se" - update bitcoin.qrc and bitcoin_en.ts - fetch current translations from Transifex
2562	I have not installed any Bitcoin version. So, I got the most recent installer (Windows .exe, version 0.8.1) using Firefox and downloaded it. I clicked through all the steps, **using the default directory**, and got to the install step. I got an odd dialog saying that the file could not be written (wut?): ![bitcoin-error](https://f.cloud.github.com/assets/1981364/421481/a768b8c4-ad09-11e2-94c0-935e0951434c.png) So, I clicked "Retry". The dialog closed, and an identical dialog popped up immediately. After spamming the "Retry" for some time, I clicked "Ignore". An identical dialog popped up, with the only thing that changed being the name of the file. Identical dialogs popped up for each file that was to be installed. (Picture coming soon)
2561	I think we are missing that one, could it help us with the recent LevelDB problems in any way?
2559	Added a missing manpage and corrected some minus signs that were used as hyphens.
2558	* After clean shutdown, delete the database/ subdir. This means upgrading/changing the BDB dir wont kill you anymore because of incompatible logs. * In case opening the database environment fails, move database/ to database.$TIMESTAMP.bak, and try again. * Do not advise the user to nuke his datadir anymore - theres no point in doing so (closes #2488). * Drop double opening of the environment (includes #2333).
2557	I dont notice any significant IBD performance degradation using this.
2556	
2555	In my wallet I have 0.005 BTC. Im trying to send these to another address. I made sure that the transaction fees are set to zero: Yet when I try to send them, I get this erroneous message: Please fix this bug as soon as possible so that I can send my bitcoins.
2554	Similar to the osx-makefile patch, when applied this patch file will update the include paths for users who have installed dependencies using HomeBrew.
2553	- removes our NewThread() function an replaces these calls with boost::thread with our TraceThread template - make ThreadCleanWalletPassphrase() use an int64 as parameter - remove ExitThread() function - fix THREAD_PRIORITY_ABOVE_NORMAL for non Windows OSes
2552	
2550	bintcoin-qt v0.8.0-228-gce8de31-dirty-beta randomly crashes while sending a transaction. The created transaction is not send to the network, but is inside the transaction tab visible. The bitcoins are subtracted from wallet. Full Crashlog: **EDIT:** Interestingly the transaction has just been verified - accepted in a later block. **EDIT - AGAIN:** Now bitcoint-qt crashed again and does not start any more it allways crashes during startup Crashlogs: Im not sure what the problem is, hopefully someone can tell me more.
2548	Is something like ``` bitcoin-qt -starttransaction 1somecoolbitcoinaddress ``` possible? Should start bitcoin interface and provide the transaction screen prefilled with the address. User may enter a value and optionally description (might be also provided on command line) and send transaction. If this is not possible yet, this ticket is a Feature Request :)
2546	Its possible that once Brew has installed OpenSSL it wont be used when compiling. This means that the version bundled with OSX will be used, which is currently 0.9.8.r This adds a note to the build instructions to help users check that the are using the correct version, and if not, how to fix the problem.
2543	Running Xubuntu 12.10 and current stable bitcoin from ppa:bincoin/bitcoin First time I open the menu is "caged" but to big. Once I hover it it starts to overlay the items surrounding it it overlays the entire menu. Like this: ![Bildschirmfoto vom 2013-04-20 17:26:57](https://f.cloud.github.com/assets/1780826/405346/303be8c0-a9d0-11e2-9482-eb5e64830376.png) I tryed to use the other Icon that comes with bitcoin, `/usr/share/pixmaps/bitcoin32.xpm` that is smaller but still to big for the XFCE menu. I guess they are supposed to resize, but even if, the `/usr/share/pixmaps/bitcoin80.xpm` should not used by default for XFCE then. Other icons in the pixmaps folder are 32x32 and are displayed correctly not sure why the Bitcoin icon not resizes.
2541	As soon as we have multiple CWallet objects, this bug would cause them to interfere with each other rebroadcasting.
2540	
2539	Add support for the Payment Protocol ( ) to Bitcoin-Qt. Web page where you can create test PaymentRequests, signed with either the bitcoincore.org website SSL certificate or a gavinandresen@gmail.com StartSSL email certificate: Source code for that website is available at: Test plan: This adds a dependency to the Bitcoin-Qt build: you need the protocol buffer compiler and library (see doc/readme-qt.rst)
2538	- include QApplictaion at the top-most position to make it compile again via Qt Creator on Windows with Qt5
2537	On black toolbars, the new icon doesnt look very well. Now the toolbar icon has again a transparent "B" for better style on toolbars. Does not affect the mac client. on ubuntu it then will look like... ![Bildschirmfoto 2013-04-17 um 11 06 27](https://f.cloud.github.com/assets/178464/390377/58a1b70c-a73e-11e2-9439-47dc08d0431e.png) ![Bildschirmfoto 2013-04-17 um 11 06 15](https://f.cloud.github.com/assets/178464/390378/58a51a46-a73e-11e2-9b71-813cd1c0e176.png)
2536	The tri-state nature of USE_UPNP isnt immediately obvious, so paste the explanation from doc/build-unix.txt as a comment in the makefile.
2535	Some versions of make dont interpret - as zero, so set it explicitly. It may be locale-dependent, but a literal 0 should always work.
2534	states that "version" P2P message is extended by one byte. bitcoinds code appears to read this, ``` if (!vRecv.empty()) vRecv >> pfrom->fRelayTxes; // set to true after we get the first fi lter* message else pfrom->fRelayTxes = true; ``` but does not appear to send the fRelayTxes byte: ``` PushMessage("version", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe, nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight); ```
2533	Hi all, getting a persistent crash from my client ever since I installed it. Happens on both my mac osx mountain lion computers. Version is 0.8.1 (beta - in the about section) I open the application, from the command line using data dir= disk with lots of storage. I have downloaded the bootstrap.dat file and the client opens and reads the block information from the disk. about 60 % (percentage varies) the dock icon disappears and I check the terminal for output: Assertion failed: (!pthread_mutex_lock(&m)), function lock, file /opt/local/include/boost/thread/pthread/recursive_mutex.hpp, line 105. Assertion failed: (r->options.comparator->Compare(key, Slice(r->last_key)) > 0), function Add, file table/table_builder.cc, line 97. It appears to be a python error, please accept my apologies if Im posting this in the wrong section.
2532	...ons (Info.plist) Due a bug in QT (https://bugreports.qt-project.org/browse/QTBUG-21267), the mac binary of the last release contains bulk meta informations. The url-handler (bitcoin://) is also not working in current release Should be fixed with this commit. see #2506
2531	wget -O miniupnpc-1.6.tar.gz and the other instances of wget to not verify what they download. Not by OpenPGP, and not even by TLS. The build dependency maintainers themselves, people who compromise the build dependency maintainers, (crackers of) sourceforge and any man-in-the middle are in a position to backdoor that code and therefore compromise the Bitcoin software.
2530	- this solution works stable on mac and ensures that the window gets reopened when the user clicks the dock icon . - tested on 10.8 with Qt4.8.4 and Qt5.0.1
2529	Bisected to 67155d9299ef75cc73272a259dbfbf72632c3020 Before (good) ![Before](http://luke.dashjr.org/tmp/screenshots/snapshot97.png) After (ugly) ![After](http://luke.dashjr.org/tmp/screenshots/snapshot98.png)
2528	
2527	Made it point to 0.8.1
2526	See commits for further details, only small changes!
2525	This allows the bool* type to be passed between threads. Should solve issue #2402.
2524	why: - the current splash-screen has no referring to official images on - - the current splash screen only exists in a low res jpg - current splash screen looks dark and "hackish" - new splash screen should generate positive, "trust-emotions". - new splash screen gives the user infos about the running client. - new splash screen can handle long messages (in a lot of - languages the text is cropped in current release) - new size (x2) 400x312 - contains textual information about the client - textinfos are dynamicly written to the pixmap when -testnet is switch on, the splashscreen will show the bitcoin logo in testnet-color (as well as a text [testnet]) example:
2522	Im able to make leveldb alone use >500 FDs when txindex=1 is enabled. When we run out, it crashes. By default leveldb uses up to 1024 FDs, this is probably potentially problematic even on linux systems (which normally have a 1024 limit). I could see this becoming another non-deterministic fork producing issue in the future once our databases are much bigger (e.g. the network forking into txindex=0 vs 1 nodes)... though right now it looks like the nodes simply go down when they bump into the process limit. We can reduce the number of FDs that leveldb may use, we can look into increasing the allowed FDs on OSX. I suppose we should probably do both.
2521	1). What OS and arch Linux x86_64 2). What version bitcoind latest GIT ac89a1ebe7110051bd35fbbcdb706030f07d561e 3). Whats wrong Error when compiling 4). Logs g++ -c -O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -DBOOST_SPIRIT_THREADSAFE -D_FILE_OFFSET_BITS=64 -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/obj -I/usr/include/db4.8 -DUSE_UPNP=1 -DUSE_IPV6=1 -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/leveldb/include -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/leveldb/helpers -DHAVE_BUILD_INFO -fno-stack-protector -fstack-protector-all -Wstack-protector -D_FORTIFY_SOURCE=2 -O2 -pipe -march=k8 -MMD -MF obj/txdb.d -o obj/txdb.o txdb.cpp g++ -O2 -pthread -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -DBOOST_SPIRIT_THREADSAFE -D_FILE_OFFSET_BITS=64 -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/obj -I/usr/include/db4.8 -DUSE_UPNP=1 -DUSE_IPV6=1 -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/leveldb/include -I/var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/leveldb/helpers -DHAVE_BUILD_INFO -fno-stack-protector -fstack-protector-all -Wstack-protector -D_FORTIFY_SOURCE=2 -O2 -pipe -march=k8 -o bitcoind leveldb/libleveldb.a obj/alert.o obj/version.o obj/checkpoints.o obj/netbase.o obj/addrman.o obj/crypter.o obj/key.o obj/db.o obj/init.o obj/keystore.o obj/main.o obj/net.o obj/protocol.o obj/bitcoinrpc.o obj/rpcdump.o obj/rpcnet.o obj/rpcmining.o obj/rpcwallet.o obj/rpcblockchain.o obj/rpcrawtransaction.o obj/script.o obj/sync.o obj/util.o obj/wallet.o obj/walletdb.o obj/hash.o obj/bloom.o obj/noui.o obj/leveldb.o obj/txdb.o -Wl,-z,relro -Wl,-z,now -Wl,-O1 -Wl,--as-needed -Wl,-Bdynamic -l boost_system -l boost_filesystem -l boost_program_options -l boost_thread -l db_cxx-4.8 -l ssl -l crypto -l miniupnpc -Wl,-Bdynamic -l z -l dl -l pthread /var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/leveldb/libleveldb.a /var/tmp/portage/net-p2p/bitcoind-9999/work/bitcoind-9999/src/leveldb/libmemenv.a obj/db.o: In function `void boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> >(boost::chrono::duration<long, boost::ratio<1l, 1000l> > const&): db.cpp:(.text._ZN5boost11this_thread9sleep_forIlNS_5ratioILl1ELl1000EEEEEvRKNS_6chrono8durationIT_T0_EE[void boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> >(boost::chrono::duration<long, boost::ratio<1l, 1000l> > const&)]+0x73): undefined reference to `boost::chrono::system_clock::now() db.cpp:(.text._ZN5boost11this_thread9sleep_forIlNS_5ratioILl1ELl1000EEEEEvRKNS_6chrono8durationIT_T0_EE[void boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> >(boost::chrono::duration<long, boost::ratio<1l, 1000l> > const&)]+0x7b): undefined reference to `boost::chrono::steady_clock::now() db.cpp:(.text._ZN5boost11this_thread9sleep_forIlNS_5ratioILl1ELl1000EEEEEvRKNS_6chrono8durationIT_T0_EE[void boost::this_thread::sleep_for<long, boost::ratio<1l, 1000l> >(boost::chrono::duration<long, boost::ratio<1l, 1000l> > const&)]+0xbf): undefined reference to `boost::chrono::steady_clock::now() collect2: ld 1 make: *** [bitcoind] 1
2520	This will make the mempool require strictly DER-encoded signatures, and restrict public keys to being either compressed or uncompressed (so no "hybrid" ones). See the discussion here:
2519	
2518	KDEs default colour scheme has a dark background for the taskbar. The old icon had a transparent (or black) "B", but the new one is simply white, which is too close to the gold at small (16x16) sizes. ![Old icon](http://luke.dashjr.org/tmp/screenshots/snapshot96.png) Old ![Old icon](http://luke.dashjr.org/tmp/screenshots/snapshot95.png) New
2517	By default, OSX has a soft RLIMIT_NOFILE of 256. According to IRC: 06:26 <sipa> leveldb assumes 1000 I had the misfortune of having a crash due to a driver bug. Bitcoin-Qt complained about a corrupt chainstate database and prompted to reindex. This was the result: <pre> SetBestChain: new best=00000000000003e98ba4932e87919aac4bd618f4584e475231fe2834556ff174 height=192473 work=415632761278238416140 tx=5651224 date=2012-08-05 19:57:03 ProcessBlock: ACCEPTED Committing 39050 changed transactions to coin database... SetBestChain: new best=000000000000051905ee767096eee37b163937d7340633fa037089372807c3ac height=192474 work=415641508847434375834 tx=5651608 date=2012-08-05 20:15:11 ProcessBlock: ACCEPTED SetBestChain: new best=00000000000004a983540823a4fda18116ec409ad67913aa37462d2c87e4ea21 height=192475 work=415650256416630335528 tx=5651618 date=2012-08-05 20:34:12 ProcessBlock: ACCEPTED SetBestChain: new best=000000000000042a12b3e291db2b5c9d23b7d1b4d2948ebd6cbd13807cdd0ce2 height=192476 work=415659003985826295222 tx=5651627 date=2012-08-05 20:34:47 ProcessBlock: ACCEPTED SetBestChain: new best=00000000000002017b0005688a315f334d10a014b7118602a4db11ad77bb9e39 height=192477 work=415667751555022254916 tx=5652818 date=2012-08-05 20:44:56 ProcessBlock: ACCEPTED SetBestChain: new best=0000000000000429b8f10461d5bfbff40ea07ad7b1573bcaf04187627e866572 height=192478 work=415676499124218214610 tx=5652953 date=2012-08-05 20:48:33 ProcessBlock: ACCEPTED SetBestChain: new best=000000000000063a28265a2dc91e8e3fedb27517d1e0af995d78aed65d0a5cb4 height=192479 work=415685246693414174304 tx=5653098 date=2012-08-05 20:52:59 ProcessBlock: ACCEPTED SetBestChain: new best=00000000000006994b5e60e0d7883d1252d180b880d333dab461070e49025a38 height=192480 work=415693994262610133998 tx=5653656 date=2012-08-05 21:05:22 ProcessBlock: ACCEPTED SetBestChain: new best=000000000000020e5e4ed55aaaab9cf3aa1bbca102ee7c8577b6c5b15d8e682f height=192481 work=415702741831806093692 tx=5654460 date=2012-08-05 21:19:01 ProcessBlock: ACCEPTED LevelDB write failure: IO error: /Users/peter/Library/Application Support/Bitcoin/blocks/index/003187.log: Too many open files *** System error: Database I/O error ERROR: ProcessBlock() : AcceptBlock FAILED Loaded 3953 blocks from external file in 2270181ms Flush(false) wallet.dat refcount=0 ThreadSocketHandler exited ThreadMessageHandler exited wallet.dat checkpoint ThreadOpenConnections exited wallet.dat detach wallet.dat closed DBFlush(false) ended 731ms StopNode() Flushed 0 addresses to peers.dat 1ms Committing 4858 changed transactions to coin database... Flush(true) DBFlush(true) ended 0ms Bitcoin exited </pre> I have seen Bitcoin-Qt abort due to running out of fds during normal operation. My bitcoin.conf has txindex=1. I manually raised the fd limit to 4096 and reran it. Im tempted to compile from github with a patch loosely like this: <pre> #include &lt;sys/resource.h&gt; ... struct rlimit lim; ... if (getrlimit(RLIMIT_NOFILE, &lim) != -1) { if (lim.rlim_cur &lt; 4096) lim.rlim_cur = 4096; if (lim.rlim_cur &gt; lim.rlim_max) lim.rlim_cur = lim.rlim_max; setrlimit(RLIMIT_NOFILE, &lim); /* ignore error, or log a warning */ } </pre> ie: try to raise fd limit to either 4096, or the hard limit.. whichever is lower.
2516	Tested: wrote a program that replaces a non-final tx and checked it against a bitcoind with this patch, replacement was successful.
2515	Having the export button at the top was confusing people into thinking the entire wallet was exported. This commit moves the export button to the address book, receiving addresses and transaction tabs separately.
2514	
2513	GUI cant connect to RPC. Showing this option in the help confuses people, so remove it.
2510	My fault The issue created by mistake. And there is no way to remove it
2509	
2508	
2506	The mac binary should contain proper version information. ![Bildschirmfoto-2013-04-11-um-10 51 27](https://f.cloud.github.com/assets/178464/366464/3d3b2646-a285-11e2-860a-612a82abd77b.png)
2505	hi guys. i cannot seem to produce sha1 identical binaries from identical compile runs. can you look into this? it is important for cryptographic system audits, to be identical like this. and for package building and distribution applications. thx. you might want to run a strings diff between runs to see what i mean.
2504	bitcoin / contrib / verifysfbinaries / verify.sh still downloads 0.8.0.
2503	- move COPYRIGHT_YEAR to clientversion.h -- this allows usage of that information also in other places (e.g. splash screen) - use the new COPYRIGHT_YEAR macro in bitcoin-qt.rc -- this reduces the places, where we need to change the year further - fix bitcoin-qt.rc not showing up in Qt Creator Intended for #2495 mainly, but allows further usage cases.
2502	Can you verify if this is needed, at least it seems to be missing as we have THIS in the current code:
2501	- updates ClientModel::getBlockSource() to return all available states and sorts enum BlockSource in order of usage cases (none default, then reindex, import and network) - updates BitcoinGUI::setNumBlocks() to better use getBlockSource() and also adds a message, when we have NO block source available
2500	I try to send money: ``` user@computer:~/dev/bitcoin/src$ ./bitcoind listaccounts { "" : 0.00000000, "wallet" : 16.00000000 } user@computer:~/dev/bitcoin/src$ ./bitcoind sendfrom wallet 1Gxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 4 c8xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx user@computer:~/dev/bitcoin/src$ ./bitcoind listaccounts { "" : 0.00000000, "wallet" : 12.00000000 } ``` At this point I check blockchain.info and find out that 3.4 BTC was sent to another account, 1Fxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx I get confused and worried. I check if I own that account: ``` user@computer:~/dev/bitcoin/src$ ./bitcoind getaddressesbyaccount "" [ "12xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" ] user@computer:~/dev/bitcoin/src$ ./bitcoind getaddressesbyaccount wallet [ "1Gxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "13xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" ] ``` I dont known the account and freak out and almost post on a forum asking for help figuring out what happened. Then I suspect that my bitcoin client still knows where the money is since its showing a balance of 12.00000000. Then I attempt to send the full 12.00000000 to another account and succeed. Is this a bug? Where is the private key for 1Fxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx? Why was anything sent to 1Fxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx? I read that bticoind pre-generates addresses and puts them in a queue. If this is the next account that was pre-generated, why wasnt it added to any account? This really looks like a bug to me. Can I check what addresses are currently pre-generated or something like that? Can someone help me figure out what happened?
2499	1. Open Bitcoin-Qt on Mac OS X ML 2. After load, close the app window 3. Click the app icon in dock What should happen: The window should re-appear. What is happening: Nothing.
2498	- continue the mac behavior of clearing button icons (because its unusual on mac apps) - fix: new button variable names, new buttons (verifyMessage, signMessage) Signed-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>
2497	- redefined the green color - created new toolbar icons - updated the assets-attribution.txt Signed-off-by: Jonas Schnelli <jonas.schnelli@include7.ch>
2496	This code is addressbookpage.cpp is broken: #ifdef Q_OS_MAC // Icons on push buttons are very uncommon on Mac ui->newAddressButton->setIcon(QIcon()); ui->copyToClipboard->setIcon(QIcon()); ui->deleteButton->setIcon(QIcon()); #endif
2495	why: - the current splash-screen has no referring to official images on - the current splash screen only exists in a low res jpg - current splash screen looks dark and "hackish" - new splash screen should generate positive, "trust-emotions". - new splash screen gives the user infos about the running client. - new splash screen can handle long messages (in a lot of languages the text is cropped in current release) - example: - new size (x2) 400x312 - contains textual information about the client - textinfos are dynamicly written to the image - when -testnet is switch on, the splashscreen will show the bitcoin logo in testnet-color (as well as a text [testnet])
2494	- redefined the green color - created new toolbar icons - updated the assets-attribution.txt
2493	On FreeBSD, I was unable to build any version since the MicroSleep() change (commit 1b43bf0d), which created a dependency on boost_chrono for boost versions above 1.50. This dependency had never been added to either makefile.unix or bitcoin-qt.pro. This pullreq adds the required -lboost_chrono to both files.
2492	- dont display "Bitcoin - " when no title was supplied but just "Bitcoin"
2491	
2490	- change the word "processors" to "threads" in the setgenerate help message We always use the term thread(s), so I would suggest to do this here also.
2489	gdb claims that bitcoind is "exiting normally", but my log does not seem to end with the usual expected closing: ``` 2013-04-09 03:01:32 trying connection 111.193.191.184:8333 lastseen=2.3hrs 2013-04-09 03:01:33 Flushed 14711 addresses to peers.dat 43ms 2013-04-09 03:01:33 ThreadRPCServer method=stop 2013-04-09 03:01:33 addcon thread interrupt 2013-04-09 03:01:33 dumpaddr thread stop 2013-04-09 03:01:33 net thread interrupt 2013-04-09 03:01:33 msghand thread interrupt 2013-04-09 03:01:33 Flush(false) 2013-04-09 03:01:33 wallet.dat refcount=0 2013-04-09 03:01:33 wallet.dat checkpoint 2013-04-09 03:01:33 wallet.dat detach 2013-04-09 03:01:33 wallet.dat closed 2013-04-09 03:01:33 DBFlush(false) ended 121ms 2013-04-09 03:01:33 StopNode() 2013-04-09 03:01:33 Flushed 14711 addresses to peers.dat 36ms 2013-04-09 03:01:33 Committing 36892 changed transactions to coin database... 2013-04-09 03:01:34 Flush(true) 2013-04-09 03:01:34 DBFlush(true) ended 0ms ``` (end of log) Note the lack of "bitcoin exited\n\n\n\n\n\n\n" Running git HEAD (1483aac5f9a9de9fefbcbbe3edc34429b69aca9e) on Fedora Linux/x86-64.
2488	It should just say remove database/, as no other files are related to the wallet anymore.
2487	- updates for bitcoinstrings.cpp and bitcoin_en.ts - changes help text for -rpcthreads to match -par - fix a small glitch with -par to be "-par=<n>"
2486	Currently on OS X, the wallet.dat file is in the same location as the blk*.dat and files. This means that if you want to back up the folder wallet.dat is in, you are backing up multiple large files that change regularly, resulting in longer backup times. While you can exclude individual .dat files, new ones are created regularly, making this a manual task (and a pain). If either the Block files were moved into their own directory, a user could exclude the folder with the Block files from a backup routine (such as Time Machine), making the backup process faster and more efficient. (Since the files can always be regenerated on the fly, they are not as critical to back up as the wallet.dat file is.)
2485	Hi there, I run Bitcoin-qt 0.8.1 on Ubuntu 64bit with 1.5GB memory. A few hours after starting and synchronizing with network, my system start to respond very slow (running Chrome and Firefox). Looking at task manager, I see that Bitcoin-qt consumes great part of memory and almost infinite amount of allocated virtual memory, see picture below. ![bitcoin-qt after start and synchronized 2013-04-06 21:18](https://f.cloud.github.com/assets/3152756/349329/f7bc5076-9fba-11e2-9979-5b708d09f8d1.png) Just after starting and synchronizing bitcoin-qt, memory usage seems to be more normal, see picture below. ![bitcoin-qt after start and synchronized 2013-04-06 20:18](https://f.cloud.github.com/assets/3152756/349332/24c2409e-9fbb-11e2-9949-baa892d4c1a8.png) I think this high VM usage and slow system response has caused bitcoin-qt to crash occasionally (without warning or notice). The jump in VM usage seems to happen when reaching ~40 active connections. I tried earlier versions bitcoin-qt 0.8.0 and 0.7.1 and they have same issue. Would it help if I limit the number of connections in bitcoin.conf?
2483	- also change the word processors to threads in the setgenerate help message
2482	- added languages in bitcoin.qrc: bs, ca, cy, eo, gu_IN, hi_IN, ja, la, lv_LV and th_TH (some translations files were already in src/qt/locale but not added in the .qrc file I didnt use any translation limits, everything was added! It seems does not work for me, as ``ls src/qt/locale/*ts|xargs -n1 basename|sed s/\(bitcoin_\(.*\)\).ts/<file alias="\2">locale/\1.qm<\/file>/`` gives me an error in the MinGW shell :-(.
2481	send encryptWallet/backupWallet/changePassphrase directly to walletFrame
2480	Salvaging an encrypted wallet makes bitcoin quit with the following error: bitcoin-qt: /usr/include/boost/thread/pthread/pthread_mutex_scoped_lock.hpp:26: boost::pthread::pthread_mutex_scoped_lock::pthread_mutex_scoped_lock(pthread_mutex_t*): Assertion `!pthread_mutex_lock(m) failed. Aborted (core dumped) Steps to reproduce: 1) Create new testnet wallet 2) Encrypt with a passphrase 3) Run with -salvagewallet debug.log: init message: Verifying wallet... dbenv.open LogDir=/home/.../.bitcoin/testnet3/database ErrorFile=/home/.../.bitcoin/testnet3/db.log Renamed wallet.dat to wallet.1365321353.bak Salvage(aggressive) found 317 records Bound to [::]:18333 Bound to 0.0.0.0:18333 init message: Loading block index... Opening LevelDB in /home/.../.bitcoin/testnet3/blocks/index Opened LevelDB successfully Opening LevelDB in /home/.../.bitcoin/testnet3/chainstate Opened LevelDB successfully LoadBlockIndexDB(): last block file = 0 LoadBlockIndexDB(): last block file info: CBlockFileInfo(blocks=65142, size=47761205, heights=0...65141, time=2011-02-02...2013-04-07) LoadBlockIndexDB(): transaction index disabled LoadBlockIndexDB(): hashBestChain=000000000a00a2818dd027f323048e7e0b273a3cd0511b0ad129166d9d5d45a2 height=65141 date=2013-04-07 07:46:02 init message: Verifying blocks... Verifying last 288 blocks at level 3 No coin database inconsistencies in last 289 blocks (3282 transactions) block index 1377ms init message: Loading wallet... nFileVersion = 80000 Performing wallet upgrade to 60000 Cannot initialize keypool The keypool error appears every time at startup, from then on. The wallet may be corrupted, but it from the error appears to be a bug in the code with mutexes.
2479	This is a first-pass change to begin resolving issues and #273, #1958, #2412. I doubt this change completely ready, I intend on using this request for feedback on the current implementation of code and usage. ____ ## Basic Allow users to set bandwidth limits on overall egress and/or command-specific egress bandwdith. Overall egress bandwidth and command-specific egress bandwidth counts are saved to disk (currently every packet queued), to allow counts to be saved across runnings of the bitcoin node. A simplified cron-expression is used to determine when to reset all bandwidth counts. The cron-expression will cause start and reset times to "snap" to the closest values above and below the current time. This allows exact control over when the bandwidth usage is reset via the expression, instead of relying on the time the program was last started or other arbitrary limitations. ____ ## Configuration options For command-line (prepend -) or configuration file: * bandwidthsentmax - Overall egress bandwidth limit * bandwidthsentmax_[command] - Command-specific bandwidth limit * bandwidthresettimes - Cron-expression used to reset bandwidth counts ____ ## Formats * Bandwidth - As regular expression /[0-9]+[BbKkMmGgTtPp]?[Bb]?/ - Valid for any values 0 - 18,446,744,073,709,551,616 bytes (16,384 Peta-bytes) * Cron - See [wiki](http://en.wikipedia.org/wiki/Cron#CRON_expression) for full cron expressions. Numerical representations allowed only. Special characters implemented: asterisk (*), slash (/) (with caveats), comma (,), and hyphen (-). Slash requires the end value be landed upon (which means */4 requires the possible range be divisible by 4). ____ ## Sample configuration Bitcoin.conf ```` # minutes hours dayOfMonth Month dayOfWeek # Resets each month # 0 0 1 * * # # Reset every sunday # * * * * 0 # Resets each minute # * * * * * # # Resets every 5 minutes # */5 * * * * bandwidthresettimes=0 0 0 * * # Only allow 2 GByte of sent data bandwidthsentmax=2G # Only send out 1 GByte of sent "block" commands bandwidthsentmax_block=1G ```` ____ ## Files this change-set: ### New #### bandwidthman.h and bandwdithman.cpp * New class to handle bandwidth management as needed, will serve a larger purpose as bandwidth management features are expanded. * Public functions * LoadConfiguration() - Uses mapArgs to read reset time cron expression, uses mapArgs to read overall bandwidth cap and specific command bandwidth caps. * TestScheduling(string strCronLine, struct tm tmTestTime) - Parses a given cron expression and uses a specific time to calculate start time and reset time. Used only by the unit tester. * AllowSendCommand(string strCommand, int nSize) - Determines if strCommand should be sent, given the command is nSize. #### tests/bandwidthman_tests.cpp * Contains unit tests for the calculation of start times and reset times used by the CBandwidthMan class. ### Changed #### db.h * Rename CAddrDB to CDatDB and make abstract, generalize specific functions to globally applicable functions, consider the general format used by CAddrDB as being a ".dat" file. * Create templated wrapper for new CDatDB named CSerialDatDB. Extends CDatDB and allows for any serializable type to be used as the template type. * Create CAddrDB by making it an alias of CSerialDatDB<CAddrMan>, construct the CSerialDatDB with the static filename of "peers.dat" (as previously hard-coded). * Create CBandwidthDB by making it an alias of CSerialDatDB<CBandwidthMan>, construct CSerialDatDB with the static filename of "bandwidth.dat". Note: All changes to CAddrDB result in no usability changes. #### db.cpp * Change CAddrDB functions to CDatDB functions. * Modify write process to prepend message start and append hash due to change in serialization time of payload data (new lines 488-494). #### init.cpp * Insert new step 11: Load bandwidth manager. * Renumber old steps 11 and 12 to 12 and 13 respectively. #### makefile.* * Add objs/bandwidthman.o as new object #### net.h * Export instance of bandwidth manager. * Modify EndMessage to require the message name upon invocation and return success or failure to send message. * EndMessage will return false if it is not allowed to send the message as determined by the bandwidth manager. * If bandwidth manager does not allow the message to be sent, abort message. * Modify all push messages to return success or failure, determined by EndMessage call. * Success/failure result is not currently used but planned for use later. #### net.cpp * Add new global instance of CBandwidthMan. ____ ## Extra data While researching how to approach the problem, I collected command-specific egress data off of an unrestricted node that was on the latest block. [This spreadsheet](https://docs.google.com/spreadsheet/ccc?key=0AnpjY4_hVstbdHpqeVRXeFZDM1lydmdYdndaWGlLZXc&usp=sharing) shows the count and total bandwidth of each of the commands. I do not remember when or how long it took to collect this data, but I believe it was over a few hours with no local usage of the computer. The branch at [brandondahler/bitcoin branch bandwidth-test](https://github.com/brandondahler/bitcoin/tree/bandwidth-test) can produce a text file that can aid in plugging in your own data into this spreadsheet.
2478	It has bothered me for a while that you cant just use hashes from debug.log in query commands that require a full hash.
2477	According to pull 2444 (https://github.com/bitcoin/bitcoin/pull/2444): - new windows and linux icons. - doxygen-icon should also be fine. The windows icon contains multiple resolutions up to 256px. Is someone capable of doing a Vista and W8 test? Who takes care of the linux test?
2475	From Tor Browser Bundle (2.3.25-4) (2/2/13) "Set the Tor SOCKS+Control ports to 9150, 9151 respectively on all platforms This fixes a SOCKS race condition with our SOCKS autoport configuration and HTTPS-Everywheres Tor test. Firefox 17 appears to cache proxy settings per URL now, which resulted in a proxy error for check.torproject.org if we lost the race." We should switch the port from 9050 to 9150 in Bitcoin.
2474	In preparation for 0.8.2
2473	on theres no source code tarball which i need to get reproducible results on my build-it-yourself distro (package management system is laid out for source tarballs with checksums, not git checkouts) apparently the linux download has the source included, but also comes with prebuilt binaries (unusable in my case, since i use a different libc). this bloats up the tarball to twice the needed size or more, which affects download time and hd usage. the argument that 18 MB is nothing compared to 7G of blockdata, is not valid for people who just fetch all tarballs in one go (so they have them already in case they need it), but in the end do not use the bitcoin client. so please in the future release a separate source code tarball and make it available from the default download page. thanks. please also consider using the .xz compressor since its about 40-60% better in compression and only slightly slower in decompression speed than .gz (but 3-4x as fast as bz2) and available on any linux distribution that came out in the last 5 years. even busybox supports it by default.
2470	- this allows us to use the progressbar and the label independently (if needed) and still prevents setStatusTip() to use them, if one of the 2 is active
2469	- this allows our progressbarlabel to correctly update, when we finish a reindex or import, but do not get new blocks from other sources Fixes orphan label messages for me, which I find rather ugly ;).
2468	After moved the GenerateBitcoins() call from net to init and shutdown changes were merged, does this call still belong there?
2466	Bitcoind 0.8.1 fails to display some raw transactions (while displaying them in getblock). I wrote it here but for example, lets say block 000000000003ba27aa200b1cecaad478d2b00432346c3f1f3986da1afd33e506 and transaction 6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4 . example: ./bitcoind getrawtransaction 6359f0868171b1d194cbee1af2f16ea598ae8fad666d9b012c8ed2b79a236ec4 error: {"code":-5,"message":"No information available about transaction"}
2465	remove proprietary psd file mentioning from assets-sttribution.txt Sorry for the "slip on the pen".
2464	- expand the description for updating the translations - sort the paths/files, which need to have the version number updated, in alphabetical order - use a more current version number in git tag and git shortlog
2463	Right after I press control+c or right click and copy, whether in the client itself or in google chrome, the program will hang but not displayed as "not responding" in task manager. It can be closed normally by right clicking it on task bar and close it. The interface is not responding at all. It may be related to utorrent toolbar or utorrent, as i only noticed this problem after installation of those application. Version 0.8.1 beta Bitcoin-Qt OS Windows 7 Ultimate
2462	When i run bitcoind on the 64-bit linux machine, the bitcoind daemon client crashes while consuming most of the RAM in the system. I guess there is a memory leak. I was using Ubuntu 64 bit machine, RAM 356 MB. Please see the image attached. ![memory leak](https://f.cloud.github.com/assets/4065878/342590/a85e695e-9db4-11e2-9572-0be39a1daca9.png)
2461	This introduces the concept of the sync node, which is the one we asked for missing blocks. In case the sync node goes away, a new one will be selected. For now, the heuristic is very simple, but it can easily be extended later to add better policies.
2460	- add the Genesis blocks time for the testnet in ClientModel::getLastBlockDate() See
2459	- instead of parsing the project file by using $$_PRO_FILE_ just use $$TRANSLATIONS, which contains a list of all needed files, to build our *.qm translation files With the local build I had some weird problems with $$_PRO_FILE_, which I solved by using $$TRANSLATIONS directly. If everything is working with our official build it would be nice to update to this :).
2457	- re-work included headers and used functions to be fully Qt5 compliant, while maintaining Qt4 compatibility - also includes some small GUI layout changes (remove hard-coded column sizes) Below is a screen with the Qt5 Fusion style :). ![Qt5 Fusion](https://f.cloud.github.com/assets/1419649/340904/d30a46a0-9d5f-11e2-9377-a5976621372e.png)
2456	Sorry, but I found some ugly things style-wise after merging the thread/shutdown pull ;).
2455	
2454	Without this, we get -O0 and no -D_FORTIFY_SOURCE...
2453	As these were not updated when backporting the 225430 checkpoint into head. Additionally, also report verification progress in debug.log, and tweak the sigcheck-verification-speed-factor a bit.
2452	- adds 6 methods in BitcoinGUI to access some actions needed by the new WalletView class - updates WalletView class to use these instead of trying to duplicate these - cleanup walletview.h and remove all unneeded stuff - this fixes problems with tabs toolbar (#2451) and export broken (#2436) - more details in #2447
2451	- after startup of the client no tab seems selected, although overviewpage is shown - clicking a transaction on the overviewpage opens the tx list, but doesnt mark that active in the tabs toolbar
2450	Another small bug that was introduced by #2220.
2449	Just a move, as that document should reside in the doc folder :).
2448	
2447	I observed that while updating translations, that these 2 are sharing quite a big amount of code and translations. Seems the cleanup or refactoring is not done + there is at least one open issue related to this (#2436). Can you comment or do you know if that is intended?
2446	- also includes a small change to a string in bitcoinrpc.cpp, which is not on Transifex anyway, so is safe to merge
2444	check why/preview: If pull is accepted, windows, etc. icons will follow. - according to official bitcoin logo - no chopped shadow - retina-screen support info: the psd (Adobe Photoshop) file (bitcoin.psd) is for further changes (contains unrendered effects)
2443	- use labelExplanation for sending and receiving tab and move the string from the ui-file to the source - ensure that the table holding the label and address is resized so that the address column fits the address and the label column is stretched to fit the window size - rename some stuff for much easier readbility in the code (I find it hard to get the meaning of stuff like labels or buttons)
2442	- add missing initalisation for clientModel - remove unneded RPCExecutor::start() code
2441	- as QClipboard::Selection isnt available on Windows ensure that the correct mode is called, but sill allow selection for e.g. X11 - start conversion from QCoreApplication::instance() to qApp in guiutil.cpp (I intend to harmonize this all over the source with my Qt5 compatibility pull) Fixes #2438
2440	- fix debug window, by re-adding rpcConsole->setClientModel(clientModel); in BitcoinGUI::setClientModel(), which was removed by #2220
2439	Seems #2220 also brokte the debug window, as ``RPCConsole::setClientModel()`` isnt called anymore anywhere.
2438	Seems #2350 broke all context-menu copy actions for me on Windows, removing ``QClipboard::Selection`` from void copyEntryData() in guiutil.cpp solves this. Im already using Qt5, perhaps the problem lies here. Can a non Linux user confirm or verify my problem?
2437	- the send coins context menu entry was not working anymore, because a non current version of #2220 was merged onto current master - also removes some unneeded spaces and adds a comment to WalletModel::getNumTransactions()
2436	I didnt look into this, but I noticed I cant use the GUI export function anymore after #2220 got merged. Has anyone observed the same?
2435	"Error opening block database. Do you want to rebuild the block database now?" this message comes every I restart. I recently upgraded from a very old version (sorry forgot number) to 0.8.1. I click ok to rebuild database and many hours later it completes. Now after another restart I am getting the same error. 13GB available on my HD.
2434	- My disk is partitioned - boot partition has less than 6GB free space - moved the bitcoin folder from ~/Library/Application Support/ to /Volumes/Data and replaced it with an "Alias" (Mac speak for symlink) - Upon starting the client, it crashes. => instead of blindly trying to create the "Bitcoin" directory, look for symlinks Process: Bitcoin-Qt [5889] Path: /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Identifier: com.yourcompany.Bitcoin-Qt Version: ??? (???) Code Type: X86 (Native) Parent Process: launchd [379] Date/Time: 2013-04-01 09:29:48.032 +0200 OS Version: Mac OS X 10.6.8 (10K549) Report Version: 6 Interval Since Last Report: 514711 sec Crashes Since Last Report: 1 Per-App Interval Since Last Report: 82447 sec Per-App Crashes Since Last Report: 1 Anonymous UUID: 612F2A06-2FFD-4D12-A8C9-5137DD3444B2 Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Crashed Thread: 0 Dispatch queue: com.apple.main-thread Application Specific Information: abort() called Thread 0 Crashed: Dispatch queue: com.apple.main-thread 0 libSystem.B.dylib 0x9a827c5a __kill + 10 1 libSystem.B.dylib 0x9a827c4c kill$UNIX2003 + 32 2 libSystem.B.dylib 0x9a8ba5a5 raise + 26 3 libSystem.B.dylib 0x9a8d06e4 abort + 93 4 libstdc++.6.dylib 0x99f9afda __gnu_cxx::__verbose_terminate_handler() + 433 5 libstdc++.6.dylib 0x99f9917a __cxxabiv1::__terminate(void (*)()) + 10 6 libstdc++.6.dylib 0x99f991ba __cxxabiv1::__unexpected(void (*)()) + 0 7 libstdc++.6.dylib 0x99f992b8 __gxx_exception_cleanup(_Unwind_Reason_Code, _Unwind_Exception*) + 0 8 libboost_filesystem-mt.dylib 0x00c29bc5 boost::filesystem::detail::create_directory(boost::filesystem::path const&, boost::system::error_code*) + 281 9 com.yourcompany.Bitcoin-Qt 0x0007e561 GetDataDir(bool) + 449 10 com.yourcompany.Bitcoin-Qt 0x00020dd1 main + 417 11 com.yourcompany.Bitcoin-Qt 0x0001f921 start + 53 Thread 1: Dispatch queue: com.apple.libdispatch-manager 0 libSystem.B.dylib 0x9a7ed382 kevent + 10 1 libSystem.B.dylib 0x9a7eda9c _dispatch_mgr_invoke + 215 2 libSystem.B.dylib 0x9a7ecf59 _dispatch_queue_invoke + 163 3 libSystem.B.dylib 0x9a7eccfe _dispatch_worker_thread2 + 240 4 libSystem.B.dylib 0x9a7ec781 _pthread_wqthread + 390 5 libSystem.B.dylib 0x9a7ec5c6 start_wqthread + 30 Thread 2: 0 libSystem.B.dylib 0x9a7ec412 __workq_kernreturn + 10 1 libSystem.B.dylib 0x9a7ec9a8 _pthread_wqthread + 941 2 libSystem.B.dylib 0x9a7ec5c6 start_wqthread + 30 Thread 0 crashed with X86 Thread State (32-bit): eax: 0x00000000 ebx: 0x9a8d0693 ecx: 0xbffff3ac edx: 0x9a827c5a edi: 0xa0cb6b30 esi: 0x01ce031c ebp: 0xbffff3c8 esp: 0xbffff3ac ss: 0x0000001f efl: 0x00200282 eip: 0x9a827c5a cs: 0x00000007 ds: 0x0000001f es: 0x0000001f fs: 0x00000000 gs: 0x00000037 cr2: 0x002b6000 Binary Images: 0x1000 - 0x5b3fef +com.yourcompany.Bitcoin-Qt ??? (???) <B353FA8B-4A03-D8BC-EAC8-E1DA0E20F48A> /Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt 0x87e000 - 0x87eff7 +GlimsLoaderMinimal.dylib ??? (???) <DF85ED5E-6E30-37BA-B1F4-9F56FC602784> /Library/Frameworks/GlimsAdditions.framework/Library/GlimsLoaderMinimal.dylib 0x881000 - 0x886fe7 +libqrencode.3.dylib 5.1.0 (compatibility 5.0.0) <9627FE72-1198-798B-1841-A64F967F32FB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libqrencode.3.dylib 0x88a000 - 0x891ff7 +libminiupnpc.8.dylib ??? (???) <2DBB7FA6-2198-8004-2ECF-F504F2081317> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libminiupnpc.8.dylib 0x895000 - 0x8e1fff +libssl.1.0.0.dylib ??? (???) <641EBBF5-C97C-1D6C-EFF0-EB02A7FF7629> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib 0x8fb000 - 0xa33fef +libcrypto.1.0.0.dylib ??? (???) <0943ABB0-E2CA-20EC-B52D-E3D5E2340F02> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libcrypto.1.0.0.dylib 0xa9c000 - 0xbf5fff +libdb_cxx-4.8.dylib ??? (???) <A2028F0C-1E73-00A3-BA80-2DEF2EAC9ECB> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libdb_cxx-4.8.dylib 0xc1f000 - 0xc22ff3 +libboost_system-mt.dylib ??? (???) <DC2F474D-A848-B1CA-5E46-EAB30E94A639> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_system-mt.dylib 0xc26000 - 0xc39ffb +libboost_filesystem-mt.dylib ??? (???) <ED32F1B3-0C00-9EA8-A6E4-B4D69BBB090B> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_filesystem-mt.dylib 0xc44000 - 0xc88ff3 +libboost_program_options-mt.dylib ??? (???) <DAE91877-14DE-370A-9571-A2EC1D7AF3D8> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_program_options-mt.dylib 0xcd3000 - 0xce5ff3 +libboost_thread-mt.dylib ??? (???) <4F1F450A-6305-F698-98AC-E82075E11758> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_thread-mt.dylib 0xd05000 - 0x1695fe3 +QtGui 4.8.4 (compatibility 4.8.0) <C70071A5-F36B-C018-9BEB-181811A0759F> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtGui.framework/Versions/4/QtGui 0x186c000 - 0x1b1bffb +QtCore 4.8.4 (compatibility 4.8.0) <204CC6C5-048C-4746-D9AD-DF6FA3204CE7> /Applications/Bitcoin-Qt.app/Contents/Frameworks/QtCore.framework/Versions/4/QtCore 0x1b8d000 - 0x1b9efe7 +libz.1.dylib 1.2.7 (compatibility 1.0.0) <04F507FA-B0BF-CD40-DB2E-CBF29500AF19> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libz.1.dylib 0x1ba2000 - 0x1bc3fe7 +libpng15.15.dylib 30.0.0 (compatibility 30.0.0) <2E174E7D-8E8B-9F51-6A39-53D3243C159E> /Applications/Bitcoin-Qt.app/Contents/Frameworks/libpng15.15.dylib 0x8fe00000 - 0x8fe4162b dyld 132.1 (???) <1C06ECD9-A2D7-BB10-AF50-0F2B598A7DEC> /usr/lib/dyld 0x90088000 - 0x90162fff com.apple.DesktopServices 1.5.11 (1.5.11) <800F2040-9211-81A7-B438-7712BF51DEE3> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x90163000 - 0x90169fff com.apple.CommonPanels 1.2.4 (91) <2438AF5D-067B-B9FD-1248-2C9987F360BA> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x905fd000 - 0x9073afe7 com.apple.audio.toolbox.AudioToolbox 1.6.7 (1.6.7) <423BDE4D-5082-B6CA-BB2C-E22A037235A4> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x90952000 - 0x909d2feb com.apple.SearchKit 1.3.0 (1.3.0) <9E18AEA5-F4B4-8BE5-EEA9-818FC4F46FD9> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x909f2000 - 0x90a23ff7 libGLImage.dylib ??? (???) <D18E2E76-DBF4-6930-039A-F66CA0D120B3> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x90a65000 - 0x90a69ff7 IOSurface ??? (???) <F9E6DFC1-8DD9-7C7E-CA85-B80735586E05> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x90a6a000 - 0x90be5fe7 com.apple.CoreFoundation 6.6.6 (550.44) <F88C95CD-1264-782D-A1F5-204739847E93> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x90cb4000 - 0x90d6cfeb libFontParser.dylib ??? (???) <D2D0C922-5ED1-3AE9-6F99-707C74DF3E62> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x90d6d000 - 0x90e6ffe7 libcrypto.0.9.8.dylib 0.9.8 (compatibility 0.9.8) <015563C4-81E2-8C8A-82AC-31B38D904A42> /usr/lib/libcrypto.0.9.8.dylib 0x90e70000 - 0x90f02fe7 com.apple.print.framework.PrintCore 6.3 (312.7) <7410D1B2-655D-68DA-D4B9-2C65747B6817> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x910ca000 - 0x910dcff7 com.apple.MultitouchSupport.framework 207.11 (207.11) <6FF4F2D6-B8CD-AE13-56CB-17437EE5B741> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x910dd000 - 0x910e1ff7 libGFXShared.dylib ??? (???) <09540618-2ED1-72C4-61CB-938B35927568> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x910e2000 - 0x91101ff7 com.apple.CoreVideo 1.6.2 (45.6) <EB53CAA4-5EE2-C356-A954-5775F7DDD493> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x9144a000 - 0x9144cff7 libRadiance.dylib ??? (???) <5F803B4A-B294-BA94-FB68-E8756EE41B20> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x9144d000 - 0x914a0ff7 com.apple.HIServices 1.8.3 (???) <1D3C4587-6318-C339-BD0F-1988F246BE2E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x9221a000 - 0x9224dfff libTrueTypeScaler.dylib ??? (???) <8ADB7D19-413E-4499-C874-13C383F97685> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libTrueTypeScaler.dylib 0x92351000 - 0x9235aff7 com.apple.DiskArbitration 2.3 (2.3) <E9C40767-DA6A-6CCB-8B00-2D5706753000> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x9235b000 - 0x923bfffb com.apple.htmlrendering 72 (1.1.4) <4D451A35-FAB6-1288-71F6-F24A4B6E2371> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HTMLRendering.framework/Versions/A/HTMLRendering 0x926c3000 - 0x9278efef com.apple.CoreServices.OSServices 359.2 (359.2) <7C16D9C8-6F41-5754-17F7-2659D9DD9579> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x927a8000 - 0x927a9ff7 com.apple.TrustEvaluationAgent 1.1 (1) <2D970A9B-77E8-EDC0-BEC6-7580D78B2843> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x928d4000 - 0x9297cffb com.apple.QD 3.36 (???) <FA2785A4-BB69-DCB4-3BA3-7C89A82CAB41> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x92ba9000 - 0x92bcbfef com.apple.DirectoryService.Framework 3.6 (621.15) <F38894EA-2C13-7FC5-C084-94DA0B5B6B68> /System/Library/Frameworks/DirectoryService.framework/Versions/A/DirectoryService 0x92bcc000 - 0x92c3bff7 libvMisc.dylib 268.0.1 (compatibility 1.0.0) <595A5539-9F54-63E6-7AAC-C04E1574B050> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x92c3c000 - 0x92c7eff7 libvDSP.dylib 268.0.1 (compatibility 1.0.0) <8A4721DE-25C4-C8AA-EA90-9DA7812E3EBA> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x92c7f000 - 0x92d38fe7 libsqlite3.dylib 9.6.0 (compatibility 9.0.0) <52438E77-55D1-C231-1936-76F1369518E4> /usr/lib/libsqlite3.dylib 0x92d46000 - 0x92d5bfff com.apple.ImageCapture 6.1 (6.1) <B909459A-EAC9-A7C8-F2A9-CD757CDB59E8> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x92d5c000 - 0x92d5cff7 liblangid.dylib ??? (???) <B99607FC-5646-32C8-2C16-AFB5EA9097C2> /usr/lib/liblangid.dylib 0x92d84000 - 0x92d90ff7 libkxld.dylib ??? (???) <9A441C48-2D18-E716-5F38-CBEAE6A0BB3E> /usr/lib/system/libkxld.dylib 0x92d91000 - 0x92dadfe3 com.apple.openscripting 1.3.1 (???) <2A748037-D1C0-6D47-2C4A-0562AF799AC9> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x92db7000 - 0x92dcbfe7 libbsm.0.dylib ??? (???) <14CB053A-7C47-96DA-E415-0906BA1B78C9> /usr/lib/libbsm.0.dylib 0x92dff000 - 0x92dffff7 com.apple.vecLib 3.6 (vecLib 3.6) <FF4DC8B6-0AB0-DEE8-ADA8-7B57645A1F36> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib 0x92e09000 - 0x92e66ff7 com.apple.framework.IOKit 2.0 (???) <3DABAB9C-4949-F441-B077-0498F8E47A35> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x92e67000 - 0x92e8fff7 libxslt.1.dylib 3.24.0 (compatibility 3.0.0) <E761F29A-328B-29D9-3DF0-023F2C21E500> /usr/lib/libxslt.1.dylib 0x92e90000 - 0x92e9dff7 com.apple.NetFS 3.2.2 (3.2.2) <DDC9C397-C35F-8D7A-BB24-3D1B42FA5FAB> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x92e9e000 - 0x92ea9ff7 libGL.dylib ??? (???) <3E34468F-E9A7-8EFB-FF66-5204BD5B4E21> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x92eaa000 - 0x92eaaff7 com.apple.ApplicationServices 38 (38) <8012B504-3D83-BFBB-DA65-065E061CFE03> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x92f52000 - 0x92f5cfe7 com.apple.audio.SoundManager 3.9.3 (3.9.3) <5F494955-7290-2D91-DA94-44B590191771> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework/Versions/A/CarbonSound 0x92f98000 - 0x92f9bffb com.apple.help 1.3.2 (41.1) <8AC20B01-4A3B-94BA-D8AF-E39034B97D8C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x93187000 - 0x9318bff7 libGIF.dylib ??? (???) <9E51F8ED-83B4-DA41-1E2F-CFA726936A30> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x9318c000 - 0x93239fe7 libobjc.A.dylib 227.0.0 (compatibility 1.0.0) <9F8413A6-736D-37D9-8EB3-7986D4699957> /usr/lib/libobjc.A.dylib 0x93253000 - 0x93286ff7 com.apple.AE 496.5 (496.5) <BF9673D5-2419-7120-26A3-83D264C75222> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x93287000 - 0x93367fe7 com.apple.vImage 4.1 (4.1) <D029C515-08E1-93A6-3705-DD062A3A672C> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x934e1000 - 0x9357cfe7 com.apple.ApplicationServices.ATS 275.19 (???) <2E83B3E9-AF39-36FC-5D05-CC1E952098AB> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x9357d000 - 0x935c1fe7 com.apple.Metadata 10.6.3 (507.15) <74F05E64-2A68-BA10-CCD4-128D164E5A0F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x93603000 - 0x93640ff7 com.apple.SystemConfiguration 1.10.8 (1.10.2) <50E4D49B-4F61-446F-1C21-1B2BA814713D> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x936bd000 - 0x93880feb com.apple.ImageIO.framework 3.0.6 (3.0.6) <5BF202E9-730A-3675-4374-E5300BC8ED10> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x93ee4000 - 0x93ff0fe7 libGLProgrammability.dylib ??? (???) <6167CEB0-D8D6-C4D9-DD74-49755ADB540F> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLProgrammability.dylib 0x94037000 - 0x9407dff7 libauto.dylib ??? (???) <29422A70-87CF-10E2-CE59-FEE1234CFAAE> /usr/lib/libauto.dylib 0x9407e000 - 0x94081ff7 libCGXType.A.dylib 545.0.0 (compatibility 64.0.0) <4D766435-EB76-C384-0127-1D20ACD74076> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x94146000 - 0x9415eff7 com.apple.CFOpenDirectory 10.6 (10.6) <D1CF5881-0AF7-D164-4156-9E9067B7FA37> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x9415f000 - 0x9494e557 com.apple.CoreGraphics 1.545.0 (???) <1D9DC7A5-228B-42CB-7018-66F42C3A9BB3> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics 0x9494f000 - 0x9499ffe7 libTIFF.dylib ??? (???) <E8B31850-BFD4-48E6-B264-A4340CD19929> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x949db000 - 0x949efffb com.apple.speech.synthesis.framework 3.10.35 (3.10.35) <57DD5458-4F24-DA7D-0927-C3321A65D743> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x94afa000 - 0x94b1bfe7 com.apple.opencl 12.3.6 (12.3.6) <B4104B80-1CB3-191C-AFD3-697843C6BCFF> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x94b1c000 - 0x94b96fff com.apple.audio.CoreAudio 3.2.6 (3.2.6) <156A532C-0B60-55B0-EE27-D02B82AA6217> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x94b97000 - 0x94b97ff7 com.apple.Accelerate 1.6 (Accelerate 1.6) <3891A689-4F38-FACD-38B2-4BF937DE30CF> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x94cc6000 - 0x94d72fe7 com.apple.CFNetwork 454.12.4 (454.12.4) <DEDCD006-389F-967F-3405-EDF541F406D7> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x94d73000 - 0x94e10fe3 com.apple.LaunchServices 362.3 (362.3) <15B47388-16C8-97DA-EEBB-1709E136169E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x94e11000 - 0x94e1fff7 com.apple.opengl 1.6.14 (1.6.14) <82622F67-E032-0BF6-A78D-50B346E8D0FD> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x94e20000 - 0x95144fef com.apple.HIToolbox 1.6.5 (???) <21164164-41CE-61DE-C567-32E89755CB34> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x95189000 - 0x953fafef com.apple.Foundation 6.6.8 (751.63) <69B3441C-B196-F2AD-07F8-D8DD24E4CD8C> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x953fb000 - 0x9540bff7 libsasl2.2.dylib 3.15.0 (compatibility 3.0.0) <C8744EA3-0AB7-CD03-E639-C4F2B910BE5D> /usr/lib/libsasl2.2.dylib 0x9540c000 - 0x95cefff7 com.apple.AppKit 6.6.8 (1038.36) <A353465E-CFC9-CB75-949D-786F6F7732F6> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x95cf0000 - 0x95cf1ff7 com.apple.audio.units.AudioUnit 1.6.7 (1.6.7) <93EC71F1-4D4E-F456-8EFE-32E7EFD7A064> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x9642f000 - 0x96455ffb com.apple.DictionaryServices 1.1.2 (1.1.2) <43E1D565-6E01-3681-F2E5-72AE4C3A097A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x96498000 - 0x96554fff com.apple.ColorSync 4.6.8 (4.6.8) <920DD017-8B41-7334-E554-A85DB99EBD5A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x974aa000 - 0x9752cffb SecurityFoundation ??? (???) <BFE377A4-C830-3ECA-E69F-8A8094CDA0A6> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x9752d000 - 0x976affe7 libicucore.A.dylib 40.0.0 (compatibility 1.0.0) <50A70082-F800-93D8-1A7C-C95AAB1F352C> /usr/lib/libicucore.A.dylib 0x976b0000 - 0x97ac6ff7 libBLAS.dylib 219.0.0 (compatibility 1.0.0) <C4FB303A-DB4D-F9E8-181C-129585E59603> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x97ac7000 - 0x97b0aff7 libGLU.dylib ??? (???) <6CC3CE6A-7024-C685-EADA-7F9DC27128E2> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x97b0b000 - 0x97b15ffb com.apple.speech.recognition.framework 3.11.1 (3.11.1) <7486003F-8FDB-BD6C-CB34-DE45315BD82C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x97b16000 - 0x97be7fe3 ColorSyncDeprecated.dylib 4.6.0 (compatibility 1.0.0) <C618942F-BC01-0565-18CF-477B63C02181> /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ColorSync.framework/Versions/A/Resources/ColorSyncDeprecated.dylib 0x97be8000 - 0x97d16fe7 com.apple.CoreData 102.1 (251) <87FE6861-F2D6-773D-ED45-345272E56463> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x97f24000 - 0x98024fe7 libxml2.2.dylib 10.3.0 (compatibility 10.0.0) <BE7FCD73-03B5-25A4-FCA4-D4980F1488D6> /usr/lib/libxml2.2.dylib 0x98025000 - 0x98033fe7 libz.1.dylib 1.2.3 (compatibility 1.0.0) <33C1B260-ED05-945D-FC33-EF56EC791E2E> /usr/lib/libz.1.dylib 0x98034000 - 0x98045ff7 com.apple.LangAnalysis 1.6.6 (1.6.6) <3036AD83-4F1D-1028-54EE-54165E562650> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x98046000 - 0x9804cfe7 com.apple.CommerceCore 1.0 (9.1) <521D067B-3BDA-D04E-E1FA-CFA526C87EB5> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0x98425000 - 0x9868bff7 com.apple.security 6.1.2 (55002) <3FA54D69-5476-78DD-0AFC-D6697263890E> /System/Library/Frameworks/Security.framework/Versions/A/Security 0x986d4000 - 0x9870fffb libFontRegistry.dylib ??? (???) <19ED5DE0-D3AF-B229-9193-35D58FE377E5> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x98a0a000 - 0x98a0cff7 com.apple.securityhi 4.0 (36638) <FC01BFC4-04DB-96F3-2412-A86CC4F94CB2> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x98a0d000 - 0x98abbff3 com.apple.ink.framework 1.3.3 (107) <233A981E-A2F9-56FB-8BDE-C2DEC3F20784> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x98b4c000 - 0x98b8dff7 libRIP.A.dylib 545.0.0 (compatibility 64.0.0) <80998F66-0AD7-AD12-B9AF-3E8D2CE6DE05> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x98b8e000 - 0x98bdbfeb com.apple.DirectoryService.PasswordServerFramework 6.1 (6.1) <136BFA48-D456-B677-3B5D-40A6946C3A09> /System/Library/PrivateFrameworks/PasswordServer.framework/Versions/A/PasswordServer 0x98bdc000 - 0x98c00ff7 libJPEG.dylib ??? (???) <C43FD809-08B6-629D-8980-D7B0ECEA20A9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x98dba000 - 0x98dd8fe7 libPng.dylib ??? (???) <5B979A83-8CE7-6BD7-B84C-A2D1119B378D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x98dd9000 - 0x98df9fe7 libresolv.9.dylib 41.1.0 (compatibility 1.0.0) <8C2B5FA8-2469-21C7-D297-F95A0FFE5F19> /usr/lib/libresolv.9.dylib 0x98e33000 - 0x99268ff7 libLAPACK.dylib 219.0.0 (compatibility 1.0.0) <5E2D2283-57DE-9A49-1DB0-CD027FEFA6C2> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x99a41000 - 0x99a44ff7 libCoreVMClient.dylib ??? (???) <37F56237-4ABA-E5B5-968D-70FFE357E8E0> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x99a45000 - 0x99addfe7 edu.mit.Kerberos 6.5.11 (6.5.11) <F36DB665-A88B-7F5B-6244-6A2E7FFFF668> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x99ade000 - 0x99ae5ff3 com.apple.print.framework.Print 6.1 (237.1) <F5AAE53D-5530-9004-A9E3-2C1690C5328E> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print 0x99ae6000 - 0x99b47fe7 com.apple.CoreText 151.13 (???) <23F359DA-D845-5C50-4DF3-19E858CF2B2C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework/Versions/A/CoreText 0x99b74000 - 0x99bb7ff7 com.apple.NavigationServices 3.5.4 (182) <8DC6FD4A-6C74-9C23-A4C3-715B44A8D28C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework/Versions/A/NavigationServices 0x99bb8000 - 0x99f23ff7 com.apple.QuartzCore 1.6.3 (227.37) <E323A5CC-499E-CA9E-9BC3-537231449CAA> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x99f4f000 - 0x99fb9fe7 libstdc++.6.dylib 7.9.0 (compatibility 7.0.0) <411D87F4-B7E1-44EB-F201-F8B4F9227213> /usr/lib/libstdc++.6.dylib 0x99fce000 - 0x99fd3ff7 com.apple.OpenDirectory 10.6 (10.6) <0603680A-A002-D294-DE83-0D028C6BE884> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x99fd5000 - 0x99fd5ff7 com.apple.CoreServices 44 (44) <51CFA89A-33DB-90ED-26A8-67D461718A4A> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x9a27b000 - 0x9a27efe7 libmathCommon.A.dylib 315.0.0 (compatibility 1.0.0) <1622A54F-1A98-2CBE-B6A4-2122981A500E> /usr/lib/system/libmathCommon.A.dylib 0x9a286000 - 0x9a2c0ff7 libcups.2.dylib 2.8.0 (compatibility 2.0.0) <A6C207E3-7B42-926D-9C93-BE3F50B92496> /usr/lib/libcups.2.dylib 0x9a2e9000 - 0x9a2f4ff7 libCSync.A.dylib 545.0.0 (compatibility 64.0.0) <287DECA3-7821-32B6-724D-AE03A9A350F9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib 0x9a2f5000 - 0x9a339ff3 com.apple.coreui 2 (114) <2234855E-3BED-717F-0BFA-D1A289ECDBDA> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x9a370000 - 0x9a370ff7 com.apple.Carbon 150 (152) <BFDDA394-0F01-A3A3-A226-ED3A45975A56> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x9a371000 - 0x9a371ff7 com.apple.Accelerate.vecLib 3.6 (vecLib 3.6) <ABF97DA4-3BDF-6FFD-6239-B023CA1F7974> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x9a3b0000 - 0x9a4a4ff7 libiconv.2.dylib 7.0.0 (compatibility 7.0.0) <061ABF36-8BA9-79C1-6CE7-EC69A4998F51> /usr/lib/libiconv.2.dylib 0x9a4a5000 - 0x9a7c5ff3 com.apple.CoreServices.CarbonCore 861.39 (861.39) <5C59805C-AF39-9010-B8B5-D673C9C38538> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x9a7c6000 - 0x9a96dff7 libSystem.B.dylib 125.2.11 (compatibility 1.0.0) <2DCD13E3-1BD1-6F25-119A-3863A3848B90> /usr/lib/libSystem.B.dylib 0x9a97c000 - 0x9a9ccff7 com.apple.framework.familycontrols 2.0.2 (2020) <C96C8A99-A40C-8B9C-1FBA-A0F46AC92F17> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0xffff0000 - 0xffff1fff libSystem.B.dylib ??? (???) <2DCD13E3-1BD1-6F25-119A-3863A3848B90> /usr/lib/libSystem.B.dylib Model: MacBookPro4,1, BootROM MBP41.00C1.B03, 2 processors, Intel Core 2 Duo, 2.5 GHz, 6 GB, SMC 1.27f3 Graphics: NVIDIA GeForce 8600M GT, GeForce 8600M GT, PCIe, 512 MB Memory Module: global_name AirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x8C), Broadcom BCM43xx 1.0 (5.10.131.42.4) Bluetooth: Version 2.4.5f3, 2 service, 12 devices, 1 incoming serial ports Network Service: Built-in Ethernet, Ethernet, en0 Network Service: AirPort, AirPort, en1 Serial ATA Device: WDC WD5000BEVT-22ZAT0, 465,76 GB Parallel ATA Device: HL-DT-ST DVDRW GSA-S10N USB Device: Built-in iSight, 0x05ac (Apple Inc.), 0x8502, 0xfd400000 / 3 USB Device: BRCM2046 Hub, 0x0a5c (Broadcom Corp.), 0x4500, 0x1a100000 / 2 USB Device: Bluetooth USB Host Controller, 0x05ac (Apple Inc.), 0x820f, 0x1a110000 / 4 USB Device: Apple Internal Keyboard / Trackpad, 0x05ac (Apple Inc.), 0x0231, 0x5d200000 / 3 USB Device: IR Receiver, 0x05ac (Apple Inc.), 0x8242, 0x5d100000 / 2
2433	It was needlessly confusing people, as it doesnt necessarily match the number of transactions in the transaction list. There is discussion and code in #2177 to add this to the debug window. Im not sure about that, but I am sure that it needs to go from the overview page.
2432	Now that bitcoinrpc 0.3 is out (https://pypi.python.org/pypi/bitcoin-python/0.3), I am suggesting versions of the contrib python scripts (wallettools and spendfrom), which are using this new version. IMPORTANT: these will not work with bitcoinrpc V0.2.
2431	The internal miner is closely bound to the wallet engine, not the blockchain engine. This small cleanup was cherry-picked from #2154 because it is useful beyond the obvious merits: it gets closer to my goal of fork()ing away the blockchain engine. Note that this commit places GenerateBitcoins() after RPC server start, unlike #2154 which employs a stub thread.
2430	boost::filesystem::create_directory() defaults to allow all users full access to the Bitcoin DataDir. This directory should only be accessible to the owner to limit unauthorized access. A future version can use boost::filesystem::permissions() (v1.49+) instead of dealing with the lower level chmod directly.
2429	Providing a stack list of past receive addresses as a top level GUI element encourages reuse, it makes addresses seem like something scarce which should be conserved. It also can result in people accidentally sending coins to addresses created prior to wallet encryption. The interface should probably be adjusted to make it clear that used addresses are used and shouldnt be reused, e.g. by only displaying the initial digits of all but the most recent address and requiring context click to get details.
2428	Words in English language are more short than in other langs usually. Tabs dont fits in line in Spanish/German/Russian when they has two words. Wallet has limited functionality. It can send & receive coins. So we can safely rename "Send coins" to "Send" and "Receive coins" to "Receive". Address book is just user contacts. This change is affects a translations. Ported from Freicoin
2426	Hello, It keeps telling me at the bottom of the screen that the displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade. I am using bitcoin-qt v0.7.2-beta qt version 4.8.2 i am also using a mac os x version 10.6.8 and i have tried to upgrade the bitcoin wallet using bitcoin-0.8.1-macosx.dmg but after a restart it will not open the wallet unless i go back to my previous version. :-( any help will be greatly appreciated. :-)
2425	A little confused here.... git clone cat clientversion.h #define CLIENT_VERSION_MAJOR 0 #define CLIENT_VERSION_MINOR 8 #define CLIENT_VERSION_REVISION 0 #define CLIENT_VERSION_BUILD 0 Why not 0.8.1? Thank you
2424	On non-us keyboards you can obtain lower case characters even pressing the SHIFT, this caused false positives (issue #1855).
2423	Based on #2409 (though I dont think it needs it). Just puts a limit on how large mapAlreadyAskedFor can grow.
2422	-dbcache was originally used to set the maximum buffer size in the BDB environment, and was later changed to set the chainstate cache and leveldb caches. No need to use it for BDB now that only the wallet remains there. This should reduce memory allocation (but not necessarily memory usage) a bit, especially when -dbcache is set high.
2421	This optional parameter is used to specify the block which is used to look up the raw transaction. (https://github.com/bitcoin/bitcoin/issues/2077) ![Pantallazo](https://f.cloud.github.com/assets/155036/316346/a28a2b3c-9812-11e2-81a5-c9f788280e7b.png)
2420	Clean up all known global datastructures at shutdown. This should make leak detection much easier. Typical valgrind output after this: ==5897== definitely lost: 0 bytes in 0 blocks ==5897== indirectly lost: 0 bytes in 0 blocks ==5897== possibly lost: 1,903 bytes in 9 blocks ==5897== still reachable: 194,073 bytes in 2,929 blocks (almost all of the reachable stuff is RPC/asio/boostthreads)
2419	It seems there were two mechanisms for assessing whether a CNode was still in use: a refcount and a release timestamp. The latter seems to have been there for a long time, as a safety mechanism. However, this timer also keeps CNode objects alive for far longer than necessary after disconnects, potentially opening up a DoS window. This commit removes the timestamp-based mechanism, and replaces it with an assert(nRefCount >= 0), to verify that the refcounting is indeed correctly working.
2418	Every block index entry currently requires a separately-allocated CBigNum. By replacing them with uint256, its just 32 bytes extra in CBlockIndex itself. This should save us a few megabytes in RAM (around 32 bytes per block), and less allocation overhead.
2417	This week I have been adding block replay into MultiBit for the bcj 0.8-MASTER code. I have it working but it is not as robust as it could be. The main area is of trouble is the AbstractBlockChain#findSplit and related methods. This is typical: 14:02:25.127 [New I/O worker #2] WARN com.google.bitcoin.core.Peer - [80.218.174.253]:8333 - java.lang.NullPointerException: Attempt to follow an orphan chain at com.google.common.base.Preconditions.checkNotNull(Preconditions.java:204) ~[multibit-exe.jar:na] at com.google.bitcoin.core.AbstractBlockChain.findSplit(AbstractBlockChain.java:615) ~[multibit-exe.jar:na] at com.google.bitcoin.core.AbstractBlockChain.handleNewBestChain(AbstractBlockChain.java:524) ~[multibit-exe.jar:na] at com.google.bitcoin.core.AbstractBlockChain.connectBlock(AbstractBlockChain.java:483) ~[multibit-exe.jar:na] at com.google.bitcoin.core.AbstractBlockChain.add(AbstractBlockChain.java:359) ~[multibit-exe.jar:na] at com.google.bitcoin.core.AbstractBlockChain.add(AbstractBlockChain.java:247) ~[multibit-exe.jar:na] at com.google.bitcoin.core.Peer.endFilteredBlock(Peer.java:741) ~[multibit-exe.jar:na] at com.google.bitcoin.core.Peer.processMessage(Peer.java:257) ~[multibit-exe.jar:na] at com.google.bitcoin.core.Peer.access$400(Peer.java:48) ~[multibit-exe.jar:na] at com.google.bitcoin.core.Peer$PeerHandler.messageReceived(Peer.java:237) ~[multibit-exe.jar:na] at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:296) ~[multibit-exe.jar:na] at org.jboss.netty.handler.codec.frame.FrameDecoder.unfoldAndFireMessageReceived(FrameDecoder.java:462) ~[multibit-exe.jar:na] at org.jboss.netty.handler.codec.replay.ReplayingDecoder.callDecode(ReplayingDecoder.java:536) ~[multibit-exe.jar:na] at org.jboss.netty.handler.codec.replay.ReplayingDecoder.messageReceived(ReplayingDecoder.java:435) ~[multibit-exe.jar:na] at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:268) ~[multibit-exe.jar:na] at org.jboss.netty.channel.Channels.fireMessageReceived(Channels.java:255) ~[multibit-exe.jar:na] at org.jboss.netty.channel.socket.nio.NioWorker.read(NioWorker.java:88) ~[multibit-exe.jar:na] at org.jboss.netty.channel.socket.nio.AbstractNioWorker.process(AbstractNioWorker.java:107) ~[multibit-exe.jar:na] at org.jboss.netty.channel.socket.nio.AbstractNioSelector.run(AbstractNioSelector.java:312) ~[multibit-exe.jar:na] at org.jboss.netty.channel.socket.nio.AbstractNioWorker.run(AbstractNioWorker.java:88) ~[multibit-exe.jar:na] at org.jboss.netty.channel.socket.nio.NioWorker.run(NioWorker.java:178) ~[multibit-exe.jar:na] at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:895) [na:1.6.0_43] at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:918) [na:1.6.0_43] at java.lang.Thread.run(Thread.java:680) [na:1.6.0_43] The net result of this is that the Peer gets dropped and so you waste time creating a new one. It still works but is not ideal. Also to get the SPVBlockStore to replay ok I am creating a brand new SPVBlockStore on replay. If I dont, I precondition higher and lower are reversed in AbstractBlockChain#getPartialChain Again, recreating a new blockstore works but you always end up having to sync back to the last checkpoint even though you have all the block headers since then in the SPVBlockStore. This is a bit inefficient. The code in the MultiBit mb-0.5-bcj-v0.8 branch is what I am working on.
2416	Hi, I just tried to upgrade from 0.7.x to 0.8.1 compiling bitcoin-0.8.1-linux.tar.gz from source, but the resulting bitcoind executable fails with an assertion in ./db/skiplist.h. This is on debian-mipsel squeeze, compiled via make -C src/src -f makefile.unix CXXFLAGS="-O2 -march=loongson2f" \ DEBUGFLAGS= using gcc (Debian 4.4.5-8) 4.4.5 (Note the unusual architecture: 32-bit MIPSEL!) A backtrace recorded from GDB: (gdb) run Starting program: /usr/local/bin/bitcoind [Thread debugging using libthread_db enabled] bitcoind: ./db/skiplist.h:152: leveldb::SkipList<Key, Comparator>::Node* leveldb::SkipList<Key, Comparator>::Node::Next(int) [with Key = const char*, Comparator = leveldb::MemTable::KeyComparator]: Assertion `n >= 0 failed. Program received signal SIGABRT, Aborted. 0x2b221048 in raise () from /lib/libc.so.6 (gdb) bt #0 0x2b221048 in raise () from /lib/libc.so.6 #1 0x2b2261f8 in abort () from /lib/libc.so.6 #2 0x2b218238 in __assert_fail () from /lib/libc.so.6 #3 0x0063884c in leveldb::SkipList<char const*, leveldb::MemTable::KeyComparator>::FindGreaterOrEqual(char const* const&, leveldb::SkipList<char const*, leveldb::MemTable::KeyComparator>::Node**) const () #4 0x00638944 in leveldb::SkipList<char const*, leveldb::MemTable::KeyComparator>::Insert(char const* const&) () #5 0x00638294 in leveldb::MemTable::Add(unsigned long long, leveldb::ValueType, leveldb::Slice const&, leveldb::Slice const&) () #6 0x00646fdc in leveldb::(anonymous namespace)::MemTableInserter::Put(leveldb::Slice const&, leveldb::Slice const&) () #7 0x00647464 in leveldb::WriteBatch::Iterate(leveldb::WriteBatch::Handler*) const () #8 0x006475c4 in leveldb::WriteBatchInternal::InsertInto(leveldb::WriteBatch const*, leveldb::MemTable*) () #9 0x0062c550 in leveldb::DBImpl::RecoverLogFile(unsigned long long, leveldb::VersionEdit*, unsigned long long*) () #10 0x0062d734 in leveldb::DBImpl::Recover(leveldb::VersionEdit*) () #11 0x0062e6b8 in leveldb::DB::Open(leveldb::Options const&, std::string const&, leveldb::DB**) () #12 0x0061c38c in CLevelDB::CLevelDB(boost::filesystem::basic_path<std::string, boost::filesystem::path_traits> const&, unsigned int, bool, bool) () ---Type <return> to continue, or q <return> to quit--- #13 0x0061ca70 in CBlockTreeDB::CBlockTreeDB(unsigned int, bool, bool) () #14 0x00496dac in AppInit2() () #15 0x0049a290 in AppInit(int, char**) () #16 0x0049aeb0 in main () This happened on first invokation, I do not yet have any leveldb files present. The only files touched by 0.8.1 in my ~/.bitcoin directory are debug.log and peers.dat. cheers, David
2415	Using a publisher socket to publish three things when they are happening in the Bitcoin client: 1) New transactions 2) New blocks 3) New ipaddresses This way there are no need to ask the bitcoin client if something new has happen. You will be notified! To compile: make -f makefile.unix USE_ZMQ=1 To run: bitcoind -zmqpubbind="ipc://.bitcoin.pub" A Python client that will print all the information: [CODE] import zmq def main(): context = zmq.Context() socket = context.socket(zmq.SUB) socket.setsockopt(zmq.SUBSCRIBE, "") socket.connect("ipc://.bitcoin.pub") while True: msg = socket.recv() print "%s" % (msg[8:]) if __name__ == __main__: main() [/CODE] For more commandline options, see bitcoind --help.
2414	- Update Boost from 1.50 to 1.53 -- removes the need to build the Chrono lib - Update OpenSSL from 1.0.1c to 1.0.1e -- fixes for CVE-2013-0169, CVE-2012-2686 and CVE-2013-0166 - Update Qt from 4.8.3 to 4.8.4 - Update libqrencode from 3.2.0 to 3.4.2 -- Memory leak bug has been fixed and others Dont merge this yet, this is just to see what pull tester is doing with it :). Replaces #2108
2411	
2410	In my tests corrupted wallets would often result in BDB dropping an error just due to duplicate records being found, which appears harmless.
2409	This pull request contains: * The commits from #2016 and #2017 * Fixes and memory improvements for those * A change from per-connection to per-message send buffers * A change to break processing of getdata into several stages, when the send buffer fills up This should improve network latency and memory usage.
2408	On Windows, select() is limited to 64 sockets by default. As a result, Bitcoin can communicate with no more than 63 peers. (Not 64, because the listening socket is also passed to select().) The default value of maxconnections=125 can never be reached. Since listening nodes are important to the network, this may be worth fixing. All it takes is "#define FD_SETSIZE 1024" (or some other number greater than 64) before "#include &lt;winsock2.h&gt;" in compat.h. I tried it locally and now have over 100 connections.
2406	Building bitcoin as root can cause /dev/null to be removed on some systems (e.g. FreeBSD 8.3-RELEASE-p3 and gcc version 4.2.2). This pull request fixes the issue. A patch has also been sent upstream, see
2405	Mac OS X 10.7.5 Bitcoin-Qt 0.8.1 Recently upgraded to Bitcoin-Qt 0.8.1, the new version had started over rechecking the entire block chain. At about 90% caught up the system crashed (kernel panic / grey screen of death). After the system crash, Bitcoin-Qt would crash on launch. A quick search for the problem suggested reinstalling, so I reinstalled to a different folder, and the new installation also crashed on launch. I didnt look at the crash report before reinstalling, now both installs crash with this error: **"Assertion failed: (pfork != NULL), function SetBestChain, file src/main.cpp, line 1742"**. I also have 0.6.3 installed, but have not launched it since the first install of 0.8.1. EDIT: If you are also having this problem, please share your `debug.log` here *before* attempting to fix the problem. ---- Full crash report: ``` Process: Bitcoin-Qt [2063] Path: /Applications/Bitcoin-Qt 0.8.1.app/Contents/MacOS/Bitcoin-Qt Identifier: com.yourcompany.Bitcoin-Qt Version: ??? (???) Code Type: X86 (Native) Parent Process: launchd [429] Date/Time: 2013-03-22 22:23:06.699 -0400 OS Version: Mac OS X 10.7.5 (11G63) Report Version: 9 Interval Since Last Report: 33905 sec Crashes Since Last Report: 7 Per-App Interval Since Last Report: 264824 sec Per-App Crashes Since Last Report: 6 Anonymous UUID: 5D80C8F7-50E1-44E3-94F8-D8CBAB8BE703 Crashed Thread: 0 Dispatch queue: com.apple.main-thread Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Application Specific Information: objc[2063]: garbage collection is OFF Assertion failed: (pfork != NULL), function SetBestChain, file src/main.cpp, line 1742. Thread 0 Crashed:: Dispatch queue: com.apple.main-thread 0 libsystem_kernel.dylib 0x935bb9c6 __pthread_kill + 10 1 libsystem_c.dylib 0x98a93f78 pthread_kill + 106 2 libsystem_c.dylib 0x98a84bdd abort + 167 3 libsystem_c.dylib 0x98ab920b __assert_rtn + 351 4 com.yourcompany.Bitcoin-Qt 0x000d1656 SetBestChain(CValidationState&, CBlockIndex*) + 2454 5 com.yourcompany.Bitcoin-Qt 0x000d3526 ConnectBestBlock(CValidationState&) + 598 6 com.yourcompany.Bitcoin-Qt 0x0011cbd7 AppInit2() + 16839 7 com.yourcompany.Bitcoin-Qt 0x000229e3 main + 7603 8 com.yourcompany.Bitcoin-Qt 0x0001f921 start + 53 Thread 1:: Dispatch queue: com.apple.libdispatch-manager 0 libsystem_kernel.dylib 0x935bc90a kevent + 10 1 libdispatch.dylib 0x914f9e04 _dispatch_mgr_invoke + 969 2 libdispatch.dylib 0x914f8853 _dispatch_mgr_thread + 53 Thread 2: 0 libsystem_kernel.dylib 0x935bbb42 __select + 10 1 QtCore 0x019dea90 qt_safe_select(int, fd_set*, fd_set*, fd_set*, timeval const*) + 320 2 QtCore 0x019e2dda QEventDispatcherUNIXPrivate::doSelect(QFlags<QEventLoop::ProcessEventsFlag>, timeval*) + 394 3 QtCore 0x019e326f QEventDispatcherUNIX::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 175 4 QtCore 0x019ac471 QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 65 5 QtCore 0x019ac84a QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 314 6 QtCore 0x0188aa45 QThread::exec() + 261 7 QtCore 0x0188e0d3 QThread::terminate() + 787 8 libsystem_c.dylib 0x98a91ed9 _pthread_start + 335 9 libsystem_c.dylib 0x98a956de thread_start + 34 Thread 3: 0 libsystem_kernel.dylib 0x935bb83e __psynch_cvwait + 10 1 libsystem_c.dylib 0x98a95e21 _pthread_cond_wait + 827 2 libsystem_c.dylib 0x98a4642c pthread_cond_wait$UNIX2003 + 71 3 com.yourcompany.Bitcoin-Qt 0x000af522 boost::condition_variable::wait(boost::unique_lock<boost::mutex>&) + 226 4 com.yourcompany.Bitcoin-Qt 0x0010fa0d CCheckQueue<CScriptCheck>::Loop(bool) + 413 5 com.yourcompany.Bitcoin-Qt 0x000bf55f ThreadScriptCheck(void*) + 79 6 libboost_thread-mt.dylib 0x00cd4845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x98a91ed9 _pthread_start + 335 8 libsystem_c.dylib 0x98a956de thread_start + 34 Thread 4: 0 libsystem_kernel.dylib 0x935bb83e __psynch_cvwait + 10 1 libsystem_c.dylib 0x98a95e21 _pthread_cond_wait + 827 2 libsystem_c.dylib 0x98a463e0 pthread_cond_timedwait$UNIX2003 + 70 3 libboost_thread-mt.dylib 0x00cdbe2b boost::condition_variable::do_timed_wait(boost::unique_lock<boost::mutex>&, timespec const&) + 289 4 libboost_thread-mt.dylib 0x00cd54f8 boost::this_thread::sleep(boost::posix_time::ptime const&) + 548 5 com.yourcompany.Bitcoin-Qt 0x00165994 ThreadFlushWalletDB(void*) + 420 6 libboost_thread-mt.dylib 0x00cd4845 boost::detail::thread_data_base::~thread_data_base() + 779 7 libsystem_c.dylib 0x98a91ed9 _pthread_start + 335 8 libsystem_c.dylib 0x98a956de thread_start + 34 Thread 0 crashed with X86 Thread State (32-bit): eax: 0x00000000 ebx: 0x01ec1000 ecx: 0xbfffe6cc edx: 0x935bb9c6 edi: 0xacdf82c0 esi: 0x00000006 ebp: 0xbfffe6e8 esp: 0xbfffe6cc ss: 0x0000001f efl: 0x00200246 eip: 0x935bb9c6 cs: 0x00000007 ds: 0x0000001f es: 0x0000001f fs: 0x00000000 gs: 0x00000037 cr2: 0x01ec1000 Logical CPU: 0 Binary Images: 0x1000 - 0x5b3fef +com.yourcompany.Bitcoin-Qt (??? - ???) <B353FA8B-4A03-D8BC-EAC8-E1DA0E20F48A> /Applications/Bitcoin-Qt 0.8.1.app/Contents/MacOS/Bitcoin-Qt 0x87e000 - 0x883fe7 +libqrencode.3.dylib (5.1.0 - compatibility 5.0.0) <9627FE72-1198-798B-1841-A64F967F32FB> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libqrencode.3.dylib 0x887000 - 0x88eff7 +libminiupnpc.8.dylib (??? - ???) <2DBB7FA6-2198-8004-2ECF-F504F2081317> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libminiupnpc.8.dylib 0x892000 - 0x8defff +libssl.1.0.0.dylib (??? - ???) <641EBBF5-C97C-1D6C-EFF0-EB02A7FF7629> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libssl.1.0.0.dylib 0x8f8000 - 0xa30fef +libcrypto.1.0.0.dylib (??? - ???) <0943ABB0-E2CA-20EC-B52D-E3D5E2340F02> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libcrypto.1.0.0.dylib 0xa99000 - 0xbf2fff +libdb_cxx-4.8.dylib (??? - ???) <A2028F0C-1E73-00A3-BA80-2DEF2EAC9ECB> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libdb_cxx-4.8.dylib 0xc1c000 - 0xc1fff3 +libboost_system-mt.dylib (??? - ???) <DC2F474D-A848-B1CA-5E46-EAB30E94A639> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libboost_system-mt.dylib 0xc23000 - 0xc36ffb +libboost_filesystem-mt.dylib (??? - ???) <ED32F1B3-0C00-9EA8-A6E4-B4D69BBB090B> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libboost_filesystem-mt.dylib 0xc41000 - 0xc85ff3 +libboost_program_options-mt.dylib (??? - ???) <DAE91877-14DE-370A-9571-A2EC1D7AF3D8> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libboost_program_options-mt.dylib 0xcd0000 - 0xce2ff3 +libboost_thread-mt.dylib (??? - ???) <4F1F450A-6305-F698-98AC-E82075E11758> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libboost_thread-mt.dylib 0xd02000 - 0x1692fe3 +QtGui (4.8.4 - compatibility 4.8.0) <C70071A5-F36B-C018-9BEB-181811A0759F> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/QtGui.framework/Versions/4/QtGui 0x1869000 - 0x1b18ffb +QtCore (4.8.4 - compatibility 4.8.0) <204CC6C5-048C-4746-D9AD-DF6FA3204CE7> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/QtCore.framework/Versions/4/QtCore 0x1b8a000 - 0x1b9bfe7 +libz.1.dylib (1.2.7 - compatibility 1.0.0) <04F507FA-B0BF-CD40-DB2E-CBF29500AF19> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libz.1.dylib 0x1b9f000 - 0x1bc0fe7 +libpng15.15.dylib (30.0.0 - compatibility 30.0.0) <2E174E7D-8E8B-9F51-6A39-53D3243C159E> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libpng15.15.dylib 0x1eca000 - 0x1eceff3 +libqgif.dylib (??? - ???) <88247A6C-7963-6E25-F271-07D15F98CF45> /Applications/Bitcoin-Qt 0.8.1.app/Contents/PlugIns/imageformats/libqgif.dylib 0x1ed3000 - 0x1ed7fff +libqico.dylib (??? - ???) <7AE39AE4-C88A-D835-F6DB-43C38C12D8C9> /Applications/Bitcoin-Qt 0.8.1.app/Contents/PlugIns/imageformats/libqico.dylib 0x1edc000 - 0x1ee0fff +libqjpeg.dylib (??? - ???) <0D0902B6-EB00-4DEA-37B8-43EEB3552921> /Applications/Bitcoin-Qt 0.8.1.app/Contents/PlugIns/imageformats/libqjpeg.dylib 0x1ef9000 - 0x1efbffb +libqtga.dylib (??? - ???) <DF371BC0-F930-689E-9654-D687DE08B059> /Applications/Bitcoin-Qt 0.8.1.app/Contents/PlugIns/imageformats/libqtga.dylib 0x1f02000 - 0x1f05ff7 +libqmng.dylib (??? - ???) <AED7B482-BE3B-C70A-3E5B-7575C58DBCE3> /Applications/Bitcoin-Qt 0.8.1.app/Contents/PlugIns/imageformats/libqmng.dylib 0x2cb0000 - 0x2ce0fe7 +libjpeg.8.dylib (13.0.0 - compatibility 13.0.0) <96B28C90-BE02-5517-87BC-EC348C2EE25C> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libjpeg.8.dylib 0x2ce6000 - 0x2ceaffb +libqtiff.dylib (??? - ???) <D9486AA9-E3DB-C1BF-A248-E5689EC8B768> /Applications/Bitcoin-Qt 0.8.1.app/Contents/PlugIns/imageformats/libqtiff.dylib 0x4cd2000 - 0x4d0dff3 +libqtaccessiblewidgets.dylib (??? - ???) <D256CDF3-59B6-AAC8-D553-A348D30AFD9C> /Applications/Bitcoin-Qt 0.8.1.app/Contents/PlugIns/accessible/libqtaccessiblewidgets.dylib 0x4d25000 - 0x4d72fe7 +libmng.1.dylib (2.0.0 - compatibility 2.0.0) <1A7593E8-6C76-5533-E1BE-51976CB1873C> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libmng.1.dylib 0x6d5f000 - 0x6d87fe7 +liblcms.1.dylib (2.19.0 - compatibility 2.0.0) <81794FD6-C0FC-79D3-7188-36318A86427A> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/liblcms.1.dylib 0x6d91000 - 0x6de3fe7 +libtiff.3.dylib (13.7.0 - compatibility 13.0.0) <27FC7F5B-604D-360A-9D36-7567BEA4D1AD> /Applications/Bitcoin-Qt 0.8.1.app/Contents/Frameworks/libtiff.3.dylib 0x8fe34000 - 0x8fe66aa7 dyld (195.6 - ???) <3A866A34-4CDD-35A4-B26E-F145B05F3644> /usr/lib/dyld 0x90030000 - 0x90041fff libbsm.0.dylib (??? - ???) <54ACF696-87C6-3652-808A-17BE7275C230> /usr/lib/libbsm.0.dylib 0x90244000 - 0x902acfff libc++.1.dylib (28.4.0 - compatibility 1.0.0) <B24814AB-CA77-3B9D-8FAB-58C9B4FD3A16> /usr/lib/libc++.1.dylib 0x90586000 - 0x905c6ff7 libauto.dylib (??? - ???) <984C81BE-FA1C-3228-8F7E-2965E7E5EB85> /usr/lib/libauto.dylib 0x905c7000 - 0x905cdffd com.apple.CommerceCore (1.0 - 17) <E59CD307-58E2-35FD-9131-B38978799910> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0x905f6000 - 0x905f9ff7 libcompiler_rt.dylib (6.0.0 - compatibility 1.0.0) <7F6C14CC-0169-3F1B-B89C-372F67F1F3B5> /usr/lib/system/libcompiler_rt.dylib 0x905fa000 - 0x9066efff com.apple.CoreSymbolication (2.2 - 73.2) <FA9305CA-FB9B-3646-8C41-FF8DF15AB2C1> /System/Library/PrivateFrameworks/CoreSymbolication.framework/Versions/A/CoreSymbolication 0x9066f000 - 0x906acff7 libcups.2.dylib (2.9.0 - compatibility 2.0.0) <007A1877-E981-3007-A8FA-9B179F4ED6D1> /usr/lib/libcups.2.dylib 0x907e8000 - 0x907e9fff libsystem_blocks.dylib (53.0.0 - compatibility 1.0.0) <B04592B1-0924-3422-82FF-976B339DF567> /usr/lib/system/libsystem_blocks.dylib 0x907ea000 - 0x90874ffb com.apple.SearchKit (1.4.0 - 1.4.0) <CF074082-64AB-3A1F-831E-582DF1667827> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x90875000 - 0x90889fff com.apple.CFOpenDirectory (10.7 - 146) <58050170-D74E-3670-945D-D8501F67835F> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x90914000 - 0x90957ffd libcommonCrypto.dylib (55010.0.0 - compatibility 1.0.0) <6B35F203-5D72-335A-A4BC-CC89FEC0E14F> /usr/lib/system/libcommonCrypto.dylib 0x90958000 - 0x90963ffb com.apple.speech.recognition.framework (4.0.21 - 4.0.21) <A1764D2F-EB84-33DC-9ED5-CDA3B468FF3E> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x909fe000 - 0x90a35fef com.apple.DebugSymbols (2.1 - 87) <EB951B78-31A5-379F-AFA1-B5C9A7BB3D23> /System/Library/PrivateFrameworks/DebugSymbols.framework/Versions/A/DebugSymbols 0x90a3b000 - 0x90b59fec com.apple.vImage (5.1 - 5.1) <7757F253-B281-3612-89D4-F2B04061CBE1> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x90b5a000 - 0x90b7cff8 com.apple.PerformanceAnalysis (1.11 - 11) <453463FF-7C42-3526-8C96-A9971EE07154> /System/Library/PrivateFrameworks/PerformanceAnalysis.framework/Versions/A/PerformanceAnalysis 0x90b7d000 - 0x90b97fff com.apple.Kerberos (1.0 - 1) <D7920A1C-FEC4-3460-8DD0-D02491578CBB> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x90bbf000 - 0x90ca2ff7 libcrypto.0.9.8.dylib (44.0.0 - compatibility 0.9.8) <BD913D3B-388D-33AE-AA5E-4810C743C28F> /usr/lib/libcrypto.0.9.8.dylib 0x911f6000 - 0x911f8ffb libRadiance.dylib (??? - ???) <4721057E-5A1F-3083-911B-200ED1CE7678> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x914f7000 - 0x91505fff libdispatch.dylib (187.10.0 - compatibility 1.0.0) <1B857064-288D-3919-B81A-38E9F4D19B54> /usr/lib/system/libdispatch.dylib 0x91506000 - 0x9156afff com.apple.framework.IOKit (2.0 - ???) <94827954-5906-36C4-819B-24CDAFD85C72> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x916bd000 - 0x916d2ff7 com.apple.ImageCapture (7.1.0 - 7.1.0) <E5FCA336-7E47-343E-A82D-CCCA5BCD5929> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x9180d000 - 0x9181bff7 libxar-nossl.dylib (??? - ???) <5BF4DA8E-C319-354A-967E-A0C725DC8BA3> /usr/lib/libxar-nossl.dylib 0x9181c000 - 0x91c91ff7 FaceCoreLight (1.4.7 - compatibility 1.0.0) <3E2BF587-5168-3FC5-9D8D-183A9C7C1DED> /System/Library/PrivateFrameworks/FaceCoreLight.framework/Versions/A/FaceCoreLight 0x91c98000 - 0x91ca6fff com.apple.opengl (1.8.1 - 1.8.1) <766AFB12-A2CB-3A55-B662-FC9FFCAE0008> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x91ca7000 - 0x91cafff3 liblaunch.dylib (392.39.0 - compatibility 1.0.0) <9E6135FF-C2B1-3BC9-A160-B32D71BFA77C> /usr/lib/system/liblaunch.dylib 0x91cb0000 - 0x91cb1ffd libCVMSPluginSupport.dylib (??? - ???) <4B0476F9-950D-3EB7-BD83-F65AF0B05F0E> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCVMSPluginSupport.dylib 0x91cb2000 - 0x91cb3fff libDiagnosticMessagesClient.dylib (??? - ???) <DB3889C2-2FC2-3087-A2A2-4C319455E35C> /usr/lib/libDiagnosticMessagesClient.dylib 0x91cb4000 - 0x91cb4fff com.apple.Carbon (153 - 153) <F996332A-390E-3337-A09E-A1E54004B567> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x91cb5000 - 0x91d4cff3 com.apple.securityfoundation (5.0 - 55116) <EB53CEF7-4836-39FD-B012-6BC122ED4CE9> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x91d4d000 - 0x91e3dff1 libiconv.2.dylib (7.0.0 - compatibility 7.0.0) <9E5F86A3-8405-3774-9E0C-3A074273C96D> /usr/lib/libiconv.2.dylib 0x91ebc000 - 0x91ef2ff7 com.apple.AE (527.7 - 527.7) <7BAFBF18-3997-3656-9823-FD3B455056A4> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x91ef3000 - 0x91ef4ff7 libquarantine.dylib (36.7.0 - compatibility 1.0.0) <46980EC2-149D-3CF7-B29A-401FB89C275D> /usr/lib/system/libquarantine.dylib 0x91ef5000 - 0x91efcff9 libsystem_dnssd.dylib (??? - ???) <EBEAF723-84F8-3544-8FB2-31B7771B50D0> /usr/lib/system/libsystem_dnssd.dylib 0x9211b000 - 0x9211cff4 libremovefile.dylib (21.1.0 - compatibility 1.0.0) <6DE3FDC7-0BE0-3791-B6F5-C15422A8AFB8> /usr/lib/system/libremovefile.dylib 0x9244d000 - 0x924aaffb com.apple.htmlrendering (76 - 1.1.4) <409EF0CB-2997-369A-9326-BE12436B9EE1> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HTMLRendering.framework/Versions/A/HTMLRendering 0x924d0000 - 0x9252bff3 com.apple.Symbolication (1.3 - 91) <4D12D2EC-5010-3958-A205-9A67E972C76A> /System/Library/PrivateFrameworks/Symbolication.framework/Versions/A/Symbolication 0x9252c000 - 0x92836ff3 com.apple.Foundation (6.7.2 - 833.25) <4C52ED74-A1FD-3087-A2E1-035AB3CF9610> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x92837000 - 0x92859ffe com.apple.framework.familycontrols (3.0 - 300) <6735D7ED-7053-3AB8-B144-E7F70A124CCD> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0x9285a000 - 0x928bbffb com.apple.audio.CoreAudio (4.0.3 - 4.0.3) <7A14BE52-6789-3CE3-9AE9-B733F4903EB1> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x9335e000 - 0x93374ffe libxpc.dylib (77.19.0 - compatibility 1.0.0) <0585AA94-F4FD-32C1-B586-22E7184B781A> /usr/lib/system/libxpc.dylib 0x93375000 - 0x93375ff2 com.apple.CoreServices (53 - 53) <7CB7AA95-D5A7-366A-BB8A-035AA9E582F8> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x93376000 - 0x933f1ffb com.apple.ApplicationServices.ATS (317.12.0 - ???) <4D124B65-3D43-32E9-B296-3671347BB888> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x933f2000 - 0x93402fff com.apple.LangAnalysis (1.7.0 - 1.7.0) <6D6F0C9D-2EEA-3578-AF3D-E2A09BCECAF3> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x93403000 - 0x934c3ffb com.apple.ColorSync (4.7.4 - 4.7.4) <0A68AF35-15DF-3A0A-9B17-70CE2A106A6C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x934c4000 - 0x934ceff2 com.apple.audio.SoundManager (3.9.4.1 - 3.9.4.1) <2A089CE8-9760-3F0F-B77D-29A78940EA17> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework/Versions/A/CarbonSound 0x934cf000 - 0x934d1ff7 libdyld.dylib (195.5.0 - compatibility 1.0.0) <52F7B44C-1B43-3B7B-9C9E-6410D8682935> /usr/lib/system/libdyld.dylib 0x934f9000 - 0x93507fff libz.1.dylib (1.2.5 - compatibility 1.0.0) <E73A4025-835C-3F73-9853-B08606E892DB> /usr/lib/libz.1.dylib 0x93585000 - 0x935a2ff3 com.apple.openscripting (1.3.3 - ???) <0579A4CB-FD6F-3D7F-A17B-AC0F2CF11FC7> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x935a3000 - 0x935c1ff7 libsystem_kernel.dylib (1699.32.7 - compatibility 1.0.0) <79179F83-457A-3539-A76B-E960D2108109> /usr/lib/system/libsystem_kernel.dylib 0x935c2000 - 0x9361bfff com.apple.HIServices (1.21 - ???) <91EC636D-AC27-3332-BA1C-FD7301917429> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x93627000 - 0x93632ff3 libCSync.A.dylib (600.0.0 - compatibility 64.0.0) <D6E17FD4-ECA0-3EEE-BFC5-F6A42A21AB5D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib 0x93633000 - 0x93698ff7 libvDSP.dylib (325.4.0 - compatibility 1.0.0) <4B4B32D2-4F66-3B0D-BD61-FA8429FF8507> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x936f6000 - 0x937b9fff com.apple.CoreServices.OSServices (478.50 - 478.50) <916A3B50-1033-3FFE-A9AF-3CC2B0F60EAE> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x937ba000 - 0x937c2ff5 libcopyfile.dylib (85.1.0 - compatibility 1.0.0) <BB0C7B49-600F-3551-A460-B7E36CA4C4A4> /usr/lib/system/libcopyfile.dylib 0x937db000 - 0x937ebff7 libCRFSuite.dylib (??? - ???) <94E040D2-2769-359A-A21B-DB85FCB73BDC> /usr/lib/libCRFSuite.dylib 0x938a0000 - 0x938a0ff0 com.apple.ApplicationServices (41 - 41) <C48EF6B2-ABF9-35BD-A07A-A38EC0008294> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x938a1000 - 0x938c4fff com.apple.CoreVideo (1.7 - 70.3) <4234C11C-E8E9-309A-9465-27D6D7458895> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x938c5000 - 0x938eaff9 libJPEG.dylib (??? - ???) <743578F6-8C0C-39CC-9F15-3A01E1616EAE> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x9393b000 - 0x93a4cff7 libJP2.dylib (??? - ???) <3B6A6D1C-5E4D-3814-892A-7C580E063268> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJP2.dylib 0x93a5d000 - 0x93a5dfff libOpenScriptingUtil.dylib (??? - ???) <E4C22B65-9493-31D5-9D46-19BD70975587> /usr/lib/libOpenScriptingUtil.dylib 0x93ad4000 - 0x93e1aff3 com.apple.HIToolbox (1.9 - ???) <E5EA9EEF-3CCA-36A0-8688-DA2E64E2256C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x93e1b000 - 0x93ea2fff com.apple.print.framework.PrintCore (7.1 - 366.3) <EEC03CAB-7F79-3931-87FE-4DF0B767BF47> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x93f3d000 - 0x93f40ffd libCoreVMClient.dylib (??? - ???) <B8F8916D-F12A-3D95-ABF3-999D57B7D581> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x94019000 - 0x941f0fe7 com.apple.CoreFoundation (6.7.2 - 635.21) <4D1D2BAF-1332-32DF-A81B-7E79D4F0A6CB> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x941f1000 - 0x942e9ff7 libFontParser.dylib (??? - ???) <71B33EB1-27F8-3C68-B940-FC61A3CFE275> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x94422000 - 0x94460fff libRIP.A.dylib (600.0.0 - compatibility 64.0.0) <AF1174F9-4402-31EB-9C84-AB644E5865DF> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x94461000 - 0x94465ffa libcache.dylib (47.0.0 - compatibility 1.0.0) <56256537-6538-3522-BCB6-2C79DA6AC8CD> /usr/lib/system/libcache.dylib 0x94a46000 - 0x94cbaff3 com.apple.CoreImage (7.99.1 - 1.0.1) <C4B2DD2A-8E45-31CD-9B25-2AC1CA252B14> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/CoreImage.framework/Versions/A/CoreImage 0x94cbb000 - 0x94d04ff7 libGLU.dylib (??? - ???) <9AF7AD51-16E3-3674-B60E-30EE499D7B46> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x94d9e000 - 0x94d9efff com.apple.audio.units.AudioUnit (1.7.3 - 1.7.3) <2E71E880-25D1-3210-8D26-21EC47ED810C> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x94d9f000 - 0x94df1ff7 libFontRegistry.dylib (??? - ???) <C2B84661-A62D-3FFF-8D8C-BC697E9BDF4C> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x94df2000 - 0x952ceff6 libBLAS.dylib (??? - ???) <134ABFC6-F29E-3DC5-8E57-E13CB6EF7B41> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x952d1000 - 0x9530efef libGLImage.dylib (??? - ???) <FC13D46F-69C4-3BA1-A5E8-52C2EC8B7D58> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x9530f000 - 0x95317ff3 libunwind.dylib (30.0.0 - compatibility 1.0.0) <E8DA8CEC-12D6-3C8D-B2E2-5D567C8F3CB5> /usr/lib/system/libunwind.dylib 0x95b29000 - 0x95f2bff6 libLAPACK.dylib (??? - ???) <00BE0221-8564-3F87-9F6B-8A910CF2F141> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x95f2c000 - 0x95f74ff7 com.apple.SystemConfiguration (1.11.3 - 1.11) <68B92FEA-F754-3E7E-B5E6-D512E26144E7> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x95f75000 - 0x95f9fff1 com.apple.CoreServicesInternal (113.19 - 113.19) <F7A309D1-DCB4-38DE-8248-E16D0182AA6C> /System/Library/PrivateFrameworks/CoreServicesInternal.framework/Versions/A/CoreServicesInternal 0x95fa0000 - 0x9622cffb com.apple.RawCamera.bundle (4.04 - 680) <DD1D3CFC-1710-3186-A6C4-89B42F100117> /System/Library/CoreServices/RawCamera.bundle/Contents/MacOS/RawCamera 0x9622d000 - 0x96238ffe libbz2.1.0.dylib (1.0.5 - compatibility 1.0.0) <B63F5D07-93B3-3F02-BFB7-472B4ED3521F> /usr/lib/libbz2.1.0.dylib 0x96239000 - 0x9623ffff libGFXShared.dylib (??? - ???) <9C9834EB-B794-38C8-9B90-31D8CB234F86> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x96240000 - 0x9626eff7 com.apple.DictionaryServices (1.2.1 - 158.3) <8D03D180-D834-39F3-A106-78E0B22A7893> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x9626f000 - 0x9626fffe libkeymgr.dylib (23.0.0 - compatibility 1.0.0) <7F0E8EE2-9E8F-366F-9988-E2F119DB9A82> /usr/lib/system/libkeymgr.dylib 0x962e8000 - 0x962e8fff com.apple.vecLib (3.7 - vecLib 3.7) <8CCF99BF-A4B7-3C01-9219-B83D2AE5F82A> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib 0x9631e000 - 0x965edffb com.apple.security (7.0 - 55148.6) <8DF67BDD-C98F-3B7E-AC63-D468407FA82D> /System/Library/Frameworks/Security.framework/Versions/A/Security 0x965ee000 - 0x9662eff7 com.apple.NavigationServices (3.7 - 193) <16A8BCC8-7343-3A90-88B3-AAA334DF615F> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework/Versions/A/NavigationServices 0x971cc000 - 0x971e8ff5 com.apple.GenerationalStorage (1.0 - 126.1) <E622F823-7D98-3D13-9C3D-7EA482567394> /System/Library/PrivateFrameworks/GenerationalStorage.framework/Versions/A/GenerationalStorage 0x971e9000 - 0x97247ff7 com.apple.coreui (1.2.2 - 165.11) <340B0B83-1407-3AB4-BCAB-505C29303EE2> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x97248000 - 0x972e4fff com.apple.ink.framework (10.7.5 - 113) <05CAFB64-D3B8-3973-87EA-CB8BBE580F6B> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x97337000 - 0x97340fff libc++abi.dylib (14.0.0 - compatibility 1.0.0) <FEB5330E-AD5D-37A0-8AB2-0820F311A2C8> /usr/lib/libc++abi.dylib 0x973c1000 - 0x9744eff7 com.apple.CoreText (220.22.0 - ???) <EA7210A7-DECC-3F76-8A66-D4E41859B3C6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework/Versions/A/CoreText 0x9744f000 - 0x9746fff7 com.apple.RemoteViewServices (1.5 - 44.2) <11C87337-FF29-3976-A230-6387D96563C5> /System/Library/PrivateFrameworks/RemoteViewServices.framework/Versions/A/RemoteViewServices 0x97470000 - 0x97f05ff6 com.apple.AppKit (6.7.5 - 1138.51) <B9D3DCA0-9765-354E-9730-75A45A97DDFD> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x97f06000 - 0x97f93fe7 libvMisc.dylib (325.4.0 - compatibility 1.0.0) <F2A8BBA3-6431-3CED-8CD3-0953410B6F96> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x97f95000 - 0x97f97ff9 com.apple.securityhi (4.0 - 1) <39157216-5E43-392A-AE3F-716726D8C8BF> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x97fe4000 - 0x97fe7ff9 libCGXType.A.dylib (600.0.0 - compatibility 64.0.0) <16DCE20A-9790-369A-94C1-B7954B418C77> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x9802d000 - 0x9813cff7 com.apple.DesktopServices (1.6.5 - 1.6.5) <CEC069D7-37A3-3D25-A3BB-39DE99FDA46E> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x98169000 - 0x98169fff com.apple.Accelerate (1.7 - Accelerate 1.7) <4192CE7A-BCE0-3D3C-AAF7-6F1B3C607386> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x9816a000 - 0x9816afff com.apple.Accelerate.vecLib (3.7 - vecLib 3.7) <22997C20-BEB7-301D-86C5-5BFB3B06D212> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x98527000 - 0x9852affb com.apple.help (1.3.2 - 42) <B1E6701C-7473-30B2-AB5A-AFC9A4823694> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x9852b000 - 0x98572ff5 com.apple.opencl (2.0.19 - 2.0.19) <7689E7B9-EE5A-3F74-8699-4CDED9162260> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x98852000 - 0x98853ff7 libsystem_sandbox.dylib (??? - ???) <26960D2B-BEA6-3B3B-9BC7-D73437EF4149> /usr/lib/system/libsystem_sandbox.dylib 0x9887d000 - 0x988a8fff com.apple.GSS (2.2 - 2.0) <2C468B23-FA87-30B5-B9A6-8C5D1373AA30> /System/Library/Frameworks/GSS.framework/Versions/A/GSS 0x988a9000 - 0x9893fff7 com.apple.LaunchServices (480.40 - 480.40) <D5C0DEF9-398C-3742-8C4E-875C3365EC8B> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x98940000 - 0x989a2ffb com.apple.datadetectorscore (3.0 - 179.4) <3A418498-C189-37A1-9B86-F0ECB33AD91C> /System/Library/PrivateFrameworks/DataDetectorsCore.framework/Versions/A/DataDetectorsCore 0x989a3000 - 0x989c0fff libresolv.9.dylib (46.1.0 - compatibility 1.0.0) <2870320A-28DA-3B44-9D82-D56E0036F6BB> /usr/lib/libresolv.9.dylib 0x989c1000 - 0x98a12ff9 com.apple.ScalableUserInterface (1.0 - 1) <3C39DF4D-5CAE-373A-BE08-8CD16E514337> /System/Library/Frameworks/QuartzCore.framework/Versions/A/Frameworks/ScalableUserInterface.framework/Versions/A/ScalableUserInterface 0x98a35000 - 0x98b00fff libsystem_c.dylib (763.13.0 - compatibility 1.0.0) <52421B00-79C8-3727-94DE-62F6820B9C31> /usr/lib/system/libsystem_c.dylib 0x98b01000 - 0x98b02fff com.apple.TrustEvaluationAgent (2.0 - 1) <4BB39578-2F5E-3A50-AD59-9C0AB99472EB> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x98b03000 - 0x98b0aff7 libsystem_notify.dylib (80.1.0 - compatibility 1.0.0) <47DB9E1B-A7D1-3818-A747-382B2C5D9E1B> /usr/lib/system/libsystem_notify.dylib 0x98b58000 - 0x98b5bff7 libmathCommon.A.dylib (2026.0.0 - compatibility 1.0.0) <69357047-7BE0-3360-A36D-000F55E39336> /usr/lib/system/libmathCommon.A.dylib 0x98b5c000 - 0x98c44fff libxml2.2.dylib (10.3.0 - compatibility 10.0.0) <1841196F-68B5-309F-8ED1-6714B1DFEC83> /usr/lib/libxml2.2.dylib 0x98e74000 - 0x98fa0ff9 com.apple.CFNetwork (520.5.1 - 520.5.1) <F3C606BF-6DCF-33CD-981B-7253C9E3113A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x98fa8000 - 0x98fa9fff liblangid.dylib (??? - ???) <C8C204E9-1785-3785-BBD7-22D59493B98B> /usr/lib/liblangid.dylib 0x98fac000 - 0x99102fff com.apple.audio.toolbox.AudioToolbox (1.7.3 - 1.7.3) <F09C7075-2C4E-3A4F-A372-95D700125513> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x99135000 - 0x99136ff0 libunc.dylib (24.0.0 - compatibility 1.0.0) <2F4B35B2-706C-3383-AA86-DABA409FAE45> /usr/lib/system/libunc.dylib 0x99e89000 - 0x99e92ff3 com.apple.CommonAuth (2.2 - 2.0) <C3FD6EC2-8EB3-38FB-BBB7-05009CA49024> /System/Library/PrivateFrameworks/CommonAuth.framework/Versions/A/CommonAuth 0x99e93000 - 0x99e93fff libdnsinfo.dylib (395.11.0 - compatibility 1.0.0) <7EFAD88C-AFBC-3D48-BE14-60B8EACC68D7> /usr/lib/system/libdnsinfo.dylib 0x99e94000 - 0x99fa4fe7 libsqlite3.dylib (9.6.0 - compatibility 9.0.0) <34E1E3CC-7B6A-3B37-8D07-1258D11E16CB> /usr/lib/libsqlite3.dylib 0x9a308000 - 0x9a30dff7 libmacho.dylib (800.0.0 - compatibility 1.0.0) <943213F3-CC9B-328E-8A6F-16D85C4274C7> /usr/lib/system/libmacho.dylib 0x9a366000 - 0x9a36dffd com.apple.NetFS (4.0 - 4.0) <AE731CFE-1B2E-3E46-8759-843F5FB8C24F> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x9a36e000 - 0x9a371ffc libpam.2.dylib (3.0.0 - compatibility 3.0.0) <6FFDBD60-5EC6-3EFA-996B-EE030443C16C> /usr/lib/libpam.2.dylib 0x9a372000 - 0x9a39aff7 libxslt.1.dylib (3.24.0 - compatibility 3.0.0) <AB530FB2-8BD1-3328-95E8-CF449F0429CA> /usr/lib/libxslt.1.dylib 0x9a39b000 - 0x9a411fff com.apple.Metadata (10.7.0 - 627.37) <F54AED70-95C5-3561-8C87-D9E5539E98A4> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x9a444000 - 0x9a501ff3 ColorSyncDeprecated.dylib (4.6.0 - compatibility 1.0.0) <726898F5-E718-3F27-B415-D6FDCDE09174> /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ColorSync.framework/Versions/A/Resources/ColorSyncDeprecated.dylib 0x9a52b000 - 0x9a601aab libobjc.A.dylib (228.0.0 - compatibility 1.0.0) <2E272DCA-38A0-3530-BBF4-47AE678D20D4> /usr/lib/libobjc.A.dylib 0x9a602000 - 0x9a606ff3 libsystem_network.dylib (??? - ???) <62EBADDA-FC72-3275-AAB3-5EDD949FEFAF> /usr/lib/system/libsystem_network.dylib 0x9a607000 - 0x9a614fff libGL.dylib (??? - ???) <A72F14F7-1836-34AB-9F08-67836CB966E4> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x9a615000 - 0x9a620fff libkxld.dylib (??? - ???) <14E79D7A-B6C2-35C5-B56D-D343BEC2A106> /usr/lib/system/libkxld.dylib 0x9a621000 - 0x9a6c5fff com.apple.QD (3.40 - ???) <3881BEC6-0908-3073-BA44-346356E1CDF9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x9a6c6000 - 0x9a6caff7 com.apple.OpenDirectory (10.7 - 146) <4986A382-8FEF-3392-8CE9-CF6A5EE4E365> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x9adc1000 - 0x9af23ffb com.apple.QuartzCore (1.7 - 270.5) <6D0EC7FC-11E5-35FB-A08A-3B438E89FBDB> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x9af37000 - 0x9af42ffc com.apple.NetAuth (3.1 - 3.1) <CD89526E-4FF6-3BB3-A94E-832D4504AB1C> /System/Library/PrivateFrameworks/NetAuth.framework/Versions/A/NetAuth 0x9b02d000 - 0x9b05bfe7 libSystem.B.dylib (159.1.0 - compatibility 1.0.0) <30189C33-6ADD-3142-83F3-6114B1FC152E> /usr/lib/libSystem.B.dylib 0x9b05c000 - 0x9b062ffb com.apple.print.framework.Print (7.4 - 247.3) <CB075EEE-FA1F-345C-A1B5-1AB266FC73A1> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print 0x9b13f000 - 0x9b143fff com.apple.CommonPanels (1.2.5 - 94) <EA47550D-7DAF-30D9-91DB-1FB594CC8522> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x9b3f7000 - 0x9b4c7ffb com.apple.ImageIO.framework (3.1.2 - 3.1.2) <C3CB142F-BE91-3AFA-B052-409F776C0B9E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x9b4c8000 - 0x9b4d0fff com.apple.DiskArbitration (2.4.1 - 2.4.1) <28D5D8B5-14E8-3DA1-9085-B9BC96835ACF> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x9b4d1000 - 0x9b4d5ffd IOSurface (??? - ???) <EDDBEE65-1EB8-33A7-9972-E361A3508234> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x9b4d6000 - 0x9b4e9ff8 com.apple.MultitouchSupport.framework (231.4 - 231.4) <083F7787-4C3B-31DA-B5BB-1993D9A9723D> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x9b4f2000 - 0x9be1d72b com.apple.CoreGraphics (1.600.0 - ???) <DD7CDD67-FC4F-36FE-962F-2EA7EF3FC780> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics 0x9be1e000 - 0x9be80ff3 libstdc++.6.dylib (52.0.0 - compatibility 7.0.0) <266CE9B3-526A-3C41-BA58-7AE66A3B15FD> /usr/lib/libstdc++.6.dylib 0x9be81000 - 0x9be85fff libGIF.dylib (??? - ???) <2ADFED97-2228-343D-9A53-207CBFDE7984> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x9beff000 - 0x9c201fff com.apple.CoreServices.CarbonCore (960.25 - 960.25) <C613B0DA-B401-3DC7-B626-6E20D4DDC8A8> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x9c573000 - 0x9c76bff7 com.apple.CoreData (104.1 - 358.14) <C1730963-F75D-3338-B65F-D50235538B28> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x9c76c000 - 0x9c788ff1 libPng.dylib (??? - ???) <F084226B-14F0-36C0-B5EC-22C78406D2B6> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x9c789000 - 0x9c79efff com.apple.speech.synthesis.framework (4.0.74 - 4.0.74) <92AADDB0-BADF-3B00-8941-B8390EDC931B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x9c7a9000 - 0x9c7f9ffa libTIFF.dylib (??? - ???) <9511A31E-070C-313E-8320-AAB683AD0653> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x9cb6d000 - 0x9cb9cff7 libsystem_info.dylib (??? - ???) <37640811-445B-3BB7-9934-A7C99848250D> /usr/lib/system/libsystem_info.dylib 0x9cba7000 - 0x9cd5bff3 libicucore.A.dylib (46.1.0 - compatibility 1.0.0) <4AFF6FC3-6283-3934-8EFC-CA227CA11164> /usr/lib/libicucore.A.dylib 0x9cd5c000 - 0x9cdcbfff com.apple.Heimdal (2.2 - 2.0) <2E1B8779-36D4-3C62-A67E-0034D77D7707> /System/Library/PrivateFrameworks/Heimdal.framework/Versions/A/Heimdal External Modification Summary: Calls made by other processes targeting this process: task_for_pid: 5 thread_create: 0 thread_set_state: 0 Calls made by this process: task_for_pid: 0 thread_create: 0 thread_set_state: 0 Calls made by all processes on this machine: task_for_pid: 3359 thread_create: 2 thread_set_state: 0 VM Region Summary: ReadOnly portion of Libraries: Total=163.1M resident=66.0M(40%) swapped_out_or_unallocated=97.1M(60%) Writable regions: Total=152.6M written=76.9M(50%) resident=110.9M(73%) swapped_out=16.6M(11%) unallocated=41.7M(27%) REGION TYPE VIRTUAL =========== ======= CG backing stores 284K CG shared images 1256K CoreGraphics 8K CoreServices 6220K MALLOC 124.4M MALLOC guard page 48K Memory tag=240 4K Memory tag=242 12K Stack 66.0M VM_ALLOCATE 16.1M __CI_BITMAP 80K __DATA 7320K __DATA/__OBJC 196K __IMAGE 528K __IMPORT 4K __LINKEDIT 49.2M __OBJC 1548K __OBJC/__DATA 56K __PAGEZERO 4K __TEXT 113.9M __UNICODE 544K mapped file 153.0M shared memory 312K shared pmap 8500K =========== ======= TOTAL 548.9M Model: MacBook4,1, BootROM MB41.00C1.B00, 2 processors, Intel Core 2 Duo, 2.4 GHz, 4 GB, SMC 1.31f1 Graphics: Intel GMA X3100, GMA X3100, Built-In, 144 MB Memory Module: BANK 0/DIMM0, 2 GB, DDR2 SDRAM, 667 MHz, 0x0000000000000000, 0x000000000000000000000000000000000000 Memory Module: BANK 1/DIMM1, 2 GB, DDR2 SDRAM, 667 MHz, 0x0000000000000000, 0x000000000000000000000000000000000000 AirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x88), Broadcom BCM43xx 1.0 (5.10.131.36.15) Bluetooth: Version 4.0.8f17, 2 service, 11 devices, 1 incoming serial ports Network Service: AirPort, AirPort, en1 Serial ATA Device: WDC WD5000BPKT-08PK4T0, 500.11 GB Parallel ATA Device: MATSHITADVD-R UJ-867 USB Device: Built-in iSight, apple_vendor_id, 0x8501, 0xfd400000 / 2 USB Device: Bluetooth USB Host Controller, apple_vendor_id, 0x8205, 0x1a100000 / 2 USB Device: Apple Internal Keyboard / Trackpad, apple_vendor_id, 0x0229, 0x5d200000 / 3 USB Device: IR Receiver, apple_vendor_id, 0x8242, 0x5d100000 / 2 ```
2404	!["Verifying block database integrity" message too long for splash screen width](https://f.cloud.github.com/assets/106988/293398/ae9ea232-9361-11e2-800a-6efa5e7fcbde.png)
2403	Current relay behavior is widely deployed. Supplying a higher minfee than mining and relaying just irritates users without anti-spam gain.
2402	It happens during the wallet synchronisation. On my debian linux 6.0.7 amd64 $ 64/bitcoin-qt QMetaMethod::invoke: Unable to handle unregistered datatype bool* I executed the precompiled binary from bitcoin-0.8.1-linux.tar.gz
2401	While the bitcoin protocol allows only 21 million bitcoins to ever exist, the bitcoin-qt application allows 99999999.99999999 in the amount area. I know that any attempt to send any amount you dont have will fail, But it still seems like a issue that should be fixed. If for no other reason than the principle of not exceeding actual available amounts. :p ![too many bitcoins ](https://f.cloud.github.com/assets/59991/290339/ab4a36d2-92df-11e2-852f-86b26dad6671.png)
2400	Trivial change
2399	Dunno yet if this is of any intetrest in terms of security fixes, but I wanted to mention it. ``Corrected fix for CVE-2013-0169``
2398	My TestNet BitcoinQT instance appears to be acting a bit weird - it says it is synchronising with the network having over 101000 blocks, while the newest block according to the blockexplorer is 61471. I am not sure if it is some bug in the system, or perhaps just my node is being fed false data.
2397	This happens when unlocking the wallet to create a new receive address. Happens every time, so unable to create new receive addresses currently. (Bitcoin version v0.8.0-62-gb5ec091-beta (2013-03-21 10:08:32 +0700)) Qt has caught an exception thrown from an event handler. Throwing exceptions from an event handler is not supported in Qt. You must reimplement QApplication::notify() and catch all exceptions there. Qt has caught an exception thrown from an event handler. Throwing exceptions from an event handler is not supported in Qt. You must reimplement QApplication::notify() and catch all exceptions there. ************************ EXCEPTION: St13runtime_error ReserveKeyFromKeyPool() : read failed bitcoin in Runaway exception [Thread 0x7fffdd5b2700 (LWP 6673) exited] bitcoin-qt.master: /usr/include/boost/thread/pthread/recursive_mutex.hpp:101: void boost::recursive_mutex::lock(): Assertion `!pthread_mutex_lock(&m) failed. Program received signal SIGABRT, Aborted. [Switching to Thread 0x7fffba7fc700 (LWP 6688)] 0x00007ffff46fe425 in raise () from /lib/x86_64-linux-gnu/libc.so.6 (gdb) bt #0 0x00007ffff46fe425 in raise () from /lib/x86_64-linux-gnu/libc.so.6 #1 0x00007ffff4701b8b in abort () from /lib/x86_64-linux-gnu/libc.so.6 #2 0x00007ffff46f70ee in ?? () from /lib/x86_64-linux-gnu/libc.so.6 #3 0x00007ffff46f7192 in __assert_fail () from /lib/x86_64-linux-gnu/libc.so.6 #4 0x0000000000450d4d in boost::unique_lock<AnnotatedMixin<boost::recursive_mutex> >::lock() () #5 0x000000000050cfc4 in ThreadSocketHandler2(void*) () #6 0x000000000050e6f1 in ThreadSocketHandler(void*) () #7 0x00007ffff69866c9 in ?? () from /usr/lib/libboost_thread.so.1.49.0 #8 0x00007ffff6761e9a in start_thread () from /lib/x86_64-linux-gnu/libpthread.so.0 #9 0x00007ffff47bbcbd in clone () from /lib/x86_64-linux-gnu/libc.so.6 #10 0x0000000000000000 in ?? ()
2396	
2395	Hi all, I hadnt run my bitcoin client for ~2 years before I thought of doing it again. I downloaded the 0.8.0 client and ran it. It started wiuth >200k blocks remaining, then confirmed my coins with ~50k blocks remaining. Then somewhere around ~30k remaining it crashed with "cannot create FB cursor" error. I tried -rescan and -salvagewallet to no avail. I tried bringing it up, after crashing, then before it crashes again backing up the wallet and quitting, then restarting with the backup when it crashes. This got me to ~300 block remaining at one point, but never finished. Then the fork problem surfaced and I had to stop. After it was resolved I tried it again, but this time I never got beyond ~40k blocks remaining. Ive searched around but havent found anyone with the same problem -- db cursor problem happens but they dont seem to be the same cause. Your kind help would be very much appreciated!
2393	Trivial changes, ported from Freicoin
2392	At around 80% update completion the update has stopped and a message is displayed saying see bitcoin.org/may15 for important message" I did exactly as it said by creating the DB_CONFIG file. I tried using .txt, .cfg and no extension at all but none worked. How to resolve this. please help
2389	Problem: Bitcoin-QT crash when importing a private key. Bug report. Bitcoin-QT version 0.8.1 Windows version: Windows 7 professional 32-bit Block-chain not downloaded completely - about 7K blocks left. Action that cause the issue: Help -> Debug window -> Console Write help to get info about commands. then importprivkey privatekeyhere labelhere or importprivkey privatekeyhere both makes the Debug window unresponsive when clicking it after the commands have finished. After clicking the X in the far right corner, windows says the program is non-responsive and asks if it should be shut down. Ive tried waiting for a long time (several minutes) to see if it resolved itself, it didnt. However after forcing a closedown of the program through the windows close down feature, and restarting the bitcoin client, the address appears to have been imported just fine. I havent tried to send or receive any coins with the imported adresses yet. But I assume that would work. When bitcoin-QT starts again, it takes a while and gives a message about verifying the block database integrity or something like that, I didnt note down exactly what it said. Could the reason be that the client is rescanning ? I didnt ask it to rescan.
2387	I want to keep us up to date, so another translations update after the recent merges.
2386	- this should prevent GUI issues on Mac that were observed before (disappearing GUI - see #1522) - the patch ensures, that createTrayIconMenu() is always called on Mac to process and use our MacDockIconHandler
2385	This gives people running bitcoind a way of getting alerts in a timely manner, instead of needing to poll with "getinfo" and parse the "errors" array. Example usage in a bitcoin.conf: alertnotify=echo %s | mail -s "URGENT: bitcoind alert" admin@service.com The command string is passed to the shell, with %s replaced by the alert message enclosed in single quotes.
2384	Now that the wallet is the only thing in BDB any DB open errors must be from the wallet itself-- so deleting everything else will not likely help.
2383	This patch adds a new "Advanced" pane to the options box where the dust limit for accepted transactions can be set, and where a filter on output addresses can be specified. CTxMemPool::accept() will drop any transaction with outputs below the dust limit, or with an output address corresponding to an address specified in the filter. ![screenshot](https://f.cloud.github.com/assets/420734/273459/ef1212e4-9024-11e2-957a-31f3f8996172.png)
2382	IMHO the copyright displayed in the bitcoin-qt.exe properties should be updated to 2013 ;).
2380	Hi, I just downloaded and extracted 0.8.1. Now I am getting a segfault. Any ideas? $ strace ./software/bitcoin-0.8.1-linux/bin/64/bitcoin-qt execve("./software/bitcoin-0.8.1-linux/bin/64/bitcoin-qt", ["./software/bitcoin-0.8.1-linux/b"...], [/* 54 vars */]) = -1 EFAULT (Bad address) --- SIGSEGV {si_signo=SIGSEGV, si_code=SI_USER, si_pid=29845, si_uid=1000} --- +++ killed by SIGSEGV +++ Segmentation fault (core dumped) Any idea? Im on Fedora 17 3.7.6-102.fc17.x86_64 #1 SMP Mon Feb 4 17:40:25 UTC 2013 x86_64 x86_64 x86_64 GNU/Linux. $ sha1sum bitcoin-qt 46185bb1ca2af3fa75d902c11c20fa2115ea2cf4 bitcoin-qt
2379	The GUI won"t save my options on my mac osx 108.3 with bit coin-qt 0.8.1b.
2378	Ill create a Transifex pull afterwards, perhaps we have a little more time to let the translators catch up before the 0.8.1 release!?
2377	I cannot see any of the addresses completely and I cannot even resize the column, because its width is locked. It should be made wider, or allow resizing. ![bug](https://f.cloud.github.com/assets/3167494/268785/5f5c5e1a-8f58-11e2-9b2b-084b14e5e1cc.png)
2376	IMHO, this is no Linux specific switch.
2374	I recomend that we implement something like this: void DoEvents() { MSG msg; BOOL result; while ( ::PeekMessage(&msg, NULL, 0, 0, PM_NOREMOVE ) ) { result = ::GetMessage(&msg, NULL, 0, 0); if (result == 0) // WM_QUIT { ::PostQuitMessage(msg.wParam); break; } else if (result == -1) { // Handle errors/exit application, etc. } else { ::TranslateMessage(&msg); :: DispatchMessage(&msg); } } } There should be also be a way of closing it before it has started like an x on the init window.
2373	I intend these three commits, applied on top of the v0.8.0 tag, to be the 0.8.1 release. The plan is: + A new checkblock rule, in effect until 15 May, that ensure only blocks compatible with old releases are accepted into the main chain (only blocks that touch 4,500 or fewer distinct txids are allowed). + A limit of 500k to blocks created, also in effect until 15 May. Alerts will be sent to pre-0.8 releases over the next two months, telling people to either upgrade or create a DB_CONFIG file so they can handle large blocks. After May 15th, blocks up to 1MB large will be allowed again. Tested by syncing the entire main chain and the testnet chains. A unit test is included, but it only runs if you download the 900K forking block (see the comment in src/test/checkblock_tests.cpp ).
2372	Report from user via email: I tried setting up a proxy, but when I went into the options and deselected it, then clicked apply, it reselected the option to use a proxy. I cant disable the proxy setting. Help?
2370	I am running the client version 0.8 and wanted to do a quick transfer. Loaded up the client, then as soon as the main window came up I filled out the transaction details and clicked send. The client then proceeded to connect to the peers, synchronise everything, and when it was done, the transaction still had 0 confirmations and was not transmitted to any peer. Waited for a minute, restarted the client, still nothing. I issued an identical transaction again, that one sent (and confirmed), while I still can see the old transaction sitting in my client doing nothing.
2369	Tried to send this amount to my Gox account over 25hrs ago, and its sitting there.. at first i seen 8 nodes next to the unconfirmed, but now nothing but this. Status: 0/unconfirmed Date: 3/13/2013 20:55 To: 12NJFh662w9B1PHg22uy8nV2bGFxWxEmyd Debit: -341.90635313 BTC Transaction fee: -0.0075 BTC Net amount: -341.91385313 BTC Transaction ID: 11189a43b7c9cf6123ac8df20bd43f97aa90309d0a56d7d5584dc481aeeaeec3 Any way to reinitiate the transaction, or information on how long a transaction like this would take to transfer. Any help would be appreciated.
2367	About: v 0.8.0-beta I created above address. I myself sent with 1L74mvbGM3iCz5eZvR47xbxon7we5nWSvZ 1st transaction [130312 1206] of 0.1 BTC has *not* (yet) been recognized by or received by my wallet 2nd transaction [130313 1318] of 0.011 BTC as a test was succesfully completed So wallet balance still : 0.011 BTC [ expected: 0.111 BTC ] Why could 1st fail to happen ? Im out of reasons how it can be. Bug ?
2366	As discussed on the #bitcoin-dev IRC channel, enforcing unique addresses in sendmany is useful because it may prevent the user from accidentally paying somebody twice. If you really want to, it should be possible to include the same address multiple times using the rawtransaction commands, though.
2365	Running Bitcoin-qt on an IPv6-only Windows server 2008 R2. Bitcoin thinks there is IPv4 and binds to 0.0.0.0:8333 and tries to connect to IPv4 nodes and gets stuck. Restarting with addnode to connect to a known ipv6 node works.. debug.log: Bound to [::]:8333 Bound to 0.0.0.0:8333
2364	More or less copied code from the -blocknotify and -walletnotify, but for all accepted transactions. Is there a good reason not to implement this? As far as i can tell any DOS attack will be limited by the rate limiting of free transactions and even then process spawn limits can be set on any unix system. As long as the script does something simple, such as adding the txid to a queue, then there will be little chance of the number of spawned processess building up. This is very useful to people who would otherwise have to rely on constant polling or centralised services such as blockchain.info websockets.
2363	Having a default hard-coded location for the wallet.dat file allows any malware to easily find it and steal the data contained inside. It would be more appropriate to have the user keep that file in a private location on the file system, and load it into the bitcoin software manually only when he/she needs to spend coins. This will make it harder for malware to locate the file, as now it will have to search the entire file-system for something that looks like a bitcoin private key. Perhaps a separate agent similar to [pageant](http://the.earth.li/~sgtatham/putty/0.58/htmldoc/Chapter9.html) for [Putty](http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html) would be appropriate. It will hold private keys in memory only when bitcoin needs to use them.
2361	This just changes the font size of the word "Wallet" from 11 to 13 points.
2359	
2358	First, I acknowledge being technologically illiterate, so I hope Ill be able to adequately explain my problem. Last evening, I tried to download Bitcoin into my computer, but I believe the download was unsuccessful. At least, I dont believe I am able to use the system, and I am eager to become a participant. The current status of my attempt to join is that when I open my Wallet window, I get the following message: "Urgent, chain fork, stop mining on Version .8" I didnt even know I was mining. I was just trying to download the program. Also, both the wallet and recent transactions values show this (in red letters): "out of sync" During the download process, I was watching the progress, as there was an ongoing tabulation of remaining blocks, as the process reported it was "synchronizing with the network." Unfortunately, this was taking several hours to complete, and when it got down to a little over 30,000 blocks remaining, I fell asleep, and my computer shut off. Everything had been seemingly going fine until then, but when I turned my computer back on, and tried to resume the download, thats when I got the messages Ive referred to above. I thought, well, I guess Ill have to start the whole process over again, so I uninstalled the Bitcoin program altogether, but when I reinstalled it, it went right back to where it had left off, and repeated the "Urgent, chain fork, stop mining" warning. So, I closed out the Wallet window again, and thats where it sits now. I want to become a Bitcoin participant, but I dont know how Ill be able to overcome this problem to do so. Help with moving forward from here will be greatly appreciated. Thanks!
2357	The shutdown code has bothered me for a long time, with fShutdown and vnThreadsRunning and a bunch of ad-hoc Sleeps(). Reports of shutdown-on-exit bugs in 0.8 prompted me to clean it all up. This pull reworks the way we keep track of threads, using boost::thread_groups or boost::thread pointers. Instead of polling for a global fShutdown flag, threads now just MilliSleep(), wait on boost mutexes, or periodically call boost::this_thread::interruption_point(), and are interrupted using boosts thread interruption mechanisms. All of the cleanup removes 400 lines of code, and, I hope, makes the code easier to follow. Tested on OSX extensively, and compiled/tested lightly on Windows XP.
2356	In Bitcoin-Qt 0.8.0-beta for Mac OS X, after closing the main window (red X window button), there is no apparent way to restore the GUI except by quitting and restarting the client, which can be time consuming. Possible better alternatives for this: 1. Disable the red X close button. 2. Provide an obvious command for restoring the window if it is closed.
2354	************************ EXCEPTION: St9bad_alloc std::bad_alloc bitcoin in ProcessMessages() ************************ EXCEPTION: St9bad_alloc std::bad_alloc bitcoin in ThreadMessageHandler() terminate called after throwing an instance of std::bad_alloc what(): std::bad_alloc Aborted The only thing I did was to wipe everything clean and start version 0.8.0. It started to download the block chain for a while and when I got back home it was dead. Is there anything I can do to prepare myself so I can gather more information if it happens again? Thinking of crash dumps, logs etc. Im running Lubuntu 12.04, 32 bit. Compiled without support for upnp.
2352	![unnamed](https://f.cloud.github.com/assets/901234/241234/832f0602-899b-11e2-8c69-21d30ee3dc8f.png)
2351	Keeps the UTXO set from being bloated by the creation of outputs that will never be spent because doing so would cost more in fees than they are worth. Includes changes to the UI to ensure the user cant create such outputs, as well as the transaction creation code to round off change if the change txout would itself be unspendable.
2350	Bitcoin-qt has annoyed me and others for some time because the "Copy Address" button only copies to the clipboard that you have to use the cut and paste keystrokes. It does not, until now, copies to the old-fashioned X11 clipboard that you can just select something and paste using the middle button. That complicates doing things like pasting a command line into arbitrary windows (particularly xterm). This very simple change fixes that oversight.
2349	Giving negative values to the -par parameter causes bitcoin to run with 1 verification thread. It can be useful to tell bitcoin to use all existing CPUs but leave e.g. 1 of them free for another tasks; this patch allows that by specifying -par=-1.
2348	This is a real simple change to make the comments match the property names of `CRPCCommand` Here is the diff, ignoring the whitespace:
2347	My bitcoins are in my wallet but have been unconfirmed since 3 o clock this afternoon. I have checked my transaction on the block chain and it says unconfirmed transaction! Can anybody with bitcoin knowledge please shed some light on this situation and tell me how to get my bitcoins confirmed??
2346	When i am trying to compile bitcoin-qt 0.8.0 I am getting g++ -c -pipe -fstack-protector-all -O2 -D_REENTRANT -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -DQT_GUI -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_UPNP=1 -DSTATICLIB -DUSE_IPV6=1 -DHAVE_BUILD_INFO -DLINUX -D_FILE_OFFSET_BITS=64 -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -I/usr/share/qt4/mkspecs/linux-g++ -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -Isrc -Isrc/json -Isrc/qt -Isrc/leveldb/include -Isrc/leveldb/helpers -Ibuild -Ibuild -o build/net.o src/net.cpp src/net.cpp:19:32: error: miniupnpc/miniwget.h: Filen eller katalogen finns inte src/net.cpp:20:33: error: miniupnpc/miniupnpc.h: Filen eller katalogen finns inte src/net.cpp:21:36: error: miniupnpc/upnpcommands.h: Filen eller katalogen finns inte src/net.cpp:22:34: error: miniupnpc/upnperrors.h: Filen eller katalogen finns inte src/net.cpp: In function void ThreadMapPort2(void*): src/net.cpp:1030: error: upnpDiscover was not declared in this scope src/net.cpp:1037: error: aggregate UPNPUrls urls has incomplete type and cannot be defined src/net.cpp:1038: error: aggregate IGDdatas data has incomplete type and cannot be defined src/net.cpp:1041: error: UPNP_GetValidIGD was not declared in this scope src/net.cpp:1046: error: UPNP_GetExternalIPAddress was not declared in this scope src/net.cpp:1047: error: UPNPCOMMAND_SUCCESS was not declared in this scope src/net.cpp:1065: error: UPNP_AddPortMapping was not declared in this scope src/net.cpp:1072: error: UPNPCOMMAND_SUCCESS was not declared in this scope src/net.cpp:1074: error: strupnperror was not declared in this scope src/net.cpp:1081: error: UPNP_DeletePortMapping was not declared in this scope src/net.cpp:1083: error: freeUPNPDevlist was not declared in this scope src/net.cpp:1084: error: FreeUPNPUrls was not declared in this scope src/net.cpp:1099: error: UPNPCOMMAND_SUCCESS was not declared in this scope src/net.cpp:1101: error: strupnperror was not declared in this scope src/net.cpp:1110: error: freeUPNPDevlist was not declared in this scope src/net.cpp:1112: error: FreeUPNPUrls was not declared in this scope make: *** [build/net.o] Fel 1 This is on a Debian 6 What is wrong?
2345	The bitcoin network could have built in and automated monitoring and prevention measures to prevent any group from controlling 51% of the network. My proposed solution is to divide network hash rate,or block generation submission rate, by unique miner ips over some interval to provide caps on accepting new proof of work units from the same ip address over short time intervals. The next level of security would be to prevent high frequency submissions from some kind of ip address cycling from sources with assigned ip address blocks. I thought of this mainly as an ipv4 measure, as Im not sure how ipv6 can be used to help prevent 51% take overs. The affect of this is that disruptive technologies can no longer monopolize network hashing power when used from a few or single ip addresses, and indirectly miner payouts of blocks and transaction fees will be moderated during transitions to asic and other future technologies.
2344	When you go to the debug console and use: walletpassphrase mypassword 1000 and then close the console. You expect that the client wallet will be locked in 1000 seconds. It is, except that if someone comes along and opens the debug window they can then see your previous command in the history and see the password. The debug history should be cleared of walletpassphrase entries on exit.
2343	
2341	I installed the client and at around 3500hashes left it throws this exception. i reinstalled the client.. it hashed a few more blocks and then crashed. right now i reopened and from 3500 it went back to 6000... still waiting on crash Problem signature: Problem Event Name: BEX Application Name: bitcoin-qt.exe Application Version: 0.8.0.0 Application Timestamp: 4d44aa00 Fault Module Name: StackHash_5861 Fault Module Version: 0.0.0.0 Fault Module Timestamp: 00000000 Exception Offset: PCH_AE_FROM_ntdll+0x00041318 Exception Code: c0000005 Exception Data: 00000008 OS Version: 6.2.9200.2.0.0.256.4 Locale ID: 1033 Additional Information 1: 5861 Additional Information 2: 5861822e1919d7c014bbb064c64908b2 Additional Information 3: f3d5 Additional Information 4: f3d5be0cad2787556264647dc02181c3 Read our privacy statement online: If the online privacy statement is not available, please read our privacy statement offline: C:\Windows\system32\en-US\erofflps.txt
2339	End user, Windows 7, BitCoin 0.8.0 Beta. Installed BitCoin, added my wallet.dat file and had it accepted, and began to update the blockchain from the network. At about 75% completion, BitCoin threw the above fatal error and shut down. Subsequent restarts of BitCoin now immediately result in the same thing. What do I do now, please?
2338	This allows full nodes to use bloom filters as an optimization when downloading blocks (dont double-relay txn) as long as we have a sufficiently large mempool.
2337	
2336	Test every invalid op code, and add an explicit test for Gavins proposed format for provably unspendable/always prunable transactions using the 0xFF invalid opcode. Specifically any scriptPubKey of the following form: 0xFF {zero or more ops} Because the scriptSig and scriptPubKey are processed separately one cant even use IF/ENDIF trickery to defeat this. I also like how it says "INVALID" quite clearly as the first opcode. Ive tried this out on testnet with no issues. Unless anyone has a reason why this standard is a bad idea Im also going to raise the issue with P2Pool; currently they are the main producer of non-prunable txouts that could be made prunable this way. No code to actually do anything with this standard is included in this patch; that can be done later.
2335	s/linux/unix/
2334	When I hover over the checkmark in the bottom right corner, I see "last received block was generated 1 minute ago". Thats after my computer has been offline for over 12 hours, and so cant possible be true. The "1 minute ago" seems to mean "the block was generated 1 minute before it was received", but thats not what the message says. I dont really care how long elapsed between block generation and my client receiving it. I care how old the block is now (because that tells me whether Im up to date or not), and thats not what is displayed.
2333	- remove code from step 7, which we already have in step 5 of init
2332	- harmonize the database related init messages - as we have a thread for importing blocks, that init message is obsolete
2331	First translated phrase in this patch, "Double-click to edit address or label" is text of tooltip of table with my addresses.
2330	Ive noticed the Mac binarys icon is somewhat poor quality; it is not properly shadowed, resulting in ugly lines around it, and in addition the icon as a whole isnt very graphically pleasing, giving the impression the app is somewhat amateurish. A professionally designed icon would be a lot better, and given many graphics designers, including myself, have contributed and released such icons for use, it seems silly not to swap to one of them away from the pancake design...even the old gold-coin design was significantly better (I understand it was dropped due to small size; larger, vector versions are available now). ![Screen Shot 2013-02-23 at 05 52 03](https://f.cloud.github.com/assets/1217415/187662/2eae9dba-7d7d-11e2-9834-23da84dba84a.png)
2329	In bitcoin_ru.ts, line 605: "" needs to be replaced with "" (http://dic.academic.ru/dic.nsf/ushakov/1024290)
2328	The news about release of 0.8.0 version of Bitcoin Qt suggest thats not a Beta, while the README say : Bitcoin 0.8.0 BETA
2327	allow bitcoin to save database files in different location instead of default C:/
2326	-
2325	
2324	Hi There, It may be a ClamXav anomaly, but both 0.7.2 and 0.8.0 versions of BitCoin for OSX show up as being infected with "Osx.Exploit.Iosjailbreak" virus. I download V0.7.2 2 days ago, and V0.8.0 this morning. Nothing else that I have ever downloaded has ever shown up any malicious content. I am running ClamXav V2.3.4, with engine 0.97.6/16702/Wed Feb 20 05:36:46 2013. Any advise or comments would be welcomed. Thanks, Steve Riyadh, Saudi Arabia ![130220-0001](https://f.cloud.github.com/assets/3645927/175267/3b00541a-7b42-11e2-977f-6239d14f3a7c.png)
2323	bitcoin 0.8.x 44d7f4cbebd446f8f4a48ff9048d4549c0e2448a FreeBSD 8.x i386, gcc 4.2.1, boost 1.53.0, db 4.8.30 Not sure what to make of this... I can supply info/test as needed. Bitcoin 0.6.x and 0.7.x tests pass ok. This is new for 0.8.x. disk space df: 18GiB free, 87% capacity ./test_bitcoin Error: Error: Disk space is low! Assertion failed: (!pthread_mutex_destroy(&m)), function ~recursive_mutex, file /boost1530/include/boost/thread/pthread/recursive_mutex.hpp, line 98. Test setup error: signal: generated by kill() (or family); uid=1001; pid=41471
2322	bitcoin 0.8.x 44d7f4cbebd446f8f4a48ff9048d4549c0e2448a FreeBSD 8.x i386, gcc 4.2.1, boost 1.53.0, db 4.8.30 Here are all the remaining compilation output for review... # bitcoin net.cpp:355: warning: pszKeyword may be used uninitialized in this function net.cpp:354: warning: pszGet may be used uninitialized in this function test/bloom_tests.cpp:45: warning: this decimal constant is unsigned only in ISO C90 # leveldb db/db_impl.cc:1316: warning: comparison between signed and unsigned integer expressions db/log_reader.cc:181: warning: comparison between signed and unsigned integer expressions db/log_reader.cc:192: warning: comparison between signed and unsigned integer expressions db/log_writer.cc:77: warning: comparison between signed and unsigned integer expressions db/memtable.cc:104: warning: comparison between signed and unsigned integer expressions db/version_edit.cc:101: warning: comparison between signed and unsigned integer expressions table/filter_block.cc:100: warning: comparison between signed and unsigned integer expressions util/bloom.cc:50: warning: comparison between signed and unsigned integer expressions util/coding.cc:84: warning: comparison between signed and unsigned integer expressions util/logging.cc:67: warning: comparison between signed and unsigned integer expressions
2321	bitcoin 0.8.x 44d7f4cbebd446f8f4a48ff9048d4549c0e2448a FreeBSD 8.x i386, gcc 4.2.1, boost 1.53.0, db 4.8.30 Here are all compilation warnings tied to boost. Submitted in case the boost issues may cause problem with bitcoin. test/multisig_tests.cpp:219: instantiated from here test/sigopcount_tests.cpp:24: instantiated from here test/script_P2SH_tests.cpp:306: instantiated from here test/wallet_tests.cpp:107: instantiated from here test/bignum_tests.cpp:131: instantiated from here # each bitcoin instance above is wrapped by the same set of boost lines below boost1530/include/boost/test/test_tools.hpp: In function boost::test_tools::predicate_result boost::test_tools::tt_detail::equal_impl(const Left&, const Right&) [with Left = unsigned int, Right = int]: boost1530/include/boost/test/test_tools.hpp:560: instantiated from boost::test_tools::predicate_result boost::test_tools::tt_detail::equal_impl_frwd::call_impl(const Left&, const Right&, mpl_::false_) const [with Left = unsigned int, Right = int] boost1530/include/boost/test/test_tools.hpp:575: instantiated from boost::test_tools::predicate_result boost::test_tools::tt_detail::equal_impl_frwd::operator()(const Left&, const Right&) const [with Left = unsigned int, Right = int] boost1530/include/boost/test/test_tools.hpp:523: instantiated from bool boost::test_tools::tt_detail::check_frwd(Pred, const boost::unit_test::lazy_ostream&, boost::test_tools::const_string, size_t, boost::test_tools::tt_detail::tool_level, boost::test_tools::tt_detail::check_type, const Arg0&, const char*, const Arg1&, const char*) [with Pred = boost::test_tools::tt_detail::equal_impl_frwd, Arg0 = size_t, Arg1 = int] # insert bitcoin instance here boost1530/include/boost/test/test_tools.hpp:536: warning: comparison between signed and unsigned integer expressions
2320	Little thing in package downloaded from SF: ![](http://i.imgur.com/e6Q5DWa.png)
2319	Problem: bitcoin-qt disconnects from peer when downloading blocks with fast connection. Steps to reproduce: 1. install a fresh copy bitcoin-qt on a computer, with no blocks saved 2. start bitcoin-qt with -connect= to a client with updated blockchain, and on a local area network (or any fast connection) After downloading for a few seconds, the block downloading process will halt, and bitcoin (the one thats downloading) will be idle for a few minutes before restarting again. I believe the problem is caused by this pull request: , as setting maxreceivebuffer=500000 in bitcoin.conf resolves this issue.
2316	I was attempting to use the JSON-RPC feature of bitcoind on ubuntu linux 12.04 64. From another machine on the network I sent to the JSON port on the linux box {"id":1,"account":"dianne","method":"getaccountaddress","jsonrpc":"2.0"} I recieved an HTTP Error 500 I can successfully call other methods, for instance if I send {"id":1,"method":"listaccounts","jsonrpc":"2.0"} I recieve: {"result":{"":0.00000000},"error":null,"id":1} with no issues. I was originally using version 0.7.2, but after I got these issues I found and thought the update would be in the new release candidate for version 0.8rc1 So I upgraded but I am still having the same issue. So far the methods Ive tried that work are: listaccounts listreceivedbyaddress Methods that failed: getaccountaddress getnewaddress These are the only methods Ive tried so far.
2315	In case any step in the loading of block databases fails, suggest to start a reindex.
2314	No one is maintaining ready-to-go windows dependencies, and the current ones are ancient, so the current windows build instructions dont make sense. If someone feels like writing complete build instructions including dependencies, please do.
2313	Following the directions here: With a fresh install of MinGW, Qt 4.8.4, and the specified dependencies archive, I get: \bitcoin\src\keystore.h:10: error: boost/signals2/signal.hpp: No such file or directory Along with other errors about signals2. There is no signals2 in the dependencies archive. Im guessing the archive hasnt been updated in awhile and contains an old version of boost. Perhaps the link to the archive should be removed until it is updated (its the same in master branch), and the readme should just instruct users to build boost, etc. themselves.
2312	This fixes test_bitcoin failures on openbsd reported by dhill on IRC. On some systems rand() is a simple LCG over 2^31 and so it produces an even-odd sequence. ApproximateBestSubset was only using the least significant bit and so every run of the iterative solver would be the same for some inputs, resulting in some pretty dumb decisions. Using something other than the least significant bit would paper over the issue but who knows what other way a systems rand() might get us here. Instead we use an internal RNG with a period of something like 2^60 which is well behaved. This also makes it possible to make the selection deterministic for the tests, if we wanted to implement that.
2311	Fixes issue#2288. Includes cleanups from Lukes pull 2243. Tested on OSX, Linux, and cross-compiling in gitian. "We" should refactor all of the common makefile code into a makefile.common, and include it from the other makefiles. There is an odd mix of CFLAGS / CXXFLAGS / xCXXFLAGS in our makefiles.
2310	Improvement upon #2294.
2309	Improvement upon #2294.
2308	This command doesnt touch the blockchain and might be necessary to rescue money from a borked client.
2307	I noticed that sometimes the tray icon doesnt appear. This is with v0.7.1-437-g5b98972-beta I think it a race condition as its more likely to NOT appear the first time you start the client.
2306	if (file && GetFilesize(file) > 10 * 1000000) if the latter is false, file is never fclosed
2305	Launching bitcoind I get the following error: ``` ************************ EXCEPTION: St13runtime_error CLevelDB(): error opening database environment Corruption: missing start of fragmented record(2) bitcoin in AppInit() ``` Using version v0.8.0rc1
2304	For better visibility there is need to separate thousands millions etc. with coma or space regarding to locales system is using. Without that it is hard to spot the power of number displaying fast and easy.
2301	If a bitcoin: URI is to a testnet address, then a -testnet version of bitcoin should handle it (or should be launched). I create a little test page at
2299	Switch to using Qts QLocalServer/QLocalSocket to handle bitcoin payment links (bitcoin:... URIs) Reason for switch: the boost::interprocess mechanism seemed flaky, and doesnt mesh as well with "The Qt Way". The new code is shorter and, I think, clearer. I made a couple of extraneous changes (alphabetized some long lists of #includes to make it easier for me to see what new includes I needed to add). I also added OSX support. Submitting now for early review, should not be pulled until after 0.8. Test plan: On all supported platforms: Click on a link when Bitcoin-Qt is not running. Click on a link when Bitcoin-Qt is already running. Un-gracefully shutdown (kill) Bitcoin-Qt (so local socket file is left behind), then re-run.
2298	Compiling with -e PIE=1 as described in build-unix.txt gives this error. Appears to be leveldb related. /usr/bin/ld: /root/bitcoin/src/leveldb/libleveldb.a(db_impl.o): relocation R_X86_64_32S against `_ZTVZN7leveldb6DBImpl14RecoverLogFileEmPNS_11VersionEditEPmE11LogReporter can not be used when making a shared object; recompile with -fPIC /root/bitcoin/src/leveldb/libleveldb.a: could not read symbols: Bad value collect2: error: ld returned 1 exit status make: *** [bitcoind] Error 1
2297	
2296	I am new to bitcoin. A friend recommended it to me as we live in different countries and transferring money can be an issue! I have had the program on my computer for 7-10days now and it has been "Out of Sync" the whole time. I am wondering if there is something I havent done or is there a port I need to forward etc... Oh I am using <-- this client Many Thanks!
2295	It tries to detect the version of the client last used on the datadir, and only removes files that are not in use by that version or any later versions.
2294	This is less confusing to most people, and doesnt rely on estimates of the total number of blocks received from other nodes. Like in the Android app, in the progress bar label now shows the time that the node is behind instead of the number of blocks left.
2292	it seems the makefile sets -DUSE_UPNP=0 but net.cpp checks #ifdef USE_UPNP not #if USE_UPNP .
2291	My old patch for coin control converted to a pull. - Added ability to filter empty groups and empty address from listaddressgroupings output. - Output an object thats easier to work with than an array of different types.
2289	(from debian patches) Image.constBits was introduced in Qt 4.7. Should be ok here to use QImage.bits which allows linking against the Qt in Squeeze.
2288	A `make clean; make` in a gitian build environment produces different binaries, because the -frandom-seed=bitcoin flag is not being passed down into the leveldb Makefile. Pull #2243 should be the fix.
2287	This is 0.8.0rc1 on Ubuntu 12.10. When starting up, on the splash screen at one time I can only read: "ifying block database integri" I guess that message should be wrapped or made shorter.
2286	std::vector.data() is a C++11 feature that makes my OSX build machine unhappy. Somebody who mines with getblocktemplate, please help test. Fixes #2285
2285	Compiling a 0.8.0rc1 release build with: -mmacosx-version-min=10.5 -arch i386 -isysroot /Developer/SDKs/MacOSX10.5.sdk I get: src/rpcmining.cpp:310: error: class std::vector<CTransaction, std::allocator<CTransaction> > has no member named data ... because the XCode std::vector is missing the .data() method. Im still figuring out what to do about it. Replacing with .data() with &[0] would be an easy source code workaround; so might upgrading to the latest version of XCode or using another STL implementation.
2284	copying the blk .dat files from a backup to a new installation produces an error: EXCEPTION: St13runtime_error CDB() : cant open database file blkindex.dat, error 22 bitcoin in Runaway exception ---- This may not actually be an error, because of this commit: If this is not an error, it would be ideal to have a solution posted somewhere for users who want to force a "clean" shutdown of the .dat files for backup/restore options.
2283	
2282	Add the bitcoin address and account to the listunspent output. Makes manual use easier since the user doesnt have to look up the tx to get the address.
2281	The redeemScript functionality broke plain offline signing, this change makes it only look for that parameter when signing a p2sh input. Shorter version of Tested by creating two chained, not-broadcast raw transactions, verifying that not providing redeemScript for the second fails without this change, succeeds with this change.
2279	Hopefully a better solution for #2254 than #2277.
2278	The bitcoin client data is quite heavy on disk, Right now 9,5 GB in my .bitcoin directory. Doing a "zip blk0001.dat.zip blk0001.dat" will reduce size 25%
2277	This fixes Matts block-checker-tester for me.
2276	When I run: bitcoind getbalance * 1 I expect to see the sum of all the inputs in my wallet with at least 1 confirmation. The 1 is the minconf parameter. But the figure returned also includes unconfirmed change inputs. When I specify minconf to be 1, it seems only right to sum inputs with a minimum of 1 confirmation, and no unconfirmed inputs at all. The following change gives the result I expect in this case, but doesnt change anything if the first parameter is anything other than *: /* ------------------------------------------------------------------------ diff --git a/src/rpcwallet.cpp b/src/rpcwallet.cpp index 90a68f5..d069467 100644 --- a/src/rpcwallet.cpp +++ b/src/rpcwallet.cpp -527,19 +527,8 Value getbalance(const Array& params, bool fHelp) if (!wtx.IsFinal()) continue; - int64 allFee; - string strSentAccount; - list<pair<CTxDestination, int64> > listReceived; - list<pair<CTxDestination, int64> > listSent; - wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount); if (wtx.GetDepthInMainChain() >= nMinDepth) - { - BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived) - nBalance += r.second; - } - BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listSent) - nBalance -= r.second; - nBalance -= allFee; + nBalance += wtx.GetAvailableCredit(); } return ValueFromAmount(nBalance); } * ------------------------------------------------------------------------ */
2275	Three commits: a straight refactor, a new unit test, then an optimization. This makes OP_CHECKMULTISIG more efficient, only recomputing the transaction signature hash once-per-different-SIGHASH-used-by-its-signatures. Insignificant for small transactions, but could be as much as a 2x speedup for very large transactions spending 1-of-3 multisig inputs. Thanks to Sergio Demian Lerner for warning that an attacker might try to mount a CPU exhaustion attack using OP_CHECKMULTISIG. This fix is low priority (post-0.8.0) because transaction fees are high enough to make a CPU exhaustion attack based on this economically irrational.
2274	... -Isrc/leveldb/include -Isrc/leveldb/helpers -Ibuild -Ibuild -o build/moc_optionsmodel.o build/moc_optionsmodel.cpp /usr/bin/rcc -name bitcoin src/qt/bitcoin.qrc -o qrc_bitcoin.cpp g++ -c -pipe -fstack-protector-all -D_FORTIFY_SOURCE=2 -Wl,-z,relro -Wl,-z,now -O2 -D_REENTRANT -fdiagnostics-show-option -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter -Wstack-protector -DQT_GUI -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_UPNP=1 -DSTATICLIB -DUSE_IPV6=1 -DHAVE_BUILD_INFO -DLINUX -D_FILE_OFFSET_BITS=64 -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED -I/usr/share/qt4/mkspecs/linux-g++ -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -Isrc -Isrc/json -Isrc/qt -Isrc/leveldb/include -Isrc/leveldb/helpers -Ibuild -Ibuild -o build/qrc_bitcoin.o qrc_bitcoin.cpp g++ -fstack-protector-all -Wl,-O1 -o bitcoin-qt build/bitcoin.o build/bitcoingui.o build/transactiontablemodel.o build/addresstablemodel.o build/optionsdialog.o build/sendcoinsdialog.o build/addressbookpage.o build/signverifymessagedialog.o build/aboutdialog.o build/editaddressdialog.o build/bitcoinaddressvalidator.o build/alert.o build/version.o build/sync.o build/util.o build/hash.o build/netbase.o build/key.o build/script.o build/main.o build/init.o build/net.o build/irc.o build/bloom.o build/checkpoints.o build/addrman.o build/db.o build/walletdb.o build/clientmodel.o build/guiutil.o build/transactionrecord.o build/optionsmodel.o build/monitoreddatamapper.o build/transactiondesc.o build/transactiondescdialog.o build/bitcoinstrings.o build/bitcoinamountfield.o build/wallet.o build/keystore.o build/transactionfilterproxy.o build/transactionview.o build/walletmodel.o build/bitcoinrpc.o build/rpcdump.o build/rpcnet.o build/rpcmining.o build/rpcwallet.o build/rpcblockchain.o build/rpcrawtransaction.o build/overviewpage.o build/csvmodelwriter.o build/crypter.o build/sendcoinsentry.o build/qvalidatedlineedit.o build/bitcoinunits.o build/qvaluecombobox.o build/askpassphrasedialog.o build/protocol.o build/notificator.o build/qtipcserver.o build/rpcconsole.o build/noui.o build/leveldb.o build/txdb.o build/moc_bitcoingui.o build/moc_transactiontablemodel.o build/moc_addresstablemodel.o build/moc_optionsdialog.o build/moc_sendcoinsdialog.o build/moc_addressbookpage.o build/moc_signverifymessagedialog.o build/moc_aboutdialog.o build/moc_editaddressdialog.o build/moc_bitcoinaddressvalidator.o build/moc_clientmodel.o build/moc_guiutil.o build/moc_optionsmodel.o build/moc_monitoreddatamapper.o build/moc_transactiondesc.o build/moc_transactiondescdialog.o build/moc_bitcoinamountfield.o build/moc_transactionfilterproxy.o build/moc_transactionview.o build/moc_walletmodel.o build/moc_overviewpage.o build/moc_csvmodelwriter.o build/moc_sendcoinsentry.o build/moc_qvalidatedlineedit.o build/moc_qvaluecombobox.o build/moc_askpassphrasedialog.o build/moc_notificator.o build/moc_rpcconsole.o build/qrc_bitcoin.o -L/usr/lib/qt4 -lminiupnpc /bitcoin/src/leveldb/libleveldb.a /bitcoin/src/leveldb/libmemenv.a -lssl -lcrypto -ldb_cxx -lboost_system -lboost_filesystem -lboost_program_options -lboost_thread -lQtGui -L/usr/lib/qt4 -L/usr/X11R6/lib -lQtCore -lgthread-2.0 -lrt -lglib-2.0 -lpthread `.text._ZN5boost16exception_detail19error_info_injectorINS_10lock_errorEED2Ev referenced in section `.text._ZN5boost16exception_detail19error_info_injectorINS_10lock_errorEED1Ev[non-virtual thunk to boost::exception_detail::error_info_injector<boost::lock_error>::~error_info_injector()] of build/askpassphrasedialog.o: defined in discarded section `.text._ZN5boost16exception_detail19error_info_injectorINS_10lock_errorEED2Ev[_ZN5boost16exception_detail19error_info_injectorINS_10lock_errorEED5Ev] of build/askpassphrasedialog.o `.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED2Ev referenced in section `.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED1Ev[non-virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error> >::~clone_impl()] of build/askpassphrasedialog.o: defined in discarded section `.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED2Ev[_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED5Ev] of build/askpassphrasedialog.o `.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED2Ev referenced in section `.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED1Ev[non-virtual thunk to boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::lock_error> >::~clone_impl()] of build/askpassphrasedialog.o: defined in discarded section `.text._ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED2Ev[_ZN5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10lock_errorEEEED5Ev] of build/askpassphrasedialog.o `.text._ZN7GUIUtil14HelpMessageBoxD2Ev referenced in section `.text._ZN7GUIUtil14HelpMessageBoxD1Ev[non-virtual thunk to GUIUtil::HelpMessageBox::~HelpMessageBox()] of build/moc_guiutil.o: defined in discarded section `.text._ZN7GUIUtil14HelpMessageBoxD2Ev[_ZN7GUIUtil14HelpMessageBoxD5Ev] of build/moc_guiutil.o collect2: ld returned 1 exit status make: *** [bitcoin-qt] Error 1
2273	Extremely large transactions with lots of inputs can cost the network almost as much to process as they cost the sender in fees. We would never create transactions larger than 100K big; this change makes transactions larger than 100K non-standard, so they are not relayed/mined by default. This is most important for miners that might create blocks larger than 250K big, who could be vulnerable to a make-your-blocks-so-expensive-to-verify-they-get-orphaned attack.
2272	Two changes: Use IsConfirmed() instead of IsFinal(), so getbalance "*" 0 uses the same is this output spendable criteria as getbalance. Fixes issue #172. And a tiny refactor to CWallet::GetBalance() (redundant call to IsFinal -- IsConfirmed calls IsFinal).
2271	bitcoin-qt is much faster downloading blocks when database (~5Gb) is on ramdisk. So I think whole process can be optimized even if run from HDD - just need to use available memory to cache data and write to disk seldom.
2270	bitcoin-qt 0.7.2. This happened just once. When I rename one address (label) it renames two at once. Also, I think my previous labels disappear (and reset to default1, default2, default3). Not sure how to reproduce.
2269	(sometimes) bitcoin-qt 0.7.2 uses 100% outgoing network bandwidth when idle, after all blocks synced. restart helps.
2268	UPnP is used in the bitcoin implementation. How can I be sure that hackers are not able to use this technology to discover my devices and do more nasty stuff? Would it not be better to use other, more secure technologies? see for more info. If you dont see this as an issue, then delete this Issue.
2266	Leaving copyrights by others (e.g. Satoshi, The LevelDB Authors) alone.
2264	The redeemScript functionality broke plain offline signing, this change makes it only look for that parameter when signing a p2sh input.
2263	After upgrade, the client scan and reload all the blockchain creating and populating the "chainstate" directory. After upgrade all run fast.
2262	Version numbers changed from 0.7.99 to 0.8.0 Set CLIENT_VERSION_IS_RELEASE to remove pre-release warning Updated copyright in COPYING and doc/READMEs to 2013 Updated doc/release-notes.txt
2261	([as posted on SE](http://bitcoin.stackexchange.com/questions/7374/slow-starting-bitcoind)) bitcoind is extremely slow to start (~5-20 minutes). Im not talking about keeping up with the blockchain, that would be perfectly fine, Im talking about an initial phase where it doesnt even respond to requests: any call to it returns "error: couldnt connect to server" (either from command line or from web). Is it a known issue, is there a workaround? OSX 10.6.8, bitcoind 0.7.0 (but happened with earlier versions too). Installed on the main and only hard disk, which is not encrypted.
2260	
2259	Calling ResendWalletTransactions when reindexing or importing spams other nodes with our old transactions, because they become unconfirmed.
2258	- this change allows us to keep the translation without the need to re-translate any string, when we update the copyright year - copyright symbol is changed to HTML to ensure we get no encoding issues and its removed from the translation string so translators dont break it by mistake This is related to #2251.
2257	The current default URL doesnt seem to exist. Unsure wether this should be updated to point to 0.7.2 now or wether just to wait untill 0.8.0 is out and point there? Commit also fixes a minor typo in the macdeploy notes.txt
2255	Calling ResendWalletTransactions during a reindex spams other nodes with our old transactions, because they become unconfirmed.
2254	Looking into this one, but figured Id file an issue so it doesnt get lost.
2253	Enable ConnectBestBlock to properly report back validation problems, and ensure orphan processing (when their parents are found) cannot be used to counter-DDoS the node providing the parent Also fix a minor typo
2252	Im doing some pull-tester upgrades/bug fixes/etc/etc over the next day or two, so Ill be using this to avoid testing on real pulls... DONT PULL THIS (obviously.....), Ill close it when Im done.
2251	* add 2013 where there was only 2012 Notable omissions from updates: * contrib/bitcoind.bash-completion -- no copyright by The Bitcoin developers * contrib/testgen/gen_base58_test_vectors.py -- no copyright by The Bitcoin developers * src/addrman.cpp -- no copyright by The Bitcoin developers * src/addrman.h -- no copyright by The Bitcoin developers * src/leveldb/* -- I figure this can be updated by pulling in upstream code Fixes #2217.
2250	* updated references to files which have since been moved * added reference to licensing * added brief summary in case a non-technical user happens upon repo first * miscellaneous Markdown-isms to make the doc more attractive * remove unused symlink README -> README.md I double-checked the makefiles and whatnot to ensure that the README symlink is not being referenced. It is not. Rather, `doc/README` and `doc/README_windows.txt` are copied for distribution. This is a integration of my original work from #2102 and commit bitcoin/bitcoin@b67b9e70.
2249	Split off InitBlockIndex from LoadBlockIndex, and call it again after finishing reindexing. This makes sure -reindex on an empty datadir still ends up with a sane database. Also, protecting the initialization with a try-catch block.
2248	Fixes issue #2239 -- return the main network genesis block time if pindexBest has not yet been set.
2247	Version numbers changed from 0.7.99 to 0.8.0 Set CLIENT_VERSION_IS_RELEASE to remove pre-release warning Updated copyright in COPYING and doc/READMEs to 2013 Updated doc/release-notes.txt
2246	I would have sworn I fixed this back in December... Tested by running on -testnet and sending several transactions and verifying that the change output is random. Testnet txids: f1c1db77e27c8d7a87cf27811daa18d4368fff0d02a8cbb1b7c615db48406459 2acb8b8899d8e4e16bd494d036bd27d5d6db78eee444993a36c4dc4d8c9a7a39 b9f7167522fe3cc2f07f137265589bf680fbaf4c9b3933f5ca7c511a83239932 94a98ad05e08c93758c861379da41617e8c5871d9052711c0a3efa87568b0266 72995c49c430ece98aeb9339ed106975c3fa5f1978890d89b38e51158531b6cb
2245	Mostly arbitrarily chosen because eleven is my favorite number.
2244	
2243	* Bugfix: LevelDB: Use "xCXXFLAGS" variable to avoid user-defined CXXFLAGS from clobbering necessary compiler options
2242	- check for existance of /blocks/ dir and verify if it is non-empty, disable -reindex, if these checks fail - print "Reindexing aborted" to log, if OpenBlockFile() in ThreadImport() fails Intended to fix #2239
2241	**Status**: Tests succeed, looks complete. This is based on top of #2243 (LevelDB build bugfixes). This is necessary for proper downstream distro packaging, and useful for people who have LevelDB installed for other reasons anyway. Undocumented to infer an unsupported status, but I could add a brief blurb if thats desirable. Only implemented for Linux (ie, not makefile.<not-unix>) for now - I assume OSX and Windows wont be packaging LevelDB/Bitcoin themselves anytime soon. Note that this does NOT remove the copied leveldb from the code, and will still build with that by default. **To test with system LevelDB:** 1) Optional: Delete or move src/leveldb so any attempt to use it errors explicitly 2) Install LevelDB on your system as a shared library 3) qmake bitcoin-qt.pro USE_SYSTEM_LEVELDB=1 && make 4) cd src 5) make -f makefile.unix USE_SYSTEM_LEVELDB=1 bitcoind 6) make -f makefile.unix USE_SYSTEM_LEVELDB=1 test_bitcoin Step 6 (test_bitcoin) will fail if your system LevelDB does not support memenv. This is expected behaviour. **To test included LevelDB still works:** 1) Restore src/leveldb 2) Remove system LevelDB library/package 3) qmake bitcoin-qt.pro && make 4) cd src 5) make -f makefile.unix bitcoind 6) make -f makefile.unix test_bitcoin **SIDE EFFECT:** Bitcoin-Qt and bitcoind no longer include the LevelDB memenv module (only test_bitcoin uses it) - saves 423 KB
2240	Im just asking myself if there is a way to even check it or if a wrong and way too high number can somehow cause problems and should perhaps be considered by our DoS mechanism. One glitch I can think of is at least the Qt client, where we use the medium of connected notes for the est. block count, which is used to decide if we are yet up to date and such stuff.
2239	I had -reindex specified as a leftover from some tests with -txindex and because of the new db directory naming I cleaned my datadir to start an IDB. That case crashed my Qt client right after showing the UI.
2238	Some Qt strings, actually buttons like OK, Cancel, Show Details, Hide Details are displayed in English for languages like Turkish probably because Qt doesnt come with with translations for these languages. Heres an example screenshot of the encrypt wallet window: ![Encrypt wallet window in Turkish](http://ompldr.org/vaGE1aA/Screenshot-C%C3%BCzdan%C4%B1%20%C5%9Fifrele.gif) That said, its still possible to translate these strings. Thats what the Mumble team did and according to dD0T, one of the devs, codewise youd need to apply them the same as you would with normal translations (just do another installTranslator call on the Application object -- the relevant commits for Mumble are and This is a really minor issue but I thought this report could be useful as a reminder.
2237	As discussed on the dev mailing list. Both IRC and the DNS seed are enabled by default for testnet; mainnet is unchanged.
2236	
2235	The struct versus class CDiskBlockPos warning is really annoying.
2234	600 seed nodes from DNS seeder. Tested by removing peers.dat, then running -dnsseed=0 and making sure I could still connect.
2233	When I hover my mouse over the green checkmark in the status bar at the bottom, I get something like "Last block was generated 31 seconds ago". However, that value is frozen until the next block is received. Id expect it to change every second. This is on current master.
2232	From current git clone: $ make -f makefile.unix USE_UPNP=- USE_IPV6=0 (dont think the ipv6 does anything, but..) net.cpp:19:32: fatal error: miniupnpc/miniwget.h: No such file or directory compilation terminated. make: *** [obj/net.o] Error 1
2231	* Rename database directories (blocks/index/ and chainstate/) * Remove support for pre-checksum undo files
2230	Some changes/improvements to code that is new for 0.8 are still possible before doing RCs. These include: * Dropping support for the pre-checksum undo file format (#2216) * Changing the directory naming scheme. From a discussion on IRC it was apparent that for example the name coins/ was confusing (people thought it was related to the wallet). One suggestion: * blocks/undo files remain in blocks/* * blktree/ becomes blocks/index/* (so it is intuitively clear its associated with the blocks directory) * coins/ becomes chaindata/ * optionally: put everything inside a subdirectory blockchain/, and perhaps make it configurable with -blockchaindir=, as it is now independent from the wallet anyway. * Adding an automatically generated README in the data directory/directories to explain what the different files/directories contain (suggested by andytoshi on IRC). * Calling an ftruncate() (or windows equivalent) on the block files when abandoning them would remove the permanent storage waste caused by pre-allocated padding being left over.
2229	Implement native versions of AllocateFileRange() for: * Linux: posix_fallocate() * Mac OSX: fcntl(..., F_PREALLOCATE, ...) * Windows: SetEndOfFile() This should prevent the double-writing fallback that is used currently.
2228	After a reindex or import, no special code exists to force an IBD to be started. So if by the time that happens, youre already connected to max number of peers, IBD is only started when a new block is announced somewhere. Much more complete solutions for the block download management are necessary, but this subproblem is easy to solve.
2227	When reindexing, client is showing ``Reindexing blocks on disk...`` or ``Importing blocks from disk...`` when doing an import from block files. After that process is finished the message should change into ``Synchronizing with network...``, which is not happening immediately (only after receiving a new block). Cause is this code <pre> connect(clientModel, SIGNAL(numBlocksChanged(int,int)), this, SLOT(setNumBlocks(int,int))); </pre> When we are finished, fImporting or fReindex is set to false, so ``clientModel->getBlockSource()`` would return BLOCK_SOURCE_NETWORK, but because we have no new block count until we get a new block from the network, BitcoinGUI::setNumBlocks() isnt called. The issue is perhaps minor, but when doing some stuff offline, that message is persistent, which sucks IMHO :). Im unsure about the cleanest way to change that behaviour.
2226	- a reindex is not considered to be also an import anymore (we already seperate these 2 states in the GUI and I think it makes sense in the core, too)
2225	We have that call in step 5 here: and again in step 7: It seems like a duplicate block of code and even we check for ``if (fDbEnvInit)`` in .Open(), Im asking if that could be removed because we dont need it.
2224	The goal of this pull request is improving how errors during block and transaction validation are propagated, displayed and handled. It introduces CValidationState, which stores metadata about a block or transaction validation being performed. It is used to distinguish validation errors (failure to meet network rules, for example) with runtime errors (like out of disk space), as formerly these could be confused, leading to blocks being marked invalid because the disk space ran out. Additionally, CValidationState also takes over the role of tracking DoS levels (so it doesnt need to be stored inside transactions or blocks...). Additionally, some extra checks are introduced, excessive coinbase values are made a DoSable offence, disk space is checked before trying to flush the coin case, and read/write errors cause a fatal error (reported to stdout/GUI, followed by shutdown).
2223	At least one service that accepted zero-confirmation transactions was vulnerable because an attacker could send a transaction with a lock time far in the future, and then have plenty of time in which to get a double-spend mined (perhaps from a miner who wasnt on the network when the first transaction was broadcast). That is a variation on the "Finney attack". We still dont recommend anybody accept 0-confirmation transactions as final payment for anything. This change keeps non-final transactions from appearing in the wallet, and, assuming most of the network accepts this change, will eventually prevent them from being relayed until they are final.
2222	Closes #2205.
2221	* Pass txids to CCoinsView functions by reference instead of by value * Add a method to swap CCoins, and use it in some places to avoid an allocating copy + destruct. * Optimize CCoinsViewCache::FetchCoins to do only a single search through the backing map. These changes (mostly the last one) increases raw block connection speed by 12% for me (rebuild of coins/ to block 210000 with -dbcache=900 takes 6m55 instead of 7m48).
2220	This commit is a minimal restructuring necessary to support multiple wallets in the UI going forward. Please read for details.
2219	- this change is active for sendcoinsentry and signverifymessagedialog - it disables the addressbook button, when an entered address is a valid Bitcoin address (it gets re-enabled when that case changes) Partly related to #2218.
2218	On bitcoin-qt, current master: Switch to address book. Select address and click on verify message. Click on "Chose address from the addressbook" icon. Select address and click on Verify message. *nothing happens* First of all Id strongly recommend UIs should not allow for this recursive behaviour in the first place. But hell, if you show the button, Id expect the Verify dialog to open a second time.
2217	We should update all copyrights to 2013 and perhaps also add them to the Qt part.
2216	The current code has some ugly hack to support undo files that dont have checksums (introduced in 8539361e66e). Since no released version ever had pre-checksum undo files, this feature is probably best removed before 0.8 is released.
2215	- allows to directly select an address from the addressbook, chose "send coins" from the context menu, which sends you to sendcoins tab and fills in the selected address Fixes: #2176 and #861
2213	- fetch current translations from Transifex - update bitcoinstrings.cpp and bitcoin_en.ts This should make it in before the RC phase IMHO. I included 4 new language files, which were created on Transifex, but did NOT add them into the bitcoin.qrc, as nothing got translated yet.
2211	This fixes qmake-breakage in case the build-system has other --param options pre-defined in its CFLAGS.
2210	This pull is currently here to see how pull-tester is handling it. To really be sure I didnt break something, this pull should be sent through a Gitian build. I tried to harmonize the layout / style in all changed files. The QApplication moved to top in bitcoin.cpp and bitcoingui.cpp is related to Qt5 compatibility, I need to see if this is working correctly before I start doing my Qt5 compatibility pull. I know this has the potential to make you angry (:-P)or at least may steal some of your time, but in the end it should be well worth it. I even think removed includes could speed up compilation time a little :). - try to enforce the same style to all Qt related files - remove unneeded includes from the files - add missing Q_OBJECT, QT_BEGIN_NAMESPACE / QT_END_NAMESPACE - prepares for a pull-req to include Qt5 compatibility
2209	Right now in the current master these hooks arent really being used - a single wallet is registered at startup in init.cpp and is unregistered at shutdown, also in init.cpp. But in order to support dynamic loading and unloading of transaction listeners, it is necessary to lock these functions. It is also convenient to have an UnregisterAllWallets() function and to call that upon shutdown instead of just calling it on the single main wallet that master currently has.
2208	Right now in the current master these hooks arent really being used - a single wallet is registered at startup in init.cpp and is unregistered at shutdown, also in init.cpp. But in order to support dynamic loading and unloading of transaction listeners, it is necessary to lock these functions. It is also convenient to have an UnregisterAllWallets() function and to call that upon shutdown instead of just calling it on the single main wallet that master currently has.
2207	Applied 2 upstream commits to update our code to leveldb 1.9
2206	Currently, there are only disk space usage checks before writing block data. The largest blobs of data are written when flushing the coindb, though, so this would also need a check.
2205	Checkblocks now checks the last 2500 blocks by default. On systems with slow disks, this takes in the order of a minute or more. I believe we can safely reduce this number, as the coindb checks are only done to the last ~150 blocks anyway, but they are very thorough. Corruption in blocks further back will at most be a problem for rescanning/reindexing/serving, but has no chain splitting risk. 288 blocks (=2 days) seems a reasonable amount to me.
2204	I found this debugging a crash-on-exit running the latest code on Windows XP. Sending bitcoind the RPC stop command, I see the following "Thread exited" messages: 2013-01-22 19:35:01 ThreadRPCServer method=stop 2013-01-22 19:35:03 ThreadSocketHandler exited 2013-01-22 19:35:04 ThreadOpenConnections exited 2013-01-22 19:35:04 ThreadMessageHandler exited 2013-01-22 19:35:04 StopNode() 2013-01-22 19:35:09 Bitcoin exited There should be a ThreadRPCServer exited message there before Bitcoin exited Im 90% sure the crash on Windows is happening in ThreadRPCServer, decrementing vnThreadsRunning[THREAD_RPCLISTENER]. I suspect the vnThreadsRunning destructor is being called before ThreadRPCServer2 returns, because ThreadRPCServer2 is waiting inside io_service.run_one() The entire threads/fShutdown/StartShutdown()/Shutdown() scheme is fragile and a big mess, and should be cleaned up. Not for the 0.8 release, though...
2203	As otherwise, a bootstrap.dat over 2 GiB in size will fail to fopen(), let alone being able to seek in it.
2201	Right now, write errors in LevelDB (e.g. out of disk space) will cause block connection to fail, potentially resulting in that block being marked invalid, and never considered again for connecting. One possibility is throwing an (uncaught, until top-level) exception when theres a read or write error, causing an exit.
2200	Just mentioning it, so it isnt forgotten. It has a patch that prevents corruption in out-of-disk-space situations.
2199	This is just a suggestion to assist in re-thinking our current thread priorities and assists (IMHO) in easily setting priorities for threads during the creation time of the thread. I chose to change some default thread priorities, which should also be considered to be part of a discussion. Im currently using that code and can verify the internal miner did quite happily find new blocks ;). That pull could be extended to give users the ability to set the default thread prio via command-line or GUI option. - removes SetThreadPriority() and integrates that into NewThread() with a default of THREAD_PRIORITY_NORMAL - removes special-casing (priority switching) for internal Bitcoin miner - uses a new default for the following threads: ThreadScriptCheck (below normal - because normal prio threads on every CPU core could slowdown UX), ThreadImport (above normal - to speed it up a little) and ThreadBitcoinMiner (below normal - to compensate the removed special casing) - removes thread priority code for non-Windows OSes, so these will just get a no-op
2198	This is a tweaked version of pull request #2106 that will cross-compile on Lucid, so it is (I hope!) compatible with the pull-tester and our old gitian-building environment. * Upgrade to LevelDB 1.7 * Switch to a native Windows LevelDB port (not anymore via Boost) Ive been testing this versus the boost-based, old-leveldb code in git HEAD.
2196	Gentoo allows pre-definition of C(XX)FLAGS. Now if those CFLAGS contain one or more --param options, qmake filters out the --param of QMAKE_CXXFLAGS *= -fstack-protector-all --param ssp-buffer-size=1 QMAKE_LFLAGS *= -fstack-protector-all --param ssp-buffer-size=1 and tries to give g++ instead "ssp-buffer-size=1" as an option. Solution: enclose --param ssp-buffer-size=1 in "", like so: --- bitcoin-qt.pro.old 2012-12-10 15:47:37.000000000 +0100 +++ bitcoin-qt.pro 2013-01-22 15:33:45.000000000 +0100 -33,8 +33,8 !win32 { # for extra security against potential buffer overflows: enable GCCs Stack Smashing Protection -QMAKE_CXXFLAGS *= -fstack-protector-all --param ssp-buffer-size=1 -QMAKE_LFLAGS *= -fstack-protector-all --param ssp-buffer-size=1 +QMAKE_CXXFLAGS *= -fstack-protector-all "--param ssp-buffer-size=1" +QMAKE_LFLAGS *= -fstack-protector-all "--param ssp-buffer-size=1" # We need to exclude this for Windows cross compile with MinGW 4.2.x, as it will result in a non-working executable! # This can be enabled for Windows, when we switch to MinGW >= 4.4.x. }
2195	Basic dependency detection and assistance to user in installing missing dependencies. Automatic switch for USE_UPNP in makefile.
2194	- just replaces a character in a comment, which I had problems with when opening the file in Qt Creator IDE
2193	- add check to verify if an URI is valid
2192	It is sent if any data that isnt in the relayable set is requested.
2191	After few transaction by "sendtoaddress" command balance in "" become negative. I solved with the "move" command from more account to "". I suppose this is a bug.
2190	The special case for the genesis block (it is not connected in the normal way, resulting in its coinbase being unspendable by definition) was not always enforced. When reconstructing the coins/ directory, it was connected normally. Beside being incorrect, since #2145, this resulted in a segfault at startup. This generalizes and simplifies the code for dealing with the special case, by moving it to ConnectBlock itself.
2189	The default listing needs to be made in mBTC or smaller. Or an option to change to mBTC or Satoshi in the default view should be made available. Thanks.
2188	This actually simplifies some SPV code, as they can keep track of a filtered block and its txn before accepting both in one step. The previous argument was that SPV nodes should handle the txn the same as any other free txn and then mark them as connected to a block when they get the filtered block itself. However, it now appears that SPV nodes will need to put in more effort to verify loose txn than they would to verify txn in blocks, thus making it more approriate to send the txn after the filtered block.
2187	Moved calls to SyncWithWallets out of the "tx" section of ProcessMessage to CTxMemPool::accept() to make sure all wallets are aware of all transactions accepted, including transactions sent from other wallets.
2186	- remove an unneeded MODAL flag, as MSG_ERROR sets MODAL - re-order an if-clause in main to have bool checks before a function call - fix some log messages that used wrong function names - make a log message use a correct ellipsis - remove some unneded spaces, brackets and line-breaks - fix style for adding files in the Qt project
2185	Opened BitCoin 0.7.2 and went to bed got up the next morning and saw this message "Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade." Restarted me PC and restarted BitCoin and the message appeared again. Does anyone know what is this and how to fix it?
2184	Added ability to load/unload multiple wallets dynamically in bitcoin-qt
2183	The space required to run the bitcoin-qt client is quickly running amok. Currently my .bitcoin directory is 8,3 GB on my disk - which is a lot on a SSD. Also it takes a very long of time to sync - which means its hard for newcomers to start. The current implementation regarding storing every transaction has started to put a heavy burden on me as a user.
2182	Fixes issue #2178 : attacker could penny-flood with invalid-signature transactions to deduce which addresses belonged to your node. Im committing this early for code review; I still need to write up a test plan. Executive summary of fix: check all transactions received from the network for penny-flood rate-limiting before adding to the memory pool. But do NOT ratelimit transactions added to the memory pool: - because of blockchain reorgs - stored in the wallet and added at startup - sent from the GUI or one of the send* RPC commands (CWallet::CommitTransaction) The limit-free-transactions code really should be a method on CNode, with counters per-peer. But that is a bigger change for another day.
2181	Based on current master as of 2013-01-14 and should be merged ASAP. Will update the language files later this week, so that master contains recent translations for all supported languages.
2179	It took quite a lot longer than I expected, but I can now produce code-signed .app bundles. The long and twisty path was: + Get a code signing certificate, owned by Bitcoin Foundation, Inc. (...several boring subtasks involved...) + Upgrade my development machine to OSX 10.8 (code signing not working properly on OSX 10.6) + Fix macdeployqtplus so it works on 10.8 (python appscript package not being maintained any more, switch to osascript) Ill create a code-signed 0.7.2 .app and will recruit some 10.8 users with gatekeeper turned on to test.
2178	Because of anonymization loss concerns. Maybe it can be replaced by an argument TxIsFromMe to the accept() method to achieve the same goal. See this thread for discussion:
2177	- Bitcoin-Qt: remove num transactions from overviewpage - Bitcoin-Qt: add wallet category and num unique tx IDs in dbg window -- this adds a new Wallet category to the debug window and implements a label which contains the current unique transaction ID count from the wallet (wallet model access is added to RPCConsole class) -- layout was converted from table to form and a spacer removed -- I also added an initialisation of the model variables in RPCConsole class, these were missing before I had the idea because of issue #2175 and it also seems nice to be able to access walletmodel from RPCConsole for further additions to the debug window.
2176	(this is a request for enhancement) Ever since I started using bitcoin-qt, I stumbled over the fact that I cannot send from the address book. A natural flow (for me) would be to either double click on an address or at least have a "Send to" context menu entry. Going through the clipboard is cumbersome, error-prine and insecure.
2175	I started a new testnet wallet with a self-compiled v0.7.1-269-gf4445f9-beta (blkfile_upgrade). I immediately started mining using -gen=1 I noticed the number of transactions going up by 1, but there was no transaction showing up. This might be related to coinbase tx which tend to show up later than I would expect them to. Even now, the wallet says 38 tx but if I count right its only 35.
2174	Having taken me a while (i.e. more than the couple seconds it should take) to painstakingly decipher all the synchronization macros, I decided to add some comments to sync.h explaining in simple terms what the macros really translate to once you remove all the excess nonfunctional debug code. I welcome all of you who have more experience with the code to chime in and point out where Im going wrong, what to add, and how it can be improved. I fully support using debugging frameworks - but lets at least clean this up so that its both easy for a human to read AND easy to set up debugging options - for people who havent necessarily been dealing with this stuff daily for months.
2173	The Splashscreen stays in front all the time it synchronises. Please get rid of this and use the status bar of the window or let the splashscreen appear in a normal window.
2172	- it was bad, that quite some messages were just talking about a database, I think a user should know, if we are talking about wallet db or block/coin db - also adds a new init message for "Verifying block database integrity..."
2171	- this pull adds an InitMessage() function to noui.cpp, which outputs init messages to debug.log (this allows to remove some printf() calls from init.cpp) - change InitMessage() in bitcoin.cpp to also write init messages to debug.log to ensure nothting is missing in the log because of the removal of printf() calls in init.cpp
2170	The "Show QR code" context menu option silently fails. I remember it was working before because I was using QR codes created with bitcoin-qt to scan with Bitcoin Wallet.
2169	- removes some obsolete comments about CTransaction::FetchInputs(), a space and a few new-lines
2168	By specifying -txindex when initializing the database, a txid-to-diskpos index is maintained in the blktree database. This database is used to help answering getrawtransaction() RPC queries, when enabled. Changing the -txindex value requires a -reindex; the client will abort at startup if the database and the specified -txindex mismatch.
2167	- this flag allows bitcoin-qt.exe / bitcoind.exe (32-bit application) to handle addresses larger than 2GB (up to 3GB on x86 Windows and up to 4GB on x64 Windows)
2166	IMHO there is no need for a copy here and as I was the one who did it, I wanted to change it also ;).
2165	- dont show QR Code context menu, when USE_QRCODE=1 was not specified when compiling the client - re-work on_showQRCode_clicked() for better readability and remove an unneeded duplicate check - re-work on_signMessage_clicked() and on_verifyMessage_clicked() to match foreach in on_showQRCode_clicked(), which seems more robust / cleaner - re-order context menu stuff to match real context menu layout - add comments for all private slots in the class
2164	I tried editing test file in forked QA but nothing happens except progress meter spinning around the cat forever, so Ill drop everything related to test here. It is way too late to mess with github now! ------ Test the upgrade-to-release-0.8 code - Windows XP with an NTFS filesystem, upgrade from v0.7.1-beta CPU AMD Athlon 64X2 Dual Core 4800+, Chipset AMD 780G/SB700, 2 GB RAM, HDD 74 GB WD Raptor 10k RPM SATA, Swap file 4 GB fixed size, Windows XP SP3 latest build. Bitcoin-qt runs as server, using empty wallet. Bitcoin datadir before test started, client synced with network and shutdown, debug.log deleted = 5,92 GB Bitcoin datadir after reindexing blocks = 11,1 GB Directories created and their sizes after reindexing blocks: /blktree 29.7 MB /blocks 5.06 GB /coins 143 MB Bitcoin-qt.exe process CPU usage while reindexing blocks = mostly 50%, peaks at 90% Bitcoin-qt.exe process RAM usage while reindexing blocks = 40 MB to 120 MB, peaks at 200 MB HDD activity while reindexing blocks = minimal Noticable reindexing slowdown at around 25k and 60k blocks to go. Major reindexing slowdown at around 5.5k blocks to go. It seems mentioned slowdowns happen while other nodes on network pull blockchain data. My connection max upload speed is just 32 kB. "Bytes sent" for bitcoin-qt on my firewall tend to go crazy and abruptly jump to impossible values, like 100 MB uploaded after 10 or so minutes, which is not even remotely possible. Neither Terracoin nor Freicoin clients have same or similar issue. At around 3k block to go I shutdown bitcoin-qt.exe in attempt to get rid off leechers, clueless = bitcoin-qt exited with error: Bitcoin-qt restarted, reindexing not speeding up even a bit so I shutdown it again = same error as previously. Computer restarted, including ADSL modem, bitcoin-qt started again = same slow reindexing, crash after few minutes with error: Another start, slow reindexing but no crash = reindexing completed, bitcoin-qt shutdown at block 215.911 One more start, just to check for errors = all fine, bitcoin-qt shutdown at block 215.912 Log file:
2163	Our main README was woefully out of date.
2162	Should be both useful and also a pretty good demonstration of using the raw transactions API. Test plan: ... reportedly run successfully:
2161	Client (SPV) mode never got implemented entirely, and whatever part was already working, is likely not been tested (or even executed at all) for the past two years. This removes it entirely. If we want an SPV implementation, I think we should first get the block chain data structures to be encapsulated in a class implementing a standard interface, and then writing an alternate implementation with SPV semantics.
2160	Provides a method to get the network adjusted time from the RPC interface.
2159	Previously when a transaction was set to lock at a specific block the calculation was reversed, returning a negative number. This broke the UI and caused it to display %n in place of the actual number. In addition the previous calculation would display "Open for 0 blocks" when the block height was such that the next block created would finalize the transaction. Inserted the word "more" and changed the calculation so that the last message would be "Open for 1 more block" to better match user expectations. If you dont feel invalidating the translations is worth it, let me know and Ill back that part of the change out.
2158	Can you add a Parameter to Set the max outgoing Connections? In some Cases there is no Way to Establishment incoming cons, so i can use the Parameter to inverse the value without editing the Source. Tanks
2157	- add qSort() for cachedAddressTable, as qLowerBound() and qUpperBound() require the list to be in ascending order (see - add a new check in AddressTableModel::setData() to just return, when no changes were made to a label or an address (prevents entry duplication issue) - remove "rec->label = value.toString();" from AddressTableModel::setData() as the label gets updated by AddressTablePriv::updateEntry() anyway (seems added this line via - add another new check in AddressTableModel::setData() to just return, if a duplicate address was found (prevents address overwrite) - add a new check to EditAddressDialog::setModel() to prevent setting an invalid model - re-work the switch-case statement in AddressTableModel::accept() to always break (as return gets called anyway) and order the list to match the enum definition - make accept() in editaddressdialog.h a public slot, which it should be - misc small coding style changes Intended to fix: #2137 and #1839.
2156	Displays e.g. ``0.05604678 BTC`` instead of just ``0.05604678`` (uses the unit selected in the settings dialog).
2155	This is a python geeks coin control. Should be both useful and also a good demonstration of using the raw transactions API.
2154	I realize this introduction is a bit long, so if you dont feel like reading skip to the bullet points below under "strategy". The codebase as it exists right now has a number of unnecessary dependencies which makes code modularization much more difficult. In particular, the satoshi client was built to handle all bitcoin-related tasks, but its value as a "reference implementation" lies primarily in doing verification and acting as a relay agent as these are the most essential tasks that participating nodes must perform to keeping the network in operation. Things like wallets, historical databases, mining, and notification agents could be written as entirely separate third-party applications without risk to the networks fundamental integrity. The basic architecture of a bitcoin node is as follows: At the core there exist fundamental bitcoin message structures, along with the code necessary for serialization/deserialization. These structures belong in their own source files with minimal dependencies so they can be reused for applications that neednt perform verification and relay - for instance, filtering and notification agents. Unfortunately, these core structures currently reside for the most part in main.h/main.cpp, one of the central problems this pull request attempts to fix. On top of these core structures sits a network component that manages sockets, does peer discovery, and handles queueing and dispatching of messages. This component is clearly dependent on the core message structures but does not depend on the specific logic used to verify blocks and transactions nor to identify misbehaving peers nor sign transactions nor maintain a block chain database. Then we have a scripting engine, signature verification component, and a signing component. Historical database applications do not need signature verification/signing functionality at all. Filtering messages and sending alerts generally does not even require a scripting engine and does fine with basic pattern matching. The most critical high-level operations needed by a verification/relay node such as the satoshi client are transaction verification; block chain and memory pool management; and detection/management of misbehaving peers. These things are currently primarily implemented in main.h/main.cpp. These are indeed the main operations of the satoshi client - but the core low-level structures should not depend at all on this logic. Then theres the UI, but lets leave that aside for a moment. Finally theres init.h/init.cpp, which sets up the particular environment in which the satoshi client runs. <b>This branch takes the following strategy:</b> - Remove source file dependencies on main.h and init.h by only including necessary headers wherever possible. - If source files depend on definitions in main or init, either move the dependent portions into main/init or move the depended-upon portions into separate files. - If the dependent source files use global variables or functions that clearly belong in either main or init, copy the value over to a class member or a variable with file scope in the dependent source or expose a registration function to set a callback. - If moving a core class out of main is impossible because its methods depend on variables or functions defined in main, isolate the methods that depend on main and either move them to another class that *does* belong in main or convert them into regular functions in main. It is important that all modifications made in this branch are easy to review and to test. This branch does not encourage rewriting things from scratch - only moving them and rearranging them in easily identifiable chunks. Furthermore, the focus of the branch is not so much on coding style and style consistency - but on isolation of functional units and elimination of unnecessary dependencies.
2153	
2152	Someone on IRC was confused as to how to build HEAD Two problems: 1. I didnt change the Mac or Windows instructions. Also gentoo I just guessed at - someone needs to double check it. 2. leveldb is only available in Ubuntu > precise (12.04) and probably something similar for Debian. (their package server is down or Id check)
2151	This adds a suggestion from issue #2144, so that the signature is prepended by a label.
2150	- extends the translation process a little in terms of usability on Windows - Im now able to create bitcoinstrings.cpp straight from master without the need to edit or copy that Python script ;)
2149	* Report "value" in BTC, rather than "amount" in satoshis * Use ScriptPubKeyToJSON to report script data
2148	- some users reported it as weird, that the estimated block count could be lower than our own nodes block number (which is indeed bad) - this pull adds a new default behaviour, which displays our own block number as estimated block number, if own >= est. block count - the pull raises space for nodes block counts in cPeerBlockCounts to 8 to be more accurate - also removes a reduntant setNumBlocks() call in RPCConsole and moves initialisation of numBlocksAtStartup in ClientModel, where it belongs
2147	- this prevents an interference with the IPC message queue (which is used for URI processing) when running a testnet and mainnet instance in parallel - to check for testnet, I had to raise the ParseParameters() call in main() to the topmost position
2146	(opening this so I dont forget that it must be fixed before release) The per block disk space checks were removed, so it only checks once at startup and the database can become corrupted if the node runs out of space during operation. Fixing it is a little more complicated than just restoring the check at block acceptance time because the db caching can result in a potentially large amount of queued data.
2145	-checklevel gets a new meaning: 0: verify blocks can be read from disk (like before) 1: verify (contextless) block validity (like before) 2: verify undo data can be read and matches checksums 3: verify coin database is consistent with the last few blocks (close to level 6 before) 4: verify all validity rules of the last few blocks (including signature checks) Level 3 is the new default, as its reasonably fast. As levels 3 and 4 are implemented using an in-memory rollback of the database, they are limited to as many blocks as possible without exceeding the limits set by -dbcache. The default of -dbcache=25 allows for some 150-200 blocks to be rolled back. In case an error is found, the application quits with a message instructing the user to restart with -reindex. Better instructions, and automatic recovery (when possible) or automatic reindexing are left as future work. In addition, this also changes the on-disk format of undo data (adding a checksum), as the correctness of the coindb checks depends on having intact undo data.
2144	Its hard to instruct users in text media format on where the output digest is located on the "sign message" dialogue, can we have a label that will be associated with the output digest box so I that way i can tell my users to "Copy and paste from the output digest box" instead of saying "Copy and paste from that one box at the bottom of the sign message dialogue". Thanks much appreicated
2143	- ensure we use strCaption for printf and fprintf, as before it could happen to have an error message in the debug.log, which had no "Error" (or whatever) in front - ensure ThreadSafeMessageBox() uses the same code (when guiref == NULL) as noui_ThreadSafeMessageBox()
2142	There was a bunch of shed-painting about this before the 0.7.1 release, and I promised to tidy up the code, so: Initialize the OutputDebugStringF mutex and file pointer using boost::call_once, to be thread-safe. Make the return value of OutputDebugStringF really be the number of characters written (*printf() semantics). Declare the fReopenDebugLog flag volatile, since it is changed from a signal handler. And dont declare OutputDebugStringF() as inline.
2141	Updates translations base files to current master.
2139	net.cpp: In function bool BindListenPort(const CService&, std::string&): net.cpp:1747: warning: dereferencing pointer sockaddr.1383 does break strict-aliasing rules net.cpp:1747: note: initialized from here
2137	The version I use Bitcoin-qt v0.7.1-beta I have an address book with different labels, see screen1.png ![screen 1](https://f.cloud.github.com/assets/3152756/35750/b73145b2-5266-11e2-887a-a922049b65d4.png) When I edit the label of only the uppermost one in the list, i.e. changing part "25.0" to "75.0", then the 9th label with "#09" part changes as well when I press enter, see screen2.png. ![screen 2](https://f.cloud.github.com/assets/3152756/35752/bb5291a0-5266-11e2-8d24-bbba3927a2e0.png)
2136	Ive compiled and run bitcoin-qt on a Raspberry Pi, but the main problem is that it uses up a lot of CPU. This issue is raised to explore various options available to reduce the CPU required. E.g. trusted nodes (where block validation wouldnt be needed when receiving from a trusted node).
2135	Ultraprune seems to be using the block storage a lot less, so it maybe possible to share one block storage directory (database) between multiple running bitcoind instances.
2133	- -checkpoints is now much more understandable and should be way easier to translate - -loadblock uses the same format (blk000??.dat) as -reindex
2132	Some contracts/messages (if not all) contain non-ascii characters to present a type of formatting such as "\n" and other hidden characters of that nature. The sign message window should detect base64 input and if it looks like a base64 string it should pop-up a text box displaying the decoded message. With out base64 incorporation, any document containing hidden characters that are presented through a stream will not match the receipts signature with the senders signature. I think the decoded message should be displayed as well since users deserve to know what they are signing with out having to trust third-party applications to decode the base64 for them.
2131	To fix a minor malleability found by Sergio Lerner (reported here: The problem is that if (R,S) is a valid ECDSA signature for a given message and public key, (R,-S) is also valid. Modulo N (the order of the secp256k1 curve), this means that both (R,S) and (R,N-S) are valid. Given that N is odd, S and N-S have a different lowest bit. We solve the problem by forcing signatures to have an even S, excluding one of the alternatives. This pull request just changes the signing code to always produce even S values, and adds a verification mode to check it. This code is not enabled anywhere yet. Existing tests in key_tests.cpp verify that the produced signatures are still valid.
2130	hopefully a proper rebasing of The goal here is to work toward a clean interface to the wallet object. For now this involves moving code out of rpc*.cpp which deals with wallet internals and making that code into methods on the CWallet object.
2129	If the user was really after the fastest possible confirmation times they would be manually setting a fee. In cases where the wallet builds a transaction with a priority that is too low to qualify as free until the next block, go ahead without a fee. Confirmation frequently takes multiple blocks even when a minimum fee is provided.
2128	I have taken the time to try and make the windows installer a bit more sold, as it didnt work well with my windows system (where I run as a low-privileged user, and manually approve any escalation of privileges). The main changes involve changing from the local user settings to the local system, and requiring admin privileges to install. (of course any user will be able to run Bitcoin without being an admin still). Of-course this will need more testing.
2126	Adds some useful debug info to help keep track of getblock requests. Only shows request if actually carried out (previously showed request even if it wasnt done).
2125	This is to help with nodes becoming unresponsive in the eyes of other nodes. Also, in combination with my other pulls, this helps to reduce the number of duplicate blocks received.
2123	Yesterday LLVM 3.2 was released, as well as a corresponding version of the clang compiler and static analyzer. I ran the static analyzer over the bitcoin code and picked up a couple of assignments to variables that are never read. These two patches remove those assigments.
2122	During initial block download ResendWalletTransactions() runs, trying to send transactions which may have already been introduced into blocks. This therefore reveals two things about the node, one that it is not up to date with the blockchain, but also that those transactions originated from this node. This information could be used by people analysing the network to determine where the transactions came from. Can/should the code be changed to provide the option not to send wallet transactions until the block chain is more up to date?
2121	========================================================== A major issue many have faced in using bitcoind to build applications is the lack of RPC support for tracking transactions and balances without having to know and keep associated private keys in the wallet. Oftentimes one might want to watch other peoples transactions or to keep signing nodes behind tighter security while using separate relay nodes to service all nonsigning, non-key-generating application functionality such as sending payment and confirmation alerts. In order to achieve these objectives, I have had to build a bunch of custom software - much of which duplicates functionality that is already present in the Satoshi Client. This pull request is an attempt at addressing some of these concerns without having to fundamentally restructure the client architecture. (Thanks, sipa!) The proposal is to add another kind of object to the wallet database - a bitcoin address sans private key - which the client treats as if it were any other wallet adddress except for when it comes to signing and privkey export operations. This means RPC calls such as getreceivedbyaddress and listtransactions can be used on arbitrary bitcoin addresses. Ive added an RPC call: importaddress <bitcoinaddress> [label] [rescan=true] The address is added as a new type of serialized object in wallet.dat and loads into the key maps of the CKeyStore instances with the key set to the CKeyID and the secret set to an empty vector. Please test it out and let me know what you think. Cheers, -Eric Lombrozo
2120	Found by Hal Finney (thanks Hal!): change outputs were never inserted as the last output, so were not randomized at all for single-output transactions (they were always the first output). Fixes issue #2107
2119	I just upgraded my bitcoin client from 0.6.1 to 0.7.2 and it seems to ignore the existing blk0001.dat and blkindex.dat files - i.e. it downloads the block chain from block 0 rather than from where it was currently.
2118	On ubuntu 12.04 with gnome-classic issuing a "window minimize" operation makes the GUI disappear forever (its not in the minimized windows list). Theres no way to get it back as its not even in the notification area. I can only kill the process. Dunno if its related to #1522 -- Im using current master branch: 6940626d08e313c5e1cd99c63aeca9da45d5b7a4
2117	The proposal is to add another kind of object to the wallet database - a bitcoin address sans private key - which the client treats as if it were any other wallet adddress except for when it comes to signing and privkey export operations. This means RPC calls such as getreceivedbyaddress and listtransactions can be used on arbitrary bitcoin addresses. Ive added an RPC call: importaddress <bitcoinaddress> [label] [rescan=true] The address is added as a new type of serialized object in wallet.dat and loads into the key maps of the CKeyStore instances with the key set to the CKeyID and the secret set to an empty vector.
2116	
2115	Having the fee data for every transaction returned by "getblocktemplate" was broken by the ultraprune commit (450cbb09). It made it so transactions that depend on other transactions in the block-to-be dont have fee data.
2114	0 and 128 were previously accepted as standard hash type. Note that this function is not active in the current verification code.
2113	Reason: to prevent pulling in all of utils dependencies in a derived program (tool to generate bip32 test vectors).
2112	Break one long comment down into 3 lines so its readable.
2111	Likely a result of some unaligned access somewhere. Usually appears in ProcessMessage, but needs way more debugging. In any case, use of bitcoind on arm LE should be discouraged without more testing.
2110	
2109	- currently we sometimes use "windows" or "win32", but as per windows seems to be not officially supported (only win32 is mentioned there)
2108	For changes im Qt 4.8.4 see:
2107	See:
2106	Several upgrades, each necessary to fix problem with the previous one. They could be separated, but at least this combination builds and works. It certainly needs a lot of testing, but I want to give it some exposure: * Upgrade to LevelDB 1.7 * Switch to a native Windows LevelDB port (not anymore via Boost) * Switch to MinGW-w64 (32-bit mode) for Windows builds, as the new Windows port required a more recent GCC/environment than provided by MinGW32. * Switch to a 32-bit Precise image for Windows builds (which provides MinGW-w64 with GCC 4.6.3). * Switch to Boost 1.52, as Boost 1.50s thread library doesnt build on MinGW-w64.
2105	Backupwallet always returns the following JSON if backing up to an invalid location { "result": null, "error": null, "id": "1"} However bitcoind reports this ThreadRPCServer method=backupwallet error copying wallet.dat to c:\backup@#2\curdir.test - boost::filesystem::copy_file: The system cannot find the path specified: "C:\Users\Administrator\AppData\Roaming\Bitcoin\wallet.dat", "c:\backup@#2\curdir.test"
2104	See [Issue #1149](https://github.com/bitcoin/bitcoin/issues/1149) Example ouput: [ { "address" : "1...", "account" : "", "amount" : 0.1, "confirmations" : 9000, "txids" : [ "5b68f4799e90e5d04f0c67fa9a2971e0964ced225a31f548e3ede8f4a0fc5836", "e132bb64a1a61c2d34163261d9c5bc2b166dc3a476e922dc1bd2d02a325b086b" ] } ]
2103	It kind of helps to see directly the % complete without pointing the right bottom corner
2102	* updated references to files which have since been moved * added reference to licensing * added brief summary in case a non-technical user happens upon repo first * miscellaneous Markdown-isms to make the doc more attractive * remove unused symlink README -> README.md I double-checked the makefiles and whatnot to ensure that the README symlink is not being referenced. It is not. Rather, `doc/README` and `doc/README_windows.txt` are copied for distribution.
2101	It kind of helps to see directly the % complete without pointing the right bottom corner
2100	1) Create COIN_DUST constant, to represent the dust spam limit used. 2) Decrease COIN_DUST to 0.001 BTC Rationale: With the increase in bitcoin value (US$13.67 as of this writing), it seems reasonable to reduce the value level of which we consider "dust spam." 3) Update TX miner and relay fee defaults to 0.001 / 0.0005 BTC respectively Rationale: Reflects growth of dust spam in unspent transaction output dataset.
2099	This uses boost::filesystem::create_hard_link to hard-link the pre-0.8 blkNNNN.dat files to blocks/blkNNNNN-1.dat A hard link is the semantics we want: a copy would use twice the disk space, and a move would mean you have to re-download blocks if you switch back to 0.7. The hard link failing is a soft error-- in that case, you just re-download the blocks. According to my research, this should work on Windows, unless youre running a FAT32 filesystem.
2098	- add AllocateFileRangeWin(), which is used to pre-allocate block/undo files as a single contignous chunk on disk, so these files are not fragmented (current master has 95 - 409 fragments for such files, this patch reduces all those to 1 fragment) - add GetBlockFile() and GetUndoFile() helper functions, which are a wrapper for GetDiskFile(), which caches the last used file (separate cache for the last block and undo file) I guess the helper functions could be used in other places of the code as well. I have another pull in the pipe, which makes CAutoFile based on an std::fstream and I use these helper functions there, too. Todo: - perhaps there is no need for another function name even, so AllocateFileRangeWin() could be changed to AllocateFileRange() - as I didnt know how big undo files can grow (no MAX_UNDOFILE_SIZE from ^^), I used the same size for them, as for the block files (MAX_BLOCKFILE_SIZE)
2097	
2096	Should fix #2092
2095	When compiled with `USE_UPNP=-`, in "Options/Network" tab the "Map port using UPNP" checkbox is set up and disabled, which creates the impression that UPnP is always on. This patch makes `OptionModel` to always return `false` if UPnP is disabled, which solves this checkbox problem and, IMHO, is much more intuitive behaviour overall. Please review.
2094	When compiled with "`USE_UPNP=-`", in "Options/Network" tab the "Map port using UPNP" checkbox is set up and disabled, which creates the impression that UPNP is always on. This patch makes OptionModel to always return `false` is UPNP is disabled, which solves this checkbox problem and, IMHO, is much more intuitive behaviour overall.
2093	1) These two sets of non feature lines should be removed... - The first line is blank, whether with logtimestamps. - Regardless of shrinkdebugfile, the first 2 through 20 lines of the logfile are blank and do not carry logtimestamps. 2) These entries are missing logtimestamps... CTxIn(COutPoint(0000000000, 4294967295), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73) CTxOut(nValue=50.00000000, scriptPubKey=04678afdb0fe5548271967f1a67130) vMerkleTree: 4a5e1e4baa 3) vMerkleTree has an unnecessary space at the end of line.
2092	Timestamps such as 12/11/12 are ambiguous, unsortable, and more. ISO8601 was introduced and internationally ratified to fix this. So you want to say (in extended localtime format) 2012-12-12T21:01:02, or 20121212T210102 in basic format. Refer to pp:4.3.2 on page 19 of the spec for a quick picture. There are also places in the code where the data logged contains and embedded timestamp in the line... that also needs to use ISO8601.
2090	tests 0.7.x: compilation warnings with boost 1.52.0 freebsd 8.x i386 gcc 4.2.1 20070831 patched test/multisig_tests.cpp:219: instantiated from here boost152/include/boost/test/test_tools.hpp:536: warning: comparison between signed and unsigned integer expressions test/sigopcount_tests.cpp:24: instantiated from here boost152/include/boost/test/test_tools.hpp:536: warning: comparison between signed and unsigned integer expressions test/script_P2SH_tests.cpp:301: instantiated from here boost152/include/boost/test/test_tools.hpp:536: warning: comparison between signed and unsigned integer expressions test/wallet_tests.cpp:107: instantiated from here boost152/include/boost/test/test_tools.hpp:536: warning: comparison between signed and unsigned integer expressions fyi
2089	- current code, when set e.g. -onlynet="IPv6", only prevents outgoing connections to peers via the blocked networks (in this example IPv4/ Tor) - this patch extends the behaviour to inbound connections, so when e.g. -onlynet="IPv6", dont allow incoming IPv4/Tor connections from peers
2088	0.6.x aea0658578a64503967856c235d7ca1a361e1c3b When proxy=127.0.0.1:7053 dns seed is performed. When proxy=192.168.0.1:9050 dns seed is not performed. 1) According to -h, dnsseed should always be used if dnsseed is 1 or unspecified. And not used if 0. This difference in dnsseed / ThreadDNSAddressSeed based on the proxy value is bad. It should always follow dnsseed setting/default. 2) And when the former setting is used, the dns seed does not go through the proxy as directed. This leak is bad. If proxy is specified, all traffic needs to go through the proxy. 2a) Also, suggest using primarily socks5, secondary socks4a, tertiary socks4. Also socks4 and socks4a cannot do IPv6! Edit: If still the case, do not assume use of proxy port 9050 is Tor, and that use of any other proxy port is not Tor. I should test with v0.7.x. bitcoin_stable repo is missing some recent release tags.
2087	Adds a new checkpoint at block 210,000.
2085	REORGANIZE REORGANIZE: Disconnect 0 blocks; 00000000000000fa092b..00000000000000fa092b REORGANIZE: Connect 1 blocks; 00000000000000fa092b..0000000000000215fa3b ERROR: CheckProofOfWork() : nBits below minimum work ERROR: CBlock::ReadFromDisk() : errors in block header ERROR: Reorganize() : ReadFromDisk for connect failed InvalidChainFound: invalid block=000000000000036e9de8 height=202543 work=525538108660598399360 date=09/10/2012 17:31:15 InvalidChainFound: current best=00000000000000fa092b height=202322 work=522638649320494962288 date=08/10/2012 07:01:01 InvalidChainFound: Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade. ERROR: SetBestChain() : Reorganize failed ERROR: AcceptBlock() : AddToBlockIndex failed ERROR: ProcessBlock() : AcceptBlock FAILED received block 000000000000056ed682 Postponing 221 reconnects REORGANIZE which continued for about 500 more times now i cant connect i can open the client but im stuck in safe mode and cannot disable it this was the final line of my debug.log ************************ EXCEPTION: N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_6system12system_errorEEEEE close: Either the application has not called WSAStartup, or WSAStartup failed C:\Program Files\Bitcoin\bitcoin-qt.exe in ThreadRPCServer() EDIT:so it appears im banned from bitcoin? wiped all bitcoin files and did a fresh install and it still wont connect
2084	
2083	Error initializing database environment and settings\administrator\application data\bitcoin\database! To recover,BACKUP THAT DIRECTORY,then remove everything from it except for wallet.dat. what does this mean.
2082	I am running the binaries provided by gaven for 0.7.2rc2. I started bitcoind with -detachdb=1 just to test whether everything was working well. On first attempt I got: mike@alpha:~$ ~/bitcoin-0.7.2/bitcoin-0.7.2rc2-linux/bin/32/bitcoind -detachdb=1 ::pressed CTRL+C:: terminate called after throwing an instance of boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error> > what(): mutex: Invalid argument Aborted I think started again with detachdb=1 and everything seemed fine. I shut down and no issues. I started again and everything fine and shut down with no issues. So this happened once and I cant get it to happen again. I am using 32-bit debian.
2081	I am running the binaries provided by gaven for 0.7.2rc2. I started bitcoind with -detachdb=1 just to test whether everything was working well. On first attempt I got: mike@alpha:~$ ~/bitcoin-0.7.2/bitcoin-0.7.2rc2-linux/bin/32/bitcoind -detachdb=1 <pressed CTRL+C> terminate called after throwing an instance of boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::system::system_error> > what(): mutex: Invalid argument Aborted I think started again with detachdb=1 and everything seemed fine. I shut down and no issues. I started again and everything fine and shut down with no issues. So this happened once and I cant get it to happen again. I am using 32-bit debian.
2080	I use a lot of vanity addresses and I dont need to rescan the chain when importing. I like the ability to optionally request not to do a rescan. Attached is a working example of this.
2078	I just learned about bitcoins and think it is one of the most important ideas out there. However, after watching a youtube video where gavinandresen addresses a C.I.A. owned trust fund, I realized that many entities like banks and government agencies are probably stashing themselves with bitcoins in order to control the market by owning a huge chunk of it. To avoid a possibly unhealthy accumulation of wealth by parties that dont care about things like the common good, it would be beneficial to come up with a system where although the transactions remain anonymous, there exist incentives for the nodes whose transactions result in the most positive effect to the whole market. In other words, each node or bitcoin wallet address should have some sort of a reputation given by the effect that its transaction history has had on the other nodes procurement capacity. Does anyone else thinks this is a legitimate concern?
2077	Using todays HEAD (85887020dc6080e5707632a4ea68232f66d51d69) I downloaded all blocks, and doing TX introspection block #210990 has tx a4e35aba7b7e12756ddb1084abf0cd124e14d5214253aeb2ea33783dbebfdfca but calling getrawtransaction yields error: {"code":-5,"message":"No information available about transaction"}.
2076	
2075	Looking more sensible now without the JSON dependencies.
2074	Nothing large, this fixes two minor inconveniences. See the commit messages for more information.
2073	With MinGW we use .a not .lib
2072	im using win fista home premium when i start bitcoing i get error msg windows saying, error loading blkindex.dat, when i hit ok: bitcoin-qt.exe has toped working, msg from microsoft windows and to fix the problem it telsme is a DEP:Data Execution Prevention i try to add bitcoin exception for DEP it tels me that bitcoin-qt need to run with DEP what should i do?
2071	more RPC abstraction/encapsulation work
2070	more RPC abstraction/encapsulation work
2069	start of abstraction/encapsulation fixes in the RPC interface
2068	call CheckDiskSpace() before pre-allocating space - even if we are allowed to fail pre-allocating, its better to check for sufficient space before calling AllocateFileRange() and if we are out of disk space return with error() - the above change allows us to remove the CheckDiskSpace() check in CBlock::AcceptBlock()
2067	You are allowed to delete addresses from the address book, EVEN if they have been used in active transactions. This should be Double verified. Also when the block chain is syncing, it is possible to delete MULTIPLE addresses due to lag. Finally IF...... one of your recieve coins addresses is in your Address book, it is possible to delete it AND it disappears from your RECEIVE coin list.....
2066	rework ThreadSafeAskFee() / askFee() functions - remove unused parameter from ThreadSafeAskFee(), which also results in the removal of an orphan translation-string remove unneeded flag from MSG_INFORMATION and fix an indentation
2065	- as we (can) supply the CClientUIInterface::MODAL flag via the style parameter, we dont need a separate bool for checking the modality As requested :), should be much better now. This needs to get in before #2045, because I need to rebase that pull after this one gets in!
2064	IPv6 support is now enabled by default, thus documentation should tell you how to disable it. Similarly the build-osx use of the flag can be removed.
2063	- add a default-constructor, which simply calls SetNull() and a constructor to directly pass nFile and nPos - change code to use that new constructors
2062	When the blocks/ and blktree/ databases exist, but the coins/ database doesnt, reconstruct it automatically at startup. More generally, if the block database has more recent blocks than the coins database, they are automatically constructed at startup. This already worked, but not when the coins database was missing entirely. This pullreq should fix that. This provides a very nice way for benchmarking the block validation logic, as this reconstruction happens before the actual node is started, and doesnt require writing to block files.
2061	The first commit is a rebased version of Hals feb 2011 patch. The second commit improves the code a bit (precalculate constants, and use BN_CTX_get for temporary values). This reduces reindexing time for the first 210k blocks (script checks enabled everywhere, 4 verification threads, -dbcache=900) from 1h14m to 1h1m on my system.
2060	* During block verification (when parallelism is requested), script check actions are stored instead of being executed immediately. * After every processed transactions, its signature actions are pushed to a CScriptCheckQueue, which maintains a queue and some synchronization mechanism. * Two or more threads (if enabled) process elements from this queue, and, and signal the waiting block verification code when they are done. As cs_main is held the entire time, and all verification must be finished before the block continues processing, this does not reach the best possible performance. It is a less drastic change than some more advanced mechanisms (like doing verification out-of-band entirely, and rolling back blocks when a failure is detected). This feature is enabled though the -par=N flag. Depends on #2058 and #2059.
2059	Depends on #2058.
2058	In case a reorganisation fails, the internal state could become inconsistent (memory only). Previously, a cache per block connect or disconnect action was used, so blocks could not be applied in a partial way. Extend this to a cache for the entire reorganisation, making it atomic entirely. This also simplifies the code a bit. I havent seen any reports of problems because of this, but it should be fixed.
2057	- dont call FileCommit() and fclose() if no valid FILE pointer was returned by OpenBlockFile()
2056	Implements the suggestions listed in #2052: * Only move disconnected transactions to the mempool after the last checkpoint * Always very scripts of transactions that do
2055	added build instructions for Ubuntu >= 12.04
2054	Using current master with own changes (not yet ready in a pull) + #2033. During IDB I got the following error: 11/30/12 13:09:22 ERROR: ProcessBlock() : already have block 198076 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 I then looked for all occurances of that block and found the following in debug.log: 11/30/12 13:05:13 got inventory: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 new 11/30/12 13:05:13 askfor block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 0 (00:00:00) 11/30/12 13:05:13 sending getdata: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 11/30/12 13:05:13 got inventory: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 new 11/30/12 13:05:13 askfor block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 1354280713000000 (13:05:13) 11/30/12 13:05:14 got inventory: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 new 11/30/12 13:05:14 askfor block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 1354280833000000 (13:07:13) 11/30/12 13:05:14 got inventory: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 new 11/30/12 13:05:14 askfor block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 1354280953000000 (13:09:13) 11/30/12 13:06:05 got inventory: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 new 11/30/12 13:06:05 askfor block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 1354281073000000 (13:11:13) 11/30/12 13:07:19 sending getdata: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 11/30/12 13:08:04 got inventory: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 new 11/30/12 13:08:04 askfor block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 1354280839000000 (13:07:19) 11/30/12 13:09:13 sending getdata: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 11/30/12 13:09:19 sending getdata: block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 11/30/12 13:09:19 received block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 11/30/12 13:09:22 SetBestChain: new best=00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 height=198076 work=470915573701569216830 tx=6934571 date=09/10/12 00:17:17 11/30/12 13:09:22 received block 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 11/30/12 13:09:22 ERROR: ProcessBlock() : already have block 198076 00000000000000bb60ef6680bc3e77b1cc4098b082334cfb9ab212e7319db602 The debug.log only contains that kind of error(s) and no other failures. Any ideas, is this normal behaviour or a problem with any of the recent changes? I have to add, that now there is more than 1 such error in the log after IBD progresses further.
2053	Loadblock an old chain with P2SH violating blocks in it. These blocks are not rejected because they are below the highest checkpoint and the scripts arent tested. Substituent blocks reorg them out and the transactions are not tested before being inserted in the mempool. (just opening an issue so this isnt forgotten, see bitcoin-dev logs from 2012-11-28)
2052	Currently, this is possible: * Someone has a very old P2SH-invalid block in his block file * When importing this block file, it gets accepted (because script checks that would catch this are disabled before the last checkpoint) * It gets immediately reorganized when a later block is imported * When disconnecting, its transactions enter the memory pool, as again, signature checks are disabled * As long as not rebooted, this transaction remains in the mempool, and causes a (harmless) error to be reported when trying to construct a block Two solutions (and I think both are useful anyway): * During IBD, dont move disconnected transactions to the mempool at all * Do not disable signature checks from disconnected transactions entering the mempool Thanks to for spotting a weird P2SH-invalid transaction in his mempool.
2051	``` bitcoind move "" credited 0.01 error: {"code":-1,"message":"move <fromaccount> <toaccount> <amount> [minconf=1] [comment]\nMove from one account in your wallet to another."} ``` ``` bitcoind move credited "" 0.01 error: {"code":-1,"message":"move <fromaccount> <toaccount> <amount> [minconf=1] [comment]\nMove from one account in your wallet to another."} ```
2050	Does what it says on the tin. Has full validation of private key before trying to import. Includes logic to request passphrase if wallet is locked. Include progress bar when scanning transactions as can take a few mins. Motivation was to make it easier for people to import vanity addresses. I wrote bitcoinvanity.appspot.com and so want to make importing key easier for users. 1st attempt at QT programming so could be improved I expect.
2049	Apparently, test_bitcoin has been silently corrupting $DATADIR/blocks/blk00000.dat and rev00000.dat since ultraprune was merged...
2048	
2047	I think it would be a nice addition, to see from which of the peers you are currently downloading blocks during initial chain sync. Im not able to implement this, but do others think that is a valuable thing to add?
2046	- this allows to setup the trayicon before we have and want a trayicon menu - should be of great use, when we remove that splash screen - fixes a small bug with the toggleHideAction icon, which is not only used with trayicon but also with the Mac dock
2045	- use it for displaying URI parsing warnings - use it for displaying error and information in backup wallet function (the information display is new and the error was a warning before) - cleanup BitcoinGUI::incomingTransaction() -- use message() + the information icon from message -- comment out an unused parameter in the function definition and declaration -- move all pre-checks at the beginning of the function There is this comment in qmessagebox.h (``// the following functions are obsolete``) that lists the static QMessageBox functions (warning, information and so on) as obsolete, so I think we should talk about replacing them over the next months.
2044	Intended to at least mitigate the issue from #2035.
2043	Had B wallet, wouldnt sync, paralysed the PC, uninstalled, re-installed from below, paralysed again.
2042	OpenDiskFile was always opening files in "rb+" mode (read-write binary), and if that failed and fReadOnly was false, trying to truncate the file. Truncate would always fail (AFAIK) unless a race condition set the file read-write between the two attempts. This changes it to actually honour fReadOnly. The truncate race is not fixed, and cannot easily be fixed (fopen lacks a "open read-write, random access, but dont truncate" mode). If we want to actually try truncating in !fReadOnly mode, Im pretty sure we need to unlink first. This bug was introduced as part of ultraprune, so does not affect any released versions.
2037	-printpriority is currently ignored without -debug, so I dont see any harm to this.
2035	I dont know if it is a feature or a bug, but an error would be nice I guess.
2033	When a transaction A is in the memory pool, while a transaction B (which shares an input with A) gets accepted into a block, A was kept forever in the memory pool. This problem exists in probably all versions of Bitcoin ever. On v0.7.1, it can be demonstrating by mining with 7e15b68ae applied. Every few hours, it seems such a transactions that conflicts with the memory pool gets mined (successful double spends?). Fixing this results in less transactions in the memory pool, and faster construction of new blocks. This should apply cleanly on v0.7.0, v0.7.1 and HEAD.
2032	This fixes the duplicate shortcut usage in sign(alt+s)/verify(alt+v) message dialog. Bug described in issue:
2031	From a question raised by as he re-reviewed the p2sh code.
2030	Pursuant to a "discussion" here: The patch does three things: 1. Copies Qt frameworks from a well-known location. 2, On my installation "phonon" plugin is called "phonon_backend". Make sure phonon_backend is ignored. 3. env. variable QTDIR is used to find the plugins directory. On my installation the dir is "/Developer/Application/Qt". I decided that instead of hard-coding this path, setting QTDIR before running the script is a more flexible solution.
2029	Lack of HiDPI support on devices like the retina MBP and other displays causes eyesore when operating the client.
2028	The problem: fresh install start the daemon like ./bitcoind -rpcuser=foo -rpcpassword=bar using other terminal, try to send command: ./bitcoind -rpcuser=foo -rpcpassword=bar help I get the following message: error: server returned HTTP error 403 Versions: bitcoin-0.7.1-linux $ uname -a Linux server 3.2.0-4-amd64 #1 SMP Debian 3.2.32-1 x86_64 GNU/Linux What is going on: the daemon is using the loopback to receive connections, my machine has the loopback (127.0.0.0) and two other interfaces eth0 and eth1, when I use the bitcoind to send commands, the process gets the IP from the eth0 and not from the loopback! What I did to get it working: after some debuging I realised what was the problem, so I started the daemon like ./bitcoind -rpcuser=foo -rpcpassword=bar -rpcallowip=10.0.0.1 that IP is from my eth0, now when I send the commands the daemon answer correctly. If you need more info, let me know. Thank you very much, this bitcoin thing is a great idea!
2027	Being a linux nub, I hesitate to try to modify the readme myself. I tried libdb++dev which pulled in 5.1, which allowed me to start compilng. I then ran into: --- src/net.cpp:18:32: fatal error: miniupnpd/miniwget.h: no such file or directory --- I then found: --- qmake "USE_UPNP=-" instead of qmake "USE_UPNP=" --- that allowed me to fully compile the latest git. M
2026	I reformatted the entire document to look pretty in both standard text and Markdown. This should make it a lot easier to read. Also, I incorporated my OS X 10.8 build instructions with Homebrew as the package manager. I originally posted them on the Bitcoin Stackexchange in the question [Trouble compiling bitcoind on OSX with homebrew](http://bitcoin.stackexchange.com/questions/3672/trouble-compiling-bitcoind-on-osx-with-homebrew/5253#5253). Ive used these instructions twice now, so Im fairly certain theyll work. I do recognize that I need to find a way to get the Makefile to look at Homebrews Cellar without needing to be patched. WIP on my branch entitled [feature/osx10.8-bitcoind-compilation](https://github.com/colindean/bitcoin/tree/feature/osx10.8-bitcoind-compilation).
2025	Just add ``-proxy=crashme`` as parameter and on Windows and this will lead to an APPCRASH. I looked what that parameter causes, which is calling ``InitError()``, which aborts ``AppInit2()`` and causes a ``return 1;`` to exit the client. Knowing this I was placing a ``return false;`` in ``AppInit2()`` to see when the crash starts to occur. This is the case after the first ``bitdb.open()`` in Step 5 of the initialisation (https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L587). I digged deeper into this and found out, that the crash is triggered in ``CDBEnv::EnvShutdown()`` (https://github.com/bitcoin/bitcoin/blob/master/src/db.cpp#L41), which is called when destroying the ``bitdb`` global. What I did not yet fully understand (because of a bad working Debugger), why would ``DbEnv(0).remove(GetDataDir().string().c_str()`` (https://github.com/bitcoin/bitcoin/blob/master/src/db.cpp#L41) cause this. Is it a problem with GetDataDir() or string()? Anyway, I have a fix ready, which prevents this crash #2024. Perhaps there is a better way to fix this, so core devs should take a look.
2024	- can be triggerd by just adding -proxy=crashme with 0.7.1 - crash occured, when AppInit2() was left with return false; after the first call to bitdb.open() (Step 6 in init) - this is caused by GetDataDir() or .string() in CDBEnv::EnvShutdown() called via the bitdb global destructor More details in #2025, as Im not sure this fixes the underlying issue or just that single appearance of the bug.
2023	There have been some minor string changes
2022	- I introduced the wrong format macro with my former patch (#2018), this needs to be signed not unsigned (thanks Luke-Jr)
2021	Continuing from #2009... New fixes in master since previous list (@gavinandresen Are these OK to backport now as well?): * 90841fd (#1984) VariantClear@4 + shutdown@8 patch * 4ade04d (#2012) Print error for coinbase-pays-too-much case of ConnectBlock failing 6b3783a does change strings, but only the English in them, not the meaning, so the old translations are direct 1:1 mapping. If the NACKs are debatable (if not, just say so), Id like to clarify whether the memset one is a (minor) security fix or not?
2020	- coins were actually sent only to 1EH...(too long address), 1Km... should not have received any coins. why was that accepted by the network?
2019	This updates both translation relevant files to current master strings. Got the script working: - install Python 2.7 for Windows - mingw-get install msys-gettext - edit \share\qt\extract_strings_qt.py to use "#!/d/Python27/python" instead of "#!/usr/bin/python"
2018	- fixes 2 warnings I observed while compiling on Windows with MinGW
2017	* "optimistic write": Push each message to kernel socket buffer immediately * If there is write data at select time, that implies send() blocked during optimistic write. Drain write queue, before receiving any more messages. This avoids needlessly queueing received data, if the remote peer is not themselves receiving data. Result: write buffer (and thus memory usage) is kept small, DoS potential is slightly lower, and TCP flow control signalling is properly utilized. The kernel will queue data into the socket buffer, then signal the remote peer to stop sending data, until we resume reading again.
2016	Replaces CNode::vRecv buffer with a vector of CNetMessages. This simplifies ProcessMessages() and eliminates several redundant data copies. Overview: * socket thread now parses incoming message datastream into header/data components, as encapsulated by CNetMessage * socket thread adds each CNetMessage to a vector inside CNode * message thread (ProcessMessages) iterates through CNodes CNetMessage vector Message parsing is made more strict: * Socket is disconnected, if message larger than MAX_SIZE or if CMessageHeader deserialization fails (latter is impossible?). Previously, code would simply eat garbage data all day long. * Socket is disconnected, if we fail to find pchMessageStart. We do not search through garbage, to find pchMessageStart. Each message must begin precisely after the last message ends. ProcessMessages() always processes a complete message, and is more efficient: * buffer is always precisely sized, using CDataStream::resize(), rather than progressively sized in 64k chunks. More efficient for large messages like "block". * whole-buffer memory copy eliminated (vRecv -> vMsg) * other buffer-shifting memory copies eliminated (vRecv.insert, vRecv.erase)
2015	Im on OSX 10.5 with qt-mac-opensource-4.6.0.dmg from nokias site. Qt Frameworks are in /Library/Frameworks The strange thing is that the linker doesnt write the full path to the Qt Frameworks into the executable, like so: otool -L ./Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt ...<skip>... QtGui.framework/Versions/4/QtGui (compatibility version 4.6.0, current version 4.6.0) QtCore.framework/Versions/4/QtCore (compatibility version 4.6.0, current version 4.6.0) ...<skip>... Note that there is no / in front of QtGui and QtCore. macdeployqtplus apparently cant parse such a line and fails to deploy. My suggestion would be to modify macdeployqtplus so that when encountering a path which starts with no "/" but with Qt*, macdeployqtplus prepends /Library/Frameworks. Also macdeployqtplus cant find the plugins directory which by default is in /Developer/Applications/Qt/Plugins
2014	
2013	Cleaner and removes the need for the application-specific flags in serialize.h. No semantic changes.
2012	
2011	- remove obsolete functions, variables, definitions and such - cleanup layout (no need to keep that many ugly empty lines IMHO) I searched trough the source to see where functions are used and removed all that were not used anywhere anymore. Tried a compilation afterwards and the client still works fine :). Needs a careful review from a core dev.
2010	- its good practise to use unsigned int for enum flags, so change this one, as I introduced this for Bind()
2009	It seemed to create two CWalletDB objects that both grab the database lock. (note: based on v0.7.1)
2008	These flags select features to be enabled/disabled during script evaluation/checking, instead of several booleans passed along. Currently these flags are defined: * SCRIPT_VERIFY_P2SH: enable BIP16-style subscript evaluation * SCRIPT_VERIFY_STRICTENC: enforce strict adherence to pubkey/sig encoding standards. No semantic changes.
2006	Other operating systems, like FreeBSD, have their own make programs, with different syntax. These install GNU make as gmake, and relay on the $(MAKE) macro to specify the right program. The src/makefile.* files hard code make command line for leveldb, causing FreeBSD to use the wrong make command. This pull edits this command to use the $(MAKE) macro, so the right make command is used.
2005	- remove an unwanted ";" at the end of the ~CCoinsView() destructor - in FindBlockPos() and FindUndoPos() only call fclose(), if file is open - fix an error string in the CBlockUndo class
2004	o Remove unused Leave and GetLock functions o Make Enter and TryEnter private. o Simplify Enter and TryEnter. boost::unique_lock doesnt really know whether the mutex it wraps is locked or not when the defer_lock option is used. The boost::recursive_mutex does not expose this information, so unique_lock only infers this knowledge. When taking the lock is defered, it (randomly) assumes that the lock is not taken. boost::unique_lock has the following definition: unique_lock(Mutex& m_,defer_lock_t): m(&m_),is_locked(false) {} bool owns_lock() const { return is_locked; } Thus it is a mistake to check owns_lock() in Enter and TryEnter - they will always return false.
2003	This pull request includes needed changes to get started using locking annotations. threadsafety.h - the set of macros. sync.h - a mixin that adds annotations to the basic locks. net.h - I added annotations to functions where the set of held locks before and after the function is called is not the same. Reviewers: Please look carefully at the TODOs in net.h. The pre/postconditions of those functions are entirely unclear. The set of held locks depend on the value of nHeaderStart ! nHeaderStart is also involved in both != -1 and < 0 tests.
2002	
2000	It was looking really weird to read this in the source: <pre> } } </pre> At first I thought it must be a merge-problem ;). Im sorry that the diff on Github is looking THAT ugly, there are NO code-changes in, just indentation changes.
1999	Sorry to open an issue everytime for this, but I cant do this on Windows :).
1997	- remove pathEnv from CDBEnv, as this attribute is not needed - change path parameter in ::Open() to a reference - make nDbCache variable an unsigned integer - remove a missplaced ";" behin ::IsMock()
1996	getnewaddress AccountA => 1AddressAxxxxxxxxxxx setaccount 1AddressAxxxxxxxxxxx AccountB => getaddressesbyaccount AccountA => 1AddressBxxxxxxxxxxx Wouldnt it be more logical for "getaddressesbyaccount AccountA" to return "[ ]" ? However, "setaccount" create a new key to AccountA, if 1AddressAxxxxxxxxxxx (the moved address) is the only key in AccountA Why perform the check at line 191-197, instead of just "deleting" AccountA ? ----- src/rpcwallet.cpp:196 ( ) (Im new to github, so please tell me if I did something wrong :-)
1995	A while back I started looking at bitcoin, and I was disappointed with the code quality wrt locking. I tried to fix the code to be clang -Wthread-safety clean, but I dont know the code enough to understand some of the entanglements that are currently present. Ive added lots of annotations that specifies the locking requirements on functions and data. This might seem a little overzealous, but I believe that this is necessary to "get back on track" and make the locking strategy clear and consistent. Even with this patch there are lots of locking issues left - probably benign like things happening during startup and shutdown. There are also false positives from me not getting clang to grok TRY_LOCK correctly. Below is a long note I wrote while looking through the source code a while back. Maybe you guys agree or maybe not - at least it explains the whats and the whys. --- For an object that is accessed by multiple threads we have, for every field: - It is const, constant after initialization, or guarded by a mutex. - Re-using an object is a *bad idea*. It should never be done. If we do, we are mutating the constant-after-initialization fields. This leads to exessive locking and overcomplicated code. It is a lot simpler to discard the object and re-create it. This works, because the object is owned by some other object, and in that other object, it is a "guarded by mutex" field. Thus by re-creating the object, we lift the responsibility for locking into the parent. - A result of the above is that "constructors" must be separate from other functions in the class. Constructors that are not strictly C++ constructors, such as deserializing should be static functions if possible. This makes it impossible for them to to be used to mutate constant-after-initialization fields. - Locks should not be exported outside of a class. Java did this mistake and it is considered an anti-pattern. - Locks should never serialize code, they should protect data from being accessed while invariants on that data are broken. - Locks should be textually close to the fields. Given a lock, it should be easy to understand what it guards, and given a field, it should be easy to see which locks guard that field. Thus, locks should be private members of a class. A good way to obfuscate this is to put a lock in a parent class, as done in keystore.h where CKeyStore. It is hard to know what that lock guards. It is a lot cleaner to duplicate that lock in the data section of the subclasses. - Recursive locks should never be used. They lead to bugs, and are *only* necessary in order to write sloppy code. If some functionality is both a transaction that ensures that the invariants of the data are obeyed, and part of larger transactions, then it is much clearer to separate these conserns into two functions: void DoFoo() { LOCK(cs); DoFooUnlocked(); } void DoFooUnlocked() { ... } - Using locks to protect simple setters and getters is often buggy and/or complex. In most cases, mutating some state is part of a larger transaction, so the setter is often protected by some other lock external to the class. In these cases, re-building a new object is usually the best approach, but otherwise, explicitly marking setters as SetFooUnlocked() and not lock is clearer. It makes it explicit that you cant just mutate randomly without doing some external locking. - Do not hold locks over callbacks out of an object. This means that objects should *signal* some state change, and not guarantee which state the object is in when a callback happens. Sometimes, it makes sense to break this, but then the callback will have to be treated like a signal handler, or irq handler - i.e. it can only do simple things and not call out to other random code. - Every time you call TRY_LOCK, a kitten dies. The reason why this is bad is that it makes reasoning, and testing the code incredibly hard. TRY_LOCK is basically this: if (rand() % 1) { DoA(); } else { DoB(); } It is simply unnecessary randomness. The TRY_LOCK macro should be removed, it kills kittens. If something like TRY_LOCK is truly needed, then at least it should be abstracted out of the actual functions, so that the functions themselves are testable. Thus in the above case, DoA() would be a separate, testable, function. In some really large systems (millions of large tps), sharding work queues by lock is a reasonable design to reduce resource usage by threads (so you do cs_someLock.DoWorkNowOrWhenUnlocked(&DoA), and it is more efficient than TRY_LOCK, but for bitcoin - this is just overkill. - Having lots of semantically different locks in a class is not ideal. For example CNode has 4 locks. This means that there are 4 sets of invariants that can be established independently of each other in this class. To put it another way, when you call a function on this object, it should work on a subset of the state, or it should hold all 4 locks. This suggests that either the class is a composite of multiple objects, and should be broken up, or the number of locks should be reduced. - We cannot compose multiple critical sections which all take a lock into a large critical section. After we have released locks, all checks that we have done are invalidated. Most of CWallet is just plain wrong and based on this false assumption. Locking is done in CCryptoKeyStore instead of in CWallet. See above "Locks should be textually close to the fields" for a reason why people confuse themselves. - There is a lot of convoluted code like this: bool result; { LOCK(cs_KeyStore); result = (mapKeys.count(address) > 0); } return result; which is equivalent to this: LOCK(cs_KeyStore); return (mapKeys.count(address) > 0); The destructor is guaranteed to run after the expression is evaluated. There is no need to over-engineer. Similarly, there is a lot of code like this: void SomeFunction(...) { something(); { LOCK(cs_something); ... } } or this: void SomeFunction(...) { { LOCK(cs_something); .. rest of function ... } return false; } There is no point in all the excessive blocks. What are they for?
1993	- ensure header inclusion guard is named after the header file - add missing comments at the end of some inclusion guards - add a small Qt5 compatibility fix in macdockiconhandler.h
1992	As memset() can be optimized out by a compiler it should not be used in privacy/security relevant code parts. OpenSSL provides the safe OPENSSL_cleanse() function in crypto.h, which perfectly does the job of clean and overwrite data. For details see: - change memset() to OPENSSL_cleanse() where appropriate - change a hard-coded number from netbase.cpp into a sizeof() There are still some more memset() calls in the code, perhaps a dev should take a look if I missed any, that is related to this pull!
1991	Add the fixwalletdates RPC When the client has been off for a while and gets restarted, new transactions are received via blockchain updates and get tagged with the current time, which bear little to no correlation with the time at which the TX was broadcast by the sender. As a substitute, the "fixwalletdates" RPC re-tags all wallet transactions with the timestamp of the block they are included in (if any). One minor downside of calling this RPC is that TX that were actually received via broadcast will see their "broadcast date" be replaced by the time they got included in a block. In practice, Ive found this not to be a problem. In fact, seeing all TXs tagged with the time at which they get included in the blockchain makes more sense : in a way, its the time the TX became valid, and if we have to pick one canonically representative time for a TX, first block inclusion time is better than first broadcast time.
1990	After the leveldb import, src/makefile.unix has the make command for leveldb hard coded. When a build is run on FreeBSD, it uses the system make, which uses different syntaxes. Using the macro $(MAKE) will cause it to run gmake, and the build will work.
1989	- if we are not connected and if we are downloading the block-chain dont start the mining threads - this pull makes the setgenerate-call explicit, which I found out to be a good thing as we dont have 4 idle threads when not needed and it prevents mining under erroneous conditions (which I was able to trigger sometimes before this patch and which lead to orphan blocks) - the internal miner is only used for testnet anyway these days, but I love it for that scenario
1988	- fix ThreadSafeMessageBox always displays error icon - allow to specify MSG_ERROR / MSG_WARNING or MSG_INFORMATION without a custom caption / title - allow to specify CClientUIInterface::ICON_ERROR / ICON_WARNING and ICON_INFORMATION (which is default) as message box icon - remove CClientUIInterface::OK from ThreadSafeMessageBox-calls, as the OK button will be set as default, if none is specified - prepend "Bitcoin - " to used captions - rename BitcoinGUI::error() -> BitcoinGUI::message() and add function documentation - change all style parameters and enum flags to unsigned - update code to use that new API - update Client- and WalletModel to use new BitcoinGUI::message() and rename the classes error() method into message() - include the possibility to supply the wanted icon for messages from Client- and WalletModel via "style" parameter
1987	Added security measure.
1986	Although in theory RPC API access should be locked down, there are occasions where cleartext passwords have been used anyway. HTTP Basic authentication remains, but a new default "Bitcoin" HTTP Authorization header is used. HTTP Digest authentication was considered initially, but that may require additional HTTP round-trips. The standard HMAC-SHA256 algorithm pair was chosen instead, with some additional stirring factors (random nonce, time). The HTTP server will accept Basic or Bitcoin authentication now. The HTTP client will attempt Bitcoin authentication, and fall back to Basic if that fails.
1985	Just wondering why the unneeded extra data of "noncerange" is in here? I know GBT transfers an enormous amount of data for a typical request, but it would be better to avoid throwing in extra unused data also. Could it be removed?
1984	merged 2 windows:LIBS lines so they happen when they need to (#976) added -loleaut32 to fix VariantClear moved -lws2_32 and others to existing windows:LIBS line
1983	Updates 4 odd RPC commands to match other RPC commands which tend to follow a <VERB><OBJECT> naming scheme. The old names still work as aliases of the new names, but dont show up in the help lists. See:
1982	See individual commits. This provides a slightly different, not-JSON-RPC API endpoint, which makes this HTTP request usable via "wget" and similar utilities. The content returned and format thereof is certainly open to discussion. My main goals were * fix HTTP request line parsing bugs * tighten HTTP request line validation, including "/" URI (our default JSON-RPC endpoint) * permit dump of crypted keys, without decrypting them * demonstrate a not-JSON-RPC API download endpoint
1981	Tweaks for LevelDBs caches.
1980	
1979	
1978	As the only BDB database left is the wallet, and it is always detached. This also removes the IsChainFile() predicate and related chainfile-specific logic.
1977	- as the redefiniton of printf happens in util.h, which is included in bitcoinrpc.cpp, we dont need another redefinition
1976	filesystem.hpp and thread.hpp are included in util.h, which is included in util.cpp
1975	After upgrading my RAM from 1 GB to 3 GB the bitcoin-qt client didnt work. While loading the blockindex a fatal error occured. It said: Runaway exception EXCEPTION: 11DbException Db::open: Invalid argument C:\Program Files\Bticoin\bitcoin-qt.exe in Runaway exception Im running a 32-bit installation of Windows 7 on an Acer Aspire M3640. I have made a backup of my wallet and reinstalled the bitcoin client. Now it says: Runaway exception EXCEPTION: St13runtime_error CDB() : cant open database file blkindex.dat, error 22 C:\Program Files\Bitcoin\bitcoin-qt.exe in a Runaway exception I deleted the blockindex (blkindex.dat, blk0001.dat, blk0002.dat) and the known peers (peers.dat, peers.dat.a2de, peers.dat.da53, peers.dat.f4a4). Now it works fine again, but of course I need to redownload all blocks in the network. Im not sure whether this is a known issue, Im sorry if it is. Thanks in advance.
1974	Exactly like -blocknotify, except that it gives the TxID of transactions that hit the wallet. Note that this is NOT a payment notification. It will trigger on outgoing transactions too, and can trigger multiple times on the same transaction.
1973	No functional changes.
1972	
1971	The original test (checking whether the transaction occurs in the txindex) is not usable anymore, as it will miss anything already fully spent. However, as merkle transactions (and by extension, wallet transactions) track which block they were last seen being included in, we can use that to determine the need for rebroadcasting.
1970	makefile.unix uses xCFLAGS, xCXXFLAGS and xLDFLAGS internally to avoid being clobbered by users CFLAGS / CXXFLAGS / LDFLAGS variables. This change does the same for src/leveldb/Makefile.
1969	On Ubuntu 12.04 64-bit with bitcoint 0.7.1 I get this error: EXCEPTION: St13runtime_error CDB() : cant open database file blkindex.dat, error 22 bitcoin in Runaway exception Please fix this or let me know about a workaround to access my bitcoins again.
1968	Saw it in the code and Im asking myself if this is also needed for Boost versions > 1.46? We could add a boost version check if its not needed IMO.
1967	
1966	Use && and fix linux-mingw, please wait for pull-tester output here. Also upgrade to qt 4.8.3 because 4.8.2 isnt on the version archive anymore (dont see any mentions as to why, but we might as well upgrade so that everyone can build).
1964	I tried building on windows and got this: error: No rule to make target c:/Qt/projects/bitcoin/src/leveldb/libleveldb.a, needed by debug/bitcoin-qt.exe. Stop. The build-mws.txt, README_windows.txt, and readem-qt.rst files do not make any reference to building the libleveldb.a file outside of the bitcoin build. I did not separately download and build the four items listed in build-msw.txt, but none of them are leveldb. I downloaded and installed the dependencies as instructed in the readme-qt.rst file. This led me to lines 100-104 of bitcoin-qt.pro "# make an educated guess about what the ranlib command is called". Im looking up this "ranlib" thing...
1963	When interrupted early at startup, it was possible to have the shutdown code try to write NULL as the new best block.
1962	The first commit adds CBufferedFile, which works like CAutoFile, but buffers the data in memory, so it is rewindable, and supports fast scanning inside the buffer. The second commits switches LoadExternalBlocksFromFile to use CBufferedFile, simplifying it, and removing all fseek()s.
1961	I have found the following series of RPC calls that can make bitcoind crash. You need to know the rpc username and password, as well as the wallet password. #!/bin/bash RPCUSER=1 RPCPASSWORD=2 WALLETPASSWORD=1 set -e for n in {1..999}; do bitcoind -rpcuser=$RPCUSER -rpcpassword=$RPCPASSWORD walletpassphrase $WALLETPASSWORD 99999 bitcoind -rpcuser=$RPCUSER -rpcpassword=$RPCPASSWORD walletlock echo -n "$n " done This is due to the re-locking not killing the previous re-locking thread before starting itself. This has a negative impact on my application, which does frequent locks and unlocks.
1960	"Im test-running 0.7.1rc1 (self-compiled with libdb5.1 and without upnp on linux) and found it drop dead already twice after sending it commands in the debug-console. This (2nd) time it was the "move" command. I instantly saw the mining-activity stop (cpu-meter in the panel), and the move command didnt return a response. When it happened, I could still type more commands in the console (though without getting an answer), but meanwhile also the debug-widget has dropped dead and doesnt redraw anymore. Ill leave it stuck for a while and will look back in this thread for debugging instructions before killing&restarting it... PS: gdb says, its stuck in pthreads_cond_wait in boost::unique_lock in AddressTableModel::labelForAddress(QString) in TransactionTableModel::lookupAddress(string,bool)"
1959	- instead of "return false;" use "return QDialog::eventFilter(object, event);" to harmonize this event filter with our default behaviour - remove orphan spaces found while editting the files
1957	These calls can be used to generate and check signatures for arbitrary (potentially binary) files, much like signmessage / verifymessage. The client should hash the file locally then send a uint256 in hex form as the 2rd parameter to signfile and the 3rd parameter to verifyfile. The other option would have been for the client to hash the file locally and send it to the server using the signmessage / verifymessage calls, but then the server would be signing a hash of a hash. Im new to the bitcoin code, so if theres a better way of doing this, let me know. The functionality has been verified by one other person on IRC but it still could be wrong.
1956	Implements #1948 - Add macro `CLIENT_VERSION_IS_RELEASE` to clientversion.h - When running a prerelease (the above macro is `false`): - In UI, show an orange warning bar at the top of the overview page. This will be used for other warnings (and alerts) as well, instead of the status bar. - For `bitcoind`, show the warning in the "errors" field in `getinfo` response. This does not disable any functionality. Acting on the warning (or not) is the user or developer their own responsibility.
1955	This looks like it was just a munged merge when ultraprune was committed.
1954	- if -datadir= is no directory dont return an empty path, but instead create / use the default data dir - check for existance of the final datadir, before trying to create it This should fix #1950.
1953	CreateNewBlock was reading pindexBest at the start before taking the lock so it was possible to have the the block content not match the prevheader and this can also trigger a newly added assert in ConnectBlock. I noticed this during a code review after twobitcoins reported that ab91bf39 (BIP30 for all blocks) could cause a null dereference on a modified node that mined during the IBD, or on testnet when it reached heights 91842 and 91880 due to CreateNewBlock calling ConnectBlock with pindex->phashBlock NULL.
1952	Both `pcointTip` and `pblocktree` can be null, but since `CBlockTree::Flush` is empty the call is optimized away and so the second check is not strictly necessary...
1951	Issue: New bitcoin install imports only 2.0GB of blockchain bootstrap.dat (height=189205) before continuing startup. Platform: Windows 7 SP1 x64 Client: Bitcoin-0.7.1-Win32 Steps to replicate: Obtain bootstrap.dat torrent (SHA256 a3f258e7af...) (block height 193000, 2.32 GB) Command line used: bitcoind.exe -datadir=C:\datadir -loadblock=C:\bootstrap.dat -connect=127.0.0.1 -detachdb -printtoconsole Wait 5000 seconds or so, only blocks up to 189205 are processed before bitcoin continues normal operation (giving expected "no RPC password" error if no bitcoin.cfg file present).
1950	Version 0.7.99 (#16eec89) on Linux $ ./bitcoind -datadir=/blabla getinfo Error: Specified directory does not exist Segmentation fault **Edit to include gdb log;** $ gdb --args ./bitcoind -datadir="/non-existent" getinfo GNU gdb (GDB) 7.4.1 Copyright (C) 2012 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type "show copying" and "show warranty" for details. This GDB was configured as "x86_64-unknown-linux-gnu". For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>... Reading symbols from /home/tucenaber/src/git/bitcoin/src/bitcoind...done. (gdb) run Starting program: /home/tucenaber/src/git/bitcoin/src/bitcoind -datadir=/non-existent getinfo warning: Could not load shared library symbols for linux-vdso.so.1. Do you need "set solib-search-path" or "set sysroot"? [Thread debugging using libthread_db enabled] Using host libthread_db library "/lib/libthread_db.so.1". Error: Specified directory does not exist Program received signal SIGSEGV, Segmentation fault. CCoinsViewCache::Flush (this=0x0) at main.cpp:246 246 bool fOk = base->BatchWrite(cacheCoins, pindexTip); (gdb) backtrace #0 CCoinsViewCache::Flush (this=0x0) at main.cpp:246 #1 0x0000000000446cf1 in Shutdown (parg=parg@entry=0x0) at init.cpp:81 #2 0x0000000000451006 in AppInit (argc=argc@entry=3, argv=argv@entry=0x7fffffffe8d8) at init.cpp:141 #3 0x000000000041bc1a in main (argc=3, argv=0x7fffffffe8d8) at init.cpp:192
1949	Thanks to PullTester and for spotting some of these.
1948	Id like to see some big warning sign "This is a pre-release test build - use at your own risk - do not use for mining or merchant applications" that is either always visible or at least shown at startup, enabled via a macro that cna be set in clientversion.h. This could be used for daily builds, pulltester builds, and any builds before release candidate (or even releases) are made.
1947	
1946	Im using an own build containing the new Ultraprune patch on Windows 7. While doing some tests with it, I observed a strange thing. - start Bitcoin-Qt - while it syncs the block chain enter RPC console - enter ``setgenerate true`` - a block was foundm (Client did not yet catch up) and the client now displays ``Warning: Displayed transactions may not be correct! You may need to upgrade, or other nodes may need to upgrade.`` I cant tell if this is a problem of the internal miner (@gmaxwell said it has some errors in) or a problem that raised after Ultraprune though.
1945	See
1944	LightRider on the forums reports: "...clicking on the link multiple times creates multiple instances of the bitcoin process, but the user cannot see any affects of them starting. I didnt notice until I checked process explorer and noticed them running. Also, when the client is not running, clicking the link creates a process but no gui appears at all, neither the window nor the tray icon."
1943	Flushes the blktree/ and coins/ databases, and reindexes the block chain files, as if their contents was loaded via -loadblock. Based on earlier work by Jeff Garzik. This is a step towards automatic upgrade of pre-ultraprune databases as well.
1942	Was included twice, and is only needed once :).
1941	- remove uiInterface.InitMessage() calls from ThreadImport(), as Qt doesnt like them getting called out of its main thread and because the thread will continue to run after the GUI was loaded This fixes a crash I discovered, while compiling Bitcoin-Qt the first time after Ultraprune was merged to master.
1940	With a change of libs, and specifying NATIVE_WINDOWS as TARGET_OS it should compile libleveldb.a and libmemenv.a just fine, it did for me and Diapolo when testing.
1939	This seems to be recently-introduced bug in ultraprune. can you check whether this fixes the zero-balance issue? You may need to restore from a backup.
1938	
1937	
1936	This reduces copying of data being serialized.
1935	This script downloads the SHA256SUMS.asc file from SourceForge for a given release (version can be specified on the command line), which contains Gavins signature of the hashes of the Bitcoin binaries. It verifies that the signature is valid, downloads the files specified in the signature file, and checks that the hashes of these files match with those signed by Gavin.
1934	
1933	
1932	- "ThreadIRCSeed started" was not displayed, even if the thread ran (although only for a short time as the "do we want this thread?"-checks happen IN ThreadIRCSeed2()) - the patch ensures we always get that message - add a "ThreadIRCSeed trying to connect..." message - add missing "ThreadDumpAddress started" message
1931	This replaces the spinner and connection icon with freer licensed ones. Ive slightly improved on #811: - Inactive bars in the connection icon are now visible. This better matches the current icon and prevents a nondescript "dot" in the status bar for 1 connection. - Remove commit xanatos@de6a850c84934ae5a1aff24e213c9abe7c2b9979 which was erroneously included
1929	Saw this error on 0.7.1rc1 after running bitcoind in screen for approximately 48 hours off an encrypted home directory: ************************ EXCEPTION: N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10filesystem22basic_filesystem_errorINS3_10basic_pathISsNS3_11path_traitsEEEEEEEEE boost::filesystem::space: No such file or directory: "/home/user/.bitcoin" bitcoin in ProcessMessages() Machine info: Linux hostname 3.2.0-26-generic #41-Ubuntu SMP Thu Jun 14 17:49:24 UTC 2012 x86_64 x86_64 x86_64 GNU/Linux I will see if I can recreate this and provide more useful information. User and host info was anonymized.
1927	in the "Signatures - Sign / Verify a Message" Window we have the keyboard shortcut alt+S and alt+V to switch tabs and the same shortcuts to Sign or Verify the message (These two buttons should be changed to alt+m and the shortcuts for the tabs should the same). Tested with English and Swedish translations and client version 0.7.0 on 64-bit windows 7 and 0.7.1rc (compiled latest sources from github) on 64-bit ubuntu 12.4.
1926	Sizeof() returned the size of a pointer instead of the size of the buffer. Fixes issue #1924.
1925	- Bitcoin-Qt: add new GCC compiler hardening options - Bitcoin-Qt: remove unneeded "--param ssp-buffer-size=1" flag
1924	I believe that main.cpp in line 3462 is reading a static buffer out of bounds: 3461 const char* pszDummy = "\0\0"; 3462 CScript scriptDummy(std::vector<unsigned char>(pszDummy, pszDummy + sizeof(pszDummy))); sizeof(pszDummy) happens to be 8 on a 64-bit environment, and I think the std::vector constructor ends up reading 8 bytes starting from pszDummy, even though this character array contains 3 bytes (the two zero bytes plus the terminating NULL). I suppose line 3461 was intended to be this instead: 3461 const char pszDummy[] = "\0\0"; However, sizeof(pszDummy) would return 3 now, which includes the terminating NULL, and I do not know whether it was intended for scriptDummy to include all 3 characters or only the 2 zeros...
1923	- add setStatusTip() in addition to setTooltip() where it makes sense - add only setStatusTip() if GUI element is only used in main- or tray menu - add an event filter on our BitcoinGUI object to prevent garbelled text on the status bar, which happens when we use it for e.g. displaying block-sync state and then a QEvent::StatusTip wants to write own text to it - remove a double translation of "Bitcoin client" This solves #1079.
1922	- Bitcoin-Qt: intregrate current translations from Transifex - Bitcoin-Qt: update english translation master file
1921	Never store the result of c_str()! Luckily, this only affected logging, though it could crash or leak sensitive data to the log in rare cases.
1920	I tried the last official 0.7.1 RC1 on Windows 7 and was browsing through debug.log. One line was drawing my attention: <pre> 10/11/12 20:10:57 Default data directory C:\Users\Diapolo\AppData\Roaming\Bitcoin 10/11/12 20:10:57 Used data directory 10/11/12 20:10:57 </pre> Seems like ``pszDataDir`` (https://github.com/bitcoin/bitcoin/blob/master/src/init.cpp#L483) does NOT contain what it should print there. I currently have no time to investigate, but to me this seems to be a problem with (RC1 does not include #1901, which could be a cause? - As the build is from 2012-10-09 it is not :-D.) Perhaps the call to ``GetDataDir()`` with ``.string().c_str()`` attached causes a problem, because its the first one (caching issue), I dunno.
1919	The close button of the command line options window doesnt seem to work with Bitcoin-Qt 0.7.0 (and with a tarball from github I compiled a few days ago) on Ubuntu Lucid and Precise amd64. It simply has no effect at all. The issue is very easy to reproduce: just click Help > Debug Window > Command line options and youll get the following window: ![Bitcoin command line options window](http://ompldr.org/vZnRvcQ/Bitcoin_command_line_window.gif) Then try to close the button by clicking on the usual "X" button. Only the OK button closes that window. As as side remark, note that currently the "OK" and "Show/Hide Details" buttons do not seem to have i18n support. They are displayed in English with languages translated at 100% on Transifex. It may also be useful to give users the possibility to resize that window so that the listed options can be read more easily.
1918	to query remote node mempool contents. This supercedes pull #1833, which was fat-finger merged, and then resultant damage undone. See #1833 for relevant comments on this pull request.
1917	Before, opening a -datadir that was created with a new version of Berkeley DB would result in an un-caught DB_RUNRECOVERY exception. After these changes, the error is caught and the user is told that there is a problem and is told how to try to recover from it.
1916	This avoids the case where you read the address data, before noticing it is the wrong network.
1915	- I missed that one in my former pull
1914	- this extends the persistent tray icon until shutdown is complete, to ensure users wait before trying to restart the client
1913	I2P apparently needs 256 bits to store a fully routable address. Garlicat requires a centralized lookup service to map the 80-bit addresses to fully routable ones (as far as I understood), so thats not really usable in our situation. To support I2P routing and peer exchange for it, another solution is needed. This will most likely imply a network protocol change, and extension of the addr message. Remove it for now, until we can support it completely.
1911	- also includes the required bitcoinstrings.cpp update
1910	- Wiki says "block chain" is correct ;) - remove some unneeded spaces I found in the source, while fixing the spelling
1909	Fixes #1832
1908	I performed some code archeology to retroactively name and document the JSONRPC error codes. This pull has no code changes. Feel free to suggest other names for the errors. ```C++ // Bitcoin RPC error codes enum RPCErrorCode { // Standard JSON-RPC 2.0 errors RPC_INVALID_REQUEST = -32600, RPC_METHOD_NOT_FOUND = -32601, RPC_INVALID_PARAMS = -32602, RPC_INTERNAL_ERROR = -32603, RPC_PARSE_ERROR = -32700, // General application defined errors RPC_MISC_ERROR = -1, // std::exception thrown in command handling RPC_FORBIDDEN_BY_SAFE_MODE = -2, // Server is in safe mode, and command is not allowed in safe mode RPC_TYPE_ERROR = -3, // Unexpected type was passed as parameter RPC_INVALID_ADDRESS_OR_KEY = -5, // Invalid address or key RPC_OUT_OF_MEMORY = -7, // Ran out of memory during operation RPC_INVALID_PARAMETER = -8, // Invalid, missing or duplicate parameter RPC_DATABASE_ERROR = -20, // Database error RPC_DESERIALIZATION_ERROR = -22, // Error parsing or validating structure in raw format // P2P client errors RPC_CLIENT_NOT_CONNECTED = -9, // Bitcoin is not connected RPC_CLIENT_IN_INITIAL_DOWNLOAD = -10, // Still downloading initial blocks // Wallet errors RPC_WALLET_ERROR = -4, // Unspecified problem with wallet (key not found etc.) RPC_WALLET_INSUFFICIENT_FUNDS = -6, // Not enough funds in wallet or account RPC_WALLET_INVALID_ACCOUNT_NAME = -11, // Invalid account name RPC_WALLET_KEYPOOL_RAN_OUT = -12, // Keypool ran out, call keypoolrefill first RPC_WALLET_UNLOCK_NEEDED = -13, // Enter the wallet passphrase with walletpassphrase first RPC_WALLET_PASSPHRASE_INCORRECT = -14, // The wallet passphrase entered was incorrect RPC_WALLET_WRONG_ENC_STATE = -15, // Command given in wrong wallet encryption state (encrypting an encrypted wallet etc.) RPC_WALLET_ENCRYPTION_FAILED = -16, // Failed to encrypt the wallet RPC_WALLET_ALREADY_UNLOCKED = -17, // Wallet is already unlocked }; ``` This pull reveals some inconsistencies in the error codes thrown, for example, `-3` is sometimes used for "Invalid bitcoin address" sometimes i.s.o `-5`, but as to not change the interface I decided against addressing this. This can be left for a later pull (or never, and just documented as part of the API). Ive also added constants for the HTTP status codes.
1907	Also clarify translation process that the package `gettext` is needed to run string extractor.
1906	As the list of options is getting very long, theres a large chance it doesnt fit on the terminal at once. Sending the output to stdout allows fun stuff such as `bitcoin --help | less`, and more easy piping to files (yes, technically its also possible with stderr, but less convenient). Looking at other tools such as bash, gcc, they all send their help text to stdout.
1905	For the GUI version... As stderr and stdout point to the bit bucket in Windows for windowed applications, users get no error message.
1904	This command is a leftover from send-to-IP transactions, which have been removed a long time ago. Removes the last remaining GetBoolArg("-allowreceivebyip").
1903	Examples: You can set -detachdb, which overrides the Qt setting. When opening the Qt settings dialog it shows the real state of -detachdb. But you can set -lang, which (when opening the Qt settings) does NOT show real state but instead the stored Qt setting. I guess we should specify what is the intended behaviour without the need for special casing. Should perhaps command-line options permanently SET the Qt settings? Same for the proxy stuff Im working on, I cant yet figure out what is the best way ... I hope you can contribute :). What do other devs think?
1901	Dont use hand-rolled string manipulation routine with a fixed buffer in the bitcoin core, instead make use of c++ strings and boost high-level string algorithms.
1900	- is more consistent and saves quite some lines of code
1899	- dont rely on the QSettings for cases ProxyUse and ProxySocksVersion and query the real values via the GetProxy() call - add a missing "succesful =" for case ProxyUse in ::setData() This is based on #1859!
1897	Currently if one wants to get info about what is happening in bitcoind, one needs to poll various parameters - checking the balance per account, checking for new transactions and so forth. I propose adding some JSON push notifications coming from bitcoind to some predefined address. This approach would let ones application communicating with bitcoind to know about all the latest events from the program without having to poll it often. Some sample notifications could include: - New Tx appearing in the wallet with 0, 6 and other number of confirmations - New block appearing in the blockchain - A block being replaced in the blockchain - Balance changing in some account with 0, 6... confirmations
1896	Remainder to create a bitcoinstrings.cpp update (which I cant do) and push a new english master file to Transifex. There should be no massive changes, but I would love to keep up with the good translation quality from 0.7 :). Can you do the bitcoinstrings.cpp patch and perhaps create the new master file?
1895	Corrupt wallets used to cause a DB_RUNRECOVERY uncaught exception and a crash. This commit does three things: 1) Runs a BDB verify early in the startup process, and if there is a low-level problem with the database: + Moves the bad wallet.dat to wallet.timestamp.bak + Runs a salvage operation to get key/value pairs, and writes them to a new wallet.dat + Continues with startup. 2) Much more tolerant of serialization errors. All errors in deserialization are tolerated EXCEPT for errors related to reading keypairs or master key records-- those are reported and then shut down, so the user can get help (or recover from a backup). 3) Adds a new -salvagewallet option, which: + Moves the wallet.dat to wallet.timestamp.bak + extracts ONLY keypairs and master keys into a new wallet.dat + soft-sets -rescan, to recreate transaction history This was tested by randomly corrupting testnet wallets using a little python script I wrote (https://gist.github.com/3812689)
1893	Simply change the RPC response to indicate that a new backup is needed after encrypting the wallet. The RPC counterpart to pull #1890.
1892	Fixes all format warnings and re-enables the warning messages. replaces #1885
1891	- remove the "%" character from format characters for (s)size_t and ptrdiff_t and harmonize them with the ones for int64 and uint64
1890	
1889	This patch lets a user have multiple wallets within his data directory by selecting a wallet using `-wallet=filename`. It also allows accessing wallets outside the data directory. In that case, the database environment is still stored in the data directory so both wallet file and data directory must be kept in sync (e.g. when storing the wallet within an encrypted container). Ive been using this patch for a few months now without any troubles and its proved to be pretty useful.
1888	As it says on the tin
1887	Im currently importing the blockchain .dat files from using bitcoind -loadblock=/var/lib/bitcoin/blockchain/blk0001.dat -loadblock=/var/lib/bitcoin/blockchain/blk0002.dat -detachdb This has been running for two days (its a very slow computer), and I noticed that since block 193002, bitcoind 0.7.0.3 is flushing wallet.dat after almost every imported block (before that, theres only one flush after block 225). Im not sure whats going on here. Its a fresh ~/.bitcoin profile. I think block 193002 comes around the time blk0001.dat filled up and it switched to blk0002.dat, maybe that triggered something in the bitcoin-wallet thread? (Theres a comment "// Dont do this if any databases are in use" in walletdb.cpp, but Im not familiar enough with the code.)
1886	- fix for #1877 - fix was reported to work via
1885	#1807 revealed some things that need fixing and I tried to do this. This pull currently does not re-enaable the -Wformat warnings, as I was not sure, if I perhaps missed some warnings.
1884	Ive seen two reports now (maybe from the same user) on IRC of someone who probably had a wallet backup, encrypted it, and never did 100 transactions - assuming their wallet was still backed up. I think we should show a clear notice in the GUI that you need a new backup after encryption.
1883	We currently have better measures to deal with stack overflow problems (-fstack-protector, ASLR, non-executable stack, ...) than this hack. Furthermore, GCC optimizes the loop away through tail call optimization...
1882	Please add a setting that basically lets an user say the following: I want to support bitcoin-network with X BTC per month. The setting would then be used as a base for deciding how much transaction fee to include in each transaction. Perhaps divide the amount by the number transactions the user made during last 30 days and use that as the fee. I expect the existence of this setting would quite dramatically increase the amounts of transaction fees included in transactions.
1881	There are two equal ifs, one inside another. If the first one is true, then the second one is true. As the code was before, toHTML added empty elements to mapValue to check for their existance. Now first it check for their existance and then for their non-emptiness. This is the second try... The first time git ate my homework :-)
1880	Originally written for the ultraprune+leveldb demo at the London 2012 conference.
1879	As we dont use the file metadata anyway.
1878	There are two equal ifs, one inside another. If the first one is true, then the second one is true. Ill add that I dont think its a good idea to use the [] operator for checking the existance of items in a map in the context of a method that should only "show" the wtx (the map::[] operator adds a new item if it isnt found). I think the method should work with a const CWalletTx &wtx.
1877	See for multiple reports of URI handling not working.
1876	Makes diagnostics possible, reverse-header-sync a lot easier, and other uses. Will BIP-ify if people like this. NOTE: The CBestChain class was copied from COutPoint, if anyone was curious about the origin of that code.
1875	Trying to compile with clang under Mac OS X 10.8 (XCode 4.5) results in the error: `assigning to objc_object * from incompatible type DockIconClickEventHandler *` clang seems to be much more picky than gcc about the type a variable it assigns an Objective-C instance to, and a simple `class objc_object` doesnt cut it.
1872	This avoids a potential crash when trying to read the scrippubkeys on transactions where the first input IsMine but some of the rest are not when running listaddressgroupings.
1871	Was searching through the code for places that read from the wallet after startup (since most wallet items are read at startup in LoadWallet)
1870	Hopefully this is done in a database-independent manner, with minimal interference to the upcoming ultraprune.
1869	This patch removes the disabled opcodes and the one dependent utility function that is orphaned. Interestingly there appears to be a slight difference in behavior between explicitly disabled opcodes and reserved/unused opcodes. Previously VerifyScript() would fail any script containing a disabled opcode as soon as it is encountered, whereas reserved/unused opcodes would fail when they are executed. This is a subtle difference, but detectable. Take the following script from the invalid-script unit tests: 0 IF INVERT ELSE 1 ENDIF This previously failed even though the INVERT is never executed. But now that the disabled opcodes are removed entirely, INVERT becomes 0x83 and is treated like any other unused opcode, meaning that script now passes validation. To fail, the IF-branch of the conditional would have to be taken: 1 IF 0x83 ELSE 1 ENDIF The last commit of this pull request simply switches the branch taken in this and other unit tests such that the opcode is executed and fails. However the construction of the unit test clearly indicates that failure even if the opcode is not executed was the desired result. A decision still needs to be made as to whether this behavior should be extended to all reserved/unused opcodes.
1868	Due to a bug in the implementation of MakeSameSize(), using OP_AND, OP_OR, or OP_XOR with signed values of unequal size will result in the sign-bit becoming part of the smaller integer, with nonsensical results. This patch documents the unexpected behavior and provides the basis of a solution should decision be made to fix the bug in the future.
1867	so its easier to see what address the unspent outputs belong to
1866	* please delete .. i created a pull request
1865	The first line of RPC help messages follow the syntax: method <requiredparam> <requiredparam> [optionalparam] [optionalparam] That doesnt work nicely now that we have parameters that are JSON objects or arrays. I propose that the syntax be changed to: ```method requiredparam requiredparam ( optionalparam optionalparam )``` ... that string-type parameters by reported in double-quotes, number-type parameters left as-is, Arrays be reported as [foo,...] and Objects as {"foo":bar} ... and that default values be specified in the description, not using the (confusing) foo=3 syntax. Examples of help using old and new schemes: ``` verifymessage <bitcoinaddress> <signature> <message> verifymessage "bitcoinaddress" "signature" "message" getreceivedbyaddress <bitcoinaddress> [minconf=1] getreceivedbyaddress "bitcoinaddress" ( minconf ) sendfrom <fromaccount> <tobitcoinaddress> <amount> [minconf=1] [comment] [comment-to] sendfrom "fromaccount" "tobitcoinaddress" amount ( minconf "comment" "comment-to" ) listunspent [minconf=1] [maxconf=9999999] ["address",...] listunspent ( minconf maxconf ["address",...] ) signrawtransaction <hex string> [{"txid":txid,"vout":n,"scriptPubKey":hex},...] [<privatekey1>,...] [sighashtype="ALL"] signrawtransaction "hex string" ( [{"txid":txid,"vout":n,"scriptPubKey":hex},...] ["privatekey1",...] "sighashtype" ) ```
1864	AFAIK the BitcoinPullTester was using Qt 4.8.2 for weeks now without any problems. As there were many fixes since Qt 4.7.4 this should be a valuable change and perhaps fix some of the GUI problems we see on Windows. Im not sure how or where I can change the used Qt version for our Linux / Mac builds though and any input is welcome :)!
1863	This creates a new serialized structure CKeyMetadata, and stores it alongside each newly created key. This data is used to calculate a whole-wallet birthday. Wallet rescan is optimized using this information, to skip reading and scanning blocks earlier than the wallet birthday.
1862	Fix: when testnet=1 specified, change default RPC port to 18332
1861	This is a memory-only filter, which must be applied at bitcoind startup. It might be nice to store this in the wallet, but to judge interest and review the interface, this is a useful first step.
1860	Not sure whether we want CAddress() to continue defaulting to non-zero, so the behavior of the current code was retained. Warrants a BIP, presumably.
1859	- fix #1560 by properly locking proxy related data-structures - introduce GetProxyPair() and GetNameProxyPair() to be able to use a thread-safe local copy from proxyInfo and nameproxyInfo - rename GetNameProxy() into HaveNameProxy() to be more clear
1857	
1856	This patch currently excludes our Windows executable! - change to use -fstack-protector-all - the minimum size of buffers (i.e. arrays) that will receive stack smashing protection was changed to 1 byte (GCC default: 8) - warn about functions that will not be protected against stack smashing by adding -Wstack-protector See #1674 for full discussion on the Windows issue! This should be safe to merge, but we can wait until the pull tester did its job!
1855	On non-us keyboards you can obtain lower case characters even pressing the SHIFT. For example here in Italy, where US persons have the [ key, if you press the shift instead of obtaining the { you obtain the , the same for the ; key that shifted instead of giving the : gives , both lower case letters, so the > if ((fShift && psz->isLower()) || (!fShift && psz->isUpper())) { test (around line 229 of askpassphrasedialog.cpp) gives the "wrong" result. (the problem of the test is that it thinks that without CAPS LOCK a shift+something should be uppercase if its a letter) A better idea would be to do something like: > if ((fShift && *psz >= a && *psz <= z) || (!fShift && *psz >= A && *psz <= Z)) { this will probably break with the turkish i-without-dot (http://en.wikipedia.org/wiki/Dotted_and_dotless_I), but at least the 26 standard letters will be catched
1854	- a shortcut on "receive coins" was used twice
1853	Update #include <QtGui/QWidget> to #include <QWidget>
1852	Now that Qt resides at qt-project.org we should update old qt links to point there.
1851	Use OpenSSL 1.0.1c Bump deps to 0.0.5 Small docs corrections
1850	Bugfix: Avoid trying to parse outputs that arent relevant to CWalletTx::GetAmounts * This fixes a warning when an output we arent concerned with cant be parsed. Bugfix: Supress "address" key in transaction details, when the destination isnt recognized * Previously, it would pass corrupt/random through base58. Fixes #779 and #1848.
1849	The other tooltips in AddresBookPage dont have a "." at the ending of the tooltip text. but this has. String ID: Delete the currently selected address from the list. Only sending addresses can be deleted. Description: AddressBookPage Maybe the text *"Only sending addresses can be deleted."* is irrelevant in this page as there are no sending addresses here.
1847	There was a report of a mysterious crash on OSX 10.7 that may or may not be caused by this. In any case, Bitcoin-Qt is multi-threaded, so compiling with -pthread is the right thing to do.
1846	Would it be possible to somehow add the version information that bitcoin-qt.exe got with 0.7 could be added to bitcoind.exe, too? Im not sure if there is a windres-pass for bitcoind during compilation or how it could be added, but perhaps a dev can comment.
1845	Fix for #1843
1844	- replace Q_WS_MAC (not supported anymore in Qt5) with Q_OS_MAC (supported in Qt4/5) There is for sure more work to be done, but this easy patch doesnt even hurt our current code! For more details see:
1843	On the send coins tab, I see two underlined letters s and two underlined letters a: _Settings and _Send and _Add Recipient and Clear _All Each underlined letter is meant to be unique I think. ![...](http://www.leethacker.com/images/52ql39371q31wua10mg.png)
1842	Pardons if this isnt the place for this. Please direct me to the correct place if Im in the wrong one. Crash report here: Client crashed a few times after send. I noticed that it frotzed at least one transaction id such that the id reported in the client and the id reported in the block chain were different. thanks, boz
1841	45771671704f0ed09aec48777c12f0af388d1beb (#1077) moved build.h to a build directory, but if src/build.h exists from previous builds, it is preferred over the new file.
1840	I propose left side justification for amount column, as received/sent amounts are not well displayed. Now we have right side justification, e.g. |-------0.10| |----0.0001| |---0.00021| |-0.000008| My proposals intent is to display, e.g.: |----0.10---------| |----0.0001-----| |----0.00021---| |----0.000008-|
1839	Heres a section of my address book: ![before](http://i.imgur.com/ryVen.png) I edit the label on the "lessthan 1" entry: ![edit](http://i.imgur.com/b3g9C.png) And then it shows up twice: ![after](http://i.imgur.com/pc3Pr.png) Restarting bitcoin-qt fixes it so it only shows up once again. I tried reproducing this with a new wallet with an empty address book, but couldnt. I built against the v0.7.0 label in git. The logfile claims Im running: Bitcoin version v0.7.0rc3-dirty-beta (2012-09-12 14:07:22 -0400) I expect rc3 is the same as the final release.
1838	Running the latest client 0.7.0 on OSX 10.7.4, opened the client roughly 1000 blocks behind the chain, and started syncing. However once the client had caught up to the chain, the Estimated total blocks was still less than the current total blocks. I realise that when you open the client the estimated total blocks is just an estimate, however it should never be displayed as less than the current number of downloaded blocks, otherwise it might cause some concern for users.
1837	I noticed that 0.7.0 for OSX is compiled with 1.0.1c, so I thought it might be an idea to update the makefiles, readme etc. Im assuming that theres no reason that unix and windows builds cannot use 1.0.1b.
1836	Adds a stopdetach <detach> RPC command. <detach> defaults to true. Works just like stop, but overrides the commandline/config file -detachdb option. Useful for upgrading, for example. Lets you use fast stops usually, but force a detach when needed. Also, allows you to do a fast stop in a system normally configured to detach.
1835	If we appear stuck and a new peer has blocks for us, ask for them. NOTE: This triggers during the "version" message, and so, does not help cases where there is no connection turn-over. However, this seems a very simple way to address stuck network sync under reverse-header-sync or something more fancy appears. Builds on top of bug fix submitted in #1834.
1834	If the remote node has a shorter chain, do not waste our special getblocks request on them.
1833	to query remote node mempool contents. NOTE: It is expected behavior that this will pump up the orphan pool initially, before dependencies resolve themselves.
1832	CDBEnv::Shutdown calls OutputDebugStringF if there is an error closing the database. The database environment is a global variable. OutputDebugStringF contains a static boost::mutex. C++ does not guarantee an order for the destruction of static/global objects, and I am getting a crash I assume because at shutdown (Im testing handling of corrupt wallet files): the static mutexDebugLog is destroyed THEN the bitdb CDBEnv is destroyed, calling printf (OutputDebugStringF), which then crashes calling scoped_lock(mutexDebugLog)
1831	Bug #1 : spaces inside single quotes are not preserved for method arguments. E.g. run listunspent, then try to copy and paste one of the unspent inputs into a createrawtransaction [...unspent...] {"...address...":1} You have to delete all of the spaces in the listunspent output for it to work. Bug #2 : you have to put JSON arrays/objects inside single quotes. It would be really nice if the QT debug window was smart enough to not require that. Can the json spirit code read from a stream?
1830	- remove some unneeded stuff in sendcoinsentry.ui - harmonize some "Error:"-messages
1829	
1828	The base58 codec uses full length bignum operations for each digit and `strchr(pszBase58, *p)` to find the value of each base58 digit. Ive cleaned up the implementation by: * using bignum operations with word-sized operands * using a pre-computed decoding table * adding comments * getting rid of useless copy operations As with my other recent pull-requests I think Ive made the source easier to understand and the speedup is just a side benefit. However, I could not restrain myself and added a last commit which is a much faster version, converting 5 or 10 digits at a time (depending on `sizeof(BN_ULONG)`). Esulting in an overall speedup of over 10 times. If your prime interest is in simple code, please pull all but the last commit. If you dont mind a bit longer, but much faster code, pull the whole branch.
1826	After the update to 0.6.3 my GUI suddenly became translated and theres no way to change it back to English in options.
1825	`CBigNum::SetCompact()` and `CBigNum::GetCompact()` -------------------- Because my previous pull-request which changed the semantics of `SetCompact()` and `GetCompact()` in an effectively backwards-compatible way was met with understandable skepticism Ive prepared this branch, which provides a bit for bit compatible re-implementation and unit tests. Please, pull at least the first commit of either of the branches. They only contain unit-tests making sure the semantic of `GetCompact()` and `SetCompact()` is not changed unintentionally. If you agree that the semantics should not be changed, you should still pull the second commit of this branch if you agree that my re-implementation is easier to understand, more efficient, or both.
1824	I was having my client (0.6.3) off line for a week or so. Just before i was starting my client i was getting a transfer to one of my addresses. When i was starting the client it started to download blocks. Meantime the client got the transfer to my address and the transfer was getting confirms from blocks that was days older when the transfer itself. It ended up in that the transfer got around 100 confirms when the transfer just was a up to a half an hour old.
1823	The problem =========== `SetCompact` as currently implemented interprets the compact number `0x01810000` as `-1` instead of `0x81`, because it is implemented using `BN_mpi2bn`, which interprets the highest bit in the first byte of its input as sign and this is not compensated for. Currently this is not a problem as none of the bitcoin-implementations Ive looked at generate compact numbers with the `0x00800000` bit set. Many contain a matching bug in their compact encoding routines. Satoshi: * `CBigNum.GetCompact(0x81)` => `0x02008100` * `CBigNum.SetCompact(0x01810000)` => `-1` Defensive encoding. Decoding results in negative number with highest bit stripped. bitcoinj: * No compact encoding. * `Utils.decodeCompactBits(0x01810000)` => `-1` Decoding will lead to `Block::getDifficultyTargetAsInteger()` throwing a `VerificationException`. bitcoinjs: * `encodeDiffBits(0x80)` => `0x02008000` * `decodeDiffBits(0x01810000)` => `0x81` (OK) Defensive encoding and correct decoding libbitcoin: * `big_number::compact(0x80)` => `0x02008000` * `big_number::set_compact(0x01810000)` => `-1` Defensive encoding. Decoding results in block_work() returning 0 and validate_block::check_proof_of_work returning false. This branch =========== The first commit adds several test cases for `GetCompact()` and `SetCompact()`, including one showcasing the erroneous decoding. The second commit reimplements `GetCompact()` and `SetCompact()` using shifts instead of going through the MPI-representation. `GetCompact()` now is careful not to generate compact numbers with the `0x00800000` bit set (`GetCompact(0xff)` yields `0x0200ff00` instead of `0x01ff0000`). It results in identical compact numbers for positive inputs as the old code. `SetCompact` now interprets the compact number `0x01810000` as `0x81` instead of `-1`.
1822	Instead, fall back to IPv4 listening.
1821	This is the brute-force fix for issue #1819, removing the new feature that is causing problems for some people.
1820	```C++ bool IsFinal(int nBlockHeight=0, int64 nBlockTime=0) const { // Time based nLockTime implemented in 0.1.6 if (nLockTime == 0) return true; if (nBlockHeight == 0) nBlockHeight = nBestHeight; if (nBlockTime == 0) nBlockTime = GetAdjustedTime(); if ((int64)nLockTime < ((int64)nLockTime < LOCKTIME_THRESHOLD ? (int64)nBlockHeight : nBlockTime)) return true; BOOST_FOREACH(const CTxIn& txin, vin) if (!txin.IsFinal()) return false; return true; } ``` IsFinal() can never return false. The final return true should be return false and the input check should come before the time check (or left where it is and had its sense reversed). Would be a trivial fix except its a soft-forking change. ... and will probably require bumping the transaction version number as well as updating the block enforcing rules. Its well known that _replacement_ didnt work, but nLockTime not being enforced in the chain was a surprise to me
1819	Report from the forums: 09/09/12 23:28:43 ThreadMessageHandler started 09/09/12 23:28:43 ThreadOpenConnections started 09/09/12 23:28:43 trying connection xxxx lastseen=0.0hrs 09/09/12 23:28:43 ThreadOpenAddedConnections started 09/09/12 23:28:43 ThreadOpenAddedConnections exited 09/09/12 23:28:43 ThreadSocketHandler started 09/09/12 23:28:43 ThreadIRCSeed exited 09/09/12 23:28:43 Error: An error occurred while setting up the RPC port 8332 for listening: Address family not supported by protocol 09/09/12 23:28:43 ThreadRPCServer exited 09/09/12 23:28:43 Flush(false) 09/09/12 23:28:43 blkindex.dat refcount=0 09/09/12 23:28:43 blkindex.dat checkpoint 09/09/12 23:28:43 connected xxxx 09/09/12 23:28:43 send version message: version 60002, blocks=183152, us=0.0.0.0:0, them=xxxx:8333, peer=xxxx:8333 09/09/12 23:28:43 ThreadSocketHandler exited 09/09/12 23:28:43 ThreadMessageHandler exited to make it work, one must comment out or remove the following in bitcoinrpc.cpp: acceptor->open(endpoint.protocol()); acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true)); // Try making the socket dual IPv6/IPv4 (if listening on the "any" address) boost::system::error_code v6_only_error; acceptor->set_option(boost::asio::ip::v6_only(loopback), v6_only_error); acceptor->bind(endpoint); acceptor->listen(socket_base::max_connections); RPCListen(acceptor, context, fUseSSL); // Cancel outstanding listen-requests for this acceptor when shutting down StopRequests.connect(signals2::slot<void ()>( static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get()) .track(acceptor)); // If dual IPv6/IPv4 failed (or were opening loopback interfaces only), open IPv4 separately if (loopback || v6_only_error) then it does: 09/10/12 00:00:22 ThreadMessageHandler started 09/10/12 00:00:22 ThreadOpenConnections started 09/10/12 00:00:22 trying connection xxxx lastseen=0.0hrs 09/10/12 00:00:22 ThreadOpenAddedConnections started 09/10/12 00:00:22 ThreadOpenAddedConnections exited 09/10/12 00:00:22 ThreadSocketHandler started 09/10/12 00:00:22 ThreadIRCSeed exited 09/10/12 00:00:22 connected xxxx 09/10/12 00:00:22 send version message: version 60002, blocks=183152, us=0.0.0.0:0, them=xxxx:8333, peer=xxxx:8333 09/10/12 00:00:22 Added time data, samples 2, offset -1 (+0 minutes) 09/10/12 00:00:22 Flushed 0 addresses to peers.dat 57ms 09/10/12 00:00:22 receive version message: version 60002, blocks=198073, us=xxxx:44586, them=xxxx:8333, peer=xxxx:8333 09/10/12 00:00:23 received block 0000000000000045a7f8 from xxxx:8333 09/10/12 00:00:23 SetBestChain: new best=0000000000000045a7f8 height=183153 work=345239274296880467532 date=06/05/12 18:48:15 09/10/12 00:00:23 ProcessBlock: ACCEPTED and so on
1818	If signrawtransaction is signing a P2SH scriptPubKey, it needs to know the Script that hashes to the P2SH address. That isnt a problem for transactions that are in the wallet, but if youre giving the private keys to signrawtransaction then it doesnt look in the wallet, and there needed to be some way to provide the redemption Script. This pull request makes three functional changes: + Adds "redeemScript" to listunspent output, when listing a p2sh/multisig output + Adds "redeemScript" to signrawtransactions second argument (list of previous transaction outputs) + Adds a new RPC command, "createmultisig" that is just like "addmultisigaddress" but instead of adding the multisig address/redeemScript to the wallet, returns them in a JSON object. It also includes new unit tests for the raw transaction API argument checking code (and refactors some argument checking to remove some code duplication).
1817	Please see attached trackback. The application crashes soon after startup, even if no actions are taken. Process: Bitcoin-Qt [20848] Path: /Users/miket/Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt Identifier: com.yourcompany.Bitcoin-Qt Version: ??? (???) Code Type: X86 (Native) Parent Process: launchd [298] Date/Time: 2012-09-09 22:08:01.816 -0700 OS Version: Mac OS X 10.6.8 (10K549) Report Version: 6 Interval Since Last Report: 29001040 sec Crashes Since Last Report: 136 Per-App Interval Since Last Report: 1153 sec Per-App Crashes Since Last Report: 3 Anonymous UUID: 0EF5D1D0-7392-4AEF-93CD-63CDDE460876 Exception Type: EXC_CRASH (SIGABRT) Exception Codes: 0x0000000000000000, 0x0000000000000000 Crashed Thread: 6 Application Specific Information: abort() called Thread 0: Dispatch queue: com.apple.main-thread 0 libSystem.B.dylib 0x95bdfafa mach_msg_trap + 10 1 libSystem.B.dylib 0x95be0267 mach_msg + 68 2 com.apple.CoreFoundation 0x909a82df __CFRunLoopRun + 2079 3 com.apple.CoreFoundation 0x909a73c4 CFRunLoopRunSpecific + 452 4 com.apple.CoreFoundation 0x909a71f1 CFRunLoopRunInMode + 97 5 com.apple.HIToolbox 0x91c9be04 RunCurrentEventLoopInMode + 392 6 com.apple.HIToolbox 0x91c9bbb9 ReceiveNextEventCommon + 354 7 com.apple.HIToolbox 0x91c9ba3e BlockUntilNextEventMatchingListInMode + 81 8 com.apple.AppKit 0x98775595 _DPSNextEvent + 847 9 com.apple.AppKit 0x98774dd6 -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 156 10 com.apple.AppKit 0x987371f3 -[NSApplication run] + 821 11 QtGui 0x00dd36a1 QDesktopWidget::resizeEvent(QResizeEvent*) + 12513 12 QtCore 0x01a01d81 QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) + 65 13 QtCore 0x01a020ca QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) + 170 14 QtCore 0x01a03746 QCoreApplication::exec() + 182 15 com.yourcompany.Bitcoin-Qt 0x00015ae6 main + 3094 16 com.yourcompany.Bitcoin-Qt 0x00013979 start + 53 Thread 1: Dispatch queue: com.apple.libdispatch-manager 0 libSystem.B.dylib 0x95c06382 kevent + 10 1 libSystem.B.dylib 0x95c06a9c _dispatch_mgr_invoke + 215 2 libSystem.B.dylib 0x95c05f59 _dispatch_queue_invoke + 163 3 libSystem.B.dylib 0x95c05cfe _dispatch_worker_thread2 + 240 4 libSystem.B.dylib 0x95c05781 _pthread_wqthread + 390 5 libSystem.B.dylib 0x95c055c6 start_wqthread + 30 Thread 2: 0 libSystem.B.dylib 0x95c0daa2 __semwait_signal + 10 1 libSystem.B.dylib 0x95c399c5 nanosleep$UNIX2003 + 188 2 libboost_thread-mt.dylib 0x00d72c86 boost::this_thread::sleep(boost::posix_time::ptime const&) + 342 3 com.yourcompany.Bitcoin-Qt 0x000eaa4a ThreadFlushWalletDB(void*) + 330 4 libSystem.B.dylib 0x95c0d259 _pthread_start + 345 5 libSystem.B.dylib 0x95c0d0de thread_start + 34 Thread 3: 0 libSystem.B.dylib 0x95c0daa2 __semwait_signal + 10 1 libSystem.B.dylib 0x95c399c5 nanosleep$UNIX2003 + 188 2 libboost_thread-mt.dylib 0x00d72c86 boost::this_thread::sleep(boost::posix_time::ptime const&) + 342 3 com.yourcompany.Bitcoin-Qt 0x000be736 Sleep(long long) + 326 4 com.yourcompany.Bitcoin-Qt 0x000c0174 ThreadMapPort2(void*) + 308 5 com.yourcompany.Bitcoin-Qt 0x000c073e ThreadMapPort(void*) + 78 6 libSystem.B.dylib 0x95c0d259 _pthread_start + 345 7 libSystem.B.dylib 0x95c0d0de thread_start + 34 Thread 4: 0 libSystem.B.dylib 0x95c0daa2 __semwait_signal + 10 1 libSystem.B.dylib 0x95c399c5 nanosleep$UNIX2003 + 188 2 libboost_thread-mt.dylib 0x00d72c86 boost::this_thread::sleep(boost::posix_time::ptime const&) + 342 3 com.yourcompany.Bitcoin-Qt 0x000be736 Sleep(long long) + 326 4 com.yourcompany.Bitcoin-Qt 0x000c7b42 ThreadSocketHandler2(void*) + 5954 5 com.yourcompany.Bitcoin-Qt 0x000c989b ThreadSocketHandler(void*) + 75 6 libSystem.B.dylib 0x95c0d259 _pthread_start + 345 7 libSystem.B.dylib 0x95c0d0de thread_start + 34 Thread 5: 0 libSystem.B.dylib 0x95c0daa2 __semwait_signal + 10 1 libSystem.B.dylib 0x95c399c5 nanosleep$UNIX2003 + 188 2 libboost_thread-mt.dylib 0x00d72c86 boost::this_thread::sleep(boost::posix_time::ptime const&) + 342 3 com.yourcompany.Bitcoin-Qt 0x000be736 Sleep(long long) + 326 4 com.yourcompany.Bitcoin-Qt 0x000cb824 ThreadOpenConnections2(void*) + 1236 5 com.yourcompany.Bitcoin-Qt 0x000cc7de ThreadOpenConnections(void*) + 78 6 libSystem.B.dylib 0x95c0d259 _pthread_start + 345 7 libSystem.B.dylib 0x95c0d0de thread_start + 34 Thread 6 Crashed: 0 libSystem.B.dylib 0x95c4d0ee __semwait_signal_nocancel + 10 1 libSystem.B.dylib 0x95c4cfd2 nanosleep$NOCANCEL$UNIX2003 + 166 2 libSystem.B.dylib 0x95cc7fb2 usleep$NOCANCEL$UNIX2003 + 61 3 libSystem.B.dylib 0x95ce96f0 abort + 105 4 libstdc++.6.dylib 0x9090ffda __gnu_cxx::__verbose_terminate_handler() + 433 5 libstdc++.6.dylib 0x9090e17a __cxxabiv1::__terminate(void (*)()) + 10 6 libstdc++.6.dylib 0x9090d51d __cxa_call_terminate + 53 7 libstdc++.6.dylib 0x9090e09d __gxx_personality_v0 + 911 8 libSystem.B.dylib 0x95c4f13d unwind_phase2 + 205 9 libSystem.B.dylib 0x95c65b29 _Unwind_Resume + 73 10 com.yourcompany.Bitcoin-Qt 0x0008de7f CDB::~CDB() + 143 11 com.yourcompany.Bitcoin-Qt 0x00079116 CBlock::AddToBlockIndex(unsigned int, unsigned int) + 3206 12 com.yourcompany.Bitcoin-Qt 0x0007b96a CBlock::AcceptBlock() + 1082 13 com.yourcompany.Bitcoin-Qt 0x0007c6f2 ProcessBlock(CNode*, CBlock*) + 2242 14 com.yourcompany.Bitcoin-Qt 0x000840bb ProcessMessage(CNode*, std::string, CDataStream&) + 19643 15 com.yourcompany.Bitcoin-Qt 0x00086bf5 ProcessMessages(CNode*) + 1557 16 com.yourcompany.Bitcoin-Qt 0x000c3be8 ThreadMessageHandler2(void*) + 664 17 com.yourcompany.Bitcoin-Qt 0x000c440e ThreadMessageHandler(void*) + 78 18 libSystem.B.dylib 0x95c0d259 _pthread_start + 345 19 libSystem.B.dylib 0x95c0d0de thread_start + 34 Thread 7: 0 libSystem.B.dylib 0x95c0daa2 __semwait_signal + 10 1 libSystem.B.dylib 0x95c399c5 nanosleep$UNIX2003 + 188 2 libboost_thread-mt.dylib 0x00d72c86 boost::this_thread::sleep(boost::posix_time::ptime const&) + 342 3 com.yourcompany.Bitcoin-Qt 0x000be736 Sleep(long long) + 326 4 com.yourcompany.Bitcoin-Qt 0x000c32fc ThreadDumpAddress2(void*) + 76 5 com.yourcompany.Bitcoin-Qt 0x000c3355 ThreadDumpAddress(void*) + 69 6 libSystem.B.dylib 0x95c0d259 _pthread_start + 345 7 libSystem.B.dylib 0x95c0d0de thread_start + 34 Thread 6 crashed with X86 Thread State (32-bit): eax: 0x0000003c ebx: 0x95c4cf39 ecx: 0xb059bbac edx: 0x95c4d0ee edi: 0xa0668b30 esi: 0xb059bc08 ebp: 0xb059bbe8 esp: 0xb059bbac ss: 0x0000001f efl: 0x00000247 eip: 0x95c4d0ee cs: 0x00000007 ds: 0x0000001f es: 0x0000001f fs: 0x0000001f gs: 0x00000037 cr2: 0x1da6d000 Binary Images: 0x1000 - 0x4a0ffb +com.yourcompany.Bitcoin-Qt ??? (???) <B48D5EBD-7D71-FB0D-9E62-7EBEBA307414> /Users/miket/Applications/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt 0x925000 - 0x92afe7 +libqrencode.3.dylib 5.1.0 (compatibility 5.0.0) <C65E635B-0FAE-4467-17EF-25D07E50256C> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libqrencode.3.dylib 0x92e000 - 0x935ff7 +libminiupnpc.8.dylib ??? (???) <F7531662-3FF5-7991-DD71-651C5FE99160> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libminiupnpc.8.dylib 0x939000 - 0x985fff +libssl.1.0.0.dylib ??? (???) <696A9FDB-5BC0-BBF2-DB0E-404CE713ACC0> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libssl.1.0.0.dylib 0x99f000 - 0xad7fef +libcrypto.1.0.0.dylib ??? (???) <D89FD820-6FC0-5415-1C09-AFF26D471D4F> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libcrypto.1.0.0.dylib 0xb40000 - 0xc99fff +libdb_cxx-4.8.dylib ??? (???) <10AEE4EE-ECA0-2A61-785E-5E7E5CA8D76B> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libdb_cxx-4.8.dylib 0xcc3000 - 0xcc6ff3 +libboost_system-mt.dylib ??? (???) <4E137306-B7A4-B2CA-9E65-F603FC1D2E8C> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_system-mt.dylib 0xcca000 - 0xce0ff3 +libboost_filesystem-mt.dylib ??? (???) <7F8D774A-8189-84C0-BB54-6035E56E6B94> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_filesystem-mt.dylib 0xcf1000 - 0xd2bffb +libboost_program_options-mt.dylib ??? (???) <EC6908BD-FC6A-6D63-6BE6-7C13D1AFE216> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_program_options-mt.dylib 0xd6f000 - 0xd7dff7 +libboost_thread-mt.dylib ??? (???) <920EA1FB-DA94-F89C-945E-631F06826A36> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libboost_thread-mt.dylib 0xd96000 - 0x16f3feb +QtGui 4.7.4 (compatibility 4.7.0) <68102C34-1146-1D7C-0B13-4E6A497C3142> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/QtGui.framework/Versions/4/QtGui 0x18be000 - 0x1b20ff3 +QtCore 4.7.4 (compatibility 4.7.0) <BC0877BB-C723-F931-DCBD-E7B4BC67E36F> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/QtCore.framework/Versions/4/QtCore 0x1b8d000 - 0x1b9efe7 +libz.1.dylib 1.2.7 (compatibility 1.0.0) <C88CB14E-BCBA-7195-C8CF-E22826597001> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libz.1.dylib 0x1ba2000 - 0x1bc0fe7 +libpng14.14.dylib 26.0.0 (compatibility 26.0.0) <E043F8BD-9251-E675-BFDE-24AA3DF8DCB9> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libpng14.14.dylib 0x1f80000 - 0x1f84ff3 +libqgif.dylib ??? (???) <FFFF510F-048B-F790-C23B-211993DBD292> /Users/miket/Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqgif.dylib 0x1f89000 - 0x1f8dfff +libqico.dylib ??? (???) <F6E1046B-6553-3329-8A96-0E760A932A88> /Users/miket/Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqico.dylib 0x1f92000 - 0x1f96fff +libqjpeg.dylib ??? (???) <BA63A499-FDB0-2CF0-1D23-5293A93698FC> /Users/miket/Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqjpeg.dylib 0x1f9c000 - 0x1fccfe7 +libjpeg.8.dylib 13.0.0 (compatibility 13.0.0) <31059D6A-369B-908F-85E9-A558F7A7E819> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libjpeg.8.dylib 0x1ff8000 - 0x1ffbff7 +libqmng.dylib ??? (???) <D63664F2-5F0D-FB4A-85E6-30B44904F013> /Users/miket/Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqmng.dylib 0x37f2000 - 0x37f6ffb +libqtiff.dylib ??? (???) <812288C7-492A-3FE4-D564-2B37FEF06CDD> /Users/miket/Applications/Bitcoin-Qt.app/Contents/PlugIns/imageformats/libqtiff.dylib 0x4d71000 - 0x4d9bff7 +libqtaccessiblewidgets.dylib ??? (???) <B859A05C-0EAF-2D5A-15AE-BD726FFBFF4E> /Users/miket/Applications/Bitcoin-Qt.app/Contents/PlugIns/accessible/libqtaccessiblewidgets.dylib 0x15d2d000 - 0x15d7afe7 +libmng.1.dylib 2.0.0 (compatibility 2.0.0) <FC270B73-2A14-2298-0392-C0099197E5EB> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libmng.1.dylib 0x15d8f000 - 0x15db7fe7 +liblcms.1.dylib 2.19.0 (compatibility 2.0.0) <22FC09D8-B2D7-0356-CEE7-A8736EFC883A> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/liblcms.1.dylib 0x1774e000 - 0x177a0fe7 +libtiff.3.dylib 13.5.0 (compatibility 13.0.0) <A3A6689E-DE83-EBE0-25E3-8AE5BF1191F9> /Users/miket/Applications/Bitcoin-Qt.app/Contents/Frameworks/libtiff.3.dylib 0x8fe00000 - 0x8fe4162b dyld 132.1 (???) <749D24EE-54BD-D74B-D305-C13F5E6C95D8> /usr/lib/dyld 0x90003000 - 0x90003ff7 com.apple.vecLib 3.6 (vecLib 3.6) <FF4DC8B6-0AB0-DEE8-ADA8-7B57645A1F36> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib 0x900cb000 - 0x90196fef com.apple.CoreServices.OSServices 359.2 (359.2) <7C16D9C8-6F41-5754-17F7-2659D9DD9579> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x90197000 - 0x901abffb com.apple.speech.synthesis.framework 3.10.35 (3.10.35) <57DD5458-4F24-DA7D-0927-C3321A65D743> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x9051b000 - 0x9051bff7 com.apple.CoreServices 44 (44) <51CFA89A-33DB-90ED-26A8-67D461718A4A> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x9060a000 - 0x9060eff7 IOSurface ??? (???) <235E7E3D-B6E5-0AAA-C41A-7AC1F54A7EBF> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x9060f000 - 0x9064cff7 com.apple.SystemConfiguration 1.10.8 (1.10.2) <50E4D49B-4F61-446F-1C21-1B2BA814713D> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x9064d000 - 0x90650fe7 libmathCommon.A.dylib 315.0.0 (compatibility 1.0.0) <1622A54F-1A98-2CBE-B6A4-2122981A500E> /usr/lib/system/libmathCommon.A.dylib 0x908c4000 - 0x9092efe7 libstdc++.6.dylib 7.9.0 (compatibility 7.0.0) <411D87F4-B7E1-44EB-F201-F8B4F9227213> /usr/lib/libstdc++.6.dylib 0x9096b000 - 0x90ae6fe7 com.apple.CoreFoundation 6.6.6 (550.44) <F88C95CD-1264-782D-A1F5-204739847E93> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x9126a000 - 0x91302fe7 edu.mit.Kerberos 6.5.11 (6.5.11) <F36DB665-A88B-7F5B-6244-6A2E7FFFF668> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x9134c000 - 0x91353ff3 com.apple.print.framework.Print 6.1 (237.1) <F5AAE53D-5530-9004-A9E3-2C1690C5328E> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print 0x91354000 - 0x91460fe7 libGLProgrammability.dylib ??? (???) <6167CEB0-D8D6-C4D9-DD74-49755ADB540F> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLProgrammability.dylib 0x91461000 - 0x916c7ff7 com.apple.security 6.1.2 (55002) <E999CCEF-B769-4355-3E68-6003FCF6FE2B> /System/Library/Frameworks/Security.framework/Versions/A/Security 0x917b0000 - 0x917cefe7 libPng.dylib ??? (???) <45185287-25AD-C239-AA58-8FA53DF55B79> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x917d1000 - 0x917e3ff7 com.apple.MultitouchSupport.framework 207.11 (207.11) <6FF4F2D6-B8CD-AE13-56CB-17437EE5B741> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x91931000 - 0x9193ffe7 libz.1.dylib 1.2.3 (compatibility 1.0.0) <33C1B260-ED05-945D-FC33-EF56EC791E2E> /usr/lib/libz.1.dylib 0x91959000 - 0x9199cff7 libGLU.dylib ??? (???) <6CC3CE6A-7024-C685-EADA-7F9DC27128E2> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x9199d000 - 0x919a3fff com.apple.CommonPanels 1.2.4 (91) <2438AF5D-067B-B9FD-1248-2C9987F360BA> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x919ac000 - 0x91a09ff7 com.apple.framework.IOKit 2.0 (???) <3DABAB9C-4949-F441-B077-0498F8E47A35> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x91a0a000 - 0x91a15ff7 libGL.dylib ??? (???) <3E34468F-E9A7-8EFB-FF66-5204BD5B4E21> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x91c1e000 - 0x91c61ff7 com.apple.NavigationServices 3.5.4 (182) <8DC6FD4A-6C74-9C23-A4C3-715B44A8D28C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework/Versions/A/NavigationServices 0x91c62000 - 0x91c66ff7 libGIF.dylib ??? (???) <5D29E5F4-30B9-5A24-55E7-BCBA30499093> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x91c67000 - 0x91f8bfef com.apple.HIToolbox 1.6.5 (???) <21164164-41CE-61DE-C567-32E89755CB34> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x9208f000 - 0x92147feb libFontParser.dylib ??? (???) <D2D0C922-5ED1-3AE9-6F99-707C74DF3E62> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x92148000 - 0x92154ff7 libkxld.dylib ??? (???) <9A441C48-2D18-E716-5F38-CBEAE6A0BB3E> /usr/lib/system/libkxld.dylib 0x92160000 - 0x92160ff7 com.apple.Carbon 150 (152) <734BDB59-8B13-54FA-0653-AA8623DF9846> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x92161000 - 0x92172ff7 com.apple.LangAnalysis 1.6.6 (1.6.6) <3036AD83-4F1D-1028-54EE-54165E562650> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x92173000 - 0x92589ff7 libBLAS.dylib 219.0.0 (compatibility 1.0.0) <C4FB303A-DB4D-F9E8-181C-129585E59603> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x9258a000 - 0x9260cffb SecurityFoundation ??? (???) <2E1F1AF0-A258-D215-2600-5DF03896D1F1> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x9260d000 - 0x92618ff7 libCSync.A.dylib 545.0.0 (compatibility 64.0.0) <287DECA3-7821-32B6-724D-AE03A9A350F9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib 0x92644000 - 0x92693fe7 libTIFF.dylib ??? (???) <D0EB31DC-40E6-9A97-64D3-9867605DC3DD> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x926a7000 - 0x926c9fef com.apple.DirectoryService.Framework 3.6 (621.14) <A24C9308-4EB3-456D-1691-43DDB6F9A79F> /System/Library/Frameworks/DirectoryService.framework/Versions/A/DirectoryService 0x926ca000 - 0x92744fff com.apple.audio.CoreAudio 3.2.6 (3.2.6) <156A532C-0B60-55B0-EE27-D02B82AA6217> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x9275b000 - 0x92f4a557 com.apple.CoreGraphics 1.545.0 (???) <1D9DC7A5-228B-42CB-7018-66F42C3A9BB3> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics 0x933f5000 - 0x93430ffb libFontRegistry.dylib ??? (???) <19ED5DE0-D3AF-B229-9193-35D58FE377E5> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x93494000 - 0x93496ff7 com.apple.securityhi 4.0 (36638) <C7DA80C1-DCFD-C321-08DA-5E6946CA66E0> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x935fa000 - 0x93737fe7 com.apple.audio.toolbox.AudioToolbox 1.6.7 (1.6.7) <423BDE4D-5082-B6CA-BB2C-E22A037235A4> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x93738000 - 0x93738ff7 com.apple.Accelerate 1.6 (Accelerate 1.6) <3891A689-4F38-FACD-38B2-4BF937DE30CF> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x9377f000 - 0x937c3fe7 com.apple.Metadata 10.6.3 (507.15) <74F05E64-2A68-BA10-CCD4-128D164E5A0F> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x93c80000 - 0x93d1dfe3 com.apple.LaunchServices 362.3 (362.3) <15B47388-16C8-97DA-EEBB-1709E136169E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x93da8000 - 0x93df5feb com.apple.DirectoryService.PasswordServerFramework 6.1 (6.1) <136BFA48-D456-B677-3B5D-40A6946C3A09> /System/Library/PrivateFrameworks/PasswordServer.framework/Versions/A/PasswordServer 0x93df6000 - 0x93ef6fe7 libxml2.2.dylib 10.3.0 (compatibility 10.0.0) <BE7FCD73-03B5-25A4-FCA4-D4980F1488D6> /usr/lib/libxml2.2.dylib 0x9408f000 - 0x94093ff7 libGFXShared.dylib ??? (???) <09540618-2ED1-72C4-61CB-938B35927568> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x94094000 - 0x94095ff7 com.apple.audio.units.AudioUnit 1.6.7 (1.6.7) <93EC71F1-4D4E-F456-8EFE-32E7EFD7A064> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x940f1000 - 0x940f4ffb com.apple.help 1.3.2 (41.1) <8AC20B01-4A3B-94BA-D8AF-E39034B97D8C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x940f5000 - 0x9411bffb com.apple.DictionaryServices 1.1.2 (1.1.2) <43E1D565-6E01-3681-F2E5-72AE4C3A097A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x9411c000 - 0x9411fff7 libCGXType.A.dylib 545.0.0 (compatibility 64.0.0) <4D766435-EB76-C384-0127-1D20ACD74076> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x9418f000 - 0x9419dff7 com.apple.opengl 1.6.14 (1.6.14) <82622F67-E032-0BF6-A78D-50B346E8D0FD> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x94452000 - 0x94580fe7 com.apple.CoreData 102.1 (251) <87FE6861-F2D6-773D-ED45-345272E56463> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x947b7000 - 0x94837feb com.apple.SearchKit 1.3.0 (1.3.0) <9E18AEA5-F4B4-8BE5-EEA9-818FC4F46FD9> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x94838000 - 0x9487cff3 com.apple.coreui 2 (114) <2234855E-3BED-717F-0BFA-D1A289ECDBDA> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x9487d000 - 0x94883fe7 com.apple.CommerceCore 1.0 (9.1) <521D067B-3BDA-D04E-E1FA-CFA526C87EB5> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0x94895000 - 0x948d6ff7 libRIP.A.dylib 545.0.0 (compatibility 64.0.0) <80998F66-0AD7-AD12-B9AF-3E8D2CE6DE05> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x9499d000 - 0x949bdfe7 libresolv.9.dylib 41.1.0 (compatibility 1.0.0) <8C2B5FA8-2469-21C7-D297-F95A0FFE5F19> /usr/lib/libresolv.9.dylib 0x949be000 - 0x94c2ffef com.apple.Foundation 6.6.8 (751.63) <69B3441C-B196-F2AD-07F8-D8DD24E4CD8C> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x94c30000 - 0x94c63ff7 com.apple.AE 496.5 (496.5) <BF9673D5-2419-7120-26A3-83D264C75222> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x95295000 - 0x952b6fe7 com.apple.opencl 12.3.6 (12.3.6) <B4104B80-1CB3-191C-AFD3-697843C6BCFF> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x952b7000 - 0x952baff7 libCoreVMClient.dylib ??? (???) <37F56237-4ABA-E5B5-968D-70FFE357E8E0> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x95419000 - 0x954c7ff3 com.apple.ink.framework 1.3.3 (107) <233A981E-A2F9-56FB-8BDE-C2DEC3F20784> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x9582b000 - 0x9586dff7 libvDSP.dylib 268.0.1 (compatibility 1.0.0) <8A4721DE-25C4-C8AA-EA90-9DA7812E3EBA> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x9586e000 - 0x958ddff7 libvMisc.dylib 268.0.1 (compatibility 1.0.0) <595A5539-9F54-63E6-7AAC-C04E1574B050> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x958de000 - 0x95902ff7 libJPEG.dylib ??? (???) <5F2343E4-C268-B9AE-1BC3-466F5A614648> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x95add000 - 0x95b2dff7 com.apple.framework.familycontrols 2.0.2 (2020) <C96C8A99-A40C-8B9C-1FBA-A0F46AC92F17> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0x95b2e000 - 0x95b92ffb com.apple.htmlrendering 72 (1.1.4) <4D451A35-FAB6-1288-71F6-F24A4B6E2371> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HTMLRendering.framework/Versions/A/HTMLRendering 0x95b93000 - 0x95ba3ff7 libsasl2.2.dylib 3.15.0 (compatibility 3.0.0) <C8744EA3-0AB7-CD03-E639-C4F2B910BE5D> /usr/lib/libsasl2.2.dylib 0x95ba4000 - 0x95bdeff7 libcups.2.dylib 2.8.0 (compatibility 2.0.0) <6875335E-0993-0D77-4E80-41763A8477CF> /usr/lib/libcups.2.dylib 0x95bdf000 - 0x95d86ff7 libSystem.B.dylib 125.2.11 (compatibility 1.0.0) <2DCD13E3-1BD1-6F25-119A-3863A3848B90> /usr/lib/libSystem.B.dylib 0x95d87000 - 0x95d87ff7 com.apple.Accelerate.vecLib 3.6 (vecLib 3.6) <ABF97DA4-3BDF-6FFD-6239-B023CA1F7974> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x95d88000 - 0x95e68fe7 com.apple.vImage 4.1 (4.1) <D029C515-08E1-93A6-3705-DD062A3A672C> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x95e69000 - 0x95f15fe7 com.apple.CFNetwork 454.12.4 (454.12.4) <DEDCD006-389F-967F-3405-EDF541F406D7> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x961c5000 - 0x9626dffb com.apple.QD 3.36 (???) <FA2785A4-BB69-DCB4-3BA3-7C89A82CAB41> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x9626e000 - 0x962cffe7 com.apple.CoreText 151.12 (???) <98F53C15-1D29-A2B3-0717-5A26A2699163> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework/Versions/A/CoreText 0x962d0000 - 0x962daffb com.apple.speech.recognition.framework 3.11.1 (3.11.1) <7486003F-8FDB-BD6C-CB34-DE45315BD82C> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x9726a000 - 0x97274fe7 com.apple.audio.SoundManager 3.9.3 (3.9.3) <5F494955-7290-2D91-DA94-44B590191771> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework/Versions/A/CarbonSound 0x97304000 - 0x97396fe7 com.apple.print.framework.PrintCore 6.3 (312.7) <7410D1B2-655D-68DA-D4B9-2C65747B6817> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x974cd000 - 0x97513ff7 libauto.dylib ??? (???) <29422A70-87CF-10E2-CE59-FEE1234CFAAE> /usr/lib/libauto.dylib 0x97650000 - 0x9766cfe3 com.apple.openscripting 1.3.1 (???) <2A748037-D1C0-6D47-2C4A-0562AF799AC9> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x9766d000 - 0x9766eff7 com.apple.TrustEvaluationAgent 1.1 (1) <2D970A9B-77E8-EDC0-BEC6-7580D78B2843> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x97688000 - 0x97762fff com.apple.DesktopServices 1.5.11 (1.5.11) <800F2040-9211-81A7-B438-7712BF51DEE3> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x97768000 - 0x97768ff7 liblangid.dylib ??? (???) <B99607FC-5646-32C8-2C16-AFB5EA9097C2> /usr/lib/liblangid.dylib 0x97769000 - 0x97b9eff7 libLAPACK.dylib 219.0.0 (compatibility 1.0.0) <5E2D2283-57DE-9A49-1DB0-CD027FEFA6C2> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x97b9f000 - 0x97ca1fe7 libcrypto.0.9.8.dylib 0.9.8 (compatibility 0.9.8) <015563C4-81E2-8C8A-82AC-31B38D904A42> /usr/lib/libcrypto.0.9.8.dylib 0x97ca2000 - 0x97cd5fff libTrueTypeScaler.dylib ??? (???) <8ADB7D19-413E-4499-C874-13C383F97685> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libTrueTypeScaler.dylib 0x97cd6000 - 0x97d07ff7 libGLImage.dylib ??? (???) <D18E2E76-DBF4-6930-039A-F66CA0D120B3> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x97d08000 - 0x97dc4fff com.apple.ColorSync 4.6.8 (4.6.8) <920DD017-8B41-7334-E554-A85DB99EBD5A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x97e0d000 - 0x97e0fff7 libRadiance.dylib ??? (???) <98EC06D5-1A02-EDEF-BF9D-2C986761AD54> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x97e10000 - 0x97ec9fe7 libsqlite3.dylib 9.6.0 (compatibility 9.0.0) <52438E77-55D1-C231-1936-76F1369518E4> /usr/lib/libsqlite3.dylib 0x97eca000 - 0x97ecaff7 com.apple.ApplicationServices 38 (38) <8012B504-3D83-BFBB-DA65-065E061CFE03> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x9800b000 - 0x9802aff7 com.apple.CoreVideo 1.6.2 (45.6) <EB53CAA4-5EE2-C356-A954-5775F7DDD493> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x9802b000 - 0x9834bff3 com.apple.CoreServices.CarbonCore 861.39 (861.39) <5C59805C-AF39-9010-B8B5-D673C9C38538> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x983be000 - 0x98540fe7 libicucore.A.dylib 40.0.0 (compatibility 1.0.0) <D5980817-6D19-9636-51C3-E82BAE26776B> /usr/lib/libicucore.A.dylib 0x98569000 - 0x9872cfeb com.apple.ImageIO.framework 3.0.5 (3.0.5) <87750C2B-193F-56A6-AB97-0842A2D02092> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x9872d000 - 0x99010ff7 com.apple.AppKit 6.6.8 (1038.36) <A353465E-CFC9-CB75-949D-786F6F7732F6> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x99011000 - 0x99016ff7 com.apple.OpenDirectory 10.6 (10.6) <C1B46982-7D3B-3CC4-3BC2-3E4B595F0231> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x99e72000 - 0x99e86fe7 libbsm.0.dylib ??? (???) <14CB053A-7C47-96DA-E415-0906BA1B78C9> /usr/lib/libbsm.0.dylib 0x99ea9000 - 0x99efcff7 com.apple.HIServices 1.8.3 (???) <1D3C4587-6318-C339-BD0F-1988F246BE2E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x99f34000 - 0x9a028ff7 libiconv.2.dylib 7.0.0 (compatibility 7.0.0) <061ABF36-8BA9-79C1-6CE7-EC69A4998F51> /usr/lib/libiconv.2.dylib 0x9a05e000 - 0x9a3c9ff7 com.apple.QuartzCore 1.6.3 (227.37) <E323A5CC-499E-CA9E-9BC3-537231449CAA> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x9aa2a000 - 0x9aa42ff7 com.apple.CFOpenDirectory 10.6 (10.6) <F9AFC571-3539-6B46-ABF9-46DA2B608819> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x9aa43000 - 0x9aa58fff com.apple.ImageCapture 6.1 (6.1) <B909459A-EAC9-A7C8-F2A9-CD757CDB59E8> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x9aa59000 - 0x9ab2afe3 ColorSyncDeprecated.dylib 4.6.0 (compatibility 1.0.0) <C618942F-BC01-0565-18CF-477B63C02181> /System/Library/Frameworks/ApplicationServices.framework/Frameworks/ColorSync.framework/Versions/A/Resources/ColorSyncDeprecated.dylib 0x9ab2b000 - 0x9abc6fe7 com.apple.ApplicationServices.ATS 275.19 (???) <2E83B3E9-AF39-36FC-5D05-CC1E952098AB> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x9abc7000 - 0x9abd4ff7 com.apple.NetFS 3.2.2 (3.2.2) <DDC9C397-C35F-8D7A-BB24-3D1B42FA5FAB> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x9abd5000 - 0x9abfdff7 libxslt.1.dylib 3.24.0 (compatibility 3.0.0) <E761F29A-328B-29D9-3DF0-023F2C21E500> /usr/lib/libxslt.1.dylib 0x9abfe000 - 0x9ac07ff7 com.apple.DiskArbitration 2.3 (2.3) <E9C40767-DA6A-6CCB-8B00-2D5706753000> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x9ac0b000 - 0x9acb8fe7 libobjc.A.dylib 227.0.0 (compatibility 1.0.0) <9F8413A6-736D-37D9-8EB3-7986D4699957> /usr/lib/libobjc.A.dylib 0xffff0000 - 0xffff1fff libSystem.B.dylib ??? (???) <2DCD13E3-1BD1-6F25-119A-3863A3848B90> /usr/lib/libSystem.B.dylib Model: MacPro3,1, BootROM MP31.006C.B05, 8 processors, Quad-Core Intel Xeon, 2.8 GHz, 10 GB, SMC 1.25f4
1815	OpenBSD is failing some tests related to wallet coin selection AND SHOULD NOT UNDER ANY CIRCUMSTANCES BE USED AS THE OS ON ANY INSTANCES HANDLING A WALLET YET. The *.d cleanup in the clean target is needed for instances when you try and link against a bad db version (<4.8) but they shouldnt exist under "normal" circumstances. Should still clean them up. The swap of the bdb and boost include search paths is intentional. The openbsd port/package for db4 is stuck at 4.6 for right now and exists in /usr/local. Boost also exists in /usr/local so if its specified first you cant get the linker to find the correct bdb. Getting the unit tests working on OpenBSD requires patching the boost 1.42 port before building as the provided one will not work with any unit tests whatsoever. Ill write up build instructions for both platforms for a different pull request. Ive tested that this builds on both OpenBSD 5.1 and FreeBSD 9.0-RELEASE-p4. (AKA, current stable versions as of this writing.) Ive also tested that it does not break builds on debian wheezy. Edit: FreeBSD build example: BOOST_INCLUDE_PATH=/usr/local/include \ BOOST_LIB_PATH=/usr/local/lib \ BDB_INCLUDE_PATH=/usr/local/include/db48 \ BDB_LIB_PATH=/usr/local/lib/db48 \ gmake -f makefile.unix -j8 USE_UPNP= bitcoind test_bitcoin OpenBSD build example: BOOST_INCLUDE_PATH=/usr/local/include \ BOOST_LIB_PATH=/usr/local/lib \ BDB_INCLUDE_PATH=/opt/OpenBSD/5.1/amd64/db4-4.8.30/include \ BDB_LIB_PATH=/opt/OpenBSD/5.1/amd64/db4-4.8.30/lib \ BOOST_LIB_SUFFIX=-mt \ gmake -f makefile.unix -j8 USE_UPNP= bitcoind test_bitcoin See this pastebin for details on the failing unit tests on OpenBSD:
1814	Matt pointed out some time ago that there existed a minor DOS attack where a node in its initial block download could be wedged by an overwrite attack in a fork created between checkpoints before a time where BIP30 was enforced. Now that the BIP30 timestamp is irreversibly past the check can be more aggressive and apply to all blocks except the two historic violations.
1813	
1812	
1811	I found it really helpful when debugging stuff to not need to delete the debug.log everytime I re-start the client. - changes ShrinkDebugFile() function to use nice MiB and KiB boundaries
1810	- Paging using PageUp / PageDown now works when entry widget has focus - Typing or pasting while the messages widget has focus auto-selects entry widget
1809	This change is longer than preferred, because mTemplates is a map, and as such, the notion of "variant of TX_PUBKEYHASH" is poorly supported. TX_PUBKEYHASH_*DATA was added, but is largely to quiet compiler warnings, because it is mapped to TX_PUBKEYHASH everywhere, including Solver()s transaction-type return value. Intended to enable use cases such as Mike Hearns distributed bond markets:
1808	Were in a wholly different world now, C++-compiler-wise. Current std::stringstream implementations dont have the stated problem anymore, and are just as fast as CDataStream. The #ifdefd block does not even compile anymore; CDataStream constructor changed, and missing some std::. Also timing in whole seconds is also way too granular to say anything sensible in such microbenchmarks. Just remove it, it can always be found again in git history.
1807	This finds about ~150 potential problems with wrong format characters on a 64 bit build (-Wformat). Most mistakes seem to have to do with using `%d` for `size_t` / `ssize_t`. When memory addresses are 32-bit this is no problem, however on 64-bit architectures this is wrong. See also . Other warnings have to do with pointers, where %x is used instead of %p. I dont feel like fixing all the warnings right now, but it is a useful diagnostic nevertheless as it may reveal hidden bugs. This pull does add macros akin to `PRI64x` to help with this, and represent format characters for these types for MSVC and GCC: - `PRIszx`: hex - `PRIszu`: unsigned (size_t) - `PRIszd`: signed (ssize_t)
1806	Im rather sure there was broad developer consensus to do that before 0.7 gets final :)?
1805	Some parts of the gui are untranslated. Version: 0.6.3 I can to the translation, but how to add the patch here?
1804	Checks are applied to: getwork RPC submission, internal miner submission, and submitblock RPC submission. Arguably pointless for the first two, as getwork miners cannot change that field, but it is a sanity check even in those cases.
1803	[21:48:14] &lt;md2k7&gt; feel free to make it MIT if you like Just to reduce the number of distinct licenses required...
1802	
1800	Thanks for finding these bugs!
1799	
1798	The wrong address is added to the collection. As was written a second copy of address1 was added (and so address2 was useless).
1797	Windows 7 Pro SP1 64Bit 4 GB Ram Intel Core 2 Quad Q6600 2.4 Ghz On a new installation of Bitcoin 0.6.3 Initial and subsequent launches of bitcoin-qt.exe result in the following message at the splashscreen: "A fatal error occured. Bitcoin can no longer continue safely and will quit. EXCEPTION: N5boost12interprocess22interprocess_exceptionE Access is denied. D:\Program FIles (x86)\Bitcoin\bitcoin-qt.exe in Runaway exception" Clicking Okay closes the window. I uninstalled/ reinstalled in a new location. Same result.
1796	Over the releases, numerous translations have been lost due to fixes in English grammar and spelling. Additionally, ampersands/hotkeys seem to keep getting escaped. These commits correct some of these issues, but I only got about 20% through the full recovery of old translations so far. This process is very time consuming, and I want to verify it will be accepted upstream before I spend any more time on it. Im aware of Transifex, but I am automating a significant amount of the restoration process (for the most part, my time/effort is just checking the scripts work for correctness). Hope these ts files can be imported to it...
1795	Filter tx invs and add MSG_FILTERED_BLOCK to provide blocks as header+vector<merkle block> (not including tx itself)
1794	
1793	- I checked every occurance of strprintf() in the code and used %u, where unsigned vars are used - the change to GetByte() was made, as ip is an unsigned char As our strprintf() gives not the same kind of compiler-warnings we see with printf(), I checked all direct usage of strprintf() for correct format characters.
1792	
1791	Equivalent code. (false == 0 == DB_LOAD_OK).Fixes #1706.
1790	Has this a deeper meaning or can we remove it? It seems to be used once in net.cpp via ``pnode->Cleanup();`` but contains no code.
1789	
1788	
1787	Wanted to eliminate a silly thread that does nothing but waste system resources as a poor mans cron. boost.asio also has deadline_timer, which is worth investigating.
1786	The most portable invocation for the zero-fds case, a widely used portable hack for sleeping, generally involves passing NULL arguments when the fd sets are unused. This form is used here. Intended to supercede #1772.
1785	From a code review: catch potential DataStream deserialization exceptions.
1784	I think that implicitly converting 3 (the number) to uint256, doing an & between two uint256 and finally comparing the result to an uint64 (the 0) is a little overkill if all you want is to check 2 bits of an uint256. I have to say the truth, Im not sure if now we would be comparing the "same" 2 bits or the 2 bits from the other side of the uint256 (looking at operator= and Get64 I would say the same), but considering what this code wants to obtain, it shouldnt be a problem. (Im not even sure if this code will be faster, but I do think that all those implicit conversions are b.a.d.). We could even do a (*hashrand.begin() & 3) but that would be quite unreadable.
1783	When I start bitcoind I get the error below. I just cloned from master and built from source. ~/bitcoin/src# ./bitcoind ************************ EXCEPTION: 22DbRunRecoveryException DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery bitcoin in AppInit() terminate called after throwing an instance of DbRunRecoveryException what(): DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery Aborted
1782	Im assuming this is meant to be "real number", however correct me if Im wrong.
1781	- add -proxy6 to specify a SOCKS5 proxy for reaching IPv6 peers - enhance control flow for proxy init code - new init order Tor -> IPv6 -> Base proxy - remove redundant .IsValid() checks - dont set Tor proxy, when IsLimited(NET_TOR) - dont allow SOCKS versions != 4 or != 5 - disable the usage of -proxy for Tor and IPv6, when SOCKS4 is used - update parameter help messages to reflect changes and tweak them to be more clear
1780	Change Copyright (c) 2010 to Copyright (c) 2009-2010 in some files.
1779	The vector isnt referenced in the small code block its declared. I dont see any "useful" side effect in its declaration.
1778	I had a talk with yesterday about this on IRC, this is the patch for our discussion. - this allows the client to listen on via -bind specified addresses (e.g. 127.0.0.1), even when a network (IPv4 in that case) was blocked via e.g -onlynet="Tor" - introduce enum BindFlags to avoid passing multiple bools to Bind() - make -bind help text clear we ALWAYS listen on the specified address - remove an unused variable - usage case: specify -bind=127.0.0.1 -onlynet="Tor" to allow incoming connections to a Tor hidden service, but still dont allow other IPv4 nodes to connect / get connected
1777	%d can return up to 11 characters (12 with \0). Move away from fixed buffer completely and use our own safe function strprintf. Im reasonably sure that this cannot be exploited due to earlier checks, but it does make me feel a tad uneasy.
1776	Running valgrind on Bitcoin-Qt, I get these memory errors reported. They look like problems in Qt and libminiupnp, but itd be nice to verify that its not our use of those libraries that is causing the errors. ``` ==69076== Memcheck, a memory error detector ==69076== Copyright (C) 2002-2010, and GNU GPLd, by Julian Seward et al. ==69076== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info ==69076== Command: Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt ==69076== --69076-- run: /usr/bin/dsymutil "Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt" warning: no debug symbols in executable (-arch i386) ==69076== Conditional jump or move depends on uninitialised value(s) ==69076== at 0xAB0D47: _DPSNextEvent (in /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit) ==69076== by 0xAAFDD5: -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] (in /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit) ==69076== by 0xA721F2: -[NSApplication run] (in /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit) ==69076== by 0x1CD99EA: QEventDispatcherMacPrivate::ensureNSAppInitialized() (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x1CDB761: QEventDispatcherMac::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x2A159DD: QCoreApplication::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) (in /opt/local/Library/Frameworks/QtCore.framework/Versions/4/QtCore) ==69076== by 0x1D7D905: QWidgetPrivate::show_helper() (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x1D7F422: QWidget::setVisible(bool) (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x1E76D: main (in Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt) ==69076== ==69076== Conditional jump or move depends on uninitialised value(s) ==69076== at 0xAB0D4C: _DPSNextEvent (in /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit) ==69076== by 0xAAFDD5: -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] (in /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit) ==69076== by 0xA721F2: -[NSApplication run] (in /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit) ==69076== by 0x1CD99EA: QEventDispatcherMacPrivate::ensureNSAppInitialized() (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x1CDB761: QEventDispatcherMac::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x2A159DD: QCoreApplication::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) (in /opt/local/Library/Frameworks/QtCore.framework/Versions/4/QtCore) ==69076== by 0x1D7D905: QWidgetPrivate::show_helper() (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x1D7F422: QWidget::setVisible(bool) (in /opt/local/Library/Frameworks/QtGui.framework/Versions/4/QtGui) ==69076== by 0x1E76D: main (in Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt) ==69076== ==69076== Thread 9: ==69076== Conditional jump or move depends on uninitialised value(s) ==69076== at 0x6DF09C: getHTTPResponse (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x6E12AF: simpleUPnPcommand2 (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x6E1327: simpleUPnPcommand (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x6E21CC: UPNP_AddPortMapping (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x106293: ThreadMapPort2(void*) (in Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt) ==69076== by 0x10655B: ThreadMapPort(void*) (in Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt) ==69076== by 0x2D0C258: _pthread_start (in /usr/lib/libSystem.B.dylib) ==69076== by 0x2D0C0DD: thread_start (in /usr/lib/libSystem.B.dylib) ==69076== ==69076== Conditional jump or move depends on uninitialised value(s) ==69076== at 0x6DF0A0: getHTTPResponse (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x6E12AF: simpleUPnPcommand2 (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x6E1327: simpleUPnPcommand (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x6E21CC: UPNP_AddPortMapping (in /opt/local/lib/libminiupnpc.8.dylib) ==69076== by 0x106293: ThreadMapPort2(void*) (in Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt) ==69076== by 0x10655B: ThreadMapPort(void*) (in Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt) ==69076== by 0x2D0C258: _pthread_start (in /usr/lib/libSystem.B.dylib) ==69076== by 0x2D0C0DD: thread_start (in /usr/lib/libSystem.B.dylib) ==69076== ```
1775	This is far away on the horizon, even KDE is not ported yet, and Qt5 is only at beta. But unlike when going from 4.x to 4.x+1 there is some effort in porting: However it is possible to make one code base compatible with both versions. I dont expect it to be a lot of work for bitcoin; we dont use qt3 support, already use `#include <QtXX>` instead of `#include <QtGui/QtXX>`, and hardly make use of advanced meta-object features. But there may be some subtle issues.
1774	OrderedTxItems returns a multimap of pointers, but needs a place to store the actual CAccountingEntries it points to. It had been using a stack item, which was clobbered as soon as it returned, resulting in undefined behaviour. This fixes at least bug #1768.
1773	Investigating the listtransactions crash, I ran across this unrelated bad-use-of-memory-on-shutdown issue. Looks like the new multithreaded RPC code has a bug. ``` ==61723== Memcheck, a memory error detector ==61723== Copyright (C) 2002-2010, and GNU GPLd, by Julian Seward et al. ==61723== Using Valgrind-3.6.1 and LibVEX; rerun with -h for copyright info ==61723== Command: bitcoind -datadir=/Users/gavin/ccut/1 ==61723== --61723-- run: /usr/bin/dsymutil "./bitcoind" ==61723== Thread 3: ==61723== Invalid read of size 4 ==61723== at 0x14757E: boost::asio::detail::reactive_socket_service_base::destroy(boost::asio::detail::reactive_socket_service_base::base_implementation_type&) (reactive_socket_service_base.ipp:87) ==61723== by 0x1475F8: boost::asio::stream_socket_service<boost::asio::ip::tcp>::destroy(boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::implementation_type&) (stream_socket_service.hpp:119) ==61723== by 0x147620: boost::asio::basic_io_object<boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_io_object() (basic_io_object.hpp:124) ==61723== by 0x14763C: boost::asio::basic_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_socket() (basic_socket.hpp:1455) ==61723== by 0x147658: boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_stream_socket() (basic_stream_socket.hpp:47) ==61723== by 0x1477D9: boost::asio::ssl::stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >::~stream() (stream.hpp:114) ==61723== by 0x147882: AcceptedConnectionImpl<boost::asio::ip::tcp>::~AcceptedConnectionImpl() (bitcoinrpc.cpp:2539) ==61723== by 0x93F3B: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2879) ==61723== by 0x93DE3: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2863) ==61723== by 0x93DE3: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2863) ==61723== by 0x93DE3: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2863) ==61723== by 0x93DE3: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2863) ==61723== Address 0x4c38c44 is 20 bytes inside a block of size 24 freed ==61723== at 0x120C477: operator delete(void*) (vg_replace_malloc.c:387) ==61723== by 0xE2B4A: boost::asio::stream_socket_service<boost::asio::ip::tcp>::~stream_socket_service() (stream_socket_service.hpp:42) ==61723== by 0xA4EA5: boost::asio::detail::service_registry::destroy(boost::asio::io_service::service*) (service_registry.ipp:101) ==61723== by 0x119819: boost::asio::detail::service_registry::~service_registry() (service_registry.ipp:45) ==61723== by 0x1198CC: boost::asio::io_service::~io_service() (io_service.ipp:53) ==61723== by 0x8C83E: ThreadRPCServer2(void*) (bitcoinrpc.cpp:2782) ==61723== by 0x8D5BB: ThreadRPCServer(void*) (bitcoinrpc.cpp:2584) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== by 0x1261258: _pthread_start (in /usr/lib/libSystem.B.dylib) ==61723== ==61723== Invalid read of size 4 ==61723== at 0x1239474: pthread_mutex_lock (in /usr/lib/libSystem.B.dylib) ==61723== by 0x11AE34: boost::asio::detail::posix_mutex::lock() (posix_mutex.hpp:52) ==61723== by 0x11AE6C: boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::scoped_lock(boost::asio::detail::posix_mutex&) (scoped_lock.hpp:36) ==61723== by 0x140A8C: boost::asio::detail::kqueue_reactor::deregister_descriptor(int, boost::asio::detail::kqueue_reactor::descriptor_state*&, bool) (kqueue_reactor.ipp:280) ==61723== by 0x147596: boost::asio::detail::reactive_socket_service_base::destroy(boost::asio::detail::reactive_socket_service_base::base_implementation_type&) (reactive_socket_service_base.ipp:87) ==61723== by 0x1475F8: boost::asio::stream_socket_service<boost::asio::ip::tcp>::destroy(boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::implementation_type&) (stream_socket_service.hpp:119) ==61723== by 0x147620: boost::asio::basic_io_object<boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_io_object() (basic_io_object.hpp:124) ==61723== by 0x14763C: boost::asio::basic_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_socket() (basic_socket.hpp:1455) ==61723== by 0x147658: boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_stream_socket() (basic_stream_socket.hpp:47) ==61723== by 0x1477D9: boost::asio::ssl::stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >::~stream() (stream.hpp:114) ==61723== by 0x147882: AcceptedConnectionImpl<boost::asio::ip::tcp>::~AcceptedConnectionImpl() (bitcoinrpc.cpp:2539) ==61723== by 0x93F3B: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2879) ==61723== Address 0x4a88428 is 8 bytes inside a block of size 84 freed ==61723== at 0x120C477: operator delete(void*) (vg_replace_malloc.c:387) ==61723== by 0x11973F: void boost::asio::detail::object_pool_access::destroy<boost::asio::detail::kqueue_reactor::descriptor_state>(boost::asio::detail::kqueue_reactor::descriptor_state*) (object_pool.hpp:41) ==61723== by 0x11977A: boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::destroy_list(boost::asio::detail::kqueue_reactor::descriptor_state*) (object_pool.hpp:131) ==61723== by 0x1197BC: boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::~object_pool() (object_pool.hpp:73) ==61723== by 0x13F2E1: boost::asio::detail::kqueue_reactor::~kqueue_reactor() (kqueue_reactor.ipp:59) ==61723== by 0xA4EA5: boost::asio::detail::service_registry::destroy(boost::asio::io_service::service*) (service_registry.ipp:101) ==61723== by 0x119819: boost::asio::detail::service_registry::~service_registry() (service_registry.ipp:45) ==61723== by 0x1198CC: boost::asio::io_service::~io_service() (io_service.ipp:53) ==61723== by 0x8C83E: ThreadRPCServer2(void*) (bitcoinrpc.cpp:2782) ==61723== by 0x8D5BB: ThreadRPCServer(void*) (bitcoinrpc.cpp:2584) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== ==61723== Invalid read of size 1 ==61723== at 0x140A92: boost::asio::detail::kqueue_reactor::deregister_descriptor(int, boost::asio::detail::kqueue_reactor::descriptor_state*&, bool) (kqueue_reactor.ipp:282) ==61723== by 0x147596: boost::asio::detail::reactive_socket_service_base::destroy(boost::asio::detail::reactive_socket_service_base::base_implementation_type&) (reactive_socket_service_base.ipp:87) ==61723== by 0x1475F8: boost::asio::stream_socket_service<boost::asio::ip::tcp>::destroy(boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::implementation_type&) (stream_socket_service.hpp:119) ==61723== by 0x147620: boost::asio::basic_io_object<boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_io_object() (basic_io_object.hpp:124) ==61723== by 0x14763C: boost::asio::basic_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_socket() (basic_socket.hpp:1455) ==61723== by 0x147658: boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_stream_socket() (basic_stream_socket.hpp:47) ==61723== by 0x1477D9: boost::asio::ssl::stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >::~stream() (stream.hpp:114) ==61723== by 0x147882: AcceptedConnectionImpl<boost::asio::ip::tcp>::~AcceptedConnectionImpl() (bitcoinrpc.cpp:2539) ==61723== by 0x93F3B: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2879) ==61723== by 0x93DE3: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2863) ==61723== by 0x93DE3: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2863) ==61723== by 0x93DE3: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2863) ==61723== Address 0x4a88470 is 80 bytes inside a block of size 84 freed ==61723== at 0x120C477: operator delete(void*) (vg_replace_malloc.c:387) ==61723== by 0x11973F: void boost::asio::detail::object_pool_access::destroy<boost::asio::detail::kqueue_reactor::descriptor_state>(boost::asio::detail::kqueue_reactor::descriptor_state*) (object_pool.hpp:41) ==61723== by 0x11977A: boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::destroy_list(boost::asio::detail::kqueue_reactor::descriptor_state*) (object_pool.hpp:131) ==61723== by 0x1197BC: boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::~object_pool() (object_pool.hpp:73) ==61723== by 0x13F2E1: boost::asio::detail::kqueue_reactor::~kqueue_reactor() (kqueue_reactor.ipp:59) ==61723== by 0xA4EA5: boost::asio::detail::service_registry::destroy(boost::asio::io_service::service*) (service_registry.ipp:101) ==61723== by 0x119819: boost::asio::detail::service_registry::~service_registry() (service_registry.ipp:45) ==61723== by 0x1198CC: boost::asio::io_service::~io_service() (io_service.ipp:53) ==61723== by 0x8C83E: ThreadRPCServer2(void*) (bitcoinrpc.cpp:2782) ==61723== by 0x8D5BB: ThreadRPCServer(void*) (bitcoinrpc.cpp:2584) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== ==61723== Invalid read of size 4 ==61723== at 0x1239775: pthread_mutex_unlock (in /usr/lib/libSystem.B.dylib) ==61723== by 0x11B124: boost::asio::detail::posix_mutex::unlock() (posix_mutex.hpp:58) ==61723== by 0x11B17C: boost::asio::detail::scoped_lock<boost::asio::detail::posix_mutex>::~scoped_lock() (scoped_lock.hpp:44) ==61723== by 0x140C99: boost::asio::detail::kqueue_reactor::deregister_descriptor(int, boost::asio::detail::kqueue_reactor::descriptor_state*&, bool) (kqueue_reactor.ipp:319) ==61723== by 0x147596: boost::asio::detail::reactive_socket_service_base::destroy(boost::asio::detail::reactive_socket_service_base::base_implementation_type&) (reactive_socket_service_base.ipp:87) ==61723== by 0x1475F8: boost::asio::stream_socket_service<boost::asio::ip::tcp>::destroy(boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::implementation_type&) (stream_socket_service.hpp:119) ==61723== by 0x147620: boost::asio::basic_io_object<boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_io_object() (basic_io_object.hpp:124) ==61723== by 0x14763C: boost::asio::basic_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_socket() (basic_socket.hpp:1455) ==61723== by 0x147658: boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> >::~basic_stream_socket() (basic_stream_socket.hpp:47) ==61723== by 0x1477D9: boost::asio::ssl::stream<boost::asio::basic_stream_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > >::~stream() (stream.hpp:114) ==61723== by 0x147882: AcceptedConnectionImpl<boost::asio::ip::tcp>::~AcceptedConnectionImpl() (bitcoinrpc.cpp:2539) ==61723== by 0x93F3B: ThreadRPCServer3(void*) (bitcoinrpc.cpp:2879) ==61723== Address 0x4a88428 is 8 bytes inside a block of size 84 freed ==61723== at 0x120C477: operator delete(void*) (vg_replace_malloc.c:387) ==61723== by 0x11973F: void boost::asio::detail::object_pool_access::destroy<boost::asio::detail::kqueue_reactor::descriptor_state>(boost::asio::detail::kqueue_reactor::descriptor_state*) (object_pool.hpp:41) ==61723== by 0x11977A: boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::destroy_list(boost::asio::detail::kqueue_reactor::descriptor_state*) (object_pool.hpp:131) ==61723== by 0x1197BC: boost::asio::detail::object_pool<boost::asio::detail::kqueue_reactor::descriptor_state>::~object_pool() (object_pool.hpp:73) ==61723== by 0x13F2E1: boost::asio::detail::kqueue_reactor::~kqueue_reactor() (kqueue_reactor.ipp:59) ==61723== by 0xA4EA5: boost::asio::detail::service_registry::destroy(boost::asio::io_service::service*) (service_registry.ipp:101) ==61723== by 0x119819: boost::asio::detail::service_registry::~service_registry() (service_registry.ipp:45) ==61723== by 0x1198CC: boost::asio::io_service::~io_service() (io_service.ipp:53) ==61723== by 0x8C83E: ThreadRPCServer2(void*) (bitcoinrpc.cpp:2782) ==61723== by 0x8D5BB: ThreadRPCServer(void*) (bitcoinrpc.cpp:2584) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ==61723== by 0x8D571: ThreadRPCServer(void*) (bitcoinrpc.cpp:2576) ```
1772	- when there is no network connection or a failing / non-existent proxy passed to the client the debug.log was spamed with socket 10022 errors - this is fixed by adding a check for hSocketMax != 0 - merged a WSAGetLastError() into the related printf()
1771	
1770	Oops. Should now mimic bash quoting and escaping (see exactly, leaving out argument expansion and obscure syntax like $.
1769	- add -proxy6 to specify a SOCKS5 proxy for reaching IPv6 peers - add init message for network initialisation - enhance control flow for proxy init code - update parameter help messages to reflect that change and tweak them to be more clear
1768	Clean build of git HEAD running on the bitcoin faucet machine is crashing: #1 0x082786c1 in AcentryToJSON (acentry=..., strAccount=..., ret=...) at rpcwallet.cpp:972 972 if (fAllAccounts || acentry.strAccount == strAccount) (gdb) p acentry.strAccount $1 = {static npos = 4294967295, _M_dataplus = {<std::allocator<char>> = {<__gnu_cxx::new_allocator<char>> = {<No data fields>}, <No data fields>}, _M_p = 0x1 <Address 0x1 out of bounds>}} Maybe a stomping-on-memory-from-multiple threads bug? Ill see what I can see in valgrind... Faucet machine is running Ubuntu 10.04.4 LTS
1767	- current code does not clear history, when using the clear button, this is added - remove an unused variable
1765	So we dont need to re-translate the whole description string everytime a default value is changed. Example: ``" -keypool=<n> " + _("Set key pool size to <n> (default: 100)") + "\n" +`` ``" -keypool=<n> " + _("Set key pool size to <n> (default:") + "100)\n" +``
1764	Using a byte-for-byte comparison excludes valid nHeight encodings. Replace with standard script method for decoding integer values on the script stack.
1762	* This sets a clickable hyperlink for the transaction ID text on the transaction detail window. * The links points to * This is very handy because avoid copying the transaction id, opening the browser, going to blockexplorer and pasting the transaction id. * When sending money to someone sometimes is useful to give them the link to the corresponding blockexplorer transaction id. Is also useful to easily check advanced details of the transaction.
1761	
1760	- add ConnectionTest() to netbase.h to do a connection-test for a present -proxy address on client init and warn on failure This is informing users about a failure to connect to a supplied proxy, current timeout is 1sec, which we can discuss. Fixes: #763
1759	Running Windows 7 64-Bit Ultimate. 1. Installation went fine. 2. Block chain was close to completing initial download. 3. Forced to restart machine due to another program. 4. Subsequent attempts to run Bitcoin result in it failing at loading the blkindex.dat file. 5. Uninstalling/Reinstalling with either Windows or Bitcoins uninstaller does not fix the issue. First time user...not exactly made confident by this initial exposure/failure. Not sure this is technically a bug, but it surely cannot be a feature. Please assist...and thank you, BB
1758	As boost was no longer helpful I had to implement the command line splitting myself. Should fix issue #1750, but does need some testing.
1757	
1756	
1755	how to build on ubuntu 12.04
1754	Last-minute translatable strings update
1753	At least for non-cross compiles it really makes no sense to skip test_bitcoin as is. Its a fast and useful test and every build should have the benefit of it. Developers doing rapid compile cycles could turn it off.
1752	- this is already active for bitcoin-qt.exe As no one responded in the IRC chan Ill open this as pull. Im not sure if that pull needs further modifications to the makefiles, so please be gentle :).
1751	They are unneeded as jsonspirit is always used as template library, the other makefiles dont include them either.
1750	I cant find a mixture (or absence) of quoting that makes this work in the GUI console: addmultisigaddress 2 ["02404c0b780b0d3f70a57bccb0cac31c77e980d899db00f04a61052cf6500bde23","02092eb733ce9027fcddb9917e841057c747318ff973de7a7768da9b3f039d6892"]
1749	
1748	Thanks to for noticing.
1747	The default RPC port is 8332, for mainnet or testnet3. This 1) is unsafe, if code assumes 8332 is mainnet 2) conflicts with a mainnet node, if you are running both on the same machine The code should automatically change RPC ports, if testnet3.
1745	Dont force IRC off if not listening, do force it off if IPv4 is off. Previously Bitcoin would refuse to use IRC if it was either not accepting inbound connections or not making outbound. Instead this changes it to not use IRC only if its not doing either or if IPv4 is off completely. If Bitcoin is not listening this will use the default random nicks rather than the IP based ones. Also, Dont retry a failing IRC nickname forever. If our IRC nick is in use (because some other node thinks it has the same address we think we have) dont fruitlessly try to reconnect using that name forever. After three tries, give up and use a random nick. Either well learn a new local address from IRC and switch to that, or it was right and the other guy is advertising for us. This avoids a pessimal case where a second testnet node behind a nat is unable to get any peers because he cant get on IRC.
1744	Two commits; the first just refactors most of the alert-handling code into alert.cpp/alert.h The second gives testnet its own alert key, which is the right thing to do because if it shares the main networks key somebody could take testnet test alerts and rebroadcast them on the main network.
1743	It should be pprev, because the next one is pnext, and its printing the memory address of the CBlockIndex (so pSomething).
1742	Only enabled inside tests for now. Unit tests are included, but rather minimal for now. Ive done more tests, though. The custom is-standard check for signatures and the OpenSSL-based test agree for every transaction in the blockchain up to block 195000, included for simple randomly fuzzed versions of every blockchain transaction.
1741	As requested by in #1736
1740	Partly replaces #1736
1739	Partly replaces #1736
1738	Im not sure why this wasnt done before. - Removes typedef of pthread_t on Windows, which fixes a native compile issue on mingw (@diapolo :-)
1737	v0.6.3-beta A fatal error occured. Bitcoin can no longer continue safely and will quit. << occurred EXCEPTION: 11DbException Db::get : Not enough space // My bad, PC system date was set to a few days ago,, =corrected date/time and got no error...
1736	Add I2P to -onlynet docs and make all release notes present tense
1735	After the first time the if is true, its quite useless to check the other nOffset of vSorted.
1733	
1732	
1731	I forgot to paint the bike shed...
1730	
1729	These commits: 1) prevents a possible DoS (make nodes waste CPU time checking alert signatures) attack (thanks to Sergio Lerner for finding/reporting) 2) implements theymos suggestion of a non-overrideable alert message, to be used only in case the alert key is compromised. Both thoroughly tested by me in a testnet-in-a-box environment: Verified that nodes are disconnected/banned if they send too many invalid alerts. Verified that the alert system still works properly when sent valid alerts. Verified that nId=max alerts are ignored unless they match hard-coded values. Verified that nId=max alerts work properly if they do match.
1728	Around line 167 there is already a LOCK(bitdb.cs_db) that covers everything. Re-locking is useless.
1727	`8/27/12 12:23:04.664 AM Bitcoin-Qt[38035]: -_continuousScroll is deprecated for NSScrollWheel. Please use -hasPreciseScrollingDeltas. 8/27/12 12:23:04.664 AM Bitcoin-Qt[38035]: -deviceDeltaX is deprecated for NSScrollWheel. Please use -scrollingDeltaX. 8/27/12 12:23:04.664 AM Bitcoin-Qt[38035]: -deviceDeltaY is deprecated for NSScrollWheel. Please use -scrollingDeltaY.` ` v0.6.3-beta is the version Im running. This program uses Qt version 4.7.4. Im on OS X 10.8.1 Just noticed that in the Console when looking at PHP error logs, when I switched to All System Messages. Doubt its a major issue, but just wanted to post it anyways. Not sure if it might break in future OS X versions.
1726	Keeps the "windows", "windowsxp", "windowsvista" styles. Reduces the size of a static bitcoin-qt.exe by ~400 kB.
1724	Last-minute translation updates for 0.7rc1
1723	Some qt styles have a problem with displaying the block progress, as text on a segmented progress bar is terrible to read. This mostly affects older Windows, and some Linux distributions (which also use the windows/windowsxp theme). Add a custom stylesheet as workaround, but only when one of those renderers is active, otherwise leave the theme alone (issue #1071). Before: ![](http://i47.tinypic.com/156e0p4.png) After: ![](http://i48.tinypic.com/2cwubf9.png) can you test this on Windows 7 and see whether it stays as it is?
1722	In c555400c added the fee per kb computation with the following logic: // This is a more accurate fee-per-kilobyte than is used by the client code, because the // client code rounds up the size to the nearest 1K. Thats good, because it gives an // incentive to create smaller transactions. double dFeePerKb = double(nTotalIn-tx.GetValueOut()) / (double(nTxSize)/1000.0); While the logic given in the comment is sound, there is a counter argument: It can be productive for the network to make transactions a little larger, e.g. spending additional dust inputs. With the quantized fee logic nodes could costlessly add in dust whenever they had room before the next fee increment. This makes it less costless. I think we should either specifically incentivize txout set size reductions or restore the quantized behavior. Thoughts?
1721	I did some work to extend the settings dialog with options for separate IPv6 / Tor proxy servers and now need help to update ``ApplyProxySettings()`` in optionsmodel.cpp and cover all the possible cases. I would be glad, if you can contribute here, as you did the core networking part :). As our master of Qt you can for sure also add something here. I created a branch, which contains my GUI work in an unfinished version, as I didnt even touch ApplyProxySettings(). See: ![new proxy settings in Bitcoin-Qt](http://i46.tinypic.com/x9ls0.png) It would be nice to also take a look at the used strings, so they get polished.
1720	- add a new label, which can be updated independently from the whole license information stuff - the benefit is, we dont need to re-translate that whole wall of text every year the copyright info changes - update to the same copyright string we use in the source and in the bitcoin-qt.exe meta-data information - removes an obsolete entry from the ui-file
1719	A new issue with boost::interprocess in boost 1.51: it is incompatible with Wine. Not only that, but it makes bitcoin crash out with an assertion failure: boost/interprocess/detail/windows_intermodule_singleton.hpp:145 Message: `&get_map_unlocked() == m` It occurs immediately after `new message_queue(...)`. It seems that Wine (1.4, which comes with Ubuntu Precise) doesnt have support for Windows semaphores, as it logs a message: fixme:ntdll:NtQuerySemaphore (0x320,0,0x1b3f290,0x00000008,0x1b3f2a4) stub! Which is fine, if it just meant no URI support. But as said, boost crashes the entire process. This is no issue for people running on Windows, but for us testing windows builds in Wine this is incredibly annoying. Im really getting tired of boost::interprocess issues on Windows. The whole construction with shared memory objects is overkill for the job, anyway. Bonus points for someone that re-implements qtipcserver with a simple QLocalSocket (which uses named pipes) :-) Edit: Boost 1.50 does **not** suffer from this problem, only 1.51+ does.
1718	Closes #1711.
1717	- before, we used to show them in GUI when depth >= 2, which could lead to confusion of users, as the RPC behaviour already showed the Tx Related to #1712.
1716	- The patch created in boost-win32.yml was not indented as gitian requires it to be - no longer applicable with this next change: - Move the boost::interprocess workaround to Bitcoin-Qt sources, so it works even with native builds (note that Boost 1.50+ do not have the bug). - Adjust the paths gitian-win32.yml looks for Boost to reflect new 1.49 version dependency.
1715	The transaction fee can be set to any value by any person. This may lead to the user sending a small amount of coins and accidentally paying a giant tx fee without ever realising it. See for an example of how this is done. Options for resolving this are outlined here
1714	The client dialog for sending a transaction currently only displays the amount to be transferred and not the amount for the fee. The dialog should always show the fee. See and Current dialog: Suggested dialog:
1713	It looks somewhat better to not have a missing icon. Uses the built-in icon that is also used in the dialog box itself, so doesnt cost any extra space.
1712	I was doing some tests on testnet with Bitcoin-Qt and used setgenerate true 4, to get some coins. After a short time the client displayed a balance of 50 BTC under the immature balance display. After restarting the client the display has gone and I also dont see a transaction on the overview page. When using ``listtransactions`` I see the immature balance. ![Screenshot showing immature balance bug](http://i46.tinypic.com/30m7pko.png)
1711	Zero value txouts have no incentive to redeem them and have considerable more risk of perpetually bloating the unspent txout set even compared to 1e-8 BTC outputs, less importantly they also make the worse case unspen txout set size unbounded which frustrates reasoning about the worst case scalability of Bitcoin. To mitigate these risks transactions creating (not spending) txouts with zero value should be considered non-standard.
1710	We had code to check for P2SH violations specifically, in order to not cause DoS triggers from them during the transition period. This is no longer necessary. It also improves performance for detecting invalid scripts a bit.
1709	One added space + one removed space.
1708	nIndex is int64, nKeys is int64, it would be useless to have i an int.
1707	nLoadWalletRet is already equal to DB_NEED_REWRITE (we are in an if)
1706	Equivalent code. (false == 0 ==DB_LOAD_OK)
1705	- re-order Qt Actions and connect() calls to match the real GUI layout, which makes things easier to read and understand - remove FIRST_CLASS_MESSAGING from the client - remove signMessageAction and verifyMessageAction from tabGroup as we didnt use this anyway (as tooltips are not displayed in the menu remove these too)
1703	In synchronize comment you have (Recently received block has been created): Ostatnio otrzymany blok zostala but correct one in Polish is (last letter in last word is unnecessary) : Ostatnio otrzymany blok zostal
1702	A file in directory `boost` is patched, whereas boost is unpacked to `boost_1_49_0`. Is this patch still significant? If not, it should be removed.
1701	Pull most recent translations from transifex for 0.7.0rc1. No new translations have been added, but many have been updated.
1700	... so that they can be found and edited easier in Qt creator
1699	Ive investigated issue #1462 and in my experiments, the memory allocation pattern with a many transient objects almost guarantees that after the initialization of bitcoin **only one** of the pages is actually locked. This means that most of the keying material can end up in swap. I considered two ways to address this: 1) A special memory pool (using boost::pool) of locked pages 2) Keep track of which pages are locked with a lock count I first tried (1), but it ended up non-optimal. boost::pool is very wasteful with tiny objects (in this case, char), as the minimum chunk size seems to be the pointer size, resulting in a blow-up of 8 on 64 bit architectures. As locked pages are a limited resource, this should be avoided. So I went with the second alternative. This solution is also easier to test than a full-blown custom memory pool. Ive added an autotester.
1698	Replace the checkpoint at 185,333 with block 193,000. (edited, was 195,000)
1697	Im opening this as issue, because #1673 introduces this for bitcoin-qt.exe and it would be nice to add that also for bitcoind.exe. As I dont know where to put the linker flags ``-Wl,--dynamicbase -Wl,--nxcompat``, Im asking a core dev to assist me.
1696	This is an upstream macports error that is being fixed; Im opening an issue here so I dont forget what the problem and resolution are. The underlying bug and fix: Description of the problem: Using the latest macports qt4-mac (qt4-mac-4.8.2_1+framework+quartz.darwin_10.i386.tbz2 from qmake run as: qmake RELEASE=1 USE_UPNP=1 USE_QRCODE=1 -o Makefile bitcoin-qt.pro I get a link error: /usr/bin/g++-4.2 ..... -F/opt/local/Library/Frameworks -F/opt/local/lib -lQtGui -lQtCore ld: library not found for -lQtGui WORKAROUND: Explicitly set QMAKE_FRAMEWORKDIR_QT: qmake QMAKE_FRAMEWORKDIR_QT=/opt/local/Library/Frameworks RELEASE=1 USE_UPNP=1 USE_QRCODE=1 -o Makefile bitcoin-qt.pro
1695	In -loadblock mode, ProcessBlock() is called without node to retrieve parents from, if needed. In this case, prefer to not store orphans as all, as they would just linger in RAM.
1694	Fix two potential infinite loops in the connection logic: * With -noconnect, the -connect code was trigger, but looped infinitely through the empty list of nodes * Given restrictions on which networks to connect to, if no such nodes exist in addrman, the code would loop infinitely through the addresses being fetched. Break this loop after 100 iterations. Closes #1664.
1693	Move implementation code out of bitcoinrpc.cpp to new modules.
1692	- this function converts an unsigned block-file number into a std::string containing the full path to the file - make OpenBlockFile() use GetBlockFile() Can be usefull for Ultraprune work, when we have many more block-files.
1691	Rather than having a dual-mode RPC call, create two RPC calls. Luke-Jr already updated BIP 22 to reflect this. getblocktemplate mode=template works as before. New RPC submitblock takes a <hex-data> parameter, a raw serialized block to be decoded and submitted. At Luke-Jrs request, submitblock ignores an optional second parameter, if present (an Object for future options). Tertiary RPC cleanup commits are also included.
1690	Allows the user to pass null as the second or third parameter to signrawtransaction, in case you need to (for example) fetch private keys from the wallet but want to specify the hash type. (As discussed with in IRC while testing the signrawtransaction ... SINGLE fix)
1689	This fixes issue #1688
1688	Calling signrawtransaction using "SINGLE" hash type should not sign any inputs that do not have corresponding outputs.
1687	This does two things: 1) Now does not output to debug.log if -printtodebugger flag is passed 2) Unit tests set -printtodebugger so only test results are output to stdout Note that -printtodebugger only actually prints to the debugger on Windows.
1686	
1685	- a click on "Reset Options" sets all options to the default values by removing all stored settings (QSettings), loading the defaults and saving them as the new settings - before the reset is executed the user is presented a confirmation dialog - special casing was needed for StartAtStartup
1684	As discussed on IRC. Intended to make using an external blockchain download solution just a bit easier.
1683	This extends #1607, which got recently merged, with version information for bitcoin-qt.exe (no additional files need to be modified by hand). - add version information to bitcoin-qt.rc, which is displayed on Windows, when looking in the executable properties and selecting "Details" - introduce a new clientversion.h (used in bitcoin-qt.rc to generate version information), which takes only the version defines from version.h and is included in it (to allow usage with the windres rc-file compiler) - move #define STRINGIFY(s) #s into clientversion.h as that is used in bitcoin-qt.rc and rename to DO_STRINGIZE(X) - add #define STRINGIZE(X) DO_STRINGIZE(X), which is needed to convert the version defines into a version string in the rc-file - this ensures we only need to update 1 file and have bitcoin-qt.exe version information - for RC-file documentation see: ![bitcoin-qt.exe details](http://i45.tinypic.com/2qn63hw.png)
1682	Hello, My Bitcoin wallet is having major problems. My wallet states that it isSynchronizing with Network at 99.7% and last block generated 62 days ago. I have had my bincoin wallet up 5 days and there has not been any movement. I am really frustrated. Please help. Joe
1681	
1680	This was missing and formerly the displayed message during -loadblock was just "Loading wallet...", which was a little missleading IMHO.
1679	
1678	
1677	This is a rewrite of the block storage and validation engine. Instead of blkindex.dat (a database with block tree data, and all transactions and their spendings in the active chain), it uses chain.dat (only block tree data) and coins.dat (pruned txout set). These two databases together are significantly smaller than blkindex.dat (<200 MiB), and only coins.dat is actively needed during block validation, speeding it up significantly (15 minutes for importing 185000 blocks from a local disk file). Blocks are still stored in blk????.dat files, in the same file format, but smaller files (up to 128 MiB). To prevent excessive fragmentation, they are allocated in chunks of 16 MiB, and some statistics are kept about them. To assist with reorganisation, undo files are created (rev????.dat), which contain the data necessary to undo block connections. Block pruning itself is not yet implemented, but this makes it trivial to do so; all that is required is deleting old block and undo files when certain thresholds are reached. Also note that this block pruning mechanism is different from the transaction pruning mechanism described by Satoshi. This one does not prevent a node from acting as a full node. All commits result in a functional code tree, with succeeding unit tests. The first few add some extra classes, without changing actual semantics. "One file per block" and "Multiple blocks per file" form a refactor of the block storage mechanism, with related database changes. "Do not store hashNext on disk" only introduces a forward-incompatible change that simplifies the database layout. "Ultraprune" itself contains the switch from txindex.dat to coins.dat as validation data, and contains the majority of the changes. What follows are optimizations and other some improvements, that do not effect compatibility. There are a few TODOs left (see comment below), but Id like to give the code some exposure already.
1676	Heres an example error message that might prevent bitcoind/bitcoin-qt from starting: EXCEPTION: 22DbRunRecoveryExveption DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery C:\users\omistaja\paska\bitcoin..... in Runaway exception This message is what end users can easily find and relay when confronted with their wallet not starting. Currently its very uninformative. It basically just says "there is a problem with the database". It should be fixed so it actually gives some details on the problem. For example what database file is causing the problem. Also, I dont know if thats already being done but the less important database files could just be wiped automatically when this happens so the software can at least start.
1673	- for extra security on Windows: enable ASLR and DEP via GCC linker flags GCC linker flag description: --dynamicbase The image base address may be relocated using address space layout randomization (ASLR). This feature was introduced with MS Windows Vista for i386 PE targets. --nxcompat The image is compatible with the Data Execution Prevention. This feature was introduced with MS Windows XP SP2 for i386 PE targets. Tor project is also using this. Even if we dont want this for 0.7 it should be tested and talked about for a near release IMHO.
1672	This applies on top of the coincontrol listaddressgroupings patch and makes finding eligible outputs from the groups returned by listaddressgroupings possible.
1671	Synthesis of #936, #1431, #1526, #1549, #1355, #1409, #1393, #1583, and #1647
1670	This is a rebase and cleanup of #1426 Note that while these bits are less significant numerically, they are more useful because they are likely to be unique (whereas the most significant bits will generally be zero)
1669	expressed dislike of the current/original Bitcoin-Qt name. The code currently (changed after 0.6) just claims to be "Bitcoin" which is going to further confuse users into thinking "Bitcoin" is a specific software program. Before 0.7 is released, a new name should be chosen (or the name Bitcoin-Qt restored?) and inserted in the relevant places of the software.
1668	dc1e5ad1917 changed a JSON-RPC error message to refer to ones wallet as an account. We already have enough confusion in this area, so best to fix it before 0.7.
1667	Problem: Database is about 2GB and the block index is about a GB. The database should be trimmed to help speed, but in a way that does not result in parts of the block chain disappearing completely from the network. Solution: I believe the clients need to two operating modes that deal with blocks: light and heavy. Light: Client runs using the genesis block, the blocks that contain transaction for their address and blocks that go 5 away from that block, and the last couple of blocks generated (20+). If the client stops and resumes at a later period, before old blocks are destroyed, all the blocks that the client has missed must be downloaded before deletion occurs. In addition, client needs to have the whole block chain before they can switch to Light mode. Heavy: How the client is now, downloads the whole block chain and stores it on the computer. This is the default mode. Client can switch between modes.
1665	The first time the program is run, it creates a wallet.dat file that is written unencrypted to disk. Later encryption of this wallet file, may leave plaintext fragments on the storage device due to details of the operation of the filesystem or storage device. One workaround is to create the wallet.dat file on another system perhaps using a Live CD, encrypt it, and copy this encrypted wallet over to the desired system. It would be better if the first time the program is run, it asks if the user wishes to encrypt their wallet, then asks for the passphrase, and from the start writes only the encrypted version to disk.
1664	Maybe Im doing it wrong, but if I specify "-noconnect" in an attempt to have bitcoin-qt not connect to any peers, the ThreadOpenConnections2() function goes into a tight loop that runs forever. The following 1-line change fixes the problem: diff --git a/src/net.cpp b/src/net.cpp index e10829a..fe1712a 100644 --- a/src/net.cpp +++ b/src/net.cpp -1367,7 +1367,7 void ThreadOpenConnections2(void* parg) printf("ThreadOpenConnections started\n"); // Connect to specific addresses - if (mapArgs.count("-connect")) + if (mapArgs.count("-connect") && mapMultiArgs["-connect"].size()) { for (int64 nLoop = 0;; nLoop++) {
1661	This is the last time for 0.7.0. We should avoid message changes until the release. Translators can use the remaining time to update their languages on Transifex. The other languages need to be merged from Transifex shortly before release.
1660	
1659	In the Swedish translation the first three tabs begin with the text "amp;". For example, the first tab that is called "Overview" in English reads "amp;versikt" in Swedish. The translation at Transifex looks correct, source string is "&Overview" and translation is "&versikt". The same problem is seen in some of the menu options and possibly some other places.
1658	
1657	This is a reminder to fix this before 0.7: The bitcoin-qt unit tests currently fail.
1656	While the data in background is not fully loaded, bitcoin-qt will display a balance of 0 BTC 0 unconfirmed and 0 transactions. this makes me very nervous since i interpret this as: my wallet has been emptied and i have lost all data. after about 1 minute the correct balance is displayed and the UI becomes responsive.
1655	Signrawtransaction rpc was crashing when some inputs were unknown, and even with that fixed was failing to handle all the known inputs if there were unknown inputs in front of them. This commit instead attempts to fetch inputs one at a time.
1654	E.g. attempt to signrawtransaction on a chainless node.
1652	This statistic is only reported when a new block appends onto the strongest chain. Tested by comparing bitcoind new-block results with pynode, which performs a similar calculation.
1651	They are largely useless, but they do double-check a few things that could be useful for new implementations. (and quite a few of them are duplicated, but I dont feel like looking into which ones). Now with data-driven transaction tests which consist of a list of inputs, and a serialized transaction. Again, the data-driven transaction tests are more targeted at alternative implementations than the reference client. Also pulled in a commit to make test_bitcoin useful when it fails (otherwise you have no idea why it failed, it just says failed and you have to scroll back through a ton of crap to find it).
1650	
1649	- add enableApplyButton() and disableApplyButton() to optionsdialog.{h/cpp} - they are used to ensure the Ok button does not get disabled, when Apply needs to be disabled (standard UX should allow Ok always to dismiss the dialog and only disable it, when we have a faulty proxy IP) - disable Apply after initially loading the settings, as nothing new needs to be saved - remove orphan settings from optionsdialog.ui that are default anyway
1648	This is a rework of #1128: - Transactions from or to me are given a priority boost in my own mining - Transactions *from* me are always accepted to my memory pool - Transactions to me are accepted to my memory pool regardless of fees paid
1646	
1645	**Status: Deferred until handling stuck transactions is implemented** If a transaction sent requires a fee greater than (new) maxtxfee option, aborts with an error. If started with undocumented unsupported -nosafefees option, allows JSON-RPC to set a "forcetxfee" to override the error and send anyway (with maxtxfee amount of fees only).
1644	No new languages and no ones removed, though we need to mobilize people to further help translating the non 100% languages!
1642	
1641	Add mempool P2P command, and extend getdata behavior to permit downloading of mempool transactions from the remote peer.
1640	After upgrading from OSX Snow Leopard to OSX Mountain Lion bitcoin-qt stalls on startup: Bitcoin version v0.6.3-beta (2012-06-19 16:44:55 -0400) Default data directory /Users/matt/Library/Application Support/Bitcoin Loading addresses... dbenv.open LogDir=/Users/matt/Library/Application Support/Bitcoin/database ErrorFile=/Users/matt/Library/Application Support/Bitcoin/db.log Loaded 13666 addresses addresses 3087ms Loading block index...
1639	- this adds an option under the Display tab, to enable a relative progress bar display (per popular demand) - it takes a "remaining blocks at startup" value as maximum (which is dynamic, when there are new blocks while downloading the chain) - the bars value is computed by subtracting the above value from the current remaining block count of the node converted to a positive number - update some comments - remove some orphan settings from the optionsdialog.ui file ![relative progress bar option](http://i49.tinypic.com/2mzzggx.png)
1638	If I understand the MPI format correctly, the bit (0x80) used to indicate a negative value is stored at the beginning of the bytestream, not the end. MPI format is big endian, most-significant bit (MSB) first, and the sign bit precedes all that. CastToBool() appears to check for the sign bit at the end of the bytestream, rather than the beginning: // Can be negative zero if (i == vch.size()-1 && vch[i] == 0x80) return false;
1636	- ensure warnings always start with "Warning:" and that the first character after ":" is written uppercase - ensure the first sentence in warnings ends with an "!" - remove unneeded spaces from Warning-strings - add missing Warning-string translation - remove a "\n" and replace with untranslatable ``<br><br>``
1635	- place "-?" option at first - re-work description and "\n" usage for Gavins new block creation options to better match current description syntax - ensure no "\n" is in translated strings, which is better for Transifex
1634	The new bytes are based on "11" to appeal to Gavins 11 fetish. This breaks existing testnet3 nodes as the blockchain files are versioned too.
1633	If running on the testnet, this disconnects and bans any peers that are running PROTOCOL_VERSION 60000 or earlier. This cuts way down on the number of peers that try to send you a testnet1 or 2 block chain. If PROCOTOL_VERSION is bumped before the 0.7 release, TESTNET3_VERSION should be increased to match.
1632	Just tired of seeing a bunch of tiny commits that fix one or two spelling/grammar errors, but leave many more of the same. I went over the entire git repository with a spell checker by hand and fixed a bunch (hopefully all) of spelling errors, then checkout out each instance of "s" to correct the grammar violations. Hopefully this will save time overall :)
1631	- No core strings changed since last time, so no update to bitcoinstrings.cpp - Re-add line numbers in .ts file as this is marginally easier for translators (see #1227)
1630	recepient -> recipient
1628	
1627	Due to pchMessageStart not changing for testnet3, testnet3 peers wind up filling the majority -- sometimes 100% -- of their outgoing peer slots with testnet1/testnet2 peers. This leads to basic breakdowns in block and TX relaying.
1626	The current raw transaction format is not error-robust. Its trivial to corrupt transactions accidentally (e.g. accidentally dropping characters or adding characters when copy/pasting). There are some use-case patterns where this could be quite dangerous. I prepare a txn for you to pay me some coins you control... I give it to you.. You decode and from your perspective it looks fine, but a character got dropped. You sign and transmit. Coins gone forever. The hex strings are already inconveniently enormous. Sticking a CRC or a 64bits of a truncated hash on the end wouldnt be much additional burden (and if we cared about size at all we could make them much easier to handle if they used base64 instead like our signatures). This would be a minor burden on application code, but its easily solved with a library and would close off a lot of mistakes and mischief.
1624	Seems I was wrong with my initial naming ;).
1623	From the documentation: <pre> TARGET This specifies the name of the target file. For example: TEMPLATE = app TARGET = myapp SOURCES = main.cpp The project file above would produce an executable named myapp on unix and myapp.exe on windows. </pre> I checked the makefile, no changes, but TARGET should not be empty IMHO.
1622	
1621	Deal with this mess once and for all...
1620	- This helps user to not think the client is called "Bitcoin"
1619	This patch set imports the Google LevelDB 1.5 database, refactors the transaction database code a little and then lets you pick between LevelDB or BDB via a build flag (qmake USE_LEVELDB=- to go back). On test machines, LevelDB seems to be significantly faster than BDB due to the fact that the bulk of the IO work is handled by a separate thread. The main thread just appends data to the end of a log file when writing, and the IO thread then turns logs into sorted tables and compacts them together. When indexing the block chain Bitcoin appears to be CPU bound on Windows and Linux machines, even during migration when signature checking is disabled. On my SSD based MacBook Pro the performance isnt as good and it still seems to be IO bottlenecked, which is the opposite of what Id expect. This code instructs LevelDB to use a 10-bit bloom filter per block. This expands the size of the database quite a bit, but allows a reduction in disk seeks. I havent tested different bloom filter sizes to see what works better. It is an area for future work. LevelDB is statically included because: - Upstream is not widely packaged and the build system does not support "make install", so its annoying to link against - We need custom patches to make it work on Windows. - Its important that all Bitcoin users are running on a db engine tested by us. We dont want some fraction of the network nodes to be "upgraded" but still running on BDB just because of who built their binaries.
1618	I upgraded my bitcoin client to 0.6.3, but when i open it it said error loading blkindex.dat . Could some please tell me how to fix this? Also will my bitcoins be lost from the previous bitcoin client?
1617	- be clear we dont "Show/Hide Bitcoins", but just the client window - remove the tooltip for toggleHideAction as this is not shown anyway
1616	Changes only comments.
1615	
1614	- this enables DEP on all Windows version which support the SetProcessDEPPolicy() call in Kernel32.dll - use a dynamic approach via GetProcAddress() to not rely on headers or compiler libs - this is the same way the Tor-project does it See for a detailed explanation of DEP! It is possible to enable this directly when linking, but this needs much more testing than this small patch :). I consider it a valuable 0.7 security feature on Windows. To verify if DEP is enabled for bitcoin-qt.exe you can use Sysinternals ProcessExplorer: ![verify DEP state](http://i48.tinypic.com/r8tesl.png)
1612	- If the height is in the first half, start at the genesis block and go up, rather than at the top - Cache the last lookup and use it as a reference point if its close to the next request, to make linear lookups always fast
1611	This replaces #1543, which needs a rebase and if this gets merged #1543 can be closed. Fixes #1062
1610	Trivial update, noticed it when I was browsing the code.
1609	No code changes. Fixed typos, updated/added a few links.
1608	Update the comment in GetBlockValue() to better reflect the uncertainty about the time interval between subsidy reductions
1607	- extend bitcoin-qt.rc to include meta information, which is displayed on Windows, when looking in the executable properties and selecting "Details" - does currently NOT include version information, this is scheduled for later releases - for RC-file documentation see: ![bitcoin-qt.exe meta information](http://i46.tinypic.com/znk095.png)
1606	I wanted this to create a transaction on testnet that exercised all of the SIGHASH_ modes (see txid 8ccc87b72d766ab3128f03176bb1c98293f2d1f85ebfaf07b82cc81ea6891fa9 on testnet3) It adds a fourth optional string argument to signrawtransaction, which can be ALL / NONE / SINGLE / ALL|ANYONECANPAY / etc. It just converts the string to one of the enum SIGHASH_ constants and then uses that signing mode when signing. I created that testnet transaction by: + I manually created a raw transaction with six inputs and 7 outputs + I extracted the private keys (using dumpprivkey) corresponding to the six inputs + I called signrawtransaction six times to sign each of the six inputs separately, passing in just one of the private keys and using a different SIGHASH_ mode each time. + I called sendrawtransaction to broadcast the completed transaction.
1605	Makes more sense to users, fixes #1601
1604	
1603	Just a remainder, some threads currently do not use our IMPLEMENT_RANDOMIZE_STACK macro. I guess it is a good thing to add this in the future.
1602	One day I opened the latest Bitcoin-Qt and everything broke. First of all my BTC went unconfirmed, then my confirmations went *negative*, on the bottom of the client it says "WARNING: Displayed transactions may not be correct! You may need to upgrade, or the other nodes need to upgrade." and finally it tries to download blocks which I had downloaded in the past, the 171192th block generated 123 ago and it doesnt seem to make any progress. I downloaded the client again and replaced the existing one, but nothing changed. :O Screenshot: Version: 0.6.3-beta
1601	Exactly as the title describes. When you sort the "Label" column in "Receive coins", the labels are sorted case sensitively, which means its (no label)->A->Z->a->z
1600	Right now, if one creates a new address, it will simply be added to the address list in "receive coins". It is not copied to the clipboard, nor is it highlighted. This is very annoying for two reasons. If one is creating an address to remain anonymous, you have no way to identify the newly created address from the existing ones, which makes the implementation of "one address per transaction" impossible. Secondly, since its not copied to clipboard, you have to scroll through the address list (which can be very long) to find the address you just created so you can copy it.
1599	Im asking myself and repeat a question I read on the forums, what happens if a nodes blkindex.dat grows larger than what we allow for blk000x.dat or (if that size-limit doesnt matter here) larger that the max FAT32 filesize (4 G(i)B - 1 Byte AFAIK)? Seems like "blkindex.dat" is also hard-coded in some places. Comments / ideas?
1598	
1597	...on any platform using Oracle VirtualBox. A minimum number of host dependencies are required. The gitian build process produces deterministic builds and living documentation of the build process. However gitian only runs within a Linux host environment, and has proven somewhat tricky to setup and maintain. The purpose of this pull-request is to provide a platform-independent set of scripts for creating a gitian build environment and launching builds for all platforms using Oracle VirtualBox, Vagrant (for recording configurations of VirtualBox; see and gitian LXC containers. See contrib/vagrant/README.md for details.
1596	1.0.0d -> 1.0.1b
1595	
1594	- re-work code parts that check if we have a Statusbar warning - use same variable names in the header
1593	- add a comment
1592	- this helps user to not think our Client is called "Bitcoin Wallet" - change "About Bitcoin-Qt" to "About Bitcoin" - change "Bitcoin debug window" to "Bitcoin - Debug window" - change "Client" in debug Window to "Bitcoin Core"
1591	This will display the languages in the selection as "native language - native country (locale name)", when using Qt >= 4.8 and as such fixes #1509.
1590	Modify CreateNewBlock so that instead of processing all transactions in priority order, process the first 27K of transactions in priority order and then process the rest in fee-per-kilobyte order. This is the first, minimal step towards better a better fee-handling system for both miners and end-users; this patch should be easy to backport to the old versions of Bitcoin, and accomplishes the most important goal-- allow users to "buy their way in" to blocks using transaction fees. Four params give miners control over the transaction selection process: -blockmaxsize : maximum size of blocks created (default: 250000) -blockprioritysize : how much of the block to set aside for high-priority-maybe-free transactions (default: 27000) -blockminsize : minimum size of blocks created (default: 0) -mintxfee : transactions that pay below this many bitcoins-per-kilobyte are considered "free" (default: 0.0005) Discussion thread in the Mining forums:
1589	- fixes #1560 Ive never worked with a LOCK() before ... so please help me learning this concept :).
1588	Since the last testnet reset (thats what I call testnet3 here) Im unable to fully sync the block-chain. Currently there are very few nodes which are testnet3 aware and so the number of blocks per node differs by a large amount, which I think causes this mess. I have no idea how to fix this though. Does bitcoind show this behaviour, too?
1587	
1586	DRAFT status, please help test! Trying to coordinate testing on IRC, possibly using NTP and
1585	
1584	- add part for handling of plurals - update Transifex links - small misc changes I based this on your additions from #1582.
1582	Add more detailed instructions on how to update translation files after a strings change.
1581	This should also be mentioned in the translation process, that we have to add these via the Qt Linguist app and mark them as translated there.
1580	Another base translation strings update, there have been some new strings for tor support etc
1579	Three problems: - boost-win32.yml doesnt work at all because the patch isnt indented - The #defines and #include should be moved to the relevant location in the Bitcoin code, not patched into the Boost dependency, or else native builds wont use the fix - gitian-win32.yml still references 1.47 for qmake instead of 1.49
1578	...if you give it a coinbase with "sigops" in the scriptSig, especially the multisig sigops. Those are counted in CTransaction::GetLegacySigOpCount() (which is called for coinbase txes in block connection) and are not counted in CreateNewBlock
1577	Details: Uses a src/checkpoint_def.cpp file to store a static array of checkpoints. That file is easily generate-able using -saveblockcheckpointfile and gitian builds require the file as an input.
1576	I ran the client several times with --rescan, before realizing the correct switch is actually -rescan. Why doesnt the client refuse to start and display an error when given an incorrect command line switch?
1575	Fixes #1452. Until we can make the logic water-tight *and* are notified in every case the balance might have changed (either due to blocks maturing, or outputs spent), remove the premature optimization and simply recompute the balance every half a second when the number of blocks changed. Shouldnt make any impact on performance in practice.
1574	- as the "||" operator is not known to qmake use "|" instead, which ensures the code in brackets does never get executed on Windows
1573	We use the keyword ``windows`` a lot in the project file, but Im not sure if this is supported / correct. I was not able to find a reliable source that sheds some light on my question. See: There is always ``win32`` mentioned. Same for ``mac``, which should perhaps be ``macx``. Anyway, I tried replacing all occurrences of ``windows`` with ``win32`` and it compiles fine on my local setup. Perhaps a main dev can take a look at this.
1572	- cleanup optionsmodel before adding new proxy options - place SOCKS version stuff below proxy port (IP, Port, SOCKS version) - simplyfy some parts of the code (e.g. dont check IP and port, as this is done in optionsdialog anyway, remove unneeded {} in switch/case) - small comsetic changed in the header for better readability This is what I intend to do with the proxy options (not included here): ![planned proxy options](http://i45.tinypic.com/5a5ef9.png)
1571	This pull is intended to prepare the optionsdialog for further changes to the proxy options and includes a few changes that would bloat a proxy options pull. - remove duplicate includes, that are already present in ui_optionsdialog.h - change QIntValidator to not allow 0 as port-number - re-order some function calls to match the Ui element order, for better readbility and to prepare for the addition of further IPv6 and Tor proxy options - restat warning for the language selection is only shown, when the language was changed (not on simply activating the Ui element) - modify proxy warning message "This setting..." into "Proxy settings..." - split check for object == ui->proxyIp into seperate if-clause - unify used format for comments in the code - introduce handleProxyIpValid() function, which handles UI elements and the save button states for valid/invalid proxy IPs This is what I intend to do with the proxy options (not included here): ![planned proxy options](http://i45.tinypic.com/5a5ef9.png)
1570	Using current Git master and want to send all coins from a wallet to another one. - try to send 0.0128772 BTC - message that a Tx fee of 0.001 BTC is needed, so I cant send - try to send 0.0113772 BTC (All coins - Tx fee of 0.001 BTC) - message that Tx is over size and I need a Tx fee of 0.0005 Is there a way to get the final Tx fee sum in one info message?
1569	- add signals signMessage() and verifyMessage() in addressbookpage.cpp - connect to them in bitcoingui.cpp to switch to the corresponding tab in the Sign/Verify Message dialog - make gotoSignMessageTab() and gotoVerifyMessageTab() private slots
1568	I am using bitcoin-qt 0.6.3. I often empty my wallet when sending transactions. What happens: * I try sending the full amount to see if a fee is required * I am prompted for my password * I get a dialog saying that sending the transaction cannot be sent without a fee. * I substract the fee from the full amount * I get prompted for my password * I accept the fee for the transaction * The send succeeds. What should happen: * I try sending the full amount to see if a fee is required * I get a dialog saying that sending the transaction cannot be sent without a fee. * I substract the fee from the full amount * I accept the fee for the transaction * I get prompted for my password * The send succeeds. I think it would make more sense for the transaction dialog to appear first, as I am using a long passphrase. Once the password is entered, the transaction should always go through. Having a "substract fee from sent amount" button would also be much better than simply saying the coins cannot be sent.
1567	SerializeHash used to create a memory-backed CDataStream, serialize the object (almost always a CTransaction) to it, and then feed it to SHA256. As most of the time is actually spent in allocating/deallocating the buffer, it is better to do the SHA256 in-place. That is what CHashWriter does. On my system, in ultraprune running on a tmpfs-backed datadir, this alone reduces total CPU time spent during import of 185k blocks by 4-5%.
1566	
1565	This fixes compatibility with opensshs socks5 proxy and tors .2.3.x branch.
1564	- add IMPLEMENT_RANDOMIZE_STACK for ipcThread() - log / print boost interprocess exceptions - use MAX_URI_LENGTH in guiconstants.h (also used in qrcodedialog.cpp) - remove unneeded includes and ipcShutdown() from qtipcserver.cpp - fix a small mem-leak by deleting mq before re-using it - make ipcThread() and ipcThread2() static functions - add some more comments This is intended to improve some parts of our current IPC code, mostly security wise, it does not change the URI handling behaviour. I compiled this on Windows and made some tests with Bitcoin-Qt, everything okay.
1563	- add -s flag as we also use a static build in makefile.mingw As we now use Boost 1.49 on Windows I think this should be updated as well.
1562	Please dont close this, it gives an example for jenkins to test that (obviously) doesnt build. Ill close it in a day or two when jenkins is working.
1560	It is set in qt settings without any locks, and is read in various threads within any number of functions/threads/locks.
1559	when these are non-zero. Fixed a minor mem leak. Relates to #837 and #1475.
1558	jrmithdobbs found and fixed an issue with socks sending a null terminator and breaking tor. Just opening this so it isnt forgotten.
1557	This is based on #1514 and adds fixes to bitcoin-qt.pro to build with clang+lto without editing makefiles. After this, you can use: qmake bitcoin-qt.pro USE_CLANG=1 USE_LTO=1 && make or make -f makefile.unix CXX=clang++ LDFLAGS="-use-gold-plugin" CXXFLAGS=-emit-llvm Building bitcoind requires ld-gold, however bitcoin-qt does not. Motivation here is a speedup: clang-lto: " block index 6523ms" gcc-lto: " block index 8497ms" That said, \<gmaxwell\> Seriously, every time Ive seen a major speedup with clang it was miscompiling the code. Still its interesting that there is a speedup that large, and making it easier to compile using clang is not bad.
1556	I get those on Windows when compiling with IPv6 support enabled: Warning:dereferencing pointer sockaddr.502 does break strict-aliasing rules [-Wstrict-aliasing] ``SOCKET hSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);`` Warning:dereferencing pointer sockaddr.1359 does break strict-aliasing rules [-Wstrict-aliasing] ``SOCKET hListenSocket = socket(((struct sockaddr*)&sockaddr)->sa_family, SOCK_STREAM, IPPROTO_TCP);``
1555	(aside from some boost::thread ones on win32) Fixes: src/net.h: In member function void CNode::EndMessage(): src/net.h:374: warning: invalid access to non-static data member CMessageHeader::nMessageSize of NULL object src/net.h:374: warning: (perhaps the offsetof macro was used incorrectly) src/net.h:380: warning: invalid access to non-static data member CMessageHeader::nChecksum of NULL object src/net.h:380: warning: (perhaps the offsetof macro was used incorrectly) src/net.h:381: warning: invalid access to non-static data member CMessageHeader::nChecksum of NULL object src/net.h:381: warning: (perhaps the offsetof macro was used incorrectly) Or, put better by clang++: src/net.h:377:46: warning: offset of on non-POD type CMessageHeader [-Winvalid-offsetof]
1554	Pull request #1486 contains a bunch of BlueMatt commits in a stack. Pulled out this one out of the stack, and rebased it on top of current HEAD.
1553	Look for -MD at This just explicitly sets the output of -MMD using -MF to the default of where the output would otherwise have gone.
1552	- remove "#include <QString>" as this is included in the header - add some missing plural forms that can be translated - change "yours" into "own address", which is easier to understand and translate in that context - cleanup translatable strings to not include HTML or unneeded chars (e.g. ":") - resize TransactionDescDialog a little (remove unwanted line-breaks with non english translations)
1551	This adds SHARED_LOCK, TRY_SHARED_LOCK, and UPGRADE_LOCK to complement LOCK and TRY_LOCK. It implements the many-readers, single-writer model where any thread holding a LOCK excludes other threads from a SHARED_LOCK, but many threads can hold a SHARED_LOCK. Only one thread can hold a UPGRADE_LOCK, it can be held while others hold a SHARED_LOCK, but it cannot be held while another thread holds a LOCK. This should create tons of low-hanging fruit for optimization, even though it doesnt do any itself.
1549	Useful Changes: * Moves the DNS lookup of -addnode nodes into the repeated loop, allowing -addnode to follow DNS changes. * Try more than the first address for a DNS -addnode. Two new RPC commands: * addnode <node>. Adds <node> the same as if -addnode were used. Note that it can take up to two minutes before the addnode thread runs again and connects to the new node. * getaddednodeinfo [node]. Gets the list of added nodes including whether they are connected and to which node they are connected. Or gets the list of connections to [node] given [node] is specified in the same way as with -addnode/addnode. eg: getaddednodeinfo dnsseed.bluematt.me [ { "addednode" : "dnsseed.bluematt.me", "connectedto" : [ "95.154.99.150:8333", "80.221.217.69:8333" ] } ] or getaddednodeinfo [ { "addednode" : "10.232.4.10", "connectedto" : [ "10.232.4.10:8333" ] }, { "addednode" : "dnsseed.bluematt.me", "connectedto" : [ "95.154.99.150:8333", "80.221.217.69:8333" ] } ]
1548	In the most obvious way possible.
1547	I see bitcoin project trying to go -Wall (and related) free, POSIX, etc. So here are two from the unmodified 0.6.x branch (and likely master) that can be fixed... net.cpp: In function bool GetMyExternalIP(CNetAddr&): net.cpp:191: warning: pszKeyword may be used uninitialized in this function net.cpp:190: warning: pszGet may be used uninitialized in this function I presume this applies to FreeBSD 9.x too. Thanks.
1546	Bitcoin will not make an outbound connection to a network group (/16 for IPv4) that it is already connected to. This means that if an attacker wants good odds of capturing all a nodes outbound connections he must have hosts on a a large number of distinct groups. Previously both inbound and outbound connections were used to feed this exclusion. The use of inbound connections, which can be controlled by the attacker, actually has the potential of making sibyl attacks _easier_: An attacker can start up hosts in groups which house many honest nodes and make outbound connections to the victim to exclude big swaths of honest nodes. Because the attacker chooses to make the outbound connection he can always beat out honest nodes for the consumption of inbound slots. At _best_ the old behavior increases attacker costs by a single group (e.g. one distinct group to use to fill up all your inbound slots), but at worst it allows the attacker to select whole networks you wont connect to. This commit makes the nodes use only outbound links to exclude network groups for outbound connections. Fancier things could be done, like weaker exclusion for inbound groups... but simplicity is good and I dont believe more complexity is currently needed.
1545	* fix #1544 * Change send buffer default to 1M, as the send buffer is more often maxed now.
1544	The majority of git HEAD (eca96d71187ddd053fa3be0e9e396b4a700d9ae0) debug messages on a public node are now from one single source: [jgarzik@eu3 src]$ wc -l /spare/bitcoin/data/debug.log 7895 /spare/bitcoin/data/debug.log [jgarzik@eu3 src]$ grep -c socket send buffer full warning /spare/bitcoin/data/debug.log 2375 Workaround is obvious, delete the printf() call in net.cpp.
1543	The buttons at the bottom of the window are too small for the text they contain if the French locale is used, as discussed on issue #1062. This resizing seems to fix the problem, a screenshot showing the result follows: ![Desktop screenshot with the main and re-sized windows](http://ompldr.org/vZWtldQ/desktop_with_bitcoin.gif)
1542	I consider this a proposal to fix #1064 to not have the bad resize quality, when resizing the current splash screen image. I know we want to get rid of the splash screen in the future, but perhaps this is worth a quick discussion. I was not too sure about the license stuff, so perhaps you guys can help me out there :).
1541	This is the output, when compiling in Qt creator (Bitcoin-Qt) Warning:comparison between signed and unsigned integer expressions [-Wsign-compare] serialize.h: script.h: If a dev can give a hint on how to fix the warnings, Im willing to create a patch.
1540	
1539	"its state" should be "its state". No other changes.
1538	The first commit maintains a per-node byte count, returned as "recvbytes" and "sendbytes". The second commit maintains per-node, per-msg counters, returned as "recvmsgs" and "sendmsgs" objects. Example output:
1537	
1536	This code helps with reducing dust spam. The original code will make the transaction fee become the minimum fee if any output is less than a cent. This makes it costly to send dust spam, but theres an edge case. The attacker can send a transaction with 1000 outputs of one satoshi each. The transaction size is huge but the fee is only the base fee. This fix will increase the fee by the base fee amount for each output thats less than a cent.
1534	Most of the things that reach all the way into CTransaction::CTXOut::nValue should not be doing this. The methods that do this should not technically be directly interacting even with CTXOut, except for the ones that are in CTransaction. Making nValue private will prevent more "bad" code from entering the client, and is the start of fixing this problem for good. I have made a pull request but I think it was prematurely closed.
1533	This is a change that will make it much easier to maintain alternative chains for which nValue is not a constant. Initially this will be used to implement some of the models found in Appendix B of the document below. Allowing this will enable tracking of more complexly defined financial assets.
1532	
1531	This pull request adds getpeerinfo, initially returning low-hanging fruit available inside each CNode. Once this initial form is OKd, additional commits will add per-message statistics similar to those seen in now-closed req #1510. Example output: ``` [ { "addr" : "64.27.57.122:8333", "services" : "1", "last_send" : "1340943593", "last_send_empty" : "1340943593", "last_recv" : "1340943593", "time_conn" : "1340943569", "version" : 60001, "subver" : "/Satoshi:0.6.3/", "inbound" : false, "time_release" : "0", "start_height" : 186712, "banscore" : 0 }, { "addr" : "178.152.104.61:8333", "services" : "1", "last_send" : "1340943593", "last_send_empty" : "1340943593", "last_recv" : "1340943592", "time_conn" : "1340943591", "version" : 40000, "subver" : "", "inbound" : false, "time_release" : "0", "start_height" : 186712, "banscore" : 0 } ] ```
1530	Fix a couple typos
1529	Segfault(s), build errors, and a locking issue.
1528	If I run: bitcoind walletpassphrase $password 60 and make a payment, then 58 seconds later run it again to make another payment, I get an error message: error: {"code":-17,"message":"Error: Wallet is already unlocked."} then, a couple of seconds later, when I go to make the 2nd payment, the first unlock has timed out, causing the payment to fail. Better would be if the 2nd call to walletpassphrase just reset the timeout, either to the specified new timeout, or to max(old-expire-time, new-expire-time). As it is, all I know is that the wallet is currently unlocked, but may well be locked again by the time I get to use it.
1527	The issue was mentioned on the StackExchange - . Calling "walletpassphrase" allows one to unlock the wallet for a brief. However, calling it again before the time expires causes an error to be returned and the unlock time is not extended. This could cause some problems with an application that would want to execute calls to the bitcoind instance in parallel. If the application was to lock the wallet after it is done using it, another threat of the application could suddenly find the wallet locked when it shouldnt be. If the wallet is left unlocked, the other application could not extend its unlock time and bitcoind could lock it too soon. I propose either changing the functionality of "walletpassphrase" to extend the wallet unlock time to the longest of the two or more potential calls it receives, or introducing a new API call that could accomplish a similar goal.
1526	This builds on #1525 (the framework for smoothly rolling out new chain/transaction rules), defining "nVersion=2" blocks that include the block height as the first bytes of their coinbase. Putting the height in the coinbase is desired for at least two reasons: 1. It guarantees that every subsequent block and transaction hash is unique. 2. It can be used to better reason about plausible difficulty for not-yet-connected blocks. The format of the height is "serialized CScript" -- first byte is number of bytes in the number (will be 0x03 on main net for the next 300 or so years), following bytes are little-endian representation of the number. Only blocks with nVersion=2 are expected to have the height as the first bytes, and the "must have the height in the coinbase" rule is only enforced if nVersion=2 blocks are a super-majority (75% of last 1,000 blocks on main network) of the blocks immediate ancestors. This pull also contains a rule to REJECT nVersion=1 blocks once 95% of hashing power is producing nVersion=2 blocks. That means the last 5% of hashing power who refuse to upgrade will get orphaned. All of this wont affect users/merchants at all, they will happily accept nVersion=1 or nVersion=2 blocks. I tested this with a testnet-in-a-box setup, creating a 100-block-long nVersion=2 chain and then making sure that: 1. nVersion=1 blocks were accepted 2. nVersion=2 blocks that included the wrong block height were rejected (I hacked a bitcoind to test that).
1525	These are planning-ahead changes to make future upgrades smoother. See for full reasoning. The two changes in this pull are: 1. Treat transactions with a version number greater than 1 as non-standard (dont mine or relay them). 2. Warn the user (via the existing Qt/RPC GetWarnings() mechanism) if the blocks in the blockchain are a new version that this bitcoin doesnt understand.
1524	Platform: Fedora 16, x86-64, non-GUI (bitcoind) build Within the last ~48 hours, git HEAD started crashing on shutdown: 06/27/12 17:54:16 Added 1 addresses from 174.56.21.146: 288 tried, 11796 new 06/27/12 17:54:16 CTxMemPool::accept() : accepted 3b0b194bea (poolsz 15) 06/27/12 17:54:18 connection timeout 06/27/12 17:54:18 ThreadRPCServer method=stop 06/27/12 17:54:18 ThreadRPCServer exited 06/27/12 17:54:18 Flush(false) 06/27/12 17:54:18 [log stops here; bitcoind has exited]
1523	My last pull request was incomplete, so Ive reopened this one with, hopefully, all the necessary changes.
1522	Since upgrading Ive been having an issue where the GUI disappears completely. For example, Ill be using Bitcoin-Qt, then exit it using the red cross. If I then click on Bitcoin in the dock, the GUI no longer shows up. It has definitely been selected though, because the task bar changes to Bitcoin and shows Bitcoin options. Anyone else been having a similar problem?
1521	Its seems 0.6.3rc1 would quit with no reason, ive saw this both on Windows7 32bit & Windows XP .
1520	That patch has been broken for a long, long time (forever?) and doesnt make sense.
1519	![new language selection](http://i50.tinypic.com/27x4j8g.jpg) The language and country names are displayed always in english, which seems to be a Qt limitation. Fixes: #1509
1518	![updated QRCodeDialog](http://i50.tinypic.com/2l8vggy.jpg) - remove unused #include <QDebug> and lblBTC label - update Bitcoin input field to a BitcoinAmountField to allow Bitcoin unit selection - use BitcoinUnits::format for the resulting amount parameter in the generated URI (always use BTC as per BIP21) - move MAX_URI_LENGTH and EXPORT_IMAGE_SIZE to guiconstants.h - add OptionsModel in AddressBookPage and use it in on_showQRCode_clicked() to pass it to QRCodeDialog - add OptionsModel in QRCodeDialog to enable display unit updates - add updateDisplayUnit() slot to be able to imediately update currently set bitcoin unit - make all labels in the UI-file plain text - resize dialog to match for an updated layout (fields are now stacked and new field) - remove unused parameters from private slots - only enable save button, when QR Code was generated - show message when entered amound is invalid - add read-only QPlainTextEdit field to output generated URI Fixes: #1506
1517	
1516	- add noui.cpp to SOURCES (to see / edit the file) - remove -silent when doing lrelease (to see possible warnings / errors) - re-word a comment and remove a space
1515	These thread names are visible in gdb when using info threads. Additionally both top and ps show these names *unless* told to display the command-line instead of task name.
1514	Passing linker-arguments when only compiling will cause warnings with Clang. This change fixes those. Specifically this addresses warnings like these: clang: warning: -Wl,-z,relro: linker input unused when -c is present clang: warning: -Wl,-z,now: linker input unused when -c is present clang: warning: argument unused during compilation: -pie
1513	When running the windows client 0.62 I get the following error shortly after the Loading Block Index... screen: A fatal error occured. Bitcoin can no longer continue safely and will quit. EXCEPTION: NSt8ios_base7faillureE ReadCompactSize(): size too large Problem signature: Problem Event Name: APPCRASH Application Name: bitcoin-qt.exe Application Version: 0.0.0.0 Application Timestamp: 4d44aa00 Fault Module Name: bitcoin-qt.exe Fault Module Version: 0.0.0.0 Fault Module Timestamp: 4d44aa00 Exception Code: 40000015 Exception Offset: 00ef4e1a OS Version: 6.1.7601.2.1.0.768.3 Locale ID: 6153 Additional Information 1: c4bb Additional Information 2: c4bb9ef13a8851680a056abd266bba35 Additional Information 3: 1095 Additional Information 4: 109595c20661a244f0b8c7c7a7fb1aa5 Running 0.62 on Win7, can send debug.log over if needed.
1512	This enables bundling multiple JSON-RPC requests within a single HTTP request, inside a JSON array. The response is a JSON array, containing one JSON-RPC response per input request. Specification: Testing notes: I have done a quick "it works" batch test with curl, as well as the usual RPC testing to make sure nothing broke. More elaborate testing is welcome.
1511	Output one message per getdata, not one message per inv entry.
1510	The returned data is 1. Per-message arrays. Index 0 is total number of $ThisType messages received since program start (or uint64 counter wrap). Index 1 is total byte count since program start (or uint64 counter wrap). They are returned as strings due to unfortunate JSON implementations in the field that do not handle unquoted uint64 numbers correctly. 2. Peer information. Returns number of inbound, outbound and total peers. Total peer count is equivalent to RPC getconnectioncount.
1509	["To make it more user friendly when selecting a display language, I suggest putting words (English, Greek, etc) instead of codes (en, el_gr, etc)."](https://bitcointalk.org/index.php?topic=89099.msg983926#msg983926)
1508	The OptionsModel::data that set it has changed. Now its ```C++ case ProxyPort: { CService addrProxy; if (GetProxy(NET_IPV4, addrProxy)) return QVariant(addrProxy.GetPort()); else return 9050; } ``` GetPort() returns an unsigned short, that is upcasted by the QVariant (that doesnt directly support shorts)
1507	Im missing -debugnet and a description what it does in std::string HelpMessage() in init.cpp. Should be below that line: The switch was implemented with #1458.
1506	I think the lnReqAmount should be formatted as the the other fields that accept bitcoin amounts, so with an up-and-down field that autocorrects "." and "," (or even better with a BitcoinAmountField so that you can choose the unit). As is you can insert spaces in the lnReqAmount and the spaces will be used to calc the QR Code (because the lnReqAmount.text() is used directly)
1504	The example of using curl to talk to bitcoind on the wiki works with 0.6.3, does not work with git HEAD: curl --user user --data-binary {"jsonrpc": "1.0", "id":"curltest", "method": "getinfo", "params": [] } -H content-type: text/plain; git head gives: curl: (52) Empty reply from server
1503	Bip16 and Bip30 had early activation dates for testnet, but with the reset they might as well use the same dates as the main network.
1502	This should enable remote services to have a full view of the network, either via getinfo/getblock or via this RPC call, getrawmempool.
1501	
1500	sizeof(const char*) == 4 or 8 (on "sane" processor architectures) :-), sizeof(const char[]) is what you want. As written the first substring was "04" and the second was "88c2" (on 32 bits architectures) And I have changed the +2 in +1 so that the comment is right.
1499	the proxy feature fails in v0.6.3rc1
1498	This pull request adds support for a [CJDNS](http://cjdns.info/) network type modeled after the existing support for tor and i2p networks. Using "-onlynet=cjdns" and relevant -externalip, -bind and -addnode, allows running a bitcoind that communicates over cjdns only. A cjdns/ip4 bridging node is running on fca5:372b:57be:78aa:e490:6b0f:da2a:c882 and can be used for testing. An example command for running a node that communicates over cjdns: ./bitcoind -onlynet=cjdns -addnode=fca5:372b:57be:78aa:e490:6b0f:da2a:c882 -bind=fc46:96cb:122a:4eff:fa50:24c4:2436:e564 -externalip=fc46:96cb:122a:4eff:fa50:24c4:2436:e564 The bind and externalip switches should be changed to your own cjdns address of course.
1497	Since the minimum signed integer cannot be represented as positive so long as its type is signed, and its not well-defined what happens if you make it unsigned before negating it, we instead increment the negative integer by 1, convert it, then increment the (now positive) unsigned integer by 1 to compensate recently introduced this potential-bug in #1298, so Id appreciate if he could comment (did not get a response on IRC)
1496	I dont have a C++ environment to test it, but Im quite sure it should be ==.
1495	- add EC_KEY_free() in CKey::Reset() when pkey != NULL - init pkey with NULL in CKey constructor Fix for #1474
1494	As an alternative to req #1493, this set of commits pushes the lock down into each RPC function itself. From there, locking may be improved on a case-by-case basis.
1493	Use with stop and help RPCs. This provides a facility to individually evaluate the locking for an RPC, and potentially make it more parallel.
1492	Trying to package the 0.6.3 release on my mac: Traceback (most recent call last): File "contrib/macdeploy/macdeployqtplus", line 728, in <module> disk.update(registering_applications=False) File "build/bdist.macosx-10.5-x86_64/egg/appscript/reference.py", line 498, in __call__ appscript.reference.CommandError: Command failed: OSERROR: -1712 MESSAGE: Apple event timed out. COMMAND: app(u/System/Library/CoreServices/Finder.app).disks[Bitcoin-Qt].update(registering_applications=False)
1490	
1489	This [re]moves a lock and a direct mempool.mapTx access, by copying the TX memory pool contents into a temporary vector, for use when building a new block inside CreateNewBlock(). In addition to holding CTxMemPool::cs for a shorter amount of time, this makes it easier to parallelize CreateNewBlock() -- something already done in widely circulating miner-pool patches. The cost: memcopying the TX memory pool at each CreateNewBlock() invocation (each getwork / getmemorypool new-work request).
1488	It seems it wasnt ever used since 0.1.5.
1487	Added Headers to HTTPReply() Access-Control-Allow-Origin: Access-Control-Allow-Headers: Specify the origin with new command line option -rpcorigin defaults to localhost only. These headers are needed for make RPC requests from a browser. More info: Use cases are apps such as and a feature I would like to implement for
1486	Based on #1233 and #1405 (mostly just because I happened to be on that branch when I started and didnt feel like rebasing)... KCacheGrind screenshot of partial block downloads via -loadblock of just the block commit thread (the bottleneck) on tmpfs (note the highlighting of calls to SHA256): Before: After: (note that the single GetHash() on the block being committed goes from being 2.53% of the total cpu cycles to 5.2% of the total cpu cycles, calls to libcrypto.so.1.0.0 goes from 45.31% of cpu cycles to 14.52% and the total % of the commit block thread goes from 65.69% to 42.65%)
1485	As written if you make a new_size(10) the mruset will be reduced to up to 9 elements (the while will exit when !(queue.size() >= 10) so (queue.size() < 10). This "feature" of reducing the mruset length isnt used, so the impact on the program should be zero.
1484	These are confirmed working by numerous testers now on 10.5, 10.6, and 10.7, including being part of 0.5.6rc2 testing.
1483	This is kind of an addition to #1434 and fixes #1482.
1482	1. Switch to Transactions tab 2. Open Settings->Options... 3. Switch to Display tab in Options 4. Change "Unit to show amounts in" to mBTC 5. Click "Apply" 6. Observe the "Transactions" tab in the main window has not changed yet
1481	
1480	
1479	This harmonizes ``CWallet::GetImmatureBalance()`` with ``CWallet::GetBalance()`` and ``CWallet::GetUnconfirmedBalance()``.
1478	...a SIGNAL, when they changed
1477	The code which soft disabled address discovery/upnp when not listening was instead disabling it when listening.
1476	Posted this on bitcointalk: When sending coins from one of your addresses to another one of your addresses, the client only displays an entry saying "transaction to yourself" without listing the amount or the from/to address. While this isnt a bug, it makes keeping track of your coins difficult. Blockchain.info for example lists the transaction just like every other one; I suggest that the client should do the same. I sent some coins (using coincontrol) from one of my addresses (A) to another person (B) and decided to send the leftover amount (essentially the change) to one of my addresses (C). The transaction to the other user just shows up fine in the transactions tab, however the one to myself is missing in the list. Since the involved balances are all correct (A to B is ok, change went to C, A is empty), I assume its just not displayed in the transaction list.
1475	As no one responds in #1432, I decided to create a pull for further discussion! - add GetImmatureCredit() function in CWalletTx - include clientModel in overviewpage and sendcoinsdialog - rename model to walletModel in overviewpage and sendcoinsdialog - update displayed balances when numBlocksChanged() SIGNAL occurs (as an immature balance matures via new blocks and not new Tx) on overviewpage and sendcoinsdialog - optimize handling of cached balances in walletmodell
1474	(from key.cpp) ```C++ void CKey::Reset() { fCompressedPubKey = false; pkey = EC_KEY_new_by_curve_name(NID_secp256k1); if (pkey == NULL) throw key_error("CKey::CKey() : EC_KEY_new_by_curve_name failed"); fSet = false; } ``` Clearly if before calling Reset() with pkey != null then you have a memory leak (the pkey value is overwritten). The problem is that, for example, CBasicKeyStore::GetKey() calls Reset() on an already instantiated CKey &keyOut. There should be a EC_KEY_free(pkey); like in CKey::SetSecret(), and in CKey::CKey() before calling Reset() pkey shoud be initialized to NULL.
1472	Without detachdb and rm -r <these>, breaks things and crashes. database/ db.log .lock debug.log addr.dat wallet.dat __db.* Bitcoin version v0.6.2.2-unk-beta () Default data directory /.../.bitcoin Loading addresses... dbenv.open LogDir=/.../.bitcoin/database ErrorFile=/.../.bitcoin/db.log ************************ EXCEPTION: 11DbException Db::open: Invalid argument bitcoin in AppInit() terminate called after throwing an instance of DbException what(): Db::open: Invalid argument sh: abort (core dumped) file unknown has LSN 38/7968116, past end of log at 1/28 Commonly caused by moving a database from one database environment to another without clearing the database LSNs, or by removing all of the log files from a database environment __db_meta_setup: /.../.bitcoin/addr.dat: unexpected file type or format [New Thread 28801140 (LWP 100964/initial thread)] #0 0x2873e9a7 in kill () from /lib/libc.so.7 #1 0x2852d397 in raise () from /lib/libthr.so.3 #2 0x2873d4da in abort () from /lib/libc.so.7 #3 0x285a0880 in __gnu_cxx::__verbose_terminate_handler () from /usr/lib/libstdc++.so.6 #4 0x285a508a in std::set_unexpected () from /usr/lib/libstdc++.so.6 #5 0x285a50d2 in std::terminate () from /usr/lib/libstdc++.so.6 #6 0x285a4f58 in __cxa_rethrow () from /usr/lib/libstdc++.so.6 #7 0x0816d2ea in PrintException (pex=0x288251b0, pszThread=0x82f4cfa "AppInit()") at util.cpp:792 #8 0x08087625 in AppInit (argc=2, argv=0xbfbfedf0) at init.cpp:113 #9 0x0808766d in main (argc=Cannot access memory at address 0x3) at init.cpp:96
1471	This lists the capabilities of the remote node, in the form of a vector<string> list of commands advertised by remote node.
1470	This adds the "mempool" P2P command, which returns the first 50,000 entries in the TX memory pool (CInv vectors are capped at 50,000 already). SPV clients and other nodes may use this command following a block sync-up, to ensure they have the latest snapshot of the collective network.
1469	This pull merges the currently seperate dialogs for signing and verifying a message into a single tabbed dialog. (new) Features: - add UI-feedback via QValidatedLineEdit - copy button for generated signature was moved to the signature output field - add an addressbook button to verify message tab - input fields are now evenly ordered for sign and verify tabs - update FIRST_CLASS_MESSAGING support to ensure a good UX - add a button and context menu entry in addressbook for verify message (to be consistent with sign message) - focus is now only set/changed, when clearing input fields or adding an address via addressbook - re-work / update some strings - ensure model gets initialized in the SignVerifyMessageDialog constructor - add checks for a valid model to both addressbook buttons - remove unneeded includes for Qt GUI elements that are listed in ui_signverifymessagedialog.h anyway Todo: - generalize some functions, as some use nearly identical code for sign / verify See: ![tabbed sign- / verifymessage window](http://i47.tinypic.com/2qlzfb8.jpg)
1468	********* Start testing of URITests ********* Config: Using QTest library 4.7.4, Qt 4.7.4 PASS : URITests::initTestCase() FAIL! : URITests::uriTests() GUIUtil::parseBitcoinURI(uri, &rv) returned FALSE. () Loc: [src/qt/test/uritests.cpp(24)] PASS : URITests::cleanupTestCase() Totals: 2 passed, 1 failed, 0 skipped ********* Finished testing of URITests ********* To get the unit tests compiling I had to: diff --git a/src/qt/test/uritests.cpp b/src/qt/test/uritests.cpp index 70c20be..86936d4 100644 --- a/src/qt/test/uritests.cpp +++ b/src/qt/test/uritests.cpp -47,7 +47,7 void URITests::uriTests() uri.setUrl(QString("bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?amount=100&label=Wikipedia Example")); QVERIFY(GUIUtil::parseBitcoinURI(uri, &rv)); QVERIFY(rv.address == QString("175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W")); - QVERIFY(rv.amount == 10000000000); + QVERIFY(rv.amount == 10000000000LL); QVERIFY(rv.label == QString("Wikipedia Example")); uri.setUrl(QString("bitcoin:175tWpb8K1S7NmH4Zx6rewF9WQrcZv245W?message=Wikipedia Example Address"));
1466	We should use some newer screenshots and change User Interface wxWidgets to Qt.
1465	
1464	![SSL version in debug window](http://i50.tinypic.com/23j4qye.jpg)
1463	Former code sent 0 as nonce, which was serialized as 32-bit. Fixes #1455.
1462	From > There is no lock count for virtual pages, so multiple calls to the VirtualUnlock function are never required to unlock a region of pages. And remembering that a page in Windows is 4kb, and that the keys we use are much much smaller, we get that if you allocate two private keys that get to be in the same memory page and then one of the two is freed, it will probably VirtualUnlock the other key. Woops.
1461	On Linux/Mac the command-line options were printed to stderr when the button was pressed in the debug window, resulting in confusion. This is fixed in this commit by adding a separate method.
1460	From guiutil.cpp if(uri.startsWith("bitcoin://")) { uri.replace(0, 10, "bitcoin:"); } (where uri is a QString) now, the test is quite wrong. First it is a case sensitive test, but scheme names in URI are case insensitive (so BITCOIN:// is the same as bitcoin://). It should be uri.startsWith("bitcoin://", Qt::CaseInsensitive). Second (but this I havent tested), if QUrl works as other url parsers it trims the string before parsing it, so "\n\r\t bitcoin://something" is the same as "bitcoin://something", so a uri.trimmed(); before the if wouldnt probably be bad (but note that uri.trimmed()).
1459	The current order of menu options in the tray menu doesnt really match expected usage patterns, this commit changes it to more logical order. - Toggle show/hide first (unchanged) - Then, send/receive coins actions, which are the critical functionality of bitcoin - Then, sign/verify message - Then finally the options, and closing with the debug window
1458	Prior to this change, each TX typically generated 3+ debug messages, askfor tx 8644cc97480ba1537214 0 sending getdata: tx 8644cc97480ba1537214 askfor tx 8644cc97480ba1537214 1339640761000000 askfor tx 8644cc97480ba1537214 1339640881000000 CTxMemPool::accept() : accepted 8644cc9748 (poolsz 6857) After this change, there is only one message for each valid TX received CTxMemPool::accept() : accepted 22a73c5d8c (poolsz 42) and two messages for each orphan tx received ERROR: FetchInputs() : 673dc195aa mempool Tx prev not found 1e439346fc stored orphan tx 673dc195aa (mapsz 19) The -tracenet option, or its superset -debug, will restore the full debug output.
1457	Using OSX 10.7.4, after upgrade from 0.6.2 beta the following error shows up when I open the Bitcoin-Qt. --- A fatal error occured. Bitcoin can no longer continue safely and will quit. EXCEPTION: NSt8ios_base7failureE CDataStream::read() : end of data bitcoin in Runaway exception --- Any idea how to fix this? I have the backup and tried to uninstall the app with AppCleaner and reinstall, but the error still there.
1456	Implement listunspent / getrawtx / createrawtx / signrawtx, to support creation and signing-on-multiple-device multisignature transactions. See for the test plan. See for the API design.
1455	Running testnet3-in-a-box with two nodes, latest git HEAD, Im getting this in my debug.log: ProcessMessages(ping, 4 bytes) : Exception CDataStream::read() : end of data caught, normally caused by a message being shorter than its stated length ProcessMessage(ping, 4 bytes) FAILED
1454	Using v0.6.2 As with any program that crashes, if you mouse over the old icon it disappears.
1453	Via gitian-downloader. Expects gitian-updater.exe to be available at $INSTDIR/gitian-updater/gitian-updater.exe and gpg2.exe at $INSTDIR/gitian-updater/GnuPG/gpg2.exe. Moves bitcoin to $INSTDIR/Bitcoin ie C:\Program Files\Bitcoin\Bitcoin\bitcoin-qt.exe gitian-updater.exe is distributed in binary form, built via cx_Freeze, meaning it depends on the security of python binaries from , cx_Freeze binaries from and pyyaml from . gpg2.exe is in binary form from . Also depends on
1452	When I send all coins from my wallet the displayed balance on the overviewpage is not updated. After a restart its fine. Seems like a missing SIGNAL-handling?
1451	- set autoDefault to false for the buttons that do not need this
1450	When I minimize or "close" the Bitcoin client, I can no longer open the client without having to terminate it and re-launch it. If it was minimized, the window will come back up totally white with no controls on it, and if it was closed the window will not open when I click the system tray icon. I am using a custom shell in place of Windows Explorer called Xoblite, and its based on BlackBox as far as I know. The previous client that I used, "Bitcoin 0.3.21 BETA", worked fine. The only other program I had a problem like this with was Skype before it updated recently. Other statistics that might be useful, maybe: Windows 7 x64 Professional ATI graphics card Is there any way I can get more information to help diagnose the issue?
1449	This is necessary as any strings have changed since last time. Also the python script used to extract bitcoinstrings.cpp, extract_strings_qt.py now sorts the strings before generating the output file. This results in more deterministic output and thus smaller diffs.
1448	- remove translation for fr_FR, which was removed on TX
1447	The process is a renamed bitcoin-qt binary, version v0.6.1-243; compiled on ubuntu, pulled from changeset gd6615a5: I realize that without a dump there is probably not too much that could be done, and I am reluctant to publish that for security reasons. Also, this is not an official build, so again, there is probably not too much that could be done. So if you are to close the ticket without response, I understand. Faulting application name: bitcoin.exe, version: 0.0.0.0, time stamp: 0x4d44aa00 Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000 Exception code: 0xc0000005 Fault offset: 0xa09b8000 Faulting process id: 0x9f0 Faulting application start time: 0x01cd47e6c065d610 Faulting application path: C:\Users\btcbuy\application\proxy\bitcoin\bitcoin.exe Faulting module path: unknown Faulting application name: bitcoin.exe, version: 0.0.0.0, time stamp: 0x4d44aa00 Faulting module name: unknown, version: 0.0.0.0, time stamp: 0x00000000 Exception code: 0xc0000005 Fault offset: 0xffffe001 Faulting process id: 0x2e4 Faulting application start time: 0x01cd3b0c618ef6d0 Faulting application path: C:\Users\btcbuy\application\proxy\bitcoin\bitcoin.exe Faulting module path: unknown Report Id: 406430d0-b3d7-11e1-a0a8-b72f03336354 Faulting application name: bitcoin.exe, version: 0.0.0.0, time stamp: 0x4d44aa00 Faulting module name: bitcoin.exe, version: 0.0.0.0, time stamp: 0x4d44aa00 Exception code: 0xc0000005 Fault offset: 0x0101f170 Faulting process id: 0x6f4 Faulting application start time: 0x01cd358dfb125560 Faulting application path: C:\Users\btcbuy\application\proxy\bitcoin\bitcoin.exe Faulting module path: C:\Users\btcbuy\application\proxy\bitcoin\bitcoin.exe
1446	
1445	On Windows they are somehow shimmering, if they are autoDefault, which is not needed here.
1444	The option to open the debug logfile from the debug window was implemented only for windows. By using `QDesktopServices::openUrl` it now works on any platform.
1443	This contributed to an accidental send (#1384), and has no clear advantage, better to disable it.
1442	No, Im not kidding. As is a program to interoperate with Bitcoin needs to use BerkeleyDB because the "Irreplaceable " data part is stored in BerkeleyDB format. New operations could simply be written after the last row "overwriting" previous versions (so I have key A with public key B and description C. The public/private parts are immutable. If I want to change its description I can: 1) insert a new record of type "new description" that changes the old description or 2) reinsert the same row with a different description) and if there are too many "dead" rows (or if the keys need to be re-encrypted) the entire file could be rewritten. An XML file doesnt have this property: it can easily get corrupted (but then its normally quite easy to repair it if you know what you are doing) and to append some information you have to "reopen" the last element (or we could write an XML fragment without the root element. It would be the same, but XML are a little larger). The file would be written in UTF8 with some characters escaped (but these are details). It would be a little bigger than its now, but at least it would be easy for the user to cut and paste the keys in and out.
1441	
1440	...not confuse users, which could see it before we init with the real wallet balance This was mentioned in IRC today, so lets just change it :).
1439	This pull is based on a discussion with and - introduce a new StartShutdown() function, which starts a thread with Shutdown() if no GUI is used and calls uiInterface.QueueShutdown() if a GUI is used - all direct uiInterface.QueueShutdown() calls are replaced with StartShutdown() - this ensures a clean GUI shutdown, even when catching a SIGTERM and allows the BitcoinGUI destructor to get called (which fixes a tray-icon issue and keeps the tray-icon until Bitcoin-Qt exits) The current implementation (current master branch) sometimes crashes Bitcoin-Qt (bad) and doesnt allow GUI object destructors do their work as we call exit() in Shutdown(), which leads to an unremoved tray-icon (as visible bug). Im sure we could remove some ``#include "ui_interface.h"`` in the modified files, but I was not really sure about that, so input is welcome. Fixes: #1182
1438	The machine becomes unusably slow. It updates blocks at the rate of around 1 block per 5 minutes. 100% usage on block devices: Device: rrqm/s wrqm/s r/s w/s rkB/s wkB/s avgrq-sz avgqu-sz await r_await w_await svctm %util sda 0.00 0.00 4.00 186.00 272.00 11360.00 122.44 8.48 47.84 15.00 48.55 5.18 98.40 dm-0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 dm-1 0.00 0.00 4.00 186.00 272.00 11240.00 121.18 8.80 49.60 16.50 50.31 5.19 98.60 Note DM-1 is backed by sda. DM-1 is formatted with ZFS. Fedora 17 operating system. Ask me any other questions you would like to know. Here is a small trace of disk activity: [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000022> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 32600) = 32600 <0.000083> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\231\201\3530\256N\315J\252\202Hc\261X\370\0\377\231Br\365q\361\f\305\254\356"..., 131072) = 14853 <0.000039> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677492283, SEEK_SET) = 1677492283 <0.000023> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000023> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000011> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000007> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000022> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 33444) = 33444 <0.000085> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\372\31\361\313\253$,\316\\\21\235\271\302\224\322\350\237\367\340{1\256\210\241\177EY"..., 131072) = 14009 <0.000039> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677493127, SEEK_SET) = 1677493127 <0.000021> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000022> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000082> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000027> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000034> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 33671) = 33671 <0.000088> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\207\334\353\372\\\305\371O\341r\273\262\5r\263\217\373\f$\260\360R\304\372\0307\325"..., 131072) = 13782 <0.000042> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677493353, SEEK_SET) = 1677493353 <0.000024> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000022> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000041> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000026> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000022> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 33671) = 33671 <0.000084> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\207\334\353\372\\\305\371O\341r\273\262\5r\263\217\373\f$\260\360R\304\372\0307\325"..., 131072) = 13782 <0.000039> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677493353, SEEK_SET) = 1677493353 <0.000022> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000022> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000038> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000026> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000024> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 34336) = 34336 <0.000139> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\25m+\203r\207F\261\235\341\353\211\300\32\275\237\276d\1i\233L/\257\330\234"..., 131072) = 13117 <0.000049> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677494018, SEEK_SET) = 1677494018 <0.000034> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000059> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000027> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000007> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000006> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 34819) = 34819 <0.000035> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\0021\246\271\315\223\226\24\264\267j\305\211\16W\251\346\321x\373S4)2\313\257\320"..., 131072) = 12634 <0.000011> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677494649, SEEK_SET) = 1677494649 <0.000005> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000007> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000034> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, <unfinished ...> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET <unfinished ...> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, <unfinished ...> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, <unfinished ...> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677460451, SEEK_SET <unfinished ...> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat> <unfinished ...> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY <unfinished ...> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000021> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET <unfinished ...> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, <unfinished ...> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, <unfinished ...> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677494649, SEEK_SET <unfinished ...> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat> <unfinished ...> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000040> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000023> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000019> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 35631) = 35631 <0.000107> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1b1\333\177\33\351\326\202\253v\241!A\327n\353\222\345\264\266pL@\334\35\207\222"..., 131072) = 11822 <0.000046> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677495345, SEEK_SET) = 1677495345 <0.000019> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000022> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000035> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000032> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000021> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 35889) = 35889 <0.000103> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\27\0330\233\3158\316\366\300-<\370\243\375\313\247\233\37\177\233r\21\23\353\377\341"..., 131072) = 11564 <0.000037> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677495571, SEEK_SET) = 1677495571 <0.000019> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000022> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY <unfinished ...> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, <unfinished ...> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000017> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, <unfinished ...> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\224\375w`\225D\203\2\227\367n?\223\331\215S\310\22\23\354\310\346\t\34\337@\16"..., 131072) = 11338 <0.000037> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677495796, SEEK_SET) = 1677495796 <0.000017> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000021> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000012> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000008> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000006> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 36778) = 36778 <0.000028> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\267\370\3163\224\225\337\343\22\0\222\307Ud\264\350\346\355-z\323\271\2\0\211\270@"..., 131072) = 10675 <0.000012> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677496459, SEEK_SET) = 1677496459 <0.000008> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000008> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000009> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000007> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677328384, SEEK_SET) = 1677328384 <0.000007> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "E\2!\0\256\263w=\3057\317\231\366\246q\233,\34l\321\261\22\3513\374\261a\307\r\202f"..., 101082) = 101082 <0.000061> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\205\243rD\21\374?b1\345\372\264jb\\\200G\337\321rc\0\233\322L\2\262"..., 131072) = 77443 <0.000020> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677429723, SEEK_SET) = 1677429723 <0.000008> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000008> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000011> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000008> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000008> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 36778) = 36778 <0.000029> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\267\370\3163\224\225\337\343\22\0\222\307Ud\264\350\346\355-z\323\271\2\0\211\270@"..., 131072) = 10675 <0.000013> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677496459, SEEK_SET) = 1677496459 <0.000008> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000008> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000010> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000006> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000006> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 37003) = 37003 <0.000028> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\34loF\352\235\275\363\361\357\311\215:5\"\201\312^{\35C\325\217\225\262\211\370"..., 131072) = 10450 <0.000011> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677496685, SEEK_SET) = 1677496685 <0.000006> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000006> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000011> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000006> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000005> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 37003) = 37003 <0.000029> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\34loF\352\235\275\363\361\357\311\215:5\"\201\312^{\35C\325\217\225\262\211\370"..., 131072) = 10450 <0.000011> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677496685, SEEK_SET) = 1677496685 <0.000005> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000006> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000008> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000006> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677328384, SEEK_SET) = 1677328384 <0.000008> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "E\2!\0\256\263w=\3057\317\231\366\246q\233,\34l\321\261\22\3513\374\261a\307\r\202f"..., 94124) = 94124 <0.000065> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\2\223*\323\226\v\214R\32SZ>\256\264\3613a9\34U\377\366\210\376\203\347\33e"..., 131072) = 84401 <0.000025> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677422944, SEEK_SET) = 1677422944 <0.000008> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000008> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000045> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000034> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000011> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 37229) = 37229 <0.000043> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\"nR\366@\242\353\224\235\366J\4b\360_\6\377\340\35*\23\334\266_\353\211q"..., 131072) = 10224 <0.000015> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677496911, SEEK_SET) = 1677496911 <0.000007> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000008> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000013> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000007> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000008> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 37229) = 37229 <0.000031> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\"nR\366@\242\353\224\235\366J\4b\360_\6\377\340\35*\23\334\266_\353\211q"..., 131072) = 10224 <0.000014> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677496911, SEEK_SET) = 1677496911 <0.000008> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat> <unfinished ...> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000020> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000008> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000006> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 37712) = 37712 <0.000050> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\r\324ErA\244\347\322\22152\306\220\331\211\253\357\221\261\rFUF\346w\343d"..., 131072) = 9741 <0.000027> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677497394, SEEK_SET) = 1677497394 <0.000007> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000007> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000061> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000021> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000006> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 37712) = 37712 <0.000040> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\r\324ErA\244\347\322\22152\306\220\331\211\253\357\221\261\rFUF\346w\343d"..., 131072) = 9741 <0.000012> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677497394, SEEK_SET) = 1677497394 <0.000006> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000007> [pid 21892] open("/home/rudd-o/.bitcoin/blk0001.dat", O_RDONLY) = 23 <0.000011> [pid 21892] fstat(23</home/rudd-o/.bitcoin/blk0001.dat>, {st_mode=S_IFREG|0600, st_size=1677506909, ...}) = 0 <0.000006> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677459456, SEEK_SET) = 1677459456 <0.000005> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\222\313r,V\326\322\3459\316\230D\321\327\4!\225`\347\215\344\2519\374\272q\207\0\0\0\0k"..., 7612) = 7612 <0.000016> [pid 21892] read(23</home/rudd-o/.bitcoin/blk0001.dat>, "\1\0\0\0\1\210\327\247\206\23\16\230jw\226\332\332|\344@R\21\210)4\327\3025\2\303{\330"..., 131072) = 39841 <0.000106> [pid 21892] lseek(23</home/rudd-o/.bitcoin/blk0001.dat>, 1677467326, SEEK_SET) = 1677467326 <0.000018> [pid 21892] close(23</home/rudd-o/.bitcoin/blk0001.dat>) = 0 <0.000007>
1437	This is a redo of #986, but is based on Boost 1.49 which fixed the underlying issue (mostly). It also reverts 7b90edb5a6 to re-enable URI handling itself.
1435	
1434	- add the slot updateDisplayUnit() to overviewpage, sendcoinsdialog, sendcoinsentry and connect it to displayUnitChanged() - this ensures all fields in the GUI, who use a display unit are imediately updated, when the user changes this setting in the optionsdialog - ensure used fields init with the current set display unit This addresses / fixes #781 and #927.
1433	This needs a review and compilation test from a dev, but I want to ensure there is time to discuss it early! ![tabbed options page](http://i48.tinypic.com/2iw3yfb.jpg) - re-work optionsdialog to a tabbed UI based on an ui-file / extend network options with a SOCKS version selection - changing "Unit to show amounts in:" now also updates the unit used in the transaction fee box - string updates - link Apply button and OK button when enabling or disabling them (how good is a disabled Apply button, if OK saves too ^^) - use LookupNumeric() from netbase to verify proxy address (via an EventFilter) - allows IPv6 and fixes #821 - change proxy address field to QValidatedLineEdit and add visual feedback - add a status label used for displaying a message for invalid proxy addresses benefits: - much easier to expand, because it uses an UI-file, which can be edited via Qt Designer - IPv6 support for proxy address - SOCKS version selection The changes to optionsdialog.cpp/.h may look weird, but I designed it from scratch and only replace the current files, to keep the naming.
1432	I noticed that the new Immature balance label is not updated correctly when they actually mature. In fact, also the normal balance label is not updated correctly. Observed behavior: 1) When starting bitcoin-qt all is well: The mined transactions below 120 confirmations are added and listed immature, the rest of the transactions are added and listed under balance. 2) When a block is received in which new coins are mined they are added to the immature balance. So far so good. 3) When a block is received pushing the number of confirmations of a mined transaction above 120, this transactions icon is changed to a green V, but its value is not deducted from the immature balance, and it is also not added to the regular balance. The only way to have it display correctly is to restart bitcoin-qt, as then one goes to situation 1) again. Desired behavior: The labels should reflect the correct balance/immature balance at all times, according to the currently downloaded and verified (and matured) blocks.
1431	
1430	I have no proxy setup on my local machine, so setting one will for sure not work and is intended to reproduce this. Steps to reproduce: 1. start Bitcoin-Qt (compiled from current master) 2. enable proxy and use default settings 3. exit 4. restart Bitcoin-Qt 5. exit 6. crash debug.log shows in the end: socket select error 10022 ERROR: GetMyExternalIP() : connection to 216.146.39.70:80 failed Bitcoin exited select() for connection failed: 10038 ERROR: GetMyExternalIP() : connection to 212.117.175.194:80 failed ThreadOpenConnections exited So I guess it has to do with ThreadOpenConnections not cleanly exiting, perhaps because we dont detect or handle such connection problems. This needs a deep look by I think. Btw. the proxy setting in the Qt GUI needs a re-start, right? Its not changed on the fly?
1429	This is based on #1408 and gives a preview of the goal of the rebase as a whole. It provides a CBlockStore class to store the block chain and allows CHub to call it and returns data to CHub. If it gets merged, CTxMemPool will be adapted to call CBlockStore functions to get info on previous transactions, and a CAlertStorage class will be added. I would prefer to not do callbacks from CBlockStore, but I found that cleaner than returning a list of blocks committed (as each call to EmitBlock can commit any number of blocks) through many of the block acceptance functions and back to CHub::EmitBlock, buf if that design is preferred, its not hard to do that. In general, though CBlockStore effectively turns several CHub functions into NOOPs, I prefer using a CHub as a convenience class so that CWallet/P2P client dont have to know something about CBlockStore and CTxMemPool and CAlertStore, but only needs to know one API. It also removes the need to duplicate much of the code to deal with callback threads in the storage classes. Obviously this does little actual abstraction, but just creates the class and moves functions from CBlock, if it gets merged, things like mapBlockIndex will get moved into CBlockStore.
1427	
1426	On Mon Aug 16 20:55:54 2010, Satoshi modified the client to display 20 bytes of the block hash (up from 16 bytes). This pull request increases the number of significant bytes by 5, and reduces the number of insignificant bytes (almost always zeros) by 10, resulting in saved space in debug.log and improved uniqueness of block hashes.
1425	Yesterday I enabled the Proxy option in the Qt client and left it active unintentionally. Today I started the client and it didnt connect, opened the log and saw a bunch of "socket select error 10022" messages. It came to my mind I had played with the Proxy option, disabled and now the client connects just fine. What I want to say is, that we need a better user feedback here. A client that cant connect needs to tell the user why or at least give some options the user could try to fix the connection-problems.
1424	Didnt compile.
1423	The last couple of lines of src/allocators.h have a comment: // This is exactly like std::string, but with a custom allocator. // (secure_allocator<> is defined in serialize.h) but thats not true. secure_allocator<> is defined in allocators.h itself.
1422	
1421	
1420	- to extend the functionality, but keep a simpler toggleHidden() for use in SLOT() macro As toggleHidden() has some functionality in, that is good for showNormalIfMinimized() I moved the code to it. I was not able to completely remove toggleHidden(), as SLOT(showNormalIfMinimized(true)) is not allowed. If someone knows how to use showNormalIfMinimized(true) in SLOT I can update this.
1419	It shows a blank line for the address, even for a simple 1-of-1 :(
1418	This small glitch was introduced with #1389 and gets fixed with this pull. The options page needs a rework and it would be nice, if could open a small issue on Github, which explains what needs to be added there.
1417	When using Bitcoin-Qt dont call exit() in Shutdown(), to allow a clean exit for Bitcoin-Qt - this ensures the removal of the tray-icon (in BitcoinGUI destructor) after the core is shutdown. On Windows the tray-icon was still visible after a shutdown, which could lead to many orphan icons in the tray that only disappeared after hovering them with the mouse. This is now fixed.
1416	AvailableCoins() makes a vector of available outputs which is then passed to SelectCoinsMinConf(). This allows unit tests to test the coin selection algorithm without having the whole blockchain available. This is an updated (with changes made in #1017, but not Coin Control itself) and rebased form of #905.
1415	The text file is wrong on how to build without UPNP support, as shown below: $qmake USE_UPNP= Project MESSAGE: Building with UPNP support $ qmake USE_UPNP=- Project MESSAGE: Building without UPNP support
1414	While working on a project I noticed the new "sendrawtx" command and figured it would save me some trouble. Long story short, Ive tried sending many well-formed valid transactions through this command, none of which were ever broadcast to rest of the network, even though they were accepted and the txid was returned by "sendrawtx." The command seems to correctly verify that the inputs are valid and that the transaction otherwise meets the requirements of the network, however it does not appear to ever relay it to its peers. Edit: I note also that the transactions I tried end up in that clients "getmemorypool", but not in any other clients, even when theyre directly connected with -addnode.
1413	
1412	- change "must wait" into "must mature" to take the new immature label into consideration - change "will be available in %n more blocks" into "matures in %n more block(s)" - remove ugly spaces from string
1411	* Updates package description to note that blockchain now takes 2+ GB instead of 150+ MB. * Stop creating DB_CONFIG with DB_LOG_AUTO_REMOVE as that is set in Bitcoin itself now. * Update changelog with 0.6.2 and the current updates.
1410	It seems the estimated total blocks number doesnt get updated, when the block count changes.
1409	- Show address receiving the generation, and include it in the correct "account" - Multiple entries in listtransactions output if the coinbase has multiple outputs to us Goal: dont make service providers have to jump through near-impossible hoops to handle receiving generated payments/deposits (right now, only MtGox actually handles them correctly); this also makes things nicer for miners who receive to their own wallets (eg, they can tell which pool it came from)
1408	Due to several changes in master that would require rethinking decisions made in the second revision of CBlockStore (#771) and thus very large code changes to rebase, I decided it was better to redo and manually rebase and re-commit the parts that remain relevant, also decreasing the total size of the changes to just those required to get CHub working on master. Some of the more disturbing changes can be added later after merge. This is early in the process, but I thought Id get it in the queue and let people review the commits as they come in and give feedback, if they wish.
1407	bitcoin-qt v0.6.2-beta - Click Receive coins tab, then click the New Address... button. - Create a new address with label, enter password if necessary. - Address is now generated. - Notice Copy to Clipboard is still unclickable. The new label/address is most likely not visible on the screen. Workaround: - User must go scroll through the list and look alphabetically for their label. - Once they find it, select it, then click on Copy to Clipboard
1406	was referencing wx fixed to the format of the other arg error reports
1405	I did this to see how much it would actually prune, but, as it pruned just over half of the CTxIndexs in blkindex.dat, I thought Id pull request it. It only prunes up to the latest checkpoint as there is no undoing pruning, so chain reorgs cant undo transactions that have CTxIns that were pruned. Note that the pruning process with -prune takes a _lot_ of time with -prune (an order of magnitude greater than loading chain on my tmpfs-backed system) and eats around 400MB of memory to load the needed information into memory. -autoprune is much less resource-intensive, but the checkpoint has to exist before the given block is downloaded, so users upgrading will not be effected unless they use -prune once. You can also run IBD with -autoprune to prune at each checkpoint.
1404	Tested so far by me, but more testing still to be done, as I know there are bugs with the re-asking code. Is it too early to open a pull request when I know its still needing more testing...?
1403	Executed ``lupdate -no-obsolete C:\Users\Diapolo\bitcoin\bitcoin-qt.pro`` on current Git master branch.
1402	wallet.dat have too often rewritten, it have too big size, that make some inconvenience for backup and maintenance. 1. wallet-private.dat: private key part file must contains only that information to give full access to wallet, now it can be only list of wallet addresses with its public and private keys 2. wallet-cache.dat: other information (wallet account labels, comments, transaction cache and etc.) must be moved into second file. Most important information for this can be restored from blockchain and first private file with -rescan command line option p.s. also two different command line switches can be added to setup different locations for this files (i think private key wallet can be located on removable disk, and in future, for example, other device with api, similar Electrum client
1400	According to the post at a blk####.dat file should not go above 1GB. Mine is 1.5 GB. I havent been able to find any info about this apparent discrepancy. My over-active mind is assuming that those who lose out because of the freedom Bitcoin provides are hard at work on schemes to make it infeasible. One such scheme is to flood the block chain with transactions. Thats why I started looking at the size of the data file.
1399	Implement the following rules: * Interpret [X]:Y as host=X port=Y, if Y is an integer * Interpret X:Y as host=X port=Y, if Y is an integer and X contains no colon * Interpret X:Y as host=X:Y port=default otherwise
1398	If someone wants to shoot themselves in the foot by linking to 5.0 or whatever, make them clear BDB_LIB_SUFFIX manually.
1397	Before I can pull an updated and current english translation master file, this needs to be sorted out! It can be done via ``extract_strings.py`` (see: As seems missing, can another dev help out with this and get a current bitcoinstrings.cpp merged to master please.
1396	Useful for developers who need to refer to futher back in debug.log history, but who dont want to enable the -debug option and all the verbosity that comes with that.
1395	...e block in the chain. doh.... Im half aslweep still...
1394	corrected 1.0.1b to 1.0.1d
1393	**Status: Tested and seems to work** 1. Guarantee listtransactions order consistency by storing a position for each entry 2. Add "blocktime" and (for wallet transactions) "timereceived" to transaction Objects 3. Implement "smart" times according to the following logic: - If sending a transaction, assign its timestamp to the current time. - If receiving a transaction outside a block, assign its timestamp to the current time. - If receiving a block with a future timestamp, assign all its (not already known) transactions timestamps to the current time. - If receiving a block with a past timestamp, before the most recent known transaction (that we care about), assign all its (not already known) transactions timestamps to the same timestamp as that most-recent-known transaction. - If receiving a block with a past timestamp, but after the most recent known transaction, assign all its (not already known) transactions timestamps to the block time. This supercedes #1159. Discussion:
1392	Changes: + New genesis block + Checkpoint at block 546 + Blocks <546 contain lots of interesting test cases (blockchain uploaded to ) + testnet IRC channel for bootstrapping changed to #bitcoinTEST3 + testnet database subdirectory changed to testnet3/ Ill try to keep a couple of listening nodes running to serve up the new blockchain, and will switch over the testnet faucet when this is pulled.
1391	Hey, Thanks for a great app. But you seriously have to do something about your servers bandwith. Yesterday it took a friend i recommended your program more than 4,5 hours to sync the blocks after installation. I dont know where your servers are located (and on what bandwith), but perhaps you should get some in Europe if you dont already have some?. My friend and i are both located in Denmark and have 20/2 mb net connections. Everytime i open the app (approx. once a day) i have to wait a min. of 10 minutes to sync blocks. Thats simply unacceptable in 2012. Please se what you can do about this? Br
1390	The bitcoin wallet is user data and so should go in: $XDG_DATA_HOME/bitcoin/ The block chain is cache, and can be reloaded from the internet and so should go into $XDG_CACHE_HOME/bitcoin/ The configuration file is config and so should go in $XDG_CONFIG_HOME/bitcoin/
1389	Rework network config settings according to the specification in The network base does no longer call GetArg directly. Instead, everything happens through a few globals and the SetProxy/SetNameProxy methods. These are called in init.cpp:AppInit2, and in Bitcoin-Qts optionsmodel.cpp.
1388	- add a variable re-use instead of double-calling vNodes.size() Put simple bool checks before function calls.
1387	
1386	These RPCs manipulate a set of named lists, each of which matches zero or more bitcoin addresses. If a match is found in the TX memory pool, the command specified by arg -filtertx (or -filter, if missing) is executed. If a match is found in a newly [re-]accepted block (SetBestChain), the command specified by arg -filterblock (or -filter, if missing) is executed. The following command string substituations are performed, before the notification command is executed: %t "tx" or "block" %h hex string of 256-bit block hash or tx hash
1384	I just accidentally sent coins to the wrong address due to a misunderstanding of how the client works. I think there are a couple of usability issues which contributed to this happening, as well as my own carelessness. What I did: * go to the send tab * paste an address into the pay to box. the label automatically was filled in, confirming that I typed the right address * clicked the first icon to the right of the pay to box to see the address book * looked to see if the address was in there. it wasnt. clicked ok to dismiss the dialog * back at the send tab, the label field was still showing the right value, so I didnt notice that the ok in the previous step had changed the pay to field * typed an amount and hit send. The amount ended up going to the first address in my address book, not to the address with the label that was displayed when I clicked send. Two comments: * when the address book is first opened up, Id prefer if no address was selected, rather than the first (no label) address. I hadnt selected an address, so thought that ok would leave everything unchanged. * when I click ok in the address book causing an address to be copied to the pay to box of the send tab, update the label field (or lack of label) accordingly. currently it leaves the label field unchanged which is misleading. I checked the label field before hitting send, and it was still showing the label I wanted to send to. But the address had been changed, and that is where the funds went.
1383	This RPC assumes that you Know What You Are Doing. It will * reject any TX that fails validation, rather than adding to mapOrphanTransactions * not detect or process dependent orphans This should not present a problem to anybody who is creating well formed transactions with connect-able inputs.
1382	...eer thats lagging behind. This ideally shouldnt happen, but it can and does sometimes, so this code caters for that. This code also becomes more important if the block download algorithm is changed in future (e.g. pull #1326, which is still in development), e.g. if and retries are sent to other peers when peers seem unresponsive, only to become responsive again later, by which time they are sending duplicate blocks. Obviously the unresponsive peers could be disconnected when deemed unresponsive, but my tests have shown its more efficient to give them a chance to become responsive again, (even though it does increase the chances of them sending duplicate blocks), and disconnecting them at that point. Future patches could identify the duplicate blocks before they are downloaded, by the block size (looking up against blocks recently downloaded and against blocks requested from the peer sending the block). Ideally theyd be identified by something more specific than the block size, but currently block headers communicate only the size.
1381	Any problems seen during deserialization will throw an uncaught exception, crashing the entire bitcoin process. Properly return an error instead, so that we may at least log the error and gracefully shutdown other portions of the app.
1380	More than doubles the speed of verifying already-cached signatures that use compressed pubkeys: Before: ~200 microseconds After: ~80 microseconds (no caching at all: ~3,300 microseconds per signature) Thanks to for suggesting
1379	Dock icon on macosx already has show/hide functionality. This results in erratic behavior. Fixes #1327.
1378	
1377	This change adds timing information for ProcessBlock and AcceptBlock, using the currently existing "ACCEPTED" line, but with timing infomation added. Also, as a nicety, once the block chain has caught up, some an additional line is shown providing feedback on what bitcoind is doing (i.e. when validating a block).
1376	This pull request is a subset of pull #1311. This change adds the command line option "-logtxpeer", which when chosen, will cause the peer to be reported for every transaction received, including invalid transactions. As this is useful only for debugging, and not needed for general use of bitcoin, the option is not displayed in the syntax output, but only found when browsing the code.
1375	I originally raised pull #1311 with this, but that was too big and contained too many changes. Pull #1338 followed, but still had some changes which were contentious. This pull contains just the addition of displaying the peer of DoS(100) transactions, and pull #1338 has had that part removed.
1374	Update the License Headers to refer to the file COPYING instead of license.txt
1373	Ive noticed that this comment refers to headers.h which no longer exists.
1372	Attempts to resolve #1371
1371	Unit tests started failing on my Mac with the "Support multi-threaded JSON-RPC" commit e9205293bd8d6352ce51372111336ba3c4e14e70 Running the unit tests I get: unknown location:0: fatal error in "script_valid": memory access violation at address: 0x0000005c: non-existent physical address Running under valgrind I get an uninitialized write in _pthread_mutex_init. Compiling with -pthread and linking with -lpthread doesnt fix it. Im using MacPorts boos 1.49... googling didnt turn up any bugs. Ill try to get a small standalone test case...
1370	- make ClientModel::formatClientStartupTime() return a QString Note: Logged time in debug.log differs by a few seconds from the one displayed in the Debug window because of different initialisation times.
1369	This reorders AppInit2 into 10 sections: 1) basic setup (OS stuff, signal handlers) 2) parameter interactions (softset) 3) interpreting options without side effects (just setting internal variables) 4) application initialization (datadir lock, daemonize, pidfile, log file) 5) network initialization (network params, proxy, binding) 6) load blockchain 7) load wallet 8) import blocks (-loadblock=) 9) load peers 10) start node/rpc threads 11) finished This means invalid configurations will be detected as soon as possible (in particular, before loading the block chain).
1368	- change verifymessagepage behaviour to match RPC-call "verifymessage" (input address, signature and message) - remove "copy to clipboard" button as that is unneeded now - re-positioned the status label - display (error / info) messages in status label (remove message boxes) - resize window to make signature fully readable - change signature font to BC-address font (like in messagepage) - remove checkAddress() and place code directly in on_verifyMessage_clicked() - add visual feedback to LineEdits - remove AddressTableModel references - add addr.GetKeyID(keyID) check This addresses #1356.
1367	Satoshis commits fdbf76d4f49c220e2ed4412a3d8d8cd6efd74826 and c8ad9b8375f5308bb46a124f096a80926ea42fba (SVN import) removed the DB_PRIVATE flag from the environment. In part, this enables processes other than bitcoind to examine the active database environment. However, this incurs a slight performance penalty versus working entirely within application memory (DB_PRIVATE). Because bitcointools and other direct-BDB-accessing tools are not used by the vast majority of users, prefer to default with DB_PRIVATE with the option of disabling it if needed via -privdb=0.
1366	Uses `bitcoind --help` to determine available options and `bitcoind help` to determine available commands. Currently placed in contrib/debian/bitcoind.bash-completion, so it can be picked up automatically by the Debian package building process.
1365	
1364	- move class HelpMessageBox to guiutil.cpp/.h - add button to show Bitcoin options (in RPC Console -> Information) - resize Debug window a little to allow for a non-breaking display of the welcome message with non-english translation - use 50 nonbreaking spaces (up from 40) on Windows to widen the HelpMessage Box for better readability
1363	Gavin suggested to remove strncasecmp() + strnicmp() usage instead of fixing strnicmp() to _strnicmp() and this is what this pull does. - remove strncasecmp() + strnicmp() calls and replace that code via boost::algorithm::istarts_with() - do not call ipcInit() on Mac and Windows as this is unneeded currently
1362	
1361	Id like to have a consistent display of recipient (or, subtransaction) objects. Quick mockup: ![](http://i47.tinypic.com/14y5veo.png) The "send coins" page would have one form with an "add" button. Adding a subtransaction adds it to an entry field, as shown in the image above. Clicking the `` on the entry will make it disappear (we may keep a "clear all" button as well). The entry field can contain multiple recipients, and "send" will send all of them. (special transactions can eventually be built in a similar way, and need their own distinct visual format) These objects should be drag-and-droppable, the external representation will be a "bitcoin:" URL. "receive coins" (or the QR-code window) could be adapted to generate the objects, which the user can drag/drop or copy/paste into emails or sites.
1360	* This is safer than DB_TXN_NOSYNC, and does not appear to impact performance. * Applying this to the dbenv is necessary to avoid many fdatasync(2) calls on db 5.x * We carefully and thoroughly flush databases upon shutdown and other important events already.
1359	Superceding #1017 since isnt rebasing it anymore. Also sanitized JSON-RPC changes and did some other cleanup. (#1416 has the coin selection refactoring)
1358	
1357	This introduces internal types: * CPubKey: encapsulated a public key * CKeyID: reference (hash160) of a key * CScriptID: reference (hash160) of a script * CTxDestination: a boost::variant of the former two CBitcoinAddress is retrofitted to be a Base58 encoding of a CTxDestination. This allows all internal code to only use the internal types, and only have RPC and GUI depend on the base58 code. Furthermore, the header dependencies are a lot saner now. base58.h is at the top (right below rpc and gui) instead of at the bottom. For the rest: wallet -> script -> keystore -> key. Only keystore still requires a forward declaration of CScript. Solving that would require splitting script into two layers.
1356	The JSON-RPC verifymessage intentionally required the user to provide the expected address, and returned success or failure, to avoid potential social engineering: if the user is simply told the signing address, someone could use vanitygen to create a similar-looking address and attempt to fool the verifier when they compare it. The recently merged Verify Message dialog introduces this attack vector. I propose making the Address field editable, and having the Verify button simply display "Signature valid" or invalid in a messagebox.
1355	Built on top of #936, this adds support for getblocktemplate longpolling to bitcoind.
1354	I originally created a pull to replace the "COPYING" in crypter.cpp and crypter.h, but it turned out that COPYING was actually the correct file.
1353	- add a missing comment in rpcconsole.h
1352	- add GetClientStartupTime() to util.cpp/.h, which returns a static const int64 from util.cpp - change indentation in getininfo() function, to match all lines (better readability) - remove some spaces in comments Perhaps it makes sense to place it somewhere else in the getinfo, but I didnt want to break things that perhaps rely on the current ordering.
1351	This does things better than the first commit, which had a bug and placed ``define strncasecmp _strnicmp`` in an ``#ifndef WIN32`` in init.cpp. Sorry for this.
1350	RPC getblockcount should be used instead.
1349	These 6 commits: 1. Implement an ECDSA signature cache, which should cut the amount of CPU time spent verifying signatures in half (because transaction signatures are verified before going into the memory pool and then again when the block is accepted). Please review that commit very carefully, since it is the very heart of transaction security. 2. Implement several "belt and suspenders" changes to prevent possible denial-of-service attacks involving sending orphan transactions (suggested by Sergio Demian Lerner) or transactions with lots of inputs. Tested by: - writing new unit tests, and stepping through the code in the debugger while running the new tests - running the new code under valgrind for more than 24 hours on the main network
1348	
1347	Without this change, mappings will be created even after AlreadyHave equals true, and will never be erased. A small fix, probably would never have caused a problem, other than filling unbounded and potentially using up more memory than needed. Might be quite significant is bitcoind is left running for a long period of time.
1346	Fix some layout weirdness introduced in #1314. Also, change "(out of sync)" to only red, instead of red and bold, which a bit more subtle for a warning.
1345	- the #ifdef WIN32 parts were moved to the top of the files as this is a place everyone looks from time to time - add missing "#define strncasecmp _strnicmp" in init.cpp - removes an unintentional add line break added by sipa ^^ (https://github.com/bitcoin/bitcoin/commit/ac7c7ab99aeee4aeea333d720c5a211a443a366d#L0R126) See for reference on _strnicmp.
1344	Will show a human readable time that the getdata will be triggered. Easier to follow. Might even be better to show this when debugging also...?
1343	subject says it all really...
1342	Change to a positive number, to indicate a past event, and save a few bytes in debug.log!
1341	Also, reduces confusion when combined with future pull requests. This is a small change, and possibly seems petty, but its useful for two reasons: 1) Principle of least surprise. Waiting can end (and does in the code), but Already Asked for requires a past event thats happened to unhappen. This is confusing. 2) Later code (which I am hoping gets pulled when finished, such as #1326) uses variables that make sense, and makes the code simpler to understand when used with this renamed mapping. 3) probably other reasons....
1340	Report how long DBFlush() takes. Tested for over 6 weeks.
1339	IRC got who! IRC got who! IRC got who! yes yes.. we know... shushed.
1338	This is a subset of pull #1311, but just the part that adds more info on txs which have issues with them. For really naughty txs, that DoS(100) it also reveals the peer that sent it, otherwise peer information is not revealed. (although there will be a pull request coming shortly providing a command line flag should peer information for all txs be desired). Also, free transactions are identifies in the output. Not particularly useful, but these may become a rare thing in the not too distant future.. maybe, maybe not. Apologies for the txnode variable. The only other way was to change all the functions to allow it to be passed. I think this is the neatest and least intrusive way, and cant see any harm in it, but please correct me if Im wrong here.
1337	This pull is a subset of pull #1311, which many said was too big, and did too many things. It wasnt easy to break it up into smaller pieces as so many are interdependent. Anyway, here goes. Comments welcome. This pull adds a command line argument "-quietinitial", which is intended to make the "traffic" in debug.log less so that the block download progress can be more easily seen. Its off by default, and without using it, things look the same as usual. I realise that some of what this does can be achieved with 3rd party log file filterers, but some of it cant, and its mostly developers that use such 3rd party tools, and Id like to help enable bitcoin to be useful to less technical people too. This sub-pull, IMHO, isnt as useful unless combined with some of the other pull requests Ive raised (and am still raising, due to hacking #1311 into smaller pieces). I suspect the others will need rebasing depending on what order the pulls are effected. ho hum..! Heh... #1337 is a cool pull number :) Not sure this one deserves such a number though! Anyway, comments welcomed - I need to get a better idea of what makes a good pull or not.
1336	Does what it says on the tin
1335	Im not sure how come Im the only person who seems to need this line, but Im currently unable to submit pulls without this entry, so rather than have it in every pull request, heres a separate one to hit the nail on the head. If theres a way to untrack the build directory without adding it to .gitignore, please NACK this and let me know! Thanks!
1334	Less misleading... This pull is a subset of #1311
1333	genbuild.sh will not run when used on filesystems without the execute flag for files. This is the only thing so far which causes make to fail in this situation, so an easy fix to restore functionality.
1332	Win32 specific patch.
1331	Trivial one character typo fix in documentation.
1330	Update header licenses in crypter.cpp and crypter.h
1329	- Fixes issues with copy/pasting from web or html emails (#1325)
1328	This patch fixes compilation on Mac OS X since the CSemaphore on Mac OS X uses the Sleep() function in the sync.h file.
1327	Newest Version 0.6.2.2 beta when I switch to bitcoin-qt by pressing the icon in the Dock, the window disappears. When I click on the icon again it comes back and remains. fyi
1326	Builds upon pull #1271, which fixes Issue #1234. This allows multiple peers to provide blocks, not just one. Up to 8 peers can provide blocks in parallel, thereby increasing block download speed by up to 8. Submitted for comments. I think ideally Ill add some more code to cater for stuck downloads, so it can give up and move onto another peer. Currently, itll only move onto another peer if the selected peer disconnects. It a peer took a long time to disconnect, then all blocks downloaded would be orphans until the missing block was eventually downloaded. Also, the "8" concurrent downloads is hard-coded, would people prefer this to be a configurable command-line option?
1325	There are some problems with people copying and pasting an address where the address includes an unprintable character. For example, some web apps will inject an #8203; into a long word so that a line-break / word wrap will occur. But the user doing a copy and paste wont see this character. - When trying to paste this into the PayTo: field of v0.6.2, the paste does not succeed. There is no feedback given as to why this paste does not occur. In previous versions (perhaps v0.5.x/) apparently the paste will success but the validation fails on send (highlights the field in red). Still though there is no further feedback as to what the problem is. The user then feels the problem is with Bitcoin-Qt as that same copy and paste on an EWallet (e.g., on Mt. Gox website) works fine (presumably because they strip out nonprintable characters from an address?) Heres an example of users reporting this issue: - Heres what the "view source" for the web page shows: 1G5apmPvo2iTtmkNWAHTCET7&#8203;Y842Ufijs8
1324	Fixes translating HelpMessageBox strings. Fixes #1322
1323	- allow translation of "options" used in the --help message - split translation of RPC console welcome message and remove the need to take care of HTML-br - remove some spaces in strings - misc other small stuff related to translations I know no one loves these pulls, but e.g. unneeded spaces are really ugly on Transifex and can irritate translators as can HTML-code. Guess most of my work on translations is done very soon!
1322	... HelpMessageBox class, as tr() does not work that early in the code I was wondering, why for example the translation for "Usage:" did not work, althoug it was in the (in my example) de language file. I found out that using the _() function does its job and so I added 2 new functions in init.cpp to be able to get the strings translated and the translations used. This needs an additional bitcoinstrings.cpp update!
1321	Like #1318 but also update strings from core
1320	Hi, Ive been trying to get my bitcoin client to work now for some time. I am running windows 7 x64 enterprise. Every time I uninstall and reinstall the bitcoin-qt client, I get part way through downloading the blockchain and the whole machine locks up. Cant move the mouse, cant use the keyboard. I end up doing a hard reset to get the computer back up. This only happens when the bitcoin client is downloading the blockchain. Bitcoin is the only program running also. During normal use I have no other issues. I just reinstalled the whole machine last week, and it has all updates and such... What can I do? I am running the latest client as well. 0.6.2 Im about to try pywallet and see if I can move it to a different client.. Very frustrating. Any help greatly appreciated!
1319	This pully is only intended to add the new languages into the system and not to update ALL translations. Please announce or tell me intended release dates for new official client versions, so I can pull translation updates!
1318	Trying to keep up the short intervals as there are still many changes!
1317	title says it mostly. It exits right after loading the block index (which takes a while these days). running v0.6.1-197-gbb361cc-dirty-beta (2012-05-14 11:11:16 -0700) error dialog box displayed says "Cannot resolve -externalip address: 7iqjqesnfh4nq2yf.onion", and the last line in debug.log is "Bound to [::]:8333"
1316	see $subject
1315	Immediately issue a "getblocks", instead of a "getdata" (which will trigger the relevant "inv" to be sent anyway), and only do so when the previous set of invs led us into a known and attached part of the block tree. This patch has been tested on a (constructed) blockchain that was effectively stuck.
1314	- cleanup overviewpage XML ui-file - addresses: #1236
1313	By default it will return 10 TXes. When overriding the TX maximum count, an account has to be provided, neither "", "*", * "\"*\"" work as expected. The expected result is : return transactions no matter what account they are tagged with.
1312	Testing on vanilla upstream (commit 790fe2e558d93572f87b7f4117a54d899903c5bf), shutdown always shows strange refcount counts: ``` 05/15/12 06:41:10 ThreadRPCServer method=stop 05/15/12 06:41:10 Flush(false) 05/15/12 06:41:10 refcount=-1054439 05/15/12 06:41:10 addr.dat refcount=128 05/15/12 06:41:10 blkindex.dat refcount=1054286 05/15/12 06:41:10 wallet.dat refcount=22 05/15/12 06:41:10 StopNode() 05/15/12 06:41:10 ThreadOpenConnections exiting 05/15/12 06:41:10 ThreadSocketHandler exiting 05/15/12 06:41:10 ThreadMessageHandler exiting 05/15/12 06:41:10 Flush(true) 05/15/12 06:41:10 refcount=-1054440 05/15/12 06:41:10 addr.dat refcount=129 05/15/12 06:41:10 blkindex.dat refcount=1054286 05/15/12 06:41:10 wallet.dat refcount=22 05/15/12 06:41:10 Bitcoin exiting ```
1311	This change improves debug.log output in the following ways:- It reduces some duplicate output, and no longer needed output (which was originally added for testing). It reduces the verbosity of output during initial block download, so rather than showing every block requested, it summarises. Once caught up, the previously level of verbosity is restored. Information about the nodes connected are shown, and additional information about errors (particularly rejected transactions) are shown, with the offending peer alongside. Recent changes which add many lines, such as address handling have been kept in as this code is still relatively new - I was tempted to comment out various lines such as the "tried...", etc. Timestamps is now enabled by default. -nologtimestamps or logtimestamps=0 will disable this. Also, renamed AlreadyAskedFor to AlreadyWaitingFor (makes more sense, as can cease waiting, but cannot stop having done a past thing.)
1310	"version" : 60006, "protocolversion" : 60000, *** glibc detected *** ./bitcoind: free(): invalid next size (fast): 0x00007fb848d3ce30 *** ======= Backtrace: ========= /lib/libc.so.6(+0x77806)[0x7fb856d12806] /lib/libc.so.6(cfree+0x73)[0x7fb856d190d3] ./bitcoind[0x4f22b8] ./bitcoind[0x4f285c] ./bitcoind[0x45d87a] ./bitcoind[0x461b8c] ./bitcoind[0x462542] ./bitcoind[0x46663c] ./bitcoind[0x467d5d] ./bitcoind[0x46d05b] ./bitcoind[0x46dbcd] ./bitcoind[0x474138] ./bitcoind[0x475064] ./bitcoind[0x48df91] ./bitcoind[0x48e0c2] /lib/libpthread.so.0(+0x69ca)[0x7fb8577d29ca] /lib/libc.so.6(clone+0x6d)[0x7fb856d81cdd] ======= Memory map: ======== 00400000-007fb000 r-xp 00000000 fb:00 10228727 /home/me/bitcoind 009fb000-009fc000 r--p 003fb000 fb:00 10228727 /home/me/bitcoind 009fc000-00a18000 rw-p 003fc000 fb:00 10228727 /home/me/bitcoind 00a18000-00a1e000 rw-p 00000000 00:00 0 01fff000-0431c000 rw-p 00000000 00:00 0 [heap] 0431c000-0431e000 rw-p 00000000 00:00 0 [heap] 0431e000-13918000 rw-p 00000000 00:00 0 [heap] 7fb814000000-7fb816a47000 rw-p 00000000 00:00 0 7fb816a47000-7fb818000000 ---p 00000000 00:00 0 7fb81c000000-7fb81fb8f000 rw-p 00000000 00:00 0 7fb81fb8f000-7fb820000000 ---p 00000000 00:00 0 7fb824000000-7fb82783b000 rw-p 00000000 00:00 0 7fb82783b000-7fb828000000 ---p 00000000 00:00 0 7fb82c000000-7fb82fc2f000 rw-p 00000000 00:00 0 7fb82fc2f000-7fb830000000 ---p 00000000 00:00 0 7fb830000000-7fb833b05000 rw-p 00000000 00:00 0 7fb833b05000-7fb834000000 ---p 00000000 00:00 0 7fb834000000-7fb837a93000 rw-p 00000000 00:00 0 7fb837a93000-7fb838000000 ---p 00000000 00:00 0 7fb83c000000-7fb83fef6000 rw-p 00000000 00:00 0 7fb83fef6000-7fb840000000 ---p 00000000 00:00 0 7fb840000000-7fb843e4b000 rw-p 00000000 00:00 0 7fb843e4b000-7fb844000000 ---p 00000000 00:00 0 7fb844000000-7fb847a97000 rw-p 00000000 00:00 0 7fb847a97000-7fb848000000 ---p 00000000 00:00 0 7fb848000000-7fb84bf98000 rw-p 00000000 00:00 0 7fb84bf98000-7fb84c000000 ---p 00000000 00:00 0 7fb84e6b0000-7fb84e6d6000 rw-p 00000000 00:00 0 7fb84ece5000-7fb84ecfb000 r-xp 00000000 fb:00 265656 /lib/libresolv-2.11.1.so 7fb84ecfb000-7fb84eefa000 ---p 00016000 fb:00 265656 /lib/libresolv-2.11.1.so 7fb84eefa000-7fb84eefb000 r--p 00015000 fb:00 265656 /lib/libresolv-2.11.1.so 7fb84eefb000-7fb84eefc000 rw-p 00016000 fb:00 265656 /lib/libresolv-2.11.1.so 7fb84eefc000-7fb84eefe000 rw-p 00000000 00:00 0 7fb84eefe000-7fb84ef03000 r-xp 00000000 fb:00 265666 /lib/libnss_dns-2.11.1.so 7fb84ef03000-7fb84f102000 ---p 00005000 fb:00 265666 /lib/libnss_dns-2.11.1.so 7fb84f102000-7fb84f103000 r--p 00004000 fb:00 265666 /lib/libnss_dns-2.11.1.so 7fb84f103000-7fb84f104000 rw-p 00005000 fb:00 265666 /lib/libnss_dns-2.11.1.so 7fb84f104000-7fb84f110000 r-xp 00000000 fb:00 265670 /lib/libnss_files-2.11.1.so 7fb84f110000-7fb84f30f000 ---p 0000c000 fb:00 265670 /lib/libnss_files-2.11.1.so 7fb84f30f000-7fb84f310000 r--p 0000b000 fb:00 265670 /lib/libnss_files-2.11.1.so 7fb84f310000-7fb84f311000 rw-p 0000c000 fb:00 265670 /lib/libnss_files-2.11.1.so 7fb84f311000-7fb84f312000 ---p 00000000 00:00 0 7fb84f312000-7fb84fb12000 rw-p 00000000 00:00 0 7fb84fb12000-7fb84fb13000 ---p 00000000 00:00 0 7fb84fb13000-7fb850313000 rw-p 00000000 00:00 0 7fb850313000-7fb850314000 ---p 00000000 00:00 0 7fb850314000-7fb850b14000 rw-p 00000000 00:00 0 7fb850b14000-7fb850b15000 ---p 00000000 00:00 0 7fb850b15000-7fb851315000 rw-p 00000000 00:00 0 7fb851315000-7fb851316000 ---p 00000000 00:00 0 7fb851316000-7fb851b16000 rw-p 00000000 00:00 0 7fb851b16000-7fb851b17000 ---p 00000000 00:00 0 7fb851b17000-7fb852317000 rw-p 00000000 00:00 0 7fb852317000-7fb852318000 ---p 00000000 00:00 0 7fb852318000-7fb852b18000 rw-p 00000000 00:00 0 7fb852b18000-7fb852b19000 ---p 00000000 00:00 0 7fb852b19000-7fb853319000 rw-p 00000000 00:00 0 7fb853319000-7fb85331a000 ---p 00000000 00:00 0 7fb85331a000-7fb853b1a000 rw-p 00000000 00:00 0 7fb853b1a000-7fb853b1b000 ---p 00000000 00:00 0 7fb853b1b000-7fb85431b000 rw-p 00000000 00:00 0 7fb85433d000-7fb854349000 rw-s 00000000 fb:00 10226143 /home/me/.bitcoin/__db.006 7fb854349000-7fb85494d000 rw-s 00000000 fb:00 10226141 /home/me/.bitcoin/__db.005 7fb85494d000-7fb854a6d000 rw-s 00000000 fb:00 10226140 /home/me/.bitcoin/__db.004 7fb854a6d000-7fb8569af000 rw-s 00000000 fb:00 10226139 /home/me/.bitcoin/__db.003 7fb8569af000-7fb856c9b000 rw-s 00000000 fb:00 10226138 /home/me/.bitcoin/__db.002 7fb856c9b000-7fb856e15000 r-xp 00000000 fb:00 265667 /lib/libc-2.11.1.so 7fb856e15000-7fb857014000 ---p 0017a000 fb:00 265667 /lib/libc-2.11.1.so 7fb857014000-7fb857018000 r--p 00179000 fb:00 265667 /lib/libc-2.11.1.so 7fb857018000-7fb857019000 rw-p 0017d000 fb:00 265667 /lib/libc-2.11.1.so 7fb857019000-7fb85701e000 rw-p 00000000 00:00 0 7fb85701e000-7fb857034000 r-xp 00000000 fb:00 262156 /lib/libgcc_s.so.1 7fb857034000-7fb857233000 ---p 00016000 fb:00 262156 /lib/libgcc_s.so.1 7fb857233000-7fb857234000 r--p 00015000 fb:00 262156 /lib/libgcc_s.so.1 7fb857234000-7fb857235000 rw-p 00016000 fb:00 262156 /lib/libgcc_s.so.1 7fb857235000-7fb8572b7000 r-xp 00000000 fb:00 262228 /lib/libm-2.11.1.so 7fb8572b7000-7fb8574b6000 ---p 00082000 fb:00 262228 /lib/libm-2.11.1.so 7fb8574b6000-7fb8574b7000 r--p 00081000 fb:00 262228 /lib/libm-2.11.1.so 7fb8574b7000-7fb8574b8000 rw-p 00082000 fb:00 262228 /lib/libm-2.11.1.so 7fb8574b8000-7fb8575ae000 r-xp 00000000 fb:00 9175807 /usr/lib/libstdc++.so.6.0.13 7fb8575ae000-7fb8577ae000 ---p 000f6000 fb:00 9175807 /usr/lib/libstdc++.so.6.0.13 7fb8577ae000-7fb8577b5000 r--p 000f6000 fb:00 9175807 /usr/lib/libstdc++.so.6.0.13 7fb8577b5000-7fb8577b7000 rw-p 000fd000 fb:00 9175807 /usr/lib/libstdc++.so.6.0.13 7fb8577b7000-7fb8577cc000 rw-p 00000000 00:00 0 7fb8577cc000-7fb8577e4000 r-xp 00000000 fb:00 265665 /lib/libpthread-2.11.1.so 7fb8577e4000-7fb8579e3000 ---p 00018000 fb:00 265665 /lib/libpthread-2.Aborted
1309	Currently the documentation is empty It would also be good for lloyd/eyedee.me to be forked to mozilla/something
1308	- move placeholderTexts from XML to source to avoid a problem with Qt < 4.7 - add eventFilter for address field to select text when clicking in - add Clear All button - rework strings - use QPushButtons instead of QDialogButtonBox - use same layout as in messagepage.h for verifymessagedialog.h It would be nice to discuss the strings once more, before we update the translation master file to not again get strings translated, that are not "final". I really love that GUI feature and want to thank sje397 for his great work, which I only try to improve a little :).
1307	I observed this today and thought why does the debug.log open twice. It seems that my naming with on_openDebugLogfileButton_clicked() is somehow internally used by Qt. So we had a connect() which uses on_openDebugLogfileButton_clicked() on clicked() and the internal stuff, which resulted in that strange behaviour. After renaming the function to on_openDebugLogfileBtn_clicked() the debug.log opens only once, as intended. I stumpled upon this as on_lineEdit_returnPressed() is used in no connect and only the function declaration and definition exists.
1306	This is an option I use regularly, as I find that sometimes things work more reliably through tor, and at other times directly. This option allows my peers to use both, thereby improving overall connectivity.
1305	Useful for debugging bitcoin dealing with signals and exiting. Adds a line to debug.log when signal received.
1304	Adds the block timestamp to the debug.log output. Can be useful when catching up and viewing the progress in debug.log to see how far behind on the blockchain the node is. Can also be interesting to see the duration between blocks, and sometimes even seeing the odd block that has timestamps earlier than previous blocks - which could indicate whether the network is attempting to be manipulated. This pull is a subset of pull #1311
1303	1) block hash -> CBlockIndex becomes "blkhash.dat", DB_HASH 2) tx hash -> CTxIndex becomes "txhash.dat", DB_HASH 3) remainder is renamed to CMetaDB, "blkmeta.dat" OBSOLETES: #1282
1302	- Use strprintf or vstrprintf instead of snprintf
1301	Ensures that the command and reply is visible. My take on #1297, but scrolls to the end after the user executed a command instead of when something is appended, which is more natural to me and prevents annoyances without having to special-case message types. (By setting the scrollbar to the end, this re-enables auto-scrolling in the widget itself)
1300	If Reorganize() fails, then its caller, CBlock::SetBestChain(), will call TxnAbort(). Redundant TxnAbort() calls are harmless. The second will return an error return value, with no other side effects. TxnAbort() return values are generally never checked. The impact is nil.
1299	
1298	This pull request has fixes to prevent bit shifting signed integers to the left, onto and past the sign bit. While this currently does not cause problems, it is undefined behavior in C++11 and could cause problems in the future (i.e. so-called time bombs). Bitcoin in particular should be extra careful about these problems.
1297	
1296	- remove 2 ugly spacess from a message string
1295	Checking TxnCommit() return value is obviously needed. Checking TxnBegin() return value is important too; failing to start a transaction could occur for any number of reasons.
1294	Using bitcoin tag v0.6.2.2, if I press Ctrl+C right after starting bitcoind, it crashes: ``` Core was generated by `./bitcoind -dns -connect=10.210.1.1. Program terminated with signal 6, Aborted. #0 0x00007fa828e9e3a5 in __GI_raise (sig=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64 64 ../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory. in ../nptl/sysdeps/unix/sysv/linux/raise.c (gdb) bt #0 0x00007fa828e9e3a5 in __GI_raise (sig=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:64 #1 0x00007fa828ea1b0b in __GI_abort () at abort.c:92 #2 0x00007fa82c382f38 in undefined_behavior_trap_handler () #3 0x00007fa82c139d79 in StopNode () at net.cpp:1707 #4 0x00007fa82bfcb6fb in Shutdown (parg=<optimized out>) at init.cpp:58 #5 0x00007fa82bfcbcd2 in AppInit (argc=<optimized out>, argv=<optimized out>) at init.cpp:118 #6 0x00007fa82bfcbc3a in main (argc=<optimized out>, argv=<optimized out>) at init.cpp:96 ``` The relevant lines of code around net.cpp:1707:StopNode(): ``` 1700 bool StopNode() 1701 { 1702 printf("StopNode()\n"); 1703 fShutdown = true; 1704 nTransactionsUpdated++; 1705 int64 nStart = GetTime(); 1706 for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++) 1707 semOutbound->post(); ``` The reason seems to be that semOutbound has not been initialized yet: ``` (gdb) p semOutbound $1 = 0 ``` In other words, StopNode() is being called before StartNode().
1293	Cleans up and organizes several scattered functions and variables related to the BDB env. Class CDBInit() existed to provide a guaranteed-via-C++-destructor cleanup of the db environment. A formal CDBEnv class provides all of this inside a single wrapper. NOTES: 1) Other db.cpp-related operations might be candidates for CDBEnv inclusion. This current commit was chosen as a good starting point, only encapsulating clearly-dbenv-related items. 2) Further wrappers may easily encapsulate remaining direct bitdb.dbenv accesses, though it hardly seems worth it. 3) CDBEnv is a starting point for easy cross-database transactions. BDB supports this, but bitcoin codebase hardcodes txn<->database association into CDB.
1292	Luke noticed there was a boost/thread/* set of synchronisation primitives, separate from those in boost/interprocess/sync/*. Given that they do not need to cope with locks being in shared memory, they are different and simpler on some systems. This commit replaces all sync.{h,cpp} infrastructure by systems provided by boost/thread/*. So far, it seems to work well on Linux, OSX and BSD (the latter two required a workaround before, as the interprocess semaphores and condition variables used spinlocks - it seems the thread ones dont).
1291	
1290	<pre>printf("CBlock::WriteToDisk() : Truncated block file %s (new size: %u bytes)\n", std::string.c_str(), uint64 &);</pre> Result: "CBlock::WriteToDisk() : Preallocated C:\Bitcoin\testnet\blk0001.dat bytes for block file 2130706432" -> good <pre>printf("CBlock::WriteToDisk() : Truncated block file %u (new size: %s bytes)\n", uint64 &, std::string.c_str());</pre> Result: "CBlock::WriteToDisk() : Preallocated 2130706432 bytes for block file (null)" -> bad I cant explain, but the uint64 before the reference to a std::string works, reverse order and the std::string displays as (null). Can a dev try to reproduce this or has an idea? This is an occurence in an own-build, so perhaps not a global problem!
1289	...date strings to use "Qt" (and not qt or QT) - update initialisation of notificator to use qApp->applicationName() instead of a static string See #1276 for informations!
1288	
1287	Closes #1280.
1286	I originally intended to just not implement IPv6 (and other networks) at all for IRC, but its trivial and probably useful for testnet.
1285	* Add InitError() and InitWarning() functions to init.cpp * Make all error reporting happen through those * Add and improve argument checks + error messages
1284	- Solves #1278, attempts to address #1049 - Removes \ts from help message that are removed afterwards anyway - Moves UI-specific command-line options help to UI code - Moves `-detachdb` help entry out of `#ifdef USE_UPNP`
1283	As it says on the tin. Seems there is a mysterious issue on Qt 4.6.2.
1282	blkindex.dat stores all kinds of data, and as such, each key is overloaded to form a namespace. All keys beginning with "blockindex" form the hash->CBlockIndex data that is loaded into mapBlockIndex. This change moves mapBlockIndex data to its own database, custom tailored for the sort of data we wish to store: - BDB type changed from btree to hash - key is uint256 hash, with no prefixes Usage is cleaner, and uses slightly less CPU and disk space than the previous solution. COMPATIBILITY STATUS: A new block chain must be downloaded, or at least reindexed. As such, may want to delay this change, if other major database changes are planned. MERGE STATUS: Ready for review and comment, but not ready for immediate upstreaming.
1281	Even with the GetDataDir() cached system, a function call is overkill for the vast majority of uses in the code. The values are static once the program is initialized, so initialize pathDataDir once. GetDataDir() is renamed to GetPrepDataDir() to better indicate that it has side effects. Curious to see whether people think this is worth merging or not. I think it cleans up the code, and is ever so slightly more CPU efficient for most use cases.
1280	I get a try to use irc module and look into debug.log. And I found folowwing: IRC :pelican.heliacal.net NOTICE AUTH :*** Looking up your hostname... IRC :pelican.heliacal.net NOTICE AUTH :*** Couldnt look up your hostname IRC SENDING: NICK IRC SENDING: USER 8 * : IRC :pelican.heliacal.net 431 * :No nickname given IRC :pelican.heliacal.net 461 * USER :Not enough parameters <...skipped...> IRC ERROR :Closing Link: 2a02:2560:6d2:115b:c2f8:daff:fe59:8c05. (Registration timed out) So, it seems, it is mistake in one of functions, called from 252 line in irc.cpp and one of them returns an empty string if IPv6 address is used.
1278	When I tested this last time (before pulling it from repo to main tree) I was able to run bitcoin-qt --help and look into options from bitcoind, but now it just quietly start and dont show help (but it support other bitcoind options like -blocknet abd -addnode. Just applied them silently).
1277	
1276	If all or most devs agree, I propose to use always Bitcoin (uppercase B) instead of bitcoin in strings used in the client. Im fine with doing the pull that changes this!
1275	...such is a silly translation less to do :)
1274	- set minimum size for height allowed by Qt Creator
1273	I think. it will be nice to add commands like addnode and listnodes to PRC interface, so it will be unneded to restart bitcoind to manual node adding on, for example, testing IPv6 connectivity ;)
1272	
1271	Fixes Issue #1234 - re-issues getblocks to the next suitable peer when the previously selected one disappears. edit@laanwj: clarified title, was "issue1234"
1270	Currently, when a transaction item is clicked on the overview page it jumps to the history page. This pull request extends this behavior to focus and select the clicked transaction.
1269	Convert RPC console to QTextEdit instead of QTableView * This allows copy/pasting whole or partial messages * Handle output more consistently in console * No more scrollbars-in-scrollbars: by setting per-pixel scrolling on the table, cells can have any height * Decorations for "request" and "reply" are changed to the txin and txout icons instead of colored squares
1268	...hout an ugly line-break
1267	
1266	
1265	- Generate *.qm only when needed (when underlying ts changed, and when qmake is run), this avoids a long qrc compile and link step every time - Generate build.h every time, but only trigger link when it changed (like makefile.unix)
1264	
1263	- add the client startup time to the debug window - rename Version label to Client, which is better suiting now - add IBeamCursor for selectable text on the information page - make ">" sign on RPC page untranslatable - re-order XML-file tags to match real GUI element order I know the .ui looks messed up in the diff, but please try it or load a copy in the Qt designer and youll see its fine (if I have no other bugs in ^^)
1262	- ensure that no double timestamps show up in the debug.log, by removing manual timestamps from the source (now only -logtimestamps parameter adds timestamps to debug.log)
1261	Support CSV export of address book / transaction if there are labels with " in them. Solves a TODO:.
1260	(depends on #1252) I think the various wrappers and utility code around synchronization mechanisms warrant a separate source file.
1259	- change global setWindowIcon() calls to qApp->setWindowIcon() as all parent windows will then use this set icon
1258	...instead of 0, which can not ever be true
1257	- fix for: guiutil.h: In constructor GUIUtil::ToolTipToRichTextFilter::ToolTipToRichTextFilter(int, QObject*): guiutil.h:90: warning: GUIUtil::ToolTipToRichTextFilter::size_threshold will be initialized after [-Wreorder] guiutil.cpp:252: warning: base QObject [-Wreorder] guiutil.cpp:251: warning: when initialized here [-Wreorder] - make constructor for ToolTipToRichTextFilter explicit
1256	It would be very nice, if the displayed format of the date-time for Build date and Block time in the RPC console Information tab could be aligned. Im not sure if there is an easy way though.
1255	The preprocessor magic in version.cpp require CLIENT_VERSION_* to be macros, as they are stringified into CLIENT_DESC when no git-describe output is available.
1254	Previously, a single TX would trigger two log lines in quick succession, addUnchecked(): size 152 CTxMemPool::accept() : accepted c4cfdd48b7 After this change, only one log line is used: CTxMemPool::accept() : accepted 98885e65db (poolsz 26)
1253	Bitcoin-Qt compiles fine on my mac using macports boost@1.47_0_2 But compilation fails with boost@1.49_0_0 First error is at src/qt/qtipcserver.cpp line 33
1252	* Use semaphores instead of condition variables for limiting outgoing connections * Cleanup handling of outgoing connections * Use polling implementation of semaphores on OSX, as boosts semaphores seem to spinlock.
1251	...derText to the XML file (after this all parts in the code that use setPlaceholderText have this comment
1250	- rename "Start Bitcoin on window system startup" to "Start Bitcoin on system login" and move it to Main - hide "Window" Options on Mac as there are currently none available - remove an unused variable (BitcoinAmountField from NetworkingOptions) - add Alt-Shortcuts where they were missing - allow translation of "default" used in language selection This is partly based on a discussion in #1248, which can be closed after this gets accepted!
1249	Ive updated the ES localization at trasifex. Fixed some ugly typos in the main window and did an important style review.
1248	IMHO the "Start Bitcoin on window system startup" option doesnt fit below "Window". I was thinking if it could fit in "Main", which it does, but I think the best thing would be to rename "Window" into "Client". This is self-explaining, all options that are in there are Client-Options and not only options for the Client-Window (and thats how I understand the current wording). I propose to rename the whole WindowOptionsPage stuff into ClientOptionsPage, to make this a whole. I have no problem with creating a pull for this, but at first what do you think?
1247	This adds code to open (display) the debug.log on Windows with the associated application and adds an entry under help in the main menu. I used #ifdef WIN32 to make this active for Windows only! addresses #1244
1246	CreateNewBlock: Check that the produced CBlock is acceptable (except for proof-of-work and merkletree, since those need to be provided later) This throws an exception from CreateNewBlock otherwise, which is not safe without #1245!
1245	Without this, the following bugs are possible: 1) NULL pointer dereference - CreateNewBlock returns NULL (out of memory); pblock is left NULL and JSON error thrown - Next call sees pindexPrev/nTransactionsUpdatedLast/nStart up to date, so skips over making a new one - This next call then tries to update the time on the "current" pblock (NULL) 2) Deleted object dereference - CreateNewBlock throws an exception (not sure if this is possible right now); pblock is left with a pointer to a deleted CBlock - Next call sees pindexPrev/nTransactionsUpdatedLast/nStart up to date, so skips over making a new one - This next call then tried to update the time on the current pblock (which is deleted) - Consequences of this memory corruption are undefined!
1244	Users are sometimes unable to locate debug.log on their own, so this would help with troubleshooting. See #1075 for discussion.
1243	Fixes #1241
1241	When you bring up the debug console the entry area isnt focused until you click on it the first time even though it has a blinking cursor. Makes it seem like it doesnt work.
1240	- Transaction fees for children might help the parent transaction get confirmed - Transaction fees can boost the priority of transactions included
1239	- show testnet icon for tray-menu option Show/Hide - set tooltip for trayicon to match non-testnet text (just [testnet] added) "Bitcoin client [testnet]" - remove obsolete title_testnet variable
1238	- add Debug window to tray-menu - switch sendCoinsAction and receiveCoinsAction in tray to match button ordering in the client window A nice thing would be some kind of icon / symbol for the Debug window, but Im not able to do this graphic-wise.
1237	
1236	Report from IRC: < Eliel> I think something needs to be done to the user interface to help users avoid situations like this. I wonder how many have just silently just abandoned bitcoin after trying and not seeing the transaction in their client. < Eliel> its not clearly visible from the UI that you cant expect transactions to show up before the blockchain download is complete. Theres also plenty of people who dont read instructions. < Eliel> I think a good way to fix this would be to show a note on the top of the transaction list that says "blockchain still downloading, some transactions may not show up"
1235	I would like to do this now regularly, to make our translations faster and better! That file is generated via: "lupdate -no-obsolete bitcoin\bitcoin-qt.pro"
1234	This is a well know behavior that ought to be fixed, but I dont think anyone has opened an issue for it yet. During the initial syncup if the peer were pulling from goes away the download will stop until the next block triggers the process. This is suboptimal and results in bitcoin-is-stuck complaints on long blocks or users needlessly restarting their client or reinstalling Bitcoin.
1233	This is based on cblockstore and commits blocks in a separate thread from downloading/initial checking (in CheckBlock). It offers a nice performance gain over cblockstore alone. * pfrom->Misbehaving is now called in a callback instead of after EmitBlock as nDoS is not known until the block is committed. This could give us a bit more work to do from a bad nodes blocks, but should be pretty safe as the buffer is limited to 20 blocks by default (-blockbuffersize). * A setBlocksSeen is added which holds a set of blocks which have passed basic DOS checks (CheckBlock and the minwork computations), ie is the list of orphans + accepted blocks. This allows us to avoid cs_main locking when doing the duplicate detection in the initial checking * FinishEmitBlock callbacks are done in series and, therefore, CBlockStore had to be changed to allow for InOrder callback threads. Though FinishEmitBlock callbacks could be called out of order, this would result in a significant number of "orphan" blocks being committed before being merged into the main block tree, which is pretty ugly and inefficiency. * GetLastCheckpoint now returns a cached value instead of scanning mapBlockIndex each time. This is primarily to avoid a cs_main lock in the initial checking, but is also a micro-optimization.
1232	Cant lock twice.
1230	* Use -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameters * Remove xCXXFLAGS usage in makefile.unix * Fix several recent and older sign-compare warnings
1229	Most of the information on the "Overview" tab can be moved to the "Transactions" tab. The existing Overview tab is inefficient at using screen space, and it has too much whitespace. I propose merging the two tabs into one tab called "Wallet". poorly done mock-up:
1228	I see the text amp; on many of the menues in the bitcoin client. This must be a bug. Im using windows 7 64-bit with Swedish language so the bitcoin client is in Swedish aswell.
1227	This is a reminder, to ensure the Transifex translators have enough time to catch up with the massive changes that will happen in 0.7 and happened before. Last official update was before 0.6 got final!
1226	Extracted this from another unloved pull, to get this merged :).
1225	See for the discussion about this!
1224	Before 0.8 is released, the compiled-in list of seed nodes should be updated.
1223	Before releasing version 0.7, we should add a new block checkpoint.
1222	Currently, the icons in the BitCoin wallet stick out like sore thumbs on the vast majority of Linux desktops. (Probably looking the least out of place on KDE-based desktops, given the design aesthetic.) The `QIcon` initializers in `BitcoinGUI::createActions()` in `src/qt/bitcoingui.cpp` should be changed to use `QIcon::fromTheme` instead. Also, the icons in `:/icons/` should be renamed to match the XDG icon-naming spec so the fallback behaviour is preserved without needing to provide the optional second parameter to `fromTheme`. For example: * `QIcon(":/icons/filesave")` should become `QIcon::fromTheme("document-save")` * `QIcon(":/icons/quit")` should become `QIcon::fromTheme("application-exit")` * `QIcon(":/icons/address-book")` should become `QIcon::fromTheme("x-office-address-book")` * `document-properties` would be a good standard replacement for `:/icons/options` * You can get away with using `go-next` and `go-down` to replace `:/icons/send` and `:/icons/receiving_addresses` Ideally, youll want to install any icons not covered by the icon-naming spec in the appropriate size and category subfolders of the fallback theme at `$PREFIX/share/icons/hicolor/` where its easy for theme authors to look up the names to override. Heres all the relevant documentation: * [QIcon:fromTheme](http://qt-project.org/doc/qt-4.8/qicon.html#fromTheme) * [QIcon:themeSearchPaths (Icon lookup semantics)](http://qt-project.org/doc/qt-4.8/qicon.html#themeSearchPaths) * [Installing icons to the system fallback theme](http://standards.freedesktop.org/icon-theme-spec/latest/ar01s07.html) * [Standardized icon names](http://standards.freedesktop.org/icon-naming-spec/icon-naming-spec-latest.html#names)
1221	See: This wont break any translations, as we had a correct and an ugly translations in for quite some time. This is a cosmetic fix that breaks nothing!
1220	The options dialog crammed too many items into the main page. This pull request organizes the options into four pages which are clearly different categories: Main, Network, Window and Display. It also adds an option to change the language.
1219	
1218	Settings menu->Options->Main "Optional transaction fee per kB that helps make sure your transactions are processed quickly. Most transactions are 1 kB. Fee 0.01 recommended." This message is explicitly put in a label above the amount-textbox, but it is also the tooltip for the textbox. IMO, the tooltip should be something simpler, if it has one at all. If for some reason we keep the redundant tooltip, they should share the same string for translations.
1217	Judging from the debug.log output, it appears that bitcoind stops responding to messages from other nodes while it is busy running ProcessBlock(). As ProcessBlock can sometimes take 2 minutes, this seems like perhaps something that can benefit from its own thread. Is anyone working on doing this? If not, Im happy to give it a shot. Opening this issue (even though its always been like this) to link to the pull request thatll fix this.
1216	Fedora build instructions, as required at
1215	- Add all actions that can be triggered with buttons to the context menu - Hide delete action from context menu for receiving tab - "Copy Address" instead of the vague, longwinded "Copy to Clipboard"
1214	
1212	- remove ability to translate "0 BTC" and "123.456 BTC" as this is only used as preview in the Qt Designer anyway - set mouse cursor to IBeam for selectable labels
1211	- use it in context / main menus, but not on buttons - update some strings to be clearer / more informative
1210	Im asking myself and other GUI devs (@laanwj), if it is of any UX benefit to have Alt-Shortcuts on buttons in the GUI at all. It seems there are quite many of them and on some tabs they work on other tabs there is more than one Button / action having the same shortcut. We have to clean this up or perhaps remove them on buttons.
1209	Prevents it from seeming to hang during shutdown if shutdown is triggered while the window is open.
1208	...s used when there are MAX_OUTBOUND_CONNECTIONS connections. Also MAX_OUTBOUND_CONNECTIONS is no longer static. This had to be done so that it could be made extern for reading in bitcoingui.cpp, though this hopefully will not hurt anything else.
1207	A function returned the element to remove from a bucket, instead of its position in that bucket. This function was only called when a tried bucket overflowed, which only happens after many outgoing connections have been made. Closes: #1065, #1156
1206	- change dialog title to "Passphrase Dialog as thats better for distinction on Transifex - remove style-sheet for bold font and use default Qt Designer option for bold - remove capsLabel default text -> results in removal of a clear() in the source I tried to move the string, which is displayed when Caps Lock is active into the .ui file and use setVisible(true / false), but that resulted in layout jumping / small layout movements, which were rather ugly!
1205	Gets rid of `MainFrameRepaint` in favor of specific update functions that tell the UI exactly what changed. - This improves the efficiency of various handlers (no unnecessary balance recalculations). - Also fixes the problem with mined transactions not showing up until restart. - As this finally makes it possible for the UI to know when a new alert arrived, it can be shown as OS notification. - New addresses are selected again in address book (was a regression in 0.6.1) The following notifications were added: - `NotifyBlocksChanged`: Block chain changed - `NotifyKeyStoreStatusChanged`: Wallet status (encrypted, locked) changed. - `NotifyAddressBookChanged`: Address book entry changed. - `NotifyTransactionChanged`: Wallet transaction added, removed or updated. - `NotifyNumConnectionsChanged`: Number of connections changed. - `NotifyAlertChanged`: New, updated or cancelled alert. These notifications could also be useful for RPC clients. However, currently, they are ignored in bitcoind. Also brings back polling with timer for numBlocks in ClientModel. This value updates so frequently during initial download that the number of signals clogs the UI thread and causes heavy CPU usage. And after initial block download, the value changes so rarely that a delay of half a second until the UI updates is unnoticable. **Second commit converts UI interface to boost::signals**: - Core no longer links to any UI functions directly, but the UI subscribes to notifications through boost::signals. - Signals now go directly from the core to WalletModel/ClientModel. - WalletModel subscribes to signals on CWallet: Prepares for multi-wallet support, by no longer assuming an implicit global wallet. - Gets rid of noui.cpp, the few lines that were left are merged into init.cpp - Rename wxXXX message flags to MF_XXX, to make them UI indifferent. - ThreadSafeMessageBox converted to void, no longer returns the value `4` which was never used
1204	- set focus to address field on opening messagepage or "Clear All" - consolidate BitcoinGUI::gotoMessagePage() functions into a single one - rename window title to "Sign Message Dialog" If you directly open the message page via clicking Sign Message and passing an address, the focus is in the message input field, as intended. If you simply open the message page via menu, focus is set to the address field.
1203	As this makes things easier on transifex, as currently we have 2x only "Dialog" to translate there. - changed window size to the minimum values Qt Creator allows me to set
1202	- add an Alt-Shortcut to "Clear &all"
1201	+ removed an an unused XML-tag
1200	also, move it to rec/icons instead of res/images
1199	This is the behavior I expect (but miss) every time I use this functionality.
1198	CAddrMan is the new address storage manager, and it already knows how to read/write its own serialized data. Therefore, we may treat it like the block file and implement WriteToDisk() and ReadFromDisk() similarly. This eliminates the need for the BDB-managed addr.dat, replacing it with "peers.dat" containing nothing but a flat file storing addrman data (and a header and checksum).
1197	
1196	Pull request #948 introduced a fix for nodes stuck on a long side branch of the main chain. The fix was non-functional however, as the additional getdata request was created in a first step of processing, but dropped in a second step as it was considered redundant. This commits fixes it by sending the request directly.
1194	This is much easier to dont set it in the code, but use the Qt Designer (XML).
1193	This is a matter of taste, but IMO this looks less cluttered and more modern. Before ![Before](http://i50.tinypic.com/2eckyl4.png) After ![After](http://i48.tinypic.com/2r761le.png) Also: - Add all actions that can be triggered with buttons to the context menu - Hide delete action from context menu for receiving tab - Move attributes that can be set in .ui file - Shorten "Copy to Clipboard" on button to simply "Copy Address". Shorter and more clear.
1192	Judging from the connections my node has made just today, I dont see a single node running behind tor that isnt revealing its actual internet IP address. Surely this isnt ideal, is it? Example debug.log entries:- 03/05/12 13:55:16 receive version message: version 60000, blocks=178422, us=127.0.0.1:55963, them=24.7.178.63:8333, peer=p2hwc26zdsrqxiix.onion:8333 03/05/12 13:56:04 receive version message: version 50200, blocks=178422, us=127.0.0.1:57988, them=178.79.170.173:28333, peer=7hxvg2lvr2ashzli.onion:8333 03/05/12 13:56:17 receive version message: version 50200, blocks=178422, us=127.0.0.1:46801, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 03/05/12 13:57:02 receive version message: version 50300, blocks=178422, us=127.0.0.1:53726, them=81.20.130.168:8333, peer=sjdntqu5roj4q6lo.onion:8333 03/05/12 14:06:48 receive version message: version 50300, blocks=178423, us=127.0.0.1:34354, them=81.20.130.168:8333, peer=sjdntqu5roj4q6lo.onion:8333 03/05/12 14:06:53 receive version message: version 60000, blocks=178423, us=127.0.0.1:55967, them=24.7.178.63:8333, peer=p2hwc26zdsrqxiix.onion:8333 03/05/12 14:06:57 receive version message: version 50200, blocks=178423, us=127.0.0.1:58891, them=178.79.170.173:28333, peer=7hxvg2lvr2ashzli.onion:8333 03/05/12 14:07:03 receive version message: version 50200, blocks=178423, us=127.0.0.1:47146, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 03/05/12 15:21:50 receive version message: version 50200, blocks=178431, us=127.0.0.1:51802, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 03/05/12 15:24:30 receive version message: version 50300, blocks=178432, us=127.0.0.1:50175, them=81.20.130.168:8333, peer=sjdntqu5roj4q6lo.onion:8333 03/05/12 17:36:24 receive version message: version 50200, blocks=178452, us=127.0.0.1:47011, them=178.79.170.173:28333, peer=7hxvg2lvr2ashzli.onion:8333 03/05/12 17:52:30 receive version message: version 50300, blocks=178453, us=127.0.0.1:40151, them=81.20.130.168:8333, peer=sjdntqu5roj4q6lo.onion:8333 03/05/12 18:02:40 receive version message: version 50200, blocks=178456, us=127.0.0.1:59146, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 03/05/12 18:04:10 receive version message: version 60000, blocks=178456, us=127.0.0.1:56099, them=24.7.178.63:8333, peer=p2hwc26zdsrqxiix.onion:8333 03/05/12 18:58:37 receive version message: version 60000, blocks=178463, us=127.0.0.1:56108, them=24.7.178.63:8333, peer=p2hwc26zdsrqxiix.onion:8333 03/05/12 18:59:32 receive version message: version 50200, blocks=178463, us=127.0.0.1:34445, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 03/05/12 20:48:21 receive version message: version 50200, blocks=178476, us=127.0.0.1:34890, them=178.79.170.173:28333, peer=7hxvg2lvr2ashzli.onion:8333 03/05/12 21:36:40 receive version message: version 50300, blocks=178480, us=127.0.0.1:57949, them=81.20.130.168:8333, peer=sjdntqu5roj4q6lo.onion:8333 03/05/12 21:37:47 receive version message: version 60000, blocks=178480, us=127.0.0.1:56334, them=24.7.178.63:8333, peer=p2hwc26zdsrqxiix.onion:8333 03/05/12 21:38:00 receive version message: version 50200, blocks=178480, us=127.0.0.1:37606, them=178.79.170.173:28333, peer=7hxvg2lvr2ashzli.onion:8333 03/05/12 21:39:22 receive version message: version 50200, blocks=178480, us=127.0.0.1:39394, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 03/05/12 22:01:27 receive version message: version 50200, blocks=178484, us=127.0.0.1:39933, them=106.187.36.183:28333, peer=siqdznszjf4e6v5j.onion:8333 03/05/12 22:03:56 receive version message: version 50300, blocks=178484, us=127.0.0.1:43288, them=81.20.130.168:8333, peer=sjdntqu5roj4q6lo.onion:8333 03/05/12 22:04:06 receive version message: version 60000, blocks=178484, us=127.0.0.1:56343, them=24.7.178.63:8333, peer=p2hwc26zdsrqxiix.onion:8333 03/05/12 22:04:14 receive version message: version 50200, blocks=178484, us=127.0.0.1:40180, them=178.79.170.173:28333, peer=7hxvg2lvr2ashzli.onion:8333
1191	I am wondering, how easy would it be to make a lightweight version of bitcoin-Qt. The difference being that it wont store the blockchain locally but instead query connected nodes instead for the needed information. If its able to establish enough connections, and connect to the network in the same way as a full-node, but behaving much in the same way as a node thats not yet downloaded the blockchain, and there was a small modification made to the protocol that allowed the necessary queries - perhaps an extension to the protocol rather than a change to it, and full-nodes can choose whether to opt-in to help provide this service or not. Im not very familiar with how other lightweight clients do it so far, to see how this idea compares. Also, people could configure their lightweight bitcoin-qts to specify which full-nodes to consult, thereby allowing people to configure how much they can trust it. I see the main miners being good souces for such co-operating nodes, and already my full-node obtains most of its blocks from one of the significant mining pools.
1190	There are several errors in the Spanish translation. They are minor but the application will look much more professional if they are fixed. In the main window: Where it says: "Envia monedas" it should say "Enva monedas" "Transaccines" it should say "Transacciones" "Guia de direccines" it should say "Gua de direcciones" "Numero de movimientos" it should say "Nmero de movimientos" In the menu option Configuracin/Opciones: "Conecta atraves de un proxy SOCKS4" it should say "Conecta a travs de un proxy SOCKS4" "Comision de transaccines" it should say "Comisin de transacciones" In several places in the application: "Estas son tus direcciones Bitcoin para recibir pagos. Puedes utilizar una diferente por cada persona emisora para saber quien te est pagando" it should say "stas son tus direcciones Bitcoin para recibir pagos. Puedes utilizar una diferente por cada persona emisora para saber quin te est pagando" "Introduce una etiqueta a esta direccin para aadirla a tu guia" it should say "Introduce una etiqueta a esta direccin para aadirla a tu gua" "El ultimo bloque recibido fue generado" it should say "El ltimo bloque recibido fue generado" "Elije direccin de la guia" it should say "Elige direccin de la gua"
1189	Tested on testnet and works as expected (fixes #952), if I send coins and update or set a label for an address it gets updated in the address list, which it did not before.
1188	
1187	We already require XP, this just fixes Mingw64 build.
1186	Its not clear to me what this feature is for or when Id use it. I fear that this may be the case for other users of bitcoin-qt, and as such they must be missing out on what is obviously (given its prominence) an important facility. Can something be done to raise awareness of the purpose of this feature?
1183	This has been an issue since 6.0, but continues to be a problem. Id say the exit causes windows to be unminimised approximately 50% of the time, so should be possible to debug easily if someone can tell me what to do. Raising an issue as Im curious to see if anyone else experiences this.
1182	This doesnt happen if its quit using the GUI (speaking of which, often the tray icon does not appear, so it cannot be exited using the GUI the majority of the time). Version is 0.6.1rc1 with some modifcations (which shouldnt be the cause, IMHO) - can be reviewed on my github fork. Output from gdb:- Program received signal SIGHUP, Hangup. 0x00007ffff498d473 in poll () from /lib/x86_64-linux-gnu/libc.so.6 (gdb) continue Continuing. [Thread 0x7fffe7e10700 (LWP 20463) exited] [Thread 0x7fffdee43700 (LWP 20480) exited] [Thread 0x7fffdbe3d700 (LWP 20476) exited] [Thread 0x7fffdc63e700 (LWP 20475) exited] [New Thread 0x7fffdc63e700 (LWP 28808)] [Thread 0x7fffdc63e700 (LWP 28808) exited] Program received signal SIGSEGV, Segmentation fault. 0x0000000000a2b630 in ?? () (gdb) bt #0 0x0000000000a2b630 in ?? () #1 0x00007ffff56e3432 in QString::vsprintf(char const*, __va_list_tag*) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #2 0x00007ffff569179c in ?? () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #3 0x00007ffff5691f54 in qWarning(char const*, ...) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #4 0x00007ffff5780fce in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #5 0x00007ffff5785789 in QCoreApplication::exec() () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #6 0x00000000004286d7 in main (argc=1, argv=<optimized out>) at src/qt/bitcoin.cpp:282 (gdb) Also, sometimes (not always) the output to stdout upon exit will make mention of some Qt programming error, something about not catching something in the right thing. Ill update this issue with the exact message when I next see it.
1181	When Bitcoin-qt uses a localization to a right-to-left language (such as Hebrew), the interface and text is still displayed in the left-to-right direction.
1180	These commits should clean up the last of the signed comparison warnings. Id say we can turn on -Wall now.
1179	
1178	...as this is the logical place for them. can you test whether this still builds on windows? Im not sure what includes are needed for CoCreateInstance / GetModuleFileName.
1177	SecureString was moved to allocators.h in commit 6cb6d623479c5dd42d91de7a4d391078d0800e54
1176	
1175	This is not intended to fix a bug, but code is a little smoother and easier to understand for devs working with that part of the code.
1174	(extends #1141 (proxy improvements) and #1021 (ipv6 support) Adds support for running as and connecting to Tor hidden services. *.onion addresses are mapped into the IPv6 range in the same way as OnionCat does. See doc/Tor.txt for more information.
1173	
1172	
1171	
1170	This commit changes no code, and makes no other cleanups than removing the trailing whitespace from source code and comment lines. Script used:
1169	
1167	If you include the same transaction in a block twice the block is rejected by ConnectInputs()... but that is only done after fetching transactions from disk, checking signatures, etc. And it doesnt trigger the DoS prevention code. There should be a check for duplicate transactions in CheckBlock(), so blocks with duplicate transactions are rejected early and trigger the DoS code.
1166	This needs a review from as I simply tried to figure out what I needed to add via some copy & paste from the source and trial and error. I hope Im on track tough. This addresses #943!
1165	- start instance 1 in DataDir_1 listening on port 8333 -> OK - start instance 2 in DataDir_2 listening on port 8333, too -> hard crash of instance 2 after message that client could not be bound to port 8333 From the debug.log of instance 2: 04/29/12 22:06:48 EnvShutdown exception: DbEnv::close: Invalid argument (22) No further GUI exception was displayed at all, as I wrote a hard crash! Guess this is something for /
1163	Too much work was being done on a simple MainFrameRepaint signal. Fixes #1154.
1161	IsInitialBlockDownload() seems to return false if no block has been received more than 10 seconds ago. Why 10 seconds? On my node when its catching up, this function constantly alternates between returning true and false, which I suspect is not what is supposed to happen.
1160	
1159	Instead of rescan time.
1156	``` Program received signal SIGSEGV, Segmentation fault. [Switching to Thread 0xb178ab70 (LWP 28718)] 0xb7b3f637 in std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&) () from /usr/lib/gcc/i686-pc-linux-gnu/4.4.5/libstdc++.so.6 (gdb) thread apply all bt Thread 12 (Thread 0xb278cb70 (LWP 28719)): #0 0xb7fe18d2 in ?? () from /lib/ld-linux.so.2 #1 0xb7be2c86 in nanosleep () from /lib/libpthread.so.0 #2 0xb7f522b3 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib/libboost_thread-mt-1_46.so.1.46.1 #3 0x0809517c in sleep (xt=<optimized out>) at /usr/include/boost/thread/detail/thread.hpp:346 #4 Sleep (n=100000) at util.h:92 #5 0x080d92c8 in ThreadDumpAddress2 (parg=0x0) at net.cpp:1217 #6 0x080d933b in ThreadDumpAddress (parg=0x0) at net.cpp:1228 #7 0xb7bdac82 in start_thread () from /lib/libpthread.so.0 #8 0xb7a10ace in clone () from /lib/libc.so.6 Thread 11 (Thread 0xb178ab70 (LWP 28718)): <-- gdb picked this one by default #0 0xb7b3f637 in std::_Rb_tree_rotate_left(std::_Rb_tree_node_base*, std::_Rb_tree_node_base*&) () from /usr/lib/gcc/i686-pc-linux-gnu/4.4.5/libstdc++.so.6 #1 0xb7b3f9e5 in std::_Rb_tree_rebalance_for_erase(std::_Rb_tree_node_base*, std::_Rb_tree_node_base&) () from /usr/lib/gcc/i686-pc-linux-gnu/4.4.5/libstdc++.so.6 #2 0x080614b1 in erase (__position=<optimized out>, this=<optimized out>) at /usr/lib/gcc/i686-pc-linux-gnu/4.4.5/include/g++-v4/bits/stl_tree.h:1347 #3 erase (__last=<optimized out>, __first=<optimized out>, this=<optimized out>) at /usr/lib/gcc/i686-pc-linux-gnu/4.4.5/include/g++-v4/bits/stl_tree.h:1388 #4 std::_Rb_tree<CNetAddr, std::pair<CNetAddr const, int>, std::_Select1st<std::pair<CNetAddr const, int> >, std::less<CNetAddr>, std::allocator<std::pair<CNetAddr const, int> > >::erase (this=0x81daa40, __x=...) at /usr/lib/gcc/i686-pc-linux-gnu/4.4.5/include/g++-v4/bits/stl_tree.h:1374 #5 0x0805fbac in erase (__x=<optimized out>, this=<optimized out>) at /usr/lib/gcc/i686-pc-linux-gnu/4.4.5/include/g++-v4/bits/stl_map.h:582 #6 CAddrMan::ShrinkNew (this=0x81daa00, nUBucket=209) at addrman.cpp:181 #7 0x080601b4 in CAddrMan::Add_ (this=0x81daa00, addr=..., source=..., nTimePenalty=7200) at addrman.cpp:346 #8 0x080bc360 in Add (nTimePenalty=<optimized out>, source=<optimized out>, vAddr=<optimized out>, this=<optimized out>) at addrman.h:433 #9 ProcessMessage (pfrom=<optimized out>, strCommand=<optimized out>, vRecv=<optimized out>) at main.cpp:2382 #10 0x080bfa32 in ProcessMessages (pfrom=0xa318220) at main.cpp:2803 #11 0x080d8ed8 in ThreadMessageHandler2 (parg=0x0) at net.cpp:1515 #12 0x080d9012 in ThreadMessageHandler (parg=0x0) at net.cpp:1480 #13 0xb7bdac82 in start_thread () from /lib/libpthread.so.0 #14 0xb7a10ace in clone () from /lib/libc.so.6 Thread 10 (Thread 0xb0f89b70 (LWP 28717)): #0 0xb7fe18d2 in ?? () from /lib/ld-linux.so.2 #1 0xb7be2c86 in nanosleep () from /lib/libpthread.so.0 #2 0xb7f522b3 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib/libboost_thread-mt-1_46.so.1.46.1 #3 0x0809517c in sleep (xt=<optimized out>) at /usr/include/boost/thread/detail/thread.hpp:346 #4 Sleep (n=2000) at util.h:92 #5 0x080df8b7 in ThreadOpenConnections2 (parg=0x0) at net.cpp:1304 #6 0x080e0312 in ThreadOpenConnections (parg=0x0) at net.cpp:1242 #7 0xb7bdac82 in start_thread () from /lib/libpthread.so.0 #8 0xb7a10ace in clone () from /lib/libc.so.6 Thread 8 (Thread 0xb1f8bb70 (LWP 28715)): #0 0xb7fe18d2 in ?? () from /lib/ld-linux.so.2 #1 0xb7a09a41 in select () from /lib/libc.so.6 #2 0x080dd0f5 in ThreadSocketHandler2 (parg=0x0) at net.cpp:689 #3 0x080ddea2 in ThreadSocketHandler (parg=0x0) at net.cpp:579 #4 0xb7bdac82 in start_thread () from /lib/libpthread.so.0 #5 0xb7a10ace in clone () from /lib/libc.so.6 Thread 4 (Thread 0xb3f8fb70 (LWP 28711)): #0 0xb7fe18d2 in ?? () from /lib/ld-linux.so.2 #1 0xb7be26b8 in accept () from /lib/libpthread.so.0 #2 0x08100bd1 in call_accept<socklen_t> (s=<optimized out>, addrlen=<optimized out>, addr=<optimized out>) at /usr/include/boost/asio/detail/impl/socket_ops.ipp:75 #3 accept (s=<optimized out>, ec=<optimized out>, addrlen=<optimized out>, addr=<optimized out>) at /usr/include/boost/asio/detail/impl/socket_ops.ipp:93 #4 sync_accept (addrlen=<optimized out>, addr=<optimized out>, state=<optimized out>, ec=<optimized out>, s=<optimized out>) at /usr/include/boost/asio/detail/impl/socket_ops.ipp:119 #5 accept<boost::asio::basic_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > > (this=<optimized out>, ec=<optimized out>, peer_endpoint=<optimized out>, peer=<optimized out>, impl=<optimized out>) at /usr/include/boost/asio/detail/reactive_socket_service.hpp:326 #6 accept<boost::asio::stream_socket_service<boost::asio::ip::tcp> > (ec=<optimized out>, peer_endpoint=<optimized out>, peer=<optimized out>, impl=<optimized out>, this=<optimized out>) at /usr/include/boost/asio/socket_acceptor_service.hpp:197 #7 accept<boost::asio::stream_socket_service<boost::asio::ip::tcp> > (peer_endpoint=<optimized out>, peer=<optimized out>, this=<optimized out>) at /usr/include/boost/asio/basic_socket_acceptor.hpp:747 #8 ThreadRPCServer2 (parg=0x0) at bitcoinrpc.cpp:2470 #9 0x081049a2 in ThreadRPCServer (parg=0x0) at bitcoinrpc.cpp:2358 #10 0xb7bdac82 in start_thread () from /lib/libpthread.so.0 #11 0xb7a10ace in clone () from /lib/libc.so.6 Thread 2 (Thread 0xb4f91b70 (LWP 28709)): #0 0xb7fe18d2 in ?? () from /lib/ld-linux.so.2 #1 0xb7be2c86 in nanosleep () from /lib/libpthread.so.0 #2 0xb7f522b3 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib/libboost_thread-mt-1_46.so.1.46.1 #3 0x0806edb1 in sleep (xt=<optimized out>) at /usr/include/boost/thread/detail/thread.hpp:346 #4 Sleep (n=<optimized out>) at util.h:92 #5 ThreadFlushWalletDB (parg=0xa1537cc) at db.cpp:1125 #6 0xb7bdac82 in start_thread () from /lib/libpthread.so.0 #7 0xb7a10ace in clone () from /lib/libc.so.6 Thread 1 (Thread 0xb7934a70 (LWP 27388)): #0 0xb7fe18d2 in ?? () from /lib/ld-linux.so.2 #1 0xb7be2c86 in nanosleep () from /lib/libpthread.so.0 #2 0xb7f522b3 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib/libboost_thread-mt-1_46.so.1.46.1 #3 0x08090018 in sleep (xt=<optimized out>) at /usr/include/boost/thread/detail/thread.hpp:346 #4 Sleep (n=<optimized out>) at util.h:92 #5 AppInit2 (argc=1, argv=0xbfffef24) at init.cpp:586 #6 0x080927a3 in AppInit (argc=1, argv=0xbfffef24) at init.cpp:113 #7 0x08092857 in main (argc=1, argv=0xbfffef24) at init.cpp:99 ```
1155	I think it would be a nice idea to update the needed package for Windows as its quite hard to compile all required libs for yourself. Perhaps it could include also the optional ones lilke the QR code lib. The package is linked and mentioned in
1154	Verified for 0.6.1 RC1 on Windows 7 x64: - start Bitcoin-Qt with only addr.dat, walled.dat and bitcoin.cfg files in the datadir - click on an (receiving) address in your list while block-chain is downloading / syncing - address is selected and marked active - focus gets lost and address is inactive This seems to happen everytime a new block is received, seem there is some GUI re-draw triggered that makes this focus loss happen. Additionally I have GUI lags while downloading the block-chain + a way to high CPU load!
1152	
1151	This is more consistent with the rest of the labeling seen by the user when accessing the rpc commands.
1150	NOPCH was "no precompiled headers" ... I think. None of our source files pay attention to that flag, and as far as I can tell it isnt a magic compiler flag for gcc.
1148	$ ./test_bitcoin Running 52 test cases... Disconnected 1.192.176.160:8333 for misbehavior (score=100) Disconnected 2.192.176.160:8333 for misbehavior (score=100) Disconnected 1.192.176.160:8333 for misbehavior (score=111) Disconnected 1.192.176.160:8333 for misbehavior (score=100) test/multisig_tests.cpp(83): error in "multisig_verify": check VerifyScript(s, a_and_b, txTo[0], 0, true, 0) failed test/multisig_tests.cpp(105): error in "multisig_verify": a|b: 0 test/multisig_tests.cpp(105): error in "multisig_verify": a|b: 1 test/multisig_tests.cpp(124): error in "multisig_verify": escrow 1: 0 1 test/multisig_tests.cpp(124): error in "multisig_verify": escrow 1: 0 2 test/multisig_tests.cpp(124): error in "multisig_verify": escrow 1: 1 2 test/multisig_tests.cpp(291): error in "multisig_Sign": SignSignature 0 test/multisig_tests.cpp(291): error in "multisig_Sign": SignSignature 1 test/multisig_tests.cpp(291): error in "multisig_Sign": SignSignature 2 test/script_P2SH_tests.cpp(190): error in "set": SignSignature 1 test/script_P2SH_tests.cpp(190): error in "set": SignSignature 2 test/script_P2SH_tests.cpp(190): error in "set": SignSignature 3 test/script_P2SH_tests.cpp(298): error in "AreInputsStandard": check SignSignature(keystore, txFrom, txTo, 2) failed test/script_tests.cpp(244): error in "script_CHECKMULTISIG12": check VerifyScript(goodsig1, scriptPubKey12, txTo12, 0, true, 0) failed test/script_tests.cpp(249): error in "script_CHECKMULTISIG12": check VerifyScript(goodsig2, scriptPubKey12, txTo12, 0, true, 0) failed test/script_tests.cpp(280): error in "script_CHECKMULTISIG23": check VerifyScript(goodsig1, scriptPubKey23, txTo23, 0, true, 0) failed test/script_tests.cpp(285): error in "script_CHECKMULTISIG23": check VerifyScript(goodsig2, scriptPubKey23, txTo23, 0, true, 0) failed test/script_tests.cpp(290): error in "script_CHECKMULTISIG23": check VerifyScript(goodsig3, scriptPubKey23, txTo23, 0, true, 0) failed
1147	Testnet should be reset for 0.7, if not 0.6.1.
1146	Its also needed to compile bitcoin under BSD systems without editing makefile and add -DBSD to CXXFLAGS. Under linux it still compiles without any changes
1145	As discussed in [this question](http://bitcoin.stackexchange.com/questions/3479/) on the Bitcoin StackExchange we discussed the possibility of an RPC-based attack through flash, java etc. Regardless of that specific attack vectors feasibility, RPC is still a potential attack vector if the network is compromised. It was determined in the course of this testing that Bitcoin does not limit the number of failed RPC login attempts, does not institute mandatory wait times after several failed login attempts etc. It will essentially allow as many attempts as you can throw at it, thus opening the door to trivially easy brute force. I dont claim to have the perfect answer to this one, but the issue of brute force attacks on RPC needs to be addressed.
1144	I get a compiler warning for this line here: const wint_t unsigned_c( ( c >= 0 ) ? c : 256 + c ); I dont know how to fix this, so I at least wanted to point the devs to it.
1143	Now that IRC is non-default, any remaining irc=1 users will have difficulty finding each other among 100 increasingly unused channels. Consider backing out the #bitcoin{00-99} change, and go back to #bitcoin.
1142	After this commit, "-Wall" only produces two warnings on my platform. This was sent under a separate cover because it deserves additional review. It changes (slightly) the usage of some serialized objects in a hopefully-superficial way.
1141	* SOCKS5 support. * Support connecting by passing hostnames to SOCKS5 proxy. * Retrofit -connect, -addnode and -dnsseed to use this mechanism is -proxydns is specified.
1140	This really quiets down -Wall. We are down to 3 key signed/unsigned warnings in main.h, and 2-3 other misc. warnings overall.
1139	...as it was missleading
1138	``` Running 52 test cases... Disconnected 1.192.176.160:8333 for misbehavior (score=100) Disconnected 2.192.176.160:8333 for misbehavior (score=100) Disconnected 1.192.176.160:8333 for misbehavior (score=111) Disconnected 1.192.176.160:8333 for misbehavior (score=100) test/script_tests.cpp(99): error in "script_valid": Cound not find/open script_valid.json test/script_tests.cpp(99): error in "script_invalid": Cound not find/open script_invalid.json *** 2 failures detected in test suite "Bitcoin Test Suite" ```
1136	- cleanup some unnecessary spaces - updated a comment - fix a compiler warning because of missing {} (https://github.com/bitcoin/bitcoin/pull/1136/files#L5R1588 and following lines) - remove typedef FILE element_type; from serialize.h as this is used nowhere
1135	Postincrement (var++) requires making a temporary copy of var in C++.
1134	- add some comments / expand some comments - move MyGetSpecialFolderPath() to another #ifdef WIN32 place, rename to GetSpecialFolderPath(), make fCreate default to true (could perhaps be removed and set to always true in the function) and remove fallbacks for SHGetSpecialFolderPathA() (I added an error message instead - this had been suggested in a former pull-request) - remove namespace fs = boost::filesystem; where fs was only used once to shorten the code
1133	Fixes #1125.
1132	grep for ftell and look at the usage of its return value, such as in e.g. nBlockPosRet. File offsets should be stored in [u]int64, not unsigned int. The specific example is not strictly a bug, because we cap the size of our block chain data files before the 4GB barrier. However, re-use of this code for other files could lead to bugs and problems.
1131	Pull request #562 was rejected because it introduced a new ToHex function with a different, potentially less safe interface. This pull request gives most of the speed-up (~30x on my CPU) of his patch but rolls it into the current HexStr function. See the following benchmark results (made using Testing HexStrOld (1000000 iterations) -> 14120.0 ms Testing HexStrNew (1000000 iterations) -> 470.0 ms Testing ToHex (1000000 iterations) -> 100.0 ms It also adds two tests for HexStr: testing HexStr for the empty string and the function that takes a std::vector.
1130	The macro `IMPLEMENT_RANDOMIZE_STACK` uses a "static char" to store the number of loops. This is shared between threads (it is used in at least 9 different thread functions) and operations such as -- are not guaranteed to be atomic. If multiple threads end up in this loop at the same time, there could be executions that would result in an infinite loop (or at least, unreasonably deep stacks that exceed the hardcoded limit of 20). To fix this we could use thread-local storage here (`__thread` /` __declspec(thread)` depending on the compiler...). Or find an alternative for this... slightly crazy macro.
1129	- Easier for debugging (what opcode was 0x... again?) - Clarifies that the opcodes are set in stone in the protocol, and signals that it is impossible to insert opcodes in between. Ive checked that the old and new representation are exactly the same, see for testcase. This needs careful scrutiny though. Edit: also added commit to change type of CMerkleTx::fMerkleVerified (and other in-memory-only flags) from char to bool. It is always (only 3 occurences) used as bool, so this is better. Edit.2: also removed some GUI hints in the bitcoin core, which were remnants from Wx.
1128	Not sure why I didnt submit this a long time ago, but it seems like obvious behaviour...
1127	Im seeing the "~5 block(s) remaining" rather than "~5 blocks remaining"
1126	memset needs cstring and sprintf needs cstdio
1125	Trying to start my testnet-in-a-box instances (with master) I get the following error in the console: Command line: orion@amethyst:~/projects/bitcoin/box$ ../bitcoin/src/bitcoind -datadir=1 -daemon ************************ EXCEPTION: 22DbRunRecoveryException DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery bitcoin in AppInit() terminate called after throwing an instance of DbRunRecoveryException what(): DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery debug.log shows: Bitcoin version v0.6.0-169-g4040598-beta (2012-04-19 18:21:45 +0200) Default data directory /home/orion/.bitcoin Loading addresses... dbenv.open LogDir=1/testnet/database ErrorFile=1/testnet/db.log ************************ EXCEPTION: 22DbRunRecoveryException DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery bitcoin in AppInit() db.log shows: 1/testnet/1/testnet/database: No such file or directory PANIC: No such file or directory unable to join the environment Ive deleted everything except wallet.dat from the data directory, so that cannot be the problem. Note the weird `1/testnet/1/testnet/database`. Maybe something is going wrong while building the path?
1124	
1123	Hi, Im getting the following crash on startup ************************ EXCEPTION: NSt8ios_base7failureE CDataStream::read() : end of data bitcoin in Runaway exception terminate called after throwing an instance of std::ios_base::failure what(): CDataStream::read() : end of data Aborted
1122	This pull request contains two fixes: - Fix test failures on Linux on ARM, which is a platform where "char" is unsigned ("char" is signed on x86). This causes IsHex() to erroneously return true, and Debian doesnt automatically move new versions of bitcoin to its testing distribution, due to the build failures on arm. - Fix a bug where the statically-defined phexdigits is missing an entry, because theres a newline with no comma between "-1" and "-1". Cheers, - Dwayne
1121	I created a little format for storing scriptSigs/scriptPubKeys, so it is easy to exercise the Script opcodes. This is part of a bigger scheme to launch a new testnet, with blocks before a first checkpoint that are full of transactions with interesting Script test cases; Ill be working next on a hacked bitcoind that knows how to take these test cases and turn them into transactions.
1120	It occurs to me that this happens as the node asks several other nodes for the same blocks when it does not see the block appear within a certain time. Due to the speed of the nodes providing blocks, they both respond with the blocks requested, but one will send the block first and usually stay ahead. This isnt a major issue, but it does mean that bandwidth is wasted, and since its probably the bandwidth which is causing the problem in the first place, I expect this will continue to get worse due to being a vicious circle. My proposed solution probably requires a BIP, which would allow a node to request to another node to stop sending blocks (i.e. to the node sending the blocks which it already has). It could do this after one duplicate block, or perhaps after several. Sample case: 04/17/12 22:08:49 askfor block 000000000000096fd80c 0 04/17/12 22:08:50 sending getdata: block 000000000000096fd80c 04/17/12 22:14:12 askfor block 000000000000096fd80c 1334700530000000 04/17/12 22:14:12 sending getdata: block 000000000000096fd80c 04/17/12 22:16:39 received block 000000000000096fd80c 04/17/12 22:16:40 SetBestChain: new best=000000000000096fd80c height=176035 work=29615794588444859740 04/17/12 22:20:07 received block 00000000000009856606 04/17/12 22:20:07 ERROR: ProcessBlock() : already have block 176020 00000000000009856606 04/17/12 22:20:56 received block 00000000000008862df7 04/17/12 22:20:56 ERROR: ProcessBlock() : already have block 176021 00000000000008862df7 04/17/12 22:21:36 received block 000000000000035a84ac 04/17/12 22:21:36 ERROR: ProcessBlock() : already have block 176022 000000000000035a84ac 04/17/12 22:21:59 received block 0000000000000a881c26 04/17/12 22:21:59 ERROR: ProcessBlock() : already have block 176023 0000000000000a881c26 04/17/12 22:22:18 received block 00000000000004ed81e6 04/17/12 22:22:18 ERROR: ProcessBlock() : already have block 176024 00000000000004ed81e6 04/17/12 22:22:52 received block 000000000000068bbe48 04/17/12 22:22:52 ERROR: ProcessBlock() : already have block 176025 000000000000068bbe48 04/17/12 22:23:12 received block 00000000000003425f71 04/17/12 22:23:12 ERROR: ProcessBlock() : already have block 176026 00000000000003425f71 04/17/12 22:23:39 received block 00000000000000f89962 04/17/12 22:23:39 ERROR: ProcessBlock() : already have block 176027 00000000000000f89962 04/17/12 22:23:48 received block 000000000000083ec278 04/17/12 22:23:48 ERROR: ProcessBlock() : already have block 176028 000000000000083ec278 04/17/12 22:24:06 received block 000000000000088984c6 04/17/12 22:24:06 ERROR: ProcessBlock() : already have block 176029 000000000000088984c6 04/17/12 22:24:29 received block 00000000000002857e8b 04/17/12 22:24:29 ERROR: ProcessBlock() : already have block 176030 00000000000002857e8b 04/17/12 22:24:45 received block 000000000000075834ed 04/17/12 22:24:45 ERROR: ProcessBlock() : already have block 176031 000000000000075834ed 04/17/12 22:25:10 received block 000000000000033b7b3e 04/17/12 22:25:10 ERROR: ProcessBlock() : already have block 176032 000000000000033b7b3e 04/17/12 22:25:56 received block 00000000000001f32a95 04/17/12 22:25:56 ERROR: ProcessBlock() : already have block 176033 00000000000001f32a95 04/17/12 22:26:20 received block 00000000000004dffd6d 04/17/12 22:26:20 ERROR: ProcessBlock() : already have block 176034 00000000000004dffd6d 04/17/12 22:26:20 received block 000000000000096fd80c 04/17/12 22:26:20 ERROR: ProcessBlock() : already have block 176035 000000000000096fd80c Much of this output has been cut, but if I grep my debug.log for "already have", I can see that blocks 174591 to 176061 (1470 blocks and counting) were being sent by two nodes.
1119	Add an option -detachdb (and entry in OptionDialog), without which no lsn_reset is called on addr.dat and blkindex.dat. That means these files cannot be moved to a new environment, but shutdown can be significantly faster. The wallet file is always lsn_reseted. -detachdb corresponds to the old behaviour, though it is off by default now to speed up shutdowns.
1118	
1117	Conflict: * cs_main in ProcessMessages() (before calling ProcessMessages) * cs_vSend in CNode::BeginMessage versus: * cs_vSend in ThreadMessageHandler2 (before calling SendMessages) * cs_main in SendMessages Even though cs_vSend is a try_lock, if it succeeds simultaneously with the locking of cs_main in ProcessMessages(), it could cause a deadlock.
1116	
1115	As it says on the tin
1114	Since auto-remove-db-logs was enabled, each time a CTxDB was closed outside of the initial download window, it causes a checkpoint + log cleanup. This is overkill, so reduce the sync frequency to once per minute at most.
1113	* Use >= for BIP0031 version * Bugfix: nonce is optional in ping messages * Dont request a pong that we ignore
1112	This pull request removes the dependency of serialize.h on PROTOCOL_VERSION, and makes this parameter required instead of implicit. This is much saner in my opinion, as it makes the places where changing a version number can have an influence obvious. This builds upon #1109, but since it may be more controversial, its a separate pull request.
1111	Nowadays every popular app has a fancy design. I think the designers of the bitcoin client made a great job at doing a design which functions well and easy to use, it is already much better than the initial version. Although I see that there is space for improvements, and I honestly believe that design does matter if we want to reach the masses. My proposition is that I will donate $300 for this, if you are willing to go for a new design at 99Designs.com (http://99designs.com/mobile-app-design). Here we can have 50+ design ideas for $599+ and choose only the one which we (the BitCoin community) likes the best. This design could be used then for both desktop and (future) mobile clients. I havent contacted 99Designs yet, but I would like to know if you guys are interested in this, and if you are open to extend my donation with $299 to make this happen.
1110	The URI would be a great way to make the payments easier. Unfortunately after installing the client the user needs to set up all the protocol handlers manually. This needs technical knowledge which the potentially mainstream user doesnt have. It would be great to do these steps for the user during installation or at the first start of the client. Windows has a common place to set these at Control Panel/Default Programs/Set Associations (Vista), but all the major browsers have their own methods as well. More info: I havent tested those methods yet, but I can confirm that after installing and starting the BitCoin Client 0.6, none of the following browsers could handle BitCoin URIs: Chrome 18.0, Firefox 9.0.1, Firefox 10.0.2, Firefox 11.0 and IE 9.0.
1109	Removes the file headers.h, and all places where it was included. Some code movement was necessary to prevent strange dependencies, but there should be no semantic changes. Tested on Ubuntu and gitian.
1108	Addresses issue #1105. Does not solve things completely, but one big code movement (walletdb) appeared to magically solve many include dependency problems. 1) Move defs and code to walletdb.{h,cpp} respectively. This solves a key circular dependency plaguing include file cleanups, namely that db.h inclusion no longer sucks in CWalletTx etc. 2) Reduce headers.h usage in most modules.
1107	************************ EXCEPTION: NSt8ios_base7failureE CAutoFile::read : end of file bitcoin in Runaway exception terminate called after throwing an instance of std::ios_base::failure what(): CAutoFile::read : end of file Aborted
1106	Sign comparison warnings are the largest class of warnings remaining. These commits fix many of the warnings -- which were indeed valid. The commits were broken up to make reviewing easier.
1105	Today I played around a bit with libclang and made a graph of include dependencies: Edges show a source file that is included into another. You can hover over connections to highlight them, this can help clarify spaghetti parts. * it would be nice to get rid of `headers.h` and include only what we need in every compilation unit. * Newer files (such as `addrman.cpp`, `protocol.cpp`, `version.cpp`) are more well-behaved in this regard. * `util.h`, `protocol.h` probably pull in too much. * the hierarchy is too deep; include files shouldnt include that many other include files. For example `headers.h``util.h``uint256.h``serialize.h``allocators.h` ... * moving code from .h to .cpp files where possible / efficient would help reduce interdependencies
1104	This pull request enables most compilation warnings (of -Wall -Wextra) and fixes them. I compiled bitcoin-qt with g++ and clang to have as much warning coverage as possible. Warning flags in bitcoin-qt and bitcoind build have been equalized. `char-subscripts` warnings were especially dangerous, as char can be negative, resulting in accesses outside the array and thus potential information leakage. Fixed this by adding (unsigned char). Ive left these warnings alone: * `invalid-offsetof`: Looked this up, and found We use none of the special C++ multi-inheritance and dynamic casting so using `offsetof` should be safe. * `sign-compare`: Theres just too darn many of em. These could be worth checking later, as wrong signed-unsigned comparisons can result in nasty bugs. * `unused-parameter`: Also way too many instances. And ignoring a parameter is no problem, usually. I have carefully seperated this into commits for each separate warning class to make review easy.
1103	This is an alternate version of pull request #1102, which uses function pointers ("ugly" and less extensible from C++ standpoint, but perhaps cleaner from bitcoins perspective).
1102	This makes RPC a bit more object-oriented. All RPC commands now derive from a common base class, CRPCCommand.
1101	This is a cleaned up version of JoelKatz work, originally found in pull request #568. A few minor didnt-check-error-return bugs were fixed. All other changes were comment- or coding style-related changes unrelated to behavior. Should be upstream-ready at this point. Is in use at a few pools and other places.
1100	Without this, any error will segfault Bitcoin-Qt
1099	make_windows_icon.py is a shell script, and should not have a ".py" extension.
1098	Hello, all credits for finding this bug go to user "twobitcoins" in this forum thread: I am just posting it here because I can reproduce it with 0.6.0 and so that the developers see this bug. Howto reproduce: Open bitcoin-qt, go to addressbook, click qrcode for an address, in the message field enter until bitcoin-qt crashes. GDB Backtrace: <pre>user@box:~/Downloads/bitcoin-0.6.0-linux/bin/64$ gdb ./bitcoin-qt GNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08 Copyright (C) 2011 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type "show copying" and "show warranty" for details. This GDB was configured as "x86_64-linux-gnu". For bug reporting instructions, please see: <http://bugs.launchpad.net/gdb-linaro/>... Reading symbols from /home/user/Downloads/bitcoin-0.6.0-linux/bin/64/bitcoin-qt...done. (gdb) run Starting program: /home/user/Downloads/bitcoin-0.6.0-linux/bin/64/bitcoin-qt [Thread debugging using libthread_db enabled] QGtkStyle was unable to detect the current GTK+ theme. [New Thread 0x7fffe957a700 (LWP 1892)] [New Thread 0x7fffe8d79700 (LWP 1893)] [New Thread 0x7fffe3fff700 (LWP 1894)] [New Thread 0x7fffe37fe700 (LWP 1895)] [New Thread 0x7fffe2ffd700 (LWP 1896)] [New Thread 0x7fffe27fc700 (LWP 1897)] [New Thread 0x7fffe1ffb700 (LWP 1898)] [Thread 0x7fffe2ffd700 (LWP 1896) exited] [New Thread 0x7fffe17fa700 (LWP 1899)] [New Thread 0x7fffe2ffd700 (LWP 1900)] [Thread 0x7fffe1ffb700 (LWP 1898) exited] [New Thread 0x7fffe1ffb700 (LWP 1901)] [Thread 0x7fffe8d79700 (LWP 1893) exited] [Thread 0x7fffe3fff700 (LWP 1894) exited] [New Thread 0x7fffe3fff700 (LWP 1902)] [Thread 0x7fffe37fe700 (LWP 1895) exited] Program received signal SIGSEGV, Segmentation fault. 0x00000000005f17d7 in QRCodeDialog::genCode() () (gdb) bt #0 0x00000000005f17d7 in QRCodeDialog::genCode() () #1 0x00000000005f53a9 in QRCodeDialog::qt_metacall(QMetaObject::Call, int, void**) () #2 0x00007ffff6ddbeba in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #3 0x00007ffff7701d72 in QLineEdit::textChanged(QString const&) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #4 0x00007ffff770222c in QLineEdit::qt_metacall(QMetaObject::Call, int, void**) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #5 0x00007ffff6ddbeba in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #6 0x00007ffff796d3c5 in QLineControl::textChanged(QString const&) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #7 0x00007ffff7706c3b in QLineControl::finishChange(int, bool, bool) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #8 0x00007ffff7708ff5 in QLineControl::processKeyEvent(QKeyEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #9 0x00007ffff76fdee9 in QLineEdit::keyPressEvent(QKeyEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #10 0x00007ffff7349d1e in QWidget::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #11 0x00007ffff77003f7 in QLineEdit::event(QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #12 0x00007ffff72f9424 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #13 0x00007ffff72fe985 in QApplication::notify(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #14 0x00007ffff6dc8afc in QCoreApplication::notifyInternal(QObject*, QEvent*) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #15 0x00007ffff739cf99 in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #16 0x00007ffff739d40b in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #17 0x00007ffff7378347 in QApplication::x11ProcessEvent(_XEvent*) () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #18 0x00007ffff73a1412 in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #19 0x00007ffff53e2a5d in g_main_context_dispatch () from /lib/x86_64-linux-gnu/libglib-2.0.so.0 #20 0x00007ffff53e3258 in ?? () from /lib/x86_64-linux-gnu/libglib-2.0.so.0 #21 0x00007ffff53e3429 in g_main_context_iteration () from /lib/x86_64-linux-gnu/libglib-2.0.so.0 #22 0x00007ffff6df3ed6 in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #23 0x00007ffff73a107e in ?? () from /usr/lib/x86_64-linux-gnu/libQtGui.so.4 #24 0x00007ffff6dc7cf2 in QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #25 0x00007ffff6dc7ef7 in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #26 0x00007ffff6dcc789 in QCoreApplication::exec() () from /usr/lib/x86_64-linux-gnu/libQtCore.so.4 #27 0x0000000000421d15 in main () (gdb) </pre>
1097	This is more clear to users than when the program simply disappears (usually during initialization). It still logs the message to the console and debug log as well.
1096	As it says on the tin.
1095	As mentioned on IRC, the mempool code always seemed inside-out to me. This set of commits updates main.{h,cpp} code to create a new CTxMemPool class. This is essentially just code movement and renaming. No behavior changes should occur [that have not already been submitted separately as independent pull requests].
1094	Access to mapTransactions[] must be guarded by cs_mapTransactions lock. Also, reformat long lines to make the switch statement more readable.
1093	Open database once per "tx" message, rather than multiple times, in the case of orphan transaction presence. As a side effect, a now-unused CTransaction::AcceptToMemoryPool() variant is removed.
1092	Fixes #1080.
1091	As there were a few readability issues with certain OS themes and our self-defined progressbar style, this reverts the bar to OS defaults. Fixes #1071.
1090	Allow Qt to word-wrap tooltips, should fix #1063. Qt can only word-wrap rich text messages. Implemented without having to touch any translation: by listening for QEvent::ToolTipChange events, then rewriting the tooltips to prefix `<qt/>` and convert to rich text if it is not yet rich text.
1089	- Update translations for bitcoin core - Move scripts/qt to share/qt, to clean up toplevel directories - Update english ts file which is used to source messages for Transifex - In extract_strings_qt.py use a glob *.h *.cpp, this is safe now that the Wx UI files are removed This will not break any current translations, but will allow new messages to be translated.
1088	Line breaks for long tool tips, a forgotten keyboard shortcut and a tool tip added to src/qt/optionsdialog.cpp
1087	
1086	I run: ./bitcoind -testnet -datadir=$(pwd)/.bitcoinTEST -printtoconsole ... and I see: Bitcoin version v0.6.0.99-unk-beta (Apr 11 2012, 15:10:15) Default data directory /Users/gavin/Library/Application Support/Bitcoin Loading addresses... dbenv.open LogDir=/Users/gavin/src/integration_btc/src/.bitcoinTEST/database ErrorFile=/Users/gavin/src/integration_btc/src/.bitcoinTEST/db.log ... which is wrong, the db env should be .bitcoinTEST/testnet/...
1085	I recently needed to import some private keys into my wallet. I knew the addresses had never been used, and so didnt need to rescan the blockchain, but theres no way to import a private key without the client automatically rescanning the whole blockchain. Theres also no way to import multiple private keys at once, so to import 5 private keys I had to wait while the client scanned the whole blockchain 5 times over for transactions I knew it wouldnt find anyway. Id like to be able to either: * import multiple keys with a single importprivkey RPC call, or * optionally suppress the blockchain rescan Or both. I ended up commenting these two lines in rpcdump.cpp to get the job done: // pwalletMain->ScanForWalletTransactions(pindexGenesisBlock, true); // pwalletMain->ReacceptWalletTransactions(); but would prefer a better solution.
1084	I just accidentally ran: bitcoind importprivkey 1HV9Lc3sNHZxwj4Zk6fB38tEmBryq2cBiF passing an address instead of a private key, and it didnt complain. I ended up with a new key in my wallet with a potentially publicly known private key. This pull request adds a call of IsValid() to CBitcoinSecrets SetString() function to ensure that the private key at least has the correct version. I also added unit tests that make sure CBitcoinSecret::SetString() fails when passed a Bitcoin address, and succeeds when passed compressed or regular private keys.
1083	*what it says on the tin* "Fixes" #1067
1082	The new algorithm for testnet difficulty after 15 Feb 2012 behaves incorrectly when pblock->nTime < pindexLast->nTime. As both terms are unsigned, the results of the substraction underflows. The result is greater than nTargetSpacing*2, which causes the difficulty to be set to the minimum. I suppose this could be used to mine a lot of blocks in a row at minimum difficulty. See main.cpp line 835: // If the new blocks timestamp is more than 2* 10 minutes // then allow mining of a min-difficulty block. if (pblock->nTime - pindexLast->nTime > nTargetSpacing*2) return nProofOfWorkLimit;
1081	Add a pong message that is sent in reply to a ping. It echoes back a nonce field that is now added to the ping message. Send a nonce of zero in ping messages. Original author: Mike Hearn Google Modified Mikes change to introduce a mild form of protocol documentation in version.h.
1080	Steps to reproduce: 1. Go to "Send coins" tab 2. Select AddressA in address book 2a. Label will be filled in by AddressAs label 3. In the same address line, use the address book to change it to AddressB Expected: Label updates to AddressBs label Actual: Label remains the same as AddressA
1079	Try it, in Bitcoin-Qt, click on a menu item and hover something in the dropdown menu ... no tooltip is shown. I did a bit of Google research and it seems this is known. As its even bad in terms of GUI design / UX, I vote for simply removing all tooltips for main menu items from the source files.
1078	- fix for: - QR dialog window title is now only the BC address, because "label << address >>" was too large for the titlebar anyway - removed a dead line with debug code - coding style polish - moved declaration of QRCodeDialog *d; into the foreach {}
1077	Sorry for the mess w.r.t. this build.h issue. I did a full gitian build and normal builds to make sure it worked, but apparently other environments existed as well (see #1076). This pull request contains a few extra changes to fix all issues Im currently aware of. For Qt builds, the build.h file is moved to build/build.h. For regular builds, it is moved to obj/build.h. This allows the Qt build to be done in a different directory than the source, and without interfering with other builds.
1076	The recent changes to add a build.h break the build, when building with qmake and using a different build directory from source directory (Qt creator does this by default). To reproduce: $ mkdir bitcoin-qt-build-desktop $ cd bitcoin-qt-build-desktop $ qmake ../bitcoin $ make ... make: *** No rule to make target `../bitcoin/src/build.h, needed by `build/version.o. Stop. Ive tried fixing it with the suggestions here, but was unsuccessful: Ideally, the build process should leave the source directory untouched when building in this way. Other generated source files such as ui_*.h, .mocs and .qms also end up in the build direcory, not the source dir. Because of this, `*build_dir*/build` directory is in the include path, for example. Maybe we could place build.h there?
1075	This pull request adds a debug window to the UI (can be opened through Help Debug window). This includes: * Various information (version, number of blocks, number of connections etc) * Console for RPC commands (local, not really RPC, also works when not running with -server)
1074	I tried enabling the -fstack-protector flag and compiled Bitcoin-Qt on Windows. The resulting executable works, even the use of "-fstack-protector-all" caused no problems, so Im asking to re-evaluate enabling of that flag in the Windows-builds. A brief description of the feature can be found here:
1072	Where possible, use boost::filesystem::path instead of std::string or char* for filenames. This avoids a lot of manual string tinkering, in favor of path::operator/. GetDataDir is also reworked significantly, it now only keeps two cached directory names (the network-specific data dir, and the root data dir), which are decided through a parameter instead of pre-initialized global variables. Finally, remove the "upgrade from 0.1.5" case where a debug.log in the current directory has to be removed.
1071	I use a dark theme. Light text on a dark background. The recent change to the blockchain download status bar makes it hard to read due to the white text on bright orange background. If were going to specify the background colour, we should also specify the text colour, or we risk making the text invisible. Heres how it looks to me: ![...](http://i43.tinypic.com/2i6hyys.png)
1070	to contrib/debian/bitcoin-qt.desktop They basically mean "Bitcoin, virtual P2P cryptocurrency".
1069	Some of the strings the help command returns are in English and theyre not translatable on Transifex either (seen in bitcoin-qt 0.6.0 and 0.6.0.99-beta). Typing ./bitcoin-qt -lang=tr -? and pasting the entire stuff in LibreOffice may be useful to spot sentences which need i18n as the spell checker will automagically single them out.
1068	
1067	to avoid status confusion ./src/src/qt/res/icons/connect4_16.png
1066	Removed GetSpecialFolderPath() fallbacks (as requested), removed several unneeded spaces, renamed MyGetSpecialFolderPath() -> GetSpecialFolderPath() as the first one sounds not very pro ^^, make sure all char arrays in util.cpp get initialized to 0 and use sizeof(CharArray) instead of MAX_LEN, renamed Windows Autostart shortcut to "Bitcoin-Qt.lnk".
1065	From jetmine on the forums: *** glibc detected *** /home/btc/bitcoind: free(): invalid next size (fast): 0x0000000000d9ffa0 *** Now comes a dump that was made automatically. It looks similar to what I mentioned that had happened already once to me: ======= Backtrace: ========= [0x7f346b] [0x7f7516] [0x40f013] [0x40f2d8] [0x40e0ee] [0x40e3dc] [0x46d2b4] [0x470620] [0x48e435] [0x48e645] [0x751edd] [0x810329] ======= Memory map: ======== 00400000-0099b000 r-xp 00000000 fd:02 181991 /home/USERNAME/bitcoind 00b9a000-00bab000 rwxp 0059a000 fd:02 181991 /home/USERNAME/bitcoind 00bab000-038dc000 rwxp 00bab000 00:00 0 038dc000-038dd000 rwxp 038dc000 00:00 0 038dd000-04cb9000 rwxp 038dd000 00:00 0 40000000-40001000 ---p 40000000 00:00 0 40001000-40a01000 rwxp 40001000 00:00 0 40a01000-40a02000 ---p 40a01000 00:00 0 40a02000-41402000 rwxp 40a02000 00:00 0 41402000-41403000 ---p 41402000 00:00 0 41403000-41e03000 rwxp 41403000 00:00 0 41e03000-41e04000 ---p 41e03000 00:00 0 41e04000-42804000 rwxp 41e04000 00:00 0 42804000-42805000 ---p 42804000 00:00 0 42805000-43205000 rwxp 42805000 00:00 0 43205000-43206000 ---p 43205000 00:00 0 43206000-43c06000 rwxp 43206000 00:00 0 43c06000-43c07000 ---p 43c06000 00:00 0 43c07000-44607000 rwxp 43c07000 00:00 0 44607000-44608000 ---p 44607000 00:00 0 44608000-45008000 rwxp 44608000 00:00 0 45008000-45009000 ---p 45008000 00:00 0 45009000-45a09000 rwxp 45009000 00:00 0 2aaaaaaab000-2aaaaaaae000 r-xp 2aaaaaaab000 00:00 0 [vdso] 2aaaaaaae000-2aaaae07c000 r-xp 00000000 fd:00 4475090 /usr/lib/locale/locale-archive 2aaaae07c000-2aaaae083000 r-xs 00000000 fd:00 8786 /usr/lib64/gconv/gconv-modules.cache 2aaaae083000-2aaaae085000 rwxp 2aaaae083000 00:00 0 2aaaae085000-2aaaae08b000 rwxs 00000000 fd:02 37965938 /home/USERNAME/.bitcoin/__db.001 2aaaae08b000-2aaaae281000 rwxs 00000000 fd:02 37965939 /home/USERNAME/.bitcoin/__db.002 2aaaae281000-2aaab01c3000 rwxs 00000000 fd:02 37965940 /home/USERNAME/.bitcoin/__db.003 2aaab01c3000-2aaab02e3000 rwxs 00000000 fd:02 37965941 /home/USERNAME/.bitcoin/__db.004 2aaab02e3000-2aaab08e9000 rwxs 00000000 fd:02 37965942 /home/USERNAME/.bitcoin/__db.005 2aaab08e9000-2aaab08f5000 rwxs 00000000 fd:02 37965943 /home/USERNAME/.bitcoin/__db.006 2aaab08fb000-2aaab0905000 r-xp 00000000 09:01 130597 /lib64/libnss_files-2.5.so 2aaab0905000-2aaab0b04000 ---p 0000a000 09:01 130597 /lib64/libnss_files-2.5.so 2aaab0b04000-2aaab0b05000 r-xp 00009000 09:01 130597 /lib64/libnss_files-2.5.so 2aaab0b05000-2aaab0b06000 rwxp 0000a000 09:01 130597 /lib64/libnss_files-2.5.so 2aaab0b06000-2aaab0c53000 r-xp 00000000 09:01 130565 /lib64/libc-2.5.so 2aaab0c53000-2aaab0e53000 ---p 0014d000 09:01 130565 /lib64/libc-2.5.so 2aaab0e53000-2aaab0e57000 r-xp 0014d000 09:01 130565 /lib64/libc-2.5.so 2aaab0e57000-2aaab0e58000 rwxp 00151000 09:01 130565 /lib64/libc-2.5.so 2aaab0e58000-2aaab0e5d000 rwxp 2aaab0e58000 00:00 0 2aaab0e5d000-2aaab0e79000 r-xp 00000000 09:01 130587 /lib64/ld-2.5.so 2aaab0e79000-2aaab1079000 ---p 0001c000 09:01 130587 /lib64/ld-2.5.so 2aaab1079000-2aaab107a000 r-xp 0001c000 09:01 130587 /lib64/ld-2.5.so 2aaab107a000-2aaab107b000 rwxp 0001d000 09:01 130587 /lib64/ld-2.5.so 2aaab107b000-2aaab117b000 rwxp 2aaab107b000 00:00 0 2aaab117b000-2aaab117f000 r-xp 00000000 09:01 130596 /lib64/libnss_dns-2.5.so 2aaab117f000-2aaab137e000 ---p 00004000 09:01 130596 /lib64/libnss_dns-2.5.so 2aaab137e000-2aaab137f000 r-xp 00003000 09:01 130596 /lib64/libnss_dns-2.5.so 2aaab137f000-2aaab1380000 rwxp 00004000 09:01 130596 /lib64/libnss_dns-2.5.so 2aaab1380000-2aaab1391000 r-xp 00000000 09:01 130606 /lib64/libresolv-2.5.so 2aaab1391000-2aaab1591000 ---p 00011000 09:01 130606 /lib64/libresolv-2.5.so 2aaab1591000-2aaab1592000 r-xp 00011000 09:01 130606 /lib64/libresolv-2.5.so 2aaab1592000-2aaab1593000 rwxp 00012000 09:01 130606 /lib64/libresolv-2.5.so 2aaab1593000-2aaab1595000 rwxp 2aaab1593000 00:00 0 2aaab2117000-2aaab272f000 rwxp 2aaab2117000 00:00 0 2aaab4000000-2aaab5e3d000 rwxp 2aaab4000000 00:00 0 2aaab5e3d000-2aaab8000000 ---p 2aaab5e3d000 00:00 0 7ffffffea000-7ffffffff000 rwxp 7ffffffe9000 00:00 0 [stack] ffffffffff600000-ffffffffffe00000 ---p 00000000 00:00 0 [vsyscall] Program received signal SIGABRT, Aborted. [Switching to Thread 0x43c05940 (LWP 1393)] 0x000000000082ce95 in raise () When I use the bt command, I get this: #0 0x000000000082ce95 in raise () #1 0x00000000007cfb10 in abort () #2 0x00000000007eaaeb in __libc_message () #3 0x00000000007f346b in _int_free () #4 0x00000000007f7516 in free () #5 0x000000000040f013 in erase (this=0xbab918, __first=<value optimized out>, __last=...) at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/ext/new_allocator.h:94 #6 std::_Rb_tree<CNetAddr, std::pair<CNetAddr const, int>, std::_Select1st<std::pair<CNetAddr const, int> >, std::less<CNetAddr>, std::allocator<std::pair<CNetAddr const, int> > >::erase (this=0xbab918, __first=<value optimized out>, __last=...) at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_tree.h:1281 #7 0x000000000040f2d8 in std::_Rb_tree<CNetAddr, std::pair<CNetAddr const, int>, std::_Select1st<std::pair<CNetAddr const, int> >, std::less<CNetAddr>, std::allocator<std::pair<CNetAddr const, int> > >::erase (this=0xbab918, __x=<value optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_tree.h:1215 #8 0x000000000040e0ee in erase (this=0xbab8a0, nUBucket=<value optimized out>) at /usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../include/c++/4.1.2/bits/stl_map.h:461 #9 CAddrMan::ShrinkNew (this=0xbab8a0, nUBucket=<value optimized out>) at addrman.cpp:181 #10 0x000000000040e3dc in CAddrMan::Add_ (this=0xbab8a0, addr=<value optimized out>, source=<value optimized out>, nTimePenalty=<value optimized out>) at addrman.cpp:346 #11 0x000000000046d2b4 in ProcessMessage (pfrom=0x2aaab4bb0450, strCommand=..., vRecv=...) at addrman.h:433 #12 0x0000000000470620 in ProcessMessages (pfrom=0x2aaab4bb0450) at main.cpp:2767 #13 0x000000000048e435 in ThreadMessageHandler2 (parg=<value optimized out>) at net.cpp:1516 #14 0x000000000048e645 in ThreadMessageHandler (parg=0x0) at net.cpp:1481 #15 0x0000000000751edd in start_thread () #16 0x0000000000810329 in clone () I have to leave for a few hours, but will keep the debugger open. If there are any commands that can extract more useful information from it, please post here and I will run them on it tonight.
1064	The splash screen is too small for verbose languages like French. Maybe increasing its size or width would make sense (for an example see the screenshot, the complete string is in fact "Chargement de lindex des blocs" and this problem occurs with other strings. Bitcoin 0.6.0 on Ubuntu 10.04). ![splash screen which needs to be bigger](http://ompldr.org/vZGIwYg)
1063	Some tooltips in Settings > Options > Main are too long and cannot display all the text, at least when the screen resolution is 1024*768 (which I use on a good old 4/3 cathodic display). The screenshot should give an idea, and this problem also occurs in English, particularly with the tooltips of "Minimize on close" and "Pay transaction fee" options. Should \n strings be inserted there? (Bitcoin 0.6.0 running on Ubuntu 10.04) ![tooltip which may need a line break](http://ompldr.org/vZGIwMQ) Also, when you click Settings > Options > Display, "Display addresses in transaction list" doesnt have a keyboard shortcut. As all other strings have one, I was wondering whether this one was forgotten (this remark is really secondary, IMHO it didnt make sense to file a separate bug for it).
1062	On Ubuntu 10.04 (with GNOME 2.30) when you click Receive coins > Sign Message > and then the button to open the address book, the buttons at the bottom of the window clearly do not have enough place for the strings. Just take a look at the screenshot (dont worry, the dumb highlighting is mine, but the problem also occurs in English). Bitcoin version: 0.6.0. ![Address book button problem](http://ompldr.org/vZGF6Zg)
1061	When I checked bitcoin-qt 0.6.0 on Ubuntu 10.04 after switching GNOME 2.30s language settings to fr_CA and fr_BE, I remarked that for some reason the fall-back language wasnt fr_FR but English. So a Belgian French speaker would have to use the application in English. IMHO, for Bitcoin the differences between countries are negligible if not entirely irrelevant so it would make sense to rename French (France) to French only on Transifex. It might also make sense to generally include locales with a country code only if they reach a given percentage of completion, especially if Qt insists on choosing English as the fall-back language rather than the same language with a different country code (right now theres a fr_CA at only 3%...). Edit: I added French with no country code on Transifex, so feel free to delete French (France).
1060	When one clicks on the icon in the tray the program should appear when its minimized and disappear when its already on the screen. Disappearing does not yet work.
1059	When I hover the mouse over the update icon (the one that tells which block its downloading) it says: Der letzte empfangene Block wurde am vor 37 Tagen generiert. Please delete "am".
1058	After loading the block index info I get an "error loading blkinex.dat" message and the wallet does not load.
1056	Quite often, when supporting people, I want people to enter their version number and block chain height. If this was available in one place this process would be much faster
1055	Quite often, when supporting people, I want people to enter their version number. If this text was selectable this process would be much faster
1054	All client version information is moved to version.cpp, which optionally (-DHAVE_BUILD_INFO) includes build.h. build.h is automatically generated on supporting platforms via contrib/genbuild.sh, using git describe. The git export-subst attribute is used to put the commit id statically in version.cpp inside generated archives, and this value is used if no build.h is present. The gitian descriptors are modified to use git archive instead of a copy, to create the src/ directory in the output. This way, src/src/version.cpp will contain the static commit id.
1053	On "internet" connections from ISPs who throttle bandwidth, RST resets are often used, which show up as 10054 errors in debug.log. If this happens during a block download, the client waits until the next block is generated before resuming downloading of blocks. This can cause significant delay in catching up.
1052	Remove CRITICAL_BLOCK and TRY_CRITICAL_BLOCK, and replace them with LOCK, TRY_LOCK and IS_LOCKED. These are macros that define a local CCriticalBlock variable (a boost::interprocess::scoped_lock wrapper), which is much more C++ than the if and/or for constructions in macros. Ive intentionally not touched formattng/indentation where possible, in order not to break other patches. There are several cases where simplications are possible now, though.
1051	...message with" Closes #1050
1050	"The address to send the payment to" should be "The address to sign message with"
1049	On my screen (1680 * 1050) I dont even see the OK button. That message box needs a re-design or we need something that is better suited. The commands should be somehow grouped so that the ones belonging together are shown one below the other. Perhaps we could use more messageboxes and each one shows only a certain group of switches and explanations? Is a tabbed messagebox possible?
1048	Im running Ubuntu 11.10 x86_64. I first started getting this error with the bitcoin-qt in ubuntus ppa repository, but when I tried the code from this git I get the same issue. xxx@XXX:~/workspace/bitcoin$ ./bitcoin-qt (bitcoin-qt:21295): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap", terminate called after throwing an instance of DbRunRecoveryException what(): DbEnv::txn_checkpoint: DB_RUNRECOVERY: Fatal error, run database recovery Aborted And when I run it through gdb I get this: xxx@XXX:~/workspace/bitcoin$ gdb ./bitcoin-qt GNU gdb (Ubuntu/Linaro 7.3-0ubuntu2) 7.3-2011.08 Copyright (C) 2011 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type "show copying" and "show warranty" for details. This GDB was configured as "x86_64-linux-gnu". For bug reporting instructions, please see: <http://bugs.launchpad.net/gdb-linaro/>... Reading symbols from /home/xxx/workspace/bitcoin/bitcoin-qt...(no debugging symbols found)...done. (gdb) run Starting program: /home/xxx/workspace/bitcoin/bitcoin-qt [Thread debugging using libthread_db enabled] (bitcoin-qt:21316): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap", [New Thread 0x7fffe7ec4700 (LWP 21319)] [New Thread 0x7fffe74c0700 (LWP 21320)] terminate called after throwing an instance of DbRunRecoveryException what(): DbEnv::txn_checkpoint: DB_RUNRECOVERY: Fatal error, run database recovery Program received signal SIGABRT, Aborted. 0x00007ffff48f53a5 in raise () from /lib/x86_64-linux-gnu/libc.so.6 (gdb) quit A debugging session is active. Inferior 1 [process 21316] will be killed. Quit anyway? (y or n) y I tried removing the .bitcoin directory and repopulating, but I still get the error.
1047	This is mainly so I dont forget where the ISC license comes from.
1046	Fixes issue #875
1045	Simplification/improvement of #1010.
1043	Compiles just fine on Windows ... you should try a compilation on Linux / Max and if it works accept this, otherwise close this one. For reference:
1042	This removes all uses of the USE_SSL preprocessor #define. It used to be necessary because Satoshi and I couldnt figure out how to get OpenSSLs libssl to compile on Windows properly (so we were linking against only libcrypto). That issue is long gone, so lets simplify the code and get rid of USE_SSL.
1041	This fixes issue #322 and issue #323 .
1039	Issue #955 was discovered to be caused by users entering an *incorrect* password that accidentally (with a chance of 1/255) resulted in valid AES-CBC padding, which causes a decrypted secret of 45-47 bytes, causing a failed CKey::SetSecret call. In the normal case, a bad password causes an incorrect padding which is detected by the decrypt function. As the return code is not checked, the previously (incorrectly) decrypted 32 bytes are used anyway, leading to a succesful CKey::SetSecret call. So in summary: we didnt know we were padding by default, and hence forgot to check for the case of a failed padding, which apparently resulted in something of the expected size.
1038	Commits speak for themself ;).
1037	Mining support is done, and network relay support for multisig transactions seems well on its way, so Id like to enable the addmultisigaddress JSON-RPC call on the main network so people can start experimenting/prototyping.
1036	Removes dead code.
1035	Fixes #308
1033	See the commit messages for more details.
1032	This one fixes #945 by removing the HTML code around "Wallet" (displayed on overview page) and use the corresponding Qt designer tags for the font settings. Hint: Manual retranslation of the word Wallet or early push to a fresh en master file to get it re-translated!
1031	Using the bitcoin gui with a locked wallet and keys in the keypool, creating and labelling a "new" key is not possible
1030	As suggested by sipa in #753, show how many blocks still need syncing, rather than always just showing "99%" if the blockchain was recently synced.
1029	Even though I am still having trouble getting bitcoin to work on NetBSD, I have been able to build it thanks to this additional Makefile (therefore called "makefile.netbsd"). I believe it has enough differences to "makefile.unix" to justify a duplicate (no libdl, packages in /usr/pkg by default, libdb_cxx is called libdb4_cxx...) but let me know if youd prefer to adapt "makefile.unix" with conditional building instead. Cheers, -- khorben
1028	Instead of using a splash screen, load the entire interface straight away. Initially disable all actions requiring a loaded blockchain, then when the block chain has done loading enable those actions. This will allow users to read their address book, see previous transactions that have already been confirmed and generate addresses, without waiting for the blockchain to load.
1027	I followed the build instruction (installing with port the required dependencies), but at linking stage I got a lengthy error. OSX 10.6.8, bitcoin just pulled from git.
1026	It was too hyperactive. I mean that right now when the block gap goes over an hour it starts showing synchronizing. Increasing that to 90 minutes or so would make it only happen about 6.4 times per year
1025	I added a % left value to the tooltip, the progressbar text is now displayed in its middle centered and uses real block values instead of only a % value ("x of y blocks (z %)"). The progressbar is hidden, if there is no network connection and gets hidden, if the connection is lost. Edit: Removed the dynamic component of the idea ;).
1024	client 0.5.0 i forgot my passphrase to my encrypted wallet. but i knew what it was approximately. so i guessed. 50+ times. one particular guess (which im assuming is the correct passphrase) causes the client to crash. so i cant send bitcoins or change my passphrase. updated to client 0.6.0. it also crashes on the same passphrase. google says others have had a similar problem. but the issue was closed because it couldnt be reproduced. dbdump --wallet shows no errors. though this line looks suspicous: Master Key 1: blah...blah, Salt: blah...blah. Passphrase hashed 83218 times with method 0 with other parameters 0x i havent looked at the source but... that 83 thousand times thing looks kinda suspicious. is there a security feature that increases the passphrase hash count every time an incorrect passphrase is entered? is there a buffer or stack overflow thing going on when the hash count gets too high? chirp.
1023	What I try to achieve here: - harden the URI handling / IPC server (i.e. buffer length checks use of IMPLEMENT_RANDOMIZE_STACK for the ipcThread) - log and handle boost interprocess exceptions where possible - make URI handling more usable / robust on Windows (and not worse on other platforms - needs tests on Linux OSes) What I achieved (running and verified on Windows): - its possible to start the client via URI click, if no message_queue file exists - if one exists the clicked URI is sent to the queue file, but doesnt start the client (call to try_send() in bitcoin.cpp succeeds and we exit there - currently no check if the client is running - ideas are welcome), the URI is processed after manually starting the client and is not lost - on Windows its now possible to use 2 client instances in parallel and the first started one receives clicked URIs, if I close one of the instances the one left will process URIs - URI length is limited to 255 chars as message queue message size is 256 chars max. What I could not achieve: - handle some special cases i.e. a BitcoinURI file gets created by a user and is placed in the boost_interprocess folder -> results in the GUI freeze bug, as the file permissions differ from what boost would set, when creating the mq file -> that causes a boost deadlock (https://svn.boost.org/trac/boost/ticket/6745) Some details: The message queue is not removed anymore when closing the client, as this causes massive handling problems on Windows with 2 instances and my former approach of stale mq detection. First try is always to open the mq file for a re-use. If this fails a new mq is created. This needs boost 1.49 with a small edit in boost/interprocess/detail/tmp_dir_helpers.hpp see: There is currently no need for any hard monkey-patches like #986.
1022	This one adresses #1020: - hide Delete button on ReceivingTab / show Sign message button here - hide Sign message button on SendingTab / show Delete button here - changed hide() into setVisible(false) to be the same all over addressbookpage.cpp
1021	This will make bitcoin relay valid routable IPv6 addresses, and when USE_IPV6 is enabled, listen on IPv6 interfaces and attempt connections to IPv6 addresses.
1020	Currently there is a delete button available in the "Receive coins" tab/toolbar thing implying that it is a possible action in some context on this pane, when it is not.
1019	This is a grab-bag of commits designed to streamline the UICore interface. It contains various small improvements as well as code cleanups: Improvements: - Allow other threads to queue shutdown in UI thread (functionality in case of bitcoind is unchanged). RPC stop and encryptwallet will now work with UI, and this also fixes segfault part of #999. - update UI only when needed, instead of polling with a timer (core notifies UI using AddressBookRepaint / MainFrameRepaint functions) - This fixes the issue with address created using RPC getnewaddress not appearing in UI address book - use a messagebox to display the error when -server is provided without providing rpcpassword, this doesnt get lost like a message to the console (functionality in case of bitcoind is unchanged) - allow threads to request a modal dialog box for fatal errors, so that they can wait with shutting down until the user clicked OK (disk space error, etc) Code cleanups: - move QT_PLUGINS stuff to qt main file, where it belongs - move dummy translation function _ to qtui.h/noui.h instead of util.h - remove dependency for SecureString on serialize.h and util.h (and the rest of the knot of .h files) by moving allocators to new include file allocators.h - remove broken and/or unnecessary functions from qtui.h/noui.h, clarify names, and leave only one MessageBox function that can be used both from AppInit2 and other threads In principle, these commits are fairly independent and could be separate pull requests if necessary.
1018	
1017	Ive updated coderrrs coincontrol patch #415 so it merges cleanly against v0.6.0, and also updated the coin selection refactor and change reduction changes and unit tests from patch #898. They touch overlapping code, so Ive merged them both here. has just the coincontrol patch, without the other coin selection changes. Ive improved the coincontrol patch, as follows: * its much faster than coderrrs patch - what used to take over a minute now takes a fraction of a second * its reformatted to use 4-space indents like the other bitcoin code * instead of showing the balance twice for each address, one with 0.0005 taken off, it now shows the total balance of each group * the groups are sorted so the most valuable group is shown first * the clear all button on the send coins tab clears the send from input too
1016	
1015	Title pretty much says it all. Affected items are Overview, Send bitcoins, Recieve bitcoins, Export as well as File->Export and all Settings items.
1014	Fixed compiler warning / hint "commas at the end of enumerator lists are a C++0x-specific feature". Guess the commas were there by mistake, so I removed them and it still compiles fine :).
1013	I saw in several places in the source, that there are functions variables and all that stuff, which were used for mining coins with the client. As this has been disabled a few releases ago, I suggest to remove it to cleanup and shrink the source. This would take its time, but as its unneeded and untouched, it could potentially become "harmful" in the further development to leave it in.
1012	After #1007 and #1010, bitcoin-qt is now taking around 25 seconds to quit cleanly. It seems to be writing a whole new copy of the blockchain. I added code to time the flushes that happen in db.h and saw that its taking 24s to flush the blockindex now: addr.dat flush addr.dat flush done in 127ms blkindex.dat refcount=0 blkindex.dat flush UPNP_DeletePortMapping() returned : 0 ThreadMapPort exiting connection timeout ThreadOpenConnections exiting blkindex.dat flush done in 23975ms Im not sure which commit introduced this slowdown. rc1 quits in 12s for me. Ill find out and report back. Update: 89516bd4e ("Speed up block downloading") is the commit that made the shutdown time double. If I comment out just the line that says: dbenv.set_cachesize(nDbCache / 1024, (nDbCache % 1024)*1048576, 1); then the shutdown speed goes back to 12s. To see this effect more strongly, try running "bitcoin-qt -dbcache=250" then quitting immediately. The window disappears straight away, but the process thrashes the hard drive for over 3 minutes before shutting down. Maybe thats just the cost of using a disk cache though.
1010	The normal checkpointing during the block chain download is reduced to every five minutes only, but forced every 200000 updated transactions.
1009	This time itll stick.
1008	This changes the load addr.dat logic so old addr entries are left as-is. Why: because we saw at least one (and probably 2 or 3) hang-at-startup bugs in rc5 when erasing the old entries. The result will be larger than necessary addr.dat files for people who upgrade from old releases; I can live with that for this release. The workaround is to just delete addr.dat and let dns or built-in seeding to give you a fresh set of peers.
1007	This is an alternative to pull #1004 , to fix part of bug #999 Tested by doing a complete blockchain download and observing the number of log files every 2 minutes (see -- maximum of 5 were created). Removing log files before shutdown does make catastrophic database recovery impossible, however catastrophic recovery is only possible if you have ALL of the log files available (all since the creation of the database), so the only situation in which that is an issue would be a brand-new user running Bitcoin for the first time and then suffering a disk-corrupting failure before they shutdown.
1006	Again, small glitch -> small fix.
1004	When set, -dbtrimlogs will delete old unused database log files every 5000 blocks. Otherwise several GB of logs build up while downloading the (1GB) blockchain, and are only deleted when the client exits. Fixes part of the bug #999. The QT client still sometimes crashes when it runs out of disk space.
1003	The database log size recently increased from 10MB to 100MB, but CheckDiskSpace() is still only checking for 15MB free before warning. That needs to be increased "because database could create another 100MB log file at any time".
1002	- validate bitcoin address in the URI before switching to sendCoinsPage and pasting into the form, when a bitcoin: link is clicked - validate bitcoin address in the URI before switching to sendCoinsPage and pasting into the form, when a bitcoin: link is dropped on the Bitcoin-Qt window (Drag&Drop feature) - show a tray-notification if an URI could not be parsed to alert the user
1001	When connecting through a local proxy, if i close the proxy the client disconnects form the network but if I reconnect the proxy after additional blocks have been generated, it never catchs up and instead says "catching up" indefinitely. have to exit and restart client.
1000	The file seems to be created by a script called extract_strings.py and is missing several strings from new or modified command line switches. This needs to be updated, to be able to create a full translation of the client. It seems like did this the last time. I would suggest, that there will be defined a standard as to when this file gets updated. At least the final RCs of a new version should include a complete translation and this takes some time for the translators, so the english source files need to be pushed to transifex early (the latest, if a new version is feature-complete). I as a native german speaking person think its a great benefit for all Client users, if its completely presented in the native language, so that should get some more love.
999	Im playing about with rc5 trying to see how quickly I can get it to download the initial blockchain putting the datadir on a ramdisk and connecting only to a machine on the LAN which already has the blockchain. The database log files build up continually, even though theyre checkpointed every 5000 blocks. I would expect checkpointing to free up some space, but it doesnt. Eventually the ram disk holding ~/.bitcoin filled up, and bitcoin-qt crashed, leaving a message popped up in a bubble pointing at the bitcoin systray icon: "Warning: Disk space is low". (gdb) run Starting program: /home/chris/Bin/bitcoin -server -min -connect=192.168.0.194 -nolisten -noirc [Thread debugging using libthread_db enabled] [New Thread 0xb54c0b70 (LWP 2948)] [New Thread 0xb4cbfb70 (LWP 2949)] [New Thread 0xb12a8b70 (LWP 2952)] [New Thread 0xb0aa7b70 (LWP 2953)] [New Thread 0xb02a6b70 (LWP 2954)] [New Thread 0xafaa5b70 (LWP 2955)] [New Thread 0xaf19ab70 (LWP 2956)] [New Thread 0xae999b70 (LWP 2957)] [New Thread 0xae198b70 (LWP 2959)] [New Thread 0xad997b70 (LWP 2960)] [New Thread 0xad196b70 (LWP 2961)] [New Thread 0xac995b70 (LWP 2962)] [Thread 0xae999b70 (LWP 2957) exited] [Thread 0xad997b70 (LWP 2960) exited] [New Thread 0xae999b70 (LWP 2963)] [Thread 0xb0aa7b70 (LWP 2953) exited] [Thread 0xafaa5b70 (LWP 2955) exited] "sni-qt/2947" WARN 23:57:35.064 void StatusNotifierItemFactory::connectToSnw() Invalid interface to SNW_SERVICE [New Thread 0xafaa5b70 (LWP 2964)] [Thread 0xb54c0b70 (LWP 2948) exited] [New Thread 0xb54c0b70 (LWP 2973)] [Thread 0xac995b70 (LWP 2962) exited] [Thread 0xafaa5b70 (LWP 2964) exited] [Thread 0xae198b70 (LWP 2959) exited] [Thread 0xb12a8b70 (LWP 2952) exited] [Thread 0xad196b70 (LWP 2961) exited] [Thread 0xaf19ab70 (LWP 2956) exited] [New Thread 0xaf19ab70 (LWP 2975)] [Thread 0xaf19ab70 (LWP 2975) exited] Program received signal SIGSEGV, Segmentation fault. 0xb7e6d385 in BN_usub () from /lib/i386-linux-gnu/libcrypto.so.1.0.0 (gdb) where #0 0xb7e6d385 in BN_usub () from /lib/i386-linux-gnu/libcrypto.so.1.0.0 #1 0xb7e6d58c in BN_add () from /lib/i386-linux-gnu/libcrypto.so.1.0.0 #2 0x080ac4ec in operator+ (a=..., b=...) at src/bignum.h:470 #3 0x080c45a6 in GetWarnings (strFor=...) at src/main.cpp:2048 #4 0x082441ec in ClientModel::getStatusBarWarnings (this=0xbffff4f0) at src/qt/clientmodel.cpp:77 #5 0x080735e1 in BitcoinGUI::setNumBlocks (this=0xbffff3fc, count=24188) at src/qt/bitcoingui.cpp:461 #6 0x082b81a4 in BitcoinGUI::qt_metacall (this=0xbffff3fc, _c=QMetaObject::InvokeMetaMethod, _id=1, _a=0xbfffec78) at build/moc_bitcoingui.cpp:110 #7 0xb6fceb7d in QMetaObject::metacall(QObject*, QMetaObject::Call, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #8 0xb6fdda6a in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #9 0x082b8fdc in ClientModel::numBlocksChanged (this=0xbffff4f0, _t1=24188) at build/moc_clientmodel.cpp:101 #10 0x08244172 in ClientModel::update (this=0xbffff4f0) at src/qt/clientmodel.cpp:54 #11 0x082b8f58 in ClientModel::qt_metacall (this=0xbffff4f0, _c=QMetaObject::InvokeMetaMethod, _id=3, _a=0xbfffed64) at build/moc_clientmodel.cpp:82 #12 0xb6fceb7d in QMetaObject::metacall(QObject*, QMetaObject::Call, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #13 0xb6fdda6a in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #14 0xb702c7d5 in QTimer::timeout() () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #15 0xb6fe5286 in QTimer::timerEvent(QTimerEvent*) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #16 0xb6fe0994 in QObject::event(QEvent*) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #17 0xb725ad84 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #18 0xb7260133 in QApplication::notify(QObject*, QEvent*) () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #19 0xb6fc819e in QCoreApplication::notifyInternal(QObject*, QEvent*) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #20 0xb6ff8c10 in ?? () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #21 0xb6ff6155 in ?? () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #22 0xb6a7525f in g_main_context_dispatch () from /lib/i386-linux-gnu/libglib-2.0.so.0 #23 0xb6a75990 in ?? () from /lib/i386-linux-gnu/libglib-2.0.so.0 #24 0xb6a75c2a in g_main_context_iteration () from /lib/i386-linux-gnu/libglib-2.0.so.0 #25 0xb6ff6ada in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #26 0xb7312e7a in ?? () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #27 0xb6fc71dd in QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #28 0xb6fc7421 in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #29 0xb6fcc19d in QCoreApplication::exec() () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #30 0xb7258924 in QApplication::exec() () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #31 0x08068499 in main (argc=6, argv=0xbffff6e4) at src/qt/bitcoin.cpp:271 (gdb) thread apply all bt Thread 16 (Thread 0xb54c0b70 (LWP 2973)): #0 0xb7fdf424 in __kernel_vsyscall () #1 0xb6c76403 in ?? () from /lib/i386-linux-gnu/libc.so.6 #2 0xb6c0a495 in ?? () from /lib/i386-linux-gnu/libc.so.6 Backtrace stopped: previous frame identical to this frame (corrupt stack?) Thread 14 (Thread 0xae999b70 (LWP 2963)): #0 0xb7fdf424 in __kernel_vsyscall () #1 0xb6e55296 in nanosleep () from /lib/i386-linux-gnu/libpthread.so.0 #2 0xb7bd6284 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib/libboost_thread.so.1.46.1 #3 0x080cf195 in boost::thread::sleep (xt=...) at /usr/include/boost/thread/detail/thread.hpp:346 #4 0x080cf317 in Sleep (n=100000) at src/util.h:92 #5 0x08125c4b in ThreadDumpAddress2 (parg=0x0) at src/net.cpp:1215 #6 0x08125cef in ThreadDumpAddress (parg=0x0) at src/net.cpp:1226 #7 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #8 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #9 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #10 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #11 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #12 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #13 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #14 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #15 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #16 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #17 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #18 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #19 0x08125ce2 in ThreadDumpAddress (parg=0x0) at src/net.cpp:1223 #20 0xb6e4dd31 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 #21 0xb6c6846e in clone () from /lib/i386-linux-gnu/libc.so.6 Backtrace stopped: Not enough registers or memory available to unwind further Thread 6 (Thread 0xb02a6b70 (LWP 2954)): #0 0xb7fdf424 in __kernel_vsyscall () #1 0xb6e54cb8 in accept () from /lib/i386-linux-gnu/libpthread.so.0 #2 0x0829891d in boost::asio::detail::socket_ops::call_accept<unsigned int> (s=30, addr=0xb02a5e50, addrlen=0xb02a56b4) at /usr/include/boost/asio/detail/impl/socket_ops.ipp:75 #3 0x082959d0 in boost::asio::detail::socket_ops::accept (s=30, addr=0xb02a5e50, addrlen=0xb02a56b4, ec=...) at /usr/include/boost/asio/detail/impl/socket_ops.ipp:93 #4 0x08295a3a in boost::asio::detail::socket_ops::sync_accept (s=30, state=16 \020, addr=0xb02a5e50, addrlen=0xb02a56b4, ec=...) at /usr/include/boost/asio/detail/impl/socket_ops.ipp:119 #5 0x082a33e2 in boost::asio::detail::reactive_socket_service<boost::asio::ip::tcp>::accept<boost::asio::basic_socket<boost::asio::ip::tcp, boost::asio::stream_socket_service<boost::asio::ip::tcp> > > (this=0x87110a4, impl=..., peer=..., peer_endpoint=0xb02a5e50, ec=...) at /usr/include/boost/asio/detail/reactive_socket_service.hpp:326 #6 0x0829f337 in boost::asio::socket_acceptor_service<boost::asio::ip::tcp>::accept<boost::asio::stream_socket_service<boost::asio::ip::tcp> > ( this=0x8711090, impl=..., peer=..., peer_endpoint=0xb02a5e50, ec=...) at /usr/include/boost/asio/socket_acceptor_service.hpp:197 #7 0x0829b895 in boost::asio::basic_socket_acceptor<boost::asio::ip::tcp, boost::asio::socket_acceptor_service<boost::asio::ip::tcp> >::accept<boost::asio::stream_socket_service<boost::asio::ip::tcp> > (this=0xb02a579c, peer=..., peer_endpoint=...) at /usr/include/boost/asio/basic_socket_acceptor.hpp:747 #8 0x0828db66 in ThreadRPCServer2 (parg=0x0) at src/bitcoinrpc.cpp:2438 #9 0x0828d2eb in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2347 #10 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #11 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #12 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #13 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #14 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #15 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #16 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #17 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #18 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #19 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #20 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #21 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #22 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #23 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #24 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #25 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #26 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #27 0x0828d2c0 in ThreadRPCServer (parg=0x0) at src/bitcoinrpc.cpp:2343 #28 0xb6e4dd31 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 #29 0xb6c6846e in clone () from /lib/i386-linux-gnu/libc.so.6 Backtrace stopped: Not enough registers or memory available to unwind further Thread 3 (Thread 0xb4cbfb70 (LWP 2949)): #0 0xb7fdf424 in __kernel_vsyscall () #1 0xb6c597ae in poll () from /lib/i386-linux-gnu/libc.so.6 #2 0xb6a8434b in g_poll () from /lib/i386-linux-gnu/libglib-2.0.so.0 #3 0xb6a75896 in ?? () from /lib/i386-linux-gnu/libglib-2.0.so.0 #4 0xb6a75f9b in g_main_loop_run () from /lib/i386-linux-gnu/libglib-2.0.so.0 #5 0xb6150cea in ?? () from /usr/lib/i386-linux-gnu/libgio-2.0.so.0 #6 0xb6a9c5f4 in ?? () from /lib/i386-linux-gnu/libglib-2.0.so.0 #7 0xb6e4dd31 in start_thread () from /lib/i386-linux-gnu/libpthread.so.0 #8 0xb6c6846e in clone () from /lib/i386-linux-gnu/libc.so.6 Backtrace stopped: Not enough registers or memory available to unwind further Thread 1 (Thread 0xb6692710 (LWP 2947)): #0 0xb7e6d385 in BN_usub () from /lib/i386-linux-gnu/libcrypto.so.1.0.0 #1 0xb7e6d58c in BN_add () from /lib/i386-linux-gnu/libcrypto.so.1.0.0 #2 0x080ac4ec in operator+ (a=..., b=...) at src/bignum.h:470 #3 0x080c45a6 in GetWarnings (strFor=...) at src/main.cpp:2048 #4 0x082441ec in ClientModel::getStatusBarWarnings (this=0xbffff4f0) at src/qt/clientmodel.cpp:77 #5 0x080735e1 in BitcoinGUI::setNumBlocks (this=0xbffff3fc, count=24188) at src/qt/bitcoingui.cpp:461 #6 0x082b81a4 in BitcoinGUI::qt_metacall (this=0xbffff3fc, _c=QMetaObject::InvokeMetaMethod, _id=1, _a=0xbfffec78) at build/moc_bitcoingui.cpp:110 #7 0xb6fceb7d in QMetaObject::metacall(QObject*, QMetaObject::Call, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #8 0xb6fdda6a in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #9 0x082b8fdc in ClientModel::numBlocksChanged (this=0xbffff4f0, _t1=24188) at build/moc_clientmodel.cpp:101 #10 0x08244172 in ClientModel::update (this=0xbffff4f0) at src/qt/clientmodel.cpp:54 #11 0x082b8f58 in ClientModel::qt_metacall (this=0xbffff4f0, _c=QMetaObject::InvokeMetaMethod, _id=3, _a=0xbfffed64) at build/moc_clientmodel.cpp:82 #12 0xb6fceb7d in QMetaObject::metacall(QObject*, QMetaObject::Call, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #13 0xb6fdda6a in QMetaObject::activate(QObject*, QMetaObject const*, int, void**) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #14 0xb702c7d5 in QTimer::timeout() () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #15 0xb6fe5286 in QTimer::timerEvent(QTimerEvent*) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #16 0xb6fe0994 in QObject::event(QEvent*) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #17 0xb725ad84 in QApplicationPrivate::notify_helper(QObject*, QEvent*) () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #18 0xb7260133 in QApplication::notify(QObject*, QEvent*) () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #19 0xb6fc819e in QCoreApplication::notifyInternal(QObject*, QEvent*) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #20 0xb6ff8c10 in ?? () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #21 0xb6ff6155 in ?? () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #22 0xb6a7525f in g_main_context_dispatch () from /lib/i386-linux-gnu/libglib-2.0.so.0 #23 0xb6a75990 in ?? () from /lib/i386-linux-gnu/libglib-2.0.so.0 #24 0xb6a75c2a in g_main_context_iteration () from /lib/i386-linux-gnu/libglib-2.0.so.0 #25 0xb6ff6ada in QEventDispatcherGlib::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #26 0xb7312e7a in ?? () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #27 0xb6fc71dd in QEventLoop::processEvents(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #28 0xb6fc7421 in QEventLoop::exec(QFlags<QEventLoop::ProcessEventsFlag>) () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #29 0xb6fcc19d in QCoreApplication::exec() () from /usr/lib/i386-linux-gnu/libQtCore.so.4 #30 0xb7258924 in QApplication::exec() () from /usr/lib/i386-linux-gnu/libQtGui.so.4 #31 0x08068499 in main (argc=6, argv=0xbffff6e4) at src/qt/bitcoin.cpp:271 (gdb) Edit clarified that this problem happens when out of diskspace
998	Small glitch, small fix ... it removes a blank line in in the transactions list tooltip, if the mined Coins are matured.
997	I just downloaded 0.6.0rc5. When I tried to start it initially, I got the familiar "EXCEPTION: 22DbRunRecoveryException" error, so I proceeded to delete the database/ directory and the __db.* files (used the command from Issue #809). Now when I try to start it, bitcoin-qt prints out the following message: ************************ EXCEPTION: 11DbException Db::open: Invalid argument bitcoin in Runaway exception terminate called after throwing an instance of DbException what(): Db::open: Invalid argument Aborted debug.log contains the following: 2012-03-27 16:15:23 Bitcoin version 0.6.0.5-beta 2012-03-27 16:15:23 Default data directory /home/rune/.bitcoin 2012-03-27 16:15:23 Loading addresses... 2012-03-27 16:15:23 dbenv.open strLogDir=/home/rune/.bitcoin/database strErrorFile=/home/rune/.bitcoin/db.log 2012-03-27 16:15:23 ************************ EXCEPTION: 11DbException Db::open: Invalid argument bitcoin in Runaway exception db.log says: file unknown has LSN 300/4326497, past end of log at 1/28 Commonly caused by moving a database from one database environment to another without clearing the database LSNs, or by removing all of the log files from a database environment __db_meta_setup: /home/rune/.bitcoin/addr.dat: unexpected file type or format when I ran it before, db.log contained the same error, except it was related to blkindex.dat.
996	- translations were pulled via tx pull -a - bitcoin_he.ts is new and was added into bitcoin.qrc
995	I merge all file changes by hand from master into my own play-ground and thats why I stumple upon such small things ;).
994	Fixes #982.
992	Tested using a WinXPsp3 virtual machine: + Installed bitcoin-0.4.5rc1-win32 + Installed bitcoin-0.6.0rc4 on top, ran bitcoin-qt + Uninstalled bitcoin-0.6.0rc4 RESULT: bitcoin.exe left in C:\Program Files\Bitcoin This pull will clean that up. HOWEVER: RESULT: locale\ folder left in C:\Program Files\Bitcoin Is Qt writing that folder at first startup? I dont see it mentioned in the setup.nsi; should the uninstaller explicitly remove it?
991	I dont think bitcoin: URI handling on Windows has had nearly enough testing, so this disables it for the 0.6 release. Im all for re-enabling it for a 0.6.1 and/or 0.7, but only we take a step back and do two things: 1. Can we get an IPC solution that doesnt require monkey-patching boost::interprocess ? 2. Im nervous that attackers might be able to craft bitcoin: URIs that Do Bad Things. I would suggest that we disable Linux bitcoin: URI handling until that is fixed, but I consider bitcoin: URI handling on Linux experimental anyway because users have to know how to manually enable it.
990	Added/modified comments above class definitions to be compatible with doxygen. No code changes.
989	This feature was requested and paid for by p2pool miner "DeathAndTaxes": Ive asked non-developers to express support on that thread.
988	Simple fix, currently the Window is not shown, if a user opens a bitcoin: link in the browser. This one brings the window to front, if its minimized or not active.
987	
986	This fixes #981 and should fix #956 I havent tested 956 after this patch, but it does fix #981 and afaict, they are actually the same underlying issue. It would be nice to have someone do more digging and find out what is actually going on in the win32 api calls boost is making and find the real issue, but this fixes the problem. Also, someone should file a boost bugreport.
985	Talk about old code, the installer set the uri handler to the old wx- bitcoin.exe
984	This speeds up initial connections with an old/large addr.dat a lot.
983	
982	Note, this occurs when Bitcoin-Qt is still single-threaded... ``` #0 0xffffe430 in __kernel_vsyscall () <-- this *never* finishes #1 0xf6b7045c in pthread_cond_wait () at ../nptl/sysdeps/unix/sysv/linux/i386/i686/../i486/pthread_cond_wait.S:169 #2 0xf7c29fa8 in __db_pthread_mutex_lock (env=0x86502c0, mutex=4180) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../mutex/mut_pthread.c:318 #3 0xf7c296ca in __db_tas_mutex_lock_int (env=0x86502c0, mutex=4180, nowait=0) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../mutex/mut_tas.c:218 #4 0xf7c29753 in __db_tas_mutex_lock (env=0x86502c0, mutex=4180) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../mutex/mut_tas.c:248 #5 0xf7ce1ced in __lock_get_internal (lt=0x8784ab8, sh_locker=0xf10c5884, flags=0, obj=0x86a4400, lock_mode=DB_LOCK_WRITE, timeout=0, lock=0xffffb4f4) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../lock/lock.c:953 #6 0xf7ce0679 in __lock_get (env=0x86502c0, locker=0xf10c5884, flags=0, obj=0x86a4400, lock_mode=DB_LOCK_WRITE, lock=0xffffb4f4) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../lock/lock.c:459 #7 0xf7d20be2 in __db_lget (dbc=0x86a4378, action=0, pgno=3, mode=DB_LOCK_WRITE, lkflags=0, lockp=0xffffb4f4) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_meta.c:1203 #8 0xf7c4e7a8 in __bam_get_root (dbc=0x86a4378, pg=3, slevel=1, flags=12802, stack=0xffffb564) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../btree/bt_search.c:192 #9 0xf7c4ea7c in __bam_search (dbc=0x86a4378, root_pgno=3, key=0xffffb950, flags=12802, slevel=1, recnop=0x0, exactp=0xffffb6cc) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../btree/bt_search.c:290 #10 0xf7c39c1d in __bamc_search (dbc=0x86a4378, root_pgno=3, key=0xffffb950, flags=14, exactp=0xffffb6cc) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../btree/bt_cursor.c:2785 #11 0xf7c37db1 in __bamc_put (dbc=0x86a4378, key=0xffffb950, data=0xffffb99c, flags=20, pgnop=0xffffb774) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../btree/bt_cursor.c:2130 #12 0xf7d0d3f0 in __dbc_iput (dbc=0x86a4378, key=0xffffb950, data=0xffffb99c, flags=20) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_cam.c:2103 #13 0xf7d0d23e in __dbc_put (dbc=0x86a4378, key=0xffffb950, data=0xffffb99c, flags=20) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_cam.c:2016 #14 0xf7cfb989 in __db_put (dbp=0x86a8368, ip=0x0, txn=0x877c3e8, key=0xffffb950, data=0xffffb99c, flags=20) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_am.c:477 #15 0xf7d1a713 in __db_put_pp (dbp=0x86a8368, txn=0x877c3e8, key=0xffffb950, data=0xffffb99c, flags=20) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_iface.c:1579 #16 0xf7c1ab34 in Db::put (this=0x87805e8, txnid=0x0, key=0xffffb950, value=0xffffb99c, flags=20) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../cxx/cxx_db.cpp:346 #17 0x08163a66 in CDB::Rewrite (strFile="addr.dat", pszSkip=0x83139a0 "\004addr") at src/db.cpp:250 #18 0x08167863 in LoadAddresses () at src/db.cpp:797 #19 0x0813d351 in AppInit2 (argc=4, argv=0xffffc714) at src/init.cpp:366 #20 0x08082ffe in main (argc=4, argv=0xffffc714) at src/qt/bitcoin.cpp:217 ```
981	In Windows, the default behavior is that certain protocolls (i.e. mailto) are linked to a certain executable. I setup the bitcoin protocol and linked that to the current 0.6 RC4 Bitcoin-Qt.exe via a Registry file: --- REGEDIT4 [HKEY_CLASSES_ROOT\bitcoin] Protocol" "URL Protocol"="" "FriendlyTypeName"="Bitcoin URL" [HKEY_CLASSES_ROOT\bitcoin\shell] [HKEY_CLASSES_ROOT\bitcoin\shell\open] [HKEY_CLASSES_ROOT\bitcoin\shell\open\command] \"%1\"" --- Afterwards I used Firefox to browse to: Now if I click the upper link Im asked to confirm opening of the Bitcoin-Qt.exe, which starts and offers to add an address + label to my addressbook. So far so good, but another click on that link does NOT use the same running instance, it tries to start a new one, which will fail (same data-dir and same port). Does the Win-Installer register a protocol handler? Im not sure if thats a bug in the client itself, but at least it would be interesting to know if someone has some thoughts on this. Dia
980	Okay, so my former assumption boost 1.47 would fix #956 was wrong and boost 1.49 did not fix it either. It turns out, that I could recreate the error condition by running Bitcoin-Qt and simply switch of my PC. So there were the 2 orphan files from boost interprocess that cause the problem. I found out, that no interprocess_exception was thrown, not in qtipcserver.cpp and not in bitcoin.cpp. Next step was to look through the code and the "create_or_open" option in the message_queue constructor got my attention. I changed this to create_only and voila there was an exception I could work with. It sais "file already exists", which makes sens as there are those orphan files left. In the end I introduced a new ipcRecover() function, which is called after catching interprocess::already_exists_error. This function works with the path were the stale message queue file "BitcoinURL" resides and checks if the file is there and tries to remove it. If that succeeds the function returns true and ipcInit() is called again. If this fails an error is written to the debug.log. Test case with 1.47 boost libs: - kill running Bitcoin-Qt instance by switching PC of - check for stale files, which are there - starting the client again with the fix disabled in the code - no exception, no log entries and a frozen GUI - starting the client again with fix enabled results in a not frozen GUI and normal client operation Log: ipcInit - boost interprocess exception #9: File exists. ipcRecover - old message queue found, trying to remove C:\ProgramData\boost_interprocess\BitcoinURL ...success I know there are many commits in here, so I would suggest to first only look at the diff and if you are interested in the history of the fix take a look at the commits itself. As I only run Windows the Linux / Mac devs should test this code, during our discussion.
979	This is to assist in troubleshooting #978, but probably a good idea in general.
978	I just received a payout from Eligius, and it isnt visible in Bitcoin-Qt despite having 14 confirmations now. My client is up to date, and debug.log shows one entry with the txid. I dont know if its the same bug, but I have seen the same thing happen with normal (ie, non-generated) sends as well in the past. I have not restarted my client, as I wish to debug this issue. I know it will show up if I use -rescan, at least. What can I try to do to look into this further? ``` got inventory: block 0000000000000635c404 new (from 78.47.187.252:8333 at lld) askfor block 0000000000000635c404 0 sending getdata: block 0000000000000635c404 got inventory: block 0000000000000635c404 new (from 173.242.112.53:8333 at lld) askfor block 0000000000000635c404 1332450345000000 got inventory: block 0000000000000635c404 new (from 86.123.208.149:2295 at lld) askfor block 0000000000000635c404 1332450465000000 got inventory: block 0000000000000635c404 new (from 37.53.212.44:4990 at lld) askfor block 0000000000000635c404 1332450585000000 got inventory: block 0000000000000635c404 new (from 58.218.194.54:8333 at lld) askfor block 0000000000000635c404 1332450705000000 got inventory: block 0000000000000635c404 new (from 79.160.173.76:8333 at lld) askfor block 0000000000000635c404 1332450825000000 got inventory: block 0000000000000635c404 new (from 79.119.186.169:58716 at lld) askfor block 0000000000000635c404 1332450945000000 got inventory: block 0000000000000635c404 new (from 98.143.152.14:8333 at lld) askfor block 0000000000000635c404 1332451065000000 got inventory: block 0000000000000635c404 new (from 93.183.165.168:3739 at lld) askfor block 0000000000000635c404 1332451185000000 got inventory: block 0000000000000635c404 new (from 94.244.165.242:3740 at lld) askfor block 0000000000000635c404 1332451305000000 got inventory: block 0000000000000635c404 new (from 188.213.165.168:55608 at lld) askfor block 0000000000000635c404 1332451425000000 got inventory: block 0000000000000635c404 new (from 188.2.196.250:53359 at lld) askfor block 0000000000000635c404 1332451545000000 got inventory: block 0000000000000635c404 new (from 64.121.179.145:59044 at lld) askfor block 0000000000000635c404 1332451665000000 got inventory: block 0000000000000635c404 new (from 178.165.57.47:50312 at lld) askfor block 0000000000000635c404 1332451785000000 got inventory: block 0000000000000635c404 new (from 91.218.14.211:54616 at lld) askfor block 0000000000000635c404 1332451905000000 got inventory: block 0000000000000635c404 new (from 12.238.60.18:65235 at lld) askfor block 0000000000000635c404 1332452025000000 got inventory: block 0000000000000635c404 new (from 109.87.251.12:50378 at lld) askfor block 0000000000000635c404 1332452145000000 got inventory: block 0000000000000635c404 new (from 213.111.134.248:60351 at lld) askfor block 0000000000000635c404 1332452265000000 got inventory: block 0000000000000635c404 new (from 86.106.45.91:58416 at lld) askfor block 0000000000000635c404 1332452385000000 got inventory: block 0000000000000635c404 new (from 78.106.27.121:56307 at lld) askfor block 0000000000000635c404 1332452505000000 got inventory: block 0000000000000635c404 new (from 89.161.86.41:2817 at lld) askfor block 0000000000000635c404 1332452625000000 got inventory: block 0000000000000635c404 new (from 2.95.50.155:3893 at lld) askfor block 0000000000000635c404 1332452745000000 got inventory: block 0000000000000635c404 new (from 46.72.112.247:4057 at lld) askfor block 0000000000000635c404 1332452865000000 got inventory: block 0000000000000635c404 new (from 31.43.136.187:50750 at lld) askfor block 0000000000000635c404 1332452985000000 got inventory: block 0000000000000635c404 new (from 83.25.114.155:55088 at lld) askfor block 0000000000000635c404 1332453105000000 got inventory: block 0000000000000635c404 new (from 31.200.146.143:55700 at lld) askfor block 0000000000000635c404 1332453225000000 got inventory: block 0000000000000635c404 new (from 178.54.44.75:4447 at lld) askfor block 0000000000000635c404 1332453345000000 got inventory: block 0000000000000635c404 new (from 178.148.230.214:15297 at lld) askfor block 0000000000000635c404 1332453465000000 got inventory: block 0000000000000635c404 new (from 69.118.191.16:52908 at lld) askfor block 0000000000000635c404 1332453585000000 got inventory: block 0000000000000635c404 new (from 95.104.125.39:54654 at lld) askfor block 0000000000000635c404 1332453705000000 got inventory: block 0000000000000635c404 new (from 213.111.99.134:52129 at lld) askfor block 0000000000000635c404 1332453825000000 got inventory: block 0000000000000635c404 new (from 31.41.15.55:57053 at lld) askfor block 0000000000000635c404 1332453945000000 got inventory: block 0000000000000635c404 new (from 208.111.165.68:8333 at lld) askfor block 0000000000000635c404 1332454065000000 got inventory: block 0000000000000635c404 new (from 95.26.136.103:61725 at lld) askfor block 0000000000000635c404 1332454185000000 got inventory: block 0000000000000635c404 new (from 89.137.70.13:57000 at lld) askfor block 0000000000000635c404 1332454305000000 got inventory: block 0000000000000635c404 new (from 77.45.33.44:54590 at lld) askfor block 0000000000000635c404 1332454425000000 received block 0000000000000635c404 accepted connection 46.98.141.14:59774 AddToWallet 413cf84c6d new SetBestChain: new best=0000000000000635c404 height=172396 work=271409372764954907121 ProcessBlock: ACCEPTED got inventory: block 0000000000000635c404 have (from 66.188.101.2:8333 at lld) askfor block 0000000000000635c404 0 ```
977	Bitcoin for windows version 0.5.3.1 is reporting 0.4.0-Beta in the Help>About menu. This is a non-critical error. Version 0.5.1 also reported 0.4.0-Beta in the help>about menu. I guess someone simply forgot to update the piece of code responsible for displaying the correct version number?
976	The commit assumes we update the used Boost libs for Windows to version 1.49 to switch to the latest release. If we switch over to 1.49 on Windows, we need to add oleaut32 lib in bitcoin-qt.pro, to avoid the compilation error "undefined reference to _imp__VariantClear@4", because VariantClear() is used in the boost::interprocess code. In the end we would also need to update the qtgui_deps_1.zip with the 1.49 boost libs for Windows and the 1.49 pre-compiled header files.
975	When a 0.6 wallet with compressed pubkeys is created, it writes a minversion record to prevent older clients from reading it. If the 0.5 loading it sees a key record before seeing the minversion record however, it will fail with DB_CORRUPT instead of DB_TOO_NEW. This is more needed in backports than in mainline for now, but its code improvement in any case.
974	Do not automatically change the wallet format unless the user takes an explicit action that implies an upgrade (encrypting, for now), or uses -walletupgrade. -walletupgrade optionally takes an integer argument: the client version up to which upgrading is allowed. Without an argument, it is upgraded to latest supported version. If an argument to -walletupgrade is provided at the time the wallet is created, the new wallet will initially not use features beyond that version. Third, the current wallet version number is reported in getinfo.
973	Also decrease default send/receive buffer sizes from 10 to 5 mb as this patch makes it easy for a node to fill both instead of only send. The largest advantage is not having to read from disk or serialize blocks on getblocks requests.
972	-checkblocks now takes a numeric argument: the number of blocks that must be verified at the end of the chain. Default is 2500, and 0 means all blocks. -checklevel specifies how thorough the verification must be: 0: only check whether the block exists on disk 1: verify block validity (default) 2: verify transaction index validity 3: check transaction hashes 4: check whether spent txouts were spent within the main chain 5: check whether all prevouts are marked spent 6: check whether spent txouts were spent by a valid transaction that consume them
971	This commit fixes the filesystem paths to be Windows-style on Windows. Currently this was added for the database directory, the database log, the dst and src path in the backup wallet operation, server.cert, server.pem, bitcoin.conf and bitcoind.pid. Example from the debug.log: old: dbenv.open strLogDir=D:\Bitcoin\Wallet/database strErrorFile=D:\Bitcoin\Wallet/db.log new: dbenv.open LogDir=D:\Bitcoin\Wallet\database ErrorFile=D:\Bitcoin\Wallet\db.log Tested on my Win7 machine and works.
970	Now that the BIP16 switchover is locked-in, I think it is best to remove the command-line arguments that were only needed during the transition period.
969	As these are equivalent functions, this cleans up the source a bit. Also remove PrintConsole() as this was the only use.
968	As it was a little hard for me to figure out the needed steps (although tcatm helped me a lot), I updated the translation process documentation to be more clear for "novice" and Windows users.
967	
966	
965	Hi bitcoin team, I have just made this trivial change on my system (NetBSD/amd64 6.0_BETA) so that compilation warnings are more relevant. Without it, each file compiled triggers this message: ```cc1plus: warning: -Wformat-security ignored without -Wformat``` FWIW, "gcc --version" returns: ```gcc (NetBSD nb2 20110806) 4.5.3``` Cheers, -- khorben
964	I did a full block load (from a local file, using the loadblocks patch) on my laptop with these settings in 33 minutes.
963	Would be nice to have a search function in the address book, transactions and receive coins panes, for quickly finding/verifying addresses more accurately than the eyechrometer.
962	old behaviour: - if -maxconnections is 0 or negative, no connection to the network was established at all - the maximum number of connections was in range 0 to 8 (125 was unused) new behavior: - if -maxconnections is 0 or negative, MIN_OUTBOUND_CONNECTIONS will be used to ensure connectivity - if -maxconnections is unset Gavins intended default of 125 is used - if -maxconnections is > MAX_OUTBOUND_CONNECTIONS, MAX_OUTBOUND_CONNECTIONS is used Perhaps the value of MAX_OUTBOUND_CONNECTIONS and MIN_OUTBOUND_CONNECTIONS should be refined further. I tested the changes on Windows and can confirm they work. Oh and I think this "bug" or lets say strange behaviour was introduced by Gavins commit to set defaults to 125. I was so sure, that I saw more than 8 connections before 0.6, but no one seems to have noticed?
961	Ive had it with this "feature". Ive had a lot of patience with it but... see pull requests #941, #826, #853, #795, #855 and issues #620, #692, #788... It appears impossible to implement this functionality in Qt without breaking in some OS, or some combination, or breaking something else. And I wasted too much time on it. Ive tried four different implementations at least. If someone has a perfect implementation that works on all OSes *and feels like testing it extensively* then be my guest and submit a new implementation as pull request. Please use "Close to tray" instead.
960	Simple fix.
959	As the Loading of the Block Index can take several minutes, its possible the user might want to exit the process during this, and so far the only way was with a kill -9. This small change allows the Block Index Loading to watch out for a requested exit, and abort during the process. Its been tested on my computer so far. Without this change: the bitcoin-qt process is unkillable (without a kill -9) during the initial Loading of the Block Index. This goes against standards for processes, which should try to exit cleanly as soon as a kill signal is sent.
958	I noticed that after the update of translations from transifex, there still is file src/qt/locale/bitcoin_cs_CZ.ts which conflicts with its successor src/qt/locale/bitcoin_cs.ts (the same in src/qt/bitcoin.qrc). To reflect current state on transifex and to avoid problems, the cs_CZ variant should be completely removed before making a relese.
956	debug.log Bitcoin version 0.6.0.4- Default data directory C:\Users\yecn\AppData\Roaming\Bitcoin Loading addresses... dbenv.open strLogDir=C:\Users\yecn\AppData\Roaming\Bitcoin/database strErrorFile=C:\Users\yecn\AppData\Roaming\Bitcoin/db.log Loaded 54422 addresses addresses 750ms Loading block index... LoadBlockIndex(): hashBestChain=0000000000000477f741 height=171947 block index 7304ms Loading wallet... nFileVersion = 60004 wallet 230ms Done loading mapBlockIndex.size() = 172013 nBestHeight = 171947 setKeyPool.size() = 100 mapWallet.size() = 535 mapAddressBook.size() = 34 Bound to port 8333 03/20/12 01:32 RandAddSeed() 210916 bytes addrLocalHost = 130.75.165.16:8333 ThreadDNSAddressSeed started Loading addresses from DNS seeds (could take a while) ThreadMapPort started ThreadSocketHandler started ThreadOpenConnections started ThreadMessageHandler started ThreadIRCSeed exiting ThreadOpenAddedConnections started ThreadOpenAddedConnections exiting trying connection 67.183.30.111:8333 lastseen=-0.2hrs lasttry=-370057.6hrs GetMyExternalIP() received [118.212.184.76] 118.212.184.76:0 GetMyExternalIP() returned 118.212.184.76 connected 67.183.30.111:8333 Added time data, samples 2, offset -8 (+0 minutes) version message: version 50200, blocks=171947 accepted alert 1011, AppliesToMe()=0 trying connection 84.16.230.215:8333 lastseen=-0.2hrs lasttry=-370057.6hrs connected 84.16.230.215:8333 askfor tx 0f35b9b080041f2979e6 0 sending getdata: tx 0f35b9b080041f2979e6 AcceptToMemoryPoolUnchecked(): size 0 AcceptToMemoryPool(): accepted 0f35b9b080 Added time data, samples 3, offset -6 (+0 minutes) version message: version 32300, blocks=171947 trying connection 86.170.211.131:8333 lastseen=-0.2hrs lasttry=-370057.6hrs connected 86.170.211.131:8333 Added time data, samples 4, offset -3 (+0 minutes) version message: version 32400, blocks=171947 trying connection 99.153.248.206:8333 lastseen=-0.2hrs lasttry=-370057.6hrs connected 99.153.248.206:8333 Added time data, samples 5, offset -7 (+0 minutes) nTimeOffset = -6 (+0 minutes) version message: version 60000, blocks=171947 trying connection 76.16.245.33:8333 lastseen=-1.0hrs lasttry=-370057.6hrs AddAddress(37.112.233.255:8333) AddAddress(85.26.186.62:8333) AddAddress(124.186.141.67:8333) askfor tx aacfeec8bb94b8273cb5 0 sending getdata: tx aacfeec8bb94b8273cb5 AcceptToMemoryPoolUnchecked(): size 1 AcceptToMemoryPool(): accepted aacfeec8bb 66 addresses found from DNS seeds ThreadDNSAddressSeed exiting connected 76.16.245.33:8333 No valid UPnP IGDs found AddAddress(68.56.214.38:8333) AddAddress(95.53.148.174:8333) AddAddress(97.76.145.244:8333) trying connection 24.248.167.36:8333 lastseen=-1.0hrs lasttry=-370057.6hrs connected 24.248.167.36:8333 AddAddress(109.201.221.173:8333) AddAddress(123.211.16.64:8333) AddAddress(196.14.91.194:8333) trying connection 178.212.97.96:8333 lastseen=-1.0hrs lasttry=-370057.6hrs connected 178.212.97.96:8333 trying connection 108.88.42.33:8333 lastseen=-1.0hrs lasttry=-370057.6hrs connection timeout trying connection 96.3.42.234:8333 lastseen=-0.0hrs lasttry=-370057.6hrs connected 96.3.42.234:8333 Added time data, samples 6, offset -8 (+0 minutes) version message: version 32300, blocks=171947 socket recv error 10054 disconnecting node 24.248.167.36:8333 trying connection 91.121.162.25:8333 lastseen=-0.1hrs lasttry=-370057.6hrs connected 91.121.162.25:8333 Added time data, samples 7, offset -679 (-11 minutes) nTimeOffset = -7 (+0 minutes) version message: version 32300, blocks=171947 ResendWalletTransactions() askfor tx ac47ecbb4e64b6513400 0 sending getdata: tx ac47ecbb4e64b6513400 AcceptToMemoryPoolUnchecked(): size 2 AcceptToMemoryPool(): accepted ac47ecbb4e AddAddress(190.172.105.183:8333) askfor tx 16c993a94de0827fc75d 0 sending getdata: tx 16c993a94de0827fc75d AcceptToMemoryPoolUnchecked(): size 3 AcceptToMemoryPool(): accepted 16c993a94d socket no message in first 60 seconds, 0 1 disconnecting node 76.16.245.33:8333 socket no message in first 60 seconds, 0 1 disconnecting node 178.212.97.96:8333 trying connection 24.12.46.91:8333 lastseen=-1.0hrs lasttry=-370057.6hrs connection timeout trying connection 65.110.244.153:8333 lastseen=-0.1hrs lasttry=-370057.6hrs connected 65.110.244.153:8333 Added time data, samples 8, offset -7 (+0 minutes) version message: version 50200, blocks=171947 accepted alert 1011, AppliesToMe()=0 trying connection 2.8.104.199:8333 lastseen=-1.0hrs lasttry=-370057.6hrs connected 2.8.104.199:8333 Added time data, samples 9, offset -6 (+0 minutes) nTimeOffset = -7 (+0 minutes) version message: version 50301, blocks=171947 AddAddress(31.100.230.125:8333) askfor tx 60a9fb27461efa81453b 0 sending getdata: tx 60a9fb27461efa81453b askfor tx 60a9fb27461efa81453b 1332207288000000 askfor tx 60a9fb27461efa81453b 1332207408000000 AcceptToMemoryPoolUnchecked(): size 4 AcceptToMemoryPool(): accepted 60a9fb2746 AddAddress(58.27.33.126:8333) askfor tx f599d6aaef09ac7fe771 0 sending getdata: tx f599d6aaef09ac7fe771 askfor tx f599d6aaef09ac7fe771 1332207313000000 askfor tx f599d6aaef09ac7fe771 1332207433000000 AcceptToMemoryPoolUnchecked(): size 5 AcceptToMemoryPool(): accepted f599d6aaef AddAddress(108.223.88.178:8333)
955	I encrypted my wallet a little while ago, but I forgot what password I used. I went through the list of my usual passwords, and was getting: "The password entered for the wallet decryption was incorrect. " When I enter a certain password that I use sometimes, Bitcoin Wallet will crash Screen Shot: I tried using that password to change passphrase and send bitcoins and it will cause Bitcoin Wallet to crash. I can try any other password I can think of and I get "passphrase entered for the wallet decryption was incorrect." debug.log is showing EXCEPTION: 9key_error CKey::SetSecret() : secret must be 32 bytes C:\Program Files\Bitcoin\bitcoin-qt.exe in Runaway exception
954	source file update: I used "lupdate -no-obsolete C:\Users\%USERNAME%\bitcoin\bitcoin-qt.pro", which uses the path to my local repo, to update the source file. I checked it and it now contains formerly missing strings + has the correct line references to the source code files. There are only 2 strings which fall back to state unfinished, as they were updated in the source code files. These will need a re-translation. 8 new strings are in (i.E. Backup Wallet), which then need a Transifex translation. Like you said, I only attached the bitcoin_en.ts in the commit. remove cs_CZ: See issue the bitcoin_cs_CZ.ts is completely untranslated and conflicts with the translated one bitcoin_cs.ts. So I removed the reference from bitcoin.qrc and deleted bitcoin_cs_CZ.ts.
953	After using 0.6 RC4 and seeing the translations directly in the GUI I made some further changes to polish the german translation. I hope this gets merged before the final 0.6 release :). This commit is based on the current german Transifex translation. I always work directly with Transifex, download the language file and push it to my repo.
952	If you have an address without a label in the addressbook, use this entry / address in the send coins tab and enter a label, the label is not saved in the addressbook and remains unset. For new / unknown addresses the address AND the label are saved, so there it works.
951	Previously getheaders would return any number of headers up to 2000 + the distance the locator parameter was back (which is up to ~ the number of items in the locator ^ 2). The only client I was able to find which actually handles the headers message is BitcoinJ, and it clearly expects no more than 2000 headers See: Additionally, the wiki clearly states that getheaders will only ever return 2000 headers:
950	Wallet keys are 32 bytes, exactly two AES blocks. Using padded encryption makes attacking somewhat easier, as the attacker can check whether the padding is correct after decrypting using an attempted passphrase, rather than needing to do an EC multiplication to check whether the private and public keys match.
949	I spent some time today trying to get Bitcoin to compile with MSVC2010. Eventually got it to work nicely. Ill publish the solution and build files this week. However there were quite some surprises: - Define `WIN32_LEAN_AND_MEAN` in serialize.h to prevent winsock compile errors. - CService::SetPort, was mysterious unresolved external. Turned out to be a macro issue, windows defines SetPort - strprintf problem: - works in g++, but in MSVC causes horrible crashes. - `NOMINMAX` needs to be defined before include of windows.h to prevent windows from defining min and max macros, and std::min and std::max from causing compile errors - `pid_t` needs to be defined for compatibility All these are fixed in this patch. The changes are trivial. This still builds in Linux, however I still need to test whether this doesnt break the gitian cross-compile.
948	In cases of very large reorganisations (hundreds of blocks), a situation may appear where an inv is sent as response to a getblocks, but the last block mentioned in the inv is already known to the receiver node. However, the supplying node uses a request for this last block as a trigger to send the rest of the inv blocks. If it never comes, the block chain download is stuck. This pull request makes the receiver node always request the last inved block, even if it is already known, to prevent this problem.
947	Currently, if a node is banned for misbehaviour the receive buffer, vRecv, is not cleared and ProcessMessages continues to process any further messages already received from the node. Thus, if a node spams hundreds of messages and does not wait for a response, all the messages get processed, even if the node is banned after just a couple. This patch clears the receive buffer when the socket is closed. Perhaps it should be done in Misbehaving() instead? But it seems logical that we never want to process messages from a disconnected node since we cant reply to them anyway. EDIT: Two things I forgot to mention: Firstly, I found this problem in litecoin, which is being actively attacked by spammers. I dont know for sure if bitcoin has this problem. Secondly, this wont do much alone, because there is very little code to actually ban bad nodes. I am experimenting with detecting bad behaviour - ie adding banning code, and thats how I noticed this.
946	It could just as well be on either part of the gitian build, but to safely put it on the Qt side would require bumping the filename, and every gitian user rebuilding it. v0.5.3.1 put it on the Bitcoin side, and this is easier to work with and keep safe, so Im moving it.
945	The small HTML code starting at is invalid (checked via It has an invalid DOCTYPE, is missing the title-tag and the meta-tag is in XHTML style, which is not allowed for HTML 4.01. I did not open a pull request, as I dont want to edit the english source file and hope for an lupdate of it, which should be done before this one gets fixed. Edit: Had to remove all HTML-code, as this breaks the layout here :-/.
943	It makes sense to add a "Clear all" button just like in the send coins tab, because currently there is no way to empty the fields. Perhaps a GUI guy can add this :)?
942	Would be nice to get this integrated before the RC4 release gets compiled, as I fixed a typo and made some small changes to the german translation.
941	The current "minimize to tray" implementation has problems on Windows. It converts the window to a tool window, but when it is brought back it is not converted back to a normal window, causing strange behavior (such as an ugly title bar), as tool windows dont get a ChangeEvent on unminimization. This implements the eventual suggestion from the Qt forums . Ive tested it on Ubuntu and Windows (XP) and it works there. Can someone test it on KDE please? If we dont manage to get it right this time Im going to remove the "minimize to tray" functionality completely (but not "Minimize on close" of course, because that works fine...). Or maybe keep it only on Windows.
940	It seems like the strings "Backup Wallet" and "Wallet Data (*.dat)" are currently missing in the Transifex translation service, which makes it impossible to create translations for it. Perhaps there are some more, that are currently not included src/qt/locale/bitcoin_en.ts and I guess a lupdate is needed to fix this. As Im on Windows I dont know how to do this :-/.
939	With 0.5.3, when I press the "maximise" button, bitcoin-qt quickly maximises and restores the original window size right away. If a maximised window is minimised to tray and then restored, the window is also un-maximised. Both problems are regressions in 0.5.3; 0.5.2 worked fine in this regard.
938	This resolves #820 and #640.
937	It would be nice if we could add a file version.h, which is autogenerated for git builds, and static for source tarballs, with the output of "git describe" as contents. This command gives as output: * the latest git tag reachable from the current commit * (if any commits since that tag) the number of such commits * (if any commits since that tag) the latest commit id That output could be used as a "build id", available via getinfo or the about box.
936	Replacement for getmemorypool compatible with new BIP 22 specification.
934	
932	It echoes back a nonce field that is now added to the ping message.
931	
930	Sometimes a new block arrives in a new chain that was already the best valid one, but wasnt marked that way. This happens for example when network rules change to recover after a fork. In this case, it is not necessary to do the entire reorganisation inside a single db commit. These can become huge, and exceed the objects/lockers limits in bdb. This patch limits the blocks the actual reorganisation is applied to, and adds the next blocks afterwards in separate db transactions. Mostly-closes #925.
929	Only available on dropdowns when a Tonal-compatible font is installed
928	This fixes the issue of send coins dialog initially having BTC selected as the unit to be sent even when, for example, mBTC is chosen as the default unit.
927	Even if another unit is configured in Bitcoin-Qt, "Send coins" always defaults to BTC. This seems non-intuitive to me.
926	
925	TD and jrmithdobbs ran into this with version 0.6rc1. What happened: Block 170060 has an invalid-under-new-rules BIP16 transaction. That block is rejected by 0.6rc1 unless you run with the -paytoscripthashtime= argument to move the BIP16 acceptance date. There is a fairly long alternative chain fork at that point, because a couple of mining pool operators who were supporting BIP16 didnt restart their bitcoinds with the new BIP16 deadline. The 0.6rc1 code will save both chains to disk, but rejects the longer as invalid. So far, so good. The bug: If you upgrade or set -paytoscripthashtime to the correct date then the next found block will trigger a really big reorg operation. And with the settings were using for Berkeley DB, that re-org fails because the database code runs out of locks. Workarounds: recompile bitcoin so bdb allocated more locks. Or re-download the blockchain. Short-term fix: Add a command-line flag so anybody who runs into this issue can just re-run with more locks. Long-term fix: Rework the block re-org code so it doesnt create one massive database transaction.
924	To reproduce, set and save "mBTC" as your display unit. After a restart, "Recent transactions" (only) will show BTC anyway.
923	Hi there, since two days Bitcoin is not catching up with current block. I have deleted the whole folder and downloaded the block chain again. still same issue.. Am I missing anything?? thx in advance
922	Ive got an encrypted wallet and want to unlock it "until next reboot." So I tried setting a timeout of 10 years (315360000 seconds): bitcoind walletpassphrase "wouldnt you like to know" 315360000 ... but when I check the unlocked_until time it is unlocked only until the end of the month : bitcoind getinfo "unlocked_until" : 1333159764, 1333159764 is 2012-03-31 02:09:24 GMT
921	Usually while syncing, I see an orange circular icon in the bottom right corner of the GUI: But today, after updating from git and rebuilding, I saw a green checkmark there, which usually indicates that the local copy of the blockchain is up-to-date. However, the status bar said it was syncing, and only 99% done:
920	bitcoind 0.6rc2 x86_64 / Mint 11 I tried using dumpprivkey a few times with a fresh wallet. It doesnt look like the output is in SIPA format and it doesnt appear to be valid. I tried using bitaddress.org and strongcoin.com to check the keys without success. ./bitcoind getnewaddress 1A3w7WXZZJM6NnxjeYvDzs1ALGPKw9vRfJ ./bitcoind validateaddress 1A3w7WXZZJM6NnxjeYvDzs1ALGPKw9vRfJ { "isvalid" : true, "address" : "1A3w7WXZZJM6NnxjeYvDzs1ALGPKw9vRfJ", "ismine" : true, "pubkey" : "02c1667101bc8cfe77a65abd7111a48ab12df1f6b98bc484ad8c7ff9fed7ba8a5b", "iscompressed" : true, "account" : "" } ./bitcoind dumpprivkey 1A3w7WXZZJM6NnxjeYvDzs1ALGPKw9vRfJ L3ckYBFd7SbajDQjzB85UELZ1ume3pL67izJ5bTiXqSV4nSHJr7G However, if I first try to import a key, the address is correct and the dumpprivkey appears to work properly: ./bitcoind importprivkey 5JfaKXtKwjPDGwL2FiT9DjjU11Mswu4mFNjYch3WzEDkfC9EoCL "test" ./bitcoind getaddressesbyaccount "test" [ "1EH2ySiTkv82LPDL2KckwVAhtiALyJBHQx" ] ./bitcoind validateaddress 1EH2ySiTkv82LPDL2KckwVAhtiALyJBHQx { "isvalid" : true, "address" : "1EH2ySiTkv82LPDL2KckwVAhtiALyJBHQx", "ismine" : true, "pubkey" : "04cbc2b092bedcebe164b7c0915e95d54f6689449466d4dcd24bf600895bc99378167edbdd3a8f3de40625aa4cf91a093bbb2b4a9a0703d2885ee9a7c91762e31e", "iscompressed" : false, "account" : "test" } ./bitcoind dumpprivkey 1EH2ySiTkv82LPDL2KckwVAhtiALyJBHQx 5JfaKXtKwjPDGwL2FiT9DjjU11Mswu4mFNjYch3WzEDkfC9EoCL This suggests the problem is related to the compressed key format.
919	The german bitcoin-qt translation is currently incomplete (missing translation for sign message for example) and it contains some garbage characters. The translation on transifex seems to be much more complete.
918	Hello, there was a small typo in src/net.cpp. So I fixed it :)
917	This pull request is intended to facilitate bitcoind log rotation. When the daemon receives a HUP signal, it reopens the debug.log file so the previous one can be rotated. Ive tried to describe the technical motivation in each of the three commit messages. It uses flockfile and funlockfile to avoid thread contention issues. As best I can tell, those functions are available on most platforms, but I have only compiled on OS X. I have a test script which sends SIGHUP to the bitcoind process every 100 ms. Ive been running with that test script and this patch for the last few days and havent had any problems. In my tests, it behaves well during startup and shutdown too. Each rotated log contains the content I expect. Suggestions for improvement welcome.
916	First call says: error: {"code":-1,"message":"value is type str, expected int"} Second: error: {"code":-17,"message":"Error: Wallet is already unlocked."}
915	Introduce the following network rule for blocks after march 15, 2012: * a block is not valid if it contains a transaction whose hash already exists in the block chain, unless all that transactions outputs were already spent before said block. Warning: this is effectively a network rule change, with potential risk for forking the block chain. Leaving this unfixed carries the same risk however, for attackers that can cause a reorganisation in part of the network. Thanks to Russell OConnor and Ben Reeves.
914	Prevent dns leakage and disable seeding/listening with -connect
913	Reported via email: main.cpp - line 1647 you probably need to change 140700 to 168000, at least if you want consistency in initial downloads and last checkpoint (will also save you a many minutes in chain download). Or perhaps you should change it to CheckPoints::GetTotalBlocksEstimate() once and for all.
912	
911	This prevents mapOrphanTransactions from growing without bound. It should eventually be combined with DoS code to disconnect and ban peers that send "too many" orphans, but we need to think a little harder about how to figure out how many is too many.
910	
909	Every day or two I run a script to move bitcoins between local and remote wallets. The script hasnt been changed since 16th Feb, but one time when I ran it a few days ago it sent coins from the "" account, not the one I told it to. The script runs: bitcoind sendfrom name $address $amount which should debit the "name" account. And every time except for one thats what it did. Now, however, if I check the balance of the "name" account, it is too high by the amount I transferred the time it went wrong, and if I "listtransactions" the transaction in question has: . "account" : "", instead of . "account" : "name", I dont know how to get this to happen again - its been fine for 6 months, only going wrong this one time. It has been working again since the time it went wrong. I doubt it matters, but this is the script I use. Its in a Makefile, so most of the $s are doubled up: move: getbalance name 0) || exit; \ echo $$x | sed -E s/[.]?00000000$$//; \ echo -n "amount: "; read Y; Y0=$$Y"00000000"; \ echo "send $$Y BTC to $(ADDRESS)?"; \ echo -n "wallet passphrase: "; read X; echo; \ $(BITCOIND) walletpassphrase "$$X" 300 && \ ($(BITCOIND) sendfrom name $(ADDRESS) $$Y; \ $(BITCOIND) walletlock; \ ssh server "echo \"$$(date) - received $$Y BTC at $(ADDRESS)\" >> wallet.log"; \ $(BITCOIND) getbalance name 0 | \ sed s/00000000$$//)
908	With current git master, the system tray icon disappears immediately when you tell Bitcoin-Qt to exit. It used to stay until the client shutdown completely. I see that this was intentional in pull #867, but it makes development/debugging more difficult and may cause more confusion when a user gets an error that Bitcoin-Qt is already running when he tries to restart it. How about changing the icon, setting a "shutting down" tooltip, or similar instead?
907	This prevents unbounded memory usage when a attacker spams a node with "inv" messages.
906	Being able to sign a message without the ability to verify signed messages is a little lopsided :)
905	AvailableCoins() makes a vector of available outputs which is then passed to SelectCoinsMinConf(). This allows unit tests to test the coin selection algorithm without having the whole blockchain available. This change was suggested in the comments of pull #898.
904	This is a version of #890 rebased on top of #899, plus an extra fix for storing the proxy port in the settings as well.
903	I just had my laptop freeze and had to hard reboot. When it came back both the blockchain and addr databases were corrupted and failed to load. I had to restore an old backup to get bitcoin to run again. Is it possible to somehow keep the database files consistent even in the event of a power failure or OS lockup?
902	Removes potential buffer overflow in win32 code as reported in #901. Also simplify the `MyGetSpecialFolderPath` function, as SHGetSpecialFolderPath is always included in Windows XP, the minimum version supported by bitcoin: Warning: Untested
901	There [1][2] we use strcpy, first arg may contain `MAX_PATH+100` (355) chars, but second arg may contain 32,767 chars [3] [1] [2] [3]
900	Fixes #860
899	Before 0.6 addrProxy was a CAddress, but netbase changed it to CService. Retain compatibility by wrapping/unwrapping with a CAddress when saving or loading. This commit retains compatibility with 0.6.0rc1 (which wrote the setting as a CService) by trying to parse twice. Fixes #814
898	If we have three 50BTC outputs and try to spend 100BTC, we should use only two of the outputs. Previously we were using all three. Similarly if we have outputs of 50, 50, and 0.01 and want to spend 100BTC, we shouldnt include the 0.01 in the transaction. shows a transaction where MtGox was trying to consolidate ten 50k outputs into a single 500k output. The wallet had at least 11 50k outputs in it. Because of this code in wallet.cpp: if (nTotalLower >= nTargetValue + CENT) nTargetValue += CENT; the target value was increased from 500k to 500k plus a cent, which couldnt be found using just ten 50k outputs, and so an eleventh 50k output became involved, to avoid sub-cent change. There was no need for any change at all. (I notice the 50k change hasnt yet been redeemed. I hope it isnt lost!) These transactions show other common cases where extra 0.01 coins are tacked on to both sides of transactions for no good reason: (Sorry for the repeat pull request. I still dont know how to work github properly...)
897	Fixes #874.
896	Doing so would allow an attack on old nodes, which would relay a standard transaction spending a BIP16 output in an invalid way, until reaching a new node, which will disconnect their peer. Reported by makomk on IRC.
895	There has been some interest in this functionality.
894	Fix #880. Run with -nosplash or -splash=0 to disable splash screen. Also, dont show splash screen when -min is specified on the command line. Note that the splash screen is shown before the bitcoin.conf file is read, so putting splash=0 in bitcoin.conf has no effect. Putting min=1 in bitcoin.conf will cause the window to be minimised, but the splash screen will still show.
893	Fix #880. Note that the splash screen is shown before the bitcoin.conf file is read, so putting splash=0 in bitcoin.conf has no effect. Run with -nosplash or -splash=0 to disable splash screen.
892	If we have three 50BTC outputs and try to spend 100BTC, we should use only two of the outputs. Previously we were using all three. Similarly if we have outputs of 50, 50, and 0.01 and want to spend 100BTC, we shouldnt include the 0.01 in the transaction. shows a transaction where MtGox was trying to consolidate ten 50k outputs into a single 500k output. The wallet had at least 11 50k outputs in it. Because of this code in wallet.cpp: if (nTotalLower >= nTargetValue + CENT) nTargetValue += CENT; the target value was increased from 500k to 500k plus a cent, which couldnt be found using just ten 50k outputs, and so an eleventh 50k output became involved, to avoid sub-cent change. There was no need for any change at all. (I notice the 50k change hasnt yet been redeemed. I hope it isnt lost!) These transactions show other common cases where extra 0.01 coins are tacked on to both sides of transactions for no good reason:
891	Completed czech translation + changed locale code from cs_CZ to more common (and previously used) cs.
890	The main motivation for this was a lot of frustration because command-line, bitcoin.conf, and wallet.dat settings were interacting in ill-defined ways. Now GUI settings are stored in QT settings files; see ... for details on where. Testnet and main network have their own separate files (thanks The first time you run with this patch settings from your wallet.dat will be read and moved over to the new settings file (and the settings erased from wallet.dat). From then on, settings in the wallet.dat are ignored-- so if youre using --datadir and multiple wallets, dont expect the setting to be read/erased from the other wallets. The proxy setting is behaving badly (e.g. 127.0.0.1 is turned into an IP6-looking address), but Im 90% sure that is a pre-existing bug based on other reports of weird strings in the proxy setting with the 0.6 release. Ill file an issue about that.
889	Michael Gronager has figured out why: I now exit the ipc thread at startup by inserting: void ipcThread(void* parg) { ipcShutdown(); return; ... Bitcoin-Qt is now running nicely using around 0.9% CPU. So it seems like the culprit was indeed line 31: if(mq->timed_receive(&strBuf, sizeof(strBuf), nSize, nPriority, d))
887	Other gitian upgrades may not make 0.6. :(
886	Add block "confirmations" to getblock, mainly for identifying orphans **** Second parameter to JSON-RPC getblock/gettransaction: decompositions This is an Object specifying how to decompose specific elements. Currently supported: * "tx": "no", "hash", "hex", "obj" * "script": "no", "hex", "asm", "obj" **** Note that this depends on pulls #841 (sipa/getalltransactions) and #885 (luke-jr/getblock_cleanup), so the diff includes those until they are merged.
885	- Add "size" and "bits" - Rename "blockcount" to "height" (and make it 1-based) - Rename "hashprevious" and "hashnext" to "previousblockhash" and "nextblockhash" (respectively)
884	Simplified form of #715
883	It scans through the file for valid block signatures, and processes them one by one.
882	As testnet has neither DNS seeds or built-in seed addresses to bootstrap from.
881	Hi there, Yesterday night I have encrypted my wallet using bitcoin tool. today when I open bitcoin tool It shows "loading block index" and than throws an error "Wallet.dat corrupted". Now I cannot access my wallet. Im using Win7 64bit. I have created new wallet.dat by renaming old wallet.dat to wallet-old.dat. with new wallet the bitcoin tool opens fine, even I can encrypt the new wallet works fine aswell. I just dont know what happened to my original wallet.dat. Im new to bitcoin topic and I dont understand why the bitcoin folder is 1.3 GB. Is there any way I can recover my address back? because I have locked that adress in a mining website (deepbit). it would be very thankful if anyone gives clue how to recover the wallet.dat in windows environment. All I see on google is either linux solutions which I have zero knowledge. PS: I dont mind sharing half of the money the wallet has if i get it back.
880	I am starting bitcoin-qt with my GDM login and the splash screen is pretty disturbing especially when the loading of the database and blockchain takes some minutes and I am unable to move the splash screen out of the way. It seems that this is already recognized [here](https://github.com/bitcoin/bitcoin/pull/679#issuecomment-3074677) and [here](https://github.com/bitcoin/bitcoin/issues/671). But since there wasnt an issue report for this request I made a new one.
879	Since updating archlinux ive been unable to build bitcoin-qt from git HEAD. The error is as follows: $ make g++ -m64 -Wl,-O1,--sort-common,--as-needed,-z,relro,--hash-style=gnu -fstack-protector -Wl,-O1 -o bitcoin-qt build/bitcoin.o [...] build/qrc_bitcoin.o -L/usr/lib -lqrencode -lminiupnpc -lssl -lcrypto -ldb_cxx -lboost_system -lboost_filesystem -lboost_program_options -lboost_thread -lQtGui -lQtCore -lpthread /usr/bin/ld: build/qtipcserver.o: undefined reference to symbol shm_unlink@@GLIBC_2.2.5 /usr/bin/ld: note: shm_unlink@@GLIBC_2.2.5 is defined in DSO /lib/librt.so.1 so try adding it to the linker command line /lib/librt.so.1: could not read symbols: Invalid operation collect2: ld returned 1 exit status make: *** [bitcoin-qt] Error 1 $ I made the following change to bitcoin-qt.pro and the problem went away: LIBS += $$join(BOOST_LIB_PATH,,-L,) $$join(BDB_LIB_PATH,,-L,) $$join(OPENSSL_LIB_PATH,,-L,) $$join(QRENCODE_LIB_PATH,,-L,) -LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX +LIBS += -lssl -lcrypto -ldb_cxx$$BDB_LIB_SUFFIX -lrt # -lgdi32 has to happen after -lcrypto (see #681) I dont know enough about whats going on to say whether thats a good idea, but it worked for me...
878	
877	After sending coins - I get this alert dialog: And the client crashes about 10 seconds after that no matter what you click. I have the 0.5.2 version of Bitcoin-QT. Running OSX Lion and I have Growl 1.3.2 installed.
876	
875	p2p port pops up a nice error message before quitting, but rpc port conflict just dies :(
874	QT: tooltip for hovering over status bar produces "Last received block was generated %n second ago." Many people have reported this on IRC, but I couldnt find an issue for it.
873	Now the entire network upgraded to (initial) protocol version 209, certain simplifications in the source code are possible.
872	As requested in #518.
871	
870	
869	Also moved RecvLine to net.cpp.
868	
867	Hide tray icon in destructor, as the deletion (which automatically happens as it is a child object of BitcoinGUI) will let it linger until quit, at least on Ubuntu. This is annoying as the icon and menu will still be there for a few seconds (ignoring command), so that it seems the quit did not work properly.
866	Moved to a new PC and brought my %appdata%/Bitcoin folder (from bitcoin .0.3.24) and new bitcoin .5 and .6 crashes. Deleted everything but wallet.dat and it worked and downloaded a new chain. Opening bitcoin-qt, overview page shows my recent transactions. Address book page shows nothing. When I try to add the addresses it says they are already in the address book. Is there a refresh control anywhere?
865	Fixes a memory leak.
864	Fixes #856
863	When OpenSSLs BN_bn2mpi is passed a buffer of size 4, valgrind reports reading/writing one byte past it. I am unable to find evidence of this behaviour in BN_bn2mpis source code, so it may be a spurious warning. However, this change is harmless, as only the bignum with value 0 results in an mpi serialization of size 4.
862	
861	I find myself often going to the Address Book to find an address, then looking for a Send button. IMO, it is a usability bug that there is no way to do this.
860	For some reason, "Backup Wallet" is on the Settings menu. This doesnt really make sense. IMO, the File menu is logical place (next to Export)
859	Allows overriding the GUI language from the command line.
858	(title says it all)
857	(title says it all)
856	When starting an older bitcoin version after using 0.6: * if the wallet is not encrypted, it will use the non-compressed variants of the keys, eventually diverging * if the wallet is encrypted, decrypting it will cause a "wrong password" warning Solution: write minversion in the wallet
855	Toggle main window hide on tray icon click - converted openBictoinAction to toggleHideAction - put GUIUtil functions into a namespace instead of a class - put window-related functions together in optionsdialog Reasoning: - toggle is more typical behaviour - its more functional - better UX The typical issue with toggling visibility is that when a window is obscured by other windows but in the shown state, hiding it isnt what you want. Ive added an isObscured function to GUIUtil that checks several pixels in the window to see if they are visible on the desktop so that an obscured but shown window can be raised.
854	* Shorten code in qtipcserver.cpp * Handle bitcoin:// URLs in GUIUtil::parseBitcoinURL(QString) * Add testcase for bitcoin:// URL
853	After suggestion by The dummy window gives trouble on KDE. Changing the main window to a tool window also hides it from the taskbar, and seems to work at least on KDE and GNOME/Ubuntu. Whether it works as expected on Windows and Mac is unknown. Testing welcome...
852	In a different pull request which I accidentally closed, Gavin wrote: > I think a separate method called from ParseParameters and ReadConfigFile is the better way to go. So thats what Ive done here.
851	When is // removed we access `i + 2` indecies. But array is 257 length and iterate until 256, on last iteration 255 + 2 == 257 and we out-of-bounds. There:
850	RFC483 say: Prefix : A constant 28-bit-long bitstring value (2001:10::/28). RFC483 check is perform there: We check: ` GetByte(12) & 0xF0 == 0x10` But we must check: ` (GetByte(12) & 0xF0) == 0x10` it seems to be typo
849	This is just a refactor on main-net (new UpdateTime() method to avoid duplication of GetMedianTimePast() math). On testnet it fixes miners getting invalid blocks if they mine across the 20-minute "switch to minimum difficulty" rule that is new with 0.6.
848	The changes I made to ensure that at least one block every 20 minutes (or so) is created on testnet makes external miners create lots of invalid blocks. The testnet-only change was to drop the difficulty to minimum if it has been 20 minutes or more since generating the last block (as measured by block timestamps). I missed two places in bitcoinrpc.cpp where the blocks nTime is updated. The fix is easy; after updating pblock->nTime, do: if (fTestNet) pblock->nBits = GetNextWorkRequired(pindexPrev, pblock);
847	I copied this whole block out of ParseParameters() and changed the variable names. Perhaps its better to move this code into a new function and call it from both places. Or we could just process all the "-no" parameters at once, after bitcoin.conf has been processed. The "--" -> "-" processing needs to stay where it is, however, so that --datadir= can be used to locate bitcoin.conf.
846	From the forum annoucement: > The -nolisten, -noupnp and -nodnsseed command-line > options were renamed to -listen, -upnp and -dnsseed, > with a default value of 1. The old names are still > supported for compatibility but thats only true on the command line, not for bitcoin.conf options. I have a bitcoin.conf with "nolisten=1" in it, but its being ignored. The "interpret -nofoo as -foo=0 (and -nofoo=0 as -foo=1, as long as -foo not set)" code is in util.cpps ParseParameters() function and runs before the bitcoin.conf file is even read. This breaks existing configuration files, so its probably best to fix this before the release of 0.6.
845	Bitcoin-qt seems to crash (leaving an idle process and a corrupted database behind) when passed the -daemon flag.
844	* do not let vnThreadsRunning[1] go negative * do not perform locking operations while vnThreadsRunning[1] is decreased * check vnThreadsRunning[1] at exit
843	
842	
841	Works for wallet transactions, memory-pool transaction and block chain transactions. Available for all: * txid * version * locktime * size * coinbase/inputs/outputs * confirmations Available only for wallet transactions: * amount * fee * details * blockindex Available for wallet transactions and block chain transactions: * blockhash * time
840	Steps to replicate: Launch Bitcoin 0.5.2 Use the Send coins tab Type a label for the address you intend to add Paste the Pay To: address See label disappear Type a new label Type another character in the address field See label disappear One should be able to construct a transaction without the GUI second-guessing and wiping what you just typed in.
839	Noticed Bitcoin-Qt files (src/qt/*) lack a copyright license header. This should probably be fixed. Also, can I get a verbal OK to apply the terms to 0.5.0.x and 0.5.x after its fixed upstream?
838	Fix default suffixes in save dialog in GNOME and make it more clear that PNG is used (solves #833)
837	This adds a field labelled Immature in the overview section under the unconfirmed field, which shows mined income that has not yet matured (which is currently not displayed anywhere, even though the transactions exist in the transaction list). To do that I added a GetImmatureBalance method to the wallet, and connected that through to the GUI as per the GetBalance and GetUnconfirmedBalance methods. I did a small no-op change to make the code in adjacent functions a little more readable (imo); it was a change I had made in my repo earlier...but I thought it wouldnt hurt so left it in. Immature balance comes from mined income that is at least two blocks deep in the chain (same logic as displayed transactions). My reasoning is: - as a miner, its a critical stat I want to see - as a miner, and taking into account the label immature, the uncertainty is pretty clearly implied - those numbers are already displayed in the transaction list - this makes the overview numbers add up to whats in the transaction list - its not displayed if the immature balance is 0, so wont bother non-miners
836	This basically makes getblock useless :/ Would be nice if there was a way to get a full dump from getblock too, to avoid spamming the JSON-RPC server.
834	- icon from the LGPL Nuvola set (like the tick) - - include boost/version.hpp in db.cpp so that the overwrite version of copy can be used - catch exceptions in BackupWallet (e.g. filesystem_error thrown when trying to overwrite without the overwrite flag set) - include db.h in walletmodel.cpp for BackupWallet function
833	Report from user: Finally, when I tried to save a QR code image, I needed to manually append .png to the file name but there was no information or error message about this. I struggled a few minutes before realizing it could have been a format issue and switching from gif to png. If possible, adding an information about that might be useful.
832	Report from user: Firstly, on Ubuntu 10.04 amd64 I unpacked the tarball of the 0.6 RC1, but couldnt launch bitcoin-qt from the bin/64 directory. The error message I was getting was ./bitcoin-qt: error while loading shared libraries: libqrencode.so.3: cannot open shared object file: No such file or directory
831	...only if greater than zero.
830	No responding, no signal (connections) icon This is the end part of debug.log Bitcoin version 0.6.0- Default data directory C:\Users\yecn\AppData\Roaming\Bitcoin Loading addresses... dbenv.open strLogDir=C:\Users\yecn\AppData\Roaming\Bitcoin/database strErrorFile=C:\Users\yecn\AppData\Roaming\Bitcoin/db.log Loaded 91582 addresses addresses 3603ms Loading block index... LoadBlockIndex(): hashBestChain=0000000000000191727b height=166580 block index 7056ms Loading wallet... nFileVersion = 60000 fGenerateBitcoins = 0 nTransactionFee = 0 fMinimizeToTray = 1 fMinimizeOnClose = 1 fUseProxy = 0 addrProxy = 127.0.0.1:9050 fUseUPnP = 1 wallet 540ms Done loading mapBlockIndex.size() = 166629 nBestHeight = 166580 setKeyPool.size() = 100 mapWallet.size() = 0 mapAddressBook.size() = 1 Bound to port 8333 addrLocalHost = 10.223.76.16:8333 ThreadDNSAddressSeed started Loading addresses from DNS seeds (could take a while) ThreadMapPort started ThreadSocketHandler started ThreadOpenConnections started ThreadIRCSeed exiting ThreadOpenAddedConnections started ThreadOpenAddedConnections exiting ThreadMessageHandler started trying connection 85.229.140.166:8333 lastseen=-0.0hrs lasttry=-369198.7hrs GetMyExternalIP() received [118.212.184.76] 118.212.184.76:0 GetMyExternalIP() returned 118.212.184.76 connected 85.229.140.166:8333 Added time data, samples 2, offset -9 (+0 minutes) version message: version 32100, blocks=166597 trying connection 69.125.151.0:8333 lastseen=-0.0hrs lasttry=-369198.7hrs connected 69.125.151.0:8333 trying connection 86.192.238.56:8333 lastseen=-0.0hrs lasttry=-369198.7hrs Added time data, samples 3, offset -2 (+0 minutes) version message: version 50200, blocks=166597 No valid UPnP IGDs found connected 86.192.238.56:8333 askfor block 0000000000000823816e 0 askfor block 0000000000000340b4e4 0 askfor block 0000000000000ad1f4e9 0 askfor block 000000000000028a2e3f 0 askfor block 0000000000000b203b3d 0 askfor block 000000000000056a303d 0 askfor block 00000000000001b4e34f 0 askfor block 00000000000000104eb1 0 askfor block 0000000000000169c427 0 askfor block 0000000000000a6f80fc 0 askfor block 0000000000000b40cd9a 0 askfor block 000000000000031dadc8 0 askfor block 0000000000000618f069 0 askfor block 0000000000000bc83f95 0 askfor block 00000000000008c4bf67 0 askfor block 00000000000003973e8a 0 sending getdata: block 0000000000000823816e sending getdata: block 0000000000000340b4e4 sending getdata: block 0000000000000ad1f4e9 sending getdata: block 000000000000028a2e3f sending getdata: block 0000000000000b203b3d sending getdata: block 000000000000056a303d sending getdata: block 00000000000001b4e34f sending getdata: block 00000000000000104eb1 sending getdata: block 0000000000000169c427 sending getdata: block 0000000000000a6f80fc sending getdata: block 0000000000000b40cd9a sending getdata: block 000000000000031dadc8 sending getdata: block 0000000000000618f069 sending getdata: block 0000000000000bc83f95 sending getdata: block 00000000000008c4bf67 sending getdata: block 00000000000003973e8a trying connection 173.175.48.5:8333 lastseen=-0.0hrs lasttry=-369198.7hrs AddAddress(109.70.141.25:8333) connected 173.175.48.5:8333 Added time data, samples 4, offset +0 (+0 minutes) version message: version 32400, blocks=166597 received block 0000000000000823816e trying connection 86.21.114.104:8333 lastseen=-0.0hrs lasttry=-369198.7hrs REORGANIZE connected 86.21.114.104:8333 trying connection 24.30.51.118:8333 lastseen=-2.0hrs lasttry=-369198.7hrs connected 24.30.51.118:8333 trying connection 178.33.52.222:8333 lastseen=-2.1hrs lasttry=-369198.7hrs AddAddress(91.114.202.106:8333) AddAddress(84.46.71.129:8333) AddAddress(50.64.36.19:8333) SetBestChain: new best=0000000000000823816e height=166582 work=235442326222948265896 ProcessBlock: ACCEPTED AddAddress(41.84.135.62:8333) AddAddress(77.45.177.62:8333) AddAddress(83.142.211.246:8333) AddAddress(94.41.213.164:8333) AddAddress(115.51.59.64:8333) AddAddress(128.68.187.236:8333) AddAddress(194.60.236.244:8333) Added time data, samples 5, offset -36 (+0 minutes) nTimeOffset = -2 (+0 minutes) version message: version 50200, blocks=166597 AddAddress(76.22.98.210:8333) AddAddress(78.140.92.202:8333) AddAddress(83.57.212.152:8333) AddAddress(88.72.56.203:8333) AddAddress(109.73.44.25:8333) askfor block 00000000000000c39b9e 0 sending getdata: block 00000000000000c39b9e received block 0000000000000340b4e4 connection timeout SetBestChain: new best=0000000000000340b4e4 height=166583 work=235448251853997655680 ProcessBlock: ACCEPTED received block 0000000000000ad1f4e9 trying connection 86.147.31.208:8333 lastseen=-2.1hrs lasttry=-369198.7hrs connected 86.147.31.208:8333 trying connection 77.235.60.104:8333 lastseen=-2.1hrs lasttry=-369198.7hrs connected 77.235.60.104:8333 SetBestChain: new best=0000000000000ad1f4e9 height=166584 work=235454177485047045464 ProcessBlock: ACCEPTED askfor block 00000000000000c39b9e 1329115427000000 askfor tx aa7612786feb9629c573 0 sending getdata: tx aa7612786feb9629c573 askfor block 00000000000000c39b9e 1329115547000000 Added time data, samples 6, offset -11 (+0 minutes) version message: version 40000, blocks=166597 askfor block 00000000000000c39b9e 1329115667000000 askfor tx aa7612786feb9629c573 1329115433000000 Added time data, samples 7, offset -9 (+0 minutes) nTimeOffset = -9 (+0 minutes) version message: version 31900, blocks=166597 askfor block 00000000000000c39b9e 1329115787000000 askfor tx aa7612786feb9629c573 1329115553000000 askfor tx aa7612786feb9629c573 1329115673000000 received block 00000000000000c39b9e ProcessBlock: ORPHAN BLOCK, prev=00000000000003973e8a received block 000000000000028a2e3f 66 addresses found from DNS seeds ThreadDNSAddressSeed exiting
829	In preparation of IPv6 support: keep a map of potential local addresses instead of a single addrLocalHost, and use addrMe in incoming "version" messages to vote for them.
828	Fixes some possible race conditions in ThreadCleanWalletPassphrase().
827	This is broken in 0.6.0rc1: encrypting a wallet with compressed pubkeys in it will fail after reloading.
826	Ive reworked #795: - Now works in unity (on Ubuntu Ocelot) - The other tray menu options also re-show the window in the correct way - Delete dummy widget in destructor - Commit message fixed
825	
823	In preparation of IPv6 support: prevent double connections to the same node. Not urgent.
822	bitcoinrpc.cpp, line 1564. parg is freed through free (free(parg);), but it was allocated with new (line 1475 int* pnSleepTime = new int(params[1].get_int());). It is correct in line 1440 (delete (int*)parg;)
821	Not a high-priority issue, as I dont think many people use IPv6 proxies, but still it is a limitation. Field should also be widened in this case.
820	[OS: Windows Vista Home Premium X32]: bitcoin-qt 0.5.2 beta crashes intermittently while p2pool is active, usually after an extended period of run time. Fairly frequently, it also crashes at the exact time p2pool is being activated. I dont know if the problems are related. From monitoring the IRC p2pool channel, it seems the problem may be fairly common.
819	In the QT interface I can show the QR Code for addresses but cant then dismiss the QR Code popup window. It needs a Close button alongside Save As . I expect I could hit escape on the keyboard to get rid of it, but my escape key is broken, and anyway its not good to have to use the keyboard to dismiss a window that was created using just the mouse.
818	Enable accessible widgets Qt module on win32 (when static linking), so that people with screen readers such as NVDA can make sense of it.
817	This fixes a potential bug where some NATs may replace the nodes interal IP with its external IP in version messages, causing incorrect checksums when version messages begin being checksummed on February 14, 2012.
816	Februari 15th, the protocol changes and version and verack messages get a checksum. However, some NAT routers change the IP address inside packets payloads, causing the version messages checksum to become invalid. This commit disables the checksum check, so clients behind such routers can continue to connect after februari 15th.
815	From Unchecking UPnP ports doesnt seem to save me selection.
814	From Im not using the proxy option, but the new GUI is showing some strange IPv6 looking address in the proxy field. e.g. a9b1:0:f2:v532:200:0:0:0 Once I change it, its all good.
813	Fixes bug #794.
812	I just built GIT HEAD (328b26) and was playing about with getblock and getmining info when a new block was generated. This was the newest block initially: $ bitcoind getblock 2ef0d1af72aac8cb39fdf061fcbcf3aa5c26f04150f9aaef4ed { "hash" : "00000000000002ef0d1af72aac8cb39fdf061fcbcf3aa5c26f04150f9aaef4ed", "blockcount" : 166022, "version" : 1, "merkleroot" : "1d4723fd632af0dd2b3a6bd3559fab3dc401732100a6bda1c29fd27cfca0d1b3", "time" : 1328784001, "nonce" : 2228820364, "difficulty" : 1379647.43921429, "tx" : [ "2459f016f5733e819a3251ec31a1ebca5be4d33c74cc52c29d424f2665a9ec8d", "aefcccaf2e6e478d0654737b69a5ac0b3f3bd330869323352b630abeefe35706", "f5ba47853adfeb63b86d112e59614ac5ce03bea5f7c7d89efcb0ba069879fc08", "e4e4f056c27893ea56f8825fd3b770c35ac7e9ba313474742b5bc9d5c49432e4", "473e032356c42af5ac8fd85716128e6d776330fb58835bcf72b913b1daf4b2a5", "f7f539536d10c96cf64e62e130c3f155b324e8ded7357a220bfacc124bd40a9b" ], "hashprevious" : "00000000000009ce9f73ebcfb0180d4ae30fc508897cbff7ccda7e2bc9adf7f8" } Then I looked at the previous block: $ bitcoind getblock 9ce9f73ebcfb0180d4ae30fc508897cbff7ccda7e2bc9adf7f8 { "hash" : "00000000000009ce9f73ebcfb0180d4ae30fc508897cbff7ccda7e2bc9adf7f8", "blockcount" : 166021, "version" : 1, "merkleroot" : "01b1d730757820fa9b1f5da1fa6efb15e9ef2913af1788272eeda4b9e1d8104d", "time" : 1328783818, "nonce" : 1103372786, "difficulty" : 1379647.43921429, "tx" : [ "0b4ab720dc41967e47c4e54e45fa62431f9b44b3808ae5146f20d86846be1cc9", "551f64726921bc20fd1586fe456069f1f280c916d6141d63b49ec46164008389", "29fc20e3d897e2eeb02010894e1edc31f06c85d59c4fd916e68b6f742143ff40", "8aae8e841038440b25583a799add17491e5e4e93f4491a0350a0583e6bf24c4f", "92c579cae52a26257547bcbd6d38461429744fb33683581877b5d8128af16fab", "af726d45948e0328d2b13cb7588582cc30c7f6a283bb7616c660a074b8b285ef", "2ceed6ae3e3eee59257e7d103373260d4f46b0fc0860881b228830372cc20973", "0cdebcee7624e790b91f85faf1cfcab91fb235d0ed985e462f53c0192bac3551", "5764e50f5fb8858effb9cc8d558c667982402a2d6e98e1eaae8a5feea26ca773", "b7d6c72a956afd5b6bb821909ca7ca2f082f91f8a361e4b45bc390707934cdb3", "6a5fa920ed8a6141e5c8684ebcd175e10c7fa0b8d9ebffff21a69a65fd33b541", "7fa640d959c2eb554bad21c3a98c85bcae306c093522833571b504497f21c9b2", "60379cdfbae6eab35aaa864e76ee8d5265270f9014e1d8ee9dc056607052903b", "a0cee0cde40d75602d61d0e608a0aa79804a82fa80be66d73fef1faef90ed6e0", "8a524624a691958d6be9b5054b5748a12be7d12ced161e4d45400c41c3fae6a8", "adfe5c3ec456586bacfbcf69040562097bedf2f30795c2ba4108354030cc50fb", "90cbe6fb718e6ba28e83573b9648d8ebb1561b67f6e3158c3f2b43c046f78ea1", "495c152ce1d08892a9d7a5a9d16fa7b2887cf45cbd7c6b90edb6b40aa4b78f5d" ], "hashprevious" : "0000000000000b7ffca2a099146f8cdc1e931574068b81d22bc7536e139ea46a", "hashnext" : "00000000000002ef0d1af72aac8cb39fdf061fcbcf3aa5c26f04150f9aaef4ed" } And back to the newest block: $ bitcoind getblock 2ef0d1af72aac8cb39fdf061fcbcf3aa5c26f04150f9aaef4ed { "hash" : "00000000000002ef0d1af72aac8cb39fdf061fcbcf3aa5c26f04150f9aaef4ed", "blockcount" : 166022, "version" : 1, "merkleroot" : "1d4723fd632af0dd2b3a6bd3559fab3dc401732100a6bda1c29fd27cfca0d1b3", "time" : 1328784001, "nonce" : 2228820364, "difficulty" : 1379647.43921429, "tx" : [ "2459f016f5733e819a3251ec31a1ebca5be4d33c74cc52c29d424f2665a9ec8d", "aefcccaf2e6e478d0654737b69a5ac0b3f3bd330869323352b630abeefe35706", "f5ba47853adfeb63b86d112e59614ac5ce03bea5f7c7d89efcb0ba069879fc08", "e4e4f056c27893ea56f8825fd3b770c35ac7e9ba313474742b5bc9d5c49432e4", "473e032356c42af5ac8fd85716128e6d776330fb58835bcf72b913b1daf4b2a5", "f7f539536d10c96cf64e62e130c3f155b324e8ded7357a220bfacc124bd40a9b" ], "hashprevious" : "00000000000009ce9f73ebcfb0180d4ae30fc508897cbff7ccda7e2bc9adf7f8" } Then I checked the mininginfo for the first time: $ bitcoind getmininginfo { "blocks" : 166022, "currentblocksize" : 0, "currentblocktx" : 0, "difficulty" : 1379647.43921429, "errors" : "", "generate" : false, "genproclimit" : -1, "hashespersec" : 0, "pooledtx" : 9, "testnet" : false } Then again, almost immediately, and noticed the block count had gone up by one, and that the pooledtx count had gone crazy: $ bitcoind getmininginfo { "blocks" : 166023, "currentblocksize" : 0, "currentblocktx" : 0, "difficulty" : 1379647.43921429, "errors" : "", "generate" : false, "genproclimit" : -1, "hashespersec" : 0, "pooledtx" : 18446744073709551608, "testnet" : false } I see nothing obvious in the code that would cause the pooledtx count to be such a massive number. This must be a bug.
811	If Im reading this (https://github.com/bitcoin/bitcoin/blob/master/doc/assets-attribution.txt) correctly, you are including some GPL icons in the Bitcoin. This would make the whole program GPL. (http://stackoverflow.com/a/47994/613130) unless there are special licensing (unless you have special permissions from the author, but then you should write it). Icon: src/qt/res/icons/connect*.png Icon Pack: Human-O2 Designer: schollidesign License: GNU/GPL Site: Icon: scripts/img/reload.xcf (modified),src/qt/res/movies/update_spinner.mng Icon Pack: Kids Designer: Everaldo (Everaldo Coelho) License: GNU/GPL Site:
810	Could anyone add the file for Lithuanian qt translation to I have a translation file here:
809	$ ~/bitcoin-0.6.0rc1-linux/bin/64/bitcoin-qt (bitcoin-qt:32391): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap", (bitcoin-qt:32391): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap", (bitcoin-qt:32391): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap", (bitcoin-qt:32391): Gtk-WARNING **: Unable to locate theme engine in module_path: "pixmap", ************************ EXCEPTION: 22DbRunRecoveryException DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery bitcoin in Runaway exception terminate called after throwing an instance of DbRunRecoveryException what(): DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery Aborted
808	Can someone confirm the determinism? ab069992eaf3bde0e6580e00b19935c91438f57b657160b93643152511421cd2 gitian-inputs/bitcoin-deps-0.0.2.tbz2
807	
806	Introduce an enum threadId, and use symbolic indices when accessing vnThreadsRunning. Syntactic changes + bugfix
805	This allows for rebuilding Bitcoin without compiling the deps every time. Also includes fix for #802 (libpng security vuln)
804	This is a variation on pull #755 I made the option -bip16, defaults to 1 (true). I also moved the logic for setting the switchover time into init.cpp, and set the current-anticpated-switchover-time to March 1 for main network (left it at Feb 15 for test network). I also changed the SoftSetArg(...bool) methods name; during testing I was getting bitten by C++s annoying habit of converting char* to bool instead of string.
803	I decided Id typed "./bitcoind --nolisten" enough times to make command-line parsing work the way I think it should. Changes are: + Unit tests for the GetArg() methods + --foo=... is automatically interpreted as -foo=... (so you can use double-dashes if you like for all args) + Boolean arguments can be specified as either -foo (true) or -nofoo (false). + Internally, all boolean args are looked up using the positive form and default value (e.g. GetBoolArg("-dnsseed", true)) + Tweaked the --help text + Default for -irc to bootstrap via IRC channel was changed from true to false
802	this is a self-reminder (and blocker for 0.6)
801	* fixes issue #742 * new translations: cs_CZ fa fi fr_FR hr pl ro_RO sv tr It would be great if someone could review this patch.
800	When a transaction has multiple outputs that go to the wallet, list these as multiple transactions in the UI. This is also applied to generated (coinbase) transactions. Also makes the code shorter and easier to understand. This does need some testing.
799	Help users avoid insecure configurations a bit by recommending a secure RPC password and increasing the incorrect password delay. This may open up a RPC DOS for users with exposed RPC ports and short passwords. Since users shouldnt have exposed RPC ports OR short passwords, the DOS risk is preferable to the compromise risk. Also logs the client IP address for incorrect attempts. With this patch running bitcoind when there is no configuration file now results in: [gmaxwell@helmholtz src]$ ./bitcoind Error: To use bitcoind, you must set a rpcpassword in the configuration file: /home/gmaxwell/.bitcoin/bitcoin.conf It is recommended you use the following random password: rpcuser=bitcoinrpc rpcpassword=HXt6c9zmw6jqW4jvh3pcHTGb7owrmNLUtaSVGvoT2Sho (you do not need to remember this password) If the file does not exist, create it with owner-readable-only file permissions. Previously it just advised rpcpassword= which probably gets filled in with insecure normal password like values. I think ideally bitcoin would just autocreate the file with a random authentication string like this but I thought this change was more minimal. Thoughts?
798	Help users avoid insecure configurations a bit by recommending a secure RPC password and increasing the incorrect password delay. This may open up a RPC DOS for users with exposed RPC ports and short passwords. Since users shouldnt have exposed RPC ports OR short passwords, the DOS risk is preferable to the compromise risk. Also logs the client IP address for incorrect attempts. With this patch running bitcoind when there is no configuration file now results in: [gmaxwell@helmholtz src]$ ./bitcoind Error: To use bitcoind, you must set a rpcpassword in the configuration file: /home/gmaxwell/.bitcoin/bitcoin.conf It is recommended you use the following random password: rpcuser=bitcoinrpc rpcpassword=HXt6c9zmw6jqW4jvh3pcHTGb7owrmNLUtaSVGvoT2Sho (you do not need to remember this password) If the file does not exist, create it with owner-readable-only file permissions. Previously it just advised rpcpassword=<password> which probably gets filled in with insecure normal password like values. I think ideally bitcoin would just autocreate the file with a random authentication string like this but I thought this change was more minimal. Thoughts?
797	For some odd reason when i enable the Start Bitcoin on Windows start up by placing tick mark in options & clicking apply, the tick mark vanishes & show without tick mark. Same thing happens if i click OK also. I am not sure it loads automatically on startup itself, so i now starting up using windows startup folder. I disabled when i installed Bitcoin 0.5.2 beta & i cant enable now. May be just GUI problem, not sure. On WIn 7, 64 bit.
796	This regression in boost 1.48: Causes the current MacPorts boost (version 1.48.0) to fail when compiling 32-bit. Workaround is to use boost 1.47 as described at ; I expect this will fix itself as the fix percolates through the boost/macports release processes, Im posting here so this is just a known issue. Error compiling is: message_queue.hpp:330: error: no matching function for call to get_rounded_size(long unsigned int, const unsigned int&)
795	The "Minimize to the tray instead of the taskbar" option in Options should now work correctly.
794	Running some more fuzzing tests, I noticed a bug in the new getmininginfo information: gavin$ ./bitcoind -datadir=testnet-box/3 getmininginfo { "blocks" : 218, "currentblocksize" : 1000, "currentblocktx" : 0, "difficulty" : 0.12500000, "errors" : "", "generate" : true, "genproclimit" : 1, "hashespersec" : 0, "pooledtx" : 18446744073709551613, "testnet" : true } I think hashespersec should be greater than zero, also...
793	Im looking at the [API](https://en.bitcoin.it/wiki/Original_Bitcoin_client/API_Calls_list) and its really confusing. I should be able to set the bitcoin address using `setaddress`, but I have no idea how accounts work. Can I omit the account and just specify a bitcoin address? Would the following make sense in [node-bitcoin](https://github.com/jb55/node-bitcoin)? var myBitCoinAddress = "abc1234567890qwertyQWERTY"; client.setAddress(myBitcoinAddress);
792	This also avoids flushing setAddrKnown until 24 hours has passed, and avoids contacting the external IP services when not listening. Advertising non-listening nodes is just addr message spam. It doesnt help the network, in fact it hurts the network, and it also hurts users privacy. Advertising far out of sync nodes doesnt help the network they cant even forward (most) transactions and wastes nodes outbound slots.
791	Currently I keep my entire `~/.bitcoin` directory on an encrypted *eCryptFS* filesystem. However, loading the entire block DB from it is relatively slow, and due to issue #660 it is impossible to keep `.bitcoin` in plain and symlink `wallet.dat`/`addr.dat` from the private filesystem. I assume that symlinking `blk*.dat` would cause the same problems as in #660. Hence this feature request: Allow storing the public data (`blk*.dat`, `__db.*`, `database/log.*`) *in a separate directory* from private data. On Linux, `$XDG_CACHE_HOME/Bitcoin` (aka `~/.cache/Bitcoin/`) would be a good choice for the block DB and related files, while the private data could go to `$XDG_CONFIG_HOME/Bitcoin` (aka `~/.config/Bitcoin`). On Windows, `AppData/Local/Bitcoin` and `AppData/Roaming/Bitcoin` respectively. Those are only suggestions though; a simple `~/.bitcoin/private/` directory would be sufficient.
790	Needs tested by someone who has a UPnP router.
789	Screenshot: Correctly here so: " "
788	I have a xmonad/gnome window manager setup. When I start bitcoin-qt the window start to flicker: It appears and disappears with an high frequency (~5-10Hz) on the current selected workspace. I never experienced this behavior with the old client.
787	Design goals: * Only keep a limited number of addresses around, so that addr.dat does not grow without bound. * Keep the address tables in-memory, and occasionally write the table to addr.dat. * Make sure no (localized) attacker can fill the entire table with his nodes/addresses. See comments in addrman.h for more detailed information.
786	See #782: is right in saying that not everything is checked, as GetPubKey() returns the public key embedded in the PrivKey structure, and does not force recalculation. CKey::IsValid() performs this check now.
784	There are two coinbase transactions in 2 consecutive p2pool blocks, of which only the earlier one is shown in bitcoin-qt. When I run "bitcoind listtransactions", both are shown but in the graphical UI, only the earlier one is shown. Heres a screenshot of bitcoin-qt showing just one of the transactions. Heres links to the blocks in question: details of the transactions in question: <pre> jojkaart@mei:~$ bitcoind gettransaction d4def5831b9bccca45d7c66facbcd539c6f094624deecfd6815b997b1a188de3 { "amount" : 0.00000000, "confirmations" : 15, "txid" : "d4def5831b9bccca45d7c66facbcd539c6f094624deecfd6815b997b1a188de3", "time" : 1327511811, "details" : [ { "account" : "", "category" : "immature", "amount" : 0.13328261 } ] } jojkaart@mei:~$ bitcoind gettransaction 4fb458365c6812f95ec65da50efa15723c5a32d74d73b244b91e4227d51ef61f { "amount" : 0.00000000, "confirmations" : 14, "txid" : "4fb458365c6812f95ec65da50efa15723c5a32d74d73b244b91e4227d51ef61f", "time" : 1327511849, "details" : [ { "account" : "", "category" : "immature", "amount" : 0.13326779 } ] } </pre>
783	New install - no existing wallet... I have tried all of them, it fails to start at all. All have the same issue. It shows the splash screen, says Loading addresses.... I let it go for 24 hours, no change. I click on the splash screen, I get a message saying bitcoin-qt.exe is not responding. I select close the program and it does not close. I delete the .lock file, try to start it again, and i get a bluescreen with CACHE_MANAGER on the top. I reboot, delete all the files in the appdata\bitcoin, the process starts over again. splash screen, loading addresses, nothing else. The log file only has these four lines: Bitcoin version 0.5.2-beta Default data directory C:\Users\Administrator\AppData\Roaming\Bitcoin Loading addresses... dbenv.open strLogDir=C:\Users\Administrator\AppData\Roaming\Bitcoin/database strErrorFile=C:\Users\Administrator\AppData\Roaming\Bitcoin/db.log db.log is empty zero byte file.
782	Reported by onlineproof on IRC: Bitcoin does not verify whether private keys and public keys correspond, when loading a wallet.
781	Affects 0.5.0 through 0.5.2 To reproduce: 1. Open Options, Display panel 2. Set "Unit to show amounts in" to "mBTC"; save with OK 3. Exit Bitcoin-Qt completely 4. Start Bitcoin-Qt 5. Everything remembers "mBTC" selection, except for "Recent transaction" on the "Overview" panel, which will show BTC
780	Please do not close until merged or BIP 17 is Rejected.
779	CScript::ExtractAddress is expected to return false for unknown transactions, but instead returns gibberish, at least partly due to detection of the "change" script.
778	Use GetPubKey() instead of GetKey() when looking up public keys by in-the-wallet-bitcoin-address, so addmultisigaddress works correctly with encrypted, locked wallets.
777	
776	Allocation of file blk0001.dat is very inefficient. It produces more than 100 file fragments per minute on Windows XP 32 bit SP3 (NTFS partition). System becomes very slow and sometimes unresponsive. Hard disk activity is very high. I encountered this problem in early versions of the client and it still remains in 0.5.2. Heres screenshot of the fragmentation after 5 minutes of block downloading - see file blk0001.dat. Note that I defragmented this file to one fragment before I ran the client.
775	Wrote this while I was testing CBlockStore, thought I might as well pull request it so that others can use it to test whatever.
774	Correct comment for why the check is unnecessary for coinbases Move testnet check out, to AcceptToMemoryPool where everything else checks it
773	This also removes an un-needed sigops-per-byte check when accepting transactions to the memory pool (un-needed assuming only standard transactions are being accepted). And it only counts P2SH sigops after the switchover date.
772	Hi, here[1] there is no tag 0.5.2. Regards, Carlo [1]
771	From the commitmsg: "Change Bitcoins flow to use a CBlockStore class which net/wallets send/recieve blocks to/from. This commit is designed to not change any bitcoin functionality or operation. Largest changes: * ProcessMessage(s)/SendMessages moved to protocol.cpp * Many globals removed from main.h and abstracted to CBlockStore * Calls to CWallet::AddToWalletIfInvolvingMe no longer block Block verification, resulting in a small, but measureable block verification speed increase. There is still a lot of abstraction to go, but this is a step in the right direction." **This commit is not intended to be merged for 0.6, its targeted for for 0.7.** I just wanted to post it to start getting eyeballs on it as early as possible. ~~In addition, there is a nasty performance bug somewhere that is causing an almost 25% slowdown in block download when downloading a lot of blocks (when downloading from a local tmpfs node to another local tmpfs node, but it is often quicker for smaller sets, say < 5000 blocks). Ive looked at it in valgrind and gprofile and tried changing some possible culprits and havent had any luck tracking it down. _If anyone tracks it down, Ill owe you big time._~~ **Additionally, please mind the removal of cs_main around stuff thats not in main.cpp (esp rpc) and tell me Im wrong to do that.**
770	* My patch for miniupnpc has made it into the latest MacPorts release: * Documentation has been changed appropriately * New pure-Python macdeployqt; leverages all problems with the stock macdeployqt Additional note: All has been tested and works for me.
769	This tightens up the IsStandard() rules so transactions that put extra data in their scriptSigs are considered non-standard.
768	
766	...nfo" This reverts commit 340f0876eabcabefa77588585f7c8f29954dcb48. The data provided by that commit are useless and there is no reason to make the code that much worse by adding yet more globals in a poorly-written way for that info.
765	All previous versions of bitcoin could store some types of invalid transactions in the orphan-transaction list.
764	
762	- Revert to global progress indication (see #753) - fix the Qt GUI build (port IP validation in options to network refactoring)
761	When the bitcoin app first launches, an alert should pop up saying this: "ATTENTION: Stack is innocent" That will be all
760	Raccoon on #bitcoin reports: < Raccoon> thought id point out the up-down associated with the transaction fee is set at 1BTC incriments by default.
759	Adds coinbaseflags, mintime, and curtime to output of getmemorypool. Since users of getmemorypool generate coinbase transactions themselves, they need bitcoind to indicate what should be included in the coinbase data. Mintime and curtime are useful for generating work by changing the timestamp. Without them, P2Pool can only increment the timestamp. With the knowledge of the minimum allowable timestamp, work can be generated symmetrically around the current timestamp, reducing future bias. Generation (without using getmemorypool) tested on testnet:
758	Nothing special, Clear All now has a tooltip just like the rest of GUI and About dialog now has the correct year.
757	Sorry if you find this patch ridiculous. Ill contribute something more substantial when I get more comfortable with the whole process.
756	I tend to leave the Bitcoin client running 24/7 and every so often a new user comes to the network and sucks up all my upload bandwidth causing my entire network to halt, including my miners. Is there anyway to limit the upload speed in the Bitcoin client ? Possibly give a text box to enter a maximum upload kB/s ? Thanks
755	Please dont force people to vote for things they might not want (and shouldnt).
753	I understand the argument for making sync start from zero at restart otherwise most users would only ever see very high numbers, which isnt exactly useful. However, we have a real and obvious usability problem with the current behavior. New users, already frustrated by how long the sync takes shutdown and restart when they get to 80% or whatever, and when they start again it goes to 0. They believe that its going to take 18 hours to sync every startup and they give up in disgust. Sometimes they come and rant at us in IRC, its even difficult to convince them that its not really starting from zero. There are probably a number of ways to handle this, any of them would be better than the current behavior.
752	
750	These should never have been there, bitcoin isnt anonymous without a ton of work that virtually no users will ever be willing and capable of doing.
749	It starts for a little while, appears a splash screen for a brief moment, and then dies. Heres the output on console log: 07/01/12 17.59.25 [0x0-0x59059].com.yourcompany.Bitcoin-Qt[480] The process has forked and you cannot use this CoreFoundation functionality safely. You MUST exec(). 07/01/12 17.59.25 [0x0-0x59059].com.yourcompany.Bitcoin-Qt[480] Break on __THE_PROCESS_HAS_FORKED_AND_YOU_CANNOT_USE_THIS_COREFOUNDATION_FUNCTIONALITY___YOU_MUST_EXEC__() to debug. 07/01/12 17.59.25 [0x0-0x59059].com.yourcompany.Bitcoin-Qt[480] The process has forked and you cannot use this CoreFoundation functionality safely. You MUST exec(). 07/01/12 17.59.25 [0x0-0x59059].com.yourcompany.Bitcoin-Qt[480] Break on __THE_PROCESS_HAS_FORKED_AND_YOU_CANNOT_USE_THIS_COREFOUNDATION_FUNCTIONALITY___YOU_MUST_EXEC__() to debug. 07/01/12 17.59.25 [0x0-0x59059].com.yourcompany.Bitcoin-Qt[480] The process has forked and you cannot use this CoreFoundation functionality safely. You MUST exec(). 07/01/12 17.59.25 [0x0-0x59059].com.yourcompany.Bitcoin-Qt[480] Break on __THE_PROCESS_HAS_FORKED_AND_YOU_CANNOT_USE_THIS_COREFOUNDATION_FUNCTIONALITY___YOU_MUST_EXEC__() to debug. 07/01/12 17.59.26 com.apple.launchd.peruser.501[180] ([0x0-0x59059].com.yourcompany.Bitcoin-Qt[480]) Job appears to have crashed: Bus error 07/01/12 17.59.26 ReportCrash[486] Saved crash report for Bitcoin-Qt[485] version ??? (???) to /Users/looris/Library/Logs/DiagnosticReports/Bitcoin-Qt_2012-01-07-175926_Palace-of-the-Nine-Moons.crash 07/01/12 17.59.26 ReportCrash[486] Saved crash report for Bitcoin-Qt[480] version ??? (???) to /Users/looris/Library/Logs/DiagnosticReports/Bitcoin-Qt_2012-01-07-175926-1_Palace-of-the-Nine-Moons.crash Feel free to ask for more details.
748	This implements BIP 16, the replacement for pay-to-script hash. Tested mostly on testnet-in-a-box, but I did spend time today generating transactions on the testnet as a final sanity test: Testnet block 43561 has 3 Pay-to-script-hash transactions and the /P2SH/ string in its coinbase: The next block has a transaction that spends one of them: Ill be producing/testing backports for miners running old software in the next few days.
746	Make the edit field in transaction description read-only
745	Win7 Pro 64bit. 5.0.1beta After many restarts of computer and client, it just wont download any more blocks. No syncing bar, just the spinning thingo in bottom right corner catching up. 50+ Active Connections.
744	Bitcoin-qt fails on Windows 7 when loading blocks to sync block chain. bitcoind has the same problem see error below. Sometimes it crashes fully, see attached message from windows7 ************************ EXCEPTION: NSt8ios_base7failureE CAutoFile::write : write failed C:\Program Files (x86)\Bitcoin\daemon\bitcoind.exe in ProcessMessage() $ ./bitcoind.exe getinfo { "version" : 50100, "balance" : 0.00000000, "blocks" : 160352, "connections" : 8, "proxy" : "", "generate" : false, "genproclimit" : -1, "difficulty" : 1159929.49722438, "hashespersec" : 0, "testnet" : false, "keypoololdest" : 1325502590, "keypoolsize" : 101, "paytxfee" : 0.00000000, "errors" : "EXCEPTION: NSt8ios_base7failureE \nCAutoFile::write : write failed \nC:\\Program Files (x86)\\Bitcoin\\daemon\\bitcoind.exe in ProcessMessage() \n" } Crash Info Problem signature: Problem Event Name: APPCRASH Application Name: bitcoin-qt.exe Application Version: 0.0.0.0 Application Timestamp: 4d44aa00 Fault Module Name: StackHash_0a9e Fault Module Version: 0.0.0.0 Fault Module Timestamp: 00000000 Exception Code: c0000005 Exception Offset: 063e1bf3 OS Version: 6.1.7601.2.1.0.256.1 Locale ID: 1053 Additional Information 1: 0a9e Additional Information 2: 0a9e372d3b4ad19135b953a78882e789 Additional Information 3: 0a9e Additional Information 4: 0a9e372d3b4ad19135b953a78882e789 Read our privacy statement online: If the online privacy statement is not available, please read our privacy statement offline: C:\Windows\system32\en-US\erofflps.txt
743	This re-implements pull#714, using system() (which does work on Windows) and boost::thread(). Help text is: -blocknotify=&lt;cmd&gt; Execute command when the best block changes (%s in cmd is replaced by block hash) Example usage (this is how I tested): ./bitcoind -blocknotify="./bitcoind getblock %s >> /tmp/blocks.txt"
742	[Here] (https://github.com/bitcoin/bitcoin/blob/master/src/qt/locale/bitcoin_en.ts) I found a typo: see [here] (http://en.wikipedia.org/wiki/Kilobyte#cite_note-0) and [this] (https://gist.github.com/1555936) patch. Regards, Carlo
741	Fix "adress" typo in send coins dialog, also update all translations.
740	I hereby certify that I have greped for ever use of CDataStream and find no case where secure_allocator is necessary. Note that this fix increases blockchain download by gmaxwells estimate of some "1000x faster"
739	Either some way of making dnsseed work correctly with Tor should be found or dnsseed should be disabled when fTor.
738	Makes three critical blocks for cs_mapAddresses smaller, and moves writing to the database out of them. This should also improve the concurrency of the code. Closes #737
737	Node deadlocks sometimes shortly after startup in githead. Appears to happen when a link comes up so fast that AddAddress and DNSSeed happen concurrently. (gdb) bt #0 0x000000301f20b71e in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 #1 0x00007f11b4d790a9 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib64/libboost_thread-mt.so.1.44.0 #2 0x000000000043e702 in sleep (argc=<value optimized out>, argv=<value optimized out>) at /usr/include/boost/thread/detail/thread.hpp:346 #3 Sleep (argc=<value optimized out>, argv=<value optimized out>) at util.h:103 #4 AppInit2 (argc=<value optimized out>, argv=<value optimized out>) at init.cpp:537 #5 0x000000000043f829 in AppInit (argc=<value optimized out>, argv=<value optimized out>) at init.cpp:112 #6 0x000000000043f8c9 in main (argc=<value optimized out>, argv=<value optimized out>) at init.cpp:98 (gdb) thread 0 Thread ID 0 not known. (gdb) thread 1 [Switching to thread 1 (Thread 0x7f11b3a5a800 (LWP 415))]#0 0x000000301f20b71e in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 (gdb) bt #0 0x000000301f20b71e in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 #1 0x00007f11b4d790a9 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib64/libboost_thread-mt.so.1.44.0 #2 0x000000000043e702 in sleep (argc=<value optimized out>, argv=<value optimized out>) at /usr/include/boost/thread/detail/thread.hpp:346 #3 Sleep (argc=<value optimized out>, argv=<value optimized out>) at util.h:103 #4 AppInit2 (argc=<value optimized out>, argv=<value optimized out>) at init.cpp:537 #5 0x000000000043f829 in AppInit (argc=<value optimized out>, argv=<value optimized out>) at init.cpp:112 #6 0x000000000043f8c9 in main (argc=<value optimized out>, argv=<value optimized out>) at init.cpp:98 (gdb) thread 2 [Switching to thread 2 (Thread 0x7f11a57fa700 (LWP 447))]#0 0x000000301f20b3b4 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 (gdb) bt #0 0x000000301f20b3b4 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 #1 0x00007f11b4a055bb in __db_pthread_mutex_lock () from /usr/lib64/libdb_cxx-4.8.so #2 0x00007f11b4a04b72 in __db_tas_mutex_lock () from /usr/lib64/libdb_cxx-4.8.so #3 0x00007f11b4a98984 in __lock_get_internal () from /usr/lib64/libdb_cxx-4.8.so #4 0x00007f11b4a98e02 in __lock_get () from /usr/lib64/libdb_cxx-4.8.so #5 0x00007f11b4ac837e in __db_lget () from /usr/lib64/libdb_cxx-4.8.so #6 0x00007f11b4a22140 in __bam_get_root () from /usr/lib64/libdb_cxx-4.8.so #7 0x00007f11b4a223d5 in __bam_search () from /usr/lib64/libdb_cxx-4.8.so #8 0x00007f11b4a0dda6 in ?? () from /usr/lib64/libdb_cxx-4.8.so #9 0x00007f11b4a121cf in ?? () from /usr/lib64/libdb_cxx-4.8.so #10 0x00007f11b4ab83c9 in __dbc_iput () from /usr/lib64/libdb_cxx-4.8.so #11 0x00007f11b4aba2aa in __dbc_put () from /usr/lib64/libdb_cxx-4.8.so #12 0x00007f11b4aac4ee in __db_put () from /usr/lib64/libdb_cxx-4.8.so #13 0x00007f11b4ac537b in __db_put_pp () from /usr/lib64/libdb_cxx-4.8.so #14 0x00007f11b49fa2db in Db::put(DbTxn*, Dbt*, Dbt*, unsigned int) () from /usr/lib64/libdb_cxx-4.8.so #15 0x000000000042bb32 in bool CDB::Write<std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > >, CAddress>(std::pair<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::vector<unsigned char, std::allocator<unsigned char> > > const&, CAddress const&, bool) () #16 0x0000000000419402 in CAddrDB::WriteAddress (this=0x7f11a57f8a70, addr=...) at db.cpp:620 #17 0x0000000000486689 in AddressCurrentlyConnected (addr=<value optimized out>) at net.cpp:512 #18 0x0000000000467a9c in ProcessMessage (pfrom=0x7f1198001800, strCommand="version", vRecv=<value optimized out>) at main.cpp:2455 #19 0x000000000046b651 in ProcessMessages (pfrom=0x7f1198001800) at main.cpp:2544 #20 0x000000000048747c in ThreadMessageHandler2 (parg=<value optimized out>) at net.cpp:1633 #21 0x000000000048767a in ThreadMessageHandler (parg=0x0) at net.cpp:1598 #22 0x000000301f206ccb in start_thread () from /lib64/libpthread.so.0 #23 0x000000301eee0c2d in clone () from /lib64/libc.so.6 (gdb) thread 3 [Switching to thread 3 (Thread 0x7f11a5ffb700 (LWP 446))]#0 0x000000301f20b71e in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 (gdb) bt #0 0x000000301f20b71e in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 #1 0x00007f11b4d790a9 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib64/libboost_thread-mt.so.1.44.0 #2 0x000000000044118d in Sleep(long long) () #3 0x000000000048b0f2 in ThreadOpenConnections2 (parg=<value optimized out>) at net.cpp:1415 #4 0x000000000048baaa in ThreadOpenConnections (parg=0x0) at net.cpp:1386 #5 0x000000301f206ccb in start_thread () from /lib64/libpthread.so.0 #6 0x000000301eee0c2d in clone () from /lib64/libc.so.6 (gdb) thread 4 [Switching to thread 4 (Thread 0x7f11a67fc700 (LWP 445))]#0 0x000000301f20b71e in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 (gdb) bt #0 0x000000301f20b71e in pthread_cond_timedwait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0 #1 0x00007f11b4d790a9 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib64/libboost_thread-mt.so.1.44.0 #2 0x000000000044118d in Sleep(long long) () #3 0x000000000048a5a7 in ThreadSocketHandler2 (parg=<value optimized out>) at net.cpp:1108 #4 0x000000000048a9ea in ThreadSocketHandler (parg=0x0) at net.cpp:808 #5 0x000000301f206ccb in start_thread () from /lib64/libpthread.so.0 #6 0x000000301eee0c2d in clone () from /lib64/libc.so.6 (gdb) thread 5 [Switching to thread 5 (Thread 0x7f11a77fe700 (LWP 443))]#0 0x000000301f20dc9c in __lll_lock_wait () from /lib64/libpthread.so.0 (gdb) bt #0 0x000000301f20dc9c in __lll_lock_wait () from /lib64/libpthread.so.0 #1 0x000000301f209125 in _L_lock_880 () from /lib64/libpthread.so.0 #2 0x000000301f209008 in pthread_mutex_lock () from /lib64/libpthread.so.0 #3 0x00000000004edfc5 in lock (this=0x7640a0, pszName=<value optimized out>, pszFile=0x5127e3 "net.cpp", nLine=<value optimized out>) at /usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp:53 #4 CCriticalSection::Enter (this=0x7640a0, pszName=<value optimized out>, pszFile=0x5127e3 "net.cpp", nLine=<value optimized out>) at util.cpp:1130 #5 0x00000000004868aa in CCriticalBlock (addr=..., nTimePenalty=<value optimized out>, pAddrDB=0x7f11a77fdd30) at util.h:228 #6 AddAddress (addr=..., nTimePenalty=<value optimized out>, pAddrDB=0x7f11a77fdd30) at net.cpp:451 #7 0x0000000000486f4d in ThreadDNSAddressSeed2 (parg=<value optimized out>) at net.cpp:1286 #8 0x00000000004870ca in ThreadDNSAddressSeed (parg=0x0) at net.cpp:1253 #9 0x000000301f206ccb in start_thread () from /lib64/libpthread.so.0 #10 0x000000301eee0c2d in clone () from /lib64/libc.so.6 (gdb) thread 6 [Switching to thread 6 (Thread 0x7f11a7fff700 (LWP 442))]#0 0x000000301f20dc9c in __lll_lock_wait () from /lib64/libpthread.so.0 (gdb) bt #0 0x000000301f20dc9c in __lll_lock_wait () from /lib64/libpthread.so.0 #1 0x000000301f209125 in _L_lock_880 () from /lib64/libpthread.so.0 #2 0x000000301f209008 in pthread_mutex_lock () from /lib64/libpthread.so.0 #3 0x00000000004edfc5 in lock (this=0x763960, pszName=<value optimized out>, pszFile=0x513a0e "bitcoinrpc.cpp", nLine=<value optimized out>) at /usr/include/boost/interprocess/sync/posix/interprocess_recursive_mutex.hpp:53 #4 CCriticalSection::Enter (this=0x763960, pszName=<value optimized out>, pszFile=0x513a0e "bitcoinrpc.cpp", nLine=<value optimized out>) at util.cpp:1130 #5 0x00000000004accb9 in CCriticalBlock (parg=<value optimized out>) at util.h:228 #6 ThreadRPCServer2 (parg=<value optimized out>) at bitcoinrpc.cpp:2422 #7 0x00000000004ad93a in ThreadRPCServer (parg=0x0) at bitcoinrpc.cpp:2249 #8 0x000000301f206ccb in start_thread () from /lib64/libpthread.so.0 #9 0x000000301eee0c2d in clone () from /lib64/libc.so.6 (gdb) thread 7 [Switching to thread 7 (Thread 0x7f11ad3c5700 (LWP 440))]#0 0x000000301f20e6ed in nanosleep () from /lib64/libpthread.so.0 (gdb) bt #0 0x000000301f20e6ed in nanosleep () from /lib64/libpthread.so.0 #1 0x00007f11b4d79306 in boost::this_thread::sleep(boost::posix_time::ptime const&) () from /usr/lib64/libboost_thread-mt.so.1.44.0 #2 0x000000000041c176 in sleep (parg=0x16188a8) at /usr/include/boost/thread/detail/thread.hpp:346 #3 Sleep (parg=0x16188a8) at util.h:103 #4 ThreadFlushWalletDB (parg=0x16188a8) at db.cpp:995 #5 0x000000301f206ccb in start_thread () from /lib64/libpthread.so.0 #6 0x000000301eee0c2d in clone () from /lib64/libc.so.6 (gdb) thread 8 Thread ID 8 not known.
736	Right now, the %APPDATA\Roaming\Bitcoin folder is about 2GB. I think it would be good if there was a way to configure where Bitcoins information is stored.
735	This introduces CNetAddr and CService, respectively wrapping an (IPv6) address and an IP+port combination. This functionality used to be part of CAddress, which also contains network flags and connection attempt information. These extra fields are however not always necessary. These classes, along with logic for creating connections and doing name lookups, are moved to netbase.{h,cpp}, which does not depend on headers.h. Furthermore, CNetAddr is completely IPv6-ready, though IPv6 functionality is not yet enabled for the application itself.
734	Version 0.5.1-Beta, Windows binary build. Tooltip for the Address Book button to the right of "Pay To:" reads "Choose adress from address book" instead of "Choose address from address book."
733	
731	Not all txes with "from"/"to" field are necessarily IP txes. Check for valid bitcoin address first, if not available, fall back to those user-specified fields. - Also, prepare for OP_EVAL by calling all transactions without bitcoin address "SendToOther"/"RecvFromOther" (IP txes are so rare they can be put together with funky OP_EVAL scripts)
730	See #729
729	Currently in the OP_EVAL processing code you have: if (!EvalScriptInner(stack, subscript, txTo, nIn, nHashType, pbegincodehash, pendcodehash, nOpCount, nSigOpCount, fStrictOpEval, nRecurseDepth++)) The postfix ++ operator returns the unincremented value of the variable. So my understanding is that (1) this doesnt limit the depth of recursive calls and (2) this does limit the number of non-recursive calls you OP_EVAL you have in one script. In particular (1) implies that that Gavins example (why wasnt this tested) of "OP_PUSHDATA {OP_DUP OP_EVAL} OP_DUP OP_EVAL" should run in an infinite loop (though I havent tested this). &lt;rant> More generally, this OP_EVAL is a very large change that clearly hasnt been vetted nearly enough. It took me all of 70 minutes of looking to find this bug. You guys are not ready to implement this. OP_EVAL turns a fundamentally Turing-incomplete langauge with clear termination conditions into what I believe an "in-principle" Turing complete language that is only held in check by hacks (which havent even been implemented properly). You guys need to stop what you are doing and really understand Bitcoin. In particular you should make a proper specification of the existing scripting language, ideally by creating a formal model of the scripting language. *Prove* upper bound on the space and time usage of scripts. Decide what bounds you want to maintain, and only then start defining OP_EVAL, proving that it preserves whatever properties you want your scripting system to have. OP_IF, OP_CODESEPARATOR, OP_EVAL all have the possibility of interacting complicated ways and you cant just hack the scripting language arbitrarily. &lt;/rant>
728	
727	This is designed to work nicely with gettransaction and new blockhash/blockindex information returned in listtransactions; it is modified from the getblock that was in my monitorreceived patch. getblockhash &lt;index&gt; Returns hash of block in best-block-chain at &lt;index&gt;. e.g. getblockhash 0 returns 000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f (genesis block hash) getblock &lt;hash&gt; Returns details of a block with given block-hash. e.g. ./bitcoind getblock $(./bitcoind getblockhash 0) returns the genesis block: { "hash" : "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f", "blockcount" : 0, "version" : 1, "merkleroot" : "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b", "time" : 1231006505, "nonce" : 2083236893, "difficulty" : 1.00000000, "tx" : [ "4a5e1e4baab89f3a32518a88c31bc87f618f76673e2cc77ab2127b7afdeda33b" ], "hashnext" : "00000000839a8e6886ab5951d76f411475428afc90947ee320161bbf18eb6048" }
726	This moves all of the "if running over Tor" logic to one place (in init.cpp). It also fixes issues where settings made in the GUI (like fUseProxy) and stored in the wallet could not be over-ridden in the bitcoin.conf file or command-line, by moving command-line-flag-setting code to after the wallet has been loaded. That also meant moving the "bind to listen port" to after the wallet was loaded, but that should be OK 99.99% of the time because the lock file is still checked early to protect against accidentally running bitcoin twice.
725	Im getting warning in Vidalia running bitcoin through Tor: Your application (using socks4 to port 8333) is giving Tor only an IP address. Applications that do DNS resolves themselves may leak information. Consider using Socks4A (e.g. via privoxy or socat) instead. For more information, please see From a brief chat in #Tor on irc.oftc.net: You can modify your socks code to connect to a hostname (you can use an IP address as hostname without any trouble, if youre using socks5) or you can use socks4a and stuff will also just work I dont know nuthin about SOCKS, but Im hoping somebody else does and can fix this...
724	On overview tab should show in real time the total of Bitcoins already in circulation (Bitcoins generated).
723	
722	Bitcoin version 0.5.1-beta ************************ EXCEPTION: St13runtime_error -rpcssl=1, but bitcoin compiled without full openssl libraries. bitcoin in ThreadRPCServer() terminate called after throwing an instance of std::runtime_error what(): -rpcssl=1, but bitcoin compiled without full openssl libraries. Aborted ec2-user@ip-XX-XXX-XX-XX ~]$ cat .bitcoin/bitcoin.conf rpcallowip=* rpcssl=1 server=1 rpcuser=XXXXXX rpcpassword=XXXXXXX rpctimeout=30 rpcsslciphers=DEFAULT:@STRENGTH related:https://github.com/bitcoin/bitcoin/pull/687
721	This supercedes the first half of pull #556 (the second half was already merged in pull #695), moving the new information (along with other mining-related information) to a new getmininginfo JSON-RPC method (as requested by Gavin). The old information is still in getinfo for compatibility, but is noted as deprecated.
720	
719	This enables miners to manipulate their coinbases. Documented on the [wiki](https://en.bitcoin.it/wiki/Coinbaser). At least Eligius (400 GH/s) and Eclipse (235 GH/s) are already using it, and slush (1.3 TH/s) intends to. Accepted by Gavin for merging in the 0.6 window December 02, 2011.
718	I have gotten several of these with 0.5 qt client. Ive been submitting them to MS, but I dont know if anyone checks on that. Here is the copy pasta from the error report. Thanks for all your previous and ongoing work. Problem signature: Problem Event Name: APPCRASH Application Name: bitcoin-qt.exe Application Version: 0.0.0.0 Application Timestamp: 4d44aa00 Fault Module Name: bitcoin-qt.exe Fault Module Version: 0.0.0.0 Fault Module Timestamp: 4d44aa00 Exception Code: 40000015 Exception Offset: 00c88098 OS Version: 6.1.7601.2.1.0.256.48 Locale ID: 1033 Additional Information 1: ab9a Additional Information 2: ab9a49250287dc400f9fb01884665d59 Additional Information 3: 6186 Additional Information 4: 6186ebe04a8ada4fd32e023151385964
717	
716	Several miscellaneous code cleanups: + Removed all mention of BORLAND_C : we dont (and never have, as far as I know) support that compiler. + All modern C++ compilers support long long for 64-bit integers, so removed the windows #ifdefs + Replaced all occurrences of INT_MAX/etc with the typesafe std::numeric_limits<> methods + Replaced a constant 10,000-byte buffer with a properly ECDSA_sizeed vector (and removed a memcpy)
715	... by sending the correct codebase name of Satoshi and, if PUBLIC_CLIENT_NAME is defined, the front-end name after that
714	This supercedes pull request #555 in a more flexible manner, including Windows support. To get the same behaviour as: -blknotifypidfile=/path/to/some.pid Now you do: -blocknotify=kill -USR1 $(</path/to/some.pid)" You can also use this with multiple pidfiles on the command line, or with cURL to issue a web request.
713	I would like to see an option to switch between languages on the GUI.
712	Raise the connection limit by 10 for local P2P connections, preventing P2Pool and testing efforts from being affected by the global connection limit.
711	On 0.4 error shows EXCEPTION: 9key_error CKey::SetSecret() : secret must be 32 bytes bitcoin in CMyApp::OnExceptionInMainLoop() On 0.5 no error just quits
710	1- I would like to see a tab showing total of connected nodes, broken down by country. 2- On the same tab could show the date that more nodes was connected on the network and how many.
709	Add sipa and my DNS seeds
708	GitHub fail. It screwed up the pull req while merging updates from master... sigh
707	This replaces VERSION with PROTOCOL_VERSION (defined in serialize.h) and CLIENT_VERSION (defined in main.h). I also define CLIENT_NAME as either "bitcoind" or "bitcoin-qt" in main.h. The getinfo() RPC command returns CLIENT_VERSION as "version" (same as before) and PROTOCOL_VERSION as "protocolversion" (new). CLIENT_VERSION is recorded in the wallet.dat as "version". And PROTOCOL_VERSION is used for all the network serialization stuff. There is a TODO here related to the CAlert feature, but doing it will require more thought/work. And Ive got another change to CAlert (give testnet its own alert keypair) thatll be a good time to change it. I decided against new command-line arguments / bitcoin.conf options to make it really easy to override the CLIENT_NAME or CLIENT_VERSION reported to peers; those would be easy-to-add-later features.
706	
705	This merges (including conflict resolution) various pulls ACKd for 0.6: * #677: API: GetMinFee modes * #569: Coinbaser * #669: Multisignature and OP_EVAL support * #629: QR Code generation via libqrencode * #582: Bitcoin-Qt signmessage GUI
704	
703	[Ver: bitcoin-0.5.1-win32] [OS: Windows 7 SP1 x64] Steps to reproduce: 1. Right-click on bitcoin icon in tray 2. Left-click on desktop (or at any window except bitcoin) Result: Context menu remains open Expected: Context menu is hided
702	[Ver: bitcoin-0.5.1-win32] [OS: Windows 7 SP1 x64] Passing --help or -? to bitcoin-qt.exe gives nothing (no message box, no output to console) > D:\Bitcoin>bitcoin-qt.exe -? > > D:\Bitcoin>bitcoin-qt.exe --help > > D:\Bitcoin>
701	Reported in IRC: menus start with amp:
700	May not be the best way to do it, but its simple and it works.
699	Most Qt programs do this, and it can be useful to find out what version of Qt was built against for bug reports.
698	Trivial fix for passphrase dialog. - Enable wordwrap for long message in passphrase dialog - Remove explicit resizing from constructor to prevent potential hang/disappearance of window
697	This should fix once translations are updated to reflect this change.
696	Output of "bitcoin-qt --help" from the SF 0.5.0 release on a german system: ``` Bitcoin Version 0.5.0.1-beta Verwendung: bitcoin [options] bitcoin [options] <command> [params] Sende Befehl an -server oder bitcoind bitcoin [options] help Befehle auflisten bitcoin [options] help <command> Hilfe fr Befehl erhalten Einstellungen: -conf=<file> Bitte whlen Sie eine Konfigurationsdatei (Standard: bitcoin.conf) -pid=<file> Bitte whlen Sie den Namen der PID Datei (Standard bitcoind.pid) -gen Erarbeite Bitcoins -gen=0 Keine Bitcoins erarbeiten -min minimiert starten -datadir=<dir> Bitte whlen Sie das Datenverzeichnis -timeout=<n> Netzwerkverbindungsabbruch nach (in Millisekunden) -proxy=<ip:port> Durch SOCKS4-Proxy verbinden -dns Erlaube DNS Namensauflsung fr addnode und connect -addnode=<ip> Bitcoin Knoten hinzufgen -connect=<ip> Nur zu angegebenen Knoten verbinden -nolisten Keine externen Transatkionen akzeptieren -banscore=<n> Threshold for disconnecting misbehaving peers (default: 100) -bantime=<n> Number of seconds to keep misbehaving peers from reconnecting (default: 86400) -noupnp UPnP nicht verwenden -paytxfee=<amt> Gebhr pro KB, die gesendeten Transaktionen hinzugefgt wird -daemon Als Hintergrunddienst starten und Befehle akzeptieren -testnet Das Test Netzwerk verwenden -rpcuser=<user> Benutzername fr JSON-RPC Verbindungen -rpcpassword=<pw> Passwort fr JSON-RPC Verbindungen -rpcport=<port> Port fr JSON-RPC Befehle (Standard: 8332) -rpcallowip=<ip> JSON-RPC Befehle nur von dieser IP-Adresse erlauben -rpcconnect=<ip> Befehle an Bitcoin Knoten <ip> senden (Standard: 127.0.0.1) -keypool=<n> Menge der vorgenerierten Adressen (Standard: 100) -rescan Blockkette nach verlorenen Transaktionen durchsuchen (rescan) -? Dieser Hilfetextme@mymachine ~> ``` Note that "me@mymachine ~>" at the end is supposed to be the shells prompt. As you can see, quite a few of the newlines at the end of the descriptions are missing. This doesnt happen with the english version.
695	This is only the second part of "txinfo", which is ACKd.
694	
693	- In a previous patch, show() was added to all the page switcher functions. As the constructor calls showOverviewPage(), this means the window is shown in the constructor. - This change prevents this by connecting show() to the signal instead. Overall functionality remains the same.
692	"Minimize to tray" configuration option has really strange behavior on Ubuntu 11.10: * When minimize is clicked, the window disappears (as expected) * After that, if the tray icon is clicked in the notification area and "Open bitcoin" is selected to bring it back, the window does not come back; a bitcoin icon is added to the unity bar (on the left) though * Clicking on this icon on the unity bar does nothing * However, after switching focus to another program, the icon on the unity bar does bring the Bitcoin main window back "Minimize on close" does work as expected. Clicking the "x" hides the window, and the tray icon can bring it back instantly. BTW a pet peeve of mine is that these separate options are pretty confusing. Do we really them need both? It seems that most programs with similar background functionality implement "Minimize to tray on close".
691	If the "minimize to tray"-option is in effect, and the Qt GUI is started with the "-min" option, the main window will not be recoverable from the tray icon by double clicking it. This is only the case if the main window is minimized to the tray in the start-up phase (by running window.showMinimized() in qt/bitcoin.cpp:main()). After the main window has been shown for the first time (in a minimized state), minimizing to the tray works again. This relates to pull request #679.
690	To be able to not show the splash screen when the "-min" option is specified on the command line, we need to parse the command line options in Qts main() function, before AppInit2(). This is also useful if we want to be able to override system language settings using a command line option (#678).
689	If you receive coins via two or more addresses in the same wallet, where the coins originate from the same sendmany transaction, the sum total of the coins will be attributed to the first receiving address and the others wont show up. To reproduce: 1. Set up testnet in a box 2. Start bitcoin-qt pointing at datadir 1 (instance 1) 3. Start bitcoin-qt pointing at datadir 2 (instance 2) 4. In instance 2, create 2 new receiving addresses labeled Address A and Address B 5. In instance 1, create a new transaction sending 1 BTC to Address A. Click "Add Recipient" and add a second payment sending 2 BTC to Address B. Send the payment. 6. In instance 2, it will display that you received 3 BTC via Address A, and Address B will not show up anywhere.
688	I made a first build of Bitcoin for Fedora, fully featured through included OpenSSL. fyi
687	Someone (me) forgot to enable RPCSSL in gitian builds...
686	Allow mining of min-difficulty blocks if 20 minutes have gone by without mining a regular-difficulty block. Normal rules apply every 2016 blocks, though, so there may be a very-slow-to-confirm block at the difficulty-adjustment blocks (once per month, assuming testnet is in its normal "difficulty too high for number of people mining it" state). This will almost certainly cause a testnet blockchain split after Jan 15. Ill update the Testnet Faucet, Ill ask theymos if he can update the testnet block explorer bitcoind. (date slipped from Jan 1 to Feb 15)
685	bitcoin/src/qt/locale/bitcoin_zh_CN.ts
684	After bitcoind starts, it doesnt listen on rpcport for quite a while (presumably until it synchronizes with the network).
683	Implements issue #657, and part 1 of issue #648 * TransactionView: Copy amount to clipboard * AddressTablePage: Copy label, address to clipboard, edit * Also, unify similar code related to copying table fields to clipboard
682	
681	Im following the Windows build instructions in readme-qt.rst Firstly, Ive added "USE_UPNP=-" to the qmake additional arguments, as it appears to be on by default. Secondly, Im stuck with a missing reference to several functions. Any suggestions? ``` g++ -c -g -frtti -fexceptions -mthreads -fdiagnostics-show-option -Wall -Wno-strict-aliasing -Wno-invalid-offsetof -Wno-unused-variable -Wno-unused-parameter -Wno-sign-compare -Wno-char-subscripts -Wno-unused-value -Wno-sequence-point -Wno-parentheses -Wno-unknown-pragmas -Wno-switch -DUNICODE -DQT_LARGEFILE_SUPPORT -DQT_GUI -DBOOST_THREAD_USE_LIB -DWIN32 -DQT_DLL -DQT_GUI_LIB -DQT_CORE_LIB -DQT_HAVE_MMX -DQT_HAVE_3DNOW -DQT_HAVE_SSE -DQT_HAVE_MMXEXT -DQT_HAVE_SSE2 -DQT_THREAD_SUPPORT -DQT_NEEDS_QMAIN -I"..\..\..\svnroot\QtSDK\Desktop\Qt\4.7.4\mingw\include\QtCore" -I"..\..\..\svnroot\QtSDK\Desktop\Qt\4.7.4\mingw\include\QtGui" -I"..\..\..\svnroot\QtSDK\Desktop\Qt\4.7.4\mingw\include" -I"..\source\src" -I"..\source\src\json" -I"..\source\src\qt" -I"..\..\..\svnroot\QtSDK\Desktop\Qt\4.7.4\mingw\include\ActiveQt" -I"build" -I"build" -I"." -I"..\..\..\svnroot\QtSDK\Desktop\Qt\4.7.4\mingw\mkspecs\win32-g++" -o build\qrc_bitcoin.o debug\qrc_bitcoin.cpp g++ -mthreads -Wl,-subsystem,windows -o debug\bitcoin-qt.exe object_script.bitcoin-qt.Debug -L"g:\svnroot\QtSDK\Desktop\Qt\4.7.4\mingw\lib" -lmingw32 -lqtmaind build\bitcoin-qt_res.o -lws2_32 -lgdi32 -lssl -lcrypto -ldb_cxx -lboost_system-mgw44-mt-1_43 -lboost_filesystem-mgw44-mt-1_43 -lboost_program_options-mgw44-mt-1_43 -lboost_thread-mgw44-mt-1_43 -lQtGuid4 -lQtCored4 -LC:\OpenSSL-Win32_full\lib mingw32-make[1]: Leaving directory `G:/svnRoot/bitcoin/bitcoin-qt-build-desktop-Qt_4_7_4_for_Desktop_-_MinGW_4_4__Qt_SDK__Debug g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0xee0): undefined reference to `CreateDCA@16 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0xeef): undefined reference to `CreateCompatibleDC@4 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0xf08): undefined reference to `GetDeviceCaps@8 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0xf23): undefined reference to `GetDeviceCaps@8 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0xf44): undefined reference to `CreateCompatibleBitmap@12 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0xf5b): undefined reference to `SelectObject@8 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0xf7e): undefined reference to `GetObjectA@12 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0x1024): undefined reference to `BitBlt@36 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0x103b): undefined reference to `GetBitmapBits@12 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0x10b0): undefined reference to `SelectObject@8 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0x10bb): undefined reference to `DeleteObject@4 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0x10c8): undefined reference to `DeleteDC@4 g:/svnroot/qtsdk/mingw/bin/../lib/gcc/mingw32/4.4.0/../../../libcrypto.a(rand_win.o):rand_win.c:(.text+0x10d5): undefined reference to `DeleteDC@4```
680	Fresh install of Bitcoin 0.5.0-win32-setup.exe. Bitcoin-qt.exe crashed on splash screen OS is Win7 x64 SP1. Crash is repeatable. Exception : Unhandled exception at 0x76549966 in bitcoin-qt.exe: 0xC0000005: Access violation reading location 0x026d06bc. Stack from VS2010 JIT debugger : > msvcrt.dll!76549966() [Frames below may be incorrect and/or missing, no symbols loaded for msvcrt.dll] bitcoin-qt.exe!006914b9() bitcoin-qt.exe!0067013a() bitcoin-qt.exe!005df188() bitcoin-qt.exe!005eaf32() msvcrt.dll!7654b169() bitcoin-qt.exe!005a1d7e() bitcoin-qt.exe!00596117() bitcoin-qt.exe!0047f8e9() bitcoin-qt.exe!00480780() bitcoin-qt.exe!0045fb34() msctf.dll!752e1896() bitcoin-qt.exe!0134aebc() bitcoin-qt.exe!0099f6f9() msvcrt.dll!76549d45() msvcrt.dll!765498da() msvcrt.dll!765498da() bitcoin-qt.exe!0100e026() msvcrt.dll!765498cd() msvcrt.dll!765498da() msvcrt.dll!7655161e() msvcrt.dll!765515a0() bitcoin-qt.exe!006d006f() bitcoin-qt.exe!0073006f() bitcoin-qt.exe!0073006f() bitcoin-qt.exe!0073006f() bitcoin-qt.exe!00660061() bitcoin-qt.exe!00620064() bitcoin-qt.exe!0073006f() bitcoin-qt.exe!0073006f()
679	The -min command line option, according to the help text, is supposed to start bitcoin minimized. This pull request implements this functionality again. See issue #671.
678	We cant force the client to use the english version. Up until version 0.4 it was possible to rename the directory containing the translations. Thats no longer possible.
677	This replaces the fForRelay flag in the GetMinFee function with an enum mode parameter (GMF_{BLOCK,RELAY,SEND}), to allow more fine-tuned fee rules. The end goal is an API for allowing users to customize their fee schedules.
676	This change is useful for programs that might send payments to pubkeys, such as P2Pool. Currently, the only way to do this is to require the user to enable IP transactions and then use the "checkorder" bitcoin P2P command. However, checkorder may be removed and using it is very clumsy. Background: Using public keys wherever they can be used is good for the bitcoin network. The total size of a txout and claim txin is smaller when using them, as the pubkey hash is never included and there are several less opcodes.
675	bitcoin-0.5.0-src.tar.gz is not available at (I think sf is the main place for sources file, am I right?)
674	when compiling on the mac I get the following two errors in qt creator: ld: symbol(s) not found for architecture x86_64 collect2: ld returned 1 exit status I am on MacOSX10.7.1, iMac
673	Storing fewer time samples makes a nodes time offset more accurate following system clock adjustments, uses less memory and avoids a possible memory exhaustion attack. The only part of this patch Im not entirely pleased with is the choice of 200 as the limit. In my tests, thats roughly two hours of network activity. I chose two hours because it seemed about right, but have no rational basis for the decision.
672	bitcoin-qt crashes right after startup somewhere in db. Backtrace: <pre> Program received signal SIGSEGV, Segmentation fault. 0x00007ffff7384a56 in __txn_begin (env=0x8ce3a0, ip=<optimized out>, parent=0xa89ad0, txnpp=0x7fffffffbaf0, flags=<optimized out>) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../txn/txn.c:220 in /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../txn/txn.c #0 0x00007ffff7384a56 in __txn_begin (env=0x8ce3a0, ip=<optimized out>, parent=0xa89ad0, txnpp=0x7fffffffbaf0, flags=<optimized out>) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../txn/txn.c:220 dbenv = <optimized out> region = <optimized out> txn = 0xaa4500 ptd = 0x7fffe9b49220 td = 0x7fffe9b49380 ret = 0 #1 0x00007ffff735b678 in __fop_file_setup (dbp=0x945c50, ip=0x0, txn=0xa89ad0, name=0x5a441e "addr.dat", mode=432, flags=8209, retidp=0x7fffffffbbe0) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../fileops/fop_util.c:523 save_type = <optimized out> fhp = 0x0 elock = {off = 0, ndx = 9789, gen = 0, mode = DB_LOCK_WRITE} locker = 0x7fffe9ffd040 stxn = 0x0 env = 0x8ce3a0 len = 4294967296 dflags = 0 oflags = 0 mbuf = "\356\001\377\023\000\000\000\000.S\336\367\377\177\000\000.bitcoinLK\336\367\377\177\000\000`\272\377\377\377\177\000\000\004\000\000\000\000\000\000\000)\000\000\000\000\000\000\000\240\306\372\367\377\177\000\000W\343f\036\000\000\000\000.S\336\367\377\177\000\000\340\342#\367\377\177\000\000\027\000\000\000\377\177\000\000\240\272\377\377\377\177\000\000\215\233y\000\000\000\000\000@\241#\367\377\177\000\000\200\251#\367\377\177\000\000(v$\367\377\177\000\000\340\342#\367\377\177\000\000\300D$\367\377\177\000\000d\002\000\000\001", \000 <repeats 11 times>, " \314\372\367\377\177\000\000\270\231\373\367\377\177\000\000\343\b%\367\377\177\000\000(v$\367\377\177\000\000\300D$\367\377\177\000\000\000\000\000\000\001\000\000\000x\006\000\000\001", \000 <repeats 11 times>, "\020\235\373\367\377\177\000\000\340\272\377\377\377\177\000\000 \314\372\367\377\177\000\000\b\273\377\377\377\177\000\000W\343f\036\000\000\000\000\270\231\373\367\377\177\000\000\064V\336\367\377\177\000\000\000\000\000\000\000\000\000\000"... created_locker = 1 create_ok = 1 ret = <optimized out> retries = <optimized out> t_ret = <optimized out> tmp_created = 0 was_inval = 0 real_name = 0xa86770 "/home/USER/.bitcoin/addr.dat" real_tmpname = 0x0 tmpname = 0xaa7b20 "__db.80000001.ce781d07" #2 0x00007ffff7332a33 in __db_open (dbp=0x945c50, ip=0x0, txn=0xa89ad0, fname=0x5a441e "addr.dat", dname=0x0, type=DB_BTREE, flags=8209, mode=0, meta_pgno=0) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_open.c:177 tdbp = 0x7ffff7332404 env = 0x8ce3a0 ret = <optimized out> id = 0 #3 0x00007ffff7313941 in __db_master_open (subdbp=0x9456f0, ip=0x0, txn=0xa89ad0, name=0x5a441e "addr.dat", flags=8209, mode=0, dbpp=0x7fffffffbce0) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db.c:114 dbp = 0x945c50 ret = <optimized out> #4 0x00007ffff735a979 in __fop_subdb_setup (dbp=0x9456f0, ip=0x0, txn=0xa89ad0, mname=<optimized out>, name=0x5a4404 "main", mode=<optimized out>, flags=17) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../fileops/fop_util.c:740 mdbp = 0x0 env = 0x8ce3a0 lkmode = <optimized out> ret = <optimized out> t_ret = <optimized out> #5 0x00007ffff7332cd4 in __db_open (dbp=0x9456f0, ip=0x0, txn=0xa89ad0, fname=0x5a441e "addr.dat", dname=0x5a4404 "main", type=DB_BTREE, flags=17, mode=0, meta_pgno=0) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_open.c:186 tdbp = 0x7ffff7df03b5 env = 0x8ce3a0 ret = <optimized out> id = 0 #6 0x00007ffff732d1d6 in __db_open_pp (dbp=0x9456f0, txn=0xa89ad0, fname=0x5a441e "addr.dat", dname=0x5a4404 "main", type=DB_BTREE, flags=17, mode=0) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../db/db_iface.c:1147 ip = 0x0 env = 0x8ce3a0 handle_check = <optimized out> nosync = 1 remove_me = 0 ret = <optimized out> t_ret = <optimized out> txn_local = 1 #7 0x00007ffff7269939 in Db::open (this=0xa83380, txnid=0x0, file=0x5a441e "addr.dat", database=0x5a4404 "main", type=<optimized out>, flags=<optimized out>, mode=0) at /var/tmp/portage/sys-libs/db-4.8.30/work/db-4.8.30/build_unix/../dist/../cxx/cxx_db.cpp:320 ret = 11158784 db = 0x9456f0 #8 0x000000000049e457 in CDB::CDB (this=0x7fffffffc0e0, pszFile=0x5a441e "addr.dat", pszMode=<optimized out>) at src/db.cpp:118 criticalblock = {pcs = 0x8c93e0} fcriticalblockonce = true ret = <optimized out> fCreate = true nFlags = 17 #9 0x000000000049ec37 in CAddrDB (pszMode=0x5a966a "cr+", this=0x7fffffffc0e0) at src/db.h:303 No locals. #10 LoadAddresses () at src/db.cpp:668 No locals. #11 0x000000000048a370 in AppInit2 (argc=<optimized out>, argv=0x7fffffffd5c8) at src/init.cpp:342 strLockFile = "/home/USER/.bitcoin/.lock" strErrors = "" nLoadWalletRet = <optimized out> sa = {__sigaction_handler = {sa_handler = 0x4880e0 <HandleSIGTERM(int)>, sa_sigaction = 0x4880e0 <HandleSIGTERM(int)>}, sa_mask = {__val = {0 <repeats 16 times>}}, sa_flags = 0, sa_restorer = 0} fTOR = <optimized out> file = <optimized out> lock = {m_file_hnd = 15} nStart = 1322778161430 fFirstRun = 127 pindexRescan = <optimized out> #12 0x0000000000427184 in main (argc=1, argv=0x7fffffffd5c8) at src/qt/bitcoin.cpp:158 app = <incomplete type> lang = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 440}, alloc = 0, size = 0, data = 0x8c76fa, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 7}, alloc = 0, size = 0, data = 0x7ffff5ab58ba, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x98ba70, static codecForCStrings = 0x8eadc0} qtTranslatorBase = <incomplete type> translator = <incomplete type> lang_territory = {static null = {<No data fields>}, static shared_null = {ref = {_q_value = 440}, alloc = 0, size = 0, data = 0x8c76fa, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, static shared_empty = {ref = {_q_value = 7}, alloc = 0, size = 0, data = 0x7ffff5ab58ba, clean = 0, simpletext = 0, righttoleft = 0, asciiCache = 0, capacity = 0, reserved = 0, array = {0}}, d = 0x9b5800, static codecForCStrings = 0x8eadc0} qtTranslator = <incomplete type> translatorBase = <incomplete type> splash = <incomplete type> </pre> emerge --info: <pre> Portage 2.2.0_alpha79 (default/linux/amd64/10.0/desktop/kde, gcc-4.6.2, glibc-2.14.1-r0, 3.1.1-gentoo x86_64) ================================================================= System uname: Linux-3.1.1-gentoo-x86_64-AMD_Athlon-tm-_64_X2_Dual_Core_Processor_5000+-with-gentoo-2.1 Timestamp of tree: Thu, 01 Dec 2011 21:45:01 +0000 distcc 3.2rc1 x86_64-pc-linux-gnu [disabled] app-shells/bash: 4.2_p20 dev-java/java-config: 2.1.11-r3 dev-lang/python: 2.7.2-r3, 3.2.2 dev-util/cmake: 2.8.6-r4 dev-util/pkgconfig: 0.26 sys-apps/baselayout: 2.1 sys-apps/openrc: 0.9.4 sys-apps/sandbox: 2.5 sys-devel/autoconf: 2.13, 2.68 sys-devel/automake: 1.9.6-r3, 1.10.3, 1.11.1-r1 sys-devel/binutils: 2.22 sys-devel/gcc: 4.6.2 sys-devel/gcc-config: 1.5-r2 sys-devel/libtool: 2.4.2 sys-devel/make: 3.82-r3 sys-kernel/linux-headers: 2.6.39 (virtual/os-headers) sys-libs/glibc: 2.14.1 Repositories: gentoo kde sunrise bitcoin local Installed sets: ACCEPT_KEYWORDS="amd64 ~amd64" ACCEPT_LICENSE="* -@EULA" CBUILD="x86_64-pc-linux-gnu" CFLAGS="-pipe -O2 -march=athlon64-sse3 -ftree-vectorize" CHOST="x86_64-pc-linux-gnu" CONFIG_PROTECT="/etc /usr/share/config /usr/share/gnupg/qualified.txt /usr/share/themes/oxygen-gtk/gtk-2.0 /var/lib/neatx/home" CONFIG_PROTECT_MASK="/etc/ca-certificates.conf /etc/env.d /etc/env.d/java/ /etc/fonts/fonts.conf /etc/gconf /etc/gentoo-release /etc/php/apache2-php5.4/ext-active/ /etc/php/cgi-php5.4/ext-active/ /etc/php/cli-php5.4/ext-active/ /etc/revdep-rebuild /etc/sandbox.d /etc/terminfo /etc/texmf/language.dat.d /etc/texmf/language.def.d /etc/texmf/updmap.d /etc/texmf/web2c" CXXFLAGS="-pipe -O2 -march=athlon64-sse3 -ftree-vectorize" DISTDIR="/var/cache/portage/distfiles" EMERGE_DEFAULT_OPTS="--depclean-lib-check n --with-bdeps y --keep-going" FEATURES="assume-digests binpkg-logs distlocks ebuild-locks fixlafiles news parallel-fetch preserve-libs protect-owned sandbox sfperms strict unknown-features-warn unmerge-logs unmerge-orphans userfetch userpriv usersandbox usersync" FFLAGS="" GENTOO_MIRRORS="ftp://linux.rz.ruhr-uni-bochum.de/gentoo-mirror/ ftp://linux.rz.ruhr-uni-bochum.de/gentoo-mirror/ LANG="en_GB.UTF-8" LDFLAGS="-Wl,-O1 -Wl,--as-needed -Wl,--hash-style=gnu -Wl,--hash-style=gnu" LINGUAS="de" MAKEOPTS="-j3" PKGDIR="/var/cache/portage/packages" PORTAGE_COMPRESS="xz" PORTAGE_CONFIGROOT="/" PORTAGE_RSYNC_OPTS="--recursive --links --safe-links --perms --times --compress --force --whole-file --delete --stats --timeout=180 --exclude=/distfiles --exclude=/local --exclude=/packages" PORTAGE_TMPDIR="/var/tmp" PORTDIR="/var/cache/portage/gentoo" PORTDIR_OVERLAY="/var/cache/portage/layman/kde /var/cache/portage/layman/sunrise /var/cache/portage/layman/bitcoin /var/cache/portage/local" Unset: CPPFLAGS, CTARGET, INSTALL_MASK, LC_ALL, PORTAGE_BUNZIP2_COMMAND, PORTAGE_COMPRESS_FLAGS, PORTAGE_RSYNC_EXTRA_OPTS </pre>
671	I like to have Bitcoin start when my computer starts up, so it can just sit in the background and relay transactions whenever my computer is on. For this purpose the "Start minimized"-option is really useful, but it doesnt work for me. With the option passed on the command-line, first the splash screen appears and then the normal window. Just as when the option is left out. Im using version 0.5.0.1-beta of Bitcoin and running Ubuntu Natty (11.04). Im using Qt version 4:4.7.2-0ubuntu6.3 from the standard repositories in Ubuntu Natty. Compiz (0.9.4) is my window manager and Im running GNOME (2.32.1).
670	Caches rpc username and password in static vars, to avoid the overhead of a lookup into mapArgs. Mining pools that handle a lot of getwork calls like this. Note: I also did a quick benchmark of using a boost::unordered_map for mapArgs instead of a std::map, but unordered_map was slightly slower.
669	This implements BIPS 11, 12, and 13 : * OP_CHECKMULTISIG transactions supported, for up to 3 public keys, as standard transactions * OP_EVAL (same opcode as OP_NOP1) as a new opcode * New OP_EVAL-based standard transaction type and Bitcoin address * Blocks mined with this patch will have the string "OP_EVAL" in the coinbase scriptSig, so we can tell when a majority of miners support it. * New RPC command to add a multisignature-required address to the wallet: addmultisigaddress &lt;nrequired&gt; &lt;["key1",...]&gt; &#91;account&#93; (enabled only for use on the -testnet for now) * The validateaddress RPC command shows the full public key of addresses in your wallet * Internal changes so if you own all the private keys of a multisignature transaction, then you are able to spend the transaction (and the amount shows up in your balance, and the transaction is listed in listtransactions output) There is still a lot of work to be done to get multi-device transaction authorization or multi-party escrow; in particular, this pull doesnt include any support for gathering transaction signatures from multiple places or showing the user transactions that they are involved in but cant spend without getting more signatures from other devices/people. It just implements the lowest-level support, along with the bare minimum needed to test to make sure the lowest-level stuff is working properly. To test / play with: 1. Run bitcoind -daemon -testnet 2. Get public keys from 2 or 3 new bitcoin addresses-- e.g. run this twice: ./bitcoind -testnet validateaddress $(./bitcoind getnewaddress) 3. Generate a new multisignature address using the public keys from validateaddress-- ./bitcoind addmultisigaddress 2 ["...public_key_1...","...public_key_2..."] 4. Send funds to that address -- ./bitcoind sendtoaddress ...result of addmultisigaddress... 11.11 Step (4) can be done from another ./bitcoind, either on another machine or same machine, different -datadir, as long as it is running this patch. The coins should show up in the wallet, be listed in listransactions, and you should be able to spend them as if they were single-signature transactions. Step (2) could be done on two or three different machines, but without more work youll have no way to spend coins sent to the resulting multisignature address.
668	If you select an address with the -connect command line parameter it isn,t "AddAddress"ed before connecting to it. For -addnode nodes there is a block of code that does it in init.cpp::AppInit2(int argc, char* argv[]) around line 470. In net.cpp::ConnectNode(CAddress addrConnect, int64 nTimeout) then a funny thing happen: CRITICAL_BLOCK(cs_mapAddresses) mapAddresses[addrConnect.GetKey()].nLastTry = GetAdjustedTime(); Here an "empty" address is created in mapAddresses with only nLastTry correctly valued. You can check it by changing the code to something like CRITICAL_BLOCK(cs_mapAddresses) { if (mapAddresses.count(addrConnect.GetKey()) == 0) { printf("*** Missing address in mapAddresses: "); addrConnect.print(); mapAddresses[addrConnect.GetKey()].nLastTry = GetAdjustedTime(); printf("*** Now the address in mapAddresses is "); mapAddresses[addrConnect.GetKey()].print(); } else { mapAddresses[addrConnect.GetKey()].nLastTry = GetAdjustedTime(); } }
667	* Make home icon blue and flip light gradient direction * Make address book blue
666	This finishes a TODO comment: // TODO: mlock memory / munlock on return so they will not be swapped out, really need "mlockedstring" wrapper class to do this safely SecureString is identical to std::string except with secure_allocator substituting for std::allocator. This makes casting between them impossible, so converting between the two at API boundaries requires calling ::c_str() for now. The lack of implicit casting between the two was a big advantage in making this patch thorough, since the build would break if not all the prototypes were updated. So it should also be a feature in making sure implicit casts (meaning gratuitous copies into non-locked memory) arent accidentally introduced in the future. Passphrases are now only copied from non-locked memory in askpassphrasedialog.cpp (from Qts QLineEdit / QString) and in bitcoinrpc.cpp (from whatever library is providing Array; I couldnt tell).
665	Currently bitcoind sends its debug logs into ~/.bitcoind/debug.log. When running bitcoind under a process supervisor like daemontools or runit, it is much more convenient to have bitcoind simply spit out any logging messages on its own stdout or stderr; the process supervisor will collect them and send them to the right place. Could we please have a command-line switch that causes any and all debug information to be printed on the console rather than sent to a file? Thanks!
663	See issue #659
662	
661	Yep, cant see what the fees will be...
660	My wallet.dat is a symbolic link to a directory which is not automatically mounted. If I forget to mount this directory before starting bitcoin, it will overwrite the broken link by a new wallet.dat. I would expect it to display an error message, like "corrupt wallet" or something, that would remember me of mounting the target directory.
659	I noticed that my bitcoin client was getting too many connections (> 70), whats weird since I had put it behind Tor (I dont want anyone linking my IP to my transactions). I ran a "netstat -ap | grep bitcoin" and saw that bitcoin was bypassing my proxy configuration, opening my local port 8333 and accepting incoming connections on it. Whats more troubling is that, not only it is listening when it should not, but it must be giving away my IP somehow, since all these other peers would not find me otherwise - they would try to connect to the exit-nodes, in vain. Maybe its accessing the IRC bootstrap channel without using the proxy? Im using version 0.5 now. I had not noticed such behavior before, so it is a regression, but I cant tell which version introduced it.
658	Updated from 0.4 to 0.5.0. Update went fine. It re-encrypted my wallet (with a restart as expected I believe) and properly showed my wallet. Then overnight when mining.bitcoin.cz hit my threshold and sent out a reward my BC QT 0.5.0 client crashed (sorry but I deleted the crash report in OSX). Now I restarted BC QT but it had to completely resync with the P2P network and is now (6 hours later) hung up and not resyncronizing. My wallet shows zero balance. If I can reproduce I will report the crash log here. OK? OK.
657	When on the transactions tab, it would be nice when right clicking a transaction, to be given the option to copy the net amount to the clipboard.
656	When in the Options (on Windows 7x64), when checking "Start Bitcoin on windows system startup" and then hitting Apply. Theres a slight locking up of the program, then the box becomes unchecked. Im not sure its actually doing anything. Hitting Ok instead of Apply, yields the same results, except the Options dialog disappears and the checkbox is still checked. When you re-open Options, the checkbox isnt checked anymore. Running as Administrator has no changes.
655	
654	Prevents bitcoin from blocking startup due to a slow dns resolver, or a broken dnsseed.
653	
652	
650	In key.h, CKey::SetSecret(const CSecret& vchSecret) there is a potential BIGNUM leak. Look at the line with if (!EC_KEY_regenerate_key(pkey,bn)). If it fails it throw, but it doesnt BN_clear_free(bn);. BIGNUM *bn = BN_bin2bn(&vchSecret[0],32,BN_new()); if (bn == NULL) throw key_error("CKey::SetSecret() : BN_bin2bn failed"); if (!EC_KEY_regenerate_key(pkey,bn)) throw key_error("CKey::SetSecret() : EC_KEY_regenerate_key failed"); BN_clear_free(bn); Ill add that, to be consistent, you should put fSet = false; at the beginning of the function, because you are resetting the pkey and then re-put it at true at the end of the function if everything went ok.
649	This patch enables compressed pubkeys when -compressedpubkeys is passed. These are 33 bytes instead of 65, and require only marginally more CPU power when verifying. Compressed pubkeys have a different corresponding address, so it is determined at generation. When -compressedpubkeys is given, all newly generated addresses will use a compressed key, while older/other addresses keep using normal keys. Unpatched clients will relay and verify these transactions. Tested on testnet with both normal and encrypted wallets, using compressed and non-compressed keys. Initial idea and tests for this patch were done by roconnor.
647	Running tests on rc6, I sent 1 BTC to a new wallet, and now am trying to send it back so I can delete the test wallet. Ive been trying for almost 24 hours, but it wont let me send the 1 BTC back - probably because it wants to add the fee on. If I ask to send 0.99995 BTC instead, it tells me: "This transaction is over the size limit." which makes no sense at all to a new user. Theyre going to think size = quantity of BTC. But it doesnt really make any sense to me either. i only have one key in use, its not making up a bigger transaction from multiple coins. Theres no change. I would have thought this is about the smallest transaction possible. So the message is confusing to a new user, and also pretty much incorrect, unless the "size limit" is seen as something dynamic which depends on the amount being transferred and the age of the coins involved.
646	
645	UINT64_MIN out of scope. *** headers.h 2011-11-19 23:01:12.000000000 -0500 --- headers.h_old 2011-11-19 23:33:42.000000000 -0500 *************** *** 20,28 **** #define WIN32_LEAN_AND_MEAN 1 // Include boost/foreach here as it defines __STDC_LIMIT_MACROS on some systems. #ifndef __STDC_LIMIT_MACROS #define __STDC_LIMIT_MACROS // to enable UINT64_MAX from stdint.h - #include <boost/foreach.hpp> #endif #if (defined(__unix__) || defined(unix)) && !defined(USG) --- 20,28 ---- #define WIN32_LEAN_AND_MEAN 1 // Include boost/foreach here as it defines __STDC_LIMIT_MACROS on some systems. + #include <boost/foreach.hpp> #ifndef __STDC_LIMIT_MACROS #define __STDC_LIMIT_MACROS // to enable UINT64_MAX from stdint.h #endif #if (defined(__unix__) || defined(unix)) && !defined(USG)
644	Ive been testing the release candidates. rc1 through rc3 seem OK, but rc4 through rc6 all crash when I try to start them with my existing excrypted wallet: $ ./bitcoin-qt QGtkStyle was unable to detect the current GTK+ theme. ************************ EXCEPTION: 11DbException Db::open: Invalid argument bitcoin in Runaway exception terminate called after throwing an instance of DbException what(): Db::open: Invalid argument Aborted $ The exception is thrown by the "ret = pdbCopy->open(NULL, ...) in CDB::Rewrite() in db.cpp Im running a 64 bit archlinux, and am linking against package Berkeley DB (db) version 5.2.36-2 because I couldnt find a version 4. Is that likely to be causing this problem? Im pretty sure I had rc4 manage to open my wallet one time, but cant get it to work now.
643	At least on Win7 x64 with the 0.4.0-beta, Im seeing in excess of 60^H^H70 simultaneous connections to/from the client. This seems excessively high, for one. Additionally, there is no mechanism in the client itself to change the number, short of creating a bitcoin.conf (I limit my services wallets to 16 connections, already IMHO more than enough).
642	After AddAddress doesnt update the nServices and the nTime in the mapAddresses when the address is already present. The new code: addrFound = (*it).second; if ((addrFound.nServices | addr.nServices) != addrFound.nServices) { // Services have been added addrFound.nServices |= addr.nServices; fUpdated = true; } The old code CAddress& addrFound = (*it).second; if ((addrFound.nServices | addr.nServices) != addrFound.nServices) { // Services have been added addrFound.nServices |= addr.nServices; fUpdated = true; } where (*it) is an iterator on the mapAddresses (there is a second if block after this one that modifies addrFound.nTime, but to show the problem it isnt important) The difference is in the & of addrFound. Before when we modified addrFound we modified the "live" version of the mapAddresses, now we modify a copy that will be discarded at the end of the function.
641	The following patch allows for filtering addresses and labels by searching for the typed string anywhere, not just at the beginning. Trivial to test, and it helps a little with usability: --- src/qt/transactionfilterproxy.cpp.old 2011-11-18 10:56:12.764263766 +0200 +++ src/qt/transactionfilterproxy.cpp 2011-11-18 10:59:07.064263768 +0200 -35,7 +35,8 return false; if(datetime < dateFrom || datetime > dateTo) return false; - if(!address.startsWith(addrPrefix) && !label.startsWith(addrPrefix)) + //if(!address.startsWith(addrPrefix) && !label.startsWith(addrPrefix)) + if (!address.contains(addrPrefix, Qt::CaseInsensitive) && !label.contains(addrPrefix, Qt::CaseInsensitive)) return false; if(amount < minAmount) return false;
640	Intermittent crashes of bitcoin-qt.exe (server=1) when using RPC commands. I can reproduce it fairly consistently, but I have been unable to find a set of steps to reproduce it 100% of the time. Included at the bottom of this issue is the crash.bat I used to recreate to problem fairly consistently. I successfully reproduced the crash on bitcoin-qt.exe 0.5.0 rc5. I was unable to reproduce the crash on bitcoin.exe 0.4.1, bitcoind.exe 0.4.1, bitcoind.exe 0.5.0 rc5. Reproduced using bitcoin-qt.exe 0.5.0 rc5 on: - Windows 7 x86 - Windows 7 x64 SP1 > Faulting application name: bitcoin-qt.exe, version: 0.0.0.0, time stamp: 0x4d44aa00 > Faulting module name: bitcoin-qt.exe, version: 0.0.0.0, time stamp: 0x4d44aa00 > Exception code: 0x40000015 > Fault offset: 0x00e4b7fa > Faulting process id: 0xf80 > Faulting application start time: 0x01cca56065158dac > Faulting application path: C:\Users\jmack\Desktop\bitcoin-0.5.0rc5-win32\bitcoin-qt.exe > Faulting module path: C:\Users\jmack\Desktop\bitcoin-0.5.0rc5-win32\bitcoin-qt.exe > Report Id: 050b54aa-1155-11e1-86c0-f46d0496aff0 ---------- Begin crash.bat ---------- bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe walletlock bitcoind.exe w pause ---------- End crash.bat ----------
639	After calling walletlock on the Windows version of bitcoin daemon many times (via command line or json-rpc), this error appears in the debug.log: N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_21thread_resource_errorEEEEE boost::thread_resource_error I checked the number of threads belonging to the bitcoind.exe process, and every time walletlock is called, thread count increases by one. Those thread do not die and eventually the no of threads limit is breached and the daemon crashes.
638	I had to #include "util.h" from irc.cpp for strprintf() to be declared in that file.
637	I get errors from net.cpp and other modules (see below) about INT64_MIN and other constants not being defined. Including &lt;inttypes.h&gt;, &lt;stdint.h&gt;, or &lt;limits.h&gt; doesnt help, and neither does #defining __STDC_LIMIT_MACROS. These headers seem to work differently in C++ from C. To make the modules compile, I had to write a header that #defines these constants in terms of the C++ numeric_limits template: <pre> #ifndef CPPLIMITS_H #define CPPLIMITS_H #include &lt;limits&gt; #include &lt;inttypes.h&gt; #define INT64_MAX std::numeric_limits&lt;int64&gt;::max() #define INT64_MIN std::numeric_limits&lt;int64&gt;::min() #define UINT64_MIN std::numeric_limits&lt;uint64&gt;::min() #define UINT64_MAX std::numeric_limits&lt;uint64&gt;::max() #endif </pre> The following source files needed to include this header: <ul> <li> net.cpp</li> <li> wallet.cpp</li> <li> util.cpp</li> </ul>
636	Testing Bitcoin-Qt on my mac, I got a crash when running 0.5rc4 on a previously-encrypted wallet, after clicking the "you must restart" dialog box OK button. This catches the exception that is causing the problem (DbEnv::close(0) is upset about an invalid parameter), but Im still concerned that I havent found the root cause-- I still dont know WHY the exception is thrown.
635	Unencrypted private keys could remain in the wallet.dat file (and other berkely db database files) after wallet encryption. This pull request does several things to fix the problem: 1) Completely rewrites the wallet.dat file upon encryption. 2) Removes all keys from the keypool so they will not be used for new transactions (they are encrypted and stored in the new wallet, in case any bitcoins are sent to them). 3) Modifies the database code so temporary database files are cleaned up when bitcoin shuts down 4) Successful encryption of the wallet is now followed by a shutdown, so old unencrypted private keys that might have been in the databases caches will not be written to the new, encrypted wallet file.
634	Invoke doxygen from project root using: doxygen doc/Doxyfile Im going to generate these daily from -master and upload them to Let this be the first step toward better developer documentation :)
633	This leads to the bitcoin core being shut down while the UI is accessing it, and generally results in a segmentation fault or crash. In case it is desirable to make it possible to shutdown the GUI from its RPC server, well need to implement a signal for it. For the mean time, this is a safe stopgap. Reproducing the bug: bitcoin-qt -testnet -server -datadir=&lt;new directory> Output: Warning: To use the "-server" option, you must set rpcpassword=<password> in the configuration file: /tmp/test/testnet/bitcoin.conf If the file does not exist, create it with owner-readable-only file permissions. Segmentation fault Also changes the Warning to an Error (as it is kind of fatal, terminating the rpc thread).
632	This RPC is exactly identical to getblockcount. This duplication dates back to commit 22f721dbf23cf5ce9e3ded9bcfb65a3894cc0f8c when Satoshi created the RPC interface. Theres no need to have both, so we standardize on "count" which matches the naming convention in getconnectioncount.
631	This solves a lot of the copyright issues with LGPLd Nuvola icons, but not all yet (a couple of them look hard to find replacements for, especially the animation).
630	In net.cpp, around line 1688 there is the StartNode function. The first thing it does is try to find the local host ip and then it printf it (printf("addrLocalHost = %s\n", addrLocalHost.ToString().c_str());). Then, one line below, if there is a proxy configured or if bitcoin mustnt accept incoming connections, it drops the ip address it has found and it rewrites a second log line that is nearly the same (printf("addrLocalHost = %s\n", addrLocalHost.ToString().c_str());). The only thing that changes is the fact that the IP is now different. So in the log youll get: addrLocalHost = something addrLocalHost = 0.0.0.0 I think the second printf should be distinguished by the first (something like" setting addrLocalHost to 0.0.0.0 because of proxy/no incoming connection) and probably the first part (the one that finds the local ip) shouldnt directly be done in this situation.
629	Added QR Code generation button to address book page, a dialog to display the result including fields for label, message, and request amount (the latter visible only for personal addresses). Images can be saved to disk. Codes use the bitcoin URI scheme described here: Enabled via qmake option USE_QRC.
628	How to reproduce: 1- Go to transaction Tab 2- Right click on a transaction of type (Sent to) where has no label and click on Edit Label. Write anything on label field and let address field blank, now click on OK. Result: Bitcoin crash
627	1- I think should have an option to show only icons and hide names on tabs. 2- On (receive coins window) I think should have a column called (Amount) so we could see how much bitcoins we have on each address.
626	In irc.cpp there is a function bool RecvLine(SOCKET hSocket, string& strLine) The function, when fails, outputs messages like printf("IRC socket closed\n"); and printf("IRC recv failed: %d\n", nErr);. Sadly that function is used even outside of IRC: from net.cpps GetMyExternalIP2(). The easiest solution is to ignore it :-) The easy solution is to take away the "IRC " part from the error message. Another easy solution is to duplicate the function. The more complex solution is to pass a parameter about the connection type to RecvLine.
625	There should be a field that shows an unused, unlabled, address that can be pasted places on the overview page
624	The current position of the export button implies a global "scope" however its behaviour depends on the current tab. The button should be moved to the individual tab pane. Perhaps the button should be moved the File menu: file -> export -> [my addresses, address book, transaction log]
622	When the interface is resized to the smallest size the price overlaps with the date
621	Toolbar should contain tools not tabs
620	Enabling the minimise to tray causes the application to go to tray when I switch from the workspace the application window is on
619	Handle null models gracefully in the views; this prevents segmentation faults such as issue #595 and #615 from happening.
618	See issue #615 for discussion. Fixes the segmentation fault and pre-fills the new address in the add address dialog.
617	This patch documents the translation process using transifex.
616	uint256.h base_uint& operator&=(uint64 b) { pn[0] &= (unsigned int)b; pn[1] &= (unsigned int)(b >> 32); return *this; } I think this code is conceptually wrong if connected to the operator &=. Its good enough to be put in a separate function. The problem is that its doing the "logical and" only on the first two uint. The other uint should be zeroed. For example the base_uint::operator==(const base_uint& a, uint64 b) do checks the other uint of the base_uint for 0. This problem isnt present with the ^= and the |= operators because anything ^ 0 = anything, and anything | 0 = anything.
615	From dooglus on the forums: I found a way to make the release candidate crash: 1. use bitcoind to send to an address thats not in the address book 2. in the client, right click the greyed-out address in the address column of the transactions tab 3. edit label 4. the address field is blank - would be nice if it was populated automatically. type or copy/paste the address in, and type a new label name 5. click ok and get a segmentation fault
613	See the screenshot uploaded here: Tested on: Os: Debian Wheezy 64 Bitcoin: 0.5 rc3
612	take a look at: block hashes: 0x00000000000271A2DC26E7667F8419F2E15416DC6955E5A6C6CDF3F2574DD08E 0x00000000000743F190A18C5577A3C2D2A1F610AE9601AC046A38084CCB7CD721 they have duplicate coinbase transactions: 0xE3BF3D07D4B0375638D5F1DB5255FE07BA2C4CB067CD81B84EE974B6585FB468 block height 91722, 91880, on 2010-11-14 08:37:28, 2010-11-15 00:36:19 block hashes: 0x00000000000AF0AED4792B1ACEE3D966AF36CF5DEF14935DB8DE83D6F9306F2F 0x00000000000A4D0A398161FFC163C503763B1F4360639393E0E4C8E300E0CAEC they have duplicate coinbase transactions: 0xD5D27987D2A3DFC724E359870C6644B40E497BDC0589A033220FE15429D88599 block height 91812, 91842, on 2010-11-14 17:59:48, 2010-11-14 21:04:51 The miner was using the same signature "0x0456720E1B00" on all 4 of these coinbase transactions. The public keys for those two pairs of duplicates were: "0x4104124B212F5416598A92CCEC88819105179DCB2550D571842601492718273FE 0F2179A9695096BFF94CD99DCCCDEA7CD9BD943BFCA8FEA649CAC963411979A33E9AC" and "0x41046896ECFC449CB8560594EB7F413F199DEB9B4E5D947A142E7DC7D2DE0B811 B8E204833EA2A2FD9D4C7B153A8CA7661D0A0B7FC981DF1F42F55D64B26B3DA1E9CAC" - Should we allow this guy to spend his duplicate transactions? This would make code and data structures more complex for eternity... when verifying transactions wed have to get a list of transactions for each hash, instead of just a single transaction... and mark a non-spent one as newly spent. - Or should we make a rules like "no more duplicate transactions when height > 91880" and "only one of a set of existing duplicate transactions are spendable coinbase"? I like this. :) Come on, we totally should have rejected those duplicate transactions!
611	Added a few extra source code comments.
610	In the file net.cpp function ThreadSocketHandler2() has following lines: BOOST_FOREACH(CNode* pnode, vNodes) { ... FD_SET(pnode->hSocket, &fdsetRecv); ... } but fdsetRecv size limited (64 items in Windows). So when we have more than 64 connections new connections are successfully accepted, but packets cannot be received from them. I have tested this situation and confirm: other peer sends "version" message but the current client dont reply on it if number of connections > 64
609	Add translation of zh_TW locale. Unfortunately it will not be picked up by Mac OS X 10.6 due to QTBUG-9925, should work fine in other platform.
608	Re- pull requesting this as laanwj closed the previous one before discussion was complete. See #600 for previous discussion.
607	Update bitcoin-qt.pro to (optionally) static link. Update gitian linux build to static link everything except qt (and force users to have the qt libs on their system)
606	The source code uses code like: text = tr("%n hour(s) ago","",secs/(60*60)); to produce nice looking plurals in any language we translate to, but we dont have an English translation, and so the user sees "1 hour(s) ago". This commit adds an English translation which defines the correct plural strings for the 6 strings that need them: ./src/qt/transactiontablemodel.cpp: status = tr("Open for %n block(s)","",wtx->status.open_for); ./src/qt/bitcoingui.cpp: labelConnectionsIcon->setToolTip(tr("%n active connection(s) to Bitcoin network", "", count)); ./src/qt/bitcoingui.cpp: text = tr("%n second(s) ago","",secs); ./src/qt/bitcoingui.cpp: text = tr("%n minute(s) ago","",secs/60); ./src/qt/bitcoingui.cpp: text = tr("%n hour(s) ago","",secs/(60*60)); ./src/qt/bitcoingui.cpp: text = tr("%n day(s) ago","",secs/(60*60*24)); says: "To obtain a more natural English text, you need to load an English translation."
605	While doing the initial block download for a new installation of mine, my laptop battery ended and the system crashed suddenly. The blockchain files got corrupted and I couldnt start bitcoin anymore. Ive written this here: Copying the relevant part of the linked message: "After I restart and tried to load the bitcoin client again, I got two error popups, with the following messages: First popup: EXCEPTION: NSt8ios_base7failureE CAutoFile::read : end of file bitcoin in AppInit() Second popup: EXCEPTION: NSt8ios_base7failureE CAutoFile::read : end of file bitcoin in CMyApp::OnUnhandledException() And after clicking OK to the second popup, nothing happens, bitcoin does not start." Workaround: Delete all block chain files and start over.
604	It took a lot of testing and experimentation, but these changes make the qt-win32 gitian build deterministic, and stop the build from randomly hanging on qmake in a loop due to time conflicts. They also shorten the build time and reduce library size by disabling more qt features such as OpenGL that we dont use. Hopefully, this is reproducible on other computers as well. The output hashes are: 7996f302a7ea07a7c3728c857ca0ed783dd96fc49898cf149432787b93016ce6 qt-win32-4.7.4-gitian.zip dbdda19724304cb7006c6bcfe851a4b91f9939f9f282eec24d6768f8070126e7 qt-res.yml
603	I noticed that mac builds created with this script still has /opt/local/lib/db48/libdb_cxx-4.8.dylib hardcoded. This fix should fix the problem. And it doesnt look like we are using libqt.3.dylib. I assume this was copy pasted from somewhere and it was just never fixed.
602	Instead of using an ugly loop hack that swallows break and continue, I have replaced it with a simple if statement. Please comment and/or apply!
600	I know jgarzik didnt want this, but IMHO it belongs in the repo instead of (insert name of third party here)s repo. If the ubuntu/ubuntu ppa is to be linked on bitcoin.org (which I very much believe it should be), I would say its much better to have a debian folder in bitcoins src, even if it just sits there and only one or two third-partys update it via pull requests instead of the core team keeping it up-to-date. Note that this is essentially how the gitian scripts have been done for the past many releases, also just because a debian/ folder is here, doesnt mean any core devs have to deal with releases or the bitcoin/bitcoin ppa, it just makes the build process a bit more transparent and a bit more public. Anyway, its open for discussion.
599	FormatHashBlocks: int blocks = 1 + ((len + 8) / 64); I think this should be len+9, because 64 bits are used for the bit count, and then assuming the inputs length is in whole bytes, you will need one more byte in front of the length bytes to place the 0x80. Note this does not effect current versions of bitcoin, but maybe in the future if the length of the blocks hash input changed, this could be a problem. Cheers, Dean
598	See issue #587 Removes -fstack-protector in Windows to make executable work, and makes bitcoin-qt build deterministic The SHA of bitcoin-qt.exe after gitian build is: `4095613a82116949b72a30cee579ded07236d382acc7db6da91b96b9f9e2abf6`
597	strCommand == "tx": ignore until initial block download is complete. Why? No need to process new transactions that would go in the new block that is being generated when you do not have the entire chain. This would save some CPU cycles and some debug log length. In my suggested change (C#), I add the initial block download check after adding the CInv to the nodes inventory: CInv inv = new CInv(ppszTypeName.tx, tx.GetHash()); pfrom.AddInventoryKnown(inv); \+ if (CBlock.IsInitialBlockDownload() || CTransaction.IsOrphanTX(tx.GetHash())) \+ return true; bool fMissingInputs = false; if (tx.AcceptToMemoryPool(true, ref fMissingInputs))...
595	0x08174e84 in ClientModel::getOptionsModel() also reported as 0x0000000000533260 in ClientModel::getOptionsModel() ()
594	Every time I run bitcoin-qt, when it is closed (gracefully) the following error appears: Application asked to unregister timer 0x67000013 which is not registered in this thread. Fix application.
593	This adds support for opening bitcoin-qt to handle a URL instead of just drag-and-drop URL support (which has been available in bitcoin-qt since before merge). Again it does not support OSX as you have to add OSX-specific URL handling and I dont have access to any OSX boxes to code that. This does add hooks to add Bitcoin as the default bitcoin: opener for Win32 in the nsis installer, also the bitcoin-qt packages in the bitcoin/bitcoin ppa on launchpad install gnome hooks for the same. Details: If bitcoin is already running, the launch of the second process will use boost/interprocess/ipc/message_queue to send the URL to the running process which will handle it. Otherwise the new process will launch to the send coins window. Because of this, if bitcoin crashes, links will have to be clicked 3 times before bitcoin will open.
592	As requested in
591	Improve translation look-up logic. This properly handles cases where a translation is available for the language but not for the specific territory (ie, "es_AR" now falls back on "es" not the default "en_US"). - use wildcard for TRANSLATIONS in bitcoin-qt.pro to automatically build all translations present in src/qt/locale (thanks - first load translations/&lt;language>.qm, then translations/&lt;language>_&lt;TERRITORY>.qm, so that territory-specific translations take precedence, but the fallback is on the base language if no territory-specific translation exists
590	Ive again updated the German translation, this time of the Qt version.
589	Im running version 0.4.0 (observed in 0.3.24 too) on a couple Linux servers. Every 2-3 weeks, the daemon crashes and I have to restart it. In every instance, the last entry in debug.log is one like the following: Added time data, samples 28503, offset +0 (+0 minutes) -747598944 -747551416 -747428248 ... -201976 -1940 The daemon crashes while its printing the list of time samples. In the above example, the median offset was "+0" but "-1940" was the last sample printed. I havent noticed any other patterns. Is there any other information I can provide to help narrow down the problem? Original [posted on the forum](https://bitcointalk.org/index.php?topic=45446.0)
587	This updates gitian descriptors and adds a few workarounds. Note: THIS DOES NOT WORK, the resulting bitcoin-qt.exe is broken, Im just pull-requesting this to notify people and let others have a look at the result and attempt to fix the issue.
586	Added a workaround for an Ubuntu bug which causes -fstack-protector-all to be disregarded. this causes some functions not to be protected and leads to a warning: "warning: not protecting function: no buffer at least 8 bytes long" The bug which this is working around:
585	Warns the user, via an added label, if Caps Lock is on while typing in askpassphrasedialog.
584	(32bit dependencies through MacPorts)
583	* qmake build system * USE_UPNP with same default as makefile-based build system (default to link to libupnp and enable it. allow overriding with USE_UPNP=0, USE_UPNP=1) * Fix USE_SSL * Improved mac experience by ( ) (growl notification etc) * Remove useless options from "file" menu * Allow switching between tabs with alt-1..5
582	
580	Under Options->Display, there is an option for units to show amounts in. Changing that and clicking "Apply" should update the GUI, but doesnt until I click OK...
579	Sorry about that, hope i didnt miss something else :)
578	
577	
576	Add support to makefile.unix for the same parameters used by bitcoin-qt.pro, dynamic linking unless STATIC=1 is passed
575	strip bitcoin -> strip bitcoind. Segregate generic dependency information from Ubuntu/Debian distribution-specific dependency build information. Add tested Gentoo distribution-specific build information.
574	Introduces three new RPC calls: * dumpprivkey: retrieve the private key corresponding to an address * importprivkey: add a private key to your wallet * removeprivkey: delete a private key from your wallet
573	Bugfix: "bits" should be a hex-string, not a number (that just doesnt make sense) (suggest waiting for ACK from original getmemorypool author)
572	Hi, I was writing a script for automated cross-build (Linux -> win64) for bitcoin (https://github.com/delirium---/bqt-autobuild) and met some issues with building the client. One is solved in attached commit DWORD and DWORD_PTR have same size of 32bit systems but different on 64bit.
571	Submitting this because I dont have the time (or resources) to debug this atm and need a self-reminder: On Win32 walletpassphrase does not appear to relock after the designated amount of time as it should and as it does on Linux. Can someone check this on OSX as well?
570	Disables automatically adding "minimum" fees for JSON-RPC methods-- instead, it returns an error or, iff the user sets the new second parameter "force" to the settxfee JSON-RPC call, sends the transaction with the user-specified fee. This second parameter to settxfee is only enabled if bitcoind is started with the undocumented -nosafefees option. Currently 4/6 support this change:
569	Allow customizing what addresses are paid by generation, with failover to the standard "50 BTC to me" behaviour; also adds the "setworkaux" JSON-RPC call to add arbitrary data to the coinbase, which can be used to implement merged-mining (has safeguards against creating invalid coinbases) The internal code changes for "setworkaux" can also be used to put "feature flags" in coinbases, to enable upgrades (like OP_EVAL) when X% of the last Y blocks advertise support (after which, they should stop advertising the flag to make room for future content). Eligius has tested this changeset quite a bit under the 0.3.23 codebase. The "setauxwork" JSON-RPC method has support for addition:
568	This is a combination of my older multithreaded patch and parts of JoelKatzs 4diff patch. My original patch was required to get Eligius started and had testing from early 2011 until a few months ago when I merged it with JoelKatzs code (which fixed SSL JSON-RPC and added keepalive support). Since then, the combination has had plenty of testing on Eligius with the 0.3.24 codebase.
567	
566	Use Cs const char* for status strings rather than C++s std::string, which is slower
565	Detect typical getwork calls and accelerate them. Bypass the JSON request parser, and the JSON reply builder. This is split out of JoelKatzs 4diff patch. It needs testing.
564	From JoelKatzs 4diff. Is this safe?
563	From JoelKatzs 4diff.
562	Part of JoelKatzs 4diff patch.
561	Straightforward optimization
560	Stash the RPC user and password in a global string so we dont have to fetch them from the map on every RPC request.
559	Adds a -acceptnonstdtxn option to allow miners to easily accept "non-standard" transactions We probably want to amend this with a block for OP_NOP*?
558	Report errors creating ThreadSocketHandler thread just like the rest
557	Disables automatically adding "minimum" fees for JSON-RPC methods-- instead, it returns an error or, iff the user sets the new second parameter "force" to the settxfee JSON-RPC call, sends the transaction with the user-specified fee. This only affects JSON-RPC users, who should be assumed to understand the risk of sending with insufficient fees.
556	Adds "pooledtx" (number of transactions in memory pool), "currentblocktx" (number of txns in the last block created), and "currentblocksize" to the output of the JSON-RPC getinfo method. Adds "block_hash" and "block_index" to transactions shown by listtransactions and similar JSON-RPC methods. Been using this since 0.3.21 without issues.
555	-blknotifypidfile option to send SIGUSR1 to a PID when theres a new best block Used by basically every pool now, it just sends SIGUSR1 to a poolserver.
554	Most distros dont have static libraries installed per default, while shared libraries are ubiquitous.
553	This syntax has had plenty of time wasted arguing over whether it should be tolerated syntax; please dont bother wasting more time on that discussion. I cant force anyone to merge it, but I can at least make it easy for those who decide to tolerate it. Please keep in mind that it doesnt hurt the BTC-only URIs at all, and if nobody ends up using it for other units, it can always be removed later. Best case scenario: people use it and bitcoin-qt works correctly Worst case scenario: people dont use it, and it can be removed For 5 cBTC, use: amount=5x6 For 5 mBTC, use: amount=5x5 For 5 BTC, use: amount=5x2 For 5 Satoshis, use: amount=5x0
552	A faster Base58 parser with tolerance for typos: Zero and uppercase o are treated as a lowercase o; lowercase L, pipe, and exclamation point are treated as a one.
551	This replaces the fForRelay flag in the GetMinFee function with an enum mode parameter (GMF_{BLOCK,RELAY,SEND}), to allow more fine-tuned fee rules. The end goal is an API for allowing users to customize their fee schedules.
550	Allow customizing what addresses are paid by generation, with failover to the standard "50 BTC to me" behaviour; also adds the "setworkaux" JSON-RPC call to add arbitrary data to the coinbase, which can be used to implement merged-mining (has safeguards against creating invalid coinbases) The internal code changes for "setworkaux" can also be used to put "feature flags" in coinbases, to enable upgrades (like OP_EVAL) when X% of the last Y blocks advertise support (after which, they should stop advertising the flag to make room for future content). Eligius has tested this changeset quite a bit under the 0.3.23 codebase.
549	Added walletchangepass.py and walletunlock.py to contrib/wallettools. These are two simple python scripts which send the appropriate RPC commands to unlock a wallet and change a wallet password. They are intended to prevent users from having to enter their password as a command-line argument which could then be stored in the console buffer/history in plaintext. Both tools rely on bitcoin/bitcoind running with server=1 and an rpcuser and rpcpassword set in bitcoin.conf. They can be easily modified for non-standard ports. walletunlock.py unlocks the wallet for 60 seconds by default, changeable in code, and both modules rely upon python-json-rpc (http://json-rpc.org/wiki/python-json-rpc) Signed-off-by: David Perry <enmaku@gmail.com>
548	When using bitcoind and unlocking wallet.dat from the command prompt, with the current implementation the passphrase will be stored plaintext in the command buffer on many operating systems. The command-line implementation should be changed such that an unlock command may (optionally) be issued without specifying the passphrase and have the user prompted for the passphrase from within the application so that it does not enter the buffer.
547	
546	Its a change to allow namecoin to do merged mining using this code and put extra data in the block chain This extra data has nothing to do with bitcoin, but will simply just increase the bitcoin block chain size It will also allow other crypto currencies to put non-bitcoin data in the bitcoin block chain while using this bitcoin code That is the reason for this change and the fact that theyve hidden this reason rather than stating it ... makes it questionable in the least N.B. see namecoin site for more details and the web site also states incorrectly that it will not be adding data to the bitcoin block chain - even though they have been asked more than a week ago to correct that
545	Reading ```addr.txt``` is an unexpected side effect of LoadAddresses(). This feature is likely not used by anyone as its not documented anywhere.
544	When I turned on my computer after being off for a day, Bitcoin started up and while updating the block chain, I sent a single coin. After the coin was sent I edited the address, in my address book to keep track of the transaction, as soon as it saved - a message appeared saying Bitcoin has unexpectedly quit. I restarted the program and get the 11DbException input/output error message. I downloaded the latest version of the wallet and get the same results. The program does not open, and the same message comes up.
543	ParseMoney checks for a maximum number of digits before the dot, returning invalid if that is exceeded, supposedly guarding against overflow. However, this amount is set far too lenient (14) making it possible to overflow from positive into negative integer values: 10 9999999999.99999999 -> 9999999999999999999 11 99999999999.99999999 -> -8446744073709551617 ... This commit sets the maximum number of digits before the dot to 10, the maximum safe value. It also adds unit tests for various functions in util.cpp/util.h and base58.
542	* USE_SSL=1 to support RPC SSL * BDB_LIB_SUFFIX= to link against specific BDB version * Fix typo * Start lrelease during qmake phase to prevent errors/warnings
541	This adds initial support for three new types of transactions: (a and b) (a or b) (a and b) or c ... where a/b/c are keys. These new transaction types will enable better wallet security and backup in future versions of bitcoin. Ive taken a conservative approach with this initial pull; the new transaction types will be relayed and included in blocks, but are ignored by the wallet code, so will not affect the balance and will never be considered available to spend. Im going to start a discussion on bitcoin-dev to do a bit of a brain-dump on what NOT to do with multi-signature transactions (there are several potential attacks that well need to be careful to avoid). Ill be creating a multisig_testing branch in the gavinandresen github fork that WILL add multisig transactions to the balance, will have a new RPC call to create multisig transactions, and will be able to spend the multisig transactions; that will be for testing this PULL only for now.
540	When I start bitcoin, it takes a very long time for the main window to appear. About 10-30 minutes. The following is added to ~/.bitcoin/debug.log when bitcoin is started, and nothing more appears until the main window appears: Bitcoin version 0.4.0-beta OS version Linux 2.6.38-11-generic x86_64 System default language is 66 en_DK.UTF-8 Language file locale/en_DK/LC_MESSAGES/bitcoin.mo (English (Denmark)) Default data directory /home/rune/.bitcoin Bound to port 8333 Loading addresses... dbenv.open strLogDir=/home/rune/.bitcoin/database strErrorFile=/home/rune/.bitcoin/db.log After the main window appears, the following information is added to debug.log Loaded 249074 addresses addresses 627873ms Loading block index... LoadBlockIndex(): hashBestChain=000000000000077a9c9a height=147002 block index 436502ms Loading wallet... nFileVersion = 40000 fGenerateBitcoins = 0 nTransactionFee = 1000000 fMinimizeToTray = 0 fMinimizeOnClose = 0 fUseProxy = 0 addrProxy = 127.0.0.1:9050 fUseUPnP = 1 wallet 435ms Rescanning last 106 blocks (from block 146896)... rescan 5251ms Done loading mapBlockIndex.size() = 147005
539	Some important (and less important) updates for the Qt UI Core: * use median filter (`CMedianFilter`) for peer-reported reported number of blocks * this fixes problem that one misconfigured or malicious node can mess up progress bar * implementation in `src/util.h` * testcase in `src/test/util_tests.cpp` UI: * Translation handling * Include translations as resource, so that they are included in the executable. This saves a lot of hassle on installation (less files to worry about), and is similar to how other Qt applications do it * In resources, use `nl_NL` format instead of `nl`, so that the correct translation is chosen based on system locale automatically * Improve send coins screen * Add balance to remind users how much they can send * No longer clear input when switching tabs; this is non-intuitive and can cause loss of work. Instead, add a "clear input" button. Build system (qmake): * Add `BOOST_LIB_SUFFIX` option to make it possible for distribution install scripts (such as Gentoo) to pass in alternative boost library version names without resorting to sed hacks * Factor out windows/mac specific include, lib paths so that they can be overridden (overall result is still the same) * Dependency library locations can be customized with `BOOST_INCLUDE_PATH`, `BOOST_LIB_PATH`, `BDB_INCLUDE_PATH`, `BDB_LIB_PATH`, `OPENSSL_INCLUDE_PATH` and `OPENSSL_LIB_PATH` respectively * Build translations (.qm) automatically in make, no need to run lrelease separately anymore Minor: * Add `Q_OBJECT` everywhere it should be according to Qt rules (removes warnings when lupdate parses sources) * Use `USE_DBUS` define instead of `QT_DBUS` to switch Linux notification mode, to prevent conflicts in some Qt versions * Update `OTHER_FILES` section in Qt creator so that all documentation is shown, now that both projects have been fully merged
538	This adds ```(DEPRECATED)``` to both ```midstate``` and ```hash1``` in ```help getwork```-RPC. The idea is to remove both fields "soon". ```hash1``` is a buffer the miner should use to insert the hash between both ```SHA256()``` calls. It contains some bytes for padding. These are standardized in the SHA256 spec and all the popular miners have them hardcoded for performance reasons so there is no need to provide it with every getwork. ```midstate``` contains the internal SHA256 state after hashing the first half of the blockheader. This can be easily done in miners as they are already doing lots of SHA256 iterations and have probably faster algorithms than bitcoind. Deprecating these fields will allow for cleaner code in ```main.cpp /BitcoinMiner``` (i.e. only build blockheader without any hashing or formatting of buffers) and will make it easier to remove cryptopp from the source tree.
537	This removes support for labels (the same functionality is available using the account system). RPCs removed: * ```setlabel``` * ```getlabel``` * ```getaddressesbylabel``` * ```getamountreceived``` * ```getallreceived``` * ```getreceivedbylabel``` * ```listreceivedbylabel``` Responses changed: * ```ListReceived``` will not include the key ```label``` anymore
536	
535	* removes cryptopp dependency in BitcoinMiner() and replace it with OpenSSL * add simple unittest for SHA256Transform() This has only been tested on Linux so it would be great if someone can try this on win/osx.
534	The attack this prevents: Generate valid low-difficulty blocks (maybe built on top of an early part of the block chain) and send them to a bitcoin node. Before this patch the bitcoin client could store an arbitrary number of them in memory or on disk, in case they later became part of the main chain. Two checks are added: 1) Blocks before the last blockchain lock-in are rejected, and the peer sending these obviously-not-part-of-the-main-chain blocks it will be disconnected and banned. 2) Blocks must have a plausible proof-of-work. It is impossible for a difficulty 1.0 block to follow a difficulty 1-million block (it would take at least 19 months for difficulty to drop from 1-million to 1). Blocks with too-low proof-of-work are ignored, and peers relaying them are disconnected/banned. Requiring plausible proof-of-work for orphan blocks or alternate chains foils this attack (you would have to be able to generate valid blocks near current difficulty).
533	Sorry I am resubmitting this, had an issue deleting a branch. I have updated the commit to mention Jeffs recommendation for warnings. Is the old pull
532	
531	Sorry to bother ppl, you accepted my small update on Spanish translation few days ago but it didnt fully got into 4.0 version because of the binary .mo file last updated on June 18. I will appreciate if one of the main devs reviewed this issue a bit. Thanks
530	Some German text corrections. I would propose to phrase all messages as so it never disrespects the user. Meaning not saying: "Do you really want to do this?" but more informative: "You are going to do this."
529	client version: 0.4.0-beta os: windows7 64bit My bitcoins datadir folder is symbolic link to folder on removable drive (all of them is ntfs file system), when i use latest version from bitcoin.org it fail with empty error message box and crashed. In debug.log put 2 messages: ************************ EXCEPTION: N5boost11filesystem316filesystem_errorE boost::filesystem::create_directory: , : "C:\Users\rpman\AppData\Roaming\Bitcoin" C:\Program Files (x86)\Bitcoin\bitcoin.exe in AppInit() ************************ Its russian localisation, translated message is: >> Can not create file because it already exists: If remove symbolic link and make local copy, program starts and work fine. Also -datadir command line argument to removable drive helps too.
528	
527	
526	
525	
524	This is a reworked version of #183 Adds two RPC commands: * signmessage [address] [message]: create a base64-encoded signature string * verifymessage [address] [signature] [message]: verify whether a signature string is valid The signature string contains both the ECDSA pubkey and signature, to allow address-based verification. Verifymessage simply returns true or false. This pull request also contains a full inline base64 encoded and decoder, replacing the openssl-based code. The decoder is based on JoelKatz base64 decoder from #430.
523	These timers will help to cut down on the abandoned issues / pull requests. Labels will be added so that these can easily be searched in the issue tracker.
522	One small fix from #385 that wasnt merged yet.
521	This pull requests merges in the Qt GUI ( ). This introduces a qmake-based build system completely orthogonal to the current build system and UI code. All qt-related source files and resources are added under src/qt: 135 of the 154 "Files Changed" are additions. Changes to core code have been kept to a minimum and are generally guarded by #ifdef or clearly UI-specific. Outline of changes to core: * Add InitMessage calls to initialization sequence, for splash screen. These do nothing on Qt or GUI-less builds * #ifdefs for QT GUI specific changes: there is no default or preferred receiving address, and no visible addresses are generated without the users intervention * Keep track of maximum block count of peers (GetNumBlocksOfPeers), for visual indication of progress * Translation functions and printf take std::string instead of char*, to allow _ to safely redirect to Qt translation service * Add GetUnconfirmedBalance() call to CWallet, to be able to show non-confirmed balance in home screen * rpc.(cpp|h) renamed to bitcoinrpc.(cpp|h) to satisfy qmake build system on Windows Discussion on forum: and
520	This patch wraps three debug messages (```sending```, ```received``` and ```got inventory```) in ```if (fDebug) {...}```. I analyzed ```debug.log``` on a few long-running bitcoin nodes and noticed > 80% of debug.log is composed of those three messages. Thus this patch should greatly reduce debug.log size and disk I/O. * ```sending``` is triggered whenever a low-level message is sent (i.e. ```sending: inv (37 bytes)```). * ```received``` is triggered whenever a message is received (i.e. ```received: inv (37 bytes)```). * ```got inventory``` is triggered when an ``inv```-message is received.
519	Updated based on original strings from #512.
518	Currently we output "REORGANIZE" when a block reorganization occurs. It would be helpful to also log the number of blocks disconnected and the number of blocks connected.
517	The big idea: if a peer is sending you obviously wrong information, punish it by maybe dropping your connection to it, and ban its IP address so it cannot immediately re-connect. The probability of dropping the connection, and the length of the ban, depend on how wrong, and how potentially wasteful/damaging, the peer is. So sending an extra version message is a minor transgression that is usually tolerated, sending an more than MAX_BLOCK_SIZE block is a major transgression. Detailed how-it-works, using "I got a version message I wasnt expecting" as the specific example: Getting a version message from a peer increases that peers misbehaving score by 10, and (assuming that is the peers first bad behavior) gives it a 10% of being disconnected. If it is disconnected, then that peers IP address is banned from connecting for a couple of hours. If it is not disconnected, then nothing happens unless the peer misbehaves again; if it does, then its chances of being disconnected go up, and the length of time it will be banned increases. Misbehavior/ban information is stored only in memory, and information about misbehaving peers is never broadcast. Also, peers that are disconnected/banned are just dropped, there is no warning or reason sent. I think this will eliminate a lot of potential denial-of-service attacks, and could be a good framework for responding to other potential attacks. "We" should still look through the code and limit the potential size of any data structures that an attacker might target (transaction pool, orphan block pool); the DoSprevention changes are meant to make it harder for an attacker to stay connected long enough to pull off an attack. The danger is that I got something wrong; what if an attacker can leverage the DoSprevention code to split or shatter the network? Heres my thinking on that, please help check my work: + Im relying on TCP to prevent IP address spoofing (otherwise an attacker could force you to disconnect from your peers by pretending to be them and sending you a bad block). + Peers are only penalized for sending messages that wont, and shouldnt, get relayed. So an attacker shouldnt be able to poison the network with a bad message that is propogated and then causes everybody to disconnect from everybody else. + I specifically do not punish peers for relaying what look like double-spend transactions. If I did, then an attacker could try to segment the network into two pieces by broadcasting a series of double-spends from two halves of the network, and waiting until the nodes "in the middle" disconnected/banned across the seam. So: please let me know if or how Im being an idiot. Im still thinking about the best way of testing this; at the very least, running a node for several days with this patch applied should result in a minimal number of "disconnected %s for misbheavior" messages in debug.log.
516	This adds a 32x32 16-bit icon to the bitcoin.ico file. Though this realistically probably looks worse than the 32-bit 32x32 being displayed on a 16-bit monitor, it makes the nsis setup exe deterministic in gitian output (go figure) which makes the slight visual loss for users of very old monitors/computers worth it.
515	Ive just built bitcoin-4.00rc2 on Ubuntu 10.04, and its now downloading the blocks. I notice though that the .bitcoin/database directory is being filled up by over a hundred log files, and they are eating up more than 1GB of disk space.
514	I contacted Sirius to get setup with QA@Bitcoin.org, but the bitcoin.org domain lacks a mail server. I suggested using Google apps (free), but havent gotten a response. Does anyone else have access to the bitcoin.org domain? If not, what are some other QA@something.com addresses we could use?
513	Ive been running bitcoin gui with these changes for a few days with no obvious effects and they are very common.
512	New wallet encryption + small fixes
511	This time with the binary .mo file removed.
510	In order to stay in line with the current wishes of the community as seen on the bitcointalk forums I request that this be merged ASAP!
509	wxWidgets needs to be at least version 2.9.1 because wallet crypto uses ToStdString() which is not in 2.9.0
508	Apparently I cant test right nor code right... Thanks to makomk for finding the bugs here and devrandom for passing them along (see
507	Reproduce: Try to send a transfer that contains all of the money remaining in the wallet, even though a fee is required to the transfer. The error gets displayed, "Error: This transaction requires a transaction fee of at least 0.001 because of its amount, complexity, or use of recently received funds." Clicking okay is the only option. The send window disappears and the user is returned to the main window. Expected Behavior: After being shown the error the user should be returned back to the send dialog box. That way the user doesnt have to re-enter the recipient address and amount over again. The user can just subtract the fee from the amount, and click send.
506	Even though it no longer triggers RPC safe mode there is some concern that it could still be misused. Signed-off-by: David Perry <enmaku@gmail.com>
505	Fix from luke-jr, I reviewed the code but have not tested. Rough sketch of a test plan: + Run clean testnet-in-a-box bitcoind, with -keypool=1 + Encrypt the wallet + Run bitcoind getnewaddress until it tell you keypool is exhausted + Generate a couple of blocks via internal miner -- verify: coinbase transactions have unique txids even though they pay-to default key + Generate a couple of blocks via getwork RPC call -- verify: coinbase transactions have unique txids
504	New wallet encryption + small fixes
503	
502	Define MSG_NOSIGNAL to 0 when it is not defined. Enables building bitcoind on OpenBSD.
501	Translated including the new wallet encrypt options
500	Thanks to Pieter for the detective work finding this. Bug was a deadlock when the process-messages-thread and the IRC thread were adding peer addresses at the same time. I inspected the code for any other cases where starting a database transaction might trigger this type of bug, and all other cases are OK. Ill keep thinking about how to get the DEBUG_LOCKORDER code to detect this in the future. Tested by running bitcoind, letting it connect and startup (and join an IRC channel), then shutting it down repeatedly (10 times in a row) and observing no deadlocks.
499	
498	
497	Romanian translation with the new wallet encrypt options included
496	I have tested this with Ubuntu 11.04 and it repairs the wx build bug: Thanks luke-jr!
495	Updated this from
494	Bitcoin 0.4.0rc1 BETA will not compile in windows 7 using I have tried building it on my own, and end up with C:\bitcoin\src>mingw32-make bitcoin.exe bitcoind.exe -f mak efile.mingw g++ -c -mthreads -O2 -w -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DWIN32 -D__WXMSW__ -D_WINDOWS -DNOPCH -DUSE_SSL -DBOOST_THREAD_USE_LIB -DSTATICLIB -DUS E_UPNP=0 -I"C:\boost_1_47_0" -I"C:\db-4.8.30\build_windows" -I"C:\OpenSSL-Win32\ include" -I"C:\wxWidgets-2.9.2-mgw\lib\gcc_lib\mswud" -I"C:\wxWidgets-2.9.2\incl ude" -I"C:\miniupnpc-1.6-mgw" -DGUI -o obj/crypter.o crypter.cpp In file included from C:\db-4.8.30\build_windows/db_cxx.h:65:0, from headers.h:44, from crypter.cpp:9: C:\db-4.8.30\build_windows/db.h:135:17: error: conflicting declaration typedef int32_t ssize_t c:\mingw32\bin\../lib/gcc/mingw32/4.5.2/../../../../include/sys/types.h:118:18: error: ssize_t has a previous declaration as typedef _ssize_t ssize_t mingw32-make: *** [obj/crypter.o] Error 1
493	When I do bitcoind help; it shows me the help file with reference to encryptwallet. If I do bitcoind help after I have encrypted a wallet, encryptwallet is no-longer in the help text.
492	This change skips ECDSA signature verification for transactions during the initial block-chain download, which makes downloading the block chain much faster. "Initial block chain download" is all blocks up to 120 blocks before the last blockchain lock-in point. Reasoning for why this is safe: If an attacker tries to feed a client bad transactions during the initial block-chain download (transactions with invalid signatures), then they change the merkle tree, and at the first blockchain lock-in the bad chain will be rejected. Transactions are still checked for orphan blocks that come in during initial block-chain-download (ConnectInputs will be called with fBlock=FALSE) and for mined blocks (ConnectInputs called with fMiner=TRUE).
491	Patch from ArtForz, who discovered the problem. The problem was chaining large transactions (transactions with lots of ins and outs) would make the berkeley db transaction log get very big, as the dependencies (TxIns) of a transaction might be re-written multiple times. With this fix, each each transaction referred to by TxIns is written once.
490	My bad...
489	Building 0.4.0rc1 in Ububtu via make -f makefile.unix returns the following errors/warnings: ui.cpp: In member function virtual void CMainFrame::OnIconize(wxIconizeEvent&): ui.cpp:488:25 warning: bool wxIconizeEvent::Iconized() const is deprecated (declared at /usr/local/include/wx-2.9/wx/event.h:2150) ui.cpp:456:43 warning: bool wxIconizeEvent::Iconized() const is deprecated (declared at /usr/local/include/wx-2.9/wx/event.h:2150) ui.cpp: in function void SetStartOnSytstemStartup(bool): ui.cpp:1808:39: error: class boost::filesystem3::path has no member named native_file_string make: *** [obj/ui.o] Error 1
488	
487	
486	
485	I tried to download some source from the Github download link, and its not building correctly. Here are the errors I was getting: If you open - you can see the download button on the right-hand side of the page in gray. Do we know what has been pushed to this and how? Does it automatically create versions for us?
484	Nodes culled from MagicalTuxs database of bitcoin nodes, by version and longevity, and tested for connectivity.
482	Quote from This edit states that the "default key" will be used as the target for payouts for mining. If this is correct, then it might be problematic and could result in a loss of funds to miners. When miners mine more than one block using the same payout address, the coinbase transactions in each block are identical, which results in them having an identical sha256 hash, which results in all but the first one being unidentifiable and hence unspendable. I suppose you might be aware of that, but wanted to point this out just to prevent the possibility of it being an expensive consequence for somebody else.
481	English is not my mother tongue, but I think here[1] there is a typo: "you own security" "your own security". Regards, Carlo [1]
480	I collapsed several wallet mutexes into two: one for the keystore, and one for the wallet. That fixes many potential deadlocks due to wallet code acquiring the various locks in different orders. And I fixed several other potential deadlocks by requiring that code that needs both the cs_main and cs_wallet mutexes acquire them in that order. One somewhat scary semantic change: Transaction times reported by in the rpc interface and in the GUI are now always the time the transaction was received by this node (and not the average-time-of-the-last-n-blocks-that-the-transaction-ended-up-in). Having transaction times change as they were confirmed was a mistake, in my humble opinion, but the main reason I changed this behavior was so that CWallet::GetTxTime() doesnt require the cs_main lock. Id like to further compartmentalize locking, but thats a task for another day...
479	There should be an easy way to have wallet encryption as there are tons of trojan viruses running around these days stealing wallets. Thanks
478	If you provide a valid address but from a different block-chain (I guess) for example 1Cm554iqhU9dLnZsi2LA5s1b576DdfM1GM` when working on `testnet` the bitcoind returns the following object: ```address: "msH2N7opWVat7u3VRbJXunDuw6gvdoTbc2" ismine: false isvalid: true``` Completely unrelated to my original request. Havent tested it thoroughly yet, will update when I have more data.
477	When trying to send an amount with more than eight decimal places (e.g., 0.123456789 BTC) the user is given the uninformative error message "Error In Amount". I dont know that the amount should be rounded or truncated, so it is probably correct behavior to reject the transaction attempt, just that there probably is a better error message to communicate what specifically is the problem.
476	Added RPC call getmemorypool to get list of transactions that would be included in a generated block. This is useful for any program that wants to create its own generation transaction while mining. P2Pool recently generated its first block, and this patch would let it include transactions.
475	Added/changed to more common option names (as in popular internet banking systems), also some minor bug fixing (in the about dialog and so on).
474	I hope this time it will be OK. :-)
473	every time I close the bitcoin it raises: ************************ UNKNOWN EXCEPTION bitcoin in CMyApp::OnUnhandledException() with segfault I have a NVIDIA GeForce4Ti4200, driver nouveau $ uname -a Linux linuxhost 3.0-ARCH #1 SMP PREEMPT Sat Aug 6 16:49:00 CEST 2011 i686 AMD Athlon(TM) XP AuthenticAMD GNU/Linux ]$ X -version This is a pre-release version of the X server from The X.Org Foundation. It is not supported in any way. Bugs may be filed in the bugzilla at Select the "xorg" product for bugs you find in this release. Before reporting bugs in pre-release versions please check the latest version in the X.Org Foundation git repository. See for git access instructions. X.Org X Server 1.10.3.901 (1.10.4 RC 1) Release Date: 2011-07-29 X Protocol Version 11, Revision 0 Build Operating System: Linux 3.0.0-ARCH i686 Current Operating System: Linux linuxhost 3.0-ARCH #1 SMP PREEMPT Sat Aug 6 16:49:00 CEST 2011 i686 Kernel command line: BOOT_IMAGE=arch-fallback ro root=801 Build Date: 08 August 2011 08:28:07AM Current version of pixman: 0.22.2 Before reporting problems, check to make sure that you have the latest version.
472	
471	Hi, I notice that if I run bitcoind.exe, I get the windows console as expected. However, pressing CTRL+C (or clicking the X to close the window) causes an exception to occur: -- terminate called after throwing an instance of DbException what(): DbEnv::close: Invalid argument This application has requested the Runtime to terminate it in an unusual way. Please contact the applications support team for more information. -- I realise there is a stop RPC command, but would it be possible to also allow termination this way? Thanks
470	Updated checkpoints up to 140700, making a small commit to help. I could do a checkpoint every 2,100 if that is ok.
469	Xorg server eats all available CPU time, while bitcoin is running. version 0.3.24-beta
468	Here are some improvements for displaying a users transactions (say on a website). 1) it is useful to be able to show the transactions from "newest to oldest" rather then "oldest to newest" 2) by making the call return nothing if the from parameter is greater then the total number of transactions we can implement crude pagination (in lieu of a gettransactioncount api call)
467	Logic running with -keypool=0 was wrong (empty keys were being returned). Fixes #445 sipa, Matt: can you sanity check this? I did some quick testing with/without wallet encryption, running with -keypool=0. Logic is: GetOrReuseKey method should never return empty key. And GetAccountAddress should always complain if GetOrReuseKey has to reuse (== return the default key).
466	Considering that CPU mining is hardly worth the time anymore, especially when solo mining, the internal CPU miner has become next to worthless. As such, remove it to reduce the amount of code that can contain bugs. If you still want to solo mine using your CPU you can use the RPC "getwork" interface with Jeff Garziks RPC CPU miner: Signed-off-by: Giel van Schijndel <me@mortis.eu>
465	if a wallet has no transactions and the from parameter of listtransactions is used the bitcoin client crashes
464	Upgrade dependancies and tweak build process. * Upgrade to use miniupnpc 1.6: At least one user has commented that newer releases are more compatible with their (and apparently common) routers. * Upgrade to wxWidgets 2.9.2: No longer need to patch it ourselves for new distros * Upgrade to Bost 1.47 for Win32 Builds Boost has gotten really out of date here because previous releases didnt build (because no one bothered to research why, probably me though I cant claim to remember).
463	A couple incorrect error messages in rpc.cpp and a chunk of text in doc/README. Not sure if anyone wants that much text, but whoever pulls can feel free to edit/amend/strip out what you dont want.
462	General code cleanup in preparation of some much needed improvements to the networking code.
461	Use "#if USE_UPNP" instead of "#ifdef USE_UPNP" to work properly with the makefiles Additionally, dont try to link with libminiupnc when USE_UPNP=0. Signed-off-by: Giel van Schijndel <me@mortis.eu>
460	db.cpp has a number of uses of make_tuple and has using namespace std and using namespace boost. Without qualifying make_tuple, std::make_tuple is preferred, which is incorrect. This patch qualifies make_tuple.
459	Regarding main.cpp has: "char pchMessageStart[4] = { 0xf9, 0xbe, 0xb4, 0xd9 };" Per discussion on the thread linked, leaving the signedness of pchMessageStart is unsafe for values > 0x80. This patch specifies unsigned char in main.cpp and net.h.
458	To a variation on: // Copyright (c) 2009-2010 Satoshi Nakamoto // Copyright (c) 2011 The Bitcoin developers This bugged my OCD... All files had been changed (even if it was simply a #ifndef BITCOIN_*_H...)
457	The commits in this pull request modify the RPC-connection handling code in such a way that listening for and accepting of incoming connections is performed asynchronous (reading/writing is still synchronous). This allows for listening on multiple sockets at once, which I use in one of the other commits to implement dual IPv4/IPv6 support.
456	ui.cpp: boost::filesystem3::path native_file_string() deprecated (and unavailable by default) Fix is trivial, since only native_file_string().c_str() is used, and boost::filesystem3::path.c_str() does *exactly* the same thing (according to
455	PROBLEM Hi, Running bitcoind.exe under Windows with the -testnet flag shows: -- C:\Program Files (x86)\Bitcoin\daemon>bitcoind.exe -testnet Warning: To use bitcoind, you must set rpcpassword=<password> in the configuration file: C:/Users/Andrew/AppData/Roaming/Bitcoin/testnet/bitcoin.conf If the file does not exist, create it with owner-readable-only file permissions. -- I created and verified this file existed at the location, and had the rpcpassword (and rpcuser etc lines) all set. The error persisted. I then round Issue #78 which indicates the config file really being read is at C:/Users/Andrew/AppData/Roaming/Bitcoin/bitcoin.conf for -testnet (contrary to what the error message says). I then created C:/Users/Andrew/AppData/Roaming/Bitcoin/testnet.conf and then ran: bitcoind.exe -testnet -conf=testnet.conf And my problem disappeared. SOLUTION The error message should be updated to point to the right config file that bitcoind.exe is looking for, instead of being misleading. Thanks
454	Got tired of telling pool ops to not use hub mode and use -addnode and adding a little asterisk that it would be nice if addnode kept the node connected as a "Bitcoin backbone" should do, so I hacked an implementation together.
453	From the forum: This is in the latest version in Git. This is not in the released client. Creating a new key can freeze the client. It appears to be much more frequent when there are blocks and transactions to download. Ive been digging in the code to try and find the cause, and I think this is the reason: CAddressBookDialog::OnButtonNew grabs the cs_vMasterKey, then calls pwalletMain->GetOrReuseKeyFromPool() GetOrReuseKeyFromPool() calls ReserveKeyFromKeyPool() which attempts to grab cs_main Meanwhile.. ProcessMessages grabs cs_main and then calls ProcessMessage ProcessMessage() calls SyncWithWallets, either directly when receiving "tx" or indirectly when receiving a block (via ProcessBlock -> AcceptBlock -> AddToBlockIndex -> SetBestChain -> ConnectBlock -> SyncWithWallets) SyncWithWallets calls AddToWalletIfInvolvingMe AddToWalletIfInvolvingMe calls CWallet::IsMine, which calls the global ::IsMine IsMine(const CKeyStore &keystore, const CScript& scriptPubKey) then calls keystore.GetPubKey CCryptoKeyStore::GetPubKey then grabs cs_vMasterKey Deadlock. Most of the critical sections protect something small well-defined, though Im not quite sure what cs_main is supposed to be protecting. I would generate a pull request, except that 1. I have an ugly hack but not a good fix. Im not sure what the final strategy is going to be on wallet encryption, and whether the public keys are going to be encrypted too. 2. I am new to git and I am not yet skilled at rebasing commits to include only the changes I want.
452	RPC server will now accept and parse /api/v%d URLs. Any version other than one (/api/v1) will be rejected with 404 not found. URLs outside /api/v%d are ignored by this processing. Code heavily inspired by one of cdhowies commits from which I then pared down quite a bit, and changed the URL portion thereof. Credit for the base changes goes to cdhowie (from which I pared down and changed the code). The API versioning logic, as I understand it from the satoshi days, was that we should simply change the API as needed, because bitcoin is not yet version 1.0. HOWEVER, the logic continued, we should not simply make breaking changes to RPC API willy nilly, simply because we can. The value of the change must outweight the pain of the change, in other words. Thus, adding new RPC calls was never a problem, but _changing_ RPC calls was avoided. I like cdhowies approach sufficiently to think that there would be value in supporting "/api/v1" URL, to prepare for future versioning. Understand, this is NOT a blanket endorsement of pull request #431 with all its changes. This is only designed to add some future proofing in a manner inspired by pull #431.
451	Also Make it clear that setting proxy requires restart to fully apply.
450	In net.cpp there is a MapPort method. This method is compiled only when the USE_UPNP is defined BUT in various places its called without checking for USE_UPNP (in net.cpp in method StartNode around line 1699 and in ui.cpp in method OnButtonApply around line 1784). The VC++ doesnt like it. Three things can be done: * delete the USE_UPNP define and always compile the code (but this could have problems for systems without the library) * protect the two calls with #ifdef * put an #else in net.cpp and define an empty MapPort that does nothing.
449	I was just wondering why you chose to use Boost.Spirit classic (instead of boost::spirit::qi) for parsing JSON.
448	Avoid references to addresses using strings, and use CBitcoinAddress as much as possible. Also added some validity checks on addresses entered using RPC. Closes #447
447	$ bitcoind sendfrom a1 1 error: no response from server I compiled with debugging, and it crashed on an assert() in bash58.h: #2 0x00000037510296e6 in __assert_fail () from /lib64/libc.so.6 #3 0x00000000004dd82e in CBitcoinAddress::GetHash160 (this=0x41801170) at base58.h:300 #4 0x00000000004dd886 in CScript::SetBitcoinAddress (this=0x41800e40, address=...) at script.h:643 #5 0x00000000004ca57d in CWallet::SendMoneyToBitcoinAddress (this=0x1276e70, address=..., nValue=1, wtxNew=..., fAskFee=false) at wallet.cpp:1122 #6 0x00000000004f7c42 in sendfrom (params=..., fHelp=false) at rpc.cpp:834 #7 0x00000000004fec0c in ThreadRPCServer2 (parg=0x0) at rpc.cpp:2232 Do we need to check address.IsValid() in rpc.cpp before calling SendMoneyToBitcoinAddress()? I think other RPC calls which take an address have the same problem too.
446	Makes Bitcoin identify itself as "Bitcoin + version number" instead of the nondescript "libminiupnpc" when forwarding a port via UPnP. A lot of home routers show this information in their web interface, e.g. DD-WRT:
445	$ rm -f ~/.bitcoin/wallet.dat; ./bitcoind -daemon -keypool=0 bitcoin server starting $ ./bitcoind getaccountaddress foo 1HT7xU2Ngenf7D4yocz2SAcnNLW7rK8d4E $ ./bitcoind getaccountaddress bar 1HT7xU2Ngenf7D4yocz2SAcnNLW7rK8d4E $ pkill bitcoind $ rm -f ~/.bitcoin/wallet.dat; ./bitcoind -daemon -keypool=0 bitcoin server starting $ ./bitcoind getaccountaddress foo 1HT7xU2Ngenf7D4yocz2SAcnNLW7rK8d4E $ ./bitcoind getaccountaddress bar 1HT7xU2Ngenf7D4yocz2SAcnNLW7rK8d4E I get the same address generated for multiple accounts in multiple wallets. There are over 60 BTC in the address already, apparently permanently lost. See Perhaps I shouldnt be trying to use -keypool=0, but if so it shouldnt be allowed.
444	Dutch translation fail fixed.
443	These should be invalid.
442	I got tired of test_bitcoin not building, so I touched up #363. Also added a transaction test which tests derserialization and duplicate txins.
441	Report from a security researcher: you should be disabling the listener on 8333/tcp when fTor is set
440	
439	This patch does two bug fixing things and has two documentation corrections: bug fix 1) It allows 32bit builds to write to debug.log past 2GB. I need someone to test this on *bsd and win32. bug fix 2) Change GetFilesize to use stat() instead of fseek() to prevent an integer overflow that would prevent >2GB debug.logs from getting trimmed on most (any?) platforms. This function is only currently called by ShrinkDebugFile which has been updated to pass a string instead of a FILE*. documentation update) Add -logtimestamps and -printtoconsole to -? output. This can be tested with: dd if=/dev/zero of=debug.log bs=$((1024 * 1024)) count=2048; tail -f debug.log & bitcoind -daemon; If logs get appended to where debug.log continues past 2GB it is working. Must be tested on a 32bit build. debug.log should also no longer be truncated on startup as that should be left to the user. This can be tested by restarting bitcoind after the fact and ensuring it is not truncated. The additional help output is pretty straight forward to test: is it there? :)
438	Add makefile.unix definitions (tested on glibc, not sure if *bsd libc support these options) to allow debug.log to grow past 2GB on 32bit builds. I ran into this problem when I noticed that debug.log stops updating at 2GB on my 32bit host. This will also make it so that the block chain can grow past 2GB on 32bit builds. We may need some further options for *bsds libc but I dont have available test installs at the moment.
437	I assume these should be commented deprecated because this is commented deprecated
436	
435	ExtractAddress was called with the keystore as argument in RPC and UI, limiting results to own keys. This caused empty "address" fields.
434	trivial fix for function that must return a success value but doesnt
433	I think the use of the lock CKeyStore::cs_mapKeys on CKeyStore::mapKeys should be better documented and a little checked. CKeyStore::GetPrivKey and CKeyStore::HaveKey should have a comment "// requires cs_mapKeys lock" (and I would add it directly to the CKeyStore::mapKeys, because its used by CScript) And in general, should access to CKeyStore::mapKeys always be prodected by a lock to CKeyStore::cs_mapKeys? At this time CKeyStore::GetPrivKey and CKeyStore::HaveKey dont use a lock, and the same happens with Wallet::LoadWallet, but CKeyStore::GetPrivKey is always called by methods that have the lock, and LoadWallet is called only during startup. So only CKeyStore::HaveKey seems to be "unprotected" (Ive tried looking at the call stack and I wasnt able to see the lock. For example (in reverse order): CKeyStore::HaveKey, ::ExtractPubKey, CWalletTx::GetAmounts, ::getbalance, ::ThreadRPCServer2)
431	This is a two-patch patch against 0.3.24 (since master has a lot of churn in rpc.cpp and I dont want to do all the work merging until I know that this patch has community support). The first commit adds RPC versioning support. As things need to be changed, older clients still need to be supported in some way. This has been done by taking a numeric token from the URL and using that to determine the version. So if the API is accessed at `http://localhost:8332/` then it will use version 0. If `http://localhost:8332/bitcoin.v1` then it will use version 1. And of course, `http://localhost:8332/bitcoin.v2` would be version 2. For the purposes of versioning, I am declaring versions 0 and 1 identical, to avoid confusion. The second commit does two things: 1. Instead of requiring a JSON number, BTC amounts may now be sent as strings. 2. If the service is accessed using version 2 or higher, BTC amounts will be returned as strings instead of numbers. This is an important change, because not all JSON libraries store numbers in a format with 16 decimal digits of precision. Ive tested, and when I set bitcoinds paytxfee setting to 10000000.00000001, Python is unable to handle this many significant digits; it represents the number as 10000000.000000009. While not off by much, it does seem to indicate that representing amounts as pure numbers in JSON data may cause some clients to have accuracy issues. By taking the amounts directly from int64s to strings, the client is free to convert the values to whatever high-precision format it wants (like the `Decimal` type in Python). However, while many languages will convert strings to numbers automatically, many will not, so this change wont be backwards-compatible; hence the new API versioning feature. Here are the effects of this branch, using Python: >>> bitcoindv0 = jsonrpclib.Server("http://chris:testing@localhost:8332/") >>> bitcoindv1 = jsonrpclib.Server("http://chris:testing@localhost:8332/bitcoin.v1") >>> bitcoindv2 = jsonrpclib.Server("http://chris:testing@localhost:8332/bitcoin.v2") >>> bitcoindv0.getinfo()[ubalance]; 0.10000000000000001 >>> bitcoindv1.getinfo()[ubalance]; 0.10000000000000001 >>> bitcoindv2.getinfo()[ubalance]; u0.10000000
430	These are the same changes as my previous pull request. They have been broken down into individual commits by function, with a useful commit message. They optimize profile outliers under a specific test load that represents the load the software sees when its used for pooled mining, that is, when it gets hundreds of RPC requests (mostly getwork) per second.
428	This is a re-issuing of #264, which was lost when merging #334.
427	This commit introduces IPv6 support (selectable at compile time), General changes (even when IPv6 support is not compiled in): * Valid, routable IPv6 addresses are stored and forwarded * Name lookups are done using the general getaddrinfo() call * The detection system for the local address is improved. (addresses are classified according to their reachability, and the most reachable local address encountered is used). * The rule that no two connections to addresses within the same /16 should be attempted, was generalized by defining address groups: * IPv4 addresses are grouped in /16 blocks * IPv6 addresses are grouped in /32 blocks * Tunneled IPv6 addresses use the encapsulated IPv4 address (teredo, 6to4, SIIT, well-known prefix) * Hostnames can be given using the "[host]:port" format. * Support for the "checkorder" message was removed (obsolete, and not worth porting) Behaviour changes when IPv6 support is enabled: * DNS lookups also return IPv6 matches * The listening socket is bound to the IPv6 ANY address (::/128) instead of the IPv4 ANY address (0.0.0.0) * Connections to non-IPv4 addresses are attempted, using IPv6 sockets (connections to IPv4 addresses still use IPv4 sockets) * A local IPv6 address is used instead of an IPv4 one if no routable IPv4 address is available. In this case, it is not advertized through IRC (obsolete). For internal changes, see the commit message. Possible future improvements: * Some pruning/ageing of addr.dat * Cmdline/config options to modify IPv6 behaviour (eg. IPv6-only connection slots, preference for IPv6 connections, ...) * Intelligent choice of nodes to download initial chain from (avoid Teredo tunnels eg.)
426	These are a subset of my bitcoin-4diff patches have been well-tested against the latest release version. Cache the RPC user and password in strRPCUser/strRPCPass so that they dont need to be extracted on each RPC call. Fix a memory leak in the pthreads version of CreateThread.
425	./src/common/evtloopcmn.cpp(75): assert "Assert failure" failed in Yield(): wxYield called recursively In the Bitcoin client version 0.3.24 when clicking between the All Transactions tab and the Sent/Received tab, if I dont give it enough time and I then toggle back to the previous one, I get the Assertion error above. If I wait a second or more between clicks, it works fine, but if I toggle too quickly between the two, then I can replicate this consistently. This is using the Linux 64 binaries of v0.3.24.
424	Line 531 of db.cpp: CAddress addr(psz, NODE_NETWORK); BUT the relevant constructors of CAddress (those starting with a char*) are: explicit CAddress(const char* pszIn, int portIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK) explicit CAddress(const char* pszIn, bool fNameLookup = false, uint64 nServicesIn=NODE_NETWORK) so the first constructor is called and portIn = NODE_NETWORK. Probably there isnt any difference (the port isnt really necessary, all that is done in db.cpp is checking if the address is valid), but the code should be: CAddress addr(psz, false, NODE_NETWORK); or more simply CAddress addr(psz);
423	Previously, mapAlreadyAskedFor was read from, but never added to. The original intent was to use mapAlreadyAskedFor to keep track of the time an item was requested and "Each retry is 2 minutes after the last". This implements that intent.
422	This is another dynamic DNSSeed, running the same software as dnsseed.bluematt.me.
421	adds an option to force resending wallet transactions immediately upon startup
420	Added a new argument to getnewaddress - rawpubkey - that makes it return an object with both the address and the pubkey in hexadecimal form. This is useful for programs that interact with the bitcoin network at a lower level (namely, handling public key data) such as p2pool.
419	I fixed some errors in the translation and added the translation for the wallet encryption feature.
418	Yet another MSVC makefile update.
417	As has been requested by a few people, here is a patch that shows the address coins were generated to in transaction dumps (listtransaction, etc).
416	Using 0.3.23 with Mac OS X 10.6.8 Mouse wheel scrolling does not work on transactions lists, address lists Balance is not selectable so you can copy and paste the value Accessing preferences window shortcut key should be Macs universal shortcut for prefs "command ," Thank you for your time.
415	This patch allows you to: - see all addresses, including change - see which addresses are linked together (does recursive expansion of address linkages) - select which address(es) to send from, rather than letting the client to chose for you Full details and video here:
414	
413	Wired got crossed and non-rebased stuff was merged.
412	Im resurrecting this pull-request by patvarilly, which is very important I think. (OSX users seems even more affected, see Issue #258) The original pull/388 is not available anymore for unknown reasons (404). The first commit already had two ACKs. I added a similar change for DNS seeding.
411	
410	
409	
408	Hi, "A new address does automatically get generated but no it doesnt get added to the addressbook." - Stephen Gornick I have two Bitcoin clients running on two different computers: Computer A: Bitcoin 0.3.23 Computer B: fresh installed Bitcoin 0.3.24 But the new Bitcoin 0.3.24 does not behave the way it did before... I mean, I sent B$0.01 two times, from Computer A (0.3.23) to Computer B (0.3.24) but, at the Bitcoin 0.3.24, NO NEW ADDRESS automatically appeared at "my receiving address" in the AddressBook (I can see the new address at the main interface screen, but no anywhere else)! But it happens in Bitcoin 0.3.23... Where can I manage/see my automatically generated new Bitcoin Addresses? Reference: Thanks! Thiago
407	Pushing Cancel button in the new Add Encryption dialog triggers an unexpected message: "The supplied passphrase was too short." Same for Change passphrase dialog: "The passphrase entered for the wallet decryption was incorrect." With little effort the ui could look a little bit more "professional".
406	Two more warning fixes (one of which got lost in the rebase for pull request #399).
405	This was a bug, as it was changed unintentionally. Im not sure its such a bad idea though, as autogenerated addresses seem to clutter the address book for many. Maybe a "add current default address to wallet" button would be more useful than auto-adding?
404	Missed a space.
403	Three commits: * The first one gets rid of the global mapPubKeys, by indexing keys by address instead of by pubkey. This brings a consistent interface to CKeyStore, and testing for ownership of a key becomes a call to CKeyStore::HaveKey(), instead of doing a lookup in mapPubKeys. * The second one introduces the class CBitcoinAddress - represented by its raw data bytes (20 bytes containing the Hash160 of the pubkey), but convertible to string representation. In most places in the code, the use of a strAddress or hash160 as address identifier is replaced with CBitcoinAddress. (CAddress already existed, so I needed another name) * The third one splits code not specifically related to addresses into a common CBase58Data
402	Fixes #397. Thanks to for providing a high resolution image.
401	Fixes #397. Thanks to for providing me a high resolution image.
400	I have used EncFS and MacFUSE to encrypt my "~/Library/Application Support" directory on MacOS X (10.6.8). Im attempting to use the latest version (0.3.23) of the official client. However, when I attempt to start the client, I get the following error: ``` EXCEPTION: 22DbRunRecoveryException DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery bitcoin in AppInit() ``` By experimentation, I have found that the trouble file is `wallet.dat`. All the other files can be encrypted without a problem. The exact encryption scheme is that Application Support is symlinked to ~/.crypt/Library/Application Support, where ~/.crypt is an EncFS mount. Other applications work fine with this (with the notable exception of the App Store). This happens both with a clean startup and a pre-existing wallet.
399	Fixes several (classes of) warnings to allow compiling with -Wall and being less overwhelmed.
398	All is in the title. See also this discussion: Regards, Carlo
397	The current Windows icon goes up to 48x48, which is fine on XP, but it lacks the large resolutions supported and encouraged by Vista and 7. Im willing to fix this, but I need to get my hands on a high resolution copy of the current icon, which I have been unable to locate. Alternatively, I can use [one created by bitboy](http://forum.bitcoin.org/?topic=1756.0) or the [bitcoin.org logo](http://forum.bitcoin.org/?topic=1631.0) as source material.
396	This replaces the default and dated-looking image in the NSIS installer with the logo from bitcoin.org. It also sets the default compression to LZMA (vs current zlib), which nearly halves the size of the installer.
395	Open Bitcoin and Send Bitcoin are somehow translated to the same thing, see:
394	Im pull-requesting this so that people know this stuff exists. Consider it as low priority, and If theres some interest in it, I might keep this up to date for some time. Pluses: - Command line and configuration files are fully parsed before being taken into account, errors are reported (including misspelled or unknown parameters). - A nice interface is provided to access options & configuration from source code (cf. option.h). - Single definition of options and default values, which have been moved to the top of .cpp files. - Checks for integer overflows in configuration values. - New rpc command "reloadconfig" to dynamically update configuration parameters (Issue #309). Command line parameters will not be overridden. Notice that many core parameters are used only during startup. - Option -conf is now enough to configure everything (Issue #140). - A way to force listing of hidden options (-help=allopts) and access to help messages is possible even if bitcoin is already running. - Fix erroneous error message with respect to the path of the configuration file when using -testnet (Issue #241). - Removed \n and other data from translatable strings (Issue #313). - Using boost to deal with most filesystem paths. - Slightly faster access to configuration values (no map lookups). Minuses: - Access to configuration values are a bit less recognizable in source code. - Relies a little deeper on boost (but without added dependencies). - Uses some hacks around boost::program_options to recover original bitcoin command line style. Notes: - This has been tested a little bit on unix (linux), needs to be tested on other arches (Windows).
393	uibase.cpp has this: m_staticTextMain = new wxStaticText( this, wxID_ANY, _("[...] This product includes software developed by the OpenSSL Project for use in the \n OpenSSL Toolkit (http://www.openssl.org/) and cryptographic software written by \n Eric Young (eay@cryptsoft.com) and UPnP software written by Thomas Bernard."),[...] but in the about dialog I only see 2 of the 3 lines of text. The first line has the last word, "the", wrapped onto the 2nd line, which contains only that word. The 3rd displayed line is the "OpenSSL ... by" line, and the "Eric ... Bernard" line isnt displayed at all. Ill see if I can attach a screenshot. This is in Ubuntu 11.04 running the XFCE4 desktop environment and bitcoin 0.3.24-beta
392	Minor patch to factor out another magic number
391	Adoption isnt high enough. Please fix quickly! To reproduce, check the wallet in your pocket. Is it there? See what I mean? Also, you can try to offer the Starbucks person your bitcoins but (s)he wont accept them for coffee! Ive tried this many times. If you check Amazons payment options, youll also notice bitcoin isnt one of them. All versions are affected :(
390	No options in preferences to change the language. Using version 0.3.23 on OS X 10.6.8
389	Function should return true in case of success, currently returns nothing. This trivial patch fixes that.
387	Having wallet.dat inside a folder alone, would allow the symlink/encryption only of that folder without having to encrypt the entire block chain inside a TrueCrypt volume. This would make it easier to handle, encrypt and backup multiple wallets.
385	Fixed 2 Resource Leaks
384	Stupid, stupid me...there is exactly 0 way to convince make to execute a conditional based on a target-specific variable. makefile UPnP was reverted to always off-by-default, but bitcoin-gui has it enabled by default when built via gitian.
383	Changing the default address from the GUI did not update vchDefaultKey.
382	When I launch bitcoin gui client under KDE (Fedora 14) with option minimize to system tray, it generates lot of blank spaces there. Each time I maximize client, it disappears from tray, but leaves a blank space where it was. Then I minimize client, and bitcoin icon in tray appears in a new position. So the result you can see here: This is not happen when bitcoin GUI not running.
381	As an alternate to #378.
380	This adds the relevent patches which are applied to wx, and updates for cross compiling.
379	Using the comma as thousands separator causes problems for parts of the world where comma == decimal point. Germans sending 0,001 bitcoins are unpleasantly surprised when that results in 1 BTC getting sent.
378	The motivation here is that if a wallet is encrypted, old versions should simply fail to load the wallet. Additionally, if a wallet gets corrupted, the client should always fail to load the wallet to give the user a chance for manual recovery. This needs to go into 0.3.24, so that users who downgrade dont mess up their wallet by adding unencrypted keys to an encrypted wallet, making all versions unable to use the wallet.
377	With miniupnpc-1.5.20110618 installed I get the following build error: $ make -f makefile.unix USE_UPNP=0 bitcoind /usr/include/miniupnpc/miniupnpc.h: In function void ThreadMapPort2(void*): /usr/include/miniupnpc/miniupnpc.h:53: error: too few arguments to function UPNPDev* upnpDiscover(int, const char*, const char*, int, int, int*) net.cpp:1071: error: at this point in file /usr/include/miniupnpc/upnpcommands.h:117: error: too few arguments to function int UPNP_AddPortMapping(const char*, const char*, const char*, const char*, const char*, const char*, const char*, const char*, const char*) net.cpp:1085: error: at this point in file
376	v0.3.24rc1
375	-----BEGIN PGP SIGNED MESSAGE----- Hash: RIPEMD160 Logfile: #bitcoin-mining_20110702.log Retrieved: 20110703011120 GMT-0800 Tags: sha256-preimage Participants: midnightmagic;mrb_;Diablo-D3 [01:07:47] <midnightmagic> i totally just doubled my hashrate and.. it doesnt matter. still peanuts. jesus.. hey screw you enormous mining public in general!!!1! [01:53:03] <mrb_> midnightmagic: using that SHA-256 optim ? ;-) [01:54:19] <midnightmagic> mrb_: no, I just brought in a pile of fresh 6970 and got them set up. [01:55:08] <midnightmagic> mrb_: youre teasing me; what sha-256 optim are you talking about? the maj() instruction saves? [01:55:18] <mrb_> no [01:56:21] <mrb_> something else. but I should probably not disclose. some in the [...] elided embarrassing chatter [...] [02:02:57] <mrb_> lets just say that if Bitcoin keeps being successful, within 5-10 years SHA-256 will be completely broken with pre-image attacks. [02:02:32] <Diablo-D3> mrb_: is the optimization workable in opencl? [02:04:43] <mrb_> Diablo-D3: yes. it is an algorithmic optim. [02:04:53] <Diablo-D3> mrb_: how big of one? [02:05:20] <mrb_> 1+ Ghash/s on one 5970. [02:05:38] <Diablo-D3> I was asking in percentage [02:05:46] <mrb_> basically 2x [02:05:53] <Diablo-D3> .... you are full of shit. [02:06:08] <mrb_> yes I am. [02:06:36] <mrb_> how do I get out of this discussion, other than "good night guys"? [02:07:39] <mrb_> alright. night guys ;) mrb_ is a BlackHat Sec Briefings presenter; designer of whitepixel, one of the fastest brute-force crackers that exists; writes his mining kernels in CAL/IL directly; and designs faster MD5 crackers in assembly.. for fun: Suffice to say, mrb_ is not an idiot, and writes software that surprisingly backs up his claimsclaims that would be outlandish if random nobodies spouted them. mrb_ is not a random nobody. If such an optimization exists, it is critically important that a migration path to a more modern hash algorithm be designed into bitcoind now so that, should 2x or 10x speed increases be created and published, bitcoind would not taken out as part of the collateral damage, through destabilization of mining efforts and the hit to confidence in the underlying crypto. This isnt a question of whether I personally believe him. I personally think hes full of crap. It doesnt matter. We are locked into one hashing algorithm and this sort of rumour exposes a weakness that we neednt have. -----BEGIN PGP SIGNATURE----- iEYEAREDAAYFAk4QLG8ACgkQ2p+H2HZY90HiEgCfYvQZYdsHJUT4aEasuqLlEFHi rVwAmwcSs9WyumpJq4y8bnRXOXOsq+x8 =TCoE -----END PGP SIGNATURE-----
374	
373	As I mentioned in the comments, my last Visual C++ makefile pull request wont work with the latest source tree. Sorry about that, here is a fix.
372	This is a bit of an ugly hack, but its the only way to do it.
371	The makefile for Visual C++ was outdated and broken. I updated it to support UPnP, use the new location of the resource files, and a couple other minor things that prevented it from building.
370	Sorry, but I cant see a way to request a feature, so Im logging an issue. To quote from a thread of someone reformatting their hard disk and thinking that they had a back up of the wallet.dat when they in fact actually backed up the program files.. Maybe add a backup option in the client. You click on backup and it prompts you with which drive do you want to save the wallet.dat as wallet-yyyymmddhhmmss.dat ? With big red warnings that the backup file is not encrypted, the same care must be taken with it as with a real life wallet full of cash. And that if you have no backups and your hard drive dies, you have lost your wallet, with little chance of recovering it. Instead of people magically knowing where to go to find their current wallet.dat file. Windows: C:\Documents and Settings\username\Application Data\Bitcoin (AKA) %APPDATA%\Bitcoin Mac : ~/Library/Application Support/Bitcoin Unix : ~/.bitcoin Bert
369	Introduce SendBufferSize() and ReceiveBufferSize(), and limit the blocks sent as response to the "getblocks" message to half of the active send buffer size.
368	As we have no testnet dnsseeds.
367	This seed will pull a random set of 20 nodes from the network which are tested to be online instead of a static list.
366	This pull adds 2 new command line arguments, -ircport and -irchost. This allows the internal hostname and port to be overridden. This is for the benefit of users who cant connect to standard IRC ports due to ISP restrictions.
365	Howdy! When connecting to peers, and periodically as data is moved around, the number of known blocks should be advertised, then the maximal response between currently connected peers shown as an estimate of the expected block count. This would be especially useful for new users to clearly and quickly identify when they have finished their initial local block cache building. Alice.
364	When miniupnpc isnt installed, building fails due to wrong check in makefile.unix.
363	I made some changes in anticipation of unit tests for scripts and OP_CHECKSIG, etc. Feedback is welcome.
362	Fixes issue 340:
361	This time commits are squashed.
360	For a pull after new wallet crypto.
359	in the linux clients options you find this wording: "start bitcoin on window system startup". Is it on window or on system startup? I think not both at once.
358	This is a rebased series of patches from pull request #335 1) Fix the synchronization of sending addresses between a CWallet and its associated CWalletDB (this was reported independently in Issue #350). 2) Add a check for validity of sending addresses (Issue #328). 3) Avoid propagation of unnecessary updates to CWalletDB. 4) Fix the behavior of setaccount on sending addresses that are already listed in the Address Book. (Issue #329). 5) Add wallet methods GetDefaultAddress and SetDefaultAddress (contributed by laanwj in Issue #350).
357	doc/release-process.txt: This adds some reminders to release-process.txt to bump build numbers in the code and the new OSX app bundle. contrib/Bitcoin.app: Adds the OSX App Bundle itself. (Originally from Laszlo Hanyecz <solar@heliacal.net> waiting on email response the list is cced on to confirm licensing semantics.) doc/build-osx.txt: Fixes line wrapping to be consistent. Fixes hard tabs to be spaces. Fixes checkout instructions to actually give the correct location on github instead of old SVN repo. Changes path ~/bitcoin/trunk to ~/bitcoin/bitcoin/src to be in-line with current source layout. Changes instructions for putting the resultant binary into the App Bundle. Adds notes on openssl/bdb/miniupnpc/wx builds about system versions and macports versions.
356	make -f makefile.{unix,osx,mingw} test_bitcoin to compile dumb, do-almost-nothing placeholder unit tests.
355	When a process is polling bitcoind for new transactions, the existing RPC command listtransactions is not adequate. In particular, since theres no way for listtransactions to report all transaction AFTER a certain point in time, the polling process will necessarily have to grab more and more transactions and sort through them, or risk missing transactions if it uses a limit thats too small. This new command listtransactionsaftertime solves the issue. In particular, you use listtransactionsaftertime to get all transactions after a particular time (as timestamped on all transactions). A typical polling process can then grab all transactions after the last seen transaction time and be guaranteed a complete transaction log.
354	These commits introduce CWallet::CreateExactTransaction() function that works like CWallet::CreateTransaction(), but takes explicit list of prev_out transactions for sourcing the new transaction and fixed value of transaction fee. Furthermore, new RPC call sendexact is introduced; it works like sendmany, but takes explicit list of transactions to use as coin sources, and explicit value of transaction fee. All outputs of the listed transactions that the account can claim are used to source coins; the output of the new transaction must be exactly the same amount, the user is responsible for dealing with any change. The user is also responsible for setting the transaction fee to such a value that other nodes will relay the transaction. The point is to provide a low-level interface for making transactions without all the auto-guessing implicitly done by the client. My primary motivation is that I am a control freak and I want to have precise control over the addresses used as "sources" of my transactions. There are other applications too - even if more specific interfaces might be more suited to them, this interface makes them possible at all as the lowest common denominator. E.g. people who wish to be sure no transaction fees will be paid for their transaction can use this interface. Or people wishing to try out different coin selection algorithms (or when coin selection makes sense at the moment of transaction setup, e.g. in case of anonymizers). Q: Why use explicit transactions instead of addresses? A: In reality, you do not quite transfer money "from" an address. Address is just a token that proves you are authorized to claim a particular amount of bitcoins listed as one of outputs of some transaction. Specific use-cases might be simplified, but you would still be in hands of a fixed coin selection algorithm. You can use (somewhat laborously) listtransactions or external service to discover transactions that send money to a given address. Q: Why use account instead of explicit addresses? A: First, it is more consistent with the other "send" interfaces and the wallet organization. Second, I believe account is the right abstraction - as mentioned, address is just a token for claiming some bitcoins, but different kind of claim proofs might be used (e.g. the now-deprecated "send to IP address", or it could be possible to also specify password-protected coins). In the future, you could associate further methods of authentication with accounts, but addresses are limited. If you require a specific set of addresses to be used, you can set up an ad-hoc account. Q: What does that bit about "change" mean? A: If transaction input claims some output of a previous transaction, it must claim all the coins in the output. If you need to transfer smaller amount than that, you must specify what to do with the remaining amount (change). The built-in coin selection algorithm either sends them to a new address (for better anonymity) or returns them to the source address. Here, you are responsible for manually specifying the destiny of your remaining amount. Q: Can I be finally sure I pay only the TX fee I specify? A: Yes, the TX fee you specify is final. However, please note that if the new transaction is large (i.e. has many inputs and outputs) or transfers too small amount and you do not offer any TX fee, it may not be accepted by any other nodes. Note that this is more serious than not being included in a block - you could just wait longer for a benevolent miner. In these circumstances, your transaction is not likely to even *reach* a mining node because the P2P network will not relay it. (If you like the feature, you can send donations to 19VF444umGxX76DZwPuWVMHpv7i84DHM1D.)
353	When I send a small transaction (< 0.5 BTC, for me at least; I dont know where the actual line is), the BitCoin client pops up a warning that says that Im "over the size limit." As I understand it, the fee is imposed for *very small* transactions (which makes sense, as Ive sent large transfers before and not seen it)-- so the string should probably be changed. Edit: looking more at the code, since it can be both over *and* under the size limit and trigger that error, its more complex; Ill work on a rewording and submit a pull request when I have one.
352	This commit adds support for ckeys, or enCrypted private keys, to the wallet. See commit message for a more detailed description.
351	On a default Lucid install (and probably many other platforms), if you increase the application font size it creates a couple of usability issues. 1. The Balance label gets covered up by the main notebook widget. Resizing the window doesnt help. 2. Most of the Settings->Options dialog gets truncated. Can the balance label be made to push down the rest of the UI as needed like in gtk? The Options window is easily fixable by making it resizable. Thanks for looking!
350	Fix update of internal data structure (mapAddressBook) after changes to the address book, and add convenience methods EraseAddressBookName, GetDefaultAddress, SetDefaultAddress to be used from UI. The problem was introduced in the new CWallet class; mapAddress book used to be updated in db.cpp. It now makes more sense to do the update directly in CWallet.
349	To delete the signature from scriptSig, OP_CHECKSIG constructs a new CScript object from the signature found on the stack and then looks for an exact copy of this object in scriptSig. However, if the original signature was pushed using OP_PUSHDATA and the signature is short enough to be pushed using one of the 1-75 opcodes, the two objects will not match and the signature verification will fail even though the values are the same. This patch fixes this by comparing the data-pushing opcodes payload only (excluding the opcode itself). Ive tested this with valid testnet transactions, which are verified correctly. As this is my first bitcoin patch and it touches a rather sensitive part of the code, please review/test it for yourselves as well!
348	So I thought Id spend my sunday afternoon porting my GUI to the newest bitcoin git version. I got lost in the forest on the first file I tried to compile, though; qt/bitcoin.cpp (mine) includes util.h util.h includes uint256.h uint256.h includes serialize.h serialize.h includes wallet.h wallet.h includes bignum.h bignum.h includes utl.h Thats one epic dependency loop. I see no trivial way to split it up (like adding forward declaration), as there is a lot of inline code in the headers that uses the actual types. Of course, I could get my hacksaw and saw off pieces here and there until this until it compiles again. But it might be better to make an actual plan as to how to split up the includes. How is this *supposed* to work?
347	The initialization of the default key used keyUser instead of vchDefaultKey. keyUser is now complete removed.
346	Say you have 2 receiving addresses in your wallet.dat named A1 and A2. If there is a transaction that has outputs for both A1 and A2, bitcoin will only show one transaction in the GUI (and thus affecting only A1 or A2) with the amounts received by A1 and A2 added.
345	
344	HI! Im one of the founders of Bitcoins.lc - were experiencing some problems with bitcoind as a backend. The error consists of mainly that the amount of connections between bitcoind and pushpoold is insane. This is due to the fact the bitcoind does not support keep-alive for RPC-connections. pushpoold is based upon libcurl and should be able to do so out of the box. Each new getwork request from clients opens up a new connection between bitcoind and pushpoold to transfeer data. Could anyone please take a look at this problem? Id gladly pay 10 BTC for implementing a keep-alive patch for bitcoin. / jim
343	In order to be a proper HTTP implementation clients that arent allowed to connect to the RPC server (using -rpcallowip), should receive a proper HTTP response. So instead of closing the connection on them send a 403 Forbidden status. Signed-off-by: Giel van Schijndel <me@mortis.eu>
342	This addresses issue 337. When you specify a -datadir that does not exist, bitcoin now complains and shuts down gracefully.
341	Inline comment about VirtualLock() and general idea come from Matt Corallos [encprivkeys branch](/bitcoin/bitcoin/pull/232). By adding it to the custom allocator like this though, its done for us on all CPrivKey objects automagically.
340	using the 32bit official linux binary build of bitcoin, on ubuntu lucid 32bit. when there are no network interfaces up (i.e., network cable disconnected), bitcoin client fails to start with a segfault. no such issue when a network cable is connected and an interface is up. no such issue when an interface is up, but firewall blocks all incoming and outgoing packets. if bitcoin is started, then network cable is unplugged, bitcoin hard crashes. issue does not occur with previous release, 0.3.22. gdb traceback of the segfault included below: ``` $ gdb bitcoind GNU gdb (GDB) 7.1-ubuntu Copyright (C) 2010 Free Software Foundation, Inc. License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html> This is free software: you are free to change and redistribute it. There is NO WARRANTY, to the extent permitted by law. Type "show copying" and "show warranty" for details. This GDB was configured as "i486-linux-gnu". For bug reporting instructions, please see: <http://www.gnu.org/software/gdb/bugs/>... Reading symbols from /home/dfolkins/bin/bitcoind...(no debugging symbols found)...done. (gdb) run Starting program: /home/dfolkins/bin/bitcoind [Thread debugging using libthread_db enabled] [New Thread 0xb7abbb70 (LWP 2010)] [New Thread 0xb72bab70 (LWP 2011)] [New Thread 0xb6ab9b70 (LWP 2012)] [New Thread 0xb62b8b70 (LWP 2013)] [New Thread 0xb5ab7b70 (LWP 2014)] [New Thread 0xb52b6b70 (LWP 2015)] [New Thread 0xb4aa7b70 (LWP 2016)] [New Thread 0xb42a6b70 (LWP 2017)] [Thread 0xb72bab70 (LWP 2011) exited] Program received signal SIGSEGV, Segmentation fault. [Switching to Thread 0xb5ab7b70 (LWP 2014)] 0x002e150b in vfprintf () from /lib/tls/i686/cmov/libc.so.6 (gdb) bt #0 0x002e150b in vfprintf () from /lib/tls/i686/cmov/libc.so.6 #1 0x002e2ec2 in ?? () from /lib/tls/i686/cmov/libc.so.6 #2 0x002dde13 in vfprintf () from /lib/tls/i686/cmov/libc.so.6 #3 0x0038203d in __vfprintf_chk () from /lib/tls/i686/cmov/libc.so.6 #4 0x08056458 in ?? () #5 0x080847d9 in ?? () #6 0x08091c7a in ?? () #7 0x08092853 in ?? () #8 0x0015296e in start_thread () from /lib/tls/i686/cmov/libpthread.so.0 #9 0x0036ea4e in clone () from /lib/tls/i686/cmov/libc.so.6 (gdb) ``` if you need further information, please ask. but otherwise, should be able to confirm this with (i think) any 32bit linux. or if not, then least, 32bit ubuntu lucid. :)
338	give the user the option to select a path and a name for his wallet.dat to prevent viruses/trojans to find the file.
337	I experienced this while testing out testnet-in-a-box. If I specify a path to a directory that does not exist, but is 1 directory level lower than an actual path, I get a "missing bitcoin.conf" error: >candide@candide-VirtualBox:~/code/bitcoin_testinbox$ bitcoin -datadir=/home/candide/code/bitcoin_testinbox/asdf/ -daemon >candide@candide-VirtualBox:~/code/bitcoin_testinbox$ bitcoin server starting > >candide@candide-VirtualBox:~/code/bitcoin_testinbox$ Warning: To use the "-daemon" option, you must set rpcpassword=<password> in the configuration file: /home/candide/code/bitcoin_testinbox/asdf/bitcoin.conf >If the file does not exist, create it with owner-readable-only file permissions. >10:58:06 PM: Debug: In file ./src/unix/threadpsx.cpp at line 253: pthread_mutex_destroy() failed with error 0x00000010 (Device or resource busy). ---------------------- Also, the program actually creates the non existent directory. Additionally, If I specify a path more than 1 directory level lower than an existing path, I get a much more verbose error to stderr: >candide@candide-VirtualBox:~/code/bitcoin_testinbox$ bitcoin -datadir=/home/candide/code/bitcoin_testinbox/asdf/new/dir -daemon >candide@candide-VirtualBox:~/code/bitcoin_testinbox$ ************************ EXCEPTION: N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10filesystem22basic_filesystem_errorINS3_10basic_pathISsNS3_11path_traitsEEEEEEEEE boost::filesystem::create_directory: No such file or directory: "/home/candide/code/bitcoin_testinbox/asdf/new/dir" bitcoin in AppInit() >************************ >EXCEPTION: >N5boost16exception_detail10clone_implINS0_19error_info_injectorINS_10filesystem22basic_filesystem_errorINS3_10basic_pathISsNS3_11path_traitsEEEEEEEEE >boost::filesystem::create_directory: No such file or directory: "/home/candide/code/bitcoin_testinbox/asdf/new/dir" bitcoin in CMyApp::OnUnhandledException() >terminate called after throwing an instance of >boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<boost::filesystem::basic_filesystem_error<boost::filesystem::basic_path<std::string, boost::filesystem::path_traits> > > > > what(): boost::filesystem::create_directory: No such file or directory: "/home/candide/code/bitcoin_testinbox/asdf/new/dir" I have some thoughts on this. Number 1, the code should check if the datadir being specified actually exists before it continues. If the datadir does not exist, the program should probably exit with a "specified datadir does not exist" error. Further, when passing the -daemon flag, the bitcoin program should create a log file automatically in the datadir directory, or allow a -logdir at the command line (if one is not specified, default to datadir for logdir, or syslog, or anything other than screen dumps). All stderr should be directed to the log file instead of the terminal.
336	Ideal build process: ``` git clone . ./configure && make ``` List instructions and build dependencies (packages) for common distros (Debian/Ubuntu, Fedora, etc) in an INSTALL file.
335	Add a check for validity of sending addresses (Issue #328). Fix the behaviour of setaccount on sending addresses that are already listed in the Address Book. (Issue #329). This also fixes the syncrhonization of sending addresses between a CWallet and its associated CWalletDB, and avoids unnecessary CWalletDB updates. This is my first commit. It is quite small, but please review it in details before the pull. Thanks.
334	Some problems found by ius: * compiler complains with no return after critical section block * CKeyStore::GetPrivKey(key) was undefined for unknown key * missing return statement in GetChange()
333	Anyone can replicate this issue : 00:23:40 <MrSam> ok 00:23:47 <MrSam> im testing this on testnet-in-a-box with 2 nodes 00:23:55 <MrSam> a has 3650 / balance B has 0 00:24:14 <MrSam> i send 3600 from A to B with transaction fee cost of 9 00:24:28 <MrSam> so A now has balance of 41 and B will get 3600 00:24:44 <MrSam> i then start the miner on a and i get a immature block with amount 59 00:24:58 <MrSam> so i should have a balance of 100 00:25:05 <MrSam> but if i run getbalance i see 91 9 btc is lost. Either the balance on A should still be 41 and not include the immature block, or 100 if it includes it. Never 91. client A: balance = 3650 listtransactions { "account" : "", "address" : "mjvtoRo55x4rfSftjAJcyKvpVkgi4LEDVD", "category" : "send", "amount" : -3600.00000000, "fee" : -9.00000000, "confirmations" : 1, "txid" : "a8ff67cfe52ec04ed0b988419d2144077cb918cb889f9e4498b6a5fb0e63b18d", "time" : 1308521616 }, { "account" : "", "category" : "immature", "amount" : 59.00000000, "confirmations" : 1, "txid" : "1b504ca8c8f200c5d37b1095902b7610b10484b6b608e48bbfe2411c69d480a5", "time" : 1308521869 } ] getbalance 91.00000000 client B listtransactions { "account" : "getfrom1", "address" : "mjvtoRo55x4rfSftjAJcyKvpVkgi4LEDVD", "category" : "receive", "amount" : 3600.00000000, "confirmations" : 1, "txid" : "a8ff67cfe52ec04ed0b988419d2144077cb918cb889f9e4498b6a5fb0e63b18d", "time" : 1308521869 } getbalance 3600.00000000
332	This fixes a fail to compile with Boost 1.46.1, need to include boost/filesystem.hpp
331	Minor translation update to fix the break of all translations of "-beta" and " beta" in 6f460bace604361d3b2306f3f1e81198301c063a. Also regen all binary mos (not sure how long its been so might as well) and add two translations of "Specify connection timeout (in milliseconds)\n" (more are needed).
329	The following: bitcoind setaccount <unknown_address> label adds a new sending address in the Address Book of the GUI. Using: bitcoind setaccount <known_sending_address> label will rename the sending address listed in the Address Book. This is fine, but, in the same time, it will also pop up a new receiving address labeled with the old name. This behavior is quite confusing and I think it is not expected.
328	Sending addresses in the Address Book are not checked for validity. Using the GUI, I added a space to some sending address (not on purpose) and for a long time, I could not figure out why its label was not displayed in my list of transactions. I think those addresses should be checked for validity. Using setaccount in bitcoind, validity of addresses are checked. (There is another issue with setaccount, but I think it deserves a separate report)
327	For my Qt GUI, I display a progress bar on first start to keep track of how far the initial block chain download is. This needs a conservative estimate of the total blocks in the chain. Currently, one such estimate is hardcoded into IsInitialBlockDownload as a magic number. This patch moves the magic number to a constant, and adds a function GetTotalBlocksEstimate() to retrieve the value (always 0 for testnet). According to the forum topic it would be possible to compute a real estimate based on version messages; this same interface could later be extended to return this.
326	.Now that IRC is partitioned we wont actually see most nodes coming and going, so excluding these nodes greatly increases the amount of clique formation. This was bad even before the channel split because the /who output was limited, so wed end to stop connecting to long running stable nodes.
325	Sorry for my english. Building of bitcoin fails with gcc-4.6, glibc-2.13, boost-1.46.1 and wxWidgets-2.9.1: <pre><code> g++ -c -O2 -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DNOPCH -DFOURWAYSSE2 -DUSE_SSL -DUSE_UPNP=1 -DBOOST_FILESYSTEM_DEPRECATED -I/include/ -I/usr/lib/wx/include/gtk2-unicode-2.9 -I/usr/include/wx-2.9 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -pthread -DGUI -o obj/util.o util.cpp util.cpp: In function void GetDataDir(char*): util.cpp:715:9: error: create_directory is not a member of boost::filesystem make: *** [obj/util.o] Error 1 </code></pre> and <pre><code> g++ -c -O2 -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DNOPCH -DFOURWAYSSE2 -DUSE_SSL -DUSE_UPNP=1 -DBOOST_FILESYSTEM_DEPRECATED -I/include/ -I/usr/lib/wx/include/gtk2-unicode-2.9 -I/usr/include/wx-2.9 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -pthread -DGUI -o obj/net.o net.cpp net.cpp: In function void ThreadMapPort2(void*): net.cpp:1067:63: error: too few arguments to function UPNPDev* upnpDiscover(int, const char*, const char*, int, int, int*) /usr/include/miniupnpc/miniupnpc.h:53:1: note: declared here net.cpp:1081:58: error: too few arguments to function int UPNP_AddPortMapping(const char*, const char*, const char*, const char*, const char*, const char*, const char*, const char*, const char*) /usr/include/miniupnpc/upnpcommands.h:117:1: note: declared here make: *** [obj/net.o] Error 1 </code></pre> Now sorry for my patch, but with this bitcoin can be compiled: I use ccache and /include/ for boost headers(see changes in makefile.unix), but this may not be necessary to other.
324	Given a transaction hash, getrawtransaction returns that transaction and some metadata. Example: (this is on the testnet) $ ./bitcoind getrawtransaction ba73f8c8701550e50f667c6c02d671afd3f95069ce02938453048e79b0812bba { "tx" : { "version" : 1, "txins" : [ { "previous_output" : { "hash" : "daea922234887459ba985977112454895466a36c167921651111596cc439add4", "index" : 0 }, "script" : "47304402206fdeaabac261ef0e0183892555a7cdc94d23e4a01c1c55509d352215ee1628c302204dae58fa97ecf77cede4d340573f62abe13f1b7d9bc487a8e9230d4e9557fdd50141043338498afdbe933339072d3fe6ed36196b2e868f888df55e1b32ad27e418f3621628941482a816acde7b53d651fc13b3208885c07e6f1c54b4c04a5c5d009d86", "sequence" : 4294967295 } ], "txouts" : [ { "value" : 29462000000, "script2" : "76a9142a5ce61dff67eb864979905d2ca05d000a0586fd88ac" }, { "value" : 500000000, "script2" : "76a9142400224224860152f4211a2b9daa6c45c79d04f388ac" } ], "lock_time" : 0 }, "parent_blocks" : [ "00000000004610ac94e40725653c5ff54588a41e24d284244fcd4efd36f12ee9" ], "txout_claims" : [ [ "9f8aa7191c75c96d1cdf8a9fe78a5b4fa1d772cbe7345c1cabdb3f7c91c71cf7" ], [ ] ] }
323	For account "*" the transaction numbering becomes incorrect when crossing multiple accounts. Demonstration: > bitcoind listtransactions "*" 3 0 [ { "account" : "", "category" : "generate", "amount" : 50.00000000, "confirmations" : 557, "txid" : "54b109e159488391717d1abebc51bbd52f6eae853a6e9bff2a43db0c1039d738", "time" : 1308006088 }, { "account" : "test", "address" : "mm1nWPrMuSV2QCLyWo26AH2Pq8AoBGKBcZ", "category" : "receive", "amount" : 1.00000000, "confirmations" : 164, "txid" : "9eb0feec97f1c5df9e8af9aac1cddf9bc01a05ec168dadb8977e2a5d026fcb1c", "time" : 1308087257 }, { "account" : "", "address" : "mm1nWPrMuSV2QCLyWo26AH2Pq8AoBGKBcZ", "category" : "send", "amount" : -1.00000000, "fee" : 0.00000000, "confirmations" : 164, "txid" : "9eb0feec97f1c5df9e8af9aac1cddf9bc01a05ec168dadb8977e2a5d026fcb1c", "time" : 1308087257 } ] It would be natural to assume that if we list the second transaction (number one counting from zero), it would be the transaction in the "test" account. But instead we get the third transaction: > bitcoind listtransactions "*" 1 1 [ { "account" : "", "category" : "generate", "amount" : 50.00000000, "confirmations" : 557, "txid" : "54b109e159488391717d1abebc51bbd52f6eae853a6e9bff2a43db0c1039d738", "time" : 1308006088 } ]
322	For account "" or "*" listtransactions reports transactions for "from" arguments way past the last actual transactions available. Test of high "from" numbers: > bitcoind listtransactions "" 1 9999999 [ { "account" : "", "category" : "generate", "amount" : 50.00000000, "confirmations" : 897, "txid" : "486dfdb3b9f61b4fa5b8b98c388e5b4b71f05a85371dd653aafe23d93aa56f08", "time" : 1307918798 } ] This is not actually transaction 9999999, but rather transaction 9: > bitcoind listtransactions "" 1 9 [ { "account" : "", "category" : "generate", "amount" : 50.00000000, "confirmations" : 897, "txid" : "486dfdb3b9f61b4fa5b8b98c388e5b4b71f05a85371dd653aafe23d93aa56f08", "time" : 1307918798 } ] I realize the transactions are not actually numbered, but this behavior is unexpected. It does not seem to happen with other accounts than "" and "*".
321	When restoring the wallet from backup to which coins were sent while it was "offline", those transactions show up only when replacing the blockchain with one where the last block is older than the first transaction and then let new blocks be downloaded from the software. When replacing the wallet and leaving blockchain up-to-date only transactions from that moment onwards would show up. This problem still exists even with the newest version of the client.
320	At the moment, bitcoin does not verify that the outscripts of transactions are syntactically valid. Thus it is possible to create a transaction with junk in its outscripts and get it into the block chain. No one could spend such coins (at least until the opcodes change). The question is, should such garbage transactions simply be rejected out of hand instead? I believe the main blockchain has no such garbage outscripts in it yet, so this change could be effected now without harming the chain.
319	This implements an initial feature set for "escrow" transactions, as mentioned on various threads on the forum. It allows coins to be controlled by threshold voting among multiple parties.
316	Generate databases in .bitcoin with bitcoin 0.3.20 (as is available in the bitcoind package in debian squeeze). Close that server down, then run the 0.3.23-rc1 (or beta), and you get the following: ``` ************************ EXCEPTION: 22DbRunRecoveryException DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery bitcoin in AppInit() ************************ EXCEPTION: 22DbRunRecoveryException DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery bitcoin in CMyApp::OnUnhandledException() terminate called after throwing an instance of DbRunRecoveryException what(): DbEnv::open: DB_RUNRECOVERY: Fatal error, run database recovery Aborted ``` I tried db4.7_recover and db4.8_recover, as well as corresponding dump programs, and none were able to parse my blk0001.dat file. So, I think this is the culprit, but Im not sure where to begin. Its pretty easy to reproduce this problem, though.
315	
314	and improved a translation string
313	Are there a reason why \n is inside translation function? Wouldnt it be better if \n was outside?
312	
311	
310	Sorry that I have messed up dabaopku/bitcoin with repeat commits. Please merge this single commit. Original pull request was #281
308	I think build-osx.txt needs to be modified slightly: ../configure --prefix="$PREFIX" \ --with-osx_cocoa \ --disable-shared \ --disable-debug_flag \ --with-macosx-version-min=10.5 \ --enable-stl \ --enable-utf8 \ --enable-universal_binary \ --with-libjpeg=builtin \ --with-libpng=builtin \ --with-regex=builtin \ --with-libtiff=builtin \ --with-zlib=builtin \ --with-expat=builtin \ --with-macosx-sdk=/Developer/SDKs/MacOSX10.5.sdk && Anyone trying to compile has to note the 10.5 sdk config flags - they need to be set to 10.6 as they are in earlier part of the instructions, otherwise it fails out like this: <Value, is_const, cache>::hashtable_iterator(Internal::hash_node<Value, cache>**) [with Value = std::pair<wxAnyValueType* const, wxVariantData* (*)(const wxAny&)>, bool is_const = false, bool cache = false] /Developer/SDKs/MacOSX10.5.sdk/usr/include/c++/4.2.1/tr1/hashtable:232: note: Internal::hashtable_iterator<Value, is_const, cache>::hashtable_iterator(Internal::hash_node<Value, cache>*, Internal::hash_node<Value, cache>**) [with Value = std::pair<wxAnyValueType* const, wxVariantData* (*)(const wxAny&)>, bool is_const = false, bool cache = false] /Developer/SDKs/MacOSX10.5.sdk/usr/include/c++/4.2.1/tr1/hashtable:225: note: Internal::hashtable_iterator<std::pair<wxAnyValueType* const, wxVariantData* (*)(const wxAny&)>, false, false>::hashtable_iterator(const Internal::hashtable_iterator<std::pair<wxAnyValueType* const, wxVariantData* (*)(const wxAny&)>, false, false>&) lipo: cant figure out the architecture type of: /var/folders/0d/0d0nJ9M9FLGZIyqsQjsi2U+++TI/-Tmp-//ccO0mcFc.out make: *** [baselib_any.o] Error 1
307	"listreceivedbyaddress" and "getaddressesbyaccount" return not only Receiving, but also Sending addresses from the Address Book.
306	************************ EXCEPTION: St9bad_alloc std::bad_alloc C:\Program Files (x86)\Bitcoin\bitcoin.exe in CMyApp::OnExceptionInMainLoop() received: block (11111 bytes) received block 0000000000001ce4b87c SetBestChain: new best=0000000000001ce4b87c height=127832 work=10751950291554304722 MainFrameRepaint ProcessBlock: ACCEPTED sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) received: block (10778 bytes) received block 00000000000017d8a59f SetBestChain: new best=00000000000017d8a59f height=127833 work=10753818102743163924 MainFrameRepaint ProcessBlock: ACCEPTED sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) received: block (7017 bytes) received block 0000000000001962363d DelayedRepaint SetBestChain: new best=0000000000001962363d height=127834 work=10755685913932023126 MainFrameRepaint ProcessBlock: ACCEPTED sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) sending: inv (37 bytes) ************************ EXCEPTION: St9bad_alloc std::bad_alloc C:\Program Files (x86)\Bitcoin\bitcoin.exe in CMyApp::OnExceptionInMainLoop() DelayedRepaint DBFlush(false) addr.dat refcount=0 ThreadMessageHandler exiting ThreadSocketHandler exiting addr.dat flush blkindex.dat refcount=0 blkindex.dat flush ThreadIRCSeed exiting UPNP_DeletePortMapping() returned : 714 ThreadMapPort exiting StopNode() DBFlush(true) Bitcoin exiting
305	For advanced users, client should have ability to manually select inputs to compose a transaction.
304	1/2 known Windows CPU Usage bugs fixed
303	Just comment updates.
302	When sending a getblocks message the client seems to include the version as the first field. Why is that? I added this to the getblocks part of the specification (is it the same for getheaders?) - but to me it seems to be a bug?
301	The problem is in the FormatMoney function, in util.cpp. This comment includes a fixed version, which requires two support functions, which are also included: int64 last_digit(int64 n) { int64 m = n / (int64)10; m *= (int64)10; return n - m; } char todigit(int64 n) { static char digits[] = "0123456789"; return digits[n]; } string FormatMoney(int64 n, bool fPlus) { string str; bool was_negative = n<0; bool omit_digit = true; // Omit trailing zeros. size_t ix=0; if(n == 0) { str.insert(0,1,0); return str; } if(n < 0) { n = -n; } // Process the number from right to left. for(ix=0; n || ix<8; ix++) { int64 next = last_digit(n); n /= (int64)10; if(next || ix>=8) omit_digit=false; if(!omit_digit) { str.insert(0,1,todigit(next)); if(ix == 7) str.insert(0,1,.); } } if(was_negative) str.insert(0,1,-); else if(fPlus) str.insert(0,1,+); return str; }
300	Use non-blocking connects, and a select() call to wait a predefined time (5s by default, but configurable with -timeout) for either success or failure. This allows much more connections to be tried per time unit. Based on a patch by phantomcircuit.
299	Process: bitcoin [792] Path: /Users/heroku@/Applications/bitcoin-0.3.20.01/Bitcoin.app/Contents/MacOS/bitcoin Identifier: org.bitcoin.bitcoin Version: 0.3.19 (320) Code Type: X86 (Native) Parent Process: launchd [209] Date/Time: 2011-06-05 21:49:53.017 +0200 OS Version: Mac OS X 10.6.7 (10J869) Report Version: 6 Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x0000000000f000d4 Crashed Thread: 4 Thread 0: Dispatch queue: com.apple.main-thread 0 libSystem.B.dylib 0x96a435ee munmap$UNIX2003 + 10 1 org.bitcoin.bitcoin 0x00529cdc DbTxn::set_parent(DbTxn*) + 1568338 2 org.bitcoin.bitcoin 0x004ee7fa DbTxn::set_parent(DbTxn*) + 1325424 3 org.bitcoin.bitcoin 0x004ee62e DbTxn::set_parent(DbTxn*) + 1324964 4 org.bitcoin.bitcoin 0x00486aac DbTxn::set_parent(DbTxn*) + 900130 5 org.bitcoin.bitcoin 0x004e93d3 DbTxn::set_parent(DbTxn*) + 1303881 6 org.bitcoin.bitcoin 0x004e9170 DbTxn::set_parent(DbTxn*) + 1303270 7 org.bitcoin.bitcoin 0x004e90d0 DbTxn::set_parent(DbTxn*) + 1303110 8 org.bitcoin.bitcoin 0x003a9a21 __db_dbt::__db_dbt() + 21561 9 org.bitcoin.bitcoin 0x005eeedd boost::exception_detail::error_info_injector<boost::gregorian::bad_year>::~error_info_injector() + 662637 10 libSystem.B.dylib 0x96a5d19f __cxa_finalize + 208 11 libSystem.B.dylib 0x96a5d0b4 exit + 33 12 com.apple.AppKit 0x92bfc48a -[NSApplication terminate:] + 1056 13 com.apple.AppKit 0x92c3444c -[NSApplication _terminateSendShould:] + 71 14 com.apple.CoreFoundation 0x93d84edd __invoking___ + 29 15 com.apple.CoreFoundation 0x93d84e48 -[NSInvocation invoke] + 136 16 com.apple.Foundation 0x934b38d4 __NSFireTimer + 141 17 com.apple.CoreFoundation 0x93d49adb __CFRunLoopRun + 8059 18 com.apple.CoreFoundation 0x93d47464 CFRunLoopRunSpecific + 452 19 com.apple.CoreFoundation 0x93d47291 CFRunLoopRunInMode + 97 20 com.apple.HIToolbox 0x917ece04 RunCurrentEventLoopInMode + 392 21 com.apple.HIToolbox 0x917ecbb9 ReceiveNextEventCommon + 354 22 com.apple.HIToolbox 0x917eca3e BlockUntilNextEventMatchingListInMode + 81 23 com.apple.AppKit 0x929c378d _DPSNextEvent + 847 24 com.apple.AppKit 0x929c2fce -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 156 25 com.apple.AppKit 0x92985247 -[NSApplication run] + 821 26 org.bitcoin.bitcoin 0x001f974a wxDisclosureTriangleCocoaImpl::~wxDisclosureTriangleCocoaImpl() + 3946 27 org.bitcoin.bitcoin 0x00370626 wxMimeTypesManagerImpl::UtiMap::operator[](wxString const&) + 9414 28 org.bitcoin.bitcoin 0x002c52a0 wxAnyValueTypeImplwxString::ConvertValue(wxAnyValueBuffer const&, wxAnyValueType*, wxAnyValueBuffer&) const + 2000 29 org.bitcoin.bitcoin 0x001c9552 wxICONResourceHandler::~wxICONResourceHandler() + 1634 30 org.bitcoin.bitcoin 0x00322960 wxHashTable::~wxHashTable() + 7744 31 org.bitcoin.bitcoin 0x001027be ExitThread(unsigned int) + 30750 32 org.bitcoin.bitcoin 0x000366a9 std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) + 29465 Thread 1: Dispatch queue: com.apple.libdispatch-manager 0 libSystem.B.dylib 0x96a64922 kevent + 10 1 libSystem.B.dylib 0x96a6503c _dispatch_mgr_invoke + 215 2 libSystem.B.dylib 0x96a644f9 _dispatch_queue_invoke + 163 3 libSystem.B.dylib 0x96a6429e _dispatch_worker_thread2 + 240 4 libSystem.B.dylib 0x96a63d21 _pthread_wqthread + 390 5 libSystem.B.dylib 0x96a63b66 start_wqthread + 30 Thread 2: 0 libSystem.B.dylib 0x96aa2e06 connect$UNIX2003 + 10 1 org.bitcoin.bitcoin 0x0006c608 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 19570 2 org.bitcoin.bitcoin 0x0006cb39 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 20899 3 org.bitcoin.bitcoin 0x0006cf70 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 21978 4 org.bitcoin.bitcoin 0x0006e65e CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 27848 5 org.bitcoin.bitcoin 0x00069070 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 5850 6 libSystem.B.dylib 0x96a6b7fd _pthread_start + 345 7 libSystem.B.dylib 0x96a6b682 thread_start + 34 Thread 3: 0 libSystem.B.dylib 0x96a639b2 __workq_kernreturn + 10 1 libSystem.B.dylib 0x96a63f48 _pthread_wqthread + 941 2 libSystem.B.dylib 0x96a63b66 start_wqthread + 30 Thread 4 Crashed: 0 org.bitcoin.bitcoin 0x0053c411 DbTxn::set_parent(DbTxn*) + 1643911 1 org.bitcoin.bitcoin 0x0053bdc8 DbTxn::set_parent(DbTxn*) + 1642302 2 org.bitcoin.bitcoin 0x003a607f __db_dbt::__db_dbt() + 6807 3 org.bitcoin.bitcoin 0x00050b6f operator-(CBigNum const&, CBigNum const&) + 28639 4 org.bitcoin.bitcoin 0x000fa52d bool CWalletDB::WriteSetting<int>(std::string const&, int const&) + 27181 5 libSystem.B.dylib 0x96a6b7fd _pthread_start + 345 6 libSystem.B.dylib 0x96a6b682 thread_start + 34 Thread 4 crashed with X86 Thread State (32-bit): eax: 0x00f000c4 ebx: 0x0053be20 ecx: 0x002ae3a0 edx: 0x003f0200 edi: 0x00a3a830 esi: 0x00050a8e ebp: 0xb06b8e98 esp: 0xb06b8e10 ss: 0x0000001f efl: 0x00010246 eip: 0x0053c411 cs: 0x00000017 ds: 0x0000001f es: 0x0000001f fs: 0x0000001f gs: 0x00000037 cr2: 0x00f000d4 Binary Images: 0x1000 - 0x784ffb +org.bitcoin.bitcoin 0.3.19 (320) <888258D5-1DF9-9D4C-6C2E-FAA98C7AD377> /Users/heroku@/Applications/bitcoin-0.3.20.01/Bitcoin.app/Contents/MacOS/bitcoin USB Device: Bluetooth USB Host Controller, 0x05ac (Apple Inc.), 0x8205, 0x7d100000 USB Device: IR Receiver, 0x05ac (Apple Inc.), 0x8240, 0x5d200000 USB Device: Apple Internal Keyboard / Trackpad, 0x05ac (Apple Inc.), 0x0218, 0x1d200000
298	Now that every geek in the world is mining these here coins, I strongly believe that gamers might be the next big additional group of users. Bitcoin would be ideal for purchasing ingame items and we have been test driving it for use with our Facebook Social Gaming network. The biggest hurdle at the moment, however, is the transaction fee of 0.01 BTC. Micro transactions are where the real strength of Bitcoin lies in the near future, but with the steep increase in BTC / USD value, the minimum transaction is about $0.18. Lowering this to about $0.01 would open up bitcoin to millions of social gamers around the world.
297	Hello, I have made a really small modification in the build instructions (in order to make copy-paste easier in Debian-like systems). Thanks in advance,
295	Stop assigning all generations to the "" account, even when it is sent to a known accounts address.
294	Avoid creating a new key -every- time you use a reserve key. Instead, create them in bursts. Currently, default is to generate 25 keys (filling keypool up to 100), if keypool size falls below 75.
293	Make LoadWallet() create the KeyPool for empty wallets. Perceived startup time on first start might increase (<5s on my system, could be up to a minute on very slow hosts) as LoadWallet() is called before the UI is displayed. This makes it safe to backup a new wallet.dat used for savings.
292	
291	Please?
290	Fix rfc1918 and rfc3927 compliance for ignoring non-internet-routable hosts. Pretty self explanatory I think. Fixes filtering of 172.16/12 and 169.254/16 which were missing and expands IsRoutable() to be more easily updated later as well as actually be used in ConnectSocket() instead of re-implementing logic that exists in the CAddress class.
289	In 3 commits: Make the fee error/dialog messages much clearer. Update fee policy to be much more customizable. This changes nTransactionFee into nBaseTransactionFee and nPerKBTransactionFee where nBaseTransactionFee is applied to each transaction once and nPerKBTransactionFee is applied per KB to each transaction. Also, fOverrideTransactionFee has been added to allow the ignoring of GetMinFee() when creating transactions. Add setautocommit, reject transaction and committransaction. Here is the help for setautocommit: If <autocommit> is false, the send* functions will return a txid, which must be manually committed instead of being immediately committed. Once a new transaction has been created, you can get information about it by using gettransaction <txid>. It can then be commited or rejected using committransaction <txid> or rejecttransaction <txid> respectively. Forum thread at
288	Introduce a new class, CWallet, to manage wallets, and move all wallet-specific code there. All wallet-related globals are turned into fields of CWallet, and one single global, pwalletMain, is added instead. It consists of two commits: the first one adds the new source files, and moves as much there as possible without actually changing any code. The second commit adds the class definitions, and all other changes. Forum thread is here:
287	Adds a -wallet argument that can be passed to the client to determine the name of the wallet file and where it should be located. It works like this: $ ./bitcoind -It will use [datadir]/wallet.dat as the wallet $./bitcoind -wallet=mywallet -It will use [datadir]/mywallet $./bitcoind -wallet=/tmp -It will use /tmp/wallet.dat $./bitcoind -wallet=/tmp/mywallet -It will use /tmp/mywallet If your wallet is in a directory other than the datadir, bitcoin will create another .lock file in that directory (originally, I tried using the wallet file itself as the lock file, but bdb didnt like opening a locked file). Let me know if you have questions or if Ive missed anything.
286	Summary: Static keypool (keypool cycling, new keys in new dated files, isolate keys from config) Use cases: (1) Backup once (trust fund for next of kin) (2) Iterative backup (fullest anonymity, expanding wallet). I propose: (1) An optional flag: -keycycle=true|false (2) A wallet directory with dated keypools * (1) suppose we want to hold the entire fortune of an estate in a wallet. While alive, we may need to (infrequently) use this wallet (send/receive transactions) but hope to pass the wallet on to next of kin when we die. We should be able to leave a single static copy of the wallet to our estate (password in escrow). Anonymity may be less important than a guarantee that the wallet does not change over several years, regardless of the number of transactions. We either create a wallet with an impossibly large keypool, or simply cycle through keys, or both. Once created, the keys in this wallet should never change. * (2) On the other hand, we may have the highest anonymity/laundry requirements. We may be making an enormous number of transactions to unique addresses. We may be a merchant using unique keys for each customer/vendor/transaction. We need our wallet to expand. We need to be able to backup our wallet in predictable iterations. For those who prefer the risk of loosing keys over the risks associated with reusing keys, we can pre-generate a keypool inside a wallet. The keys in previously generated keypools never change and thus need not be backed up again. Suggested implementation: * A wallet is a directory * Keypools are dated * Keys are separated from related transaction and configuration data * Key files are write-once-never-change * Addresses can be optionally recycled * Wallet can be optional fixed sized (required recycling) * Subsequent keypools should be (geo/exp) larger than previous keypool Example wallet directory: /wallet /keypool.20110101120000 size: 10K /keydata.20110101120000 /keypool.20110201123451 size: 33K /keydata.20110201123451 /keypool.20110302345678 size: 100K /keydata.20110302345678
285	This change is per discussion at Added ability to estimate the transaction fee for a given transfer amount. Use case concerns transferring BTC out of an "account", and being able to determine if the account has enough BTC to cover transfer + fees. *Accidentally closed previous pull request trying to rebase to one commit.
284	A new Pin class is provided to create secure password dialogs using process separation. IPC is done via libassuan and the assuan daemon user is standard pinentry (portable qt, gtk2 and ncurses implementations are available) Pinentry takes care of memlocking and is the standard for GNUPG. The Pin class is designed to be readable and well reusable in other password entry tasks. This commit adds optional build dependency from libassuan and optional runtime dependency from a pinentry daemon.
283	This change is per discussion at Added ability to estimate the transaction fee for a given transfer amount. Use case concerns transferring BTC out of an "account", and being able to determine if the account has enough BTC to cover transfer + fees.
282	The goal here is to show people how many warnings we have and get someone to look into them. Additionally, this might prevent keep more warnings from popping up with new patches (though thats a bit unlikely).
281	Several accuracy and punctuation improvements. :D
280	Use -frandom-seed to prevent gcc from generating slightly different code on occasion. Also make timestamp forcing more general.
278	Static link openssl and enable RPC-SSL on Win32.
277	Not ideal, icons for send and address book dont show, just the standard bitcoin icon, and balance is still cut off, but the number is readable.
276	For instance any nBits compressed value from 0x1a44b800 thru 0x1a44b9ff will show as difficulty 244139.4816. This patch will more accurately convert the nBits compressed values to the double difficulty. This will display any of the recent difficulty levels slightly differently though. Early difficulties and testnet difficulties are not large enough to trigger this bug. None of the actual targets or compressed targets are changed, only the conversion to the floating point difficulty is changed and afaik it is only ever displayed, never converted back so the patch does not effect the target calculations, binary files, databases nor the binary protocol.
275	
274	There were some mistakes in the German translation, so I fixed them.
272	Suggestion to split the Bitcoin application into two seperate parts, the engine (which bitcoind practically is already) and the GUI. The GUI would simply launch the engine upon startup and communicate with the engine via already existing RPC calls. Lets say there are 50-100 software developers interested in contributing to the Bitcoin software, I estimate only about 10% will have the time/understanding to contribute useful C++ code, and of those doing the work a lot of it is spent fixing minor gui related issues. If we can get the 10% C++ gurus working on the important "engine" changes, and adding more and more API/RPC calls, then the remaining 90% of weekend developers and script gurus can concentrate on nice GUIs in any language for any platform and additional user functionality. The releases would still look the same, a bitcoin binary and a bitcoind binary, only difference is two processes will run rather than one.
271	That would be a much needed feature for computers that will serve as safe for important amounts and are not to be connected to the internet at anytime. The blockchain could be updated from time to time using removable media and rescanned using existing functionality. So the client would need to create a transaction, sign it, serialize it and output it. It would also be necessary that the client is able to deserialize a transaction and broadcast it.
270	There were 2 errors, I changed the char % to & in two lines.
269	The ifdef for USE_PNP below evals to "true" because its defined to zero, thereby erroneously enabling UPNP even when its initialized to zero, which is probably not whats desired. Commenting out the variable makes it not try to build UPNP support by default. make USE_PNP=1 reenables it nicely. (I assume the =0 was meant to default it to off?)
268	
267	Transactions created with the new minimal fee policy would not be relayed by the network. Therefore, we separate the minimal fee that is necessary to relay and to create, leaving the creation one at the old amount, for now.
266	Libs should never be statically linked unless there is a clear reason, also, wx2.8 should have been used to begin with, a development release should not be used for release software. This is intended for 0.4.0, so that we can move towards proper bitcoin packaging in distro repos. sipa has expressed some issues with performance that I have so far been unable to reproduce, maybe someone else can?
265	blackymetals #262 with my mo (sorry blackymetal, its a security thing with committing binary files to the repo) and the order fixed so that the commit diff is more readable.
264	With the separation of CENT and MIN_TX_FEE, it is now reasonable to create change outputs between 0.01 and 0.0005, as these are spendable according to the policy, even though they require a fee to be paid. Also, when enough fee was already present, everything can go into a change output, without further increasing the fee.
263	Using version 0.3.22rc2 on Windows: I got 0.02 from the faucet. I had over 500 confirmations by the time I tried to send it on. I sent 0.01 and the small transaction dialog popped up saying that I would need to pay the fee of 0.0005. I accepted by pressing yes and when the transaction posted it took 0.02 from my balance leaving me with 0.00 instead of 0.0095, which is what I should have been left with if 0.0005 had actually been taken from me. This is the transaction: You will notice the amount of the transaction is 0.02 instead of 0.0105 Also, possibly related to this bug is the fact that all forms on the interface are hard coded to only accept 0.00 and no more decimal places beyond two. This seems like it could cause problems sending amounts as small as even the alleged new transaction fee of 0.0005.
262	
261	
260	By danube, binary mo compiled by me.
259	By m0ray, binary mo generated by me.
258	On a system with mining disabled and doing nothing but AddAddress calls according to the debug log, there are 80-120 IOPs per second (likely very small ops, because the total throughput is only ~1MB/s), which can bog a system down considerably. Some avenues of improvement might be: * Bulk puts * More selective storage of addresses * Disabling fsync for the address db
257	After using the addressbook for a while, the number of addresses grows, and it becomes very hard to find anything there. its not even possible to sort by label. The address book needs a search box, which filters address book display to addresses matching the criteria. the same applies to the main transaction log - it needs some list filter criteria.
256	When used, purges all transactions from wallet.dat and forces a rescan. Useful for solving problems with invalid transactions stored in wallet.dat (for example, after wallet.dat manipulations). Corrected russian translation.
255	When rescanning, if the scanned transaction is already in the wallet, it is skipped. However, if someone sends a transaction, does not wait for confirmation, switches wallets, waits for a block that contains his original transaction, and switches wallets again, a rescan will leave his wallet transaction (which has no merkle branch, so no confirmations) untouched.
254	Its really an interesting software! Ive translated it to Chinese. Please accept my changes.
253	Remove send to IP transaction support, as it is insecure and would confuse users when used. An IP is a terrible identifier as it does not identify a person or organization. Furthermore, man-in-the-middle attacks are trivial as the internet has no "proof that you have ip XXX" API. In the future address shortening services based on "user@domain" would be useful, but these will likely be based on third party APIs and not on this code. * Removes logic to accept transfers by IP * Removes UI logic to send transfers by IP (CSendingDialog). Entering an IP in the send box will always result in an error. Discussion on forum:
252	Currently, connections are made to nodes which dont share the first two octets of the IP address, which raises the bar for attackers who are trying to prevent knowledge of blocks or transactions from spreading through the network. But adopting a more complete metric for distance could further minimize the chance of being fenced in due to only connecting to untrustworthy nodes. The Kademlia protocol uses the [XOR metric](http://en.wikipedia.org/wiki/Kademlia#Accelerated_lookups) to determine the distance between two IP addresses. Applied to Bitcoin, a variant of the XOR metric might be to attempt to connect to the farthest node from the joining address in each k-bucket: aka, one node that has a particular bit of its IP address set, for a total of 32 buckets (or 128 for IPv6).
251	Translation by Unreal89, binary mo compiled by me.
250	This reverts commit 69ae372b51cd589a3ac0b1ad09b0ebb90c1b6861 which removes support for building the Mac version of Bitcoin with UPnP support and UPnP disabled by default (which should be the default, according to the community vote and as its the default on all other platforms).
249	
248	Failing sometimes: ``` bool WildcardMatch(const char* psz, const char* mask) { loop { switch (*mask) { case \0: return (*psz == \0); case *: return WildcardMatch(psz, mask+1) || (*psz && WildcardMatch(psz+1, mask)); case ?: if (*psz == \0) return false; break; default: if (*psz != *mask) return false; break; } psz++; mask++; } } ``` Working always: ``` bool WildcardMatch(const char* psz, const char* mask) { loop { if (*mask == \0) return (*psz == \0); else if (*mask == *) return WildcardMatch(psz, mask+1) || (*psz && WildcardMatch(psz+1, mask)); else if (*mask == ?) if (*psz == \0) return 0; else if (*psz != *mask) return 0; psz++; mask++; } } ```
247	Im using Jan-Klaas Kollhofs JSON-RPC implementation for Python. My app tracks amounts using the Decimal class, in order to avoid floating point representation errors. I should be able to do: {"params":["15DTr7vBr9VA52cEh2k7ywPeHL9WVFadwk","3.22","comment"],"method":"sendtoaddress","id":"1305920532.77"} but bitcoind returns a "got string, expected real" error because "3.22" is quoted. If I convert the value to a float, it goes like this: {"params":["15DTr7vBr9VA52cEh2k7ywPeHL9WVFadwk",3.219999999,"comment"],"method":"sendtoaddress","id":"1305920532.77"} which is a mess. Right now, Im hacking around this by altering the json string after building it, using the value as a string and then stripping the double quotes to change its JSON representation to a real. Is there a reason why a string value cant be cast into a real inside bitcoind?
246	Hi guys, first lets say that I really appreciate the job youre doing. So thanks to all of you. And kindly consider the little updates that I am requesting. Its just a whitespace cleaning and some indentations added in the code. Regards,
245	Motivation: Create keys on a secure system using only OpenSSL or similar software. Receive BTC, then when ready to spend them, use importkey in a running client. importkey &lt;file&gt; &lt;account&gt; Reads a PEM-encoded keypair from file and adds it to the wallet. To create a keypair with OpenSSL, use: openssl ecparam -name secp256k1 -out NEW_KEY.pem -genkey Returns the keys bitcoin address. $ bitcoind importkey ~/NEW_KEY.pem TestAcct mt5M3Qa7fXsUV3bK6WtWTZEvXY2M1UPEgv Bug: Id like to safeguard against overwriting a key in the wallet with bogus data. Bug: I dont understand what has to be mutexed. Bug: Should do anything possible to make sure the imported key is valid. Note: I did not implement the corresponding export function, because my use case does not require it. I will be happy to implement it if this will improve the patchs chance of acceptance. Note: To make this convenient, one (I) would write a little script to read one of these PEM files and print a Bitcoin address. All key handling would be possible offline, and certainly in the absence of a block chain, until spend time. For my next trick, expect offline transaction signing and an importtx function. Forum topic:
244	The delete[] operator should be used instead of delete here:
243	In several areas, text appears to be too large to fit into designated areas. I suspect this could be because I have Windows set to use 120 DPI rather than the default 96. Issue applies to both 0.3.21 and 0.3.22-rc2. I can take screenshots if needed. *Examples* * In the Options dialog, Nothing below the explanation of transaction fees can be seen, except for OK/Cancel/Apply. The transaction fee option itself, and any options below it, can not be seen. Window can not be resized. * In the "Send Coins" dialog, the Send and Cancel buttons are not initially visible. However, the window can be resized so that they can be seen. * In the About dialog, the license declaration is mangled and cut off. It appears as follows: <pre> Distributed under the MIT/X11 software license, see the accompanying file license.txt or </pre>
242	Right now we get: account, category, time, amount, otheraccount, comment. Why dont we get a txid?
241	When i try to run bitcoin with -testnet and -datadir=someotherdir things get stored as expected, in someotherdir/testnet but if i try to run it with -server (or run bitcoind), it complains that it cant find rpcpassword, even though it is present in someotherdir/testnet. Warning: To use the "-server" option, you must set rpcpassword=<password> in the configuration file: someotherdir/testnet/bitcoin.conf If the file does not exist, create it with owner-readable-only file permissions. the file is of course quite present, and has correct permissions. i have tried copying the .conf file into stock ~/.bitcoin/testnet location, i have tried making a symlink from there to the whole dir - nothing helps. the only way to make it stop complaining is to stop using the -datadir argument, and let it store things in the default location. This is a bug, and should be fixed. :) Note, I have thus far only tried it with -testnet, I do not know if this behavior is only present when using -testnet or not. This needs testing.
240	Checking /home/juba/.ssh/bitcoin/src/util.cpp... [/home/juba/.ssh/bitcoin/src/util.cpp:276]: (error) Mismatching allocation and deallocation: p [/home/juba/.ssh/bitcoin/src/util.cpp:282]: (error) Mismatching allocation and deallocation: p Checking /home/juba/.ssh/bitcoin/src/util.cpp: GUI... Checking /home/juba/.ssh/bitcoin/src/util.cpp: __WXMAC_OSX__... Checking /home/juba/.ssh/bitcoin/src/util.cpp: __WXMSW__... 15/15 files checked 100% done
239	A list of possible memory leak problems found by the static analysis tool. [/home/juba/.ssh/bitcoin/src/uibase.h:74]: (possible error) Memory leak: CMainFrameBase::m_menubar [/home/juba/.ssh/bitcoin/src/uibase.h:75]: (possible error) Memory leak: CMainFrameBase::m_menuFile [/home/juba/.ssh/bitcoin/src/uibase.h:76]: (possible error) Memory leak: CMainFrameBase::m_menuHelp [/home/juba/.ssh/bitcoin/src/uibase.h:79]: (possible error) Memory leak: CMainFrameBase::m_staticText32 [/home/juba/.ssh/bitcoin/src/uibase.h:80]: (possible error) Memory leak: CMainFrameBase::m_buttonNew [/home/juba/.ssh/bitcoin/src/uibase.h:81]: (possible error) Memory leak: CMainFrameBase::m_buttonCopy [/home/juba/.ssh/bitcoin/src/uibase.h:83]: (possible error) Memory leak: CMainFrameBase::m_staticText41 [/home/juba/.ssh/bitcoin/src/uibase.h:84]: (possible error) Memory leak: CMainFrameBase::m_staticTextBalance [/home/juba/.ssh/bitcoin/src/uibase.h:86]: (possible error) Memory leak: CMainFrameBase::m_choiceFilter [/home/juba/.ssh/bitcoin/src/uibase.h:87]: (possible error) Memory leak: CMainFrameBase::m_notebook [/home/juba/.ssh/bitcoin/src/uibase.h:88]: (possible error) Memory leak: CMainFrameBase::m_panel9 [/home/juba/.ssh/bitcoin/src/uibase.h:89]: (possible error) Memory leak: CMainFrameBase::m_panel91 [/home/juba/.ssh/bitcoin/src/uibase.h:90]: (possible error) Memory leak: CMainFrameBase::m_panel92 [/home/juba/.ssh/bitcoin/src/uibase.h:91]: (possible error) Memory leak: CMainFrameBase::m_panel93 [/home/juba/.ssh/bitcoin/src/uibase.h:117]: (possible error) Memory leak: CMainFrameBase::m_menuOptions [/home/juba/.ssh/bitcoin/src/uibase.h:119]: (possible error) Memory leak: CMainFrameBase::m_textCtrlAddress [/home/juba/.ssh/bitcoin/src/uibase.h:120]: (possible error) Memory leak: CMainFrameBase::m_listCtrlAll [/home/juba/.ssh/bitcoin/src/uibase.h:121]: (possible error) Memory leak: CMainFrameBase::m_listCtrlSentReceived [/home/juba/.ssh/bitcoin/src/uibase.h:122]: (possible error) Memory leak: CMainFrameBase::m_listCtrlSent [/home/juba/.ssh/bitcoin/src/uibase.h:123]: (possible error) Memory leak: CMainFrameBase::m_listCtrlReceived [/home/juba/.ssh/bitcoin/src/uibase.h:138]: (possible error) Memory leak: CTxDetailsDialogBase::m_htmlWin [/home/juba/.ssh/bitcoin/src/uibase.h:139]: (possible error) Memory leak: CTxDetailsDialogBase::m_buttonOK [/home/juba/.ssh/bitcoin/src/uibase.h:160]: (possible error) Memory leak: COptionsDialogBase::m_listBox [/home/juba/.ssh/bitcoin/src/uibase.h:161]: (possible error) Memory leak: COptionsDialogBase::m_scrolledWindow [/home/juba/.ssh/bitcoin/src/uibase.h:162]: (possible error) Memory leak: COptionsDialogBase::m_panelMain [/home/juba/.ssh/bitcoin/src/uibase.h:164]: (possible error) Memory leak: COptionsDialogBase::m_checkBoxStartOnSystemStartup [/home/juba/.ssh/bitcoin/src/uibase.h:165]: (possible error) Memory leak: COptionsDialogBase::m_checkBoxMinimizeToTray [/home/juba/.ssh/bitcoin/src/uibase.h:166]: (possible error) Memory leak: COptionsDialogBase::m_checkBoxUseUPnP [/home/juba/.ssh/bitcoin/src/uibase.h:167]: (possible error) Memory leak: COptionsDialogBase::m_checkBoxMinimizeOnClose [/home/juba/.ssh/bitcoin/src/uibase.h:168]: (possible error) Memory leak: COptionsDialogBase::m_checkBoxUseProxy [/home/juba/.ssh/bitcoin/src/uibase.h:170]: (possible error) Memory leak: COptionsDialogBase::m_staticTextProxyIP [/home/juba/.ssh/bitcoin/src/uibase.h:171]: (possible error) Memory leak: COptionsDialogBase::m_textCtrlProxyIP [/home/juba/.ssh/bitcoin/src/uibase.h:172]: (possible error) Memory leak: COptionsDialogBase::m_staticTextProxyPort [/home/juba/.ssh/bitcoin/src/uibase.h:173]: (possible error) Memory leak: COptionsDialogBase::m_textCtrlProxyPort [/home/juba/.ssh/bitcoin/src/uibase.h:175]: (possible error) Memory leak: COptionsDialogBase::m_staticText32 [/home/juba/.ssh/bitcoin/src/uibase.h:176]: (possible error) Memory leak: COptionsDialogBase::m_staticText31 [/home/juba/.ssh/bitcoin/src/uibase.h:177]: (possible error) Memory leak: COptionsDialogBase::m_textCtrlTransactionFee [/home/juba/.ssh/bitcoin/src/uibase.h:178]: (possible error) Memory leak: COptionsDialogBase::m_panelTest2 [/home/juba/.ssh/bitcoin/src/uibase.h:180]: (possible error) Memory leak: COptionsDialogBase::m_staticText321 [/home/juba/.ssh/bitcoin/src/uibase.h:181]: (possible error) Memory leak: COptionsDialogBase::m_staticText69 [/home/juba/.ssh/bitcoin/src/uibase.h:182]: (possible error) Memory leak: COptionsDialogBase::m_buttonOK [/home/juba/.ssh/bitcoin/src/uibase.h:183]: (possible error) Memory leak: COptionsDialogBase::m_buttonCancel [/home/juba/.ssh/bitcoin/src/uibase.h:184]: (possible error) Memory leak: COptionsDialogBase::m_buttonApply [/home/juba/.ssh/bitcoin/src/uibase.h:212]: (possible error) Memory leak: CAboutDialogBase::m_bitmap [/home/juba/.ssh/bitcoin/src/uibase.h:214]: (possible error) Memory leak: CAboutDialogBase::m_staticText40 [/home/juba/.ssh/bitcoin/src/uibase.h:216]: (possible error) Memory leak: CAboutDialogBase::m_staticTextMain [/home/juba/.ssh/bitcoin/src/uibase.h:219]: (possible error) Memory leak: CAboutDialogBase::m_buttonOK [/home/juba/.ssh/bitcoin/src/uibase.h:226]: (possible error) Memory leak: CAboutDialogBase::m_staticTextVersion [/home/juba/.ssh/bitcoin/src/uibase.h:243]: (possible error) Memory leak: CSendDialogBase::m_staticTextInstructions [/home/juba/.ssh/bitcoin/src/uibase.h:245]: (possible error) Memory leak: CSendDialogBase::m_bitmapCheckMark [/home/juba/.ssh/bitcoin/src/uibase.h:246]: (possible error) Memory leak: CSendDialogBase::m_staticText36 [/home/juba/.ssh/bitcoin/src/uibase.h:247]: (possible error) Memory leak: CSendDialogBase::m_textCtrlAddress [/home/juba/.ssh/bitcoin/src/uibase.h:248]: (possible error) Memory leak: CSendDialogBase::m_buttonPaste [/home/juba/.ssh/bitcoin/src/uibase.h:249]: (possible error) Memory leak: CSendDialogBase::m_buttonAddress [/home/juba/.ssh/bitcoin/src/uibase.h:250]: (possible error) Memory leak: CSendDialogBase::m_staticText19 [/home/juba/.ssh/bitcoin/src/uibase.h:251]: (possible error) Memory leak: CSendDialogBase::m_textCtrlAmount [/home/juba/.ssh/bitcoin/src/uibase.h:252]: (possible error) Memory leak: CSendDialogBase::m_staticText20 [/home/juba/.ssh/bitcoin/src/uibase.h:253]: (possible error) Memory leak: CSendDialogBase::m_choiceTransferType [/home/juba/.ssh/bitcoin/src/uibase.h:257]: (possible error) Memory leak: CSendDialogBase::m_buttonSend [/home/juba/.ssh/bitcoin/src/uibase.h:258]: (possible error) Memory leak: CSendDialogBase::m_buttonCancel [/home/juba/.ssh/bitcoin/src/uibase.h:285]: (possible error) Memory leak: CSendingDialogBase::m_staticTextSending [/home/juba/.ssh/bitcoin/src/uibase.h:286]: (possible error) Memory leak: CSendingDialogBase::m_textCtrlStatus [/home/juba/.ssh/bitcoin/src/uibase.h:288]: (possible error) Memory leak: CSendingDialogBase::m_buttonOK [/home/juba/.ssh/bitcoin/src/uibase.h:289]: (possible error) Memory leak: CSendingDialogBase::m_buttonCancel [/home/juba/.ssh/bitcoin/src/uibase.h:314]: (possible error) Memory leak: CYourAddressDialogBase::m_staticText45 [/home/juba/.ssh/bitcoin/src/uibase.h:315]: (possible error) Memory leak: CYourAddressDialogBase::m_listCtrl [/home/juba/.ssh/bitcoin/src/uibase.h:317]: (possible error) Memory leak: CYourAddressDialogBase::m_buttonRename [/home/juba/.ssh/bitcoin/src/uibase.h:318]: (possible error) Memory leak: CYourAddressDialogBase::m_buttonNew [/home/juba/.ssh/bitcoin/src/uibase.h:319]: (possible error) Memory leak: CYourAddressDialogBase::m_buttonCopy [/home/juba/.ssh/bitcoin/src/uibase.h:320]: (possible error) Memory leak: CYourAddressDialogBase::m_buttonOK [/home/juba/.ssh/bitcoin/src/uibase.h:321]: (possible error) Memory leak: CYourAddressDialogBase::m_buttonCancel [/home/juba/.ssh/bitcoin/src/uibase.h:350]: (possible error) Memory leak: CAddressBookDialogBase::m_notebook [/home/juba/.ssh/bitcoin/src/uibase.h:351]: (possible error) Memory leak: CAddressBookDialogBase::m_panelSending [/home/juba/.ssh/bitcoin/src/uibase.h:353]: (possible error) Memory leak: CAddressBookDialogBase::m_staticText55 [/home/juba/.ssh/bitcoin/src/uibase.h:354]: (possible error) Memory leak: CAddressBookDialogBase::m_listCtrlSending [/home/juba/.ssh/bitcoin/src/uibase.h:355]: (possible error) Memory leak: CAddressBookDialogBase::m_panelReceiving [/home/juba/.ssh/bitcoin/src/uibase.h:357]: (possible error) Memory leak: CAddressBookDialogBase::m_staticText45 [/home/juba/.ssh/bitcoin/src/uibase.h:359]: (possible error) Memory leak: CAddressBookDialogBase::m_listCtrlReceiving [/home/juba/.ssh/bitcoin/src/uibase.h:361]: (possible error) Memory leak: CAddressBookDialogBase::m_buttonDelete [/home/juba/.ssh/bitcoin/src/uibase.h:362]: (possible error) Memory leak: CAddressBookDialogBase::m_buttonCopy [/home/juba/.ssh/bitcoin/src/uibase.h:363]: (possible error) Memory leak: CAddressBookDialogBase::m_buttonEdit [/home/juba/.ssh/bitcoin/src/uibase.h:364]: (possible error) Memory leak: CAddressBookDialogBase::m_buttonNew [/home/juba/.ssh/bitcoin/src/uibase.h:365]: (possible error) Memory leak: CAddressBookDialogBase::m_buttonOK [/home/juba/.ssh/bitcoin/src/uibase.h:382]: (possible error) Memory leak: CAddressBookDialogBase::m_buttonCancel [/home/juba/.ssh/bitcoin/src/uibase.h:398]: (possible error) Memory leak: CGetTextFromUserDialogBase::m_staticTextMessage1 [/home/juba/.ssh/bitcoin/src/uibase.h:399]: (possible error) Memory leak: CGetTextFromUserDialogBase::m_textCtrl1 [/home/juba/.ssh/bitcoin/src/uibase.h:400]: (possible error) Memory leak: CGetTextFromUserDialogBase::m_staticTextMessage2 [/home/juba/.ssh/bitcoin/src/uibase.h:401]: (possible error) Memory leak: CGetTextFromUserDialogBase::m_textCtrl2 [/home/juba/.ssh/bitcoin/src/uibase.h:404]: (possible error) Memory leak: CGetTextFromUserDialogBase::m_buttonOK [/home/juba/.ssh/bitcoin/src/uibase.h:405]: (possible error) Memory leak: CGetTextFromUserDialogBase::m_buttonCancel
238	Possible memory leak error in ui.cpp: bitcoin/src/ui.cpp:1954]: (possible error) Memory leak: pdialog a first level of analysis is recommended.
237	Just pasting the error shown by the tool in the db.h file alone. bitcoin/src/db.h:49]: (possible error) Memory leak: CDB::pdb An first level of analysis is recommended.
236	It seems to me, that GetDifficulty() function have truncation problem which is already observer now and could lead to further problems, up to division by zero. 1) -> Difficulty?: 157 416.401843 ("Bits"?: 1a6a93b3) 2) bitcoin.exe getdifficulty -> 157426.20628986 (at the moment) Why so? hextarget = 0000 0000 0000 6A93 B300 00000000000000000000000000000000000000000000 maxtarget = 0000 0000 FFFF 0000 0000 00000000000000000000000000000000000000000000 If we divide them, result will be 157416.4018436490, value in blocks info. Problem is in getdifficulty function: int nShift = 256 - 32 - 31; // to fit in a uint double dMinimum = (CBigNum().SetCompact(bnProofOfWorkLimit.GetCompact()) >> nShift).getuint(); double dCurrently = (CBigNum().SetCompact(pindexBest->nBits) >> nShift).getuint(); return dMinimum / dCurrently; So, bnProofOfWorkLimit >> nShift = 0x7FFF8000 while nBits >> nShift = 0x3549 return will be 157426.20628986100 that we observe in bitcoin client, on blockexplorers getdifficulty and so on. From 24 "mantissa" bits of hextarget only 15 are used, and problem will increase with difficulty. At 2 billions will will get divison by zero.
235	
234	Translation by Anonymous, binary mo generated by me.
233	The Bitcoins proof of work process should be directed to something useful instead of arbitrary. Think SETI-style grid computing. All of that processing power should be put to productive use. Just an idea. Ill leave it to smarter people then I to work out the specifics.
232	This commit adds support for ekeys, or encrypted private keys, to the wallet. All keys are stored in memory in their encrypted form and thus the passphrase is required from the user to spend coins, or to create new addresses. Keys are encrypted with AES-256-CBC through OpenSSLs EVP library. The key is calculated via EVP_BytesToKey using AES256 with 1000 rounds. Each RPC command which requires the password in practice has an additional parameter, namely that password. Due to the need to convert the types of other parameters before sending them, users who do not use encryption (via the -nocrypt option) will have to specify a blank string (or any string) as the first parameter, followed by the command they currently use. Whenever keying material (unencrypted private keys, the users password, the wallets AES key) is stored unencrypted in memory, any reasonable attempt is made to mlock/VirtualLock that memory before storing the keying material. This is not true in several (commented) cases where mlock/VirtualLocking the memory is not possible. Although encryption of private keys in memory can be very useful on desktop systems (as some small amount of protection against stupid viruses), on an RPC server, the password is entered fairly insecurely. Thus, the only main advantage encryption has for RPC servers is for RPC servers that do not spend coins, except in rare cases, eg. a webserver of a merchant which only receives payment except for cases of manual intervention. Thanks to jgarzik for the original patch and sipa for all his input.
231	Hi I get the following error message on 0.3.21 beta when trying to send a transaction of 0.02 BTC to another user... ../src/gtk/dialog.cpp(156): assert "Assert failure" failed in EndModal(): either wxDialog:EndModal called twice or ShowModal wasnt called
230	By Blitzboom, binary file generated by me.
229	From kr105, binary compiled by me.
228	RPC Thread deadlocks on getaccountaddress. Not sure if its just a first run thing, but reliably when you call getaccountaddress "" on first bitcoin run (rm ~/.bitcoin/testnet && ./bitcoin...) RPC thread deadlocks. It appears to happen in db.h:105 (db->put)
227	With gcc 4.4, the assembly code for detecting 128bit SSE2 fails to compile, since push/pop dont accept 32bit registers in 64bit instruction sets, and ebx is only 32bit. I will submit a patch that detects x86_64 and uses appropriate new registers. g++ -c -I/usr/include/db4.8 -DFOURWAYSSE2 -DUSE_SSL -DNOPCH -Wno-invalid-offsetof -Wformat -O2 -march=core2 -pipe -o obj/nogui/main.o main.cpp main.cpp: Assembler messages: main.cpp:3162: Error: suffix or operands invalid for `push main.cpp:3162: Error: suffix or operands invalid for `pop main.cpp:3162: Error: suffix or operands invalid for `push main.cpp:3162: Error: suffix or operands invalid for `pop main.cpp:3162: Error: suffix or operands invalid for `push main.cpp:3162: Error: suffix or operands invalid for `pop
226	This patch set includes the following changes: * Remove unused #includes * Factor out #includes that are only needed in some source files from headers.h * Add dependency tracking to unix, mac, and mingw makefiles via gccs -MMD flag These changes improve bitcoins development environment. Previously changing any header file caused a global recompile. With these changes, only those files that directly depend on a changed header file will require recompilation.
225	To be able to make an external GUI, I am working on modularizing bitcoin into a library. This push request is basic code plumbing, 100% no functional or build system changes. - Put guard statements around header files. - Removed macro foreach: conflicts with Qt4 keyword `foreach`, replaced with BOOST_FOREACH. - Prefix C++ stdlib structures and functions with std:: in headers; "using namespace" in header files is generally frowned upon because it infects other files included after it. These are moved to the implementation files. - Modularity: `base48.h` and most other header files can now be included without the other shebang (useful for linking external GUI to bitcoin core, part of GUI separation). The include files that need each other, now include each other.
224	
223	
222	from mewantsbitcoins
221	Im tired of porting this forward, and I really cant think of a good reason NOT to allow this.
220	Introduces four new RPC calls: * dumpprivkey: retrieve the private key corresponding to an address * importprivkey: add a private key to your wallet * removeprivkey: remove a private key from your wallet * dumpwallet: export the contents of your wallet in various ways * importwallet: import/merge a dumped wallet into your own. The private key format is analoguous to the address format. It is a 51-character base58-encoded string, that includes a version number and a checksum. The wallet format is JSON-based, and includes: * addresses (informational, optional) * private keys * amounts per balance (informational, optional) * blocks where addresses were first used (optional) * ids of transactions in which addresses were credited (optional) * labels (optional) It specifically does not contain: * sender address book * settings * account information * unconfirmed wallet transactions Note that playing around with import/export and moving addresses around between wallets may result in double-spends, which may result in corrupted wallets. See for a solution
219	"Bitcoin Error" locale nb_NO can not be set at startup of the client. I get this error message whenever I start the client. I understand this is because the client is trying to set the local language, and it probably does not exist. I am in the process of translating it to norwegian (the client strings). I will tell when it is done.
218	Separate TX fee logic from CENT constant, and decrease it to 0.0005 BTC.
217	It seems to be impossible to get the generation value of a new block. Currently were at 50, but this will change in the future.
216	If the remaining balance after sending a transaction would be less than 0.01, the subcent remainder is also being sent with the transaction. Example: If I have 10.00946786 BTC in my wallet and I send 10 BTC as a transaction, it will actually send all 10.00946786 BTC and not leave the subcent amount.
215	Use case: Customer owes you bitcoins, so you create a payment address associated with an account with a negative balance (the amount they owe), using move ...account... ...other_account... +amount When customer pays, that account balance will go to zero. This doesnt change sends-- you still cant send from an account with a zero or negative balance.
214	This patch set updates bitcoins RPC server to use boost::asios async_read, _write, etc instead of their non-asynchronous versions. The server still exists as a single separate thread, but the async calls should greatly improve performance under high load. The next step in robustifying the RPC server is to create a pool of threads for the RPC server, each of which handle a number of asynchronously reading and writing connections.
213	This fixes the build problem that I described in (NOTE: Theres actually one other un-#if-guarded usage of the variable "fUseUPnP" in this file, but that one doesnt seem to cause build problems, for whatever reason. So I just added #if guards around this usage, to make the change as minimal as possible.)
212	When building bitcoin with upnp completely disabled in the build via setting this in makefile.unix... <code>USE_UPNP:=</code> ...then I get this build warning: <pre> obj/db.o: In function `CWalletDB::LoadWallet(): bitcoin/db.cpp:811: undefined reference to `fUseUPnP obj/db.o: In function `Unserialize<CDataStream>: bitcoin/serialize.h:136: undefined reference to `fUseUPnP </pre> Based on how fHaveUPnP is used in other files, it looks like db.cpp needs to wrap its fHaveUPnP usages with <pre> #if USE_UPNP ... #endif </pre>
209	Use callers cwd if path is not fully qualified and connecting to 127.0.0.1.
208	If connecting to rpc server on 127.0.0.1 try and use the callers cwd to write backupwallet output to if it is not fully qualified.
207	Hi. Im getting this whenever I want to run bitcoin 32 bits on my machine: 22:21:21: Debug: ../src/gtk/settings.cpp(276): assert "font.IsOk() && wxFontEnumerator::IsValidFacename(font.GetFaceName())" failed in GetFont(). Anyone else is having this?
205	Make JSON-RPC HTTP headers case-insensitive, as per RFC 2616.
204	
203	Request the password from the user at startup and store the key in memory for all new key encryption. Each ekey in the wallet is decrypted and the privkey derived and checked against the stored pubkey to ensure the password is correct. Thanks to jgarzik for the original patch and sipa for all his input. Forum thread:
202	This addition adds a build-time option thats linux specific. It drops any capabilities assigned to the process at launch time (if it were launched as root, root loses all special meaning). It also removes all capabilities from the binding set and locks all options related to privilege escalation so that they may not be changed. For these options to work (if built) the binary must be setuid root (horrible) or setcap cap_setpcap+eip bitcoind; (awesome) It only needs this capability so that it can clear the bounding set which it does in main() of bitcoind very first thing. I am not sure where the code needs to go to make it function in bitcoin gui client? For more details make sure you have libcap2-dev installed and: man 7 capabilities man 2 prctl The relevant sections of prctl(2) are: PR_CAPBSET_DROP and PR_SET_SECUREBITS. This patch will make it so that (barring issues in the posix.1e implementation in the kernel itself) any code execution vulnerabilities in the future will be unable to gain escalated privileges through the bitcoind process. Even by exec()ing suid binaries and exploiting known issues with them. Forum thread:
201	This addition adds a build-time option thats linux specific. It drops any capabilities assigned to the process at launch time (if it were launched as root, root loses all special meaning). It also removes all capabilities from the binding set and locks all options related to privilege escalation so that they may not be changed. For these options to work (if built) the binary must be setuid root (horrible) or setcap cap_setpcap+eip bitcoind; (awesome) It only needs this capability so that it can clear the bounding set which it does in main() of bitcoind very first thing. I am not sure where the code needs to go to make it function in bitcoin gui client? For more details make sure you have libcap2-dev install and: man 7 capabilities man 2 prctl The relevant sections of prctl(2) are: PR_CAPBSET_DROP and PR_SET_SECUREBITS. This patch will make it so that (barring issues in the posix11.e implementation in the kernel itself) any code execution vulnerabilities in the future will be unable to gain escalated privileges through the bitcoind process. Even by exec()ing suid binaries and exploiting known issues with them.
200	Subj
199	This commit adds a "listsinceblock" RPC command that will accept a block hash and list all of the wallet transactions that have occurred after that block. If no block is specified, it will list all wallet transactions. The output also includes the block ID of the latest block on the main chain. This is designed to simplify the process of reconciling transactions it bitcoind with another database; you store the most recent block you have seen (the "latest block" result from your last reconcile) and, on the next reconcile pass this block identifier. bitcoind will then tell you about all the transactions you need to process (possibly including transactions you have already processed, if the latest block the last time you reconciled has since been orphaned).
198	monitortx/monitorblocks: POST JSON-RPC to a URL when new wallet transactions or blocks are received. listmonitored: list URLS that will be POSTed to getblock: get information about a block, given depth in main chain.
197	Minor bug where the client crashes after displaying the error I dug up while testing (should never effect users, but worth patching anyway).
196	Hi, My build broke saying: net.cpp:8: fatal error: miniupnpc/miniwget.h: No such file or directory So I fixed it and made a patch. The patch was made and tested against `v0.3.21` on a GNU/Linux, but it should be good to apply on `master` as well. Also, it was not tested with USE_UPNP=1, but I dont see why it should fail. Yours, Amir
195	Changes: * added mapWalletInputs to track wallet txs that use a certain outpoint * added AddWalletTx to update mapWallet and keep mapWalletInputs up-to-date * CWalletTxs can be in a rejected state and optionally "conflicting", in which case they are ignored for balances and coin selection. * rejected txs are stored separately in wallet.dat (as rejtx key, and with an additional rejected field) * new function MarkConflicting() marks a tx conflicting, and all dependent wallet transactions rejected. * a new function SyncWithWallet will do both adding to the block chain and check for conflicts, and is called when connecting blocks, for incoming transactions, and when rescanning * WalletUpdateSpend works now per-transaction, and is not called anymore from script, but from AddToWallet and SyncWithWallet * GUI is updated to show rejected transactions as "rejected" instead of "0/unconfirmed", with credit and debet 0 (like unmatured generations) Re-enabling of transactions after they would stop being conflicting after a block chain reorganisation is not supported yet. The is no RPC call to retrieve information about rejected transactions.
194	The tooltip would only update the balance upon opening the UI, so I have removed such functionality until a solution is found.
193	What the title says.
192	* A new option -dns is introduced that enables name lookups in -connect and -addnode, which is not enabled by default, as it may be considered a security issue. * A NameLookup function is added that supports retrieving one or more addresses based on a host name * CAddress constructors (optionally) support name lookups. * The different places in the source code that did name lookups are refactored to use NameLookup or CAddress instead (dns seeding, irc server lookup, getexternalip, ...).
191	Im using hardened gentoo. and when im trying to compile bitcoin with its toolchain, i can see this error: g++ -c -I/usr/include/db4.8 -DFOURWAYSSE2 -DUSE_SSL -DUSE_UPNP=1 -DNOPCH -Wno-invalid-offsetof -Wformat -O2 -march=core2 -mfpmath=sse -mmmx -msse -msse2 -mssse3 -pipe -I/usr/lib/wx/include/gtk2-unicode-2.9 -I/usr/include/wx-2.9 -D_FILE_OFFSET_BITS=64 -DWXUSINGDLL -D__WXGTK__ -pthread -DGUI -o obj/rpc.o rpc.cpp main.cpp: In function void CallCPUID(int, int&, int&): main.cpp:3160:6: error: PIC register clobbered by %ebx in asm main.cpp: In function bool Detect128BitSSE2(): main.cpp:3160:6: error: PIC register clobbered by %ebx in asm main.cpp:3160:6: error: PIC register clobbered by %ebx in asm make: *** [obj/main.o] Error 1 If im adding -fno-pic option, it compiles successfully, but show segmenation fault when starting. Here is additional info: and For information, how-to fix this issue see
190	Too features which I thought would be very useful is an easy way to view your balance without opening up the whole application, so I added the balance to the tooltip. I also felt that adding a send coins option was nice, as there is even less reason to open up the whole bitcoin client just to send some coins. Please note that I may not have done the translations (that is, used _()) perfectly regarding the tooltips, so please check that first.
189	Theres no way to clear transactions from the transactions list, or filter view by amount/date. If a user is spammed by a troll posting thousands of 0.01 transactions, this can make it really awkward to navigate their transactions list and spot non-spam activity. (Note: OS X two-finger scrolling doesnt work in the transaction list for some reason.)
188	The preferences pane doesnt offer any way to specify the datadir/wallet.dat location. This can be done with command-line flags (though this is a bit tricky on OS X), but thats awkward for the average user (and breaks when the user launches bitcoin from Spotlight or a default icon). This would be useful for people who travel a lot (or just want security) and want to keep their wallet.dat on a keychain USB drive.
187	
186	This should allow the bitcoin binaries to run on ever so slightly more installs, specifically those who use a different libpng library (many distros use 1.4 which is imcompatible with 1.2) This is unused as bitcoin literally never uses PNGs, anywhere.
185	If "getaccountaddress" is the first RPC method to be called on an empty wallet, it will hang and crash the RPC interface. To reproduce: 1) remove wallet.dat 2) start "./bitcoind" 3) check if running with "./bitcoind help" 4) run "./bitcoind getaccountaddress foo" 5) observe that the call never returns Note: This will not happen, if you call "getinfo" or "getnewaddress" (and possibly others) before the call to getaccountaddress. Some debugging shows the hang to happen on line 348 in rpc.cpp when GetKeyFromKeyPool() is called.
184	Code in db.cpp was missing an #ifdef
183	Adds two rpc commands : - signmessage <bitcoinaddress> <message> - verifymessage <pubkey> <sign> <message> It allows to sign a message with the public key of a bitcoin address you own, to be sure of the identity of the sender. Command : ./bitcoind signmessage 1L5zqFahc8Ahu9wtgJqCeJMendvD174xsG "Hi github users :p" Output : { "address" : "1L5zqFahc8Ahu9wtgJqCeJMendvD174xsG", "pubkey" : "04ef6e366cd6b0b8fbf02c0c25ad39fe892b90c597875899fdc9db16941cf43fb8c429e0534cb8b972f5cc9f1a50f36dc3352ffad427f073e1c64a145828a3be6e", "sign" : "3046022100a80b6e0c7c54c54ba943f4e3cde12f5a7dc5313e3f0a15ce868f01683ced64fa0221008b4ad7d3800a11c241dcef7aaf44c8224a7d9f1e54d3e669bf4887036b6d10af" } Command : ./bitcoind verifymessage <above pubkey> <above sign> "Hi github users :p" Output : { "address" : "1L5zqFahc8Ahu9wtgJqCeJMendvD174xsG", "pubkey" : "04ef6e366cd6b0b8fbf02c0c25ad39fe892b90c597875899fdc9db16941cf43fb8c429e0534cb8b972f5cc9f1a50f36dc3352ffad427f073e1c64a145828a3be6e" } Reviews and comments are welcomed, I dont know if all is used as it should. Forum thread : EDIT(alex): Sipas revision references pull 183 -
182	This change supports bitcoin: URIs in bitcoin. It is being resubmitted due to git repo issues on my end (yet again). Sorry about that. Forums thread here:
181	When one single dependency of an unconfirmed transaction is already verified, this does not mean the parent is confirmed. We can skip checking its own dependencies though.
180	This pull request aims at adding autotools for build checks, configure flags for compile time configuration and handling of #define directives inside code and things that will possibily make it better for bitcoin to be packaged inside distributions, as well ported to different architectures. Build of this branch was tested on Debian 6 (also with WX GUI), Apple OSX 10.5 (no WX GUI) and CYGWIN win32 (no UPNP nor WX) **completed** add autotools build system ==================== * commit ref: jaromil@500da9eb20d480c431d610472bfa3af92112aead this pull request follows as third attempt to previous 2: * * and basically consists of a rebase of this branch eliminating all those commits and squashing them in 2 steps. 1st commit moves files around under old build system 2nd commit converts the build system to autotools (while we still leave the old build system in place, optional) the bitcoind code itself was never modified: files were moved around and the header auto-config.h generated by autoconf was added to headers.h code modules have been separated in subdirectories and compiled as static libraries, still using libtool, which is the recommended behaviour when using autotools. interesting configure flags --------------------- * --enable-upnp=0/1 has been added and configure.ac contains templates for adding more compile time choices in future. * --enable-gui has been added also to activate compilation of the included WX GUI. other wx related flags are provided to indicate prefix or static library build. * --enable-debug compiles the binaries with debugging flags, giving all warnings - anyone willing to help should run it at least once :) * --enable-profiling enables support for gprof the GNU profiler (will dump gmon.out files after run) * --with-wxdir=PATH Use uninstalled version of wxWidgets in PATH * --with-wx-prefix=PREFIX Prefix where wxWidgets is installed (optional) * --with-boost and more boost build configuration code re-organization =============== * commit ref: jaromil@84c3fb07b0b8199c7f85c5de280e7100bad0786f directory re-organization (keeps the old build system) there is no internal modification of any file in this commit files are moved into directories according to established standards in sourcecode distribution; these directories contain: * src - Files that are used in constructing the executable binaries * doc - Files in HTML and text format that document usage, quirks of the implementation, and contributor checklists. * locale - Files that contain human language translation of strings used in the program * contrib - Files contributed from distributions or other third party implementing scripts and auxiliary programs
179	This is just a quick fix - probably more graceful error handling is needed. If the lock file cant be accessed, we will abort anyway (with an exception from boost), but at least it wont be a segfault now.
178	Fixes link failure when using the gold linker. Also tested with regular ld and it seems to work fine.
177	adding autotools for build checks, configure flags for compile time configuration and handling of #define directives inside code and things that will possibily make it better for bitcoin to be packaged inside distributions, as well ported to different architectures. this pull request follows my first sloppy attempt here: ive followed suggestions given by jgarzik, thanks for your patience this pull request is a rebase of this branch which eliminates all those commits and squashes them in this. the bitcoind code itself was never modified, just moved around, with two exceptions: 1) 9141f2c renamed cryptopp/config.h to settings.h 2) c929bae code namespace change: (int)VERSION renamed to BITCOIN_VERSION in headers.h so just one filename and one variable name changed, plus one #ifdef inside headers.h code modules have been separated in subdirectories and compiled as static libraries, still using libtool, which is the recommended behaviour when using autotools. a flag --enable-upnp=0/1 has been added and configure.ac contains templates for adding more compile time choices in future. as libbitcoin will be provided in future, ABI versioning is also ready to be adopted via libtool. the test/ directory is imported from gasteves branch for test units. Build of this was tested on Debian 6 (also with WX GUI), Apple OSX 10.5 (without WX GUI) and CYGWIN win32 (without dependencies).
176	Support for bitcoin: URIs in bitcoin
175	makefile.unix upnp ifdef doesnt seem to be working as intended unless I got an issue with my make (3.81). ``` tar xfz tarballs/bitcoin-0.3.21rc-linux.tar.gz cd bitcoin-0.3.21/src make -f makefile.unix bitcoind g++ -c -O2 -Wno-invalid-offsetof -Wformat -g -D__WXDEBUG__ -DNOPCH -DFOURWAYSSE2 -DUSE_SSL -DUSE_UPNP=0 -o obj/nogui/util.o util.cpp ``` I use instead in makefile.unix ``` ifeq ($(USE_UPNP),1) LIBS += -l miniupnpc DEFS += -DUSE_UPNP endif ``` It looks like it may need to be changed in makefile.* Im sorry but I dont know git yet so I could not fix myself. Learning git just moved up on my priority list though. uname -a Linux bc0 2.6.35-22-generic #33-Ubuntu SMP Sun Sep 19 20:32:27 UTC 2010 x86_64 GNU/Linux make -v GNU Make 3.81
174	This patch allows you to send payments to email address, domain names and url from the bitcoin GUI. Valid examples of inputs : - wikipedia.org - - yourpseudo@bitcoin-contact.org - **Technical explanation** Input url/address is translated to an request sent to the corresponding domain (ip addresses are not translated for backward compatilibty). A valid response is a text formatted in json, containing a bitcoin address with an optional label : ```{ "error" : "", "label" : "Bitcoin Contact", "address" : "1NMxHnpAE38P9HN9pzRSqAFMCv1WcXZC1N" }``` GUI will propose you to add the returned address in your address book. Discussion on forum :
173	This is a single-line change that allows non-standard transactions to get into the transaction memory pool (and, therefore, relayed and written into blocks) on -testnet. Satoshi suggested this to me in an email, and I agree it is a good idea-- we should encourage people to experiment on -testnet with new features, or they will figure out less efficient ways of wedging what they want to do into the existing standard transaction types.
172	getbalance and getbalance * can return different amounts for 0-confirmation transactions, because of the way change transactions are counted. The discrepancy resolves as soon as the transaction is accepted into a block. Details: CWalletTx::IsConfirmed() returns false for at least some 0-confirmation transactions loaded from a wallet, because they are missing vtxPrev (supporting transactions). That causes the issue, because getbalance (and the send methods) only count outputs of confirmed transactions as available, but GetAmounts (used by getbalance *) assumes that change TxOuts are always available to be spent.
171	Please implement a displaying of fees amount upon completion of the transaction in CLI (like transaction number is currently displayed).
170	See this transaction here: in this block: The transaction was 0.225 kB, one input, one output and total block size was 4.07 kB and I was told that it needed a 0.01 BTC transaction fee. WTF?
169	OK, lets try this in smaller more informative commits. Heres the first of a sequence of pull requests. This one only adds the ability to send to a named@server It expects back from the server a JSON with an address key or one with "error"/"errcode" in which case it throws an error in RPC. There is an example implementation of the server code in contrib/ns/ which can be installed.
168	As an alternative to we can run the whole process in background mode (excluding the GUI thread). This is recomended by Microsoft for I/O intensive services/daemons (http://msdn.microsoft.com/en-us/library/ms686219%28v=vs.85%29.aspx) especially if run at system startup. Discussion:
167	I think RPC access is important enough that it should be enabled by default. This would allow greater integration with other applications. For instance, we could support Bitcoin URIs (issue #14) by having a `bitcoin openuri` command that would open the "Send Coins" dialog box with the address and amount pre-populated. I therefore propose the a small changes: - The `-server` flag is deprecated and the server config option is considered on (1) by default. - A `-noserver` flag added to explicitly turn off the RPC server at the command line. - If there is an `rpcpassword` field in the `bitcoin.conf` file, that password is used. - Otherwise, a random password is generated on startup, and placed in a file called `bitcoin.password` (user readable only). If people think this is a good idea, I can put together a patch for this.
166	I get a crash immediately after starting on OS X 10.7 (not yet released, but worth looking at). Im asked whether to continue or crash the app. It appears to continue to work, though Ive been a bit unreliably receiving new blocks. Exception Name: NSInvalidArgumentException Description: _createMenuRef called with existing principal MenuRef already associated with menu User Info: (null) 0 CoreFoundation 0x00007fff91b61e66 __exceptionPreprocess + 198 1 libobjc.A.dylib 0x00007fff8e803dca objc_exception_throw + 43 2 CoreFoundation 0x00007fff91b61c9a +[NSException raise:format:arguments:] + 106 3 CoreFoundation 0x00007fff91b61c24 +[NSException raise:format:] + 116 4 AppKit 0x00007fff8f38e03f -[NSCarbonMenuImpl _createMenuRef] + 64 5 AppKit 0x00007fff8f38d9aa -[NSCarbonMenuImpl _instantiateCarbonMenu] + 148 6 AppKit 0x00007fff8f358a21 -[NSApplication finishLaunching] + 846 7 AppKit 0x00007fff8f3583e5 -[NSApplication run] + 111 8 bitcoin 0x00000001001e71d3 _ZN29wxDisclosureTriangleCocoaImplD1Ev + 3667 9 bitcoin 0x0000000100357061 _ZN22wxMimeTypesManagerImpl6UtiMapixERK8wxString + 8865 10 bitcoin 0x00000001002aabc8 _ZNK26wxAnyValueTypeImplwxString12ConvertValueERK16wxAnyValueBufferP14wxAnyValueTypeRS0_ + 1784 11 bitcoin 0x00000001001b9cf7 _ZN21wxICONResourceHandlerD1Ev + 1575 12 bitcoin 0x0000000100308cad _ZN11wxHashTableD1Ev + 7485 13 bitcoin 0x00000001000f6824 _Z10ExitThreadj + 30692 14 bitcoin 0x0000000100035c34 _ZNSt8_Rb_treeISsSsSt9_IdentityISsESt4lessISsESaISsEE8_M_eraseEPSt13_Rb_tree_nodeISsE + 26100 15 ??? 0x0000000000000002 0x0 + 2
165	Fix for #156 and one other small UPnP bug.
164	1. bitcoind -naming-password=hello 2. bitcoind publickey > copy this output to clipboard 3. login to > paste public key and click Update 4. add a new nickname 5. bitcoind updatename myname@109.75.176.109 Now someone else can run: bitcoind send genjix@109.75.176.109 2 Your keypair for altering your nickname is stored in .bitcoin/keypair.rsa Forum post:
163	This should fix #156 by only calling FreeUPNPUrls(urls) when the UPNP_GetValidIGD() value is non-zero.
162	just a start, needs more detections at configure, however works to build the daemon alone for now. more flags should be present on ./configure to select gui build and detect required libraries. libtool is just used to build the internal libcryptopp, but we can ship libbitcoin.so in future. the aim of this fork is mostly that of GNUification for bitcoin codebase and process separation. code will be shared between daemon and client implementations via shared libraries. it might look as a traumatic for now, but well think of the long term... consider no code was changed in this commit, just moved around. win32 and osx builds can be fixed to work using autotools or a parallel cmake build. apologies for not having created a branch, ive pushed on my forks master. if that is a problem i can redo that quickly.
161	Run bitcoin initialization at lower priority (Windows-only for now) This can be useful for people that run bitcoin at system startup. It is enabled by default in GUI mode and can be enabled in daemon mode by using the -nicestart CLI option.
160	add parameter from to listtransactions this allows querying for ranges, i.e. transactions [from, from+count)
159	Add -nicestart option to run initialization at lower priority (Windows-only for now) This can be useful for people that run bitcoin at system startup.
158	User dishware in the Bitcoin forums has these suggestions for the transaction lists: - Add grid lines separate each record - Allow ascending/descending sorting - Add serial number to the list The original suggestion, complete with mocked-up screens, is here:
157	See here:
156	Reproduction steps: When UPnP port mapping is enabled, open settings, and attempt to uncheck UPnP port mapping. Expected behavior: Checkbox unchecks. Observed behavior: Segfault. Program received signal SIGSEGV, Segmentation fault. [Switching to Thread 0xb3c0cb90 (LWP 23682)] 0xb70c67e2 in free () from /lib/i686/cmov/libc.so.6 (gdb) bt #0 0xb70c67e2 in free () from /lib/i686/cmov/libc.so.6 #1 0x0837b96b in FreeUPNPUrls () #2 0x08096a59 in ThreadMapPort2 (parg=0x0) at net.cpp:940 #3 0x08096bff in ThreadMapPort (parg=0x0) at net.cpp:877 #4 0xb71b74c0 in start_thread () from /lib/i686/cmov/libpthread.so.0 #5 0xb71366de in clone () from /lib/i686/cmov/libc.so.6 Im not sure why there arent full symbols. Im using the standard makefile with the -g option. Note that Ive also seen a segfault when originally enabling UPnP port mapping after clicking the checkbox and hitting okay. I cant reproduce it now because Im unable to disable port mapping due to the segfault above. System/build information: git checkout as of b37f09aa2e80b17028ad7fe1e87362c0f07c7406 Debian 5.0 Linux 2.6.26-1-686 #1 SMP Sat Jan 10 18:29:31 UTC 2009 i686 GNU/Linux gcc 4.3.2 miniupnpc 1.5
155	Yesterday I was building bitcoind and ran into a few issues when following the build instructions. I fixed it up, so anyone running Mac OS X 10.6 or below should be able to build without an issue. Im considering writing a configure script that checks for the dependencies and signals when a dependency isnt met. I can only test on OS X for now, though.
154	Two changes, in two commits: 1) Make version number->string conversion consistent throughout bitcoin. 2) Major HTTP clients send full version string in User-Agent header. Major HTTP servers send full version string in Server header. Update our RPC code to follow suit.
153	Set time locale to POSIX in rfc1123Time so weekday/months in responses are correct. Rewritten version of a patch from Luke-Jr.
152	Information about the best known chain is added to wallet.dat. If this information does not match the data in blkindex.dat, a rescan is automatically performed at startup, starting from the the last known block. When upgrading from a wallet which does not have this information, no rescan is done automatically.
151	one commit this time, with what should be my username and email so you can blame me
150	
149	When starting the client, ReacceptWalletTransaction didnt skip spent transactions in its loop, and processed all old spent transactions again.
148	Should warns the user if the block download is out of date, thus new transaction doesnt show up yet. They should also be warned when bitcoin first started up.
147	Not sure where problems is, but ive tried precompiled version from sf and tried to build bitcoin by myself. Both not works. Its starts, but no gui. According to strace its cycled on one action <pre> brk(0x8ef7000) = 0x8ef7000 pread64(12, "\0\0\0\0\1\0\0\0\326%\0\0\1\f\0\0\370\4\0\0\32\0\334\6\1\5\320\17L\17\34\17"..., 4096, 39673856) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\370\4\0\0\326%\0\0\214\27\0\0&\0\244\2\1\5\320\17L\17\220\4"..., 4096, 5210112) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\214\27\0\0\370\4\0\0:=\0\0\32\0\334\6\1\5\320\17L\17\34\17"..., 4096, 24690688) = 4096 pread64(12, "\0\0\0\0\1\0\0\0:=\0\0\214\27\0\0\215\t\0\0\30\0\220\7\1\5\320\17L\17\34\17"..., 4096, 64200704) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\215\t\0\0:=\0\0\355\17\0\0\"\0\f\4\1\5\254\6(\6\320\17"..., 4096, 10014720) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\355\17\0\0\215\t\0\0?=\0\0\34\0(\6\1\5\320\17L\17\34\17"..., 4096, 16699392) = 4096 pread64(12, "\0\0\0\0\1\0\0\0?=\0\0\355\17\0\0f\30\0\0\26\0D\10\1\5\320\17L\17\34\17"..., 4096, 64221184) = 4096 pread64(12, "\0\0\0\0\1\0\0\0f\30\0\0?=\0\0{\1\0\0&\0\244\2\1\5\320\17L\17\34\17"..., 4096, 25583616) = 4096 pread64(12, "\0\0\0\0\1\0\0\0{\1\0\0f\30\0\0\225\35\0\0,\0\210\0\1\5\320\17L\17\254\6"..., 4096, 1552384) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\225\35\0\0{\1\0\0B\17\0\0\"\0\f\4\1\5\320\17L\17\24\10"..., 4096, 31019008) = 4096 pread64(12, "\0\0\0\0\1\0\0\0B\17\0\0\225\35\0\0\263&\0\0\36\0t\5\1\5\320\17L\17\34\17"..., 4096, 15998976) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\263&\0\0B\17\0\0\315\5\0\0\34\0(\6\1\5\320\17L\17\24\10"..., 4096, 40579072) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\315\5\0\0\263&\0\0\31%\0\0\34\0(\6\1\5\320\17L\17\34\17"..., 4096, 6082560) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\31%\0\0\315\5\0\0\262\f\0\0\"\0\f\4\1\5`\7\334\6\320\17"..., 4096, 38899712) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\262\f\0\0\31%\0\0\365!\0\0 \0\300\4\1\5\320\17L\17\34\17"..., 4096, 13312000) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\365!\0\0\262\f\0\0\271\0\0\0\26\0D\10\1\5\320\17L\17\34\17"..., 4096, 35606528) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\271\0\0\0\365!\0\0\275\21\0\0*\0<\1\1\5\320\17L\17\34\17"..., 4096, 757760) = 4096 pread64(12, "\0\0\0\0\1\0\0\0\275\21\0\0\271\0\0\0] \0\0&\0\244\2\1\5D\5\300\4\24\10"..., 4096, 18599936) = 4096 brk(0x8f18000) </pre> just digits not same.
146	As unsexy as unit tests are, the quality and reliability of the Bitcoin code base could really benefit from some basic automated tests. Im not even talking about integration tests with multiple nodes, but rather some simple tests of the core logic. Some initial tests (not mine) are here: So if others agree that unit testing would be useful.. What unit test framework, if any, should be used?
145	For now the entire PKI in bitcoin is closed for users. I propose make it more clear at least for JSON-RPC. It will be possible to create bitcoin paycards and such. All is required is to convert private (and maybe public, too) keys to base64 encoding and printing them to stdout and also implement creating private key in wallet.dat by importing such base64-encoded value. I guess public key may be easily calculated from private so when you export private you have no need to export public. The purpose of this feature is to make possible creating deferred payments when you dont know (or dont want to know) whom to pay to. You give or leave the private key which has some amount of coins somewhere and recipient then withdraws money to his own wallet. With such functionality one can make a competition and the winner gets that key and receives money so you shouldnt worry about that. You send money to the new address, export its private key and place it to the page which is shown to the winner. And so on.
144	It has two apple icons, and two Settings menus. The second Apple icon is linked with the bolded Bitcoin menu. The two settings labels are also linked (clicking the second one opens the first one.) Client 0.3.20.1 BETA OS 10.5.8
143	SendMoney*() now requires caller to acquire cs_main. GetAccountAddress() now requires caller to acquire cs_main, cs_mapWallet. Ordering is intended to match these two callchains[1]: 1. CRITICAL_BLOCK(cs_main) ProcessMessage(pfrom, strCommand, vMsg) AddToWalletIfMine() AddToWallet(wtx) CRITICAL_BLOCK(cs_mapWallet) 2. CRITICAL_BLOCK(cs_main) ProcessMessage(pfrom, strCommand, vMsg) AddToWalletIfMine() AddToWallet(wtx) CRITICAL_BLOCK(cs_mapWallet) walletdb.WriteName(PubKeyToAddress(vchDefaultKey), "") CRITICAL_BLOCK(cs_mapAddressBook) Spotted by ArtForz. Additional deadlock fixes by Gavin. [1]
142	Hide this capability from GUI users, who are unlikely to understand upon first contact that they will waste electricity for year(s), before possibly generating a single block.
141	While there is no hard consensus on what to do with CPU mining inside bitcoin, in general, I think most people will agree that 4way can go. This implementation (with performance enhancements) lives on in cpuminer. bitcoins 4way was only available on *nix, while cpuminers 4way works on Windows and Linux. I conclude that, if you are really serious about CPU mining, you are more likely to use ufasofts CPU miner, or mine, and so we dont need multiple implementations inside bitcoin.
140	The "-conf" argument should be all one needs, in order to tell bitcoin where to find its data directory and fully initialize. bitcoin reads the specified configuration file path, learns data directory location and other details, and initializes from that. However, in testing, -conf-only configurations, where -datadir is specified inside bitcoin.conf, fails to used the desired data directory, instead falling back to the default ~/.bitcoin.
139	the daemon will log to a pidfile
138	This patch adds immature generated blocks to listtransactions. They are reported just like mature blocks, except the category is immature instead of generate. This functionality is needed by people creating alternative, JSON-RPC-based GUIs, and is useful for impatient miners who currently grep through debug.log or use unofficial patches to see not-yet-mature blocks theyve generated.
137	This patch adds immature generated blocks to listtransactions. They are reported just like mature blocks, except the category is immature instead of generate. This functionality is needed by people creating alternative, JSON-RPC-based GUIs, and is useful for impatient miners who currently grep through debug.log or use unofficial patches to see not-yet-mature blocks theyve generated.
136	Fix RPC deadlocks spotted by ArtForz. Unify order in which locks are acquired.
135	Process: bitcoin [89459] Path: /Users/evgenipetrov/Downloads/bitcoin-0.3.20.01/Bitcoin.app/Contents/MacOS/bitcoin Identifier: org.bitcoin.bitcoin Version: 0.3.19 (320) Code Type: X86-64 (Native) Parent Process: launchd [105] Date/Time: 2011-03-26 17:50:20.930 +0200 OS Version: Mac OS X 10.6.6 (10J567) Report Version: 6 Interval Since Last Report: 396936 sec Crashes Since Last Report: 4 Per-App Interval Since Last Report: 2107 sec Per-App Crashes Since Last Report: 1 Anonymous UUID: B3715EC3-473C-466C-9248-2C3184DF4EE7 Exception Type: EXC_BAD_ACCESS (SIGSEGV) Exception Codes: KERN_INVALID_ADDRESS at 0x0000000000000043 Crashed Thread: 2 Thread 0: Dispatch queue: com.apple.main-thread 0 libSystem.B.dylib 0x00007fff8445b9da close + 10 1 org.bitcoin.bitcoin 0x0000000100526e10 DbTxn::set_parent(DbTxn*) + 1672744 2 org.bitcoin.bitcoin 0x0000000100514617 DbTxn::set_parent(DbTxn*) + 1596975 3 org.bitcoin.bitcoin 0x000000010051de60 DbTxn::set_parent(DbTxn*) + 1635960 4 org.bitcoin.bitcoin 0x00000001004e36be DbTxn::set_parent(DbTxn*) + 1396438 5 org.bitcoin.bitcoin 0x00000001004e31c7 DbTxn::set_parent(DbTxn*) + 1395167 6 org.bitcoin.bitcoin 0x00000001004e3129 DbTxn::set_parent(DbTxn*) + 1395009 7 org.bitcoin.bitcoin 0x000000010038d072 __db_dbt::__db_dbt() + 19084 8 org.bitcoin.bitcoin 0x00000001005e1b9c boost::condition_variable::timed_wait(boost::unique_lock<boost::mutex>&, boost::posix_time::ptime const&) + 617740 9 libSystem.B.dylib 0x00007fff844638d4 __cxa_finalize + 203 10 libSystem.B.dylib 0x00007fff844637ec exit + 18 11 com.apple.AppKit 0x00007fff855e6582 -[NSApplication terminate:] + 769 12 com.apple.AppKit 0x00007fff8561696e -[NSApplication _terminateSendShould:] + 55 13 com.apple.CoreFoundation 0x00007fff808e196c __invoking___ + 140 14 com.apple.CoreFoundation 0x00007fff808e183d -[NSInvocation invoke] + 141 15 com.apple.Foundation 0x00007fff846848f5 __NSFireTimer + 114 16 com.apple.CoreFoundation 0x00007fff808a8be8 __CFRunLoopRun + 6488 17 com.apple.CoreFoundation 0x00007fff808a6dbf CFRunLoopRunSpecific + 575 18 com.apple.HIToolbox 0x00007fff82c1493a RunCurrentEventLoopInMode + 333 19 com.apple.HIToolbox 0x00007fff82c1473f ReceiveNextEventCommon + 310 20 com.apple.HIToolbox 0x00007fff82c145f8 BlockUntilNextEventMatchingListInMode + 59 21 com.apple.AppKit 0x00007fff853bde64 _DPSNextEvent + 718 22 com.apple.AppKit 0x00007fff853bd7a9 -[NSApplication nextEventMatchingMask:untilDate:inMode:dequeue:] + 155 23 com.apple.AppKit 0x00007fff8538348b -[NSApplication run] + 395 24 org.bitcoin.bitcoin 0x00000001001e71d3 wxDisclosureTriangleCocoaImpl::~wxDisclosureTriangleCocoaImpl() + 3667 25 org.bitcoin.bitcoin 0x0000000100357061 wxMimeTypesManagerImpl::UtiMap::operator[](wxString const&) + 8865 26 org.bitcoin.bitcoin 0x00000001002aabc8 wxAnyValueTypeImplwxString::ConvertValue(wxAnyValueBuffer const&, wxAnyValueType*, wxAnyValueBuffer&) const + 1784 27 org.bitcoin.bitcoin 0x00000001001b9cf7 wxICONResourceHandler::~wxICONResourceHandler() + 1575 28 org.bitcoin.bitcoin 0x0000000100308cad wxHashTable::~wxHashTable() + 7485 29 org.bitcoin.bitcoin 0x00000001000f6824 ExitThread(unsigned int) + 30692 30 org.bitcoin.bitcoin 0x0000000100035c34 std::_Rb_tree<std::string, std::string, std::_Identity<std::string>, std::less<std::string>, std::allocator<std::string> >::_M_erase(std::_Rb_tree_node<std::string>*) + 26100 Thread 1: Dispatch queue: com.apple.libdispatch-manager 0 libSystem.B.dylib 0x00007fff8446a16a kevent + 10 1 libSystem.B.dylib 0x00007fff8446c03d _dispatch_mgr_invoke + 154 2 libSystem.B.dylib 0x00007fff8446bd14 _dispatch_queue_invoke + 185 3 libSystem.B.dylib 0x00007fff8446b83e _dispatch_worker_thread2 + 252 4 libSystem.B.dylib 0x00007fff8446b168 _pthread_wqthread + 353 5 libSystem.B.dylib 0x00007fff8446b005 start_wqthread + 13 Thread 2 Crashed: 0 org.bitcoin.bitcoin 0x0000000100527ef1 DbTxn::set_parent(DbTxn*) + 1677065 1 org.bitcoin.bitcoin 0x000000010050c822 DbTxn::set_parent(DbTxn*) + 1564730 2 org.bitcoin.bitcoin 0x0000000100510293 DbTxn::set_parent(DbTxn*) + 1579691 3 org.bitcoin.bitcoin 0x00000001003ba8ba DbTxn::set_parent(DbTxn*) + 180434 4 org.bitcoin.bitcoin 0x00000001003a078d DbTxn::set_parent(DbTxn*) + 73637 5 org.bitcoin.bitcoin 0x000000010039e3c7 DbTxn::set_parent(DbTxn*) + 64479 6 org.bitcoin.bitcoin 0x00000001004a54f5 DbTxn::set_parent(DbTxn*) + 1142029 7 org.bitcoin.bitcoin 0x00000001004a5357 DbTxn::set_parent(DbTxn*) + 1141615 8 org.bitcoin.bitcoin 0x000000010048e2ce DbTxn::set_parent(DbTxn*) + 1047270 9 org.bitcoin.bitcoin 0x00000001004b3eb8 DbTxn::set_parent(DbTxn*) + 1201872 10 org.bitcoin.bitcoin 0x0000000100387490 wxMessageOutputDebug::~wxMessageOutputDebug() + 123184 11 org.bitcoin.bitcoin 0x0000000100059ff1 bool CDB::Write<std::pair<std::string, std::vector<unsigned char, std::allocator<unsigned char> > >, CAddress>(std::pair<std::string, std::vector<unsigned char, std::allocator<unsigned char> > > const&, CAddress const&, bool) + 471 12 org.bitcoin.bitcoin 0x000000010004ab8b operator-(CBigNum const&, CBigNum const&) + 1979 13 org.bitcoin.bitcoin 0x0000000100066150 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 9034 14 org.bitcoin.bitcoin 0x00000001000709e4 CDB::~CDB() + 7812 15 org.bitcoin.bitcoin 0x0000000100070e50 CDB::~CDB() + 8944 16 libSystem.B.dylib 0x00007fff8448a536 _pthread_start + 331 17 libSystem.B.dylib 0x00007fff8448a3e9 thread_start + 13 Thread 3: 0 libSystem.B.dylib 0x00007fff8445dba0 __vfprintf + 20 1 libSystem.B.dylib 0x00007fff844ac154 vfprintf + 92 2 org.bitcoin.bitcoin 0x000000010002dd35 std::exception::exception() + 3965 3 org.bitcoin.bitcoin 0x00000001004af8a8 DbTxn::set_parent(DbTxn*) + 1183936 4 org.bitcoin.bitcoin 0x00000001004af331 DbTxn::set_parent(DbTxn*) + 1182537 5 org.bitcoin.bitcoin 0x0000000100527f8c DbTxn::set_parent(DbTxn*) + 1677220 6 org.bitcoin.bitcoin 0x000000010050c822 DbTxn::set_parent(DbTxn*) + 1564730 7 org.bitcoin.bitcoin 0x0000000100510293 DbTxn::set_parent(DbTxn*) + 1579691 8 org.bitcoin.bitcoin 0x00000001003ba8ba DbTxn::set_parent(DbTxn*) + 180434 9 org.bitcoin.bitcoin 0x00000001003a078d DbTxn::set_parent(DbTxn*) + 73637 10 org.bitcoin.bitcoin 0x000000010039e3c7 DbTxn::set_parent(DbTxn*) + 64479 11 org.bitcoin.bitcoin 0x00000001004a54f5 DbTxn::set_parent(DbTxn*) + 1142029 12 org.bitcoin.bitcoin 0x00000001004a5357 DbTxn::set_parent(DbTxn*) + 1141615 13 org.bitcoin.bitcoin 0x000000010048e2ce DbTxn::set_parent(DbTxn*) + 1047270 14 org.bitcoin.bitcoin 0x00000001004b3eb8 DbTxn::set_parent(DbTxn*) + 1201872 15 org.bitcoin.bitcoin 0x0000000100387490 wxMessageOutputDebug::~wxMessageOutputDebug() + 123184 16 org.bitcoin.bitcoin 0x000000010005adaf bool CDB::Write<std::pair<std::string, uint256>, CTxIndex>(std::pair<std::string, uint256> const&, CTxIndex const&, bool) + 519 17 org.bitcoin.bitcoin 0x000000010004cd9d operator-(CBigNum const&, CBigNum const&) + 10701 18 org.bitcoin.bitcoin 0x000000010007b4e9 DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 40713 19 org.bitcoin.bitcoin 0x000000010007d649 DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 49257 20 org.bitcoin.bitcoin 0x000000010007f644 DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 57444 21 org.bitcoin.bitcoin 0x000000010007fc8c DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 59052 22 org.bitcoin.bitcoin 0x0000000100081f05 DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 67877 23 org.bitcoin.bitcoin 0x0000000100082713 DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 69939 24 org.bitcoin.bitcoin 0x0000000100088cc4 DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 95972 25 org.bitcoin.bitcoin 0x000000010008a755 DecodeBase58Check(char const*, std::vector<unsigned char, std::allocator<unsigned char> >&) + 102773 26 org.bitcoin.bitcoin 0x0000000100065945 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 6975 27 org.bitcoin.bitcoin 0x0000000100065436 CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 5680 28 libSystem.B.dylib 0x00007fff8448a536 _pthread_start + 331 29 libSystem.B.dylib 0x00007fff8448a3e9 thread_start + 13 Thread 4: 0 libSystem.B.dylib 0x00007fff8446af8a __workq_kernreturn + 10 1 libSystem.B.dylib 0x00007fff8446b39c _pthread_wqthread + 917 2 libSystem.B.dylib 0x00007fff8446b005 start_wqthread + 13 Thread 5: 0 libSystem.B.dylib 0x00007fff8448bfca __semwait_signal + 10 1 libSystem.B.dylib 0x00007fff8448be59 nanosleep + 148 2 org.bitcoin.bitcoin 0x00000001005486bb boost::program_options::detail::utf8_codecvt_facet::~utf8_codecvt_facet() + 3499 3 org.bitcoin.bitcoin 0x000000010006401d CTransaction::ReadFromDisk(CDiskTxPos, __sFILE**) + 535 4 org.bitcoin.bitcoin 0x00000001000ee504 CBigNum::operator<<=(unsigned int) + 23376 5 libSystem.B.dylib 0x00007fff8448a536 _pthread_start + 331 6 libSystem.B.dylib 0x00007fff8448a3e9 thread_start + 13 Thread 6: 0 libSystem.B.dylib 0x00007fff8446af8a __workq_kernreturn + 10 1 libSystem.B.dylib 0x00007fff8446b39c _pthread_wqthread + 917 2 libSystem.B.dylib 0x00007fff8446b005 start_wqthread + 13 Thread 2 crashed with X86 Thread State (64-bit): rax: 0x000000000000000b rbx: 0x000000000003a410 rcx: 0x000000000000002c rdx: 0x0000000000001000 rdi: 0x0000000100b125f0 rsi: 0x0000000000000001 rbp: 0x0000000115405700 rsp: 0x0000000115405690 r8: 0x0000000000001000 r9: 0x0000000000000000 r10: 0x0000000100b125f0 r11: 0x0000000000000246 r12: 0x00000001154063a8 r13: 0x00000001004b3c74 r14: 0x0000000115406420 r15: 0x0000000115406570 rip: 0x0000000100527ef1 rfl: 0x0000000000010246 cr2: 0x0000000000000043 Binary Images: 0x100000000 - 0x100802fdf +org.bitcoin.bitcoin 0.3.19 (320) <BB066DE7-CAE7-42EA-631C-2D91954FB3A3> /Users/evgenipetrov/Downloads/bitcoin-0.3.20.01/Bitcoin.app/Contents/MacOS/bitcoin 0x7fff5fc00000 - 0x7fff5fc3bdef dyld 132.1 (???) <B536F2F1-9DF1-3B6C-1C2C-9075EA219A06> /usr/lib/dyld 0x7fff80107000 - 0x7fff801a7fff com.apple.LaunchServices 362.2 (362.2) <A8EDC37C-1D40-5ED0-49BE-90EF110A6B3A> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/LaunchServices 0x7fff801a8000 - 0x7fff80226fff com.apple.CoreText 3.5.0 (???) <4D5C7932-293B-17FF-7309-B580BB1953EA> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreText.framework/Versions/A/CoreText 0x7fff80272000 - 0x7fff804f8fff com.apple.security 6.1.1 (37594) <1B4E1ABD-1BB3-DA49-F574-0EEB23E73C6A> /System/Library/Frameworks/Security.framework/Versions/A/Security 0x7fff804f9000 - 0x7fff8051ffe7 libJPEG.dylib ??? (???) <6690F15D-E970-2678-430E-590A94F5C8E9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libJPEG.dylib 0x7fff80600000 - 0x7fff8067dfef libstdc++.6.dylib 7.9.0 (compatibility 7.0.0) <35ECA411-2C08-FD7D-11B1-1B7A04921A5C> /usr/lib/libstdc++.6.dylib 0x7fff80717000 - 0x7fff80766fef libTIFF.dylib ??? (???) <AE9DC484-1382-F7AD-FE25-C28082FCB5D9> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libTIFF.dylib 0x7fff80767000 - 0x7fff807b0fef libGLU.dylib ??? (???) <CCE779A9-2467-A5AA-A558-691E43A1105F> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib 0x7fff807b1000 - 0x7fff80841fff com.apple.SearchKit 1.3.0 (1.3.0) <A710A552-4343-3811-94DA-04F0E8A2AD93> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/SearchKit.framework/Versions/A/SearchKit 0x7fff8085b000 - 0x7fff809d2fe7 com.apple.CoreFoundation 6.6.4 (550.42) <770C572A-CF70-168F-F43C-242B9114FCB5> /System/Library/Frameworks/CoreFoundation.framework/Versions/A/CoreFoundation 0x7fff809fb000 - 0x7fff80a20ff7 com.apple.CoreVideo 1.6.2 (45.6) <E138C8E7-3CB6-55A9-0A2C-B73FE63EA288> /System/Library/Frameworks/CoreVideo.framework/Versions/A/CoreVideo 0x7fff80a21000 - 0x7fff80a42fff libresolv.9.dylib 41.0.0 (compatibility 1.0.0) <6993F348-428F-C97E-7A84-7BD2EDC46A62> /usr/lib/libresolv.9.dylib 0x7fff80a89000 - 0x7fff80ba2fef libGLProgrammability.dylib ??? (???) <4F2DC233-7DD2-1204-CAA5-3E6524F0AB75> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLProgrammability.dylib 0x7fff80cab000 - 0x7fff80ce6fff com.apple.AE 496.4 (496.4) <CBEDB6A1-FD85-F842-4EB8-CC289FAE0F24> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/AE.framework/Versions/A/AE 0x7fff80ce7000 - 0x7fff80da0fff libsqlite3.dylib 9.6.0 (compatibility 9.0.0) <2C5ED312-E646-9ADE-73A9-6199A2A43150> /usr/lib/libsqlite3.dylib 0x7fff812a6000 - 0x7fff812bffff com.apple.CFOpenDirectory 10.6 (10.6) <CCF79716-7CC6-2520-C6EB-A4F56AD0A207> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/Frameworks/CFOpenDirectory.framework/Versions/A/CFOpenDirectory 0x7fff81343000 - 0x7fff81386ff7 libRIP.A.dylib 545.0.0 (compatibility 64.0.0) <7E30B5F6-99FD-C716-8670-5DD4B4BAED72> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libRIP.A.dylib 0x7fff81417000 - 0x7fff8142dfff com.apple.ImageCapture 6.0.1 (6.0.1) <09ABF2E9-D110-71A9-4A6F-8A61B683E936> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/ImageCapture.framework/Versions/A/ImageCapture 0x7fff8162d000 - 0x7fff81638ff7 com.apple.HelpData 2.0.4 (34) <B44D2E2A-BC1E-CD63-F8A1-C9465491693A> /System/Library/PrivateFrameworks/HelpData.framework/Versions/A/HelpData 0x7fff81639000 - 0x7fff81685fff libauto.dylib ??? (???) <F7221B46-DC4F-3153-CE61-7F52C8C293CF> /usr/lib/libauto.dylib 0x7fff81686000 - 0x7fff8169cfef libbsm.0.dylib ??? (???) <37BFB2A4-EBD3-ACBB-89F2-3C158B262A72> /usr/lib/libbsm.0.dylib 0x7fff816b3000 - 0x7fff816d3ff7 com.apple.DirectoryService.Framework 3.6 (621.9) <FF6567B5-56BD-F3EC-E59D-1EC583C3CF73> /System/Library/Frameworks/DirectoryService.framework/Versions/A/DirectoryService 0x7fff8179a000 - 0x7fff8179bfff liblangid.dylib ??? (???) <EA4D1607-2BD5-2EE2-2A3B-632EEE5A444D> /usr/lib/liblangid.dylib 0x7fff817dc000 - 0x7fff817dcff7 com.apple.vecLib 3.6 (vecLib 3.6) <08D3D45D-908B-B86A-00BA-0F978D2702A7> /System/Library/Frameworks/vecLib.framework/Versions/A/vecLib 0x7fff817dd000 - 0x7fff817deff7 com.apple.TrustEvaluationAgent 1.1 (1) <51867586-1C71-AE37-EAAD-535A58DD3550> /System/Library/PrivateFrameworks/TrustEvaluationAgent.framework/Versions/A/TrustEvaluationAgent 0x7fff81930000 - 0x7fff81961fff libGLImage.dylib ??? (???) <1A8E58CF-FA2F-14F7-A097-D34EEA8A7D03> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLImage.dylib 0x7fff81ae0000 - 0x7fff81ae5fff libGFXShared.dylib ??? (???) <991F8197-FD06-2AF1-F99B-E448ED4FB2AC> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGFXShared.dylib 0x7fff81ae6000 - 0x7fff821e306f com.apple.CoreGraphics 1.545.0 (???) <356D59D6-1DD1-8BFF-F9B3-1CE51D2F1EC7> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/CoreGraphics 0x7fff821e4000 - 0x7fff8222cff7 libvDSP.dylib 268.0.1 (compatibility 1.0.0) <170DE04F-89AB-E295-0880-D69CAFBD7979> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvDSP.dylib 0x7fff8227d000 - 0x7fff8227dff7 com.apple.Accelerate 1.6 (Accelerate 1.6) <2BB7D669-4B40-6A52-ADBD-DA4DB3BC0B1B> /System/Library/Frameworks/Accelerate.framework/Versions/A/Accelerate 0x7fff8227e000 - 0x7fff82280fff com.apple.print.framework.Print 6.1 (237.1) <CA8564FB-B366-7413-B12E-9892DA3C6157> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Print.framework/Versions/A/Print 0x7fff82281000 - 0x7fff822ebfe7 libvMisc.dylib 268.0.1 (compatibility 1.0.0) <75A8D840-4ACE-6560-0889-2AFB6BE08E59> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libvMisc.dylib 0x7fff822ec000 - 0x7fff8234cfe7 com.apple.framework.IOKit 2.0 (???) <D107CB8A-5182-3AC4-35D0-07068A695C05> /System/Library/Frameworks/IOKit.framework/Versions/A/IOKit 0x7fff8234d000 - 0x7fff82350fff com.apple.help 1.3.1 (41) <E72514A1-B253-4CB6-5B69-E922F119AB08> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Help.framework/Versions/A/Help 0x7fff8236c000 - 0x7fff8236fff7 com.apple.securityhi 4.0 (36638) <38935851-09E4-DDAB-DB1D-30ADC39F7ED0> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SecurityHI.framework/Versions/A/SecurityHI 0x7fff82370000 - 0x7fff82375ff7 com.apple.CommonPanels 1.2.4 (91) <4D84803B-BD06-D80E-15AE-EFBE43F93605> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CommonPanels.framework/Versions/A/CommonPanels 0x7fff82403000 - 0x7fff824c4fe7 libFontParser.dylib ??? (???) <8B12D37E-3A95-5A73-509C-3AA991E0C546> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontParser.dylib 0x7fff8250b000 - 0x7fff8250eff7 libCoreVMClient.dylib ??? (???) <609598E6-195D-E5D4-3B92-AE8D9768829C> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libCoreVMClient.dylib 0x7fff8250f000 - 0x7fff826c6fef com.apple.ImageIO.framework 3.0.4 (3.0.4) <2CB9997A-A28D-80BC-5921-E7D50BBCACA7> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/ImageIO 0x7fff826c7000 - 0x7fff82704ff7 libFontRegistry.dylib ??? (???) <8C69F685-3507-1B8F-51AD-6183D5E88979> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libFontRegistry.dylib 0x7fff82705000 - 0x7fff82784fe7 com.apple.audio.CoreAudio 3.2.6 (3.2.6) <1DD64A62-0DE4-223F-F781-B272FECF80F0> /System/Library/Frameworks/CoreAudio.framework/Versions/A/CoreAudio 0x7fff82792000 - 0x7fff827a6fff libGL.dylib ??? (???) <1EB1BD0F-C17F-55DF-B8B4-8E9CF99359D4> /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib 0x7fff827a7000 - 0x7fff82856fff edu.mit.Kerberos 6.5.10 (6.5.10) <F3F76EDF-5660-78F0-FE6E-33B6174F55A4> /System/Library/Frameworks/Kerberos.framework/Versions/A/Kerberos 0x7fff82930000 - 0x7fff82aaeff7 com.apple.WebKit 6533.20 (6533.20.25) <7AFA5FA8-C044-A000-B666-59DAF1CCFF90> /System/Library/Frameworks/WebKit.framework/Versions/A/WebKit 0x7fff82abf000 - 0x7fff82be5fff com.apple.audio.toolbox.AudioToolbox 1.6.5 (1.6.5) <B51023BB-A5C9-3C65-268B-6B86B901BB2C> /System/Library/Frameworks/AudioToolbox.framework/Versions/A/AudioToolbox 0x7fff82be6000 - 0x7fff82ee4fe7 com.apple.HIToolbox 1.6.4 (???) <263AD497-F4CC-9610-E7D3-B95CF6F02030> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework/Versions/A/HIToolbox 0x7fff82ee5000 - 0x7fff82f02ff7 libPng.dylib ??? (???) <14043CBC-329F-4009-299E-DEE411E16134> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libPng.dylib 0x7fff82f03000 - 0x7fff82fb8fe7 com.apple.ink.framework 1.3.3 (107) <FFC46EE0-3544-A459-2AB9-94778A75E3D4> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/Ink.framework/Versions/A/Ink 0x7fff830ff000 - 0x7fff83122fff com.apple.opencl 12.3 (12.3) <D30A45FC-4520-45AF-3CA5-092313DB5D54> /System/Library/Frameworks/OpenCL.framework/Versions/A/OpenCL 0x7fff83123000 - 0x7fff83208fef com.apple.DesktopServices 1.5.9 (1.5.9) <27890B2C-0CD2-7C27-9D0C-D5952C5E8438> /System/Library/PrivateFrameworks/DesktopServicesPriv.framework/Versions/A/DesktopServicesPriv 0x7fff83209000 - 0x7fff8320efff libGIF.dylib ??? (???) <9A2723D8-61F9-6D65-D254-4F9273CDA54A> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libGIF.dylib 0x7fff8320f000 - 0x7fff83250fff com.apple.SystemConfiguration 1.10.5 (1.10.2) <FB39F09C-57BB-D8CC-348D-93E00C602F7D> /System/Library/Frameworks/SystemConfiguration.framework/Versions/A/SystemConfiguration 0x7fff83251000 - 0x7fff83279fff com.apple.DictionaryServices 1.1.2 (1.1.2) <E9269069-93FA-2B71-F9BA-FDDD23C4A65E> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/DictionaryServices.framework/Versions/A/DictionaryServices 0x7fff8327a000 - 0x7fff8327aff7 com.apple.Carbon 150 (152) <19B37B7B-1594-AD0A-7F14-FA2F85AD7241> /System/Library/Frameworks/Carbon.framework/Versions/A/Carbon 0x7fff8327b000 - 0x7fff83331fff libobjc.A.dylib 227.0.0 (compatibility 1.0.0) <F206BE6D-8777-AE6C-B367-7BEA76C14241> /usr/lib/libobjc.A.dylib 0x7fff83332000 - 0x7fff83336ff7 libCGXType.A.dylib 545.0.0 (compatibility 64.0.0) <63F77AC8-84CB-0C2F-8D2B-190EE5CCDB45> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXType.A.dylib 0x7fff83337000 - 0x7fff8333dff7 com.apple.CommerceCore 1.0 (6) <E8A1144C-5666-9840-4729-256FE69CDBDB> /System/Library/PrivateFrameworks/CommerceKit.framework/Versions/A/Frameworks/CommerceCore.framework/Versions/A/CommerceCore 0x7fff8333e000 - 0x7fff83353ff7 com.apple.LangAnalysis 1.6.6 (1.6.6) <DC999B32-BF41-94C8-0583-27D9AB463E8B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework/Versions/A/LangAnalysis 0x7fff83394000 - 0x7fff834d2fff com.apple.CoreData 102.1 (251) <32233D4D-00B7-CE14-C881-6BF19FD05A03> /System/Library/Frameworks/CoreData.framework/Versions/A/CoreData 0x7fff834d8000 - 0x7fff834e6ff7 libkxld.dylib ??? (???) <4016E9E6-0645-5384-A697-2775B5228113> /usr/lib/system/libkxld.dylib 0x7fff834e7000 - 0x7fff8381bfff com.apple.CoreServices.CarbonCore 861.23 (861.23) <08F360FA-1771-4F0B-F356-BEF68BB9D421> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CarbonCore.framework/Versions/A/CarbonCore 0x7fff83b68000 - 0x7fff83c3afe7 com.apple.CFNetwork 454.11.5 (454.11.5) <B3E2BE12-D7AA-5940-632A-1E5E7BF8E6E3> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/CFNetwork.framework/Versions/A/CFNetwork 0x7fff84064000 - 0x7fff840aeff7 com.apple.Metadata 10.6.3 (507.15) <5170FCE0-ED6C-2E3E-AB28-1DDE3F628FC5> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/Metadata.framework/Versions/A/Metadata 0x7fff841ec000 - 0x7fff84217ff7 libxslt.1.dylib 3.24.0 (compatibility 3.0.0) <87A0B228-B24A-C426-C3FB-B40D7258DD49> /usr/lib/libxslt.1.dylib 0x7fff84218000 - 0x7fff84225fe7 libCSync.A.dylib 545.0.0 (compatibility 64.0.0) <397B9057-5CDF-3B19-4E61-9DFD49369375> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCSync.A.dylib 0x7fff84226000 - 0x7fff84228fff libRadiance.dylib ??? (???) <76438F90-DD4B-9941-9367-F2DFDF927876> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ImageIO.framework/Versions/A/Resources/libRadiance.dylib 0x7fff84229000 - 0x7fff8426afef com.apple.QD 3.36 (???) <5DC41E81-32C9-65B2-5528-B33E934D5BB4> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework/Versions/A/QD 0x7fff84449000 - 0x7fff8444fff7 com.apple.DiskArbitration 2.3 (2.3) <857F6E43-1EF4-7D53-351B-10DE0A8F992A> /System/Library/Frameworks/DiskArbitration.framework/Versions/A/DiskArbitration 0x7fff84450000 - 0x7fff84611fff libSystem.B.dylib 125.2.1 (compatibility 1.0.0) <71E6D4C9-F945-6EC2-998C-D61AD590DAB6> /usr/lib/libSystem.B.dylib 0x7fff8461e000 - 0x7fff848a1ff7 com.apple.Foundation 6.6.4 (751.42) <9A99D378-E97A-8C0F-3857-D0FAA30FCDD5> /System/Library/Frameworks/Foundation.framework/Versions/C/Foundation 0x7fff848a2000 - 0x7fff84c3ffe7 com.apple.QuartzCore 1.6.3 (227.34) <215222AF-B30A-7CE5-C46C-1A766C1D1D2E> /System/Library/Frameworks/QuartzCore.framework/Versions/A/QuartzCore 0x7fff84c40000 - 0x7fff84cccfef SecurityFoundation ??? (???) <6860DE26-0D42-D1E8-CD7C-5B42D78C1E1D> /System/Library/Frameworks/SecurityFoundation.framework/Versions/A/SecurityFoundation 0x7fff84ccd000 - 0x7fff84ccdff7 com.apple.Cocoa 6.6 (???) <68B0BE46-6E24-C96F-B341-054CF9E8F3B6> /System/Library/Frameworks/Cocoa.framework/Versions/A/Cocoa 0x7fff84cce000 - 0x7fff84ce2ff7 com.apple.speech.synthesis.framework 3.10.35 (3.10.35) <B932F6B1-38D0-A864-1CC5-ABC77E653F91> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework/Versions/A/SpeechSynthesis 0x7fff84ce3000 - 0x7fff84ceafff com.apple.OpenDirectory 10.6 (10.6) <4200CFB0-DBA1-62B8-7C7C-91446D89551F> /System/Library/Frameworks/OpenDirectory.framework/Versions/A/OpenDirectory 0x7fff84d9d000 - 0x7fff851e1fef libLAPACK.dylib 219.0.0 (compatibility 1.0.0) <E14EC4C6-B055-A4AC-B971-42AB644E4A7C> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libLAPACK.dylib 0x7fff851e2000 - 0x7fff8527cfff com.apple.ApplicationServices.ATS 4.4 (???) <395849EE-244A-7323-6CBA-E71E3B722984> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/ATS 0x7fff8527d000 - 0x7fff8527dff7 com.apple.ApplicationServices 38 (38) <10A0B9E9-4988-03D4-FC56-DDE231A02C63> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/ApplicationServices 0x7fff8527e000 - 0x7fff8528dfff com.apple.NetFS 3.2.1 (3.2.1) <FF21DB1E-F425-1005-FB70-BC19CAF4006E> /System/Library/Frameworks/NetFS.framework/Versions/A/NetFS 0x7fff8528e000 - 0x7fff852a4fe7 com.apple.MultitouchSupport.framework 207.10 (207.10) <1828C264-A54A-7FDD-FE1B-49DDE3F50779> /System/Library/PrivateFrameworks/MultitouchSupport.framework/Versions/A/MultitouchSupport 0x7fff852a5000 - 0x7fff852a5ff7 com.apple.CoreServices 44 (44) <DC7400FB-851E-7B8A-5BF6-6F50094302FB> /System/Library/Frameworks/CoreServices.framework/Versions/A/CoreServices 0x7fff852a6000 - 0x7fff85363ff7 com.apple.CoreServices.OSServices 357 (357) <718F0719-DC9F-E392-7C64-9D7DFE3D02E2> /System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/OSServices.framework/Versions/A/OSServices 0x7fff85366000 - 0x7fff85378fe7 libsasl2.2.dylib 3.15.0 (compatibility 3.0.0) <76B83C8D-8EFE-4467-0F75-275648AFED97> /usr/lib/libsasl2.2.dylib 0x7fff8537a000 - 0x7fff85d70fff com.apple.AppKit 6.6.7 (1038.35) <9F4DF818-9DB9-98DA-490C-EF29EA757A97> /System/Library/Frameworks/AppKit.framework/Versions/C/AppKit 0x7fff85d71000 - 0x7fff85d8cff7 com.apple.openscripting 1.3.1 (???) <FD46A0FE-AC79-3EF7-AB4F-396D376DDE71> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/OpenScripting.framework/Versions/A/OpenScripting 0x7fff85eff000 - 0x7fff85f03ff7 libmathCommon.A.dylib 315.0.0 (compatibility 1.0.0) <95718673-FEEE-B6ED-B127-BCDBDB60D4E5> /usr/lib/system/libmathCommon.A.dylib 0x7fff85f04000 - 0x7fff85f34fef com.apple.shortcut 1.1 (1.1) <A99C9D8E-290B-B1E4-FEA5-CC5F2FB9C18D> /System/Library/PrivateFrameworks/Shortcut.framework/Versions/A/Shortcut 0x7fff861a0000 - 0x7fff861a1ff7 com.apple.audio.units.AudioUnit 1.6.5 (1.6.5) <14F14B5E-9287-BC36-0C3F-6592E6696CD4> /System/Library/Frameworks/AudioUnit.framework/Versions/A/AudioUnit 0x7fff861a2000 - 0x7fff86360fff libicucore.A.dylib 40.0.0 (compatibility 1.0.0) <781E7B63-2AD0-E9BA-927C-4521DB616D02> /usr/lib/libicucore.A.dylib 0x7fff86361000 - 0x7fff86361ff7 com.apple.Accelerate.vecLib 3.6 (vecLib 3.6) <DA9BFF01-40DF-EBD5-ABB7-787DAF2D77CF> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/vecLib 0x7fff863ac000 - 0x7fff863e5fef libcups.2.dylib 2.8.0 (compatibility 2.0.0) <561D0DCB-47AD-A12C-9066-70E4CBAD331C> /usr/lib/libcups.2.dylib 0x7fff869ef000 - 0x7fff86a3eff7 com.apple.DirectoryService.PasswordServerFramework 6.0 (6.0) <EC285E85-51EF-7977-7D7A-0FB4BC645E8B> /System/Library/PrivateFrameworks/PasswordServer.framework/Versions/A/PasswordServer 0x7fff86a3f000 - 0x7fff86a45fff libCGXCoreImage.A.dylib 545.0.0 (compatibility 64.0.0) <4EE16374-A094-D542-5BC5-7E846D0CE56E> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/CoreGraphics.framework/Versions/A/Resources/libCGXCoreImage.A.dylib 0x7fff86a46000 - 0x7fff86afbfe7 com.apple.ColorSync 4.6.3 (4.6.3) <AA93AD96-6974-9104-BF55-AF7A813C8A1B> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework/Versions/A/ColorSync 0x7fff86afc000 - 0x7fff86b07ff7 com.apple.speech.recognition.framework 3.11.1 (3.11.1) <F0DDF27E-DB55-07CE-E548-C62095BE8167> /System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/SpeechRecognition.framework/Versions/A/SpeechRecognition 0x7fff86b08000 - 0x7fff86b19ff7 libz.1.dylib 1.2.3 (compatibility 1.0.0) <FB5EE53A-0534-0FFA-B2ED-486609433717> /usr/lib/libz.1.dylib 0x7fff86b1a000 - 0x7fff86b20ff7 IOSurface ??? (???) <04EDCEDE-E36F-15F8-DC67-E61E149D2C9A> /System/Library/Frameworks/IOSurface.framework/Versions/A/IOSurface 0x7fff86b21000 - 0x7fff86b73ff7 com.apple.HIServices 1.8.2 (???) <7C91D07D-FA20-0882-632F-0CAE4FAC2B79> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/HIServices 0x7fff86b74000 - 0x7fff86f4efff com.apple.RawCamera.bundle 3.4.1 (546) <F7865FD2-4869-AB19-10AA-EFF1B3BC4178> /System/Library/CoreServices/RawCamera.bundle/Contents/MacOS/RawCamera 0x7fff86f4f000 - 0x7fff86f92fef libtidy.A.dylib ??? (???) <2F4273D3-418B-668C-F488-7E659D3A8C23> /usr/lib/libtidy.A.dylib 0x7fff86f93000 - 0x7fff86fdaff7 com.apple.coreui 2 (114) <D7645B59-0431-6283-7322-957D944DAB21> /System/Library/PrivateFrameworks/CoreUI.framework/Versions/A/CoreUI 0x7fff86fdb000 - 0x7fff870fcfe7 libcrypto.0.9.8.dylib 0.9.8 (compatibility 0.9.8) <48AEAFE1-21F4-B3C8-4199-35AD5E8D0613> /usr/lib/libcrypto.0.9.8.dylib 0x7fff870fd000 - 0x7fff872edfef com.apple.JavaScriptCore 6533.20 (6533.20.20) <0AA8B101-C02C-0858-84BC-4E4D397E0231> /System/Library/Frameworks/JavaScriptCore.framework/Versions/A/JavaScriptCore 0x7fff873d8000 - 0x7fff8740afff libTrueTypeScaler.dylib ??? (???) <B9ECE1BD-A716-9F65-6466-4444D641F584> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework/Versions/A/Resources/libTrueTypeScaler.dylib 0x7fff87534000 - 0x7fff8760eff7 com.apple.vImage 4.0 (4.0) <354F34BF-B221-A3C9-2CA7-9BE5E14AD5AD> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vImage.framework/Versions/A/vImage 0x7fff8760f000 - 0x7fff87694ff7 com.apple.print.framework.PrintCore 6.3 (312.7) <CDFE82DD-D811-A091-179F-6E76069B432D> /System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework/Versions/A/PrintCore 0x7fff876e2000 - 0x7fff87eecfe7 libBLAS.dylib 219.0.0 (compatibility 1.0.0) <EEE5CE62-9155-6559-2AEA-05CED0F5B0F1> /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib 0x7fff87f22000 - 0x7fff8801aff7 libiconv.2.dylib 7.0.0 (compatibility 7.0.0) <7E4ADB5A-CC77-DCFD-3E54-2F35A2C8D95A> /usr/lib/libiconv.2.dylib 0x7fff88084000 - 0x7fff88cfffef com.apple.WebCore 6533.20 (6533.20.24) <D2474418-DABB-7604-D3B9-FE1E03207765> /System/Library/Frameworks/WebKit.framework/Versions/A/Frameworks/WebCore.framework/Versions/A/WebCore 0x7fff88d00000 - 0x7fff88d55ff7 com.apple.framework.familycontrols 2.0.2 (2020) <A3CFF697-B9DB-A7E5-3B39-9DA9B34F0595> /System/Library/PrivateFrameworks/FamilyControls.framework/Versions/A/FamilyControls 0x7fff88d56000 - 0x7fff88e6dfef libxml2.2.dylib 10.3.0 (compatibility 10.0.0) <EE067D7E-15B3-F043-6FBD-10BA31FE76C7> /usr/lib/libxml2.2.dylib 0x7fff88e6e000 - 0x7fff88e7dfff com.apple.opengl 1.6.12 (1.6.12) <DE3F0528-7759-CDFD-A2CF-C51D3C9C8B39> /System/Library/Frameworks/OpenGL.framework/Versions/A/OpenGL 0x7fffffe00000 - 0x7fffffe01fff libSystem.B.dylib ??? (???) <71E6D4C9-F945-6EC2-998C-D61AD590DAB6> /usr/lib/libSystem.B.dylib Model: MacBook6,1, BootROM MB61.00C8.B00, 2 processors, Intel Core 2 Duo, 2.26 GHz, 4 GB, SMC 1.51f53 Graphics: NVIDIA GeForce 9400M, NVIDIA GeForce 9400M, PCI, 256 MB Memory Module: global_name AirPort: spairport_wireless_card_type_airport_extreme (0x14E4, 0x93), Broadcom BCM43xx 1.0 (5.10.131.36.1) Bluetooth: Version 2.3.8f7, 2 service, 19 devices, 1 incoming serial ports Network Service: Ethernet, Ethernet, en0 Serial ATA Device: Hitachi HTS545025B9SA02, 232.89 GB Serial ATA Device: MATSHITADVD-R UJ-898 USB Device: Built-in iSight, 0x05ac (Apple Inc.), 0x8507, 0x24400000 USB Device: Apple Internal Keyboard / Trackpad, 0x05ac (Apple Inc.), 0x0237, 0x04600000 USB Device: USB2.0 Hub, 0x05e3 (Genesys Logic, Inc.), 0x0608, 0x26200000 USB Device: USB Device, 0x09da (A-FOUR TECH CO., LTD.), 0x9090, 0x26240000 USB Device: Composite Device, 0x04f3 (ELAN Microelectronics Corportation), 0x0103, 0x26210000 USB Device: BRCM2070 Hub, 0x0a5c (Broadcom Corp.), 0x4500, 0x06100000 USB Device: Bluetooth Module, 0x05ac (Apple Inc.), 0x8218, 0x06130000
134	MinGW doesnt support fork(), thus daemonizing should be disabled on Windows
133	Sorry for all the pull request mess the last three times. In any case, this works on all three platforms and includes WXUI switch for UPnP enabling/disabling on the fly. See for discussion.
132	Removes the bitcoin miner from the code (mining thread, RPCs, GUI options).
131	* -daemon is ignored on windows * bitcoind only forks with -daemon set
130	I just downloaded bitcoin on Windows 7 and when I click on Address Book, I get this error: > ../../src/msw/toplevel.cpp(1079): assert "Assert failure" failed in SetIcons(): icon bundle doesnt contain any suitable icon > > Do you want to stop the program? > > You can also choose [Cancel] to suppress further warnings. Help > About shows: "Bitcoin version 0.3.20.2 BETA"
129	Bitcoin newbies like myself are wondering why we cant do transactions. From the literature, I think its because Bitcoin is still calculating some thousand hashes. But Im not sure. If the Bitcoin client displayed x / total blocks, using to retrieve the total blocks, then it will be more clear to users that progress is being made.
128	Copy/pasting from the original bug report I posted on fluxboxs bug tracker (http://sourceforge.net/tracker/?func=detail&aid=3208974&group_id=35398&atid=413960): The GUI for the virtual currency program Bitcoin (http://bitcoin.org) does not show up at all. There is just a very small blinking phenomenon during less than one second at program launch in the task bar (using gnome-panel). This program works fine under gnome and there is also another report of the same thing happening with Fluxbox on the Bitcoin forum. Bitcoin still shows up in top and seems to be running normally even though nothing shows up. This could be an incompatibility with wxwidgets. Versions tested: Fluxbox 1.3.1 and Fluxbox 1.1.1 (Ubuntu Maverick), Bitcoin 0.3.19 and 0.3.20 ----------------------------------------------------------------------------------------------------- I got this answer: Date: 2011-03-15 09:55:42 UTC Sender: akir i would point to bitcoins code and that they should fix their application:
127	Addresses from the sending tab in wxGUIs addressbook appear in listaccounts. The RPC will happily return that address even though it isnt yours. This is a problem when switching from wxGUI to a RPC UI. Fixed by adding foreach(const PAIRTYPE(string, string)& entry, mapAddressBook) uint160 hash160; if(AddressToHash160(entry.first, hash160) && mapPubKeys.count(hash160)) // This address belongs to me mapAccountBalances[entry.second] = 0; to make sure that mapAccountBalances doesnt contain any addresses that we dont have in our key list. My previous request didnt build. *whoops* Fixed for sure this time.
126	Addresses from the sending tab in wxGUIs addressbook appear in listaccounts. The RPC will happily return that address even though it isnt yours. This is a problem when switching from wxGUI to a RPC UI. Fixed by adding foreach(const PAIRTYPE(string, string)& entry, mapAddressBook) uint160 hash160; if(AddressToHash160(entry.first, hash160) && mapPubKeys.count(hash160)) // This address belongs to me mapAccountBalances[entry.second] = 0; to make sure that mapAccountBalances doesnt contain any addresses that we dont have in our key list.
125	Added new function, OutputLogMessageF, which contains most of the functionality of OutputDebugStringF. OutputLogMessageF has two additional parameters over OutputDebugStringF: an enum indicating the context of the message, and an enum indicating the verbosity level. The existing OutputDebugStringF forwards itself to OutputLogMessageF, passing enum values indicating a log context "Legacy", and verbosity "Debug". Additional functions have been added to support the feature. These functions: - add and parse command-line options -logcontexts and -loglevel to set the logging context and log verbosity (respectively) - change logging context and verbosity programattically Several of the calls to OutputDebugStringF in main.cpp (which are hidden by the macro printf) have been changed to use OutputLogMessageF, to demonstrate how the new logging system works. I have not changed all occurrences (there are still 90 occurrences in main.cpp, and I havent even touched most of the other files). The change has been designed in such a way that migration to the OutputLogMessageF can take place as developers work on various sections of the code. The existing printf calls still work, and can be viewed by using the command line options -loglevel=debug -logcontexts=legacy.
124	Updated dutch translation, by Sven Slootweg, and proof-read by me.
123	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
122	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
121	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
120	Updated Spanish translation for 0.3.21, Issue #39.
119	Unfortunately, -logtimestamps did not work perfectly with our using of printf logging, resulting in a lot of timestamps: ` 03/16/11 05:14:49 received: tx (225 bytes) 03/16/11 05:14:49 AcceptToMemoryPool(): accepted 85f30bcd02 03/16/11 05:14:50 sending: inv 03/16/11 05:14:50 (37 bytes) 03/16/11 05:14:50 03/16/11 05:14:50 received: inv (37 bytes) 03/16/11 05:14:50 got inventory: tx 85f30bcd026b9d5df310 have 03/16/11 05:14:50 sending: inv 03/16/11 05:14:50 (37 bytes) 03/16/11 05:14:50 03/16/11 05:14:50 sending: inv 03/16/11 05:14:50 (37 bytes) 03/16/11 05:14:50 03/16/11 05:14:50 received: inv (37 bytes) 03/16/11 05:14:50 got inventory: tx 85f30bcd026b9d5df310 have 03/16/11 05:14:50 received: addr (31 bytes) 03/16/11 05:14:50 sending: inv 03/16/11 05:14:50 (37 bytes) 03/16/11 05:14:50 03/16/11 05:14:51 sending: addr 03/16/11 05:14:51 (31 bytes) 03/16/11 05:14:51 03/16/11 05:14:51 sending: inv 03/16/11 05:14:51 (37 bytes) 03/16/11 05:14:51 03/16/11 05:14:52 sending: addr 03/16/11 05:14:52 (31 bytes) 03/16/11 05:14:52 03/16/11 05:14:53 ThreadRPCServer method=stop 03/16/11 05:14:53 DBFlush(false) 03/16/11 05:14:53 addr.dat refcount=0 `
118	Updated Spanish translation for 0.3.21, Issue #39.
117	Reason for this change: better mitigation of "penny-flooding." Behavior before this change: If you ran with the -limitfreerelay boolean arg set, bitcoin would stop relaying free transactions if it got more than 150Kbytes of them in any 10-minute period. Behavior after this change: Bitcoin will stop relaying free transactions based on an exponential rate-limiting function, where more transactions in a shorter period of time are more likely to be dropped (and the default average is to allow about 150Kbytes over 10 minutes). -limitfreerelay is changed from a boolean to a KBytes/minute rate; default is 15. Original code from Satoshi-- I added a couple of comments and allowed the rate to be set with the -limitefreerelay option.
116	This patch changes some internal structures to keep track of spentness of each wallet transaction output separately, to support partially-spent transactions. It contains: * an update to the data structures (vfSpent in CWalletTx instead of fSpent) * a backward-compatible update to the wallet disk format (written by Satoshi, Gavin knows). Old clients reading back an updated wallet will ignore partially spent transactions when creating new ones, and may report a wrong balance, though. * some helper functions (CWalletTx: IsSpent, MarkSpent, MarkDirty to reset cached values, GetAvailableCredit which only counts unredeemed outputs) * update to SelectCoins and CreateTransaction to select source transaction outputs separately instead of per whole transaction. This fixes the issue mentioned in The reason for writing this patch: im also working on an import/export wallet patch, where situations with partially spent transactions become hard to avoid. Everything except loading a new wallet into an old client is tested on the testnet, including crafted situations with partially-spent transactions.
115	See the diff. Its an effectively useless if clause.
114	Finally a seemingly proper patch for UPnP Port Mapping. Note that this one still does not have proper support in the makefiles for anything but UNIX.
113	Finally a seemingly proper patch for UPnP Port Mapping. Note that this one still does not have proper support in the makefiles for anything but UNIX.
112	This allows UPnP mapping via miniupnpc when USE_UPNP is set. miniupnpc must be installed as a system library to compile with it.
111	This implements UPnP Port mapping via miniupnpc.
110	Add timestamps to debug.log when -logtimestamps is set. Follow up to:
109	This change adds DNS (via "-dnsseed") as an alternative method for seeding P2P node addresses.
108	Idea from Satoshi to improve/automate the -rescan feature: Whenever a new block is accepted, the best block pointer is updated in blkindex.dat. If you also record it in wallet.dat (as a CBlockLocator), then on startup, if wallets last seen best block is further back than blkindex.dats, it should rescan starting from there.
107	Intelligent run script. Selects correct architecture (64 bit or 32 bit) and runs the right version of Bitcoin. Should be placed in the top level dir during release. Added in argument passing. I closed old pull request, See I think for release you should offer 2 downloads (like Ubuntu does): The default Linux release marked as Bitcoin (Recommended) and the 64 bit version Bitcoin 64 bit. Nice and simple. So feel free to close this pull request as long as dual release packages are agreed upon. Put bitcoin in the top level directory. Hide bitcoind in a subdirectory. The current release layout is very confusing for new users.
106	Need for this is being driven by mining pool operators; it is much more efficient to pay lots of people with one transaction rather than lots of little transactions. Old clients will refuse to relay sendmany transactions, so to ensure timely inclusion in a block mining pool operators should either upgrade together and connect their clients together or wait until a good percentage of the network has had a change to upgrade to the next version of bitcoin.
105	Sorry to resubmit this, I spent some more time testing and messed up my repo. In any case there are no changes from the original. Just gavins portoption and the removal of the 2h penalty for non-standard port clients.
104	Intelligent run script. Selects correct architecture (64 bit or 32 bit) and runs the right version of Bitcoin. Should be placed in the top level dir during release. See
103	Option to set an additional path to which the wallet is backed up whenever a transaction is made. This can be a network path, dropbox or whatever secondary place. Alternatively, the backup can be encrypted with a password.
102	To avoid confusion for new users we could rename the "Generate Coins" option to something like "Work on Blockchain". There are a lot of places where the term "generate" appears (statusbar, -help, -generate, setgenerate, getinfo, key in wallet.dat). Changing the menu and statusbar strings might be enough, though.
101	Shy client patch from Hal Finney: "On incoming connections, it wont send a version message until it receives one. This can help make port scanning identification harder."
100	Feature request from the forums: Is there any way to export my transaction history to a spreadsheet? CSV format would be fine, basically what I want to do is export the table seen in the bitcoin client that lists each transaction time, receiving address, and amount. Then I can tally up the coins received at each address over time.
99	Good Idea from Mr. Nakamoto: Whenever a new block is accepted, the best block pointer is updated in blkindex.dat. If you also record it in wallet.dat (as a CBlockLocator), then on startup, if wallets last seen best block is further back than blkindex.dats, it should rescan starting from there.
98	Simple solution to just return an error if the address provided is invalid.
97	Always let your own transactions into blocks you create
96	bitcoind will fork again, bitcoin parses -daemon and -server This fixes
95	See
94	The following commit appears to have broken -daemon mode for a bitcoind compile: 8314b7f5e68007db1ffe12a0fe5d3204d4e79d2d is the first bad commit commit 8314b7f5e68007db1ffe12a0fe5d3204d4e79d2d Author: Matt Giuca <matt.giuca@gmail.com> Date: Sat Feb 26 08:58:15 2011 +1100 makefile.unix: Removed redundant use of wx-config in DEFS (it was being included twice). Also changed wx-config --cppflags to --cxxflags. I am not sure what the difference is supposed to be, but --cppflags does not include -pthread. :100644 100644 b36aa2c6a8cb4b6a22f053eccf70c88217d2f445 383de9aded37750f1f7cff5290c4dfab40545f09 M makefile.unix
93	See Buffer should permit largest block.
92	This penalty is unnecessary as there is already a limit of one outgoing connection per /16.
91	Add timestamp to each line of debug.log.
90	1. Timestamp each line in debug log, for easier problem tracking. 2. Close and re-open debug log every 2000 lines, to enable log rotation software to replace the log while bitcoin continues uninterrupted operation.
89	Process: bitcoin [14971] Path: /Applications/Bitcoin.app/Contents/MacOS/bitcoin Identifier: org.bitcoin.bitcoin Version: 0.3.19 (320) Code Type: X86 (Native) Parent Process: launchd [270] Interval Since Last Report: 20393532 sec Crashes Since Last Report: 4556 Per-App Interval Since Last Report: 28 sec Per-App Crashes Since Last Report: 3 Date/Time: 2011-03-02 18:13:30.793 -0500 OS Version: Mac OS X 10.5.8 (9L31a) Report Version: 6 Anonymous UUID: CE933EF1-C0B6-4071-8DE8-46E25586523B Exception Type: EXC_BREAKPOINT (SIGTRAP) Exception Codes: 0x0000000000000002, 0x0000000000000000 Crashed Thread: 0 Dyld Error Message: Symbol not found: _fopen$UNIX2003 Referenced from: /Applications/Bitcoin.app/Contents/MacOS/bitcoin Expected in: /usr/lib/libSystem.B.dylib ========================= Model: MacBook1,1, BootROM MB11.0061.B03, 2 processors, Intel Core Duo, 1.83 GHz, 1 GB Graphics: kHW_IntelGMA950Item, GMA 950, spdisplays_builtin, spdisplays_integrated_vram Memory Module: global_name AirPort: spairport_wireless_card_type_airport_extreme (0x168C, 0x86), 1.4.16.2 Bluetooth: Version 2.1.9f10, 2 service, 1 devices, 1 incoming serial ports Network Service: Built-in Ethernet, Ethernet, en0 Network Service: AirPort, AirPort, en1 Serial ATA Device: ST96812AS, 55.89 GB Parallel ATA Device: MATSHITACD-RW CW-8221 USB Device: My Book 1110, (null) mA USB Device: Built-in iSight, (null) mA USB Device: U3 Cruzer Micro, (null) mA USB Device: Apple Internal Keyboard / Trackpad, (null) mA USB Device: IR Receiver, (null) mA USB Device: Bluetooth USB Host Controller, (null) mA
88	CreateBlock requires that very low-priority transactions pay a fee; this teaches CreateTransaction to use the same rules.
87	I have a lot of addresses Ive created asking for donations and I dont always think about tracking them every single place that I leave them. I envision a time when I will retire or loose or otherwise want to move a receiving address from one bitcoin client to another. It would be nice to have an easy way to export a public/private keypair from one client and import it in another. Perhaps thered even be a way to email them or send them between two clients RPC channels. A followup to this is to also be able to share my bitcoin address book for outgoing payments that I send to others.
86	currently (2011/03/01) a backlog of transactions that dont seem make it into blocks is building up (according to ArtForz now 670 transactions). People are starting to complain, see for an example. This was discussed on #bitcoin-dev ArtForz> that tx should have a score of 20567855 ArtForz> so it falls short of the dPriority > COIN * 144 / 250 test ArtForz> and as tx size is > 4000, fAllowFree is never true for it theymos> Ah. So it will never confirm? ArtForz> probably not ArtForz> looks like the tx-sending code needs some fixing molecular> like not generate a tx with a score too low, or suggest to add a fee? ArtForz> yep ArtForz> check size and priority of transaction, if its > 4kB and score < 57600000 require min fee ArtForz> maybe reduce the size limit to 3.5k or so, otherwise it can only get into an otherwise empty block This also seems to imply the possiblity of a DoS-Attack on node RAM, since the tx-queue is kept im RAM. Maybe the transaction cache should not be unlimited?
85	Patch from luke-jr
84	As a user, I would like to move bitcoins between wallets without having to use transactions (which could incur fees).
83	Just a simple patch to add a .gitignore file so the generated executable files dont show up in git status or accidentally get committed.
82	Hi, This is a response to the [other pull request](https://github.com/bitcoin/bitcoin/pull/52) by ojab. I didnt want to make a new pull request but I couldnt find another way to do it. The last comment by tcatm was "This patch works ... outputs annoying errors (wx-config not found) when building bitcoind. Can you fix that?" I have fixed it in this branch (it no longer tries to include wx at all for any non-GUI files), and updated the readme to say its OK to use wx 2.9.1 now. It now builds bitcoind just fine even if your system has no trace of wxWidgets.
81	I tried to build bitcoin following the instructions in build-unix.txt. I suppose I should have read this line: "The build hasnt been updated to work with wxWidgets 2.9.1 yet." Anyway, the makefile is not very robust in specifically including wx files directly in the INCLUDEPATHS and WXLIBS. I had a bunch of build problems which were all solved by simply using the utility that comes with wx, wx-config. This utility is automatically installed by wxs make install, and will provide the correct command-line arguments for including and linking correctly. I have updated the makefile to use these tools rather than hand-coding the paths. It works for me, but I havent tested it on multiple configurations. If it works for other people (and I figure it will be much more robust in the long run), then it should be merged. My branch also adds .gitignore, which I find useful.
80	Hal explained this [here](http://www.bitcoin.org/smf/index.php?topic=3638.msg52145#msg52145). He experienced this because he shared one of his private keys with everyone, but it can happen also if you have two separate wallet files (on two machines, for example) with the same private key. Spending money in one wallet will not show up as a withdrawal in the other, because it is only scanning for inputs to the wallet, not outputs.
79	This modifies FormatMoney to display full-precision values (with trailing zeroes trimmed correctly-- e.g. 0 is 0.00 but 0.00010000 displays as 0.0001). And ParseMoney allows entry of full-precision values. And JSONs AmountFromValue doesnt round to two places, so you can send/move full-precision values.
78	to reproduce: * make a new user, install bitcoin * start "bitcoin -server -testnet" -> it tells you to create configfile in ~/.bitcoin/testnet/bitcoin.conf * create ~/.bitcoin/testnet/bitcoin.conf with rpcpassword=xxx * start again -> same error * mv ~/.bitcoin/testnet/bitcoin.conf ~/.bitcoin/bitcoin.conf * start again -> works
77	The process for creating Windows builds is manual and error-prone. There should be a bash script (run under MSYS) or batch file that: 1. Fetches a particular commit from the git or svn repository 2. runs make clean, then makes bitcoin.exe and bitcoind.exe 3. copies or exports all of the source files into the setup/src folder 4. copies bitcoin.exe to setup/ and bitcoind.exe to setup/daemon 5. runs command-line 7za.exe to create the setup .zip file 6. runs command-line nsis installer to create the setup .exe file
76	Addresses from the sending tab in wxGUIs addressbook appear in listaccounts. The RPC will happily return that address even though it isnt yours. This is a problem when switching from wxGUI to a RPC UI.
75	Thanks to nolisten patch, "bitcoin.exe -nolisten -datadir=<path>" should be able to start second Bitcoin client in Windows. Probably because some additional checks, this is not possible.
74	From/Message fields fool some users into thinking they could include a message with a transaction. This removes the feature from the GUI (but not from the code) and only shows address and amount fields in SendDialog. edit: It also changes the displayed sample address to an invalid one so users dont send coins there.
73	I believe m0mchil was able to compile a full openssl1.0.0c with mingw, so for the next version of Windows bitcoin we should link against ssleay, ship the ssleay dll, and turn on support for connecting via
72	Still todo: set -maxconnections default.
70	Also i see delete address works good, but add new address asks not only label but also address itself. How can a user give his own 33 character address to network? I dont know how network will allow that address, what if already created? Also there is no option to organize. Date wise, address wise, credit or debit wise, description wise etc. It shows default date wise only & that cannot be changed. As said before send coins & address book button gets shadows & also the button pressed look stays that way(the box goes down) , but minimize & bringing it back from task bar removes shadows & pressed button look.
69	I see some graphical problems of displaying the client window. After each time i clk send coins or address book, the letters have shadows. also the background , etc is bit rough, not nice like in last version. It likes using classic menu themes in windows instead of normal.
68	It should be possible to specify a location for the wallet.dat file.
67	but does with the older boost_1_42_0
66	There is no way to list address book, or add, edit, delete an entry without using the GUI...
65	As opposed to the bitcoin GUI, "bitcoind listransactions" doesnt return: - Date and time for transactions - Generated blocks during maturation
64	Im opening this for a blind bitcoin user: There are a couple concerns I have with the accessibility of the GUI in Bitcoin. The "Send Coins" and "Addressbook" buttons are not in the tabstop list, so a blind person with a screen reader cannot tab to and activate these buttons. Also, the current address and balance are also not accessible via pressing tab. When arrowing through the list of transactions, the screen reader, rather than starting out with the status (number of confirmations), reads a long number, usually starting out with 00. If you wait long enough, the rest of the table is read, but unfortunately that is a while to wait. Also, when bringing up transaction details, there is an html window displayed, but absolutely no feedback is given from the screen reader. Last, in the addressbook, tabbing from control to control works fine, but when shift-tabbing, only the list and tab control are tabbed to. Of course, most of these concerns, excluding the HTML window which isnt read at all, are not a big deal for myself, as Im a power user and can use my screen readers review cursor to read most of the controls. However, there are many blind people who find this method of exploring windows confusing (many will ask "how did you know that was there?"), and these fixes will make it easier for them to explore the Bitcoin interface on their own and use it successfully. The screen reader Im using is NVDA, a free and open source screen reader, which can be found at
63	As discussed in Issue #5 the protocol version should be differentiated from the client version. It makes live so much easier for alternative implementations.
62	When using Js-remote I had some disconnections, and it was impossible to reconnect. This should fix it.
61	Debug log should have per-line timestamps, just like other logs (such as system logs). This greatly aids in debugging problems.
60	Settings should be stored only in bitcoin.conf so the wallet.dat is only a wallet. We would need... 1) config file writer so GUI can change settings 2) code that moves settings from wallet.dat to bitcoin.conf 3) RPCs that allow to set/change settings. This will replace setgenerate Any thoughts on this?
59	Please pull. :) Hope this gets us one step closer to the .20 release.
58	
57	
56	Ive merged the CMake changes from and Ive tested it on Ubuntu Lucid.
55	Ref .
54	instead, assign the address to "" account
53	New -testnet genesis block, and difficulty adjustment rules.
52	Makes bitcoin buildable with non-debug/shared/etc wxWidgets without makefile changes.
51	I think its important that the "move" command handles subcent transactions without silently rounding amounts at two decimal places. It is common in a lot of cases to handle these small amounts (bitcoin central for example). I want to keep using it as a second security level on bitcoin central, but right now its not possible because the DB-tracked accounts slowly get out of sync with the bitcoin ones, and at some points transaction get rolled back because some bitcoin account does not have enough funds whereas the DB-tracked one has enough credit to complete the transaction. If I try to move 0.001 BTC between two accounts I get a "true" returned even though I should have gotten an "Invalid amount" with the previous round-everything approach since nothing would have changed. With this, rounding is only disabled for the "move" command.
50	Trying to move 0.001 BTC from an account to another results in no change in the balances. On line #68 of rpc.cpp amount gets rounded at two decimal places, I believe there should be an exra argument allowing to bypass the rounding step in the AmountFromValue function. Otherwise, the accounts functionality wont be suited for trading platforms where subcent balances are very common.
49	When application is located in directory with national characters in its name, bitcoin crash on segfault. OS: Ubuntu 10.10 Directory: /home/andrejka/Staen/bitcoin ("download", default folder of Czech Ubuntu) Moving bitcoin app to directory "/home/andrejka/test/" solved the problem.
47	
46	Simple code to enable encryption of the database. Uses Berkeley DB built in AES encryption with a password from the new dbpassword option. 1FabZdhzEQJC7qJxb3k1RHVMf5gctB8qbh
45	See: Note: Current plan it so switch to "Qt" bitcoin GUI after version 0.4 is released
44	
43	The code updates database for every seed node every time we make a new outgoing connection. This isnt necessary.
42	The -maxconnections=N command line argument is meant to limit the total number of connections to N. It reserves 8 (or less, if N<8) slots for outgoing connections, and is meant to allow N-8 incoming connections. But the calculation is slightly wrong, and the existing outgoing connections are counted twice. This fixes it.
41	
40	The -rpcssl command line option is a boolean, like -server, -daemon, -testnet, etc. Specifying -rpcssl=1 is the same as just -rpcssl, as for any other boolean flag, so lets show it the same in the help text.
39	A few help options were changed/added, so new translations are needed.
38	Currently, 4way (SSE2) hashing is done (if supported) unless -4way is specified, in which case it isnt, due to a bug in the processing of the -4way command line argument.
37	Add new command line argument "-printtoconsole" to send debugging output to the console instead of to debug.log. The code for this was already in place, but there was no way other than editing the source and rebuilding to turn it on.
36	The --help text wasnt showing the default values for three of the options, as follows: -rpcport (default: 8332) -rpcconnect (default: 127.0.0.1) -keypool (default: 100) Edited the --help text to include the defaults.
35	Its just a typo in the help text.
34	bitcoin --help tells me about -rpcsslcertificatchainfile but it should be -rpcsslcertificatechainfile
33	Unset the background color for the statusbar so it will use the system default. If only background color is set explicitly (and not also foreground), users with light-on-dark system themes get unreadable white text on light-grey background. Could also add an explicit foreground color, but I see no reason for the barely noticeable difference in the bg color in the first place. (I tried editing the .fbp file with the wxFormBuilder, but it ended up changing the indentation (so git thinks every line has changed), so i just edited the template and the generated file by hand.)
32	Fixes issue #31
31	it should be IMO
30	See
29	When creating a new account with getaccountaddress, assigning that address to another account and then getting a new address from getaccountaddress still returns the old address (thus not creating a new account). Steps to reproduce: getaccountaddress "foo" returns: xyz123 setaccountaddress "xyz123" "" getaccountaddress "foo" returns: xyz123
28	tcatm reports: *** glibc detected *** ./bitcoind: corrupted double-linked list: 0x0a78b468 *** ... possibly in listaccounts.
27	Dumb bug: listaccounts N ignores the N. My only excuse is that this is a hard feature to test, because transactions confirmations just keep happening, at unpredictable times...
26	I was able to recreate an issue where after sending bitcoins and then restoring the wallet the transaction never shows any confirmations even though the transaction did make it to the recipient and does appear in BlockExplorer. The steps I performed were: 1.) Create a new wallet 2.) Requested a new address 3.) Received some seed bitcoins (two transactions) to that new address. 4.) Made an archive of my wallet. 5.) Sent two test payment transactions. (to 16W7FAZ8tcX1gDLgDupfAKfpGLYd7XcPRe a 0.02 BTC and a 0.03 BTC) 6.) Recover wallet from archive. After many blocks passed (more than an hour), the confirmations still shows 0/unconfirmed. To confirm that the payment was sent, I confirmed: To try to get a clean load of blocks, I then purged the blk\*.dat, __db\*, addr.dat, \*.log and database/\* (i.e., all files except wallet.dat) and started bitcoin again. $ bitcoin -datadir=. After letting the client catch up to the most recent block, ... and then waiting at least an hour further, my two test transactions still show 0/unconfirmed. The test wallet (with 0 BTC balance) that can be used to recreate this issue is at:
25	tcatm has given me a -testnet wallet where sum(account) does not equal total server balance. That should be impossible. He did copy the wallet and use it on two different bitcoinds, but it should still be impossible for the accounts balances to get out of sync with the total wallet balance.
24	Adds a "details" array to gettransaction output. e.g. { "amount" : 0.00000000, "fee" : 0.00000000, "confirmations" : 609, "txid" : "b593920033b905c0e7c1d82d5b3e15a114841fa916719e968add3212e07c73a0", "time" : 1294342907, "details" : [ { "account" : "Test2", "address" : "mtQArCTnZHGsPf89jus6khxriYsJbU673P", "category" : "send", "amount" : -11.00000000, "fee" : 0.00000000 }, { "account" : "Test1", "address" : "mtQArCTnZHGsPf89jus6khxriYsJbU673P", "category" : "receive", "amount" : 11.00000000 } ] }
23	Cross Origin Resource Sharing lets servers support cross-origin Javascript. It is supported by the latest browsers (although IE support is... different), and involves sending CORS headers in responses. Adding this enables Javascript code running in a browser to connect with any bitcoin/bitcoind that allows RPC connections from the browsers IP address and has the right rpc username/password.
22	I wrote a script that can be run under scapy that will test the list of hard-coded IP addresses that the Bitcoin client will attempt to use for bootstrapping wihen IRC is not responding. When I tested, I only got a response on 70 of the 230 addresses, the remaining did not answer within the 5 second response time I arbitrarily chose for the script. The addresses in the script were copied from the pnSeed assignment in: Script: Usage: $ sudo scapy -c test_bootstrap_backup_addresses.py Results:
21	Simple oversight.
20	(from Allow extra parameters to be attached to an address/account at creation and modified later: * $uri: JSON-RPC callback URI * $total: Transaction total in BTC * $timeout: Transaction expiration interval (sec) * $minconf: Transaction minimum confirmations required * $cert: PEM certificate for callback target server Additional options passed in should also cover these use cases: Fire $uri, including parameters for the current balance and the most recent payment received, when: * Any payment is received to the address/account with $minconf confirmations. * Balance on address/account >= $total with $minconf confirmations. * $timeout expires without balance on address/account >= $total and without at least $minconf confirmations. With this, bitcoind is ready to become a fully-fledged payment back-end for internet commerce.
19	
18	I generated block 100283 and collected a sub bitcent transaction fee. I get an "Insufficient funds" error when trying to send my exact balance to another address. It seems that there is either : * wrong behaviour (should send the amount), or * wrong error message, (the balance is ok but the client forbids me to send it) Block : 000000000003d014210dcffd602715545bce976f0f257d99279c83c2778e7150 Heres the trace <pre>david@box:~$ bitcoin getinfo { "version" : 31900, "balance" : 50.00638641, "blocks" : 100760, "connections" : 48, "proxy" : "", "generate" : true, "genproclimit" : -1, "difficulty" : 14484.16236123, "hashespersec" : 9273499, "testnet" : false, "keypoololdest" : 1291071649, "paytxfee" : 0.00000000, "errors" : "" } david@box:~$ bitcoin sendtoaddress 12DidCRRT9fqmSBReRNN8KjCktYGTVU1Jj 50.00638641 error: {"code":-4,"message":"Insufficient funds"}</pre>
17	How does the minconf parameter for listaccounts method work? It appears to me that output is the same regardless of the value of minconf.
16	From Doug Grinbergs: I took a quick look look at the Mac Bitcoin beta app and thought Id share this UI feedback: 4539 About box is app modal 4540 No File menu 4541 No Window menu 4542 Address Book window is app modal 4543 Edit Address is app-modal dialog; could be Address Book sheet 4544 Edit Address: <Esc> doesnt operate [Cancel] button 4545 Main window: no reasonable minimum size 4546 No View menu 4547 Prefs: no <Command><,> keyboard shortcut 4548 Prefs window is named Options 4549 Prefs window is app-modal 4550 _createMenuRef called with existing principal MenuRef already associated with menu 4551 Method selectRow:byExtendingSelection: in class wxNSTableView is deprecated 4552 Your Receiving Address menu item has ellipsis; no user input required 4553 About menu item has ellipsis; no user input required 4554 No user prefs stored in org.bitcoin.bitcoin.plist
15	Itd be nice if there was a -externalip=123.45.6.7 option in case your ISP is doing something wonky with requests to whatismyip.com
14	There are several threads on the bitcoin forums proposing bitcoin: URI schemes and a bitcoin-request MIME type. Functionality desired is: + Click a link on a website + bitcoin client launches, shows a dialog box with payment details that you then approve to send payment. Security is obviously a huge issue here; will have to be careful that none of the tricks hackers use to defraud users will work (e.g. clickjacking, HTTP man-in-the-middle rewriting of bitcoin addresses...).
13	Itd be cool if there was some mechanism for secure communication between sender/receiver. Ideally, the mechanism would be secure from eavesdroppers and authenticated by the bitcoin addresses involved (so would be as anonymous as those addresses). Also ideally either store-and-forward (email-like) AND/OR real-time (instant-message-like) communication should be possible. Storing the messages in the block chain as part of transactions (as proposed by several people) is probably NOT the right approach. And building the actual message communication into core bitcoin may not be the right approach. Use cases to design for: + Store wants to send anonymous customer information on status of an order they paid for a while ago. (example: "free upgrade for the software you bought last week is available" or "warning: the file you downloaded yesterday has been reported to contain malware") -- what about possiblity of spam? + Customer wants to send authenticated message about a payment they sent (example: "I messed up the shipping address, please send to 123 main street instead of 213 main street" or "the file I just got from you contains a virus") Bitcoin knows how to sign transactions with the public key corresponding to a bitcoin address; the key feature needed is, Gavin thinks, authentication: are you *really* communicating with the sender/receiver of *bitcoin address*? Perhaps bitcoin could support a function "please sign this arbitrary stuff with *bitcoin address for which you have the private key* and return the digital signature"; that might be sufficient to integrate with existing secure messaging infrastructure (like PGP email).
12	Design and implement a RPC call to register a HTTP-JSON-RPC callback, and have it get called when blocks and/or "transactions of interest" occur. Gavin has already implemented a version of this; unresolved issues are: + How to specify which transactions are "of interest" ? Transactions to a specific address after A/B/C confirmations? All transactions to (or from?) the wallet? All transactions to (or from?) a specific account? Note: information reported should be same as gettransaction. + What information to report about blocks (if any). Perhaps implement a getblock before monitorblock.
11	With the current client it is impossible to start mulitple instances of bitcoin on one system, as they compete for the listen port. This patch adds a command line option to not accept bitcoin connection from outside. This can be useful in some cases: * Testing e-commerce software on the testnet with multiple clients on one machine (akin to paypal sandbox testing) * When multiple users on one shared server want to run the bitcoin client * As a primitive security measure Of course it would be even better to specify a port to listen on on the command line, but as I understood the current protocol has no support for alternative ports, so this would be useless.
10	Three changes to listtransactions: Add address to listtransactions output. "multisends" (non-standard, use one transaction to send to multiple addresses) generate N "category":"send" lines. Bug fix: listtransactions wasnt reporting pay-by-IP-connection receive transactions.
9	From piotr; works for Gavin on Linux and Mac.
8	Im imagining an RPC call something like: signtext &lt;bitcoinaddress&gt; "MESSAGE..." ... returns signature, in some standards-compliant format, assuming bitcoinaddress corresponds to a public key in our wallet. There should also be: verify &lt;bitcoinaddress&gt; "MESSAGE" "SIGNATURE" ... which return true or false or "I have no idea what the public key for &lt;bitcoinaddress&gt; is".
6	Actually it would be even nicer if we could treat our wallet.dat file as a generic keystore, importing and exporting keys. This would allow merging and splitting of wallets as well, besides signatures as suggested above. See :
5	As there is a String field (SubVersionNum) I think it would be better not to increment the protocol version along with the client version number. It makes creating alternative clients easier.
4	
3	Often requested feature: encrypt private keys in the wallet.dat file, so a password is required for a send transaction.
2	Should we add features to bitcoin to enable the use of bitcoins as a long-term, secure, store-of-value for wealth? Possible features to enable this type of use: + Easy yet ultra-safe way to export part of you wallets balance to a file. + Easy way to verify the balance stored in one of those exported files.
1	The idea is to enable mobile or other not-always-connected-to-the-network clients, where the wallet is kept (encrypted, probably) on the mobile device, and the device periodically communicates with a bitcoin-network-connected node to: + Update balance for keys in its wallet + Submit signed transactions to the network
